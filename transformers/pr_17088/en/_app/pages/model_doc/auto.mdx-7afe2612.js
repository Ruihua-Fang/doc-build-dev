import{S as swt,i as lwt,s as iwt,e as a,k as l,w as F,t as o,M as dwt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as cwt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as zqr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function fwt(A){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,Ow,gf,qe,Xe,ci,An,Vw,yn,Ln,Xw,fi,xn,zw,mi,hf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),li=a("code"),mf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ii=a("code"),di=o('"new-model"'),Ow=o(")."),gf=l(),qe=a("p"),Xe=o("Likewise, if your "),ci=a("code"),An=o("NewModel"),Vw=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),Xw=o(`, make sure its
`),fi=a("code"),xn=o("config_class"),zw=o(` attribute is set to the same class you use when registering the model (here
`),mi=a("code"),hf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var d$=s(p);m=r(d$,"NewModelConfig"),d$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var gi=s(d);h=r(gi,"PretrainedConfig"),gi.forEach(t),Mo=r(Ae,`, make sure its
`),li=n(Ae,"CODE",{});var c$=s(li);mf=r(c$,"model_type"),c$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ii=n(Ae,"CODE",{});var f$=s(ii);di=r(f$,'"new-model"'),f$.forEach(t),Ow=r(Ae,")."),Ae.forEach(t),gf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ci=n(Eo,"CODE",{});var Ea=s(ci);An=r(Ea,"NewModel"),Ea.forEach(t),Vw=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var m$=s(yn);Ln=r(m$,"PreTrainedModel"),m$.forEach(t),Xw=r(Eo,`, make sure its
`),fi=n(Eo,"CODE",{});var pf=s(fi);xn=r(pf,"config_class"),pf.forEach(t),zw=r(Eo,` attribute is set to the same class you use when registering the model (here
`),mi=n(Eo,"CODE",{});var g$=s(mi);hf=r(g$,"NewModelConfig"),g$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,li),e(li,mf),e(g,et),e(g,ii),e(ii,di),e(g,Ow),b(ze,gf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ci),e(ci,An),e(qe,Vw),e(qe,yn),e(yn,Ln),e(qe,Xw),e(qe,fi),e(fi,xn),e(qe,zw),e(qe,mi),e(mi,hf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(gf),ze&&t(qe)}}}function mwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hwt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function pwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uwt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function _wt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Twt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ewt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Awt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ywt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $wt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Swt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Owt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ywt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _At(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $At(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i6t(A){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,Ow,gf,qe,Xe,ci,An,Vw,yn,Ln,Xw,fi,xn,zw,mi,hf,Ma,ze,Ae,d$,gi,c$,f$,Eo,Ea,m$,pf,g$,Bje,EPe,hi,uf,zZ,Qw,Pje,QZ,Ije,CPe,$n,qje,WZ,Nje,jje,HZ,Dje,Gje,wPe,Ww,APe,h$,Oje,yPe,_f,LPe,pi,bf,UZ,Hw,Vje,JZ,Xje,xPe,Co,Uw,zje,Jw,Qje,p$,Wje,Hje,Uje,Yw,Jje,YZ,Yje,Kje,Zje,Er,Kw,eDe,KZ,oDe,rDe,ui,tDe,ZZ,aDe,nDe,eee,sDe,lDe,iDe,y,vf,oee,dDe,cDe,u$,fDe,mDe,gDe,Ff,ree,hDe,pDe,_$,uDe,_De,bDe,Tf,tee,vDe,FDe,b$,TDe,MDe,EDe,Mf,aee,CDe,wDe,v$,ADe,yDe,LDe,Ef,nee,xDe,$De,F$,kDe,SDe,RDe,Cf,see,BDe,PDe,T$,IDe,qDe,NDe,wf,lee,jDe,DDe,M$,GDe,ODe,VDe,Af,iee,XDe,zDe,E$,QDe,WDe,HDe,yf,dee,UDe,JDe,C$,YDe,KDe,ZDe,Lf,cee,eGe,oGe,w$,rGe,tGe,aGe,xf,fee,nGe,sGe,A$,lGe,iGe,dGe,$f,mee,cGe,fGe,y$,mGe,gGe,hGe,kf,gee,pGe,uGe,L$,_Ge,bGe,vGe,Sf,hee,FGe,TGe,x$,MGe,EGe,CGe,Rf,pee,wGe,AGe,$$,yGe,LGe,xGe,Bf,uee,$Ge,kGe,k$,SGe,RGe,BGe,Pf,_ee,PGe,IGe,S$,qGe,NGe,jGe,If,bee,DGe,GGe,R$,OGe,VGe,XGe,qf,vee,zGe,QGe,B$,WGe,HGe,UGe,Nf,Fee,JGe,YGe,P$,KGe,ZGe,eOe,jf,Tee,oOe,rOe,I$,tOe,aOe,nOe,Df,Mee,sOe,lOe,q$,iOe,dOe,cOe,Gf,Eee,fOe,mOe,N$,gOe,hOe,pOe,Of,Cee,uOe,_Oe,j$,bOe,vOe,FOe,Vf,wee,TOe,MOe,D$,EOe,COe,wOe,Xf,Aee,AOe,yOe,G$,LOe,xOe,$Oe,zf,yee,kOe,SOe,O$,ROe,BOe,POe,Qf,Lee,IOe,qOe,V$,NOe,jOe,DOe,Wf,xee,GOe,OOe,X$,VOe,XOe,zOe,Hf,$ee,QOe,WOe,z$,HOe,UOe,JOe,Uf,kee,YOe,KOe,Q$,ZOe,eVe,oVe,Jf,See,rVe,tVe,W$,aVe,nVe,sVe,Yf,Ree,lVe,iVe,H$,dVe,cVe,fVe,Kf,Bee,mVe,gVe,U$,hVe,pVe,uVe,Zf,Pee,_Ve,bVe,J$,vVe,FVe,TVe,em,Iee,MVe,EVe,Y$,CVe,wVe,AVe,om,qee,yVe,LVe,K$,xVe,$Ve,kVe,rm,Nee,SVe,RVe,Z$,BVe,PVe,IVe,tm,jee,qVe,NVe,ek,jVe,DVe,GVe,am,Dee,OVe,VVe,ok,XVe,zVe,QVe,nm,Gee,WVe,HVe,rk,UVe,JVe,YVe,sm,Oee,KVe,ZVe,tk,eXe,oXe,rXe,lm,Vee,tXe,aXe,ak,nXe,sXe,lXe,im,Xee,iXe,dXe,nk,cXe,fXe,mXe,dm,zee,gXe,hXe,sk,pXe,uXe,_Xe,cm,Qee,bXe,vXe,lk,FXe,TXe,MXe,fm,Wee,EXe,CXe,ik,wXe,AXe,yXe,mm,Hee,LXe,xXe,dk,$Xe,kXe,SXe,gm,Uee,RXe,BXe,ck,PXe,IXe,qXe,hm,Jee,NXe,jXe,fk,DXe,GXe,OXe,pm,Yee,VXe,XXe,mk,zXe,QXe,WXe,um,Kee,HXe,UXe,gk,JXe,YXe,KXe,_m,Zee,ZXe,eze,hk,oze,rze,tze,bm,eoe,aze,nze,pk,sze,lze,ize,vm,ooe,dze,cze,uk,fze,mze,gze,Fm,roe,hze,pze,_k,uze,_ze,bze,Tm,toe,vze,Fze,bk,Tze,Mze,Eze,Mm,aoe,Cze,wze,vk,Aze,yze,Lze,Em,noe,xze,$ze,Fk,kze,Sze,Rze,Cm,soe,Bze,Pze,Tk,Ize,qze,Nze,wm,loe,jze,Dze,Mk,Gze,Oze,Vze,Am,ioe,Xze,zze,Ek,Qze,Wze,Hze,ym,doe,Uze,Jze,Ck,Yze,Kze,Zze,Lm,coe,eQe,oQe,wk,rQe,tQe,aQe,xm,foe,nQe,sQe,Ak,lQe,iQe,dQe,$m,moe,cQe,fQe,yk,mQe,gQe,hQe,km,goe,pQe,uQe,Lk,_Qe,bQe,vQe,Sm,hoe,FQe,TQe,xk,MQe,EQe,CQe,Rm,poe,wQe,AQe,$k,yQe,LQe,xQe,Bm,uoe,$Qe,kQe,kk,SQe,RQe,BQe,Pm,_oe,PQe,IQe,Sk,qQe,NQe,jQe,Im,boe,DQe,GQe,Rk,OQe,VQe,XQe,qm,voe,zQe,QQe,Bk,WQe,HQe,UQe,Nm,Foe,JQe,YQe,Pk,KQe,ZQe,eWe,jm,Toe,oWe,rWe,Ik,tWe,aWe,nWe,Dm,Moe,sWe,lWe,qk,iWe,dWe,cWe,Gm,Eoe,fWe,mWe,Nk,gWe,hWe,pWe,Om,Coe,uWe,_We,jk,bWe,vWe,FWe,Vm,woe,TWe,MWe,Dk,EWe,CWe,wWe,Xm,Aoe,AWe,yWe,Gk,LWe,xWe,$We,zm,yoe,kWe,SWe,Ok,RWe,BWe,PWe,Qm,Loe,IWe,qWe,Vk,NWe,jWe,DWe,Wm,xoe,GWe,OWe,Xk,VWe,XWe,zWe,Hm,$oe,QWe,WWe,zk,HWe,UWe,JWe,Um,koe,YWe,KWe,Qk,ZWe,eHe,oHe,Jm,Soe,rHe,tHe,Wk,aHe,nHe,sHe,Ym,Roe,lHe,iHe,Hk,dHe,cHe,fHe,Km,Boe,mHe,gHe,Uk,hHe,pHe,uHe,Zm,Poe,_He,bHe,Jk,vHe,FHe,THe,eg,Ioe,MHe,EHe,Yk,CHe,wHe,AHe,og,qoe,yHe,LHe,Kk,xHe,$He,kHe,rg,Noe,SHe,RHe,Zk,BHe,PHe,IHe,tg,joe,qHe,NHe,eS,jHe,DHe,GHe,ag,Doe,OHe,VHe,oS,XHe,zHe,QHe,ng,Goe,WHe,HHe,rS,UHe,JHe,YHe,sg,Ooe,KHe,ZHe,tS,eUe,oUe,rUe,lg,Voe,tUe,aUe,aS,nUe,sUe,lUe,ig,Xoe,iUe,dUe,nS,cUe,fUe,mUe,dg,zoe,gUe,hUe,sS,pUe,uUe,_Ue,cg,Qoe,bUe,vUe,lS,FUe,TUe,MUe,fg,Woe,EUe,CUe,iS,wUe,AUe,yUe,mg,Hoe,LUe,xUe,dS,$Ue,kUe,SUe,gg,Uoe,RUe,BUe,cS,PUe,IUe,qUe,hg,Joe,NUe,jUe,fS,DUe,GUe,OUe,pg,VUe,ug,Zw,XUe,Yoe,zUe,$Pe,_i,_g,Koe,eA,QUe,Zoe,WUe,kPe,wo,oA,HUe,rA,UUe,mS,JUe,YUe,KUe,tA,ZUe,ere,eJe,oJe,rJe,Cr,aA,tJe,ore,aJe,nJe,Ca,sJe,rre,lJe,iJe,tre,dJe,cJe,are,fJe,mJe,gJe,k,kn,nre,hJe,pJe,gS,uJe,_Je,hS,bJe,vJe,FJe,Sn,sre,TJe,MJe,pS,EJe,CJe,uS,wJe,AJe,yJe,Rn,lre,LJe,xJe,_S,$Je,kJe,bS,SJe,RJe,BJe,bg,ire,PJe,IJe,vS,qJe,NJe,jJe,Bn,dre,DJe,GJe,FS,OJe,VJe,TS,XJe,zJe,QJe,vg,cre,WJe,HJe,MS,UJe,JJe,YJe,Fg,fre,KJe,ZJe,ES,eYe,oYe,rYe,Tg,mre,tYe,aYe,CS,nYe,sYe,lYe,Pn,gre,iYe,dYe,wS,cYe,fYe,AS,mYe,gYe,hYe,In,hre,pYe,uYe,yS,_Ye,bYe,LS,vYe,FYe,TYe,qn,pre,MYe,EYe,xS,CYe,wYe,$S,AYe,yYe,LYe,Mg,ure,xYe,$Ye,kS,kYe,SYe,RYe,Eg,_re,BYe,PYe,SS,IYe,qYe,NYe,Nn,bre,jYe,DYe,RS,GYe,OYe,BS,VYe,XYe,zYe,Cg,vre,QYe,WYe,PS,HYe,UYe,JYe,jn,Fre,YYe,KYe,IS,ZYe,eKe,qS,oKe,rKe,tKe,Dn,Tre,aKe,nKe,NS,sKe,lKe,jS,iKe,dKe,cKe,Gn,Mre,fKe,mKe,DS,gKe,hKe,GS,pKe,uKe,_Ke,wg,Ere,bKe,vKe,OS,FKe,TKe,MKe,On,Cre,EKe,CKe,VS,wKe,AKe,XS,yKe,LKe,xKe,Vn,wre,$Ke,kKe,zS,SKe,RKe,QS,BKe,PKe,IKe,Xn,Are,qKe,NKe,WS,jKe,DKe,HS,GKe,OKe,VKe,zn,yre,XKe,zKe,US,QKe,WKe,JS,HKe,UKe,JKe,Qn,Lre,YKe,KKe,YS,ZKe,eZe,KS,oZe,rZe,tZe,Wn,xre,aZe,nZe,ZS,sZe,lZe,eR,iZe,dZe,cZe,Ag,$re,fZe,mZe,oR,gZe,hZe,pZe,Hn,kre,uZe,_Ze,rR,bZe,vZe,tR,FZe,TZe,MZe,yg,Sre,EZe,CZe,aR,wZe,AZe,yZe,Un,Rre,LZe,xZe,nR,$Ze,kZe,sR,SZe,RZe,BZe,Jn,Bre,PZe,IZe,lR,qZe,NZe,iR,jZe,DZe,GZe,Yn,Pre,OZe,VZe,dR,XZe,zZe,cR,QZe,WZe,HZe,Kn,Ire,UZe,JZe,fR,YZe,KZe,mR,ZZe,eeo,oeo,Zn,qre,reo,teo,gR,aeo,neo,hR,seo,leo,ieo,Lg,Nre,deo,ceo,pR,feo,meo,geo,es,jre,heo,peo,uR,ueo,_eo,_R,beo,veo,Feo,os,Dre,Teo,Meo,bR,Eeo,Ceo,vR,weo,Aeo,yeo,rs,Gre,Leo,xeo,FR,$eo,keo,TR,Seo,Reo,Beo,ts,Ore,Peo,Ieo,MR,qeo,Neo,ER,jeo,Deo,Geo,as,Vre,Oeo,Veo,CR,Xeo,zeo,wR,Qeo,Weo,Heo,ns,Xre,Ueo,Jeo,AR,Yeo,Keo,yR,Zeo,eoo,ooo,xg,zre,roo,too,LR,aoo,noo,soo,ss,Qre,loo,ioo,xR,doo,coo,$R,foo,moo,goo,$g,Wre,hoo,poo,kR,uoo,_oo,boo,kg,Hre,voo,Foo,SR,Too,Moo,Eoo,ls,Ure,Coo,woo,RR,Aoo,yoo,BR,Loo,xoo,$oo,is,Jre,koo,Soo,PR,Roo,Boo,IR,Poo,Ioo,qoo,ds,Yre,Noo,joo,qR,Doo,Goo,NR,Ooo,Voo,Xoo,Sg,Kre,zoo,Qoo,jR,Woo,Hoo,Uoo,cs,Zre,Joo,Yoo,DR,Koo,Zoo,GR,ero,oro,rro,fs,ete,tro,aro,OR,nro,sro,VR,lro,iro,dro,ms,ote,cro,fro,XR,mro,gro,zR,hro,pro,uro,gs,rte,_ro,bro,QR,vro,Fro,WR,Tro,Mro,Ero,hs,tte,Cro,wro,HR,Aro,yro,UR,Lro,xro,$ro,Rg,ate,kro,Sro,JR,Rro,Bro,Pro,ps,nte,Iro,qro,YR,Nro,jro,KR,Dro,Gro,Oro,Bg,ste,Vro,Xro,ZR,zro,Qro,Wro,Pg,lte,Hro,Uro,eB,Jro,Yro,Kro,Ig,ite,Zro,eto,oB,oto,rto,tto,qg,dte,ato,nto,rB,sto,lto,ito,us,cte,dto,cto,tB,fto,mto,aB,gto,hto,pto,Ng,fte,uto,_to,nB,bto,vto,Fto,_s,mte,Tto,Mto,sB,Eto,Cto,lB,wto,Ato,yto,bs,gte,Lto,xto,iB,$to,kto,dB,Sto,Rto,Bto,vs,hte,Pto,Ito,cB,qto,Nto,fB,jto,Dto,Gto,Fs,pte,Oto,Vto,mB,Xto,zto,gB,Qto,Wto,Hto,Ts,ute,Uto,Jto,hB,Yto,Kto,pB,Zto,eao,oao,Ms,_te,rao,tao,uB,aao,nao,_B,sao,lao,iao,jg,bte,dao,cao,bB,fao,mao,gao,Dg,vte,hao,pao,vB,uao,_ao,bao,Es,Fte,vao,Fao,FB,Tao,Mao,TB,Eao,Cao,wao,Cs,Tte,Aao,yao,MB,Lao,xao,EB,$ao,kao,Sao,ws,Mte,Rao,Bao,CB,Pao,Iao,wB,qao,Nao,jao,Gg,Ete,Dao,Gao,AB,Oao,Vao,Xao,Og,Cte,zao,Qao,yB,Wao,Hao,Uao,Vg,wte,Jao,Yao,LB,Kao,Zao,eno,As,Ate,ono,rno,xB,tno,ano,$B,nno,sno,lno,Xg,yte,ino,dno,kB,cno,fno,mno,zg,Lte,gno,hno,SB,pno,uno,_no,ys,xte,bno,vno,RB,Fno,Tno,BB,Mno,Eno,Cno,Qg,$te,wno,Ano,PB,yno,Lno,xno,Wg,kte,$no,kno,IB,Sno,Rno,Bno,Ls,Ste,Pno,Ino,qB,qno,Nno,NB,jno,Dno,Gno,xs,Rte,Ono,Vno,jB,Xno,zno,DB,Qno,Wno,Hno,$s,Bte,Uno,Jno,GB,Yno,Kno,OB,Zno,eso,oso,ks,Pte,rso,tso,VB,aso,nso,XB,sso,lso,iso,Hg,dso,Ug,nA,cso,Ite,fso,SPe,bi,Jg,qte,sA,mso,Nte,gso,RPe,Ao,lA,hso,iA,pso,zB,uso,_so,bso,dA,vso,jte,Fso,Tso,Mso,Qe,cA,Eso,Dte,Cso,wso,wa,Aso,Gte,yso,Lso,Ote,xso,$so,Vte,kso,Sso,Rso,te,Yg,Xte,Bso,Pso,QB,Iso,qso,Nso,Kg,zte,jso,Dso,WB,Gso,Oso,Vso,Zg,Qte,Xso,zso,HB,Qso,Wso,Hso,eh,Wte,Uso,Jso,UB,Yso,Kso,Zso,oh,Hte,elo,olo,JB,rlo,tlo,alo,rh,Ute,nlo,slo,YB,llo,ilo,dlo,th,Jte,clo,flo,KB,mlo,glo,hlo,ah,Yte,plo,ulo,ZB,_lo,blo,vlo,nh,Kte,Flo,Tlo,eP,Mlo,Elo,Clo,sh,Zte,wlo,Alo,oP,ylo,Llo,xlo,lh,eae,$lo,klo,rP,Slo,Rlo,Blo,ih,oae,Plo,Ilo,tP,qlo,Nlo,jlo,dh,rae,Dlo,Glo,aP,Olo,Vlo,Xlo,ch,tae,zlo,Qlo,nP,Wlo,Hlo,Ulo,fh,aae,Jlo,Ylo,sP,Klo,Zlo,eio,mh,nae,oio,rio,lP,tio,aio,nio,gh,sae,sio,lio,iP,iio,dio,cio,hh,lae,fio,mio,dP,gio,hio,pio,ph,iae,uio,_io,cP,bio,vio,Fio,uh,dae,Tio,Mio,fP,Eio,Cio,wio,_h,cae,Aio,yio,mP,Lio,xio,$io,bh,fae,kio,Sio,gP,Rio,Bio,Pio,vh,mae,Iio,qio,hP,Nio,jio,Dio,Fh,gae,Gio,Oio,pP,Vio,Xio,zio,Th,Qio,Mh,Wio,Eh,fA,Hio,hae,Uio,BPe,vi,Ch,pae,mA,Jio,uae,Yio,PPe,yo,gA,Kio,hA,Zio,uP,edo,odo,rdo,pA,tdo,_ae,ado,ndo,sdo,We,uA,ldo,bae,ido,ddo,Fi,cdo,vae,fdo,mdo,Fae,gdo,hdo,pdo,be,wh,Tae,udo,_do,_P,bdo,vdo,Fdo,Ah,Mae,Tdo,Mdo,bP,Edo,Cdo,wdo,yh,Eae,Ado,ydo,vP,Ldo,xdo,$do,Lh,Cae,kdo,Sdo,FP,Rdo,Bdo,Pdo,xh,wae,Ido,qdo,TP,Ndo,jdo,Ddo,$h,Aae,Gdo,Odo,MP,Vdo,Xdo,zdo,kh,yae,Qdo,Wdo,EP,Hdo,Udo,Jdo,Sh,Lae,Ydo,Kdo,CP,Zdo,eco,oco,Rh,xae,rco,tco,wP,aco,nco,sco,Bh,$ae,lco,ico,AP,dco,cco,fco,Ph,kae,mco,gco,yP,hco,pco,uco,Ih,Sae,_co,bco,LP,vco,Fco,Tco,qh,Rae,Mco,Eco,xP,Cco,wco,Aco,Nh,Bae,yco,Lco,$P,xco,$co,kco,jh,Sco,Dh,Rco,Gh,_A,Bco,Pae,Pco,IPe,Ti,Oh,Iae,bA,Ico,qae,qco,qPe,Lo,vA,Nco,Mi,jco,kP,Dco,Gco,SP,Oco,Vco,Xco,FA,zco,Nae,Qco,Wco,Hco,ot,TA,Uco,jae,Jco,Yco,Ei,Kco,Dae,Zco,efo,RP,ofo,rfo,tfo,Vh,afo,He,MA,nfo,Gae,sfo,lfo,Aa,ifo,Oae,dfo,cfo,Vae,ffo,mfo,Xae,gfo,hfo,pfo,x,Xh,zae,ufo,_fo,BP,bfo,vfo,Ffo,zh,Qae,Tfo,Mfo,PP,Efo,Cfo,wfo,Qh,Wae,Afo,yfo,IP,Lfo,xfo,$fo,Wh,Hae,kfo,Sfo,qP,Rfo,Bfo,Pfo,Hh,Uae,Ifo,qfo,NP,Nfo,jfo,Dfo,Uh,Jae,Gfo,Ofo,jP,Vfo,Xfo,zfo,Jh,Yae,Qfo,Wfo,DP,Hfo,Ufo,Jfo,Yh,Kae,Yfo,Kfo,GP,Zfo,emo,omo,Kh,Zae,rmo,tmo,OP,amo,nmo,smo,Zh,ene,lmo,imo,VP,dmo,cmo,fmo,ep,one,mmo,gmo,XP,hmo,pmo,umo,op,rne,_mo,bmo,zP,vmo,Fmo,Tmo,rp,tne,Mmo,Emo,QP,Cmo,wmo,Amo,tp,ane,ymo,Lmo,WP,xmo,$mo,kmo,ap,nne,Smo,Rmo,HP,Bmo,Pmo,Imo,np,sne,qmo,Nmo,UP,jmo,Dmo,Gmo,sp,lne,Omo,Vmo,JP,Xmo,zmo,Qmo,lp,ine,Wmo,Hmo,YP,Umo,Jmo,Ymo,ip,dne,Kmo,Zmo,KP,ego,ogo,rgo,dp,cne,tgo,ago,ZP,ngo,sgo,lgo,cp,fne,igo,dgo,eI,cgo,fgo,mgo,fp,mne,ggo,hgo,oI,pgo,ugo,_go,mp,gne,bgo,vgo,rI,Fgo,Tgo,Mgo,gp,hne,Ego,Cgo,tI,wgo,Ago,ygo,hp,pne,Lgo,xgo,aI,$go,kgo,Sgo,pp,une,Rgo,Bgo,nI,Pgo,Igo,qgo,up,_ne,Ngo,jgo,sI,Dgo,Ggo,Ogo,_p,bne,Vgo,Xgo,lI,zgo,Qgo,Wgo,bp,vne,Hgo,Ugo,iI,Jgo,Ygo,Kgo,vp,Fne,Zgo,eho,dI,oho,rho,tho,Ss,Tne,aho,nho,cI,sho,lho,fI,iho,dho,cho,Fp,Mne,fho,mho,mI,gho,hho,pho,Tp,Ene,uho,_ho,gI,bho,vho,Fho,Mp,Cne,Tho,Mho,hI,Eho,Cho,who,Ep,wne,Aho,yho,pI,Lho,xho,$ho,Cp,Ane,kho,Sho,uI,Rho,Bho,Pho,wp,yne,Iho,qho,_I,Nho,jho,Dho,Ap,Lne,Gho,Oho,bI,Vho,Xho,zho,yp,xne,Qho,Who,vI,Hho,Uho,Jho,Lp,$ne,Yho,Kho,FI,Zho,epo,opo,xp,kne,rpo,tpo,TI,apo,npo,spo,$p,Sne,lpo,ipo,MI,dpo,cpo,fpo,kp,Rne,mpo,gpo,EI,hpo,ppo,upo,Sp,Bne,_po,bpo,CI,vpo,Fpo,Tpo,Rp,Pne,Mpo,Epo,wI,Cpo,wpo,Apo,Bp,Ine,ypo,Lpo,AI,xpo,$po,kpo,Pp,qne,Spo,Rpo,yI,Bpo,Ppo,Ipo,Ip,Nne,qpo,Npo,LI,jpo,Dpo,Gpo,qp,jne,Opo,Vpo,xI,Xpo,zpo,Qpo,Np,Dne,Wpo,Hpo,$I,Upo,Jpo,Ypo,jp,Gne,Kpo,Zpo,kI,euo,ouo,ruo,Dp,One,tuo,auo,SI,nuo,suo,luo,Gp,Vne,iuo,duo,RI,cuo,fuo,muo,Op,Xne,guo,huo,BI,puo,uuo,_uo,Vp,zne,buo,vuo,PI,Fuo,Tuo,Muo,Xp,Qne,Euo,Cuo,II,wuo,Auo,yuo,zp,Wne,Luo,xuo,qI,$uo,kuo,Suo,Qp,Hne,Ruo,Buo,NI,Puo,Iuo,quo,Wp,Une,Nuo,juo,jI,Duo,Guo,Ouo,Hp,Jne,Vuo,Xuo,DI,zuo,Quo,Wuo,Up,Yne,Huo,Uuo,GI,Juo,Yuo,Kuo,Jp,Kne,Zuo,e_o,OI,o_o,r_o,t_o,Yp,Zne,a_o,n_o,VI,s_o,l_o,i_o,Kp,ese,d_o,c_o,XI,f_o,m_o,g_o,Zp,ose,h_o,p_o,zI,u_o,__o,b_o,eu,rse,v_o,F_o,QI,T_o,M_o,E_o,ou,tse,C_o,w_o,WI,A_o,y_o,L_o,ru,ase,x_o,$_o,HI,k_o,S_o,R_o,tu,nse,B_o,P_o,UI,I_o,q_o,N_o,au,sse,j_o,D_o,JI,G_o,O_o,V_o,nu,lse,X_o,z_o,YI,Q_o,W_o,H_o,su,ise,U_o,J_o,KI,Y_o,K_o,Z_o,lu,dse,e1o,o1o,ZI,r1o,t1o,a1o,iu,cse,n1o,s1o,eq,l1o,i1o,d1o,du,fse,c1o,f1o,oq,m1o,g1o,h1o,cu,mse,p1o,u1o,rq,_1o,b1o,v1o,fu,gse,F1o,T1o,tq,M1o,E1o,C1o,mu,hse,w1o,A1o,aq,y1o,L1o,x1o,gu,pse,$1o,k1o,nq,S1o,R1o,B1o,hu,use,P1o,I1o,sq,q1o,N1o,j1o,pu,_se,D1o,G1o,lq,O1o,V1o,X1o,uu,bse,z1o,Q1o,iq,W1o,H1o,U1o,_u,vse,J1o,Y1o,dq,K1o,Z1o,e8o,bu,Fse,o8o,r8o,cq,t8o,a8o,n8o,vu,Tse,s8o,l8o,fq,i8o,d8o,c8o,Fu,Mse,f8o,m8o,mq,g8o,h8o,p8o,Tu,Ese,u8o,_8o,gq,b8o,v8o,F8o,Mu,Cse,T8o,M8o,hq,E8o,C8o,w8o,Eu,wse,A8o,y8o,pq,L8o,x8o,$8o,Cu,Ase,k8o,S8o,uq,R8o,B8o,P8o,wu,yse,I8o,q8o,_q,N8o,j8o,D8o,Au,Lse,G8o,O8o,bq,V8o,X8o,z8o,yu,xse,Q8o,W8o,vq,H8o,U8o,J8o,Lu,$se,Y8o,K8o,Fq,Z8o,ebo,obo,xu,kse,rbo,tbo,Tq,abo,nbo,sbo,$u,Sse,lbo,ibo,Mq,dbo,cbo,fbo,ku,mbo,Rse,gbo,hbo,Bse,pbo,ubo,Su,NPe,Ci,Ru,Pse,EA,_bo,Ise,bbo,jPe,xo,CA,vbo,wi,Fbo,Eq,Tbo,Mbo,Cq,Ebo,Cbo,wbo,wA,Abo,qse,ybo,Lbo,xbo,rt,AA,$bo,Nse,kbo,Sbo,Ai,Rbo,jse,Bbo,Pbo,wq,Ibo,qbo,Nbo,Bu,jbo,Ue,yA,Dbo,Dse,Gbo,Obo,ya,Vbo,Gse,Xbo,zbo,Ose,Qbo,Wbo,Vse,Hbo,Ubo,Jbo,G,Pu,Xse,Ybo,Kbo,Aq,Zbo,e2o,o2o,Iu,zse,r2o,t2o,yq,a2o,n2o,s2o,qu,Qse,l2o,i2o,Lq,d2o,c2o,f2o,Nu,Wse,m2o,g2o,xq,h2o,p2o,u2o,ju,Hse,_2o,b2o,$q,v2o,F2o,T2o,Du,Use,M2o,E2o,kq,C2o,w2o,A2o,Gu,Jse,y2o,L2o,Sq,x2o,$2o,k2o,Ou,Yse,S2o,R2o,Rq,B2o,P2o,I2o,Vu,Kse,q2o,N2o,Bq,j2o,D2o,G2o,Xu,Zse,O2o,V2o,Pq,X2o,z2o,Q2o,zu,ele,W2o,H2o,Iq,U2o,J2o,Y2o,Qu,ole,K2o,Z2o,qq,evo,ovo,rvo,Wu,rle,tvo,avo,Nq,nvo,svo,lvo,Hu,tle,ivo,dvo,jq,cvo,fvo,mvo,Uu,ale,gvo,hvo,Dq,pvo,uvo,_vo,Ju,nle,bvo,vvo,Gq,Fvo,Tvo,Mvo,Yu,sle,Evo,Cvo,Oq,wvo,Avo,yvo,Ku,lle,Lvo,xvo,Vq,$vo,kvo,Svo,Zu,ile,Rvo,Bvo,Xq,Pvo,Ivo,qvo,e_,dle,Nvo,jvo,zq,Dvo,Gvo,Ovo,o_,cle,Vvo,Xvo,Qq,zvo,Qvo,Wvo,r_,fle,Hvo,Uvo,Wq,Jvo,Yvo,Kvo,t_,mle,Zvo,eFo,Hq,oFo,rFo,tFo,a_,gle,aFo,nFo,Uq,sFo,lFo,iFo,n_,hle,dFo,cFo,Jq,fFo,mFo,gFo,s_,ple,hFo,pFo,Yq,uFo,_Fo,bFo,l_,ule,vFo,FFo,Kq,TFo,MFo,EFo,i_,_le,CFo,wFo,Zq,AFo,yFo,LFo,d_,ble,xFo,$Fo,eN,kFo,SFo,RFo,c_,vle,BFo,PFo,oN,IFo,qFo,NFo,f_,Fle,jFo,DFo,rN,GFo,OFo,VFo,m_,Tle,XFo,zFo,tN,QFo,WFo,HFo,g_,Mle,UFo,JFo,aN,YFo,KFo,ZFo,h_,Ele,e0o,o0o,nN,r0o,t0o,a0o,p_,Cle,n0o,s0o,sN,l0o,i0o,d0o,u_,wle,c0o,f0o,lN,m0o,g0o,h0o,__,Ale,p0o,u0o,iN,_0o,b0o,v0o,b_,yle,F0o,T0o,dN,M0o,E0o,C0o,v_,Lle,w0o,A0o,cN,y0o,L0o,x0o,F_,$0o,xle,k0o,S0o,$le,R0o,B0o,T_,DPe,yi,M_,kle,LA,P0o,Sle,I0o,GPe,$o,xA,q0o,Li,N0o,fN,j0o,D0o,mN,G0o,O0o,V0o,$A,X0o,Rle,z0o,Q0o,W0o,tt,kA,H0o,Ble,U0o,J0o,xi,Y0o,Ple,K0o,Z0o,gN,eTo,oTo,rTo,E_,tTo,Je,SA,aTo,Ile,nTo,sTo,La,lTo,qle,iTo,dTo,Nle,cTo,fTo,jle,mTo,gTo,hTo,z,C_,Dle,pTo,uTo,hN,_To,bTo,vTo,w_,Gle,FTo,TTo,pN,MTo,ETo,CTo,A_,Ole,wTo,ATo,uN,yTo,LTo,xTo,y_,Vle,$To,kTo,_N,STo,RTo,BTo,L_,Xle,PTo,ITo,bN,qTo,NTo,jTo,x_,zle,DTo,GTo,vN,OTo,VTo,XTo,$_,Qle,zTo,QTo,FN,WTo,HTo,UTo,k_,Wle,JTo,YTo,TN,KTo,ZTo,e7o,S_,Hle,o7o,r7o,MN,t7o,a7o,n7o,R_,Ule,s7o,l7o,EN,i7o,d7o,c7o,B_,Jle,f7o,m7o,CN,g7o,h7o,p7o,P_,Yle,u7o,_7o,wN,b7o,v7o,F7o,I_,Kle,T7o,M7o,AN,E7o,C7o,w7o,q_,Zle,A7o,y7o,yN,L7o,x7o,$7o,N_,eie,k7o,S7o,LN,R7o,B7o,P7o,j_,oie,I7o,q7o,xN,N7o,j7o,D7o,D_,rie,G7o,O7o,$N,V7o,X7o,z7o,G_,tie,Q7o,W7o,kN,H7o,U7o,J7o,O_,aie,Y7o,K7o,SN,Z7o,eMo,oMo,V_,nie,rMo,tMo,RN,aMo,nMo,sMo,X_,sie,lMo,iMo,BN,dMo,cMo,fMo,z_,lie,mMo,gMo,PN,hMo,pMo,uMo,Q_,iie,_Mo,bMo,IN,vMo,FMo,TMo,W_,die,MMo,EMo,qN,CMo,wMo,AMo,H_,cie,yMo,LMo,NN,xMo,$Mo,kMo,U_,fie,SMo,RMo,jN,BMo,PMo,IMo,J_,mie,qMo,NMo,DN,jMo,DMo,GMo,Y_,gie,OMo,VMo,GN,XMo,zMo,QMo,K_,hie,WMo,HMo,ON,UMo,JMo,YMo,Z_,pie,KMo,ZMo,VN,e4o,o4o,r4o,e1,uie,t4o,a4o,XN,n4o,s4o,l4o,o1,_ie,i4o,d4o,zN,c4o,f4o,m4o,r1,bie,g4o,h4o,QN,p4o,u4o,_4o,t1,vie,b4o,v4o,WN,F4o,T4o,M4o,a1,Fie,E4o,C4o,HN,w4o,A4o,y4o,n1,Tie,L4o,x4o,UN,$4o,k4o,S4o,s1,R4o,Mie,B4o,P4o,Eie,I4o,q4o,l1,OPe,$i,i1,Cie,RA,N4o,wie,j4o,VPe,ko,BA,D4o,ki,G4o,JN,O4o,V4o,YN,X4o,z4o,Q4o,PA,W4o,Aie,H4o,U4o,J4o,at,IA,Y4o,yie,K4o,Z4o,Si,eEo,Lie,oEo,rEo,KN,tEo,aEo,nEo,d1,sEo,Ye,qA,lEo,xie,iEo,dEo,xa,cEo,$ie,fEo,mEo,kie,gEo,hEo,Sie,pEo,uEo,_Eo,Q,c1,Rie,bEo,vEo,ZN,FEo,TEo,MEo,f1,Bie,EEo,CEo,ej,wEo,AEo,yEo,m1,Pie,LEo,xEo,oj,$Eo,kEo,SEo,g1,Iie,REo,BEo,rj,PEo,IEo,qEo,h1,qie,NEo,jEo,tj,DEo,GEo,OEo,p1,Nie,VEo,XEo,aj,zEo,QEo,WEo,u1,jie,HEo,UEo,nj,JEo,YEo,KEo,_1,Die,ZEo,e5o,sj,o5o,r5o,t5o,b1,Gie,a5o,n5o,lj,s5o,l5o,i5o,v1,Oie,d5o,c5o,ij,f5o,m5o,g5o,F1,Vie,h5o,p5o,dj,u5o,_5o,b5o,T1,Xie,v5o,F5o,cj,T5o,M5o,E5o,M1,zie,C5o,w5o,fj,A5o,y5o,L5o,E1,Qie,x5o,$5o,mj,k5o,S5o,R5o,C1,Wie,B5o,P5o,gj,I5o,q5o,N5o,w1,Hie,j5o,D5o,hj,G5o,O5o,V5o,A1,Uie,X5o,z5o,pj,Q5o,W5o,H5o,y1,Jie,U5o,J5o,uj,Y5o,K5o,Z5o,L1,Yie,eCo,oCo,_j,rCo,tCo,aCo,x1,Kie,nCo,sCo,bj,lCo,iCo,dCo,$1,Zie,cCo,fCo,vj,mCo,gCo,hCo,k1,ede,pCo,uCo,Fj,_Co,bCo,vCo,S1,ode,FCo,TCo,Tj,MCo,ECo,CCo,R1,rde,wCo,ACo,Mj,yCo,LCo,xCo,B1,tde,$Co,kCo,Ej,SCo,RCo,BCo,P1,ade,PCo,ICo,Cj,qCo,NCo,jCo,I1,nde,DCo,GCo,wj,OCo,VCo,XCo,q1,sde,zCo,QCo,Aj,WCo,HCo,UCo,N1,lde,JCo,YCo,yj,KCo,ZCo,e3o,j1,ide,o3o,r3o,Lj,t3o,a3o,n3o,D1,dde,s3o,l3o,cde,i3o,d3o,c3o,G1,fde,f3o,m3o,xj,g3o,h3o,p3o,O1,mde,u3o,_3o,$j,b3o,v3o,F3o,V1,gde,T3o,M3o,kj,E3o,C3o,w3o,X1,hde,A3o,y3o,Sj,L3o,x3o,$3o,z1,k3o,pde,S3o,R3o,ude,B3o,P3o,Q1,XPe,Ri,W1,_de,NA,I3o,bde,q3o,zPe,So,jA,N3o,Bi,j3o,Rj,D3o,G3o,Bj,O3o,V3o,X3o,DA,z3o,vde,Q3o,W3o,H3o,nt,GA,U3o,Fde,J3o,Y3o,Pi,K3o,Tde,Z3o,ewo,Pj,owo,rwo,two,H1,awo,Ke,OA,nwo,Mde,swo,lwo,$a,iwo,Ede,dwo,cwo,Cde,fwo,mwo,wde,gwo,hwo,pwo,he,U1,Ade,uwo,_wo,Ij,bwo,vwo,Fwo,J1,yde,Two,Mwo,qj,Ewo,Cwo,wwo,Y1,Lde,Awo,ywo,Nj,Lwo,xwo,$wo,K1,xde,kwo,Swo,jj,Rwo,Bwo,Pwo,Z1,$de,Iwo,qwo,Dj,Nwo,jwo,Dwo,e8,kde,Gwo,Owo,Gj,Vwo,Xwo,zwo,o8,Sde,Qwo,Wwo,Oj,Hwo,Uwo,Jwo,r8,Rde,Ywo,Kwo,Vj,Zwo,eAo,oAo,t8,Bde,rAo,tAo,Xj,aAo,nAo,sAo,a8,Pde,lAo,iAo,zj,dAo,cAo,fAo,n8,Ide,mAo,gAo,Qj,hAo,pAo,uAo,s8,qde,_Ao,bAo,Wj,vAo,FAo,TAo,l8,Nde,MAo,EAo,Hj,CAo,wAo,AAo,i8,jde,yAo,LAo,Uj,xAo,$Ao,kAo,d8,Dde,SAo,RAo,Jj,BAo,PAo,IAo,c8,Gde,qAo,NAo,Yj,jAo,DAo,GAo,f8,Ode,OAo,VAo,Kj,XAo,zAo,QAo,m8,WAo,Vde,HAo,UAo,Xde,JAo,YAo,g8,QPe,Ii,h8,zde,VA,KAo,Qde,ZAo,WPe,Ro,XA,e6o,qi,o6o,Zj,r6o,t6o,eD,a6o,n6o,s6o,zA,l6o,Wde,i6o,d6o,c6o,st,QA,f6o,Hde,m6o,g6o,Ni,h6o,Ude,p6o,u6o,oD,_6o,b6o,v6o,p8,F6o,Ze,WA,T6o,Jde,M6o,E6o,ka,C6o,Yde,w6o,A6o,Kde,y6o,L6o,Zde,x6o,$6o,k6o,q,u8,ece,S6o,R6o,rD,B6o,P6o,I6o,_8,oce,q6o,N6o,tD,j6o,D6o,G6o,b8,rce,O6o,V6o,aD,X6o,z6o,Q6o,v8,tce,W6o,H6o,nD,U6o,J6o,Y6o,F8,ace,K6o,Z6o,sD,eyo,oyo,ryo,T8,nce,tyo,ayo,lD,nyo,syo,lyo,M8,sce,iyo,dyo,iD,cyo,fyo,myo,E8,lce,gyo,hyo,dD,pyo,uyo,_yo,C8,ice,byo,vyo,cD,Fyo,Tyo,Myo,w8,dce,Eyo,Cyo,fD,wyo,Ayo,yyo,A8,cce,Lyo,xyo,mD,$yo,kyo,Syo,y8,fce,Ryo,Byo,gD,Pyo,Iyo,qyo,L8,mce,Nyo,jyo,hD,Dyo,Gyo,Oyo,x8,gce,Vyo,Xyo,pD,zyo,Qyo,Wyo,$8,hce,Hyo,Uyo,uD,Jyo,Yyo,Kyo,k8,pce,Zyo,eLo,_D,oLo,rLo,tLo,S8,uce,aLo,nLo,bD,sLo,lLo,iLo,R8,_ce,dLo,cLo,vD,fLo,mLo,gLo,B8,bce,hLo,pLo,FD,uLo,_Lo,bLo,P8,vce,vLo,FLo,TD,TLo,MLo,ELo,I8,Fce,CLo,wLo,MD,ALo,yLo,LLo,q8,Tce,xLo,$Lo,ED,kLo,SLo,RLo,N8,Mce,BLo,PLo,CD,ILo,qLo,NLo,j8,Ece,jLo,DLo,wD,GLo,OLo,VLo,D8,Cce,XLo,zLo,AD,QLo,WLo,HLo,G8,wce,ULo,JLo,yD,YLo,KLo,ZLo,O8,Ace,exo,oxo,LD,rxo,txo,axo,V8,yce,nxo,sxo,xD,lxo,ixo,dxo,X8,Lce,cxo,fxo,$D,mxo,gxo,hxo,z8,xce,pxo,uxo,kD,_xo,bxo,vxo,Q8,$ce,Fxo,Txo,SD,Mxo,Exo,Cxo,W8,kce,wxo,Axo,RD,yxo,Lxo,xxo,H8,Sce,$xo,kxo,BD,Sxo,Rxo,Bxo,U8,Rce,Pxo,Ixo,PD,qxo,Nxo,jxo,J8,Bce,Dxo,Gxo,ID,Oxo,Vxo,Xxo,Y8,Pce,zxo,Qxo,qD,Wxo,Hxo,Uxo,K8,Ice,Jxo,Yxo,ND,Kxo,Zxo,e9o,Z8,qce,o9o,r9o,jD,t9o,a9o,n9o,eb,Nce,s9o,l9o,DD,i9o,d9o,c9o,ob,jce,f9o,m9o,GD,g9o,h9o,p9o,rb,Dce,u9o,_9o,OD,b9o,v9o,F9o,tb,Gce,T9o,M9o,VD,E9o,C9o,w9o,ab,Oce,A9o,y9o,XD,L9o,x9o,$9o,nb,Vce,k9o,S9o,zD,R9o,B9o,P9o,sb,Xce,I9o,q9o,QD,N9o,j9o,D9o,lb,zce,G9o,O9o,WD,V9o,X9o,z9o,ib,Qce,Q9o,W9o,HD,H9o,U9o,J9o,db,Y9o,Wce,K9o,Z9o,Hce,e$o,o$o,cb,HPe,ji,fb,Uce,HA,r$o,Jce,t$o,UPe,Bo,UA,a$o,Di,n$o,UD,s$o,l$o,JD,i$o,d$o,c$o,JA,f$o,Yce,m$o,g$o,h$o,lt,YA,p$o,Kce,u$o,_$o,Gi,b$o,Zce,v$o,F$o,YD,T$o,M$o,E$o,mb,C$o,eo,KA,w$o,efe,A$o,y$o,Sa,L$o,ofe,x$o,$$o,rfe,k$o,S$o,tfe,R$o,B$o,P$o,Y,gb,afe,I$o,q$o,KD,N$o,j$o,D$o,hb,nfe,G$o,O$o,ZD,V$o,X$o,z$o,pb,sfe,Q$o,W$o,eG,H$o,U$o,J$o,ub,lfe,Y$o,K$o,oG,Z$o,eko,oko,_b,ife,rko,tko,rG,ako,nko,sko,bb,dfe,lko,iko,tG,dko,cko,fko,vb,cfe,mko,gko,aG,hko,pko,uko,Fb,ffe,_ko,bko,nG,vko,Fko,Tko,Tb,mfe,Mko,Eko,sG,Cko,wko,Ako,Mb,gfe,yko,Lko,lG,xko,$ko,kko,Eb,hfe,Sko,Rko,iG,Bko,Pko,Iko,Cb,pfe,qko,Nko,dG,jko,Dko,Gko,wb,ufe,Oko,Vko,cG,Xko,zko,Qko,Ab,_fe,Wko,Hko,fG,Uko,Jko,Yko,yb,bfe,Kko,Zko,mG,eSo,oSo,rSo,Lb,vfe,tSo,aSo,gG,nSo,sSo,lSo,xb,Ffe,iSo,dSo,hG,cSo,fSo,mSo,$b,Tfe,gSo,hSo,pG,pSo,uSo,_So,kb,Mfe,bSo,vSo,uG,FSo,TSo,MSo,Sb,Efe,ESo,CSo,_G,wSo,ASo,ySo,Rb,Cfe,LSo,xSo,bG,$So,kSo,SSo,Bb,wfe,RSo,BSo,vG,PSo,ISo,qSo,Pb,Afe,NSo,jSo,FG,DSo,GSo,OSo,Ib,yfe,VSo,XSo,TG,zSo,QSo,WSo,qb,Lfe,HSo,USo,MG,JSo,YSo,KSo,Nb,xfe,ZSo,eRo,EG,oRo,rRo,tRo,jb,$fe,aRo,nRo,CG,sRo,lRo,iRo,Db,kfe,dRo,cRo,wG,fRo,mRo,gRo,Gb,Sfe,hRo,pRo,AG,uRo,_Ro,bRo,Ob,vRo,Rfe,FRo,TRo,Bfe,MRo,ERo,Vb,JPe,Oi,Xb,Pfe,ZA,CRo,Ife,wRo,YPe,Po,e6,ARo,Vi,yRo,yG,LRo,xRo,LG,$Ro,kRo,SRo,o6,RRo,qfe,BRo,PRo,IRo,it,r6,qRo,Nfe,NRo,jRo,Xi,DRo,jfe,GRo,ORo,xG,VRo,XRo,zRo,zb,QRo,oo,t6,WRo,Dfe,HRo,URo,Ra,JRo,Gfe,YRo,KRo,Ofe,ZRo,eBo,Vfe,oBo,rBo,tBo,Yr,Qb,Xfe,aBo,nBo,$G,sBo,lBo,iBo,Wb,zfe,dBo,cBo,kG,fBo,mBo,gBo,Hb,Qfe,hBo,pBo,SG,uBo,_Bo,bBo,Ub,Wfe,vBo,FBo,RG,TBo,MBo,EBo,Jb,Hfe,CBo,wBo,BG,ABo,yBo,LBo,Yb,xBo,Ufe,$Bo,kBo,Jfe,SBo,RBo,Kb,KPe,zi,Zb,Yfe,a6,BBo,Kfe,PBo,ZPe,Io,n6,IBo,Qi,qBo,PG,NBo,jBo,IG,DBo,GBo,OBo,s6,VBo,Zfe,XBo,zBo,QBo,dt,l6,WBo,eme,HBo,UBo,Wi,JBo,ome,YBo,KBo,qG,ZBo,ePo,oPo,e2,rPo,ro,i6,tPo,rme,aPo,nPo,Ba,sPo,tme,lPo,iPo,ame,dPo,cPo,nme,fPo,mPo,gPo,U,o2,sme,hPo,pPo,NG,uPo,_Po,bPo,r2,lme,vPo,FPo,jG,TPo,MPo,EPo,t2,ime,CPo,wPo,DG,APo,yPo,LPo,a2,dme,xPo,$Po,GG,kPo,SPo,RPo,n2,cme,BPo,PPo,OG,IPo,qPo,NPo,s2,fme,jPo,DPo,VG,GPo,OPo,VPo,l2,mme,XPo,zPo,XG,QPo,WPo,HPo,i2,gme,UPo,JPo,zG,YPo,KPo,ZPo,d2,hme,eIo,oIo,QG,rIo,tIo,aIo,c2,pme,nIo,sIo,WG,lIo,iIo,dIo,f2,ume,cIo,fIo,HG,mIo,gIo,hIo,m2,_me,pIo,uIo,UG,_Io,bIo,vIo,g2,bme,FIo,TIo,JG,MIo,EIo,CIo,h2,vme,wIo,AIo,YG,yIo,LIo,xIo,p2,Fme,$Io,kIo,KG,SIo,RIo,BIo,u2,Tme,PIo,IIo,ZG,qIo,NIo,jIo,_2,Mme,DIo,GIo,eO,OIo,VIo,XIo,b2,Eme,zIo,QIo,oO,WIo,HIo,UIo,v2,Cme,JIo,YIo,rO,KIo,ZIo,eqo,F2,wme,oqo,rqo,tO,tqo,aqo,nqo,T2,Ame,sqo,lqo,aO,iqo,dqo,cqo,M2,yme,fqo,mqo,nO,gqo,hqo,pqo,E2,Lme,uqo,_qo,sO,bqo,vqo,Fqo,C2,xme,Tqo,Mqo,lO,Eqo,Cqo,wqo,w2,$me,Aqo,yqo,iO,Lqo,xqo,$qo,A2,kme,kqo,Sqo,dO,Rqo,Bqo,Pqo,y2,Sme,Iqo,qqo,cO,Nqo,jqo,Dqo,L2,Rme,Gqo,Oqo,fO,Vqo,Xqo,zqo,x2,Bme,Qqo,Wqo,mO,Hqo,Uqo,Jqo,$2,Pme,Yqo,Kqo,gO,Zqo,eNo,oNo,k2,Ime,rNo,tNo,hO,aNo,nNo,sNo,S2,qme,lNo,iNo,pO,dNo,cNo,fNo,R2,Nme,mNo,gNo,uO,hNo,pNo,uNo,B2,_No,jme,bNo,vNo,Dme,FNo,TNo,P2,eIe,Hi,I2,Gme,d6,MNo,Ome,ENo,oIe,qo,c6,CNo,Ui,wNo,_O,ANo,yNo,bO,LNo,xNo,$No,f6,kNo,Vme,SNo,RNo,BNo,ct,m6,PNo,Xme,INo,qNo,Ji,NNo,zme,jNo,DNo,vO,GNo,ONo,VNo,q2,XNo,to,g6,zNo,Qme,QNo,WNo,Pa,HNo,Wme,UNo,JNo,Hme,YNo,KNo,Ume,ZNo,ejo,ojo,O,N2,Jme,rjo,tjo,FO,ajo,njo,sjo,j2,Yme,ljo,ijo,TO,djo,cjo,fjo,D2,Kme,mjo,gjo,MO,hjo,pjo,ujo,G2,Zme,_jo,bjo,EO,vjo,Fjo,Tjo,O2,ege,Mjo,Ejo,CO,Cjo,wjo,Ajo,V2,oge,yjo,Ljo,wO,xjo,$jo,kjo,X2,rge,Sjo,Rjo,AO,Bjo,Pjo,Ijo,z2,tge,qjo,Njo,yO,jjo,Djo,Gjo,Q2,age,Ojo,Vjo,LO,Xjo,zjo,Qjo,W2,nge,Wjo,Hjo,xO,Ujo,Jjo,Yjo,H2,sge,Kjo,Zjo,$O,eDo,oDo,rDo,U2,lge,tDo,aDo,kO,nDo,sDo,lDo,J2,ige,iDo,dDo,SO,cDo,fDo,mDo,Y2,dge,gDo,hDo,RO,pDo,uDo,_Do,K2,cge,bDo,vDo,BO,FDo,TDo,MDo,Z2,fge,EDo,CDo,PO,wDo,ADo,yDo,ev,mge,LDo,xDo,IO,$Do,kDo,SDo,ov,gge,RDo,BDo,qO,PDo,IDo,qDo,rv,hge,NDo,jDo,NO,DDo,GDo,ODo,tv,pge,VDo,XDo,jO,zDo,QDo,WDo,av,uge,HDo,UDo,DO,JDo,YDo,KDo,nv,_ge,ZDo,eGo,GO,oGo,rGo,tGo,sv,bge,aGo,nGo,OO,sGo,lGo,iGo,lv,vge,dGo,cGo,VO,fGo,mGo,gGo,iv,Fge,hGo,pGo,XO,uGo,_Go,bGo,dv,Tge,vGo,FGo,zO,TGo,MGo,EGo,cv,Mge,CGo,wGo,QO,AGo,yGo,LGo,fv,Ege,xGo,$Go,WO,kGo,SGo,RGo,mv,Cge,BGo,PGo,HO,IGo,qGo,NGo,gv,wge,jGo,DGo,UO,GGo,OGo,VGo,hv,Age,XGo,zGo,JO,QGo,WGo,HGo,pv,yge,UGo,JGo,YO,YGo,KGo,ZGo,uv,Lge,eOo,oOo,KO,rOo,tOo,aOo,_v,xge,nOo,sOo,ZO,lOo,iOo,dOo,bv,$ge,cOo,fOo,eV,mOo,gOo,hOo,vv,kge,pOo,uOo,oV,_Oo,bOo,vOo,Fv,Sge,FOo,TOo,rV,MOo,EOo,COo,Tv,Rge,wOo,AOo,tV,yOo,LOo,xOo,Mv,Bge,$Oo,kOo,aV,SOo,ROo,BOo,Ev,POo,Pge,IOo,qOo,Ige,NOo,jOo,Cv,rIe,Yi,wv,qge,h6,DOo,Nge,GOo,tIe,No,p6,OOo,Ki,VOo,nV,XOo,zOo,sV,QOo,WOo,HOo,u6,UOo,jge,JOo,YOo,KOo,ft,_6,ZOo,Dge,eVo,oVo,Zi,rVo,Gge,tVo,aVo,lV,nVo,sVo,lVo,Av,iVo,ao,b6,dVo,Oge,cVo,fVo,Ia,mVo,Vge,gVo,hVo,Xge,pVo,uVo,zge,_Vo,bVo,vVo,Qge,yv,Wge,FVo,TVo,iV,MVo,EVo,CVo,Lv,wVo,Hge,AVo,yVo,Uge,LVo,xVo,xv,aIe,ed,$v,Jge,v6,$Vo,Yge,kVo,nIe,jo,F6,SVo,od,RVo,dV,BVo,PVo,cV,IVo,qVo,NVo,T6,jVo,Kge,DVo,GVo,OVo,mt,M6,VVo,Zge,XVo,zVo,rd,QVo,ehe,WVo,HVo,fV,UVo,JVo,YVo,kv,KVo,no,E6,ZVo,ohe,eXo,oXo,qa,rXo,rhe,tXo,aXo,the,nXo,sXo,ahe,lXo,iXo,dXo,ve,Sv,nhe,cXo,fXo,mV,mXo,gXo,hXo,Rv,she,pXo,uXo,gV,_Xo,bXo,vXo,Bv,lhe,FXo,TXo,hV,MXo,EXo,CXo,Rs,ihe,wXo,AXo,pV,yXo,LXo,uV,xXo,$Xo,kXo,Pv,dhe,SXo,RXo,_V,BXo,PXo,IXo,gt,che,qXo,NXo,bV,jXo,DXo,vV,GXo,OXo,FV,VXo,XXo,zXo,Iv,fhe,QXo,WXo,TV,HXo,UXo,JXo,qv,mhe,YXo,KXo,MV,ZXo,ezo,ozo,Nv,ghe,rzo,tzo,EV,azo,nzo,szo,jv,hhe,lzo,izo,CV,dzo,czo,fzo,Dv,phe,mzo,gzo,wV,hzo,pzo,uzo,Gv,uhe,_zo,bzo,AV,vzo,Fzo,Tzo,Ov,_he,Mzo,Ezo,yV,Czo,wzo,Azo,Vv,yzo,bhe,Lzo,xzo,vhe,$zo,kzo,Xv,sIe,td,zv,Fhe,C6,Szo,The,Rzo,lIe,Do,w6,Bzo,ad,Pzo,LV,Izo,qzo,xV,Nzo,jzo,Dzo,A6,Gzo,Mhe,Ozo,Vzo,Xzo,ht,y6,zzo,Ehe,Qzo,Wzo,nd,Hzo,Che,Uzo,Jzo,$V,Yzo,Kzo,Zzo,Qv,eQo,so,L6,oQo,whe,rQo,tQo,Na,aQo,Ahe,nQo,sQo,yhe,lQo,iQo,Lhe,dQo,cQo,fQo,xhe,Wv,$he,mQo,gQo,kV,hQo,pQo,uQo,Hv,_Qo,khe,bQo,vQo,She,FQo,TQo,Uv,iIe,sd,Jv,Rhe,x6,MQo,Bhe,EQo,dIe,Go,$6,CQo,ld,wQo,SV,AQo,yQo,RV,LQo,xQo,$Qo,k6,kQo,Phe,SQo,RQo,BQo,pt,S6,PQo,Ihe,IQo,qQo,id,NQo,qhe,jQo,DQo,BV,GQo,OQo,VQo,Yv,XQo,lo,R6,zQo,Nhe,QQo,WQo,ja,HQo,jhe,UQo,JQo,Dhe,YQo,KQo,Ghe,ZQo,eWo,oWo,Ne,Kv,Ohe,rWo,tWo,PV,aWo,nWo,sWo,Zv,Vhe,lWo,iWo,IV,dWo,cWo,fWo,eF,Xhe,mWo,gWo,qV,hWo,pWo,uWo,oF,zhe,_Wo,bWo,NV,vWo,FWo,TWo,rF,Qhe,MWo,EWo,jV,CWo,wWo,AWo,tF,Whe,yWo,LWo,DV,xWo,$Wo,kWo,aF,Hhe,SWo,RWo,GV,BWo,PWo,IWo,nF,Uhe,qWo,NWo,OV,jWo,DWo,GWo,sF,OWo,Jhe,VWo,XWo,Yhe,zWo,QWo,lF,cIe,dd,iF,Khe,B6,WWo,Zhe,HWo,fIe,Oo,P6,UWo,cd,JWo,VV,YWo,KWo,XV,ZWo,eHo,oHo,I6,rHo,epe,tHo,aHo,nHo,ut,q6,sHo,ope,lHo,iHo,fd,dHo,rpe,cHo,fHo,zV,mHo,gHo,hHo,dF,pHo,io,N6,uHo,tpe,_Ho,bHo,Da,vHo,ape,FHo,THo,npe,MHo,EHo,spe,CHo,wHo,AHo,Ga,cF,lpe,yHo,LHo,QV,xHo,$Ho,kHo,fF,ipe,SHo,RHo,WV,BHo,PHo,IHo,mF,dpe,qHo,NHo,HV,jHo,DHo,GHo,gF,cpe,OHo,VHo,UV,XHo,zHo,QHo,hF,WHo,fpe,HHo,UHo,mpe,JHo,YHo,pF,mIe,md,uF,gpe,j6,KHo,hpe,ZHo,gIe,Vo,D6,eUo,gd,oUo,JV,rUo,tUo,YV,aUo,nUo,sUo,G6,lUo,ppe,iUo,dUo,cUo,_t,O6,fUo,upe,mUo,gUo,hd,hUo,_pe,pUo,uUo,KV,_Uo,bUo,vUo,_F,FUo,co,V6,TUo,bpe,MUo,EUo,Oa,CUo,vpe,wUo,AUo,Fpe,yUo,LUo,Tpe,xUo,$Uo,kUo,je,bF,Mpe,SUo,RUo,ZV,BUo,PUo,IUo,vF,Epe,qUo,NUo,eX,jUo,DUo,GUo,FF,Cpe,OUo,VUo,oX,XUo,zUo,QUo,TF,wpe,WUo,HUo,rX,UUo,JUo,YUo,MF,Ape,KUo,ZUo,tX,eJo,oJo,rJo,EF,ype,tJo,aJo,aX,nJo,sJo,lJo,CF,Lpe,iJo,dJo,nX,cJo,fJo,mJo,wF,xpe,gJo,hJo,sX,pJo,uJo,_Jo,AF,bJo,$pe,vJo,FJo,kpe,TJo,MJo,yF,hIe,pd,LF,Spe,X6,EJo,Rpe,CJo,pIe,Xo,z6,wJo,ud,AJo,lX,yJo,LJo,iX,xJo,$Jo,kJo,Q6,SJo,Bpe,RJo,BJo,PJo,bt,W6,IJo,Ppe,qJo,NJo,_d,jJo,Ipe,DJo,GJo,dX,OJo,VJo,XJo,xF,zJo,fo,H6,QJo,qpe,WJo,HJo,Va,UJo,Npe,JJo,YJo,jpe,KJo,ZJo,Dpe,eYo,oYo,rYo,U6,$F,Gpe,tYo,aYo,cX,nYo,sYo,lYo,kF,Ope,iYo,dYo,fX,cYo,fYo,mYo,SF,gYo,Vpe,hYo,pYo,Xpe,uYo,_Yo,RF,uIe,bd,BF,zpe,J6,bYo,Qpe,vYo,_Ie,zo,Y6,FYo,vd,TYo,mX,MYo,EYo,gX,CYo,wYo,AYo,K6,yYo,Wpe,LYo,xYo,$Yo,vt,Z6,kYo,Hpe,SYo,RYo,Fd,BYo,Upe,PYo,IYo,hX,qYo,NYo,jYo,PF,DYo,mo,ey,GYo,Jpe,OYo,VYo,Xa,XYo,Ype,zYo,QYo,Kpe,WYo,HYo,Zpe,UYo,JYo,YYo,za,IF,eue,KYo,ZYo,pX,eKo,oKo,rKo,qF,oue,tKo,aKo,uX,nKo,sKo,lKo,NF,rue,iKo,dKo,_X,cKo,fKo,mKo,jF,tue,gKo,hKo,bX,pKo,uKo,_Ko,DF,bKo,aue,vKo,FKo,nue,TKo,MKo,GF,bIe,Td,OF,sue,oy,EKo,lue,CKo,vIe,Qo,ry,wKo,Md,AKo,vX,yKo,LKo,FX,xKo,$Ko,kKo,ty,SKo,iue,RKo,BKo,PKo,Ft,ay,IKo,due,qKo,NKo,Ed,jKo,cue,DKo,GKo,TX,OKo,VKo,XKo,VF,zKo,go,ny,QKo,fue,WKo,HKo,Qa,UKo,mue,JKo,YKo,gue,KKo,ZKo,hue,eZo,oZo,rZo,Cd,XF,pue,tZo,aZo,MX,nZo,sZo,lZo,zF,uue,iZo,dZo,EX,cZo,fZo,mZo,QF,_ue,gZo,hZo,CX,pZo,uZo,_Zo,WF,bZo,bue,vZo,FZo,vue,TZo,MZo,HF,FIe,wd,UF,Fue,sy,EZo,Tue,CZo,TIe,Wo,ly,wZo,Ad,AZo,wX,yZo,LZo,AX,xZo,$Zo,kZo,iy,SZo,Mue,RZo,BZo,PZo,Tt,dy,IZo,Eue,qZo,NZo,yd,jZo,Cue,DZo,GZo,yX,OZo,VZo,XZo,JF,zZo,ho,cy,QZo,wue,WZo,HZo,Wa,UZo,Aue,JZo,YZo,yue,KZo,ZZo,Lue,eer,oer,rer,fy,YF,xue,ter,aer,LX,ner,ser,ler,KF,$ue,ier,der,xX,cer,fer,mer,ZF,ger,kue,her,per,Sue,uer,_er,e0,MIe,Ld,o0,Rue,my,ber,Bue,ver,EIe,Ho,gy,Fer,xd,Ter,$X,Mer,Eer,kX,Cer,wer,Aer,hy,yer,Pue,Ler,xer,$er,Mt,py,ker,Iue,Ser,Rer,$d,Ber,que,Per,Ier,SX,qer,Ner,jer,r0,Der,po,uy,Ger,Nue,Oer,Ver,Ha,Xer,jue,zer,Qer,Due,Wer,Her,Gue,Uer,Jer,Yer,Oue,t0,Vue,Ker,Zer,RX,eor,oor,ror,a0,tor,Xue,aor,nor,zue,sor,lor,n0,CIe,kd,s0,Que,_y,ior,Wue,dor,wIe,Uo,by,cor,Sd,mor,BX,gor,hor,PX,por,uor,_or,vy,bor,Hue,vor,For,Tor,Et,Fy,Mor,Uue,Eor,Cor,Rd,wor,Jue,Aor,yor,IX,Lor,xor,$or,l0,kor,uo,Ty,Sor,Yue,Ror,Bor,Ua,Por,Kue,Ior,qor,Zue,Nor,jor,e_e,Dor,Gor,Oor,Ja,i0,o_e,Vor,Xor,qX,zor,Qor,Wor,d0,r_e,Hor,Uor,NX,Jor,Yor,Kor,c0,t_e,Zor,err,jX,orr,rrr,trr,f0,a_e,arr,nrr,DX,srr,lrr,irr,m0,drr,n_e,crr,frr,s_e,mrr,grr,g0,AIe,Bd,h0,l_e,My,hrr,i_e,prr,yIe,Jo,Ey,urr,Pd,_rr,GX,brr,vrr,OX,Frr,Trr,Mrr,Cy,Err,d_e,Crr,wrr,Arr,Ct,wy,yrr,c_e,Lrr,xrr,Id,$rr,f_e,krr,Srr,VX,Rrr,Brr,Prr,p0,Irr,_o,Ay,qrr,m_e,Nrr,jrr,Ya,Drr,g_e,Grr,Orr,h_e,Vrr,Xrr,p_e,zrr,Qrr,Wrr,u_e,u0,__e,Hrr,Urr,XX,Jrr,Yrr,Krr,_0,Zrr,b_e,etr,otr,v_e,rtr,ttr,b0,LIe,qd,v0,F_e,yy,atr,T_e,ntr,xIe,Yo,Ly,str,Nd,ltr,zX,itr,dtr,QX,ctr,ftr,mtr,xy,gtr,M_e,htr,ptr,utr,wt,$y,_tr,E_e,btr,vtr,jd,Ftr,C_e,Ttr,Mtr,WX,Etr,Ctr,wtr,F0,Atr,wr,ky,ytr,w_e,Ltr,xtr,Ka,$tr,A_e,ktr,Str,y_e,Rtr,Btr,L_e,Ptr,Itr,qtr,j,T0,x_e,Ntr,jtr,HX,Dtr,Gtr,Otr,M0,$_e,Vtr,Xtr,UX,ztr,Qtr,Wtr,E0,k_e,Htr,Utr,JX,Jtr,Ytr,Ktr,C0,S_e,Ztr,ear,YX,oar,rar,tar,w0,R_e,aar,nar,KX,sar,lar,iar,A0,B_e,dar,car,ZX,far,mar,gar,y0,P_e,har,par,ez,uar,_ar,bar,L0,I_e,Far,Tar,oz,Mar,Ear,Car,x0,q_e,war,Aar,rz,yar,Lar,xar,$0,N_e,$ar,kar,tz,Sar,Rar,Bar,k0,j_e,Par,Iar,az,qar,Nar,jar,S0,D_e,Dar,Gar,nz,Oar,Var,Xar,R0,G_e,zar,Qar,sz,War,Har,Uar,B0,O_e,Jar,Yar,lz,Kar,Zar,enr,P0,V_e,onr,rnr,iz,tnr,anr,nnr,I0,X_e,snr,lnr,dz,inr,dnr,cnr,q0,z_e,fnr,mnr,cz,gnr,hnr,pnr,Bs,Q_e,unr,_nr,fz,bnr,vnr,mz,Fnr,Tnr,Mnr,N0,W_e,Enr,Cnr,gz,wnr,Anr,ynr,j0,H_e,Lnr,xnr,hz,$nr,knr,Snr,D0,U_e,Rnr,Bnr,pz,Pnr,Inr,qnr,G0,J_e,Nnr,jnr,uz,Dnr,Gnr,Onr,O0,Y_e,Vnr,Xnr,_z,znr,Qnr,Wnr,V0,K_e,Hnr,Unr,bz,Jnr,Ynr,Knr,X0,Z_e,Znr,esr,vz,osr,rsr,tsr,z0,e1e,asr,nsr,Fz,ssr,lsr,isr,Q0,o1e,dsr,csr,Tz,fsr,msr,gsr,W0,r1e,hsr,psr,Mz,usr,_sr,bsr,H0,t1e,vsr,Fsr,Ez,Tsr,Msr,Esr,U0,a1e,Csr,wsr,Cz,Asr,ysr,Lsr,J0,n1e,xsr,$sr,wz,ksr,Ssr,Rsr,Y0,s1e,Bsr,Psr,Az,Isr,qsr,Nsr,K0,l1e,jsr,Dsr,yz,Gsr,Osr,Vsr,Z0,i1e,Xsr,zsr,Lz,Qsr,Wsr,Hsr,eT,d1e,Usr,Jsr,xz,Ysr,Ksr,Zsr,oT,c1e,elr,olr,$z,rlr,tlr,alr,rT,f1e,nlr,slr,kz,llr,ilr,dlr,tT,m1e,clr,flr,Sz,mlr,glr,hlr,aT,g1e,plr,ulr,Rz,_lr,blr,vlr,nT,h1e,Flr,Tlr,Bz,Mlr,Elr,Clr,sT,p1e,wlr,Alr,Pz,ylr,Llr,xlr,lT,u1e,$lr,klr,Iz,Slr,Rlr,Blr,iT,_1e,Plr,Ilr,qz,qlr,Nlr,jlr,dT,b1e,Dlr,Glr,Nz,Olr,Vlr,Xlr,cT,v1e,zlr,Qlr,jz,Wlr,Hlr,Ulr,fT,$Ie,Dd,mT,F1e,Sy,Jlr,T1e,Ylr,kIe,Ko,Ry,Klr,Gd,Zlr,Dz,eir,oir,Gz,rir,tir,air,By,nir,M1e,sir,lir,iir,At,Py,dir,E1e,cir,fir,Od,mir,C1e,gir,hir,Oz,pir,uir,_ir,gT,bir,Ar,Iy,vir,w1e,Fir,Tir,Za,Mir,A1e,Eir,Cir,y1e,wir,Air,L1e,yir,Lir,xir,ne,hT,x1e,$ir,kir,Vz,Sir,Rir,Bir,pT,$1e,Pir,Iir,Xz,qir,Nir,jir,uT,k1e,Dir,Gir,zz,Oir,Vir,Xir,_T,S1e,zir,Qir,Qz,Wir,Hir,Uir,bT,R1e,Jir,Yir,Wz,Kir,Zir,edr,vT,B1e,odr,rdr,Hz,tdr,adr,ndr,FT,P1e,sdr,ldr,Uz,idr,ddr,cdr,TT,I1e,fdr,mdr,Jz,gdr,hdr,pdr,MT,q1e,udr,_dr,Yz,bdr,vdr,Fdr,ET,N1e,Tdr,Mdr,Kz,Edr,Cdr,wdr,CT,j1e,Adr,ydr,Zz,Ldr,xdr,$dr,wT,D1e,kdr,Sdr,eQ,Rdr,Bdr,Pdr,AT,G1e,Idr,qdr,oQ,Ndr,jdr,Ddr,yT,O1e,Gdr,Odr,rQ,Vdr,Xdr,zdr,LT,V1e,Qdr,Wdr,tQ,Hdr,Udr,Jdr,xT,X1e,Ydr,Kdr,aQ,Zdr,ecr,ocr,$T,z1e,rcr,tcr,nQ,acr,ncr,scr,kT,Q1e,lcr,icr,sQ,dcr,ccr,fcr,ST,W1e,mcr,gcr,lQ,hcr,pcr,ucr,RT,H1e,_cr,bcr,iQ,vcr,Fcr,Tcr,BT,U1e,Mcr,Ecr,dQ,Ccr,wcr,Acr,PT,J1e,ycr,Lcr,cQ,xcr,$cr,kcr,IT,Y1e,Scr,Rcr,fQ,Bcr,Pcr,Icr,qT,SIe,Vd,NT,K1e,qy,qcr,Z1e,Ncr,RIe,Zo,Ny,jcr,Xd,Dcr,mQ,Gcr,Ocr,gQ,Vcr,Xcr,zcr,jy,Qcr,e8e,Wcr,Hcr,Ucr,yt,Dy,Jcr,o8e,Ycr,Kcr,zd,Zcr,r8e,efr,ofr,hQ,rfr,tfr,afr,jT,nfr,yr,Gy,sfr,t8e,lfr,ifr,en,dfr,a8e,cfr,ffr,n8e,mfr,gfr,s8e,hfr,pfr,ufr,Te,DT,l8e,_fr,bfr,pQ,vfr,Ffr,Tfr,GT,i8e,Mfr,Efr,uQ,Cfr,wfr,Afr,OT,d8e,yfr,Lfr,_Q,xfr,$fr,kfr,VT,c8e,Sfr,Rfr,bQ,Bfr,Pfr,Ifr,XT,f8e,qfr,Nfr,vQ,jfr,Dfr,Gfr,zT,m8e,Ofr,Vfr,FQ,Xfr,zfr,Qfr,QT,g8e,Wfr,Hfr,TQ,Ufr,Jfr,Yfr,WT,h8e,Kfr,Zfr,MQ,emr,omr,rmr,HT,p8e,tmr,amr,EQ,nmr,smr,lmr,UT,u8e,imr,dmr,CQ,cmr,fmr,mmr,JT,_8e,gmr,hmr,wQ,pmr,umr,_mr,YT,b8e,bmr,vmr,AQ,Fmr,Tmr,Mmr,KT,BIe,Qd,ZT,v8e,Oy,Emr,F8e,Cmr,PIe,er,Vy,wmr,Wd,Amr,yQ,ymr,Lmr,LQ,xmr,$mr,kmr,Xy,Smr,T8e,Rmr,Bmr,Pmr,Lt,zy,Imr,M8e,qmr,Nmr,Hd,jmr,E8e,Dmr,Gmr,xQ,Omr,Vmr,Xmr,e7,zmr,Lr,Qy,Qmr,C8e,Wmr,Hmr,on,Umr,w8e,Jmr,Ymr,A8e,Kmr,Zmr,y8e,egr,ogr,rgr,Ud,o7,L8e,tgr,agr,$Q,ngr,sgr,lgr,r7,x8e,igr,dgr,kQ,cgr,fgr,mgr,t7,$8e,ggr,hgr,SQ,pgr,ugr,_gr,a7,IIe,Jd,n7,k8e,Wy,bgr,S8e,vgr,qIe,or,Hy,Fgr,Yd,Tgr,RQ,Mgr,Egr,BQ,Cgr,wgr,Agr,Uy,ygr,R8e,Lgr,xgr,$gr,xt,Jy,kgr,B8e,Sgr,Rgr,Kd,Bgr,P8e,Pgr,Igr,PQ,qgr,Ngr,jgr,s7,Dgr,xr,Yy,Ggr,I8e,Ogr,Vgr,rn,Xgr,q8e,zgr,Qgr,N8e,Wgr,Hgr,j8e,Ugr,Jgr,Ygr,ie,l7,D8e,Kgr,Zgr,IQ,ehr,ohr,rhr,i7,G8e,thr,ahr,qQ,nhr,shr,lhr,d7,O8e,ihr,dhr,NQ,chr,fhr,mhr,c7,V8e,ghr,hhr,jQ,phr,uhr,_hr,f7,X8e,bhr,vhr,DQ,Fhr,Thr,Mhr,m7,z8e,Ehr,Chr,GQ,whr,Ahr,yhr,g7,Q8e,Lhr,xhr,OQ,$hr,khr,Shr,h7,W8e,Rhr,Bhr,VQ,Phr,Ihr,qhr,p7,H8e,Nhr,jhr,XQ,Dhr,Ghr,Ohr,u7,U8e,Vhr,Xhr,zQ,zhr,Qhr,Whr,_7,J8e,Hhr,Uhr,QQ,Jhr,Yhr,Khr,b7,Y8e,Zhr,epr,WQ,opr,rpr,tpr,v7,K8e,apr,npr,HQ,spr,lpr,ipr,F7,Z8e,dpr,cpr,UQ,fpr,mpr,gpr,T7,ebe,hpr,ppr,JQ,upr,_pr,bpr,M7,obe,vpr,Fpr,YQ,Tpr,Mpr,Epr,E7,rbe,Cpr,wpr,KQ,Apr,ypr,Lpr,C7,tbe,xpr,$pr,ZQ,kpr,Spr,Rpr,w7,abe,Bpr,Ppr,eW,Ipr,qpr,Npr,A7,nbe,jpr,Dpr,oW,Gpr,Opr,Vpr,y7,NIe,Zd,L7,sbe,Ky,Xpr,lbe,zpr,jIe,rr,Zy,Qpr,ec,Wpr,rW,Hpr,Upr,tW,Jpr,Ypr,Kpr,eL,Zpr,ibe,eur,our,rur,$t,oL,tur,dbe,aur,nur,oc,sur,cbe,lur,iur,aW,dur,cur,fur,x7,mur,$r,rL,gur,fbe,hur,pur,tn,uur,mbe,_ur,bur,gbe,vur,Fur,hbe,Tur,Mur,Eur,ye,$7,pbe,Cur,wur,nW,Aur,yur,Lur,k7,ube,xur,$ur,sW,kur,Sur,Rur,S7,_be,Bur,Pur,lW,Iur,qur,Nur,R7,bbe,jur,Dur,iW,Gur,Our,Vur,B7,vbe,Xur,zur,dW,Qur,Wur,Hur,P7,Fbe,Uur,Jur,cW,Yur,Kur,Zur,I7,Tbe,e_r,o_r,fW,r_r,t_r,a_r,q7,Mbe,n_r,s_r,mW,l_r,i_r,d_r,N7,Ebe,c_r,f_r,gW,m_r,g_r,h_r,j7,Cbe,p_r,u_r,hW,__r,b_r,v_r,D7,DIe,rc,G7,wbe,tL,F_r,Abe,T_r,GIe,tr,aL,M_r,tc,E_r,pW,C_r,w_r,uW,A_r,y_r,L_r,nL,x_r,ybe,$_r,k_r,S_r,kt,sL,R_r,Lbe,B_r,P_r,ac,I_r,xbe,q_r,N_r,_W,j_r,D_r,G_r,O7,O_r,kr,lL,V_r,$be,X_r,z_r,an,Q_r,kbe,W_r,H_r,Sbe,U_r,J_r,Rbe,Y_r,K_r,Z_r,Z,V7,Bbe,e1r,o1r,bW,r1r,t1r,a1r,X7,Pbe,n1r,s1r,vW,l1r,i1r,d1r,z7,Ibe,c1r,f1r,FW,m1r,g1r,h1r,Q7,qbe,p1r,u1r,TW,_1r,b1r,v1r,W7,Nbe,F1r,T1r,MW,M1r,E1r,C1r,H7,jbe,w1r,A1r,EW,y1r,L1r,x1r,U7,Dbe,$1r,k1r,CW,S1r,R1r,B1r,J7,Gbe,P1r,I1r,wW,q1r,N1r,j1r,Y7,Obe,D1r,G1r,AW,O1r,V1r,X1r,K7,Vbe,z1r,Q1r,yW,W1r,H1r,U1r,Z7,Xbe,J1r,Y1r,LW,K1r,Z1r,e8r,eM,zbe,o8r,r8r,xW,t8r,a8r,n8r,oM,Qbe,s8r,l8r,$W,i8r,d8r,c8r,rM,Wbe,f8r,m8r,kW,g8r,h8r,p8r,tM,Hbe,u8r,_8r,SW,b8r,v8r,F8r,aM,Ube,T8r,M8r,RW,E8r,C8r,w8r,nM,Jbe,A8r,y8r,BW,L8r,x8r,$8r,sM,Ybe,k8r,S8r,PW,R8r,B8r,P8r,lM,Kbe,I8r,q8r,IW,N8r,j8r,D8r,iM,Zbe,G8r,O8r,qW,V8r,X8r,z8r,dM,e2e,Q8r,W8r,NW,H8r,U8r,J8r,cM,o2e,Y8r,K8r,jW,Z8r,ebr,obr,fM,r2e,rbr,tbr,DW,abr,nbr,sbr,mM,t2e,lbr,ibr,GW,dbr,cbr,fbr,gM,a2e,mbr,gbr,OW,hbr,pbr,ubr,hM,n2e,_br,bbr,VW,vbr,Fbr,Tbr,pM,OIe,nc,uM,s2e,iL,Mbr,l2e,Ebr,VIe,ar,dL,Cbr,sc,wbr,XW,Abr,ybr,zW,Lbr,xbr,$br,cL,kbr,i2e,Sbr,Rbr,Bbr,St,fL,Pbr,d2e,Ibr,qbr,lc,Nbr,c2e,jbr,Dbr,QW,Gbr,Obr,Vbr,_M,Xbr,Sr,mL,zbr,f2e,Qbr,Wbr,nn,Hbr,m2e,Ubr,Jbr,g2e,Ybr,Kbr,h2e,Zbr,e2r,o2r,pe,bM,p2e,r2r,t2r,WW,a2r,n2r,s2r,vM,u2e,l2r,i2r,HW,d2r,c2r,f2r,FM,_2e,m2r,g2r,UW,h2r,p2r,u2r,TM,b2e,_2r,b2r,JW,v2r,F2r,T2r,MM,v2e,M2r,E2r,YW,C2r,w2r,A2r,EM,F2e,y2r,L2r,KW,x2r,$2r,k2r,CM,T2e,S2r,R2r,ZW,B2r,P2r,I2r,wM,M2e,q2r,N2r,eH,j2r,D2r,G2r,AM,E2e,O2r,V2r,oH,X2r,z2r,Q2r,yM,C2e,W2r,H2r,rH,U2r,J2r,Y2r,LM,w2e,K2r,Z2r,tH,evr,ovr,rvr,xM,A2e,tvr,avr,aH,nvr,svr,lvr,$M,y2e,ivr,dvr,nH,cvr,fvr,mvr,kM,L2e,gvr,hvr,sH,pvr,uvr,_vr,SM,x2e,bvr,vvr,lH,Fvr,Tvr,Mvr,RM,$2e,Evr,Cvr,iH,wvr,Avr,yvr,BM,k2e,Lvr,xvr,dH,$vr,kvr,Svr,PM,XIe,ic,IM,S2e,gL,Rvr,R2e,Bvr,zIe,nr,hL,Pvr,dc,Ivr,cH,qvr,Nvr,fH,jvr,Dvr,Gvr,pL,Ovr,B2e,Vvr,Xvr,zvr,Rt,uL,Qvr,P2e,Wvr,Hvr,cc,Uvr,I2e,Jvr,Yvr,mH,Kvr,Zvr,eFr,qM,oFr,Rr,_L,rFr,q2e,tFr,aFr,sn,nFr,N2e,sFr,lFr,j2e,iFr,dFr,D2e,cFr,fFr,mFr,bL,NM,G2e,gFr,hFr,gH,pFr,uFr,_Fr,jM,O2e,bFr,vFr,hH,FFr,TFr,MFr,DM,QIe,fc,GM,V2e,vL,EFr,X2e,CFr,WIe,sr,FL,wFr,mc,AFr,pH,yFr,LFr,uH,xFr,$Fr,kFr,TL,SFr,z2e,RFr,BFr,PFr,Bt,ML,IFr,Q2e,qFr,NFr,gc,jFr,W2e,DFr,GFr,_H,OFr,VFr,XFr,OM,zFr,Br,EL,QFr,H2e,WFr,HFr,ln,UFr,U2e,JFr,YFr,J2e,KFr,ZFr,Y2e,e0r,o0r,r0r,K2e,VM,Z2e,t0r,a0r,bH,n0r,s0r,l0r,XM,HIe,hc,zM,eve,CL,i0r,ove,d0r,UIe,lr,wL,c0r,pc,f0r,vH,m0r,g0r,FH,h0r,p0r,u0r,AL,_0r,rve,b0r,v0r,F0r,Pt,yL,T0r,tve,M0r,E0r,uc,C0r,ave,w0r,A0r,TH,y0r,L0r,x0r,QM,$0r,Pr,LL,k0r,nve,S0r,R0r,dn,B0r,sve,P0r,I0r,lve,q0r,N0r,ive,j0r,D0r,G0r,de,WM,dve,O0r,V0r,MH,X0r,z0r,Q0r,HM,cve,W0r,H0r,EH,U0r,J0r,Y0r,UM,fve,K0r,Z0r,CH,eTr,oTr,rTr,JM,mve,tTr,aTr,wH,nTr,sTr,lTr,YM,gve,iTr,dTr,AH,cTr,fTr,mTr,KM,hve,gTr,hTr,yH,pTr,uTr,_Tr,ZM,pve,bTr,vTr,LH,FTr,TTr,MTr,e4,uve,ETr,CTr,xH,wTr,ATr,yTr,o4,_ve,LTr,xTr,$H,$Tr,kTr,STr,r4,bve,RTr,BTr,kH,PTr,ITr,qTr,t4,vve,NTr,jTr,SH,DTr,GTr,OTr,a4,Fve,VTr,XTr,RH,zTr,QTr,WTr,n4,Tve,HTr,UTr,BH,JTr,YTr,KTr,s4,Mve,ZTr,e7r,PH,o7r,r7r,t7r,l4,Eve,a7r,n7r,IH,s7r,l7r,i7r,i4,Cve,d7r,c7r,qH,f7r,m7r,g7r,d4,wve,h7r,p7r,NH,u7r,_7r,b7r,c4,Ave,v7r,F7r,jH,T7r,M7r,E7r,f4,yve,C7r,w7r,DH,A7r,y7r,L7r,m4,Lve,x7r,$7r,GH,k7r,S7r,R7r,g4,JIe,_c,h4,xve,xL,B7r,$ve,P7r,YIe,ir,$L,I7r,bc,q7r,OH,N7r,j7r,VH,D7r,G7r,O7r,kL,V7r,kve,X7r,z7r,Q7r,It,SL,W7r,Sve,H7r,U7r,vc,J7r,Rve,Y7r,K7r,XH,Z7r,eMr,oMr,p4,rMr,Ir,RL,tMr,Bve,aMr,nMr,cn,sMr,Pve,lMr,iMr,Ive,dMr,cMr,qve,fMr,mMr,gMr,ce,u4,Nve,hMr,pMr,zH,uMr,_Mr,bMr,_4,jve,vMr,FMr,QH,TMr,MMr,EMr,b4,Dve,CMr,wMr,WH,AMr,yMr,LMr,v4,Gve,xMr,$Mr,HH,kMr,SMr,RMr,F4,Ove,BMr,PMr,UH,IMr,qMr,NMr,T4,Vve,jMr,DMr,JH,GMr,OMr,VMr,M4,Xve,XMr,zMr,YH,QMr,WMr,HMr,E4,zve,UMr,JMr,KH,YMr,KMr,ZMr,C4,Qve,e4r,o4r,ZH,r4r,t4r,a4r,w4,Wve,n4r,s4r,eU,l4r,i4r,d4r,A4,Hve,c4r,f4r,oU,m4r,g4r,h4r,y4,Uve,p4r,u4r,rU,_4r,b4r,v4r,L4,Jve,F4r,T4r,tU,M4r,E4r,C4r,x4,Yve,w4r,A4r,aU,y4r,L4r,x4r,$4,Kve,$4r,k4r,nU,S4r,R4r,B4r,k4,Zve,P4r,I4r,sU,q4r,N4r,j4r,S4,eFe,D4r,G4r,lU,O4r,V4r,X4r,R4,oFe,z4r,Q4r,iU,W4r,H4r,U4r,B4,rFe,J4r,Y4r,dU,K4r,Z4r,eEr,P4,tFe,oEr,rEr,cU,tEr,aEr,nEr,I4,KIe,Fc,q4,aFe,BL,sEr,nFe,lEr,ZIe,dr,PL,iEr,Tc,dEr,fU,cEr,fEr,mU,mEr,gEr,hEr,IL,pEr,sFe,uEr,_Er,bEr,qt,qL,vEr,lFe,FEr,TEr,Mc,MEr,iFe,EEr,CEr,gU,wEr,AEr,yEr,N4,LEr,qr,NL,xEr,dFe,$Er,kEr,fn,SEr,cFe,REr,BEr,fFe,PEr,IEr,mFe,qEr,NEr,jEr,gFe,j4,hFe,DEr,GEr,hU,OEr,VEr,XEr,D4,eqe,Ec,G4,pFe,jL,zEr,uFe,QEr,oqe,cr,DL,WEr,Cc,HEr,pU,UEr,JEr,uU,YEr,KEr,ZEr,GL,e5r,_Fe,o5r,r5r,t5r,Nt,OL,a5r,bFe,n5r,s5r,wc,l5r,vFe,i5r,d5r,_U,c5r,f5r,m5r,O4,g5r,Nr,VL,h5r,FFe,p5r,u5r,mn,_5r,TFe,b5r,v5r,MFe,F5r,T5r,EFe,M5r,E5r,C5r,CFe,V4,wFe,w5r,A5r,bU,y5r,L5r,x5r,X4,rqe,Ac,z4,AFe,XL,$5r,yFe,k5r,tqe,fr,zL,S5r,yc,R5r,vU,B5r,P5r,FU,I5r,q5r,N5r,QL,j5r,LFe,D5r,G5r,O5r,jt,WL,V5r,xFe,X5r,z5r,Lc,Q5r,$Fe,W5r,H5r,TU,U5r,J5r,Y5r,Q4,K5r,jr,HL,Z5r,kFe,eCr,oCr,gn,rCr,SFe,tCr,aCr,RFe,nCr,sCr,BFe,lCr,iCr,dCr,oe,W4,PFe,cCr,fCr,MU,mCr,gCr,hCr,H4,IFe,pCr,uCr,EU,_Cr,bCr,vCr,U4,qFe,FCr,TCr,CU,MCr,ECr,CCr,J4,NFe,wCr,ACr,wU,yCr,LCr,xCr,Y4,jFe,$Cr,kCr,AU,SCr,RCr,BCr,K4,DFe,PCr,ICr,yU,qCr,NCr,jCr,Z4,GFe,DCr,GCr,LU,OCr,VCr,XCr,eE,OFe,zCr,QCr,xU,WCr,HCr,UCr,oE,VFe,JCr,YCr,$U,KCr,ZCr,e3r,rE,XFe,o3r,r3r,kU,t3r,a3r,n3r,tE,zFe,s3r,l3r,SU,i3r,d3r,c3r,aE,QFe,f3r,m3r,RU,g3r,h3r,p3r,nE,WFe,u3r,_3r,BU,b3r,v3r,F3r,sE,HFe,T3r,M3r,PU,E3r,C3r,w3r,lE,UFe,A3r,y3r,IU,L3r,x3r,$3r,iE,JFe,k3r,S3r,qU,R3r,B3r,P3r,dE,YFe,I3r,q3r,NU,N3r,j3r,D3r,cE,KFe,G3r,O3r,jU,V3r,X3r,z3r,fE,ZFe,Q3r,W3r,DU,H3r,U3r,J3r,mE,e0e,Y3r,K3r,GU,Z3r,ewr,owr,gE,o0e,rwr,twr,OU,awr,nwr,swr,hE,r0e,lwr,iwr,VU,dwr,cwr,fwr,pE,t0e,mwr,gwr,XU,hwr,pwr,uwr,uE,a0e,_wr,bwr,zU,vwr,Fwr,Twr,_E,n0e,Mwr,Ewr,QU,Cwr,wwr,Awr,bE,aqe,xc,vE,s0e,UL,ywr,l0e,Lwr,nqe,mr,JL,xwr,$c,$wr,WU,kwr,Swr,HU,Rwr,Bwr,Pwr,YL,Iwr,i0e,qwr,Nwr,jwr,Dt,KL,Dwr,d0e,Gwr,Owr,kc,Vwr,c0e,Xwr,zwr,UU,Qwr,Wwr,Hwr,FE,Uwr,Dr,ZL,Jwr,f0e,Ywr,Kwr,hn,Zwr,m0e,eAr,oAr,g0e,rAr,tAr,h0e,aAr,nAr,sAr,ke,TE,p0e,lAr,iAr,JU,dAr,cAr,fAr,ME,u0e,mAr,gAr,YU,hAr,pAr,uAr,EE,_0e,_Ar,bAr,KU,vAr,FAr,TAr,CE,b0e,MAr,EAr,ZU,CAr,wAr,AAr,wE,v0e,yAr,LAr,eJ,xAr,$Ar,kAr,AE,F0e,SAr,RAr,oJ,BAr,PAr,IAr,yE,T0e,qAr,NAr,rJ,jAr,DAr,GAr,LE,M0e,OAr,VAr,tJ,XAr,zAr,QAr,xE,E0e,WAr,HAr,aJ,UAr,JAr,YAr,$E,sqe,Sc,kE,C0e,ex,KAr,w0e,ZAr,lqe,gr,ox,e6r,Rc,o6r,nJ,r6r,t6r,sJ,a6r,n6r,s6r,rx,l6r,A0e,i6r,d6r,c6r,Gt,tx,f6r,y0e,m6r,g6r,Bc,h6r,L0e,p6r,u6r,lJ,_6r,b6r,v6r,SE,F6r,Gr,ax,T6r,x0e,M6r,E6r,pn,C6r,$0e,w6r,A6r,k0e,y6r,L6r,S0e,x6r,$6r,k6r,Me,RE,R0e,S6r,R6r,iJ,B6r,P6r,I6r,BE,B0e,q6r,N6r,dJ,j6r,D6r,G6r,PE,P0e,O6r,V6r,cJ,X6r,z6r,Q6r,IE,I0e,W6r,H6r,fJ,U6r,J6r,Y6r,qE,q0e,K6r,Z6r,mJ,eyr,oyr,ryr,NE,N0e,tyr,ayr,gJ,nyr,syr,lyr,jE,j0e,iyr,dyr,hJ,cyr,fyr,myr,DE,D0e,gyr,hyr,pJ,pyr,uyr,_yr,GE,G0e,byr,vyr,uJ,Fyr,Tyr,Myr,OE,O0e,Eyr,Cyr,_J,wyr,Ayr,yyr,VE,V0e,Lyr,xyr,bJ,$yr,kyr,Syr,XE,X0e,Ryr,Byr,vJ,Pyr,Iyr,qyr,zE,iqe,Pc,QE,z0e,nx,Nyr,Q0e,jyr,dqe,hr,sx,Dyr,Ic,Gyr,FJ,Oyr,Vyr,TJ,Xyr,zyr,Qyr,lx,Wyr,W0e,Hyr,Uyr,Jyr,Ot,ix,Yyr,H0e,Kyr,Zyr,qc,eLr,U0e,oLr,rLr,MJ,tLr,aLr,nLr,WE,sLr,Or,dx,lLr,J0e,iLr,dLr,un,cLr,Y0e,fLr,mLr,K0e,gLr,hLr,Z0e,pLr,uLr,_Lr,Le,HE,eTe,bLr,vLr,EJ,FLr,TLr,MLr,UE,oTe,ELr,CLr,CJ,wLr,ALr,yLr,JE,rTe,LLr,xLr,wJ,$Lr,kLr,SLr,YE,tTe,RLr,BLr,AJ,PLr,ILr,qLr,KE,aTe,NLr,jLr,yJ,DLr,GLr,OLr,ZE,nTe,VLr,XLr,LJ,zLr,QLr,WLr,e5,sTe,HLr,ULr,xJ,JLr,YLr,KLr,o5,lTe,ZLr,exr,$J,oxr,rxr,txr,r5,iTe,axr,nxr,kJ,sxr,lxr,ixr,t5,dTe,dxr,cxr,SJ,fxr,mxr,gxr,a5,cqe,Nc,n5,cTe,cx,hxr,fTe,pxr,fqe,pr,fx,uxr,jc,_xr,RJ,bxr,vxr,BJ,Fxr,Txr,Mxr,mx,Exr,mTe,Cxr,wxr,Axr,Vt,gx,yxr,gTe,Lxr,xxr,Dc,$xr,hTe,kxr,Sxr,PJ,Rxr,Bxr,Pxr,s5,Ixr,Vr,hx,qxr,pTe,Nxr,jxr,_n,Dxr,uTe,Gxr,Oxr,_Te,Vxr,Xxr,bTe,zxr,Qxr,Wxr,Se,l5,vTe,Hxr,Uxr,IJ,Jxr,Yxr,Kxr,i5,FTe,Zxr,e9r,qJ,o9r,r9r,t9r,d5,TTe,a9r,n9r,NJ,s9r,l9r,i9r,c5,MTe,d9r,c9r,jJ,f9r,m9r,g9r,f5,ETe,h9r,p9r,DJ,u9r,_9r,b9r,m5,CTe,v9r,F9r,GJ,T9r,M9r,E9r,g5,wTe,C9r,w9r,OJ,A9r,y9r,L9r,h5,ATe,x9r,$9r,VJ,k9r,S9r,R9r,p5,yTe,B9r,P9r,XJ,I9r,q9r,N9r,u5,mqe,Gc,_5,LTe,px,j9r,xTe,D9r,gqe,ur,ux,G9r,Oc,O9r,zJ,V9r,X9r,QJ,z9r,Q9r,W9r,_x,H9r,$Te,U9r,J9r,Y9r,Xt,bx,K9r,kTe,Z9r,e$r,Vc,o$r,STe,r$r,t$r,WJ,a$r,n$r,s$r,b5,l$r,Xr,vx,i$r,RTe,d$r,c$r,bn,f$r,BTe,m$r,g$r,PTe,h$r,p$r,ITe,u$r,_$r,b$r,xe,v5,qTe,v$r,F$r,HJ,T$r,M$r,E$r,F5,NTe,C$r,w$r,UJ,A$r,y$r,L$r,T5,jTe,x$r,$$r,JJ,k$r,S$r,R$r,M5,DTe,B$r,P$r,YJ,I$r,q$r,N$r,E5,GTe,j$r,D$r,KJ,G$r,O$r,V$r,C5,OTe,X$r,z$r,ZJ,Q$r,W$r,H$r,w5,VTe,U$r,J$r,eY,Y$r,K$r,Z$r,A5,XTe,ekr,okr,oY,rkr,tkr,akr,y5,zTe,nkr,skr,rY,lkr,ikr,dkr,L5,QTe,ckr,fkr,tY,mkr,gkr,hkr,x5,hqe,Xc,$5,WTe,Fx,pkr,HTe,ukr,pqe,_r,Tx,_kr,zc,bkr,aY,vkr,Fkr,nY,Tkr,Mkr,Ekr,Mx,Ckr,UTe,wkr,Akr,ykr,zt,Ex,Lkr,JTe,xkr,$kr,Qc,kkr,YTe,Skr,Rkr,sY,Bkr,Pkr,Ikr,k5,qkr,zr,Cx,Nkr,KTe,jkr,Dkr,vn,Gkr,ZTe,Okr,Vkr,e7e,Xkr,zkr,o7e,Qkr,Wkr,Hkr,$e,S5,r7e,Ukr,Jkr,lY,Ykr,Kkr,Zkr,R5,t7e,eSr,oSr,iY,rSr,tSr,aSr,B5,a7e,nSr,sSr,dY,lSr,iSr,dSr,P5,n7e,cSr,fSr,cY,mSr,gSr,hSr,I5,s7e,pSr,uSr,fY,_Sr,bSr,vSr,q5,l7e,FSr,TSr,mY,MSr,ESr,CSr,N5,i7e,wSr,ASr,gY,ySr,LSr,xSr,j5,d7e,$Sr,kSr,hY,SSr,RSr,BSr,D5,c7e,PSr,ISr,pY,qSr,NSr,jSr,G5,f7e,DSr,GSr,uY,OSr,VSr,XSr,O5,uqe,Wc,V5,m7e,wx,zSr,g7e,QSr,_qe,br,Ax,WSr,Hc,HSr,_Y,USr,JSr,bY,YSr,KSr,ZSr,yx,eRr,h7e,oRr,rRr,tRr,Qt,Lx,aRr,p7e,nRr,sRr,Uc,lRr,u7e,iRr,dRr,vY,cRr,fRr,mRr,X5,gRr,Qr,xx,hRr,_7e,pRr,uRr,Fn,_Rr,b7e,bRr,vRr,v7e,FRr,TRr,F7e,MRr,ERr,CRr,De,z5,T7e,wRr,ARr,FY,yRr,LRr,xRr,Q5,M7e,$Rr,kRr,TY,SRr,RRr,BRr,W5,E7e,PRr,IRr,MY,qRr,NRr,jRr,H5,C7e,DRr,GRr,EY,ORr,VRr,XRr,U5,w7e,zRr,QRr,CY,WRr,HRr,URr,J5,A7e,JRr,YRr,wY,KRr,ZRr,eBr,Y5,y7e,oBr,rBr,AY,tBr,aBr,nBr,K5,L7e,sBr,lBr,yY,iBr,dBr,cBr,Z5,bqe,Jc,eC,x7e,$x,fBr,$7e,mBr,vqe,vr,kx,gBr,Yc,hBr,LY,pBr,uBr,xY,_Br,bBr,vBr,Sx,FBr,k7e,TBr,MBr,EBr,Wt,Rx,CBr,S7e,wBr,ABr,Kc,yBr,R7e,LBr,xBr,$Y,$Br,kBr,SBr,oC,RBr,Wr,Bx,BBr,B7e,PBr,IBr,Tn,qBr,P7e,NBr,jBr,I7e,DBr,GBr,q7e,OBr,VBr,XBr,Ge,rC,N7e,zBr,QBr,kY,WBr,HBr,UBr,tC,j7e,JBr,YBr,SY,KBr,ZBr,ePr,aC,D7e,oPr,rPr,RY,tPr,aPr,nPr,nC,G7e,sPr,lPr,BY,iPr,dPr,cPr,sC,O7e,fPr,mPr,PY,gPr,hPr,pPr,lC,V7e,uPr,_Pr,IY,bPr,vPr,FPr,iC,X7e,TPr,MPr,qY,EPr,CPr,wPr,dC,z7e,APr,yPr,NY,LPr,xPr,$Pr,cC,Fqe,Zc,fC,Q7e,Px,kPr,W7e,SPr,Tqe,Fr,Ix,RPr,ef,BPr,jY,PPr,IPr,DY,qPr,NPr,jPr,qx,DPr,H7e,GPr,OPr,VPr,Ht,Nx,XPr,U7e,zPr,QPr,of,WPr,J7e,HPr,UPr,GY,JPr,YPr,KPr,mC,ZPr,Hr,jx,eIr,Y7e,oIr,rIr,Mn,tIr,K7e,aIr,nIr,Z7e,sIr,lIr,eMe,iIr,dIr,cIr,oMe,gC,rMe,fIr,mIr,OY,gIr,hIr,pIr,hC,Mqe,rf,pC,tMe,Dx,uIr,aMe,_Ir,Eqe,Tr,Gx,bIr,tf,vIr,VY,FIr,TIr,XY,MIr,EIr,CIr,Ox,wIr,nMe,AIr,yIr,LIr,Ut,Vx,xIr,sMe,$Ir,kIr,af,SIr,lMe,RIr,BIr,zY,PIr,IIr,qIr,uC,NIr,Ur,Xx,jIr,iMe,DIr,GIr,En,OIr,dMe,VIr,XIr,cMe,zIr,QIr,fMe,WIr,HIr,UIr,zx,_C,mMe,JIr,YIr,QY,KIr,ZIr,eqr,bC,gMe,oqr,rqr,WY,tqr,aqr,nqr,vC,Cqe,nf,FC,hMe,Qx,sqr,pMe,lqr,wqe,Mr,Wx,iqr,sf,dqr,HY,cqr,fqr,UY,mqr,gqr,hqr,Hx,pqr,uMe,uqr,_qr,bqr,Jt,Ux,vqr,_Me,Fqr,Tqr,lf,Mqr,bMe,Eqr,Cqr,JY,wqr,Aqr,yqr,TC,Lqr,Jr,Jx,xqr,vMe,$qr,kqr,Cn,Sqr,FMe,Rqr,Bqr,TMe,Pqr,Iqr,MMe,qqr,Nqr,jqr,EMe,MC,CMe,Dqr,Gqr,YY,Oqr,Vqr,Xqr,EC,Aqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Qw=new ee({}),Ww=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new zqr({props:{warning:!0,$$slots:{default:[fwt]},$$scope:{ctx:A}}}),Hw=new ee({}),Uw=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/configuration_auto.py#L566"}}),Kw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/configuration_auto.py#L589"}}),pg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[mwt]},$$scope:{ctx:A}}}),Zw=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/configuration_auto.py#L711"}}),eA=new ee({}),oA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/tokenization_auto.py#L378"}}),aA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17088/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/tokenization_auto.py#L392"}}),Hg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[gwt]},$$scope:{ctx:A}}}),nA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/tokenization_auto.py#L588"}}),sA=new ee({}),lA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),cA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17088/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),Th=new zqr({props:{$$slots:{default:[hwt]},$$scope:{ctx:A}}}),Mh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[pwt]},$$scope:{ctx:A}}}),fA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),mA=new ee({}),gA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/processing_auto.py#L76"}}),uA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/processing_auto.py#L90"}}),jh=new zqr({props:{$$slots:{default:[uwt]},$$scope:{ctx:A}}}),Dh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[_wt]},$$scope:{ctx:A}}}),_A=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/processing_auto.py#L243"}}),bA=new ee({}),vA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L719"}}),TA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Vh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[bwt]},$$scope:{ctx:A}}}),MA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Su=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[vwt]},$$scope:{ctx:A}}}),EA=new ee({}),CA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L726"}}),AA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Bu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Fwt]},$$scope:{ctx:A}}}),yA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),T_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Twt]},$$scope:{ctx:A}}}),LA=new ee({}),xA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L741"}}),kA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),E_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Mwt]},$$scope:{ctx:A}}}),SA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),l1=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Ewt]},$$scope:{ctx:A}}}),RA=new ee({}),BA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L748"}}),IA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),d1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Cwt]},$$scope:{ctx:A}}}),qA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Q1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[wwt]},$$scope:{ctx:A}}}),NA=new ee({}),jA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L755"}}),GA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),H1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Awt]},$$scope:{ctx:A}}}),OA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),g8=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ywt]},$$scope:{ctx:A}}}),VA=new ee({}),XA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L764"}}),QA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),p8=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Lwt]},$$scope:{ctx:A}}}),WA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),cb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[xwt]},$$scope:{ctx:A}}}),HA=new ee({}),UA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L798"}}),YA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),mb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[$wt]},$$scope:{ctx:A}}}),KA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Vb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[kwt]},$$scope:{ctx:A}}}),ZA=new ee({}),e6=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L805"}}),r6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),zb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Swt]},$$scope:{ctx:A}}}),t6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Kb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Rwt]},$$scope:{ctx:A}}}),a6=new ee({}),n6=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L791"}}),l6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),e2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Bwt]},$$scope:{ctx:A}}}),i6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),P2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Pwt]},$$scope:{ctx:A}}}),d6=new ee({}),c6=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L773"}}),m6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),q2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Iwt]},$$scope:{ctx:A}}}),g6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Cv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qwt]},$$scope:{ctx:A}}}),h6=new ee({}),p6=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L780"}}),_6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Av=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Nwt]},$$scope:{ctx:A}}}),b6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),xv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[jwt]},$$scope:{ctx:A}}}),v6=new ee({}),F6=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L814"}}),M6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),kv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Dwt]},$$scope:{ctx:A}}}),E6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Gwt]},$$scope:{ctx:A}}}),C6=new ee({}),w6=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L853"}}),y6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Owt]},$$scope:{ctx:A}}}),L6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Uv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Vwt]},$$scope:{ctx:A}}}),x6=new ee({}),$6=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L860"}}),S6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Yv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Xwt]},$$scope:{ctx:A}}}),R6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),lF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[zwt]},$$scope:{ctx:A}}}),B6=new ee({}),P6=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L883"}}),q6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),dF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Qwt]},$$scope:{ctx:A}}}),N6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),pF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Wwt]},$$scope:{ctx:A}}}),j6=new ee({}),D6=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L867"}}),O6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),_F=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Hwt]},$$scope:{ctx:A}}}),V6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),yF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Uwt]},$$scope:{ctx:A}}}),X6=new ee({}),z6=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L874"}}),W6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),xF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Jwt]},$$scope:{ctx:A}}}),H6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),RF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Ywt]},$$scope:{ctx:A}}}),J6=new ee({}),Y6=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L892"}}),Z6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),PF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Kwt]},$$scope:{ctx:A}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),GF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Zwt]},$$scope:{ctx:A}}}),oy=new ee({}),ry=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L899"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),VF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[eAt]},$$scope:{ctx:A}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[oAt]},$$scope:{ctx:A}}}),sy=new ee({}),ly=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L846"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[rAt]},$$scope:{ctx:A}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),e0=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[tAt]},$$scope:{ctx:A}}}),my=new ee({}),gy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L821"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[aAt]},$$scope:{ctx:A}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[nAt]},$$scope:{ctx:A}}}),_y=new ee({}),by=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L828"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),l0=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[sAt]},$$scope:{ctx:A}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),g0=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[lAt]},$$scope:{ctx:A}}}),My=new ee({}),Ey=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L837"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),p0=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[iAt]},$$scope:{ctx:A}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),b0=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[dAt]},$$scope:{ctx:A}}}),yy=new ee({}),Ly=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),$y=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),F0=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[cAt]},$$scope:{ctx:A}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[fAt]},$$scope:{ctx:A}}}),Sy=new ee({}),Ry=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),Py=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),gT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[mAt]},$$scope:{ctx:A}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gAt]},$$scope:{ctx:A}}}),qy=new ee({}),Ny=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[hAt]},$$scope:{ctx:A}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pAt]},$$scope:{ctx:A}}}),Oy=new ee({}),Vy=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),zy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),e7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[uAt]},$$scope:{ctx:A}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),a7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_At]},$$scope:{ctx:A}}}),Wy=new ee({}),Hy=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),s7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[bAt]},$$scope:{ctx:A}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),y7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[vAt]},$$scope:{ctx:A}}}),Ky=new ee({}),Zy=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),oL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),x7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[FAt]},$$scope:{ctx:A}}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),D7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[TAt]},$$scope:{ctx:A}}}),tL=new ee({}),aL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),sL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),O7=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[MAt]},$$scope:{ctx:A}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),pM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[EAt]},$$scope:{ctx:A}}}),iL=new ee({}),dL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),fL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[CAt]},$$scope:{ctx:A}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),PM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[wAt]},$$scope:{ctx:A}}}),gL=new ee({}),hL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),uL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),qM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[AAt]},$$scope:{ctx:A}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),DM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[yAt]},$$scope:{ctx:A}}}),vL=new ee({}),FL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),ML=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),OM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[LAt]},$$scope:{ctx:A}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[xAt]},$$scope:{ctx:A}}}),CL=new ee({}),wL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),yL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[$At]},$$scope:{ctx:A}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[kAt]},$$scope:{ctx:A}}}),xL=new ee({}),$L=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),SL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[SAt]},$$scope:{ctx:A}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[RAt]},$$scope:{ctx:A}}}),BL=new ee({}),PL=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),qL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),N4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[BAt]},$$scope:{ctx:A}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),D4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[PAt]},$$scope:{ctx:A}}}),jL=new ee({}),DL=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),OL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),O4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[IAt]},$$scope:{ctx:A}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),X4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qAt]},$$scope:{ctx:A}}}),XL=new ee({}),zL=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),WL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[NAt]},$$scope:{ctx:A}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),bE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[jAt]},$$scope:{ctx:A}}}),UL=new ee({}),JL=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),KL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),FE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[DAt]},$$scope:{ctx:A}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),$E=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[GAt]},$$scope:{ctx:A}}}),ex=new ee({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),SE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[OAt]},$$scope:{ctx:A}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),zE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[VAt]},$$scope:{ctx:A}}}),nx=new ee({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),WE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[XAt]},$$scope:{ctx:A}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),a5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[zAt]},$$scope:{ctx:A}}}),cx=new ee({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),s5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[QAt]},$$scope:{ctx:A}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),u5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[WAt]},$$scope:{ctx:A}}}),px=new ee({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),b5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[HAt]},$$scope:{ctx:A}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),x5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[UAt]},$$scope:{ctx:A}}}),Fx=new ee({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),k5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[JAt]},$$scope:{ctx:A}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[YAt]},$$scope:{ctx:A}}}),wx=new ee({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[KAt]},$$scope:{ctx:A}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ZAt]},$$scope:{ctx:A}}}),$x=new ee({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[e6t]},$$scope:{ctx:A}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[o6t]},$$scope:{ctx:A}}}),Px=new ee({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[r6t]},$$scope:{ctx:A}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[t6t]},$$scope:{ctx:A}}}),Dx=new ee({}),Gx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[a6t]},$$scope:{ctx:A}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),vC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[n6t]},$$scope:{ctx:A}}}),Qx=new ee({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),TC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[s6t]},$$scope:{ctx:A}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[l6t]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),li=o("Auto Classes"),mf=l(),et=a("p"),ii=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=a("code"),Ow=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ci=o("Instantiating one of "),An=a("a"),Vw=o("AutoConfig"),yn=o(", "),Ln=a("a"),Xw=o("AutoModel"),fi=o(`, and
`),xn=a("a"),zw=o("AutoTokenizer"),mi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),d$=o("will create a model that is an instance of "),gi=a("a"),c$=o("BertModel"),f$=o("."),Eo=l(),Ea=a("p"),m$=o("There is one class of "),pf=a("code"),g$=o("AutoModel"),Bje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),EPe=l(),hi=a("h2"),uf=a("a"),zZ=a("span"),F(Qw.$$.fragment),Pje=l(),QZ=a("span"),Ije=o("Extending the Auto Classes"),CPe=l(),$n=a("p"),qje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),WZ=a("code"),Nje=o("NewModel"),jje=o(", make sure you have a "),HZ=a("code"),Dje=o("NewModelConfig"),Gje=o(` then you can add those to the auto
classes like this:`),wPe=l(),F(Ww.$$.fragment),APe=l(),h$=a("p"),Oje=o("You will then be able to use the auto classes like you would usually do!"),yPe=l(),F(_f.$$.fragment),LPe=l(),pi=a("h2"),bf=a("a"),UZ=a("span"),F(Hw.$$.fragment),Vje=l(),JZ=a("span"),Xje=o("AutoConfig"),xPe=l(),Co=a("div"),F(Uw.$$.fragment),zje=l(),Jw=a("p"),Qje=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),p$=a("a"),Wje=o("from_pretrained()"),Hje=o(" class method."),Uje=l(),Yw=a("p"),Jje=o("This class cannot be instantiated directly using "),YZ=a("code"),Yje=o("__init__()"),Kje=o(" (throws an error)."),Zje=l(),Er=a("div"),F(Kw.$$.fragment),eDe=l(),KZ=a("p"),oDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),rDe=l(),ui=a("p"),tDe=o("The configuration class to instantiate is selected based on the "),ZZ=a("code"),aDe=o("model_type"),nDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),eee=a("code"),sDe=o("pretrained_model_name_or_path"),lDe=o(":"),iDe=l(),y=a("ul"),vf=a("li"),oee=a("strong"),dDe=o("albert"),cDe=o(" \u2014 "),u$=a("a"),fDe=o("AlbertConfig"),mDe=o(" (ALBERT model)"),gDe=l(),Ff=a("li"),ree=a("strong"),hDe=o("bart"),pDe=o(" \u2014 "),_$=a("a"),uDe=o("BartConfig"),_De=o(" (BART model)"),bDe=l(),Tf=a("li"),tee=a("strong"),vDe=o("beit"),FDe=o(" \u2014 "),b$=a("a"),TDe=o("BeitConfig"),MDe=o(" (BEiT model)"),EDe=l(),Mf=a("li"),aee=a("strong"),CDe=o("bert"),wDe=o(" \u2014 "),v$=a("a"),ADe=o("BertConfig"),yDe=o(" (BERT model)"),LDe=l(),Ef=a("li"),nee=a("strong"),xDe=o("bert-generation"),$De=o(" \u2014 "),F$=a("a"),kDe=o("BertGenerationConfig"),SDe=o(" (Bert Generation model)"),RDe=l(),Cf=a("li"),see=a("strong"),BDe=o("big_bird"),PDe=o(" \u2014 "),T$=a("a"),IDe=o("BigBirdConfig"),qDe=o(" (BigBird model)"),NDe=l(),wf=a("li"),lee=a("strong"),jDe=o("bigbird_pegasus"),DDe=o(" \u2014 "),M$=a("a"),GDe=o("BigBirdPegasusConfig"),ODe=o(" (BigBirdPegasus model)"),VDe=l(),Af=a("li"),iee=a("strong"),XDe=o("blenderbot"),zDe=o(" \u2014 "),E$=a("a"),QDe=o("BlenderbotConfig"),WDe=o(" (Blenderbot model)"),HDe=l(),yf=a("li"),dee=a("strong"),UDe=o("blenderbot-small"),JDe=o(" \u2014 "),C$=a("a"),YDe=o("BlenderbotSmallConfig"),KDe=o(" (BlenderbotSmall model)"),ZDe=l(),Lf=a("li"),cee=a("strong"),eGe=o("camembert"),oGe=o(" \u2014 "),w$=a("a"),rGe=o("CamembertConfig"),tGe=o(" (CamemBERT model)"),aGe=l(),xf=a("li"),fee=a("strong"),nGe=o("canine"),sGe=o(" \u2014 "),A$=a("a"),lGe=o("CanineConfig"),iGe=o(" (Canine model)"),dGe=l(),$f=a("li"),mee=a("strong"),cGe=o("clip"),fGe=o(" \u2014 "),y$=a("a"),mGe=o("CLIPConfig"),gGe=o(" (CLIP model)"),hGe=l(),kf=a("li"),gee=a("strong"),pGe=o("convbert"),uGe=o(" \u2014 "),L$=a("a"),_Ge=o("ConvBertConfig"),bGe=o(" (ConvBERT model)"),vGe=l(),Sf=a("li"),hee=a("strong"),FGe=o("convnext"),TGe=o(" \u2014 "),x$=a("a"),MGe=o("ConvNextConfig"),EGe=o(" (ConvNext model)"),CGe=l(),Rf=a("li"),pee=a("strong"),wGe=o("ctrl"),AGe=o(" \u2014 "),$$=a("a"),yGe=o("CTRLConfig"),LGe=o(" (CTRL model)"),xGe=l(),Bf=a("li"),uee=a("strong"),$Ge=o("data2vec-audio"),kGe=o(" \u2014 "),k$=a("a"),SGe=o("Data2VecAudioConfig"),RGe=o(" (Data2VecAudio model)"),BGe=l(),Pf=a("li"),_ee=a("strong"),PGe=o("data2vec-text"),IGe=o(" \u2014 "),S$=a("a"),qGe=o("Data2VecTextConfig"),NGe=o(" (Data2VecText model)"),jGe=l(),If=a("li"),bee=a("strong"),DGe=o("data2vec-vision"),GGe=o(" \u2014 "),R$=a("a"),OGe=o("Data2VecVisionConfig"),VGe=o(" (Data2VecVision model)"),XGe=l(),qf=a("li"),vee=a("strong"),zGe=o("deberta"),QGe=o(" \u2014 "),B$=a("a"),WGe=o("DebertaConfig"),HGe=o(" (DeBERTa model)"),UGe=l(),Nf=a("li"),Fee=a("strong"),JGe=o("deberta-v2"),YGe=o(" \u2014 "),P$=a("a"),KGe=o("DebertaV2Config"),ZGe=o(" (DeBERTa-v2 model)"),eOe=l(),jf=a("li"),Tee=a("strong"),oOe=o("decision_transformer"),rOe=o(" \u2014 "),I$=a("a"),tOe=o("DecisionTransformerConfig"),aOe=o(" (Decision Transformer model)"),nOe=l(),Df=a("li"),Mee=a("strong"),sOe=o("deit"),lOe=o(" \u2014 "),q$=a("a"),iOe=o("DeiTConfig"),dOe=o(" (DeiT model)"),cOe=l(),Gf=a("li"),Eee=a("strong"),fOe=o("detr"),mOe=o(" \u2014 "),N$=a("a"),gOe=o("DetrConfig"),hOe=o(" (DETR model)"),pOe=l(),Of=a("li"),Cee=a("strong"),uOe=o("distilbert"),_Oe=o(" \u2014 "),j$=a("a"),bOe=o("DistilBertConfig"),vOe=o(" (DistilBERT model)"),FOe=l(),Vf=a("li"),wee=a("strong"),TOe=o("dpr"),MOe=o(" \u2014 "),D$=a("a"),EOe=o("DPRConfig"),COe=o(" (DPR model)"),wOe=l(),Xf=a("li"),Aee=a("strong"),AOe=o("dpt"),yOe=o(" \u2014 "),G$=a("a"),LOe=o("DPTConfig"),xOe=o(" (DPT model)"),$Oe=l(),zf=a("li"),yee=a("strong"),kOe=o("electra"),SOe=o(" \u2014 "),O$=a("a"),ROe=o("ElectraConfig"),BOe=o(" (ELECTRA model)"),POe=l(),Qf=a("li"),Lee=a("strong"),IOe=o("encoder-decoder"),qOe=o(" \u2014 "),V$=a("a"),NOe=o("EncoderDecoderConfig"),jOe=o(" (Encoder decoder model)"),DOe=l(),Wf=a("li"),xee=a("strong"),GOe=o("flaubert"),OOe=o(" \u2014 "),X$=a("a"),VOe=o("FlaubertConfig"),XOe=o(" (FlauBERT model)"),zOe=l(),Hf=a("li"),$ee=a("strong"),QOe=o("fnet"),WOe=o(" \u2014 "),z$=a("a"),HOe=o("FNetConfig"),UOe=o(" (FNet model)"),JOe=l(),Uf=a("li"),kee=a("strong"),YOe=o("fsmt"),KOe=o(" \u2014 "),Q$=a("a"),ZOe=o("FSMTConfig"),eVe=o(" (FairSeq Machine-Translation model)"),oVe=l(),Jf=a("li"),See=a("strong"),rVe=o("funnel"),tVe=o(" \u2014 "),W$=a("a"),aVe=o("FunnelConfig"),nVe=o(" (Funnel Transformer model)"),sVe=l(),Yf=a("li"),Ree=a("strong"),lVe=o("glpn"),iVe=o(" \u2014 "),H$=a("a"),dVe=o("GLPNConfig"),cVe=o(" (GLPN model)"),fVe=l(),Kf=a("li"),Bee=a("strong"),mVe=o("gpt2"),gVe=o(" \u2014 "),U$=a("a"),hVe=o("GPT2Config"),pVe=o(" (OpenAI GPT-2 model)"),uVe=l(),Zf=a("li"),Pee=a("strong"),_Ve=o("gpt_neo"),bVe=o(" \u2014 "),J$=a("a"),vVe=o("GPTNeoConfig"),FVe=o(" (GPT Neo model)"),TVe=l(),em=a("li"),Iee=a("strong"),MVe=o("gptj"),EVe=o(" \u2014 "),Y$=a("a"),CVe=o("GPTJConfig"),wVe=o(" (GPT-J model)"),AVe=l(),om=a("li"),qee=a("strong"),yVe=o("hubert"),LVe=o(" \u2014 "),K$=a("a"),xVe=o("HubertConfig"),$Ve=o(" (Hubert model)"),kVe=l(),rm=a("li"),Nee=a("strong"),SVe=o("ibert"),RVe=o(" \u2014 "),Z$=a("a"),BVe=o("IBertConfig"),PVe=o(" (I-BERT model)"),IVe=l(),tm=a("li"),jee=a("strong"),qVe=o("imagegpt"),NVe=o(" \u2014 "),ek=a("a"),jVe=o("ImageGPTConfig"),DVe=o(" (ImageGPT model)"),GVe=l(),am=a("li"),Dee=a("strong"),OVe=o("layoutlm"),VVe=o(" \u2014 "),ok=a("a"),XVe=o("LayoutLMConfig"),zVe=o(" (LayoutLM model)"),QVe=l(),nm=a("li"),Gee=a("strong"),WVe=o("layoutlmv2"),HVe=o(" \u2014 "),rk=a("a"),UVe=o("LayoutLMv2Config"),JVe=o(" (LayoutLMv2 model)"),YVe=l(),sm=a("li"),Oee=a("strong"),KVe=o("led"),ZVe=o(" \u2014 "),tk=a("a"),eXe=o("LEDConfig"),oXe=o(" (LED model)"),rXe=l(),lm=a("li"),Vee=a("strong"),tXe=o("longformer"),aXe=o(" \u2014 "),ak=a("a"),nXe=o("LongformerConfig"),sXe=o(" (Longformer model)"),lXe=l(),im=a("li"),Xee=a("strong"),iXe=o("luke"),dXe=o(" \u2014 "),nk=a("a"),cXe=o("LukeConfig"),fXe=o(" (LUKE model)"),mXe=l(),dm=a("li"),zee=a("strong"),gXe=o("lxmert"),hXe=o(" \u2014 "),sk=a("a"),pXe=o("LxmertConfig"),uXe=o(" (LXMERT model)"),_Xe=l(),cm=a("li"),Qee=a("strong"),bXe=o("m2m_100"),vXe=o(" \u2014 "),lk=a("a"),FXe=o("M2M100Config"),TXe=o(" (M2M100 model)"),MXe=l(),fm=a("li"),Wee=a("strong"),EXe=o("marian"),CXe=o(" \u2014 "),ik=a("a"),wXe=o("MarianConfig"),AXe=o(" (Marian model)"),yXe=l(),mm=a("li"),Hee=a("strong"),LXe=o("maskformer"),xXe=o(" \u2014 "),dk=a("a"),$Xe=o("MaskFormerConfig"),kXe=o(" (MaskFormer model)"),SXe=l(),gm=a("li"),Uee=a("strong"),RXe=o("mbart"),BXe=o(" \u2014 "),ck=a("a"),PXe=o("MBartConfig"),IXe=o(" (mBART model)"),qXe=l(),hm=a("li"),Jee=a("strong"),NXe=o("megatron-bert"),jXe=o(" \u2014 "),fk=a("a"),DXe=o("MegatronBertConfig"),GXe=o(" (MegatronBert model)"),OXe=l(),pm=a("li"),Yee=a("strong"),VXe=o("mobilebert"),XXe=o(" \u2014 "),mk=a("a"),zXe=o("MobileBertConfig"),QXe=o(" (MobileBERT model)"),WXe=l(),um=a("li"),Kee=a("strong"),HXe=o("mpnet"),UXe=o(" \u2014 "),gk=a("a"),JXe=o("MPNetConfig"),YXe=o(" (MPNet model)"),KXe=l(),_m=a("li"),Zee=a("strong"),ZXe=o("mt5"),eze=o(" \u2014 "),hk=a("a"),oze=o("MT5Config"),rze=o(" (mT5 model)"),tze=l(),bm=a("li"),eoe=a("strong"),aze=o("nystromformer"),nze=o(" \u2014 "),pk=a("a"),sze=o("NystromformerConfig"),lze=o(" (Nystromformer model)"),ize=l(),vm=a("li"),ooe=a("strong"),dze=o("openai-gpt"),cze=o(" \u2014 "),uk=a("a"),fze=o("OpenAIGPTConfig"),mze=o(" (OpenAI GPT model)"),gze=l(),Fm=a("li"),roe=a("strong"),hze=o("opt"),pze=o(" \u2014 "),_k=a("a"),uze=o("OPTConfig"),_ze=o(" (OPT model)"),bze=l(),Tm=a("li"),toe=a("strong"),vze=o("pegasus"),Fze=o(" \u2014 "),bk=a("a"),Tze=o("PegasusConfig"),Mze=o(" (Pegasus model)"),Eze=l(),Mm=a("li"),aoe=a("strong"),Cze=o("perceiver"),wze=o(" \u2014 "),vk=a("a"),Aze=o("PerceiverConfig"),yze=o(" (Perceiver model)"),Lze=l(),Em=a("li"),noe=a("strong"),xze=o("plbart"),$ze=o(" \u2014 "),Fk=a("a"),kze=o("PLBartConfig"),Sze=o(" (PLBart model)"),Rze=l(),Cm=a("li"),soe=a("strong"),Bze=o("poolformer"),Pze=o(" \u2014 "),Tk=a("a"),Ize=o("PoolFormerConfig"),qze=o(" (PoolFormer model)"),Nze=l(),wm=a("li"),loe=a("strong"),jze=o("prophetnet"),Dze=o(" \u2014 "),Mk=a("a"),Gze=o("ProphetNetConfig"),Oze=o(" (ProphetNet model)"),Vze=l(),Am=a("li"),ioe=a("strong"),Xze=o("qdqbert"),zze=o(" \u2014 "),Ek=a("a"),Qze=o("QDQBertConfig"),Wze=o(" (QDQBert model)"),Hze=l(),ym=a("li"),doe=a("strong"),Uze=o("rag"),Jze=o(" \u2014 "),Ck=a("a"),Yze=o("RagConfig"),Kze=o(" (RAG model)"),Zze=l(),Lm=a("li"),coe=a("strong"),eQe=o("realm"),oQe=o(" \u2014 "),wk=a("a"),rQe=o("RealmConfig"),tQe=o(" (Realm model)"),aQe=l(),xm=a("li"),foe=a("strong"),nQe=o("reformer"),sQe=o(" \u2014 "),Ak=a("a"),lQe=o("ReformerConfig"),iQe=o(" (Reformer model)"),dQe=l(),$m=a("li"),moe=a("strong"),cQe=o("regnet"),fQe=o(" \u2014 "),yk=a("a"),mQe=o("RegNetConfig"),gQe=o(" (RegNet model)"),hQe=l(),km=a("li"),goe=a("strong"),pQe=o("rembert"),uQe=o(" \u2014 "),Lk=a("a"),_Qe=o("RemBertConfig"),bQe=o(" (RemBERT model)"),vQe=l(),Sm=a("li"),hoe=a("strong"),FQe=o("resnet"),TQe=o(" \u2014 "),xk=a("a"),MQe=o("ResNetConfig"),EQe=o(" (ResNet model)"),CQe=l(),Rm=a("li"),poe=a("strong"),wQe=o("retribert"),AQe=o(" \u2014 "),$k=a("a"),yQe=o("RetriBertConfig"),LQe=o(" (RetriBERT model)"),xQe=l(),Bm=a("li"),uoe=a("strong"),$Qe=o("roberta"),kQe=o(" \u2014 "),kk=a("a"),SQe=o("RobertaConfig"),RQe=o(" (RoBERTa model)"),BQe=l(),Pm=a("li"),_oe=a("strong"),PQe=o("roformer"),IQe=o(" \u2014 "),Sk=a("a"),qQe=o("RoFormerConfig"),NQe=o(" (RoFormer model)"),jQe=l(),Im=a("li"),boe=a("strong"),DQe=o("segformer"),GQe=o(" \u2014 "),Rk=a("a"),OQe=o("SegformerConfig"),VQe=o(" (SegFormer model)"),XQe=l(),qm=a("li"),voe=a("strong"),zQe=o("sew"),QQe=o(" \u2014 "),Bk=a("a"),WQe=o("SEWConfig"),HQe=o(" (SEW model)"),UQe=l(),Nm=a("li"),Foe=a("strong"),JQe=o("sew-d"),YQe=o(" \u2014 "),Pk=a("a"),KQe=o("SEWDConfig"),ZQe=o(" (SEW-D model)"),eWe=l(),jm=a("li"),Toe=a("strong"),oWe=o("speech-encoder-decoder"),rWe=o(" \u2014 "),Ik=a("a"),tWe=o("SpeechEncoderDecoderConfig"),aWe=o(" (Speech Encoder decoder model)"),nWe=l(),Dm=a("li"),Moe=a("strong"),sWe=o("speech_to_text"),lWe=o(" \u2014 "),qk=a("a"),iWe=o("Speech2TextConfig"),dWe=o(" (Speech2Text model)"),cWe=l(),Gm=a("li"),Eoe=a("strong"),fWe=o("speech_to_text_2"),mWe=o(" \u2014 "),Nk=a("a"),gWe=o("Speech2Text2Config"),hWe=o(" (Speech2Text2 model)"),pWe=l(),Om=a("li"),Coe=a("strong"),uWe=o("splinter"),_We=o(" \u2014 "),jk=a("a"),bWe=o("SplinterConfig"),vWe=o(" (Splinter model)"),FWe=l(),Vm=a("li"),woe=a("strong"),TWe=o("squeezebert"),MWe=o(" \u2014 "),Dk=a("a"),EWe=o("SqueezeBertConfig"),CWe=o(" (SqueezeBERT model)"),wWe=l(),Xm=a("li"),Aoe=a("strong"),AWe=o("swin"),yWe=o(" \u2014 "),Gk=a("a"),LWe=o("SwinConfig"),xWe=o(" (Swin model)"),$We=l(),zm=a("li"),yoe=a("strong"),kWe=o("t5"),SWe=o(" \u2014 "),Ok=a("a"),RWe=o("T5Config"),BWe=o(" (T5 model)"),PWe=l(),Qm=a("li"),Loe=a("strong"),IWe=o("tapas"),qWe=o(" \u2014 "),Vk=a("a"),NWe=o("TapasConfig"),jWe=o(" (TAPAS model)"),DWe=l(),Wm=a("li"),xoe=a("strong"),GWe=o("tapex"),OWe=o(" \u2014 "),Xk=a("a"),VWe=o("BartConfig"),XWe=o(" (TAPEX model)"),zWe=l(),Hm=a("li"),$oe=a("strong"),QWe=o("transfo-xl"),WWe=o(" \u2014 "),zk=a("a"),HWe=o("TransfoXLConfig"),UWe=o(" (Transformer-XL model)"),JWe=l(),Um=a("li"),koe=a("strong"),YWe=o("trocr"),KWe=o(" \u2014 "),Qk=a("a"),ZWe=o("TrOCRConfig"),eHe=o(" (TrOCR model)"),oHe=l(),Jm=a("li"),Soe=a("strong"),rHe=o("unispeech"),tHe=o(" \u2014 "),Wk=a("a"),aHe=o("UniSpeechConfig"),nHe=o(" (UniSpeech model)"),sHe=l(),Ym=a("li"),Roe=a("strong"),lHe=o("unispeech-sat"),iHe=o(" \u2014 "),Hk=a("a"),dHe=o("UniSpeechSatConfig"),cHe=o(" (UniSpeechSat model)"),fHe=l(),Km=a("li"),Boe=a("strong"),mHe=o("van"),gHe=o(" \u2014 "),Uk=a("a"),hHe=o("VanConfig"),pHe=o(" (VAN model)"),uHe=l(),Zm=a("li"),Poe=a("strong"),_He=o("vilt"),bHe=o(" \u2014 "),Jk=a("a"),vHe=o("ViltConfig"),FHe=o(" (ViLT model)"),THe=l(),eg=a("li"),Ioe=a("strong"),MHe=o("vision-encoder-decoder"),EHe=o(" \u2014 "),Yk=a("a"),CHe=o("VisionEncoderDecoderConfig"),wHe=o(" (Vision Encoder decoder model)"),AHe=l(),og=a("li"),qoe=a("strong"),yHe=o("vision-text-dual-encoder"),LHe=o(" \u2014 "),Kk=a("a"),xHe=o("VisionTextDualEncoderConfig"),$He=o(" (VisionTextDualEncoder model)"),kHe=l(),rg=a("li"),Noe=a("strong"),SHe=o("visual_bert"),RHe=o(" \u2014 "),Zk=a("a"),BHe=o("VisualBertConfig"),PHe=o(" (VisualBert model)"),IHe=l(),tg=a("li"),joe=a("strong"),qHe=o("vit"),NHe=o(" \u2014 "),eS=a("a"),jHe=o("ViTConfig"),DHe=o(" (ViT model)"),GHe=l(),ag=a("li"),Doe=a("strong"),OHe=o("vit_mae"),VHe=o(" \u2014 "),oS=a("a"),XHe=o("ViTMAEConfig"),zHe=o(" (ViTMAE model)"),QHe=l(),ng=a("li"),Goe=a("strong"),WHe=o("wav2vec2"),HHe=o(" \u2014 "),rS=a("a"),UHe=o("Wav2Vec2Config"),JHe=o(" (Wav2Vec2 model)"),YHe=l(),sg=a("li"),Ooe=a("strong"),KHe=o("wavlm"),ZHe=o(" \u2014 "),tS=a("a"),eUe=o("WavLMConfig"),oUe=o(" (WavLM model)"),rUe=l(),lg=a("li"),Voe=a("strong"),tUe=o("xglm"),aUe=o(" \u2014 "),aS=a("a"),nUe=o("XGLMConfig"),sUe=o(" (XGLM model)"),lUe=l(),ig=a("li"),Xoe=a("strong"),iUe=o("xlm"),dUe=o(" \u2014 "),nS=a("a"),cUe=o("XLMConfig"),fUe=o(" (XLM model)"),mUe=l(),dg=a("li"),zoe=a("strong"),gUe=o("xlm-prophetnet"),hUe=o(" \u2014 "),sS=a("a"),pUe=o("XLMProphetNetConfig"),uUe=o(" (XLMProphetNet model)"),_Ue=l(),cg=a("li"),Qoe=a("strong"),bUe=o("xlm-roberta"),vUe=o(" \u2014 "),lS=a("a"),FUe=o("XLMRobertaConfig"),TUe=o(" (XLM-RoBERTa model)"),MUe=l(),fg=a("li"),Woe=a("strong"),EUe=o("xlm-roberta-xl"),CUe=o(" \u2014 "),iS=a("a"),wUe=o("XLMRobertaXLConfig"),AUe=o(" (XLM-RoBERTa-XL model)"),yUe=l(),mg=a("li"),Hoe=a("strong"),LUe=o("xlnet"),xUe=o(" \u2014 "),dS=a("a"),$Ue=o("XLNetConfig"),kUe=o(" (XLNet model)"),SUe=l(),gg=a("li"),Uoe=a("strong"),RUe=o("yolos"),BUe=o(" \u2014 "),cS=a("a"),PUe=o("YolosConfig"),IUe=o(" (YOLOS model)"),qUe=l(),hg=a("li"),Joe=a("strong"),NUe=o("yoso"),jUe=o(" \u2014 "),fS=a("a"),DUe=o("YosoConfig"),GUe=o(" (YOSO model)"),OUe=l(),F(pg.$$.fragment),VUe=l(),ug=a("div"),F(Zw.$$.fragment),XUe=l(),Yoe=a("p"),zUe=o("Register a new configuration for this class."),$Pe=l(),_i=a("h2"),_g=a("a"),Koe=a("span"),F(eA.$$.fragment),QUe=l(),Zoe=a("span"),WUe=o("AutoTokenizer"),kPe=l(),wo=a("div"),F(oA.$$.fragment),HUe=l(),rA=a("p"),UUe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),mS=a("a"),JUe=o("AutoTokenizer.from_pretrained()"),YUe=o(" class method."),KUe=l(),tA=a("p"),ZUe=o("This class cannot be instantiated directly using "),ere=a("code"),eJe=o("__init__()"),oJe=o(" (throws an error)."),rJe=l(),Cr=a("div"),F(aA.$$.fragment),tJe=l(),ore=a("p"),aJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),nJe=l(),Ca=a("p"),sJe=o("The tokenizer class to instantiate is selected based on the "),rre=a("code"),lJe=o("model_type"),iJe=o(` property of the config object (either
passed as an argument or loaded from `),tre=a("code"),dJe=o("pretrained_model_name_or_path"),cJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),are=a("code"),fJe=o("pretrained_model_name_or_path"),mJe=o(":"),gJe=l(),k=a("ul"),kn=a("li"),nre=a("strong"),hJe=o("albert"),pJe=o(" \u2014 "),gS=a("a"),uJe=o("AlbertTokenizer"),_Je=o(" or "),hS=a("a"),bJe=o("AlbertTokenizerFast"),vJe=o(" (ALBERT model)"),FJe=l(),Sn=a("li"),sre=a("strong"),TJe=o("bart"),MJe=o(" \u2014 "),pS=a("a"),EJe=o("BartTokenizer"),CJe=o(" or "),uS=a("a"),wJe=o("BartTokenizerFast"),AJe=o(" (BART model)"),yJe=l(),Rn=a("li"),lre=a("strong"),LJe=o("barthez"),xJe=o(" \u2014 "),_S=a("a"),$Je=o("BarthezTokenizer"),kJe=o(" or "),bS=a("a"),SJe=o("BarthezTokenizerFast"),RJe=o(" (BARThez model)"),BJe=l(),bg=a("li"),ire=a("strong"),PJe=o("bartpho"),IJe=o(" \u2014 "),vS=a("a"),qJe=o("BartphoTokenizer"),NJe=o(" (BARTpho model)"),jJe=l(),Bn=a("li"),dre=a("strong"),DJe=o("bert"),GJe=o(" \u2014 "),FS=a("a"),OJe=o("BertTokenizer"),VJe=o(" or "),TS=a("a"),XJe=o("BertTokenizerFast"),zJe=o(" (BERT model)"),QJe=l(),vg=a("li"),cre=a("strong"),WJe=o("bert-generation"),HJe=o(" \u2014 "),MS=a("a"),UJe=o("BertGenerationTokenizer"),JJe=o(" (Bert Generation model)"),YJe=l(),Fg=a("li"),fre=a("strong"),KJe=o("bert-japanese"),ZJe=o(" \u2014 "),ES=a("a"),eYe=o("BertJapaneseTokenizer"),oYe=o(" (BertJapanese model)"),rYe=l(),Tg=a("li"),mre=a("strong"),tYe=o("bertweet"),aYe=o(" \u2014 "),CS=a("a"),nYe=o("BertweetTokenizer"),sYe=o(" (Bertweet model)"),lYe=l(),Pn=a("li"),gre=a("strong"),iYe=o("big_bird"),dYe=o(" \u2014 "),wS=a("a"),cYe=o("BigBirdTokenizer"),fYe=o(" or "),AS=a("a"),mYe=o("BigBirdTokenizerFast"),gYe=o(" (BigBird model)"),hYe=l(),In=a("li"),hre=a("strong"),pYe=o("bigbird_pegasus"),uYe=o(" \u2014 "),yS=a("a"),_Ye=o("PegasusTokenizer"),bYe=o(" or "),LS=a("a"),vYe=o("PegasusTokenizerFast"),FYe=o(" (BigBirdPegasus model)"),TYe=l(),qn=a("li"),pre=a("strong"),MYe=o("blenderbot"),EYe=o(" \u2014 "),xS=a("a"),CYe=o("BlenderbotTokenizer"),wYe=o(" or "),$S=a("a"),AYe=o("BlenderbotTokenizerFast"),yYe=o(" (Blenderbot model)"),LYe=l(),Mg=a("li"),ure=a("strong"),xYe=o("blenderbot-small"),$Ye=o(" \u2014 "),kS=a("a"),kYe=o("BlenderbotSmallTokenizer"),SYe=o(" (BlenderbotSmall model)"),RYe=l(),Eg=a("li"),_re=a("strong"),BYe=o("byt5"),PYe=o(" \u2014 "),SS=a("a"),IYe=o("ByT5Tokenizer"),qYe=o(" (ByT5 model)"),NYe=l(),Nn=a("li"),bre=a("strong"),jYe=o("camembert"),DYe=o(" \u2014 "),RS=a("a"),GYe=o("CamembertTokenizer"),OYe=o(" or "),BS=a("a"),VYe=o("CamembertTokenizerFast"),XYe=o(" (CamemBERT model)"),zYe=l(),Cg=a("li"),vre=a("strong"),QYe=o("canine"),WYe=o(" \u2014 "),PS=a("a"),HYe=o("CanineTokenizer"),UYe=o(" (Canine model)"),JYe=l(),jn=a("li"),Fre=a("strong"),YYe=o("clip"),KYe=o(" \u2014 "),IS=a("a"),ZYe=o("CLIPTokenizer"),eKe=o(" or "),qS=a("a"),oKe=o("CLIPTokenizerFast"),rKe=o(" (CLIP model)"),tKe=l(),Dn=a("li"),Tre=a("strong"),aKe=o("convbert"),nKe=o(" \u2014 "),NS=a("a"),sKe=o("ConvBertTokenizer"),lKe=o(" or "),jS=a("a"),iKe=o("ConvBertTokenizerFast"),dKe=o(" (ConvBERT model)"),cKe=l(),Gn=a("li"),Mre=a("strong"),fKe=o("cpm"),mKe=o(" \u2014 "),DS=a("a"),gKe=o("CpmTokenizer"),hKe=o(" or "),GS=a("a"),pKe=o("CpmTokenizerFast"),uKe=o(" (CPM model)"),_Ke=l(),wg=a("li"),Ere=a("strong"),bKe=o("ctrl"),vKe=o(" \u2014 "),OS=a("a"),FKe=o("CTRLTokenizer"),TKe=o(" (CTRL model)"),MKe=l(),On=a("li"),Cre=a("strong"),EKe=o("data2vec-text"),CKe=o(" \u2014 "),VS=a("a"),wKe=o("RobertaTokenizer"),AKe=o(" or "),XS=a("a"),yKe=o("RobertaTokenizerFast"),LKe=o(" (Data2VecText model)"),xKe=l(),Vn=a("li"),wre=a("strong"),$Ke=o("deberta"),kKe=o(" \u2014 "),zS=a("a"),SKe=o("DebertaTokenizer"),RKe=o(" or "),QS=a("a"),BKe=o("DebertaTokenizerFast"),PKe=o(" (DeBERTa model)"),IKe=l(),Xn=a("li"),Are=a("strong"),qKe=o("deberta-v2"),NKe=o(" \u2014 "),WS=a("a"),jKe=o("DebertaV2Tokenizer"),DKe=o(" or "),HS=a("a"),GKe=o("DebertaV2TokenizerFast"),OKe=o(" (DeBERTa-v2 model)"),VKe=l(),zn=a("li"),yre=a("strong"),XKe=o("distilbert"),zKe=o(" \u2014 "),US=a("a"),QKe=o("DistilBertTokenizer"),WKe=o(" or "),JS=a("a"),HKe=o("DistilBertTokenizerFast"),UKe=o(" (DistilBERT model)"),JKe=l(),Qn=a("li"),Lre=a("strong"),YKe=o("dpr"),KKe=o(" \u2014 "),YS=a("a"),ZKe=o("DPRQuestionEncoderTokenizer"),eZe=o(" or "),KS=a("a"),oZe=o("DPRQuestionEncoderTokenizerFast"),rZe=o(" (DPR model)"),tZe=l(),Wn=a("li"),xre=a("strong"),aZe=o("electra"),nZe=o(" \u2014 "),ZS=a("a"),sZe=o("ElectraTokenizer"),lZe=o(" or "),eR=a("a"),iZe=o("ElectraTokenizerFast"),dZe=o(" (ELECTRA model)"),cZe=l(),Ag=a("li"),$re=a("strong"),fZe=o("flaubert"),mZe=o(" \u2014 "),oR=a("a"),gZe=o("FlaubertTokenizer"),hZe=o(" (FlauBERT model)"),pZe=l(),Hn=a("li"),kre=a("strong"),uZe=o("fnet"),_Ze=o(" \u2014 "),rR=a("a"),bZe=o("FNetTokenizer"),vZe=o(" or "),tR=a("a"),FZe=o("FNetTokenizerFast"),TZe=o(" (FNet model)"),MZe=l(),yg=a("li"),Sre=a("strong"),EZe=o("fsmt"),CZe=o(" \u2014 "),aR=a("a"),wZe=o("FSMTTokenizer"),AZe=o(" (FairSeq Machine-Translation model)"),yZe=l(),Un=a("li"),Rre=a("strong"),LZe=o("funnel"),xZe=o(" \u2014 "),nR=a("a"),$Ze=o("FunnelTokenizer"),kZe=o(" or "),sR=a("a"),SZe=o("FunnelTokenizerFast"),RZe=o(" (Funnel Transformer model)"),BZe=l(),Jn=a("li"),Bre=a("strong"),PZe=o("gpt2"),IZe=o(" \u2014 "),lR=a("a"),qZe=o("GPT2Tokenizer"),NZe=o(" or "),iR=a("a"),jZe=o("GPT2TokenizerFast"),DZe=o(" (OpenAI GPT-2 model)"),GZe=l(),Yn=a("li"),Pre=a("strong"),OZe=o("gpt_neo"),VZe=o(" \u2014 "),dR=a("a"),XZe=o("GPT2Tokenizer"),zZe=o(" or "),cR=a("a"),QZe=o("GPT2TokenizerFast"),WZe=o(" (GPT Neo model)"),HZe=l(),Kn=a("li"),Ire=a("strong"),UZe=o("gptj"),JZe=o(" \u2014 "),fR=a("a"),YZe=o("GPT2Tokenizer"),KZe=o(" or "),mR=a("a"),ZZe=o("GPT2TokenizerFast"),eeo=o(" (GPT-J model)"),oeo=l(),Zn=a("li"),qre=a("strong"),reo=o("herbert"),teo=o(" \u2014 "),gR=a("a"),aeo=o("HerbertTokenizer"),neo=o(" or "),hR=a("a"),seo=o("HerbertTokenizerFast"),leo=o(" (HerBERT model)"),ieo=l(),Lg=a("li"),Nre=a("strong"),deo=o("hubert"),ceo=o(" \u2014 "),pR=a("a"),feo=o("Wav2Vec2CTCTokenizer"),meo=o(" (Hubert model)"),geo=l(),es=a("li"),jre=a("strong"),heo=o("ibert"),peo=o(" \u2014 "),uR=a("a"),ueo=o("RobertaTokenizer"),_eo=o(" or "),_R=a("a"),beo=o("RobertaTokenizerFast"),veo=o(" (I-BERT model)"),Feo=l(),os=a("li"),Dre=a("strong"),Teo=o("layoutlm"),Meo=o(" \u2014 "),bR=a("a"),Eeo=o("LayoutLMTokenizer"),Ceo=o(" or "),vR=a("a"),weo=o("LayoutLMTokenizerFast"),Aeo=o(" (LayoutLM model)"),yeo=l(),rs=a("li"),Gre=a("strong"),Leo=o("layoutlmv2"),xeo=o(" \u2014 "),FR=a("a"),$eo=o("LayoutLMv2Tokenizer"),keo=o(" or "),TR=a("a"),Seo=o("LayoutLMv2TokenizerFast"),Reo=o(" (LayoutLMv2 model)"),Beo=l(),ts=a("li"),Ore=a("strong"),Peo=o("layoutxlm"),Ieo=o(" \u2014 "),MR=a("a"),qeo=o("LayoutXLMTokenizer"),Neo=o(" or "),ER=a("a"),jeo=o("LayoutXLMTokenizerFast"),Deo=o(" (LayoutXLM model)"),Geo=l(),as=a("li"),Vre=a("strong"),Oeo=o("led"),Veo=o(" \u2014 "),CR=a("a"),Xeo=o("LEDTokenizer"),zeo=o(" or "),wR=a("a"),Qeo=o("LEDTokenizerFast"),Weo=o(" (LED model)"),Heo=l(),ns=a("li"),Xre=a("strong"),Ueo=o("longformer"),Jeo=o(" \u2014 "),AR=a("a"),Yeo=o("LongformerTokenizer"),Keo=o(" or "),yR=a("a"),Zeo=o("LongformerTokenizerFast"),eoo=o(" (Longformer model)"),ooo=l(),xg=a("li"),zre=a("strong"),roo=o("luke"),too=o(" \u2014 "),LR=a("a"),aoo=o("LukeTokenizer"),noo=o(" (LUKE model)"),soo=l(),ss=a("li"),Qre=a("strong"),loo=o("lxmert"),ioo=o(" \u2014 "),xR=a("a"),doo=o("LxmertTokenizer"),coo=o(" or "),$R=a("a"),foo=o("LxmertTokenizerFast"),moo=o(" (LXMERT model)"),goo=l(),$g=a("li"),Wre=a("strong"),hoo=o("m2m_100"),poo=o(" \u2014 "),kR=a("a"),uoo=o("M2M100Tokenizer"),_oo=o(" (M2M100 model)"),boo=l(),kg=a("li"),Hre=a("strong"),voo=o("marian"),Foo=o(" \u2014 "),SR=a("a"),Too=o("MarianTokenizer"),Moo=o(" (Marian model)"),Eoo=l(),ls=a("li"),Ure=a("strong"),Coo=o("mbart"),woo=o(" \u2014 "),RR=a("a"),Aoo=o("MBartTokenizer"),yoo=o(" or "),BR=a("a"),Loo=o("MBartTokenizerFast"),xoo=o(" (mBART model)"),$oo=l(),is=a("li"),Jre=a("strong"),koo=o("mbart50"),Soo=o(" \u2014 "),PR=a("a"),Roo=o("MBart50Tokenizer"),Boo=o(" or "),IR=a("a"),Poo=o("MBart50TokenizerFast"),Ioo=o(" (mBART-50 model)"),qoo=l(),ds=a("li"),Yre=a("strong"),Noo=o("megatron-bert"),joo=o(" \u2014 "),qR=a("a"),Doo=o("BertTokenizer"),Goo=o(" or "),NR=a("a"),Ooo=o("BertTokenizerFast"),Voo=o(" (MegatronBert model)"),Xoo=l(),Sg=a("li"),Kre=a("strong"),zoo=o("mluke"),Qoo=o(" \u2014 "),jR=a("a"),Woo=o("MLukeTokenizer"),Hoo=o(" (mLUKE model)"),Uoo=l(),cs=a("li"),Zre=a("strong"),Joo=o("mobilebert"),Yoo=o(" \u2014 "),DR=a("a"),Koo=o("MobileBertTokenizer"),Zoo=o(" or "),GR=a("a"),ero=o("MobileBertTokenizerFast"),oro=o(" (MobileBERT model)"),rro=l(),fs=a("li"),ete=a("strong"),tro=o("mpnet"),aro=o(" \u2014 "),OR=a("a"),nro=o("MPNetTokenizer"),sro=o(" or "),VR=a("a"),lro=o("MPNetTokenizerFast"),iro=o(" (MPNet model)"),dro=l(),ms=a("li"),ote=a("strong"),cro=o("mt5"),fro=o(" \u2014 "),XR=a("a"),mro=o("MT5Tokenizer"),gro=o(" or "),zR=a("a"),hro=o("MT5TokenizerFast"),pro=o(" (mT5 model)"),uro=l(),gs=a("li"),rte=a("strong"),_ro=o("nystromformer"),bro=o(" \u2014 "),QR=a("a"),vro=o("AlbertTokenizer"),Fro=o(" or "),WR=a("a"),Tro=o("AlbertTokenizerFast"),Mro=o(" (Nystromformer model)"),Ero=l(),hs=a("li"),tte=a("strong"),Cro=o("openai-gpt"),wro=o(" \u2014 "),HR=a("a"),Aro=o("OpenAIGPTTokenizer"),yro=o(" or "),UR=a("a"),Lro=o("OpenAIGPTTokenizerFast"),xro=o(" (OpenAI GPT model)"),$ro=l(),Rg=a("li"),ate=a("strong"),kro=o("opt"),Sro=o(" \u2014 "),JR=a("a"),Rro=o("GPT2Tokenizer"),Bro=o(" (OPT model)"),Pro=l(),ps=a("li"),nte=a("strong"),Iro=o("pegasus"),qro=o(" \u2014 "),YR=a("a"),Nro=o("PegasusTokenizer"),jro=o(" or "),KR=a("a"),Dro=o("PegasusTokenizerFast"),Gro=o(" (Pegasus model)"),Oro=l(),Bg=a("li"),ste=a("strong"),Vro=o("perceiver"),Xro=o(" \u2014 "),ZR=a("a"),zro=o("PerceiverTokenizer"),Qro=o(" (Perceiver model)"),Wro=l(),Pg=a("li"),lte=a("strong"),Hro=o("phobert"),Uro=o(" \u2014 "),eB=a("a"),Jro=o("PhobertTokenizer"),Yro=o(" (PhoBERT model)"),Kro=l(),Ig=a("li"),ite=a("strong"),Zro=o("plbart"),eto=o(" \u2014 "),oB=a("a"),oto=o("PLBartTokenizer"),rto=o(" (PLBart model)"),tto=l(),qg=a("li"),dte=a("strong"),ato=o("prophetnet"),nto=o(" \u2014 "),rB=a("a"),sto=o("ProphetNetTokenizer"),lto=o(" (ProphetNet model)"),ito=l(),us=a("li"),cte=a("strong"),dto=o("qdqbert"),cto=o(" \u2014 "),tB=a("a"),fto=o("BertTokenizer"),mto=o(" or "),aB=a("a"),gto=o("BertTokenizerFast"),hto=o(" (QDQBert model)"),pto=l(),Ng=a("li"),fte=a("strong"),uto=o("rag"),_to=o(" \u2014 "),nB=a("a"),bto=o("RagTokenizer"),vto=o(" (RAG model)"),Fto=l(),_s=a("li"),mte=a("strong"),Tto=o("realm"),Mto=o(" \u2014 "),sB=a("a"),Eto=o("RealmTokenizer"),Cto=o(" or "),lB=a("a"),wto=o("RealmTokenizerFast"),Ato=o(" (Realm model)"),yto=l(),bs=a("li"),gte=a("strong"),Lto=o("reformer"),xto=o(" \u2014 "),iB=a("a"),$to=o("ReformerTokenizer"),kto=o(" or "),dB=a("a"),Sto=o("ReformerTokenizerFast"),Rto=o(" (Reformer model)"),Bto=l(),vs=a("li"),hte=a("strong"),Pto=o("rembert"),Ito=o(" \u2014 "),cB=a("a"),qto=o("RemBertTokenizer"),Nto=o(" or "),fB=a("a"),jto=o("RemBertTokenizerFast"),Dto=o(" (RemBERT model)"),Gto=l(),Fs=a("li"),pte=a("strong"),Oto=o("retribert"),Vto=o(" \u2014 "),mB=a("a"),Xto=o("RetriBertTokenizer"),zto=o(" or "),gB=a("a"),Qto=o("RetriBertTokenizerFast"),Wto=o(" (RetriBERT model)"),Hto=l(),Ts=a("li"),ute=a("strong"),Uto=o("roberta"),Jto=o(" \u2014 "),hB=a("a"),Yto=o("RobertaTokenizer"),Kto=o(" or "),pB=a("a"),Zto=o("RobertaTokenizerFast"),eao=o(" (RoBERTa model)"),oao=l(),Ms=a("li"),_te=a("strong"),rao=o("roformer"),tao=o(" \u2014 "),uB=a("a"),aao=o("RoFormerTokenizer"),nao=o(" or "),_B=a("a"),sao=o("RoFormerTokenizerFast"),lao=o(" (RoFormer model)"),iao=l(),jg=a("li"),bte=a("strong"),dao=o("speech_to_text"),cao=o(" \u2014 "),bB=a("a"),fao=o("Speech2TextTokenizer"),mao=o(" (Speech2Text model)"),gao=l(),Dg=a("li"),vte=a("strong"),hao=o("speech_to_text_2"),pao=o(" \u2014 "),vB=a("a"),uao=o("Speech2Text2Tokenizer"),_ao=o(" (Speech2Text2 model)"),bao=l(),Es=a("li"),Fte=a("strong"),vao=o("splinter"),Fao=o(" \u2014 "),FB=a("a"),Tao=o("SplinterTokenizer"),Mao=o(" or "),TB=a("a"),Eao=o("SplinterTokenizerFast"),Cao=o(" (Splinter model)"),wao=l(),Cs=a("li"),Tte=a("strong"),Aao=o("squeezebert"),yao=o(" \u2014 "),MB=a("a"),Lao=o("SqueezeBertTokenizer"),xao=o(" or "),EB=a("a"),$ao=o("SqueezeBertTokenizerFast"),kao=o(" (SqueezeBERT model)"),Sao=l(),ws=a("li"),Mte=a("strong"),Rao=o("t5"),Bao=o(" \u2014 "),CB=a("a"),Pao=o("T5Tokenizer"),Iao=o(" or "),wB=a("a"),qao=o("T5TokenizerFast"),Nao=o(" (T5 model)"),jao=l(),Gg=a("li"),Ete=a("strong"),Dao=o("tapas"),Gao=o(" \u2014 "),AB=a("a"),Oao=o("TapasTokenizer"),Vao=o(" (TAPAS model)"),Xao=l(),Og=a("li"),Cte=a("strong"),zao=o("tapex"),Qao=o(" \u2014 "),yB=a("a"),Wao=o("TapexTokenizer"),Hao=o(" (TAPEX model)"),Uao=l(),Vg=a("li"),wte=a("strong"),Jao=o("transfo-xl"),Yao=o(" \u2014 "),LB=a("a"),Kao=o("TransfoXLTokenizer"),Zao=o(" (Transformer-XL model)"),eno=l(),As=a("li"),Ate=a("strong"),ono=o("visual_bert"),rno=o(" \u2014 "),xB=a("a"),tno=o("BertTokenizer"),ano=o(" or "),$B=a("a"),nno=o("BertTokenizerFast"),sno=o(" (VisualBert model)"),lno=l(),Xg=a("li"),yte=a("strong"),ino=o("wav2vec2"),dno=o(" \u2014 "),kB=a("a"),cno=o("Wav2Vec2CTCTokenizer"),fno=o(" (Wav2Vec2 model)"),mno=l(),zg=a("li"),Lte=a("strong"),gno=o("wav2vec2_phoneme"),hno=o(" \u2014 "),SB=a("a"),pno=o("Wav2Vec2PhonemeCTCTokenizer"),uno=o(" (Wav2Vec2Phoneme model)"),_no=l(),ys=a("li"),xte=a("strong"),bno=o("xglm"),vno=o(" \u2014 "),RB=a("a"),Fno=o("XGLMTokenizer"),Tno=o(" or "),BB=a("a"),Mno=o("XGLMTokenizerFast"),Eno=o(" (XGLM model)"),Cno=l(),Qg=a("li"),$te=a("strong"),wno=o("xlm"),Ano=o(" \u2014 "),PB=a("a"),yno=o("XLMTokenizer"),Lno=o(" (XLM model)"),xno=l(),Wg=a("li"),kte=a("strong"),$no=o("xlm-prophetnet"),kno=o(" \u2014 "),IB=a("a"),Sno=o("XLMProphetNetTokenizer"),Rno=o(" (XLMProphetNet model)"),Bno=l(),Ls=a("li"),Ste=a("strong"),Pno=o("xlm-roberta"),Ino=o(" \u2014 "),qB=a("a"),qno=o("XLMRobertaTokenizer"),Nno=o(" or "),NB=a("a"),jno=o("XLMRobertaTokenizerFast"),Dno=o(" (XLM-RoBERTa model)"),Gno=l(),xs=a("li"),Rte=a("strong"),Ono=o("xlm-roberta-xl"),Vno=o(" \u2014 "),jB=a("a"),Xno=o("RobertaTokenizer"),zno=o(" or "),DB=a("a"),Qno=o("RobertaTokenizerFast"),Wno=o(" (XLM-RoBERTa-XL model)"),Hno=l(),$s=a("li"),Bte=a("strong"),Uno=o("xlnet"),Jno=o(" \u2014 "),GB=a("a"),Yno=o("XLNetTokenizer"),Kno=o(" or "),OB=a("a"),Zno=o("XLNetTokenizerFast"),eso=o(" (XLNet model)"),oso=l(),ks=a("li"),Pte=a("strong"),rso=o("yoso"),tso=o(" \u2014 "),VB=a("a"),aso=o("AlbertTokenizer"),nso=o(" or "),XB=a("a"),sso=o("AlbertTokenizerFast"),lso=o(" (YOSO model)"),iso=l(),F(Hg.$$.fragment),dso=l(),Ug=a("div"),F(nA.$$.fragment),cso=l(),Ite=a("p"),fso=o("Register a new tokenizer in this mapping."),SPe=l(),bi=a("h2"),Jg=a("a"),qte=a("span"),F(sA.$$.fragment),mso=l(),Nte=a("span"),gso=o("AutoFeatureExtractor"),RPe=l(),Ao=a("div"),F(lA.$$.fragment),hso=l(),iA=a("p"),pso=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),zB=a("a"),uso=o("AutoFeatureExtractor.from_pretrained()"),_so=o(" class method."),bso=l(),dA=a("p"),vso=o("This class cannot be instantiated directly using "),jte=a("code"),Fso=o("__init__()"),Tso=o(" (throws an error)."),Mso=l(),Qe=a("div"),F(cA.$$.fragment),Eso=l(),Dte=a("p"),Cso=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),wso=l(),wa=a("p"),Aso=o("The feature extractor class to instantiate is selected based on the "),Gte=a("code"),yso=o("model_type"),Lso=o(` property of the config object
(either passed as an argument or loaded from `),Ote=a("code"),xso=o("pretrained_model_name_or_path"),$so=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Vte=a("code"),kso=o("pretrained_model_name_or_path"),Sso=o(":"),Rso=l(),te=a("ul"),Yg=a("li"),Xte=a("strong"),Bso=o("beit"),Pso=o(" \u2014 "),QB=a("a"),Iso=o("BeitFeatureExtractor"),qso=o(" (BEiT model)"),Nso=l(),Kg=a("li"),zte=a("strong"),jso=o("clip"),Dso=o(" \u2014 "),WB=a("a"),Gso=o("CLIPFeatureExtractor"),Oso=o(" (CLIP model)"),Vso=l(),Zg=a("li"),Qte=a("strong"),Xso=o("convnext"),zso=o(" \u2014 "),HB=a("a"),Qso=o("ConvNextFeatureExtractor"),Wso=o(" (ConvNext model)"),Hso=l(),eh=a("li"),Wte=a("strong"),Uso=o("data2vec-audio"),Jso=o(" \u2014 "),UB=a("a"),Yso=o("Wav2Vec2FeatureExtractor"),Kso=o(" (Data2VecAudio model)"),Zso=l(),oh=a("li"),Hte=a("strong"),elo=o("data2vec-vision"),olo=o(" \u2014 "),JB=a("a"),rlo=o("BeitFeatureExtractor"),tlo=o(" (Data2VecVision model)"),alo=l(),rh=a("li"),Ute=a("strong"),nlo=o("deit"),slo=o(" \u2014 "),YB=a("a"),llo=o("DeiTFeatureExtractor"),ilo=o(" (DeiT model)"),dlo=l(),th=a("li"),Jte=a("strong"),clo=o("detr"),flo=o(" \u2014 "),KB=a("a"),mlo=o("DetrFeatureExtractor"),glo=o(" (DETR model)"),hlo=l(),ah=a("li"),Yte=a("strong"),plo=o("dpt"),ulo=o(" \u2014 "),ZB=a("a"),_lo=o("DPTFeatureExtractor"),blo=o(" (DPT model)"),vlo=l(),nh=a("li"),Kte=a("strong"),Flo=o("glpn"),Tlo=o(" \u2014 "),eP=a("a"),Mlo=o("GLPNFeatureExtractor"),Elo=o(" (GLPN model)"),Clo=l(),sh=a("li"),Zte=a("strong"),wlo=o("hubert"),Alo=o(" \u2014 "),oP=a("a"),ylo=o("Wav2Vec2FeatureExtractor"),Llo=o(" (Hubert model)"),xlo=l(),lh=a("li"),eae=a("strong"),$lo=o("layoutlmv2"),klo=o(" \u2014 "),rP=a("a"),Slo=o("LayoutLMv2FeatureExtractor"),Rlo=o(" (LayoutLMv2 model)"),Blo=l(),ih=a("li"),oae=a("strong"),Plo=o("maskformer"),Ilo=o(" \u2014 "),tP=a("a"),qlo=o("MaskFormerFeatureExtractor"),Nlo=o(" (MaskFormer model)"),jlo=l(),dh=a("li"),rae=a("strong"),Dlo=o("perceiver"),Glo=o(" \u2014 "),aP=a("a"),Olo=o("PerceiverFeatureExtractor"),Vlo=o(" (Perceiver model)"),Xlo=l(),ch=a("li"),tae=a("strong"),zlo=o("poolformer"),Qlo=o(" \u2014 "),nP=a("a"),Wlo=o("PoolFormerFeatureExtractor"),Hlo=o(" (PoolFormer model)"),Ulo=l(),fh=a("li"),aae=a("strong"),Jlo=o("regnet"),Ylo=o(" \u2014 "),sP=a("a"),Klo=o("ConvNextFeatureExtractor"),Zlo=o(" (RegNet model)"),eio=l(),mh=a("li"),nae=a("strong"),oio=o("resnet"),rio=o(" \u2014 "),lP=a("a"),tio=o("ConvNextFeatureExtractor"),aio=o(" (ResNet model)"),nio=l(),gh=a("li"),sae=a("strong"),sio=o("segformer"),lio=o(" \u2014 "),iP=a("a"),iio=o("SegformerFeatureExtractor"),dio=o(" (SegFormer model)"),cio=l(),hh=a("li"),lae=a("strong"),fio=o("speech_to_text"),mio=o(" \u2014 "),dP=a("a"),gio=o("Speech2TextFeatureExtractor"),hio=o(" (Speech2Text model)"),pio=l(),ph=a("li"),iae=a("strong"),uio=o("swin"),_io=o(" \u2014 "),cP=a("a"),bio=o("ViTFeatureExtractor"),vio=o(" (Swin model)"),Fio=l(),uh=a("li"),dae=a("strong"),Tio=o("van"),Mio=o(" \u2014 "),fP=a("a"),Eio=o("ConvNextFeatureExtractor"),Cio=o(" (VAN model)"),wio=l(),_h=a("li"),cae=a("strong"),Aio=o("vit"),yio=o(" \u2014 "),mP=a("a"),Lio=o("ViTFeatureExtractor"),xio=o(" (ViT model)"),$io=l(),bh=a("li"),fae=a("strong"),kio=o("vit_mae"),Sio=o(" \u2014 "),gP=a("a"),Rio=o("ViTFeatureExtractor"),Bio=o(" (ViTMAE model)"),Pio=l(),vh=a("li"),mae=a("strong"),Iio=o("wav2vec2"),qio=o(" \u2014 "),hP=a("a"),Nio=o("Wav2Vec2FeatureExtractor"),jio=o(" (Wav2Vec2 model)"),Dio=l(),Fh=a("li"),gae=a("strong"),Gio=o("yolos"),Oio=o(" \u2014 "),pP=a("a"),Vio=o("YolosFeatureExtractor"),Xio=o(" (YOLOS model)"),zio=l(),F(Th.$$.fragment),Qio=l(),F(Mh.$$.fragment),Wio=l(),Eh=a("div"),F(fA.$$.fragment),Hio=l(),hae=a("p"),Uio=o("Register a new feature extractor for this class."),BPe=l(),vi=a("h2"),Ch=a("a"),pae=a("span"),F(mA.$$.fragment),Jio=l(),uae=a("span"),Yio=o("AutoProcessor"),PPe=l(),yo=a("div"),F(gA.$$.fragment),Kio=l(),hA=a("p"),Zio=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),uP=a("a"),edo=o("AutoProcessor.from_pretrained()"),odo=o(" class method."),rdo=l(),pA=a("p"),tdo=o("This class cannot be instantiated directly using "),_ae=a("code"),ado=o("__init__()"),ndo=o(" (throws an error)."),sdo=l(),We=a("div"),F(uA.$$.fragment),ldo=l(),bae=a("p"),ido=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ddo=l(),Fi=a("p"),cdo=o("The processor class to instantiate is selected based on the "),vae=a("code"),fdo=o("model_type"),mdo=o(` property of the config object (either
passed as an argument or loaded from `),Fae=a("code"),gdo=o("pretrained_model_name_or_path"),hdo=o(" if possible):"),pdo=l(),be=a("ul"),wh=a("li"),Tae=a("strong"),udo=o("clip"),_do=o(" \u2014 "),_P=a("a"),bdo=o("CLIPProcessor"),vdo=o(" (CLIP model)"),Fdo=l(),Ah=a("li"),Mae=a("strong"),Tdo=o("layoutlmv2"),Mdo=o(" \u2014 "),bP=a("a"),Edo=o("LayoutLMv2Processor"),Cdo=o(" (LayoutLMv2 model)"),wdo=l(),yh=a("li"),Eae=a("strong"),Ado=o("layoutxlm"),ydo=o(" \u2014 "),vP=a("a"),Ldo=o("LayoutXLMProcessor"),xdo=o(" (LayoutXLM model)"),$do=l(),Lh=a("li"),Cae=a("strong"),kdo=o("sew"),Sdo=o(" \u2014 "),FP=a("a"),Rdo=o("Wav2Vec2Processor"),Bdo=o(" (SEW model)"),Pdo=l(),xh=a("li"),wae=a("strong"),Ido=o("sew-d"),qdo=o(" \u2014 "),TP=a("a"),Ndo=o("Wav2Vec2Processor"),jdo=o(" (SEW-D model)"),Ddo=l(),$h=a("li"),Aae=a("strong"),Gdo=o("speech_to_text"),Odo=o(" \u2014 "),MP=a("a"),Vdo=o("Speech2TextProcessor"),Xdo=o(" (Speech2Text model)"),zdo=l(),kh=a("li"),yae=a("strong"),Qdo=o("speech_to_text_2"),Wdo=o(" \u2014 "),EP=a("a"),Hdo=o("Speech2Text2Processor"),Udo=o(" (Speech2Text2 model)"),Jdo=l(),Sh=a("li"),Lae=a("strong"),Ydo=o("trocr"),Kdo=o(" \u2014 "),CP=a("a"),Zdo=o("TrOCRProcessor"),eco=o(" (TrOCR model)"),oco=l(),Rh=a("li"),xae=a("strong"),rco=o("unispeech"),tco=o(" \u2014 "),wP=a("a"),aco=o("Wav2Vec2Processor"),nco=o(" (UniSpeech model)"),sco=l(),Bh=a("li"),$ae=a("strong"),lco=o("unispeech-sat"),ico=o(" \u2014 "),AP=a("a"),dco=o("Wav2Vec2Processor"),cco=o(" (UniSpeechSat model)"),fco=l(),Ph=a("li"),kae=a("strong"),mco=o("vilt"),gco=o(" \u2014 "),yP=a("a"),hco=o("ViltProcessor"),pco=o(" (ViLT model)"),uco=l(),Ih=a("li"),Sae=a("strong"),_co=o("vision-text-dual-encoder"),bco=o(" \u2014 "),LP=a("a"),vco=o("VisionTextDualEncoderProcessor"),Fco=o(" (VisionTextDualEncoder model)"),Tco=l(),qh=a("li"),Rae=a("strong"),Mco=o("wav2vec2"),Eco=o(" \u2014 "),xP=a("a"),Cco=o("Wav2Vec2Processor"),wco=o(" (Wav2Vec2 model)"),Aco=l(),Nh=a("li"),Bae=a("strong"),yco=o("wavlm"),Lco=o(" \u2014 "),$P=a("a"),xco=o("Wav2Vec2Processor"),$co=o(" (WavLM model)"),kco=l(),F(jh.$$.fragment),Sco=l(),F(Dh.$$.fragment),Rco=l(),Gh=a("div"),F(_A.$$.fragment),Bco=l(),Pae=a("p"),Pco=o("Register a new processor for this class."),IPe=l(),Ti=a("h2"),Oh=a("a"),Iae=a("span"),F(bA.$$.fragment),Ico=l(),qae=a("span"),qco=o("AutoModel"),qPe=l(),Lo=a("div"),F(vA.$$.fragment),Nco=l(),Mi=a("p"),jco=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kP=a("a"),Dco=o("from_pretrained()"),Gco=o(" class method or the "),SP=a("a"),Oco=o("from_config()"),Vco=o(` class
method.`),Xco=l(),FA=a("p"),zco=o("This class cannot be instantiated directly using "),Nae=a("code"),Qco=o("__init__()"),Wco=o(" (throws an error)."),Hco=l(),ot=a("div"),F(TA.$$.fragment),Uco=l(),jae=a("p"),Jco=o("Instantiates one of the base model classes of the library from a configuration."),Yco=l(),Ei=a("p"),Kco=o(`Note:
Loading a model from its configuration file does `),Dae=a("strong"),Zco=o("not"),efo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RP=a("a"),ofo=o("from_pretrained()"),rfo=o(" to load the model weights."),tfo=l(),F(Vh.$$.fragment),afo=l(),He=a("div"),F(MA.$$.fragment),nfo=l(),Gae=a("p"),sfo=o("Instantiate one of the base model classes of the library from a pretrained model."),lfo=l(),Aa=a("p"),ifo=o("The model class to instantiate is selected based on the "),Oae=a("code"),dfo=o("model_type"),cfo=o(` property of the config object (either
passed as an argument or loaded from `),Vae=a("code"),ffo=o("pretrained_model_name_or_path"),mfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xae=a("code"),gfo=o("pretrained_model_name_or_path"),hfo=o(":"),pfo=l(),x=a("ul"),Xh=a("li"),zae=a("strong"),ufo=o("albert"),_fo=o(" \u2014 "),BP=a("a"),bfo=o("AlbertModel"),vfo=o(" (ALBERT model)"),Ffo=l(),zh=a("li"),Qae=a("strong"),Tfo=o("bart"),Mfo=o(" \u2014 "),PP=a("a"),Efo=o("BartModel"),Cfo=o(" (BART model)"),wfo=l(),Qh=a("li"),Wae=a("strong"),Afo=o("beit"),yfo=o(" \u2014 "),IP=a("a"),Lfo=o("BeitModel"),xfo=o(" (BEiT model)"),$fo=l(),Wh=a("li"),Hae=a("strong"),kfo=o("bert"),Sfo=o(" \u2014 "),qP=a("a"),Rfo=o("BertModel"),Bfo=o(" (BERT model)"),Pfo=l(),Hh=a("li"),Uae=a("strong"),Ifo=o("bert-generation"),qfo=o(" \u2014 "),NP=a("a"),Nfo=o("BertGenerationEncoder"),jfo=o(" (Bert Generation model)"),Dfo=l(),Uh=a("li"),Jae=a("strong"),Gfo=o("big_bird"),Ofo=o(" \u2014 "),jP=a("a"),Vfo=o("BigBirdModel"),Xfo=o(" (BigBird model)"),zfo=l(),Jh=a("li"),Yae=a("strong"),Qfo=o("bigbird_pegasus"),Wfo=o(" \u2014 "),DP=a("a"),Hfo=o("BigBirdPegasusModel"),Ufo=o(" (BigBirdPegasus model)"),Jfo=l(),Yh=a("li"),Kae=a("strong"),Yfo=o("blenderbot"),Kfo=o(" \u2014 "),GP=a("a"),Zfo=o("BlenderbotModel"),emo=o(" (Blenderbot model)"),omo=l(),Kh=a("li"),Zae=a("strong"),rmo=o("blenderbot-small"),tmo=o(" \u2014 "),OP=a("a"),amo=o("BlenderbotSmallModel"),nmo=o(" (BlenderbotSmall model)"),smo=l(),Zh=a("li"),ene=a("strong"),lmo=o("camembert"),imo=o(" \u2014 "),VP=a("a"),dmo=o("CamembertModel"),cmo=o(" (CamemBERT model)"),fmo=l(),ep=a("li"),one=a("strong"),mmo=o("canine"),gmo=o(" \u2014 "),XP=a("a"),hmo=o("CanineModel"),pmo=o(" (Canine model)"),umo=l(),op=a("li"),rne=a("strong"),_mo=o("clip"),bmo=o(" \u2014 "),zP=a("a"),vmo=o("CLIPModel"),Fmo=o(" (CLIP model)"),Tmo=l(),rp=a("li"),tne=a("strong"),Mmo=o("convbert"),Emo=o(" \u2014 "),QP=a("a"),Cmo=o("ConvBertModel"),wmo=o(" (ConvBERT model)"),Amo=l(),tp=a("li"),ane=a("strong"),ymo=o("convnext"),Lmo=o(" \u2014 "),WP=a("a"),xmo=o("ConvNextModel"),$mo=o(" (ConvNext model)"),kmo=l(),ap=a("li"),nne=a("strong"),Smo=o("ctrl"),Rmo=o(" \u2014 "),HP=a("a"),Bmo=o("CTRLModel"),Pmo=o(" (CTRL model)"),Imo=l(),np=a("li"),sne=a("strong"),qmo=o("data2vec-audio"),Nmo=o(" \u2014 "),UP=a("a"),jmo=o("Data2VecAudioModel"),Dmo=o(" (Data2VecAudio model)"),Gmo=l(),sp=a("li"),lne=a("strong"),Omo=o("data2vec-text"),Vmo=o(" \u2014 "),JP=a("a"),Xmo=o("Data2VecTextModel"),zmo=o(" (Data2VecText model)"),Qmo=l(),lp=a("li"),ine=a("strong"),Wmo=o("data2vec-vision"),Hmo=o(" \u2014 "),YP=a("a"),Umo=o("Data2VecVisionModel"),Jmo=o(" (Data2VecVision model)"),Ymo=l(),ip=a("li"),dne=a("strong"),Kmo=o("deberta"),Zmo=o(" \u2014 "),KP=a("a"),ego=o("DebertaModel"),ogo=o(" (DeBERTa model)"),rgo=l(),dp=a("li"),cne=a("strong"),tgo=o("deberta-v2"),ago=o(" \u2014 "),ZP=a("a"),ngo=o("DebertaV2Model"),sgo=o(" (DeBERTa-v2 model)"),lgo=l(),cp=a("li"),fne=a("strong"),igo=o("decision_transformer"),dgo=o(" \u2014 "),eI=a("a"),cgo=o("DecisionTransformerModel"),fgo=o(" (Decision Transformer model)"),mgo=l(),fp=a("li"),mne=a("strong"),ggo=o("deit"),hgo=o(" \u2014 "),oI=a("a"),pgo=o("DeiTModel"),ugo=o(" (DeiT model)"),_go=l(),mp=a("li"),gne=a("strong"),bgo=o("detr"),vgo=o(" \u2014 "),rI=a("a"),Fgo=o("DetrModel"),Tgo=o(" (DETR model)"),Mgo=l(),gp=a("li"),hne=a("strong"),Ego=o("distilbert"),Cgo=o(" \u2014 "),tI=a("a"),wgo=o("DistilBertModel"),Ago=o(" (DistilBERT model)"),ygo=l(),hp=a("li"),pne=a("strong"),Lgo=o("dpr"),xgo=o(" \u2014 "),aI=a("a"),$go=o("DPRQuestionEncoder"),kgo=o(" (DPR model)"),Sgo=l(),pp=a("li"),une=a("strong"),Rgo=o("dpt"),Bgo=o(" \u2014 "),nI=a("a"),Pgo=o("DPTModel"),Igo=o(" (DPT model)"),qgo=l(),up=a("li"),_ne=a("strong"),Ngo=o("electra"),jgo=o(" \u2014 "),sI=a("a"),Dgo=o("ElectraModel"),Ggo=o(" (ELECTRA model)"),Ogo=l(),_p=a("li"),bne=a("strong"),Vgo=o("flaubert"),Xgo=o(" \u2014 "),lI=a("a"),zgo=o("FlaubertModel"),Qgo=o(" (FlauBERT model)"),Wgo=l(),bp=a("li"),vne=a("strong"),Hgo=o("fnet"),Ugo=o(" \u2014 "),iI=a("a"),Jgo=o("FNetModel"),Ygo=o(" (FNet model)"),Kgo=l(),vp=a("li"),Fne=a("strong"),Zgo=o("fsmt"),eho=o(" \u2014 "),dI=a("a"),oho=o("FSMTModel"),rho=o(" (FairSeq Machine-Translation model)"),tho=l(),Ss=a("li"),Tne=a("strong"),aho=o("funnel"),nho=o(" \u2014 "),cI=a("a"),sho=o("FunnelModel"),lho=o(" or "),fI=a("a"),iho=o("FunnelBaseModel"),dho=o(" (Funnel Transformer model)"),cho=l(),Fp=a("li"),Mne=a("strong"),fho=o("glpn"),mho=o(" \u2014 "),mI=a("a"),gho=o("GLPNModel"),hho=o(" (GLPN model)"),pho=l(),Tp=a("li"),Ene=a("strong"),uho=o("gpt2"),_ho=o(" \u2014 "),gI=a("a"),bho=o("GPT2Model"),vho=o(" (OpenAI GPT-2 model)"),Fho=l(),Mp=a("li"),Cne=a("strong"),Tho=o("gpt_neo"),Mho=o(" \u2014 "),hI=a("a"),Eho=o("GPTNeoModel"),Cho=o(" (GPT Neo model)"),who=l(),Ep=a("li"),wne=a("strong"),Aho=o("gptj"),yho=o(" \u2014 "),pI=a("a"),Lho=o("GPTJModel"),xho=o(" (GPT-J model)"),$ho=l(),Cp=a("li"),Ane=a("strong"),kho=o("hubert"),Sho=o(" \u2014 "),uI=a("a"),Rho=o("HubertModel"),Bho=o(" (Hubert model)"),Pho=l(),wp=a("li"),yne=a("strong"),Iho=o("ibert"),qho=o(" \u2014 "),_I=a("a"),Nho=o("IBertModel"),jho=o(" (I-BERT model)"),Dho=l(),Ap=a("li"),Lne=a("strong"),Gho=o("imagegpt"),Oho=o(" \u2014 "),bI=a("a"),Vho=o("ImageGPTModel"),Xho=o(" (ImageGPT model)"),zho=l(),yp=a("li"),xne=a("strong"),Qho=o("layoutlm"),Who=o(" \u2014 "),vI=a("a"),Hho=o("LayoutLMModel"),Uho=o(" (LayoutLM model)"),Jho=l(),Lp=a("li"),$ne=a("strong"),Yho=o("layoutlmv2"),Kho=o(" \u2014 "),FI=a("a"),Zho=o("LayoutLMv2Model"),epo=o(" (LayoutLMv2 model)"),opo=l(),xp=a("li"),kne=a("strong"),rpo=o("led"),tpo=o(" \u2014 "),TI=a("a"),apo=o("LEDModel"),npo=o(" (LED model)"),spo=l(),$p=a("li"),Sne=a("strong"),lpo=o("longformer"),ipo=o(" \u2014 "),MI=a("a"),dpo=o("LongformerModel"),cpo=o(" (Longformer model)"),fpo=l(),kp=a("li"),Rne=a("strong"),mpo=o("luke"),gpo=o(" \u2014 "),EI=a("a"),hpo=o("LukeModel"),ppo=o(" (LUKE model)"),upo=l(),Sp=a("li"),Bne=a("strong"),_po=o("lxmert"),bpo=o(" \u2014 "),CI=a("a"),vpo=o("LxmertModel"),Fpo=o(" (LXMERT model)"),Tpo=l(),Rp=a("li"),Pne=a("strong"),Mpo=o("m2m_100"),Epo=o(" \u2014 "),wI=a("a"),Cpo=o("M2M100Model"),wpo=o(" (M2M100 model)"),Apo=l(),Bp=a("li"),Ine=a("strong"),ypo=o("marian"),Lpo=o(" \u2014 "),AI=a("a"),xpo=o("MarianModel"),$po=o(" (Marian model)"),kpo=l(),Pp=a("li"),qne=a("strong"),Spo=o("maskformer"),Rpo=o(" \u2014 "),yI=a("a"),Bpo=o("MaskFormerModel"),Ppo=o(" (MaskFormer model)"),Ipo=l(),Ip=a("li"),Nne=a("strong"),qpo=o("mbart"),Npo=o(" \u2014 "),LI=a("a"),jpo=o("MBartModel"),Dpo=o(" (mBART model)"),Gpo=l(),qp=a("li"),jne=a("strong"),Opo=o("megatron-bert"),Vpo=o(" \u2014 "),xI=a("a"),Xpo=o("MegatronBertModel"),zpo=o(" (MegatronBert model)"),Qpo=l(),Np=a("li"),Dne=a("strong"),Wpo=o("mobilebert"),Hpo=o(" \u2014 "),$I=a("a"),Upo=o("MobileBertModel"),Jpo=o(" (MobileBERT model)"),Ypo=l(),jp=a("li"),Gne=a("strong"),Kpo=o("mpnet"),Zpo=o(" \u2014 "),kI=a("a"),euo=o("MPNetModel"),ouo=o(" (MPNet model)"),ruo=l(),Dp=a("li"),One=a("strong"),tuo=o("mt5"),auo=o(" \u2014 "),SI=a("a"),nuo=o("MT5Model"),suo=o(" (mT5 model)"),luo=l(),Gp=a("li"),Vne=a("strong"),iuo=o("nystromformer"),duo=o(" \u2014 "),RI=a("a"),cuo=o("NystromformerModel"),fuo=o(" (Nystromformer model)"),muo=l(),Op=a("li"),Xne=a("strong"),guo=o("openai-gpt"),huo=o(" \u2014 "),BI=a("a"),puo=o("OpenAIGPTModel"),uuo=o(" (OpenAI GPT model)"),_uo=l(),Vp=a("li"),zne=a("strong"),buo=o("opt"),vuo=o(" \u2014 "),PI=a("a"),Fuo=o("OPTModel"),Tuo=o(" (OPT model)"),Muo=l(),Xp=a("li"),Qne=a("strong"),Euo=o("pegasus"),Cuo=o(" \u2014 "),II=a("a"),wuo=o("PegasusModel"),Auo=o(" (Pegasus model)"),yuo=l(),zp=a("li"),Wne=a("strong"),Luo=o("perceiver"),xuo=o(" \u2014 "),qI=a("a"),$uo=o("PerceiverModel"),kuo=o(" (Perceiver model)"),Suo=l(),Qp=a("li"),Hne=a("strong"),Ruo=o("plbart"),Buo=o(" \u2014 "),NI=a("a"),Puo=o("PLBartModel"),Iuo=o(" (PLBart model)"),quo=l(),Wp=a("li"),Une=a("strong"),Nuo=o("poolformer"),juo=o(" \u2014 "),jI=a("a"),Duo=o("PoolFormerModel"),Guo=o(" (PoolFormer model)"),Ouo=l(),Hp=a("li"),Jne=a("strong"),Vuo=o("prophetnet"),Xuo=o(" \u2014 "),DI=a("a"),zuo=o("ProphetNetModel"),Quo=o(" (ProphetNet model)"),Wuo=l(),Up=a("li"),Yne=a("strong"),Huo=o("qdqbert"),Uuo=o(" \u2014 "),GI=a("a"),Juo=o("QDQBertModel"),Yuo=o(" (QDQBert model)"),Kuo=l(),Jp=a("li"),Kne=a("strong"),Zuo=o("reformer"),e_o=o(" \u2014 "),OI=a("a"),o_o=o("ReformerModel"),r_o=o(" (Reformer model)"),t_o=l(),Yp=a("li"),Zne=a("strong"),a_o=o("regnet"),n_o=o(" \u2014 "),VI=a("a"),s_o=o("RegNetModel"),l_o=o(" (RegNet model)"),i_o=l(),Kp=a("li"),ese=a("strong"),d_o=o("rembert"),c_o=o(" \u2014 "),XI=a("a"),f_o=o("RemBertModel"),m_o=o(" (RemBERT model)"),g_o=l(),Zp=a("li"),ose=a("strong"),h_o=o("resnet"),p_o=o(" \u2014 "),zI=a("a"),u_o=o("ResNetModel"),__o=o(" (ResNet model)"),b_o=l(),eu=a("li"),rse=a("strong"),v_o=o("retribert"),F_o=o(" \u2014 "),QI=a("a"),T_o=o("RetriBertModel"),M_o=o(" (RetriBERT model)"),E_o=l(),ou=a("li"),tse=a("strong"),C_o=o("roberta"),w_o=o(" \u2014 "),WI=a("a"),A_o=o("RobertaModel"),y_o=o(" (RoBERTa model)"),L_o=l(),ru=a("li"),ase=a("strong"),x_o=o("roformer"),$_o=o(" \u2014 "),HI=a("a"),k_o=o("RoFormerModel"),S_o=o(" (RoFormer model)"),R_o=l(),tu=a("li"),nse=a("strong"),B_o=o("segformer"),P_o=o(" \u2014 "),UI=a("a"),I_o=o("SegformerModel"),q_o=o(" (SegFormer model)"),N_o=l(),au=a("li"),sse=a("strong"),j_o=o("sew"),D_o=o(" \u2014 "),JI=a("a"),G_o=o("SEWModel"),O_o=o(" (SEW model)"),V_o=l(),nu=a("li"),lse=a("strong"),X_o=o("sew-d"),z_o=o(" \u2014 "),YI=a("a"),Q_o=o("SEWDModel"),W_o=o(" (SEW-D model)"),H_o=l(),su=a("li"),ise=a("strong"),U_o=o("speech_to_text"),J_o=o(" \u2014 "),KI=a("a"),Y_o=o("Speech2TextModel"),K_o=o(" (Speech2Text model)"),Z_o=l(),lu=a("li"),dse=a("strong"),e1o=o("splinter"),o1o=o(" \u2014 "),ZI=a("a"),r1o=o("SplinterModel"),t1o=o(" (Splinter model)"),a1o=l(),iu=a("li"),cse=a("strong"),n1o=o("squeezebert"),s1o=o(" \u2014 "),eq=a("a"),l1o=o("SqueezeBertModel"),i1o=o(" (SqueezeBERT model)"),d1o=l(),du=a("li"),fse=a("strong"),c1o=o("swin"),f1o=o(" \u2014 "),oq=a("a"),m1o=o("SwinModel"),g1o=o(" (Swin model)"),h1o=l(),cu=a("li"),mse=a("strong"),p1o=o("t5"),u1o=o(" \u2014 "),rq=a("a"),_1o=o("T5Model"),b1o=o(" (T5 model)"),v1o=l(),fu=a("li"),gse=a("strong"),F1o=o("tapas"),T1o=o(" \u2014 "),tq=a("a"),M1o=o("TapasModel"),E1o=o(" (TAPAS model)"),C1o=l(),mu=a("li"),hse=a("strong"),w1o=o("transfo-xl"),A1o=o(" \u2014 "),aq=a("a"),y1o=o("TransfoXLModel"),L1o=o(" (Transformer-XL model)"),x1o=l(),gu=a("li"),pse=a("strong"),$1o=o("unispeech"),k1o=o(" \u2014 "),nq=a("a"),S1o=o("UniSpeechModel"),R1o=o(" (UniSpeech model)"),B1o=l(),hu=a("li"),use=a("strong"),P1o=o("unispeech-sat"),I1o=o(" \u2014 "),sq=a("a"),q1o=o("UniSpeechSatModel"),N1o=o(" (UniSpeechSat model)"),j1o=l(),pu=a("li"),_se=a("strong"),D1o=o("van"),G1o=o(" \u2014 "),lq=a("a"),O1o=o("VanModel"),V1o=o(" (VAN model)"),X1o=l(),uu=a("li"),bse=a("strong"),z1o=o("vilt"),Q1o=o(" \u2014 "),iq=a("a"),W1o=o("ViltModel"),H1o=o(" (ViLT model)"),U1o=l(),_u=a("li"),vse=a("strong"),J1o=o("vision-text-dual-encoder"),Y1o=o(" \u2014 "),dq=a("a"),K1o=o("VisionTextDualEncoderModel"),Z1o=o(" (VisionTextDualEncoder model)"),e8o=l(),bu=a("li"),Fse=a("strong"),o8o=o("visual_bert"),r8o=o(" \u2014 "),cq=a("a"),t8o=o("VisualBertModel"),a8o=o(" (VisualBert model)"),n8o=l(),vu=a("li"),Tse=a("strong"),s8o=o("vit"),l8o=o(" \u2014 "),fq=a("a"),i8o=o("ViTModel"),d8o=o(" (ViT model)"),c8o=l(),Fu=a("li"),Mse=a("strong"),f8o=o("vit_mae"),m8o=o(" \u2014 "),mq=a("a"),g8o=o("ViTMAEModel"),h8o=o(" (ViTMAE model)"),p8o=l(),Tu=a("li"),Ese=a("strong"),u8o=o("wav2vec2"),_8o=o(" \u2014 "),gq=a("a"),b8o=o("Wav2Vec2Model"),v8o=o(" (Wav2Vec2 model)"),F8o=l(),Mu=a("li"),Cse=a("strong"),T8o=o("wavlm"),M8o=o(" \u2014 "),hq=a("a"),E8o=o("WavLMModel"),C8o=o(" (WavLM model)"),w8o=l(),Eu=a("li"),wse=a("strong"),A8o=o("xglm"),y8o=o(" \u2014 "),pq=a("a"),L8o=o("XGLMModel"),x8o=o(" (XGLM model)"),$8o=l(),Cu=a("li"),Ase=a("strong"),k8o=o("xlm"),S8o=o(" \u2014 "),uq=a("a"),R8o=o("XLMModel"),B8o=o(" (XLM model)"),P8o=l(),wu=a("li"),yse=a("strong"),I8o=o("xlm-prophetnet"),q8o=o(" \u2014 "),_q=a("a"),N8o=o("XLMProphetNetModel"),j8o=o(" (XLMProphetNet model)"),D8o=l(),Au=a("li"),Lse=a("strong"),G8o=o("xlm-roberta"),O8o=o(" \u2014 "),bq=a("a"),V8o=o("XLMRobertaModel"),X8o=o(" (XLM-RoBERTa model)"),z8o=l(),yu=a("li"),xse=a("strong"),Q8o=o("xlm-roberta-xl"),W8o=o(" \u2014 "),vq=a("a"),H8o=o("XLMRobertaXLModel"),U8o=o(" (XLM-RoBERTa-XL model)"),J8o=l(),Lu=a("li"),$se=a("strong"),Y8o=o("xlnet"),K8o=o(" \u2014 "),Fq=a("a"),Z8o=o("XLNetModel"),ebo=o(" (XLNet model)"),obo=l(),xu=a("li"),kse=a("strong"),rbo=o("yolos"),tbo=o(" \u2014 "),Tq=a("a"),abo=o("YolosModel"),nbo=o(" (YOLOS model)"),sbo=l(),$u=a("li"),Sse=a("strong"),lbo=o("yoso"),ibo=o(" \u2014 "),Mq=a("a"),dbo=o("YosoModel"),cbo=o(" (YOSO model)"),fbo=l(),ku=a("p"),mbo=o("The model is set in evaluation mode by default using "),Rse=a("code"),gbo=o("model.eval()"),hbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bse=a("code"),pbo=o("model.train()"),ubo=l(),F(Su.$$.fragment),NPe=l(),Ci=a("h2"),Ru=a("a"),Pse=a("span"),F(EA.$$.fragment),_bo=l(),Ise=a("span"),bbo=o("AutoModelForPreTraining"),jPe=l(),xo=a("div"),F(CA.$$.fragment),vbo=l(),wi=a("p"),Fbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Eq=a("a"),Tbo=o("from_pretrained()"),Mbo=o(" class method or the "),Cq=a("a"),Ebo=o("from_config()"),Cbo=o(` class
method.`),wbo=l(),wA=a("p"),Abo=o("This class cannot be instantiated directly using "),qse=a("code"),ybo=o("__init__()"),Lbo=o(" (throws an error)."),xbo=l(),rt=a("div"),F(AA.$$.fragment),$bo=l(),Nse=a("p"),kbo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Sbo=l(),Ai=a("p"),Rbo=o(`Note:
Loading a model from its configuration file does `),jse=a("strong"),Bbo=o("not"),Pbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wq=a("a"),Ibo=o("from_pretrained()"),qbo=o(" to load the model weights."),Nbo=l(),F(Bu.$$.fragment),jbo=l(),Ue=a("div"),F(yA.$$.fragment),Dbo=l(),Dse=a("p"),Gbo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Obo=l(),ya=a("p"),Vbo=o("The model class to instantiate is selected based on the "),Gse=a("code"),Xbo=o("model_type"),zbo=o(` property of the config object (either
passed as an argument or loaded from `),Ose=a("code"),Qbo=o("pretrained_model_name_or_path"),Wbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vse=a("code"),Hbo=o("pretrained_model_name_or_path"),Ubo=o(":"),Jbo=l(),G=a("ul"),Pu=a("li"),Xse=a("strong"),Ybo=o("albert"),Kbo=o(" \u2014 "),Aq=a("a"),Zbo=o("AlbertForPreTraining"),e2o=o(" (ALBERT model)"),o2o=l(),Iu=a("li"),zse=a("strong"),r2o=o("bart"),t2o=o(" \u2014 "),yq=a("a"),a2o=o("BartForConditionalGeneration"),n2o=o(" (BART model)"),s2o=l(),qu=a("li"),Qse=a("strong"),l2o=o("bert"),i2o=o(" \u2014 "),Lq=a("a"),d2o=o("BertForPreTraining"),c2o=o(" (BERT model)"),f2o=l(),Nu=a("li"),Wse=a("strong"),m2o=o("big_bird"),g2o=o(" \u2014 "),xq=a("a"),h2o=o("BigBirdForPreTraining"),p2o=o(" (BigBird model)"),u2o=l(),ju=a("li"),Hse=a("strong"),_2o=o("camembert"),b2o=o(" \u2014 "),$q=a("a"),v2o=o("CamembertForMaskedLM"),F2o=o(" (CamemBERT model)"),T2o=l(),Du=a("li"),Use=a("strong"),M2o=o("ctrl"),E2o=o(" \u2014 "),kq=a("a"),C2o=o("CTRLLMHeadModel"),w2o=o(" (CTRL model)"),A2o=l(),Gu=a("li"),Jse=a("strong"),y2o=o("data2vec-text"),L2o=o(" \u2014 "),Sq=a("a"),x2o=o("Data2VecTextForMaskedLM"),$2o=o(" (Data2VecText model)"),k2o=l(),Ou=a("li"),Yse=a("strong"),S2o=o("deberta"),R2o=o(" \u2014 "),Rq=a("a"),B2o=o("DebertaForMaskedLM"),P2o=o(" (DeBERTa model)"),I2o=l(),Vu=a("li"),Kse=a("strong"),q2o=o("deberta-v2"),N2o=o(" \u2014 "),Bq=a("a"),j2o=o("DebertaV2ForMaskedLM"),D2o=o(" (DeBERTa-v2 model)"),G2o=l(),Xu=a("li"),Zse=a("strong"),O2o=o("distilbert"),V2o=o(" \u2014 "),Pq=a("a"),X2o=o("DistilBertForMaskedLM"),z2o=o(" (DistilBERT model)"),Q2o=l(),zu=a("li"),ele=a("strong"),W2o=o("electra"),H2o=o(" \u2014 "),Iq=a("a"),U2o=o("ElectraForPreTraining"),J2o=o(" (ELECTRA model)"),Y2o=l(),Qu=a("li"),ole=a("strong"),K2o=o("flaubert"),Z2o=o(" \u2014 "),qq=a("a"),evo=o("FlaubertWithLMHeadModel"),ovo=o(" (FlauBERT model)"),rvo=l(),Wu=a("li"),rle=a("strong"),tvo=o("fnet"),avo=o(" \u2014 "),Nq=a("a"),nvo=o("FNetForPreTraining"),svo=o(" (FNet model)"),lvo=l(),Hu=a("li"),tle=a("strong"),ivo=o("fsmt"),dvo=o(" \u2014 "),jq=a("a"),cvo=o("FSMTForConditionalGeneration"),fvo=o(" (FairSeq Machine-Translation model)"),mvo=l(),Uu=a("li"),ale=a("strong"),gvo=o("funnel"),hvo=o(" \u2014 "),Dq=a("a"),pvo=o("FunnelForPreTraining"),uvo=o(" (Funnel Transformer model)"),_vo=l(),Ju=a("li"),nle=a("strong"),bvo=o("gpt2"),vvo=o(" \u2014 "),Gq=a("a"),Fvo=o("GPT2LMHeadModel"),Tvo=o(" (OpenAI GPT-2 model)"),Mvo=l(),Yu=a("li"),sle=a("strong"),Evo=o("ibert"),Cvo=o(" \u2014 "),Oq=a("a"),wvo=o("IBertForMaskedLM"),Avo=o(" (I-BERT model)"),yvo=l(),Ku=a("li"),lle=a("strong"),Lvo=o("layoutlm"),xvo=o(" \u2014 "),Vq=a("a"),$vo=o("LayoutLMForMaskedLM"),kvo=o(" (LayoutLM model)"),Svo=l(),Zu=a("li"),ile=a("strong"),Rvo=o("longformer"),Bvo=o(" \u2014 "),Xq=a("a"),Pvo=o("LongformerForMaskedLM"),Ivo=o(" (Longformer model)"),qvo=l(),e_=a("li"),dle=a("strong"),Nvo=o("lxmert"),jvo=o(" \u2014 "),zq=a("a"),Dvo=o("LxmertForPreTraining"),Gvo=o(" (LXMERT model)"),Ovo=l(),o_=a("li"),cle=a("strong"),Vvo=o("megatron-bert"),Xvo=o(" \u2014 "),Qq=a("a"),zvo=o("MegatronBertForPreTraining"),Qvo=o(" (MegatronBert model)"),Wvo=l(),r_=a("li"),fle=a("strong"),Hvo=o("mobilebert"),Uvo=o(" \u2014 "),Wq=a("a"),Jvo=o("MobileBertForPreTraining"),Yvo=o(" (MobileBERT model)"),Kvo=l(),t_=a("li"),mle=a("strong"),Zvo=o("mpnet"),eFo=o(" \u2014 "),Hq=a("a"),oFo=o("MPNetForMaskedLM"),rFo=o(" (MPNet model)"),tFo=l(),a_=a("li"),gle=a("strong"),aFo=o("openai-gpt"),nFo=o(" \u2014 "),Uq=a("a"),sFo=o("OpenAIGPTLMHeadModel"),lFo=o(" (OpenAI GPT model)"),iFo=l(),n_=a("li"),hle=a("strong"),dFo=o("retribert"),cFo=o(" \u2014 "),Jq=a("a"),fFo=o("RetriBertModel"),mFo=o(" (RetriBERT model)"),gFo=l(),s_=a("li"),ple=a("strong"),hFo=o("roberta"),pFo=o(" \u2014 "),Yq=a("a"),uFo=o("RobertaForMaskedLM"),_Fo=o(" (RoBERTa model)"),bFo=l(),l_=a("li"),ule=a("strong"),vFo=o("squeezebert"),FFo=o(" \u2014 "),Kq=a("a"),TFo=o("SqueezeBertForMaskedLM"),MFo=o(" (SqueezeBERT model)"),EFo=l(),i_=a("li"),_le=a("strong"),CFo=o("t5"),wFo=o(" \u2014 "),Zq=a("a"),AFo=o("T5ForConditionalGeneration"),yFo=o(" (T5 model)"),LFo=l(),d_=a("li"),ble=a("strong"),xFo=o("tapas"),$Fo=o(" \u2014 "),eN=a("a"),kFo=o("TapasForMaskedLM"),SFo=o(" (TAPAS model)"),RFo=l(),c_=a("li"),vle=a("strong"),BFo=o("transfo-xl"),PFo=o(" \u2014 "),oN=a("a"),IFo=o("TransfoXLLMHeadModel"),qFo=o(" (Transformer-XL model)"),NFo=l(),f_=a("li"),Fle=a("strong"),jFo=o("unispeech"),DFo=o(" \u2014 "),rN=a("a"),GFo=o("UniSpeechForPreTraining"),OFo=o(" (UniSpeech model)"),VFo=l(),m_=a("li"),Tle=a("strong"),XFo=o("unispeech-sat"),zFo=o(" \u2014 "),tN=a("a"),QFo=o("UniSpeechSatForPreTraining"),WFo=o(" (UniSpeechSat model)"),HFo=l(),g_=a("li"),Mle=a("strong"),UFo=o("visual_bert"),JFo=o(" \u2014 "),aN=a("a"),YFo=o("VisualBertForPreTraining"),KFo=o(" (VisualBert model)"),ZFo=l(),h_=a("li"),Ele=a("strong"),e0o=o("vit_mae"),o0o=o(" \u2014 "),nN=a("a"),r0o=o("ViTMAEForPreTraining"),t0o=o(" (ViTMAE model)"),a0o=l(),p_=a("li"),Cle=a("strong"),n0o=o("wav2vec2"),s0o=o(" \u2014 "),sN=a("a"),l0o=o("Wav2Vec2ForPreTraining"),i0o=o(" (Wav2Vec2 model)"),d0o=l(),u_=a("li"),wle=a("strong"),c0o=o("xlm"),f0o=o(" \u2014 "),lN=a("a"),m0o=o("XLMWithLMHeadModel"),g0o=o(" (XLM model)"),h0o=l(),__=a("li"),Ale=a("strong"),p0o=o("xlm-roberta"),u0o=o(" \u2014 "),iN=a("a"),_0o=o("XLMRobertaForMaskedLM"),b0o=o(" (XLM-RoBERTa model)"),v0o=l(),b_=a("li"),yle=a("strong"),F0o=o("xlm-roberta-xl"),T0o=o(" \u2014 "),dN=a("a"),M0o=o("XLMRobertaXLForMaskedLM"),E0o=o(" (XLM-RoBERTa-XL model)"),C0o=l(),v_=a("li"),Lle=a("strong"),w0o=o("xlnet"),A0o=o(" \u2014 "),cN=a("a"),y0o=o("XLNetLMHeadModel"),L0o=o(" (XLNet model)"),x0o=l(),F_=a("p"),$0o=o("The model is set in evaluation mode by default using "),xle=a("code"),k0o=o("model.eval()"),S0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$le=a("code"),R0o=o("model.train()"),B0o=l(),F(T_.$$.fragment),DPe=l(),yi=a("h2"),M_=a("a"),kle=a("span"),F(LA.$$.fragment),P0o=l(),Sle=a("span"),I0o=o("AutoModelForCausalLM"),GPe=l(),$o=a("div"),F(xA.$$.fragment),q0o=l(),Li=a("p"),N0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fN=a("a"),j0o=o("from_pretrained()"),D0o=o(" class method or the "),mN=a("a"),G0o=o("from_config()"),O0o=o(` class
method.`),V0o=l(),$A=a("p"),X0o=o("This class cannot be instantiated directly using "),Rle=a("code"),z0o=o("__init__()"),Q0o=o(" (throws an error)."),W0o=l(),tt=a("div"),F(kA.$$.fragment),H0o=l(),Ble=a("p"),U0o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),J0o=l(),xi=a("p"),Y0o=o(`Note:
Loading a model from its configuration file does `),Ple=a("strong"),K0o=o("not"),Z0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gN=a("a"),eTo=o("from_pretrained()"),oTo=o(" to load the model weights."),rTo=l(),F(E_.$$.fragment),tTo=l(),Je=a("div"),F(SA.$$.fragment),aTo=l(),Ile=a("p"),nTo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sTo=l(),La=a("p"),lTo=o("The model class to instantiate is selected based on the "),qle=a("code"),iTo=o("model_type"),dTo=o(` property of the config object (either
passed as an argument or loaded from `),Nle=a("code"),cTo=o("pretrained_model_name_or_path"),fTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jle=a("code"),mTo=o("pretrained_model_name_or_path"),gTo=o(":"),hTo=l(),z=a("ul"),C_=a("li"),Dle=a("strong"),pTo=o("bart"),uTo=o(" \u2014 "),hN=a("a"),_To=o("BartForCausalLM"),bTo=o(" (BART model)"),vTo=l(),w_=a("li"),Gle=a("strong"),FTo=o("bert"),TTo=o(" \u2014 "),pN=a("a"),MTo=o("BertLMHeadModel"),ETo=o(" (BERT model)"),CTo=l(),A_=a("li"),Ole=a("strong"),wTo=o("bert-generation"),ATo=o(" \u2014 "),uN=a("a"),yTo=o("BertGenerationDecoder"),LTo=o(" (Bert Generation model)"),xTo=l(),y_=a("li"),Vle=a("strong"),$To=o("big_bird"),kTo=o(" \u2014 "),_N=a("a"),STo=o("BigBirdForCausalLM"),RTo=o(" (BigBird model)"),BTo=l(),L_=a("li"),Xle=a("strong"),PTo=o("bigbird_pegasus"),ITo=o(" \u2014 "),bN=a("a"),qTo=o("BigBirdPegasusForCausalLM"),NTo=o(" (BigBirdPegasus model)"),jTo=l(),x_=a("li"),zle=a("strong"),DTo=o("blenderbot"),GTo=o(" \u2014 "),vN=a("a"),OTo=o("BlenderbotForCausalLM"),VTo=o(" (Blenderbot model)"),XTo=l(),$_=a("li"),Qle=a("strong"),zTo=o("blenderbot-small"),QTo=o(" \u2014 "),FN=a("a"),WTo=o("BlenderbotSmallForCausalLM"),HTo=o(" (BlenderbotSmall model)"),UTo=l(),k_=a("li"),Wle=a("strong"),JTo=o("camembert"),YTo=o(" \u2014 "),TN=a("a"),KTo=o("CamembertForCausalLM"),ZTo=o(" (CamemBERT model)"),e7o=l(),S_=a("li"),Hle=a("strong"),o7o=o("ctrl"),r7o=o(" \u2014 "),MN=a("a"),t7o=o("CTRLLMHeadModel"),a7o=o(" (CTRL model)"),n7o=l(),R_=a("li"),Ule=a("strong"),s7o=o("data2vec-text"),l7o=o(" \u2014 "),EN=a("a"),i7o=o("Data2VecTextForCausalLM"),d7o=o(" (Data2VecText model)"),c7o=l(),B_=a("li"),Jle=a("strong"),f7o=o("electra"),m7o=o(" \u2014 "),CN=a("a"),g7o=o("ElectraForCausalLM"),h7o=o(" (ELECTRA model)"),p7o=l(),P_=a("li"),Yle=a("strong"),u7o=o("gpt2"),_7o=o(" \u2014 "),wN=a("a"),b7o=o("GPT2LMHeadModel"),v7o=o(" (OpenAI GPT-2 model)"),F7o=l(),I_=a("li"),Kle=a("strong"),T7o=o("gpt_neo"),M7o=o(" \u2014 "),AN=a("a"),E7o=o("GPTNeoForCausalLM"),C7o=o(" (GPT Neo model)"),w7o=l(),q_=a("li"),Zle=a("strong"),A7o=o("gptj"),y7o=o(" \u2014 "),yN=a("a"),L7o=o("GPTJForCausalLM"),x7o=o(" (GPT-J model)"),$7o=l(),N_=a("li"),eie=a("strong"),k7o=o("marian"),S7o=o(" \u2014 "),LN=a("a"),R7o=o("MarianForCausalLM"),B7o=o(" (Marian model)"),P7o=l(),j_=a("li"),oie=a("strong"),I7o=o("mbart"),q7o=o(" \u2014 "),xN=a("a"),N7o=o("MBartForCausalLM"),j7o=o(" (mBART model)"),D7o=l(),D_=a("li"),rie=a("strong"),G7o=o("megatron-bert"),O7o=o(" \u2014 "),$N=a("a"),V7o=o("MegatronBertForCausalLM"),X7o=o(" (MegatronBert model)"),z7o=l(),G_=a("li"),tie=a("strong"),Q7o=o("openai-gpt"),W7o=o(" \u2014 "),kN=a("a"),H7o=o("OpenAIGPTLMHeadModel"),U7o=o(" (OpenAI GPT model)"),J7o=l(),O_=a("li"),aie=a("strong"),Y7o=o("opt"),K7o=o(" \u2014 "),SN=a("a"),Z7o=o("OPTForCausalLM"),eMo=o(" (OPT model)"),oMo=l(),V_=a("li"),nie=a("strong"),rMo=o("pegasus"),tMo=o(" \u2014 "),RN=a("a"),aMo=o("PegasusForCausalLM"),nMo=o(" (Pegasus model)"),sMo=l(),X_=a("li"),sie=a("strong"),lMo=o("plbart"),iMo=o(" \u2014 "),BN=a("a"),dMo=o("PLBartForCausalLM"),cMo=o(" (PLBart model)"),fMo=l(),z_=a("li"),lie=a("strong"),mMo=o("prophetnet"),gMo=o(" \u2014 "),PN=a("a"),hMo=o("ProphetNetForCausalLM"),pMo=o(" (ProphetNet model)"),uMo=l(),Q_=a("li"),iie=a("strong"),_Mo=o("qdqbert"),bMo=o(" \u2014 "),IN=a("a"),vMo=o("QDQBertLMHeadModel"),FMo=o(" (QDQBert model)"),TMo=l(),W_=a("li"),die=a("strong"),MMo=o("reformer"),EMo=o(" \u2014 "),qN=a("a"),CMo=o("ReformerModelWithLMHead"),wMo=o(" (Reformer model)"),AMo=l(),H_=a("li"),cie=a("strong"),yMo=o("rembert"),LMo=o(" \u2014 "),NN=a("a"),xMo=o("RemBertForCausalLM"),$Mo=o(" (RemBERT model)"),kMo=l(),U_=a("li"),fie=a("strong"),SMo=o("roberta"),RMo=o(" \u2014 "),jN=a("a"),BMo=o("RobertaForCausalLM"),PMo=o(" (RoBERTa model)"),IMo=l(),J_=a("li"),mie=a("strong"),qMo=o("roformer"),NMo=o(" \u2014 "),DN=a("a"),jMo=o("RoFormerForCausalLM"),DMo=o(" (RoFormer model)"),GMo=l(),Y_=a("li"),gie=a("strong"),OMo=o("speech_to_text_2"),VMo=o(" \u2014 "),GN=a("a"),XMo=o("Speech2Text2ForCausalLM"),zMo=o(" (Speech2Text2 model)"),QMo=l(),K_=a("li"),hie=a("strong"),WMo=o("transfo-xl"),HMo=o(" \u2014 "),ON=a("a"),UMo=o("TransfoXLLMHeadModel"),JMo=o(" (Transformer-XL model)"),YMo=l(),Z_=a("li"),pie=a("strong"),KMo=o("trocr"),ZMo=o(" \u2014 "),VN=a("a"),e4o=o("TrOCRForCausalLM"),o4o=o(" (TrOCR model)"),r4o=l(),e1=a("li"),uie=a("strong"),t4o=o("xglm"),a4o=o(" \u2014 "),XN=a("a"),n4o=o("XGLMForCausalLM"),s4o=o(" (XGLM model)"),l4o=l(),o1=a("li"),_ie=a("strong"),i4o=o("xlm"),d4o=o(" \u2014 "),zN=a("a"),c4o=o("XLMWithLMHeadModel"),f4o=o(" (XLM model)"),m4o=l(),r1=a("li"),bie=a("strong"),g4o=o("xlm-prophetnet"),h4o=o(" \u2014 "),QN=a("a"),p4o=o("XLMProphetNetForCausalLM"),u4o=o(" (XLMProphetNet model)"),_4o=l(),t1=a("li"),vie=a("strong"),b4o=o("xlm-roberta"),v4o=o(" \u2014 "),WN=a("a"),F4o=o("XLMRobertaForCausalLM"),T4o=o(" (XLM-RoBERTa model)"),M4o=l(),a1=a("li"),Fie=a("strong"),E4o=o("xlm-roberta-xl"),C4o=o(" \u2014 "),HN=a("a"),w4o=o("XLMRobertaXLForCausalLM"),A4o=o(" (XLM-RoBERTa-XL model)"),y4o=l(),n1=a("li"),Tie=a("strong"),L4o=o("xlnet"),x4o=o(" \u2014 "),UN=a("a"),$4o=o("XLNetLMHeadModel"),k4o=o(" (XLNet model)"),S4o=l(),s1=a("p"),R4o=o("The model is set in evaluation mode by default using "),Mie=a("code"),B4o=o("model.eval()"),P4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eie=a("code"),I4o=o("model.train()"),q4o=l(),F(l1.$$.fragment),OPe=l(),$i=a("h2"),i1=a("a"),Cie=a("span"),F(RA.$$.fragment),N4o=l(),wie=a("span"),j4o=o("AutoModelForMaskedLM"),VPe=l(),ko=a("div"),F(BA.$$.fragment),D4o=l(),ki=a("p"),G4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JN=a("a"),O4o=o("from_pretrained()"),V4o=o(" class method or the "),YN=a("a"),X4o=o("from_config()"),z4o=o(` class
method.`),Q4o=l(),PA=a("p"),W4o=o("This class cannot be instantiated directly using "),Aie=a("code"),H4o=o("__init__()"),U4o=o(" (throws an error)."),J4o=l(),at=a("div"),F(IA.$$.fragment),Y4o=l(),yie=a("p"),K4o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Z4o=l(),Si=a("p"),eEo=o(`Note:
Loading a model from its configuration file does `),Lie=a("strong"),oEo=o("not"),rEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KN=a("a"),tEo=o("from_pretrained()"),aEo=o(" to load the model weights."),nEo=l(),F(d1.$$.fragment),sEo=l(),Ye=a("div"),F(qA.$$.fragment),lEo=l(),xie=a("p"),iEo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dEo=l(),xa=a("p"),cEo=o("The model class to instantiate is selected based on the "),$ie=a("code"),fEo=o("model_type"),mEo=o(` property of the config object (either
passed as an argument or loaded from `),kie=a("code"),gEo=o("pretrained_model_name_or_path"),hEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sie=a("code"),pEo=o("pretrained_model_name_or_path"),uEo=o(":"),_Eo=l(),Q=a("ul"),c1=a("li"),Rie=a("strong"),bEo=o("albert"),vEo=o(" \u2014 "),ZN=a("a"),FEo=o("AlbertForMaskedLM"),TEo=o(" (ALBERT model)"),MEo=l(),f1=a("li"),Bie=a("strong"),EEo=o("bart"),CEo=o(" \u2014 "),ej=a("a"),wEo=o("BartForConditionalGeneration"),AEo=o(" (BART model)"),yEo=l(),m1=a("li"),Pie=a("strong"),LEo=o("bert"),xEo=o(" \u2014 "),oj=a("a"),$Eo=o("BertForMaskedLM"),kEo=o(" (BERT model)"),SEo=l(),g1=a("li"),Iie=a("strong"),REo=o("big_bird"),BEo=o(" \u2014 "),rj=a("a"),PEo=o("BigBirdForMaskedLM"),IEo=o(" (BigBird model)"),qEo=l(),h1=a("li"),qie=a("strong"),NEo=o("camembert"),jEo=o(" \u2014 "),tj=a("a"),DEo=o("CamembertForMaskedLM"),GEo=o(" (CamemBERT model)"),OEo=l(),p1=a("li"),Nie=a("strong"),VEo=o("convbert"),XEo=o(" \u2014 "),aj=a("a"),zEo=o("ConvBertForMaskedLM"),QEo=o(" (ConvBERT model)"),WEo=l(),u1=a("li"),jie=a("strong"),HEo=o("data2vec-text"),UEo=o(" \u2014 "),nj=a("a"),JEo=o("Data2VecTextForMaskedLM"),YEo=o(" (Data2VecText model)"),KEo=l(),_1=a("li"),Die=a("strong"),ZEo=o("deberta"),e5o=o(" \u2014 "),sj=a("a"),o5o=o("DebertaForMaskedLM"),r5o=o(" (DeBERTa model)"),t5o=l(),b1=a("li"),Gie=a("strong"),a5o=o("deberta-v2"),n5o=o(" \u2014 "),lj=a("a"),s5o=o("DebertaV2ForMaskedLM"),l5o=o(" (DeBERTa-v2 model)"),i5o=l(),v1=a("li"),Oie=a("strong"),d5o=o("distilbert"),c5o=o(" \u2014 "),ij=a("a"),f5o=o("DistilBertForMaskedLM"),m5o=o(" (DistilBERT model)"),g5o=l(),F1=a("li"),Vie=a("strong"),h5o=o("electra"),p5o=o(" \u2014 "),dj=a("a"),u5o=o("ElectraForMaskedLM"),_5o=o(" (ELECTRA model)"),b5o=l(),T1=a("li"),Xie=a("strong"),v5o=o("flaubert"),F5o=o(" \u2014 "),cj=a("a"),T5o=o("FlaubertWithLMHeadModel"),M5o=o(" (FlauBERT model)"),E5o=l(),M1=a("li"),zie=a("strong"),C5o=o("fnet"),w5o=o(" \u2014 "),fj=a("a"),A5o=o("FNetForMaskedLM"),y5o=o(" (FNet model)"),L5o=l(),E1=a("li"),Qie=a("strong"),x5o=o("funnel"),$5o=o(" \u2014 "),mj=a("a"),k5o=o("FunnelForMaskedLM"),S5o=o(" (Funnel Transformer model)"),R5o=l(),C1=a("li"),Wie=a("strong"),B5o=o("ibert"),P5o=o(" \u2014 "),gj=a("a"),I5o=o("IBertForMaskedLM"),q5o=o(" (I-BERT model)"),N5o=l(),w1=a("li"),Hie=a("strong"),j5o=o("layoutlm"),D5o=o(" \u2014 "),hj=a("a"),G5o=o("LayoutLMForMaskedLM"),O5o=o(" (LayoutLM model)"),V5o=l(),A1=a("li"),Uie=a("strong"),X5o=o("longformer"),z5o=o(" \u2014 "),pj=a("a"),Q5o=o("LongformerForMaskedLM"),W5o=o(" (Longformer model)"),H5o=l(),y1=a("li"),Jie=a("strong"),U5o=o("mbart"),J5o=o(" \u2014 "),uj=a("a"),Y5o=o("MBartForConditionalGeneration"),K5o=o(" (mBART model)"),Z5o=l(),L1=a("li"),Yie=a("strong"),eCo=o("megatron-bert"),oCo=o(" \u2014 "),_j=a("a"),rCo=o("MegatronBertForMaskedLM"),tCo=o(" (MegatronBert model)"),aCo=l(),x1=a("li"),Kie=a("strong"),nCo=o("mobilebert"),sCo=o(" \u2014 "),bj=a("a"),lCo=o("MobileBertForMaskedLM"),iCo=o(" (MobileBERT model)"),dCo=l(),$1=a("li"),Zie=a("strong"),cCo=o("mpnet"),fCo=o(" \u2014 "),vj=a("a"),mCo=o("MPNetForMaskedLM"),gCo=o(" (MPNet model)"),hCo=l(),k1=a("li"),ede=a("strong"),pCo=o("nystromformer"),uCo=o(" \u2014 "),Fj=a("a"),_Co=o("NystromformerForMaskedLM"),bCo=o(" (Nystromformer model)"),vCo=l(),S1=a("li"),ode=a("strong"),FCo=o("perceiver"),TCo=o(" \u2014 "),Tj=a("a"),MCo=o("PerceiverForMaskedLM"),ECo=o(" (Perceiver model)"),CCo=l(),R1=a("li"),rde=a("strong"),wCo=o("qdqbert"),ACo=o(" \u2014 "),Mj=a("a"),yCo=o("QDQBertForMaskedLM"),LCo=o(" (QDQBert model)"),xCo=l(),B1=a("li"),tde=a("strong"),$Co=o("reformer"),kCo=o(" \u2014 "),Ej=a("a"),SCo=o("ReformerForMaskedLM"),RCo=o(" (Reformer model)"),BCo=l(),P1=a("li"),ade=a("strong"),PCo=o("rembert"),ICo=o(" \u2014 "),Cj=a("a"),qCo=o("RemBertForMaskedLM"),NCo=o(" (RemBERT model)"),jCo=l(),I1=a("li"),nde=a("strong"),DCo=o("roberta"),GCo=o(" \u2014 "),wj=a("a"),OCo=o("RobertaForMaskedLM"),VCo=o(" (RoBERTa model)"),XCo=l(),q1=a("li"),sde=a("strong"),zCo=o("roformer"),QCo=o(" \u2014 "),Aj=a("a"),WCo=o("RoFormerForMaskedLM"),HCo=o(" (RoFormer model)"),UCo=l(),N1=a("li"),lde=a("strong"),JCo=o("squeezebert"),YCo=o(" \u2014 "),yj=a("a"),KCo=o("SqueezeBertForMaskedLM"),ZCo=o(" (SqueezeBERT model)"),e3o=l(),j1=a("li"),ide=a("strong"),o3o=o("tapas"),r3o=o(" \u2014 "),Lj=a("a"),t3o=o("TapasForMaskedLM"),a3o=o(" (TAPAS model)"),n3o=l(),D1=a("li"),dde=a("strong"),s3o=o("wav2vec2"),l3o=o(" \u2014 "),cde=a("code"),i3o=o("Wav2Vec2ForMaskedLM"),d3o=o(" (Wav2Vec2 model)"),c3o=l(),G1=a("li"),fde=a("strong"),f3o=o("xlm"),m3o=o(" \u2014 "),xj=a("a"),g3o=o("XLMWithLMHeadModel"),h3o=o(" (XLM model)"),p3o=l(),O1=a("li"),mde=a("strong"),u3o=o("xlm-roberta"),_3o=o(" \u2014 "),$j=a("a"),b3o=o("XLMRobertaForMaskedLM"),v3o=o(" (XLM-RoBERTa model)"),F3o=l(),V1=a("li"),gde=a("strong"),T3o=o("xlm-roberta-xl"),M3o=o(" \u2014 "),kj=a("a"),E3o=o("XLMRobertaXLForMaskedLM"),C3o=o(" (XLM-RoBERTa-XL model)"),w3o=l(),X1=a("li"),hde=a("strong"),A3o=o("yoso"),y3o=o(" \u2014 "),Sj=a("a"),L3o=o("YosoForMaskedLM"),x3o=o(" (YOSO model)"),$3o=l(),z1=a("p"),k3o=o("The model is set in evaluation mode by default using "),pde=a("code"),S3o=o("model.eval()"),R3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ude=a("code"),B3o=o("model.train()"),P3o=l(),F(Q1.$$.fragment),XPe=l(),Ri=a("h2"),W1=a("a"),_de=a("span"),F(NA.$$.fragment),I3o=l(),bde=a("span"),q3o=o("AutoModelForSeq2SeqLM"),zPe=l(),So=a("div"),F(jA.$$.fragment),N3o=l(),Bi=a("p"),j3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Rj=a("a"),D3o=o("from_pretrained()"),G3o=o(" class method or the "),Bj=a("a"),O3o=o("from_config()"),V3o=o(` class
method.`),X3o=l(),DA=a("p"),z3o=o("This class cannot be instantiated directly using "),vde=a("code"),Q3o=o("__init__()"),W3o=o(" (throws an error)."),H3o=l(),nt=a("div"),F(GA.$$.fragment),U3o=l(),Fde=a("p"),J3o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Y3o=l(),Pi=a("p"),K3o=o(`Note:
Loading a model from its configuration file does `),Tde=a("strong"),Z3o=o("not"),ewo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pj=a("a"),owo=o("from_pretrained()"),rwo=o(" to load the model weights."),two=l(),F(H1.$$.fragment),awo=l(),Ke=a("div"),F(OA.$$.fragment),nwo=l(),Mde=a("p"),swo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lwo=l(),$a=a("p"),iwo=o("The model class to instantiate is selected based on the "),Ede=a("code"),dwo=o("model_type"),cwo=o(` property of the config object (either
passed as an argument or loaded from `),Cde=a("code"),fwo=o("pretrained_model_name_or_path"),mwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wde=a("code"),gwo=o("pretrained_model_name_or_path"),hwo=o(":"),pwo=l(),he=a("ul"),U1=a("li"),Ade=a("strong"),uwo=o("bart"),_wo=o(" \u2014 "),Ij=a("a"),bwo=o("BartForConditionalGeneration"),vwo=o(" (BART model)"),Fwo=l(),J1=a("li"),yde=a("strong"),Two=o("bigbird_pegasus"),Mwo=o(" \u2014 "),qj=a("a"),Ewo=o("BigBirdPegasusForConditionalGeneration"),Cwo=o(" (BigBirdPegasus model)"),wwo=l(),Y1=a("li"),Lde=a("strong"),Awo=o("blenderbot"),ywo=o(" \u2014 "),Nj=a("a"),Lwo=o("BlenderbotForConditionalGeneration"),xwo=o(" (Blenderbot model)"),$wo=l(),K1=a("li"),xde=a("strong"),kwo=o("blenderbot-small"),Swo=o(" \u2014 "),jj=a("a"),Rwo=o("BlenderbotSmallForConditionalGeneration"),Bwo=o(" (BlenderbotSmall model)"),Pwo=l(),Z1=a("li"),$de=a("strong"),Iwo=o("encoder-decoder"),qwo=o(" \u2014 "),Dj=a("a"),Nwo=o("EncoderDecoderModel"),jwo=o(" (Encoder decoder model)"),Dwo=l(),e8=a("li"),kde=a("strong"),Gwo=o("fsmt"),Owo=o(" \u2014 "),Gj=a("a"),Vwo=o("FSMTForConditionalGeneration"),Xwo=o(" (FairSeq Machine-Translation model)"),zwo=l(),o8=a("li"),Sde=a("strong"),Qwo=o("led"),Wwo=o(" \u2014 "),Oj=a("a"),Hwo=o("LEDForConditionalGeneration"),Uwo=o(" (LED model)"),Jwo=l(),r8=a("li"),Rde=a("strong"),Ywo=o("m2m_100"),Kwo=o(" \u2014 "),Vj=a("a"),Zwo=o("M2M100ForConditionalGeneration"),eAo=o(" (M2M100 model)"),oAo=l(),t8=a("li"),Bde=a("strong"),rAo=o("marian"),tAo=o(" \u2014 "),Xj=a("a"),aAo=o("MarianMTModel"),nAo=o(" (Marian model)"),sAo=l(),a8=a("li"),Pde=a("strong"),lAo=o("mbart"),iAo=o(" \u2014 "),zj=a("a"),dAo=o("MBartForConditionalGeneration"),cAo=o(" (mBART model)"),fAo=l(),n8=a("li"),Ide=a("strong"),mAo=o("mt5"),gAo=o(" \u2014 "),Qj=a("a"),hAo=o("MT5ForConditionalGeneration"),pAo=o(" (mT5 model)"),uAo=l(),s8=a("li"),qde=a("strong"),_Ao=o("pegasus"),bAo=o(" \u2014 "),Wj=a("a"),vAo=o("PegasusForConditionalGeneration"),FAo=o(" (Pegasus model)"),TAo=l(),l8=a("li"),Nde=a("strong"),MAo=o("plbart"),EAo=o(" \u2014 "),Hj=a("a"),CAo=o("PLBartForConditionalGeneration"),wAo=o(" (PLBart model)"),AAo=l(),i8=a("li"),jde=a("strong"),yAo=o("prophetnet"),LAo=o(" \u2014 "),Uj=a("a"),xAo=o("ProphetNetForConditionalGeneration"),$Ao=o(" (ProphetNet model)"),kAo=l(),d8=a("li"),Dde=a("strong"),SAo=o("t5"),RAo=o(" \u2014 "),Jj=a("a"),BAo=o("T5ForConditionalGeneration"),PAo=o(" (T5 model)"),IAo=l(),c8=a("li"),Gde=a("strong"),qAo=o("tapex"),NAo=o(" \u2014 "),Yj=a("a"),jAo=o("BartForConditionalGeneration"),DAo=o(" (TAPEX model)"),GAo=l(),f8=a("li"),Ode=a("strong"),OAo=o("xlm-prophetnet"),VAo=o(" \u2014 "),Kj=a("a"),XAo=o("XLMProphetNetForConditionalGeneration"),zAo=o(" (XLMProphetNet model)"),QAo=l(),m8=a("p"),WAo=o("The model is set in evaluation mode by default using "),Vde=a("code"),HAo=o("model.eval()"),UAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xde=a("code"),JAo=o("model.train()"),YAo=l(),F(g8.$$.fragment),QPe=l(),Ii=a("h2"),h8=a("a"),zde=a("span"),F(VA.$$.fragment),KAo=l(),Qde=a("span"),ZAo=o("AutoModelForSequenceClassification"),WPe=l(),Ro=a("div"),F(XA.$$.fragment),e6o=l(),qi=a("p"),o6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Zj=a("a"),r6o=o("from_pretrained()"),t6o=o(" class method or the "),eD=a("a"),a6o=o("from_config()"),n6o=o(` class
method.`),s6o=l(),zA=a("p"),l6o=o("This class cannot be instantiated directly using "),Wde=a("code"),i6o=o("__init__()"),d6o=o(" (throws an error)."),c6o=l(),st=a("div"),F(QA.$$.fragment),f6o=l(),Hde=a("p"),m6o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),g6o=l(),Ni=a("p"),h6o=o(`Note:
Loading a model from its configuration file does `),Ude=a("strong"),p6o=o("not"),u6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oD=a("a"),_6o=o("from_pretrained()"),b6o=o(" to load the model weights."),v6o=l(),F(p8.$$.fragment),F6o=l(),Ze=a("div"),F(WA.$$.fragment),T6o=l(),Jde=a("p"),M6o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),E6o=l(),ka=a("p"),C6o=o("The model class to instantiate is selected based on the "),Yde=a("code"),w6o=o("model_type"),A6o=o(` property of the config object (either
passed as an argument or loaded from `),Kde=a("code"),y6o=o("pretrained_model_name_or_path"),L6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zde=a("code"),x6o=o("pretrained_model_name_or_path"),$6o=o(":"),k6o=l(),q=a("ul"),u8=a("li"),ece=a("strong"),S6o=o("albert"),R6o=o(" \u2014 "),rD=a("a"),B6o=o("AlbertForSequenceClassification"),P6o=o(" (ALBERT model)"),I6o=l(),_8=a("li"),oce=a("strong"),q6o=o("bart"),N6o=o(" \u2014 "),tD=a("a"),j6o=o("BartForSequenceClassification"),D6o=o(" (BART model)"),G6o=l(),b8=a("li"),rce=a("strong"),O6o=o("bert"),V6o=o(" \u2014 "),aD=a("a"),X6o=o("BertForSequenceClassification"),z6o=o(" (BERT model)"),Q6o=l(),v8=a("li"),tce=a("strong"),W6o=o("big_bird"),H6o=o(" \u2014 "),nD=a("a"),U6o=o("BigBirdForSequenceClassification"),J6o=o(" (BigBird model)"),Y6o=l(),F8=a("li"),ace=a("strong"),K6o=o("bigbird_pegasus"),Z6o=o(" \u2014 "),sD=a("a"),eyo=o("BigBirdPegasusForSequenceClassification"),oyo=o(" (BigBirdPegasus model)"),ryo=l(),T8=a("li"),nce=a("strong"),tyo=o("camembert"),ayo=o(" \u2014 "),lD=a("a"),nyo=o("CamembertForSequenceClassification"),syo=o(" (CamemBERT model)"),lyo=l(),M8=a("li"),sce=a("strong"),iyo=o("canine"),dyo=o(" \u2014 "),iD=a("a"),cyo=o("CanineForSequenceClassification"),fyo=o(" (Canine model)"),myo=l(),E8=a("li"),lce=a("strong"),gyo=o("convbert"),hyo=o(" \u2014 "),dD=a("a"),pyo=o("ConvBertForSequenceClassification"),uyo=o(" (ConvBERT model)"),_yo=l(),C8=a("li"),ice=a("strong"),byo=o("ctrl"),vyo=o(" \u2014 "),cD=a("a"),Fyo=o("CTRLForSequenceClassification"),Tyo=o(" (CTRL model)"),Myo=l(),w8=a("li"),dce=a("strong"),Eyo=o("data2vec-text"),Cyo=o(" \u2014 "),fD=a("a"),wyo=o("Data2VecTextForSequenceClassification"),Ayo=o(" (Data2VecText model)"),yyo=l(),A8=a("li"),cce=a("strong"),Lyo=o("deberta"),xyo=o(" \u2014 "),mD=a("a"),$yo=o("DebertaForSequenceClassification"),kyo=o(" (DeBERTa model)"),Syo=l(),y8=a("li"),fce=a("strong"),Ryo=o("deberta-v2"),Byo=o(" \u2014 "),gD=a("a"),Pyo=o("DebertaV2ForSequenceClassification"),Iyo=o(" (DeBERTa-v2 model)"),qyo=l(),L8=a("li"),mce=a("strong"),Nyo=o("distilbert"),jyo=o(" \u2014 "),hD=a("a"),Dyo=o("DistilBertForSequenceClassification"),Gyo=o(" (DistilBERT model)"),Oyo=l(),x8=a("li"),gce=a("strong"),Vyo=o("electra"),Xyo=o(" \u2014 "),pD=a("a"),zyo=o("ElectraForSequenceClassification"),Qyo=o(" (ELECTRA model)"),Wyo=l(),$8=a("li"),hce=a("strong"),Hyo=o("flaubert"),Uyo=o(" \u2014 "),uD=a("a"),Jyo=o("FlaubertForSequenceClassification"),Yyo=o(" (FlauBERT model)"),Kyo=l(),k8=a("li"),pce=a("strong"),Zyo=o("fnet"),eLo=o(" \u2014 "),_D=a("a"),oLo=o("FNetForSequenceClassification"),rLo=o(" (FNet model)"),tLo=l(),S8=a("li"),uce=a("strong"),aLo=o("funnel"),nLo=o(" \u2014 "),bD=a("a"),sLo=o("FunnelForSequenceClassification"),lLo=o(" (Funnel Transformer model)"),iLo=l(),R8=a("li"),_ce=a("strong"),dLo=o("gpt2"),cLo=o(" \u2014 "),vD=a("a"),fLo=o("GPT2ForSequenceClassification"),mLo=o(" (OpenAI GPT-2 model)"),gLo=l(),B8=a("li"),bce=a("strong"),hLo=o("gpt_neo"),pLo=o(" \u2014 "),FD=a("a"),uLo=o("GPTNeoForSequenceClassification"),_Lo=o(" (GPT Neo model)"),bLo=l(),P8=a("li"),vce=a("strong"),vLo=o("gptj"),FLo=o(" \u2014 "),TD=a("a"),TLo=o("GPTJForSequenceClassification"),MLo=o(" (GPT-J model)"),ELo=l(),I8=a("li"),Fce=a("strong"),CLo=o("ibert"),wLo=o(" \u2014 "),MD=a("a"),ALo=o("IBertForSequenceClassification"),yLo=o(" (I-BERT model)"),LLo=l(),q8=a("li"),Tce=a("strong"),xLo=o("layoutlm"),$Lo=o(" \u2014 "),ED=a("a"),kLo=o("LayoutLMForSequenceClassification"),SLo=o(" (LayoutLM model)"),RLo=l(),N8=a("li"),Mce=a("strong"),BLo=o("layoutlmv2"),PLo=o(" \u2014 "),CD=a("a"),ILo=o("LayoutLMv2ForSequenceClassification"),qLo=o(" (LayoutLMv2 model)"),NLo=l(),j8=a("li"),Ece=a("strong"),jLo=o("led"),DLo=o(" \u2014 "),wD=a("a"),GLo=o("LEDForSequenceClassification"),OLo=o(" (LED model)"),VLo=l(),D8=a("li"),Cce=a("strong"),XLo=o("longformer"),zLo=o(" \u2014 "),AD=a("a"),QLo=o("LongformerForSequenceClassification"),WLo=o(" (Longformer model)"),HLo=l(),G8=a("li"),wce=a("strong"),ULo=o("mbart"),JLo=o(" \u2014 "),yD=a("a"),YLo=o("MBartForSequenceClassification"),KLo=o(" (mBART model)"),ZLo=l(),O8=a("li"),Ace=a("strong"),exo=o("megatron-bert"),oxo=o(" \u2014 "),LD=a("a"),rxo=o("MegatronBertForSequenceClassification"),txo=o(" (MegatronBert model)"),axo=l(),V8=a("li"),yce=a("strong"),nxo=o("mobilebert"),sxo=o(" \u2014 "),xD=a("a"),lxo=o("MobileBertForSequenceClassification"),ixo=o(" (MobileBERT model)"),dxo=l(),X8=a("li"),Lce=a("strong"),cxo=o("mpnet"),fxo=o(" \u2014 "),$D=a("a"),mxo=o("MPNetForSequenceClassification"),gxo=o(" (MPNet model)"),hxo=l(),z8=a("li"),xce=a("strong"),pxo=o("nystromformer"),uxo=o(" \u2014 "),kD=a("a"),_xo=o("NystromformerForSequenceClassification"),bxo=o(" (Nystromformer model)"),vxo=l(),Q8=a("li"),$ce=a("strong"),Fxo=o("openai-gpt"),Txo=o(" \u2014 "),SD=a("a"),Mxo=o("OpenAIGPTForSequenceClassification"),Exo=o(" (OpenAI GPT model)"),Cxo=l(),W8=a("li"),kce=a("strong"),wxo=o("perceiver"),Axo=o(" \u2014 "),RD=a("a"),yxo=o("PerceiverForSequenceClassification"),Lxo=o(" (Perceiver model)"),xxo=l(),H8=a("li"),Sce=a("strong"),$xo=o("plbart"),kxo=o(" \u2014 "),BD=a("a"),Sxo=o("PLBartForSequenceClassification"),Rxo=o(" (PLBart model)"),Bxo=l(),U8=a("li"),Rce=a("strong"),Pxo=o("qdqbert"),Ixo=o(" \u2014 "),PD=a("a"),qxo=o("QDQBertForSequenceClassification"),Nxo=o(" (QDQBert model)"),jxo=l(),J8=a("li"),Bce=a("strong"),Dxo=o("reformer"),Gxo=o(" \u2014 "),ID=a("a"),Oxo=o("ReformerForSequenceClassification"),Vxo=o(" (Reformer model)"),Xxo=l(),Y8=a("li"),Pce=a("strong"),zxo=o("rembert"),Qxo=o(" \u2014 "),qD=a("a"),Wxo=o("RemBertForSequenceClassification"),Hxo=o(" (RemBERT model)"),Uxo=l(),K8=a("li"),Ice=a("strong"),Jxo=o("roberta"),Yxo=o(" \u2014 "),ND=a("a"),Kxo=o("RobertaForSequenceClassification"),Zxo=o(" (RoBERTa model)"),e9o=l(),Z8=a("li"),qce=a("strong"),o9o=o("roformer"),r9o=o(" \u2014 "),jD=a("a"),t9o=o("RoFormerForSequenceClassification"),a9o=o(" (RoFormer model)"),n9o=l(),eb=a("li"),Nce=a("strong"),s9o=o("squeezebert"),l9o=o(" \u2014 "),DD=a("a"),i9o=o("SqueezeBertForSequenceClassification"),d9o=o(" (SqueezeBERT model)"),c9o=l(),ob=a("li"),jce=a("strong"),f9o=o("tapas"),m9o=o(" \u2014 "),GD=a("a"),g9o=o("TapasForSequenceClassification"),h9o=o(" (TAPAS model)"),p9o=l(),rb=a("li"),Dce=a("strong"),u9o=o("tapex"),_9o=o(" \u2014 "),OD=a("a"),b9o=o("BartForSequenceClassification"),v9o=o(" (TAPEX model)"),F9o=l(),tb=a("li"),Gce=a("strong"),T9o=o("transfo-xl"),M9o=o(" \u2014 "),VD=a("a"),E9o=o("TransfoXLForSequenceClassification"),C9o=o(" (Transformer-XL model)"),w9o=l(),ab=a("li"),Oce=a("strong"),A9o=o("xlm"),y9o=o(" \u2014 "),XD=a("a"),L9o=o("XLMForSequenceClassification"),x9o=o(" (XLM model)"),$9o=l(),nb=a("li"),Vce=a("strong"),k9o=o("xlm-roberta"),S9o=o(" \u2014 "),zD=a("a"),R9o=o("XLMRobertaForSequenceClassification"),B9o=o(" (XLM-RoBERTa model)"),P9o=l(),sb=a("li"),Xce=a("strong"),I9o=o("xlm-roberta-xl"),q9o=o(" \u2014 "),QD=a("a"),N9o=o("XLMRobertaXLForSequenceClassification"),j9o=o(" (XLM-RoBERTa-XL model)"),D9o=l(),lb=a("li"),zce=a("strong"),G9o=o("xlnet"),O9o=o(" \u2014 "),WD=a("a"),V9o=o("XLNetForSequenceClassification"),X9o=o(" (XLNet model)"),z9o=l(),ib=a("li"),Qce=a("strong"),Q9o=o("yoso"),W9o=o(" \u2014 "),HD=a("a"),H9o=o("YosoForSequenceClassification"),U9o=o(" (YOSO model)"),J9o=l(),db=a("p"),Y9o=o("The model is set in evaluation mode by default using "),Wce=a("code"),K9o=o("model.eval()"),Z9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hce=a("code"),e$o=o("model.train()"),o$o=l(),F(cb.$$.fragment),HPe=l(),ji=a("h2"),fb=a("a"),Uce=a("span"),F(HA.$$.fragment),r$o=l(),Jce=a("span"),t$o=o("AutoModelForMultipleChoice"),UPe=l(),Bo=a("div"),F(UA.$$.fragment),a$o=l(),Di=a("p"),n$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),UD=a("a"),s$o=o("from_pretrained()"),l$o=o(" class method or the "),JD=a("a"),i$o=o("from_config()"),d$o=o(` class
method.`),c$o=l(),JA=a("p"),f$o=o("This class cannot be instantiated directly using "),Yce=a("code"),m$o=o("__init__()"),g$o=o(" (throws an error)."),h$o=l(),lt=a("div"),F(YA.$$.fragment),p$o=l(),Kce=a("p"),u$o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_$o=l(),Gi=a("p"),b$o=o(`Note:
Loading a model from its configuration file does `),Zce=a("strong"),v$o=o("not"),F$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YD=a("a"),T$o=o("from_pretrained()"),M$o=o(" to load the model weights."),E$o=l(),F(mb.$$.fragment),C$o=l(),eo=a("div"),F(KA.$$.fragment),w$o=l(),efe=a("p"),A$o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),y$o=l(),Sa=a("p"),L$o=o("The model class to instantiate is selected based on the "),ofe=a("code"),x$o=o("model_type"),$$o=o(` property of the config object (either
passed as an argument or loaded from `),rfe=a("code"),k$o=o("pretrained_model_name_or_path"),S$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tfe=a("code"),R$o=o("pretrained_model_name_or_path"),B$o=o(":"),P$o=l(),Y=a("ul"),gb=a("li"),afe=a("strong"),I$o=o("albert"),q$o=o(" \u2014 "),KD=a("a"),N$o=o("AlbertForMultipleChoice"),j$o=o(" (ALBERT model)"),D$o=l(),hb=a("li"),nfe=a("strong"),G$o=o("bert"),O$o=o(" \u2014 "),ZD=a("a"),V$o=o("BertForMultipleChoice"),X$o=o(" (BERT model)"),z$o=l(),pb=a("li"),sfe=a("strong"),Q$o=o("big_bird"),W$o=o(" \u2014 "),eG=a("a"),H$o=o("BigBirdForMultipleChoice"),U$o=o(" (BigBird model)"),J$o=l(),ub=a("li"),lfe=a("strong"),Y$o=o("camembert"),K$o=o(" \u2014 "),oG=a("a"),Z$o=o("CamembertForMultipleChoice"),eko=o(" (CamemBERT model)"),oko=l(),_b=a("li"),ife=a("strong"),rko=o("canine"),tko=o(" \u2014 "),rG=a("a"),ako=o("CanineForMultipleChoice"),nko=o(" (Canine model)"),sko=l(),bb=a("li"),dfe=a("strong"),lko=o("convbert"),iko=o(" \u2014 "),tG=a("a"),dko=o("ConvBertForMultipleChoice"),cko=o(" (ConvBERT model)"),fko=l(),vb=a("li"),cfe=a("strong"),mko=o("data2vec-text"),gko=o(" \u2014 "),aG=a("a"),hko=o("Data2VecTextForMultipleChoice"),pko=o(" (Data2VecText model)"),uko=l(),Fb=a("li"),ffe=a("strong"),_ko=o("deberta-v2"),bko=o(" \u2014 "),nG=a("a"),vko=o("DebertaV2ForMultipleChoice"),Fko=o(" (DeBERTa-v2 model)"),Tko=l(),Tb=a("li"),mfe=a("strong"),Mko=o("distilbert"),Eko=o(" \u2014 "),sG=a("a"),Cko=o("DistilBertForMultipleChoice"),wko=o(" (DistilBERT model)"),Ako=l(),Mb=a("li"),gfe=a("strong"),yko=o("electra"),Lko=o(" \u2014 "),lG=a("a"),xko=o("ElectraForMultipleChoice"),$ko=o(" (ELECTRA model)"),kko=l(),Eb=a("li"),hfe=a("strong"),Sko=o("flaubert"),Rko=o(" \u2014 "),iG=a("a"),Bko=o("FlaubertForMultipleChoice"),Pko=o(" (FlauBERT model)"),Iko=l(),Cb=a("li"),pfe=a("strong"),qko=o("fnet"),Nko=o(" \u2014 "),dG=a("a"),jko=o("FNetForMultipleChoice"),Dko=o(" (FNet model)"),Gko=l(),wb=a("li"),ufe=a("strong"),Oko=o("funnel"),Vko=o(" \u2014 "),cG=a("a"),Xko=o("FunnelForMultipleChoice"),zko=o(" (Funnel Transformer model)"),Qko=l(),Ab=a("li"),_fe=a("strong"),Wko=o("ibert"),Hko=o(" \u2014 "),fG=a("a"),Uko=o("IBertForMultipleChoice"),Jko=o(" (I-BERT model)"),Yko=l(),yb=a("li"),bfe=a("strong"),Kko=o("longformer"),Zko=o(" \u2014 "),mG=a("a"),eSo=o("LongformerForMultipleChoice"),oSo=o(" (Longformer model)"),rSo=l(),Lb=a("li"),vfe=a("strong"),tSo=o("megatron-bert"),aSo=o(" \u2014 "),gG=a("a"),nSo=o("MegatronBertForMultipleChoice"),sSo=o(" (MegatronBert model)"),lSo=l(),xb=a("li"),Ffe=a("strong"),iSo=o("mobilebert"),dSo=o(" \u2014 "),hG=a("a"),cSo=o("MobileBertForMultipleChoice"),fSo=o(" (MobileBERT model)"),mSo=l(),$b=a("li"),Tfe=a("strong"),gSo=o("mpnet"),hSo=o(" \u2014 "),pG=a("a"),pSo=o("MPNetForMultipleChoice"),uSo=o(" (MPNet model)"),_So=l(),kb=a("li"),Mfe=a("strong"),bSo=o("nystromformer"),vSo=o(" \u2014 "),uG=a("a"),FSo=o("NystromformerForMultipleChoice"),TSo=o(" (Nystromformer model)"),MSo=l(),Sb=a("li"),Efe=a("strong"),ESo=o("qdqbert"),CSo=o(" \u2014 "),_G=a("a"),wSo=o("QDQBertForMultipleChoice"),ASo=o(" (QDQBert model)"),ySo=l(),Rb=a("li"),Cfe=a("strong"),LSo=o("rembert"),xSo=o(" \u2014 "),bG=a("a"),$So=o("RemBertForMultipleChoice"),kSo=o(" (RemBERT model)"),SSo=l(),Bb=a("li"),wfe=a("strong"),RSo=o("roberta"),BSo=o(" \u2014 "),vG=a("a"),PSo=o("RobertaForMultipleChoice"),ISo=o(" (RoBERTa model)"),qSo=l(),Pb=a("li"),Afe=a("strong"),NSo=o("roformer"),jSo=o(" \u2014 "),FG=a("a"),DSo=o("RoFormerForMultipleChoice"),GSo=o(" (RoFormer model)"),OSo=l(),Ib=a("li"),yfe=a("strong"),VSo=o("squeezebert"),XSo=o(" \u2014 "),TG=a("a"),zSo=o("SqueezeBertForMultipleChoice"),QSo=o(" (SqueezeBERT model)"),WSo=l(),qb=a("li"),Lfe=a("strong"),HSo=o("xlm"),USo=o(" \u2014 "),MG=a("a"),JSo=o("XLMForMultipleChoice"),YSo=o(" (XLM model)"),KSo=l(),Nb=a("li"),xfe=a("strong"),ZSo=o("xlm-roberta"),eRo=o(" \u2014 "),EG=a("a"),oRo=o("XLMRobertaForMultipleChoice"),rRo=o(" (XLM-RoBERTa model)"),tRo=l(),jb=a("li"),$fe=a("strong"),aRo=o("xlm-roberta-xl"),nRo=o(" \u2014 "),CG=a("a"),sRo=o("XLMRobertaXLForMultipleChoice"),lRo=o(" (XLM-RoBERTa-XL model)"),iRo=l(),Db=a("li"),kfe=a("strong"),dRo=o("xlnet"),cRo=o(" \u2014 "),wG=a("a"),fRo=o("XLNetForMultipleChoice"),mRo=o(" (XLNet model)"),gRo=l(),Gb=a("li"),Sfe=a("strong"),hRo=o("yoso"),pRo=o(" \u2014 "),AG=a("a"),uRo=o("YosoForMultipleChoice"),_Ro=o(" (YOSO model)"),bRo=l(),Ob=a("p"),vRo=o("The model is set in evaluation mode by default using "),Rfe=a("code"),FRo=o("model.eval()"),TRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bfe=a("code"),MRo=o("model.train()"),ERo=l(),F(Vb.$$.fragment),JPe=l(),Oi=a("h2"),Xb=a("a"),Pfe=a("span"),F(ZA.$$.fragment),CRo=l(),Ife=a("span"),wRo=o("AutoModelForNextSentencePrediction"),YPe=l(),Po=a("div"),F(e6.$$.fragment),ARo=l(),Vi=a("p"),yRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),yG=a("a"),LRo=o("from_pretrained()"),xRo=o(" class method or the "),LG=a("a"),$Ro=o("from_config()"),kRo=o(` class
method.`),SRo=l(),o6=a("p"),RRo=o("This class cannot be instantiated directly using "),qfe=a("code"),BRo=o("__init__()"),PRo=o(" (throws an error)."),IRo=l(),it=a("div"),F(r6.$$.fragment),qRo=l(),Nfe=a("p"),NRo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jRo=l(),Xi=a("p"),DRo=o(`Note:
Loading a model from its configuration file does `),jfe=a("strong"),GRo=o("not"),ORo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=a("a"),VRo=o("from_pretrained()"),XRo=o(" to load the model weights."),zRo=l(),F(zb.$$.fragment),QRo=l(),oo=a("div"),F(t6.$$.fragment),WRo=l(),Dfe=a("p"),HRo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),URo=l(),Ra=a("p"),JRo=o("The model class to instantiate is selected based on the "),Gfe=a("code"),YRo=o("model_type"),KRo=o(` property of the config object (either
passed as an argument or loaded from `),Ofe=a("code"),ZRo=o("pretrained_model_name_or_path"),eBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vfe=a("code"),oBo=o("pretrained_model_name_or_path"),rBo=o(":"),tBo=l(),Yr=a("ul"),Qb=a("li"),Xfe=a("strong"),aBo=o("bert"),nBo=o(" \u2014 "),$G=a("a"),sBo=o("BertForNextSentencePrediction"),lBo=o(" (BERT model)"),iBo=l(),Wb=a("li"),zfe=a("strong"),dBo=o("fnet"),cBo=o(" \u2014 "),kG=a("a"),fBo=o("FNetForNextSentencePrediction"),mBo=o(" (FNet model)"),gBo=l(),Hb=a("li"),Qfe=a("strong"),hBo=o("megatron-bert"),pBo=o(" \u2014 "),SG=a("a"),uBo=o("MegatronBertForNextSentencePrediction"),_Bo=o(" (MegatronBert model)"),bBo=l(),Ub=a("li"),Wfe=a("strong"),vBo=o("mobilebert"),FBo=o(" \u2014 "),RG=a("a"),TBo=o("MobileBertForNextSentencePrediction"),MBo=o(" (MobileBERT model)"),EBo=l(),Jb=a("li"),Hfe=a("strong"),CBo=o("qdqbert"),wBo=o(" \u2014 "),BG=a("a"),ABo=o("QDQBertForNextSentencePrediction"),yBo=o(" (QDQBert model)"),LBo=l(),Yb=a("p"),xBo=o("The model is set in evaluation mode by default using "),Ufe=a("code"),$Bo=o("model.eval()"),kBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jfe=a("code"),SBo=o("model.train()"),RBo=l(),F(Kb.$$.fragment),KPe=l(),zi=a("h2"),Zb=a("a"),Yfe=a("span"),F(a6.$$.fragment),BBo=l(),Kfe=a("span"),PBo=o("AutoModelForTokenClassification"),ZPe=l(),Io=a("div"),F(n6.$$.fragment),IBo=l(),Qi=a("p"),qBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),PG=a("a"),NBo=o("from_pretrained()"),jBo=o(" class method or the "),IG=a("a"),DBo=o("from_config()"),GBo=o(` class
method.`),OBo=l(),s6=a("p"),VBo=o("This class cannot be instantiated directly using "),Zfe=a("code"),XBo=o("__init__()"),zBo=o(" (throws an error)."),QBo=l(),dt=a("div"),F(l6.$$.fragment),WBo=l(),eme=a("p"),HBo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UBo=l(),Wi=a("p"),JBo=o(`Note:
Loading a model from its configuration file does `),ome=a("strong"),YBo=o("not"),KBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=a("a"),ZBo=o("from_pretrained()"),ePo=o(" to load the model weights."),oPo=l(),F(e2.$$.fragment),rPo=l(),ro=a("div"),F(i6.$$.fragment),tPo=l(),rme=a("p"),aPo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nPo=l(),Ba=a("p"),sPo=o("The model class to instantiate is selected based on the "),tme=a("code"),lPo=o("model_type"),iPo=o(` property of the config object (either
passed as an argument or loaded from `),ame=a("code"),dPo=o("pretrained_model_name_or_path"),cPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nme=a("code"),fPo=o("pretrained_model_name_or_path"),mPo=o(":"),gPo=l(),U=a("ul"),o2=a("li"),sme=a("strong"),hPo=o("albert"),pPo=o(" \u2014 "),NG=a("a"),uPo=o("AlbertForTokenClassification"),_Po=o(" (ALBERT model)"),bPo=l(),r2=a("li"),lme=a("strong"),vPo=o("bert"),FPo=o(" \u2014 "),jG=a("a"),TPo=o("BertForTokenClassification"),MPo=o(" (BERT model)"),EPo=l(),t2=a("li"),ime=a("strong"),CPo=o("big_bird"),wPo=o(" \u2014 "),DG=a("a"),APo=o("BigBirdForTokenClassification"),yPo=o(" (BigBird model)"),LPo=l(),a2=a("li"),dme=a("strong"),xPo=o("camembert"),$Po=o(" \u2014 "),GG=a("a"),kPo=o("CamembertForTokenClassification"),SPo=o(" (CamemBERT model)"),RPo=l(),n2=a("li"),cme=a("strong"),BPo=o("canine"),PPo=o(" \u2014 "),OG=a("a"),IPo=o("CanineForTokenClassification"),qPo=o(" (Canine model)"),NPo=l(),s2=a("li"),fme=a("strong"),jPo=o("convbert"),DPo=o(" \u2014 "),VG=a("a"),GPo=o("ConvBertForTokenClassification"),OPo=o(" (ConvBERT model)"),VPo=l(),l2=a("li"),mme=a("strong"),XPo=o("data2vec-text"),zPo=o(" \u2014 "),XG=a("a"),QPo=o("Data2VecTextForTokenClassification"),WPo=o(" (Data2VecText model)"),HPo=l(),i2=a("li"),gme=a("strong"),UPo=o("deberta"),JPo=o(" \u2014 "),zG=a("a"),YPo=o("DebertaForTokenClassification"),KPo=o(" (DeBERTa model)"),ZPo=l(),d2=a("li"),hme=a("strong"),eIo=o("deberta-v2"),oIo=o(" \u2014 "),QG=a("a"),rIo=o("DebertaV2ForTokenClassification"),tIo=o(" (DeBERTa-v2 model)"),aIo=l(),c2=a("li"),pme=a("strong"),nIo=o("distilbert"),sIo=o(" \u2014 "),WG=a("a"),lIo=o("DistilBertForTokenClassification"),iIo=o(" (DistilBERT model)"),dIo=l(),f2=a("li"),ume=a("strong"),cIo=o("electra"),fIo=o(" \u2014 "),HG=a("a"),mIo=o("ElectraForTokenClassification"),gIo=o(" (ELECTRA model)"),hIo=l(),m2=a("li"),_me=a("strong"),pIo=o("flaubert"),uIo=o(" \u2014 "),UG=a("a"),_Io=o("FlaubertForTokenClassification"),bIo=o(" (FlauBERT model)"),vIo=l(),g2=a("li"),bme=a("strong"),FIo=o("fnet"),TIo=o(" \u2014 "),JG=a("a"),MIo=o("FNetForTokenClassification"),EIo=o(" (FNet model)"),CIo=l(),h2=a("li"),vme=a("strong"),wIo=o("funnel"),AIo=o(" \u2014 "),YG=a("a"),yIo=o("FunnelForTokenClassification"),LIo=o(" (Funnel Transformer model)"),xIo=l(),p2=a("li"),Fme=a("strong"),$Io=o("gpt2"),kIo=o(" \u2014 "),KG=a("a"),SIo=o("GPT2ForTokenClassification"),RIo=o(" (OpenAI GPT-2 model)"),BIo=l(),u2=a("li"),Tme=a("strong"),PIo=o("ibert"),IIo=o(" \u2014 "),ZG=a("a"),qIo=o("IBertForTokenClassification"),NIo=o(" (I-BERT model)"),jIo=l(),_2=a("li"),Mme=a("strong"),DIo=o("layoutlm"),GIo=o(" \u2014 "),eO=a("a"),OIo=o("LayoutLMForTokenClassification"),VIo=o(" (LayoutLM model)"),XIo=l(),b2=a("li"),Eme=a("strong"),zIo=o("layoutlmv2"),QIo=o(" \u2014 "),oO=a("a"),WIo=o("LayoutLMv2ForTokenClassification"),HIo=o(" (LayoutLMv2 model)"),UIo=l(),v2=a("li"),Cme=a("strong"),JIo=o("longformer"),YIo=o(" \u2014 "),rO=a("a"),KIo=o("LongformerForTokenClassification"),ZIo=o(" (Longformer model)"),eqo=l(),F2=a("li"),wme=a("strong"),oqo=o("megatron-bert"),rqo=o(" \u2014 "),tO=a("a"),tqo=o("MegatronBertForTokenClassification"),aqo=o(" (MegatronBert model)"),nqo=l(),T2=a("li"),Ame=a("strong"),sqo=o("mobilebert"),lqo=o(" \u2014 "),aO=a("a"),iqo=o("MobileBertForTokenClassification"),dqo=o(" (MobileBERT model)"),cqo=l(),M2=a("li"),yme=a("strong"),fqo=o("mpnet"),mqo=o(" \u2014 "),nO=a("a"),gqo=o("MPNetForTokenClassification"),hqo=o(" (MPNet model)"),pqo=l(),E2=a("li"),Lme=a("strong"),uqo=o("nystromformer"),_qo=o(" \u2014 "),sO=a("a"),bqo=o("NystromformerForTokenClassification"),vqo=o(" (Nystromformer model)"),Fqo=l(),C2=a("li"),xme=a("strong"),Tqo=o("qdqbert"),Mqo=o(" \u2014 "),lO=a("a"),Eqo=o("QDQBertForTokenClassification"),Cqo=o(" (QDQBert model)"),wqo=l(),w2=a("li"),$me=a("strong"),Aqo=o("rembert"),yqo=o(" \u2014 "),iO=a("a"),Lqo=o("RemBertForTokenClassification"),xqo=o(" (RemBERT model)"),$qo=l(),A2=a("li"),kme=a("strong"),kqo=o("roberta"),Sqo=o(" \u2014 "),dO=a("a"),Rqo=o("RobertaForTokenClassification"),Bqo=o(" (RoBERTa model)"),Pqo=l(),y2=a("li"),Sme=a("strong"),Iqo=o("roformer"),qqo=o(" \u2014 "),cO=a("a"),Nqo=o("RoFormerForTokenClassification"),jqo=o(" (RoFormer model)"),Dqo=l(),L2=a("li"),Rme=a("strong"),Gqo=o("squeezebert"),Oqo=o(" \u2014 "),fO=a("a"),Vqo=o("SqueezeBertForTokenClassification"),Xqo=o(" (SqueezeBERT model)"),zqo=l(),x2=a("li"),Bme=a("strong"),Qqo=o("xlm"),Wqo=o(" \u2014 "),mO=a("a"),Hqo=o("XLMForTokenClassification"),Uqo=o(" (XLM model)"),Jqo=l(),$2=a("li"),Pme=a("strong"),Yqo=o("xlm-roberta"),Kqo=o(" \u2014 "),gO=a("a"),Zqo=o("XLMRobertaForTokenClassification"),eNo=o(" (XLM-RoBERTa model)"),oNo=l(),k2=a("li"),Ime=a("strong"),rNo=o("xlm-roberta-xl"),tNo=o(" \u2014 "),hO=a("a"),aNo=o("XLMRobertaXLForTokenClassification"),nNo=o(" (XLM-RoBERTa-XL model)"),sNo=l(),S2=a("li"),qme=a("strong"),lNo=o("xlnet"),iNo=o(" \u2014 "),pO=a("a"),dNo=o("XLNetForTokenClassification"),cNo=o(" (XLNet model)"),fNo=l(),R2=a("li"),Nme=a("strong"),mNo=o("yoso"),gNo=o(" \u2014 "),uO=a("a"),hNo=o("YosoForTokenClassification"),pNo=o(" (YOSO model)"),uNo=l(),B2=a("p"),_No=o("The model is set in evaluation mode by default using "),jme=a("code"),bNo=o("model.eval()"),vNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=a("code"),FNo=o("model.train()"),TNo=l(),F(P2.$$.fragment),eIe=l(),Hi=a("h2"),I2=a("a"),Gme=a("span"),F(d6.$$.fragment),MNo=l(),Ome=a("span"),ENo=o("AutoModelForQuestionAnswering"),oIe=l(),qo=a("div"),F(c6.$$.fragment),CNo=l(),Ui=a("p"),wNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_O=a("a"),ANo=o("from_pretrained()"),yNo=o(" class method or the "),bO=a("a"),LNo=o("from_config()"),xNo=o(` class
method.`),$No=l(),f6=a("p"),kNo=o("This class cannot be instantiated directly using "),Vme=a("code"),SNo=o("__init__()"),RNo=o(" (throws an error)."),BNo=l(),ct=a("div"),F(m6.$$.fragment),PNo=l(),Xme=a("p"),INo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),qNo=l(),Ji=a("p"),NNo=o(`Note:
Loading a model from its configuration file does `),zme=a("strong"),jNo=o("not"),DNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=a("a"),GNo=o("from_pretrained()"),ONo=o(" to load the model weights."),VNo=l(),F(q2.$$.fragment),XNo=l(),to=a("div"),F(g6.$$.fragment),zNo=l(),Qme=a("p"),QNo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WNo=l(),Pa=a("p"),HNo=o("The model class to instantiate is selected based on the "),Wme=a("code"),UNo=o("model_type"),JNo=o(` property of the config object (either
passed as an argument or loaded from `),Hme=a("code"),YNo=o("pretrained_model_name_or_path"),KNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=a("code"),ZNo=o("pretrained_model_name_or_path"),ejo=o(":"),ojo=l(),O=a("ul"),N2=a("li"),Jme=a("strong"),rjo=o("albert"),tjo=o(" \u2014 "),FO=a("a"),ajo=o("AlbertForQuestionAnswering"),njo=o(" (ALBERT model)"),sjo=l(),j2=a("li"),Yme=a("strong"),ljo=o("bart"),ijo=o(" \u2014 "),TO=a("a"),djo=o("BartForQuestionAnswering"),cjo=o(" (BART model)"),fjo=l(),D2=a("li"),Kme=a("strong"),mjo=o("bert"),gjo=o(" \u2014 "),MO=a("a"),hjo=o("BertForQuestionAnswering"),pjo=o(" (BERT model)"),ujo=l(),G2=a("li"),Zme=a("strong"),_jo=o("big_bird"),bjo=o(" \u2014 "),EO=a("a"),vjo=o("BigBirdForQuestionAnswering"),Fjo=o(" (BigBird model)"),Tjo=l(),O2=a("li"),ege=a("strong"),Mjo=o("bigbird_pegasus"),Ejo=o(" \u2014 "),CO=a("a"),Cjo=o("BigBirdPegasusForQuestionAnswering"),wjo=o(" (BigBirdPegasus model)"),Ajo=l(),V2=a("li"),oge=a("strong"),yjo=o("camembert"),Ljo=o(" \u2014 "),wO=a("a"),xjo=o("CamembertForQuestionAnswering"),$jo=o(" (CamemBERT model)"),kjo=l(),X2=a("li"),rge=a("strong"),Sjo=o("canine"),Rjo=o(" \u2014 "),AO=a("a"),Bjo=o("CanineForQuestionAnswering"),Pjo=o(" (Canine model)"),Ijo=l(),z2=a("li"),tge=a("strong"),qjo=o("convbert"),Njo=o(" \u2014 "),yO=a("a"),jjo=o("ConvBertForQuestionAnswering"),Djo=o(" (ConvBERT model)"),Gjo=l(),Q2=a("li"),age=a("strong"),Ojo=o("data2vec-text"),Vjo=o(" \u2014 "),LO=a("a"),Xjo=o("Data2VecTextForQuestionAnswering"),zjo=o(" (Data2VecText model)"),Qjo=l(),W2=a("li"),nge=a("strong"),Wjo=o("deberta"),Hjo=o(" \u2014 "),xO=a("a"),Ujo=o("DebertaForQuestionAnswering"),Jjo=o(" (DeBERTa model)"),Yjo=l(),H2=a("li"),sge=a("strong"),Kjo=o("deberta-v2"),Zjo=o(" \u2014 "),$O=a("a"),eDo=o("DebertaV2ForQuestionAnswering"),oDo=o(" (DeBERTa-v2 model)"),rDo=l(),U2=a("li"),lge=a("strong"),tDo=o("distilbert"),aDo=o(" \u2014 "),kO=a("a"),nDo=o("DistilBertForQuestionAnswering"),sDo=o(" (DistilBERT model)"),lDo=l(),J2=a("li"),ige=a("strong"),iDo=o("electra"),dDo=o(" \u2014 "),SO=a("a"),cDo=o("ElectraForQuestionAnswering"),fDo=o(" (ELECTRA model)"),mDo=l(),Y2=a("li"),dge=a("strong"),gDo=o("flaubert"),hDo=o(" \u2014 "),RO=a("a"),pDo=o("FlaubertForQuestionAnsweringSimple"),uDo=o(" (FlauBERT model)"),_Do=l(),K2=a("li"),cge=a("strong"),bDo=o("fnet"),vDo=o(" \u2014 "),BO=a("a"),FDo=o("FNetForQuestionAnswering"),TDo=o(" (FNet model)"),MDo=l(),Z2=a("li"),fge=a("strong"),EDo=o("funnel"),CDo=o(" \u2014 "),PO=a("a"),wDo=o("FunnelForQuestionAnswering"),ADo=o(" (Funnel Transformer model)"),yDo=l(),ev=a("li"),mge=a("strong"),LDo=o("gptj"),xDo=o(" \u2014 "),IO=a("a"),$Do=o("GPTJForQuestionAnswering"),kDo=o(" (GPT-J model)"),SDo=l(),ov=a("li"),gge=a("strong"),RDo=o("ibert"),BDo=o(" \u2014 "),qO=a("a"),PDo=o("IBertForQuestionAnswering"),IDo=o(" (I-BERT model)"),qDo=l(),rv=a("li"),hge=a("strong"),NDo=o("layoutlmv2"),jDo=o(" \u2014 "),NO=a("a"),DDo=o("LayoutLMv2ForQuestionAnswering"),GDo=o(" (LayoutLMv2 model)"),ODo=l(),tv=a("li"),pge=a("strong"),VDo=o("led"),XDo=o(" \u2014 "),jO=a("a"),zDo=o("LEDForQuestionAnswering"),QDo=o(" (LED model)"),WDo=l(),av=a("li"),uge=a("strong"),HDo=o("longformer"),UDo=o(" \u2014 "),DO=a("a"),JDo=o("LongformerForQuestionAnswering"),YDo=o(" (Longformer model)"),KDo=l(),nv=a("li"),_ge=a("strong"),ZDo=o("lxmert"),eGo=o(" \u2014 "),GO=a("a"),oGo=o("LxmertForQuestionAnswering"),rGo=o(" (LXMERT model)"),tGo=l(),sv=a("li"),bge=a("strong"),aGo=o("mbart"),nGo=o(" \u2014 "),OO=a("a"),sGo=o("MBartForQuestionAnswering"),lGo=o(" (mBART model)"),iGo=l(),lv=a("li"),vge=a("strong"),dGo=o("megatron-bert"),cGo=o(" \u2014 "),VO=a("a"),fGo=o("MegatronBertForQuestionAnswering"),mGo=o(" (MegatronBert model)"),gGo=l(),iv=a("li"),Fge=a("strong"),hGo=o("mobilebert"),pGo=o(" \u2014 "),XO=a("a"),uGo=o("MobileBertForQuestionAnswering"),_Go=o(" (MobileBERT model)"),bGo=l(),dv=a("li"),Tge=a("strong"),vGo=o("mpnet"),FGo=o(" \u2014 "),zO=a("a"),TGo=o("MPNetForQuestionAnswering"),MGo=o(" (MPNet model)"),EGo=l(),cv=a("li"),Mge=a("strong"),CGo=o("nystromformer"),wGo=o(" \u2014 "),QO=a("a"),AGo=o("NystromformerForQuestionAnswering"),yGo=o(" (Nystromformer model)"),LGo=l(),fv=a("li"),Ege=a("strong"),xGo=o("qdqbert"),$Go=o(" \u2014 "),WO=a("a"),kGo=o("QDQBertForQuestionAnswering"),SGo=o(" (QDQBert model)"),RGo=l(),mv=a("li"),Cge=a("strong"),BGo=o("reformer"),PGo=o(" \u2014 "),HO=a("a"),IGo=o("ReformerForQuestionAnswering"),qGo=o(" (Reformer model)"),NGo=l(),gv=a("li"),wge=a("strong"),jGo=o("rembert"),DGo=o(" \u2014 "),UO=a("a"),GGo=o("RemBertForQuestionAnswering"),OGo=o(" (RemBERT model)"),VGo=l(),hv=a("li"),Age=a("strong"),XGo=o("roberta"),zGo=o(" \u2014 "),JO=a("a"),QGo=o("RobertaForQuestionAnswering"),WGo=o(" (RoBERTa model)"),HGo=l(),pv=a("li"),yge=a("strong"),UGo=o("roformer"),JGo=o(" \u2014 "),YO=a("a"),YGo=o("RoFormerForQuestionAnswering"),KGo=o(" (RoFormer model)"),ZGo=l(),uv=a("li"),Lge=a("strong"),eOo=o("splinter"),oOo=o(" \u2014 "),KO=a("a"),rOo=o("SplinterForQuestionAnswering"),tOo=o(" (Splinter model)"),aOo=l(),_v=a("li"),xge=a("strong"),nOo=o("squeezebert"),sOo=o(" \u2014 "),ZO=a("a"),lOo=o("SqueezeBertForQuestionAnswering"),iOo=o(" (SqueezeBERT model)"),dOo=l(),bv=a("li"),$ge=a("strong"),cOo=o("xlm"),fOo=o(" \u2014 "),eV=a("a"),mOo=o("XLMForQuestionAnsweringSimple"),gOo=o(" (XLM model)"),hOo=l(),vv=a("li"),kge=a("strong"),pOo=o("xlm-roberta"),uOo=o(" \u2014 "),oV=a("a"),_Oo=o("XLMRobertaForQuestionAnswering"),bOo=o(" (XLM-RoBERTa model)"),vOo=l(),Fv=a("li"),Sge=a("strong"),FOo=o("xlm-roberta-xl"),TOo=o(" \u2014 "),rV=a("a"),MOo=o("XLMRobertaXLForQuestionAnswering"),EOo=o(" (XLM-RoBERTa-XL model)"),COo=l(),Tv=a("li"),Rge=a("strong"),wOo=o("xlnet"),AOo=o(" \u2014 "),tV=a("a"),yOo=o("XLNetForQuestionAnsweringSimple"),LOo=o(" (XLNet model)"),xOo=l(),Mv=a("li"),Bge=a("strong"),$Oo=o("yoso"),kOo=o(" \u2014 "),aV=a("a"),SOo=o("YosoForQuestionAnswering"),ROo=o(" (YOSO model)"),BOo=l(),Ev=a("p"),POo=o("The model is set in evaluation mode by default using "),Pge=a("code"),IOo=o("model.eval()"),qOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=a("code"),NOo=o("model.train()"),jOo=l(),F(Cv.$$.fragment),rIe=l(),Yi=a("h2"),wv=a("a"),qge=a("span"),F(h6.$$.fragment),DOo=l(),Nge=a("span"),GOo=o("AutoModelForTableQuestionAnswering"),tIe=l(),No=a("div"),F(p6.$$.fragment),OOo=l(),Ki=a("p"),VOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nV=a("a"),XOo=o("from_pretrained()"),zOo=o(" class method or the "),sV=a("a"),QOo=o("from_config()"),WOo=o(` class
method.`),HOo=l(),u6=a("p"),UOo=o("This class cannot be instantiated directly using "),jge=a("code"),JOo=o("__init__()"),YOo=o(" (throws an error)."),KOo=l(),ft=a("div"),F(_6.$$.fragment),ZOo=l(),Dge=a("p"),eVo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),oVo=l(),Zi=a("p"),rVo=o(`Note:
Loading a model from its configuration file does `),Gge=a("strong"),tVo=o("not"),aVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lV=a("a"),nVo=o("from_pretrained()"),sVo=o(" to load the model weights."),lVo=l(),F(Av.$$.fragment),iVo=l(),ao=a("div"),F(b6.$$.fragment),dVo=l(),Oge=a("p"),cVo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fVo=l(),Ia=a("p"),mVo=o("The model class to instantiate is selected based on the "),Vge=a("code"),gVo=o("model_type"),hVo=o(` property of the config object (either
passed as an argument or loaded from `),Xge=a("code"),pVo=o("pretrained_model_name_or_path"),uVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=a("code"),_Vo=o("pretrained_model_name_or_path"),bVo=o(":"),vVo=l(),Qge=a("ul"),yv=a("li"),Wge=a("strong"),FVo=o("tapas"),TVo=o(" \u2014 "),iV=a("a"),MVo=o("TapasForQuestionAnswering"),EVo=o(" (TAPAS model)"),CVo=l(),Lv=a("p"),wVo=o("The model is set in evaluation mode by default using "),Hge=a("code"),AVo=o("model.eval()"),yVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uge=a("code"),LVo=o("model.train()"),xVo=l(),F(xv.$$.fragment),aIe=l(),ed=a("h2"),$v=a("a"),Jge=a("span"),F(v6.$$.fragment),$Vo=l(),Yge=a("span"),kVo=o("AutoModelForImageClassification"),nIe=l(),jo=a("div"),F(F6.$$.fragment),SVo=l(),od=a("p"),RVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dV=a("a"),BVo=o("from_pretrained()"),PVo=o(" class method or the "),cV=a("a"),IVo=o("from_config()"),qVo=o(` class
method.`),NVo=l(),T6=a("p"),jVo=o("This class cannot be instantiated directly using "),Kge=a("code"),DVo=o("__init__()"),GVo=o(" (throws an error)."),OVo=l(),mt=a("div"),F(M6.$$.fragment),VVo=l(),Zge=a("p"),XVo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zVo=l(),rd=a("p"),QVo=o(`Note:
Loading a model from its configuration file does `),ehe=a("strong"),WVo=o("not"),HVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fV=a("a"),UVo=o("from_pretrained()"),JVo=o(" to load the model weights."),YVo=l(),F(kv.$$.fragment),KVo=l(),no=a("div"),F(E6.$$.fragment),ZVo=l(),ohe=a("p"),eXo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),oXo=l(),qa=a("p"),rXo=o("The model class to instantiate is selected based on the "),rhe=a("code"),tXo=o("model_type"),aXo=o(` property of the config object (either
passed as an argument or loaded from `),the=a("code"),nXo=o("pretrained_model_name_or_path"),sXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ahe=a("code"),lXo=o("pretrained_model_name_or_path"),iXo=o(":"),dXo=l(),ve=a("ul"),Sv=a("li"),nhe=a("strong"),cXo=o("beit"),fXo=o(" \u2014 "),mV=a("a"),mXo=o("BeitForImageClassification"),gXo=o(" (BEiT model)"),hXo=l(),Rv=a("li"),she=a("strong"),pXo=o("convnext"),uXo=o(" \u2014 "),gV=a("a"),_Xo=o("ConvNextForImageClassification"),bXo=o(" (ConvNext model)"),vXo=l(),Bv=a("li"),lhe=a("strong"),FXo=o("data2vec-vision"),TXo=o(" \u2014 "),hV=a("a"),MXo=o("Data2VecVisionForImageClassification"),EXo=o(" (Data2VecVision model)"),CXo=l(),Rs=a("li"),ihe=a("strong"),wXo=o("deit"),AXo=o(" \u2014 "),pV=a("a"),yXo=o("DeiTForImageClassification"),LXo=o(" or "),uV=a("a"),xXo=o("DeiTForImageClassificationWithTeacher"),$Xo=o(" (DeiT model)"),kXo=l(),Pv=a("li"),dhe=a("strong"),SXo=o("imagegpt"),RXo=o(" \u2014 "),_V=a("a"),BXo=o("ImageGPTForImageClassification"),PXo=o(" (ImageGPT model)"),IXo=l(),gt=a("li"),che=a("strong"),qXo=o("perceiver"),NXo=o(" \u2014 "),bV=a("a"),jXo=o("PerceiverForImageClassificationLearned"),DXo=o(" or "),vV=a("a"),GXo=o("PerceiverForImageClassificationFourier"),OXo=o(" or "),FV=a("a"),VXo=o("PerceiverForImageClassificationConvProcessing"),XXo=o(" (Perceiver model)"),zXo=l(),Iv=a("li"),fhe=a("strong"),QXo=o("poolformer"),WXo=o(" \u2014 "),TV=a("a"),HXo=o("PoolFormerForImageClassification"),UXo=o(" (PoolFormer model)"),JXo=l(),qv=a("li"),mhe=a("strong"),YXo=o("regnet"),KXo=o(" \u2014 "),MV=a("a"),ZXo=o("RegNetForImageClassification"),ezo=o(" (RegNet model)"),ozo=l(),Nv=a("li"),ghe=a("strong"),rzo=o("resnet"),tzo=o(" \u2014 "),EV=a("a"),azo=o("ResNetForImageClassification"),nzo=o(" (ResNet model)"),szo=l(),jv=a("li"),hhe=a("strong"),lzo=o("segformer"),izo=o(" \u2014 "),CV=a("a"),dzo=o("SegformerForImageClassification"),czo=o(" (SegFormer model)"),fzo=l(),Dv=a("li"),phe=a("strong"),mzo=o("swin"),gzo=o(" \u2014 "),wV=a("a"),hzo=o("SwinForImageClassification"),pzo=o(" (Swin model)"),uzo=l(),Gv=a("li"),uhe=a("strong"),_zo=o("van"),bzo=o(" \u2014 "),AV=a("a"),vzo=o("VanForImageClassification"),Fzo=o(" (VAN model)"),Tzo=l(),Ov=a("li"),_he=a("strong"),Mzo=o("vit"),Ezo=o(" \u2014 "),yV=a("a"),Czo=o("ViTForImageClassification"),wzo=o(" (ViT model)"),Azo=l(),Vv=a("p"),yzo=o("The model is set in evaluation mode by default using "),bhe=a("code"),Lzo=o("model.eval()"),xzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vhe=a("code"),$zo=o("model.train()"),kzo=l(),F(Xv.$$.fragment),sIe=l(),td=a("h2"),zv=a("a"),Fhe=a("span"),F(C6.$$.fragment),Szo=l(),The=a("span"),Rzo=o("AutoModelForVision2Seq"),lIe=l(),Do=a("div"),F(w6.$$.fragment),Bzo=l(),ad=a("p"),Pzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LV=a("a"),Izo=o("from_pretrained()"),qzo=o(" class method or the "),xV=a("a"),Nzo=o("from_config()"),jzo=o(` class
method.`),Dzo=l(),A6=a("p"),Gzo=o("This class cannot be instantiated directly using "),Mhe=a("code"),Ozo=o("__init__()"),Vzo=o(" (throws an error)."),Xzo=l(),ht=a("div"),F(y6.$$.fragment),zzo=l(),Ehe=a("p"),Qzo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Wzo=l(),nd=a("p"),Hzo=o(`Note:
Loading a model from its configuration file does `),Che=a("strong"),Uzo=o("not"),Jzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$V=a("a"),Yzo=o("from_pretrained()"),Kzo=o(" to load the model weights."),Zzo=l(),F(Qv.$$.fragment),eQo=l(),so=a("div"),F(L6.$$.fragment),oQo=l(),whe=a("p"),rQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tQo=l(),Na=a("p"),aQo=o("The model class to instantiate is selected based on the "),Ahe=a("code"),nQo=o("model_type"),sQo=o(` property of the config object (either
passed as an argument or loaded from `),yhe=a("code"),lQo=o("pretrained_model_name_or_path"),iQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lhe=a("code"),dQo=o("pretrained_model_name_or_path"),cQo=o(":"),fQo=l(),xhe=a("ul"),Wv=a("li"),$he=a("strong"),mQo=o("vision-encoder-decoder"),gQo=o(" \u2014 "),kV=a("a"),hQo=o("VisionEncoderDecoderModel"),pQo=o(" (Vision Encoder decoder model)"),uQo=l(),Hv=a("p"),_Qo=o("The model is set in evaluation mode by default using "),khe=a("code"),bQo=o("model.eval()"),vQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),She=a("code"),FQo=o("model.train()"),TQo=l(),F(Uv.$$.fragment),iIe=l(),sd=a("h2"),Jv=a("a"),Rhe=a("span"),F(x6.$$.fragment),MQo=l(),Bhe=a("span"),EQo=o("AutoModelForAudioClassification"),dIe=l(),Go=a("div"),F($6.$$.fragment),CQo=l(),ld=a("p"),wQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),SV=a("a"),AQo=o("from_pretrained()"),yQo=o(" class method or the "),RV=a("a"),LQo=o("from_config()"),xQo=o(` class
method.`),$Qo=l(),k6=a("p"),kQo=o("This class cannot be instantiated directly using "),Phe=a("code"),SQo=o("__init__()"),RQo=o(" (throws an error)."),BQo=l(),pt=a("div"),F(S6.$$.fragment),PQo=l(),Ihe=a("p"),IQo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),qQo=l(),id=a("p"),NQo=o(`Note:
Loading a model from its configuration file does `),qhe=a("strong"),jQo=o("not"),DQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=a("a"),GQo=o("from_pretrained()"),OQo=o(" to load the model weights."),VQo=l(),F(Yv.$$.fragment),XQo=l(),lo=a("div"),F(R6.$$.fragment),zQo=l(),Nhe=a("p"),QQo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),WQo=l(),ja=a("p"),HQo=o("The model class to instantiate is selected based on the "),jhe=a("code"),UQo=o("model_type"),JQo=o(` property of the config object (either
passed as an argument or loaded from `),Dhe=a("code"),YQo=o("pretrained_model_name_or_path"),KQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=a("code"),ZQo=o("pretrained_model_name_or_path"),eWo=o(":"),oWo=l(),Ne=a("ul"),Kv=a("li"),Ohe=a("strong"),rWo=o("data2vec-audio"),tWo=o(" \u2014 "),PV=a("a"),aWo=o("Data2VecAudioForSequenceClassification"),nWo=o(" (Data2VecAudio model)"),sWo=l(),Zv=a("li"),Vhe=a("strong"),lWo=o("hubert"),iWo=o(" \u2014 "),IV=a("a"),dWo=o("HubertForSequenceClassification"),cWo=o(" (Hubert model)"),fWo=l(),eF=a("li"),Xhe=a("strong"),mWo=o("sew"),gWo=o(" \u2014 "),qV=a("a"),hWo=o("SEWForSequenceClassification"),pWo=o(" (SEW model)"),uWo=l(),oF=a("li"),zhe=a("strong"),_Wo=o("sew-d"),bWo=o(" \u2014 "),NV=a("a"),vWo=o("SEWDForSequenceClassification"),FWo=o(" (SEW-D model)"),TWo=l(),rF=a("li"),Qhe=a("strong"),MWo=o("unispeech"),EWo=o(" \u2014 "),jV=a("a"),CWo=o("UniSpeechForSequenceClassification"),wWo=o(" (UniSpeech model)"),AWo=l(),tF=a("li"),Whe=a("strong"),yWo=o("unispeech-sat"),LWo=o(" \u2014 "),DV=a("a"),xWo=o("UniSpeechSatForSequenceClassification"),$Wo=o(" (UniSpeechSat model)"),kWo=l(),aF=a("li"),Hhe=a("strong"),SWo=o("wav2vec2"),RWo=o(" \u2014 "),GV=a("a"),BWo=o("Wav2Vec2ForSequenceClassification"),PWo=o(" (Wav2Vec2 model)"),IWo=l(),nF=a("li"),Uhe=a("strong"),qWo=o("wavlm"),NWo=o(" \u2014 "),OV=a("a"),jWo=o("WavLMForSequenceClassification"),DWo=o(" (WavLM model)"),GWo=l(),sF=a("p"),OWo=o("The model is set in evaluation mode by default using "),Jhe=a("code"),VWo=o("model.eval()"),XWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=a("code"),zWo=o("model.train()"),QWo=l(),F(lF.$$.fragment),cIe=l(),dd=a("h2"),iF=a("a"),Khe=a("span"),F(B6.$$.fragment),WWo=l(),Zhe=a("span"),HWo=o("AutoModelForAudioFrameClassification"),fIe=l(),Oo=a("div"),F(P6.$$.fragment),UWo=l(),cd=a("p"),JWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),VV=a("a"),YWo=o("from_pretrained()"),KWo=o(" class method or the "),XV=a("a"),ZWo=o("from_config()"),eHo=o(` class
method.`),oHo=l(),I6=a("p"),rHo=o("This class cannot be instantiated directly using "),epe=a("code"),tHo=o("__init__()"),aHo=o(" (throws an error)."),nHo=l(),ut=a("div"),F(q6.$$.fragment),sHo=l(),ope=a("p"),lHo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),iHo=l(),fd=a("p"),dHo=o(`Note:
Loading a model from its configuration file does `),rpe=a("strong"),cHo=o("not"),fHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=a("a"),mHo=o("from_pretrained()"),gHo=o(" to load the model weights."),hHo=l(),F(dF.$$.fragment),pHo=l(),io=a("div"),F(N6.$$.fragment),uHo=l(),tpe=a("p"),_Ho=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),bHo=l(),Da=a("p"),vHo=o("The model class to instantiate is selected based on the "),ape=a("code"),FHo=o("model_type"),THo=o(` property of the config object (either
passed as an argument or loaded from `),npe=a("code"),MHo=o("pretrained_model_name_or_path"),EHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=a("code"),CHo=o("pretrained_model_name_or_path"),wHo=o(":"),AHo=l(),Ga=a("ul"),cF=a("li"),lpe=a("strong"),yHo=o("data2vec-audio"),LHo=o(" \u2014 "),QV=a("a"),xHo=o("Data2VecAudioForAudioFrameClassification"),$Ho=o(" (Data2VecAudio model)"),kHo=l(),fF=a("li"),ipe=a("strong"),SHo=o("unispeech-sat"),RHo=o(" \u2014 "),WV=a("a"),BHo=o("UniSpeechSatForAudioFrameClassification"),PHo=o(" (UniSpeechSat model)"),IHo=l(),mF=a("li"),dpe=a("strong"),qHo=o("wav2vec2"),NHo=o(" \u2014 "),HV=a("a"),jHo=o("Wav2Vec2ForAudioFrameClassification"),DHo=o(" (Wav2Vec2 model)"),GHo=l(),gF=a("li"),cpe=a("strong"),OHo=o("wavlm"),VHo=o(" \u2014 "),UV=a("a"),XHo=o("WavLMForAudioFrameClassification"),zHo=o(" (WavLM model)"),QHo=l(),hF=a("p"),WHo=o("The model is set in evaluation mode by default using "),fpe=a("code"),HHo=o("model.eval()"),UHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=a("code"),JHo=o("model.train()"),YHo=l(),F(pF.$$.fragment),mIe=l(),md=a("h2"),uF=a("a"),gpe=a("span"),F(j6.$$.fragment),KHo=l(),hpe=a("span"),ZHo=o("AutoModelForCTC"),gIe=l(),Vo=a("div"),F(D6.$$.fragment),eUo=l(),gd=a("p"),oUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),JV=a("a"),rUo=o("from_pretrained()"),tUo=o(" class method or the "),YV=a("a"),aUo=o("from_config()"),nUo=o(` class
method.`),sUo=l(),G6=a("p"),lUo=o("This class cannot be instantiated directly using "),ppe=a("code"),iUo=o("__init__()"),dUo=o(" (throws an error)."),cUo=l(),_t=a("div"),F(O6.$$.fragment),fUo=l(),upe=a("p"),mUo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),gUo=l(),hd=a("p"),hUo=o(`Note:
Loading a model from its configuration file does `),_pe=a("strong"),pUo=o("not"),uUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=a("a"),_Uo=o("from_pretrained()"),bUo=o(" to load the model weights."),vUo=l(),F(_F.$$.fragment),FUo=l(),co=a("div"),F(V6.$$.fragment),TUo=l(),bpe=a("p"),MUo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),EUo=l(),Oa=a("p"),CUo=o("The model class to instantiate is selected based on the "),vpe=a("code"),wUo=o("model_type"),AUo=o(` property of the config object (either
passed as an argument or loaded from `),Fpe=a("code"),yUo=o("pretrained_model_name_or_path"),LUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=a("code"),xUo=o("pretrained_model_name_or_path"),$Uo=o(":"),kUo=l(),je=a("ul"),bF=a("li"),Mpe=a("strong"),SUo=o("data2vec-audio"),RUo=o(" \u2014 "),ZV=a("a"),BUo=o("Data2VecAudioForCTC"),PUo=o(" (Data2VecAudio model)"),IUo=l(),vF=a("li"),Epe=a("strong"),qUo=o("hubert"),NUo=o(" \u2014 "),eX=a("a"),jUo=o("HubertForCTC"),DUo=o(" (Hubert model)"),GUo=l(),FF=a("li"),Cpe=a("strong"),OUo=o("sew"),VUo=o(" \u2014 "),oX=a("a"),XUo=o("SEWForCTC"),zUo=o(" (SEW model)"),QUo=l(),TF=a("li"),wpe=a("strong"),WUo=o("sew-d"),HUo=o(" \u2014 "),rX=a("a"),UUo=o("SEWDForCTC"),JUo=o(" (SEW-D model)"),YUo=l(),MF=a("li"),Ape=a("strong"),KUo=o("unispeech"),ZUo=o(" \u2014 "),tX=a("a"),eJo=o("UniSpeechForCTC"),oJo=o(" (UniSpeech model)"),rJo=l(),EF=a("li"),ype=a("strong"),tJo=o("unispeech-sat"),aJo=o(" \u2014 "),aX=a("a"),nJo=o("UniSpeechSatForCTC"),sJo=o(" (UniSpeechSat model)"),lJo=l(),CF=a("li"),Lpe=a("strong"),iJo=o("wav2vec2"),dJo=o(" \u2014 "),nX=a("a"),cJo=o("Wav2Vec2ForCTC"),fJo=o(" (Wav2Vec2 model)"),mJo=l(),wF=a("li"),xpe=a("strong"),gJo=o("wavlm"),hJo=o(" \u2014 "),sX=a("a"),pJo=o("WavLMForCTC"),uJo=o(" (WavLM model)"),_Jo=l(),AF=a("p"),bJo=o("The model is set in evaluation mode by default using "),$pe=a("code"),vJo=o("model.eval()"),FJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kpe=a("code"),TJo=o("model.train()"),MJo=l(),F(yF.$$.fragment),hIe=l(),pd=a("h2"),LF=a("a"),Spe=a("span"),F(X6.$$.fragment),EJo=l(),Rpe=a("span"),CJo=o("AutoModelForSpeechSeq2Seq"),pIe=l(),Xo=a("div"),F(z6.$$.fragment),wJo=l(),ud=a("p"),AJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lX=a("a"),yJo=o("from_pretrained()"),LJo=o(" class method or the "),iX=a("a"),xJo=o("from_config()"),$Jo=o(` class
method.`),kJo=l(),Q6=a("p"),SJo=o("This class cannot be instantiated directly using "),Bpe=a("code"),RJo=o("__init__()"),BJo=o(" (throws an error)."),PJo=l(),bt=a("div"),F(W6.$$.fragment),IJo=l(),Ppe=a("p"),qJo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),NJo=l(),_d=a("p"),jJo=o(`Note:
Loading a model from its configuration file does `),Ipe=a("strong"),DJo=o("not"),GJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=a("a"),OJo=o("from_pretrained()"),VJo=o(" to load the model weights."),XJo=l(),F(xF.$$.fragment),zJo=l(),fo=a("div"),F(H6.$$.fragment),QJo=l(),qpe=a("p"),WJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),HJo=l(),Va=a("p"),UJo=o("The model class to instantiate is selected based on the "),Npe=a("code"),JJo=o("model_type"),YJo=o(` property of the config object (either
passed as an argument or loaded from `),jpe=a("code"),KJo=o("pretrained_model_name_or_path"),ZJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=a("code"),eYo=o("pretrained_model_name_or_path"),oYo=o(":"),rYo=l(),U6=a("ul"),$F=a("li"),Gpe=a("strong"),tYo=o("speech-encoder-decoder"),aYo=o(" \u2014 "),cX=a("a"),nYo=o("SpeechEncoderDecoderModel"),sYo=o(" (Speech Encoder decoder model)"),lYo=l(),kF=a("li"),Ope=a("strong"),iYo=o("speech_to_text"),dYo=o(" \u2014 "),fX=a("a"),cYo=o("Speech2TextForConditionalGeneration"),fYo=o(" (Speech2Text model)"),mYo=l(),SF=a("p"),gYo=o("The model is set in evaluation mode by default using "),Vpe=a("code"),hYo=o("model.eval()"),pYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=a("code"),uYo=o("model.train()"),_Yo=l(),F(RF.$$.fragment),uIe=l(),bd=a("h2"),BF=a("a"),zpe=a("span"),F(J6.$$.fragment),bYo=l(),Qpe=a("span"),vYo=o("AutoModelForAudioXVector"),_Ie=l(),zo=a("div"),F(Y6.$$.fragment),FYo=l(),vd=a("p"),TYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),mX=a("a"),MYo=o("from_pretrained()"),EYo=o(" class method or the "),gX=a("a"),CYo=o("from_config()"),wYo=o(` class
method.`),AYo=l(),K6=a("p"),yYo=o("This class cannot be instantiated directly using "),Wpe=a("code"),LYo=o("__init__()"),xYo=o(" (throws an error)."),$Yo=l(),vt=a("div"),F(Z6.$$.fragment),kYo=l(),Hpe=a("p"),SYo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),RYo=l(),Fd=a("p"),BYo=o(`Note:
Loading a model from its configuration file does `),Upe=a("strong"),PYo=o("not"),IYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=a("a"),qYo=o("from_pretrained()"),NYo=o(" to load the model weights."),jYo=l(),F(PF.$$.fragment),DYo=l(),mo=a("div"),F(ey.$$.fragment),GYo=l(),Jpe=a("p"),OYo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),VYo=l(),Xa=a("p"),XYo=o("The model class to instantiate is selected based on the "),Ype=a("code"),zYo=o("model_type"),QYo=o(` property of the config object (either
passed as an argument or loaded from `),Kpe=a("code"),WYo=o("pretrained_model_name_or_path"),HYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=a("code"),UYo=o("pretrained_model_name_or_path"),JYo=o(":"),YYo=l(),za=a("ul"),IF=a("li"),eue=a("strong"),KYo=o("data2vec-audio"),ZYo=o(" \u2014 "),pX=a("a"),eKo=o("Data2VecAudioForXVector"),oKo=o(" (Data2VecAudio model)"),rKo=l(),qF=a("li"),oue=a("strong"),tKo=o("unispeech-sat"),aKo=o(" \u2014 "),uX=a("a"),nKo=o("UniSpeechSatForXVector"),sKo=o(" (UniSpeechSat model)"),lKo=l(),NF=a("li"),rue=a("strong"),iKo=o("wav2vec2"),dKo=o(" \u2014 "),_X=a("a"),cKo=o("Wav2Vec2ForXVector"),fKo=o(" (Wav2Vec2 model)"),mKo=l(),jF=a("li"),tue=a("strong"),gKo=o("wavlm"),hKo=o(" \u2014 "),bX=a("a"),pKo=o("WavLMForXVector"),uKo=o(" (WavLM model)"),_Ko=l(),DF=a("p"),bKo=o("The model is set in evaluation mode by default using "),aue=a("code"),vKo=o("model.eval()"),FKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nue=a("code"),TKo=o("model.train()"),MKo=l(),F(GF.$$.fragment),bIe=l(),Td=a("h2"),OF=a("a"),sue=a("span"),F(oy.$$.fragment),EKo=l(),lue=a("span"),CKo=o("AutoModelForMaskedImageModeling"),vIe=l(),Qo=a("div"),F(ry.$$.fragment),wKo=l(),Md=a("p"),AKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),vX=a("a"),yKo=o("from_pretrained()"),LKo=o(" class method or the "),FX=a("a"),xKo=o("from_config()"),$Ko=o(` class
method.`),kKo=l(),ty=a("p"),SKo=o("This class cannot be instantiated directly using "),iue=a("code"),RKo=o("__init__()"),BKo=o(" (throws an error)."),PKo=l(),Ft=a("div"),F(ay.$$.fragment),IKo=l(),due=a("p"),qKo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),NKo=l(),Ed=a("p"),jKo=o(`Note:
Loading a model from its configuration file does `),cue=a("strong"),DKo=o("not"),GKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TX=a("a"),OKo=o("from_pretrained()"),VKo=o(" to load the model weights."),XKo=l(),F(VF.$$.fragment),zKo=l(),go=a("div"),F(ny.$$.fragment),QKo=l(),fue=a("p"),WKo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),HKo=l(),Qa=a("p"),UKo=o("The model class to instantiate is selected based on the "),mue=a("code"),JKo=o("model_type"),YKo=o(` property of the config object (either
passed as an argument or loaded from `),gue=a("code"),KKo=o("pretrained_model_name_or_path"),ZKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hue=a("code"),eZo=o("pretrained_model_name_or_path"),oZo=o(":"),rZo=l(),Cd=a("ul"),XF=a("li"),pue=a("strong"),tZo=o("deit"),aZo=o(" \u2014 "),MX=a("a"),nZo=o("DeiTForMaskedImageModeling"),sZo=o(" (DeiT model)"),lZo=l(),zF=a("li"),uue=a("strong"),iZo=o("swin"),dZo=o(" \u2014 "),EX=a("a"),cZo=o("SwinForMaskedImageModeling"),fZo=o(" (Swin model)"),mZo=l(),QF=a("li"),_ue=a("strong"),gZo=o("vit"),hZo=o(" \u2014 "),CX=a("a"),pZo=o("ViTForMaskedImageModeling"),uZo=o(" (ViT model)"),_Zo=l(),WF=a("p"),bZo=o("The model is set in evaluation mode by default using "),bue=a("code"),vZo=o("model.eval()"),FZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=a("code"),TZo=o("model.train()"),MZo=l(),F(HF.$$.fragment),FIe=l(),wd=a("h2"),UF=a("a"),Fue=a("span"),F(sy.$$.fragment),EZo=l(),Tue=a("span"),CZo=o("AutoModelForObjectDetection"),TIe=l(),Wo=a("div"),F(ly.$$.fragment),wZo=l(),Ad=a("p"),AZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),wX=a("a"),yZo=o("from_pretrained()"),LZo=o(" class method or the "),AX=a("a"),xZo=o("from_config()"),$Zo=o(` class
method.`),kZo=l(),iy=a("p"),SZo=o("This class cannot be instantiated directly using "),Mue=a("code"),RZo=o("__init__()"),BZo=o(" (throws an error)."),PZo=l(),Tt=a("div"),F(dy.$$.fragment),IZo=l(),Eue=a("p"),qZo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),NZo=l(),yd=a("p"),jZo=o(`Note:
Loading a model from its configuration file does `),Cue=a("strong"),DZo=o("not"),GZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=a("a"),OZo=o("from_pretrained()"),VZo=o(" to load the model weights."),XZo=l(),F(JF.$$.fragment),zZo=l(),ho=a("div"),F(cy.$$.fragment),QZo=l(),wue=a("p"),WZo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),HZo=l(),Wa=a("p"),UZo=o("The model class to instantiate is selected based on the "),Aue=a("code"),JZo=o("model_type"),YZo=o(` property of the config object (either
passed as an argument or loaded from `),yue=a("code"),KZo=o("pretrained_model_name_or_path"),ZZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=a("code"),eer=o("pretrained_model_name_or_path"),oer=o(":"),rer=l(),fy=a("ul"),YF=a("li"),xue=a("strong"),ter=o("detr"),aer=o(" \u2014 "),LX=a("a"),ner=o("DetrForObjectDetection"),ser=o(" (DETR model)"),ler=l(),KF=a("li"),$ue=a("strong"),ier=o("yolos"),der=o(" \u2014 "),xX=a("a"),cer=o("YolosForObjectDetection"),fer=o(" (YOLOS model)"),mer=l(),ZF=a("p"),ger=o("The model is set in evaluation mode by default using "),kue=a("code"),her=o("model.eval()"),per=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=a("code"),uer=o("model.train()"),_er=l(),F(e0.$$.fragment),MIe=l(),Ld=a("h2"),o0=a("a"),Rue=a("span"),F(my.$$.fragment),ber=l(),Bue=a("span"),ver=o("AutoModelForImageSegmentation"),EIe=l(),Ho=a("div"),F(gy.$$.fragment),Fer=l(),xd=a("p"),Ter=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),$X=a("a"),Mer=o("from_pretrained()"),Eer=o(" class method or the "),kX=a("a"),Cer=o("from_config()"),wer=o(` class
method.`),Aer=l(),hy=a("p"),yer=o("This class cannot be instantiated directly using "),Pue=a("code"),Ler=o("__init__()"),xer=o(" (throws an error)."),$er=l(),Mt=a("div"),F(py.$$.fragment),ker=l(),Iue=a("p"),Ser=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Rer=l(),$d=a("p"),Ber=o(`Note:
Loading a model from its configuration file does `),que=a("strong"),Per=o("not"),Ier=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),qer=o("from_pretrained()"),Ner=o(" to load the model weights."),jer=l(),F(r0.$$.fragment),Der=l(),po=a("div"),F(uy.$$.fragment),Ger=l(),Nue=a("p"),Oer=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Ver=l(),Ha=a("p"),Xer=o("The model class to instantiate is selected based on the "),jue=a("code"),zer=o("model_type"),Qer=o(` property of the config object (either
passed as an argument or loaded from `),Due=a("code"),Wer=o("pretrained_model_name_or_path"),Her=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=a("code"),Uer=o("pretrained_model_name_or_path"),Jer=o(":"),Yer=l(),Oue=a("ul"),t0=a("li"),Vue=a("strong"),Ker=o("detr"),Zer=o(" \u2014 "),RX=a("a"),eor=o("DetrForSegmentation"),oor=o(" (DETR model)"),ror=l(),a0=a("p"),tor=o("The model is set in evaluation mode by default using "),Xue=a("code"),aor=o("model.eval()"),nor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=a("code"),sor=o("model.train()"),lor=l(),F(n0.$$.fragment),CIe=l(),kd=a("h2"),s0=a("a"),Que=a("span"),F(_y.$$.fragment),ior=l(),Wue=a("span"),dor=o("AutoModelForSemanticSegmentation"),wIe=l(),Uo=a("div"),F(by.$$.fragment),cor=l(),Sd=a("p"),mor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),BX=a("a"),gor=o("from_pretrained()"),hor=o(" class method or the "),PX=a("a"),por=o("from_config()"),uor=o(` class
method.`),_or=l(),vy=a("p"),bor=o("This class cannot be instantiated directly using "),Hue=a("code"),vor=o("__init__()"),For=o(" (throws an error)."),Tor=l(),Et=a("div"),F(Fy.$$.fragment),Mor=l(),Uue=a("p"),Eor=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Cor=l(),Rd=a("p"),wor=o(`Note:
Loading a model from its configuration file does `),Jue=a("strong"),Aor=o("not"),yor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=a("a"),Lor=o("from_pretrained()"),xor=o(" to load the model weights."),$or=l(),F(l0.$$.fragment),kor=l(),uo=a("div"),F(Ty.$$.fragment),Sor=l(),Yue=a("p"),Ror=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Bor=l(),Ua=a("p"),Por=o("The model class to instantiate is selected based on the "),Kue=a("code"),Ior=o("model_type"),qor=o(` property of the config object (either
passed as an argument or loaded from `),Zue=a("code"),Nor=o("pretrained_model_name_or_path"),jor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=a("code"),Dor=o("pretrained_model_name_or_path"),Gor=o(":"),Oor=l(),Ja=a("ul"),i0=a("li"),o_e=a("strong"),Vor=o("beit"),Xor=o(" \u2014 "),qX=a("a"),zor=o("BeitForSemanticSegmentation"),Qor=o(" (BEiT model)"),Wor=l(),d0=a("li"),r_e=a("strong"),Hor=o("data2vec-vision"),Uor=o(" \u2014 "),NX=a("a"),Jor=o("Data2VecVisionForSemanticSegmentation"),Yor=o(" (Data2VecVision model)"),Kor=l(),c0=a("li"),t_e=a("strong"),Zor=o("dpt"),err=o(" \u2014 "),jX=a("a"),orr=o("DPTForSemanticSegmentation"),rrr=o(" (DPT model)"),trr=l(),f0=a("li"),a_e=a("strong"),arr=o("segformer"),nrr=o(" \u2014 "),DX=a("a"),srr=o("SegformerForSemanticSegmentation"),lrr=o(" (SegFormer model)"),irr=l(),m0=a("p"),drr=o("The model is set in evaluation mode by default using "),n_e=a("code"),crr=o("model.eval()"),frr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s_e=a("code"),mrr=o("model.train()"),grr=l(),F(g0.$$.fragment),AIe=l(),Bd=a("h2"),h0=a("a"),l_e=a("span"),F(My.$$.fragment),hrr=l(),i_e=a("span"),prr=o("AutoModelForInstanceSegmentation"),yIe=l(),Jo=a("div"),F(Ey.$$.fragment),urr=l(),Pd=a("p"),_rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),GX=a("a"),brr=o("from_pretrained()"),vrr=o(" class method or the "),OX=a("a"),Frr=o("from_config()"),Trr=o(` class
method.`),Mrr=l(),Cy=a("p"),Err=o("This class cannot be instantiated directly using "),d_e=a("code"),Crr=o("__init__()"),wrr=o(" (throws an error)."),Arr=l(),Ct=a("div"),F(wy.$$.fragment),yrr=l(),c_e=a("p"),Lrr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),xrr=l(),Id=a("p"),$rr=o(`Note:
Loading a model from its configuration file does `),f_e=a("strong"),krr=o("not"),Srr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VX=a("a"),Rrr=o("from_pretrained()"),Brr=o(" to load the model weights."),Prr=l(),F(p0.$$.fragment),Irr=l(),_o=a("div"),F(Ay.$$.fragment),qrr=l(),m_e=a("p"),Nrr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),jrr=l(),Ya=a("p"),Drr=o("The model class to instantiate is selected based on the "),g_e=a("code"),Grr=o("model_type"),Orr=o(` property of the config object (either
passed as an argument or loaded from `),h_e=a("code"),Vrr=o("pretrained_model_name_or_path"),Xrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=a("code"),zrr=o("pretrained_model_name_or_path"),Qrr=o(":"),Wrr=l(),u_e=a("ul"),u0=a("li"),__e=a("strong"),Hrr=o("maskformer"),Urr=o(" \u2014 "),XX=a("a"),Jrr=o("MaskFormerForInstanceSegmentation"),Yrr=o(" (MaskFormer model)"),Krr=l(),_0=a("p"),Zrr=o("The model is set in evaluation mode by default using "),b_e=a("code"),etr=o("model.eval()"),otr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v_e=a("code"),rtr=o("model.train()"),ttr=l(),F(b0.$$.fragment),LIe=l(),qd=a("h2"),v0=a("a"),F_e=a("span"),F(yy.$$.fragment),atr=l(),T_e=a("span"),ntr=o("TFAutoModel"),xIe=l(),Yo=a("div"),F(Ly.$$.fragment),str=l(),Nd=a("p"),ltr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zX=a("a"),itr=o("from_pretrained()"),dtr=o(" class method or the "),QX=a("a"),ctr=o("from_config()"),ftr=o(` class
method.`),mtr=l(),xy=a("p"),gtr=o("This class cannot be instantiated directly using "),M_e=a("code"),htr=o("__init__()"),ptr=o(" (throws an error)."),utr=l(),wt=a("div"),F($y.$$.fragment),_tr=l(),E_e=a("p"),btr=o("Instantiates one of the base model classes of the library from a configuration."),vtr=l(),jd=a("p"),Ftr=o(`Note:
Loading a model from its configuration file does `),C_e=a("strong"),Ttr=o("not"),Mtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),Etr=o("from_pretrained()"),Ctr=o(" to load the model weights."),wtr=l(),F(F0.$$.fragment),Atr=l(),wr=a("div"),F(ky.$$.fragment),ytr=l(),w_e=a("p"),Ltr=o("Instantiate one of the base model classes of the library from a pretrained model."),xtr=l(),Ka=a("p"),$tr=o("The model class to instantiate is selected based on the "),A_e=a("code"),ktr=o("model_type"),Str=o(` property of the config object (either
passed as an argument or loaded from `),y_e=a("code"),Rtr=o("pretrained_model_name_or_path"),Btr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L_e=a("code"),Ptr=o("pretrained_model_name_or_path"),Itr=o(":"),qtr=l(),j=a("ul"),T0=a("li"),x_e=a("strong"),Ntr=o("albert"),jtr=o(" \u2014 "),HX=a("a"),Dtr=o("TFAlbertModel"),Gtr=o(" (ALBERT model)"),Otr=l(),M0=a("li"),$_e=a("strong"),Vtr=o("bart"),Xtr=o(" \u2014 "),UX=a("a"),ztr=o("TFBartModel"),Qtr=o(" (BART model)"),Wtr=l(),E0=a("li"),k_e=a("strong"),Htr=o("bert"),Utr=o(" \u2014 "),JX=a("a"),Jtr=o("TFBertModel"),Ytr=o(" (BERT model)"),Ktr=l(),C0=a("li"),S_e=a("strong"),Ztr=o("blenderbot"),ear=o(" \u2014 "),YX=a("a"),oar=o("TFBlenderbotModel"),rar=o(" (Blenderbot model)"),tar=l(),w0=a("li"),R_e=a("strong"),aar=o("blenderbot-small"),nar=o(" \u2014 "),KX=a("a"),sar=o("TFBlenderbotSmallModel"),lar=o(" (BlenderbotSmall model)"),iar=l(),A0=a("li"),B_e=a("strong"),dar=o("camembert"),car=o(" \u2014 "),ZX=a("a"),far=o("TFCamembertModel"),mar=o(" (CamemBERT model)"),gar=l(),y0=a("li"),P_e=a("strong"),har=o("clip"),par=o(" \u2014 "),ez=a("a"),uar=o("TFCLIPModel"),_ar=o(" (CLIP model)"),bar=l(),L0=a("li"),I_e=a("strong"),Far=o("convbert"),Tar=o(" \u2014 "),oz=a("a"),Mar=o("TFConvBertModel"),Ear=o(" (ConvBERT model)"),Car=l(),x0=a("li"),q_e=a("strong"),war=o("convnext"),Aar=o(" \u2014 "),rz=a("a"),yar=o("TFConvNextModel"),Lar=o(" (ConvNext model)"),xar=l(),$0=a("li"),N_e=a("strong"),$ar=o("ctrl"),kar=o(" \u2014 "),tz=a("a"),Sar=o("TFCTRLModel"),Rar=o(" (CTRL model)"),Bar=l(),k0=a("li"),j_e=a("strong"),Par=o("data2vec-vision"),Iar=o(" \u2014 "),az=a("a"),qar=o("TFData2VecVisionModel"),Nar=o(" (Data2VecVision model)"),jar=l(),S0=a("li"),D_e=a("strong"),Dar=o("deberta"),Gar=o(" \u2014 "),nz=a("a"),Oar=o("TFDebertaModel"),Var=o(" (DeBERTa model)"),Xar=l(),R0=a("li"),G_e=a("strong"),zar=o("deberta-v2"),Qar=o(" \u2014 "),sz=a("a"),War=o("TFDebertaV2Model"),Har=o(" (DeBERTa-v2 model)"),Uar=l(),B0=a("li"),O_e=a("strong"),Jar=o("distilbert"),Yar=o(" \u2014 "),lz=a("a"),Kar=o("TFDistilBertModel"),Zar=o(" (DistilBERT model)"),enr=l(),P0=a("li"),V_e=a("strong"),onr=o("dpr"),rnr=o(" \u2014 "),iz=a("a"),tnr=o("TFDPRQuestionEncoder"),anr=o(" (DPR model)"),nnr=l(),I0=a("li"),X_e=a("strong"),snr=o("electra"),lnr=o(" \u2014 "),dz=a("a"),inr=o("TFElectraModel"),dnr=o(" (ELECTRA model)"),cnr=l(),q0=a("li"),z_e=a("strong"),fnr=o("flaubert"),mnr=o(" \u2014 "),cz=a("a"),gnr=o("TFFlaubertModel"),hnr=o(" (FlauBERT model)"),pnr=l(),Bs=a("li"),Q_e=a("strong"),unr=o("funnel"),_nr=o(" \u2014 "),fz=a("a"),bnr=o("TFFunnelModel"),vnr=o(" or "),mz=a("a"),Fnr=o("TFFunnelBaseModel"),Tnr=o(" (Funnel Transformer model)"),Mnr=l(),N0=a("li"),W_e=a("strong"),Enr=o("gpt2"),Cnr=o(" \u2014 "),gz=a("a"),wnr=o("TFGPT2Model"),Anr=o(" (OpenAI GPT-2 model)"),ynr=l(),j0=a("li"),H_e=a("strong"),Lnr=o("gptj"),xnr=o(" \u2014 "),hz=a("a"),$nr=o("TFGPTJModel"),knr=o(" (GPT-J model)"),Snr=l(),D0=a("li"),U_e=a("strong"),Rnr=o("hubert"),Bnr=o(" \u2014 "),pz=a("a"),Pnr=o("TFHubertModel"),Inr=o(" (Hubert model)"),qnr=l(),G0=a("li"),J_e=a("strong"),Nnr=o("layoutlm"),jnr=o(" \u2014 "),uz=a("a"),Dnr=o("TFLayoutLMModel"),Gnr=o(" (LayoutLM model)"),Onr=l(),O0=a("li"),Y_e=a("strong"),Vnr=o("led"),Xnr=o(" \u2014 "),_z=a("a"),znr=o("TFLEDModel"),Qnr=o(" (LED model)"),Wnr=l(),V0=a("li"),K_e=a("strong"),Hnr=o("longformer"),Unr=o(" \u2014 "),bz=a("a"),Jnr=o("TFLongformerModel"),Ynr=o(" (Longformer model)"),Knr=l(),X0=a("li"),Z_e=a("strong"),Znr=o("lxmert"),esr=o(" \u2014 "),vz=a("a"),osr=o("TFLxmertModel"),rsr=o(" (LXMERT model)"),tsr=l(),z0=a("li"),e1e=a("strong"),asr=o("marian"),nsr=o(" \u2014 "),Fz=a("a"),ssr=o("TFMarianModel"),lsr=o(" (Marian model)"),isr=l(),Q0=a("li"),o1e=a("strong"),dsr=o("mbart"),csr=o(" \u2014 "),Tz=a("a"),fsr=o("TFMBartModel"),msr=o(" (mBART model)"),gsr=l(),W0=a("li"),r1e=a("strong"),hsr=o("mobilebert"),psr=o(" \u2014 "),Mz=a("a"),usr=o("TFMobileBertModel"),_sr=o(" (MobileBERT model)"),bsr=l(),H0=a("li"),t1e=a("strong"),vsr=o("mpnet"),Fsr=o(" \u2014 "),Ez=a("a"),Tsr=o("TFMPNetModel"),Msr=o(" (MPNet model)"),Esr=l(),U0=a("li"),a1e=a("strong"),Csr=o("mt5"),wsr=o(" \u2014 "),Cz=a("a"),Asr=o("TFMT5Model"),ysr=o(" (mT5 model)"),Lsr=l(),J0=a("li"),n1e=a("strong"),xsr=o("openai-gpt"),$sr=o(" \u2014 "),wz=a("a"),ksr=o("TFOpenAIGPTModel"),Ssr=o(" (OpenAI GPT model)"),Rsr=l(),Y0=a("li"),s1e=a("strong"),Bsr=o("pegasus"),Psr=o(" \u2014 "),Az=a("a"),Isr=o("TFPegasusModel"),qsr=o(" (Pegasus model)"),Nsr=l(),K0=a("li"),l1e=a("strong"),jsr=o("rembert"),Dsr=o(" \u2014 "),yz=a("a"),Gsr=o("TFRemBertModel"),Osr=o(" (RemBERT model)"),Vsr=l(),Z0=a("li"),i1e=a("strong"),Xsr=o("roberta"),zsr=o(" \u2014 "),Lz=a("a"),Qsr=o("TFRobertaModel"),Wsr=o(" (RoBERTa model)"),Hsr=l(),eT=a("li"),d1e=a("strong"),Usr=o("roformer"),Jsr=o(" \u2014 "),xz=a("a"),Ysr=o("TFRoFormerModel"),Ksr=o(" (RoFormer model)"),Zsr=l(),oT=a("li"),c1e=a("strong"),elr=o("speech_to_text"),olr=o(" \u2014 "),$z=a("a"),rlr=o("TFSpeech2TextModel"),tlr=o(" (Speech2Text model)"),alr=l(),rT=a("li"),f1e=a("strong"),nlr=o("t5"),slr=o(" \u2014 "),kz=a("a"),llr=o("TFT5Model"),ilr=o(" (T5 model)"),dlr=l(),tT=a("li"),m1e=a("strong"),clr=o("tapas"),flr=o(" \u2014 "),Sz=a("a"),mlr=o("TFTapasModel"),glr=o(" (TAPAS model)"),hlr=l(),aT=a("li"),g1e=a("strong"),plr=o("transfo-xl"),ulr=o(" \u2014 "),Rz=a("a"),_lr=o("TFTransfoXLModel"),blr=o(" (Transformer-XL model)"),vlr=l(),nT=a("li"),h1e=a("strong"),Flr=o("vit"),Tlr=o(" \u2014 "),Bz=a("a"),Mlr=o("TFViTModel"),Elr=o(" (ViT model)"),Clr=l(),sT=a("li"),p1e=a("strong"),wlr=o("vit_mae"),Alr=o(" \u2014 "),Pz=a("a"),ylr=o("TFViTMAEModel"),Llr=o(" (ViTMAE model)"),xlr=l(),lT=a("li"),u1e=a("strong"),$lr=o("wav2vec2"),klr=o(" \u2014 "),Iz=a("a"),Slr=o("TFWav2Vec2Model"),Rlr=o(" (Wav2Vec2 model)"),Blr=l(),iT=a("li"),_1e=a("strong"),Plr=o("xlm"),Ilr=o(" \u2014 "),qz=a("a"),qlr=o("TFXLMModel"),Nlr=o(" (XLM model)"),jlr=l(),dT=a("li"),b1e=a("strong"),Dlr=o("xlm-roberta"),Glr=o(" \u2014 "),Nz=a("a"),Olr=o("TFXLMRobertaModel"),Vlr=o(" (XLM-RoBERTa model)"),Xlr=l(),cT=a("li"),v1e=a("strong"),zlr=o("xlnet"),Qlr=o(" \u2014 "),jz=a("a"),Wlr=o("TFXLNetModel"),Hlr=o(" (XLNet model)"),Ulr=l(),F(fT.$$.fragment),$Ie=l(),Dd=a("h2"),mT=a("a"),F1e=a("span"),F(Sy.$$.fragment),Jlr=l(),T1e=a("span"),Ylr=o("TFAutoModelForPreTraining"),kIe=l(),Ko=a("div"),F(Ry.$$.fragment),Klr=l(),Gd=a("p"),Zlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Dz=a("a"),eir=o("from_pretrained()"),oir=o(" class method or the "),Gz=a("a"),rir=o("from_config()"),tir=o(` class
method.`),air=l(),By=a("p"),nir=o("This class cannot be instantiated directly using "),M1e=a("code"),sir=o("__init__()"),lir=o(" (throws an error)."),iir=l(),At=a("div"),F(Py.$$.fragment),dir=l(),E1e=a("p"),cir=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fir=l(),Od=a("p"),mir=o(`Note:
Loading a model from its configuration file does `),C1e=a("strong"),gir=o("not"),hir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=a("a"),pir=o("from_pretrained()"),uir=o(" to load the model weights."),_ir=l(),F(gT.$$.fragment),bir=l(),Ar=a("div"),F(Iy.$$.fragment),vir=l(),w1e=a("p"),Fir=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Tir=l(),Za=a("p"),Mir=o("The model class to instantiate is selected based on the "),A1e=a("code"),Eir=o("model_type"),Cir=o(` property of the config object (either
passed as an argument or loaded from `),y1e=a("code"),wir=o("pretrained_model_name_or_path"),Air=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=a("code"),yir=o("pretrained_model_name_or_path"),Lir=o(":"),xir=l(),ne=a("ul"),hT=a("li"),x1e=a("strong"),$ir=o("albert"),kir=o(" \u2014 "),Vz=a("a"),Sir=o("TFAlbertForPreTraining"),Rir=o(" (ALBERT model)"),Bir=l(),pT=a("li"),$1e=a("strong"),Pir=o("bart"),Iir=o(" \u2014 "),Xz=a("a"),qir=o("TFBartForConditionalGeneration"),Nir=o(" (BART model)"),jir=l(),uT=a("li"),k1e=a("strong"),Dir=o("bert"),Gir=o(" \u2014 "),zz=a("a"),Oir=o("TFBertForPreTraining"),Vir=o(" (BERT model)"),Xir=l(),_T=a("li"),S1e=a("strong"),zir=o("camembert"),Qir=o(" \u2014 "),Qz=a("a"),Wir=o("TFCamembertForMaskedLM"),Hir=o(" (CamemBERT model)"),Uir=l(),bT=a("li"),R1e=a("strong"),Jir=o("ctrl"),Yir=o(" \u2014 "),Wz=a("a"),Kir=o("TFCTRLLMHeadModel"),Zir=o(" (CTRL model)"),edr=l(),vT=a("li"),B1e=a("strong"),odr=o("distilbert"),rdr=o(" \u2014 "),Hz=a("a"),tdr=o("TFDistilBertForMaskedLM"),adr=o(" (DistilBERT model)"),ndr=l(),FT=a("li"),P1e=a("strong"),sdr=o("electra"),ldr=o(" \u2014 "),Uz=a("a"),idr=o("TFElectraForPreTraining"),ddr=o(" (ELECTRA model)"),cdr=l(),TT=a("li"),I1e=a("strong"),fdr=o("flaubert"),mdr=o(" \u2014 "),Jz=a("a"),gdr=o("TFFlaubertWithLMHeadModel"),hdr=o(" (FlauBERT model)"),pdr=l(),MT=a("li"),q1e=a("strong"),udr=o("funnel"),_dr=o(" \u2014 "),Yz=a("a"),bdr=o("TFFunnelForPreTraining"),vdr=o(" (Funnel Transformer model)"),Fdr=l(),ET=a("li"),N1e=a("strong"),Tdr=o("gpt2"),Mdr=o(" \u2014 "),Kz=a("a"),Edr=o("TFGPT2LMHeadModel"),Cdr=o(" (OpenAI GPT-2 model)"),wdr=l(),CT=a("li"),j1e=a("strong"),Adr=o("layoutlm"),ydr=o(" \u2014 "),Zz=a("a"),Ldr=o("TFLayoutLMForMaskedLM"),xdr=o(" (LayoutLM model)"),$dr=l(),wT=a("li"),D1e=a("strong"),kdr=o("lxmert"),Sdr=o(" \u2014 "),eQ=a("a"),Rdr=o("TFLxmertForPreTraining"),Bdr=o(" (LXMERT model)"),Pdr=l(),AT=a("li"),G1e=a("strong"),Idr=o("mobilebert"),qdr=o(" \u2014 "),oQ=a("a"),Ndr=o("TFMobileBertForPreTraining"),jdr=o(" (MobileBERT model)"),Ddr=l(),yT=a("li"),O1e=a("strong"),Gdr=o("mpnet"),Odr=o(" \u2014 "),rQ=a("a"),Vdr=o("TFMPNetForMaskedLM"),Xdr=o(" (MPNet model)"),zdr=l(),LT=a("li"),V1e=a("strong"),Qdr=o("openai-gpt"),Wdr=o(" \u2014 "),tQ=a("a"),Hdr=o("TFOpenAIGPTLMHeadModel"),Udr=o(" (OpenAI GPT model)"),Jdr=l(),xT=a("li"),X1e=a("strong"),Ydr=o("roberta"),Kdr=o(" \u2014 "),aQ=a("a"),Zdr=o("TFRobertaForMaskedLM"),ecr=o(" (RoBERTa model)"),ocr=l(),$T=a("li"),z1e=a("strong"),rcr=o("t5"),tcr=o(" \u2014 "),nQ=a("a"),acr=o("TFT5ForConditionalGeneration"),ncr=o(" (T5 model)"),scr=l(),kT=a("li"),Q1e=a("strong"),lcr=o("tapas"),icr=o(" \u2014 "),sQ=a("a"),dcr=o("TFTapasForMaskedLM"),ccr=o(" (TAPAS model)"),fcr=l(),ST=a("li"),W1e=a("strong"),mcr=o("transfo-xl"),gcr=o(" \u2014 "),lQ=a("a"),hcr=o("TFTransfoXLLMHeadModel"),pcr=o(" (Transformer-XL model)"),ucr=l(),RT=a("li"),H1e=a("strong"),_cr=o("vit_mae"),bcr=o(" \u2014 "),iQ=a("a"),vcr=o("TFViTMAEForPreTraining"),Fcr=o(" (ViTMAE model)"),Tcr=l(),BT=a("li"),U1e=a("strong"),Mcr=o("xlm"),Ecr=o(" \u2014 "),dQ=a("a"),Ccr=o("TFXLMWithLMHeadModel"),wcr=o(" (XLM model)"),Acr=l(),PT=a("li"),J1e=a("strong"),ycr=o("xlm-roberta"),Lcr=o(" \u2014 "),cQ=a("a"),xcr=o("TFXLMRobertaForMaskedLM"),$cr=o(" (XLM-RoBERTa model)"),kcr=l(),IT=a("li"),Y1e=a("strong"),Scr=o("xlnet"),Rcr=o(" \u2014 "),fQ=a("a"),Bcr=o("TFXLNetLMHeadModel"),Pcr=o(" (XLNet model)"),Icr=l(),F(qT.$$.fragment),SIe=l(),Vd=a("h2"),NT=a("a"),K1e=a("span"),F(qy.$$.fragment),qcr=l(),Z1e=a("span"),Ncr=o("TFAutoModelForCausalLM"),RIe=l(),Zo=a("div"),F(Ny.$$.fragment),jcr=l(),Xd=a("p"),Dcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mQ=a("a"),Gcr=o("from_pretrained()"),Ocr=o(" class method or the "),gQ=a("a"),Vcr=o("from_config()"),Xcr=o(` class
method.`),zcr=l(),jy=a("p"),Qcr=o("This class cannot be instantiated directly using "),e8e=a("code"),Wcr=o("__init__()"),Hcr=o(" (throws an error)."),Ucr=l(),yt=a("div"),F(Dy.$$.fragment),Jcr=l(),o8e=a("p"),Ycr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Kcr=l(),zd=a("p"),Zcr=o(`Note:
Loading a model from its configuration file does `),r8e=a("strong"),efr=o("not"),ofr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hQ=a("a"),rfr=o("from_pretrained()"),tfr=o(" to load the model weights."),afr=l(),F(jT.$$.fragment),nfr=l(),yr=a("div"),F(Gy.$$.fragment),sfr=l(),t8e=a("p"),lfr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ifr=l(),en=a("p"),dfr=o("The model class to instantiate is selected based on the "),a8e=a("code"),cfr=o("model_type"),ffr=o(` property of the config object (either
passed as an argument or loaded from `),n8e=a("code"),mfr=o("pretrained_model_name_or_path"),gfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s8e=a("code"),hfr=o("pretrained_model_name_or_path"),pfr=o(":"),ufr=l(),Te=a("ul"),DT=a("li"),l8e=a("strong"),_fr=o("bert"),bfr=o(" \u2014 "),pQ=a("a"),vfr=o("TFBertLMHeadModel"),Ffr=o(" (BERT model)"),Tfr=l(),GT=a("li"),i8e=a("strong"),Mfr=o("camembert"),Efr=o(" \u2014 "),uQ=a("a"),Cfr=o("TFCamembertForCausalLM"),wfr=o(" (CamemBERT model)"),Afr=l(),OT=a("li"),d8e=a("strong"),yfr=o("ctrl"),Lfr=o(" \u2014 "),_Q=a("a"),xfr=o("TFCTRLLMHeadModel"),$fr=o(" (CTRL model)"),kfr=l(),VT=a("li"),c8e=a("strong"),Sfr=o("gpt2"),Rfr=o(" \u2014 "),bQ=a("a"),Bfr=o("TFGPT2LMHeadModel"),Pfr=o(" (OpenAI GPT-2 model)"),Ifr=l(),XT=a("li"),f8e=a("strong"),qfr=o("gptj"),Nfr=o(" \u2014 "),vQ=a("a"),jfr=o("TFGPTJForCausalLM"),Dfr=o(" (GPT-J model)"),Gfr=l(),zT=a("li"),m8e=a("strong"),Ofr=o("openai-gpt"),Vfr=o(" \u2014 "),FQ=a("a"),Xfr=o("TFOpenAIGPTLMHeadModel"),zfr=o(" (OpenAI GPT model)"),Qfr=l(),QT=a("li"),g8e=a("strong"),Wfr=o("rembert"),Hfr=o(" \u2014 "),TQ=a("a"),Ufr=o("TFRemBertForCausalLM"),Jfr=o(" (RemBERT model)"),Yfr=l(),WT=a("li"),h8e=a("strong"),Kfr=o("roberta"),Zfr=o(" \u2014 "),MQ=a("a"),emr=o("TFRobertaForCausalLM"),omr=o(" (RoBERTa model)"),rmr=l(),HT=a("li"),p8e=a("strong"),tmr=o("roformer"),amr=o(" \u2014 "),EQ=a("a"),nmr=o("TFRoFormerForCausalLM"),smr=o(" (RoFormer model)"),lmr=l(),UT=a("li"),u8e=a("strong"),imr=o("transfo-xl"),dmr=o(" \u2014 "),CQ=a("a"),cmr=o("TFTransfoXLLMHeadModel"),fmr=o(" (Transformer-XL model)"),mmr=l(),JT=a("li"),_8e=a("strong"),gmr=o("xlm"),hmr=o(" \u2014 "),wQ=a("a"),pmr=o("TFXLMWithLMHeadModel"),umr=o(" (XLM model)"),_mr=l(),YT=a("li"),b8e=a("strong"),bmr=o("xlnet"),vmr=o(" \u2014 "),AQ=a("a"),Fmr=o("TFXLNetLMHeadModel"),Tmr=o(" (XLNet model)"),Mmr=l(),F(KT.$$.fragment),BIe=l(),Qd=a("h2"),ZT=a("a"),v8e=a("span"),F(Oy.$$.fragment),Emr=l(),F8e=a("span"),Cmr=o("TFAutoModelForImageClassification"),PIe=l(),er=a("div"),F(Vy.$$.fragment),wmr=l(),Wd=a("p"),Amr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),yQ=a("a"),ymr=o("from_pretrained()"),Lmr=o(" class method or the "),LQ=a("a"),xmr=o("from_config()"),$mr=o(` class
method.`),kmr=l(),Xy=a("p"),Smr=o("This class cannot be instantiated directly using "),T8e=a("code"),Rmr=o("__init__()"),Bmr=o(" (throws an error)."),Pmr=l(),Lt=a("div"),F(zy.$$.fragment),Imr=l(),M8e=a("p"),qmr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Nmr=l(),Hd=a("p"),jmr=o(`Note:
Loading a model from its configuration file does `),E8e=a("strong"),Dmr=o("not"),Gmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=a("a"),Omr=o("from_pretrained()"),Vmr=o(" to load the model weights."),Xmr=l(),F(e7.$$.fragment),zmr=l(),Lr=a("div"),F(Qy.$$.fragment),Qmr=l(),C8e=a("p"),Wmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Hmr=l(),on=a("p"),Umr=o("The model class to instantiate is selected based on the "),w8e=a("code"),Jmr=o("model_type"),Ymr=o(` property of the config object (either
passed as an argument or loaded from `),A8e=a("code"),Kmr=o("pretrained_model_name_or_path"),Zmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y8e=a("code"),egr=o("pretrained_model_name_or_path"),ogr=o(":"),rgr=l(),Ud=a("ul"),o7=a("li"),L8e=a("strong"),tgr=o("convnext"),agr=o(" \u2014 "),$Q=a("a"),ngr=o("TFConvNextForImageClassification"),sgr=o(" (ConvNext model)"),lgr=l(),r7=a("li"),x8e=a("strong"),igr=o("data2vec-vision"),dgr=o(" \u2014 "),kQ=a("a"),cgr=o("TFData2VecVisionForImageClassification"),fgr=o(" (Data2VecVision model)"),mgr=l(),t7=a("li"),$8e=a("strong"),ggr=o("vit"),hgr=o(" \u2014 "),SQ=a("a"),pgr=o("TFViTForImageClassification"),ugr=o(" (ViT model)"),_gr=l(),F(a7.$$.fragment),IIe=l(),Jd=a("h2"),n7=a("a"),k8e=a("span"),F(Wy.$$.fragment),bgr=l(),S8e=a("span"),vgr=o("TFAutoModelForMaskedLM"),qIe=l(),or=a("div"),F(Hy.$$.fragment),Fgr=l(),Yd=a("p"),Tgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RQ=a("a"),Mgr=o("from_pretrained()"),Egr=o(" class method or the "),BQ=a("a"),Cgr=o("from_config()"),wgr=o(` class
method.`),Agr=l(),Uy=a("p"),ygr=o("This class cannot be instantiated directly using "),R8e=a("code"),Lgr=o("__init__()"),xgr=o(" (throws an error)."),$gr=l(),xt=a("div"),F(Jy.$$.fragment),kgr=l(),B8e=a("p"),Sgr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Rgr=l(),Kd=a("p"),Bgr=o(`Note:
Loading a model from its configuration file does `),P8e=a("strong"),Pgr=o("not"),Igr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),qgr=o("from_pretrained()"),Ngr=o(" to load the model weights."),jgr=l(),F(s7.$$.fragment),Dgr=l(),xr=a("div"),F(Yy.$$.fragment),Ggr=l(),I8e=a("p"),Ogr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Vgr=l(),rn=a("p"),Xgr=o("The model class to instantiate is selected based on the "),q8e=a("code"),zgr=o("model_type"),Qgr=o(` property of the config object (either
passed as an argument or loaded from `),N8e=a("code"),Wgr=o("pretrained_model_name_or_path"),Hgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j8e=a("code"),Ugr=o("pretrained_model_name_or_path"),Jgr=o(":"),Ygr=l(),ie=a("ul"),l7=a("li"),D8e=a("strong"),Kgr=o("albert"),Zgr=o(" \u2014 "),IQ=a("a"),ehr=o("TFAlbertForMaskedLM"),ohr=o(" (ALBERT model)"),rhr=l(),i7=a("li"),G8e=a("strong"),thr=o("bert"),ahr=o(" \u2014 "),qQ=a("a"),nhr=o("TFBertForMaskedLM"),shr=o(" (BERT model)"),lhr=l(),d7=a("li"),O8e=a("strong"),ihr=o("camembert"),dhr=o(" \u2014 "),NQ=a("a"),chr=o("TFCamembertForMaskedLM"),fhr=o(" (CamemBERT model)"),mhr=l(),c7=a("li"),V8e=a("strong"),ghr=o("convbert"),hhr=o(" \u2014 "),jQ=a("a"),phr=o("TFConvBertForMaskedLM"),uhr=o(" (ConvBERT model)"),_hr=l(),f7=a("li"),X8e=a("strong"),bhr=o("deberta"),vhr=o(" \u2014 "),DQ=a("a"),Fhr=o("TFDebertaForMaskedLM"),Thr=o(" (DeBERTa model)"),Mhr=l(),m7=a("li"),z8e=a("strong"),Ehr=o("deberta-v2"),Chr=o(" \u2014 "),GQ=a("a"),whr=o("TFDebertaV2ForMaskedLM"),Ahr=o(" (DeBERTa-v2 model)"),yhr=l(),g7=a("li"),Q8e=a("strong"),Lhr=o("distilbert"),xhr=o(" \u2014 "),OQ=a("a"),$hr=o("TFDistilBertForMaskedLM"),khr=o(" (DistilBERT model)"),Shr=l(),h7=a("li"),W8e=a("strong"),Rhr=o("electra"),Bhr=o(" \u2014 "),VQ=a("a"),Phr=o("TFElectraForMaskedLM"),Ihr=o(" (ELECTRA model)"),qhr=l(),p7=a("li"),H8e=a("strong"),Nhr=o("flaubert"),jhr=o(" \u2014 "),XQ=a("a"),Dhr=o("TFFlaubertWithLMHeadModel"),Ghr=o(" (FlauBERT model)"),Ohr=l(),u7=a("li"),U8e=a("strong"),Vhr=o("funnel"),Xhr=o(" \u2014 "),zQ=a("a"),zhr=o("TFFunnelForMaskedLM"),Qhr=o(" (Funnel Transformer model)"),Whr=l(),_7=a("li"),J8e=a("strong"),Hhr=o("layoutlm"),Uhr=o(" \u2014 "),QQ=a("a"),Jhr=o("TFLayoutLMForMaskedLM"),Yhr=o(" (LayoutLM model)"),Khr=l(),b7=a("li"),Y8e=a("strong"),Zhr=o("longformer"),epr=o(" \u2014 "),WQ=a("a"),opr=o("TFLongformerForMaskedLM"),rpr=o(" (Longformer model)"),tpr=l(),v7=a("li"),K8e=a("strong"),apr=o("mobilebert"),npr=o(" \u2014 "),HQ=a("a"),spr=o("TFMobileBertForMaskedLM"),lpr=o(" (MobileBERT model)"),ipr=l(),F7=a("li"),Z8e=a("strong"),dpr=o("mpnet"),cpr=o(" \u2014 "),UQ=a("a"),fpr=o("TFMPNetForMaskedLM"),mpr=o(" (MPNet model)"),gpr=l(),T7=a("li"),ebe=a("strong"),hpr=o("rembert"),ppr=o(" \u2014 "),JQ=a("a"),upr=o("TFRemBertForMaskedLM"),_pr=o(" (RemBERT model)"),bpr=l(),M7=a("li"),obe=a("strong"),vpr=o("roberta"),Fpr=o(" \u2014 "),YQ=a("a"),Tpr=o("TFRobertaForMaskedLM"),Mpr=o(" (RoBERTa model)"),Epr=l(),E7=a("li"),rbe=a("strong"),Cpr=o("roformer"),wpr=o(" \u2014 "),KQ=a("a"),Apr=o("TFRoFormerForMaskedLM"),ypr=o(" (RoFormer model)"),Lpr=l(),C7=a("li"),tbe=a("strong"),xpr=o("tapas"),$pr=o(" \u2014 "),ZQ=a("a"),kpr=o("TFTapasForMaskedLM"),Spr=o(" (TAPAS model)"),Rpr=l(),w7=a("li"),abe=a("strong"),Bpr=o("xlm"),Ppr=o(" \u2014 "),eW=a("a"),Ipr=o("TFXLMWithLMHeadModel"),qpr=o(" (XLM model)"),Npr=l(),A7=a("li"),nbe=a("strong"),jpr=o("xlm-roberta"),Dpr=o(" \u2014 "),oW=a("a"),Gpr=o("TFXLMRobertaForMaskedLM"),Opr=o(" (XLM-RoBERTa model)"),Vpr=l(),F(y7.$$.fragment),NIe=l(),Zd=a("h2"),L7=a("a"),sbe=a("span"),F(Ky.$$.fragment),Xpr=l(),lbe=a("span"),zpr=o("TFAutoModelForSeq2SeqLM"),jIe=l(),rr=a("div"),F(Zy.$$.fragment),Qpr=l(),ec=a("p"),Wpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rW=a("a"),Hpr=o("from_pretrained()"),Upr=o(" class method or the "),tW=a("a"),Jpr=o("from_config()"),Ypr=o(` class
method.`),Kpr=l(),eL=a("p"),Zpr=o("This class cannot be instantiated directly using "),ibe=a("code"),eur=o("__init__()"),our=o(" (throws an error)."),rur=l(),$t=a("div"),F(oL.$$.fragment),tur=l(),dbe=a("p"),aur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nur=l(),oc=a("p"),sur=o(`Note:
Loading a model from its configuration file does `),cbe=a("strong"),lur=o("not"),iur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=a("a"),dur=o("from_pretrained()"),cur=o(" to load the model weights."),fur=l(),F(x7.$$.fragment),mur=l(),$r=a("div"),F(rL.$$.fragment),gur=l(),fbe=a("p"),hur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pur=l(),tn=a("p"),uur=o("The model class to instantiate is selected based on the "),mbe=a("code"),_ur=o("model_type"),bur=o(` property of the config object (either
passed as an argument or loaded from `),gbe=a("code"),vur=o("pretrained_model_name_or_path"),Fur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=a("code"),Tur=o("pretrained_model_name_or_path"),Mur=o(":"),Eur=l(),ye=a("ul"),$7=a("li"),pbe=a("strong"),Cur=o("bart"),wur=o(" \u2014 "),nW=a("a"),Aur=o("TFBartForConditionalGeneration"),yur=o(" (BART model)"),Lur=l(),k7=a("li"),ube=a("strong"),xur=o("blenderbot"),$ur=o(" \u2014 "),sW=a("a"),kur=o("TFBlenderbotForConditionalGeneration"),Sur=o(" (Blenderbot model)"),Rur=l(),S7=a("li"),_be=a("strong"),Bur=o("blenderbot-small"),Pur=o(" \u2014 "),lW=a("a"),Iur=o("TFBlenderbotSmallForConditionalGeneration"),qur=o(" (BlenderbotSmall model)"),Nur=l(),R7=a("li"),bbe=a("strong"),jur=o("encoder-decoder"),Dur=o(" \u2014 "),iW=a("a"),Gur=o("TFEncoderDecoderModel"),Our=o(" (Encoder decoder model)"),Vur=l(),B7=a("li"),vbe=a("strong"),Xur=o("led"),zur=o(" \u2014 "),dW=a("a"),Qur=o("TFLEDForConditionalGeneration"),Wur=o(" (LED model)"),Hur=l(),P7=a("li"),Fbe=a("strong"),Uur=o("marian"),Jur=o(" \u2014 "),cW=a("a"),Yur=o("TFMarianMTModel"),Kur=o(" (Marian model)"),Zur=l(),I7=a("li"),Tbe=a("strong"),e_r=o("mbart"),o_r=o(" \u2014 "),fW=a("a"),r_r=o("TFMBartForConditionalGeneration"),t_r=o(" (mBART model)"),a_r=l(),q7=a("li"),Mbe=a("strong"),n_r=o("mt5"),s_r=o(" \u2014 "),mW=a("a"),l_r=o("TFMT5ForConditionalGeneration"),i_r=o(" (mT5 model)"),d_r=l(),N7=a("li"),Ebe=a("strong"),c_r=o("pegasus"),f_r=o(" \u2014 "),gW=a("a"),m_r=o("TFPegasusForConditionalGeneration"),g_r=o(" (Pegasus model)"),h_r=l(),j7=a("li"),Cbe=a("strong"),p_r=o("t5"),u_r=o(" \u2014 "),hW=a("a"),__r=o("TFT5ForConditionalGeneration"),b_r=o(" (T5 model)"),v_r=l(),F(D7.$$.fragment),DIe=l(),rc=a("h2"),G7=a("a"),wbe=a("span"),F(tL.$$.fragment),F_r=l(),Abe=a("span"),T_r=o("TFAutoModelForSequenceClassification"),GIe=l(),tr=a("div"),F(aL.$$.fragment),M_r=l(),tc=a("p"),E_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pW=a("a"),C_r=o("from_pretrained()"),w_r=o(" class method or the "),uW=a("a"),A_r=o("from_config()"),y_r=o(` class
method.`),L_r=l(),nL=a("p"),x_r=o("This class cannot be instantiated directly using "),ybe=a("code"),$_r=o("__init__()"),k_r=o(" (throws an error)."),S_r=l(),kt=a("div"),F(sL.$$.fragment),R_r=l(),Lbe=a("p"),B_r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),P_r=l(),ac=a("p"),I_r=o(`Note:
Loading a model from its configuration file does `),xbe=a("strong"),q_r=o("not"),N_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=a("a"),j_r=o("from_pretrained()"),D_r=o(" to load the model weights."),G_r=l(),F(O7.$$.fragment),O_r=l(),kr=a("div"),F(lL.$$.fragment),V_r=l(),$be=a("p"),X_r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),z_r=l(),an=a("p"),Q_r=o("The model class to instantiate is selected based on the "),kbe=a("code"),W_r=o("model_type"),H_r=o(` property of the config object (either
passed as an argument or loaded from `),Sbe=a("code"),U_r=o("pretrained_model_name_or_path"),J_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=a("code"),Y_r=o("pretrained_model_name_or_path"),K_r=o(":"),Z_r=l(),Z=a("ul"),V7=a("li"),Bbe=a("strong"),e1r=o("albert"),o1r=o(" \u2014 "),bW=a("a"),r1r=o("TFAlbertForSequenceClassification"),t1r=o(" (ALBERT model)"),a1r=l(),X7=a("li"),Pbe=a("strong"),n1r=o("bert"),s1r=o(" \u2014 "),vW=a("a"),l1r=o("TFBertForSequenceClassification"),i1r=o(" (BERT model)"),d1r=l(),z7=a("li"),Ibe=a("strong"),c1r=o("camembert"),f1r=o(" \u2014 "),FW=a("a"),m1r=o("TFCamembertForSequenceClassification"),g1r=o(" (CamemBERT model)"),h1r=l(),Q7=a("li"),qbe=a("strong"),p1r=o("convbert"),u1r=o(" \u2014 "),TW=a("a"),_1r=o("TFConvBertForSequenceClassification"),b1r=o(" (ConvBERT model)"),v1r=l(),W7=a("li"),Nbe=a("strong"),F1r=o("ctrl"),T1r=o(" \u2014 "),MW=a("a"),M1r=o("TFCTRLForSequenceClassification"),E1r=o(" (CTRL model)"),C1r=l(),H7=a("li"),jbe=a("strong"),w1r=o("deberta"),A1r=o(" \u2014 "),EW=a("a"),y1r=o("TFDebertaForSequenceClassification"),L1r=o(" (DeBERTa model)"),x1r=l(),U7=a("li"),Dbe=a("strong"),$1r=o("deberta-v2"),k1r=o(" \u2014 "),CW=a("a"),S1r=o("TFDebertaV2ForSequenceClassification"),R1r=o(" (DeBERTa-v2 model)"),B1r=l(),J7=a("li"),Gbe=a("strong"),P1r=o("distilbert"),I1r=o(" \u2014 "),wW=a("a"),q1r=o("TFDistilBertForSequenceClassification"),N1r=o(" (DistilBERT model)"),j1r=l(),Y7=a("li"),Obe=a("strong"),D1r=o("electra"),G1r=o(" \u2014 "),AW=a("a"),O1r=o("TFElectraForSequenceClassification"),V1r=o(" (ELECTRA model)"),X1r=l(),K7=a("li"),Vbe=a("strong"),z1r=o("flaubert"),Q1r=o(" \u2014 "),yW=a("a"),W1r=o("TFFlaubertForSequenceClassification"),H1r=o(" (FlauBERT model)"),U1r=l(),Z7=a("li"),Xbe=a("strong"),J1r=o("funnel"),Y1r=o(" \u2014 "),LW=a("a"),K1r=o("TFFunnelForSequenceClassification"),Z1r=o(" (Funnel Transformer model)"),e8r=l(),eM=a("li"),zbe=a("strong"),o8r=o("gpt2"),r8r=o(" \u2014 "),xW=a("a"),t8r=o("TFGPT2ForSequenceClassification"),a8r=o(" (OpenAI GPT-2 model)"),n8r=l(),oM=a("li"),Qbe=a("strong"),s8r=o("gptj"),l8r=o(" \u2014 "),$W=a("a"),i8r=o("TFGPTJForSequenceClassification"),d8r=o(" (GPT-J model)"),c8r=l(),rM=a("li"),Wbe=a("strong"),f8r=o("layoutlm"),m8r=o(" \u2014 "),kW=a("a"),g8r=o("TFLayoutLMForSequenceClassification"),h8r=o(" (LayoutLM model)"),p8r=l(),tM=a("li"),Hbe=a("strong"),u8r=o("longformer"),_8r=o(" \u2014 "),SW=a("a"),b8r=o("TFLongformerForSequenceClassification"),v8r=o(" (Longformer model)"),F8r=l(),aM=a("li"),Ube=a("strong"),T8r=o("mobilebert"),M8r=o(" \u2014 "),RW=a("a"),E8r=o("TFMobileBertForSequenceClassification"),C8r=o(" (MobileBERT model)"),w8r=l(),nM=a("li"),Jbe=a("strong"),A8r=o("mpnet"),y8r=o(" \u2014 "),BW=a("a"),L8r=o("TFMPNetForSequenceClassification"),x8r=o(" (MPNet model)"),$8r=l(),sM=a("li"),Ybe=a("strong"),k8r=o("openai-gpt"),S8r=o(" \u2014 "),PW=a("a"),R8r=o("TFOpenAIGPTForSequenceClassification"),B8r=o(" (OpenAI GPT model)"),P8r=l(),lM=a("li"),Kbe=a("strong"),I8r=o("rembert"),q8r=o(" \u2014 "),IW=a("a"),N8r=o("TFRemBertForSequenceClassification"),j8r=o(" (RemBERT model)"),D8r=l(),iM=a("li"),Zbe=a("strong"),G8r=o("roberta"),O8r=o(" \u2014 "),qW=a("a"),V8r=o("TFRobertaForSequenceClassification"),X8r=o(" (RoBERTa model)"),z8r=l(),dM=a("li"),e2e=a("strong"),Q8r=o("roformer"),W8r=o(" \u2014 "),NW=a("a"),H8r=o("TFRoFormerForSequenceClassification"),U8r=o(" (RoFormer model)"),J8r=l(),cM=a("li"),o2e=a("strong"),Y8r=o("tapas"),K8r=o(" \u2014 "),jW=a("a"),Z8r=o("TFTapasForSequenceClassification"),ebr=o(" (TAPAS model)"),obr=l(),fM=a("li"),r2e=a("strong"),rbr=o("transfo-xl"),tbr=o(" \u2014 "),DW=a("a"),abr=o("TFTransfoXLForSequenceClassification"),nbr=o(" (Transformer-XL model)"),sbr=l(),mM=a("li"),t2e=a("strong"),lbr=o("xlm"),ibr=o(" \u2014 "),GW=a("a"),dbr=o("TFXLMForSequenceClassification"),cbr=o(" (XLM model)"),fbr=l(),gM=a("li"),a2e=a("strong"),mbr=o("xlm-roberta"),gbr=o(" \u2014 "),OW=a("a"),hbr=o("TFXLMRobertaForSequenceClassification"),pbr=o(" (XLM-RoBERTa model)"),ubr=l(),hM=a("li"),n2e=a("strong"),_br=o("xlnet"),bbr=o(" \u2014 "),VW=a("a"),vbr=o("TFXLNetForSequenceClassification"),Fbr=o(" (XLNet model)"),Tbr=l(),F(pM.$$.fragment),OIe=l(),nc=a("h2"),uM=a("a"),s2e=a("span"),F(iL.$$.fragment),Mbr=l(),l2e=a("span"),Ebr=o("TFAutoModelForMultipleChoice"),VIe=l(),ar=a("div"),F(dL.$$.fragment),Cbr=l(),sc=a("p"),wbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XW=a("a"),Abr=o("from_pretrained()"),ybr=o(" class method or the "),zW=a("a"),Lbr=o("from_config()"),xbr=o(` class
method.`),$br=l(),cL=a("p"),kbr=o("This class cannot be instantiated directly using "),i2e=a("code"),Sbr=o("__init__()"),Rbr=o(" (throws an error)."),Bbr=l(),St=a("div"),F(fL.$$.fragment),Pbr=l(),d2e=a("p"),Ibr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qbr=l(),lc=a("p"),Nbr=o(`Note:
Loading a model from its configuration file does `),c2e=a("strong"),jbr=o("not"),Dbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),Gbr=o("from_pretrained()"),Obr=o(" to load the model weights."),Vbr=l(),F(_M.$$.fragment),Xbr=l(),Sr=a("div"),F(mL.$$.fragment),zbr=l(),f2e=a("p"),Qbr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wbr=l(),nn=a("p"),Hbr=o("The model class to instantiate is selected based on the "),m2e=a("code"),Ubr=o("model_type"),Jbr=o(` property of the config object (either
passed as an argument or loaded from `),g2e=a("code"),Ybr=o("pretrained_model_name_or_path"),Kbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=a("code"),Zbr=o("pretrained_model_name_or_path"),e2r=o(":"),o2r=l(),pe=a("ul"),bM=a("li"),p2e=a("strong"),r2r=o("albert"),t2r=o(" \u2014 "),WW=a("a"),a2r=o("TFAlbertForMultipleChoice"),n2r=o(" (ALBERT model)"),s2r=l(),vM=a("li"),u2e=a("strong"),l2r=o("bert"),i2r=o(" \u2014 "),HW=a("a"),d2r=o("TFBertForMultipleChoice"),c2r=o(" (BERT model)"),f2r=l(),FM=a("li"),_2e=a("strong"),m2r=o("camembert"),g2r=o(" \u2014 "),UW=a("a"),h2r=o("TFCamembertForMultipleChoice"),p2r=o(" (CamemBERT model)"),u2r=l(),TM=a("li"),b2e=a("strong"),_2r=o("convbert"),b2r=o(" \u2014 "),JW=a("a"),v2r=o("TFConvBertForMultipleChoice"),F2r=o(" (ConvBERT model)"),T2r=l(),MM=a("li"),v2e=a("strong"),M2r=o("distilbert"),E2r=o(" \u2014 "),YW=a("a"),C2r=o("TFDistilBertForMultipleChoice"),w2r=o(" (DistilBERT model)"),A2r=l(),EM=a("li"),F2e=a("strong"),y2r=o("electra"),L2r=o(" \u2014 "),KW=a("a"),x2r=o("TFElectraForMultipleChoice"),$2r=o(" (ELECTRA model)"),k2r=l(),CM=a("li"),T2e=a("strong"),S2r=o("flaubert"),R2r=o(" \u2014 "),ZW=a("a"),B2r=o("TFFlaubertForMultipleChoice"),P2r=o(" (FlauBERT model)"),I2r=l(),wM=a("li"),M2e=a("strong"),q2r=o("funnel"),N2r=o(" \u2014 "),eH=a("a"),j2r=o("TFFunnelForMultipleChoice"),D2r=o(" (Funnel Transformer model)"),G2r=l(),AM=a("li"),E2e=a("strong"),O2r=o("longformer"),V2r=o(" \u2014 "),oH=a("a"),X2r=o("TFLongformerForMultipleChoice"),z2r=o(" (Longformer model)"),Q2r=l(),yM=a("li"),C2e=a("strong"),W2r=o("mobilebert"),H2r=o(" \u2014 "),rH=a("a"),U2r=o("TFMobileBertForMultipleChoice"),J2r=o(" (MobileBERT model)"),Y2r=l(),LM=a("li"),w2e=a("strong"),K2r=o("mpnet"),Z2r=o(" \u2014 "),tH=a("a"),evr=o("TFMPNetForMultipleChoice"),ovr=o(" (MPNet model)"),rvr=l(),xM=a("li"),A2e=a("strong"),tvr=o("rembert"),avr=o(" \u2014 "),aH=a("a"),nvr=o("TFRemBertForMultipleChoice"),svr=o(" (RemBERT model)"),lvr=l(),$M=a("li"),y2e=a("strong"),ivr=o("roberta"),dvr=o(" \u2014 "),nH=a("a"),cvr=o("TFRobertaForMultipleChoice"),fvr=o(" (RoBERTa model)"),mvr=l(),kM=a("li"),L2e=a("strong"),gvr=o("roformer"),hvr=o(" \u2014 "),sH=a("a"),pvr=o("TFRoFormerForMultipleChoice"),uvr=o(" (RoFormer model)"),_vr=l(),SM=a("li"),x2e=a("strong"),bvr=o("xlm"),vvr=o(" \u2014 "),lH=a("a"),Fvr=o("TFXLMForMultipleChoice"),Tvr=o(" (XLM model)"),Mvr=l(),RM=a("li"),$2e=a("strong"),Evr=o("xlm-roberta"),Cvr=o(" \u2014 "),iH=a("a"),wvr=o("TFXLMRobertaForMultipleChoice"),Avr=o(" (XLM-RoBERTa model)"),yvr=l(),BM=a("li"),k2e=a("strong"),Lvr=o("xlnet"),xvr=o(" \u2014 "),dH=a("a"),$vr=o("TFXLNetForMultipleChoice"),kvr=o(" (XLNet model)"),Svr=l(),F(PM.$$.fragment),XIe=l(),ic=a("h2"),IM=a("a"),S2e=a("span"),F(gL.$$.fragment),Rvr=l(),R2e=a("span"),Bvr=o("TFAutoModelForNextSentencePrediction"),zIe=l(),nr=a("div"),F(hL.$$.fragment),Pvr=l(),dc=a("p"),Ivr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cH=a("a"),qvr=o("from_pretrained()"),Nvr=o(" class method or the "),fH=a("a"),jvr=o("from_config()"),Dvr=o(` class
method.`),Gvr=l(),pL=a("p"),Ovr=o("This class cannot be instantiated directly using "),B2e=a("code"),Vvr=o("__init__()"),Xvr=o(" (throws an error)."),zvr=l(),Rt=a("div"),F(uL.$$.fragment),Qvr=l(),P2e=a("p"),Wvr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Hvr=l(),cc=a("p"),Uvr=o(`Note:
Loading a model from its configuration file does `),I2e=a("strong"),Jvr=o("not"),Yvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),Kvr=o("from_pretrained()"),Zvr=o(" to load the model weights."),eFr=l(),F(qM.$$.fragment),oFr=l(),Rr=a("div"),F(_L.$$.fragment),rFr=l(),q2e=a("p"),tFr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aFr=l(),sn=a("p"),nFr=o("The model class to instantiate is selected based on the "),N2e=a("code"),sFr=o("model_type"),lFr=o(` property of the config object (either
passed as an argument or loaded from `),j2e=a("code"),iFr=o("pretrained_model_name_or_path"),dFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=a("code"),cFr=o("pretrained_model_name_or_path"),fFr=o(":"),mFr=l(),bL=a("ul"),NM=a("li"),G2e=a("strong"),gFr=o("bert"),hFr=o(" \u2014 "),gH=a("a"),pFr=o("TFBertForNextSentencePrediction"),uFr=o(" (BERT model)"),_Fr=l(),jM=a("li"),O2e=a("strong"),bFr=o("mobilebert"),vFr=o(" \u2014 "),hH=a("a"),FFr=o("TFMobileBertForNextSentencePrediction"),TFr=o(" (MobileBERT model)"),MFr=l(),F(DM.$$.fragment),QIe=l(),fc=a("h2"),GM=a("a"),V2e=a("span"),F(vL.$$.fragment),EFr=l(),X2e=a("span"),CFr=o("TFAutoModelForTableQuestionAnswering"),WIe=l(),sr=a("div"),F(FL.$$.fragment),wFr=l(),mc=a("p"),AFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pH=a("a"),yFr=o("from_pretrained()"),LFr=o(" class method or the "),uH=a("a"),xFr=o("from_config()"),$Fr=o(` class
method.`),kFr=l(),TL=a("p"),SFr=o("This class cannot be instantiated directly using "),z2e=a("code"),RFr=o("__init__()"),BFr=o(" (throws an error)."),PFr=l(),Bt=a("div"),F(ML.$$.fragment),IFr=l(),Q2e=a("p"),qFr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),NFr=l(),gc=a("p"),jFr=o(`Note:
Loading a model from its configuration file does `),W2e=a("strong"),DFr=o("not"),GFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=a("a"),OFr=o("from_pretrained()"),VFr=o(" to load the model weights."),XFr=l(),F(OM.$$.fragment),zFr=l(),Br=a("div"),F(EL.$$.fragment),QFr=l(),H2e=a("p"),WFr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),HFr=l(),ln=a("p"),UFr=o("The model class to instantiate is selected based on the "),U2e=a("code"),JFr=o("model_type"),YFr=o(` property of the config object (either
passed as an argument or loaded from `),J2e=a("code"),KFr=o("pretrained_model_name_or_path"),ZFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=a("code"),e0r=o("pretrained_model_name_or_path"),o0r=o(":"),r0r=l(),K2e=a("ul"),VM=a("li"),Z2e=a("strong"),t0r=o("tapas"),a0r=o(" \u2014 "),bH=a("a"),n0r=o("TFTapasForQuestionAnswering"),s0r=o(" (TAPAS model)"),l0r=l(),F(XM.$$.fragment),HIe=l(),hc=a("h2"),zM=a("a"),eve=a("span"),F(CL.$$.fragment),i0r=l(),ove=a("span"),d0r=o("TFAutoModelForTokenClassification"),UIe=l(),lr=a("div"),F(wL.$$.fragment),c0r=l(),pc=a("p"),f0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vH=a("a"),m0r=o("from_pretrained()"),g0r=o(" class method or the "),FH=a("a"),h0r=o("from_config()"),p0r=o(` class
method.`),u0r=l(),AL=a("p"),_0r=o("This class cannot be instantiated directly using "),rve=a("code"),b0r=o("__init__()"),v0r=o(" (throws an error)."),F0r=l(),Pt=a("div"),F(yL.$$.fragment),T0r=l(),tve=a("p"),M0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),E0r=l(),uc=a("p"),C0r=o(`Note:
Loading a model from its configuration file does `),ave=a("strong"),w0r=o("not"),A0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=a("a"),y0r=o("from_pretrained()"),L0r=o(" to load the model weights."),x0r=l(),F(QM.$$.fragment),$0r=l(),Pr=a("div"),F(LL.$$.fragment),k0r=l(),nve=a("p"),S0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),R0r=l(),dn=a("p"),B0r=o("The model class to instantiate is selected based on the "),sve=a("code"),P0r=o("model_type"),I0r=o(` property of the config object (either
passed as an argument or loaded from `),lve=a("code"),q0r=o("pretrained_model_name_or_path"),N0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=a("code"),j0r=o("pretrained_model_name_or_path"),D0r=o(":"),G0r=l(),de=a("ul"),WM=a("li"),dve=a("strong"),O0r=o("albert"),V0r=o(" \u2014 "),MH=a("a"),X0r=o("TFAlbertForTokenClassification"),z0r=o(" (ALBERT model)"),Q0r=l(),HM=a("li"),cve=a("strong"),W0r=o("bert"),H0r=o(" \u2014 "),EH=a("a"),U0r=o("TFBertForTokenClassification"),J0r=o(" (BERT model)"),Y0r=l(),UM=a("li"),fve=a("strong"),K0r=o("camembert"),Z0r=o(" \u2014 "),CH=a("a"),eTr=o("TFCamembertForTokenClassification"),oTr=o(" (CamemBERT model)"),rTr=l(),JM=a("li"),mve=a("strong"),tTr=o("convbert"),aTr=o(" \u2014 "),wH=a("a"),nTr=o("TFConvBertForTokenClassification"),sTr=o(" (ConvBERT model)"),lTr=l(),YM=a("li"),gve=a("strong"),iTr=o("deberta"),dTr=o(" \u2014 "),AH=a("a"),cTr=o("TFDebertaForTokenClassification"),fTr=o(" (DeBERTa model)"),mTr=l(),KM=a("li"),hve=a("strong"),gTr=o("deberta-v2"),hTr=o(" \u2014 "),yH=a("a"),pTr=o("TFDebertaV2ForTokenClassification"),uTr=o(" (DeBERTa-v2 model)"),_Tr=l(),ZM=a("li"),pve=a("strong"),bTr=o("distilbert"),vTr=o(" \u2014 "),LH=a("a"),FTr=o("TFDistilBertForTokenClassification"),TTr=o(" (DistilBERT model)"),MTr=l(),e4=a("li"),uve=a("strong"),ETr=o("electra"),CTr=o(" \u2014 "),xH=a("a"),wTr=o("TFElectraForTokenClassification"),ATr=o(" (ELECTRA model)"),yTr=l(),o4=a("li"),_ve=a("strong"),LTr=o("flaubert"),xTr=o(" \u2014 "),$H=a("a"),$Tr=o("TFFlaubertForTokenClassification"),kTr=o(" (FlauBERT model)"),STr=l(),r4=a("li"),bve=a("strong"),RTr=o("funnel"),BTr=o(" \u2014 "),kH=a("a"),PTr=o("TFFunnelForTokenClassification"),ITr=o(" (Funnel Transformer model)"),qTr=l(),t4=a("li"),vve=a("strong"),NTr=o("layoutlm"),jTr=o(" \u2014 "),SH=a("a"),DTr=o("TFLayoutLMForTokenClassification"),GTr=o(" (LayoutLM model)"),OTr=l(),a4=a("li"),Fve=a("strong"),VTr=o("longformer"),XTr=o(" \u2014 "),RH=a("a"),zTr=o("TFLongformerForTokenClassification"),QTr=o(" (Longformer model)"),WTr=l(),n4=a("li"),Tve=a("strong"),HTr=o("mobilebert"),UTr=o(" \u2014 "),BH=a("a"),JTr=o("TFMobileBertForTokenClassification"),YTr=o(" (MobileBERT model)"),KTr=l(),s4=a("li"),Mve=a("strong"),ZTr=o("mpnet"),e7r=o(" \u2014 "),PH=a("a"),o7r=o("TFMPNetForTokenClassification"),r7r=o(" (MPNet model)"),t7r=l(),l4=a("li"),Eve=a("strong"),a7r=o("rembert"),n7r=o(" \u2014 "),IH=a("a"),s7r=o("TFRemBertForTokenClassification"),l7r=o(" (RemBERT model)"),i7r=l(),i4=a("li"),Cve=a("strong"),d7r=o("roberta"),c7r=o(" \u2014 "),qH=a("a"),f7r=o("TFRobertaForTokenClassification"),m7r=o(" (RoBERTa model)"),g7r=l(),d4=a("li"),wve=a("strong"),h7r=o("roformer"),p7r=o(" \u2014 "),NH=a("a"),u7r=o("TFRoFormerForTokenClassification"),_7r=o(" (RoFormer model)"),b7r=l(),c4=a("li"),Ave=a("strong"),v7r=o("xlm"),F7r=o(" \u2014 "),jH=a("a"),T7r=o("TFXLMForTokenClassification"),M7r=o(" (XLM model)"),E7r=l(),f4=a("li"),yve=a("strong"),C7r=o("xlm-roberta"),w7r=o(" \u2014 "),DH=a("a"),A7r=o("TFXLMRobertaForTokenClassification"),y7r=o(" (XLM-RoBERTa model)"),L7r=l(),m4=a("li"),Lve=a("strong"),x7r=o("xlnet"),$7r=o(" \u2014 "),GH=a("a"),k7r=o("TFXLNetForTokenClassification"),S7r=o(" (XLNet model)"),R7r=l(),F(g4.$$.fragment),JIe=l(),_c=a("h2"),h4=a("a"),xve=a("span"),F(xL.$$.fragment),B7r=l(),$ve=a("span"),P7r=o("TFAutoModelForQuestionAnswering"),YIe=l(),ir=a("div"),F($L.$$.fragment),I7r=l(),bc=a("p"),q7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),OH=a("a"),N7r=o("from_pretrained()"),j7r=o(" class method or the "),VH=a("a"),D7r=o("from_config()"),G7r=o(` class
method.`),O7r=l(),kL=a("p"),V7r=o("This class cannot be instantiated directly using "),kve=a("code"),X7r=o("__init__()"),z7r=o(" (throws an error)."),Q7r=l(),It=a("div"),F(SL.$$.fragment),W7r=l(),Sve=a("p"),H7r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),U7r=l(),vc=a("p"),J7r=o(`Note:
Loading a model from its configuration file does `),Rve=a("strong"),Y7r=o("not"),K7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),Z7r=o("from_pretrained()"),eMr=o(" to load the model weights."),oMr=l(),F(p4.$$.fragment),rMr=l(),Ir=a("div"),F(RL.$$.fragment),tMr=l(),Bve=a("p"),aMr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nMr=l(),cn=a("p"),sMr=o("The model class to instantiate is selected based on the "),Pve=a("code"),lMr=o("model_type"),iMr=o(` property of the config object (either
passed as an argument or loaded from `),Ive=a("code"),dMr=o("pretrained_model_name_or_path"),cMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=a("code"),fMr=o("pretrained_model_name_or_path"),mMr=o(":"),gMr=l(),ce=a("ul"),u4=a("li"),Nve=a("strong"),hMr=o("albert"),pMr=o(" \u2014 "),zH=a("a"),uMr=o("TFAlbertForQuestionAnswering"),_Mr=o(" (ALBERT model)"),bMr=l(),_4=a("li"),jve=a("strong"),vMr=o("bert"),FMr=o(" \u2014 "),QH=a("a"),TMr=o("TFBertForQuestionAnswering"),MMr=o(" (BERT model)"),EMr=l(),b4=a("li"),Dve=a("strong"),CMr=o("camembert"),wMr=o(" \u2014 "),WH=a("a"),AMr=o("TFCamembertForQuestionAnswering"),yMr=o(" (CamemBERT model)"),LMr=l(),v4=a("li"),Gve=a("strong"),xMr=o("convbert"),$Mr=o(" \u2014 "),HH=a("a"),kMr=o("TFConvBertForQuestionAnswering"),SMr=o(" (ConvBERT model)"),RMr=l(),F4=a("li"),Ove=a("strong"),BMr=o("deberta"),PMr=o(" \u2014 "),UH=a("a"),IMr=o("TFDebertaForQuestionAnswering"),qMr=o(" (DeBERTa model)"),NMr=l(),T4=a("li"),Vve=a("strong"),jMr=o("deberta-v2"),DMr=o(" \u2014 "),JH=a("a"),GMr=o("TFDebertaV2ForQuestionAnswering"),OMr=o(" (DeBERTa-v2 model)"),VMr=l(),M4=a("li"),Xve=a("strong"),XMr=o("distilbert"),zMr=o(" \u2014 "),YH=a("a"),QMr=o("TFDistilBertForQuestionAnswering"),WMr=o(" (DistilBERT model)"),HMr=l(),E4=a("li"),zve=a("strong"),UMr=o("electra"),JMr=o(" \u2014 "),KH=a("a"),YMr=o("TFElectraForQuestionAnswering"),KMr=o(" (ELECTRA model)"),ZMr=l(),C4=a("li"),Qve=a("strong"),e4r=o("flaubert"),o4r=o(" \u2014 "),ZH=a("a"),r4r=o("TFFlaubertForQuestionAnsweringSimple"),t4r=o(" (FlauBERT model)"),a4r=l(),w4=a("li"),Wve=a("strong"),n4r=o("funnel"),s4r=o(" \u2014 "),eU=a("a"),l4r=o("TFFunnelForQuestionAnswering"),i4r=o(" (Funnel Transformer model)"),d4r=l(),A4=a("li"),Hve=a("strong"),c4r=o("gptj"),f4r=o(" \u2014 "),oU=a("a"),m4r=o("TFGPTJForQuestionAnswering"),g4r=o(" (GPT-J model)"),h4r=l(),y4=a("li"),Uve=a("strong"),p4r=o("longformer"),u4r=o(" \u2014 "),rU=a("a"),_4r=o("TFLongformerForQuestionAnswering"),b4r=o(" (Longformer model)"),v4r=l(),L4=a("li"),Jve=a("strong"),F4r=o("mobilebert"),T4r=o(" \u2014 "),tU=a("a"),M4r=o("TFMobileBertForQuestionAnswering"),E4r=o(" (MobileBERT model)"),C4r=l(),x4=a("li"),Yve=a("strong"),w4r=o("mpnet"),A4r=o(" \u2014 "),aU=a("a"),y4r=o("TFMPNetForQuestionAnswering"),L4r=o(" (MPNet model)"),x4r=l(),$4=a("li"),Kve=a("strong"),$4r=o("rembert"),k4r=o(" \u2014 "),nU=a("a"),S4r=o("TFRemBertForQuestionAnswering"),R4r=o(" (RemBERT model)"),B4r=l(),k4=a("li"),Zve=a("strong"),P4r=o("roberta"),I4r=o(" \u2014 "),sU=a("a"),q4r=o("TFRobertaForQuestionAnswering"),N4r=o(" (RoBERTa model)"),j4r=l(),S4=a("li"),eFe=a("strong"),D4r=o("roformer"),G4r=o(" \u2014 "),lU=a("a"),O4r=o("TFRoFormerForQuestionAnswering"),V4r=o(" (RoFormer model)"),X4r=l(),R4=a("li"),oFe=a("strong"),z4r=o("xlm"),Q4r=o(" \u2014 "),iU=a("a"),W4r=o("TFXLMForQuestionAnsweringSimple"),H4r=o(" (XLM model)"),U4r=l(),B4=a("li"),rFe=a("strong"),J4r=o("xlm-roberta"),Y4r=o(" \u2014 "),dU=a("a"),K4r=o("TFXLMRobertaForQuestionAnswering"),Z4r=o(" (XLM-RoBERTa model)"),eEr=l(),P4=a("li"),tFe=a("strong"),oEr=o("xlnet"),rEr=o(" \u2014 "),cU=a("a"),tEr=o("TFXLNetForQuestionAnsweringSimple"),aEr=o(" (XLNet model)"),nEr=l(),F(I4.$$.fragment),KIe=l(),Fc=a("h2"),q4=a("a"),aFe=a("span"),F(BL.$$.fragment),sEr=l(),nFe=a("span"),lEr=o("TFAutoModelForVision2Seq"),ZIe=l(),dr=a("div"),F(PL.$$.fragment),iEr=l(),Tc=a("p"),dEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fU=a("a"),cEr=o("from_pretrained()"),fEr=o(" class method or the "),mU=a("a"),mEr=o("from_config()"),gEr=o(` class
method.`),hEr=l(),IL=a("p"),pEr=o("This class cannot be instantiated directly using "),sFe=a("code"),uEr=o("__init__()"),_Er=o(" (throws an error)."),bEr=l(),qt=a("div"),F(qL.$$.fragment),vEr=l(),lFe=a("p"),FEr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),TEr=l(),Mc=a("p"),MEr=o(`Note:
Loading a model from its configuration file does `),iFe=a("strong"),EEr=o("not"),CEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),wEr=o("from_pretrained()"),AEr=o(" to load the model weights."),yEr=l(),F(N4.$$.fragment),LEr=l(),qr=a("div"),F(NL.$$.fragment),xEr=l(),dFe=a("p"),$Er=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kEr=l(),fn=a("p"),SEr=o("The model class to instantiate is selected based on the "),cFe=a("code"),REr=o("model_type"),BEr=o(` property of the config object (either
passed as an argument or loaded from `),fFe=a("code"),PEr=o("pretrained_model_name_or_path"),IEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=a("code"),qEr=o("pretrained_model_name_or_path"),NEr=o(":"),jEr=l(),gFe=a("ul"),j4=a("li"),hFe=a("strong"),DEr=o("vision-encoder-decoder"),GEr=o(" \u2014 "),hU=a("a"),OEr=o("TFVisionEncoderDecoderModel"),VEr=o(" (Vision Encoder decoder model)"),XEr=l(),F(D4.$$.fragment),eqe=l(),Ec=a("h2"),G4=a("a"),pFe=a("span"),F(jL.$$.fragment),zEr=l(),uFe=a("span"),QEr=o("TFAutoModelForSpeechSeq2Seq"),oqe=l(),cr=a("div"),F(DL.$$.fragment),WEr=l(),Cc=a("p"),HEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pU=a("a"),UEr=o("from_pretrained()"),JEr=o(" class method or the "),uU=a("a"),YEr=o("from_config()"),KEr=o(` class
method.`),ZEr=l(),GL=a("p"),e5r=o("This class cannot be instantiated directly using "),_Fe=a("code"),o5r=o("__init__()"),r5r=o(" (throws an error)."),t5r=l(),Nt=a("div"),F(OL.$$.fragment),a5r=l(),bFe=a("p"),n5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),s5r=l(),wc=a("p"),l5r=o(`Note:
Loading a model from its configuration file does `),vFe=a("strong"),i5r=o("not"),d5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=a("a"),c5r=o("from_pretrained()"),f5r=o(" to load the model weights."),m5r=l(),F(O4.$$.fragment),g5r=l(),Nr=a("div"),F(VL.$$.fragment),h5r=l(),FFe=a("p"),p5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),u5r=l(),mn=a("p"),_5r=o("The model class to instantiate is selected based on the "),TFe=a("code"),b5r=o("model_type"),v5r=o(` property of the config object (either
passed as an argument or loaded from `),MFe=a("code"),F5r=o("pretrained_model_name_or_path"),T5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=a("code"),M5r=o("pretrained_model_name_or_path"),E5r=o(":"),C5r=l(),CFe=a("ul"),V4=a("li"),wFe=a("strong"),w5r=o("speech_to_text"),A5r=o(" \u2014 "),bU=a("a"),y5r=o("TFSpeech2TextForConditionalGeneration"),L5r=o(" (Speech2Text model)"),x5r=l(),F(X4.$$.fragment),rqe=l(),Ac=a("h2"),z4=a("a"),AFe=a("span"),F(XL.$$.fragment),$5r=l(),yFe=a("span"),k5r=o("FlaxAutoModel"),tqe=l(),fr=a("div"),F(zL.$$.fragment),S5r=l(),yc=a("p"),R5r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vU=a("a"),B5r=o("from_pretrained()"),P5r=o(" class method or the "),FU=a("a"),I5r=o("from_config()"),q5r=o(` class
method.`),N5r=l(),QL=a("p"),j5r=o("This class cannot be instantiated directly using "),LFe=a("code"),D5r=o("__init__()"),G5r=o(" (throws an error)."),O5r=l(),jt=a("div"),F(WL.$$.fragment),V5r=l(),xFe=a("p"),X5r=o("Instantiates one of the base model classes of the library from a configuration."),z5r=l(),Lc=a("p"),Q5r=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),W5r=o("not"),H5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=a("a"),U5r=o("from_pretrained()"),J5r=o(" to load the model weights."),Y5r=l(),F(Q4.$$.fragment),K5r=l(),jr=a("div"),F(HL.$$.fragment),Z5r=l(),kFe=a("p"),eCr=o("Instantiate one of the base model classes of the library from a pretrained model."),oCr=l(),gn=a("p"),rCr=o("The model class to instantiate is selected based on the "),SFe=a("code"),tCr=o("model_type"),aCr=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),nCr=o("pretrained_model_name_or_path"),sCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),lCr=o("pretrained_model_name_or_path"),iCr=o(":"),dCr=l(),oe=a("ul"),W4=a("li"),PFe=a("strong"),cCr=o("albert"),fCr=o(" \u2014 "),MU=a("a"),mCr=o("FlaxAlbertModel"),gCr=o(" (ALBERT model)"),hCr=l(),H4=a("li"),IFe=a("strong"),pCr=o("bart"),uCr=o(" \u2014 "),EU=a("a"),_Cr=o("FlaxBartModel"),bCr=o(" (BART model)"),vCr=l(),U4=a("li"),qFe=a("strong"),FCr=o("beit"),TCr=o(" \u2014 "),CU=a("a"),MCr=o("FlaxBeitModel"),ECr=o(" (BEiT model)"),CCr=l(),J4=a("li"),NFe=a("strong"),wCr=o("bert"),ACr=o(" \u2014 "),wU=a("a"),yCr=o("FlaxBertModel"),LCr=o(" (BERT model)"),xCr=l(),Y4=a("li"),jFe=a("strong"),$Cr=o("big_bird"),kCr=o(" \u2014 "),AU=a("a"),SCr=o("FlaxBigBirdModel"),RCr=o(" (BigBird model)"),BCr=l(),K4=a("li"),DFe=a("strong"),PCr=o("blenderbot"),ICr=o(" \u2014 "),yU=a("a"),qCr=o("FlaxBlenderbotModel"),NCr=o(" (Blenderbot model)"),jCr=l(),Z4=a("li"),GFe=a("strong"),DCr=o("blenderbot-small"),GCr=o(" \u2014 "),LU=a("a"),OCr=o("FlaxBlenderbotSmallModel"),VCr=o(" (BlenderbotSmall model)"),XCr=l(),eE=a("li"),OFe=a("strong"),zCr=o("clip"),QCr=o(" \u2014 "),xU=a("a"),WCr=o("FlaxCLIPModel"),HCr=o(" (CLIP model)"),UCr=l(),oE=a("li"),VFe=a("strong"),JCr=o("distilbert"),YCr=o(" \u2014 "),$U=a("a"),KCr=o("FlaxDistilBertModel"),ZCr=o(" (DistilBERT model)"),e3r=l(),rE=a("li"),XFe=a("strong"),o3r=o("electra"),r3r=o(" \u2014 "),kU=a("a"),t3r=o("FlaxElectraModel"),a3r=o(" (ELECTRA model)"),n3r=l(),tE=a("li"),zFe=a("strong"),s3r=o("gpt2"),l3r=o(" \u2014 "),SU=a("a"),i3r=o("FlaxGPT2Model"),d3r=o(" (OpenAI GPT-2 model)"),c3r=l(),aE=a("li"),QFe=a("strong"),f3r=o("gpt_neo"),m3r=o(" \u2014 "),RU=a("a"),g3r=o("FlaxGPTNeoModel"),h3r=o(" (GPT Neo model)"),p3r=l(),nE=a("li"),WFe=a("strong"),u3r=o("gptj"),_3r=o(" \u2014 "),BU=a("a"),b3r=o("FlaxGPTJModel"),v3r=o(" (GPT-J model)"),F3r=l(),sE=a("li"),HFe=a("strong"),T3r=o("marian"),M3r=o(" \u2014 "),PU=a("a"),E3r=o("FlaxMarianModel"),C3r=o(" (Marian model)"),w3r=l(),lE=a("li"),UFe=a("strong"),A3r=o("mbart"),y3r=o(" \u2014 "),IU=a("a"),L3r=o("FlaxMBartModel"),x3r=o(" (mBART model)"),$3r=l(),iE=a("li"),JFe=a("strong"),k3r=o("mt5"),S3r=o(" \u2014 "),qU=a("a"),R3r=o("FlaxMT5Model"),B3r=o(" (mT5 model)"),P3r=l(),dE=a("li"),YFe=a("strong"),I3r=o("pegasus"),q3r=o(" \u2014 "),NU=a("a"),N3r=o("FlaxPegasusModel"),j3r=o(" (Pegasus model)"),D3r=l(),cE=a("li"),KFe=a("strong"),G3r=o("roberta"),O3r=o(" \u2014 "),jU=a("a"),V3r=o("FlaxRobertaModel"),X3r=o(" (RoBERTa model)"),z3r=l(),fE=a("li"),ZFe=a("strong"),Q3r=o("roformer"),W3r=o(" \u2014 "),DU=a("a"),H3r=o("FlaxRoFormerModel"),U3r=o(" (RoFormer model)"),J3r=l(),mE=a("li"),e0e=a("strong"),Y3r=o("t5"),K3r=o(" \u2014 "),GU=a("a"),Z3r=o("FlaxT5Model"),ewr=o(" (T5 model)"),owr=l(),gE=a("li"),o0e=a("strong"),rwr=o("vision-text-dual-encoder"),twr=o(" \u2014 "),OU=a("a"),awr=o("FlaxVisionTextDualEncoderModel"),nwr=o(" (VisionTextDualEncoder model)"),swr=l(),hE=a("li"),r0e=a("strong"),lwr=o("vit"),iwr=o(" \u2014 "),VU=a("a"),dwr=o("FlaxViTModel"),cwr=o(" (ViT model)"),fwr=l(),pE=a("li"),t0e=a("strong"),mwr=o("wav2vec2"),gwr=o(" \u2014 "),XU=a("a"),hwr=o("FlaxWav2Vec2Model"),pwr=o(" (Wav2Vec2 model)"),uwr=l(),uE=a("li"),a0e=a("strong"),_wr=o("xglm"),bwr=o(" \u2014 "),zU=a("a"),vwr=o("FlaxXGLMModel"),Fwr=o(" (XGLM model)"),Twr=l(),_E=a("li"),n0e=a("strong"),Mwr=o("xlm-roberta"),Ewr=o(" \u2014 "),QU=a("a"),Cwr=o("FlaxXLMRobertaModel"),wwr=o(" (XLM-RoBERTa model)"),Awr=l(),F(bE.$$.fragment),aqe=l(),xc=a("h2"),vE=a("a"),s0e=a("span"),F(UL.$$.fragment),ywr=l(),l0e=a("span"),Lwr=o("FlaxAutoModelForCausalLM"),nqe=l(),mr=a("div"),F(JL.$$.fragment),xwr=l(),$c=a("p"),$wr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WU=a("a"),kwr=o("from_pretrained()"),Swr=o(" class method or the "),HU=a("a"),Rwr=o("from_config()"),Bwr=o(` class
method.`),Pwr=l(),YL=a("p"),Iwr=o("This class cannot be instantiated directly using "),i0e=a("code"),qwr=o("__init__()"),Nwr=o(" (throws an error)."),jwr=l(),Dt=a("div"),F(KL.$$.fragment),Dwr=l(),d0e=a("p"),Gwr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Owr=l(),kc=a("p"),Vwr=o(`Note:
Loading a model from its configuration file does `),c0e=a("strong"),Xwr=o("not"),zwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=a("a"),Qwr=o("from_pretrained()"),Wwr=o(" to load the model weights."),Hwr=l(),F(FE.$$.fragment),Uwr=l(),Dr=a("div"),F(ZL.$$.fragment),Jwr=l(),f0e=a("p"),Ywr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Kwr=l(),hn=a("p"),Zwr=o("The model class to instantiate is selected based on the "),m0e=a("code"),eAr=o("model_type"),oAr=o(` property of the config object (either
passed as an argument or loaded from `),g0e=a("code"),rAr=o("pretrained_model_name_or_path"),tAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h0e=a("code"),aAr=o("pretrained_model_name_or_path"),nAr=o(":"),sAr=l(),ke=a("ul"),TE=a("li"),p0e=a("strong"),lAr=o("bart"),iAr=o(" \u2014 "),JU=a("a"),dAr=o("FlaxBartForCausalLM"),cAr=o(" (BART model)"),fAr=l(),ME=a("li"),u0e=a("strong"),mAr=o("bert"),gAr=o(" \u2014 "),YU=a("a"),hAr=o("FlaxBertForCausalLM"),pAr=o(" (BERT model)"),uAr=l(),EE=a("li"),_0e=a("strong"),_Ar=o("big_bird"),bAr=o(" \u2014 "),KU=a("a"),vAr=o("FlaxBigBirdForCausalLM"),FAr=o(" (BigBird model)"),TAr=l(),CE=a("li"),b0e=a("strong"),MAr=o("electra"),EAr=o(" \u2014 "),ZU=a("a"),CAr=o("FlaxElectraForCausalLM"),wAr=o(" (ELECTRA model)"),AAr=l(),wE=a("li"),v0e=a("strong"),yAr=o("gpt2"),LAr=o(" \u2014 "),eJ=a("a"),xAr=o("FlaxGPT2LMHeadModel"),$Ar=o(" (OpenAI GPT-2 model)"),kAr=l(),AE=a("li"),F0e=a("strong"),SAr=o("gpt_neo"),RAr=o(" \u2014 "),oJ=a("a"),BAr=o("FlaxGPTNeoForCausalLM"),PAr=o(" (GPT Neo model)"),IAr=l(),yE=a("li"),T0e=a("strong"),qAr=o("gptj"),NAr=o(" \u2014 "),rJ=a("a"),jAr=o("FlaxGPTJForCausalLM"),DAr=o(" (GPT-J model)"),GAr=l(),LE=a("li"),M0e=a("strong"),OAr=o("roberta"),VAr=o(" \u2014 "),tJ=a("a"),XAr=o("FlaxRobertaForCausalLM"),zAr=o(" (RoBERTa model)"),QAr=l(),xE=a("li"),E0e=a("strong"),WAr=o("xglm"),HAr=o(" \u2014 "),aJ=a("a"),UAr=o("FlaxXGLMForCausalLM"),JAr=o(" (XGLM model)"),YAr=l(),F($E.$$.fragment),sqe=l(),Sc=a("h2"),kE=a("a"),C0e=a("span"),F(ex.$$.fragment),KAr=l(),w0e=a("span"),ZAr=o("FlaxAutoModelForPreTraining"),lqe=l(),gr=a("div"),F(ox.$$.fragment),e6r=l(),Rc=a("p"),o6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nJ=a("a"),r6r=o("from_pretrained()"),t6r=o(" class method or the "),sJ=a("a"),a6r=o("from_config()"),n6r=o(` class
method.`),s6r=l(),rx=a("p"),l6r=o("This class cannot be instantiated directly using "),A0e=a("code"),i6r=o("__init__()"),d6r=o(" (throws an error)."),c6r=l(),Gt=a("div"),F(tx.$$.fragment),f6r=l(),y0e=a("p"),m6r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),g6r=l(),Bc=a("p"),h6r=o(`Note:
Loading a model from its configuration file does `),L0e=a("strong"),p6r=o("not"),u6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=a("a"),_6r=o("from_pretrained()"),b6r=o(" to load the model weights."),v6r=l(),F(SE.$$.fragment),F6r=l(),Gr=a("div"),F(ax.$$.fragment),T6r=l(),x0e=a("p"),M6r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),E6r=l(),pn=a("p"),C6r=o("The model class to instantiate is selected based on the "),$0e=a("code"),w6r=o("model_type"),A6r=o(` property of the config object (either
passed as an argument or loaded from `),k0e=a("code"),y6r=o("pretrained_model_name_or_path"),L6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S0e=a("code"),x6r=o("pretrained_model_name_or_path"),$6r=o(":"),k6r=l(),Me=a("ul"),RE=a("li"),R0e=a("strong"),S6r=o("albert"),R6r=o(" \u2014 "),iJ=a("a"),B6r=o("FlaxAlbertForPreTraining"),P6r=o(" (ALBERT model)"),I6r=l(),BE=a("li"),B0e=a("strong"),q6r=o("bart"),N6r=o(" \u2014 "),dJ=a("a"),j6r=o("FlaxBartForConditionalGeneration"),D6r=o(" (BART model)"),G6r=l(),PE=a("li"),P0e=a("strong"),O6r=o("bert"),V6r=o(" \u2014 "),cJ=a("a"),X6r=o("FlaxBertForPreTraining"),z6r=o(" (BERT model)"),Q6r=l(),IE=a("li"),I0e=a("strong"),W6r=o("big_bird"),H6r=o(" \u2014 "),fJ=a("a"),U6r=o("FlaxBigBirdForPreTraining"),J6r=o(" (BigBird model)"),Y6r=l(),qE=a("li"),q0e=a("strong"),K6r=o("electra"),Z6r=o(" \u2014 "),mJ=a("a"),eyr=o("FlaxElectraForPreTraining"),oyr=o(" (ELECTRA model)"),ryr=l(),NE=a("li"),N0e=a("strong"),tyr=o("mbart"),ayr=o(" \u2014 "),gJ=a("a"),nyr=o("FlaxMBartForConditionalGeneration"),syr=o(" (mBART model)"),lyr=l(),jE=a("li"),j0e=a("strong"),iyr=o("mt5"),dyr=o(" \u2014 "),hJ=a("a"),cyr=o("FlaxMT5ForConditionalGeneration"),fyr=o(" (mT5 model)"),myr=l(),DE=a("li"),D0e=a("strong"),gyr=o("roberta"),hyr=o(" \u2014 "),pJ=a("a"),pyr=o("FlaxRobertaForMaskedLM"),uyr=o(" (RoBERTa model)"),_yr=l(),GE=a("li"),G0e=a("strong"),byr=o("roformer"),vyr=o(" \u2014 "),uJ=a("a"),Fyr=o("FlaxRoFormerForMaskedLM"),Tyr=o(" (RoFormer model)"),Myr=l(),OE=a("li"),O0e=a("strong"),Eyr=o("t5"),Cyr=o(" \u2014 "),_J=a("a"),wyr=o("FlaxT5ForConditionalGeneration"),Ayr=o(" (T5 model)"),yyr=l(),VE=a("li"),V0e=a("strong"),Lyr=o("wav2vec2"),xyr=o(" \u2014 "),bJ=a("a"),$yr=o("FlaxWav2Vec2ForPreTraining"),kyr=o(" (Wav2Vec2 model)"),Syr=l(),XE=a("li"),X0e=a("strong"),Ryr=o("xlm-roberta"),Byr=o(" \u2014 "),vJ=a("a"),Pyr=o("FlaxXLMRobertaForMaskedLM"),Iyr=o(" (XLM-RoBERTa model)"),qyr=l(),F(zE.$$.fragment),iqe=l(),Pc=a("h2"),QE=a("a"),z0e=a("span"),F(nx.$$.fragment),Nyr=l(),Q0e=a("span"),jyr=o("FlaxAutoModelForMaskedLM"),dqe=l(),hr=a("div"),F(sx.$$.fragment),Dyr=l(),Ic=a("p"),Gyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FJ=a("a"),Oyr=o("from_pretrained()"),Vyr=o(" class method or the "),TJ=a("a"),Xyr=o("from_config()"),zyr=o(` class
method.`),Qyr=l(),lx=a("p"),Wyr=o("This class cannot be instantiated directly using "),W0e=a("code"),Hyr=o("__init__()"),Uyr=o(" (throws an error)."),Jyr=l(),Ot=a("div"),F(ix.$$.fragment),Yyr=l(),H0e=a("p"),Kyr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Zyr=l(),qc=a("p"),eLr=o(`Note:
Loading a model from its configuration file does `),U0e=a("strong"),oLr=o("not"),rLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=a("a"),tLr=o("from_pretrained()"),aLr=o(" to load the model weights."),nLr=l(),F(WE.$$.fragment),sLr=l(),Or=a("div"),F(dx.$$.fragment),lLr=l(),J0e=a("p"),iLr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dLr=l(),un=a("p"),cLr=o("The model class to instantiate is selected based on the "),Y0e=a("code"),fLr=o("model_type"),mLr=o(` property of the config object (either
passed as an argument or loaded from `),K0e=a("code"),gLr=o("pretrained_model_name_or_path"),hLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=a("code"),pLr=o("pretrained_model_name_or_path"),uLr=o(":"),_Lr=l(),Le=a("ul"),HE=a("li"),eTe=a("strong"),bLr=o("albert"),vLr=o(" \u2014 "),EJ=a("a"),FLr=o("FlaxAlbertForMaskedLM"),TLr=o(" (ALBERT model)"),MLr=l(),UE=a("li"),oTe=a("strong"),ELr=o("bart"),CLr=o(" \u2014 "),CJ=a("a"),wLr=o("FlaxBartForConditionalGeneration"),ALr=o(" (BART model)"),yLr=l(),JE=a("li"),rTe=a("strong"),LLr=o("bert"),xLr=o(" \u2014 "),wJ=a("a"),$Lr=o("FlaxBertForMaskedLM"),kLr=o(" (BERT model)"),SLr=l(),YE=a("li"),tTe=a("strong"),RLr=o("big_bird"),BLr=o(" \u2014 "),AJ=a("a"),PLr=o("FlaxBigBirdForMaskedLM"),ILr=o(" (BigBird model)"),qLr=l(),KE=a("li"),aTe=a("strong"),NLr=o("distilbert"),jLr=o(" \u2014 "),yJ=a("a"),DLr=o("FlaxDistilBertForMaskedLM"),GLr=o(" (DistilBERT model)"),OLr=l(),ZE=a("li"),nTe=a("strong"),VLr=o("electra"),XLr=o(" \u2014 "),LJ=a("a"),zLr=o("FlaxElectraForMaskedLM"),QLr=o(" (ELECTRA model)"),WLr=l(),e5=a("li"),sTe=a("strong"),HLr=o("mbart"),ULr=o(" \u2014 "),xJ=a("a"),JLr=o("FlaxMBartForConditionalGeneration"),YLr=o(" (mBART model)"),KLr=l(),o5=a("li"),lTe=a("strong"),ZLr=o("roberta"),exr=o(" \u2014 "),$J=a("a"),oxr=o("FlaxRobertaForMaskedLM"),rxr=o(" (RoBERTa model)"),txr=l(),r5=a("li"),iTe=a("strong"),axr=o("roformer"),nxr=o(" \u2014 "),kJ=a("a"),sxr=o("FlaxRoFormerForMaskedLM"),lxr=o(" (RoFormer model)"),ixr=l(),t5=a("li"),dTe=a("strong"),dxr=o("xlm-roberta"),cxr=o(" \u2014 "),SJ=a("a"),fxr=o("FlaxXLMRobertaForMaskedLM"),mxr=o(" (XLM-RoBERTa model)"),gxr=l(),F(a5.$$.fragment),cqe=l(),Nc=a("h2"),n5=a("a"),cTe=a("span"),F(cx.$$.fragment),hxr=l(),fTe=a("span"),pxr=o("FlaxAutoModelForSeq2SeqLM"),fqe=l(),pr=a("div"),F(fx.$$.fragment),uxr=l(),jc=a("p"),_xr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RJ=a("a"),bxr=o("from_pretrained()"),vxr=o(" class method or the "),BJ=a("a"),Fxr=o("from_config()"),Txr=o(` class
method.`),Mxr=l(),mx=a("p"),Exr=o("This class cannot be instantiated directly using "),mTe=a("code"),Cxr=o("__init__()"),wxr=o(" (throws an error)."),Axr=l(),Vt=a("div"),F(gx.$$.fragment),yxr=l(),gTe=a("p"),Lxr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xxr=l(),Dc=a("p"),$xr=o(`Note:
Loading a model from its configuration file does `),hTe=a("strong"),kxr=o("not"),Sxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=a("a"),Rxr=o("from_pretrained()"),Bxr=o(" to load the model weights."),Pxr=l(),F(s5.$$.fragment),Ixr=l(),Vr=a("div"),F(hx.$$.fragment),qxr=l(),pTe=a("p"),Nxr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jxr=l(),_n=a("p"),Dxr=o("The model class to instantiate is selected based on the "),uTe=a("code"),Gxr=o("model_type"),Oxr=o(` property of the config object (either
passed as an argument or loaded from `),_Te=a("code"),Vxr=o("pretrained_model_name_or_path"),Xxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=a("code"),zxr=o("pretrained_model_name_or_path"),Qxr=o(":"),Wxr=l(),Se=a("ul"),l5=a("li"),vTe=a("strong"),Hxr=o("bart"),Uxr=o(" \u2014 "),IJ=a("a"),Jxr=o("FlaxBartForConditionalGeneration"),Yxr=o(" (BART model)"),Kxr=l(),i5=a("li"),FTe=a("strong"),Zxr=o("blenderbot"),e9r=o(" \u2014 "),qJ=a("a"),o9r=o("FlaxBlenderbotForConditionalGeneration"),r9r=o(" (Blenderbot model)"),t9r=l(),d5=a("li"),TTe=a("strong"),a9r=o("blenderbot-small"),n9r=o(" \u2014 "),NJ=a("a"),s9r=o("FlaxBlenderbotSmallForConditionalGeneration"),l9r=o(" (BlenderbotSmall model)"),i9r=l(),c5=a("li"),MTe=a("strong"),d9r=o("encoder-decoder"),c9r=o(" \u2014 "),jJ=a("a"),f9r=o("FlaxEncoderDecoderModel"),m9r=o(" (Encoder decoder model)"),g9r=l(),f5=a("li"),ETe=a("strong"),h9r=o("marian"),p9r=o(" \u2014 "),DJ=a("a"),u9r=o("FlaxMarianMTModel"),_9r=o(" (Marian model)"),b9r=l(),m5=a("li"),CTe=a("strong"),v9r=o("mbart"),F9r=o(" \u2014 "),GJ=a("a"),T9r=o("FlaxMBartForConditionalGeneration"),M9r=o(" (mBART model)"),E9r=l(),g5=a("li"),wTe=a("strong"),C9r=o("mt5"),w9r=o(" \u2014 "),OJ=a("a"),A9r=o("FlaxMT5ForConditionalGeneration"),y9r=o(" (mT5 model)"),L9r=l(),h5=a("li"),ATe=a("strong"),x9r=o("pegasus"),$9r=o(" \u2014 "),VJ=a("a"),k9r=o("FlaxPegasusForConditionalGeneration"),S9r=o(" (Pegasus model)"),R9r=l(),p5=a("li"),yTe=a("strong"),B9r=o("t5"),P9r=o(" \u2014 "),XJ=a("a"),I9r=o("FlaxT5ForConditionalGeneration"),q9r=o(" (T5 model)"),N9r=l(),F(u5.$$.fragment),mqe=l(),Gc=a("h2"),_5=a("a"),LTe=a("span"),F(px.$$.fragment),j9r=l(),xTe=a("span"),D9r=o("FlaxAutoModelForSequenceClassification"),gqe=l(),ur=a("div"),F(ux.$$.fragment),G9r=l(),Oc=a("p"),O9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zJ=a("a"),V9r=o("from_pretrained()"),X9r=o(" class method or the "),QJ=a("a"),z9r=o("from_config()"),Q9r=o(` class
method.`),W9r=l(),_x=a("p"),H9r=o("This class cannot be instantiated directly using "),$Te=a("code"),U9r=o("__init__()"),J9r=o(" (throws an error)."),Y9r=l(),Xt=a("div"),F(bx.$$.fragment),K9r=l(),kTe=a("p"),Z9r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),e$r=l(),Vc=a("p"),o$r=o(`Note:
Loading a model from its configuration file does `),STe=a("strong"),r$r=o("not"),t$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),a$r=o("from_pretrained()"),n$r=o(" to load the model weights."),s$r=l(),F(b5.$$.fragment),l$r=l(),Xr=a("div"),F(vx.$$.fragment),i$r=l(),RTe=a("p"),d$r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),c$r=l(),bn=a("p"),f$r=o("The model class to instantiate is selected based on the "),BTe=a("code"),m$r=o("model_type"),g$r=o(` property of the config object (either
passed as an argument or loaded from `),PTe=a("code"),h$r=o("pretrained_model_name_or_path"),p$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ITe=a("code"),u$r=o("pretrained_model_name_or_path"),_$r=o(":"),b$r=l(),xe=a("ul"),v5=a("li"),qTe=a("strong"),v$r=o("albert"),F$r=o(" \u2014 "),HJ=a("a"),T$r=o("FlaxAlbertForSequenceClassification"),M$r=o(" (ALBERT model)"),E$r=l(),F5=a("li"),NTe=a("strong"),C$r=o("bart"),w$r=o(" \u2014 "),UJ=a("a"),A$r=o("FlaxBartForSequenceClassification"),y$r=o(" (BART model)"),L$r=l(),T5=a("li"),jTe=a("strong"),x$r=o("bert"),$$r=o(" \u2014 "),JJ=a("a"),k$r=o("FlaxBertForSequenceClassification"),S$r=o(" (BERT model)"),R$r=l(),M5=a("li"),DTe=a("strong"),B$r=o("big_bird"),P$r=o(" \u2014 "),YJ=a("a"),I$r=o("FlaxBigBirdForSequenceClassification"),q$r=o(" (BigBird model)"),N$r=l(),E5=a("li"),GTe=a("strong"),j$r=o("distilbert"),D$r=o(" \u2014 "),KJ=a("a"),G$r=o("FlaxDistilBertForSequenceClassification"),O$r=o(" (DistilBERT model)"),V$r=l(),C5=a("li"),OTe=a("strong"),X$r=o("electra"),z$r=o(" \u2014 "),ZJ=a("a"),Q$r=o("FlaxElectraForSequenceClassification"),W$r=o(" (ELECTRA model)"),H$r=l(),w5=a("li"),VTe=a("strong"),U$r=o("mbart"),J$r=o(" \u2014 "),eY=a("a"),Y$r=o("FlaxMBartForSequenceClassification"),K$r=o(" (mBART model)"),Z$r=l(),A5=a("li"),XTe=a("strong"),ekr=o("roberta"),okr=o(" \u2014 "),oY=a("a"),rkr=o("FlaxRobertaForSequenceClassification"),tkr=o(" (RoBERTa model)"),akr=l(),y5=a("li"),zTe=a("strong"),nkr=o("roformer"),skr=o(" \u2014 "),rY=a("a"),lkr=o("FlaxRoFormerForSequenceClassification"),ikr=o(" (RoFormer model)"),dkr=l(),L5=a("li"),QTe=a("strong"),ckr=o("xlm-roberta"),fkr=o(" \u2014 "),tY=a("a"),mkr=o("FlaxXLMRobertaForSequenceClassification"),gkr=o(" (XLM-RoBERTa model)"),hkr=l(),F(x5.$$.fragment),hqe=l(),Xc=a("h2"),$5=a("a"),WTe=a("span"),F(Fx.$$.fragment),pkr=l(),HTe=a("span"),ukr=o("FlaxAutoModelForQuestionAnswering"),pqe=l(),_r=a("div"),F(Tx.$$.fragment),_kr=l(),zc=a("p"),bkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aY=a("a"),vkr=o("from_pretrained()"),Fkr=o(" class method or the "),nY=a("a"),Tkr=o("from_config()"),Mkr=o(` class
method.`),Ekr=l(),Mx=a("p"),Ckr=o("This class cannot be instantiated directly using "),UTe=a("code"),wkr=o("__init__()"),Akr=o(" (throws an error)."),ykr=l(),zt=a("div"),F(Ex.$$.fragment),Lkr=l(),JTe=a("p"),xkr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$kr=l(),Qc=a("p"),kkr=o(`Note:
Loading a model from its configuration file does `),YTe=a("strong"),Skr=o("not"),Rkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=a("a"),Bkr=o("from_pretrained()"),Pkr=o(" to load the model weights."),Ikr=l(),F(k5.$$.fragment),qkr=l(),zr=a("div"),F(Cx.$$.fragment),Nkr=l(),KTe=a("p"),jkr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Dkr=l(),vn=a("p"),Gkr=o("The model class to instantiate is selected based on the "),ZTe=a("code"),Okr=o("model_type"),Vkr=o(` property of the config object (either
passed as an argument or loaded from `),e7e=a("code"),Xkr=o("pretrained_model_name_or_path"),zkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=a("code"),Qkr=o("pretrained_model_name_or_path"),Wkr=o(":"),Hkr=l(),$e=a("ul"),S5=a("li"),r7e=a("strong"),Ukr=o("albert"),Jkr=o(" \u2014 "),lY=a("a"),Ykr=o("FlaxAlbertForQuestionAnswering"),Kkr=o(" (ALBERT model)"),Zkr=l(),R5=a("li"),t7e=a("strong"),eSr=o("bart"),oSr=o(" \u2014 "),iY=a("a"),rSr=o("FlaxBartForQuestionAnswering"),tSr=o(" (BART model)"),aSr=l(),B5=a("li"),a7e=a("strong"),nSr=o("bert"),sSr=o(" \u2014 "),dY=a("a"),lSr=o("FlaxBertForQuestionAnswering"),iSr=o(" (BERT model)"),dSr=l(),P5=a("li"),n7e=a("strong"),cSr=o("big_bird"),fSr=o(" \u2014 "),cY=a("a"),mSr=o("FlaxBigBirdForQuestionAnswering"),gSr=o(" (BigBird model)"),hSr=l(),I5=a("li"),s7e=a("strong"),pSr=o("distilbert"),uSr=o(" \u2014 "),fY=a("a"),_Sr=o("FlaxDistilBertForQuestionAnswering"),bSr=o(" (DistilBERT model)"),vSr=l(),q5=a("li"),l7e=a("strong"),FSr=o("electra"),TSr=o(" \u2014 "),mY=a("a"),MSr=o("FlaxElectraForQuestionAnswering"),ESr=o(" (ELECTRA model)"),CSr=l(),N5=a("li"),i7e=a("strong"),wSr=o("mbart"),ASr=o(" \u2014 "),gY=a("a"),ySr=o("FlaxMBartForQuestionAnswering"),LSr=o(" (mBART model)"),xSr=l(),j5=a("li"),d7e=a("strong"),$Sr=o("roberta"),kSr=o(" \u2014 "),hY=a("a"),SSr=o("FlaxRobertaForQuestionAnswering"),RSr=o(" (RoBERTa model)"),BSr=l(),D5=a("li"),c7e=a("strong"),PSr=o("roformer"),ISr=o(" \u2014 "),pY=a("a"),qSr=o("FlaxRoFormerForQuestionAnswering"),NSr=o(" (RoFormer model)"),jSr=l(),G5=a("li"),f7e=a("strong"),DSr=o("xlm-roberta"),GSr=o(" \u2014 "),uY=a("a"),OSr=o("FlaxXLMRobertaForQuestionAnswering"),VSr=o(" (XLM-RoBERTa model)"),XSr=l(),F(O5.$$.fragment),uqe=l(),Wc=a("h2"),V5=a("a"),m7e=a("span"),F(wx.$$.fragment),zSr=l(),g7e=a("span"),QSr=o("FlaxAutoModelForTokenClassification"),_qe=l(),br=a("div"),F(Ax.$$.fragment),WSr=l(),Hc=a("p"),HSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_Y=a("a"),USr=o("from_pretrained()"),JSr=o(" class method or the "),bY=a("a"),YSr=o("from_config()"),KSr=o(` class
method.`),ZSr=l(),yx=a("p"),eRr=o("This class cannot be instantiated directly using "),h7e=a("code"),oRr=o("__init__()"),rRr=o(" (throws an error)."),tRr=l(),Qt=a("div"),F(Lx.$$.fragment),aRr=l(),p7e=a("p"),nRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sRr=l(),Uc=a("p"),lRr=o(`Note:
Loading a model from its configuration file does `),u7e=a("strong"),iRr=o("not"),dRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=a("a"),cRr=o("from_pretrained()"),fRr=o(" to load the model weights."),mRr=l(),F(X5.$$.fragment),gRr=l(),Qr=a("div"),F(xx.$$.fragment),hRr=l(),_7e=a("p"),pRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uRr=l(),Fn=a("p"),_Rr=o("The model class to instantiate is selected based on the "),b7e=a("code"),bRr=o("model_type"),vRr=o(` property of the config object (either
passed as an argument or loaded from `),v7e=a("code"),FRr=o("pretrained_model_name_or_path"),TRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F7e=a("code"),MRr=o("pretrained_model_name_or_path"),ERr=o(":"),CRr=l(),De=a("ul"),z5=a("li"),T7e=a("strong"),wRr=o("albert"),ARr=o(" \u2014 "),FY=a("a"),yRr=o("FlaxAlbertForTokenClassification"),LRr=o(" (ALBERT model)"),xRr=l(),Q5=a("li"),M7e=a("strong"),$Rr=o("bert"),kRr=o(" \u2014 "),TY=a("a"),SRr=o("FlaxBertForTokenClassification"),RRr=o(" (BERT model)"),BRr=l(),W5=a("li"),E7e=a("strong"),PRr=o("big_bird"),IRr=o(" \u2014 "),MY=a("a"),qRr=o("FlaxBigBirdForTokenClassification"),NRr=o(" (BigBird model)"),jRr=l(),H5=a("li"),C7e=a("strong"),DRr=o("distilbert"),GRr=o(" \u2014 "),EY=a("a"),ORr=o("FlaxDistilBertForTokenClassification"),VRr=o(" (DistilBERT model)"),XRr=l(),U5=a("li"),w7e=a("strong"),zRr=o("electra"),QRr=o(" \u2014 "),CY=a("a"),WRr=o("FlaxElectraForTokenClassification"),HRr=o(" (ELECTRA model)"),URr=l(),J5=a("li"),A7e=a("strong"),JRr=o("roberta"),YRr=o(" \u2014 "),wY=a("a"),KRr=o("FlaxRobertaForTokenClassification"),ZRr=o(" (RoBERTa model)"),eBr=l(),Y5=a("li"),y7e=a("strong"),oBr=o("roformer"),rBr=o(" \u2014 "),AY=a("a"),tBr=o("FlaxRoFormerForTokenClassification"),aBr=o(" (RoFormer model)"),nBr=l(),K5=a("li"),L7e=a("strong"),sBr=o("xlm-roberta"),lBr=o(" \u2014 "),yY=a("a"),iBr=o("FlaxXLMRobertaForTokenClassification"),dBr=o(" (XLM-RoBERTa model)"),cBr=l(),F(Z5.$$.fragment),bqe=l(),Jc=a("h2"),eC=a("a"),x7e=a("span"),F($x.$$.fragment),fBr=l(),$7e=a("span"),mBr=o("FlaxAutoModelForMultipleChoice"),vqe=l(),vr=a("div"),F(kx.$$.fragment),gBr=l(),Yc=a("p"),hBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LY=a("a"),pBr=o("from_pretrained()"),uBr=o(" class method or the "),xY=a("a"),_Br=o("from_config()"),bBr=o(` class
method.`),vBr=l(),Sx=a("p"),FBr=o("This class cannot be instantiated directly using "),k7e=a("code"),TBr=o("__init__()"),MBr=o(" (throws an error)."),EBr=l(),Wt=a("div"),F(Rx.$$.fragment),CBr=l(),S7e=a("p"),wBr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ABr=l(),Kc=a("p"),yBr=o(`Note:
Loading a model from its configuration file does `),R7e=a("strong"),LBr=o("not"),xBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=a("a"),$Br=o("from_pretrained()"),kBr=o(" to load the model weights."),SBr=l(),F(oC.$$.fragment),RBr=l(),Wr=a("div"),F(Bx.$$.fragment),BBr=l(),B7e=a("p"),PBr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),IBr=l(),Tn=a("p"),qBr=o("The model class to instantiate is selected based on the "),P7e=a("code"),NBr=o("model_type"),jBr=o(` property of the config object (either
passed as an argument or loaded from `),I7e=a("code"),DBr=o("pretrained_model_name_or_path"),GBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q7e=a("code"),OBr=o("pretrained_model_name_or_path"),VBr=o(":"),XBr=l(),Ge=a("ul"),rC=a("li"),N7e=a("strong"),zBr=o("albert"),QBr=o(" \u2014 "),kY=a("a"),WBr=o("FlaxAlbertForMultipleChoice"),HBr=o(" (ALBERT model)"),UBr=l(),tC=a("li"),j7e=a("strong"),JBr=o("bert"),YBr=o(" \u2014 "),SY=a("a"),KBr=o("FlaxBertForMultipleChoice"),ZBr=o(" (BERT model)"),ePr=l(),aC=a("li"),D7e=a("strong"),oPr=o("big_bird"),rPr=o(" \u2014 "),RY=a("a"),tPr=o("FlaxBigBirdForMultipleChoice"),aPr=o(" (BigBird model)"),nPr=l(),nC=a("li"),G7e=a("strong"),sPr=o("distilbert"),lPr=o(" \u2014 "),BY=a("a"),iPr=o("FlaxDistilBertForMultipleChoice"),dPr=o(" (DistilBERT model)"),cPr=l(),sC=a("li"),O7e=a("strong"),fPr=o("electra"),mPr=o(" \u2014 "),PY=a("a"),gPr=o("FlaxElectraForMultipleChoice"),hPr=o(" (ELECTRA model)"),pPr=l(),lC=a("li"),V7e=a("strong"),uPr=o("roberta"),_Pr=o(" \u2014 "),IY=a("a"),bPr=o("FlaxRobertaForMultipleChoice"),vPr=o(" (RoBERTa model)"),FPr=l(),iC=a("li"),X7e=a("strong"),TPr=o("roformer"),MPr=o(" \u2014 "),qY=a("a"),EPr=o("FlaxRoFormerForMultipleChoice"),CPr=o(" (RoFormer model)"),wPr=l(),dC=a("li"),z7e=a("strong"),APr=o("xlm-roberta"),yPr=o(" \u2014 "),NY=a("a"),LPr=o("FlaxXLMRobertaForMultipleChoice"),xPr=o(" (XLM-RoBERTa model)"),$Pr=l(),F(cC.$$.fragment),Fqe=l(),Zc=a("h2"),fC=a("a"),Q7e=a("span"),F(Px.$$.fragment),kPr=l(),W7e=a("span"),SPr=o("FlaxAutoModelForNextSentencePrediction"),Tqe=l(),Fr=a("div"),F(Ix.$$.fragment),RPr=l(),ef=a("p"),BPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jY=a("a"),PPr=o("from_pretrained()"),IPr=o(" class method or the "),DY=a("a"),qPr=o("from_config()"),NPr=o(` class
method.`),jPr=l(),qx=a("p"),DPr=o("This class cannot be instantiated directly using "),H7e=a("code"),GPr=o("__init__()"),OPr=o(" (throws an error)."),VPr=l(),Ht=a("div"),F(Nx.$$.fragment),XPr=l(),U7e=a("p"),zPr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),QPr=l(),of=a("p"),WPr=o(`Note:
Loading a model from its configuration file does `),J7e=a("strong"),HPr=o("not"),UPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("a"),JPr=o("from_pretrained()"),YPr=o(" to load the model weights."),KPr=l(),F(mC.$$.fragment),ZPr=l(),Hr=a("div"),F(jx.$$.fragment),eIr=l(),Y7e=a("p"),oIr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rIr=l(),Mn=a("p"),tIr=o("The model class to instantiate is selected based on the "),K7e=a("code"),aIr=o("model_type"),nIr=o(` property of the config object (either
passed as an argument or loaded from `),Z7e=a("code"),sIr=o("pretrained_model_name_or_path"),lIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eMe=a("code"),iIr=o("pretrained_model_name_or_path"),dIr=o(":"),cIr=l(),oMe=a("ul"),gC=a("li"),rMe=a("strong"),fIr=o("bert"),mIr=o(" \u2014 "),OY=a("a"),gIr=o("FlaxBertForNextSentencePrediction"),hIr=o(" (BERT model)"),pIr=l(),F(hC.$$.fragment),Mqe=l(),rf=a("h2"),pC=a("a"),tMe=a("span"),F(Dx.$$.fragment),uIr=l(),aMe=a("span"),_Ir=o("FlaxAutoModelForImageClassification"),Eqe=l(),Tr=a("div"),F(Gx.$$.fragment),bIr=l(),tf=a("p"),vIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),VY=a("a"),FIr=o("from_pretrained()"),TIr=o(" class method or the "),XY=a("a"),MIr=o("from_config()"),EIr=o(` class
method.`),CIr=l(),Ox=a("p"),wIr=o("This class cannot be instantiated directly using "),nMe=a("code"),AIr=o("__init__()"),yIr=o(" (throws an error)."),LIr=l(),Ut=a("div"),F(Vx.$$.fragment),xIr=l(),sMe=a("p"),$Ir=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kIr=l(),af=a("p"),SIr=o(`Note:
Loading a model from its configuration file does `),lMe=a("strong"),RIr=o("not"),BIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=a("a"),PIr=o("from_pretrained()"),IIr=o(" to load the model weights."),qIr=l(),F(uC.$$.fragment),NIr=l(),Ur=a("div"),F(Xx.$$.fragment),jIr=l(),iMe=a("p"),DIr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GIr=l(),En=a("p"),OIr=o("The model class to instantiate is selected based on the "),dMe=a("code"),VIr=o("model_type"),XIr=o(` property of the config object (either
passed as an argument or loaded from `),cMe=a("code"),zIr=o("pretrained_model_name_or_path"),QIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fMe=a("code"),WIr=o("pretrained_model_name_or_path"),HIr=o(":"),UIr=l(),zx=a("ul"),_C=a("li"),mMe=a("strong"),JIr=o("beit"),YIr=o(" \u2014 "),QY=a("a"),KIr=o("FlaxBeitForImageClassification"),ZIr=o(" (BEiT model)"),eqr=l(),bC=a("li"),gMe=a("strong"),oqr=o("vit"),rqr=o(" \u2014 "),WY=a("a"),tqr=o("FlaxViTForImageClassification"),aqr=o(" (ViT model)"),nqr=l(),F(vC.$$.fragment),Cqe=l(),nf=a("h2"),FC=a("a"),hMe=a("span"),F(Qx.$$.fragment),sqr=l(),pMe=a("span"),lqr=o("FlaxAutoModelForVision2Seq"),wqe=l(),Mr=a("div"),F(Wx.$$.fragment),iqr=l(),sf=a("p"),dqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HY=a("a"),cqr=o("from_pretrained()"),fqr=o(" class method or the "),UY=a("a"),mqr=o("from_config()"),gqr=o(` class
method.`),hqr=l(),Hx=a("p"),pqr=o("This class cannot be instantiated directly using "),uMe=a("code"),uqr=o("__init__()"),_qr=o(" (throws an error)."),bqr=l(),Jt=a("div"),F(Ux.$$.fragment),vqr=l(),_Me=a("p"),Fqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Tqr=l(),lf=a("p"),Mqr=o(`Note:
Loading a model from its configuration file does `),bMe=a("strong"),Eqr=o("not"),Cqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=a("a"),wqr=o("from_pretrained()"),Aqr=o(" to load the model weights."),yqr=l(),F(TC.$$.fragment),Lqr=l(),Jr=a("div"),F(Jx.$$.fragment),xqr=l(),vMe=a("p"),$qr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kqr=l(),Cn=a("p"),Sqr=o("The model class to instantiate is selected based on the "),FMe=a("code"),Rqr=o("model_type"),Bqr=o(` property of the config object (either
passed as an argument or loaded from `),TMe=a("code"),Pqr=o("pretrained_model_name_or_path"),Iqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=a("code"),qqr=o("pretrained_model_name_or_path"),Nqr=o(":"),jqr=l(),EMe=a("ul"),MC=a("li"),CMe=a("strong"),Dqr=o("vision-encoder-decoder"),Gqr=o(" \u2014 "),YY=a("a"),Oqr=o("FlaxVisionEncoderDecoderModel"),Vqr=o(" (Vision Encoder decoder model)"),Xqr=l(),F(EC.$$.fragment),this.h()},l(f){const _=dwt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Yx=s(p);m=n(Yx,"A",{id:!0,class:!0,href:!0});var wMe=s(m);u=n(wMe,"SPAN",{});var AMe=s(u);T(d.$$.fragment,AMe),AMe.forEach(t),wMe.forEach(t),h=i(Yx),Mo=n(Yx,"SPAN",{});var yMe=s(Mo);li=r(yMe,"Auto Classes"),yMe.forEach(t),Yx.forEach(t),mf=i(f),et=n(f,"P",{});var Kx=s(et);ii=r(Kx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=n(Kx,"CODE",{});var LMe=s(di);Ow=r(LMe,"from_pretrained()"),LMe.forEach(t),gf=r(Kx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Kx.forEach(t),qe=i(f),Xe=n(f,"P",{});var wn=s(Xe);ci=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var xMe=s(An);Vw=r(xMe,"AutoConfig"),xMe.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var $Me=s(Ln);Xw=r($Me,"AutoModel"),$Me.forEach(t),fi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var kMe=s(xn);zw=r(kMe,"AutoTokenizer"),kMe.forEach(t),mi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),hf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var Zx=s(Ae);d$=r(Zx,"will create a model that is an instance of "),gi=n(Zx,"A",{href:!0});var SMe=s(gi);c$=r(SMe,"BertModel"),SMe.forEach(t),f$=r(Zx,"."),Zx.forEach(t),Eo=i(f),Ea=n(f,"P",{});var e9=s(Ea);m$=r(e9,"There is one class of "),pf=n(e9,"CODE",{});var RMe=s(pf);g$=r(RMe,"AutoModel"),RMe.forEach(t),Bje=r(e9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),e9.forEach(t),EPe=i(f),hi=n(f,"H2",{class:!0});var o9=s(hi);uf=n(o9,"A",{id:!0,class:!0,href:!0});var BMe=s(uf);zZ=n(BMe,"SPAN",{});var PMe=s(zZ);T(Qw.$$.fragment,PMe),PMe.forEach(t),BMe.forEach(t),Pje=i(o9),QZ=n(o9,"SPAN",{});var IMe=s(QZ);Ije=r(IMe,"Extending the Auto Classes"),IMe.forEach(t),o9.forEach(t),CPe=i(f),$n=n(f,"P",{});var df=s($n);qje=r(df,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),WZ=n(df,"CODE",{});var qMe=s(WZ);Nje=r(qMe,"NewModel"),qMe.forEach(t),jje=r(df,", make sure you have a "),HZ=n(df,"CODE",{});var NMe=s(HZ);Dje=r(NMe,"NewModelConfig"),NMe.forEach(t),Gje=r(df,` then you can add those to the auto
classes like this:`),df.forEach(t),wPe=i(f),T(Ww.$$.fragment,f),APe=i(f),h$=n(f,"P",{});var jMe=s(h$);Oje=r(jMe,"You will then be able to use the auto classes like you would usually do!"),jMe.forEach(t),yPe=i(f),T(_f.$$.fragment,f),LPe=i(f),pi=n(f,"H2",{class:!0});var r9=s(pi);bf=n(r9,"A",{id:!0,class:!0,href:!0});var DMe=s(bf);UZ=n(DMe,"SPAN",{});var GMe=s(UZ);T(Hw.$$.fragment,GMe),GMe.forEach(t),DMe.forEach(t),Vje=i(r9),JZ=n(r9,"SPAN",{});var OMe=s(JZ);Xje=r(OMe,"AutoConfig"),OMe.forEach(t),r9.forEach(t),xPe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(Uw.$$.fragment,Kr),zje=i(Kr),Jw=n(Kr,"P",{});var t9=s(Jw);Qje=r(t9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),p$=n(t9,"A",{href:!0});var VMe=s(p$);Wje=r(VMe,"from_pretrained()"),VMe.forEach(t),Hje=r(t9," class method."),t9.forEach(t),Uje=i(Kr),Yw=n(Kr,"P",{});var a9=s(Yw);Jje=r(a9,"This class cannot be instantiated directly using "),YZ=n(a9,"CODE",{});var XMe=s(YZ);Yje=r(XMe,"__init__()"),XMe.forEach(t),Kje=r(a9," (throws an error)."),a9.forEach(t),Zje=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(Kw.$$.fragment,Zr),eDe=i(Zr),KZ=n(Zr,"P",{});var zMe=s(KZ);oDe=r(zMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),zMe.forEach(t),rDe=i(Zr),ui=n(Zr,"P",{});var cf=s(ui);tDe=r(cf,"The configuration class to instantiate is selected based on the "),ZZ=n(cf,"CODE",{});var QMe=s(ZZ);aDe=r(QMe,"model_type"),QMe.forEach(t),nDe=r(cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),eee=n(cf,"CODE",{});var WMe=s(eee);sDe=r(WMe,"pretrained_model_name_or_path"),WMe.forEach(t),lDe=r(cf,":"),cf.forEach(t),iDe=i(Zr),y=n(Zr,"UL",{});var L=s(y);vf=n(L,"LI",{});var CC=s(vf);oee=n(CC,"STRONG",{});var HMe=s(oee);dDe=r(HMe,"albert"),HMe.forEach(t),cDe=r(CC," \u2014 "),u$=n(CC,"A",{href:!0});var UMe=s(u$);fDe=r(UMe,"AlbertConfig"),UMe.forEach(t),mDe=r(CC," (ALBERT model)"),CC.forEach(t),gDe=i(L),Ff=n(L,"LI",{});var wC=s(Ff);ree=n(wC,"STRONG",{});var JMe=s(ree);hDe=r(JMe,"bart"),JMe.forEach(t),pDe=r(wC," \u2014 "),_$=n(wC,"A",{href:!0});var YMe=s(_$);uDe=r(YMe,"BartConfig"),YMe.forEach(t),_De=r(wC," (BART model)"),wC.forEach(t),bDe=i(L),Tf=n(L,"LI",{});var AC=s(Tf);tee=n(AC,"STRONG",{});var KMe=s(tee);vDe=r(KMe,"beit"),KMe.forEach(t),FDe=r(AC," \u2014 "),b$=n(AC,"A",{href:!0});var ZMe=s(b$);TDe=r(ZMe,"BeitConfig"),ZMe.forEach(t),MDe=r(AC," (BEiT model)"),AC.forEach(t),EDe=i(L),Mf=n(L,"LI",{});var yC=s(Mf);aee=n(yC,"STRONG",{});var e4e=s(aee);CDe=r(e4e,"bert"),e4e.forEach(t),wDe=r(yC," \u2014 "),v$=n(yC,"A",{href:!0});var o4e=s(v$);ADe=r(o4e,"BertConfig"),o4e.forEach(t),yDe=r(yC," (BERT model)"),yC.forEach(t),LDe=i(L),Ef=n(L,"LI",{});var LC=s(Ef);nee=n(LC,"STRONG",{});var r4e=s(nee);xDe=r(r4e,"bert-generation"),r4e.forEach(t),$De=r(LC," \u2014 "),F$=n(LC,"A",{href:!0});var t4e=s(F$);kDe=r(t4e,"BertGenerationConfig"),t4e.forEach(t),SDe=r(LC," (Bert Generation model)"),LC.forEach(t),RDe=i(L),Cf=n(L,"LI",{});var xC=s(Cf);see=n(xC,"STRONG",{});var a4e=s(see);BDe=r(a4e,"big_bird"),a4e.forEach(t),PDe=r(xC," \u2014 "),T$=n(xC,"A",{href:!0});var n4e=s(T$);IDe=r(n4e,"BigBirdConfig"),n4e.forEach(t),qDe=r(xC," (BigBird model)"),xC.forEach(t),NDe=i(L),wf=n(L,"LI",{});var $C=s(wf);lee=n($C,"STRONG",{});var s4e=s(lee);jDe=r(s4e,"bigbird_pegasus"),s4e.forEach(t),DDe=r($C," \u2014 "),M$=n($C,"A",{href:!0});var l4e=s(M$);GDe=r(l4e,"BigBirdPegasusConfig"),l4e.forEach(t),ODe=r($C," (BigBirdPegasus model)"),$C.forEach(t),VDe=i(L),Af=n(L,"LI",{});var kC=s(Af);iee=n(kC,"STRONG",{});var i4e=s(iee);XDe=r(i4e,"blenderbot"),i4e.forEach(t),zDe=r(kC," \u2014 "),E$=n(kC,"A",{href:!0});var d4e=s(E$);QDe=r(d4e,"BlenderbotConfig"),d4e.forEach(t),WDe=r(kC," (Blenderbot model)"),kC.forEach(t),HDe=i(L),yf=n(L,"LI",{});var SC=s(yf);dee=n(SC,"STRONG",{});var c4e=s(dee);UDe=r(c4e,"blenderbot-small"),c4e.forEach(t),JDe=r(SC," \u2014 "),C$=n(SC,"A",{href:!0});var f4e=s(C$);YDe=r(f4e,"BlenderbotSmallConfig"),f4e.forEach(t),KDe=r(SC," (BlenderbotSmall model)"),SC.forEach(t),ZDe=i(L),Lf=n(L,"LI",{});var RC=s(Lf);cee=n(RC,"STRONG",{});var m4e=s(cee);eGe=r(m4e,"camembert"),m4e.forEach(t),oGe=r(RC," \u2014 "),w$=n(RC,"A",{href:!0});var g4e=s(w$);rGe=r(g4e,"CamembertConfig"),g4e.forEach(t),tGe=r(RC," (CamemBERT model)"),RC.forEach(t),aGe=i(L),xf=n(L,"LI",{});var BC=s(xf);fee=n(BC,"STRONG",{});var h4e=s(fee);nGe=r(h4e,"canine"),h4e.forEach(t),sGe=r(BC," \u2014 "),A$=n(BC,"A",{href:!0});var p4e=s(A$);lGe=r(p4e,"CanineConfig"),p4e.forEach(t),iGe=r(BC," (Canine model)"),BC.forEach(t),dGe=i(L),$f=n(L,"LI",{});var PC=s($f);mee=n(PC,"STRONG",{});var u4e=s(mee);cGe=r(u4e,"clip"),u4e.forEach(t),fGe=r(PC," \u2014 "),y$=n(PC,"A",{href:!0});var _4e=s(y$);mGe=r(_4e,"CLIPConfig"),_4e.forEach(t),gGe=r(PC," (CLIP model)"),PC.forEach(t),hGe=i(L),kf=n(L,"LI",{});var IC=s(kf);gee=n(IC,"STRONG",{});var b4e=s(gee);pGe=r(b4e,"convbert"),b4e.forEach(t),uGe=r(IC," \u2014 "),L$=n(IC,"A",{href:!0});var v4e=s(L$);_Ge=r(v4e,"ConvBertConfig"),v4e.forEach(t),bGe=r(IC," (ConvBERT model)"),IC.forEach(t),vGe=i(L),Sf=n(L,"LI",{});var qC=s(Sf);hee=n(qC,"STRONG",{});var F4e=s(hee);FGe=r(F4e,"convnext"),F4e.forEach(t),TGe=r(qC," \u2014 "),x$=n(qC,"A",{href:!0});var T4e=s(x$);MGe=r(T4e,"ConvNextConfig"),T4e.forEach(t),EGe=r(qC," (ConvNext model)"),qC.forEach(t),CGe=i(L),Rf=n(L,"LI",{});var NC=s(Rf);pee=n(NC,"STRONG",{});var M4e=s(pee);wGe=r(M4e,"ctrl"),M4e.forEach(t),AGe=r(NC," \u2014 "),$$=n(NC,"A",{href:!0});var E4e=s($$);yGe=r(E4e,"CTRLConfig"),E4e.forEach(t),LGe=r(NC," (CTRL model)"),NC.forEach(t),xGe=i(L),Bf=n(L,"LI",{});var jC=s(Bf);uee=n(jC,"STRONG",{});var C4e=s(uee);$Ge=r(C4e,"data2vec-audio"),C4e.forEach(t),kGe=r(jC," \u2014 "),k$=n(jC,"A",{href:!0});var w4e=s(k$);SGe=r(w4e,"Data2VecAudioConfig"),w4e.forEach(t),RGe=r(jC," (Data2VecAudio model)"),jC.forEach(t),BGe=i(L),Pf=n(L,"LI",{});var DC=s(Pf);_ee=n(DC,"STRONG",{});var A4e=s(_ee);PGe=r(A4e,"data2vec-text"),A4e.forEach(t),IGe=r(DC," \u2014 "),S$=n(DC,"A",{href:!0});var y4e=s(S$);qGe=r(y4e,"Data2VecTextConfig"),y4e.forEach(t),NGe=r(DC," (Data2VecText model)"),DC.forEach(t),jGe=i(L),If=n(L,"LI",{});var GC=s(If);bee=n(GC,"STRONG",{});var L4e=s(bee);DGe=r(L4e,"data2vec-vision"),L4e.forEach(t),GGe=r(GC," \u2014 "),R$=n(GC,"A",{href:!0});var x4e=s(R$);OGe=r(x4e,"Data2VecVisionConfig"),x4e.forEach(t),VGe=r(GC," (Data2VecVision model)"),GC.forEach(t),XGe=i(L),qf=n(L,"LI",{});var OC=s(qf);vee=n(OC,"STRONG",{});var $4e=s(vee);zGe=r($4e,"deberta"),$4e.forEach(t),QGe=r(OC," \u2014 "),B$=n(OC,"A",{href:!0});var k4e=s(B$);WGe=r(k4e,"DebertaConfig"),k4e.forEach(t),HGe=r(OC," (DeBERTa model)"),OC.forEach(t),UGe=i(L),Nf=n(L,"LI",{});var VC=s(Nf);Fee=n(VC,"STRONG",{});var S4e=s(Fee);JGe=r(S4e,"deberta-v2"),S4e.forEach(t),YGe=r(VC," \u2014 "),P$=n(VC,"A",{href:!0});var R4e=s(P$);KGe=r(R4e,"DebertaV2Config"),R4e.forEach(t),ZGe=r(VC," (DeBERTa-v2 model)"),VC.forEach(t),eOe=i(L),jf=n(L,"LI",{});var XC=s(jf);Tee=n(XC,"STRONG",{});var B4e=s(Tee);oOe=r(B4e,"decision_transformer"),B4e.forEach(t),rOe=r(XC," \u2014 "),I$=n(XC,"A",{href:!0});var P4e=s(I$);tOe=r(P4e,"DecisionTransformerConfig"),P4e.forEach(t),aOe=r(XC," (Decision Transformer model)"),XC.forEach(t),nOe=i(L),Df=n(L,"LI",{});var zC=s(Df);Mee=n(zC,"STRONG",{});var I4e=s(Mee);sOe=r(I4e,"deit"),I4e.forEach(t),lOe=r(zC," \u2014 "),q$=n(zC,"A",{href:!0});var q4e=s(q$);iOe=r(q4e,"DeiTConfig"),q4e.forEach(t),dOe=r(zC," (DeiT model)"),zC.forEach(t),cOe=i(L),Gf=n(L,"LI",{});var QC=s(Gf);Eee=n(QC,"STRONG",{});var N4e=s(Eee);fOe=r(N4e,"detr"),N4e.forEach(t),mOe=r(QC," \u2014 "),N$=n(QC,"A",{href:!0});var Qqr=s(N$);gOe=r(Qqr,"DetrConfig"),Qqr.forEach(t),hOe=r(QC," (DETR model)"),QC.forEach(t),pOe=i(L),Of=n(L,"LI",{});var j4e=s(Of);Cee=n(j4e,"STRONG",{});var Wqr=s(Cee);uOe=r(Wqr,"distilbert"),Wqr.forEach(t),_Oe=r(j4e," \u2014 "),j$=n(j4e,"A",{href:!0});var Hqr=s(j$);bOe=r(Hqr,"DistilBertConfig"),Hqr.forEach(t),vOe=r(j4e," (DistilBERT model)"),j4e.forEach(t),FOe=i(L),Vf=n(L,"LI",{});var D4e=s(Vf);wee=n(D4e,"STRONG",{});var Uqr=s(wee);TOe=r(Uqr,"dpr"),Uqr.forEach(t),MOe=r(D4e," \u2014 "),D$=n(D4e,"A",{href:!0});var Jqr=s(D$);EOe=r(Jqr,"DPRConfig"),Jqr.forEach(t),COe=r(D4e," (DPR model)"),D4e.forEach(t),wOe=i(L),Xf=n(L,"LI",{});var G4e=s(Xf);Aee=n(G4e,"STRONG",{});var Yqr=s(Aee);AOe=r(Yqr,"dpt"),Yqr.forEach(t),yOe=r(G4e," \u2014 "),G$=n(G4e,"A",{href:!0});var Kqr=s(G$);LOe=r(Kqr,"DPTConfig"),Kqr.forEach(t),xOe=r(G4e," (DPT model)"),G4e.forEach(t),$Oe=i(L),zf=n(L,"LI",{});var O4e=s(zf);yee=n(O4e,"STRONG",{});var Zqr=s(yee);kOe=r(Zqr,"electra"),Zqr.forEach(t),SOe=r(O4e," \u2014 "),O$=n(O4e,"A",{href:!0});var eNr=s(O$);ROe=r(eNr,"ElectraConfig"),eNr.forEach(t),BOe=r(O4e," (ELECTRA model)"),O4e.forEach(t),POe=i(L),Qf=n(L,"LI",{});var V4e=s(Qf);Lee=n(V4e,"STRONG",{});var oNr=s(Lee);IOe=r(oNr,"encoder-decoder"),oNr.forEach(t),qOe=r(V4e," \u2014 "),V$=n(V4e,"A",{href:!0});var rNr=s(V$);NOe=r(rNr,"EncoderDecoderConfig"),rNr.forEach(t),jOe=r(V4e," (Encoder decoder model)"),V4e.forEach(t),DOe=i(L),Wf=n(L,"LI",{});var X4e=s(Wf);xee=n(X4e,"STRONG",{});var tNr=s(xee);GOe=r(tNr,"flaubert"),tNr.forEach(t),OOe=r(X4e," \u2014 "),X$=n(X4e,"A",{href:!0});var aNr=s(X$);VOe=r(aNr,"FlaubertConfig"),aNr.forEach(t),XOe=r(X4e," (FlauBERT model)"),X4e.forEach(t),zOe=i(L),Hf=n(L,"LI",{});var z4e=s(Hf);$ee=n(z4e,"STRONG",{});var nNr=s($ee);QOe=r(nNr,"fnet"),nNr.forEach(t),WOe=r(z4e," \u2014 "),z$=n(z4e,"A",{href:!0});var sNr=s(z$);HOe=r(sNr,"FNetConfig"),sNr.forEach(t),UOe=r(z4e," (FNet model)"),z4e.forEach(t),JOe=i(L),Uf=n(L,"LI",{});var Q4e=s(Uf);kee=n(Q4e,"STRONG",{});var lNr=s(kee);YOe=r(lNr,"fsmt"),lNr.forEach(t),KOe=r(Q4e," \u2014 "),Q$=n(Q4e,"A",{href:!0});var iNr=s(Q$);ZOe=r(iNr,"FSMTConfig"),iNr.forEach(t),eVe=r(Q4e," (FairSeq Machine-Translation model)"),Q4e.forEach(t),oVe=i(L),Jf=n(L,"LI",{});var W4e=s(Jf);See=n(W4e,"STRONG",{});var dNr=s(See);rVe=r(dNr,"funnel"),dNr.forEach(t),tVe=r(W4e," \u2014 "),W$=n(W4e,"A",{href:!0});var cNr=s(W$);aVe=r(cNr,"FunnelConfig"),cNr.forEach(t),nVe=r(W4e," (Funnel Transformer model)"),W4e.forEach(t),sVe=i(L),Yf=n(L,"LI",{});var H4e=s(Yf);Ree=n(H4e,"STRONG",{});var fNr=s(Ree);lVe=r(fNr,"glpn"),fNr.forEach(t),iVe=r(H4e," \u2014 "),H$=n(H4e,"A",{href:!0});var mNr=s(H$);dVe=r(mNr,"GLPNConfig"),mNr.forEach(t),cVe=r(H4e," (GLPN model)"),H4e.forEach(t),fVe=i(L),Kf=n(L,"LI",{});var U4e=s(Kf);Bee=n(U4e,"STRONG",{});var gNr=s(Bee);mVe=r(gNr,"gpt2"),gNr.forEach(t),gVe=r(U4e," \u2014 "),U$=n(U4e,"A",{href:!0});var hNr=s(U$);hVe=r(hNr,"GPT2Config"),hNr.forEach(t),pVe=r(U4e," (OpenAI GPT-2 model)"),U4e.forEach(t),uVe=i(L),Zf=n(L,"LI",{});var J4e=s(Zf);Pee=n(J4e,"STRONG",{});var pNr=s(Pee);_Ve=r(pNr,"gpt_neo"),pNr.forEach(t),bVe=r(J4e," \u2014 "),J$=n(J4e,"A",{href:!0});var uNr=s(J$);vVe=r(uNr,"GPTNeoConfig"),uNr.forEach(t),FVe=r(J4e," (GPT Neo model)"),J4e.forEach(t),TVe=i(L),em=n(L,"LI",{});var Y4e=s(em);Iee=n(Y4e,"STRONG",{});var _Nr=s(Iee);MVe=r(_Nr,"gptj"),_Nr.forEach(t),EVe=r(Y4e," \u2014 "),Y$=n(Y4e,"A",{href:!0});var bNr=s(Y$);CVe=r(bNr,"GPTJConfig"),bNr.forEach(t),wVe=r(Y4e," (GPT-J model)"),Y4e.forEach(t),AVe=i(L),om=n(L,"LI",{});var K4e=s(om);qee=n(K4e,"STRONG",{});var vNr=s(qee);yVe=r(vNr,"hubert"),vNr.forEach(t),LVe=r(K4e," \u2014 "),K$=n(K4e,"A",{href:!0});var FNr=s(K$);xVe=r(FNr,"HubertConfig"),FNr.forEach(t),$Ve=r(K4e," (Hubert model)"),K4e.forEach(t),kVe=i(L),rm=n(L,"LI",{});var Z4e=s(rm);Nee=n(Z4e,"STRONG",{});var TNr=s(Nee);SVe=r(TNr,"ibert"),TNr.forEach(t),RVe=r(Z4e," \u2014 "),Z$=n(Z4e,"A",{href:!0});var MNr=s(Z$);BVe=r(MNr,"IBertConfig"),MNr.forEach(t),PVe=r(Z4e," (I-BERT model)"),Z4e.forEach(t),IVe=i(L),tm=n(L,"LI",{});var eEe=s(tm);jee=n(eEe,"STRONG",{});var ENr=s(jee);qVe=r(ENr,"imagegpt"),ENr.forEach(t),NVe=r(eEe," \u2014 "),ek=n(eEe,"A",{href:!0});var CNr=s(ek);jVe=r(CNr,"ImageGPTConfig"),CNr.forEach(t),DVe=r(eEe," (ImageGPT model)"),eEe.forEach(t),GVe=i(L),am=n(L,"LI",{});var oEe=s(am);Dee=n(oEe,"STRONG",{});var wNr=s(Dee);OVe=r(wNr,"layoutlm"),wNr.forEach(t),VVe=r(oEe," \u2014 "),ok=n(oEe,"A",{href:!0});var ANr=s(ok);XVe=r(ANr,"LayoutLMConfig"),ANr.forEach(t),zVe=r(oEe," (LayoutLM model)"),oEe.forEach(t),QVe=i(L),nm=n(L,"LI",{});var rEe=s(nm);Gee=n(rEe,"STRONG",{});var yNr=s(Gee);WVe=r(yNr,"layoutlmv2"),yNr.forEach(t),HVe=r(rEe," \u2014 "),rk=n(rEe,"A",{href:!0});var LNr=s(rk);UVe=r(LNr,"LayoutLMv2Config"),LNr.forEach(t),JVe=r(rEe," (LayoutLMv2 model)"),rEe.forEach(t),YVe=i(L),sm=n(L,"LI",{});var tEe=s(sm);Oee=n(tEe,"STRONG",{});var xNr=s(Oee);KVe=r(xNr,"led"),xNr.forEach(t),ZVe=r(tEe," \u2014 "),tk=n(tEe,"A",{href:!0});var $Nr=s(tk);eXe=r($Nr,"LEDConfig"),$Nr.forEach(t),oXe=r(tEe," (LED model)"),tEe.forEach(t),rXe=i(L),lm=n(L,"LI",{});var aEe=s(lm);Vee=n(aEe,"STRONG",{});var kNr=s(Vee);tXe=r(kNr,"longformer"),kNr.forEach(t),aXe=r(aEe," \u2014 "),ak=n(aEe,"A",{href:!0});var SNr=s(ak);nXe=r(SNr,"LongformerConfig"),SNr.forEach(t),sXe=r(aEe," (Longformer model)"),aEe.forEach(t),lXe=i(L),im=n(L,"LI",{});var nEe=s(im);Xee=n(nEe,"STRONG",{});var RNr=s(Xee);iXe=r(RNr,"luke"),RNr.forEach(t),dXe=r(nEe," \u2014 "),nk=n(nEe,"A",{href:!0});var BNr=s(nk);cXe=r(BNr,"LukeConfig"),BNr.forEach(t),fXe=r(nEe," (LUKE model)"),nEe.forEach(t),mXe=i(L),dm=n(L,"LI",{});var sEe=s(dm);zee=n(sEe,"STRONG",{});var PNr=s(zee);gXe=r(PNr,"lxmert"),PNr.forEach(t),hXe=r(sEe," \u2014 "),sk=n(sEe,"A",{href:!0});var INr=s(sk);pXe=r(INr,"LxmertConfig"),INr.forEach(t),uXe=r(sEe," (LXMERT model)"),sEe.forEach(t),_Xe=i(L),cm=n(L,"LI",{});var lEe=s(cm);Qee=n(lEe,"STRONG",{});var qNr=s(Qee);bXe=r(qNr,"m2m_100"),qNr.forEach(t),vXe=r(lEe," \u2014 "),lk=n(lEe,"A",{href:!0});var NNr=s(lk);FXe=r(NNr,"M2M100Config"),NNr.forEach(t),TXe=r(lEe," (M2M100 model)"),lEe.forEach(t),MXe=i(L),fm=n(L,"LI",{});var iEe=s(fm);Wee=n(iEe,"STRONG",{});var jNr=s(Wee);EXe=r(jNr,"marian"),jNr.forEach(t),CXe=r(iEe," \u2014 "),ik=n(iEe,"A",{href:!0});var DNr=s(ik);wXe=r(DNr,"MarianConfig"),DNr.forEach(t),AXe=r(iEe," (Marian model)"),iEe.forEach(t),yXe=i(L),mm=n(L,"LI",{});var dEe=s(mm);Hee=n(dEe,"STRONG",{});var GNr=s(Hee);LXe=r(GNr,"maskformer"),GNr.forEach(t),xXe=r(dEe," \u2014 "),dk=n(dEe,"A",{href:!0});var ONr=s(dk);$Xe=r(ONr,"MaskFormerConfig"),ONr.forEach(t),kXe=r(dEe," (MaskFormer model)"),dEe.forEach(t),SXe=i(L),gm=n(L,"LI",{});var cEe=s(gm);Uee=n(cEe,"STRONG",{});var VNr=s(Uee);RXe=r(VNr,"mbart"),VNr.forEach(t),BXe=r(cEe," \u2014 "),ck=n(cEe,"A",{href:!0});var XNr=s(ck);PXe=r(XNr,"MBartConfig"),XNr.forEach(t),IXe=r(cEe," (mBART model)"),cEe.forEach(t),qXe=i(L),hm=n(L,"LI",{});var fEe=s(hm);Jee=n(fEe,"STRONG",{});var zNr=s(Jee);NXe=r(zNr,"megatron-bert"),zNr.forEach(t),jXe=r(fEe," \u2014 "),fk=n(fEe,"A",{href:!0});var QNr=s(fk);DXe=r(QNr,"MegatronBertConfig"),QNr.forEach(t),GXe=r(fEe," (MegatronBert model)"),fEe.forEach(t),OXe=i(L),pm=n(L,"LI",{});var mEe=s(pm);Yee=n(mEe,"STRONG",{});var WNr=s(Yee);VXe=r(WNr,"mobilebert"),WNr.forEach(t),XXe=r(mEe," \u2014 "),mk=n(mEe,"A",{href:!0});var HNr=s(mk);zXe=r(HNr,"MobileBertConfig"),HNr.forEach(t),QXe=r(mEe," (MobileBERT model)"),mEe.forEach(t),WXe=i(L),um=n(L,"LI",{});var gEe=s(um);Kee=n(gEe,"STRONG",{});var UNr=s(Kee);HXe=r(UNr,"mpnet"),UNr.forEach(t),UXe=r(gEe," \u2014 "),gk=n(gEe,"A",{href:!0});var JNr=s(gk);JXe=r(JNr,"MPNetConfig"),JNr.forEach(t),YXe=r(gEe," (MPNet model)"),gEe.forEach(t),KXe=i(L),_m=n(L,"LI",{});var hEe=s(_m);Zee=n(hEe,"STRONG",{});var YNr=s(Zee);ZXe=r(YNr,"mt5"),YNr.forEach(t),eze=r(hEe," \u2014 "),hk=n(hEe,"A",{href:!0});var KNr=s(hk);oze=r(KNr,"MT5Config"),KNr.forEach(t),rze=r(hEe," (mT5 model)"),hEe.forEach(t),tze=i(L),bm=n(L,"LI",{});var pEe=s(bm);eoe=n(pEe,"STRONG",{});var ZNr=s(eoe);aze=r(ZNr,"nystromformer"),ZNr.forEach(t),nze=r(pEe," \u2014 "),pk=n(pEe,"A",{href:!0});var ejr=s(pk);sze=r(ejr,"NystromformerConfig"),ejr.forEach(t),lze=r(pEe," (Nystromformer model)"),pEe.forEach(t),ize=i(L),vm=n(L,"LI",{});var uEe=s(vm);ooe=n(uEe,"STRONG",{});var ojr=s(ooe);dze=r(ojr,"openai-gpt"),ojr.forEach(t),cze=r(uEe," \u2014 "),uk=n(uEe,"A",{href:!0});var rjr=s(uk);fze=r(rjr,"OpenAIGPTConfig"),rjr.forEach(t),mze=r(uEe," (OpenAI GPT model)"),uEe.forEach(t),gze=i(L),Fm=n(L,"LI",{});var _Ee=s(Fm);roe=n(_Ee,"STRONG",{});var tjr=s(roe);hze=r(tjr,"opt"),tjr.forEach(t),pze=r(_Ee," \u2014 "),_k=n(_Ee,"A",{href:!0});var ajr=s(_k);uze=r(ajr,"OPTConfig"),ajr.forEach(t),_ze=r(_Ee," (OPT model)"),_Ee.forEach(t),bze=i(L),Tm=n(L,"LI",{});var bEe=s(Tm);toe=n(bEe,"STRONG",{});var njr=s(toe);vze=r(njr,"pegasus"),njr.forEach(t),Fze=r(bEe," \u2014 "),bk=n(bEe,"A",{href:!0});var sjr=s(bk);Tze=r(sjr,"PegasusConfig"),sjr.forEach(t),Mze=r(bEe," (Pegasus model)"),bEe.forEach(t),Eze=i(L),Mm=n(L,"LI",{});var vEe=s(Mm);aoe=n(vEe,"STRONG",{});var ljr=s(aoe);Cze=r(ljr,"perceiver"),ljr.forEach(t),wze=r(vEe," \u2014 "),vk=n(vEe,"A",{href:!0});var ijr=s(vk);Aze=r(ijr,"PerceiverConfig"),ijr.forEach(t),yze=r(vEe," (Perceiver model)"),vEe.forEach(t),Lze=i(L),Em=n(L,"LI",{});var FEe=s(Em);noe=n(FEe,"STRONG",{});var djr=s(noe);xze=r(djr,"plbart"),djr.forEach(t),$ze=r(FEe," \u2014 "),Fk=n(FEe,"A",{href:!0});var cjr=s(Fk);kze=r(cjr,"PLBartConfig"),cjr.forEach(t),Sze=r(FEe," (PLBart model)"),FEe.forEach(t),Rze=i(L),Cm=n(L,"LI",{});var TEe=s(Cm);soe=n(TEe,"STRONG",{});var fjr=s(soe);Bze=r(fjr,"poolformer"),fjr.forEach(t),Pze=r(TEe," \u2014 "),Tk=n(TEe,"A",{href:!0});var mjr=s(Tk);Ize=r(mjr,"PoolFormerConfig"),mjr.forEach(t),qze=r(TEe," (PoolFormer model)"),TEe.forEach(t),Nze=i(L),wm=n(L,"LI",{});var MEe=s(wm);loe=n(MEe,"STRONG",{});var gjr=s(loe);jze=r(gjr,"prophetnet"),gjr.forEach(t),Dze=r(MEe," \u2014 "),Mk=n(MEe,"A",{href:!0});var hjr=s(Mk);Gze=r(hjr,"ProphetNetConfig"),hjr.forEach(t),Oze=r(MEe," (ProphetNet model)"),MEe.forEach(t),Vze=i(L),Am=n(L,"LI",{});var EEe=s(Am);ioe=n(EEe,"STRONG",{});var pjr=s(ioe);Xze=r(pjr,"qdqbert"),pjr.forEach(t),zze=r(EEe," \u2014 "),Ek=n(EEe,"A",{href:!0});var ujr=s(Ek);Qze=r(ujr,"QDQBertConfig"),ujr.forEach(t),Wze=r(EEe," (QDQBert model)"),EEe.forEach(t),Hze=i(L),ym=n(L,"LI",{});var CEe=s(ym);doe=n(CEe,"STRONG",{});var _jr=s(doe);Uze=r(_jr,"rag"),_jr.forEach(t),Jze=r(CEe," \u2014 "),Ck=n(CEe,"A",{href:!0});var bjr=s(Ck);Yze=r(bjr,"RagConfig"),bjr.forEach(t),Kze=r(CEe," (RAG model)"),CEe.forEach(t),Zze=i(L),Lm=n(L,"LI",{});var wEe=s(Lm);coe=n(wEe,"STRONG",{});var vjr=s(coe);eQe=r(vjr,"realm"),vjr.forEach(t),oQe=r(wEe," \u2014 "),wk=n(wEe,"A",{href:!0});var Fjr=s(wk);rQe=r(Fjr,"RealmConfig"),Fjr.forEach(t),tQe=r(wEe," (Realm model)"),wEe.forEach(t),aQe=i(L),xm=n(L,"LI",{});var AEe=s(xm);foe=n(AEe,"STRONG",{});var Tjr=s(foe);nQe=r(Tjr,"reformer"),Tjr.forEach(t),sQe=r(AEe," \u2014 "),Ak=n(AEe,"A",{href:!0});var Mjr=s(Ak);lQe=r(Mjr,"ReformerConfig"),Mjr.forEach(t),iQe=r(AEe," (Reformer model)"),AEe.forEach(t),dQe=i(L),$m=n(L,"LI",{});var yEe=s($m);moe=n(yEe,"STRONG",{});var Ejr=s(moe);cQe=r(Ejr,"regnet"),Ejr.forEach(t),fQe=r(yEe," \u2014 "),yk=n(yEe,"A",{href:!0});var Cjr=s(yk);mQe=r(Cjr,"RegNetConfig"),Cjr.forEach(t),gQe=r(yEe," (RegNet model)"),yEe.forEach(t),hQe=i(L),km=n(L,"LI",{});var LEe=s(km);goe=n(LEe,"STRONG",{});var wjr=s(goe);pQe=r(wjr,"rembert"),wjr.forEach(t),uQe=r(LEe," \u2014 "),Lk=n(LEe,"A",{href:!0});var Ajr=s(Lk);_Qe=r(Ajr,"RemBertConfig"),Ajr.forEach(t),bQe=r(LEe," (RemBERT model)"),LEe.forEach(t),vQe=i(L),Sm=n(L,"LI",{});var xEe=s(Sm);hoe=n(xEe,"STRONG",{});var yjr=s(hoe);FQe=r(yjr,"resnet"),yjr.forEach(t),TQe=r(xEe," \u2014 "),xk=n(xEe,"A",{href:!0});var Ljr=s(xk);MQe=r(Ljr,"ResNetConfig"),Ljr.forEach(t),EQe=r(xEe," (ResNet model)"),xEe.forEach(t),CQe=i(L),Rm=n(L,"LI",{});var $Ee=s(Rm);poe=n($Ee,"STRONG",{});var xjr=s(poe);wQe=r(xjr,"retribert"),xjr.forEach(t),AQe=r($Ee," \u2014 "),$k=n($Ee,"A",{href:!0});var $jr=s($k);yQe=r($jr,"RetriBertConfig"),$jr.forEach(t),LQe=r($Ee," (RetriBERT model)"),$Ee.forEach(t),xQe=i(L),Bm=n(L,"LI",{});var kEe=s(Bm);uoe=n(kEe,"STRONG",{});var kjr=s(uoe);$Qe=r(kjr,"roberta"),kjr.forEach(t),kQe=r(kEe," \u2014 "),kk=n(kEe,"A",{href:!0});var Sjr=s(kk);SQe=r(Sjr,"RobertaConfig"),Sjr.forEach(t),RQe=r(kEe," (RoBERTa model)"),kEe.forEach(t),BQe=i(L),Pm=n(L,"LI",{});var SEe=s(Pm);_oe=n(SEe,"STRONG",{});var Rjr=s(_oe);PQe=r(Rjr,"roformer"),Rjr.forEach(t),IQe=r(SEe," \u2014 "),Sk=n(SEe,"A",{href:!0});var Bjr=s(Sk);qQe=r(Bjr,"RoFormerConfig"),Bjr.forEach(t),NQe=r(SEe," (RoFormer model)"),SEe.forEach(t),jQe=i(L),Im=n(L,"LI",{});var REe=s(Im);boe=n(REe,"STRONG",{});var Pjr=s(boe);DQe=r(Pjr,"segformer"),Pjr.forEach(t),GQe=r(REe," \u2014 "),Rk=n(REe,"A",{href:!0});var Ijr=s(Rk);OQe=r(Ijr,"SegformerConfig"),Ijr.forEach(t),VQe=r(REe," (SegFormer model)"),REe.forEach(t),XQe=i(L),qm=n(L,"LI",{});var BEe=s(qm);voe=n(BEe,"STRONG",{});var qjr=s(voe);zQe=r(qjr,"sew"),qjr.forEach(t),QQe=r(BEe," \u2014 "),Bk=n(BEe,"A",{href:!0});var Njr=s(Bk);WQe=r(Njr,"SEWConfig"),Njr.forEach(t),HQe=r(BEe," (SEW model)"),BEe.forEach(t),UQe=i(L),Nm=n(L,"LI",{});var PEe=s(Nm);Foe=n(PEe,"STRONG",{});var jjr=s(Foe);JQe=r(jjr,"sew-d"),jjr.forEach(t),YQe=r(PEe," \u2014 "),Pk=n(PEe,"A",{href:!0});var Djr=s(Pk);KQe=r(Djr,"SEWDConfig"),Djr.forEach(t),ZQe=r(PEe," (SEW-D model)"),PEe.forEach(t),eWe=i(L),jm=n(L,"LI",{});var IEe=s(jm);Toe=n(IEe,"STRONG",{});var Gjr=s(Toe);oWe=r(Gjr,"speech-encoder-decoder"),Gjr.forEach(t),rWe=r(IEe," \u2014 "),Ik=n(IEe,"A",{href:!0});var Ojr=s(Ik);tWe=r(Ojr,"SpeechEncoderDecoderConfig"),Ojr.forEach(t),aWe=r(IEe," (Speech Encoder decoder model)"),IEe.forEach(t),nWe=i(L),Dm=n(L,"LI",{});var qEe=s(Dm);Moe=n(qEe,"STRONG",{});var Vjr=s(Moe);sWe=r(Vjr,"speech_to_text"),Vjr.forEach(t),lWe=r(qEe," \u2014 "),qk=n(qEe,"A",{href:!0});var Xjr=s(qk);iWe=r(Xjr,"Speech2TextConfig"),Xjr.forEach(t),dWe=r(qEe," (Speech2Text model)"),qEe.forEach(t),cWe=i(L),Gm=n(L,"LI",{});var NEe=s(Gm);Eoe=n(NEe,"STRONG",{});var zjr=s(Eoe);fWe=r(zjr,"speech_to_text_2"),zjr.forEach(t),mWe=r(NEe," \u2014 "),Nk=n(NEe,"A",{href:!0});var Qjr=s(Nk);gWe=r(Qjr,"Speech2Text2Config"),Qjr.forEach(t),hWe=r(NEe," (Speech2Text2 model)"),NEe.forEach(t),pWe=i(L),Om=n(L,"LI",{});var jEe=s(Om);Coe=n(jEe,"STRONG",{});var Wjr=s(Coe);uWe=r(Wjr,"splinter"),Wjr.forEach(t),_We=r(jEe," \u2014 "),jk=n(jEe,"A",{href:!0});var Hjr=s(jk);bWe=r(Hjr,"SplinterConfig"),Hjr.forEach(t),vWe=r(jEe," (Splinter model)"),jEe.forEach(t),FWe=i(L),Vm=n(L,"LI",{});var DEe=s(Vm);woe=n(DEe,"STRONG",{});var Ujr=s(woe);TWe=r(Ujr,"squeezebert"),Ujr.forEach(t),MWe=r(DEe," \u2014 "),Dk=n(DEe,"A",{href:!0});var Jjr=s(Dk);EWe=r(Jjr,"SqueezeBertConfig"),Jjr.forEach(t),CWe=r(DEe," (SqueezeBERT model)"),DEe.forEach(t),wWe=i(L),Xm=n(L,"LI",{});var GEe=s(Xm);Aoe=n(GEe,"STRONG",{});var Yjr=s(Aoe);AWe=r(Yjr,"swin"),Yjr.forEach(t),yWe=r(GEe," \u2014 "),Gk=n(GEe,"A",{href:!0});var Kjr=s(Gk);LWe=r(Kjr,"SwinConfig"),Kjr.forEach(t),xWe=r(GEe," (Swin model)"),GEe.forEach(t),$We=i(L),zm=n(L,"LI",{});var OEe=s(zm);yoe=n(OEe,"STRONG",{});var Zjr=s(yoe);kWe=r(Zjr,"t5"),Zjr.forEach(t),SWe=r(OEe," \u2014 "),Ok=n(OEe,"A",{href:!0});var eDr=s(Ok);RWe=r(eDr,"T5Config"),eDr.forEach(t),BWe=r(OEe," (T5 model)"),OEe.forEach(t),PWe=i(L),Qm=n(L,"LI",{});var VEe=s(Qm);Loe=n(VEe,"STRONG",{});var oDr=s(Loe);IWe=r(oDr,"tapas"),oDr.forEach(t),qWe=r(VEe," \u2014 "),Vk=n(VEe,"A",{href:!0});var rDr=s(Vk);NWe=r(rDr,"TapasConfig"),rDr.forEach(t),jWe=r(VEe," (TAPAS model)"),VEe.forEach(t),DWe=i(L),Wm=n(L,"LI",{});var XEe=s(Wm);xoe=n(XEe,"STRONG",{});var tDr=s(xoe);GWe=r(tDr,"tapex"),tDr.forEach(t),OWe=r(XEe," \u2014 "),Xk=n(XEe,"A",{href:!0});var aDr=s(Xk);VWe=r(aDr,"BartConfig"),aDr.forEach(t),XWe=r(XEe," (TAPEX model)"),XEe.forEach(t),zWe=i(L),Hm=n(L,"LI",{});var zEe=s(Hm);$oe=n(zEe,"STRONG",{});var nDr=s($oe);QWe=r(nDr,"transfo-xl"),nDr.forEach(t),WWe=r(zEe," \u2014 "),zk=n(zEe,"A",{href:!0});var sDr=s(zk);HWe=r(sDr,"TransfoXLConfig"),sDr.forEach(t),UWe=r(zEe," (Transformer-XL model)"),zEe.forEach(t),JWe=i(L),Um=n(L,"LI",{});var QEe=s(Um);koe=n(QEe,"STRONG",{});var lDr=s(koe);YWe=r(lDr,"trocr"),lDr.forEach(t),KWe=r(QEe," \u2014 "),Qk=n(QEe,"A",{href:!0});var iDr=s(Qk);ZWe=r(iDr,"TrOCRConfig"),iDr.forEach(t),eHe=r(QEe," (TrOCR model)"),QEe.forEach(t),oHe=i(L),Jm=n(L,"LI",{});var WEe=s(Jm);Soe=n(WEe,"STRONG",{});var dDr=s(Soe);rHe=r(dDr,"unispeech"),dDr.forEach(t),tHe=r(WEe," \u2014 "),Wk=n(WEe,"A",{href:!0});var cDr=s(Wk);aHe=r(cDr,"UniSpeechConfig"),cDr.forEach(t),nHe=r(WEe," (UniSpeech model)"),WEe.forEach(t),sHe=i(L),Ym=n(L,"LI",{});var HEe=s(Ym);Roe=n(HEe,"STRONG",{});var fDr=s(Roe);lHe=r(fDr,"unispeech-sat"),fDr.forEach(t),iHe=r(HEe," \u2014 "),Hk=n(HEe,"A",{href:!0});var mDr=s(Hk);dHe=r(mDr,"UniSpeechSatConfig"),mDr.forEach(t),cHe=r(HEe," (UniSpeechSat model)"),HEe.forEach(t),fHe=i(L),Km=n(L,"LI",{});var UEe=s(Km);Boe=n(UEe,"STRONG",{});var gDr=s(Boe);mHe=r(gDr,"van"),gDr.forEach(t),gHe=r(UEe," \u2014 "),Uk=n(UEe,"A",{href:!0});var hDr=s(Uk);hHe=r(hDr,"VanConfig"),hDr.forEach(t),pHe=r(UEe," (VAN model)"),UEe.forEach(t),uHe=i(L),Zm=n(L,"LI",{});var JEe=s(Zm);Poe=n(JEe,"STRONG",{});var pDr=s(Poe);_He=r(pDr,"vilt"),pDr.forEach(t),bHe=r(JEe," \u2014 "),Jk=n(JEe,"A",{href:!0});var uDr=s(Jk);vHe=r(uDr,"ViltConfig"),uDr.forEach(t),FHe=r(JEe," (ViLT model)"),JEe.forEach(t),THe=i(L),eg=n(L,"LI",{});var YEe=s(eg);Ioe=n(YEe,"STRONG",{});var _Dr=s(Ioe);MHe=r(_Dr,"vision-encoder-decoder"),_Dr.forEach(t),EHe=r(YEe," \u2014 "),Yk=n(YEe,"A",{href:!0});var bDr=s(Yk);CHe=r(bDr,"VisionEncoderDecoderConfig"),bDr.forEach(t),wHe=r(YEe," (Vision Encoder decoder model)"),YEe.forEach(t),AHe=i(L),og=n(L,"LI",{});var KEe=s(og);qoe=n(KEe,"STRONG",{});var vDr=s(qoe);yHe=r(vDr,"vision-text-dual-encoder"),vDr.forEach(t),LHe=r(KEe," \u2014 "),Kk=n(KEe,"A",{href:!0});var FDr=s(Kk);xHe=r(FDr,"VisionTextDualEncoderConfig"),FDr.forEach(t),$He=r(KEe," (VisionTextDualEncoder model)"),KEe.forEach(t),kHe=i(L),rg=n(L,"LI",{});var ZEe=s(rg);Noe=n(ZEe,"STRONG",{});var TDr=s(Noe);SHe=r(TDr,"visual_bert"),TDr.forEach(t),RHe=r(ZEe," \u2014 "),Zk=n(ZEe,"A",{href:!0});var MDr=s(Zk);BHe=r(MDr,"VisualBertConfig"),MDr.forEach(t),PHe=r(ZEe," (VisualBert model)"),ZEe.forEach(t),IHe=i(L),tg=n(L,"LI",{});var e5e=s(tg);joe=n(e5e,"STRONG",{});var EDr=s(joe);qHe=r(EDr,"vit"),EDr.forEach(t),NHe=r(e5e," \u2014 "),eS=n(e5e,"A",{href:!0});var CDr=s(eS);jHe=r(CDr,"ViTConfig"),CDr.forEach(t),DHe=r(e5e," (ViT model)"),e5e.forEach(t),GHe=i(L),ag=n(L,"LI",{});var o5e=s(ag);Doe=n(o5e,"STRONG",{});var wDr=s(Doe);OHe=r(wDr,"vit_mae"),wDr.forEach(t),VHe=r(o5e," \u2014 "),oS=n(o5e,"A",{href:!0});var ADr=s(oS);XHe=r(ADr,"ViTMAEConfig"),ADr.forEach(t),zHe=r(o5e," (ViTMAE model)"),o5e.forEach(t),QHe=i(L),ng=n(L,"LI",{});var r5e=s(ng);Goe=n(r5e,"STRONG",{});var yDr=s(Goe);WHe=r(yDr,"wav2vec2"),yDr.forEach(t),HHe=r(r5e," \u2014 "),rS=n(r5e,"A",{href:!0});var LDr=s(rS);UHe=r(LDr,"Wav2Vec2Config"),LDr.forEach(t),JHe=r(r5e," (Wav2Vec2 model)"),r5e.forEach(t),YHe=i(L),sg=n(L,"LI",{});var t5e=s(sg);Ooe=n(t5e,"STRONG",{});var xDr=s(Ooe);KHe=r(xDr,"wavlm"),xDr.forEach(t),ZHe=r(t5e," \u2014 "),tS=n(t5e,"A",{href:!0});var $Dr=s(tS);eUe=r($Dr,"WavLMConfig"),$Dr.forEach(t),oUe=r(t5e," (WavLM model)"),t5e.forEach(t),rUe=i(L),lg=n(L,"LI",{});var a5e=s(lg);Voe=n(a5e,"STRONG",{});var kDr=s(Voe);tUe=r(kDr,"xglm"),kDr.forEach(t),aUe=r(a5e," \u2014 "),aS=n(a5e,"A",{href:!0});var SDr=s(aS);nUe=r(SDr,"XGLMConfig"),SDr.forEach(t),sUe=r(a5e," (XGLM model)"),a5e.forEach(t),lUe=i(L),ig=n(L,"LI",{});var n5e=s(ig);Xoe=n(n5e,"STRONG",{});var RDr=s(Xoe);iUe=r(RDr,"xlm"),RDr.forEach(t),dUe=r(n5e," \u2014 "),nS=n(n5e,"A",{href:!0});var BDr=s(nS);cUe=r(BDr,"XLMConfig"),BDr.forEach(t),fUe=r(n5e," (XLM model)"),n5e.forEach(t),mUe=i(L),dg=n(L,"LI",{});var s5e=s(dg);zoe=n(s5e,"STRONG",{});var PDr=s(zoe);gUe=r(PDr,"xlm-prophetnet"),PDr.forEach(t),hUe=r(s5e," \u2014 "),sS=n(s5e,"A",{href:!0});var IDr=s(sS);pUe=r(IDr,"XLMProphetNetConfig"),IDr.forEach(t),uUe=r(s5e," (XLMProphetNet model)"),s5e.forEach(t),_Ue=i(L),cg=n(L,"LI",{});var l5e=s(cg);Qoe=n(l5e,"STRONG",{});var qDr=s(Qoe);bUe=r(qDr,"xlm-roberta"),qDr.forEach(t),vUe=r(l5e," \u2014 "),lS=n(l5e,"A",{href:!0});var NDr=s(lS);FUe=r(NDr,"XLMRobertaConfig"),NDr.forEach(t),TUe=r(l5e," (XLM-RoBERTa model)"),l5e.forEach(t),MUe=i(L),fg=n(L,"LI",{});var i5e=s(fg);Woe=n(i5e,"STRONG",{});var jDr=s(Woe);EUe=r(jDr,"xlm-roberta-xl"),jDr.forEach(t),CUe=r(i5e," \u2014 "),iS=n(i5e,"A",{href:!0});var DDr=s(iS);wUe=r(DDr,"XLMRobertaXLConfig"),DDr.forEach(t),AUe=r(i5e," (XLM-RoBERTa-XL model)"),i5e.forEach(t),yUe=i(L),mg=n(L,"LI",{});var d5e=s(mg);Hoe=n(d5e,"STRONG",{});var GDr=s(Hoe);LUe=r(GDr,"xlnet"),GDr.forEach(t),xUe=r(d5e," \u2014 "),dS=n(d5e,"A",{href:!0});var ODr=s(dS);$Ue=r(ODr,"XLNetConfig"),ODr.forEach(t),kUe=r(d5e," (XLNet model)"),d5e.forEach(t),SUe=i(L),gg=n(L,"LI",{});var c5e=s(gg);Uoe=n(c5e,"STRONG",{});var VDr=s(Uoe);RUe=r(VDr,"yolos"),VDr.forEach(t),BUe=r(c5e," \u2014 "),cS=n(c5e,"A",{href:!0});var XDr=s(cS);PUe=r(XDr,"YolosConfig"),XDr.forEach(t),IUe=r(c5e," (YOLOS model)"),c5e.forEach(t),qUe=i(L),hg=n(L,"LI",{});var f5e=s(hg);Joe=n(f5e,"STRONG",{});var zDr=s(Joe);NUe=r(zDr,"yoso"),zDr.forEach(t),jUe=r(f5e," \u2014 "),fS=n(f5e,"A",{href:!0});var QDr=s(fS);DUe=r(QDr,"YosoConfig"),QDr.forEach(t),GUe=r(f5e," (YOSO model)"),f5e.forEach(t),L.forEach(t),OUe=i(Zr),T(pg.$$.fragment,Zr),Zr.forEach(t),VUe=i(Kr),ug=n(Kr,"DIV",{class:!0});var yqe=s(ug);T(Zw.$$.fragment,yqe),XUe=i(yqe),Yoe=n(yqe,"P",{});var WDr=s(Yoe);zUe=r(WDr,"Register a new configuration for this class."),WDr.forEach(t),yqe.forEach(t),Kr.forEach(t),$Pe=i(f),_i=n(f,"H2",{class:!0});var Lqe=s(_i);_g=n(Lqe,"A",{id:!0,class:!0,href:!0});var HDr=s(_g);Koe=n(HDr,"SPAN",{});var UDr=s(Koe);T(eA.$$.fragment,UDr),UDr.forEach(t),HDr.forEach(t),QUe=i(Lqe),Zoe=n(Lqe,"SPAN",{});var JDr=s(Zoe);WUe=r(JDr,"AutoTokenizer"),JDr.forEach(t),Lqe.forEach(t),kPe=i(f),wo=n(f,"DIV",{class:!0});var Ps=s(wo);T(oA.$$.fragment,Ps),HUe=i(Ps),rA=n(Ps,"P",{});var xqe=s(rA);UUe=r(xqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),mS=n(xqe,"A",{href:!0});var YDr=s(mS);JUe=r(YDr,"AutoTokenizer.from_pretrained()"),YDr.forEach(t),YUe=r(xqe," class method."),xqe.forEach(t),KUe=i(Ps),tA=n(Ps,"P",{});var $qe=s(tA);ZUe=r($qe,"This class cannot be instantiated directly using "),ere=n($qe,"CODE",{});var KDr=s(ere);eJe=r(KDr,"__init__()"),KDr.forEach(t),oJe=r($qe," (throws an error)."),$qe.forEach(t),rJe=i(Ps),Cr=n(Ps,"DIV",{class:!0});var Is=s(Cr);T(aA.$$.fragment,Is),tJe=i(Is),ore=n(Is,"P",{});var ZDr=s(ore);aJe=r(ZDr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ZDr.forEach(t),nJe=i(Is),Ca=n(Is,"P",{});var WC=s(Ca);sJe=r(WC,"The tokenizer class to instantiate is selected based on the "),rre=n(WC,"CODE",{});var eGr=s(rre);lJe=r(eGr,"model_type"),eGr.forEach(t),iJe=r(WC,` property of the config object (either
passed as an argument or loaded from `),tre=n(WC,"CODE",{});var oGr=s(tre);dJe=r(oGr,"pretrained_model_name_or_path"),oGr.forEach(t),cJe=r(WC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),are=n(WC,"CODE",{});var rGr=s(are);fJe=r(rGr,"pretrained_model_name_or_path"),rGr.forEach(t),mJe=r(WC,":"),WC.forEach(t),gJe=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var n9=s(kn);nre=n(n9,"STRONG",{});var tGr=s(nre);hJe=r(tGr,"albert"),tGr.forEach(t),pJe=r(n9," \u2014 "),gS=n(n9,"A",{href:!0});var aGr=s(gS);uJe=r(aGr,"AlbertTokenizer"),aGr.forEach(t),_Je=r(n9," or "),hS=n(n9,"A",{href:!0});var nGr=s(hS);bJe=r(nGr,"AlbertTokenizerFast"),nGr.forEach(t),vJe=r(n9," (ALBERT model)"),n9.forEach(t),FJe=i(S),Sn=n(S,"LI",{});var s9=s(Sn);sre=n(s9,"STRONG",{});var sGr=s(sre);TJe=r(sGr,"bart"),sGr.forEach(t),MJe=r(s9," \u2014 "),pS=n(s9,"A",{href:!0});var lGr=s(pS);EJe=r(lGr,"BartTokenizer"),lGr.forEach(t),CJe=r(s9," or "),uS=n(s9,"A",{href:!0});var iGr=s(uS);wJe=r(iGr,"BartTokenizerFast"),iGr.forEach(t),AJe=r(s9," (BART model)"),s9.forEach(t),yJe=i(S),Rn=n(S,"LI",{});var l9=s(Rn);lre=n(l9,"STRONG",{});var dGr=s(lre);LJe=r(dGr,"barthez"),dGr.forEach(t),xJe=r(l9," \u2014 "),_S=n(l9,"A",{href:!0});var cGr=s(_S);$Je=r(cGr,"BarthezTokenizer"),cGr.forEach(t),kJe=r(l9," or "),bS=n(l9,"A",{href:!0});var fGr=s(bS);SJe=r(fGr,"BarthezTokenizerFast"),fGr.forEach(t),RJe=r(l9," (BARThez model)"),l9.forEach(t),BJe=i(S),bg=n(S,"LI",{});var m5e=s(bg);ire=n(m5e,"STRONG",{});var mGr=s(ire);PJe=r(mGr,"bartpho"),mGr.forEach(t),IJe=r(m5e," \u2014 "),vS=n(m5e,"A",{href:!0});var gGr=s(vS);qJe=r(gGr,"BartphoTokenizer"),gGr.forEach(t),NJe=r(m5e," (BARTpho model)"),m5e.forEach(t),jJe=i(S),Bn=n(S,"LI",{});var i9=s(Bn);dre=n(i9,"STRONG",{});var hGr=s(dre);DJe=r(hGr,"bert"),hGr.forEach(t),GJe=r(i9," \u2014 "),FS=n(i9,"A",{href:!0});var pGr=s(FS);OJe=r(pGr,"BertTokenizer"),pGr.forEach(t),VJe=r(i9," or "),TS=n(i9,"A",{href:!0});var uGr=s(TS);XJe=r(uGr,"BertTokenizerFast"),uGr.forEach(t),zJe=r(i9," (BERT model)"),i9.forEach(t),QJe=i(S),vg=n(S,"LI",{});var g5e=s(vg);cre=n(g5e,"STRONG",{});var _Gr=s(cre);WJe=r(_Gr,"bert-generation"),_Gr.forEach(t),HJe=r(g5e," \u2014 "),MS=n(g5e,"A",{href:!0});var bGr=s(MS);UJe=r(bGr,"BertGenerationTokenizer"),bGr.forEach(t),JJe=r(g5e," (Bert Generation model)"),g5e.forEach(t),YJe=i(S),Fg=n(S,"LI",{});var h5e=s(Fg);fre=n(h5e,"STRONG",{});var vGr=s(fre);KJe=r(vGr,"bert-japanese"),vGr.forEach(t),ZJe=r(h5e," \u2014 "),ES=n(h5e,"A",{href:!0});var FGr=s(ES);eYe=r(FGr,"BertJapaneseTokenizer"),FGr.forEach(t),oYe=r(h5e," (BertJapanese model)"),h5e.forEach(t),rYe=i(S),Tg=n(S,"LI",{});var p5e=s(Tg);mre=n(p5e,"STRONG",{});var TGr=s(mre);tYe=r(TGr,"bertweet"),TGr.forEach(t),aYe=r(p5e," \u2014 "),CS=n(p5e,"A",{href:!0});var MGr=s(CS);nYe=r(MGr,"BertweetTokenizer"),MGr.forEach(t),sYe=r(p5e," (Bertweet model)"),p5e.forEach(t),lYe=i(S),Pn=n(S,"LI",{});var d9=s(Pn);gre=n(d9,"STRONG",{});var EGr=s(gre);iYe=r(EGr,"big_bird"),EGr.forEach(t),dYe=r(d9," \u2014 "),wS=n(d9,"A",{href:!0});var CGr=s(wS);cYe=r(CGr,"BigBirdTokenizer"),CGr.forEach(t),fYe=r(d9," or "),AS=n(d9,"A",{href:!0});var wGr=s(AS);mYe=r(wGr,"BigBirdTokenizerFast"),wGr.forEach(t),gYe=r(d9," (BigBird model)"),d9.forEach(t),hYe=i(S),In=n(S,"LI",{});var c9=s(In);hre=n(c9,"STRONG",{});var AGr=s(hre);pYe=r(AGr,"bigbird_pegasus"),AGr.forEach(t),uYe=r(c9," \u2014 "),yS=n(c9,"A",{href:!0});var yGr=s(yS);_Ye=r(yGr,"PegasusTokenizer"),yGr.forEach(t),bYe=r(c9," or "),LS=n(c9,"A",{href:!0});var LGr=s(LS);vYe=r(LGr,"PegasusTokenizerFast"),LGr.forEach(t),FYe=r(c9," (BigBirdPegasus model)"),c9.forEach(t),TYe=i(S),qn=n(S,"LI",{});var f9=s(qn);pre=n(f9,"STRONG",{});var xGr=s(pre);MYe=r(xGr,"blenderbot"),xGr.forEach(t),EYe=r(f9," \u2014 "),xS=n(f9,"A",{href:!0});var $Gr=s(xS);CYe=r($Gr,"BlenderbotTokenizer"),$Gr.forEach(t),wYe=r(f9," or "),$S=n(f9,"A",{href:!0});var kGr=s($S);AYe=r(kGr,"BlenderbotTokenizerFast"),kGr.forEach(t),yYe=r(f9," (Blenderbot model)"),f9.forEach(t),LYe=i(S),Mg=n(S,"LI",{});var u5e=s(Mg);ure=n(u5e,"STRONG",{});var SGr=s(ure);xYe=r(SGr,"blenderbot-small"),SGr.forEach(t),$Ye=r(u5e," \u2014 "),kS=n(u5e,"A",{href:!0});var RGr=s(kS);kYe=r(RGr,"BlenderbotSmallTokenizer"),RGr.forEach(t),SYe=r(u5e," (BlenderbotSmall model)"),u5e.forEach(t),RYe=i(S),Eg=n(S,"LI",{});var _5e=s(Eg);_re=n(_5e,"STRONG",{});var BGr=s(_re);BYe=r(BGr,"byt5"),BGr.forEach(t),PYe=r(_5e," \u2014 "),SS=n(_5e,"A",{href:!0});var PGr=s(SS);IYe=r(PGr,"ByT5Tokenizer"),PGr.forEach(t),qYe=r(_5e," (ByT5 model)"),_5e.forEach(t),NYe=i(S),Nn=n(S,"LI",{});var m9=s(Nn);bre=n(m9,"STRONG",{});var IGr=s(bre);jYe=r(IGr,"camembert"),IGr.forEach(t),DYe=r(m9," \u2014 "),RS=n(m9,"A",{href:!0});var qGr=s(RS);GYe=r(qGr,"CamembertTokenizer"),qGr.forEach(t),OYe=r(m9," or "),BS=n(m9,"A",{href:!0});var NGr=s(BS);VYe=r(NGr,"CamembertTokenizerFast"),NGr.forEach(t),XYe=r(m9," (CamemBERT model)"),m9.forEach(t),zYe=i(S),Cg=n(S,"LI",{});var b5e=s(Cg);vre=n(b5e,"STRONG",{});var jGr=s(vre);QYe=r(jGr,"canine"),jGr.forEach(t),WYe=r(b5e," \u2014 "),PS=n(b5e,"A",{href:!0});var DGr=s(PS);HYe=r(DGr,"CanineTokenizer"),DGr.forEach(t),UYe=r(b5e," (Canine model)"),b5e.forEach(t),JYe=i(S),jn=n(S,"LI",{});var g9=s(jn);Fre=n(g9,"STRONG",{});var GGr=s(Fre);YYe=r(GGr,"clip"),GGr.forEach(t),KYe=r(g9," \u2014 "),IS=n(g9,"A",{href:!0});var OGr=s(IS);ZYe=r(OGr,"CLIPTokenizer"),OGr.forEach(t),eKe=r(g9," or "),qS=n(g9,"A",{href:!0});var VGr=s(qS);oKe=r(VGr,"CLIPTokenizerFast"),VGr.forEach(t),rKe=r(g9," (CLIP model)"),g9.forEach(t),tKe=i(S),Dn=n(S,"LI",{});var h9=s(Dn);Tre=n(h9,"STRONG",{});var XGr=s(Tre);aKe=r(XGr,"convbert"),XGr.forEach(t),nKe=r(h9," \u2014 "),NS=n(h9,"A",{href:!0});var zGr=s(NS);sKe=r(zGr,"ConvBertTokenizer"),zGr.forEach(t),lKe=r(h9," or "),jS=n(h9,"A",{href:!0});var QGr=s(jS);iKe=r(QGr,"ConvBertTokenizerFast"),QGr.forEach(t),dKe=r(h9," (ConvBERT model)"),h9.forEach(t),cKe=i(S),Gn=n(S,"LI",{});var p9=s(Gn);Mre=n(p9,"STRONG",{});var WGr=s(Mre);fKe=r(WGr,"cpm"),WGr.forEach(t),mKe=r(p9," \u2014 "),DS=n(p9,"A",{href:!0});var HGr=s(DS);gKe=r(HGr,"CpmTokenizer"),HGr.forEach(t),hKe=r(p9," or "),GS=n(p9,"A",{href:!0});var UGr=s(GS);pKe=r(UGr,"CpmTokenizerFast"),UGr.forEach(t),uKe=r(p9," (CPM model)"),p9.forEach(t),_Ke=i(S),wg=n(S,"LI",{});var v5e=s(wg);Ere=n(v5e,"STRONG",{});var JGr=s(Ere);bKe=r(JGr,"ctrl"),JGr.forEach(t),vKe=r(v5e," \u2014 "),OS=n(v5e,"A",{href:!0});var YGr=s(OS);FKe=r(YGr,"CTRLTokenizer"),YGr.forEach(t),TKe=r(v5e," (CTRL model)"),v5e.forEach(t),MKe=i(S),On=n(S,"LI",{});var u9=s(On);Cre=n(u9,"STRONG",{});var KGr=s(Cre);EKe=r(KGr,"data2vec-text"),KGr.forEach(t),CKe=r(u9," \u2014 "),VS=n(u9,"A",{href:!0});var ZGr=s(VS);wKe=r(ZGr,"RobertaTokenizer"),ZGr.forEach(t),AKe=r(u9," or "),XS=n(u9,"A",{href:!0});var eOr=s(XS);yKe=r(eOr,"RobertaTokenizerFast"),eOr.forEach(t),LKe=r(u9," (Data2VecText model)"),u9.forEach(t),xKe=i(S),Vn=n(S,"LI",{});var _9=s(Vn);wre=n(_9,"STRONG",{});var oOr=s(wre);$Ke=r(oOr,"deberta"),oOr.forEach(t),kKe=r(_9," \u2014 "),zS=n(_9,"A",{href:!0});var rOr=s(zS);SKe=r(rOr,"DebertaTokenizer"),rOr.forEach(t),RKe=r(_9," or "),QS=n(_9,"A",{href:!0});var tOr=s(QS);BKe=r(tOr,"DebertaTokenizerFast"),tOr.forEach(t),PKe=r(_9," (DeBERTa model)"),_9.forEach(t),IKe=i(S),Xn=n(S,"LI",{});var b9=s(Xn);Are=n(b9,"STRONG",{});var aOr=s(Are);qKe=r(aOr,"deberta-v2"),aOr.forEach(t),NKe=r(b9," \u2014 "),WS=n(b9,"A",{href:!0});var nOr=s(WS);jKe=r(nOr,"DebertaV2Tokenizer"),nOr.forEach(t),DKe=r(b9," or "),HS=n(b9,"A",{href:!0});var sOr=s(HS);GKe=r(sOr,"DebertaV2TokenizerFast"),sOr.forEach(t),OKe=r(b9," (DeBERTa-v2 model)"),b9.forEach(t),VKe=i(S),zn=n(S,"LI",{});var v9=s(zn);yre=n(v9,"STRONG",{});var lOr=s(yre);XKe=r(lOr,"distilbert"),lOr.forEach(t),zKe=r(v9," \u2014 "),US=n(v9,"A",{href:!0});var iOr=s(US);QKe=r(iOr,"DistilBertTokenizer"),iOr.forEach(t),WKe=r(v9," or "),JS=n(v9,"A",{href:!0});var dOr=s(JS);HKe=r(dOr,"DistilBertTokenizerFast"),dOr.forEach(t),UKe=r(v9," (DistilBERT model)"),v9.forEach(t),JKe=i(S),Qn=n(S,"LI",{});var F9=s(Qn);Lre=n(F9,"STRONG",{});var cOr=s(Lre);YKe=r(cOr,"dpr"),cOr.forEach(t),KKe=r(F9," \u2014 "),YS=n(F9,"A",{href:!0});var fOr=s(YS);ZKe=r(fOr,"DPRQuestionEncoderTokenizer"),fOr.forEach(t),eZe=r(F9," or "),KS=n(F9,"A",{href:!0});var mOr=s(KS);oZe=r(mOr,"DPRQuestionEncoderTokenizerFast"),mOr.forEach(t),rZe=r(F9," (DPR model)"),F9.forEach(t),tZe=i(S),Wn=n(S,"LI",{});var T9=s(Wn);xre=n(T9,"STRONG",{});var gOr=s(xre);aZe=r(gOr,"electra"),gOr.forEach(t),nZe=r(T9," \u2014 "),ZS=n(T9,"A",{href:!0});var hOr=s(ZS);sZe=r(hOr,"ElectraTokenizer"),hOr.forEach(t),lZe=r(T9," or "),eR=n(T9,"A",{href:!0});var pOr=s(eR);iZe=r(pOr,"ElectraTokenizerFast"),pOr.forEach(t),dZe=r(T9," (ELECTRA model)"),T9.forEach(t),cZe=i(S),Ag=n(S,"LI",{});var F5e=s(Ag);$re=n(F5e,"STRONG",{});var uOr=s($re);fZe=r(uOr,"flaubert"),uOr.forEach(t),mZe=r(F5e," \u2014 "),oR=n(F5e,"A",{href:!0});var _Or=s(oR);gZe=r(_Or,"FlaubertTokenizer"),_Or.forEach(t),hZe=r(F5e," (FlauBERT model)"),F5e.forEach(t),pZe=i(S),Hn=n(S,"LI",{});var M9=s(Hn);kre=n(M9,"STRONG",{});var bOr=s(kre);uZe=r(bOr,"fnet"),bOr.forEach(t),_Ze=r(M9," \u2014 "),rR=n(M9,"A",{href:!0});var vOr=s(rR);bZe=r(vOr,"FNetTokenizer"),vOr.forEach(t),vZe=r(M9," or "),tR=n(M9,"A",{href:!0});var FOr=s(tR);FZe=r(FOr,"FNetTokenizerFast"),FOr.forEach(t),TZe=r(M9," (FNet model)"),M9.forEach(t),MZe=i(S),yg=n(S,"LI",{});var T5e=s(yg);Sre=n(T5e,"STRONG",{});var TOr=s(Sre);EZe=r(TOr,"fsmt"),TOr.forEach(t),CZe=r(T5e," \u2014 "),aR=n(T5e,"A",{href:!0});var MOr=s(aR);wZe=r(MOr,"FSMTTokenizer"),MOr.forEach(t),AZe=r(T5e," (FairSeq Machine-Translation model)"),T5e.forEach(t),yZe=i(S),Un=n(S,"LI",{});var E9=s(Un);Rre=n(E9,"STRONG",{});var EOr=s(Rre);LZe=r(EOr,"funnel"),EOr.forEach(t),xZe=r(E9," \u2014 "),nR=n(E9,"A",{href:!0});var COr=s(nR);$Ze=r(COr,"FunnelTokenizer"),COr.forEach(t),kZe=r(E9," or "),sR=n(E9,"A",{href:!0});var wOr=s(sR);SZe=r(wOr,"FunnelTokenizerFast"),wOr.forEach(t),RZe=r(E9," (Funnel Transformer model)"),E9.forEach(t),BZe=i(S),Jn=n(S,"LI",{});var C9=s(Jn);Bre=n(C9,"STRONG",{});var AOr=s(Bre);PZe=r(AOr,"gpt2"),AOr.forEach(t),IZe=r(C9," \u2014 "),lR=n(C9,"A",{href:!0});var yOr=s(lR);qZe=r(yOr,"GPT2Tokenizer"),yOr.forEach(t),NZe=r(C9," or "),iR=n(C9,"A",{href:!0});var LOr=s(iR);jZe=r(LOr,"GPT2TokenizerFast"),LOr.forEach(t),DZe=r(C9," (OpenAI GPT-2 model)"),C9.forEach(t),GZe=i(S),Yn=n(S,"LI",{});var w9=s(Yn);Pre=n(w9,"STRONG",{});var xOr=s(Pre);OZe=r(xOr,"gpt_neo"),xOr.forEach(t),VZe=r(w9," \u2014 "),dR=n(w9,"A",{href:!0});var $Or=s(dR);XZe=r($Or,"GPT2Tokenizer"),$Or.forEach(t),zZe=r(w9," or "),cR=n(w9,"A",{href:!0});var kOr=s(cR);QZe=r(kOr,"GPT2TokenizerFast"),kOr.forEach(t),WZe=r(w9," (GPT Neo model)"),w9.forEach(t),HZe=i(S),Kn=n(S,"LI",{});var A9=s(Kn);Ire=n(A9,"STRONG",{});var SOr=s(Ire);UZe=r(SOr,"gptj"),SOr.forEach(t),JZe=r(A9," \u2014 "),fR=n(A9,"A",{href:!0});var ROr=s(fR);YZe=r(ROr,"GPT2Tokenizer"),ROr.forEach(t),KZe=r(A9," or "),mR=n(A9,"A",{href:!0});var BOr=s(mR);ZZe=r(BOr,"GPT2TokenizerFast"),BOr.forEach(t),eeo=r(A9," (GPT-J model)"),A9.forEach(t),oeo=i(S),Zn=n(S,"LI",{});var y9=s(Zn);qre=n(y9,"STRONG",{});var POr=s(qre);reo=r(POr,"herbert"),POr.forEach(t),teo=r(y9," \u2014 "),gR=n(y9,"A",{href:!0});var IOr=s(gR);aeo=r(IOr,"HerbertTokenizer"),IOr.forEach(t),neo=r(y9," or "),hR=n(y9,"A",{href:!0});var qOr=s(hR);seo=r(qOr,"HerbertTokenizerFast"),qOr.forEach(t),leo=r(y9," (HerBERT model)"),y9.forEach(t),ieo=i(S),Lg=n(S,"LI",{});var M5e=s(Lg);Nre=n(M5e,"STRONG",{});var NOr=s(Nre);deo=r(NOr,"hubert"),NOr.forEach(t),ceo=r(M5e," \u2014 "),pR=n(M5e,"A",{href:!0});var jOr=s(pR);feo=r(jOr,"Wav2Vec2CTCTokenizer"),jOr.forEach(t),meo=r(M5e," (Hubert model)"),M5e.forEach(t),geo=i(S),es=n(S,"LI",{});var L9=s(es);jre=n(L9,"STRONG",{});var DOr=s(jre);heo=r(DOr,"ibert"),DOr.forEach(t),peo=r(L9," \u2014 "),uR=n(L9,"A",{href:!0});var GOr=s(uR);ueo=r(GOr,"RobertaTokenizer"),GOr.forEach(t),_eo=r(L9," or "),_R=n(L9,"A",{href:!0});var OOr=s(_R);beo=r(OOr,"RobertaTokenizerFast"),OOr.forEach(t),veo=r(L9," (I-BERT model)"),L9.forEach(t),Feo=i(S),os=n(S,"LI",{});var x9=s(os);Dre=n(x9,"STRONG",{});var VOr=s(Dre);Teo=r(VOr,"layoutlm"),VOr.forEach(t),Meo=r(x9," \u2014 "),bR=n(x9,"A",{href:!0});var XOr=s(bR);Eeo=r(XOr,"LayoutLMTokenizer"),XOr.forEach(t),Ceo=r(x9," or "),vR=n(x9,"A",{href:!0});var zOr=s(vR);weo=r(zOr,"LayoutLMTokenizerFast"),zOr.forEach(t),Aeo=r(x9," (LayoutLM model)"),x9.forEach(t),yeo=i(S),rs=n(S,"LI",{});var $9=s(rs);Gre=n($9,"STRONG",{});var QOr=s(Gre);Leo=r(QOr,"layoutlmv2"),QOr.forEach(t),xeo=r($9," \u2014 "),FR=n($9,"A",{href:!0});var WOr=s(FR);$eo=r(WOr,"LayoutLMv2Tokenizer"),WOr.forEach(t),keo=r($9," or "),TR=n($9,"A",{href:!0});var HOr=s(TR);Seo=r(HOr,"LayoutLMv2TokenizerFast"),HOr.forEach(t),Reo=r($9," (LayoutLMv2 model)"),$9.forEach(t),Beo=i(S),ts=n(S,"LI",{});var k9=s(ts);Ore=n(k9,"STRONG",{});var UOr=s(Ore);Peo=r(UOr,"layoutxlm"),UOr.forEach(t),Ieo=r(k9," \u2014 "),MR=n(k9,"A",{href:!0});var JOr=s(MR);qeo=r(JOr,"LayoutXLMTokenizer"),JOr.forEach(t),Neo=r(k9," or "),ER=n(k9,"A",{href:!0});var YOr=s(ER);jeo=r(YOr,"LayoutXLMTokenizerFast"),YOr.forEach(t),Deo=r(k9," (LayoutXLM model)"),k9.forEach(t),Geo=i(S),as=n(S,"LI",{});var S9=s(as);Vre=n(S9,"STRONG",{});var KOr=s(Vre);Oeo=r(KOr,"led"),KOr.forEach(t),Veo=r(S9," \u2014 "),CR=n(S9,"A",{href:!0});var ZOr=s(CR);Xeo=r(ZOr,"LEDTokenizer"),ZOr.forEach(t),zeo=r(S9," or "),wR=n(S9,"A",{href:!0});var eVr=s(wR);Qeo=r(eVr,"LEDTokenizerFast"),eVr.forEach(t),Weo=r(S9," (LED model)"),S9.forEach(t),Heo=i(S),ns=n(S,"LI",{});var R9=s(ns);Xre=n(R9,"STRONG",{});var oVr=s(Xre);Ueo=r(oVr,"longformer"),oVr.forEach(t),Jeo=r(R9," \u2014 "),AR=n(R9,"A",{href:!0});var rVr=s(AR);Yeo=r(rVr,"LongformerTokenizer"),rVr.forEach(t),Keo=r(R9," or "),yR=n(R9,"A",{href:!0});var tVr=s(yR);Zeo=r(tVr,"LongformerTokenizerFast"),tVr.forEach(t),eoo=r(R9," (Longformer model)"),R9.forEach(t),ooo=i(S),xg=n(S,"LI",{});var E5e=s(xg);zre=n(E5e,"STRONG",{});var aVr=s(zre);roo=r(aVr,"luke"),aVr.forEach(t),too=r(E5e," \u2014 "),LR=n(E5e,"A",{href:!0});var nVr=s(LR);aoo=r(nVr,"LukeTokenizer"),nVr.forEach(t),noo=r(E5e," (LUKE model)"),E5e.forEach(t),soo=i(S),ss=n(S,"LI",{});var B9=s(ss);Qre=n(B9,"STRONG",{});var sVr=s(Qre);loo=r(sVr,"lxmert"),sVr.forEach(t),ioo=r(B9," \u2014 "),xR=n(B9,"A",{href:!0});var lVr=s(xR);doo=r(lVr,"LxmertTokenizer"),lVr.forEach(t),coo=r(B9," or "),$R=n(B9,"A",{href:!0});var iVr=s($R);foo=r(iVr,"LxmertTokenizerFast"),iVr.forEach(t),moo=r(B9," (LXMERT model)"),B9.forEach(t),goo=i(S),$g=n(S,"LI",{});var C5e=s($g);Wre=n(C5e,"STRONG",{});var dVr=s(Wre);hoo=r(dVr,"m2m_100"),dVr.forEach(t),poo=r(C5e," \u2014 "),kR=n(C5e,"A",{href:!0});var cVr=s(kR);uoo=r(cVr,"M2M100Tokenizer"),cVr.forEach(t),_oo=r(C5e," (M2M100 model)"),C5e.forEach(t),boo=i(S),kg=n(S,"LI",{});var w5e=s(kg);Hre=n(w5e,"STRONG",{});var fVr=s(Hre);voo=r(fVr,"marian"),fVr.forEach(t),Foo=r(w5e," \u2014 "),SR=n(w5e,"A",{href:!0});var mVr=s(SR);Too=r(mVr,"MarianTokenizer"),mVr.forEach(t),Moo=r(w5e," (Marian model)"),w5e.forEach(t),Eoo=i(S),ls=n(S,"LI",{});var P9=s(ls);Ure=n(P9,"STRONG",{});var gVr=s(Ure);Coo=r(gVr,"mbart"),gVr.forEach(t),woo=r(P9," \u2014 "),RR=n(P9,"A",{href:!0});var hVr=s(RR);Aoo=r(hVr,"MBartTokenizer"),hVr.forEach(t),yoo=r(P9," or "),BR=n(P9,"A",{href:!0});var pVr=s(BR);Loo=r(pVr,"MBartTokenizerFast"),pVr.forEach(t),xoo=r(P9," (mBART model)"),P9.forEach(t),$oo=i(S),is=n(S,"LI",{});var I9=s(is);Jre=n(I9,"STRONG",{});var uVr=s(Jre);koo=r(uVr,"mbart50"),uVr.forEach(t),Soo=r(I9," \u2014 "),PR=n(I9,"A",{href:!0});var _Vr=s(PR);Roo=r(_Vr,"MBart50Tokenizer"),_Vr.forEach(t),Boo=r(I9," or "),IR=n(I9,"A",{href:!0});var bVr=s(IR);Poo=r(bVr,"MBart50TokenizerFast"),bVr.forEach(t),Ioo=r(I9," (mBART-50 model)"),I9.forEach(t),qoo=i(S),ds=n(S,"LI",{});var q9=s(ds);Yre=n(q9,"STRONG",{});var vVr=s(Yre);Noo=r(vVr,"megatron-bert"),vVr.forEach(t),joo=r(q9," \u2014 "),qR=n(q9,"A",{href:!0});var FVr=s(qR);Doo=r(FVr,"BertTokenizer"),FVr.forEach(t),Goo=r(q9," or "),NR=n(q9,"A",{href:!0});var TVr=s(NR);Ooo=r(TVr,"BertTokenizerFast"),TVr.forEach(t),Voo=r(q9," (MegatronBert model)"),q9.forEach(t),Xoo=i(S),Sg=n(S,"LI",{});var A5e=s(Sg);Kre=n(A5e,"STRONG",{});var MVr=s(Kre);zoo=r(MVr,"mluke"),MVr.forEach(t),Qoo=r(A5e," \u2014 "),jR=n(A5e,"A",{href:!0});var EVr=s(jR);Woo=r(EVr,"MLukeTokenizer"),EVr.forEach(t),Hoo=r(A5e," (mLUKE model)"),A5e.forEach(t),Uoo=i(S),cs=n(S,"LI",{});var N9=s(cs);Zre=n(N9,"STRONG",{});var CVr=s(Zre);Joo=r(CVr,"mobilebert"),CVr.forEach(t),Yoo=r(N9," \u2014 "),DR=n(N9,"A",{href:!0});var wVr=s(DR);Koo=r(wVr,"MobileBertTokenizer"),wVr.forEach(t),Zoo=r(N9," or "),GR=n(N9,"A",{href:!0});var AVr=s(GR);ero=r(AVr,"MobileBertTokenizerFast"),AVr.forEach(t),oro=r(N9," (MobileBERT model)"),N9.forEach(t),rro=i(S),fs=n(S,"LI",{});var j9=s(fs);ete=n(j9,"STRONG",{});var yVr=s(ete);tro=r(yVr,"mpnet"),yVr.forEach(t),aro=r(j9," \u2014 "),OR=n(j9,"A",{href:!0});var LVr=s(OR);nro=r(LVr,"MPNetTokenizer"),LVr.forEach(t),sro=r(j9," or "),VR=n(j9,"A",{href:!0});var xVr=s(VR);lro=r(xVr,"MPNetTokenizerFast"),xVr.forEach(t),iro=r(j9," (MPNet model)"),j9.forEach(t),dro=i(S),ms=n(S,"LI",{});var D9=s(ms);ote=n(D9,"STRONG",{});var $Vr=s(ote);cro=r($Vr,"mt5"),$Vr.forEach(t),fro=r(D9," \u2014 "),XR=n(D9,"A",{href:!0});var kVr=s(XR);mro=r(kVr,"MT5Tokenizer"),kVr.forEach(t),gro=r(D9," or "),zR=n(D9,"A",{href:!0});var SVr=s(zR);hro=r(SVr,"MT5TokenizerFast"),SVr.forEach(t),pro=r(D9," (mT5 model)"),D9.forEach(t),uro=i(S),gs=n(S,"LI",{});var G9=s(gs);rte=n(G9,"STRONG",{});var RVr=s(rte);_ro=r(RVr,"nystromformer"),RVr.forEach(t),bro=r(G9," \u2014 "),QR=n(G9,"A",{href:!0});var BVr=s(QR);vro=r(BVr,"AlbertTokenizer"),BVr.forEach(t),Fro=r(G9," or "),WR=n(G9,"A",{href:!0});var PVr=s(WR);Tro=r(PVr,"AlbertTokenizerFast"),PVr.forEach(t),Mro=r(G9," (Nystromformer model)"),G9.forEach(t),Ero=i(S),hs=n(S,"LI",{});var O9=s(hs);tte=n(O9,"STRONG",{});var IVr=s(tte);Cro=r(IVr,"openai-gpt"),IVr.forEach(t),wro=r(O9," \u2014 "),HR=n(O9,"A",{href:!0});var qVr=s(HR);Aro=r(qVr,"OpenAIGPTTokenizer"),qVr.forEach(t),yro=r(O9," or "),UR=n(O9,"A",{href:!0});var NVr=s(UR);Lro=r(NVr,"OpenAIGPTTokenizerFast"),NVr.forEach(t),xro=r(O9," (OpenAI GPT model)"),O9.forEach(t),$ro=i(S),Rg=n(S,"LI",{});var y5e=s(Rg);ate=n(y5e,"STRONG",{});var jVr=s(ate);kro=r(jVr,"opt"),jVr.forEach(t),Sro=r(y5e," \u2014 "),JR=n(y5e,"A",{href:!0});var DVr=s(JR);Rro=r(DVr,"GPT2Tokenizer"),DVr.forEach(t),Bro=r(y5e," (OPT model)"),y5e.forEach(t),Pro=i(S),ps=n(S,"LI",{});var V9=s(ps);nte=n(V9,"STRONG",{});var GVr=s(nte);Iro=r(GVr,"pegasus"),GVr.forEach(t),qro=r(V9," \u2014 "),YR=n(V9,"A",{href:!0});var OVr=s(YR);Nro=r(OVr,"PegasusTokenizer"),OVr.forEach(t),jro=r(V9," or "),KR=n(V9,"A",{href:!0});var VVr=s(KR);Dro=r(VVr,"PegasusTokenizerFast"),VVr.forEach(t),Gro=r(V9," (Pegasus model)"),V9.forEach(t),Oro=i(S),Bg=n(S,"LI",{});var L5e=s(Bg);ste=n(L5e,"STRONG",{});var XVr=s(ste);Vro=r(XVr,"perceiver"),XVr.forEach(t),Xro=r(L5e," \u2014 "),ZR=n(L5e,"A",{href:!0});var zVr=s(ZR);zro=r(zVr,"PerceiverTokenizer"),zVr.forEach(t),Qro=r(L5e," (Perceiver model)"),L5e.forEach(t),Wro=i(S),Pg=n(S,"LI",{});var x5e=s(Pg);lte=n(x5e,"STRONG",{});var QVr=s(lte);Hro=r(QVr,"phobert"),QVr.forEach(t),Uro=r(x5e," \u2014 "),eB=n(x5e,"A",{href:!0});var WVr=s(eB);Jro=r(WVr,"PhobertTokenizer"),WVr.forEach(t),Yro=r(x5e," (PhoBERT model)"),x5e.forEach(t),Kro=i(S),Ig=n(S,"LI",{});var $5e=s(Ig);ite=n($5e,"STRONG",{});var HVr=s(ite);Zro=r(HVr,"plbart"),HVr.forEach(t),eto=r($5e," \u2014 "),oB=n($5e,"A",{href:!0});var UVr=s(oB);oto=r(UVr,"PLBartTokenizer"),UVr.forEach(t),rto=r($5e," (PLBart model)"),$5e.forEach(t),tto=i(S),qg=n(S,"LI",{});var k5e=s(qg);dte=n(k5e,"STRONG",{});var JVr=s(dte);ato=r(JVr,"prophetnet"),JVr.forEach(t),nto=r(k5e," \u2014 "),rB=n(k5e,"A",{href:!0});var YVr=s(rB);sto=r(YVr,"ProphetNetTokenizer"),YVr.forEach(t),lto=r(k5e," (ProphetNet model)"),k5e.forEach(t),ito=i(S),us=n(S,"LI",{});var X9=s(us);cte=n(X9,"STRONG",{});var KVr=s(cte);dto=r(KVr,"qdqbert"),KVr.forEach(t),cto=r(X9," \u2014 "),tB=n(X9,"A",{href:!0});var ZVr=s(tB);fto=r(ZVr,"BertTokenizer"),ZVr.forEach(t),mto=r(X9," or "),aB=n(X9,"A",{href:!0});var eXr=s(aB);gto=r(eXr,"BertTokenizerFast"),eXr.forEach(t),hto=r(X9," (QDQBert model)"),X9.forEach(t),pto=i(S),Ng=n(S,"LI",{});var S5e=s(Ng);fte=n(S5e,"STRONG",{});var oXr=s(fte);uto=r(oXr,"rag"),oXr.forEach(t),_to=r(S5e," \u2014 "),nB=n(S5e,"A",{href:!0});var rXr=s(nB);bto=r(rXr,"RagTokenizer"),rXr.forEach(t),vto=r(S5e," (RAG model)"),S5e.forEach(t),Fto=i(S),_s=n(S,"LI",{});var z9=s(_s);mte=n(z9,"STRONG",{});var tXr=s(mte);Tto=r(tXr,"realm"),tXr.forEach(t),Mto=r(z9," \u2014 "),sB=n(z9,"A",{href:!0});var aXr=s(sB);Eto=r(aXr,"RealmTokenizer"),aXr.forEach(t),Cto=r(z9," or "),lB=n(z9,"A",{href:!0});var nXr=s(lB);wto=r(nXr,"RealmTokenizerFast"),nXr.forEach(t),Ato=r(z9," (Realm model)"),z9.forEach(t),yto=i(S),bs=n(S,"LI",{});var Q9=s(bs);gte=n(Q9,"STRONG",{});var sXr=s(gte);Lto=r(sXr,"reformer"),sXr.forEach(t),xto=r(Q9," \u2014 "),iB=n(Q9,"A",{href:!0});var lXr=s(iB);$to=r(lXr,"ReformerTokenizer"),lXr.forEach(t),kto=r(Q9," or "),dB=n(Q9,"A",{href:!0});var iXr=s(dB);Sto=r(iXr,"ReformerTokenizerFast"),iXr.forEach(t),Rto=r(Q9," (Reformer model)"),Q9.forEach(t),Bto=i(S),vs=n(S,"LI",{});var W9=s(vs);hte=n(W9,"STRONG",{});var dXr=s(hte);Pto=r(dXr,"rembert"),dXr.forEach(t),Ito=r(W9," \u2014 "),cB=n(W9,"A",{href:!0});var cXr=s(cB);qto=r(cXr,"RemBertTokenizer"),cXr.forEach(t),Nto=r(W9," or "),fB=n(W9,"A",{href:!0});var fXr=s(fB);jto=r(fXr,"RemBertTokenizerFast"),fXr.forEach(t),Dto=r(W9," (RemBERT model)"),W9.forEach(t),Gto=i(S),Fs=n(S,"LI",{});var H9=s(Fs);pte=n(H9,"STRONG",{});var mXr=s(pte);Oto=r(mXr,"retribert"),mXr.forEach(t),Vto=r(H9," \u2014 "),mB=n(H9,"A",{href:!0});var gXr=s(mB);Xto=r(gXr,"RetriBertTokenizer"),gXr.forEach(t),zto=r(H9," or "),gB=n(H9,"A",{href:!0});var hXr=s(gB);Qto=r(hXr,"RetriBertTokenizerFast"),hXr.forEach(t),Wto=r(H9," (RetriBERT model)"),H9.forEach(t),Hto=i(S),Ts=n(S,"LI",{});var U9=s(Ts);ute=n(U9,"STRONG",{});var pXr=s(ute);Uto=r(pXr,"roberta"),pXr.forEach(t),Jto=r(U9," \u2014 "),hB=n(U9,"A",{href:!0});var uXr=s(hB);Yto=r(uXr,"RobertaTokenizer"),uXr.forEach(t),Kto=r(U9," or "),pB=n(U9,"A",{href:!0});var _Xr=s(pB);Zto=r(_Xr,"RobertaTokenizerFast"),_Xr.forEach(t),eao=r(U9," (RoBERTa model)"),U9.forEach(t),oao=i(S),Ms=n(S,"LI",{});var J9=s(Ms);_te=n(J9,"STRONG",{});var bXr=s(_te);rao=r(bXr,"roformer"),bXr.forEach(t),tao=r(J9," \u2014 "),uB=n(J9,"A",{href:!0});var vXr=s(uB);aao=r(vXr,"RoFormerTokenizer"),vXr.forEach(t),nao=r(J9," or "),_B=n(J9,"A",{href:!0});var FXr=s(_B);sao=r(FXr,"RoFormerTokenizerFast"),FXr.forEach(t),lao=r(J9," (RoFormer model)"),J9.forEach(t),iao=i(S),jg=n(S,"LI",{});var R5e=s(jg);bte=n(R5e,"STRONG",{});var TXr=s(bte);dao=r(TXr,"speech_to_text"),TXr.forEach(t),cao=r(R5e," \u2014 "),bB=n(R5e,"A",{href:!0});var MXr=s(bB);fao=r(MXr,"Speech2TextTokenizer"),MXr.forEach(t),mao=r(R5e," (Speech2Text model)"),R5e.forEach(t),gao=i(S),Dg=n(S,"LI",{});var B5e=s(Dg);vte=n(B5e,"STRONG",{});var EXr=s(vte);hao=r(EXr,"speech_to_text_2"),EXr.forEach(t),pao=r(B5e," \u2014 "),vB=n(B5e,"A",{href:!0});var CXr=s(vB);uao=r(CXr,"Speech2Text2Tokenizer"),CXr.forEach(t),_ao=r(B5e," (Speech2Text2 model)"),B5e.forEach(t),bao=i(S),Es=n(S,"LI",{});var Y9=s(Es);Fte=n(Y9,"STRONG",{});var wXr=s(Fte);vao=r(wXr,"splinter"),wXr.forEach(t),Fao=r(Y9," \u2014 "),FB=n(Y9,"A",{href:!0});var AXr=s(FB);Tao=r(AXr,"SplinterTokenizer"),AXr.forEach(t),Mao=r(Y9," or "),TB=n(Y9,"A",{href:!0});var yXr=s(TB);Eao=r(yXr,"SplinterTokenizerFast"),yXr.forEach(t),Cao=r(Y9," (Splinter model)"),Y9.forEach(t),wao=i(S),Cs=n(S,"LI",{});var K9=s(Cs);Tte=n(K9,"STRONG",{});var LXr=s(Tte);Aao=r(LXr,"squeezebert"),LXr.forEach(t),yao=r(K9," \u2014 "),MB=n(K9,"A",{href:!0});var xXr=s(MB);Lao=r(xXr,"SqueezeBertTokenizer"),xXr.forEach(t),xao=r(K9," or "),EB=n(K9,"A",{href:!0});var $Xr=s(EB);$ao=r($Xr,"SqueezeBertTokenizerFast"),$Xr.forEach(t),kao=r(K9," (SqueezeBERT model)"),K9.forEach(t),Sao=i(S),ws=n(S,"LI",{});var Z9=s(ws);Mte=n(Z9,"STRONG",{});var kXr=s(Mte);Rao=r(kXr,"t5"),kXr.forEach(t),Bao=r(Z9," \u2014 "),CB=n(Z9,"A",{href:!0});var SXr=s(CB);Pao=r(SXr,"T5Tokenizer"),SXr.forEach(t),Iao=r(Z9," or "),wB=n(Z9,"A",{href:!0});var RXr=s(wB);qao=r(RXr,"T5TokenizerFast"),RXr.forEach(t),Nao=r(Z9," (T5 model)"),Z9.forEach(t),jao=i(S),Gg=n(S,"LI",{});var P5e=s(Gg);Ete=n(P5e,"STRONG",{});var BXr=s(Ete);Dao=r(BXr,"tapas"),BXr.forEach(t),Gao=r(P5e," \u2014 "),AB=n(P5e,"A",{href:!0});var PXr=s(AB);Oao=r(PXr,"TapasTokenizer"),PXr.forEach(t),Vao=r(P5e," (TAPAS model)"),P5e.forEach(t),Xao=i(S),Og=n(S,"LI",{});var I5e=s(Og);Cte=n(I5e,"STRONG",{});var IXr=s(Cte);zao=r(IXr,"tapex"),IXr.forEach(t),Qao=r(I5e," \u2014 "),yB=n(I5e,"A",{href:!0});var qXr=s(yB);Wao=r(qXr,"TapexTokenizer"),qXr.forEach(t),Hao=r(I5e," (TAPEX model)"),I5e.forEach(t),Uao=i(S),Vg=n(S,"LI",{});var q5e=s(Vg);wte=n(q5e,"STRONG",{});var NXr=s(wte);Jao=r(NXr,"transfo-xl"),NXr.forEach(t),Yao=r(q5e," \u2014 "),LB=n(q5e,"A",{href:!0});var jXr=s(LB);Kao=r(jXr,"TransfoXLTokenizer"),jXr.forEach(t),Zao=r(q5e," (Transformer-XL model)"),q5e.forEach(t),eno=i(S),As=n(S,"LI",{});var e$=s(As);Ate=n(e$,"STRONG",{});var DXr=s(Ate);ono=r(DXr,"visual_bert"),DXr.forEach(t),rno=r(e$," \u2014 "),xB=n(e$,"A",{href:!0});var GXr=s(xB);tno=r(GXr,"BertTokenizer"),GXr.forEach(t),ano=r(e$," or "),$B=n(e$,"A",{href:!0});var OXr=s($B);nno=r(OXr,"BertTokenizerFast"),OXr.forEach(t),sno=r(e$," (VisualBert model)"),e$.forEach(t),lno=i(S),Xg=n(S,"LI",{});var N5e=s(Xg);yte=n(N5e,"STRONG",{});var VXr=s(yte);ino=r(VXr,"wav2vec2"),VXr.forEach(t),dno=r(N5e," \u2014 "),kB=n(N5e,"A",{href:!0});var XXr=s(kB);cno=r(XXr,"Wav2Vec2CTCTokenizer"),XXr.forEach(t),fno=r(N5e," (Wav2Vec2 model)"),N5e.forEach(t),mno=i(S),zg=n(S,"LI",{});var j5e=s(zg);Lte=n(j5e,"STRONG",{});var zXr=s(Lte);gno=r(zXr,"wav2vec2_phoneme"),zXr.forEach(t),hno=r(j5e," \u2014 "),SB=n(j5e,"A",{href:!0});var QXr=s(SB);pno=r(QXr,"Wav2Vec2PhonemeCTCTokenizer"),QXr.forEach(t),uno=r(j5e," (Wav2Vec2Phoneme model)"),j5e.forEach(t),_no=i(S),ys=n(S,"LI",{});var o$=s(ys);xte=n(o$,"STRONG",{});var WXr=s(xte);bno=r(WXr,"xglm"),WXr.forEach(t),vno=r(o$," \u2014 "),RB=n(o$,"A",{href:!0});var HXr=s(RB);Fno=r(HXr,"XGLMTokenizer"),HXr.forEach(t),Tno=r(o$," or "),BB=n(o$,"A",{href:!0});var UXr=s(BB);Mno=r(UXr,"XGLMTokenizerFast"),UXr.forEach(t),Eno=r(o$," (XGLM model)"),o$.forEach(t),Cno=i(S),Qg=n(S,"LI",{});var D5e=s(Qg);$te=n(D5e,"STRONG",{});var JXr=s($te);wno=r(JXr,"xlm"),JXr.forEach(t),Ano=r(D5e," \u2014 "),PB=n(D5e,"A",{href:!0});var YXr=s(PB);yno=r(YXr,"XLMTokenizer"),YXr.forEach(t),Lno=r(D5e," (XLM model)"),D5e.forEach(t),xno=i(S),Wg=n(S,"LI",{});var G5e=s(Wg);kte=n(G5e,"STRONG",{});var KXr=s(kte);$no=r(KXr,"xlm-prophetnet"),KXr.forEach(t),kno=r(G5e," \u2014 "),IB=n(G5e,"A",{href:!0});var ZXr=s(IB);Sno=r(ZXr,"XLMProphetNetTokenizer"),ZXr.forEach(t),Rno=r(G5e," (XLMProphetNet model)"),G5e.forEach(t),Bno=i(S),Ls=n(S,"LI",{});var r$=s(Ls);Ste=n(r$,"STRONG",{});var ezr=s(Ste);Pno=r(ezr,"xlm-roberta"),ezr.forEach(t),Ino=r(r$," \u2014 "),qB=n(r$,"A",{href:!0});var ozr=s(qB);qno=r(ozr,"XLMRobertaTokenizer"),ozr.forEach(t),Nno=r(r$," or "),NB=n(r$,"A",{href:!0});var rzr=s(NB);jno=r(rzr,"XLMRobertaTokenizerFast"),rzr.forEach(t),Dno=r(r$," (XLM-RoBERTa model)"),r$.forEach(t),Gno=i(S),xs=n(S,"LI",{});var t$=s(xs);Rte=n(t$,"STRONG",{});var tzr=s(Rte);Ono=r(tzr,"xlm-roberta-xl"),tzr.forEach(t),Vno=r(t$," \u2014 "),jB=n(t$,"A",{href:!0});var azr=s(jB);Xno=r(azr,"RobertaTokenizer"),azr.forEach(t),zno=r(t$," or "),DB=n(t$,"A",{href:!0});var nzr=s(DB);Qno=r(nzr,"RobertaTokenizerFast"),nzr.forEach(t),Wno=r(t$," (XLM-RoBERTa-XL model)"),t$.forEach(t),Hno=i(S),$s=n(S,"LI",{});var a$=s($s);Bte=n(a$,"STRONG",{});var szr=s(Bte);Uno=r(szr,"xlnet"),szr.forEach(t),Jno=r(a$," \u2014 "),GB=n(a$,"A",{href:!0});var lzr=s(GB);Yno=r(lzr,"XLNetTokenizer"),lzr.forEach(t),Kno=r(a$," or "),OB=n(a$,"A",{href:!0});var izr=s(OB);Zno=r(izr,"XLNetTokenizerFast"),izr.forEach(t),eso=r(a$," (XLNet model)"),a$.forEach(t),oso=i(S),ks=n(S,"LI",{});var n$=s(ks);Pte=n(n$,"STRONG",{});var dzr=s(Pte);rso=r(dzr,"yoso"),dzr.forEach(t),tso=r(n$," \u2014 "),VB=n(n$,"A",{href:!0});var czr=s(VB);aso=r(czr,"AlbertTokenizer"),czr.forEach(t),nso=r(n$," or "),XB=n(n$,"A",{href:!0});var fzr=s(XB);sso=r(fzr,"AlbertTokenizerFast"),fzr.forEach(t),lso=r(n$," (YOSO model)"),n$.forEach(t),S.forEach(t),iso=i(Is),T(Hg.$$.fragment,Is),Is.forEach(t),dso=i(Ps),Ug=n(Ps,"DIV",{class:!0});var kqe=s(Ug);T(nA.$$.fragment,kqe),cso=i(kqe),Ite=n(kqe,"P",{});var mzr=s(Ite);fso=r(mzr,"Register a new tokenizer in this mapping."),mzr.forEach(t),kqe.forEach(t),Ps.forEach(t),SPe=i(f),bi=n(f,"H2",{class:!0});var Sqe=s(bi);Jg=n(Sqe,"A",{id:!0,class:!0,href:!0});var gzr=s(Jg);qte=n(gzr,"SPAN",{});var hzr=s(qte);T(sA.$$.fragment,hzr),hzr.forEach(t),gzr.forEach(t),mso=i(Sqe),Nte=n(Sqe,"SPAN",{});var pzr=s(Nte);gso=r(pzr,"AutoFeatureExtractor"),pzr.forEach(t),Sqe.forEach(t),RPe=i(f),Ao=n(f,"DIV",{class:!0});var qs=s(Ao);T(lA.$$.fragment,qs),hso=i(qs),iA=n(qs,"P",{});var Rqe=s(iA);pso=r(Rqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),zB=n(Rqe,"A",{href:!0});var uzr=s(zB);uso=r(uzr,"AutoFeatureExtractor.from_pretrained()"),uzr.forEach(t),_so=r(Rqe," class method."),Rqe.forEach(t),bso=i(qs),dA=n(qs,"P",{});var Bqe=s(dA);vso=r(Bqe,"This class cannot be instantiated directly using "),jte=n(Bqe,"CODE",{});var _zr=s(jte);Fso=r(_zr,"__init__()"),_zr.forEach(t),Tso=r(Bqe," (throws an error)."),Bqe.forEach(t),Mso=i(qs),Qe=n(qs,"DIV",{class:!0});var Yt=s(Qe);T(cA.$$.fragment,Yt),Eso=i(Yt),Dte=n(Yt,"P",{});var bzr=s(Dte);Cso=r(bzr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),bzr.forEach(t),wso=i(Yt),wa=n(Yt,"P",{});var HC=s(wa);Aso=r(HC,"The feature extractor class to instantiate is selected based on the "),Gte=n(HC,"CODE",{});var vzr=s(Gte);yso=r(vzr,"model_type"),vzr.forEach(t),Lso=r(HC,` property of the config object
(either passed as an argument or loaded from `),Ote=n(HC,"CODE",{});var Fzr=s(Ote);xso=r(Fzr,"pretrained_model_name_or_path"),Fzr.forEach(t),$so=r(HC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Vte=n(HC,"CODE",{});var Tzr=s(Vte);kso=r(Tzr,"pretrained_model_name_or_path"),Tzr.forEach(t),Sso=r(HC,":"),HC.forEach(t),Rso=i(Yt),te=n(Yt,"UL",{});var se=s(te);Yg=n(se,"LI",{});var O5e=s(Yg);Xte=n(O5e,"STRONG",{});var Mzr=s(Xte);Bso=r(Mzr,"beit"),Mzr.forEach(t),Pso=r(O5e," \u2014 "),QB=n(O5e,"A",{href:!0});var Ezr=s(QB);Iso=r(Ezr,"BeitFeatureExtractor"),Ezr.forEach(t),qso=r(O5e," (BEiT model)"),O5e.forEach(t),Nso=i(se),Kg=n(se,"LI",{});var V5e=s(Kg);zte=n(V5e,"STRONG",{});var Czr=s(zte);jso=r(Czr,"clip"),Czr.forEach(t),Dso=r(V5e," \u2014 "),WB=n(V5e,"A",{href:!0});var wzr=s(WB);Gso=r(wzr,"CLIPFeatureExtractor"),wzr.forEach(t),Oso=r(V5e," (CLIP model)"),V5e.forEach(t),Vso=i(se),Zg=n(se,"LI",{});var X5e=s(Zg);Qte=n(X5e,"STRONG",{});var Azr=s(Qte);Xso=r(Azr,"convnext"),Azr.forEach(t),zso=r(X5e," \u2014 "),HB=n(X5e,"A",{href:!0});var yzr=s(HB);Qso=r(yzr,"ConvNextFeatureExtractor"),yzr.forEach(t),Wso=r(X5e," (ConvNext model)"),X5e.forEach(t),Hso=i(se),eh=n(se,"LI",{});var z5e=s(eh);Wte=n(z5e,"STRONG",{});var Lzr=s(Wte);Uso=r(Lzr,"data2vec-audio"),Lzr.forEach(t),Jso=r(z5e," \u2014 "),UB=n(z5e,"A",{href:!0});var xzr=s(UB);Yso=r(xzr,"Wav2Vec2FeatureExtractor"),xzr.forEach(t),Kso=r(z5e," (Data2VecAudio model)"),z5e.forEach(t),Zso=i(se),oh=n(se,"LI",{});var Q5e=s(oh);Hte=n(Q5e,"STRONG",{});var $zr=s(Hte);elo=r($zr,"data2vec-vision"),$zr.forEach(t),olo=r(Q5e," \u2014 "),JB=n(Q5e,"A",{href:!0});var kzr=s(JB);rlo=r(kzr,"BeitFeatureExtractor"),kzr.forEach(t),tlo=r(Q5e," (Data2VecVision model)"),Q5e.forEach(t),alo=i(se),rh=n(se,"LI",{});var W5e=s(rh);Ute=n(W5e,"STRONG",{});var Szr=s(Ute);nlo=r(Szr,"deit"),Szr.forEach(t),slo=r(W5e," \u2014 "),YB=n(W5e,"A",{href:!0});var Rzr=s(YB);llo=r(Rzr,"DeiTFeatureExtractor"),Rzr.forEach(t),ilo=r(W5e," (DeiT model)"),W5e.forEach(t),dlo=i(se),th=n(se,"LI",{});var H5e=s(th);Jte=n(H5e,"STRONG",{});var Bzr=s(Jte);clo=r(Bzr,"detr"),Bzr.forEach(t),flo=r(H5e," \u2014 "),KB=n(H5e,"A",{href:!0});var Pzr=s(KB);mlo=r(Pzr,"DetrFeatureExtractor"),Pzr.forEach(t),glo=r(H5e," (DETR model)"),H5e.forEach(t),hlo=i(se),ah=n(se,"LI",{});var U5e=s(ah);Yte=n(U5e,"STRONG",{});var Izr=s(Yte);plo=r(Izr,"dpt"),Izr.forEach(t),ulo=r(U5e," \u2014 "),ZB=n(U5e,"A",{href:!0});var qzr=s(ZB);_lo=r(qzr,"DPTFeatureExtractor"),qzr.forEach(t),blo=r(U5e," (DPT model)"),U5e.forEach(t),vlo=i(se),nh=n(se,"LI",{});var J5e=s(nh);Kte=n(J5e,"STRONG",{});var Nzr=s(Kte);Flo=r(Nzr,"glpn"),Nzr.forEach(t),Tlo=r(J5e," \u2014 "),eP=n(J5e,"A",{href:!0});var jzr=s(eP);Mlo=r(jzr,"GLPNFeatureExtractor"),jzr.forEach(t),Elo=r(J5e," (GLPN model)"),J5e.forEach(t),Clo=i(se),sh=n(se,"LI",{});var Y5e=s(sh);Zte=n(Y5e,"STRONG",{});var Dzr=s(Zte);wlo=r(Dzr,"hubert"),Dzr.forEach(t),Alo=r(Y5e," \u2014 "),oP=n(Y5e,"A",{href:!0});var Gzr=s(oP);ylo=r(Gzr,"Wav2Vec2FeatureExtractor"),Gzr.forEach(t),Llo=r(Y5e," (Hubert model)"),Y5e.forEach(t),xlo=i(se),lh=n(se,"LI",{});var K5e=s(lh);eae=n(K5e,"STRONG",{});var Ozr=s(eae);$lo=r(Ozr,"layoutlmv2"),Ozr.forEach(t),klo=r(K5e," \u2014 "),rP=n(K5e,"A",{href:!0});var Vzr=s(rP);Slo=r(Vzr,"LayoutLMv2FeatureExtractor"),Vzr.forEach(t),Rlo=r(K5e," (LayoutLMv2 model)"),K5e.forEach(t),Blo=i(se),ih=n(se,"LI",{});var Z5e=s(ih);oae=n(Z5e,"STRONG",{});var Xzr=s(oae);Plo=r(Xzr,"maskformer"),Xzr.forEach(t),Ilo=r(Z5e," \u2014 "),tP=n(Z5e,"A",{href:!0});var zzr=s(tP);qlo=r(zzr,"MaskFormerFeatureExtractor"),zzr.forEach(t),Nlo=r(Z5e," (MaskFormer model)"),Z5e.forEach(t),jlo=i(se),dh=n(se,"LI",{});var eCe=s(dh);rae=n(eCe,"STRONG",{});var Qzr=s(rae);Dlo=r(Qzr,"perceiver"),Qzr.forEach(t),Glo=r(eCe," \u2014 "),aP=n(eCe,"A",{href:!0});var Wzr=s(aP);Olo=r(Wzr,"PerceiverFeatureExtractor"),Wzr.forEach(t),Vlo=r(eCe," (Perceiver model)"),eCe.forEach(t),Xlo=i(se),ch=n(se,"LI",{});var oCe=s(ch);tae=n(oCe,"STRONG",{});var Hzr=s(tae);zlo=r(Hzr,"poolformer"),Hzr.forEach(t),Qlo=r(oCe," \u2014 "),nP=n(oCe,"A",{href:!0});var Uzr=s(nP);Wlo=r(Uzr,"PoolFormerFeatureExtractor"),Uzr.forEach(t),Hlo=r(oCe," (PoolFormer model)"),oCe.forEach(t),Ulo=i(se),fh=n(se,"LI",{});var rCe=s(fh);aae=n(rCe,"STRONG",{});var Jzr=s(aae);Jlo=r(Jzr,"regnet"),Jzr.forEach(t),Ylo=r(rCe," \u2014 "),sP=n(rCe,"A",{href:!0});var Yzr=s(sP);Klo=r(Yzr,"ConvNextFeatureExtractor"),Yzr.forEach(t),Zlo=r(rCe," (RegNet model)"),rCe.forEach(t),eio=i(se),mh=n(se,"LI",{});var tCe=s(mh);nae=n(tCe,"STRONG",{});var Kzr=s(nae);oio=r(Kzr,"resnet"),Kzr.forEach(t),rio=r(tCe," \u2014 "),lP=n(tCe,"A",{href:!0});var Zzr=s(lP);tio=r(Zzr,"ConvNextFeatureExtractor"),Zzr.forEach(t),aio=r(tCe," (ResNet model)"),tCe.forEach(t),nio=i(se),gh=n(se,"LI",{});var aCe=s(gh);sae=n(aCe,"STRONG",{});var eQr=s(sae);sio=r(eQr,"segformer"),eQr.forEach(t),lio=r(aCe," \u2014 "),iP=n(aCe,"A",{href:!0});var oQr=s(iP);iio=r(oQr,"SegformerFeatureExtractor"),oQr.forEach(t),dio=r(aCe," (SegFormer model)"),aCe.forEach(t),cio=i(se),hh=n(se,"LI",{});var nCe=s(hh);lae=n(nCe,"STRONG",{});var rQr=s(lae);fio=r(rQr,"speech_to_text"),rQr.forEach(t),mio=r(nCe," \u2014 "),dP=n(nCe,"A",{href:!0});var tQr=s(dP);gio=r(tQr,"Speech2TextFeatureExtractor"),tQr.forEach(t),hio=r(nCe," (Speech2Text model)"),nCe.forEach(t),pio=i(se),ph=n(se,"LI",{});var sCe=s(ph);iae=n(sCe,"STRONG",{});var aQr=s(iae);uio=r(aQr,"swin"),aQr.forEach(t),_io=r(sCe," \u2014 "),cP=n(sCe,"A",{href:!0});var nQr=s(cP);bio=r(nQr,"ViTFeatureExtractor"),nQr.forEach(t),vio=r(sCe," (Swin model)"),sCe.forEach(t),Fio=i(se),uh=n(se,"LI",{});var lCe=s(uh);dae=n(lCe,"STRONG",{});var sQr=s(dae);Tio=r(sQr,"van"),sQr.forEach(t),Mio=r(lCe," \u2014 "),fP=n(lCe,"A",{href:!0});var lQr=s(fP);Eio=r(lQr,"ConvNextFeatureExtractor"),lQr.forEach(t),Cio=r(lCe," (VAN model)"),lCe.forEach(t),wio=i(se),_h=n(se,"LI",{});var iCe=s(_h);cae=n(iCe,"STRONG",{});var iQr=s(cae);Aio=r(iQr,"vit"),iQr.forEach(t),yio=r(iCe," \u2014 "),mP=n(iCe,"A",{href:!0});var dQr=s(mP);Lio=r(dQr,"ViTFeatureExtractor"),dQr.forEach(t),xio=r(iCe," (ViT model)"),iCe.forEach(t),$io=i(se),bh=n(se,"LI",{});var dCe=s(bh);fae=n(dCe,"STRONG",{});var cQr=s(fae);kio=r(cQr,"vit_mae"),cQr.forEach(t),Sio=r(dCe," \u2014 "),gP=n(dCe,"A",{href:!0});var fQr=s(gP);Rio=r(fQr,"ViTFeatureExtractor"),fQr.forEach(t),Bio=r(dCe," (ViTMAE model)"),dCe.forEach(t),Pio=i(se),vh=n(se,"LI",{});var cCe=s(vh);mae=n(cCe,"STRONG",{});var mQr=s(mae);Iio=r(mQr,"wav2vec2"),mQr.forEach(t),qio=r(cCe," \u2014 "),hP=n(cCe,"A",{href:!0});var gQr=s(hP);Nio=r(gQr,"Wav2Vec2FeatureExtractor"),gQr.forEach(t),jio=r(cCe," (Wav2Vec2 model)"),cCe.forEach(t),Dio=i(se),Fh=n(se,"LI",{});var fCe=s(Fh);gae=n(fCe,"STRONG",{});var hQr=s(gae);Gio=r(hQr,"yolos"),hQr.forEach(t),Oio=r(fCe," \u2014 "),pP=n(fCe,"A",{href:!0});var pQr=s(pP);Vio=r(pQr,"YolosFeatureExtractor"),pQr.forEach(t),Xio=r(fCe," (YOLOS model)"),fCe.forEach(t),se.forEach(t),zio=i(Yt),T(Th.$$.fragment,Yt),Qio=i(Yt),T(Mh.$$.fragment,Yt),Yt.forEach(t),Wio=i(qs),Eh=n(qs,"DIV",{class:!0});var Pqe=s(Eh);T(fA.$$.fragment,Pqe),Hio=i(Pqe),hae=n(Pqe,"P",{});var uQr=s(hae);Uio=r(uQr,"Register a new feature extractor for this class."),uQr.forEach(t),Pqe.forEach(t),qs.forEach(t),BPe=i(f),vi=n(f,"H2",{class:!0});var Iqe=s(vi);Ch=n(Iqe,"A",{id:!0,class:!0,href:!0});var _Qr=s(Ch);pae=n(_Qr,"SPAN",{});var bQr=s(pae);T(mA.$$.fragment,bQr),bQr.forEach(t),_Qr.forEach(t),Jio=i(Iqe),uae=n(Iqe,"SPAN",{});var vQr=s(uae);Yio=r(vQr,"AutoProcessor"),vQr.forEach(t),Iqe.forEach(t),PPe=i(f),yo=n(f,"DIV",{class:!0});var Ns=s(yo);T(gA.$$.fragment,Ns),Kio=i(Ns),hA=n(Ns,"P",{});var qqe=s(hA);Zio=r(qqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),uP=n(qqe,"A",{href:!0});var FQr=s(uP);edo=r(FQr,"AutoProcessor.from_pretrained()"),FQr.forEach(t),odo=r(qqe," class method."),qqe.forEach(t),rdo=i(Ns),pA=n(Ns,"P",{});var Nqe=s(pA);tdo=r(Nqe,"This class cannot be instantiated directly using "),_ae=n(Nqe,"CODE",{});var TQr=s(_ae);ado=r(TQr,"__init__()"),TQr.forEach(t),ndo=r(Nqe," (throws an error)."),Nqe.forEach(t),sdo=i(Ns),We=n(Ns,"DIV",{class:!0});var Kt=s(We);T(uA.$$.fragment,Kt),ldo=i(Kt),bae=n(Kt,"P",{});var MQr=s(bae);ido=r(MQr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),MQr.forEach(t),ddo=i(Kt),Fi=n(Kt,"P",{});var KY=s(Fi);cdo=r(KY,"The processor class to instantiate is selected based on the "),vae=n(KY,"CODE",{});var EQr=s(vae);fdo=r(EQr,"model_type"),EQr.forEach(t),mdo=r(KY,` property of the config object (either
passed as an argument or loaded from `),Fae=n(KY,"CODE",{});var CQr=s(Fae);gdo=r(CQr,"pretrained_model_name_or_path"),CQr.forEach(t),hdo=r(KY," if possible):"),KY.forEach(t),pdo=i(Kt),be=n(Kt,"UL",{});var Fe=s(be);wh=n(Fe,"LI",{});var mCe=s(wh);Tae=n(mCe,"STRONG",{});var wQr=s(Tae);udo=r(wQr,"clip"),wQr.forEach(t),_do=r(mCe," \u2014 "),_P=n(mCe,"A",{href:!0});var AQr=s(_P);bdo=r(AQr,"CLIPProcessor"),AQr.forEach(t),vdo=r(mCe," (CLIP model)"),mCe.forEach(t),Fdo=i(Fe),Ah=n(Fe,"LI",{});var gCe=s(Ah);Mae=n(gCe,"STRONG",{});var yQr=s(Mae);Tdo=r(yQr,"layoutlmv2"),yQr.forEach(t),Mdo=r(gCe," \u2014 "),bP=n(gCe,"A",{href:!0});var LQr=s(bP);Edo=r(LQr,"LayoutLMv2Processor"),LQr.forEach(t),Cdo=r(gCe," (LayoutLMv2 model)"),gCe.forEach(t),wdo=i(Fe),yh=n(Fe,"LI",{});var hCe=s(yh);Eae=n(hCe,"STRONG",{});var xQr=s(Eae);Ado=r(xQr,"layoutxlm"),xQr.forEach(t),ydo=r(hCe," \u2014 "),vP=n(hCe,"A",{href:!0});var $Qr=s(vP);Ldo=r($Qr,"LayoutXLMProcessor"),$Qr.forEach(t),xdo=r(hCe," (LayoutXLM model)"),hCe.forEach(t),$do=i(Fe),Lh=n(Fe,"LI",{});var pCe=s(Lh);Cae=n(pCe,"STRONG",{});var kQr=s(Cae);kdo=r(kQr,"sew"),kQr.forEach(t),Sdo=r(pCe," \u2014 "),FP=n(pCe,"A",{href:!0});var SQr=s(FP);Rdo=r(SQr,"Wav2Vec2Processor"),SQr.forEach(t),Bdo=r(pCe," (SEW model)"),pCe.forEach(t),Pdo=i(Fe),xh=n(Fe,"LI",{});var uCe=s(xh);wae=n(uCe,"STRONG",{});var RQr=s(wae);Ido=r(RQr,"sew-d"),RQr.forEach(t),qdo=r(uCe," \u2014 "),TP=n(uCe,"A",{href:!0});var BQr=s(TP);Ndo=r(BQr,"Wav2Vec2Processor"),BQr.forEach(t),jdo=r(uCe," (SEW-D model)"),uCe.forEach(t),Ddo=i(Fe),$h=n(Fe,"LI",{});var _Ce=s($h);Aae=n(_Ce,"STRONG",{});var PQr=s(Aae);Gdo=r(PQr,"speech_to_text"),PQr.forEach(t),Odo=r(_Ce," \u2014 "),MP=n(_Ce,"A",{href:!0});var IQr=s(MP);Vdo=r(IQr,"Speech2TextProcessor"),IQr.forEach(t),Xdo=r(_Ce," (Speech2Text model)"),_Ce.forEach(t),zdo=i(Fe),kh=n(Fe,"LI",{});var bCe=s(kh);yae=n(bCe,"STRONG",{});var qQr=s(yae);Qdo=r(qQr,"speech_to_text_2"),qQr.forEach(t),Wdo=r(bCe," \u2014 "),EP=n(bCe,"A",{href:!0});var NQr=s(EP);Hdo=r(NQr,"Speech2Text2Processor"),NQr.forEach(t),Udo=r(bCe," (Speech2Text2 model)"),bCe.forEach(t),Jdo=i(Fe),Sh=n(Fe,"LI",{});var vCe=s(Sh);Lae=n(vCe,"STRONG",{});var jQr=s(Lae);Ydo=r(jQr,"trocr"),jQr.forEach(t),Kdo=r(vCe," \u2014 "),CP=n(vCe,"A",{href:!0});var DQr=s(CP);Zdo=r(DQr,"TrOCRProcessor"),DQr.forEach(t),eco=r(vCe," (TrOCR model)"),vCe.forEach(t),oco=i(Fe),Rh=n(Fe,"LI",{});var FCe=s(Rh);xae=n(FCe,"STRONG",{});var GQr=s(xae);rco=r(GQr,"unispeech"),GQr.forEach(t),tco=r(FCe," \u2014 "),wP=n(FCe,"A",{href:!0});var OQr=s(wP);aco=r(OQr,"Wav2Vec2Processor"),OQr.forEach(t),nco=r(FCe," (UniSpeech model)"),FCe.forEach(t),sco=i(Fe),Bh=n(Fe,"LI",{});var TCe=s(Bh);$ae=n(TCe,"STRONG",{});var VQr=s($ae);lco=r(VQr,"unispeech-sat"),VQr.forEach(t),ico=r(TCe," \u2014 "),AP=n(TCe,"A",{href:!0});var XQr=s(AP);dco=r(XQr,"Wav2Vec2Processor"),XQr.forEach(t),cco=r(TCe," (UniSpeechSat model)"),TCe.forEach(t),fco=i(Fe),Ph=n(Fe,"LI",{});var MCe=s(Ph);kae=n(MCe,"STRONG",{});var zQr=s(kae);mco=r(zQr,"vilt"),zQr.forEach(t),gco=r(MCe," \u2014 "),yP=n(MCe,"A",{href:!0});var QQr=s(yP);hco=r(QQr,"ViltProcessor"),QQr.forEach(t),pco=r(MCe," (ViLT model)"),MCe.forEach(t),uco=i(Fe),Ih=n(Fe,"LI",{});var ECe=s(Ih);Sae=n(ECe,"STRONG",{});var WQr=s(Sae);_co=r(WQr,"vision-text-dual-encoder"),WQr.forEach(t),bco=r(ECe," \u2014 "),LP=n(ECe,"A",{href:!0});var HQr=s(LP);vco=r(HQr,"VisionTextDualEncoderProcessor"),HQr.forEach(t),Fco=r(ECe," (VisionTextDualEncoder model)"),ECe.forEach(t),Tco=i(Fe),qh=n(Fe,"LI",{});var CCe=s(qh);Rae=n(CCe,"STRONG",{});var UQr=s(Rae);Mco=r(UQr,"wav2vec2"),UQr.forEach(t),Eco=r(CCe," \u2014 "),xP=n(CCe,"A",{href:!0});var JQr=s(xP);Cco=r(JQr,"Wav2Vec2Processor"),JQr.forEach(t),wco=r(CCe," (Wav2Vec2 model)"),CCe.forEach(t),Aco=i(Fe),Nh=n(Fe,"LI",{});var wCe=s(Nh);Bae=n(wCe,"STRONG",{});var YQr=s(Bae);yco=r(YQr,"wavlm"),YQr.forEach(t),Lco=r(wCe," \u2014 "),$P=n(wCe,"A",{href:!0});var KQr=s($P);xco=r(KQr,"Wav2Vec2Processor"),KQr.forEach(t),$co=r(wCe," (WavLM model)"),wCe.forEach(t),Fe.forEach(t),kco=i(Kt),T(jh.$$.fragment,Kt),Sco=i(Kt),T(Dh.$$.fragment,Kt),Kt.forEach(t),Rco=i(Ns),Gh=n(Ns,"DIV",{class:!0});var jqe=s(Gh);T(_A.$$.fragment,jqe),Bco=i(jqe),Pae=n(jqe,"P",{});var ZQr=s(Pae);Pco=r(ZQr,"Register a new processor for this class."),ZQr.forEach(t),jqe.forEach(t),Ns.forEach(t),IPe=i(f),Ti=n(f,"H2",{class:!0});var Dqe=s(Ti);Oh=n(Dqe,"A",{id:!0,class:!0,href:!0});var eWr=s(Oh);Iae=n(eWr,"SPAN",{});var oWr=s(Iae);T(bA.$$.fragment,oWr),oWr.forEach(t),eWr.forEach(t),Ico=i(Dqe),qae=n(Dqe,"SPAN",{});var rWr=s(qae);qco=r(rWr,"AutoModel"),rWr.forEach(t),Dqe.forEach(t),qPe=i(f),Lo=n(f,"DIV",{class:!0});var js=s(Lo);T(vA.$$.fragment,js),Nco=i(js),Mi=n(js,"P",{});var ZY=s(Mi);jco=r(ZY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kP=n(ZY,"A",{href:!0});var tWr=s(kP);Dco=r(tWr,"from_pretrained()"),tWr.forEach(t),Gco=r(ZY," class method or the "),SP=n(ZY,"A",{href:!0});var aWr=s(SP);Oco=r(aWr,"from_config()"),aWr.forEach(t),Vco=r(ZY,` class
method.`),ZY.forEach(t),Xco=i(js),FA=n(js,"P",{});var Gqe=s(FA);zco=r(Gqe,"This class cannot be instantiated directly using "),Nae=n(Gqe,"CODE",{});var nWr=s(Nae);Qco=r(nWr,"__init__()"),nWr.forEach(t),Wco=r(Gqe," (throws an error)."),Gqe.forEach(t),Hco=i(js),ot=n(js,"DIV",{class:!0});var UC=s(ot);T(TA.$$.fragment,UC),Uco=i(UC),jae=n(UC,"P",{});var sWr=s(jae);Jco=r(sWr,"Instantiates one of the base model classes of the library from a configuration."),sWr.forEach(t),Yco=i(UC),Ei=n(UC,"P",{});var eK=s(Ei);Kco=r(eK,`Note:
Loading a model from its configuration file does `),Dae=n(eK,"STRONG",{});var lWr=s(Dae);Zco=r(lWr,"not"),lWr.forEach(t),efo=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RP=n(eK,"A",{href:!0});var iWr=s(RP);ofo=r(iWr,"from_pretrained()"),iWr.forEach(t),rfo=r(eK," to load the model weights."),eK.forEach(t),tfo=i(UC),T(Vh.$$.fragment,UC),UC.forEach(t),afo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(MA.$$.fragment,Zt),nfo=i(Zt),Gae=n(Zt,"P",{});var dWr=s(Gae);sfo=r(dWr,"Instantiate one of the base model classes of the library from a pretrained model."),dWr.forEach(t),lfo=i(Zt),Aa=n(Zt,"P",{});var JC=s(Aa);ifo=r(JC,"The model class to instantiate is selected based on the "),Oae=n(JC,"CODE",{});var cWr=s(Oae);dfo=r(cWr,"model_type"),cWr.forEach(t),cfo=r(JC,` property of the config object (either
passed as an argument or loaded from `),Vae=n(JC,"CODE",{});var fWr=s(Vae);ffo=r(fWr,"pretrained_model_name_or_path"),fWr.forEach(t),mfo=r(JC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xae=n(JC,"CODE",{});var mWr=s(Xae);gfo=r(mWr,"pretrained_model_name_or_path"),mWr.forEach(t),hfo=r(JC,":"),JC.forEach(t),pfo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Xh=n($,"LI",{});var ACe=s(Xh);zae=n(ACe,"STRONG",{});var gWr=s(zae);ufo=r(gWr,"albert"),gWr.forEach(t),_fo=r(ACe," \u2014 "),BP=n(ACe,"A",{href:!0});var hWr=s(BP);bfo=r(hWr,"AlbertModel"),hWr.forEach(t),vfo=r(ACe," (ALBERT model)"),ACe.forEach(t),Ffo=i($),zh=n($,"LI",{});var yCe=s(zh);Qae=n(yCe,"STRONG",{});var pWr=s(Qae);Tfo=r(pWr,"bart"),pWr.forEach(t),Mfo=r(yCe," \u2014 "),PP=n(yCe,"A",{href:!0});var uWr=s(PP);Efo=r(uWr,"BartModel"),uWr.forEach(t),Cfo=r(yCe," (BART model)"),yCe.forEach(t),wfo=i($),Qh=n($,"LI",{});var LCe=s(Qh);Wae=n(LCe,"STRONG",{});var _Wr=s(Wae);Afo=r(_Wr,"beit"),_Wr.forEach(t),yfo=r(LCe," \u2014 "),IP=n(LCe,"A",{href:!0});var bWr=s(IP);Lfo=r(bWr,"BeitModel"),bWr.forEach(t),xfo=r(LCe," (BEiT model)"),LCe.forEach(t),$fo=i($),Wh=n($,"LI",{});var xCe=s(Wh);Hae=n(xCe,"STRONG",{});var vWr=s(Hae);kfo=r(vWr,"bert"),vWr.forEach(t),Sfo=r(xCe," \u2014 "),qP=n(xCe,"A",{href:!0});var FWr=s(qP);Rfo=r(FWr,"BertModel"),FWr.forEach(t),Bfo=r(xCe," (BERT model)"),xCe.forEach(t),Pfo=i($),Hh=n($,"LI",{});var $Ce=s(Hh);Uae=n($Ce,"STRONG",{});var TWr=s(Uae);Ifo=r(TWr,"bert-generation"),TWr.forEach(t),qfo=r($Ce," \u2014 "),NP=n($Ce,"A",{href:!0});var MWr=s(NP);Nfo=r(MWr,"BertGenerationEncoder"),MWr.forEach(t),jfo=r($Ce," (Bert Generation model)"),$Ce.forEach(t),Dfo=i($),Uh=n($,"LI",{});var kCe=s(Uh);Jae=n(kCe,"STRONG",{});var EWr=s(Jae);Gfo=r(EWr,"big_bird"),EWr.forEach(t),Ofo=r(kCe," \u2014 "),jP=n(kCe,"A",{href:!0});var CWr=s(jP);Vfo=r(CWr,"BigBirdModel"),CWr.forEach(t),Xfo=r(kCe," (BigBird model)"),kCe.forEach(t),zfo=i($),Jh=n($,"LI",{});var SCe=s(Jh);Yae=n(SCe,"STRONG",{});var wWr=s(Yae);Qfo=r(wWr,"bigbird_pegasus"),wWr.forEach(t),Wfo=r(SCe," \u2014 "),DP=n(SCe,"A",{href:!0});var AWr=s(DP);Hfo=r(AWr,"BigBirdPegasusModel"),AWr.forEach(t),Ufo=r(SCe," (BigBirdPegasus model)"),SCe.forEach(t),Jfo=i($),Yh=n($,"LI",{});var RCe=s(Yh);Kae=n(RCe,"STRONG",{});var yWr=s(Kae);Yfo=r(yWr,"blenderbot"),yWr.forEach(t),Kfo=r(RCe," \u2014 "),GP=n(RCe,"A",{href:!0});var LWr=s(GP);Zfo=r(LWr,"BlenderbotModel"),LWr.forEach(t),emo=r(RCe," (Blenderbot model)"),RCe.forEach(t),omo=i($),Kh=n($,"LI",{});var BCe=s(Kh);Zae=n(BCe,"STRONG",{});var xWr=s(Zae);rmo=r(xWr,"blenderbot-small"),xWr.forEach(t),tmo=r(BCe," \u2014 "),OP=n(BCe,"A",{href:!0});var $Wr=s(OP);amo=r($Wr,"BlenderbotSmallModel"),$Wr.forEach(t),nmo=r(BCe," (BlenderbotSmall model)"),BCe.forEach(t),smo=i($),Zh=n($,"LI",{});var PCe=s(Zh);ene=n(PCe,"STRONG",{});var kWr=s(ene);lmo=r(kWr,"camembert"),kWr.forEach(t),imo=r(PCe," \u2014 "),VP=n(PCe,"A",{href:!0});var SWr=s(VP);dmo=r(SWr,"CamembertModel"),SWr.forEach(t),cmo=r(PCe," (CamemBERT model)"),PCe.forEach(t),fmo=i($),ep=n($,"LI",{});var ICe=s(ep);one=n(ICe,"STRONG",{});var RWr=s(one);mmo=r(RWr,"canine"),RWr.forEach(t),gmo=r(ICe," \u2014 "),XP=n(ICe,"A",{href:!0});var BWr=s(XP);hmo=r(BWr,"CanineModel"),BWr.forEach(t),pmo=r(ICe," (Canine model)"),ICe.forEach(t),umo=i($),op=n($,"LI",{});var qCe=s(op);rne=n(qCe,"STRONG",{});var PWr=s(rne);_mo=r(PWr,"clip"),PWr.forEach(t),bmo=r(qCe," \u2014 "),zP=n(qCe,"A",{href:!0});var IWr=s(zP);vmo=r(IWr,"CLIPModel"),IWr.forEach(t),Fmo=r(qCe," (CLIP model)"),qCe.forEach(t),Tmo=i($),rp=n($,"LI",{});var NCe=s(rp);tne=n(NCe,"STRONG",{});var qWr=s(tne);Mmo=r(qWr,"convbert"),qWr.forEach(t),Emo=r(NCe," \u2014 "),QP=n(NCe,"A",{href:!0});var NWr=s(QP);Cmo=r(NWr,"ConvBertModel"),NWr.forEach(t),wmo=r(NCe," (ConvBERT model)"),NCe.forEach(t),Amo=i($),tp=n($,"LI",{});var jCe=s(tp);ane=n(jCe,"STRONG",{});var jWr=s(ane);ymo=r(jWr,"convnext"),jWr.forEach(t),Lmo=r(jCe," \u2014 "),WP=n(jCe,"A",{href:!0});var DWr=s(WP);xmo=r(DWr,"ConvNextModel"),DWr.forEach(t),$mo=r(jCe," (ConvNext model)"),jCe.forEach(t),kmo=i($),ap=n($,"LI",{});var DCe=s(ap);nne=n(DCe,"STRONG",{});var GWr=s(nne);Smo=r(GWr,"ctrl"),GWr.forEach(t),Rmo=r(DCe," \u2014 "),HP=n(DCe,"A",{href:!0});var OWr=s(HP);Bmo=r(OWr,"CTRLModel"),OWr.forEach(t),Pmo=r(DCe," (CTRL model)"),DCe.forEach(t),Imo=i($),np=n($,"LI",{});var GCe=s(np);sne=n(GCe,"STRONG",{});var VWr=s(sne);qmo=r(VWr,"data2vec-audio"),VWr.forEach(t),Nmo=r(GCe," \u2014 "),UP=n(GCe,"A",{href:!0});var XWr=s(UP);jmo=r(XWr,"Data2VecAudioModel"),XWr.forEach(t),Dmo=r(GCe," (Data2VecAudio model)"),GCe.forEach(t),Gmo=i($),sp=n($,"LI",{});var OCe=s(sp);lne=n(OCe,"STRONG",{});var zWr=s(lne);Omo=r(zWr,"data2vec-text"),zWr.forEach(t),Vmo=r(OCe," \u2014 "),JP=n(OCe,"A",{href:!0});var QWr=s(JP);Xmo=r(QWr,"Data2VecTextModel"),QWr.forEach(t),zmo=r(OCe," (Data2VecText model)"),OCe.forEach(t),Qmo=i($),lp=n($,"LI",{});var VCe=s(lp);ine=n(VCe,"STRONG",{});var WWr=s(ine);Wmo=r(WWr,"data2vec-vision"),WWr.forEach(t),Hmo=r(VCe," \u2014 "),YP=n(VCe,"A",{href:!0});var HWr=s(YP);Umo=r(HWr,"Data2VecVisionModel"),HWr.forEach(t),Jmo=r(VCe," (Data2VecVision model)"),VCe.forEach(t),Ymo=i($),ip=n($,"LI",{});var XCe=s(ip);dne=n(XCe,"STRONG",{});var UWr=s(dne);Kmo=r(UWr,"deberta"),UWr.forEach(t),Zmo=r(XCe," \u2014 "),KP=n(XCe,"A",{href:!0});var JWr=s(KP);ego=r(JWr,"DebertaModel"),JWr.forEach(t),ogo=r(XCe," (DeBERTa model)"),XCe.forEach(t),rgo=i($),dp=n($,"LI",{});var zCe=s(dp);cne=n(zCe,"STRONG",{});var YWr=s(cne);tgo=r(YWr,"deberta-v2"),YWr.forEach(t),ago=r(zCe," \u2014 "),ZP=n(zCe,"A",{href:!0});var KWr=s(ZP);ngo=r(KWr,"DebertaV2Model"),KWr.forEach(t),sgo=r(zCe," (DeBERTa-v2 model)"),zCe.forEach(t),lgo=i($),cp=n($,"LI",{});var QCe=s(cp);fne=n(QCe,"STRONG",{});var ZWr=s(fne);igo=r(ZWr,"decision_transformer"),ZWr.forEach(t),dgo=r(QCe," \u2014 "),eI=n(QCe,"A",{href:!0});var eHr=s(eI);cgo=r(eHr,"DecisionTransformerModel"),eHr.forEach(t),fgo=r(QCe," (Decision Transformer model)"),QCe.forEach(t),mgo=i($),fp=n($,"LI",{});var WCe=s(fp);mne=n(WCe,"STRONG",{});var oHr=s(mne);ggo=r(oHr,"deit"),oHr.forEach(t),hgo=r(WCe," \u2014 "),oI=n(WCe,"A",{href:!0});var rHr=s(oI);pgo=r(rHr,"DeiTModel"),rHr.forEach(t),ugo=r(WCe," (DeiT model)"),WCe.forEach(t),_go=i($),mp=n($,"LI",{});var HCe=s(mp);gne=n(HCe,"STRONG",{});var tHr=s(gne);bgo=r(tHr,"detr"),tHr.forEach(t),vgo=r(HCe," \u2014 "),rI=n(HCe,"A",{href:!0});var aHr=s(rI);Fgo=r(aHr,"DetrModel"),aHr.forEach(t),Tgo=r(HCe," (DETR model)"),HCe.forEach(t),Mgo=i($),gp=n($,"LI",{});var UCe=s(gp);hne=n(UCe,"STRONG",{});var nHr=s(hne);Ego=r(nHr,"distilbert"),nHr.forEach(t),Cgo=r(UCe," \u2014 "),tI=n(UCe,"A",{href:!0});var sHr=s(tI);wgo=r(sHr,"DistilBertModel"),sHr.forEach(t),Ago=r(UCe," (DistilBERT model)"),UCe.forEach(t),ygo=i($),hp=n($,"LI",{});var JCe=s(hp);pne=n(JCe,"STRONG",{});var lHr=s(pne);Lgo=r(lHr,"dpr"),lHr.forEach(t),xgo=r(JCe," \u2014 "),aI=n(JCe,"A",{href:!0});var iHr=s(aI);$go=r(iHr,"DPRQuestionEncoder"),iHr.forEach(t),kgo=r(JCe," (DPR model)"),JCe.forEach(t),Sgo=i($),pp=n($,"LI",{});var YCe=s(pp);une=n(YCe,"STRONG",{});var dHr=s(une);Rgo=r(dHr,"dpt"),dHr.forEach(t),Bgo=r(YCe," \u2014 "),nI=n(YCe,"A",{href:!0});var cHr=s(nI);Pgo=r(cHr,"DPTModel"),cHr.forEach(t),Igo=r(YCe," (DPT model)"),YCe.forEach(t),qgo=i($),up=n($,"LI",{});var KCe=s(up);_ne=n(KCe,"STRONG",{});var fHr=s(_ne);Ngo=r(fHr,"electra"),fHr.forEach(t),jgo=r(KCe," \u2014 "),sI=n(KCe,"A",{href:!0});var mHr=s(sI);Dgo=r(mHr,"ElectraModel"),mHr.forEach(t),Ggo=r(KCe," (ELECTRA model)"),KCe.forEach(t),Ogo=i($),_p=n($,"LI",{});var ZCe=s(_p);bne=n(ZCe,"STRONG",{});var gHr=s(bne);Vgo=r(gHr,"flaubert"),gHr.forEach(t),Xgo=r(ZCe," \u2014 "),lI=n(ZCe,"A",{href:!0});var hHr=s(lI);zgo=r(hHr,"FlaubertModel"),hHr.forEach(t),Qgo=r(ZCe," (FlauBERT model)"),ZCe.forEach(t),Wgo=i($),bp=n($,"LI",{});var e3e=s(bp);vne=n(e3e,"STRONG",{});var pHr=s(vne);Hgo=r(pHr,"fnet"),pHr.forEach(t),Ugo=r(e3e," \u2014 "),iI=n(e3e,"A",{href:!0});var uHr=s(iI);Jgo=r(uHr,"FNetModel"),uHr.forEach(t),Ygo=r(e3e," (FNet model)"),e3e.forEach(t),Kgo=i($),vp=n($,"LI",{});var o3e=s(vp);Fne=n(o3e,"STRONG",{});var _Hr=s(Fne);Zgo=r(_Hr,"fsmt"),_Hr.forEach(t),eho=r(o3e," \u2014 "),dI=n(o3e,"A",{href:!0});var bHr=s(dI);oho=r(bHr,"FSMTModel"),bHr.forEach(t),rho=r(o3e," (FairSeq Machine-Translation model)"),o3e.forEach(t),tho=i($),Ss=n($,"LI",{});var s$=s(Ss);Tne=n(s$,"STRONG",{});var vHr=s(Tne);aho=r(vHr,"funnel"),vHr.forEach(t),nho=r(s$," \u2014 "),cI=n(s$,"A",{href:!0});var FHr=s(cI);sho=r(FHr,"FunnelModel"),FHr.forEach(t),lho=r(s$," or "),fI=n(s$,"A",{href:!0});var THr=s(fI);iho=r(THr,"FunnelBaseModel"),THr.forEach(t),dho=r(s$," (Funnel Transformer model)"),s$.forEach(t),cho=i($),Fp=n($,"LI",{});var r3e=s(Fp);Mne=n(r3e,"STRONG",{});var MHr=s(Mne);fho=r(MHr,"glpn"),MHr.forEach(t),mho=r(r3e," \u2014 "),mI=n(r3e,"A",{href:!0});var EHr=s(mI);gho=r(EHr,"GLPNModel"),EHr.forEach(t),hho=r(r3e," (GLPN model)"),r3e.forEach(t),pho=i($),Tp=n($,"LI",{});var t3e=s(Tp);Ene=n(t3e,"STRONG",{});var CHr=s(Ene);uho=r(CHr,"gpt2"),CHr.forEach(t),_ho=r(t3e," \u2014 "),gI=n(t3e,"A",{href:!0});var wHr=s(gI);bho=r(wHr,"GPT2Model"),wHr.forEach(t),vho=r(t3e," (OpenAI GPT-2 model)"),t3e.forEach(t),Fho=i($),Mp=n($,"LI",{});var a3e=s(Mp);Cne=n(a3e,"STRONG",{});var AHr=s(Cne);Tho=r(AHr,"gpt_neo"),AHr.forEach(t),Mho=r(a3e," \u2014 "),hI=n(a3e,"A",{href:!0});var yHr=s(hI);Eho=r(yHr,"GPTNeoModel"),yHr.forEach(t),Cho=r(a3e," (GPT Neo model)"),a3e.forEach(t),who=i($),Ep=n($,"LI",{});var n3e=s(Ep);wne=n(n3e,"STRONG",{});var LHr=s(wne);Aho=r(LHr,"gptj"),LHr.forEach(t),yho=r(n3e," \u2014 "),pI=n(n3e,"A",{href:!0});var xHr=s(pI);Lho=r(xHr,"GPTJModel"),xHr.forEach(t),xho=r(n3e," (GPT-J model)"),n3e.forEach(t),$ho=i($),Cp=n($,"LI",{});var s3e=s(Cp);Ane=n(s3e,"STRONG",{});var $Hr=s(Ane);kho=r($Hr,"hubert"),$Hr.forEach(t),Sho=r(s3e," \u2014 "),uI=n(s3e,"A",{href:!0});var kHr=s(uI);Rho=r(kHr,"HubertModel"),kHr.forEach(t),Bho=r(s3e," (Hubert model)"),s3e.forEach(t),Pho=i($),wp=n($,"LI",{});var l3e=s(wp);yne=n(l3e,"STRONG",{});var SHr=s(yne);Iho=r(SHr,"ibert"),SHr.forEach(t),qho=r(l3e," \u2014 "),_I=n(l3e,"A",{href:!0});var RHr=s(_I);Nho=r(RHr,"IBertModel"),RHr.forEach(t),jho=r(l3e," (I-BERT model)"),l3e.forEach(t),Dho=i($),Ap=n($,"LI",{});var i3e=s(Ap);Lne=n(i3e,"STRONG",{});var BHr=s(Lne);Gho=r(BHr,"imagegpt"),BHr.forEach(t),Oho=r(i3e," \u2014 "),bI=n(i3e,"A",{href:!0});var PHr=s(bI);Vho=r(PHr,"ImageGPTModel"),PHr.forEach(t),Xho=r(i3e," (ImageGPT model)"),i3e.forEach(t),zho=i($),yp=n($,"LI",{});var d3e=s(yp);xne=n(d3e,"STRONG",{});var IHr=s(xne);Qho=r(IHr,"layoutlm"),IHr.forEach(t),Who=r(d3e," \u2014 "),vI=n(d3e,"A",{href:!0});var qHr=s(vI);Hho=r(qHr,"LayoutLMModel"),qHr.forEach(t),Uho=r(d3e," (LayoutLM model)"),d3e.forEach(t),Jho=i($),Lp=n($,"LI",{});var c3e=s(Lp);$ne=n(c3e,"STRONG",{});var NHr=s($ne);Yho=r(NHr,"layoutlmv2"),NHr.forEach(t),Kho=r(c3e," \u2014 "),FI=n(c3e,"A",{href:!0});var jHr=s(FI);Zho=r(jHr,"LayoutLMv2Model"),jHr.forEach(t),epo=r(c3e," (LayoutLMv2 model)"),c3e.forEach(t),opo=i($),xp=n($,"LI",{});var f3e=s(xp);kne=n(f3e,"STRONG",{});var DHr=s(kne);rpo=r(DHr,"led"),DHr.forEach(t),tpo=r(f3e," \u2014 "),TI=n(f3e,"A",{href:!0});var GHr=s(TI);apo=r(GHr,"LEDModel"),GHr.forEach(t),npo=r(f3e," (LED model)"),f3e.forEach(t),spo=i($),$p=n($,"LI",{});var m3e=s($p);Sne=n(m3e,"STRONG",{});var OHr=s(Sne);lpo=r(OHr,"longformer"),OHr.forEach(t),ipo=r(m3e," \u2014 "),MI=n(m3e,"A",{href:!0});var VHr=s(MI);dpo=r(VHr,"LongformerModel"),VHr.forEach(t),cpo=r(m3e," (Longformer model)"),m3e.forEach(t),fpo=i($),kp=n($,"LI",{});var g3e=s(kp);Rne=n(g3e,"STRONG",{});var XHr=s(Rne);mpo=r(XHr,"luke"),XHr.forEach(t),gpo=r(g3e," \u2014 "),EI=n(g3e,"A",{href:!0});var zHr=s(EI);hpo=r(zHr,"LukeModel"),zHr.forEach(t),ppo=r(g3e," (LUKE model)"),g3e.forEach(t),upo=i($),Sp=n($,"LI",{});var h3e=s(Sp);Bne=n(h3e,"STRONG",{});var QHr=s(Bne);_po=r(QHr,"lxmert"),QHr.forEach(t),bpo=r(h3e," \u2014 "),CI=n(h3e,"A",{href:!0});var WHr=s(CI);vpo=r(WHr,"LxmertModel"),WHr.forEach(t),Fpo=r(h3e," (LXMERT model)"),h3e.forEach(t),Tpo=i($),Rp=n($,"LI",{});var p3e=s(Rp);Pne=n(p3e,"STRONG",{});var HHr=s(Pne);Mpo=r(HHr,"m2m_100"),HHr.forEach(t),Epo=r(p3e," \u2014 "),wI=n(p3e,"A",{href:!0});var UHr=s(wI);Cpo=r(UHr,"M2M100Model"),UHr.forEach(t),wpo=r(p3e," (M2M100 model)"),p3e.forEach(t),Apo=i($),Bp=n($,"LI",{});var u3e=s(Bp);Ine=n(u3e,"STRONG",{});var JHr=s(Ine);ypo=r(JHr,"marian"),JHr.forEach(t),Lpo=r(u3e," \u2014 "),AI=n(u3e,"A",{href:!0});var YHr=s(AI);xpo=r(YHr,"MarianModel"),YHr.forEach(t),$po=r(u3e," (Marian model)"),u3e.forEach(t),kpo=i($),Pp=n($,"LI",{});var _3e=s(Pp);qne=n(_3e,"STRONG",{});var KHr=s(qne);Spo=r(KHr,"maskformer"),KHr.forEach(t),Rpo=r(_3e," \u2014 "),yI=n(_3e,"A",{href:!0});var ZHr=s(yI);Bpo=r(ZHr,"MaskFormerModel"),ZHr.forEach(t),Ppo=r(_3e," (MaskFormer model)"),_3e.forEach(t),Ipo=i($),Ip=n($,"LI",{});var b3e=s(Ip);Nne=n(b3e,"STRONG",{});var eUr=s(Nne);qpo=r(eUr,"mbart"),eUr.forEach(t),Npo=r(b3e," \u2014 "),LI=n(b3e,"A",{href:!0});var oUr=s(LI);jpo=r(oUr,"MBartModel"),oUr.forEach(t),Dpo=r(b3e," (mBART model)"),b3e.forEach(t),Gpo=i($),qp=n($,"LI",{});var v3e=s(qp);jne=n(v3e,"STRONG",{});var rUr=s(jne);Opo=r(rUr,"megatron-bert"),rUr.forEach(t),Vpo=r(v3e," \u2014 "),xI=n(v3e,"A",{href:!0});var tUr=s(xI);Xpo=r(tUr,"MegatronBertModel"),tUr.forEach(t),zpo=r(v3e," (MegatronBert model)"),v3e.forEach(t),Qpo=i($),Np=n($,"LI",{});var F3e=s(Np);Dne=n(F3e,"STRONG",{});var aUr=s(Dne);Wpo=r(aUr,"mobilebert"),aUr.forEach(t),Hpo=r(F3e," \u2014 "),$I=n(F3e,"A",{href:!0});var nUr=s($I);Upo=r(nUr,"MobileBertModel"),nUr.forEach(t),Jpo=r(F3e," (MobileBERT model)"),F3e.forEach(t),Ypo=i($),jp=n($,"LI",{});var T3e=s(jp);Gne=n(T3e,"STRONG",{});var sUr=s(Gne);Kpo=r(sUr,"mpnet"),sUr.forEach(t),Zpo=r(T3e," \u2014 "),kI=n(T3e,"A",{href:!0});var lUr=s(kI);euo=r(lUr,"MPNetModel"),lUr.forEach(t),ouo=r(T3e," (MPNet model)"),T3e.forEach(t),ruo=i($),Dp=n($,"LI",{});var M3e=s(Dp);One=n(M3e,"STRONG",{});var iUr=s(One);tuo=r(iUr,"mt5"),iUr.forEach(t),auo=r(M3e," \u2014 "),SI=n(M3e,"A",{href:!0});var dUr=s(SI);nuo=r(dUr,"MT5Model"),dUr.forEach(t),suo=r(M3e," (mT5 model)"),M3e.forEach(t),luo=i($),Gp=n($,"LI",{});var E3e=s(Gp);Vne=n(E3e,"STRONG",{});var cUr=s(Vne);iuo=r(cUr,"nystromformer"),cUr.forEach(t),duo=r(E3e," \u2014 "),RI=n(E3e,"A",{href:!0});var fUr=s(RI);cuo=r(fUr,"NystromformerModel"),fUr.forEach(t),fuo=r(E3e," (Nystromformer model)"),E3e.forEach(t),muo=i($),Op=n($,"LI",{});var C3e=s(Op);Xne=n(C3e,"STRONG",{});var mUr=s(Xne);guo=r(mUr,"openai-gpt"),mUr.forEach(t),huo=r(C3e," \u2014 "),BI=n(C3e,"A",{href:!0});var gUr=s(BI);puo=r(gUr,"OpenAIGPTModel"),gUr.forEach(t),uuo=r(C3e," (OpenAI GPT model)"),C3e.forEach(t),_uo=i($),Vp=n($,"LI",{});var w3e=s(Vp);zne=n(w3e,"STRONG",{});var hUr=s(zne);buo=r(hUr,"opt"),hUr.forEach(t),vuo=r(w3e," \u2014 "),PI=n(w3e,"A",{href:!0});var pUr=s(PI);Fuo=r(pUr,"OPTModel"),pUr.forEach(t),Tuo=r(w3e," (OPT model)"),w3e.forEach(t),Muo=i($),Xp=n($,"LI",{});var A3e=s(Xp);Qne=n(A3e,"STRONG",{});var uUr=s(Qne);Euo=r(uUr,"pegasus"),uUr.forEach(t),Cuo=r(A3e," \u2014 "),II=n(A3e,"A",{href:!0});var _Ur=s(II);wuo=r(_Ur,"PegasusModel"),_Ur.forEach(t),Auo=r(A3e," (Pegasus model)"),A3e.forEach(t),yuo=i($),zp=n($,"LI",{});var y3e=s(zp);Wne=n(y3e,"STRONG",{});var bUr=s(Wne);Luo=r(bUr,"perceiver"),bUr.forEach(t),xuo=r(y3e," \u2014 "),qI=n(y3e,"A",{href:!0});var vUr=s(qI);$uo=r(vUr,"PerceiverModel"),vUr.forEach(t),kuo=r(y3e," (Perceiver model)"),y3e.forEach(t),Suo=i($),Qp=n($,"LI",{});var L3e=s(Qp);Hne=n(L3e,"STRONG",{});var FUr=s(Hne);Ruo=r(FUr,"plbart"),FUr.forEach(t),Buo=r(L3e," \u2014 "),NI=n(L3e,"A",{href:!0});var TUr=s(NI);Puo=r(TUr,"PLBartModel"),TUr.forEach(t),Iuo=r(L3e," (PLBart model)"),L3e.forEach(t),quo=i($),Wp=n($,"LI",{});var x3e=s(Wp);Une=n(x3e,"STRONG",{});var MUr=s(Une);Nuo=r(MUr,"poolformer"),MUr.forEach(t),juo=r(x3e," \u2014 "),jI=n(x3e,"A",{href:!0});var EUr=s(jI);Duo=r(EUr,"PoolFormerModel"),EUr.forEach(t),Guo=r(x3e," (PoolFormer model)"),x3e.forEach(t),Ouo=i($),Hp=n($,"LI",{});var $3e=s(Hp);Jne=n($3e,"STRONG",{});var CUr=s(Jne);Vuo=r(CUr,"prophetnet"),CUr.forEach(t),Xuo=r($3e," \u2014 "),DI=n($3e,"A",{href:!0});var wUr=s(DI);zuo=r(wUr,"ProphetNetModel"),wUr.forEach(t),Quo=r($3e," (ProphetNet model)"),$3e.forEach(t),Wuo=i($),Up=n($,"LI",{});var k3e=s(Up);Yne=n(k3e,"STRONG",{});var AUr=s(Yne);Huo=r(AUr,"qdqbert"),AUr.forEach(t),Uuo=r(k3e," \u2014 "),GI=n(k3e,"A",{href:!0});var yUr=s(GI);Juo=r(yUr,"QDQBertModel"),yUr.forEach(t),Yuo=r(k3e," (QDQBert model)"),k3e.forEach(t),Kuo=i($),Jp=n($,"LI",{});var S3e=s(Jp);Kne=n(S3e,"STRONG",{});var LUr=s(Kne);Zuo=r(LUr,"reformer"),LUr.forEach(t),e_o=r(S3e," \u2014 "),OI=n(S3e,"A",{href:!0});var xUr=s(OI);o_o=r(xUr,"ReformerModel"),xUr.forEach(t),r_o=r(S3e," (Reformer model)"),S3e.forEach(t),t_o=i($),Yp=n($,"LI",{});var R3e=s(Yp);Zne=n(R3e,"STRONG",{});var $Ur=s(Zne);a_o=r($Ur,"regnet"),$Ur.forEach(t),n_o=r(R3e," \u2014 "),VI=n(R3e,"A",{href:!0});var kUr=s(VI);s_o=r(kUr,"RegNetModel"),kUr.forEach(t),l_o=r(R3e," (RegNet model)"),R3e.forEach(t),i_o=i($),Kp=n($,"LI",{});var B3e=s(Kp);ese=n(B3e,"STRONG",{});var SUr=s(ese);d_o=r(SUr,"rembert"),SUr.forEach(t),c_o=r(B3e," \u2014 "),XI=n(B3e,"A",{href:!0});var RUr=s(XI);f_o=r(RUr,"RemBertModel"),RUr.forEach(t),m_o=r(B3e," (RemBERT model)"),B3e.forEach(t),g_o=i($),Zp=n($,"LI",{});var P3e=s(Zp);ose=n(P3e,"STRONG",{});var BUr=s(ose);h_o=r(BUr,"resnet"),BUr.forEach(t),p_o=r(P3e," \u2014 "),zI=n(P3e,"A",{href:!0});var PUr=s(zI);u_o=r(PUr,"ResNetModel"),PUr.forEach(t),__o=r(P3e," (ResNet model)"),P3e.forEach(t),b_o=i($),eu=n($,"LI",{});var I3e=s(eu);rse=n(I3e,"STRONG",{});var IUr=s(rse);v_o=r(IUr,"retribert"),IUr.forEach(t),F_o=r(I3e," \u2014 "),QI=n(I3e,"A",{href:!0});var qUr=s(QI);T_o=r(qUr,"RetriBertModel"),qUr.forEach(t),M_o=r(I3e," (RetriBERT model)"),I3e.forEach(t),E_o=i($),ou=n($,"LI",{});var q3e=s(ou);tse=n(q3e,"STRONG",{});var NUr=s(tse);C_o=r(NUr,"roberta"),NUr.forEach(t),w_o=r(q3e," \u2014 "),WI=n(q3e,"A",{href:!0});var jUr=s(WI);A_o=r(jUr,"RobertaModel"),jUr.forEach(t),y_o=r(q3e," (RoBERTa model)"),q3e.forEach(t),L_o=i($),ru=n($,"LI",{});var N3e=s(ru);ase=n(N3e,"STRONG",{});var DUr=s(ase);x_o=r(DUr,"roformer"),DUr.forEach(t),$_o=r(N3e," \u2014 "),HI=n(N3e,"A",{href:!0});var GUr=s(HI);k_o=r(GUr,"RoFormerModel"),GUr.forEach(t),S_o=r(N3e," (RoFormer model)"),N3e.forEach(t),R_o=i($),tu=n($,"LI",{});var j3e=s(tu);nse=n(j3e,"STRONG",{});var OUr=s(nse);B_o=r(OUr,"segformer"),OUr.forEach(t),P_o=r(j3e," \u2014 "),UI=n(j3e,"A",{href:!0});var VUr=s(UI);I_o=r(VUr,"SegformerModel"),VUr.forEach(t),q_o=r(j3e," (SegFormer model)"),j3e.forEach(t),N_o=i($),au=n($,"LI",{});var D3e=s(au);sse=n(D3e,"STRONG",{});var XUr=s(sse);j_o=r(XUr,"sew"),XUr.forEach(t),D_o=r(D3e," \u2014 "),JI=n(D3e,"A",{href:!0});var zUr=s(JI);G_o=r(zUr,"SEWModel"),zUr.forEach(t),O_o=r(D3e," (SEW model)"),D3e.forEach(t),V_o=i($),nu=n($,"LI",{});var G3e=s(nu);lse=n(G3e,"STRONG",{});var QUr=s(lse);X_o=r(QUr,"sew-d"),QUr.forEach(t),z_o=r(G3e," \u2014 "),YI=n(G3e,"A",{href:!0});var WUr=s(YI);Q_o=r(WUr,"SEWDModel"),WUr.forEach(t),W_o=r(G3e," (SEW-D model)"),G3e.forEach(t),H_o=i($),su=n($,"LI",{});var O3e=s(su);ise=n(O3e,"STRONG",{});var HUr=s(ise);U_o=r(HUr,"speech_to_text"),HUr.forEach(t),J_o=r(O3e," \u2014 "),KI=n(O3e,"A",{href:!0});var UUr=s(KI);Y_o=r(UUr,"Speech2TextModel"),UUr.forEach(t),K_o=r(O3e," (Speech2Text model)"),O3e.forEach(t),Z_o=i($),lu=n($,"LI",{});var V3e=s(lu);dse=n(V3e,"STRONG",{});var JUr=s(dse);e1o=r(JUr,"splinter"),JUr.forEach(t),o1o=r(V3e," \u2014 "),ZI=n(V3e,"A",{href:!0});var YUr=s(ZI);r1o=r(YUr,"SplinterModel"),YUr.forEach(t),t1o=r(V3e," (Splinter model)"),V3e.forEach(t),a1o=i($),iu=n($,"LI",{});var X3e=s(iu);cse=n(X3e,"STRONG",{});var KUr=s(cse);n1o=r(KUr,"squeezebert"),KUr.forEach(t),s1o=r(X3e," \u2014 "),eq=n(X3e,"A",{href:!0});var ZUr=s(eq);l1o=r(ZUr,"SqueezeBertModel"),ZUr.forEach(t),i1o=r(X3e," (SqueezeBERT model)"),X3e.forEach(t),d1o=i($),du=n($,"LI",{});var z3e=s(du);fse=n(z3e,"STRONG",{});var eJr=s(fse);c1o=r(eJr,"swin"),eJr.forEach(t),f1o=r(z3e," \u2014 "),oq=n(z3e,"A",{href:!0});var oJr=s(oq);m1o=r(oJr,"SwinModel"),oJr.forEach(t),g1o=r(z3e," (Swin model)"),z3e.forEach(t),h1o=i($),cu=n($,"LI",{});var Q3e=s(cu);mse=n(Q3e,"STRONG",{});var rJr=s(mse);p1o=r(rJr,"t5"),rJr.forEach(t),u1o=r(Q3e," \u2014 "),rq=n(Q3e,"A",{href:!0});var tJr=s(rq);_1o=r(tJr,"T5Model"),tJr.forEach(t),b1o=r(Q3e," (T5 model)"),Q3e.forEach(t),v1o=i($),fu=n($,"LI",{});var W3e=s(fu);gse=n(W3e,"STRONG",{});var aJr=s(gse);F1o=r(aJr,"tapas"),aJr.forEach(t),T1o=r(W3e," \u2014 "),tq=n(W3e,"A",{href:!0});var nJr=s(tq);M1o=r(nJr,"TapasModel"),nJr.forEach(t),E1o=r(W3e," (TAPAS model)"),W3e.forEach(t),C1o=i($),mu=n($,"LI",{});var H3e=s(mu);hse=n(H3e,"STRONG",{});var sJr=s(hse);w1o=r(sJr,"transfo-xl"),sJr.forEach(t),A1o=r(H3e," \u2014 "),aq=n(H3e,"A",{href:!0});var lJr=s(aq);y1o=r(lJr,"TransfoXLModel"),lJr.forEach(t),L1o=r(H3e," (Transformer-XL model)"),H3e.forEach(t),x1o=i($),gu=n($,"LI",{});var U3e=s(gu);pse=n(U3e,"STRONG",{});var iJr=s(pse);$1o=r(iJr,"unispeech"),iJr.forEach(t),k1o=r(U3e," \u2014 "),nq=n(U3e,"A",{href:!0});var dJr=s(nq);S1o=r(dJr,"UniSpeechModel"),dJr.forEach(t),R1o=r(U3e," (UniSpeech model)"),U3e.forEach(t),B1o=i($),hu=n($,"LI",{});var J3e=s(hu);use=n(J3e,"STRONG",{});var cJr=s(use);P1o=r(cJr,"unispeech-sat"),cJr.forEach(t),I1o=r(J3e," \u2014 "),sq=n(J3e,"A",{href:!0});var fJr=s(sq);q1o=r(fJr,"UniSpeechSatModel"),fJr.forEach(t),N1o=r(J3e," (UniSpeechSat model)"),J3e.forEach(t),j1o=i($),pu=n($,"LI",{});var Y3e=s(pu);_se=n(Y3e,"STRONG",{});var mJr=s(_se);D1o=r(mJr,"van"),mJr.forEach(t),G1o=r(Y3e," \u2014 "),lq=n(Y3e,"A",{href:!0});var gJr=s(lq);O1o=r(gJr,"VanModel"),gJr.forEach(t),V1o=r(Y3e," (VAN model)"),Y3e.forEach(t),X1o=i($),uu=n($,"LI",{});var K3e=s(uu);bse=n(K3e,"STRONG",{});var hJr=s(bse);z1o=r(hJr,"vilt"),hJr.forEach(t),Q1o=r(K3e," \u2014 "),iq=n(K3e,"A",{href:!0});var pJr=s(iq);W1o=r(pJr,"ViltModel"),pJr.forEach(t),H1o=r(K3e," (ViLT model)"),K3e.forEach(t),U1o=i($),_u=n($,"LI",{});var Z3e=s(_u);vse=n(Z3e,"STRONG",{});var uJr=s(vse);J1o=r(uJr,"vision-text-dual-encoder"),uJr.forEach(t),Y1o=r(Z3e," \u2014 "),dq=n(Z3e,"A",{href:!0});var _Jr=s(dq);K1o=r(_Jr,"VisionTextDualEncoderModel"),_Jr.forEach(t),Z1o=r(Z3e," (VisionTextDualEncoder model)"),Z3e.forEach(t),e8o=i($),bu=n($,"LI",{});var ewe=s(bu);Fse=n(ewe,"STRONG",{});var bJr=s(Fse);o8o=r(bJr,"visual_bert"),bJr.forEach(t),r8o=r(ewe," \u2014 "),cq=n(ewe,"A",{href:!0});var vJr=s(cq);t8o=r(vJr,"VisualBertModel"),vJr.forEach(t),a8o=r(ewe," (VisualBert model)"),ewe.forEach(t),n8o=i($),vu=n($,"LI",{});var owe=s(vu);Tse=n(owe,"STRONG",{});var FJr=s(Tse);s8o=r(FJr,"vit"),FJr.forEach(t),l8o=r(owe," \u2014 "),fq=n(owe,"A",{href:!0});var TJr=s(fq);i8o=r(TJr,"ViTModel"),TJr.forEach(t),d8o=r(owe," (ViT model)"),owe.forEach(t),c8o=i($),Fu=n($,"LI",{});var rwe=s(Fu);Mse=n(rwe,"STRONG",{});var MJr=s(Mse);f8o=r(MJr,"vit_mae"),MJr.forEach(t),m8o=r(rwe," \u2014 "),mq=n(rwe,"A",{href:!0});var EJr=s(mq);g8o=r(EJr,"ViTMAEModel"),EJr.forEach(t),h8o=r(rwe," (ViTMAE model)"),rwe.forEach(t),p8o=i($),Tu=n($,"LI",{});var twe=s(Tu);Ese=n(twe,"STRONG",{});var CJr=s(Ese);u8o=r(CJr,"wav2vec2"),CJr.forEach(t),_8o=r(twe," \u2014 "),gq=n(twe,"A",{href:!0});var wJr=s(gq);b8o=r(wJr,"Wav2Vec2Model"),wJr.forEach(t),v8o=r(twe," (Wav2Vec2 model)"),twe.forEach(t),F8o=i($),Mu=n($,"LI",{});var awe=s(Mu);Cse=n(awe,"STRONG",{});var AJr=s(Cse);T8o=r(AJr,"wavlm"),AJr.forEach(t),M8o=r(awe," \u2014 "),hq=n(awe,"A",{href:!0});var yJr=s(hq);E8o=r(yJr,"WavLMModel"),yJr.forEach(t),C8o=r(awe," (WavLM model)"),awe.forEach(t),w8o=i($),Eu=n($,"LI",{});var nwe=s(Eu);wse=n(nwe,"STRONG",{});var LJr=s(wse);A8o=r(LJr,"xglm"),LJr.forEach(t),y8o=r(nwe," \u2014 "),pq=n(nwe,"A",{href:!0});var xJr=s(pq);L8o=r(xJr,"XGLMModel"),xJr.forEach(t),x8o=r(nwe," (XGLM model)"),nwe.forEach(t),$8o=i($),Cu=n($,"LI",{});var swe=s(Cu);Ase=n(swe,"STRONG",{});var $Jr=s(Ase);k8o=r($Jr,"xlm"),$Jr.forEach(t),S8o=r(swe," \u2014 "),uq=n(swe,"A",{href:!0});var kJr=s(uq);R8o=r(kJr,"XLMModel"),kJr.forEach(t),B8o=r(swe," (XLM model)"),swe.forEach(t),P8o=i($),wu=n($,"LI",{});var lwe=s(wu);yse=n(lwe,"STRONG",{});var SJr=s(yse);I8o=r(SJr,"xlm-prophetnet"),SJr.forEach(t),q8o=r(lwe," \u2014 "),_q=n(lwe,"A",{href:!0});var RJr=s(_q);N8o=r(RJr,"XLMProphetNetModel"),RJr.forEach(t),j8o=r(lwe," (XLMProphetNet model)"),lwe.forEach(t),D8o=i($),Au=n($,"LI",{});var iwe=s(Au);Lse=n(iwe,"STRONG",{});var BJr=s(Lse);G8o=r(BJr,"xlm-roberta"),BJr.forEach(t),O8o=r(iwe," \u2014 "),bq=n(iwe,"A",{href:!0});var PJr=s(bq);V8o=r(PJr,"XLMRobertaModel"),PJr.forEach(t),X8o=r(iwe," (XLM-RoBERTa model)"),iwe.forEach(t),z8o=i($),yu=n($,"LI",{});var dwe=s(yu);xse=n(dwe,"STRONG",{});var IJr=s(xse);Q8o=r(IJr,"xlm-roberta-xl"),IJr.forEach(t),W8o=r(dwe," \u2014 "),vq=n(dwe,"A",{href:!0});var qJr=s(vq);H8o=r(qJr,"XLMRobertaXLModel"),qJr.forEach(t),U8o=r(dwe," (XLM-RoBERTa-XL model)"),dwe.forEach(t),J8o=i($),Lu=n($,"LI",{});var cwe=s(Lu);$se=n(cwe,"STRONG",{});var NJr=s($se);Y8o=r(NJr,"xlnet"),NJr.forEach(t),K8o=r(cwe," \u2014 "),Fq=n(cwe,"A",{href:!0});var jJr=s(Fq);Z8o=r(jJr,"XLNetModel"),jJr.forEach(t),ebo=r(cwe," (XLNet model)"),cwe.forEach(t),obo=i($),xu=n($,"LI",{});var fwe=s(xu);kse=n(fwe,"STRONG",{});var DJr=s(kse);rbo=r(DJr,"yolos"),DJr.forEach(t),tbo=r(fwe," \u2014 "),Tq=n(fwe,"A",{href:!0});var GJr=s(Tq);abo=r(GJr,"YolosModel"),GJr.forEach(t),nbo=r(fwe," (YOLOS model)"),fwe.forEach(t),sbo=i($),$u=n($,"LI",{});var mwe=s($u);Sse=n(mwe,"STRONG",{});var OJr=s(Sse);lbo=r(OJr,"yoso"),OJr.forEach(t),ibo=r(mwe," \u2014 "),Mq=n(mwe,"A",{href:!0});var VJr=s(Mq);dbo=r(VJr,"YosoModel"),VJr.forEach(t),cbo=r(mwe," (YOSO model)"),mwe.forEach(t),$.forEach(t),fbo=i(Zt),ku=n(Zt,"P",{});var gwe=s(ku);mbo=r(gwe,"The model is set in evaluation mode by default using "),Rse=n(gwe,"CODE",{});var XJr=s(Rse);gbo=r(XJr,"model.eval()"),XJr.forEach(t),hbo=r(gwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bse=n(gwe,"CODE",{});var zJr=s(Bse);pbo=r(zJr,"model.train()"),zJr.forEach(t),gwe.forEach(t),ubo=i(Zt),T(Su.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),NPe=i(f),Ci=n(f,"H2",{class:!0});var Oqe=s(Ci);Ru=n(Oqe,"A",{id:!0,class:!0,href:!0});var QJr=s(Ru);Pse=n(QJr,"SPAN",{});var WJr=s(Pse);T(EA.$$.fragment,WJr),WJr.forEach(t),QJr.forEach(t),_bo=i(Oqe),Ise=n(Oqe,"SPAN",{});var HJr=s(Ise);bbo=r(HJr,"AutoModelForPreTraining"),HJr.forEach(t),Oqe.forEach(t),jPe=i(f),xo=n(f,"DIV",{class:!0});var Ds=s(xo);T(CA.$$.fragment,Ds),vbo=i(Ds),wi=n(Ds,"P",{});var oK=s(wi);Fbo=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Eq=n(oK,"A",{href:!0});var UJr=s(Eq);Tbo=r(UJr,"from_pretrained()"),UJr.forEach(t),Mbo=r(oK," class method or the "),Cq=n(oK,"A",{href:!0});var JJr=s(Cq);Ebo=r(JJr,"from_config()"),JJr.forEach(t),Cbo=r(oK,` class
method.`),oK.forEach(t),wbo=i(Ds),wA=n(Ds,"P",{});var Vqe=s(wA);Abo=r(Vqe,"This class cannot be instantiated directly using "),qse=n(Vqe,"CODE",{});var YJr=s(qse);ybo=r(YJr,"__init__()"),YJr.forEach(t),Lbo=r(Vqe," (throws an error)."),Vqe.forEach(t),xbo=i(Ds),rt=n(Ds,"DIV",{class:!0});var YC=s(rt);T(AA.$$.fragment,YC),$bo=i(YC),Nse=n(YC,"P",{});var KJr=s(Nse);kbo=r(KJr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),KJr.forEach(t),Sbo=i(YC),Ai=n(YC,"P",{});var rK=s(Ai);Rbo=r(rK,`Note:
Loading a model from its configuration file does `),jse=n(rK,"STRONG",{});var ZJr=s(jse);Bbo=r(ZJr,"not"),ZJr.forEach(t),Pbo=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wq=n(rK,"A",{href:!0});var eYr=s(wq);Ibo=r(eYr,"from_pretrained()"),eYr.forEach(t),qbo=r(rK," to load the model weights."),rK.forEach(t),Nbo=i(YC),T(Bu.$$.fragment,YC),YC.forEach(t),jbo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(yA.$$.fragment,ea),Dbo=i(ea),Dse=n(ea,"P",{});var oYr=s(Dse);Gbo=r(oYr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),oYr.forEach(t),Obo=i(ea),ya=n(ea,"P",{});var KC=s(ya);Vbo=r(KC,"The model class to instantiate is selected based on the "),Gse=n(KC,"CODE",{});var rYr=s(Gse);Xbo=r(rYr,"model_type"),rYr.forEach(t),zbo=r(KC,` property of the config object (either
passed as an argument or loaded from `),Ose=n(KC,"CODE",{});var tYr=s(Ose);Qbo=r(tYr,"pretrained_model_name_or_path"),tYr.forEach(t),Wbo=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vse=n(KC,"CODE",{});var aYr=s(Vse);Hbo=r(aYr,"pretrained_model_name_or_path"),aYr.forEach(t),Ubo=r(KC,":"),KC.forEach(t),Jbo=i(ea),G=n(ea,"UL",{});var V=s(G);Pu=n(V,"LI",{});var hwe=s(Pu);Xse=n(hwe,"STRONG",{});var nYr=s(Xse);Ybo=r(nYr,"albert"),nYr.forEach(t),Kbo=r(hwe," \u2014 "),Aq=n(hwe,"A",{href:!0});var sYr=s(Aq);Zbo=r(sYr,"AlbertForPreTraining"),sYr.forEach(t),e2o=r(hwe," (ALBERT model)"),hwe.forEach(t),o2o=i(V),Iu=n(V,"LI",{});var pwe=s(Iu);zse=n(pwe,"STRONG",{});var lYr=s(zse);r2o=r(lYr,"bart"),lYr.forEach(t),t2o=r(pwe," \u2014 "),yq=n(pwe,"A",{href:!0});var iYr=s(yq);a2o=r(iYr,"BartForConditionalGeneration"),iYr.forEach(t),n2o=r(pwe," (BART model)"),pwe.forEach(t),s2o=i(V),qu=n(V,"LI",{});var uwe=s(qu);Qse=n(uwe,"STRONG",{});var dYr=s(Qse);l2o=r(dYr,"bert"),dYr.forEach(t),i2o=r(uwe," \u2014 "),Lq=n(uwe,"A",{href:!0});var cYr=s(Lq);d2o=r(cYr,"BertForPreTraining"),cYr.forEach(t),c2o=r(uwe," (BERT model)"),uwe.forEach(t),f2o=i(V),Nu=n(V,"LI",{});var _we=s(Nu);Wse=n(_we,"STRONG",{});var fYr=s(Wse);m2o=r(fYr,"big_bird"),fYr.forEach(t),g2o=r(_we," \u2014 "),xq=n(_we,"A",{href:!0});var mYr=s(xq);h2o=r(mYr,"BigBirdForPreTraining"),mYr.forEach(t),p2o=r(_we," (BigBird model)"),_we.forEach(t),u2o=i(V),ju=n(V,"LI",{});var bwe=s(ju);Hse=n(bwe,"STRONG",{});var gYr=s(Hse);_2o=r(gYr,"camembert"),gYr.forEach(t),b2o=r(bwe," \u2014 "),$q=n(bwe,"A",{href:!0});var hYr=s($q);v2o=r(hYr,"CamembertForMaskedLM"),hYr.forEach(t),F2o=r(bwe," (CamemBERT model)"),bwe.forEach(t),T2o=i(V),Du=n(V,"LI",{});var vwe=s(Du);Use=n(vwe,"STRONG",{});var pYr=s(Use);M2o=r(pYr,"ctrl"),pYr.forEach(t),E2o=r(vwe," \u2014 "),kq=n(vwe,"A",{href:!0});var uYr=s(kq);C2o=r(uYr,"CTRLLMHeadModel"),uYr.forEach(t),w2o=r(vwe," (CTRL model)"),vwe.forEach(t),A2o=i(V),Gu=n(V,"LI",{});var Fwe=s(Gu);Jse=n(Fwe,"STRONG",{});var _Yr=s(Jse);y2o=r(_Yr,"data2vec-text"),_Yr.forEach(t),L2o=r(Fwe," \u2014 "),Sq=n(Fwe,"A",{href:!0});var bYr=s(Sq);x2o=r(bYr,"Data2VecTextForMaskedLM"),bYr.forEach(t),$2o=r(Fwe," (Data2VecText model)"),Fwe.forEach(t),k2o=i(V),Ou=n(V,"LI",{});var Twe=s(Ou);Yse=n(Twe,"STRONG",{});var vYr=s(Yse);S2o=r(vYr,"deberta"),vYr.forEach(t),R2o=r(Twe," \u2014 "),Rq=n(Twe,"A",{href:!0});var FYr=s(Rq);B2o=r(FYr,"DebertaForMaskedLM"),FYr.forEach(t),P2o=r(Twe," (DeBERTa model)"),Twe.forEach(t),I2o=i(V),Vu=n(V,"LI",{});var Mwe=s(Vu);Kse=n(Mwe,"STRONG",{});var TYr=s(Kse);q2o=r(TYr,"deberta-v2"),TYr.forEach(t),N2o=r(Mwe," \u2014 "),Bq=n(Mwe,"A",{href:!0});var MYr=s(Bq);j2o=r(MYr,"DebertaV2ForMaskedLM"),MYr.forEach(t),D2o=r(Mwe," (DeBERTa-v2 model)"),Mwe.forEach(t),G2o=i(V),Xu=n(V,"LI",{});var Ewe=s(Xu);Zse=n(Ewe,"STRONG",{});var EYr=s(Zse);O2o=r(EYr,"distilbert"),EYr.forEach(t),V2o=r(Ewe," \u2014 "),Pq=n(Ewe,"A",{href:!0});var CYr=s(Pq);X2o=r(CYr,"DistilBertForMaskedLM"),CYr.forEach(t),z2o=r(Ewe," (DistilBERT model)"),Ewe.forEach(t),Q2o=i(V),zu=n(V,"LI",{});var Cwe=s(zu);ele=n(Cwe,"STRONG",{});var wYr=s(ele);W2o=r(wYr,"electra"),wYr.forEach(t),H2o=r(Cwe," \u2014 "),Iq=n(Cwe,"A",{href:!0});var AYr=s(Iq);U2o=r(AYr,"ElectraForPreTraining"),AYr.forEach(t),J2o=r(Cwe," (ELECTRA model)"),Cwe.forEach(t),Y2o=i(V),Qu=n(V,"LI",{});var wwe=s(Qu);ole=n(wwe,"STRONG",{});var yYr=s(ole);K2o=r(yYr,"flaubert"),yYr.forEach(t),Z2o=r(wwe," \u2014 "),qq=n(wwe,"A",{href:!0});var LYr=s(qq);evo=r(LYr,"FlaubertWithLMHeadModel"),LYr.forEach(t),ovo=r(wwe," (FlauBERT model)"),wwe.forEach(t),rvo=i(V),Wu=n(V,"LI",{});var Awe=s(Wu);rle=n(Awe,"STRONG",{});var xYr=s(rle);tvo=r(xYr,"fnet"),xYr.forEach(t),avo=r(Awe," \u2014 "),Nq=n(Awe,"A",{href:!0});var $Yr=s(Nq);nvo=r($Yr,"FNetForPreTraining"),$Yr.forEach(t),svo=r(Awe," (FNet model)"),Awe.forEach(t),lvo=i(V),Hu=n(V,"LI",{});var ywe=s(Hu);tle=n(ywe,"STRONG",{});var kYr=s(tle);ivo=r(kYr,"fsmt"),kYr.forEach(t),dvo=r(ywe," \u2014 "),jq=n(ywe,"A",{href:!0});var SYr=s(jq);cvo=r(SYr,"FSMTForConditionalGeneration"),SYr.forEach(t),fvo=r(ywe," (FairSeq Machine-Translation model)"),ywe.forEach(t),mvo=i(V),Uu=n(V,"LI",{});var Lwe=s(Uu);ale=n(Lwe,"STRONG",{});var RYr=s(ale);gvo=r(RYr,"funnel"),RYr.forEach(t),hvo=r(Lwe," \u2014 "),Dq=n(Lwe,"A",{href:!0});var BYr=s(Dq);pvo=r(BYr,"FunnelForPreTraining"),BYr.forEach(t),uvo=r(Lwe," (Funnel Transformer model)"),Lwe.forEach(t),_vo=i(V),Ju=n(V,"LI",{});var xwe=s(Ju);nle=n(xwe,"STRONG",{});var PYr=s(nle);bvo=r(PYr,"gpt2"),PYr.forEach(t),vvo=r(xwe," \u2014 "),Gq=n(xwe,"A",{href:!0});var IYr=s(Gq);Fvo=r(IYr,"GPT2LMHeadModel"),IYr.forEach(t),Tvo=r(xwe," (OpenAI GPT-2 model)"),xwe.forEach(t),Mvo=i(V),Yu=n(V,"LI",{});var $we=s(Yu);sle=n($we,"STRONG",{});var qYr=s(sle);Evo=r(qYr,"ibert"),qYr.forEach(t),Cvo=r($we," \u2014 "),Oq=n($we,"A",{href:!0});var NYr=s(Oq);wvo=r(NYr,"IBertForMaskedLM"),NYr.forEach(t),Avo=r($we," (I-BERT model)"),$we.forEach(t),yvo=i(V),Ku=n(V,"LI",{});var kwe=s(Ku);lle=n(kwe,"STRONG",{});var jYr=s(lle);Lvo=r(jYr,"layoutlm"),jYr.forEach(t),xvo=r(kwe," \u2014 "),Vq=n(kwe,"A",{href:!0});var DYr=s(Vq);$vo=r(DYr,"LayoutLMForMaskedLM"),DYr.forEach(t),kvo=r(kwe," (LayoutLM model)"),kwe.forEach(t),Svo=i(V),Zu=n(V,"LI",{});var Swe=s(Zu);ile=n(Swe,"STRONG",{});var GYr=s(ile);Rvo=r(GYr,"longformer"),GYr.forEach(t),Bvo=r(Swe," \u2014 "),Xq=n(Swe,"A",{href:!0});var OYr=s(Xq);Pvo=r(OYr,"LongformerForMaskedLM"),OYr.forEach(t),Ivo=r(Swe," (Longformer model)"),Swe.forEach(t),qvo=i(V),e_=n(V,"LI",{});var Rwe=s(e_);dle=n(Rwe,"STRONG",{});var VYr=s(dle);Nvo=r(VYr,"lxmert"),VYr.forEach(t),jvo=r(Rwe," \u2014 "),zq=n(Rwe,"A",{href:!0});var XYr=s(zq);Dvo=r(XYr,"LxmertForPreTraining"),XYr.forEach(t),Gvo=r(Rwe," (LXMERT model)"),Rwe.forEach(t),Ovo=i(V),o_=n(V,"LI",{});var Bwe=s(o_);cle=n(Bwe,"STRONG",{});var zYr=s(cle);Vvo=r(zYr,"megatron-bert"),zYr.forEach(t),Xvo=r(Bwe," \u2014 "),Qq=n(Bwe,"A",{href:!0});var QYr=s(Qq);zvo=r(QYr,"MegatronBertForPreTraining"),QYr.forEach(t),Qvo=r(Bwe," (MegatronBert model)"),Bwe.forEach(t),Wvo=i(V),r_=n(V,"LI",{});var Pwe=s(r_);fle=n(Pwe,"STRONG",{});var WYr=s(fle);Hvo=r(WYr,"mobilebert"),WYr.forEach(t),Uvo=r(Pwe," \u2014 "),Wq=n(Pwe,"A",{href:!0});var HYr=s(Wq);Jvo=r(HYr,"MobileBertForPreTraining"),HYr.forEach(t),Yvo=r(Pwe," (MobileBERT model)"),Pwe.forEach(t),Kvo=i(V),t_=n(V,"LI",{});var Iwe=s(t_);mle=n(Iwe,"STRONG",{});var UYr=s(mle);Zvo=r(UYr,"mpnet"),UYr.forEach(t),eFo=r(Iwe," \u2014 "),Hq=n(Iwe,"A",{href:!0});var JYr=s(Hq);oFo=r(JYr,"MPNetForMaskedLM"),JYr.forEach(t),rFo=r(Iwe," (MPNet model)"),Iwe.forEach(t),tFo=i(V),a_=n(V,"LI",{});var qwe=s(a_);gle=n(qwe,"STRONG",{});var YYr=s(gle);aFo=r(YYr,"openai-gpt"),YYr.forEach(t),nFo=r(qwe," \u2014 "),Uq=n(qwe,"A",{href:!0});var KYr=s(Uq);sFo=r(KYr,"OpenAIGPTLMHeadModel"),KYr.forEach(t),lFo=r(qwe," (OpenAI GPT model)"),qwe.forEach(t),iFo=i(V),n_=n(V,"LI",{});var Nwe=s(n_);hle=n(Nwe,"STRONG",{});var ZYr=s(hle);dFo=r(ZYr,"retribert"),ZYr.forEach(t),cFo=r(Nwe," \u2014 "),Jq=n(Nwe,"A",{href:!0});var eKr=s(Jq);fFo=r(eKr,"RetriBertModel"),eKr.forEach(t),mFo=r(Nwe," (RetriBERT model)"),Nwe.forEach(t),gFo=i(V),s_=n(V,"LI",{});var jwe=s(s_);ple=n(jwe,"STRONG",{});var oKr=s(ple);hFo=r(oKr,"roberta"),oKr.forEach(t),pFo=r(jwe," \u2014 "),Yq=n(jwe,"A",{href:!0});var rKr=s(Yq);uFo=r(rKr,"RobertaForMaskedLM"),rKr.forEach(t),_Fo=r(jwe," (RoBERTa model)"),jwe.forEach(t),bFo=i(V),l_=n(V,"LI",{});var Dwe=s(l_);ule=n(Dwe,"STRONG",{});var tKr=s(ule);vFo=r(tKr,"squeezebert"),tKr.forEach(t),FFo=r(Dwe," \u2014 "),Kq=n(Dwe,"A",{href:!0});var aKr=s(Kq);TFo=r(aKr,"SqueezeBertForMaskedLM"),aKr.forEach(t),MFo=r(Dwe," (SqueezeBERT model)"),Dwe.forEach(t),EFo=i(V),i_=n(V,"LI",{});var Gwe=s(i_);_le=n(Gwe,"STRONG",{});var nKr=s(_le);CFo=r(nKr,"t5"),nKr.forEach(t),wFo=r(Gwe," \u2014 "),Zq=n(Gwe,"A",{href:!0});var sKr=s(Zq);AFo=r(sKr,"T5ForConditionalGeneration"),sKr.forEach(t),yFo=r(Gwe," (T5 model)"),Gwe.forEach(t),LFo=i(V),d_=n(V,"LI",{});var Owe=s(d_);ble=n(Owe,"STRONG",{});var lKr=s(ble);xFo=r(lKr,"tapas"),lKr.forEach(t),$Fo=r(Owe," \u2014 "),eN=n(Owe,"A",{href:!0});var iKr=s(eN);kFo=r(iKr,"TapasForMaskedLM"),iKr.forEach(t),SFo=r(Owe," (TAPAS model)"),Owe.forEach(t),RFo=i(V),c_=n(V,"LI",{});var Vwe=s(c_);vle=n(Vwe,"STRONG",{});var dKr=s(vle);BFo=r(dKr,"transfo-xl"),dKr.forEach(t),PFo=r(Vwe," \u2014 "),oN=n(Vwe,"A",{href:!0});var cKr=s(oN);IFo=r(cKr,"TransfoXLLMHeadModel"),cKr.forEach(t),qFo=r(Vwe," (Transformer-XL model)"),Vwe.forEach(t),NFo=i(V),f_=n(V,"LI",{});var Xwe=s(f_);Fle=n(Xwe,"STRONG",{});var fKr=s(Fle);jFo=r(fKr,"unispeech"),fKr.forEach(t),DFo=r(Xwe," \u2014 "),rN=n(Xwe,"A",{href:!0});var mKr=s(rN);GFo=r(mKr,"UniSpeechForPreTraining"),mKr.forEach(t),OFo=r(Xwe," (UniSpeech model)"),Xwe.forEach(t),VFo=i(V),m_=n(V,"LI",{});var zwe=s(m_);Tle=n(zwe,"STRONG",{});var gKr=s(Tle);XFo=r(gKr,"unispeech-sat"),gKr.forEach(t),zFo=r(zwe," \u2014 "),tN=n(zwe,"A",{href:!0});var hKr=s(tN);QFo=r(hKr,"UniSpeechSatForPreTraining"),hKr.forEach(t),WFo=r(zwe," (UniSpeechSat model)"),zwe.forEach(t),HFo=i(V),g_=n(V,"LI",{});var Qwe=s(g_);Mle=n(Qwe,"STRONG",{});var pKr=s(Mle);UFo=r(pKr,"visual_bert"),pKr.forEach(t),JFo=r(Qwe," \u2014 "),aN=n(Qwe,"A",{href:!0});var uKr=s(aN);YFo=r(uKr,"VisualBertForPreTraining"),uKr.forEach(t),KFo=r(Qwe," (VisualBert model)"),Qwe.forEach(t),ZFo=i(V),h_=n(V,"LI",{});var Wwe=s(h_);Ele=n(Wwe,"STRONG",{});var _Kr=s(Ele);e0o=r(_Kr,"vit_mae"),_Kr.forEach(t),o0o=r(Wwe," \u2014 "),nN=n(Wwe,"A",{href:!0});var bKr=s(nN);r0o=r(bKr,"ViTMAEForPreTraining"),bKr.forEach(t),t0o=r(Wwe," (ViTMAE model)"),Wwe.forEach(t),a0o=i(V),p_=n(V,"LI",{});var Hwe=s(p_);Cle=n(Hwe,"STRONG",{});var vKr=s(Cle);n0o=r(vKr,"wav2vec2"),vKr.forEach(t),s0o=r(Hwe," \u2014 "),sN=n(Hwe,"A",{href:!0});var FKr=s(sN);l0o=r(FKr,"Wav2Vec2ForPreTraining"),FKr.forEach(t),i0o=r(Hwe," (Wav2Vec2 model)"),Hwe.forEach(t),d0o=i(V),u_=n(V,"LI",{});var Uwe=s(u_);wle=n(Uwe,"STRONG",{});var TKr=s(wle);c0o=r(TKr,"xlm"),TKr.forEach(t),f0o=r(Uwe," \u2014 "),lN=n(Uwe,"A",{href:!0});var MKr=s(lN);m0o=r(MKr,"XLMWithLMHeadModel"),MKr.forEach(t),g0o=r(Uwe," (XLM model)"),Uwe.forEach(t),h0o=i(V),__=n(V,"LI",{});var Jwe=s(__);Ale=n(Jwe,"STRONG",{});var EKr=s(Ale);p0o=r(EKr,"xlm-roberta"),EKr.forEach(t),u0o=r(Jwe," \u2014 "),iN=n(Jwe,"A",{href:!0});var CKr=s(iN);_0o=r(CKr,"XLMRobertaForMaskedLM"),CKr.forEach(t),b0o=r(Jwe," (XLM-RoBERTa model)"),Jwe.forEach(t),v0o=i(V),b_=n(V,"LI",{});var Ywe=s(b_);yle=n(Ywe,"STRONG",{});var wKr=s(yle);F0o=r(wKr,"xlm-roberta-xl"),wKr.forEach(t),T0o=r(Ywe," \u2014 "),dN=n(Ywe,"A",{href:!0});var AKr=s(dN);M0o=r(AKr,"XLMRobertaXLForMaskedLM"),AKr.forEach(t),E0o=r(Ywe," (XLM-RoBERTa-XL model)"),Ywe.forEach(t),C0o=i(V),v_=n(V,"LI",{});var Kwe=s(v_);Lle=n(Kwe,"STRONG",{});var yKr=s(Lle);w0o=r(yKr,"xlnet"),yKr.forEach(t),A0o=r(Kwe," \u2014 "),cN=n(Kwe,"A",{href:!0});var LKr=s(cN);y0o=r(LKr,"XLNetLMHeadModel"),LKr.forEach(t),L0o=r(Kwe," (XLNet model)"),Kwe.forEach(t),V.forEach(t),x0o=i(ea),F_=n(ea,"P",{});var Zwe=s(F_);$0o=r(Zwe,"The model is set in evaluation mode by default using "),xle=n(Zwe,"CODE",{});var xKr=s(xle);k0o=r(xKr,"model.eval()"),xKr.forEach(t),S0o=r(Zwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$le=n(Zwe,"CODE",{});var $Kr=s($le);R0o=r($Kr,"model.train()"),$Kr.forEach(t),Zwe.forEach(t),B0o=i(ea),T(T_.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),DPe=i(f),yi=n(f,"H2",{class:!0});var Xqe=s(yi);M_=n(Xqe,"A",{id:!0,class:!0,href:!0});var kKr=s(M_);kle=n(kKr,"SPAN",{});var SKr=s(kle);T(LA.$$.fragment,SKr),SKr.forEach(t),kKr.forEach(t),P0o=i(Xqe),Sle=n(Xqe,"SPAN",{});var RKr=s(Sle);I0o=r(RKr,"AutoModelForCausalLM"),RKr.forEach(t),Xqe.forEach(t),GPe=i(f),$o=n(f,"DIV",{class:!0});var Gs=s($o);T(xA.$$.fragment,Gs),q0o=i(Gs),Li=n(Gs,"P",{});var tK=s(Li);N0o=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fN=n(tK,"A",{href:!0});var BKr=s(fN);j0o=r(BKr,"from_pretrained()"),BKr.forEach(t),D0o=r(tK," class method or the "),mN=n(tK,"A",{href:!0});var PKr=s(mN);G0o=r(PKr,"from_config()"),PKr.forEach(t),O0o=r(tK,` class
method.`),tK.forEach(t),V0o=i(Gs),$A=n(Gs,"P",{});var zqe=s($A);X0o=r(zqe,"This class cannot be instantiated directly using "),Rle=n(zqe,"CODE",{});var IKr=s(Rle);z0o=r(IKr,"__init__()"),IKr.forEach(t),Q0o=r(zqe," (throws an error)."),zqe.forEach(t),W0o=i(Gs),tt=n(Gs,"DIV",{class:!0});var ZC=s(tt);T(kA.$$.fragment,ZC),H0o=i(ZC),Ble=n(ZC,"P",{});var qKr=s(Ble);U0o=r(qKr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qKr.forEach(t),J0o=i(ZC),xi=n(ZC,"P",{});var aK=s(xi);Y0o=r(aK,`Note:
Loading a model from its configuration file does `),Ple=n(aK,"STRONG",{});var NKr=s(Ple);K0o=r(NKr,"not"),NKr.forEach(t),Z0o=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gN=n(aK,"A",{href:!0});var jKr=s(gN);eTo=r(jKr,"from_pretrained()"),jKr.forEach(t),oTo=r(aK," to load the model weights."),aK.forEach(t),rTo=i(ZC),T(E_.$$.fragment,ZC),ZC.forEach(t),tTo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(SA.$$.fragment,oa),aTo=i(oa),Ile=n(oa,"P",{});var DKr=s(Ile);nTo=r(DKr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),DKr.forEach(t),sTo=i(oa),La=n(oa,"P",{});var e3=s(La);lTo=r(e3,"The model class to instantiate is selected based on the "),qle=n(e3,"CODE",{});var GKr=s(qle);iTo=r(GKr,"model_type"),GKr.forEach(t),dTo=r(e3,` property of the config object (either
passed as an argument or loaded from `),Nle=n(e3,"CODE",{});var OKr=s(Nle);cTo=r(OKr,"pretrained_model_name_or_path"),OKr.forEach(t),fTo=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jle=n(e3,"CODE",{});var VKr=s(jle);mTo=r(VKr,"pretrained_model_name_or_path"),VKr.forEach(t),gTo=r(e3,":"),e3.forEach(t),hTo=i(oa),z=n(oa,"UL",{});var W=s(z);C_=n(W,"LI",{});var eAe=s(C_);Dle=n(eAe,"STRONG",{});var XKr=s(Dle);pTo=r(XKr,"bart"),XKr.forEach(t),uTo=r(eAe," \u2014 "),hN=n(eAe,"A",{href:!0});var zKr=s(hN);_To=r(zKr,"BartForCausalLM"),zKr.forEach(t),bTo=r(eAe," (BART model)"),eAe.forEach(t),vTo=i(W),w_=n(W,"LI",{});var oAe=s(w_);Gle=n(oAe,"STRONG",{});var QKr=s(Gle);FTo=r(QKr,"bert"),QKr.forEach(t),TTo=r(oAe," \u2014 "),pN=n(oAe,"A",{href:!0});var WKr=s(pN);MTo=r(WKr,"BertLMHeadModel"),WKr.forEach(t),ETo=r(oAe," (BERT model)"),oAe.forEach(t),CTo=i(W),A_=n(W,"LI",{});var rAe=s(A_);Ole=n(rAe,"STRONG",{});var HKr=s(Ole);wTo=r(HKr,"bert-generation"),HKr.forEach(t),ATo=r(rAe," \u2014 "),uN=n(rAe,"A",{href:!0});var UKr=s(uN);yTo=r(UKr,"BertGenerationDecoder"),UKr.forEach(t),LTo=r(rAe," (Bert Generation model)"),rAe.forEach(t),xTo=i(W),y_=n(W,"LI",{});var tAe=s(y_);Vle=n(tAe,"STRONG",{});var JKr=s(Vle);$To=r(JKr,"big_bird"),JKr.forEach(t),kTo=r(tAe," \u2014 "),_N=n(tAe,"A",{href:!0});var YKr=s(_N);STo=r(YKr,"BigBirdForCausalLM"),YKr.forEach(t),RTo=r(tAe," (BigBird model)"),tAe.forEach(t),BTo=i(W),L_=n(W,"LI",{});var aAe=s(L_);Xle=n(aAe,"STRONG",{});var KKr=s(Xle);PTo=r(KKr,"bigbird_pegasus"),KKr.forEach(t),ITo=r(aAe," \u2014 "),bN=n(aAe,"A",{href:!0});var ZKr=s(bN);qTo=r(ZKr,"BigBirdPegasusForCausalLM"),ZKr.forEach(t),NTo=r(aAe," (BigBirdPegasus model)"),aAe.forEach(t),jTo=i(W),x_=n(W,"LI",{});var nAe=s(x_);zle=n(nAe,"STRONG",{});var eZr=s(zle);DTo=r(eZr,"blenderbot"),eZr.forEach(t),GTo=r(nAe," \u2014 "),vN=n(nAe,"A",{href:!0});var oZr=s(vN);OTo=r(oZr,"BlenderbotForCausalLM"),oZr.forEach(t),VTo=r(nAe," (Blenderbot model)"),nAe.forEach(t),XTo=i(W),$_=n(W,"LI",{});var sAe=s($_);Qle=n(sAe,"STRONG",{});var rZr=s(Qle);zTo=r(rZr,"blenderbot-small"),rZr.forEach(t),QTo=r(sAe," \u2014 "),FN=n(sAe,"A",{href:!0});var tZr=s(FN);WTo=r(tZr,"BlenderbotSmallForCausalLM"),tZr.forEach(t),HTo=r(sAe," (BlenderbotSmall model)"),sAe.forEach(t),UTo=i(W),k_=n(W,"LI",{});var lAe=s(k_);Wle=n(lAe,"STRONG",{});var aZr=s(Wle);JTo=r(aZr,"camembert"),aZr.forEach(t),YTo=r(lAe," \u2014 "),TN=n(lAe,"A",{href:!0});var nZr=s(TN);KTo=r(nZr,"CamembertForCausalLM"),nZr.forEach(t),ZTo=r(lAe," (CamemBERT model)"),lAe.forEach(t),e7o=i(W),S_=n(W,"LI",{});var iAe=s(S_);Hle=n(iAe,"STRONG",{});var sZr=s(Hle);o7o=r(sZr,"ctrl"),sZr.forEach(t),r7o=r(iAe," \u2014 "),MN=n(iAe,"A",{href:!0});var lZr=s(MN);t7o=r(lZr,"CTRLLMHeadModel"),lZr.forEach(t),a7o=r(iAe," (CTRL model)"),iAe.forEach(t),n7o=i(W),R_=n(W,"LI",{});var dAe=s(R_);Ule=n(dAe,"STRONG",{});var iZr=s(Ule);s7o=r(iZr,"data2vec-text"),iZr.forEach(t),l7o=r(dAe," \u2014 "),EN=n(dAe,"A",{href:!0});var dZr=s(EN);i7o=r(dZr,"Data2VecTextForCausalLM"),dZr.forEach(t),d7o=r(dAe," (Data2VecText model)"),dAe.forEach(t),c7o=i(W),B_=n(W,"LI",{});var cAe=s(B_);Jle=n(cAe,"STRONG",{});var cZr=s(Jle);f7o=r(cZr,"electra"),cZr.forEach(t),m7o=r(cAe," \u2014 "),CN=n(cAe,"A",{href:!0});var fZr=s(CN);g7o=r(fZr,"ElectraForCausalLM"),fZr.forEach(t),h7o=r(cAe," (ELECTRA model)"),cAe.forEach(t),p7o=i(W),P_=n(W,"LI",{});var fAe=s(P_);Yle=n(fAe,"STRONG",{});var mZr=s(Yle);u7o=r(mZr,"gpt2"),mZr.forEach(t),_7o=r(fAe," \u2014 "),wN=n(fAe,"A",{href:!0});var gZr=s(wN);b7o=r(gZr,"GPT2LMHeadModel"),gZr.forEach(t),v7o=r(fAe," (OpenAI GPT-2 model)"),fAe.forEach(t),F7o=i(W),I_=n(W,"LI",{});var mAe=s(I_);Kle=n(mAe,"STRONG",{});var hZr=s(Kle);T7o=r(hZr,"gpt_neo"),hZr.forEach(t),M7o=r(mAe," \u2014 "),AN=n(mAe,"A",{href:!0});var pZr=s(AN);E7o=r(pZr,"GPTNeoForCausalLM"),pZr.forEach(t),C7o=r(mAe," (GPT Neo model)"),mAe.forEach(t),w7o=i(W),q_=n(W,"LI",{});var gAe=s(q_);Zle=n(gAe,"STRONG",{});var uZr=s(Zle);A7o=r(uZr,"gptj"),uZr.forEach(t),y7o=r(gAe," \u2014 "),yN=n(gAe,"A",{href:!0});var _Zr=s(yN);L7o=r(_Zr,"GPTJForCausalLM"),_Zr.forEach(t),x7o=r(gAe," (GPT-J model)"),gAe.forEach(t),$7o=i(W),N_=n(W,"LI",{});var hAe=s(N_);eie=n(hAe,"STRONG",{});var bZr=s(eie);k7o=r(bZr,"marian"),bZr.forEach(t),S7o=r(hAe," \u2014 "),LN=n(hAe,"A",{href:!0});var vZr=s(LN);R7o=r(vZr,"MarianForCausalLM"),vZr.forEach(t),B7o=r(hAe," (Marian model)"),hAe.forEach(t),P7o=i(W),j_=n(W,"LI",{});var pAe=s(j_);oie=n(pAe,"STRONG",{});var FZr=s(oie);I7o=r(FZr,"mbart"),FZr.forEach(t),q7o=r(pAe," \u2014 "),xN=n(pAe,"A",{href:!0});var TZr=s(xN);N7o=r(TZr,"MBartForCausalLM"),TZr.forEach(t),j7o=r(pAe," (mBART model)"),pAe.forEach(t),D7o=i(W),D_=n(W,"LI",{});var uAe=s(D_);rie=n(uAe,"STRONG",{});var MZr=s(rie);G7o=r(MZr,"megatron-bert"),MZr.forEach(t),O7o=r(uAe," \u2014 "),$N=n(uAe,"A",{href:!0});var EZr=s($N);V7o=r(EZr,"MegatronBertForCausalLM"),EZr.forEach(t),X7o=r(uAe," (MegatronBert model)"),uAe.forEach(t),z7o=i(W),G_=n(W,"LI",{});var _Ae=s(G_);tie=n(_Ae,"STRONG",{});var CZr=s(tie);Q7o=r(CZr,"openai-gpt"),CZr.forEach(t),W7o=r(_Ae," \u2014 "),kN=n(_Ae,"A",{href:!0});var wZr=s(kN);H7o=r(wZr,"OpenAIGPTLMHeadModel"),wZr.forEach(t),U7o=r(_Ae," (OpenAI GPT model)"),_Ae.forEach(t),J7o=i(W),O_=n(W,"LI",{});var bAe=s(O_);aie=n(bAe,"STRONG",{});var AZr=s(aie);Y7o=r(AZr,"opt"),AZr.forEach(t),K7o=r(bAe," \u2014 "),SN=n(bAe,"A",{href:!0});var yZr=s(SN);Z7o=r(yZr,"OPTForCausalLM"),yZr.forEach(t),eMo=r(bAe," (OPT model)"),bAe.forEach(t),oMo=i(W),V_=n(W,"LI",{});var vAe=s(V_);nie=n(vAe,"STRONG",{});var LZr=s(nie);rMo=r(LZr,"pegasus"),LZr.forEach(t),tMo=r(vAe," \u2014 "),RN=n(vAe,"A",{href:!0});var xZr=s(RN);aMo=r(xZr,"PegasusForCausalLM"),xZr.forEach(t),nMo=r(vAe," (Pegasus model)"),vAe.forEach(t),sMo=i(W),X_=n(W,"LI",{});var FAe=s(X_);sie=n(FAe,"STRONG",{});var $Zr=s(sie);lMo=r($Zr,"plbart"),$Zr.forEach(t),iMo=r(FAe," \u2014 "),BN=n(FAe,"A",{href:!0});var kZr=s(BN);dMo=r(kZr,"PLBartForCausalLM"),kZr.forEach(t),cMo=r(FAe," (PLBart model)"),FAe.forEach(t),fMo=i(W),z_=n(W,"LI",{});var TAe=s(z_);lie=n(TAe,"STRONG",{});var SZr=s(lie);mMo=r(SZr,"prophetnet"),SZr.forEach(t),gMo=r(TAe," \u2014 "),PN=n(TAe,"A",{href:!0});var RZr=s(PN);hMo=r(RZr,"ProphetNetForCausalLM"),RZr.forEach(t),pMo=r(TAe," (ProphetNet model)"),TAe.forEach(t),uMo=i(W),Q_=n(W,"LI",{});var MAe=s(Q_);iie=n(MAe,"STRONG",{});var BZr=s(iie);_Mo=r(BZr,"qdqbert"),BZr.forEach(t),bMo=r(MAe," \u2014 "),IN=n(MAe,"A",{href:!0});var PZr=s(IN);vMo=r(PZr,"QDQBertLMHeadModel"),PZr.forEach(t),FMo=r(MAe," (QDQBert model)"),MAe.forEach(t),TMo=i(W),W_=n(W,"LI",{});var EAe=s(W_);die=n(EAe,"STRONG",{});var IZr=s(die);MMo=r(IZr,"reformer"),IZr.forEach(t),EMo=r(EAe," \u2014 "),qN=n(EAe,"A",{href:!0});var qZr=s(qN);CMo=r(qZr,"ReformerModelWithLMHead"),qZr.forEach(t),wMo=r(EAe," (Reformer model)"),EAe.forEach(t),AMo=i(W),H_=n(W,"LI",{});var CAe=s(H_);cie=n(CAe,"STRONG",{});var NZr=s(cie);yMo=r(NZr,"rembert"),NZr.forEach(t),LMo=r(CAe," \u2014 "),NN=n(CAe,"A",{href:!0});var jZr=s(NN);xMo=r(jZr,"RemBertForCausalLM"),jZr.forEach(t),$Mo=r(CAe," (RemBERT model)"),CAe.forEach(t),kMo=i(W),U_=n(W,"LI",{});var wAe=s(U_);fie=n(wAe,"STRONG",{});var DZr=s(fie);SMo=r(DZr,"roberta"),DZr.forEach(t),RMo=r(wAe," \u2014 "),jN=n(wAe,"A",{href:!0});var GZr=s(jN);BMo=r(GZr,"RobertaForCausalLM"),GZr.forEach(t),PMo=r(wAe," (RoBERTa model)"),wAe.forEach(t),IMo=i(W),J_=n(W,"LI",{});var AAe=s(J_);mie=n(AAe,"STRONG",{});var OZr=s(mie);qMo=r(OZr,"roformer"),OZr.forEach(t),NMo=r(AAe," \u2014 "),DN=n(AAe,"A",{href:!0});var VZr=s(DN);jMo=r(VZr,"RoFormerForCausalLM"),VZr.forEach(t),DMo=r(AAe," (RoFormer model)"),AAe.forEach(t),GMo=i(W),Y_=n(W,"LI",{});var yAe=s(Y_);gie=n(yAe,"STRONG",{});var XZr=s(gie);OMo=r(XZr,"speech_to_text_2"),XZr.forEach(t),VMo=r(yAe," \u2014 "),GN=n(yAe,"A",{href:!0});var zZr=s(GN);XMo=r(zZr,"Speech2Text2ForCausalLM"),zZr.forEach(t),zMo=r(yAe," (Speech2Text2 model)"),yAe.forEach(t),QMo=i(W),K_=n(W,"LI",{});var LAe=s(K_);hie=n(LAe,"STRONG",{});var QZr=s(hie);WMo=r(QZr,"transfo-xl"),QZr.forEach(t),HMo=r(LAe," \u2014 "),ON=n(LAe,"A",{href:!0});var WZr=s(ON);UMo=r(WZr,"TransfoXLLMHeadModel"),WZr.forEach(t),JMo=r(LAe," (Transformer-XL model)"),LAe.forEach(t),YMo=i(W),Z_=n(W,"LI",{});var xAe=s(Z_);pie=n(xAe,"STRONG",{});var HZr=s(pie);KMo=r(HZr,"trocr"),HZr.forEach(t),ZMo=r(xAe," \u2014 "),VN=n(xAe,"A",{href:!0});var UZr=s(VN);e4o=r(UZr,"TrOCRForCausalLM"),UZr.forEach(t),o4o=r(xAe," (TrOCR model)"),xAe.forEach(t),r4o=i(W),e1=n(W,"LI",{});var $Ae=s(e1);uie=n($Ae,"STRONG",{});var JZr=s(uie);t4o=r(JZr,"xglm"),JZr.forEach(t),a4o=r($Ae," \u2014 "),XN=n($Ae,"A",{href:!0});var YZr=s(XN);n4o=r(YZr,"XGLMForCausalLM"),YZr.forEach(t),s4o=r($Ae," (XGLM model)"),$Ae.forEach(t),l4o=i(W),o1=n(W,"LI",{});var kAe=s(o1);_ie=n(kAe,"STRONG",{});var KZr=s(_ie);i4o=r(KZr,"xlm"),KZr.forEach(t),d4o=r(kAe," \u2014 "),zN=n(kAe,"A",{href:!0});var ZZr=s(zN);c4o=r(ZZr,"XLMWithLMHeadModel"),ZZr.forEach(t),f4o=r(kAe," (XLM model)"),kAe.forEach(t),m4o=i(W),r1=n(W,"LI",{});var SAe=s(r1);bie=n(SAe,"STRONG",{});var eet=s(bie);g4o=r(eet,"xlm-prophetnet"),eet.forEach(t),h4o=r(SAe," \u2014 "),QN=n(SAe,"A",{href:!0});var oet=s(QN);p4o=r(oet,"XLMProphetNetForCausalLM"),oet.forEach(t),u4o=r(SAe," (XLMProphetNet model)"),SAe.forEach(t),_4o=i(W),t1=n(W,"LI",{});var RAe=s(t1);vie=n(RAe,"STRONG",{});var ret=s(vie);b4o=r(ret,"xlm-roberta"),ret.forEach(t),v4o=r(RAe," \u2014 "),WN=n(RAe,"A",{href:!0});var tet=s(WN);F4o=r(tet,"XLMRobertaForCausalLM"),tet.forEach(t),T4o=r(RAe," (XLM-RoBERTa model)"),RAe.forEach(t),M4o=i(W),a1=n(W,"LI",{});var BAe=s(a1);Fie=n(BAe,"STRONG",{});var aet=s(Fie);E4o=r(aet,"xlm-roberta-xl"),aet.forEach(t),C4o=r(BAe," \u2014 "),HN=n(BAe,"A",{href:!0});var net=s(HN);w4o=r(net,"XLMRobertaXLForCausalLM"),net.forEach(t),A4o=r(BAe," (XLM-RoBERTa-XL model)"),BAe.forEach(t),y4o=i(W),n1=n(W,"LI",{});var PAe=s(n1);Tie=n(PAe,"STRONG",{});var set=s(Tie);L4o=r(set,"xlnet"),set.forEach(t),x4o=r(PAe," \u2014 "),UN=n(PAe,"A",{href:!0});var iet=s(UN);$4o=r(iet,"XLNetLMHeadModel"),iet.forEach(t),k4o=r(PAe," (XLNet model)"),PAe.forEach(t),W.forEach(t),S4o=i(oa),s1=n(oa,"P",{});var IAe=s(s1);R4o=r(IAe,"The model is set in evaluation mode by default using "),Mie=n(IAe,"CODE",{});var det=s(Mie);B4o=r(det,"model.eval()"),det.forEach(t),P4o=r(IAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eie=n(IAe,"CODE",{});var cet=s(Eie);I4o=r(cet,"model.train()"),cet.forEach(t),IAe.forEach(t),q4o=i(oa),T(l1.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),OPe=i(f),$i=n(f,"H2",{class:!0});var Qqe=s($i);i1=n(Qqe,"A",{id:!0,class:!0,href:!0});var fet=s(i1);Cie=n(fet,"SPAN",{});var met=s(Cie);T(RA.$$.fragment,met),met.forEach(t),fet.forEach(t),N4o=i(Qqe),wie=n(Qqe,"SPAN",{});var get=s(wie);j4o=r(get,"AutoModelForMaskedLM"),get.forEach(t),Qqe.forEach(t),VPe=i(f),ko=n(f,"DIV",{class:!0});var Os=s(ko);T(BA.$$.fragment,Os),D4o=i(Os),ki=n(Os,"P",{});var nK=s(ki);G4o=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JN=n(nK,"A",{href:!0});var het=s(JN);O4o=r(het,"from_pretrained()"),het.forEach(t),V4o=r(nK," class method or the "),YN=n(nK,"A",{href:!0});var pet=s(YN);X4o=r(pet,"from_config()"),pet.forEach(t),z4o=r(nK,` class
method.`),nK.forEach(t),Q4o=i(Os),PA=n(Os,"P",{});var Wqe=s(PA);W4o=r(Wqe,"This class cannot be instantiated directly using "),Aie=n(Wqe,"CODE",{});var uet=s(Aie);H4o=r(uet,"__init__()"),uet.forEach(t),U4o=r(Wqe," (throws an error)."),Wqe.forEach(t),J4o=i(Os),at=n(Os,"DIV",{class:!0});var o3=s(at);T(IA.$$.fragment,o3),Y4o=i(o3),yie=n(o3,"P",{});var _et=s(yie);K4o=r(_et,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_et.forEach(t),Z4o=i(o3),Si=n(o3,"P",{});var sK=s(Si);eEo=r(sK,`Note:
Loading a model from its configuration file does `),Lie=n(sK,"STRONG",{});var bet=s(Lie);oEo=r(bet,"not"),bet.forEach(t),rEo=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KN=n(sK,"A",{href:!0});var vet=s(KN);tEo=r(vet,"from_pretrained()"),vet.forEach(t),aEo=r(sK," to load the model weights."),sK.forEach(t),nEo=i(o3),T(d1.$$.fragment,o3),o3.forEach(t),sEo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(qA.$$.fragment,ra),lEo=i(ra),xie=n(ra,"P",{});var Fet=s(xie);iEo=r(Fet,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Fet.forEach(t),dEo=i(ra),xa=n(ra,"P",{});var r3=s(xa);cEo=r(r3,"The model class to instantiate is selected based on the "),$ie=n(r3,"CODE",{});var Tet=s($ie);fEo=r(Tet,"model_type"),Tet.forEach(t),mEo=r(r3,` property of the config object (either
passed as an argument or loaded from `),kie=n(r3,"CODE",{});var Met=s(kie);gEo=r(Met,"pretrained_model_name_or_path"),Met.forEach(t),hEo=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sie=n(r3,"CODE",{});var Eet=s(Sie);pEo=r(Eet,"pretrained_model_name_or_path"),Eet.forEach(t),uEo=r(r3,":"),r3.forEach(t),_Eo=i(ra),Q=n(ra,"UL",{});var H=s(Q);c1=n(H,"LI",{});var qAe=s(c1);Rie=n(qAe,"STRONG",{});var Cet=s(Rie);bEo=r(Cet,"albert"),Cet.forEach(t),vEo=r(qAe," \u2014 "),ZN=n(qAe,"A",{href:!0});var wet=s(ZN);FEo=r(wet,"AlbertForMaskedLM"),wet.forEach(t),TEo=r(qAe," (ALBERT model)"),qAe.forEach(t),MEo=i(H),f1=n(H,"LI",{});var NAe=s(f1);Bie=n(NAe,"STRONG",{});var Aet=s(Bie);EEo=r(Aet,"bart"),Aet.forEach(t),CEo=r(NAe," \u2014 "),ej=n(NAe,"A",{href:!0});var yet=s(ej);wEo=r(yet,"BartForConditionalGeneration"),yet.forEach(t),AEo=r(NAe," (BART model)"),NAe.forEach(t),yEo=i(H),m1=n(H,"LI",{});var jAe=s(m1);Pie=n(jAe,"STRONG",{});var Let=s(Pie);LEo=r(Let,"bert"),Let.forEach(t),xEo=r(jAe," \u2014 "),oj=n(jAe,"A",{href:!0});var xet=s(oj);$Eo=r(xet,"BertForMaskedLM"),xet.forEach(t),kEo=r(jAe," (BERT model)"),jAe.forEach(t),SEo=i(H),g1=n(H,"LI",{});var DAe=s(g1);Iie=n(DAe,"STRONG",{});var $et=s(Iie);REo=r($et,"big_bird"),$et.forEach(t),BEo=r(DAe," \u2014 "),rj=n(DAe,"A",{href:!0});var ket=s(rj);PEo=r(ket,"BigBirdForMaskedLM"),ket.forEach(t),IEo=r(DAe," (BigBird model)"),DAe.forEach(t),qEo=i(H),h1=n(H,"LI",{});var GAe=s(h1);qie=n(GAe,"STRONG",{});var Set=s(qie);NEo=r(Set,"camembert"),Set.forEach(t),jEo=r(GAe," \u2014 "),tj=n(GAe,"A",{href:!0});var Ret=s(tj);DEo=r(Ret,"CamembertForMaskedLM"),Ret.forEach(t),GEo=r(GAe," (CamemBERT model)"),GAe.forEach(t),OEo=i(H),p1=n(H,"LI",{});var OAe=s(p1);Nie=n(OAe,"STRONG",{});var Bet=s(Nie);VEo=r(Bet,"convbert"),Bet.forEach(t),XEo=r(OAe," \u2014 "),aj=n(OAe,"A",{href:!0});var Pet=s(aj);zEo=r(Pet,"ConvBertForMaskedLM"),Pet.forEach(t),QEo=r(OAe," (ConvBERT model)"),OAe.forEach(t),WEo=i(H),u1=n(H,"LI",{});var VAe=s(u1);jie=n(VAe,"STRONG",{});var Iet=s(jie);HEo=r(Iet,"data2vec-text"),Iet.forEach(t),UEo=r(VAe," \u2014 "),nj=n(VAe,"A",{href:!0});var qet=s(nj);JEo=r(qet,"Data2VecTextForMaskedLM"),qet.forEach(t),YEo=r(VAe," (Data2VecText model)"),VAe.forEach(t),KEo=i(H),_1=n(H,"LI",{});var XAe=s(_1);Die=n(XAe,"STRONG",{});var Net=s(Die);ZEo=r(Net,"deberta"),Net.forEach(t),e5o=r(XAe," \u2014 "),sj=n(XAe,"A",{href:!0});var jet=s(sj);o5o=r(jet,"DebertaForMaskedLM"),jet.forEach(t),r5o=r(XAe," (DeBERTa model)"),XAe.forEach(t),t5o=i(H),b1=n(H,"LI",{});var zAe=s(b1);Gie=n(zAe,"STRONG",{});var Det=s(Gie);a5o=r(Det,"deberta-v2"),Det.forEach(t),n5o=r(zAe," \u2014 "),lj=n(zAe,"A",{href:!0});var Get=s(lj);s5o=r(Get,"DebertaV2ForMaskedLM"),Get.forEach(t),l5o=r(zAe," (DeBERTa-v2 model)"),zAe.forEach(t),i5o=i(H),v1=n(H,"LI",{});var QAe=s(v1);Oie=n(QAe,"STRONG",{});var Oet=s(Oie);d5o=r(Oet,"distilbert"),Oet.forEach(t),c5o=r(QAe," \u2014 "),ij=n(QAe,"A",{href:!0});var Vet=s(ij);f5o=r(Vet,"DistilBertForMaskedLM"),Vet.forEach(t),m5o=r(QAe," (DistilBERT model)"),QAe.forEach(t),g5o=i(H),F1=n(H,"LI",{});var WAe=s(F1);Vie=n(WAe,"STRONG",{});var Xet=s(Vie);h5o=r(Xet,"electra"),Xet.forEach(t),p5o=r(WAe," \u2014 "),dj=n(WAe,"A",{href:!0});var zet=s(dj);u5o=r(zet,"ElectraForMaskedLM"),zet.forEach(t),_5o=r(WAe," (ELECTRA model)"),WAe.forEach(t),b5o=i(H),T1=n(H,"LI",{});var HAe=s(T1);Xie=n(HAe,"STRONG",{});var Qet=s(Xie);v5o=r(Qet,"flaubert"),Qet.forEach(t),F5o=r(HAe," \u2014 "),cj=n(HAe,"A",{href:!0});var Wet=s(cj);T5o=r(Wet,"FlaubertWithLMHeadModel"),Wet.forEach(t),M5o=r(HAe," (FlauBERT model)"),HAe.forEach(t),E5o=i(H),M1=n(H,"LI",{});var UAe=s(M1);zie=n(UAe,"STRONG",{});var Het=s(zie);C5o=r(Het,"fnet"),Het.forEach(t),w5o=r(UAe," \u2014 "),fj=n(UAe,"A",{href:!0});var Uet=s(fj);A5o=r(Uet,"FNetForMaskedLM"),Uet.forEach(t),y5o=r(UAe," (FNet model)"),UAe.forEach(t),L5o=i(H),E1=n(H,"LI",{});var JAe=s(E1);Qie=n(JAe,"STRONG",{});var Jet=s(Qie);x5o=r(Jet,"funnel"),Jet.forEach(t),$5o=r(JAe," \u2014 "),mj=n(JAe,"A",{href:!0});var Yet=s(mj);k5o=r(Yet,"FunnelForMaskedLM"),Yet.forEach(t),S5o=r(JAe," (Funnel Transformer model)"),JAe.forEach(t),R5o=i(H),C1=n(H,"LI",{});var YAe=s(C1);Wie=n(YAe,"STRONG",{});var Ket=s(Wie);B5o=r(Ket,"ibert"),Ket.forEach(t),P5o=r(YAe," \u2014 "),gj=n(YAe,"A",{href:!0});var Zet=s(gj);I5o=r(Zet,"IBertForMaskedLM"),Zet.forEach(t),q5o=r(YAe," (I-BERT model)"),YAe.forEach(t),N5o=i(H),w1=n(H,"LI",{});var KAe=s(w1);Hie=n(KAe,"STRONG",{});var eot=s(Hie);j5o=r(eot,"layoutlm"),eot.forEach(t),D5o=r(KAe," \u2014 "),hj=n(KAe,"A",{href:!0});var oot=s(hj);G5o=r(oot,"LayoutLMForMaskedLM"),oot.forEach(t),O5o=r(KAe," (LayoutLM model)"),KAe.forEach(t),V5o=i(H),A1=n(H,"LI",{});var ZAe=s(A1);Uie=n(ZAe,"STRONG",{});var rot=s(Uie);X5o=r(rot,"longformer"),rot.forEach(t),z5o=r(ZAe," \u2014 "),pj=n(ZAe,"A",{href:!0});var tot=s(pj);Q5o=r(tot,"LongformerForMaskedLM"),tot.forEach(t),W5o=r(ZAe," (Longformer model)"),ZAe.forEach(t),H5o=i(H),y1=n(H,"LI",{});var e6e=s(y1);Jie=n(e6e,"STRONG",{});var aot=s(Jie);U5o=r(aot,"mbart"),aot.forEach(t),J5o=r(e6e," \u2014 "),uj=n(e6e,"A",{href:!0});var not=s(uj);Y5o=r(not,"MBartForConditionalGeneration"),not.forEach(t),K5o=r(e6e," (mBART model)"),e6e.forEach(t),Z5o=i(H),L1=n(H,"LI",{});var o6e=s(L1);Yie=n(o6e,"STRONG",{});var sot=s(Yie);eCo=r(sot,"megatron-bert"),sot.forEach(t),oCo=r(o6e," \u2014 "),_j=n(o6e,"A",{href:!0});var lot=s(_j);rCo=r(lot,"MegatronBertForMaskedLM"),lot.forEach(t),tCo=r(o6e," (MegatronBert model)"),o6e.forEach(t),aCo=i(H),x1=n(H,"LI",{});var r6e=s(x1);Kie=n(r6e,"STRONG",{});var iot=s(Kie);nCo=r(iot,"mobilebert"),iot.forEach(t),sCo=r(r6e," \u2014 "),bj=n(r6e,"A",{href:!0});var dot=s(bj);lCo=r(dot,"MobileBertForMaskedLM"),dot.forEach(t),iCo=r(r6e," (MobileBERT model)"),r6e.forEach(t),dCo=i(H),$1=n(H,"LI",{});var t6e=s($1);Zie=n(t6e,"STRONG",{});var cot=s(Zie);cCo=r(cot,"mpnet"),cot.forEach(t),fCo=r(t6e," \u2014 "),vj=n(t6e,"A",{href:!0});var fot=s(vj);mCo=r(fot,"MPNetForMaskedLM"),fot.forEach(t),gCo=r(t6e," (MPNet model)"),t6e.forEach(t),hCo=i(H),k1=n(H,"LI",{});var a6e=s(k1);ede=n(a6e,"STRONG",{});var mot=s(ede);pCo=r(mot,"nystromformer"),mot.forEach(t),uCo=r(a6e," \u2014 "),Fj=n(a6e,"A",{href:!0});var got=s(Fj);_Co=r(got,"NystromformerForMaskedLM"),got.forEach(t),bCo=r(a6e," (Nystromformer model)"),a6e.forEach(t),vCo=i(H),S1=n(H,"LI",{});var n6e=s(S1);ode=n(n6e,"STRONG",{});var hot=s(ode);FCo=r(hot,"perceiver"),hot.forEach(t),TCo=r(n6e," \u2014 "),Tj=n(n6e,"A",{href:!0});var pot=s(Tj);MCo=r(pot,"PerceiverForMaskedLM"),pot.forEach(t),ECo=r(n6e," (Perceiver model)"),n6e.forEach(t),CCo=i(H),R1=n(H,"LI",{});var s6e=s(R1);rde=n(s6e,"STRONG",{});var uot=s(rde);wCo=r(uot,"qdqbert"),uot.forEach(t),ACo=r(s6e," \u2014 "),Mj=n(s6e,"A",{href:!0});var _ot=s(Mj);yCo=r(_ot,"QDQBertForMaskedLM"),_ot.forEach(t),LCo=r(s6e," (QDQBert model)"),s6e.forEach(t),xCo=i(H),B1=n(H,"LI",{});var l6e=s(B1);tde=n(l6e,"STRONG",{});var bot=s(tde);$Co=r(bot,"reformer"),bot.forEach(t),kCo=r(l6e," \u2014 "),Ej=n(l6e,"A",{href:!0});var vot=s(Ej);SCo=r(vot,"ReformerForMaskedLM"),vot.forEach(t),RCo=r(l6e," (Reformer model)"),l6e.forEach(t),BCo=i(H),P1=n(H,"LI",{});var i6e=s(P1);ade=n(i6e,"STRONG",{});var Fot=s(ade);PCo=r(Fot,"rembert"),Fot.forEach(t),ICo=r(i6e," \u2014 "),Cj=n(i6e,"A",{href:!0});var Tot=s(Cj);qCo=r(Tot,"RemBertForMaskedLM"),Tot.forEach(t),NCo=r(i6e," (RemBERT model)"),i6e.forEach(t),jCo=i(H),I1=n(H,"LI",{});var d6e=s(I1);nde=n(d6e,"STRONG",{});var Mot=s(nde);DCo=r(Mot,"roberta"),Mot.forEach(t),GCo=r(d6e," \u2014 "),wj=n(d6e,"A",{href:!0});var Eot=s(wj);OCo=r(Eot,"RobertaForMaskedLM"),Eot.forEach(t),VCo=r(d6e," (RoBERTa model)"),d6e.forEach(t),XCo=i(H),q1=n(H,"LI",{});var c6e=s(q1);sde=n(c6e,"STRONG",{});var Cot=s(sde);zCo=r(Cot,"roformer"),Cot.forEach(t),QCo=r(c6e," \u2014 "),Aj=n(c6e,"A",{href:!0});var wot=s(Aj);WCo=r(wot,"RoFormerForMaskedLM"),wot.forEach(t),HCo=r(c6e," (RoFormer model)"),c6e.forEach(t),UCo=i(H),N1=n(H,"LI",{});var f6e=s(N1);lde=n(f6e,"STRONG",{});var Aot=s(lde);JCo=r(Aot,"squeezebert"),Aot.forEach(t),YCo=r(f6e," \u2014 "),yj=n(f6e,"A",{href:!0});var yot=s(yj);KCo=r(yot,"SqueezeBertForMaskedLM"),yot.forEach(t),ZCo=r(f6e," (SqueezeBERT model)"),f6e.forEach(t),e3o=i(H),j1=n(H,"LI",{});var m6e=s(j1);ide=n(m6e,"STRONG",{});var Lot=s(ide);o3o=r(Lot,"tapas"),Lot.forEach(t),r3o=r(m6e," \u2014 "),Lj=n(m6e,"A",{href:!0});var xot=s(Lj);t3o=r(xot,"TapasForMaskedLM"),xot.forEach(t),a3o=r(m6e," (TAPAS model)"),m6e.forEach(t),n3o=i(H),D1=n(H,"LI",{});var g6e=s(D1);dde=n(g6e,"STRONG",{});var $ot=s(dde);s3o=r($ot,"wav2vec2"),$ot.forEach(t),l3o=r(g6e," \u2014 "),cde=n(g6e,"CODE",{});var kot=s(cde);i3o=r(kot,"Wav2Vec2ForMaskedLM"),kot.forEach(t),d3o=r(g6e," (Wav2Vec2 model)"),g6e.forEach(t),c3o=i(H),G1=n(H,"LI",{});var h6e=s(G1);fde=n(h6e,"STRONG",{});var Sot=s(fde);f3o=r(Sot,"xlm"),Sot.forEach(t),m3o=r(h6e," \u2014 "),xj=n(h6e,"A",{href:!0});var Rot=s(xj);g3o=r(Rot,"XLMWithLMHeadModel"),Rot.forEach(t),h3o=r(h6e," (XLM model)"),h6e.forEach(t),p3o=i(H),O1=n(H,"LI",{});var p6e=s(O1);mde=n(p6e,"STRONG",{});var Bot=s(mde);u3o=r(Bot,"xlm-roberta"),Bot.forEach(t),_3o=r(p6e," \u2014 "),$j=n(p6e,"A",{href:!0});var Pot=s($j);b3o=r(Pot,"XLMRobertaForMaskedLM"),Pot.forEach(t),v3o=r(p6e," (XLM-RoBERTa model)"),p6e.forEach(t),F3o=i(H),V1=n(H,"LI",{});var u6e=s(V1);gde=n(u6e,"STRONG",{});var Iot=s(gde);T3o=r(Iot,"xlm-roberta-xl"),Iot.forEach(t),M3o=r(u6e," \u2014 "),kj=n(u6e,"A",{href:!0});var qot=s(kj);E3o=r(qot,"XLMRobertaXLForMaskedLM"),qot.forEach(t),C3o=r(u6e," (XLM-RoBERTa-XL model)"),u6e.forEach(t),w3o=i(H),X1=n(H,"LI",{});var _6e=s(X1);hde=n(_6e,"STRONG",{});var Not=s(hde);A3o=r(Not,"yoso"),Not.forEach(t),y3o=r(_6e," \u2014 "),Sj=n(_6e,"A",{href:!0});var jot=s(Sj);L3o=r(jot,"YosoForMaskedLM"),jot.forEach(t),x3o=r(_6e," (YOSO model)"),_6e.forEach(t),H.forEach(t),$3o=i(ra),z1=n(ra,"P",{});var b6e=s(z1);k3o=r(b6e,"The model is set in evaluation mode by default using "),pde=n(b6e,"CODE",{});var Dot=s(pde);S3o=r(Dot,"model.eval()"),Dot.forEach(t),R3o=r(b6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ude=n(b6e,"CODE",{});var Got=s(ude);B3o=r(Got,"model.train()"),Got.forEach(t),b6e.forEach(t),P3o=i(ra),T(Q1.$$.fragment,ra),ra.forEach(t),Os.forEach(t),XPe=i(f),Ri=n(f,"H2",{class:!0});var Hqe=s(Ri);W1=n(Hqe,"A",{id:!0,class:!0,href:!0});var Oot=s(W1);_de=n(Oot,"SPAN",{});var Vot=s(_de);T(NA.$$.fragment,Vot),Vot.forEach(t),Oot.forEach(t),I3o=i(Hqe),bde=n(Hqe,"SPAN",{});var Xot=s(bde);q3o=r(Xot,"AutoModelForSeq2SeqLM"),Xot.forEach(t),Hqe.forEach(t),zPe=i(f),So=n(f,"DIV",{class:!0});var Vs=s(So);T(jA.$$.fragment,Vs),N3o=i(Vs),Bi=n(Vs,"P",{});var lK=s(Bi);j3o=r(lK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Rj=n(lK,"A",{href:!0});var zot=s(Rj);D3o=r(zot,"from_pretrained()"),zot.forEach(t),G3o=r(lK," class method or the "),Bj=n(lK,"A",{href:!0});var Qot=s(Bj);O3o=r(Qot,"from_config()"),Qot.forEach(t),V3o=r(lK,` class
method.`),lK.forEach(t),X3o=i(Vs),DA=n(Vs,"P",{});var Uqe=s(DA);z3o=r(Uqe,"This class cannot be instantiated directly using "),vde=n(Uqe,"CODE",{});var Wot=s(vde);Q3o=r(Wot,"__init__()"),Wot.forEach(t),W3o=r(Uqe," (throws an error)."),Uqe.forEach(t),H3o=i(Vs),nt=n(Vs,"DIV",{class:!0});var t3=s(nt);T(GA.$$.fragment,t3),U3o=i(t3),Fde=n(t3,"P",{});var Hot=s(Fde);J3o=r(Hot,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Hot.forEach(t),Y3o=i(t3),Pi=n(t3,"P",{});var iK=s(Pi);K3o=r(iK,`Note:
Loading a model from its configuration file does `),Tde=n(iK,"STRONG",{});var Uot=s(Tde);Z3o=r(Uot,"not"),Uot.forEach(t),ewo=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pj=n(iK,"A",{href:!0});var Jot=s(Pj);owo=r(Jot,"from_pretrained()"),Jot.forEach(t),rwo=r(iK," to load the model weights."),iK.forEach(t),two=i(t3),T(H1.$$.fragment,t3),t3.forEach(t),awo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(OA.$$.fragment,ta),nwo=i(ta),Mde=n(ta,"P",{});var Yot=s(Mde);swo=r(Yot,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Yot.forEach(t),lwo=i(ta),$a=n(ta,"P",{});var a3=s($a);iwo=r(a3,"The model class to instantiate is selected based on the "),Ede=n(a3,"CODE",{});var Kot=s(Ede);dwo=r(Kot,"model_type"),Kot.forEach(t),cwo=r(a3,` property of the config object (either
passed as an argument or loaded from `),Cde=n(a3,"CODE",{});var Zot=s(Cde);fwo=r(Zot,"pretrained_model_name_or_path"),Zot.forEach(t),mwo=r(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wde=n(a3,"CODE",{});var ert=s(wde);gwo=r(ert,"pretrained_model_name_or_path"),ert.forEach(t),hwo=r(a3,":"),a3.forEach(t),pwo=i(ta),he=n(ta,"UL",{});var ue=s(he);U1=n(ue,"LI",{});var v6e=s(U1);Ade=n(v6e,"STRONG",{});var ort=s(Ade);uwo=r(ort,"bart"),ort.forEach(t),_wo=r(v6e," \u2014 "),Ij=n(v6e,"A",{href:!0});var rrt=s(Ij);bwo=r(rrt,"BartForConditionalGeneration"),rrt.forEach(t),vwo=r(v6e," (BART model)"),v6e.forEach(t),Fwo=i(ue),J1=n(ue,"LI",{});var F6e=s(J1);yde=n(F6e,"STRONG",{});var trt=s(yde);Two=r(trt,"bigbird_pegasus"),trt.forEach(t),Mwo=r(F6e," \u2014 "),qj=n(F6e,"A",{href:!0});var art=s(qj);Ewo=r(art,"BigBirdPegasusForConditionalGeneration"),art.forEach(t),Cwo=r(F6e," (BigBirdPegasus model)"),F6e.forEach(t),wwo=i(ue),Y1=n(ue,"LI",{});var T6e=s(Y1);Lde=n(T6e,"STRONG",{});var nrt=s(Lde);Awo=r(nrt,"blenderbot"),nrt.forEach(t),ywo=r(T6e," \u2014 "),Nj=n(T6e,"A",{href:!0});var srt=s(Nj);Lwo=r(srt,"BlenderbotForConditionalGeneration"),srt.forEach(t),xwo=r(T6e," (Blenderbot model)"),T6e.forEach(t),$wo=i(ue),K1=n(ue,"LI",{});var M6e=s(K1);xde=n(M6e,"STRONG",{});var lrt=s(xde);kwo=r(lrt,"blenderbot-small"),lrt.forEach(t),Swo=r(M6e," \u2014 "),jj=n(M6e,"A",{href:!0});var irt=s(jj);Rwo=r(irt,"BlenderbotSmallForConditionalGeneration"),irt.forEach(t),Bwo=r(M6e," (BlenderbotSmall model)"),M6e.forEach(t),Pwo=i(ue),Z1=n(ue,"LI",{});var E6e=s(Z1);$de=n(E6e,"STRONG",{});var drt=s($de);Iwo=r(drt,"encoder-decoder"),drt.forEach(t),qwo=r(E6e," \u2014 "),Dj=n(E6e,"A",{href:!0});var crt=s(Dj);Nwo=r(crt,"EncoderDecoderModel"),crt.forEach(t),jwo=r(E6e," (Encoder decoder model)"),E6e.forEach(t),Dwo=i(ue),e8=n(ue,"LI",{});var C6e=s(e8);kde=n(C6e,"STRONG",{});var frt=s(kde);Gwo=r(frt,"fsmt"),frt.forEach(t),Owo=r(C6e," \u2014 "),Gj=n(C6e,"A",{href:!0});var mrt=s(Gj);Vwo=r(mrt,"FSMTForConditionalGeneration"),mrt.forEach(t),Xwo=r(C6e," (FairSeq Machine-Translation model)"),C6e.forEach(t),zwo=i(ue),o8=n(ue,"LI",{});var w6e=s(o8);Sde=n(w6e,"STRONG",{});var grt=s(Sde);Qwo=r(grt,"led"),grt.forEach(t),Wwo=r(w6e," \u2014 "),Oj=n(w6e,"A",{href:!0});var hrt=s(Oj);Hwo=r(hrt,"LEDForConditionalGeneration"),hrt.forEach(t),Uwo=r(w6e," (LED model)"),w6e.forEach(t),Jwo=i(ue),r8=n(ue,"LI",{});var A6e=s(r8);Rde=n(A6e,"STRONG",{});var prt=s(Rde);Ywo=r(prt,"m2m_100"),prt.forEach(t),Kwo=r(A6e," \u2014 "),Vj=n(A6e,"A",{href:!0});var urt=s(Vj);Zwo=r(urt,"M2M100ForConditionalGeneration"),urt.forEach(t),eAo=r(A6e," (M2M100 model)"),A6e.forEach(t),oAo=i(ue),t8=n(ue,"LI",{});var y6e=s(t8);Bde=n(y6e,"STRONG",{});var _rt=s(Bde);rAo=r(_rt,"marian"),_rt.forEach(t),tAo=r(y6e," \u2014 "),Xj=n(y6e,"A",{href:!0});var brt=s(Xj);aAo=r(brt,"MarianMTModel"),brt.forEach(t),nAo=r(y6e," (Marian model)"),y6e.forEach(t),sAo=i(ue),a8=n(ue,"LI",{});var L6e=s(a8);Pde=n(L6e,"STRONG",{});var vrt=s(Pde);lAo=r(vrt,"mbart"),vrt.forEach(t),iAo=r(L6e," \u2014 "),zj=n(L6e,"A",{href:!0});var Frt=s(zj);dAo=r(Frt,"MBartForConditionalGeneration"),Frt.forEach(t),cAo=r(L6e," (mBART model)"),L6e.forEach(t),fAo=i(ue),n8=n(ue,"LI",{});var x6e=s(n8);Ide=n(x6e,"STRONG",{});var Trt=s(Ide);mAo=r(Trt,"mt5"),Trt.forEach(t),gAo=r(x6e," \u2014 "),Qj=n(x6e,"A",{href:!0});var Mrt=s(Qj);hAo=r(Mrt,"MT5ForConditionalGeneration"),Mrt.forEach(t),pAo=r(x6e," (mT5 model)"),x6e.forEach(t),uAo=i(ue),s8=n(ue,"LI",{});var $6e=s(s8);qde=n($6e,"STRONG",{});var Ert=s(qde);_Ao=r(Ert,"pegasus"),Ert.forEach(t),bAo=r($6e," \u2014 "),Wj=n($6e,"A",{href:!0});var Crt=s(Wj);vAo=r(Crt,"PegasusForConditionalGeneration"),Crt.forEach(t),FAo=r($6e," (Pegasus model)"),$6e.forEach(t),TAo=i(ue),l8=n(ue,"LI",{});var k6e=s(l8);Nde=n(k6e,"STRONG",{});var wrt=s(Nde);MAo=r(wrt,"plbart"),wrt.forEach(t),EAo=r(k6e," \u2014 "),Hj=n(k6e,"A",{href:!0});var Art=s(Hj);CAo=r(Art,"PLBartForConditionalGeneration"),Art.forEach(t),wAo=r(k6e," (PLBart model)"),k6e.forEach(t),AAo=i(ue),i8=n(ue,"LI",{});var S6e=s(i8);jde=n(S6e,"STRONG",{});var yrt=s(jde);yAo=r(yrt,"prophetnet"),yrt.forEach(t),LAo=r(S6e," \u2014 "),Uj=n(S6e,"A",{href:!0});var Lrt=s(Uj);xAo=r(Lrt,"ProphetNetForConditionalGeneration"),Lrt.forEach(t),$Ao=r(S6e," (ProphetNet model)"),S6e.forEach(t),kAo=i(ue),d8=n(ue,"LI",{});var R6e=s(d8);Dde=n(R6e,"STRONG",{});var xrt=s(Dde);SAo=r(xrt,"t5"),xrt.forEach(t),RAo=r(R6e," \u2014 "),Jj=n(R6e,"A",{href:!0});var $rt=s(Jj);BAo=r($rt,"T5ForConditionalGeneration"),$rt.forEach(t),PAo=r(R6e," (T5 model)"),R6e.forEach(t),IAo=i(ue),c8=n(ue,"LI",{});var B6e=s(c8);Gde=n(B6e,"STRONG",{});var krt=s(Gde);qAo=r(krt,"tapex"),krt.forEach(t),NAo=r(B6e," \u2014 "),Yj=n(B6e,"A",{href:!0});var Srt=s(Yj);jAo=r(Srt,"BartForConditionalGeneration"),Srt.forEach(t),DAo=r(B6e," (TAPEX model)"),B6e.forEach(t),GAo=i(ue),f8=n(ue,"LI",{});var P6e=s(f8);Ode=n(P6e,"STRONG",{});var Rrt=s(Ode);OAo=r(Rrt,"xlm-prophetnet"),Rrt.forEach(t),VAo=r(P6e," \u2014 "),Kj=n(P6e,"A",{href:!0});var Brt=s(Kj);XAo=r(Brt,"XLMProphetNetForConditionalGeneration"),Brt.forEach(t),zAo=r(P6e," (XLMProphetNet model)"),P6e.forEach(t),ue.forEach(t),QAo=i(ta),m8=n(ta,"P",{});var I6e=s(m8);WAo=r(I6e,"The model is set in evaluation mode by default using "),Vde=n(I6e,"CODE",{});var Prt=s(Vde);HAo=r(Prt,"model.eval()"),Prt.forEach(t),UAo=r(I6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xde=n(I6e,"CODE",{});var Irt=s(Xde);JAo=r(Irt,"model.train()"),Irt.forEach(t),I6e.forEach(t),YAo=i(ta),T(g8.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),QPe=i(f),Ii=n(f,"H2",{class:!0});var Jqe=s(Ii);h8=n(Jqe,"A",{id:!0,class:!0,href:!0});var qrt=s(h8);zde=n(qrt,"SPAN",{});var Nrt=s(zde);T(VA.$$.fragment,Nrt),Nrt.forEach(t),qrt.forEach(t),KAo=i(Jqe),Qde=n(Jqe,"SPAN",{});var jrt=s(Qde);ZAo=r(jrt,"AutoModelForSequenceClassification"),jrt.forEach(t),Jqe.forEach(t),WPe=i(f),Ro=n(f,"DIV",{class:!0});var Xs=s(Ro);T(XA.$$.fragment,Xs),e6o=i(Xs),qi=n(Xs,"P",{});var dK=s(qi);o6o=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Zj=n(dK,"A",{href:!0});var Drt=s(Zj);r6o=r(Drt,"from_pretrained()"),Drt.forEach(t),t6o=r(dK," class method or the "),eD=n(dK,"A",{href:!0});var Grt=s(eD);a6o=r(Grt,"from_config()"),Grt.forEach(t),n6o=r(dK,` class
method.`),dK.forEach(t),s6o=i(Xs),zA=n(Xs,"P",{});var Yqe=s(zA);l6o=r(Yqe,"This class cannot be instantiated directly using "),Wde=n(Yqe,"CODE",{});var Ort=s(Wde);i6o=r(Ort,"__init__()"),Ort.forEach(t),d6o=r(Yqe," (throws an error)."),Yqe.forEach(t),c6o=i(Xs),st=n(Xs,"DIV",{class:!0});var n3=s(st);T(QA.$$.fragment,n3),f6o=i(n3),Hde=n(n3,"P",{});var Vrt=s(Hde);m6o=r(Vrt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Vrt.forEach(t),g6o=i(n3),Ni=n(n3,"P",{});var cK=s(Ni);h6o=r(cK,`Note:
Loading a model from its configuration file does `),Ude=n(cK,"STRONG",{});var Xrt=s(Ude);p6o=r(Xrt,"not"),Xrt.forEach(t),u6o=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oD=n(cK,"A",{href:!0});var zrt=s(oD);_6o=r(zrt,"from_pretrained()"),zrt.forEach(t),b6o=r(cK," to load the model weights."),cK.forEach(t),v6o=i(n3),T(p8.$$.fragment,n3),n3.forEach(t),F6o=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(WA.$$.fragment,aa),T6o=i(aa),Jde=n(aa,"P",{});var Qrt=s(Jde);M6o=r(Qrt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Qrt.forEach(t),E6o=i(aa),ka=n(aa,"P",{});var s3=s(ka);C6o=r(s3,"The model class to instantiate is selected based on the "),Yde=n(s3,"CODE",{});var Wrt=s(Yde);w6o=r(Wrt,"model_type"),Wrt.forEach(t),A6o=r(s3,` property of the config object (either
passed as an argument or loaded from `),Kde=n(s3,"CODE",{});var Hrt=s(Kde);y6o=r(Hrt,"pretrained_model_name_or_path"),Hrt.forEach(t),L6o=r(s3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zde=n(s3,"CODE",{});var Urt=s(Zde);x6o=r(Urt,"pretrained_model_name_or_path"),Urt.forEach(t),$6o=r(s3,":"),s3.forEach(t),k6o=i(aa),q=n(aa,"UL",{});var N=s(q);u8=n(N,"LI",{});var q6e=s(u8);ece=n(q6e,"STRONG",{});var Jrt=s(ece);S6o=r(Jrt,"albert"),Jrt.forEach(t),R6o=r(q6e," \u2014 "),rD=n(q6e,"A",{href:!0});var Yrt=s(rD);B6o=r(Yrt,"AlbertForSequenceClassification"),Yrt.forEach(t),P6o=r(q6e," (ALBERT model)"),q6e.forEach(t),I6o=i(N),_8=n(N,"LI",{});var N6e=s(_8);oce=n(N6e,"STRONG",{});var Krt=s(oce);q6o=r(Krt,"bart"),Krt.forEach(t),N6o=r(N6e," \u2014 "),tD=n(N6e,"A",{href:!0});var Zrt=s(tD);j6o=r(Zrt,"BartForSequenceClassification"),Zrt.forEach(t),D6o=r(N6e," (BART model)"),N6e.forEach(t),G6o=i(N),b8=n(N,"LI",{});var j6e=s(b8);rce=n(j6e,"STRONG",{});var ett=s(rce);O6o=r(ett,"bert"),ett.forEach(t),V6o=r(j6e," \u2014 "),aD=n(j6e,"A",{href:!0});var ott=s(aD);X6o=r(ott,"BertForSequenceClassification"),ott.forEach(t),z6o=r(j6e," (BERT model)"),j6e.forEach(t),Q6o=i(N),v8=n(N,"LI",{});var D6e=s(v8);tce=n(D6e,"STRONG",{});var rtt=s(tce);W6o=r(rtt,"big_bird"),rtt.forEach(t),H6o=r(D6e," \u2014 "),nD=n(D6e,"A",{href:!0});var ttt=s(nD);U6o=r(ttt,"BigBirdForSequenceClassification"),ttt.forEach(t),J6o=r(D6e," (BigBird model)"),D6e.forEach(t),Y6o=i(N),F8=n(N,"LI",{});var G6e=s(F8);ace=n(G6e,"STRONG",{});var att=s(ace);K6o=r(att,"bigbird_pegasus"),att.forEach(t),Z6o=r(G6e," \u2014 "),sD=n(G6e,"A",{href:!0});var ntt=s(sD);eyo=r(ntt,"BigBirdPegasusForSequenceClassification"),ntt.forEach(t),oyo=r(G6e," (BigBirdPegasus model)"),G6e.forEach(t),ryo=i(N),T8=n(N,"LI",{});var O6e=s(T8);nce=n(O6e,"STRONG",{});var stt=s(nce);tyo=r(stt,"camembert"),stt.forEach(t),ayo=r(O6e," \u2014 "),lD=n(O6e,"A",{href:!0});var ltt=s(lD);nyo=r(ltt,"CamembertForSequenceClassification"),ltt.forEach(t),syo=r(O6e," (CamemBERT model)"),O6e.forEach(t),lyo=i(N),M8=n(N,"LI",{});var V6e=s(M8);sce=n(V6e,"STRONG",{});var itt=s(sce);iyo=r(itt,"canine"),itt.forEach(t),dyo=r(V6e," \u2014 "),iD=n(V6e,"A",{href:!0});var dtt=s(iD);cyo=r(dtt,"CanineForSequenceClassification"),dtt.forEach(t),fyo=r(V6e," (Canine model)"),V6e.forEach(t),myo=i(N),E8=n(N,"LI",{});var X6e=s(E8);lce=n(X6e,"STRONG",{});var ctt=s(lce);gyo=r(ctt,"convbert"),ctt.forEach(t),hyo=r(X6e," \u2014 "),dD=n(X6e,"A",{href:!0});var ftt=s(dD);pyo=r(ftt,"ConvBertForSequenceClassification"),ftt.forEach(t),uyo=r(X6e," (ConvBERT model)"),X6e.forEach(t),_yo=i(N),C8=n(N,"LI",{});var z6e=s(C8);ice=n(z6e,"STRONG",{});var mtt=s(ice);byo=r(mtt,"ctrl"),mtt.forEach(t),vyo=r(z6e," \u2014 "),cD=n(z6e,"A",{href:!0});var gtt=s(cD);Fyo=r(gtt,"CTRLForSequenceClassification"),gtt.forEach(t),Tyo=r(z6e," (CTRL model)"),z6e.forEach(t),Myo=i(N),w8=n(N,"LI",{});var Q6e=s(w8);dce=n(Q6e,"STRONG",{});var htt=s(dce);Eyo=r(htt,"data2vec-text"),htt.forEach(t),Cyo=r(Q6e," \u2014 "),fD=n(Q6e,"A",{href:!0});var ptt=s(fD);wyo=r(ptt,"Data2VecTextForSequenceClassification"),ptt.forEach(t),Ayo=r(Q6e," (Data2VecText model)"),Q6e.forEach(t),yyo=i(N),A8=n(N,"LI",{});var W6e=s(A8);cce=n(W6e,"STRONG",{});var utt=s(cce);Lyo=r(utt,"deberta"),utt.forEach(t),xyo=r(W6e," \u2014 "),mD=n(W6e,"A",{href:!0});var _tt=s(mD);$yo=r(_tt,"DebertaForSequenceClassification"),_tt.forEach(t),kyo=r(W6e," (DeBERTa model)"),W6e.forEach(t),Syo=i(N),y8=n(N,"LI",{});var H6e=s(y8);fce=n(H6e,"STRONG",{});var btt=s(fce);Ryo=r(btt,"deberta-v2"),btt.forEach(t),Byo=r(H6e," \u2014 "),gD=n(H6e,"A",{href:!0});var vtt=s(gD);Pyo=r(vtt,"DebertaV2ForSequenceClassification"),vtt.forEach(t),Iyo=r(H6e," (DeBERTa-v2 model)"),H6e.forEach(t),qyo=i(N),L8=n(N,"LI",{});var U6e=s(L8);mce=n(U6e,"STRONG",{});var Ftt=s(mce);Nyo=r(Ftt,"distilbert"),Ftt.forEach(t),jyo=r(U6e," \u2014 "),hD=n(U6e,"A",{href:!0});var Ttt=s(hD);Dyo=r(Ttt,"DistilBertForSequenceClassification"),Ttt.forEach(t),Gyo=r(U6e," (DistilBERT model)"),U6e.forEach(t),Oyo=i(N),x8=n(N,"LI",{});var J6e=s(x8);gce=n(J6e,"STRONG",{});var Mtt=s(gce);Vyo=r(Mtt,"electra"),Mtt.forEach(t),Xyo=r(J6e," \u2014 "),pD=n(J6e,"A",{href:!0});var Ett=s(pD);zyo=r(Ett,"ElectraForSequenceClassification"),Ett.forEach(t),Qyo=r(J6e," (ELECTRA model)"),J6e.forEach(t),Wyo=i(N),$8=n(N,"LI",{});var Y6e=s($8);hce=n(Y6e,"STRONG",{});var Ctt=s(hce);Hyo=r(Ctt,"flaubert"),Ctt.forEach(t),Uyo=r(Y6e," \u2014 "),uD=n(Y6e,"A",{href:!0});var wtt=s(uD);Jyo=r(wtt,"FlaubertForSequenceClassification"),wtt.forEach(t),Yyo=r(Y6e," (FlauBERT model)"),Y6e.forEach(t),Kyo=i(N),k8=n(N,"LI",{});var K6e=s(k8);pce=n(K6e,"STRONG",{});var Att=s(pce);Zyo=r(Att,"fnet"),Att.forEach(t),eLo=r(K6e," \u2014 "),_D=n(K6e,"A",{href:!0});var ytt=s(_D);oLo=r(ytt,"FNetForSequenceClassification"),ytt.forEach(t),rLo=r(K6e," (FNet model)"),K6e.forEach(t),tLo=i(N),S8=n(N,"LI",{});var Z6e=s(S8);uce=n(Z6e,"STRONG",{});var Ltt=s(uce);aLo=r(Ltt,"funnel"),Ltt.forEach(t),nLo=r(Z6e," \u2014 "),bD=n(Z6e,"A",{href:!0});var xtt=s(bD);sLo=r(xtt,"FunnelForSequenceClassification"),xtt.forEach(t),lLo=r(Z6e," (Funnel Transformer model)"),Z6e.forEach(t),iLo=i(N),R8=n(N,"LI",{});var eye=s(R8);_ce=n(eye,"STRONG",{});var $tt=s(_ce);dLo=r($tt,"gpt2"),$tt.forEach(t),cLo=r(eye," \u2014 "),vD=n(eye,"A",{href:!0});var ktt=s(vD);fLo=r(ktt,"GPT2ForSequenceClassification"),ktt.forEach(t),mLo=r(eye," (OpenAI GPT-2 model)"),eye.forEach(t),gLo=i(N),B8=n(N,"LI",{});var oye=s(B8);bce=n(oye,"STRONG",{});var Stt=s(bce);hLo=r(Stt,"gpt_neo"),Stt.forEach(t),pLo=r(oye," \u2014 "),FD=n(oye,"A",{href:!0});var Rtt=s(FD);uLo=r(Rtt,"GPTNeoForSequenceClassification"),Rtt.forEach(t),_Lo=r(oye," (GPT Neo model)"),oye.forEach(t),bLo=i(N),P8=n(N,"LI",{});var rye=s(P8);vce=n(rye,"STRONG",{});var Btt=s(vce);vLo=r(Btt,"gptj"),Btt.forEach(t),FLo=r(rye," \u2014 "),TD=n(rye,"A",{href:!0});var Ptt=s(TD);TLo=r(Ptt,"GPTJForSequenceClassification"),Ptt.forEach(t),MLo=r(rye," (GPT-J model)"),rye.forEach(t),ELo=i(N),I8=n(N,"LI",{});var tye=s(I8);Fce=n(tye,"STRONG",{});var Itt=s(Fce);CLo=r(Itt,"ibert"),Itt.forEach(t),wLo=r(tye," \u2014 "),MD=n(tye,"A",{href:!0});var qtt=s(MD);ALo=r(qtt,"IBertForSequenceClassification"),qtt.forEach(t),yLo=r(tye," (I-BERT model)"),tye.forEach(t),LLo=i(N),q8=n(N,"LI",{});var aye=s(q8);Tce=n(aye,"STRONG",{});var Ntt=s(Tce);xLo=r(Ntt,"layoutlm"),Ntt.forEach(t),$Lo=r(aye," \u2014 "),ED=n(aye,"A",{href:!0});var jtt=s(ED);kLo=r(jtt,"LayoutLMForSequenceClassification"),jtt.forEach(t),SLo=r(aye," (LayoutLM model)"),aye.forEach(t),RLo=i(N),N8=n(N,"LI",{});var nye=s(N8);Mce=n(nye,"STRONG",{});var Dtt=s(Mce);BLo=r(Dtt,"layoutlmv2"),Dtt.forEach(t),PLo=r(nye," \u2014 "),CD=n(nye,"A",{href:!0});var Gtt=s(CD);ILo=r(Gtt,"LayoutLMv2ForSequenceClassification"),Gtt.forEach(t),qLo=r(nye," (LayoutLMv2 model)"),nye.forEach(t),NLo=i(N),j8=n(N,"LI",{});var sye=s(j8);Ece=n(sye,"STRONG",{});var Ott=s(Ece);jLo=r(Ott,"led"),Ott.forEach(t),DLo=r(sye," \u2014 "),wD=n(sye,"A",{href:!0});var Vtt=s(wD);GLo=r(Vtt,"LEDForSequenceClassification"),Vtt.forEach(t),OLo=r(sye," (LED model)"),sye.forEach(t),VLo=i(N),D8=n(N,"LI",{});var lye=s(D8);Cce=n(lye,"STRONG",{});var Xtt=s(Cce);XLo=r(Xtt,"longformer"),Xtt.forEach(t),zLo=r(lye," \u2014 "),AD=n(lye,"A",{href:!0});var ztt=s(AD);QLo=r(ztt,"LongformerForSequenceClassification"),ztt.forEach(t),WLo=r(lye," (Longformer model)"),lye.forEach(t),HLo=i(N),G8=n(N,"LI",{});var iye=s(G8);wce=n(iye,"STRONG",{});var Qtt=s(wce);ULo=r(Qtt,"mbart"),Qtt.forEach(t),JLo=r(iye," \u2014 "),yD=n(iye,"A",{href:!0});var Wtt=s(yD);YLo=r(Wtt,"MBartForSequenceClassification"),Wtt.forEach(t),KLo=r(iye," (mBART model)"),iye.forEach(t),ZLo=i(N),O8=n(N,"LI",{});var dye=s(O8);Ace=n(dye,"STRONG",{});var Htt=s(Ace);exo=r(Htt,"megatron-bert"),Htt.forEach(t),oxo=r(dye," \u2014 "),LD=n(dye,"A",{href:!0});var Utt=s(LD);rxo=r(Utt,"MegatronBertForSequenceClassification"),Utt.forEach(t),txo=r(dye," (MegatronBert model)"),dye.forEach(t),axo=i(N),V8=n(N,"LI",{});var cye=s(V8);yce=n(cye,"STRONG",{});var Jtt=s(yce);nxo=r(Jtt,"mobilebert"),Jtt.forEach(t),sxo=r(cye," \u2014 "),xD=n(cye,"A",{href:!0});var Ytt=s(xD);lxo=r(Ytt,"MobileBertForSequenceClassification"),Ytt.forEach(t),ixo=r(cye," (MobileBERT model)"),cye.forEach(t),dxo=i(N),X8=n(N,"LI",{});var fye=s(X8);Lce=n(fye,"STRONG",{});var Ktt=s(Lce);cxo=r(Ktt,"mpnet"),Ktt.forEach(t),fxo=r(fye," \u2014 "),$D=n(fye,"A",{href:!0});var Ztt=s($D);mxo=r(Ztt,"MPNetForSequenceClassification"),Ztt.forEach(t),gxo=r(fye," (MPNet model)"),fye.forEach(t),hxo=i(N),z8=n(N,"LI",{});var mye=s(z8);xce=n(mye,"STRONG",{});var eat=s(xce);pxo=r(eat,"nystromformer"),eat.forEach(t),uxo=r(mye," \u2014 "),kD=n(mye,"A",{href:!0});var oat=s(kD);_xo=r(oat,"NystromformerForSequenceClassification"),oat.forEach(t),bxo=r(mye," (Nystromformer model)"),mye.forEach(t),vxo=i(N),Q8=n(N,"LI",{});var gye=s(Q8);$ce=n(gye,"STRONG",{});var rat=s($ce);Fxo=r(rat,"openai-gpt"),rat.forEach(t),Txo=r(gye," \u2014 "),SD=n(gye,"A",{href:!0});var tat=s(SD);Mxo=r(tat,"OpenAIGPTForSequenceClassification"),tat.forEach(t),Exo=r(gye," (OpenAI GPT model)"),gye.forEach(t),Cxo=i(N),W8=n(N,"LI",{});var hye=s(W8);kce=n(hye,"STRONG",{});var aat=s(kce);wxo=r(aat,"perceiver"),aat.forEach(t),Axo=r(hye," \u2014 "),RD=n(hye,"A",{href:!0});var nat=s(RD);yxo=r(nat,"PerceiverForSequenceClassification"),nat.forEach(t),Lxo=r(hye," (Perceiver model)"),hye.forEach(t),xxo=i(N),H8=n(N,"LI",{});var pye=s(H8);Sce=n(pye,"STRONG",{});var sat=s(Sce);$xo=r(sat,"plbart"),sat.forEach(t),kxo=r(pye," \u2014 "),BD=n(pye,"A",{href:!0});var lat=s(BD);Sxo=r(lat,"PLBartForSequenceClassification"),lat.forEach(t),Rxo=r(pye," (PLBart model)"),pye.forEach(t),Bxo=i(N),U8=n(N,"LI",{});var uye=s(U8);Rce=n(uye,"STRONG",{});var iat=s(Rce);Pxo=r(iat,"qdqbert"),iat.forEach(t),Ixo=r(uye," \u2014 "),PD=n(uye,"A",{href:!0});var dat=s(PD);qxo=r(dat,"QDQBertForSequenceClassification"),dat.forEach(t),Nxo=r(uye," (QDQBert model)"),uye.forEach(t),jxo=i(N),J8=n(N,"LI",{});var _ye=s(J8);Bce=n(_ye,"STRONG",{});var cat=s(Bce);Dxo=r(cat,"reformer"),cat.forEach(t),Gxo=r(_ye," \u2014 "),ID=n(_ye,"A",{href:!0});var fat=s(ID);Oxo=r(fat,"ReformerForSequenceClassification"),fat.forEach(t),Vxo=r(_ye," (Reformer model)"),_ye.forEach(t),Xxo=i(N),Y8=n(N,"LI",{});var bye=s(Y8);Pce=n(bye,"STRONG",{});var mat=s(Pce);zxo=r(mat,"rembert"),mat.forEach(t),Qxo=r(bye," \u2014 "),qD=n(bye,"A",{href:!0});var gat=s(qD);Wxo=r(gat,"RemBertForSequenceClassification"),gat.forEach(t),Hxo=r(bye," (RemBERT model)"),bye.forEach(t),Uxo=i(N),K8=n(N,"LI",{});var vye=s(K8);Ice=n(vye,"STRONG",{});var hat=s(Ice);Jxo=r(hat,"roberta"),hat.forEach(t),Yxo=r(vye," \u2014 "),ND=n(vye,"A",{href:!0});var pat=s(ND);Kxo=r(pat,"RobertaForSequenceClassification"),pat.forEach(t),Zxo=r(vye," (RoBERTa model)"),vye.forEach(t),e9o=i(N),Z8=n(N,"LI",{});var Fye=s(Z8);qce=n(Fye,"STRONG",{});var uat=s(qce);o9o=r(uat,"roformer"),uat.forEach(t),r9o=r(Fye," \u2014 "),jD=n(Fye,"A",{href:!0});var _at=s(jD);t9o=r(_at,"RoFormerForSequenceClassification"),_at.forEach(t),a9o=r(Fye," (RoFormer model)"),Fye.forEach(t),n9o=i(N),eb=n(N,"LI",{});var Tye=s(eb);Nce=n(Tye,"STRONG",{});var bat=s(Nce);s9o=r(bat,"squeezebert"),bat.forEach(t),l9o=r(Tye," \u2014 "),DD=n(Tye,"A",{href:!0});var vat=s(DD);i9o=r(vat,"SqueezeBertForSequenceClassification"),vat.forEach(t),d9o=r(Tye," (SqueezeBERT model)"),Tye.forEach(t),c9o=i(N),ob=n(N,"LI",{});var Mye=s(ob);jce=n(Mye,"STRONG",{});var Fat=s(jce);f9o=r(Fat,"tapas"),Fat.forEach(t),m9o=r(Mye," \u2014 "),GD=n(Mye,"A",{href:!0});var Tat=s(GD);g9o=r(Tat,"TapasForSequenceClassification"),Tat.forEach(t),h9o=r(Mye," (TAPAS model)"),Mye.forEach(t),p9o=i(N),rb=n(N,"LI",{});var Eye=s(rb);Dce=n(Eye,"STRONG",{});var Mat=s(Dce);u9o=r(Mat,"tapex"),Mat.forEach(t),_9o=r(Eye," \u2014 "),OD=n(Eye,"A",{href:!0});var Eat=s(OD);b9o=r(Eat,"BartForSequenceClassification"),Eat.forEach(t),v9o=r(Eye," (TAPEX model)"),Eye.forEach(t),F9o=i(N),tb=n(N,"LI",{});var Cye=s(tb);Gce=n(Cye,"STRONG",{});var Cat=s(Gce);T9o=r(Cat,"transfo-xl"),Cat.forEach(t),M9o=r(Cye," \u2014 "),VD=n(Cye,"A",{href:!0});var wat=s(VD);E9o=r(wat,"TransfoXLForSequenceClassification"),wat.forEach(t),C9o=r(Cye," (Transformer-XL model)"),Cye.forEach(t),w9o=i(N),ab=n(N,"LI",{});var wye=s(ab);Oce=n(wye,"STRONG",{});var Aat=s(Oce);A9o=r(Aat,"xlm"),Aat.forEach(t),y9o=r(wye," \u2014 "),XD=n(wye,"A",{href:!0});var yat=s(XD);L9o=r(yat,"XLMForSequenceClassification"),yat.forEach(t),x9o=r(wye," (XLM model)"),wye.forEach(t),$9o=i(N),nb=n(N,"LI",{});var Aye=s(nb);Vce=n(Aye,"STRONG",{});var Lat=s(Vce);k9o=r(Lat,"xlm-roberta"),Lat.forEach(t),S9o=r(Aye," \u2014 "),zD=n(Aye,"A",{href:!0});var xat=s(zD);R9o=r(xat,"XLMRobertaForSequenceClassification"),xat.forEach(t),B9o=r(Aye," (XLM-RoBERTa model)"),Aye.forEach(t),P9o=i(N),sb=n(N,"LI",{});var yye=s(sb);Xce=n(yye,"STRONG",{});var $at=s(Xce);I9o=r($at,"xlm-roberta-xl"),$at.forEach(t),q9o=r(yye," \u2014 "),QD=n(yye,"A",{href:!0});var kat=s(QD);N9o=r(kat,"XLMRobertaXLForSequenceClassification"),kat.forEach(t),j9o=r(yye," (XLM-RoBERTa-XL model)"),yye.forEach(t),D9o=i(N),lb=n(N,"LI",{});var Lye=s(lb);zce=n(Lye,"STRONG",{});var Sat=s(zce);G9o=r(Sat,"xlnet"),Sat.forEach(t),O9o=r(Lye," \u2014 "),WD=n(Lye,"A",{href:!0});var Rat=s(WD);V9o=r(Rat,"XLNetForSequenceClassification"),Rat.forEach(t),X9o=r(Lye," (XLNet model)"),Lye.forEach(t),z9o=i(N),ib=n(N,"LI",{});var xye=s(ib);Qce=n(xye,"STRONG",{});var Bat=s(Qce);Q9o=r(Bat,"yoso"),Bat.forEach(t),W9o=r(xye," \u2014 "),HD=n(xye,"A",{href:!0});var Pat=s(HD);H9o=r(Pat,"YosoForSequenceClassification"),Pat.forEach(t),U9o=r(xye," (YOSO model)"),xye.forEach(t),N.forEach(t),J9o=i(aa),db=n(aa,"P",{});var $ye=s(db);Y9o=r($ye,"The model is set in evaluation mode by default using "),Wce=n($ye,"CODE",{});var Iat=s(Wce);K9o=r(Iat,"model.eval()"),Iat.forEach(t),Z9o=r($ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hce=n($ye,"CODE",{});var qat=s(Hce);e$o=r(qat,"model.train()"),qat.forEach(t),$ye.forEach(t),o$o=i(aa),T(cb.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),HPe=i(f),ji=n(f,"H2",{class:!0});var Kqe=s(ji);fb=n(Kqe,"A",{id:!0,class:!0,href:!0});var Nat=s(fb);Uce=n(Nat,"SPAN",{});var jat=s(Uce);T(HA.$$.fragment,jat),jat.forEach(t),Nat.forEach(t),r$o=i(Kqe),Jce=n(Kqe,"SPAN",{});var Dat=s(Jce);t$o=r(Dat,"AutoModelForMultipleChoice"),Dat.forEach(t),Kqe.forEach(t),UPe=i(f),Bo=n(f,"DIV",{class:!0});var zs=s(Bo);T(UA.$$.fragment,zs),a$o=i(zs),Di=n(zs,"P",{});var fK=s(Di);n$o=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),UD=n(fK,"A",{href:!0});var Gat=s(UD);s$o=r(Gat,"from_pretrained()"),Gat.forEach(t),l$o=r(fK," class method or the "),JD=n(fK,"A",{href:!0});var Oat=s(JD);i$o=r(Oat,"from_config()"),Oat.forEach(t),d$o=r(fK,` class
method.`),fK.forEach(t),c$o=i(zs),JA=n(zs,"P",{});var Zqe=s(JA);f$o=r(Zqe,"This class cannot be instantiated directly using "),Yce=n(Zqe,"CODE",{});var Vat=s(Yce);m$o=r(Vat,"__init__()"),Vat.forEach(t),g$o=r(Zqe," (throws an error)."),Zqe.forEach(t),h$o=i(zs),lt=n(zs,"DIV",{class:!0});var l3=s(lt);T(YA.$$.fragment,l3),p$o=i(l3),Kce=n(l3,"P",{});var Xat=s(Kce);u$o=r(Xat,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Xat.forEach(t),_$o=i(l3),Gi=n(l3,"P",{});var mK=s(Gi);b$o=r(mK,`Note:
Loading a model from its configuration file does `),Zce=n(mK,"STRONG",{});var zat=s(Zce);v$o=r(zat,"not"),zat.forEach(t),F$o=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YD=n(mK,"A",{href:!0});var Qat=s(YD);T$o=r(Qat,"from_pretrained()"),Qat.forEach(t),M$o=r(mK," to load the model weights."),mK.forEach(t),E$o=i(l3),T(mb.$$.fragment,l3),l3.forEach(t),C$o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(KA.$$.fragment,na),w$o=i(na),efe=n(na,"P",{});var Wat=s(efe);A$o=r(Wat,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wat.forEach(t),y$o=i(na),Sa=n(na,"P",{});var i3=s(Sa);L$o=r(i3,"The model class to instantiate is selected based on the "),ofe=n(i3,"CODE",{});var Hat=s(ofe);x$o=r(Hat,"model_type"),Hat.forEach(t),$$o=r(i3,` property of the config object (either
passed as an argument or loaded from `),rfe=n(i3,"CODE",{});var Uat=s(rfe);k$o=r(Uat,"pretrained_model_name_or_path"),Uat.forEach(t),S$o=r(i3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tfe=n(i3,"CODE",{});var Jat=s(tfe);R$o=r(Jat,"pretrained_model_name_or_path"),Jat.forEach(t),B$o=r(i3,":"),i3.forEach(t),P$o=i(na),Y=n(na,"UL",{});var K=s(Y);gb=n(K,"LI",{});var kye=s(gb);afe=n(kye,"STRONG",{});var Yat=s(afe);I$o=r(Yat,"albert"),Yat.forEach(t),q$o=r(kye," \u2014 "),KD=n(kye,"A",{href:!0});var Kat=s(KD);N$o=r(Kat,"AlbertForMultipleChoice"),Kat.forEach(t),j$o=r(kye," (ALBERT model)"),kye.forEach(t),D$o=i(K),hb=n(K,"LI",{});var Sye=s(hb);nfe=n(Sye,"STRONG",{});var Zat=s(nfe);G$o=r(Zat,"bert"),Zat.forEach(t),O$o=r(Sye," \u2014 "),ZD=n(Sye,"A",{href:!0});var ent=s(ZD);V$o=r(ent,"BertForMultipleChoice"),ent.forEach(t),X$o=r(Sye," (BERT model)"),Sye.forEach(t),z$o=i(K),pb=n(K,"LI",{});var Rye=s(pb);sfe=n(Rye,"STRONG",{});var ont=s(sfe);Q$o=r(ont,"big_bird"),ont.forEach(t),W$o=r(Rye," \u2014 "),eG=n(Rye,"A",{href:!0});var rnt=s(eG);H$o=r(rnt,"BigBirdForMultipleChoice"),rnt.forEach(t),U$o=r(Rye," (BigBird model)"),Rye.forEach(t),J$o=i(K),ub=n(K,"LI",{});var Bye=s(ub);lfe=n(Bye,"STRONG",{});var tnt=s(lfe);Y$o=r(tnt,"camembert"),tnt.forEach(t),K$o=r(Bye," \u2014 "),oG=n(Bye,"A",{href:!0});var ant=s(oG);Z$o=r(ant,"CamembertForMultipleChoice"),ant.forEach(t),eko=r(Bye," (CamemBERT model)"),Bye.forEach(t),oko=i(K),_b=n(K,"LI",{});var Pye=s(_b);ife=n(Pye,"STRONG",{});var nnt=s(ife);rko=r(nnt,"canine"),nnt.forEach(t),tko=r(Pye," \u2014 "),rG=n(Pye,"A",{href:!0});var snt=s(rG);ako=r(snt,"CanineForMultipleChoice"),snt.forEach(t),nko=r(Pye," (Canine model)"),Pye.forEach(t),sko=i(K),bb=n(K,"LI",{});var Iye=s(bb);dfe=n(Iye,"STRONG",{});var lnt=s(dfe);lko=r(lnt,"convbert"),lnt.forEach(t),iko=r(Iye," \u2014 "),tG=n(Iye,"A",{href:!0});var int=s(tG);dko=r(int,"ConvBertForMultipleChoice"),int.forEach(t),cko=r(Iye," (ConvBERT model)"),Iye.forEach(t),fko=i(K),vb=n(K,"LI",{});var qye=s(vb);cfe=n(qye,"STRONG",{});var dnt=s(cfe);mko=r(dnt,"data2vec-text"),dnt.forEach(t),gko=r(qye," \u2014 "),aG=n(qye,"A",{href:!0});var cnt=s(aG);hko=r(cnt,"Data2VecTextForMultipleChoice"),cnt.forEach(t),pko=r(qye," (Data2VecText model)"),qye.forEach(t),uko=i(K),Fb=n(K,"LI",{});var Nye=s(Fb);ffe=n(Nye,"STRONG",{});var fnt=s(ffe);_ko=r(fnt,"deberta-v2"),fnt.forEach(t),bko=r(Nye," \u2014 "),nG=n(Nye,"A",{href:!0});var mnt=s(nG);vko=r(mnt,"DebertaV2ForMultipleChoice"),mnt.forEach(t),Fko=r(Nye," (DeBERTa-v2 model)"),Nye.forEach(t),Tko=i(K),Tb=n(K,"LI",{});var jye=s(Tb);mfe=n(jye,"STRONG",{});var gnt=s(mfe);Mko=r(gnt,"distilbert"),gnt.forEach(t),Eko=r(jye," \u2014 "),sG=n(jye,"A",{href:!0});var hnt=s(sG);Cko=r(hnt,"DistilBertForMultipleChoice"),hnt.forEach(t),wko=r(jye," (DistilBERT model)"),jye.forEach(t),Ako=i(K),Mb=n(K,"LI",{});var Dye=s(Mb);gfe=n(Dye,"STRONG",{});var pnt=s(gfe);yko=r(pnt,"electra"),pnt.forEach(t),Lko=r(Dye," \u2014 "),lG=n(Dye,"A",{href:!0});var unt=s(lG);xko=r(unt,"ElectraForMultipleChoice"),unt.forEach(t),$ko=r(Dye," (ELECTRA model)"),Dye.forEach(t),kko=i(K),Eb=n(K,"LI",{});var Gye=s(Eb);hfe=n(Gye,"STRONG",{});var _nt=s(hfe);Sko=r(_nt,"flaubert"),_nt.forEach(t),Rko=r(Gye," \u2014 "),iG=n(Gye,"A",{href:!0});var bnt=s(iG);Bko=r(bnt,"FlaubertForMultipleChoice"),bnt.forEach(t),Pko=r(Gye," (FlauBERT model)"),Gye.forEach(t),Iko=i(K),Cb=n(K,"LI",{});var Oye=s(Cb);pfe=n(Oye,"STRONG",{});var vnt=s(pfe);qko=r(vnt,"fnet"),vnt.forEach(t),Nko=r(Oye," \u2014 "),dG=n(Oye,"A",{href:!0});var Fnt=s(dG);jko=r(Fnt,"FNetForMultipleChoice"),Fnt.forEach(t),Dko=r(Oye," (FNet model)"),Oye.forEach(t),Gko=i(K),wb=n(K,"LI",{});var Vye=s(wb);ufe=n(Vye,"STRONG",{});var Tnt=s(ufe);Oko=r(Tnt,"funnel"),Tnt.forEach(t),Vko=r(Vye," \u2014 "),cG=n(Vye,"A",{href:!0});var Mnt=s(cG);Xko=r(Mnt,"FunnelForMultipleChoice"),Mnt.forEach(t),zko=r(Vye," (Funnel Transformer model)"),Vye.forEach(t),Qko=i(K),Ab=n(K,"LI",{});var Xye=s(Ab);_fe=n(Xye,"STRONG",{});var Ent=s(_fe);Wko=r(Ent,"ibert"),Ent.forEach(t),Hko=r(Xye," \u2014 "),fG=n(Xye,"A",{href:!0});var Cnt=s(fG);Uko=r(Cnt,"IBertForMultipleChoice"),Cnt.forEach(t),Jko=r(Xye," (I-BERT model)"),Xye.forEach(t),Yko=i(K),yb=n(K,"LI",{});var zye=s(yb);bfe=n(zye,"STRONG",{});var wnt=s(bfe);Kko=r(wnt,"longformer"),wnt.forEach(t),Zko=r(zye," \u2014 "),mG=n(zye,"A",{href:!0});var Ant=s(mG);eSo=r(Ant,"LongformerForMultipleChoice"),Ant.forEach(t),oSo=r(zye," (Longformer model)"),zye.forEach(t),rSo=i(K),Lb=n(K,"LI",{});var Qye=s(Lb);vfe=n(Qye,"STRONG",{});var ynt=s(vfe);tSo=r(ynt,"megatron-bert"),ynt.forEach(t),aSo=r(Qye," \u2014 "),gG=n(Qye,"A",{href:!0});var Lnt=s(gG);nSo=r(Lnt,"MegatronBertForMultipleChoice"),Lnt.forEach(t),sSo=r(Qye," (MegatronBert model)"),Qye.forEach(t),lSo=i(K),xb=n(K,"LI",{});var Wye=s(xb);Ffe=n(Wye,"STRONG",{});var xnt=s(Ffe);iSo=r(xnt,"mobilebert"),xnt.forEach(t),dSo=r(Wye," \u2014 "),hG=n(Wye,"A",{href:!0});var $nt=s(hG);cSo=r($nt,"MobileBertForMultipleChoice"),$nt.forEach(t),fSo=r(Wye," (MobileBERT model)"),Wye.forEach(t),mSo=i(K),$b=n(K,"LI",{});var Hye=s($b);Tfe=n(Hye,"STRONG",{});var knt=s(Tfe);gSo=r(knt,"mpnet"),knt.forEach(t),hSo=r(Hye," \u2014 "),pG=n(Hye,"A",{href:!0});var Snt=s(pG);pSo=r(Snt,"MPNetForMultipleChoice"),Snt.forEach(t),uSo=r(Hye," (MPNet model)"),Hye.forEach(t),_So=i(K),kb=n(K,"LI",{});var Uye=s(kb);Mfe=n(Uye,"STRONG",{});var Rnt=s(Mfe);bSo=r(Rnt,"nystromformer"),Rnt.forEach(t),vSo=r(Uye," \u2014 "),uG=n(Uye,"A",{href:!0});var Bnt=s(uG);FSo=r(Bnt,"NystromformerForMultipleChoice"),Bnt.forEach(t),TSo=r(Uye," (Nystromformer model)"),Uye.forEach(t),MSo=i(K),Sb=n(K,"LI",{});var Jye=s(Sb);Efe=n(Jye,"STRONG",{});var Pnt=s(Efe);ESo=r(Pnt,"qdqbert"),Pnt.forEach(t),CSo=r(Jye," \u2014 "),_G=n(Jye,"A",{href:!0});var Int=s(_G);wSo=r(Int,"QDQBertForMultipleChoice"),Int.forEach(t),ASo=r(Jye," (QDQBert model)"),Jye.forEach(t),ySo=i(K),Rb=n(K,"LI",{});var Yye=s(Rb);Cfe=n(Yye,"STRONG",{});var qnt=s(Cfe);LSo=r(qnt,"rembert"),qnt.forEach(t),xSo=r(Yye," \u2014 "),bG=n(Yye,"A",{href:!0});var Nnt=s(bG);$So=r(Nnt,"RemBertForMultipleChoice"),Nnt.forEach(t),kSo=r(Yye," (RemBERT model)"),Yye.forEach(t),SSo=i(K),Bb=n(K,"LI",{});var Kye=s(Bb);wfe=n(Kye,"STRONG",{});var jnt=s(wfe);RSo=r(jnt,"roberta"),jnt.forEach(t),BSo=r(Kye," \u2014 "),vG=n(Kye,"A",{href:!0});var Dnt=s(vG);PSo=r(Dnt,"RobertaForMultipleChoice"),Dnt.forEach(t),ISo=r(Kye," (RoBERTa model)"),Kye.forEach(t),qSo=i(K),Pb=n(K,"LI",{});var Zye=s(Pb);Afe=n(Zye,"STRONG",{});var Gnt=s(Afe);NSo=r(Gnt,"roformer"),Gnt.forEach(t),jSo=r(Zye," \u2014 "),FG=n(Zye,"A",{href:!0});var Ont=s(FG);DSo=r(Ont,"RoFormerForMultipleChoice"),Ont.forEach(t),GSo=r(Zye," (RoFormer model)"),Zye.forEach(t),OSo=i(K),Ib=n(K,"LI",{});var eLe=s(Ib);yfe=n(eLe,"STRONG",{});var Vnt=s(yfe);VSo=r(Vnt,"squeezebert"),Vnt.forEach(t),XSo=r(eLe," \u2014 "),TG=n(eLe,"A",{href:!0});var Xnt=s(TG);zSo=r(Xnt,"SqueezeBertForMultipleChoice"),Xnt.forEach(t),QSo=r(eLe," (SqueezeBERT model)"),eLe.forEach(t),WSo=i(K),qb=n(K,"LI",{});var oLe=s(qb);Lfe=n(oLe,"STRONG",{});var znt=s(Lfe);HSo=r(znt,"xlm"),znt.forEach(t),USo=r(oLe," \u2014 "),MG=n(oLe,"A",{href:!0});var Qnt=s(MG);JSo=r(Qnt,"XLMForMultipleChoice"),Qnt.forEach(t),YSo=r(oLe," (XLM model)"),oLe.forEach(t),KSo=i(K),Nb=n(K,"LI",{});var rLe=s(Nb);xfe=n(rLe,"STRONG",{});var Wnt=s(xfe);ZSo=r(Wnt,"xlm-roberta"),Wnt.forEach(t),eRo=r(rLe," \u2014 "),EG=n(rLe,"A",{href:!0});var Hnt=s(EG);oRo=r(Hnt,"XLMRobertaForMultipleChoice"),Hnt.forEach(t),rRo=r(rLe," (XLM-RoBERTa model)"),rLe.forEach(t),tRo=i(K),jb=n(K,"LI",{});var tLe=s(jb);$fe=n(tLe,"STRONG",{});var Unt=s($fe);aRo=r(Unt,"xlm-roberta-xl"),Unt.forEach(t),nRo=r(tLe," \u2014 "),CG=n(tLe,"A",{href:!0});var Jnt=s(CG);sRo=r(Jnt,"XLMRobertaXLForMultipleChoice"),Jnt.forEach(t),lRo=r(tLe," (XLM-RoBERTa-XL model)"),tLe.forEach(t),iRo=i(K),Db=n(K,"LI",{});var aLe=s(Db);kfe=n(aLe,"STRONG",{});var Ynt=s(kfe);dRo=r(Ynt,"xlnet"),Ynt.forEach(t),cRo=r(aLe," \u2014 "),wG=n(aLe,"A",{href:!0});var Knt=s(wG);fRo=r(Knt,"XLNetForMultipleChoice"),Knt.forEach(t),mRo=r(aLe," (XLNet model)"),aLe.forEach(t),gRo=i(K),Gb=n(K,"LI",{});var nLe=s(Gb);Sfe=n(nLe,"STRONG",{});var Znt=s(Sfe);hRo=r(Znt,"yoso"),Znt.forEach(t),pRo=r(nLe," \u2014 "),AG=n(nLe,"A",{href:!0});var est=s(AG);uRo=r(est,"YosoForMultipleChoice"),est.forEach(t),_Ro=r(nLe," (YOSO model)"),nLe.forEach(t),K.forEach(t),bRo=i(na),Ob=n(na,"P",{});var sLe=s(Ob);vRo=r(sLe,"The model is set in evaluation mode by default using "),Rfe=n(sLe,"CODE",{});var ost=s(Rfe);FRo=r(ost,"model.eval()"),ost.forEach(t),TRo=r(sLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bfe=n(sLe,"CODE",{});var rst=s(Bfe);MRo=r(rst,"model.train()"),rst.forEach(t),sLe.forEach(t),ERo=i(na),T(Vb.$$.fragment,na),na.forEach(t),zs.forEach(t),JPe=i(f),Oi=n(f,"H2",{class:!0});var eNe=s(Oi);Xb=n(eNe,"A",{id:!0,class:!0,href:!0});var tst=s(Xb);Pfe=n(tst,"SPAN",{});var ast=s(Pfe);T(ZA.$$.fragment,ast),ast.forEach(t),tst.forEach(t),CRo=i(eNe),Ife=n(eNe,"SPAN",{});var nst=s(Ife);wRo=r(nst,"AutoModelForNextSentencePrediction"),nst.forEach(t),eNe.forEach(t),YPe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(e6.$$.fragment,Qs),ARo=i(Qs),Vi=n(Qs,"P",{});var gK=s(Vi);yRo=r(gK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),yG=n(gK,"A",{href:!0});var sst=s(yG);LRo=r(sst,"from_pretrained()"),sst.forEach(t),xRo=r(gK," class method or the "),LG=n(gK,"A",{href:!0});var lst=s(LG);$Ro=r(lst,"from_config()"),lst.forEach(t),kRo=r(gK,` class
method.`),gK.forEach(t),SRo=i(Qs),o6=n(Qs,"P",{});var oNe=s(o6);RRo=r(oNe,"This class cannot be instantiated directly using "),qfe=n(oNe,"CODE",{});var ist=s(qfe);BRo=r(ist,"__init__()"),ist.forEach(t),PRo=r(oNe," (throws an error)."),oNe.forEach(t),IRo=i(Qs),it=n(Qs,"DIV",{class:!0});var d3=s(it);T(r6.$$.fragment,d3),qRo=i(d3),Nfe=n(d3,"P",{});var dst=s(Nfe);NRo=r(dst,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dst.forEach(t),jRo=i(d3),Xi=n(d3,"P",{});var hK=s(Xi);DRo=r(hK,`Note:
Loading a model from its configuration file does `),jfe=n(hK,"STRONG",{});var cst=s(jfe);GRo=r(cst,"not"),cst.forEach(t),ORo=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=n(hK,"A",{href:!0});var fst=s(xG);VRo=r(fst,"from_pretrained()"),fst.forEach(t),XRo=r(hK," to load the model weights."),hK.forEach(t),zRo=i(d3),T(zb.$$.fragment,d3),d3.forEach(t),QRo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(t6.$$.fragment,sa),WRo=i(sa),Dfe=n(sa,"P",{});var mst=s(Dfe);HRo=r(mst,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mst.forEach(t),URo=i(sa),Ra=n(sa,"P",{});var c3=s(Ra);JRo=r(c3,"The model class to instantiate is selected based on the "),Gfe=n(c3,"CODE",{});var gst=s(Gfe);YRo=r(gst,"model_type"),gst.forEach(t),KRo=r(c3,` property of the config object (either
passed as an argument or loaded from `),Ofe=n(c3,"CODE",{});var hst=s(Ofe);ZRo=r(hst,"pretrained_model_name_or_path"),hst.forEach(t),eBo=r(c3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vfe=n(c3,"CODE",{});var pst=s(Vfe);oBo=r(pst,"pretrained_model_name_or_path"),pst.forEach(t),rBo=r(c3,":"),c3.forEach(t),tBo=i(sa),Yr=n(sa,"UL",{});var Ws=s(Yr);Qb=n(Ws,"LI",{});var lLe=s(Qb);Xfe=n(lLe,"STRONG",{});var ust=s(Xfe);aBo=r(ust,"bert"),ust.forEach(t),nBo=r(lLe," \u2014 "),$G=n(lLe,"A",{href:!0});var _st=s($G);sBo=r(_st,"BertForNextSentencePrediction"),_st.forEach(t),lBo=r(lLe," (BERT model)"),lLe.forEach(t),iBo=i(Ws),Wb=n(Ws,"LI",{});var iLe=s(Wb);zfe=n(iLe,"STRONG",{});var bst=s(zfe);dBo=r(bst,"fnet"),bst.forEach(t),cBo=r(iLe," \u2014 "),kG=n(iLe,"A",{href:!0});var vst=s(kG);fBo=r(vst,"FNetForNextSentencePrediction"),vst.forEach(t),mBo=r(iLe," (FNet model)"),iLe.forEach(t),gBo=i(Ws),Hb=n(Ws,"LI",{});var dLe=s(Hb);Qfe=n(dLe,"STRONG",{});var Fst=s(Qfe);hBo=r(Fst,"megatron-bert"),Fst.forEach(t),pBo=r(dLe," \u2014 "),SG=n(dLe,"A",{href:!0});var Tst=s(SG);uBo=r(Tst,"MegatronBertForNextSentencePrediction"),Tst.forEach(t),_Bo=r(dLe," (MegatronBert model)"),dLe.forEach(t),bBo=i(Ws),Ub=n(Ws,"LI",{});var cLe=s(Ub);Wfe=n(cLe,"STRONG",{});var Mst=s(Wfe);vBo=r(Mst,"mobilebert"),Mst.forEach(t),FBo=r(cLe," \u2014 "),RG=n(cLe,"A",{href:!0});var Est=s(RG);TBo=r(Est,"MobileBertForNextSentencePrediction"),Est.forEach(t),MBo=r(cLe," (MobileBERT model)"),cLe.forEach(t),EBo=i(Ws),Jb=n(Ws,"LI",{});var fLe=s(Jb);Hfe=n(fLe,"STRONG",{});var Cst=s(Hfe);CBo=r(Cst,"qdqbert"),Cst.forEach(t),wBo=r(fLe," \u2014 "),BG=n(fLe,"A",{href:!0});var wst=s(BG);ABo=r(wst,"QDQBertForNextSentencePrediction"),wst.forEach(t),yBo=r(fLe," (QDQBert model)"),fLe.forEach(t),Ws.forEach(t),LBo=i(sa),Yb=n(sa,"P",{});var mLe=s(Yb);xBo=r(mLe,"The model is set in evaluation mode by default using "),Ufe=n(mLe,"CODE",{});var Ast=s(Ufe);$Bo=r(Ast,"model.eval()"),Ast.forEach(t),kBo=r(mLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jfe=n(mLe,"CODE",{});var yst=s(Jfe);SBo=r(yst,"model.train()"),yst.forEach(t),mLe.forEach(t),RBo=i(sa),T(Kb.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),KPe=i(f),zi=n(f,"H2",{class:!0});var rNe=s(zi);Zb=n(rNe,"A",{id:!0,class:!0,href:!0});var Lst=s(Zb);Yfe=n(Lst,"SPAN",{});var xst=s(Yfe);T(a6.$$.fragment,xst),xst.forEach(t),Lst.forEach(t),BBo=i(rNe),Kfe=n(rNe,"SPAN",{});var $st=s(Kfe);PBo=r($st,"AutoModelForTokenClassification"),$st.forEach(t),rNe.forEach(t),ZPe=i(f),Io=n(f,"DIV",{class:!0});var Hs=s(Io);T(n6.$$.fragment,Hs),IBo=i(Hs),Qi=n(Hs,"P",{});var pK=s(Qi);qBo=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),PG=n(pK,"A",{href:!0});var kst=s(PG);NBo=r(kst,"from_pretrained()"),kst.forEach(t),jBo=r(pK," class method or the "),IG=n(pK,"A",{href:!0});var Sst=s(IG);DBo=r(Sst,"from_config()"),Sst.forEach(t),GBo=r(pK,` class
method.`),pK.forEach(t),OBo=i(Hs),s6=n(Hs,"P",{});var tNe=s(s6);VBo=r(tNe,"This class cannot be instantiated directly using "),Zfe=n(tNe,"CODE",{});var Rst=s(Zfe);XBo=r(Rst,"__init__()"),Rst.forEach(t),zBo=r(tNe," (throws an error)."),tNe.forEach(t),QBo=i(Hs),dt=n(Hs,"DIV",{class:!0});var f3=s(dt);T(l6.$$.fragment,f3),WBo=i(f3),eme=n(f3,"P",{});var Bst=s(eme);HBo=r(Bst,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Bst.forEach(t),UBo=i(f3),Wi=n(f3,"P",{});var uK=s(Wi);JBo=r(uK,`Note:
Loading a model from its configuration file does `),ome=n(uK,"STRONG",{});var Pst=s(ome);YBo=r(Pst,"not"),Pst.forEach(t),KBo=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=n(uK,"A",{href:!0});var Ist=s(qG);ZBo=r(Ist,"from_pretrained()"),Ist.forEach(t),ePo=r(uK," to load the model weights."),uK.forEach(t),oPo=i(f3),T(e2.$$.fragment,f3),f3.forEach(t),rPo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(i6.$$.fragment,la),tPo=i(la),rme=n(la,"P",{});var qst=s(rme);aPo=r(qst,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qst.forEach(t),nPo=i(la),Ba=n(la,"P",{});var m3=s(Ba);sPo=r(m3,"The model class to instantiate is selected based on the "),tme=n(m3,"CODE",{});var Nst=s(tme);lPo=r(Nst,"model_type"),Nst.forEach(t),iPo=r(m3,` property of the config object (either
passed as an argument or loaded from `),ame=n(m3,"CODE",{});var jst=s(ame);dPo=r(jst,"pretrained_model_name_or_path"),jst.forEach(t),cPo=r(m3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nme=n(m3,"CODE",{});var Dst=s(nme);fPo=r(Dst,"pretrained_model_name_or_path"),Dst.forEach(t),mPo=r(m3,":"),m3.forEach(t),gPo=i(la),U=n(la,"UL",{});var J=s(U);o2=n(J,"LI",{});var gLe=s(o2);sme=n(gLe,"STRONG",{});var Gst=s(sme);hPo=r(Gst,"albert"),Gst.forEach(t),pPo=r(gLe," \u2014 "),NG=n(gLe,"A",{href:!0});var Ost=s(NG);uPo=r(Ost,"AlbertForTokenClassification"),Ost.forEach(t),_Po=r(gLe," (ALBERT model)"),gLe.forEach(t),bPo=i(J),r2=n(J,"LI",{});var hLe=s(r2);lme=n(hLe,"STRONG",{});var Vst=s(lme);vPo=r(Vst,"bert"),Vst.forEach(t),FPo=r(hLe," \u2014 "),jG=n(hLe,"A",{href:!0});var Xst=s(jG);TPo=r(Xst,"BertForTokenClassification"),Xst.forEach(t),MPo=r(hLe," (BERT model)"),hLe.forEach(t),EPo=i(J),t2=n(J,"LI",{});var pLe=s(t2);ime=n(pLe,"STRONG",{});var zst=s(ime);CPo=r(zst,"big_bird"),zst.forEach(t),wPo=r(pLe," \u2014 "),DG=n(pLe,"A",{href:!0});var Qst=s(DG);APo=r(Qst,"BigBirdForTokenClassification"),Qst.forEach(t),yPo=r(pLe," (BigBird model)"),pLe.forEach(t),LPo=i(J),a2=n(J,"LI",{});var uLe=s(a2);dme=n(uLe,"STRONG",{});var Wst=s(dme);xPo=r(Wst,"camembert"),Wst.forEach(t),$Po=r(uLe," \u2014 "),GG=n(uLe,"A",{href:!0});var Hst=s(GG);kPo=r(Hst,"CamembertForTokenClassification"),Hst.forEach(t),SPo=r(uLe," (CamemBERT model)"),uLe.forEach(t),RPo=i(J),n2=n(J,"LI",{});var _Le=s(n2);cme=n(_Le,"STRONG",{});var Ust=s(cme);BPo=r(Ust,"canine"),Ust.forEach(t),PPo=r(_Le," \u2014 "),OG=n(_Le,"A",{href:!0});var Jst=s(OG);IPo=r(Jst,"CanineForTokenClassification"),Jst.forEach(t),qPo=r(_Le," (Canine model)"),_Le.forEach(t),NPo=i(J),s2=n(J,"LI",{});var bLe=s(s2);fme=n(bLe,"STRONG",{});var Yst=s(fme);jPo=r(Yst,"convbert"),Yst.forEach(t),DPo=r(bLe," \u2014 "),VG=n(bLe,"A",{href:!0});var Kst=s(VG);GPo=r(Kst,"ConvBertForTokenClassification"),Kst.forEach(t),OPo=r(bLe," (ConvBERT model)"),bLe.forEach(t),VPo=i(J),l2=n(J,"LI",{});var vLe=s(l2);mme=n(vLe,"STRONG",{});var Zst=s(mme);XPo=r(Zst,"data2vec-text"),Zst.forEach(t),zPo=r(vLe," \u2014 "),XG=n(vLe,"A",{href:!0});var elt=s(XG);QPo=r(elt,"Data2VecTextForTokenClassification"),elt.forEach(t),WPo=r(vLe," (Data2VecText model)"),vLe.forEach(t),HPo=i(J),i2=n(J,"LI",{});var FLe=s(i2);gme=n(FLe,"STRONG",{});var olt=s(gme);UPo=r(olt,"deberta"),olt.forEach(t),JPo=r(FLe," \u2014 "),zG=n(FLe,"A",{href:!0});var rlt=s(zG);YPo=r(rlt,"DebertaForTokenClassification"),rlt.forEach(t),KPo=r(FLe," (DeBERTa model)"),FLe.forEach(t),ZPo=i(J),d2=n(J,"LI",{});var TLe=s(d2);hme=n(TLe,"STRONG",{});var tlt=s(hme);eIo=r(tlt,"deberta-v2"),tlt.forEach(t),oIo=r(TLe," \u2014 "),QG=n(TLe,"A",{href:!0});var alt=s(QG);rIo=r(alt,"DebertaV2ForTokenClassification"),alt.forEach(t),tIo=r(TLe," (DeBERTa-v2 model)"),TLe.forEach(t),aIo=i(J),c2=n(J,"LI",{});var MLe=s(c2);pme=n(MLe,"STRONG",{});var nlt=s(pme);nIo=r(nlt,"distilbert"),nlt.forEach(t),sIo=r(MLe," \u2014 "),WG=n(MLe,"A",{href:!0});var slt=s(WG);lIo=r(slt,"DistilBertForTokenClassification"),slt.forEach(t),iIo=r(MLe," (DistilBERT model)"),MLe.forEach(t),dIo=i(J),f2=n(J,"LI",{});var ELe=s(f2);ume=n(ELe,"STRONG",{});var llt=s(ume);cIo=r(llt,"electra"),llt.forEach(t),fIo=r(ELe," \u2014 "),HG=n(ELe,"A",{href:!0});var ilt=s(HG);mIo=r(ilt,"ElectraForTokenClassification"),ilt.forEach(t),gIo=r(ELe," (ELECTRA model)"),ELe.forEach(t),hIo=i(J),m2=n(J,"LI",{});var CLe=s(m2);_me=n(CLe,"STRONG",{});var dlt=s(_me);pIo=r(dlt,"flaubert"),dlt.forEach(t),uIo=r(CLe," \u2014 "),UG=n(CLe,"A",{href:!0});var clt=s(UG);_Io=r(clt,"FlaubertForTokenClassification"),clt.forEach(t),bIo=r(CLe," (FlauBERT model)"),CLe.forEach(t),vIo=i(J),g2=n(J,"LI",{});var wLe=s(g2);bme=n(wLe,"STRONG",{});var flt=s(bme);FIo=r(flt,"fnet"),flt.forEach(t),TIo=r(wLe," \u2014 "),JG=n(wLe,"A",{href:!0});var mlt=s(JG);MIo=r(mlt,"FNetForTokenClassification"),mlt.forEach(t),EIo=r(wLe," (FNet model)"),wLe.forEach(t),CIo=i(J),h2=n(J,"LI",{});var ALe=s(h2);vme=n(ALe,"STRONG",{});var glt=s(vme);wIo=r(glt,"funnel"),glt.forEach(t),AIo=r(ALe," \u2014 "),YG=n(ALe,"A",{href:!0});var hlt=s(YG);yIo=r(hlt,"FunnelForTokenClassification"),hlt.forEach(t),LIo=r(ALe," (Funnel Transformer model)"),ALe.forEach(t),xIo=i(J),p2=n(J,"LI",{});var yLe=s(p2);Fme=n(yLe,"STRONG",{});var plt=s(Fme);$Io=r(plt,"gpt2"),plt.forEach(t),kIo=r(yLe," \u2014 "),KG=n(yLe,"A",{href:!0});var ult=s(KG);SIo=r(ult,"GPT2ForTokenClassification"),ult.forEach(t),RIo=r(yLe," (OpenAI GPT-2 model)"),yLe.forEach(t),BIo=i(J),u2=n(J,"LI",{});var LLe=s(u2);Tme=n(LLe,"STRONG",{});var _lt=s(Tme);PIo=r(_lt,"ibert"),_lt.forEach(t),IIo=r(LLe," \u2014 "),ZG=n(LLe,"A",{href:!0});var blt=s(ZG);qIo=r(blt,"IBertForTokenClassification"),blt.forEach(t),NIo=r(LLe," (I-BERT model)"),LLe.forEach(t),jIo=i(J),_2=n(J,"LI",{});var xLe=s(_2);Mme=n(xLe,"STRONG",{});var vlt=s(Mme);DIo=r(vlt,"layoutlm"),vlt.forEach(t),GIo=r(xLe," \u2014 "),eO=n(xLe,"A",{href:!0});var Flt=s(eO);OIo=r(Flt,"LayoutLMForTokenClassification"),Flt.forEach(t),VIo=r(xLe," (LayoutLM model)"),xLe.forEach(t),XIo=i(J),b2=n(J,"LI",{});var $Le=s(b2);Eme=n($Le,"STRONG",{});var Tlt=s(Eme);zIo=r(Tlt,"layoutlmv2"),Tlt.forEach(t),QIo=r($Le," \u2014 "),oO=n($Le,"A",{href:!0});var Mlt=s(oO);WIo=r(Mlt,"LayoutLMv2ForTokenClassification"),Mlt.forEach(t),HIo=r($Le," (LayoutLMv2 model)"),$Le.forEach(t),UIo=i(J),v2=n(J,"LI",{});var kLe=s(v2);Cme=n(kLe,"STRONG",{});var Elt=s(Cme);JIo=r(Elt,"longformer"),Elt.forEach(t),YIo=r(kLe," \u2014 "),rO=n(kLe,"A",{href:!0});var Clt=s(rO);KIo=r(Clt,"LongformerForTokenClassification"),Clt.forEach(t),ZIo=r(kLe," (Longformer model)"),kLe.forEach(t),eqo=i(J),F2=n(J,"LI",{});var SLe=s(F2);wme=n(SLe,"STRONG",{});var wlt=s(wme);oqo=r(wlt,"megatron-bert"),wlt.forEach(t),rqo=r(SLe," \u2014 "),tO=n(SLe,"A",{href:!0});var Alt=s(tO);tqo=r(Alt,"MegatronBertForTokenClassification"),Alt.forEach(t),aqo=r(SLe," (MegatronBert model)"),SLe.forEach(t),nqo=i(J),T2=n(J,"LI",{});var RLe=s(T2);Ame=n(RLe,"STRONG",{});var ylt=s(Ame);sqo=r(ylt,"mobilebert"),ylt.forEach(t),lqo=r(RLe," \u2014 "),aO=n(RLe,"A",{href:!0});var Llt=s(aO);iqo=r(Llt,"MobileBertForTokenClassification"),Llt.forEach(t),dqo=r(RLe," (MobileBERT model)"),RLe.forEach(t),cqo=i(J),M2=n(J,"LI",{});var BLe=s(M2);yme=n(BLe,"STRONG",{});var xlt=s(yme);fqo=r(xlt,"mpnet"),xlt.forEach(t),mqo=r(BLe," \u2014 "),nO=n(BLe,"A",{href:!0});var $lt=s(nO);gqo=r($lt,"MPNetForTokenClassification"),$lt.forEach(t),hqo=r(BLe," (MPNet model)"),BLe.forEach(t),pqo=i(J),E2=n(J,"LI",{});var PLe=s(E2);Lme=n(PLe,"STRONG",{});var klt=s(Lme);uqo=r(klt,"nystromformer"),klt.forEach(t),_qo=r(PLe," \u2014 "),sO=n(PLe,"A",{href:!0});var Slt=s(sO);bqo=r(Slt,"NystromformerForTokenClassification"),Slt.forEach(t),vqo=r(PLe," (Nystromformer model)"),PLe.forEach(t),Fqo=i(J),C2=n(J,"LI",{});var ILe=s(C2);xme=n(ILe,"STRONG",{});var Rlt=s(xme);Tqo=r(Rlt,"qdqbert"),Rlt.forEach(t),Mqo=r(ILe," \u2014 "),lO=n(ILe,"A",{href:!0});var Blt=s(lO);Eqo=r(Blt,"QDQBertForTokenClassification"),Blt.forEach(t),Cqo=r(ILe," (QDQBert model)"),ILe.forEach(t),wqo=i(J),w2=n(J,"LI",{});var qLe=s(w2);$me=n(qLe,"STRONG",{});var Plt=s($me);Aqo=r(Plt,"rembert"),Plt.forEach(t),yqo=r(qLe," \u2014 "),iO=n(qLe,"A",{href:!0});var Ilt=s(iO);Lqo=r(Ilt,"RemBertForTokenClassification"),Ilt.forEach(t),xqo=r(qLe," (RemBERT model)"),qLe.forEach(t),$qo=i(J),A2=n(J,"LI",{});var NLe=s(A2);kme=n(NLe,"STRONG",{});var qlt=s(kme);kqo=r(qlt,"roberta"),qlt.forEach(t),Sqo=r(NLe," \u2014 "),dO=n(NLe,"A",{href:!0});var Nlt=s(dO);Rqo=r(Nlt,"RobertaForTokenClassification"),Nlt.forEach(t),Bqo=r(NLe," (RoBERTa model)"),NLe.forEach(t),Pqo=i(J),y2=n(J,"LI",{});var jLe=s(y2);Sme=n(jLe,"STRONG",{});var jlt=s(Sme);Iqo=r(jlt,"roformer"),jlt.forEach(t),qqo=r(jLe," \u2014 "),cO=n(jLe,"A",{href:!0});var Dlt=s(cO);Nqo=r(Dlt,"RoFormerForTokenClassification"),Dlt.forEach(t),jqo=r(jLe," (RoFormer model)"),jLe.forEach(t),Dqo=i(J),L2=n(J,"LI",{});var DLe=s(L2);Rme=n(DLe,"STRONG",{});var Glt=s(Rme);Gqo=r(Glt,"squeezebert"),Glt.forEach(t),Oqo=r(DLe," \u2014 "),fO=n(DLe,"A",{href:!0});var Olt=s(fO);Vqo=r(Olt,"SqueezeBertForTokenClassification"),Olt.forEach(t),Xqo=r(DLe," (SqueezeBERT model)"),DLe.forEach(t),zqo=i(J),x2=n(J,"LI",{});var GLe=s(x2);Bme=n(GLe,"STRONG",{});var Vlt=s(Bme);Qqo=r(Vlt,"xlm"),Vlt.forEach(t),Wqo=r(GLe," \u2014 "),mO=n(GLe,"A",{href:!0});var Xlt=s(mO);Hqo=r(Xlt,"XLMForTokenClassification"),Xlt.forEach(t),Uqo=r(GLe," (XLM model)"),GLe.forEach(t),Jqo=i(J),$2=n(J,"LI",{});var OLe=s($2);Pme=n(OLe,"STRONG",{});var zlt=s(Pme);Yqo=r(zlt,"xlm-roberta"),zlt.forEach(t),Kqo=r(OLe," \u2014 "),gO=n(OLe,"A",{href:!0});var Qlt=s(gO);Zqo=r(Qlt,"XLMRobertaForTokenClassification"),Qlt.forEach(t),eNo=r(OLe," (XLM-RoBERTa model)"),OLe.forEach(t),oNo=i(J),k2=n(J,"LI",{});var VLe=s(k2);Ime=n(VLe,"STRONG",{});var Wlt=s(Ime);rNo=r(Wlt,"xlm-roberta-xl"),Wlt.forEach(t),tNo=r(VLe," \u2014 "),hO=n(VLe,"A",{href:!0});var Hlt=s(hO);aNo=r(Hlt,"XLMRobertaXLForTokenClassification"),Hlt.forEach(t),nNo=r(VLe," (XLM-RoBERTa-XL model)"),VLe.forEach(t),sNo=i(J),S2=n(J,"LI",{});var XLe=s(S2);qme=n(XLe,"STRONG",{});var Ult=s(qme);lNo=r(Ult,"xlnet"),Ult.forEach(t),iNo=r(XLe," \u2014 "),pO=n(XLe,"A",{href:!0});var Jlt=s(pO);dNo=r(Jlt,"XLNetForTokenClassification"),Jlt.forEach(t),cNo=r(XLe," (XLNet model)"),XLe.forEach(t),fNo=i(J),R2=n(J,"LI",{});var zLe=s(R2);Nme=n(zLe,"STRONG",{});var Ylt=s(Nme);mNo=r(Ylt,"yoso"),Ylt.forEach(t),gNo=r(zLe," \u2014 "),uO=n(zLe,"A",{href:!0});var Klt=s(uO);hNo=r(Klt,"YosoForTokenClassification"),Klt.forEach(t),pNo=r(zLe," (YOSO model)"),zLe.forEach(t),J.forEach(t),uNo=i(la),B2=n(la,"P",{});var QLe=s(B2);_No=r(QLe,"The model is set in evaluation mode by default using "),jme=n(QLe,"CODE",{});var Zlt=s(jme);bNo=r(Zlt,"model.eval()"),Zlt.forEach(t),vNo=r(QLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=n(QLe,"CODE",{});var eit=s(Dme);FNo=r(eit,"model.train()"),eit.forEach(t),QLe.forEach(t),TNo=i(la),T(P2.$$.fragment,la),la.forEach(t),Hs.forEach(t),eIe=i(f),Hi=n(f,"H2",{class:!0});var aNe=s(Hi);I2=n(aNe,"A",{id:!0,class:!0,href:!0});var oit=s(I2);Gme=n(oit,"SPAN",{});var rit=s(Gme);T(d6.$$.fragment,rit),rit.forEach(t),oit.forEach(t),MNo=i(aNe),Ome=n(aNe,"SPAN",{});var tit=s(Ome);ENo=r(tit,"AutoModelForQuestionAnswering"),tit.forEach(t),aNe.forEach(t),oIe=i(f),qo=n(f,"DIV",{class:!0});var Us=s(qo);T(c6.$$.fragment,Us),CNo=i(Us),Ui=n(Us,"P",{});var _K=s(Ui);wNo=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_O=n(_K,"A",{href:!0});var ait=s(_O);ANo=r(ait,"from_pretrained()"),ait.forEach(t),yNo=r(_K," class method or the "),bO=n(_K,"A",{href:!0});var nit=s(bO);LNo=r(nit,"from_config()"),nit.forEach(t),xNo=r(_K,` class
method.`),_K.forEach(t),$No=i(Us),f6=n(Us,"P",{});var nNe=s(f6);kNo=r(nNe,"This class cannot be instantiated directly using "),Vme=n(nNe,"CODE",{});var sit=s(Vme);SNo=r(sit,"__init__()"),sit.forEach(t),RNo=r(nNe," (throws an error)."),nNe.forEach(t),BNo=i(Us),ct=n(Us,"DIV",{class:!0});var g3=s(ct);T(m6.$$.fragment,g3),PNo=i(g3),Xme=n(g3,"P",{});var lit=s(Xme);INo=r(lit,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lit.forEach(t),qNo=i(g3),Ji=n(g3,"P",{});var bK=s(Ji);NNo=r(bK,`Note:
Loading a model from its configuration file does `),zme=n(bK,"STRONG",{});var iit=s(zme);jNo=r(iit,"not"),iit.forEach(t),DNo=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=n(bK,"A",{href:!0});var dit=s(vO);GNo=r(dit,"from_pretrained()"),dit.forEach(t),ONo=r(bK," to load the model weights."),bK.forEach(t),VNo=i(g3),T(q2.$$.fragment,g3),g3.forEach(t),XNo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(g6.$$.fragment,ia),zNo=i(ia),Qme=n(ia,"P",{});var cit=s(Qme);QNo=r(cit,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),cit.forEach(t),WNo=i(ia),Pa=n(ia,"P",{});var h3=s(Pa);HNo=r(h3,"The model class to instantiate is selected based on the "),Wme=n(h3,"CODE",{});var fit=s(Wme);UNo=r(fit,"model_type"),fit.forEach(t),JNo=r(h3,` property of the config object (either
passed as an argument or loaded from `),Hme=n(h3,"CODE",{});var mit=s(Hme);YNo=r(mit,"pretrained_model_name_or_path"),mit.forEach(t),KNo=r(h3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=n(h3,"CODE",{});var git=s(Ume);ZNo=r(git,"pretrained_model_name_or_path"),git.forEach(t),ejo=r(h3,":"),h3.forEach(t),ojo=i(ia),O=n(ia,"UL",{});var X=s(O);N2=n(X,"LI",{});var WLe=s(N2);Jme=n(WLe,"STRONG",{});var hit=s(Jme);rjo=r(hit,"albert"),hit.forEach(t),tjo=r(WLe," \u2014 "),FO=n(WLe,"A",{href:!0});var pit=s(FO);ajo=r(pit,"AlbertForQuestionAnswering"),pit.forEach(t),njo=r(WLe," (ALBERT model)"),WLe.forEach(t),sjo=i(X),j2=n(X,"LI",{});var HLe=s(j2);Yme=n(HLe,"STRONG",{});var uit=s(Yme);ljo=r(uit,"bart"),uit.forEach(t),ijo=r(HLe," \u2014 "),TO=n(HLe,"A",{href:!0});var _it=s(TO);djo=r(_it,"BartForQuestionAnswering"),_it.forEach(t),cjo=r(HLe," (BART model)"),HLe.forEach(t),fjo=i(X),D2=n(X,"LI",{});var ULe=s(D2);Kme=n(ULe,"STRONG",{});var bit=s(Kme);mjo=r(bit,"bert"),bit.forEach(t),gjo=r(ULe," \u2014 "),MO=n(ULe,"A",{href:!0});var vit=s(MO);hjo=r(vit,"BertForQuestionAnswering"),vit.forEach(t),pjo=r(ULe," (BERT model)"),ULe.forEach(t),ujo=i(X),G2=n(X,"LI",{});var JLe=s(G2);Zme=n(JLe,"STRONG",{});var Fit=s(Zme);_jo=r(Fit,"big_bird"),Fit.forEach(t),bjo=r(JLe," \u2014 "),EO=n(JLe,"A",{href:!0});var Tit=s(EO);vjo=r(Tit,"BigBirdForQuestionAnswering"),Tit.forEach(t),Fjo=r(JLe," (BigBird model)"),JLe.forEach(t),Tjo=i(X),O2=n(X,"LI",{});var YLe=s(O2);ege=n(YLe,"STRONG",{});var Mit=s(ege);Mjo=r(Mit,"bigbird_pegasus"),Mit.forEach(t),Ejo=r(YLe," \u2014 "),CO=n(YLe,"A",{href:!0});var Eit=s(CO);Cjo=r(Eit,"BigBirdPegasusForQuestionAnswering"),Eit.forEach(t),wjo=r(YLe," (BigBirdPegasus model)"),YLe.forEach(t),Ajo=i(X),V2=n(X,"LI",{});var KLe=s(V2);oge=n(KLe,"STRONG",{});var Cit=s(oge);yjo=r(Cit,"camembert"),Cit.forEach(t),Ljo=r(KLe," \u2014 "),wO=n(KLe,"A",{href:!0});var wit=s(wO);xjo=r(wit,"CamembertForQuestionAnswering"),wit.forEach(t),$jo=r(KLe," (CamemBERT model)"),KLe.forEach(t),kjo=i(X),X2=n(X,"LI",{});var ZLe=s(X2);rge=n(ZLe,"STRONG",{});var Ait=s(rge);Sjo=r(Ait,"canine"),Ait.forEach(t),Rjo=r(ZLe," \u2014 "),AO=n(ZLe,"A",{href:!0});var yit=s(AO);Bjo=r(yit,"CanineForQuestionAnswering"),yit.forEach(t),Pjo=r(ZLe," (Canine model)"),ZLe.forEach(t),Ijo=i(X),z2=n(X,"LI",{});var exe=s(z2);tge=n(exe,"STRONG",{});var Lit=s(tge);qjo=r(Lit,"convbert"),Lit.forEach(t),Njo=r(exe," \u2014 "),yO=n(exe,"A",{href:!0});var xit=s(yO);jjo=r(xit,"ConvBertForQuestionAnswering"),xit.forEach(t),Djo=r(exe," (ConvBERT model)"),exe.forEach(t),Gjo=i(X),Q2=n(X,"LI",{});var oxe=s(Q2);age=n(oxe,"STRONG",{});var $it=s(age);Ojo=r($it,"data2vec-text"),$it.forEach(t),Vjo=r(oxe," \u2014 "),LO=n(oxe,"A",{href:!0});var kit=s(LO);Xjo=r(kit,"Data2VecTextForQuestionAnswering"),kit.forEach(t),zjo=r(oxe," (Data2VecText model)"),oxe.forEach(t),Qjo=i(X),W2=n(X,"LI",{});var rxe=s(W2);nge=n(rxe,"STRONG",{});var Sit=s(nge);Wjo=r(Sit,"deberta"),Sit.forEach(t),Hjo=r(rxe," \u2014 "),xO=n(rxe,"A",{href:!0});var Rit=s(xO);Ujo=r(Rit,"DebertaForQuestionAnswering"),Rit.forEach(t),Jjo=r(rxe," (DeBERTa model)"),rxe.forEach(t),Yjo=i(X),H2=n(X,"LI",{});var txe=s(H2);sge=n(txe,"STRONG",{});var Bit=s(sge);Kjo=r(Bit,"deberta-v2"),Bit.forEach(t),Zjo=r(txe," \u2014 "),$O=n(txe,"A",{href:!0});var Pit=s($O);eDo=r(Pit,"DebertaV2ForQuestionAnswering"),Pit.forEach(t),oDo=r(txe," (DeBERTa-v2 model)"),txe.forEach(t),rDo=i(X),U2=n(X,"LI",{});var axe=s(U2);lge=n(axe,"STRONG",{});var Iit=s(lge);tDo=r(Iit,"distilbert"),Iit.forEach(t),aDo=r(axe," \u2014 "),kO=n(axe,"A",{href:!0});var qit=s(kO);nDo=r(qit,"DistilBertForQuestionAnswering"),qit.forEach(t),sDo=r(axe," (DistilBERT model)"),axe.forEach(t),lDo=i(X),J2=n(X,"LI",{});var nxe=s(J2);ige=n(nxe,"STRONG",{});var Nit=s(ige);iDo=r(Nit,"electra"),Nit.forEach(t),dDo=r(nxe," \u2014 "),SO=n(nxe,"A",{href:!0});var jit=s(SO);cDo=r(jit,"ElectraForQuestionAnswering"),jit.forEach(t),fDo=r(nxe," (ELECTRA model)"),nxe.forEach(t),mDo=i(X),Y2=n(X,"LI",{});var sxe=s(Y2);dge=n(sxe,"STRONG",{});var Dit=s(dge);gDo=r(Dit,"flaubert"),Dit.forEach(t),hDo=r(sxe," \u2014 "),RO=n(sxe,"A",{href:!0});var Git=s(RO);pDo=r(Git,"FlaubertForQuestionAnsweringSimple"),Git.forEach(t),uDo=r(sxe," (FlauBERT model)"),sxe.forEach(t),_Do=i(X),K2=n(X,"LI",{});var lxe=s(K2);cge=n(lxe,"STRONG",{});var Oit=s(cge);bDo=r(Oit,"fnet"),Oit.forEach(t),vDo=r(lxe," \u2014 "),BO=n(lxe,"A",{href:!0});var Vit=s(BO);FDo=r(Vit,"FNetForQuestionAnswering"),Vit.forEach(t),TDo=r(lxe," (FNet model)"),lxe.forEach(t),MDo=i(X),Z2=n(X,"LI",{});var ixe=s(Z2);fge=n(ixe,"STRONG",{});var Xit=s(fge);EDo=r(Xit,"funnel"),Xit.forEach(t),CDo=r(ixe," \u2014 "),PO=n(ixe,"A",{href:!0});var zit=s(PO);wDo=r(zit,"FunnelForQuestionAnswering"),zit.forEach(t),ADo=r(ixe," (Funnel Transformer model)"),ixe.forEach(t),yDo=i(X),ev=n(X,"LI",{});var dxe=s(ev);mge=n(dxe,"STRONG",{});var Qit=s(mge);LDo=r(Qit,"gptj"),Qit.forEach(t),xDo=r(dxe," \u2014 "),IO=n(dxe,"A",{href:!0});var Wit=s(IO);$Do=r(Wit,"GPTJForQuestionAnswering"),Wit.forEach(t),kDo=r(dxe," (GPT-J model)"),dxe.forEach(t),SDo=i(X),ov=n(X,"LI",{});var cxe=s(ov);gge=n(cxe,"STRONG",{});var Hit=s(gge);RDo=r(Hit,"ibert"),Hit.forEach(t),BDo=r(cxe," \u2014 "),qO=n(cxe,"A",{href:!0});var Uit=s(qO);PDo=r(Uit,"IBertForQuestionAnswering"),Uit.forEach(t),IDo=r(cxe," (I-BERT model)"),cxe.forEach(t),qDo=i(X),rv=n(X,"LI",{});var fxe=s(rv);hge=n(fxe,"STRONG",{});var Jit=s(hge);NDo=r(Jit,"layoutlmv2"),Jit.forEach(t),jDo=r(fxe," \u2014 "),NO=n(fxe,"A",{href:!0});var Yit=s(NO);DDo=r(Yit,"LayoutLMv2ForQuestionAnswering"),Yit.forEach(t),GDo=r(fxe," (LayoutLMv2 model)"),fxe.forEach(t),ODo=i(X),tv=n(X,"LI",{});var mxe=s(tv);pge=n(mxe,"STRONG",{});var Kit=s(pge);VDo=r(Kit,"led"),Kit.forEach(t),XDo=r(mxe," \u2014 "),jO=n(mxe,"A",{href:!0});var Zit=s(jO);zDo=r(Zit,"LEDForQuestionAnswering"),Zit.forEach(t),QDo=r(mxe," (LED model)"),mxe.forEach(t),WDo=i(X),av=n(X,"LI",{});var gxe=s(av);uge=n(gxe,"STRONG",{});var edt=s(uge);HDo=r(edt,"longformer"),edt.forEach(t),UDo=r(gxe," \u2014 "),DO=n(gxe,"A",{href:!0});var odt=s(DO);JDo=r(odt,"LongformerForQuestionAnswering"),odt.forEach(t),YDo=r(gxe," (Longformer model)"),gxe.forEach(t),KDo=i(X),nv=n(X,"LI",{});var hxe=s(nv);_ge=n(hxe,"STRONG",{});var rdt=s(_ge);ZDo=r(rdt,"lxmert"),rdt.forEach(t),eGo=r(hxe," \u2014 "),GO=n(hxe,"A",{href:!0});var tdt=s(GO);oGo=r(tdt,"LxmertForQuestionAnswering"),tdt.forEach(t),rGo=r(hxe," (LXMERT model)"),hxe.forEach(t),tGo=i(X),sv=n(X,"LI",{});var pxe=s(sv);bge=n(pxe,"STRONG",{});var adt=s(bge);aGo=r(adt,"mbart"),adt.forEach(t),nGo=r(pxe," \u2014 "),OO=n(pxe,"A",{href:!0});var ndt=s(OO);sGo=r(ndt,"MBartForQuestionAnswering"),ndt.forEach(t),lGo=r(pxe," (mBART model)"),pxe.forEach(t),iGo=i(X),lv=n(X,"LI",{});var uxe=s(lv);vge=n(uxe,"STRONG",{});var sdt=s(vge);dGo=r(sdt,"megatron-bert"),sdt.forEach(t),cGo=r(uxe," \u2014 "),VO=n(uxe,"A",{href:!0});var ldt=s(VO);fGo=r(ldt,"MegatronBertForQuestionAnswering"),ldt.forEach(t),mGo=r(uxe," (MegatronBert model)"),uxe.forEach(t),gGo=i(X),iv=n(X,"LI",{});var _xe=s(iv);Fge=n(_xe,"STRONG",{});var idt=s(Fge);hGo=r(idt,"mobilebert"),idt.forEach(t),pGo=r(_xe," \u2014 "),XO=n(_xe,"A",{href:!0});var ddt=s(XO);uGo=r(ddt,"MobileBertForQuestionAnswering"),ddt.forEach(t),_Go=r(_xe," (MobileBERT model)"),_xe.forEach(t),bGo=i(X),dv=n(X,"LI",{});var bxe=s(dv);Tge=n(bxe,"STRONG",{});var cdt=s(Tge);vGo=r(cdt,"mpnet"),cdt.forEach(t),FGo=r(bxe," \u2014 "),zO=n(bxe,"A",{href:!0});var fdt=s(zO);TGo=r(fdt,"MPNetForQuestionAnswering"),fdt.forEach(t),MGo=r(bxe," (MPNet model)"),bxe.forEach(t),EGo=i(X),cv=n(X,"LI",{});var vxe=s(cv);Mge=n(vxe,"STRONG",{});var mdt=s(Mge);CGo=r(mdt,"nystromformer"),mdt.forEach(t),wGo=r(vxe," \u2014 "),QO=n(vxe,"A",{href:!0});var gdt=s(QO);AGo=r(gdt,"NystromformerForQuestionAnswering"),gdt.forEach(t),yGo=r(vxe," (Nystromformer model)"),vxe.forEach(t),LGo=i(X),fv=n(X,"LI",{});var Fxe=s(fv);Ege=n(Fxe,"STRONG",{});var hdt=s(Ege);xGo=r(hdt,"qdqbert"),hdt.forEach(t),$Go=r(Fxe," \u2014 "),WO=n(Fxe,"A",{href:!0});var pdt=s(WO);kGo=r(pdt,"QDQBertForQuestionAnswering"),pdt.forEach(t),SGo=r(Fxe," (QDQBert model)"),Fxe.forEach(t),RGo=i(X),mv=n(X,"LI",{});var Txe=s(mv);Cge=n(Txe,"STRONG",{});var udt=s(Cge);BGo=r(udt,"reformer"),udt.forEach(t),PGo=r(Txe," \u2014 "),HO=n(Txe,"A",{href:!0});var _dt=s(HO);IGo=r(_dt,"ReformerForQuestionAnswering"),_dt.forEach(t),qGo=r(Txe," (Reformer model)"),Txe.forEach(t),NGo=i(X),gv=n(X,"LI",{});var Mxe=s(gv);wge=n(Mxe,"STRONG",{});var bdt=s(wge);jGo=r(bdt,"rembert"),bdt.forEach(t),DGo=r(Mxe," \u2014 "),UO=n(Mxe,"A",{href:!0});var vdt=s(UO);GGo=r(vdt,"RemBertForQuestionAnswering"),vdt.forEach(t),OGo=r(Mxe," (RemBERT model)"),Mxe.forEach(t),VGo=i(X),hv=n(X,"LI",{});var Exe=s(hv);Age=n(Exe,"STRONG",{});var Fdt=s(Age);XGo=r(Fdt,"roberta"),Fdt.forEach(t),zGo=r(Exe," \u2014 "),JO=n(Exe,"A",{href:!0});var Tdt=s(JO);QGo=r(Tdt,"RobertaForQuestionAnswering"),Tdt.forEach(t),WGo=r(Exe," (RoBERTa model)"),Exe.forEach(t),HGo=i(X),pv=n(X,"LI",{});var Cxe=s(pv);yge=n(Cxe,"STRONG",{});var Mdt=s(yge);UGo=r(Mdt,"roformer"),Mdt.forEach(t),JGo=r(Cxe," \u2014 "),YO=n(Cxe,"A",{href:!0});var Edt=s(YO);YGo=r(Edt,"RoFormerForQuestionAnswering"),Edt.forEach(t),KGo=r(Cxe," (RoFormer model)"),Cxe.forEach(t),ZGo=i(X),uv=n(X,"LI",{});var wxe=s(uv);Lge=n(wxe,"STRONG",{});var Cdt=s(Lge);eOo=r(Cdt,"splinter"),Cdt.forEach(t),oOo=r(wxe," \u2014 "),KO=n(wxe,"A",{href:!0});var wdt=s(KO);rOo=r(wdt,"SplinterForQuestionAnswering"),wdt.forEach(t),tOo=r(wxe," (Splinter model)"),wxe.forEach(t),aOo=i(X),_v=n(X,"LI",{});var Axe=s(_v);xge=n(Axe,"STRONG",{});var Adt=s(xge);nOo=r(Adt,"squeezebert"),Adt.forEach(t),sOo=r(Axe," \u2014 "),ZO=n(Axe,"A",{href:!0});var ydt=s(ZO);lOo=r(ydt,"SqueezeBertForQuestionAnswering"),ydt.forEach(t),iOo=r(Axe," (SqueezeBERT model)"),Axe.forEach(t),dOo=i(X),bv=n(X,"LI",{});var yxe=s(bv);$ge=n(yxe,"STRONG",{});var Ldt=s($ge);cOo=r(Ldt,"xlm"),Ldt.forEach(t),fOo=r(yxe," \u2014 "),eV=n(yxe,"A",{href:!0});var xdt=s(eV);mOo=r(xdt,"XLMForQuestionAnsweringSimple"),xdt.forEach(t),gOo=r(yxe," (XLM model)"),yxe.forEach(t),hOo=i(X),vv=n(X,"LI",{});var Lxe=s(vv);kge=n(Lxe,"STRONG",{});var $dt=s(kge);pOo=r($dt,"xlm-roberta"),$dt.forEach(t),uOo=r(Lxe," \u2014 "),oV=n(Lxe,"A",{href:!0});var kdt=s(oV);_Oo=r(kdt,"XLMRobertaForQuestionAnswering"),kdt.forEach(t),bOo=r(Lxe," (XLM-RoBERTa model)"),Lxe.forEach(t),vOo=i(X),Fv=n(X,"LI",{});var xxe=s(Fv);Sge=n(xxe,"STRONG",{});var Sdt=s(Sge);FOo=r(Sdt,"xlm-roberta-xl"),Sdt.forEach(t),TOo=r(xxe," \u2014 "),rV=n(xxe,"A",{href:!0});var Rdt=s(rV);MOo=r(Rdt,"XLMRobertaXLForQuestionAnswering"),Rdt.forEach(t),EOo=r(xxe," (XLM-RoBERTa-XL model)"),xxe.forEach(t),COo=i(X),Tv=n(X,"LI",{});var $xe=s(Tv);Rge=n($xe,"STRONG",{});var Bdt=s(Rge);wOo=r(Bdt,"xlnet"),Bdt.forEach(t),AOo=r($xe," \u2014 "),tV=n($xe,"A",{href:!0});var Pdt=s(tV);yOo=r(Pdt,"XLNetForQuestionAnsweringSimple"),Pdt.forEach(t),LOo=r($xe," (XLNet model)"),$xe.forEach(t),xOo=i(X),Mv=n(X,"LI",{});var kxe=s(Mv);Bge=n(kxe,"STRONG",{});var Idt=s(Bge);$Oo=r(Idt,"yoso"),Idt.forEach(t),kOo=r(kxe," \u2014 "),aV=n(kxe,"A",{href:!0});var qdt=s(aV);SOo=r(qdt,"YosoForQuestionAnswering"),qdt.forEach(t),ROo=r(kxe," (YOSO model)"),kxe.forEach(t),X.forEach(t),BOo=i(ia),Ev=n(ia,"P",{});var Sxe=s(Ev);POo=r(Sxe,"The model is set in evaluation mode by default using "),Pge=n(Sxe,"CODE",{});var Ndt=s(Pge);IOo=r(Ndt,"model.eval()"),Ndt.forEach(t),qOo=r(Sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=n(Sxe,"CODE",{});var jdt=s(Ige);NOo=r(jdt,"model.train()"),jdt.forEach(t),Sxe.forEach(t),jOo=i(ia),T(Cv.$$.fragment,ia),ia.forEach(t),Us.forEach(t),rIe=i(f),Yi=n(f,"H2",{class:!0});var sNe=s(Yi);wv=n(sNe,"A",{id:!0,class:!0,href:!0});var Ddt=s(wv);qge=n(Ddt,"SPAN",{});var Gdt=s(qge);T(h6.$$.fragment,Gdt),Gdt.forEach(t),Ddt.forEach(t),DOo=i(sNe),Nge=n(sNe,"SPAN",{});var Odt=s(Nge);GOo=r(Odt,"AutoModelForTableQuestionAnswering"),Odt.forEach(t),sNe.forEach(t),tIe=i(f),No=n(f,"DIV",{class:!0});var Js=s(No);T(p6.$$.fragment,Js),OOo=i(Js),Ki=n(Js,"P",{});var vK=s(Ki);VOo=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nV=n(vK,"A",{href:!0});var Vdt=s(nV);XOo=r(Vdt,"from_pretrained()"),Vdt.forEach(t),zOo=r(vK," class method or the "),sV=n(vK,"A",{href:!0});var Xdt=s(sV);QOo=r(Xdt,"from_config()"),Xdt.forEach(t),WOo=r(vK,` class
method.`),vK.forEach(t),HOo=i(Js),u6=n(Js,"P",{});var lNe=s(u6);UOo=r(lNe,"This class cannot be instantiated directly using "),jge=n(lNe,"CODE",{});var zdt=s(jge);JOo=r(zdt,"__init__()"),zdt.forEach(t),YOo=r(lNe," (throws an error)."),lNe.forEach(t),KOo=i(Js),ft=n(Js,"DIV",{class:!0});var p3=s(ft);T(_6.$$.fragment,p3),ZOo=i(p3),Dge=n(p3,"P",{});var Qdt=s(Dge);eVo=r(Qdt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Qdt.forEach(t),oVo=i(p3),Zi=n(p3,"P",{});var FK=s(Zi);rVo=r(FK,`Note:
Loading a model from its configuration file does `),Gge=n(FK,"STRONG",{});var Wdt=s(Gge);tVo=r(Wdt,"not"),Wdt.forEach(t),aVo=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lV=n(FK,"A",{href:!0});var Hdt=s(lV);nVo=r(Hdt,"from_pretrained()"),Hdt.forEach(t),sVo=r(FK," to load the model weights."),FK.forEach(t),lVo=i(p3),T(Av.$$.fragment,p3),p3.forEach(t),iVo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(b6.$$.fragment,da),dVo=i(da),Oge=n(da,"P",{});var Udt=s(Oge);cVo=r(Udt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Udt.forEach(t),fVo=i(da),Ia=n(da,"P",{});var u3=s(Ia);mVo=r(u3,"The model class to instantiate is selected based on the "),Vge=n(u3,"CODE",{});var Jdt=s(Vge);gVo=r(Jdt,"model_type"),Jdt.forEach(t),hVo=r(u3,` property of the config object (either
passed as an argument or loaded from `),Xge=n(u3,"CODE",{});var Ydt=s(Xge);pVo=r(Ydt,"pretrained_model_name_or_path"),Ydt.forEach(t),uVo=r(u3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=n(u3,"CODE",{});var Kdt=s(zge);_Vo=r(Kdt,"pretrained_model_name_or_path"),Kdt.forEach(t),bVo=r(u3,":"),u3.forEach(t),vVo=i(da),Qge=n(da,"UL",{});var Zdt=s(Qge);yv=n(Zdt,"LI",{});var Rxe=s(yv);Wge=n(Rxe,"STRONG",{});var ect=s(Wge);FVo=r(ect,"tapas"),ect.forEach(t),TVo=r(Rxe," \u2014 "),iV=n(Rxe,"A",{href:!0});var oct=s(iV);MVo=r(oct,"TapasForQuestionAnswering"),oct.forEach(t),EVo=r(Rxe," (TAPAS model)"),Rxe.forEach(t),Zdt.forEach(t),CVo=i(da),Lv=n(da,"P",{});var Bxe=s(Lv);wVo=r(Bxe,"The model is set in evaluation mode by default using "),Hge=n(Bxe,"CODE",{});var rct=s(Hge);AVo=r(rct,"model.eval()"),rct.forEach(t),yVo=r(Bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uge=n(Bxe,"CODE",{});var tct=s(Uge);LVo=r(tct,"model.train()"),tct.forEach(t),Bxe.forEach(t),xVo=i(da),T(xv.$$.fragment,da),da.forEach(t),Js.forEach(t),aIe=i(f),ed=n(f,"H2",{class:!0});var iNe=s(ed);$v=n(iNe,"A",{id:!0,class:!0,href:!0});var act=s($v);Jge=n(act,"SPAN",{});var nct=s(Jge);T(v6.$$.fragment,nct),nct.forEach(t),act.forEach(t),$Vo=i(iNe),Yge=n(iNe,"SPAN",{});var sct=s(Yge);kVo=r(sct,"AutoModelForImageClassification"),sct.forEach(t),iNe.forEach(t),nIe=i(f),jo=n(f,"DIV",{class:!0});var Ys=s(jo);T(F6.$$.fragment,Ys),SVo=i(Ys),od=n(Ys,"P",{});var TK=s(od);RVo=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dV=n(TK,"A",{href:!0});var lct=s(dV);BVo=r(lct,"from_pretrained()"),lct.forEach(t),PVo=r(TK," class method or the "),cV=n(TK,"A",{href:!0});var ict=s(cV);IVo=r(ict,"from_config()"),ict.forEach(t),qVo=r(TK,` class
method.`),TK.forEach(t),NVo=i(Ys),T6=n(Ys,"P",{});var dNe=s(T6);jVo=r(dNe,"This class cannot be instantiated directly using "),Kge=n(dNe,"CODE",{});var dct=s(Kge);DVo=r(dct,"__init__()"),dct.forEach(t),GVo=r(dNe," (throws an error)."),dNe.forEach(t),OVo=i(Ys),mt=n(Ys,"DIV",{class:!0});var _3=s(mt);T(M6.$$.fragment,_3),VVo=i(_3),Zge=n(_3,"P",{});var cct=s(Zge);XVo=r(cct,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cct.forEach(t),zVo=i(_3),rd=n(_3,"P",{});var MK=s(rd);QVo=r(MK,`Note:
Loading a model from its configuration file does `),ehe=n(MK,"STRONG",{});var fct=s(ehe);WVo=r(fct,"not"),fct.forEach(t),HVo=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fV=n(MK,"A",{href:!0});var mct=s(fV);UVo=r(mct,"from_pretrained()"),mct.forEach(t),JVo=r(MK," to load the model weights."),MK.forEach(t),YVo=i(_3),T(kv.$$.fragment,_3),_3.forEach(t),KVo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(E6.$$.fragment,ca),ZVo=i(ca),ohe=n(ca,"P",{});var gct=s(ohe);eXo=r(gct,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gct.forEach(t),oXo=i(ca),qa=n(ca,"P",{});var b3=s(qa);rXo=r(b3,"The model class to instantiate is selected based on the "),rhe=n(b3,"CODE",{});var hct=s(rhe);tXo=r(hct,"model_type"),hct.forEach(t),aXo=r(b3,` property of the config object (either
passed as an argument or loaded from `),the=n(b3,"CODE",{});var pct=s(the);nXo=r(pct,"pretrained_model_name_or_path"),pct.forEach(t),sXo=r(b3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ahe=n(b3,"CODE",{});var uct=s(ahe);lXo=r(uct,"pretrained_model_name_or_path"),uct.forEach(t),iXo=r(b3,":"),b3.forEach(t),dXo=i(ca),ve=n(ca,"UL",{});var Ee=s(ve);Sv=n(Ee,"LI",{});var Pxe=s(Sv);nhe=n(Pxe,"STRONG",{});var _ct=s(nhe);cXo=r(_ct,"beit"),_ct.forEach(t),fXo=r(Pxe," \u2014 "),mV=n(Pxe,"A",{href:!0});var bct=s(mV);mXo=r(bct,"BeitForImageClassification"),bct.forEach(t),gXo=r(Pxe," (BEiT model)"),Pxe.forEach(t),hXo=i(Ee),Rv=n(Ee,"LI",{});var Ixe=s(Rv);she=n(Ixe,"STRONG",{});var vct=s(she);pXo=r(vct,"convnext"),vct.forEach(t),uXo=r(Ixe," \u2014 "),gV=n(Ixe,"A",{href:!0});var Fct=s(gV);_Xo=r(Fct,"ConvNextForImageClassification"),Fct.forEach(t),bXo=r(Ixe," (ConvNext model)"),Ixe.forEach(t),vXo=i(Ee),Bv=n(Ee,"LI",{});var qxe=s(Bv);lhe=n(qxe,"STRONG",{});var Tct=s(lhe);FXo=r(Tct,"data2vec-vision"),Tct.forEach(t),TXo=r(qxe," \u2014 "),hV=n(qxe,"A",{href:!0});var Mct=s(hV);MXo=r(Mct,"Data2VecVisionForImageClassification"),Mct.forEach(t),EXo=r(qxe," (Data2VecVision model)"),qxe.forEach(t),CXo=i(Ee),Rs=n(Ee,"LI",{});var l$=s(Rs);ihe=n(l$,"STRONG",{});var Ect=s(ihe);wXo=r(Ect,"deit"),Ect.forEach(t),AXo=r(l$," \u2014 "),pV=n(l$,"A",{href:!0});var Cct=s(pV);yXo=r(Cct,"DeiTForImageClassification"),Cct.forEach(t),LXo=r(l$," or "),uV=n(l$,"A",{href:!0});var wct=s(uV);xXo=r(wct,"DeiTForImageClassificationWithTeacher"),wct.forEach(t),$Xo=r(l$," (DeiT model)"),l$.forEach(t),kXo=i(Ee),Pv=n(Ee,"LI",{});var Nxe=s(Pv);dhe=n(Nxe,"STRONG",{});var Act=s(dhe);SXo=r(Act,"imagegpt"),Act.forEach(t),RXo=r(Nxe," \u2014 "),_V=n(Nxe,"A",{href:!0});var yct=s(_V);BXo=r(yct,"ImageGPTForImageClassification"),yct.forEach(t),PXo=r(Nxe," (ImageGPT model)"),Nxe.forEach(t),IXo=i(Ee),gt=n(Ee,"LI",{});var ff=s(gt);che=n(ff,"STRONG",{});var Lct=s(che);qXo=r(Lct,"perceiver"),Lct.forEach(t),NXo=r(ff," \u2014 "),bV=n(ff,"A",{href:!0});var xct=s(bV);jXo=r(xct,"PerceiverForImageClassificationLearned"),xct.forEach(t),DXo=r(ff," or "),vV=n(ff,"A",{href:!0});var $ct=s(vV);GXo=r($ct,"PerceiverForImageClassificationFourier"),$ct.forEach(t),OXo=r(ff," or "),FV=n(ff,"A",{href:!0});var kct=s(FV);VXo=r(kct,"PerceiverForImageClassificationConvProcessing"),kct.forEach(t),XXo=r(ff," (Perceiver model)"),ff.forEach(t),zXo=i(Ee),Iv=n(Ee,"LI",{});var jxe=s(Iv);fhe=n(jxe,"STRONG",{});var Sct=s(fhe);QXo=r(Sct,"poolformer"),Sct.forEach(t),WXo=r(jxe," \u2014 "),TV=n(jxe,"A",{href:!0});var Rct=s(TV);HXo=r(Rct,"PoolFormerForImageClassification"),Rct.forEach(t),UXo=r(jxe," (PoolFormer model)"),jxe.forEach(t),JXo=i(Ee),qv=n(Ee,"LI",{});var Dxe=s(qv);mhe=n(Dxe,"STRONG",{});var Bct=s(mhe);YXo=r(Bct,"regnet"),Bct.forEach(t),KXo=r(Dxe," \u2014 "),MV=n(Dxe,"A",{href:!0});var Pct=s(MV);ZXo=r(Pct,"RegNetForImageClassification"),Pct.forEach(t),ezo=r(Dxe," (RegNet model)"),Dxe.forEach(t),ozo=i(Ee),Nv=n(Ee,"LI",{});var Gxe=s(Nv);ghe=n(Gxe,"STRONG",{});var Ict=s(ghe);rzo=r(Ict,"resnet"),Ict.forEach(t),tzo=r(Gxe," \u2014 "),EV=n(Gxe,"A",{href:!0});var qct=s(EV);azo=r(qct,"ResNetForImageClassification"),qct.forEach(t),nzo=r(Gxe," (ResNet model)"),Gxe.forEach(t),szo=i(Ee),jv=n(Ee,"LI",{});var Oxe=s(jv);hhe=n(Oxe,"STRONG",{});var Nct=s(hhe);lzo=r(Nct,"segformer"),Nct.forEach(t),izo=r(Oxe," \u2014 "),CV=n(Oxe,"A",{href:!0});var jct=s(CV);dzo=r(jct,"SegformerForImageClassification"),jct.forEach(t),czo=r(Oxe," (SegFormer model)"),Oxe.forEach(t),fzo=i(Ee),Dv=n(Ee,"LI",{});var Vxe=s(Dv);phe=n(Vxe,"STRONG",{});var Dct=s(phe);mzo=r(Dct,"swin"),Dct.forEach(t),gzo=r(Vxe," \u2014 "),wV=n(Vxe,"A",{href:!0});var Gct=s(wV);hzo=r(Gct,"SwinForImageClassification"),Gct.forEach(t),pzo=r(Vxe," (Swin model)"),Vxe.forEach(t),uzo=i(Ee),Gv=n(Ee,"LI",{});var Xxe=s(Gv);uhe=n(Xxe,"STRONG",{});var Oct=s(uhe);_zo=r(Oct,"van"),Oct.forEach(t),bzo=r(Xxe," \u2014 "),AV=n(Xxe,"A",{href:!0});var Vct=s(AV);vzo=r(Vct,"VanForImageClassification"),Vct.forEach(t),Fzo=r(Xxe," (VAN model)"),Xxe.forEach(t),Tzo=i(Ee),Ov=n(Ee,"LI",{});var zxe=s(Ov);_he=n(zxe,"STRONG",{});var Xct=s(_he);Mzo=r(Xct,"vit"),Xct.forEach(t),Ezo=r(zxe," \u2014 "),yV=n(zxe,"A",{href:!0});var zct=s(yV);Czo=r(zct,"ViTForImageClassification"),zct.forEach(t),wzo=r(zxe," (ViT model)"),zxe.forEach(t),Ee.forEach(t),Azo=i(ca),Vv=n(ca,"P",{});var Qxe=s(Vv);yzo=r(Qxe,"The model is set in evaluation mode by default using "),bhe=n(Qxe,"CODE",{});var Qct=s(bhe);Lzo=r(Qct,"model.eval()"),Qct.forEach(t),xzo=r(Qxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vhe=n(Qxe,"CODE",{});var Wct=s(vhe);$zo=r(Wct,"model.train()"),Wct.forEach(t),Qxe.forEach(t),kzo=i(ca),T(Xv.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),sIe=i(f),td=n(f,"H2",{class:!0});var cNe=s(td);zv=n(cNe,"A",{id:!0,class:!0,href:!0});var Hct=s(zv);Fhe=n(Hct,"SPAN",{});var Uct=s(Fhe);T(C6.$$.fragment,Uct),Uct.forEach(t),Hct.forEach(t),Szo=i(cNe),The=n(cNe,"SPAN",{});var Jct=s(The);Rzo=r(Jct,"AutoModelForVision2Seq"),Jct.forEach(t),cNe.forEach(t),lIe=i(f),Do=n(f,"DIV",{class:!0});var Ks=s(Do);T(w6.$$.fragment,Ks),Bzo=i(Ks),ad=n(Ks,"P",{});var EK=s(ad);Pzo=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LV=n(EK,"A",{href:!0});var Yct=s(LV);Izo=r(Yct,"from_pretrained()"),Yct.forEach(t),qzo=r(EK," class method or the "),xV=n(EK,"A",{href:!0});var Kct=s(xV);Nzo=r(Kct,"from_config()"),Kct.forEach(t),jzo=r(EK,` class
method.`),EK.forEach(t),Dzo=i(Ks),A6=n(Ks,"P",{});var fNe=s(A6);Gzo=r(fNe,"This class cannot be instantiated directly using "),Mhe=n(fNe,"CODE",{});var Zct=s(Mhe);Ozo=r(Zct,"__init__()"),Zct.forEach(t),Vzo=r(fNe," (throws an error)."),fNe.forEach(t),Xzo=i(Ks),ht=n(Ks,"DIV",{class:!0});var v3=s(ht);T(y6.$$.fragment,v3),zzo=i(v3),Ehe=n(v3,"P",{});var eft=s(Ehe);Qzo=r(eft,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),eft.forEach(t),Wzo=i(v3),nd=n(v3,"P",{});var CK=s(nd);Hzo=r(CK,`Note:
Loading a model from its configuration file does `),Che=n(CK,"STRONG",{});var oft=s(Che);Uzo=r(oft,"not"),oft.forEach(t),Jzo=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$V=n(CK,"A",{href:!0});var rft=s($V);Yzo=r(rft,"from_pretrained()"),rft.forEach(t),Kzo=r(CK," to load the model weights."),CK.forEach(t),Zzo=i(v3),T(Qv.$$.fragment,v3),v3.forEach(t),eQo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(L6.$$.fragment,fa),oQo=i(fa),whe=n(fa,"P",{});var tft=s(whe);rQo=r(tft,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tft.forEach(t),tQo=i(fa),Na=n(fa,"P",{});var F3=s(Na);aQo=r(F3,"The model class to instantiate is selected based on the "),Ahe=n(F3,"CODE",{});var aft=s(Ahe);nQo=r(aft,"model_type"),aft.forEach(t),sQo=r(F3,` property of the config object (either
passed as an argument or loaded from `),yhe=n(F3,"CODE",{});var nft=s(yhe);lQo=r(nft,"pretrained_model_name_or_path"),nft.forEach(t),iQo=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lhe=n(F3,"CODE",{});var sft=s(Lhe);dQo=r(sft,"pretrained_model_name_or_path"),sft.forEach(t),cQo=r(F3,":"),F3.forEach(t),fQo=i(fa),xhe=n(fa,"UL",{});var lft=s(xhe);Wv=n(lft,"LI",{});var Wxe=s(Wv);$he=n(Wxe,"STRONG",{});var ift=s($he);mQo=r(ift,"vision-encoder-decoder"),ift.forEach(t),gQo=r(Wxe," \u2014 "),kV=n(Wxe,"A",{href:!0});var dft=s(kV);hQo=r(dft,"VisionEncoderDecoderModel"),dft.forEach(t),pQo=r(Wxe," (Vision Encoder decoder model)"),Wxe.forEach(t),lft.forEach(t),uQo=i(fa),Hv=n(fa,"P",{});var Hxe=s(Hv);_Qo=r(Hxe,"The model is set in evaluation mode by default using "),khe=n(Hxe,"CODE",{});var cft=s(khe);bQo=r(cft,"model.eval()"),cft.forEach(t),vQo=r(Hxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),She=n(Hxe,"CODE",{});var fft=s(She);FQo=r(fft,"model.train()"),fft.forEach(t),Hxe.forEach(t),TQo=i(fa),T(Uv.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),iIe=i(f),sd=n(f,"H2",{class:!0});var mNe=s(sd);Jv=n(mNe,"A",{id:!0,class:!0,href:!0});var mft=s(Jv);Rhe=n(mft,"SPAN",{});var gft=s(Rhe);T(x6.$$.fragment,gft),gft.forEach(t),mft.forEach(t),MQo=i(mNe),Bhe=n(mNe,"SPAN",{});var hft=s(Bhe);EQo=r(hft,"AutoModelForAudioClassification"),hft.forEach(t),mNe.forEach(t),dIe=i(f),Go=n(f,"DIV",{class:!0});var Zs=s(Go);T($6.$$.fragment,Zs),CQo=i(Zs),ld=n(Zs,"P",{});var wK=s(ld);wQo=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),SV=n(wK,"A",{href:!0});var pft=s(SV);AQo=r(pft,"from_pretrained()"),pft.forEach(t),yQo=r(wK," class method or the "),RV=n(wK,"A",{href:!0});var uft=s(RV);LQo=r(uft,"from_config()"),uft.forEach(t),xQo=r(wK,` class
method.`),wK.forEach(t),$Qo=i(Zs),k6=n(Zs,"P",{});var gNe=s(k6);kQo=r(gNe,"This class cannot be instantiated directly using "),Phe=n(gNe,"CODE",{});var _ft=s(Phe);SQo=r(_ft,"__init__()"),_ft.forEach(t),RQo=r(gNe," (throws an error)."),gNe.forEach(t),BQo=i(Zs),pt=n(Zs,"DIV",{class:!0});var T3=s(pt);T(S6.$$.fragment,T3),PQo=i(T3),Ihe=n(T3,"P",{});var bft=s(Ihe);IQo=r(bft,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),bft.forEach(t),qQo=i(T3),id=n(T3,"P",{});var AK=s(id);NQo=r(AK,`Note:
Loading a model from its configuration file does `),qhe=n(AK,"STRONG",{});var vft=s(qhe);jQo=r(vft,"not"),vft.forEach(t),DQo=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=n(AK,"A",{href:!0});var Fft=s(BV);GQo=r(Fft,"from_pretrained()"),Fft.forEach(t),OQo=r(AK," to load the model weights."),AK.forEach(t),VQo=i(T3),T(Yv.$$.fragment,T3),T3.forEach(t),XQo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(R6.$$.fragment,ma),zQo=i(ma),Nhe=n(ma,"P",{});var Tft=s(Nhe);QQo=r(Tft,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Tft.forEach(t),WQo=i(ma),ja=n(ma,"P",{});var M3=s(ja);HQo=r(M3,"The model class to instantiate is selected based on the "),jhe=n(M3,"CODE",{});var Mft=s(jhe);UQo=r(Mft,"model_type"),Mft.forEach(t),JQo=r(M3,` property of the config object (either
passed as an argument or loaded from `),Dhe=n(M3,"CODE",{});var Eft=s(Dhe);YQo=r(Eft,"pretrained_model_name_or_path"),Eft.forEach(t),KQo=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=n(M3,"CODE",{});var Cft=s(Ghe);ZQo=r(Cft,"pretrained_model_name_or_path"),Cft.forEach(t),eWo=r(M3,":"),M3.forEach(t),oWo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);Kv=n(bo,"LI",{});var Uxe=s(Kv);Ohe=n(Uxe,"STRONG",{});var wft=s(Ohe);rWo=r(wft,"data2vec-audio"),wft.forEach(t),tWo=r(Uxe," \u2014 "),PV=n(Uxe,"A",{href:!0});var Aft=s(PV);aWo=r(Aft,"Data2VecAudioForSequenceClassification"),Aft.forEach(t),nWo=r(Uxe," (Data2VecAudio model)"),Uxe.forEach(t),sWo=i(bo),Zv=n(bo,"LI",{});var Jxe=s(Zv);Vhe=n(Jxe,"STRONG",{});var yft=s(Vhe);lWo=r(yft,"hubert"),yft.forEach(t),iWo=r(Jxe," \u2014 "),IV=n(Jxe,"A",{href:!0});var Lft=s(IV);dWo=r(Lft,"HubertForSequenceClassification"),Lft.forEach(t),cWo=r(Jxe," (Hubert model)"),Jxe.forEach(t),fWo=i(bo),eF=n(bo,"LI",{});var Yxe=s(eF);Xhe=n(Yxe,"STRONG",{});var xft=s(Xhe);mWo=r(xft,"sew"),xft.forEach(t),gWo=r(Yxe," \u2014 "),qV=n(Yxe,"A",{href:!0});var $ft=s(qV);hWo=r($ft,"SEWForSequenceClassification"),$ft.forEach(t),pWo=r(Yxe," (SEW model)"),Yxe.forEach(t),uWo=i(bo),oF=n(bo,"LI",{});var Kxe=s(oF);zhe=n(Kxe,"STRONG",{});var kft=s(zhe);_Wo=r(kft,"sew-d"),kft.forEach(t),bWo=r(Kxe," \u2014 "),NV=n(Kxe,"A",{href:!0});var Sft=s(NV);vWo=r(Sft,"SEWDForSequenceClassification"),Sft.forEach(t),FWo=r(Kxe," (SEW-D model)"),Kxe.forEach(t),TWo=i(bo),rF=n(bo,"LI",{});var Zxe=s(rF);Qhe=n(Zxe,"STRONG",{});var Rft=s(Qhe);MWo=r(Rft,"unispeech"),Rft.forEach(t),EWo=r(Zxe," \u2014 "),jV=n(Zxe,"A",{href:!0});var Bft=s(jV);CWo=r(Bft,"UniSpeechForSequenceClassification"),Bft.forEach(t),wWo=r(Zxe," (UniSpeech model)"),Zxe.forEach(t),AWo=i(bo),tF=n(bo,"LI",{});var e9e=s(tF);Whe=n(e9e,"STRONG",{});var Pft=s(Whe);yWo=r(Pft,"unispeech-sat"),Pft.forEach(t),LWo=r(e9e," \u2014 "),DV=n(e9e,"A",{href:!0});var Ift=s(DV);xWo=r(Ift,"UniSpeechSatForSequenceClassification"),Ift.forEach(t),$Wo=r(e9e," (UniSpeechSat model)"),e9e.forEach(t),kWo=i(bo),aF=n(bo,"LI",{});var o9e=s(aF);Hhe=n(o9e,"STRONG",{});var qft=s(Hhe);SWo=r(qft,"wav2vec2"),qft.forEach(t),RWo=r(o9e," \u2014 "),GV=n(o9e,"A",{href:!0});var Nft=s(GV);BWo=r(Nft,"Wav2Vec2ForSequenceClassification"),Nft.forEach(t),PWo=r(o9e," (Wav2Vec2 model)"),o9e.forEach(t),IWo=i(bo),nF=n(bo,"LI",{});var r9e=s(nF);Uhe=n(r9e,"STRONG",{});var jft=s(Uhe);qWo=r(jft,"wavlm"),jft.forEach(t),NWo=r(r9e," \u2014 "),OV=n(r9e,"A",{href:!0});var Dft=s(OV);jWo=r(Dft,"WavLMForSequenceClassification"),Dft.forEach(t),DWo=r(r9e," (WavLM model)"),r9e.forEach(t),bo.forEach(t),GWo=i(ma),sF=n(ma,"P",{});var t9e=s(sF);OWo=r(t9e,"The model is set in evaluation mode by default using "),Jhe=n(t9e,"CODE",{});var Gft=s(Jhe);VWo=r(Gft,"model.eval()"),Gft.forEach(t),XWo=r(t9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=n(t9e,"CODE",{});var Oft=s(Yhe);zWo=r(Oft,"model.train()"),Oft.forEach(t),t9e.forEach(t),QWo=i(ma),T(lF.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),cIe=i(f),dd=n(f,"H2",{class:!0});var hNe=s(dd);iF=n(hNe,"A",{id:!0,class:!0,href:!0});var Vft=s(iF);Khe=n(Vft,"SPAN",{});var Xft=s(Khe);T(B6.$$.fragment,Xft),Xft.forEach(t),Vft.forEach(t),WWo=i(hNe),Zhe=n(hNe,"SPAN",{});var zft=s(Zhe);HWo=r(zft,"AutoModelForAudioFrameClassification"),zft.forEach(t),hNe.forEach(t),fIe=i(f),Oo=n(f,"DIV",{class:!0});var el=s(Oo);T(P6.$$.fragment,el),UWo=i(el),cd=n(el,"P",{});var yK=s(cd);JWo=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),VV=n(yK,"A",{href:!0});var Qft=s(VV);YWo=r(Qft,"from_pretrained()"),Qft.forEach(t),KWo=r(yK," class method or the "),XV=n(yK,"A",{href:!0});var Wft=s(XV);ZWo=r(Wft,"from_config()"),Wft.forEach(t),eHo=r(yK,` class
method.`),yK.forEach(t),oHo=i(el),I6=n(el,"P",{});var pNe=s(I6);rHo=r(pNe,"This class cannot be instantiated directly using "),epe=n(pNe,"CODE",{});var Hft=s(epe);tHo=r(Hft,"__init__()"),Hft.forEach(t),aHo=r(pNe," (throws an error)."),pNe.forEach(t),nHo=i(el),ut=n(el,"DIV",{class:!0});var E3=s(ut);T(q6.$$.fragment,E3),sHo=i(E3),ope=n(E3,"P",{});var Uft=s(ope);lHo=r(Uft,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Uft.forEach(t),iHo=i(E3),fd=n(E3,"P",{});var LK=s(fd);dHo=r(LK,`Note:
Loading a model from its configuration file does `),rpe=n(LK,"STRONG",{});var Jft=s(rpe);cHo=r(Jft,"not"),Jft.forEach(t),fHo=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=n(LK,"A",{href:!0});var Yft=s(zV);mHo=r(Yft,"from_pretrained()"),Yft.forEach(t),gHo=r(LK," to load the model weights."),LK.forEach(t),hHo=i(E3),T(dF.$$.fragment,E3),E3.forEach(t),pHo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(N6.$$.fragment,ga),uHo=i(ga),tpe=n(ga,"P",{});var Kft=s(tpe);_Ho=r(Kft,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Kft.forEach(t),bHo=i(ga),Da=n(ga,"P",{});var C3=s(Da);vHo=r(C3,"The model class to instantiate is selected based on the "),ape=n(C3,"CODE",{});var Zft=s(ape);FHo=r(Zft,"model_type"),Zft.forEach(t),THo=r(C3,` property of the config object (either
passed as an argument or loaded from `),npe=n(C3,"CODE",{});var emt=s(npe);MHo=r(emt,"pretrained_model_name_or_path"),emt.forEach(t),EHo=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=n(C3,"CODE",{});var omt=s(spe);CHo=r(omt,"pretrained_model_name_or_path"),omt.forEach(t),wHo=r(C3,":"),C3.forEach(t),AHo=i(ga),Ga=n(ga,"UL",{});var w3=s(Ga);cF=n(w3,"LI",{});var a9e=s(cF);lpe=n(a9e,"STRONG",{});var rmt=s(lpe);yHo=r(rmt,"data2vec-audio"),rmt.forEach(t),LHo=r(a9e," \u2014 "),QV=n(a9e,"A",{href:!0});var tmt=s(QV);xHo=r(tmt,"Data2VecAudioForAudioFrameClassification"),tmt.forEach(t),$Ho=r(a9e," (Data2VecAudio model)"),a9e.forEach(t),kHo=i(w3),fF=n(w3,"LI",{});var n9e=s(fF);ipe=n(n9e,"STRONG",{});var amt=s(ipe);SHo=r(amt,"unispeech-sat"),amt.forEach(t),RHo=r(n9e," \u2014 "),WV=n(n9e,"A",{href:!0});var nmt=s(WV);BHo=r(nmt,"UniSpeechSatForAudioFrameClassification"),nmt.forEach(t),PHo=r(n9e," (UniSpeechSat model)"),n9e.forEach(t),IHo=i(w3),mF=n(w3,"LI",{});var s9e=s(mF);dpe=n(s9e,"STRONG",{});var smt=s(dpe);qHo=r(smt,"wav2vec2"),smt.forEach(t),NHo=r(s9e," \u2014 "),HV=n(s9e,"A",{href:!0});var lmt=s(HV);jHo=r(lmt,"Wav2Vec2ForAudioFrameClassification"),lmt.forEach(t),DHo=r(s9e," (Wav2Vec2 model)"),s9e.forEach(t),GHo=i(w3),gF=n(w3,"LI",{});var l9e=s(gF);cpe=n(l9e,"STRONG",{});var imt=s(cpe);OHo=r(imt,"wavlm"),imt.forEach(t),VHo=r(l9e," \u2014 "),UV=n(l9e,"A",{href:!0});var dmt=s(UV);XHo=r(dmt,"WavLMForAudioFrameClassification"),dmt.forEach(t),zHo=r(l9e," (WavLM model)"),l9e.forEach(t),w3.forEach(t),QHo=i(ga),hF=n(ga,"P",{});var i9e=s(hF);WHo=r(i9e,"The model is set in evaluation mode by default using "),fpe=n(i9e,"CODE",{});var cmt=s(fpe);HHo=r(cmt,"model.eval()"),cmt.forEach(t),UHo=r(i9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=n(i9e,"CODE",{});var fmt=s(mpe);JHo=r(fmt,"model.train()"),fmt.forEach(t),i9e.forEach(t),YHo=i(ga),T(pF.$$.fragment,ga),ga.forEach(t),el.forEach(t),mIe=i(f),md=n(f,"H2",{class:!0});var uNe=s(md);uF=n(uNe,"A",{id:!0,class:!0,href:!0});var mmt=s(uF);gpe=n(mmt,"SPAN",{});var gmt=s(gpe);T(j6.$$.fragment,gmt),gmt.forEach(t),mmt.forEach(t),KHo=i(uNe),hpe=n(uNe,"SPAN",{});var hmt=s(hpe);ZHo=r(hmt,"AutoModelForCTC"),hmt.forEach(t),uNe.forEach(t),gIe=i(f),Vo=n(f,"DIV",{class:!0});var ol=s(Vo);T(D6.$$.fragment,ol),eUo=i(ol),gd=n(ol,"P",{});var xK=s(gd);oUo=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),JV=n(xK,"A",{href:!0});var pmt=s(JV);rUo=r(pmt,"from_pretrained()"),pmt.forEach(t),tUo=r(xK," class method or the "),YV=n(xK,"A",{href:!0});var umt=s(YV);aUo=r(umt,"from_config()"),umt.forEach(t),nUo=r(xK,` class
method.`),xK.forEach(t),sUo=i(ol),G6=n(ol,"P",{});var _Ne=s(G6);lUo=r(_Ne,"This class cannot be instantiated directly using "),ppe=n(_Ne,"CODE",{});var _mt=s(ppe);iUo=r(_mt,"__init__()"),_mt.forEach(t),dUo=r(_Ne," (throws an error)."),_Ne.forEach(t),cUo=i(ol),_t=n(ol,"DIV",{class:!0});var A3=s(_t);T(O6.$$.fragment,A3),fUo=i(A3),upe=n(A3,"P",{});var bmt=s(upe);mUo=r(bmt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),bmt.forEach(t),gUo=i(A3),hd=n(A3,"P",{});var $K=s(hd);hUo=r($K,`Note:
Loading a model from its configuration file does `),_pe=n($K,"STRONG",{});var vmt=s(_pe);pUo=r(vmt,"not"),vmt.forEach(t),uUo=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=n($K,"A",{href:!0});var Fmt=s(KV);_Uo=r(Fmt,"from_pretrained()"),Fmt.forEach(t),bUo=r($K," to load the model weights."),$K.forEach(t),vUo=i(A3),T(_F.$$.fragment,A3),A3.forEach(t),FUo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(V6.$$.fragment,ha),TUo=i(ha),bpe=n(ha,"P",{});var Tmt=s(bpe);MUo=r(Tmt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Tmt.forEach(t),EUo=i(ha),Oa=n(ha,"P",{});var y3=s(Oa);CUo=r(y3,"The model class to instantiate is selected based on the "),vpe=n(y3,"CODE",{});var Mmt=s(vpe);wUo=r(Mmt,"model_type"),Mmt.forEach(t),AUo=r(y3,` property of the config object (either
passed as an argument or loaded from `),Fpe=n(y3,"CODE",{});var Emt=s(Fpe);yUo=r(Emt,"pretrained_model_name_or_path"),Emt.forEach(t),LUo=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=n(y3,"CODE",{});var Cmt=s(Tpe);xUo=r(Cmt,"pretrained_model_name_or_path"),Cmt.forEach(t),$Uo=r(y3,":"),y3.forEach(t),kUo=i(ha),je=n(ha,"UL",{});var vo=s(je);bF=n(vo,"LI",{});var d9e=s(bF);Mpe=n(d9e,"STRONG",{});var wmt=s(Mpe);SUo=r(wmt,"data2vec-audio"),wmt.forEach(t),RUo=r(d9e," \u2014 "),ZV=n(d9e,"A",{href:!0});var Amt=s(ZV);BUo=r(Amt,"Data2VecAudioForCTC"),Amt.forEach(t),PUo=r(d9e," (Data2VecAudio model)"),d9e.forEach(t),IUo=i(vo),vF=n(vo,"LI",{});var c9e=s(vF);Epe=n(c9e,"STRONG",{});var ymt=s(Epe);qUo=r(ymt,"hubert"),ymt.forEach(t),NUo=r(c9e," \u2014 "),eX=n(c9e,"A",{href:!0});var Lmt=s(eX);jUo=r(Lmt,"HubertForCTC"),Lmt.forEach(t),DUo=r(c9e," (Hubert model)"),c9e.forEach(t),GUo=i(vo),FF=n(vo,"LI",{});var f9e=s(FF);Cpe=n(f9e,"STRONG",{});var xmt=s(Cpe);OUo=r(xmt,"sew"),xmt.forEach(t),VUo=r(f9e," \u2014 "),oX=n(f9e,"A",{href:!0});var $mt=s(oX);XUo=r($mt,"SEWForCTC"),$mt.forEach(t),zUo=r(f9e," (SEW model)"),f9e.forEach(t),QUo=i(vo),TF=n(vo,"LI",{});var m9e=s(TF);wpe=n(m9e,"STRONG",{});var kmt=s(wpe);WUo=r(kmt,"sew-d"),kmt.forEach(t),HUo=r(m9e," \u2014 "),rX=n(m9e,"A",{href:!0});var Smt=s(rX);UUo=r(Smt,"SEWDForCTC"),Smt.forEach(t),JUo=r(m9e," (SEW-D model)"),m9e.forEach(t),YUo=i(vo),MF=n(vo,"LI",{});var g9e=s(MF);Ape=n(g9e,"STRONG",{});var Rmt=s(Ape);KUo=r(Rmt,"unispeech"),Rmt.forEach(t),ZUo=r(g9e," \u2014 "),tX=n(g9e,"A",{href:!0});var Bmt=s(tX);eJo=r(Bmt,"UniSpeechForCTC"),Bmt.forEach(t),oJo=r(g9e," (UniSpeech model)"),g9e.forEach(t),rJo=i(vo),EF=n(vo,"LI",{});var h9e=s(EF);ype=n(h9e,"STRONG",{});var Pmt=s(ype);tJo=r(Pmt,"unispeech-sat"),Pmt.forEach(t),aJo=r(h9e," \u2014 "),aX=n(h9e,"A",{href:!0});var Imt=s(aX);nJo=r(Imt,"UniSpeechSatForCTC"),Imt.forEach(t),sJo=r(h9e," (UniSpeechSat model)"),h9e.forEach(t),lJo=i(vo),CF=n(vo,"LI",{});var p9e=s(CF);Lpe=n(p9e,"STRONG",{});var qmt=s(Lpe);iJo=r(qmt,"wav2vec2"),qmt.forEach(t),dJo=r(p9e," \u2014 "),nX=n(p9e,"A",{href:!0});var Nmt=s(nX);cJo=r(Nmt,"Wav2Vec2ForCTC"),Nmt.forEach(t),fJo=r(p9e," (Wav2Vec2 model)"),p9e.forEach(t),mJo=i(vo),wF=n(vo,"LI",{});var u9e=s(wF);xpe=n(u9e,"STRONG",{});var jmt=s(xpe);gJo=r(jmt,"wavlm"),jmt.forEach(t),hJo=r(u9e," \u2014 "),sX=n(u9e,"A",{href:!0});var Dmt=s(sX);pJo=r(Dmt,"WavLMForCTC"),Dmt.forEach(t),uJo=r(u9e," (WavLM model)"),u9e.forEach(t),vo.forEach(t),_Jo=i(ha),AF=n(ha,"P",{});var _9e=s(AF);bJo=r(_9e,"The model is set in evaluation mode by default using "),$pe=n(_9e,"CODE",{});var Gmt=s($pe);vJo=r(Gmt,"model.eval()"),Gmt.forEach(t),FJo=r(_9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kpe=n(_9e,"CODE",{});var Omt=s(kpe);TJo=r(Omt,"model.train()"),Omt.forEach(t),_9e.forEach(t),MJo=i(ha),T(yF.$$.fragment,ha),ha.forEach(t),ol.forEach(t),hIe=i(f),pd=n(f,"H2",{class:!0});var bNe=s(pd);LF=n(bNe,"A",{id:!0,class:!0,href:!0});var Vmt=s(LF);Spe=n(Vmt,"SPAN",{});var Xmt=s(Spe);T(X6.$$.fragment,Xmt),Xmt.forEach(t),Vmt.forEach(t),EJo=i(bNe),Rpe=n(bNe,"SPAN",{});var zmt=s(Rpe);CJo=r(zmt,"AutoModelForSpeechSeq2Seq"),zmt.forEach(t),bNe.forEach(t),pIe=i(f),Xo=n(f,"DIV",{class:!0});var rl=s(Xo);T(z6.$$.fragment,rl),wJo=i(rl),ud=n(rl,"P",{});var kK=s(ud);AJo=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lX=n(kK,"A",{href:!0});var Qmt=s(lX);yJo=r(Qmt,"from_pretrained()"),Qmt.forEach(t),LJo=r(kK," class method or the "),iX=n(kK,"A",{href:!0});var Wmt=s(iX);xJo=r(Wmt,"from_config()"),Wmt.forEach(t),$Jo=r(kK,` class
method.`),kK.forEach(t),kJo=i(rl),Q6=n(rl,"P",{});var vNe=s(Q6);SJo=r(vNe,"This class cannot be instantiated directly using "),Bpe=n(vNe,"CODE",{});var Hmt=s(Bpe);RJo=r(Hmt,"__init__()"),Hmt.forEach(t),BJo=r(vNe," (throws an error)."),vNe.forEach(t),PJo=i(rl),bt=n(rl,"DIV",{class:!0});var L3=s(bt);T(W6.$$.fragment,L3),IJo=i(L3),Ppe=n(L3,"P",{});var Umt=s(Ppe);qJo=r(Umt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Umt.forEach(t),NJo=i(L3),_d=n(L3,"P",{});var SK=s(_d);jJo=r(SK,`Note:
Loading a model from its configuration file does `),Ipe=n(SK,"STRONG",{});var Jmt=s(Ipe);DJo=r(Jmt,"not"),Jmt.forEach(t),GJo=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=n(SK,"A",{href:!0});var Ymt=s(dX);OJo=r(Ymt,"from_pretrained()"),Ymt.forEach(t),VJo=r(SK," to load the model weights."),SK.forEach(t),XJo=i(L3),T(xF.$$.fragment,L3),L3.forEach(t),zJo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(H6.$$.fragment,pa),QJo=i(pa),qpe=n(pa,"P",{});var Kmt=s(qpe);WJo=r(Kmt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Kmt.forEach(t),HJo=i(pa),Va=n(pa,"P",{});var x3=s(Va);UJo=r(x3,"The model class to instantiate is selected based on the "),Npe=n(x3,"CODE",{});var Zmt=s(Npe);JJo=r(Zmt,"model_type"),Zmt.forEach(t),YJo=r(x3,` property of the config object (either
passed as an argument or loaded from `),jpe=n(x3,"CODE",{});var egt=s(jpe);KJo=r(egt,"pretrained_model_name_or_path"),egt.forEach(t),ZJo=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=n(x3,"CODE",{});var ogt=s(Dpe);eYo=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),oYo=r(x3,":"),x3.forEach(t),rYo=i(pa),U6=n(pa,"UL",{});var FNe=s(U6);$F=n(FNe,"LI",{});var b9e=s($F);Gpe=n(b9e,"STRONG",{});var rgt=s(Gpe);tYo=r(rgt,"speech-encoder-decoder"),rgt.forEach(t),aYo=r(b9e," \u2014 "),cX=n(b9e,"A",{href:!0});var tgt=s(cX);nYo=r(tgt,"SpeechEncoderDecoderModel"),tgt.forEach(t),sYo=r(b9e," (Speech Encoder decoder model)"),b9e.forEach(t),lYo=i(FNe),kF=n(FNe,"LI",{});var v9e=s(kF);Ope=n(v9e,"STRONG",{});var agt=s(Ope);iYo=r(agt,"speech_to_text"),agt.forEach(t),dYo=r(v9e," \u2014 "),fX=n(v9e,"A",{href:!0});var ngt=s(fX);cYo=r(ngt,"Speech2TextForConditionalGeneration"),ngt.forEach(t),fYo=r(v9e," (Speech2Text model)"),v9e.forEach(t),FNe.forEach(t),mYo=i(pa),SF=n(pa,"P",{});var F9e=s(SF);gYo=r(F9e,"The model is set in evaluation mode by default using "),Vpe=n(F9e,"CODE",{});var sgt=s(Vpe);hYo=r(sgt,"model.eval()"),sgt.forEach(t),pYo=r(F9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=n(F9e,"CODE",{});var lgt=s(Xpe);uYo=r(lgt,"model.train()"),lgt.forEach(t),F9e.forEach(t),_Yo=i(pa),T(RF.$$.fragment,pa),pa.forEach(t),rl.forEach(t),uIe=i(f),bd=n(f,"H2",{class:!0});var TNe=s(bd);BF=n(TNe,"A",{id:!0,class:!0,href:!0});var igt=s(BF);zpe=n(igt,"SPAN",{});var dgt=s(zpe);T(J6.$$.fragment,dgt),dgt.forEach(t),igt.forEach(t),bYo=i(TNe),Qpe=n(TNe,"SPAN",{});var cgt=s(Qpe);vYo=r(cgt,"AutoModelForAudioXVector"),cgt.forEach(t),TNe.forEach(t),_Ie=i(f),zo=n(f,"DIV",{class:!0});var tl=s(zo);T(Y6.$$.fragment,tl),FYo=i(tl),vd=n(tl,"P",{});var RK=s(vd);TYo=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),mX=n(RK,"A",{href:!0});var fgt=s(mX);MYo=r(fgt,"from_pretrained()"),fgt.forEach(t),EYo=r(RK," class method or the "),gX=n(RK,"A",{href:!0});var mgt=s(gX);CYo=r(mgt,"from_config()"),mgt.forEach(t),wYo=r(RK,` class
method.`),RK.forEach(t),AYo=i(tl),K6=n(tl,"P",{});var MNe=s(K6);yYo=r(MNe,"This class cannot be instantiated directly using "),Wpe=n(MNe,"CODE",{});var ggt=s(Wpe);LYo=r(ggt,"__init__()"),ggt.forEach(t),xYo=r(MNe," (throws an error)."),MNe.forEach(t),$Yo=i(tl),vt=n(tl,"DIV",{class:!0});var $3=s(vt);T(Z6.$$.fragment,$3),kYo=i($3),Hpe=n($3,"P",{});var hgt=s(Hpe);SYo=r(hgt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),hgt.forEach(t),RYo=i($3),Fd=n($3,"P",{});var BK=s(Fd);BYo=r(BK,`Note:
Loading a model from its configuration file does `),Upe=n(BK,"STRONG",{});var pgt=s(Upe);PYo=r(pgt,"not"),pgt.forEach(t),IYo=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=n(BK,"A",{href:!0});var ugt=s(hX);qYo=r(ugt,"from_pretrained()"),ugt.forEach(t),NYo=r(BK," to load the model weights."),BK.forEach(t),jYo=i($3),T(PF.$$.fragment,$3),$3.forEach(t),DYo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(ey.$$.fragment,ua),GYo=i(ua),Jpe=n(ua,"P",{});var _gt=s(Jpe);OYo=r(_gt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),_gt.forEach(t),VYo=i(ua),Xa=n(ua,"P",{});var k3=s(Xa);XYo=r(k3,"The model class to instantiate is selected based on the "),Ype=n(k3,"CODE",{});var bgt=s(Ype);zYo=r(bgt,"model_type"),bgt.forEach(t),QYo=r(k3,` property of the config object (either
passed as an argument or loaded from `),Kpe=n(k3,"CODE",{});var vgt=s(Kpe);WYo=r(vgt,"pretrained_model_name_or_path"),vgt.forEach(t),HYo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=n(k3,"CODE",{});var Fgt=s(Zpe);UYo=r(Fgt,"pretrained_model_name_or_path"),Fgt.forEach(t),JYo=r(k3,":"),k3.forEach(t),YYo=i(ua),za=n(ua,"UL",{});var S3=s(za);IF=n(S3,"LI",{});var T9e=s(IF);eue=n(T9e,"STRONG",{});var Tgt=s(eue);KYo=r(Tgt,"data2vec-audio"),Tgt.forEach(t),ZYo=r(T9e," \u2014 "),pX=n(T9e,"A",{href:!0});var Mgt=s(pX);eKo=r(Mgt,"Data2VecAudioForXVector"),Mgt.forEach(t),oKo=r(T9e," (Data2VecAudio model)"),T9e.forEach(t),rKo=i(S3),qF=n(S3,"LI",{});var M9e=s(qF);oue=n(M9e,"STRONG",{});var Egt=s(oue);tKo=r(Egt,"unispeech-sat"),Egt.forEach(t),aKo=r(M9e," \u2014 "),uX=n(M9e,"A",{href:!0});var Cgt=s(uX);nKo=r(Cgt,"UniSpeechSatForXVector"),Cgt.forEach(t),sKo=r(M9e," (UniSpeechSat model)"),M9e.forEach(t),lKo=i(S3),NF=n(S3,"LI",{});var E9e=s(NF);rue=n(E9e,"STRONG",{});var wgt=s(rue);iKo=r(wgt,"wav2vec2"),wgt.forEach(t),dKo=r(E9e," \u2014 "),_X=n(E9e,"A",{href:!0});var Agt=s(_X);cKo=r(Agt,"Wav2Vec2ForXVector"),Agt.forEach(t),fKo=r(E9e," (Wav2Vec2 model)"),E9e.forEach(t),mKo=i(S3),jF=n(S3,"LI",{});var C9e=s(jF);tue=n(C9e,"STRONG",{});var ygt=s(tue);gKo=r(ygt,"wavlm"),ygt.forEach(t),hKo=r(C9e," \u2014 "),bX=n(C9e,"A",{href:!0});var Lgt=s(bX);pKo=r(Lgt,"WavLMForXVector"),Lgt.forEach(t),uKo=r(C9e," (WavLM model)"),C9e.forEach(t),S3.forEach(t),_Ko=i(ua),DF=n(ua,"P",{});var w9e=s(DF);bKo=r(w9e,"The model is set in evaluation mode by default using "),aue=n(w9e,"CODE",{});var xgt=s(aue);vKo=r(xgt,"model.eval()"),xgt.forEach(t),FKo=r(w9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nue=n(w9e,"CODE",{});var $gt=s(nue);TKo=r($gt,"model.train()"),$gt.forEach(t),w9e.forEach(t),MKo=i(ua),T(GF.$$.fragment,ua),ua.forEach(t),tl.forEach(t),bIe=i(f),Td=n(f,"H2",{class:!0});var ENe=s(Td);OF=n(ENe,"A",{id:!0,class:!0,href:!0});var kgt=s(OF);sue=n(kgt,"SPAN",{});var Sgt=s(sue);T(oy.$$.fragment,Sgt),Sgt.forEach(t),kgt.forEach(t),EKo=i(ENe),lue=n(ENe,"SPAN",{});var Rgt=s(lue);CKo=r(Rgt,"AutoModelForMaskedImageModeling"),Rgt.forEach(t),ENe.forEach(t),vIe=i(f),Qo=n(f,"DIV",{class:!0});var al=s(Qo);T(ry.$$.fragment,al),wKo=i(al),Md=n(al,"P",{});var PK=s(Md);AKo=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),vX=n(PK,"A",{href:!0});var Bgt=s(vX);yKo=r(Bgt,"from_pretrained()"),Bgt.forEach(t),LKo=r(PK," class method or the "),FX=n(PK,"A",{href:!0});var Pgt=s(FX);xKo=r(Pgt,"from_config()"),Pgt.forEach(t),$Ko=r(PK,` class
method.`),PK.forEach(t),kKo=i(al),ty=n(al,"P",{});var CNe=s(ty);SKo=r(CNe,"This class cannot be instantiated directly using "),iue=n(CNe,"CODE",{});var Igt=s(iue);RKo=r(Igt,"__init__()"),Igt.forEach(t),BKo=r(CNe," (throws an error)."),CNe.forEach(t),PKo=i(al),Ft=n(al,"DIV",{class:!0});var R3=s(Ft);T(ay.$$.fragment,R3),IKo=i(R3),due=n(R3,"P",{});var qgt=s(due);qKo=r(qgt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),qgt.forEach(t),NKo=i(R3),Ed=n(R3,"P",{});var IK=s(Ed);jKo=r(IK,`Note:
Loading a model from its configuration file does `),cue=n(IK,"STRONG",{});var Ngt=s(cue);DKo=r(Ngt,"not"),Ngt.forEach(t),GKo=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TX=n(IK,"A",{href:!0});var jgt=s(TX);OKo=r(jgt,"from_pretrained()"),jgt.forEach(t),VKo=r(IK," to load the model weights."),IK.forEach(t),XKo=i(R3),T(VF.$$.fragment,R3),R3.forEach(t),zKo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(ny.$$.fragment,_a),QKo=i(_a),fue=n(_a,"P",{});var Dgt=s(fue);WKo=r(Dgt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Dgt.forEach(t),HKo=i(_a),Qa=n(_a,"P",{});var B3=s(Qa);UKo=r(B3,"The model class to instantiate is selected based on the "),mue=n(B3,"CODE",{});var Ggt=s(mue);JKo=r(Ggt,"model_type"),Ggt.forEach(t),YKo=r(B3,` property of the config object (either
passed as an argument or loaded from `),gue=n(B3,"CODE",{});var Ogt=s(gue);KKo=r(Ogt,"pretrained_model_name_or_path"),Ogt.forEach(t),ZKo=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hue=n(B3,"CODE",{});var Vgt=s(hue);eZo=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),oZo=r(B3,":"),B3.forEach(t),rZo=i(_a),Cd=n(_a,"UL",{});var qK=s(Cd);XF=n(qK,"LI",{});var A9e=s(XF);pue=n(A9e,"STRONG",{});var Xgt=s(pue);tZo=r(Xgt,"deit"),Xgt.forEach(t),aZo=r(A9e," \u2014 "),MX=n(A9e,"A",{href:!0});var zgt=s(MX);nZo=r(zgt,"DeiTForMaskedImageModeling"),zgt.forEach(t),sZo=r(A9e," (DeiT model)"),A9e.forEach(t),lZo=i(qK),zF=n(qK,"LI",{});var y9e=s(zF);uue=n(y9e,"STRONG",{});var Qgt=s(uue);iZo=r(Qgt,"swin"),Qgt.forEach(t),dZo=r(y9e," \u2014 "),EX=n(y9e,"A",{href:!0});var Wgt=s(EX);cZo=r(Wgt,"SwinForMaskedImageModeling"),Wgt.forEach(t),fZo=r(y9e," (Swin model)"),y9e.forEach(t),mZo=i(qK),QF=n(qK,"LI",{});var L9e=s(QF);_ue=n(L9e,"STRONG",{});var Hgt=s(_ue);gZo=r(Hgt,"vit"),Hgt.forEach(t),hZo=r(L9e," \u2014 "),CX=n(L9e,"A",{href:!0});var Ugt=s(CX);pZo=r(Ugt,"ViTForMaskedImageModeling"),Ugt.forEach(t),uZo=r(L9e," (ViT model)"),L9e.forEach(t),qK.forEach(t),_Zo=i(_a),WF=n(_a,"P",{});var x9e=s(WF);bZo=r(x9e,"The model is set in evaluation mode by default using "),bue=n(x9e,"CODE",{});var Jgt=s(bue);vZo=r(Jgt,"model.eval()"),Jgt.forEach(t),FZo=r(x9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=n(x9e,"CODE",{});var Ygt=s(vue);TZo=r(Ygt,"model.train()"),Ygt.forEach(t),x9e.forEach(t),MZo=i(_a),T(HF.$$.fragment,_a),_a.forEach(t),al.forEach(t),FIe=i(f),wd=n(f,"H2",{class:!0});var wNe=s(wd);UF=n(wNe,"A",{id:!0,class:!0,href:!0});var Kgt=s(UF);Fue=n(Kgt,"SPAN",{});var Zgt=s(Fue);T(sy.$$.fragment,Zgt),Zgt.forEach(t),Kgt.forEach(t),EZo=i(wNe),Tue=n(wNe,"SPAN",{});var eht=s(Tue);CZo=r(eht,"AutoModelForObjectDetection"),eht.forEach(t),wNe.forEach(t),TIe=i(f),Wo=n(f,"DIV",{class:!0});var nl=s(Wo);T(ly.$$.fragment,nl),wZo=i(nl),Ad=n(nl,"P",{});var NK=s(Ad);AZo=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),wX=n(NK,"A",{href:!0});var oht=s(wX);yZo=r(oht,"from_pretrained()"),oht.forEach(t),LZo=r(NK," class method or the "),AX=n(NK,"A",{href:!0});var rht=s(AX);xZo=r(rht,"from_config()"),rht.forEach(t),$Zo=r(NK,` class
method.`),NK.forEach(t),kZo=i(nl),iy=n(nl,"P",{});var ANe=s(iy);SZo=r(ANe,"This class cannot be instantiated directly using "),Mue=n(ANe,"CODE",{});var tht=s(Mue);RZo=r(tht,"__init__()"),tht.forEach(t),BZo=r(ANe," (throws an error)."),ANe.forEach(t),PZo=i(nl),Tt=n(nl,"DIV",{class:!0});var P3=s(Tt);T(dy.$$.fragment,P3),IZo=i(P3),Eue=n(P3,"P",{});var aht=s(Eue);qZo=r(aht,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),aht.forEach(t),NZo=i(P3),yd=n(P3,"P",{});var jK=s(yd);jZo=r(jK,`Note:
Loading a model from its configuration file does `),Cue=n(jK,"STRONG",{});var nht=s(Cue);DZo=r(nht,"not"),nht.forEach(t),GZo=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=n(jK,"A",{href:!0});var sht=s(yX);OZo=r(sht,"from_pretrained()"),sht.forEach(t),VZo=r(jK," to load the model weights."),jK.forEach(t),XZo=i(P3),T(JF.$$.fragment,P3),P3.forEach(t),zZo=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(cy.$$.fragment,ba),QZo=i(ba),wue=n(ba,"P",{});var lht=s(wue);WZo=r(lht,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),lht.forEach(t),HZo=i(ba),Wa=n(ba,"P",{});var I3=s(Wa);UZo=r(I3,"The model class to instantiate is selected based on the "),Aue=n(I3,"CODE",{});var iht=s(Aue);JZo=r(iht,"model_type"),iht.forEach(t),YZo=r(I3,` property of the config object (either
passed as an argument or loaded from `),yue=n(I3,"CODE",{});var dht=s(yue);KZo=r(dht,"pretrained_model_name_or_path"),dht.forEach(t),ZZo=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=n(I3,"CODE",{});var cht=s(Lue);eer=r(cht,"pretrained_model_name_or_path"),cht.forEach(t),oer=r(I3,":"),I3.forEach(t),rer=i(ba),fy=n(ba,"UL",{});var yNe=s(fy);YF=n(yNe,"LI",{});var $9e=s(YF);xue=n($9e,"STRONG",{});var fht=s(xue);ter=r(fht,"detr"),fht.forEach(t),aer=r($9e," \u2014 "),LX=n($9e,"A",{href:!0});var mht=s(LX);ner=r(mht,"DetrForObjectDetection"),mht.forEach(t),ser=r($9e," (DETR model)"),$9e.forEach(t),ler=i(yNe),KF=n(yNe,"LI",{});var k9e=s(KF);$ue=n(k9e,"STRONG",{});var ght=s($ue);ier=r(ght,"yolos"),ght.forEach(t),der=r(k9e," \u2014 "),xX=n(k9e,"A",{href:!0});var hht=s(xX);cer=r(hht,"YolosForObjectDetection"),hht.forEach(t),fer=r(k9e," (YOLOS model)"),k9e.forEach(t),yNe.forEach(t),mer=i(ba),ZF=n(ba,"P",{});var S9e=s(ZF);ger=r(S9e,"The model is set in evaluation mode by default using "),kue=n(S9e,"CODE",{});var pht=s(kue);her=r(pht,"model.eval()"),pht.forEach(t),per=r(S9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=n(S9e,"CODE",{});var uht=s(Sue);uer=r(uht,"model.train()"),uht.forEach(t),S9e.forEach(t),_er=i(ba),T(e0.$$.fragment,ba),ba.forEach(t),nl.forEach(t),MIe=i(f),Ld=n(f,"H2",{class:!0});var LNe=s(Ld);o0=n(LNe,"A",{id:!0,class:!0,href:!0});var _ht=s(o0);Rue=n(_ht,"SPAN",{});var bht=s(Rue);T(my.$$.fragment,bht),bht.forEach(t),_ht.forEach(t),ber=i(LNe),Bue=n(LNe,"SPAN",{});var vht=s(Bue);ver=r(vht,"AutoModelForImageSegmentation"),vht.forEach(t),LNe.forEach(t),EIe=i(f),Ho=n(f,"DIV",{class:!0});var sl=s(Ho);T(gy.$$.fragment,sl),Fer=i(sl),xd=n(sl,"P",{});var DK=s(xd);Ter=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),$X=n(DK,"A",{href:!0});var Fht=s($X);Mer=r(Fht,"from_pretrained()"),Fht.forEach(t),Eer=r(DK," class method or the "),kX=n(DK,"A",{href:!0});var Tht=s(kX);Cer=r(Tht,"from_config()"),Tht.forEach(t),wer=r(DK,` class
method.`),DK.forEach(t),Aer=i(sl),hy=n(sl,"P",{});var xNe=s(hy);yer=r(xNe,"This class cannot be instantiated directly using "),Pue=n(xNe,"CODE",{});var Mht=s(Pue);Ler=r(Mht,"__init__()"),Mht.forEach(t),xer=r(xNe," (throws an error)."),xNe.forEach(t),$er=i(sl),Mt=n(sl,"DIV",{class:!0});var q3=s(Mt);T(py.$$.fragment,q3),ker=i(q3),Iue=n(q3,"P",{});var Eht=s(Iue);Ser=r(Eht,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Eht.forEach(t),Rer=i(q3),$d=n(q3,"P",{});var GK=s($d);Ber=r(GK,`Note:
Loading a model from its configuration file does `),que=n(GK,"STRONG",{});var Cht=s(que);Per=r(Cht,"not"),Cht.forEach(t),Ier=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(GK,"A",{href:!0});var wht=s(SX);qer=r(wht,"from_pretrained()"),wht.forEach(t),Ner=r(GK," to load the model weights."),GK.forEach(t),jer=i(q3),T(r0.$$.fragment,q3),q3.forEach(t),Der=i(sl),po=n(sl,"DIV",{class:!0});var va=s(po);T(uy.$$.fragment,va),Ger=i(va),Nue=n(va,"P",{});var Aht=s(Nue);Oer=r(Aht,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Aht.forEach(t),Ver=i(va),Ha=n(va,"P",{});var N3=s(Ha);Xer=r(N3,"The model class to instantiate is selected based on the "),jue=n(N3,"CODE",{});var yht=s(jue);zer=r(yht,"model_type"),yht.forEach(t),Qer=r(N3,` property of the config object (either
passed as an argument or loaded from `),Due=n(N3,"CODE",{});var Lht=s(Due);Wer=r(Lht,"pretrained_model_name_or_path"),Lht.forEach(t),Her=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=n(N3,"CODE",{});var xht=s(Gue);Uer=r(xht,"pretrained_model_name_or_path"),xht.forEach(t),Jer=r(N3,":"),N3.forEach(t),Yer=i(va),Oue=n(va,"UL",{});var $ht=s(Oue);t0=n($ht,"LI",{});var R9e=s(t0);Vue=n(R9e,"STRONG",{});var kht=s(Vue);Ker=r(kht,"detr"),kht.forEach(t),Zer=r(R9e," \u2014 "),RX=n(R9e,"A",{href:!0});var Sht=s(RX);eor=r(Sht,"DetrForSegmentation"),Sht.forEach(t),oor=r(R9e," (DETR model)"),R9e.forEach(t),$ht.forEach(t),ror=i(va),a0=n(va,"P",{});var B9e=s(a0);tor=r(B9e,"The model is set in evaluation mode by default using "),Xue=n(B9e,"CODE",{});var Rht=s(Xue);aor=r(Rht,"model.eval()"),Rht.forEach(t),nor=r(B9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=n(B9e,"CODE",{});var Bht=s(zue);sor=r(Bht,"model.train()"),Bht.forEach(t),B9e.forEach(t),lor=i(va),T(n0.$$.fragment,va),va.forEach(t),sl.forEach(t),CIe=i(f),kd=n(f,"H2",{class:!0});var $Ne=s(kd);s0=n($Ne,"A",{id:!0,class:!0,href:!0});var Pht=s(s0);Que=n(Pht,"SPAN",{});var Iht=s(Que);T(_y.$$.fragment,Iht),Iht.forEach(t),Pht.forEach(t),ior=i($Ne),Wue=n($Ne,"SPAN",{});var qht=s(Wue);dor=r(qht,"AutoModelForSemanticSegmentation"),qht.forEach(t),$Ne.forEach(t),wIe=i(f),Uo=n(f,"DIV",{class:!0});var ll=s(Uo);T(by.$$.fragment,ll),cor=i(ll),Sd=n(ll,"P",{});var OK=s(Sd);mor=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),BX=n(OK,"A",{href:!0});var Nht=s(BX);gor=r(Nht,"from_pretrained()"),Nht.forEach(t),hor=r(OK," class method or the "),PX=n(OK,"A",{href:!0});var jht=s(PX);por=r(jht,"from_config()"),jht.forEach(t),uor=r(OK,` class
method.`),OK.forEach(t),_or=i(ll),vy=n(ll,"P",{});var kNe=s(vy);bor=r(kNe,"This class cannot be instantiated directly using "),Hue=n(kNe,"CODE",{});var Dht=s(Hue);vor=r(Dht,"__init__()"),Dht.forEach(t),For=r(kNe," (throws an error)."),kNe.forEach(t),Tor=i(ll),Et=n(ll,"DIV",{class:!0});var j3=s(Et);T(Fy.$$.fragment,j3),Mor=i(j3),Uue=n(j3,"P",{});var Ght=s(Uue);Eor=r(Ght,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ght.forEach(t),Cor=i(j3),Rd=n(j3,"P",{});var VK=s(Rd);wor=r(VK,`Note:
Loading a model from its configuration file does `),Jue=n(VK,"STRONG",{});var Oht=s(Jue);Aor=r(Oht,"not"),Oht.forEach(t),yor=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=n(VK,"A",{href:!0});var Vht=s(IX);Lor=r(Vht,"from_pretrained()"),Vht.forEach(t),xor=r(VK," to load the model weights."),VK.forEach(t),$or=i(j3),T(l0.$$.fragment,j3),j3.forEach(t),kor=i(ll),uo=n(ll,"DIV",{class:!0});var Fa=s(uo);T(Ty.$$.fragment,Fa),Sor=i(Fa),Yue=n(Fa,"P",{});var Xht=s(Yue);Ror=r(Xht,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Xht.forEach(t),Bor=i(Fa),Ua=n(Fa,"P",{});var D3=s(Ua);Por=r(D3,"The model class to instantiate is selected based on the "),Kue=n(D3,"CODE",{});var zht=s(Kue);Ior=r(zht,"model_type"),zht.forEach(t),qor=r(D3,` property of the config object (either
passed as an argument or loaded from `),Zue=n(D3,"CODE",{});var Qht=s(Zue);Nor=r(Qht,"pretrained_model_name_or_path"),Qht.forEach(t),jor=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=n(D3,"CODE",{});var Wht=s(e_e);Dor=r(Wht,"pretrained_model_name_or_path"),Wht.forEach(t),Gor=r(D3,":"),D3.forEach(t),Oor=i(Fa),Ja=n(Fa,"UL",{});var G3=s(Ja);i0=n(G3,"LI",{});var P9e=s(i0);o_e=n(P9e,"STRONG",{});var Hht=s(o_e);Vor=r(Hht,"beit"),Hht.forEach(t),Xor=r(P9e," \u2014 "),qX=n(P9e,"A",{href:!0});var Uht=s(qX);zor=r(Uht,"BeitForSemanticSegmentation"),Uht.forEach(t),Qor=r(P9e," (BEiT model)"),P9e.forEach(t),Wor=i(G3),d0=n(G3,"LI",{});var I9e=s(d0);r_e=n(I9e,"STRONG",{});var Jht=s(r_e);Hor=r(Jht,"data2vec-vision"),Jht.forEach(t),Uor=r(I9e," \u2014 "),NX=n(I9e,"A",{href:!0});var Yht=s(NX);Jor=r(Yht,"Data2VecVisionForSemanticSegmentation"),Yht.forEach(t),Yor=r(I9e," (Data2VecVision model)"),I9e.forEach(t),Kor=i(G3),c0=n(G3,"LI",{});var q9e=s(c0);t_e=n(q9e,"STRONG",{});var Kht=s(t_e);Zor=r(Kht,"dpt"),Kht.forEach(t),err=r(q9e," \u2014 "),jX=n(q9e,"A",{href:!0});var Zht=s(jX);orr=r(Zht,"DPTForSemanticSegmentation"),Zht.forEach(t),rrr=r(q9e," (DPT model)"),q9e.forEach(t),trr=i(G3),f0=n(G3,"LI",{});var N9e=s(f0);a_e=n(N9e,"STRONG",{});var ept=s(a_e);arr=r(ept,"segformer"),ept.forEach(t),nrr=r(N9e," \u2014 "),DX=n(N9e,"A",{href:!0});var opt=s(DX);srr=r(opt,"SegformerForSemanticSegmentation"),opt.forEach(t),lrr=r(N9e," (SegFormer model)"),N9e.forEach(t),G3.forEach(t),irr=i(Fa),m0=n(Fa,"P",{});var j9e=s(m0);drr=r(j9e,"The model is set in evaluation mode by default using "),n_e=n(j9e,"CODE",{});var rpt=s(n_e);crr=r(rpt,"model.eval()"),rpt.forEach(t),frr=r(j9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s_e=n(j9e,"CODE",{});var tpt=s(s_e);mrr=r(tpt,"model.train()"),tpt.forEach(t),j9e.forEach(t),grr=i(Fa),T(g0.$$.fragment,Fa),Fa.forEach(t),ll.forEach(t),AIe=i(f),Bd=n(f,"H2",{class:!0});var SNe=s(Bd);h0=n(SNe,"A",{id:!0,class:!0,href:!0});var apt=s(h0);l_e=n(apt,"SPAN",{});var npt=s(l_e);T(My.$$.fragment,npt),npt.forEach(t),apt.forEach(t),hrr=i(SNe),i_e=n(SNe,"SPAN",{});var spt=s(i_e);prr=r(spt,"AutoModelForInstanceSegmentation"),spt.forEach(t),SNe.forEach(t),yIe=i(f),Jo=n(f,"DIV",{class:!0});var il=s(Jo);T(Ey.$$.fragment,il),urr=i(il),Pd=n(il,"P",{});var XK=s(Pd);_rr=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),GX=n(XK,"A",{href:!0});var lpt=s(GX);brr=r(lpt,"from_pretrained()"),lpt.forEach(t),vrr=r(XK," class method or the "),OX=n(XK,"A",{href:!0});var ipt=s(OX);Frr=r(ipt,"from_config()"),ipt.forEach(t),Trr=r(XK,` class
method.`),XK.forEach(t),Mrr=i(il),Cy=n(il,"P",{});var RNe=s(Cy);Err=r(RNe,"This class cannot be instantiated directly using "),d_e=n(RNe,"CODE",{});var dpt=s(d_e);Crr=r(dpt,"__init__()"),dpt.forEach(t),wrr=r(RNe," (throws an error)."),RNe.forEach(t),Arr=i(il),Ct=n(il,"DIV",{class:!0});var O3=s(Ct);T(wy.$$.fragment,O3),yrr=i(O3),c_e=n(O3,"P",{});var cpt=s(c_e);Lrr=r(cpt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),cpt.forEach(t),xrr=i(O3),Id=n(O3,"P",{});var zK=s(Id);$rr=r(zK,`Note:
Loading a model from its configuration file does `),f_e=n(zK,"STRONG",{});var fpt=s(f_e);krr=r(fpt,"not"),fpt.forEach(t),Srr=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VX=n(zK,"A",{href:!0});var mpt=s(VX);Rrr=r(mpt,"from_pretrained()"),mpt.forEach(t),Brr=r(zK," to load the model weights."),zK.forEach(t),Prr=i(O3),T(p0.$$.fragment,O3),O3.forEach(t),Irr=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T(Ay.$$.fragment,Ta),qrr=i(Ta),m_e=n(Ta,"P",{});var gpt=s(m_e);Nrr=r(gpt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),gpt.forEach(t),jrr=i(Ta),Ya=n(Ta,"P",{});var V3=s(Ya);Drr=r(V3,"The model class to instantiate is selected based on the "),g_e=n(V3,"CODE",{});var hpt=s(g_e);Grr=r(hpt,"model_type"),hpt.forEach(t),Orr=r(V3,` property of the config object (either
passed as an argument or loaded from `),h_e=n(V3,"CODE",{});var ppt=s(h_e);Vrr=r(ppt,"pretrained_model_name_or_path"),ppt.forEach(t),Xrr=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=n(V3,"CODE",{});var upt=s(p_e);zrr=r(upt,"pretrained_model_name_or_path"),upt.forEach(t),Qrr=r(V3,":"),V3.forEach(t),Wrr=i(Ta),u_e=n(Ta,"UL",{});var _pt=s(u_e);u0=n(_pt,"LI",{});var D9e=s(u0);__e=n(D9e,"STRONG",{});var bpt=s(__e);Hrr=r(bpt,"maskformer"),bpt.forEach(t),Urr=r(D9e," \u2014 "),XX=n(D9e,"A",{href:!0});var vpt=s(XX);Jrr=r(vpt,"MaskFormerForInstanceSegmentation"),vpt.forEach(t),Yrr=r(D9e," (MaskFormer model)"),D9e.forEach(t),_pt.forEach(t),Krr=i(Ta),_0=n(Ta,"P",{});var G9e=s(_0);Zrr=r(G9e,"The model is set in evaluation mode by default using "),b_e=n(G9e,"CODE",{});var Fpt=s(b_e);etr=r(Fpt,"model.eval()"),Fpt.forEach(t),otr=r(G9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v_e=n(G9e,"CODE",{});var Tpt=s(v_e);rtr=r(Tpt,"model.train()"),Tpt.forEach(t),G9e.forEach(t),ttr=i(Ta),T(b0.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),LIe=i(f),qd=n(f,"H2",{class:!0});var BNe=s(qd);v0=n(BNe,"A",{id:!0,class:!0,href:!0});var Mpt=s(v0);F_e=n(Mpt,"SPAN",{});var Ept=s(F_e);T(yy.$$.fragment,Ept),Ept.forEach(t),Mpt.forEach(t),atr=i(BNe),T_e=n(BNe,"SPAN",{});var Cpt=s(T_e);ntr=r(Cpt,"TFAutoModel"),Cpt.forEach(t),BNe.forEach(t),xIe=i(f),Yo=n(f,"DIV",{class:!0});var dl=s(Yo);T(Ly.$$.fragment,dl),str=i(dl),Nd=n(dl,"P",{});var QK=s(Nd);ltr=r(QK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zX=n(QK,"A",{href:!0});var wpt=s(zX);itr=r(wpt,"from_pretrained()"),wpt.forEach(t),dtr=r(QK," class method or the "),QX=n(QK,"A",{href:!0});var Apt=s(QX);ctr=r(Apt,"from_config()"),Apt.forEach(t),ftr=r(QK,` class
method.`),QK.forEach(t),mtr=i(dl),xy=n(dl,"P",{});var PNe=s(xy);gtr=r(PNe,"This class cannot be instantiated directly using "),M_e=n(PNe,"CODE",{});var ypt=s(M_e);htr=r(ypt,"__init__()"),ypt.forEach(t),ptr=r(PNe," (throws an error)."),PNe.forEach(t),utr=i(dl),wt=n(dl,"DIV",{class:!0});var X3=s(wt);T($y.$$.fragment,X3),_tr=i(X3),E_e=n(X3,"P",{});var Lpt=s(E_e);btr=r(Lpt,"Instantiates one of the base model classes of the library from a configuration."),Lpt.forEach(t),vtr=i(X3),jd=n(X3,"P",{});var WK=s(jd);Ftr=r(WK,`Note:
Loading a model from its configuration file does `),C_e=n(WK,"STRONG",{});var xpt=s(C_e);Ttr=r(xpt,"not"),xpt.forEach(t),Mtr=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(WK,"A",{href:!0});var $pt=s(WX);Etr=r($pt,"from_pretrained()"),$pt.forEach(t),Ctr=r(WK," to load the model weights."),WK.forEach(t),wtr=i(X3),T(F0.$$.fragment,X3),X3.forEach(t),Atr=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(ky.$$.fragment,cl),ytr=i(cl),w_e=n(cl,"P",{});var kpt=s(w_e);Ltr=r(kpt,"Instantiate one of the base model classes of the library from a pretrained model."),kpt.forEach(t),xtr=i(cl),Ka=n(cl,"P",{});var z3=s(Ka);$tr=r(z3,"The model class to instantiate is selected based on the "),A_e=n(z3,"CODE",{});var Spt=s(A_e);ktr=r(Spt,"model_type"),Spt.forEach(t),Str=r(z3,` property of the config object (either
passed as an argument or loaded from `),y_e=n(z3,"CODE",{});var Rpt=s(y_e);Rtr=r(Rpt,"pretrained_model_name_or_path"),Rpt.forEach(t),Btr=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L_e=n(z3,"CODE",{});var Bpt=s(L_e);Ptr=r(Bpt,"pretrained_model_name_or_path"),Bpt.forEach(t),Itr=r(z3,":"),z3.forEach(t),qtr=i(cl),j=n(cl,"UL",{});var D=s(j);T0=n(D,"LI",{});var O9e=s(T0);x_e=n(O9e,"STRONG",{});var Ppt=s(x_e);Ntr=r(Ppt,"albert"),Ppt.forEach(t),jtr=r(O9e," \u2014 "),HX=n(O9e,"A",{href:!0});var Ipt=s(HX);Dtr=r(Ipt,"TFAlbertModel"),Ipt.forEach(t),Gtr=r(O9e," (ALBERT model)"),O9e.forEach(t),Otr=i(D),M0=n(D,"LI",{});var V9e=s(M0);$_e=n(V9e,"STRONG",{});var qpt=s($_e);Vtr=r(qpt,"bart"),qpt.forEach(t),Xtr=r(V9e," \u2014 "),UX=n(V9e,"A",{href:!0});var Npt=s(UX);ztr=r(Npt,"TFBartModel"),Npt.forEach(t),Qtr=r(V9e," (BART model)"),V9e.forEach(t),Wtr=i(D),E0=n(D,"LI",{});var X9e=s(E0);k_e=n(X9e,"STRONG",{});var jpt=s(k_e);Htr=r(jpt,"bert"),jpt.forEach(t),Utr=r(X9e," \u2014 "),JX=n(X9e,"A",{href:!0});var Dpt=s(JX);Jtr=r(Dpt,"TFBertModel"),Dpt.forEach(t),Ytr=r(X9e," (BERT model)"),X9e.forEach(t),Ktr=i(D),C0=n(D,"LI",{});var z9e=s(C0);S_e=n(z9e,"STRONG",{});var Gpt=s(S_e);Ztr=r(Gpt,"blenderbot"),Gpt.forEach(t),ear=r(z9e," \u2014 "),YX=n(z9e,"A",{href:!0});var Opt=s(YX);oar=r(Opt,"TFBlenderbotModel"),Opt.forEach(t),rar=r(z9e," (Blenderbot model)"),z9e.forEach(t),tar=i(D),w0=n(D,"LI",{});var Q9e=s(w0);R_e=n(Q9e,"STRONG",{});var Vpt=s(R_e);aar=r(Vpt,"blenderbot-small"),Vpt.forEach(t),nar=r(Q9e," \u2014 "),KX=n(Q9e,"A",{href:!0});var Xpt=s(KX);sar=r(Xpt,"TFBlenderbotSmallModel"),Xpt.forEach(t),lar=r(Q9e," (BlenderbotSmall model)"),Q9e.forEach(t),iar=i(D),A0=n(D,"LI",{});var W9e=s(A0);B_e=n(W9e,"STRONG",{});var zpt=s(B_e);dar=r(zpt,"camembert"),zpt.forEach(t),car=r(W9e," \u2014 "),ZX=n(W9e,"A",{href:!0});var Qpt=s(ZX);far=r(Qpt,"TFCamembertModel"),Qpt.forEach(t),mar=r(W9e," (CamemBERT model)"),W9e.forEach(t),gar=i(D),y0=n(D,"LI",{});var H9e=s(y0);P_e=n(H9e,"STRONG",{});var Wpt=s(P_e);har=r(Wpt,"clip"),Wpt.forEach(t),par=r(H9e," \u2014 "),ez=n(H9e,"A",{href:!0});var Hpt=s(ez);uar=r(Hpt,"TFCLIPModel"),Hpt.forEach(t),_ar=r(H9e," (CLIP model)"),H9e.forEach(t),bar=i(D),L0=n(D,"LI",{});var U9e=s(L0);I_e=n(U9e,"STRONG",{});var Upt=s(I_e);Far=r(Upt,"convbert"),Upt.forEach(t),Tar=r(U9e," \u2014 "),oz=n(U9e,"A",{href:!0});var Jpt=s(oz);Mar=r(Jpt,"TFConvBertModel"),Jpt.forEach(t),Ear=r(U9e," (ConvBERT model)"),U9e.forEach(t),Car=i(D),x0=n(D,"LI",{});var J9e=s(x0);q_e=n(J9e,"STRONG",{});var Ypt=s(q_e);war=r(Ypt,"convnext"),Ypt.forEach(t),Aar=r(J9e," \u2014 "),rz=n(J9e,"A",{href:!0});var Kpt=s(rz);yar=r(Kpt,"TFConvNextModel"),Kpt.forEach(t),Lar=r(J9e," (ConvNext model)"),J9e.forEach(t),xar=i(D),$0=n(D,"LI",{});var Y9e=s($0);N_e=n(Y9e,"STRONG",{});var Zpt=s(N_e);$ar=r(Zpt,"ctrl"),Zpt.forEach(t),kar=r(Y9e," \u2014 "),tz=n(Y9e,"A",{href:!0});var eut=s(tz);Sar=r(eut,"TFCTRLModel"),eut.forEach(t),Rar=r(Y9e," (CTRL model)"),Y9e.forEach(t),Bar=i(D),k0=n(D,"LI",{});var K9e=s(k0);j_e=n(K9e,"STRONG",{});var out=s(j_e);Par=r(out,"data2vec-vision"),out.forEach(t),Iar=r(K9e," \u2014 "),az=n(K9e,"A",{href:!0});var rut=s(az);qar=r(rut,"TFData2VecVisionModel"),rut.forEach(t),Nar=r(K9e," (Data2VecVision model)"),K9e.forEach(t),jar=i(D),S0=n(D,"LI",{});var Z9e=s(S0);D_e=n(Z9e,"STRONG",{});var tut=s(D_e);Dar=r(tut,"deberta"),tut.forEach(t),Gar=r(Z9e," \u2014 "),nz=n(Z9e,"A",{href:!0});var aut=s(nz);Oar=r(aut,"TFDebertaModel"),aut.forEach(t),Var=r(Z9e," (DeBERTa model)"),Z9e.forEach(t),Xar=i(D),R0=n(D,"LI",{});var e$e=s(R0);G_e=n(e$e,"STRONG",{});var nut=s(G_e);zar=r(nut,"deberta-v2"),nut.forEach(t),Qar=r(e$e," \u2014 "),sz=n(e$e,"A",{href:!0});var sut=s(sz);War=r(sut,"TFDebertaV2Model"),sut.forEach(t),Har=r(e$e," (DeBERTa-v2 model)"),e$e.forEach(t),Uar=i(D),B0=n(D,"LI",{});var o$e=s(B0);O_e=n(o$e,"STRONG",{});var lut=s(O_e);Jar=r(lut,"distilbert"),lut.forEach(t),Yar=r(o$e," \u2014 "),lz=n(o$e,"A",{href:!0});var iut=s(lz);Kar=r(iut,"TFDistilBertModel"),iut.forEach(t),Zar=r(o$e," (DistilBERT model)"),o$e.forEach(t),enr=i(D),P0=n(D,"LI",{});var r$e=s(P0);V_e=n(r$e,"STRONG",{});var dut=s(V_e);onr=r(dut,"dpr"),dut.forEach(t),rnr=r(r$e," \u2014 "),iz=n(r$e,"A",{href:!0});var cut=s(iz);tnr=r(cut,"TFDPRQuestionEncoder"),cut.forEach(t),anr=r(r$e," (DPR model)"),r$e.forEach(t),nnr=i(D),I0=n(D,"LI",{});var t$e=s(I0);X_e=n(t$e,"STRONG",{});var fut=s(X_e);snr=r(fut,"electra"),fut.forEach(t),lnr=r(t$e," \u2014 "),dz=n(t$e,"A",{href:!0});var mut=s(dz);inr=r(mut,"TFElectraModel"),mut.forEach(t),dnr=r(t$e," (ELECTRA model)"),t$e.forEach(t),cnr=i(D),q0=n(D,"LI",{});var a$e=s(q0);z_e=n(a$e,"STRONG",{});var gut=s(z_e);fnr=r(gut,"flaubert"),gut.forEach(t),mnr=r(a$e," \u2014 "),cz=n(a$e,"A",{href:!0});var hut=s(cz);gnr=r(hut,"TFFlaubertModel"),hut.forEach(t),hnr=r(a$e," (FlauBERT model)"),a$e.forEach(t),pnr=i(D),Bs=n(D,"LI",{});var i$=s(Bs);Q_e=n(i$,"STRONG",{});var put=s(Q_e);unr=r(put,"funnel"),put.forEach(t),_nr=r(i$," \u2014 "),fz=n(i$,"A",{href:!0});var uut=s(fz);bnr=r(uut,"TFFunnelModel"),uut.forEach(t),vnr=r(i$," or "),mz=n(i$,"A",{href:!0});var _ut=s(mz);Fnr=r(_ut,"TFFunnelBaseModel"),_ut.forEach(t),Tnr=r(i$," (Funnel Transformer model)"),i$.forEach(t),Mnr=i(D),N0=n(D,"LI",{});var n$e=s(N0);W_e=n(n$e,"STRONG",{});var but=s(W_e);Enr=r(but,"gpt2"),but.forEach(t),Cnr=r(n$e," \u2014 "),gz=n(n$e,"A",{href:!0});var vut=s(gz);wnr=r(vut,"TFGPT2Model"),vut.forEach(t),Anr=r(n$e," (OpenAI GPT-2 model)"),n$e.forEach(t),ynr=i(D),j0=n(D,"LI",{});var s$e=s(j0);H_e=n(s$e,"STRONG",{});var Fut=s(H_e);Lnr=r(Fut,"gptj"),Fut.forEach(t),xnr=r(s$e," \u2014 "),hz=n(s$e,"A",{href:!0});var Tut=s(hz);$nr=r(Tut,"TFGPTJModel"),Tut.forEach(t),knr=r(s$e," (GPT-J model)"),s$e.forEach(t),Snr=i(D),D0=n(D,"LI",{});var l$e=s(D0);U_e=n(l$e,"STRONG",{});var Mut=s(U_e);Rnr=r(Mut,"hubert"),Mut.forEach(t),Bnr=r(l$e," \u2014 "),pz=n(l$e,"A",{href:!0});var Eut=s(pz);Pnr=r(Eut,"TFHubertModel"),Eut.forEach(t),Inr=r(l$e," (Hubert model)"),l$e.forEach(t),qnr=i(D),G0=n(D,"LI",{});var i$e=s(G0);J_e=n(i$e,"STRONG",{});var Cut=s(J_e);Nnr=r(Cut,"layoutlm"),Cut.forEach(t),jnr=r(i$e," \u2014 "),uz=n(i$e,"A",{href:!0});var wut=s(uz);Dnr=r(wut,"TFLayoutLMModel"),wut.forEach(t),Gnr=r(i$e," (LayoutLM model)"),i$e.forEach(t),Onr=i(D),O0=n(D,"LI",{});var d$e=s(O0);Y_e=n(d$e,"STRONG",{});var Aut=s(Y_e);Vnr=r(Aut,"led"),Aut.forEach(t),Xnr=r(d$e," \u2014 "),_z=n(d$e,"A",{href:!0});var yut=s(_z);znr=r(yut,"TFLEDModel"),yut.forEach(t),Qnr=r(d$e," (LED model)"),d$e.forEach(t),Wnr=i(D),V0=n(D,"LI",{});var c$e=s(V0);K_e=n(c$e,"STRONG",{});var Lut=s(K_e);Hnr=r(Lut,"longformer"),Lut.forEach(t),Unr=r(c$e," \u2014 "),bz=n(c$e,"A",{href:!0});var xut=s(bz);Jnr=r(xut,"TFLongformerModel"),xut.forEach(t),Ynr=r(c$e," (Longformer model)"),c$e.forEach(t),Knr=i(D),X0=n(D,"LI",{});var f$e=s(X0);Z_e=n(f$e,"STRONG",{});var $ut=s(Z_e);Znr=r($ut,"lxmert"),$ut.forEach(t),esr=r(f$e," \u2014 "),vz=n(f$e,"A",{href:!0});var kut=s(vz);osr=r(kut,"TFLxmertModel"),kut.forEach(t),rsr=r(f$e," (LXMERT model)"),f$e.forEach(t),tsr=i(D),z0=n(D,"LI",{});var m$e=s(z0);e1e=n(m$e,"STRONG",{});var Sut=s(e1e);asr=r(Sut,"marian"),Sut.forEach(t),nsr=r(m$e," \u2014 "),Fz=n(m$e,"A",{href:!0});var Rut=s(Fz);ssr=r(Rut,"TFMarianModel"),Rut.forEach(t),lsr=r(m$e," (Marian model)"),m$e.forEach(t),isr=i(D),Q0=n(D,"LI",{});var g$e=s(Q0);o1e=n(g$e,"STRONG",{});var But=s(o1e);dsr=r(But,"mbart"),But.forEach(t),csr=r(g$e," \u2014 "),Tz=n(g$e,"A",{href:!0});var Put=s(Tz);fsr=r(Put,"TFMBartModel"),Put.forEach(t),msr=r(g$e," (mBART model)"),g$e.forEach(t),gsr=i(D),W0=n(D,"LI",{});var h$e=s(W0);r1e=n(h$e,"STRONG",{});var Iut=s(r1e);hsr=r(Iut,"mobilebert"),Iut.forEach(t),psr=r(h$e," \u2014 "),Mz=n(h$e,"A",{href:!0});var qut=s(Mz);usr=r(qut,"TFMobileBertModel"),qut.forEach(t),_sr=r(h$e," (MobileBERT model)"),h$e.forEach(t),bsr=i(D),H0=n(D,"LI",{});var p$e=s(H0);t1e=n(p$e,"STRONG",{});var Nut=s(t1e);vsr=r(Nut,"mpnet"),Nut.forEach(t),Fsr=r(p$e," \u2014 "),Ez=n(p$e,"A",{href:!0});var jut=s(Ez);Tsr=r(jut,"TFMPNetModel"),jut.forEach(t),Msr=r(p$e," (MPNet model)"),p$e.forEach(t),Esr=i(D),U0=n(D,"LI",{});var u$e=s(U0);a1e=n(u$e,"STRONG",{});var Dut=s(a1e);Csr=r(Dut,"mt5"),Dut.forEach(t),wsr=r(u$e," \u2014 "),Cz=n(u$e,"A",{href:!0});var Gut=s(Cz);Asr=r(Gut,"TFMT5Model"),Gut.forEach(t),ysr=r(u$e," (mT5 model)"),u$e.forEach(t),Lsr=i(D),J0=n(D,"LI",{});var _$e=s(J0);n1e=n(_$e,"STRONG",{});var Out=s(n1e);xsr=r(Out,"openai-gpt"),Out.forEach(t),$sr=r(_$e," \u2014 "),wz=n(_$e,"A",{href:!0});var Vut=s(wz);ksr=r(Vut,"TFOpenAIGPTModel"),Vut.forEach(t),Ssr=r(_$e," (OpenAI GPT model)"),_$e.forEach(t),Rsr=i(D),Y0=n(D,"LI",{});var b$e=s(Y0);s1e=n(b$e,"STRONG",{});var Xut=s(s1e);Bsr=r(Xut,"pegasus"),Xut.forEach(t),Psr=r(b$e," \u2014 "),Az=n(b$e,"A",{href:!0});var zut=s(Az);Isr=r(zut,"TFPegasusModel"),zut.forEach(t),qsr=r(b$e," (Pegasus model)"),b$e.forEach(t),Nsr=i(D),K0=n(D,"LI",{});var v$e=s(K0);l1e=n(v$e,"STRONG",{});var Qut=s(l1e);jsr=r(Qut,"rembert"),Qut.forEach(t),Dsr=r(v$e," \u2014 "),yz=n(v$e,"A",{href:!0});var Wut=s(yz);Gsr=r(Wut,"TFRemBertModel"),Wut.forEach(t),Osr=r(v$e," (RemBERT model)"),v$e.forEach(t),Vsr=i(D),Z0=n(D,"LI",{});var F$e=s(Z0);i1e=n(F$e,"STRONG",{});var Hut=s(i1e);Xsr=r(Hut,"roberta"),Hut.forEach(t),zsr=r(F$e," \u2014 "),Lz=n(F$e,"A",{href:!0});var Uut=s(Lz);Qsr=r(Uut,"TFRobertaModel"),Uut.forEach(t),Wsr=r(F$e," (RoBERTa model)"),F$e.forEach(t),Hsr=i(D),eT=n(D,"LI",{});var T$e=s(eT);d1e=n(T$e,"STRONG",{});var Jut=s(d1e);Usr=r(Jut,"roformer"),Jut.forEach(t),Jsr=r(T$e," \u2014 "),xz=n(T$e,"A",{href:!0});var Yut=s(xz);Ysr=r(Yut,"TFRoFormerModel"),Yut.forEach(t),Ksr=r(T$e," (RoFormer model)"),T$e.forEach(t),Zsr=i(D),oT=n(D,"LI",{});var M$e=s(oT);c1e=n(M$e,"STRONG",{});var Kut=s(c1e);elr=r(Kut,"speech_to_text"),Kut.forEach(t),olr=r(M$e," \u2014 "),$z=n(M$e,"A",{href:!0});var Zut=s($z);rlr=r(Zut,"TFSpeech2TextModel"),Zut.forEach(t),tlr=r(M$e," (Speech2Text model)"),M$e.forEach(t),alr=i(D),rT=n(D,"LI",{});var E$e=s(rT);f1e=n(E$e,"STRONG",{});var e_t=s(f1e);nlr=r(e_t,"t5"),e_t.forEach(t),slr=r(E$e," \u2014 "),kz=n(E$e,"A",{href:!0});var o_t=s(kz);llr=r(o_t,"TFT5Model"),o_t.forEach(t),ilr=r(E$e," (T5 model)"),E$e.forEach(t),dlr=i(D),tT=n(D,"LI",{});var C$e=s(tT);m1e=n(C$e,"STRONG",{});var r_t=s(m1e);clr=r(r_t,"tapas"),r_t.forEach(t),flr=r(C$e," \u2014 "),Sz=n(C$e,"A",{href:!0});var t_t=s(Sz);mlr=r(t_t,"TFTapasModel"),t_t.forEach(t),glr=r(C$e," (TAPAS model)"),C$e.forEach(t),hlr=i(D),aT=n(D,"LI",{});var w$e=s(aT);g1e=n(w$e,"STRONG",{});var a_t=s(g1e);plr=r(a_t,"transfo-xl"),a_t.forEach(t),ulr=r(w$e," \u2014 "),Rz=n(w$e,"A",{href:!0});var n_t=s(Rz);_lr=r(n_t,"TFTransfoXLModel"),n_t.forEach(t),blr=r(w$e," (Transformer-XL model)"),w$e.forEach(t),vlr=i(D),nT=n(D,"LI",{});var A$e=s(nT);h1e=n(A$e,"STRONG",{});var s_t=s(h1e);Flr=r(s_t,"vit"),s_t.forEach(t),Tlr=r(A$e," \u2014 "),Bz=n(A$e,"A",{href:!0});var l_t=s(Bz);Mlr=r(l_t,"TFViTModel"),l_t.forEach(t),Elr=r(A$e," (ViT model)"),A$e.forEach(t),Clr=i(D),sT=n(D,"LI",{});var y$e=s(sT);p1e=n(y$e,"STRONG",{});var i_t=s(p1e);wlr=r(i_t,"vit_mae"),i_t.forEach(t),Alr=r(y$e," \u2014 "),Pz=n(y$e,"A",{href:!0});var d_t=s(Pz);ylr=r(d_t,"TFViTMAEModel"),d_t.forEach(t),Llr=r(y$e," (ViTMAE model)"),y$e.forEach(t),xlr=i(D),lT=n(D,"LI",{});var L$e=s(lT);u1e=n(L$e,"STRONG",{});var c_t=s(u1e);$lr=r(c_t,"wav2vec2"),c_t.forEach(t),klr=r(L$e," \u2014 "),Iz=n(L$e,"A",{href:!0});var f_t=s(Iz);Slr=r(f_t,"TFWav2Vec2Model"),f_t.forEach(t),Rlr=r(L$e," (Wav2Vec2 model)"),L$e.forEach(t),Blr=i(D),iT=n(D,"LI",{});var x$e=s(iT);_1e=n(x$e,"STRONG",{});var m_t=s(_1e);Plr=r(m_t,"xlm"),m_t.forEach(t),Ilr=r(x$e," \u2014 "),qz=n(x$e,"A",{href:!0});var g_t=s(qz);qlr=r(g_t,"TFXLMModel"),g_t.forEach(t),Nlr=r(x$e," (XLM model)"),x$e.forEach(t),jlr=i(D),dT=n(D,"LI",{});var $$e=s(dT);b1e=n($$e,"STRONG",{});var h_t=s(b1e);Dlr=r(h_t,"xlm-roberta"),h_t.forEach(t),Glr=r($$e," \u2014 "),Nz=n($$e,"A",{href:!0});var p_t=s(Nz);Olr=r(p_t,"TFXLMRobertaModel"),p_t.forEach(t),Vlr=r($$e," (XLM-RoBERTa model)"),$$e.forEach(t),Xlr=i(D),cT=n(D,"LI",{});var k$e=s(cT);v1e=n(k$e,"STRONG",{});var u_t=s(v1e);zlr=r(u_t,"xlnet"),u_t.forEach(t),Qlr=r(k$e," \u2014 "),jz=n(k$e,"A",{href:!0});var __t=s(jz);Wlr=r(__t,"TFXLNetModel"),__t.forEach(t),Hlr=r(k$e," (XLNet model)"),k$e.forEach(t),D.forEach(t),Ulr=i(cl),T(fT.$$.fragment,cl),cl.forEach(t),dl.forEach(t),$Ie=i(f),Dd=n(f,"H2",{class:!0});var INe=s(Dd);mT=n(INe,"A",{id:!0,class:!0,href:!0});var b_t=s(mT);F1e=n(b_t,"SPAN",{});var v_t=s(F1e);T(Sy.$$.fragment,v_t),v_t.forEach(t),b_t.forEach(t),Jlr=i(INe),T1e=n(INe,"SPAN",{});var F_t=s(T1e);Ylr=r(F_t,"TFAutoModelForPreTraining"),F_t.forEach(t),INe.forEach(t),kIe=i(f),Ko=n(f,"DIV",{class:!0});var fl=s(Ko);T(Ry.$$.fragment,fl),Klr=i(fl),Gd=n(fl,"P",{});var HK=s(Gd);Zlr=r(HK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Dz=n(HK,"A",{href:!0});var T_t=s(Dz);eir=r(T_t,"from_pretrained()"),T_t.forEach(t),oir=r(HK," class method or the "),Gz=n(HK,"A",{href:!0});var M_t=s(Gz);rir=r(M_t,"from_config()"),M_t.forEach(t),tir=r(HK,` class
method.`),HK.forEach(t),air=i(fl),By=n(fl,"P",{});var qNe=s(By);nir=r(qNe,"This class cannot be instantiated directly using "),M1e=n(qNe,"CODE",{});var E_t=s(M1e);sir=r(E_t,"__init__()"),E_t.forEach(t),lir=r(qNe," (throws an error)."),qNe.forEach(t),iir=i(fl),At=n(fl,"DIV",{class:!0});var Q3=s(At);T(Py.$$.fragment,Q3),dir=i(Q3),E1e=n(Q3,"P",{});var C_t=s(E1e);cir=r(C_t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),C_t.forEach(t),fir=i(Q3),Od=n(Q3,"P",{});var UK=s(Od);mir=r(UK,`Note:
Loading a model from its configuration file does `),C1e=n(UK,"STRONG",{});var w_t=s(C1e);gir=r(w_t,"not"),w_t.forEach(t),hir=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=n(UK,"A",{href:!0});var A_t=s(Oz);pir=r(A_t,"from_pretrained()"),A_t.forEach(t),uir=r(UK," to load the model weights."),UK.forEach(t),_ir=i(Q3),T(gT.$$.fragment,Q3),Q3.forEach(t),bir=i(fl),Ar=n(fl,"DIV",{class:!0});var ml=s(Ar);T(Iy.$$.fragment,ml),vir=i(ml),w1e=n(ml,"P",{});var y_t=s(w1e);Fir=r(y_t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),y_t.forEach(t),Tir=i(ml),Za=n(ml,"P",{});var W3=s(Za);Mir=r(W3,"The model class to instantiate is selected based on the "),A1e=n(W3,"CODE",{});var L_t=s(A1e);Eir=r(L_t,"model_type"),L_t.forEach(t),Cir=r(W3,` property of the config object (either
passed as an argument or loaded from `),y1e=n(W3,"CODE",{});var x_t=s(y1e);wir=r(x_t,"pretrained_model_name_or_path"),x_t.forEach(t),Air=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=n(W3,"CODE",{});var $_t=s(L1e);yir=r($_t,"pretrained_model_name_or_path"),$_t.forEach(t),Lir=r(W3,":"),W3.forEach(t),xir=i(ml),ne=n(ml,"UL",{});var le=s(ne);hT=n(le,"LI",{});var S$e=s(hT);x1e=n(S$e,"STRONG",{});var k_t=s(x1e);$ir=r(k_t,"albert"),k_t.forEach(t),kir=r(S$e," \u2014 "),Vz=n(S$e,"A",{href:!0});var S_t=s(Vz);Sir=r(S_t,"TFAlbertForPreTraining"),S_t.forEach(t),Rir=r(S$e," (ALBERT model)"),S$e.forEach(t),Bir=i(le),pT=n(le,"LI",{});var R$e=s(pT);$1e=n(R$e,"STRONG",{});var R_t=s($1e);Pir=r(R_t,"bart"),R_t.forEach(t),Iir=r(R$e," \u2014 "),Xz=n(R$e,"A",{href:!0});var B_t=s(Xz);qir=r(B_t,"TFBartForConditionalGeneration"),B_t.forEach(t),Nir=r(R$e," (BART model)"),R$e.forEach(t),jir=i(le),uT=n(le,"LI",{});var B$e=s(uT);k1e=n(B$e,"STRONG",{});var P_t=s(k1e);Dir=r(P_t,"bert"),P_t.forEach(t),Gir=r(B$e," \u2014 "),zz=n(B$e,"A",{href:!0});var I_t=s(zz);Oir=r(I_t,"TFBertForPreTraining"),I_t.forEach(t),Vir=r(B$e," (BERT model)"),B$e.forEach(t),Xir=i(le),_T=n(le,"LI",{});var P$e=s(_T);S1e=n(P$e,"STRONG",{});var q_t=s(S1e);zir=r(q_t,"camembert"),q_t.forEach(t),Qir=r(P$e," \u2014 "),Qz=n(P$e,"A",{href:!0});var N_t=s(Qz);Wir=r(N_t,"TFCamembertForMaskedLM"),N_t.forEach(t),Hir=r(P$e," (CamemBERT model)"),P$e.forEach(t),Uir=i(le),bT=n(le,"LI",{});var I$e=s(bT);R1e=n(I$e,"STRONG",{});var j_t=s(R1e);Jir=r(j_t,"ctrl"),j_t.forEach(t),Yir=r(I$e," \u2014 "),Wz=n(I$e,"A",{href:!0});var D_t=s(Wz);Kir=r(D_t,"TFCTRLLMHeadModel"),D_t.forEach(t),Zir=r(I$e," (CTRL model)"),I$e.forEach(t),edr=i(le),vT=n(le,"LI",{});var q$e=s(vT);B1e=n(q$e,"STRONG",{});var G_t=s(B1e);odr=r(G_t,"distilbert"),G_t.forEach(t),rdr=r(q$e," \u2014 "),Hz=n(q$e,"A",{href:!0});var O_t=s(Hz);tdr=r(O_t,"TFDistilBertForMaskedLM"),O_t.forEach(t),adr=r(q$e," (DistilBERT model)"),q$e.forEach(t),ndr=i(le),FT=n(le,"LI",{});var N$e=s(FT);P1e=n(N$e,"STRONG",{});var V_t=s(P1e);sdr=r(V_t,"electra"),V_t.forEach(t),ldr=r(N$e," \u2014 "),Uz=n(N$e,"A",{href:!0});var X_t=s(Uz);idr=r(X_t,"TFElectraForPreTraining"),X_t.forEach(t),ddr=r(N$e," (ELECTRA model)"),N$e.forEach(t),cdr=i(le),TT=n(le,"LI",{});var j$e=s(TT);I1e=n(j$e,"STRONG",{});var z_t=s(I1e);fdr=r(z_t,"flaubert"),z_t.forEach(t),mdr=r(j$e," \u2014 "),Jz=n(j$e,"A",{href:!0});var Q_t=s(Jz);gdr=r(Q_t,"TFFlaubertWithLMHeadModel"),Q_t.forEach(t),hdr=r(j$e," (FlauBERT model)"),j$e.forEach(t),pdr=i(le),MT=n(le,"LI",{});var D$e=s(MT);q1e=n(D$e,"STRONG",{});var W_t=s(q1e);udr=r(W_t,"funnel"),W_t.forEach(t),_dr=r(D$e," \u2014 "),Yz=n(D$e,"A",{href:!0});var H_t=s(Yz);bdr=r(H_t,"TFFunnelForPreTraining"),H_t.forEach(t),vdr=r(D$e," (Funnel Transformer model)"),D$e.forEach(t),Fdr=i(le),ET=n(le,"LI",{});var G$e=s(ET);N1e=n(G$e,"STRONG",{});var U_t=s(N1e);Tdr=r(U_t,"gpt2"),U_t.forEach(t),Mdr=r(G$e," \u2014 "),Kz=n(G$e,"A",{href:!0});var J_t=s(Kz);Edr=r(J_t,"TFGPT2LMHeadModel"),J_t.forEach(t),Cdr=r(G$e," (OpenAI GPT-2 model)"),G$e.forEach(t),wdr=i(le),CT=n(le,"LI",{});var O$e=s(CT);j1e=n(O$e,"STRONG",{});var Y_t=s(j1e);Adr=r(Y_t,"layoutlm"),Y_t.forEach(t),ydr=r(O$e," \u2014 "),Zz=n(O$e,"A",{href:!0});var K_t=s(Zz);Ldr=r(K_t,"TFLayoutLMForMaskedLM"),K_t.forEach(t),xdr=r(O$e," (LayoutLM model)"),O$e.forEach(t),$dr=i(le),wT=n(le,"LI",{});var V$e=s(wT);D1e=n(V$e,"STRONG",{});var Z_t=s(D1e);kdr=r(Z_t,"lxmert"),Z_t.forEach(t),Sdr=r(V$e," \u2014 "),eQ=n(V$e,"A",{href:!0});var e1t=s(eQ);Rdr=r(e1t,"TFLxmertForPreTraining"),e1t.forEach(t),Bdr=r(V$e," (LXMERT model)"),V$e.forEach(t),Pdr=i(le),AT=n(le,"LI",{});var X$e=s(AT);G1e=n(X$e,"STRONG",{});var o1t=s(G1e);Idr=r(o1t,"mobilebert"),o1t.forEach(t),qdr=r(X$e," \u2014 "),oQ=n(X$e,"A",{href:!0});var r1t=s(oQ);Ndr=r(r1t,"TFMobileBertForPreTraining"),r1t.forEach(t),jdr=r(X$e," (MobileBERT model)"),X$e.forEach(t),Ddr=i(le),yT=n(le,"LI",{});var z$e=s(yT);O1e=n(z$e,"STRONG",{});var t1t=s(O1e);Gdr=r(t1t,"mpnet"),t1t.forEach(t),Odr=r(z$e," \u2014 "),rQ=n(z$e,"A",{href:!0});var a1t=s(rQ);Vdr=r(a1t,"TFMPNetForMaskedLM"),a1t.forEach(t),Xdr=r(z$e," (MPNet model)"),z$e.forEach(t),zdr=i(le),LT=n(le,"LI",{});var Q$e=s(LT);V1e=n(Q$e,"STRONG",{});var n1t=s(V1e);Qdr=r(n1t,"openai-gpt"),n1t.forEach(t),Wdr=r(Q$e," \u2014 "),tQ=n(Q$e,"A",{href:!0});var s1t=s(tQ);Hdr=r(s1t,"TFOpenAIGPTLMHeadModel"),s1t.forEach(t),Udr=r(Q$e," (OpenAI GPT model)"),Q$e.forEach(t),Jdr=i(le),xT=n(le,"LI",{});var W$e=s(xT);X1e=n(W$e,"STRONG",{});var l1t=s(X1e);Ydr=r(l1t,"roberta"),l1t.forEach(t),Kdr=r(W$e," \u2014 "),aQ=n(W$e,"A",{href:!0});var i1t=s(aQ);Zdr=r(i1t,"TFRobertaForMaskedLM"),i1t.forEach(t),ecr=r(W$e," (RoBERTa model)"),W$e.forEach(t),ocr=i(le),$T=n(le,"LI",{});var H$e=s($T);z1e=n(H$e,"STRONG",{});var d1t=s(z1e);rcr=r(d1t,"t5"),d1t.forEach(t),tcr=r(H$e," \u2014 "),nQ=n(H$e,"A",{href:!0});var c1t=s(nQ);acr=r(c1t,"TFT5ForConditionalGeneration"),c1t.forEach(t),ncr=r(H$e," (T5 model)"),H$e.forEach(t),scr=i(le),kT=n(le,"LI",{});var U$e=s(kT);Q1e=n(U$e,"STRONG",{});var f1t=s(Q1e);lcr=r(f1t,"tapas"),f1t.forEach(t),icr=r(U$e," \u2014 "),sQ=n(U$e,"A",{href:!0});var m1t=s(sQ);dcr=r(m1t,"TFTapasForMaskedLM"),m1t.forEach(t),ccr=r(U$e," (TAPAS model)"),U$e.forEach(t),fcr=i(le),ST=n(le,"LI",{});var J$e=s(ST);W1e=n(J$e,"STRONG",{});var g1t=s(W1e);mcr=r(g1t,"transfo-xl"),g1t.forEach(t),gcr=r(J$e," \u2014 "),lQ=n(J$e,"A",{href:!0});var h1t=s(lQ);hcr=r(h1t,"TFTransfoXLLMHeadModel"),h1t.forEach(t),pcr=r(J$e," (Transformer-XL model)"),J$e.forEach(t),ucr=i(le),RT=n(le,"LI",{});var Y$e=s(RT);H1e=n(Y$e,"STRONG",{});var p1t=s(H1e);_cr=r(p1t,"vit_mae"),p1t.forEach(t),bcr=r(Y$e," \u2014 "),iQ=n(Y$e,"A",{href:!0});var u1t=s(iQ);vcr=r(u1t,"TFViTMAEForPreTraining"),u1t.forEach(t),Fcr=r(Y$e," (ViTMAE model)"),Y$e.forEach(t),Tcr=i(le),BT=n(le,"LI",{});var K$e=s(BT);U1e=n(K$e,"STRONG",{});var _1t=s(U1e);Mcr=r(_1t,"xlm"),_1t.forEach(t),Ecr=r(K$e," \u2014 "),dQ=n(K$e,"A",{href:!0});var b1t=s(dQ);Ccr=r(b1t,"TFXLMWithLMHeadModel"),b1t.forEach(t),wcr=r(K$e," (XLM model)"),K$e.forEach(t),Acr=i(le),PT=n(le,"LI",{});var Z$e=s(PT);J1e=n(Z$e,"STRONG",{});var v1t=s(J1e);ycr=r(v1t,"xlm-roberta"),v1t.forEach(t),Lcr=r(Z$e," \u2014 "),cQ=n(Z$e,"A",{href:!0});var F1t=s(cQ);xcr=r(F1t,"TFXLMRobertaForMaskedLM"),F1t.forEach(t),$cr=r(Z$e," (XLM-RoBERTa model)"),Z$e.forEach(t),kcr=i(le),IT=n(le,"LI",{});var eke=s(IT);Y1e=n(eke,"STRONG",{});var T1t=s(Y1e);Scr=r(T1t,"xlnet"),T1t.forEach(t),Rcr=r(eke," \u2014 "),fQ=n(eke,"A",{href:!0});var M1t=s(fQ);Bcr=r(M1t,"TFXLNetLMHeadModel"),M1t.forEach(t),Pcr=r(eke," (XLNet model)"),eke.forEach(t),le.forEach(t),Icr=i(ml),T(qT.$$.fragment,ml),ml.forEach(t),fl.forEach(t),SIe=i(f),Vd=n(f,"H2",{class:!0});var NNe=s(Vd);NT=n(NNe,"A",{id:!0,class:!0,href:!0});var E1t=s(NT);K1e=n(E1t,"SPAN",{});var C1t=s(K1e);T(qy.$$.fragment,C1t),C1t.forEach(t),E1t.forEach(t),qcr=i(NNe),Z1e=n(NNe,"SPAN",{});var w1t=s(Z1e);Ncr=r(w1t,"TFAutoModelForCausalLM"),w1t.forEach(t),NNe.forEach(t),RIe=i(f),Zo=n(f,"DIV",{class:!0});var gl=s(Zo);T(Ny.$$.fragment,gl),jcr=i(gl),Xd=n(gl,"P",{});var JK=s(Xd);Dcr=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mQ=n(JK,"A",{href:!0});var A1t=s(mQ);Gcr=r(A1t,"from_pretrained()"),A1t.forEach(t),Ocr=r(JK," class method or the "),gQ=n(JK,"A",{href:!0});var y1t=s(gQ);Vcr=r(y1t,"from_config()"),y1t.forEach(t),Xcr=r(JK,` class
method.`),JK.forEach(t),zcr=i(gl),jy=n(gl,"P",{});var jNe=s(jy);Qcr=r(jNe,"This class cannot be instantiated directly using "),e8e=n(jNe,"CODE",{});var L1t=s(e8e);Wcr=r(L1t,"__init__()"),L1t.forEach(t),Hcr=r(jNe," (throws an error)."),jNe.forEach(t),Ucr=i(gl),yt=n(gl,"DIV",{class:!0});var H3=s(yt);T(Dy.$$.fragment,H3),Jcr=i(H3),o8e=n(H3,"P",{});var x1t=s(o8e);Ycr=r(x1t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),x1t.forEach(t),Kcr=i(H3),zd=n(H3,"P",{});var YK=s(zd);Zcr=r(YK,`Note:
Loading a model from its configuration file does `),r8e=n(YK,"STRONG",{});var $1t=s(r8e);efr=r($1t,"not"),$1t.forEach(t),ofr=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hQ=n(YK,"A",{href:!0});var k1t=s(hQ);rfr=r(k1t,"from_pretrained()"),k1t.forEach(t),tfr=r(YK," to load the model weights."),YK.forEach(t),afr=i(H3),T(jT.$$.fragment,H3),H3.forEach(t),nfr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(Gy.$$.fragment,hl),sfr=i(hl),t8e=n(hl,"P",{});var S1t=s(t8e);lfr=r(S1t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),S1t.forEach(t),ifr=i(hl),en=n(hl,"P",{});var U3=s(en);dfr=r(U3,"The model class to instantiate is selected based on the "),a8e=n(U3,"CODE",{});var R1t=s(a8e);cfr=r(R1t,"model_type"),R1t.forEach(t),ffr=r(U3,` property of the config object (either
passed as an argument or loaded from `),n8e=n(U3,"CODE",{});var B1t=s(n8e);mfr=r(B1t,"pretrained_model_name_or_path"),B1t.forEach(t),gfr=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s8e=n(U3,"CODE",{});var P1t=s(s8e);hfr=r(P1t,"pretrained_model_name_or_path"),P1t.forEach(t),pfr=r(U3,":"),U3.forEach(t),ufr=i(hl),Te=n(hl,"UL",{});var Ce=s(Te);DT=n(Ce,"LI",{});var oke=s(DT);l8e=n(oke,"STRONG",{});var I1t=s(l8e);_fr=r(I1t,"bert"),I1t.forEach(t),bfr=r(oke," \u2014 "),pQ=n(oke,"A",{href:!0});var q1t=s(pQ);vfr=r(q1t,"TFBertLMHeadModel"),q1t.forEach(t),Ffr=r(oke," (BERT model)"),oke.forEach(t),Tfr=i(Ce),GT=n(Ce,"LI",{});var rke=s(GT);i8e=n(rke,"STRONG",{});var N1t=s(i8e);Mfr=r(N1t,"camembert"),N1t.forEach(t),Efr=r(rke," \u2014 "),uQ=n(rke,"A",{href:!0});var j1t=s(uQ);Cfr=r(j1t,"TFCamembertForCausalLM"),j1t.forEach(t),wfr=r(rke," (CamemBERT model)"),rke.forEach(t),Afr=i(Ce),OT=n(Ce,"LI",{});var tke=s(OT);d8e=n(tke,"STRONG",{});var D1t=s(d8e);yfr=r(D1t,"ctrl"),D1t.forEach(t),Lfr=r(tke," \u2014 "),_Q=n(tke,"A",{href:!0});var G1t=s(_Q);xfr=r(G1t,"TFCTRLLMHeadModel"),G1t.forEach(t),$fr=r(tke," (CTRL model)"),tke.forEach(t),kfr=i(Ce),VT=n(Ce,"LI",{});var ake=s(VT);c8e=n(ake,"STRONG",{});var O1t=s(c8e);Sfr=r(O1t,"gpt2"),O1t.forEach(t),Rfr=r(ake," \u2014 "),bQ=n(ake,"A",{href:!0});var V1t=s(bQ);Bfr=r(V1t,"TFGPT2LMHeadModel"),V1t.forEach(t),Pfr=r(ake," (OpenAI GPT-2 model)"),ake.forEach(t),Ifr=i(Ce),XT=n(Ce,"LI",{});var nke=s(XT);f8e=n(nke,"STRONG",{});var X1t=s(f8e);qfr=r(X1t,"gptj"),X1t.forEach(t),Nfr=r(nke," \u2014 "),vQ=n(nke,"A",{href:!0});var z1t=s(vQ);jfr=r(z1t,"TFGPTJForCausalLM"),z1t.forEach(t),Dfr=r(nke," (GPT-J model)"),nke.forEach(t),Gfr=i(Ce),zT=n(Ce,"LI",{});var ske=s(zT);m8e=n(ske,"STRONG",{});var Q1t=s(m8e);Ofr=r(Q1t,"openai-gpt"),Q1t.forEach(t),Vfr=r(ske," \u2014 "),FQ=n(ske,"A",{href:!0});var W1t=s(FQ);Xfr=r(W1t,"TFOpenAIGPTLMHeadModel"),W1t.forEach(t),zfr=r(ske," (OpenAI GPT model)"),ske.forEach(t),Qfr=i(Ce),QT=n(Ce,"LI",{});var lke=s(QT);g8e=n(lke,"STRONG",{});var H1t=s(g8e);Wfr=r(H1t,"rembert"),H1t.forEach(t),Hfr=r(lke," \u2014 "),TQ=n(lke,"A",{href:!0});var U1t=s(TQ);Ufr=r(U1t,"TFRemBertForCausalLM"),U1t.forEach(t),Jfr=r(lke," (RemBERT model)"),lke.forEach(t),Yfr=i(Ce),WT=n(Ce,"LI",{});var ike=s(WT);h8e=n(ike,"STRONG",{});var J1t=s(h8e);Kfr=r(J1t,"roberta"),J1t.forEach(t),Zfr=r(ike," \u2014 "),MQ=n(ike,"A",{href:!0});var Y1t=s(MQ);emr=r(Y1t,"TFRobertaForCausalLM"),Y1t.forEach(t),omr=r(ike," (RoBERTa model)"),ike.forEach(t),rmr=i(Ce),HT=n(Ce,"LI",{});var dke=s(HT);p8e=n(dke,"STRONG",{});var K1t=s(p8e);tmr=r(K1t,"roformer"),K1t.forEach(t),amr=r(dke," \u2014 "),EQ=n(dke,"A",{href:!0});var Z1t=s(EQ);nmr=r(Z1t,"TFRoFormerForCausalLM"),Z1t.forEach(t),smr=r(dke," (RoFormer model)"),dke.forEach(t),lmr=i(Ce),UT=n(Ce,"LI",{});var cke=s(UT);u8e=n(cke,"STRONG",{});var e8t=s(u8e);imr=r(e8t,"transfo-xl"),e8t.forEach(t),dmr=r(cke," \u2014 "),CQ=n(cke,"A",{href:!0});var o8t=s(CQ);cmr=r(o8t,"TFTransfoXLLMHeadModel"),o8t.forEach(t),fmr=r(cke," (Transformer-XL model)"),cke.forEach(t),mmr=i(Ce),JT=n(Ce,"LI",{});var fke=s(JT);_8e=n(fke,"STRONG",{});var r8t=s(_8e);gmr=r(r8t,"xlm"),r8t.forEach(t),hmr=r(fke," \u2014 "),wQ=n(fke,"A",{href:!0});var t8t=s(wQ);pmr=r(t8t,"TFXLMWithLMHeadModel"),t8t.forEach(t),umr=r(fke," (XLM model)"),fke.forEach(t),_mr=i(Ce),YT=n(Ce,"LI",{});var mke=s(YT);b8e=n(mke,"STRONG",{});var a8t=s(b8e);bmr=r(a8t,"xlnet"),a8t.forEach(t),vmr=r(mke," \u2014 "),AQ=n(mke,"A",{href:!0});var n8t=s(AQ);Fmr=r(n8t,"TFXLNetLMHeadModel"),n8t.forEach(t),Tmr=r(mke," (XLNet model)"),mke.forEach(t),Ce.forEach(t),Mmr=i(hl),T(KT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),BIe=i(f),Qd=n(f,"H2",{class:!0});var DNe=s(Qd);ZT=n(DNe,"A",{id:!0,class:!0,href:!0});var s8t=s(ZT);v8e=n(s8t,"SPAN",{});var l8t=s(v8e);T(Oy.$$.fragment,l8t),l8t.forEach(t),s8t.forEach(t),Emr=i(DNe),F8e=n(DNe,"SPAN",{});var i8t=s(F8e);Cmr=r(i8t,"TFAutoModelForImageClassification"),i8t.forEach(t),DNe.forEach(t),PIe=i(f),er=n(f,"DIV",{class:!0});var pl=s(er);T(Vy.$$.fragment,pl),wmr=i(pl),Wd=n(pl,"P",{});var KK=s(Wd);Amr=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),yQ=n(KK,"A",{href:!0});var d8t=s(yQ);ymr=r(d8t,"from_pretrained()"),d8t.forEach(t),Lmr=r(KK," class method or the "),LQ=n(KK,"A",{href:!0});var c8t=s(LQ);xmr=r(c8t,"from_config()"),c8t.forEach(t),$mr=r(KK,` class
method.`),KK.forEach(t),kmr=i(pl),Xy=n(pl,"P",{});var GNe=s(Xy);Smr=r(GNe,"This class cannot be instantiated directly using "),T8e=n(GNe,"CODE",{});var f8t=s(T8e);Rmr=r(f8t,"__init__()"),f8t.forEach(t),Bmr=r(GNe," (throws an error)."),GNe.forEach(t),Pmr=i(pl),Lt=n(pl,"DIV",{class:!0});var J3=s(Lt);T(zy.$$.fragment,J3),Imr=i(J3),M8e=n(J3,"P",{});var m8t=s(M8e);qmr=r(m8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),m8t.forEach(t),Nmr=i(J3),Hd=n(J3,"P",{});var ZK=s(Hd);jmr=r(ZK,`Note:
Loading a model from its configuration file does `),E8e=n(ZK,"STRONG",{});var g8t=s(E8e);Dmr=r(g8t,"not"),g8t.forEach(t),Gmr=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=n(ZK,"A",{href:!0});var h8t=s(xQ);Omr=r(h8t,"from_pretrained()"),h8t.forEach(t),Vmr=r(ZK," to load the model weights."),ZK.forEach(t),Xmr=i(J3),T(e7.$$.fragment,J3),J3.forEach(t),zmr=i(pl),Lr=n(pl,"DIV",{class:!0});var ul=s(Lr);T(Qy.$$.fragment,ul),Qmr=i(ul),C8e=n(ul,"P",{});var p8t=s(C8e);Wmr=r(p8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),p8t.forEach(t),Hmr=i(ul),on=n(ul,"P",{});var Y3=s(on);Umr=r(Y3,"The model class to instantiate is selected based on the "),w8e=n(Y3,"CODE",{});var u8t=s(w8e);Jmr=r(u8t,"model_type"),u8t.forEach(t),Ymr=r(Y3,` property of the config object (either
passed as an argument or loaded from `),A8e=n(Y3,"CODE",{});var _8t=s(A8e);Kmr=r(_8t,"pretrained_model_name_or_path"),_8t.forEach(t),Zmr=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y8e=n(Y3,"CODE",{});var b8t=s(y8e);egr=r(b8t,"pretrained_model_name_or_path"),b8t.forEach(t),ogr=r(Y3,":"),Y3.forEach(t),rgr=i(ul),Ud=n(ul,"UL",{});var eZ=s(Ud);o7=n(eZ,"LI",{});var gke=s(o7);L8e=n(gke,"STRONG",{});var v8t=s(L8e);tgr=r(v8t,"convnext"),v8t.forEach(t),agr=r(gke," \u2014 "),$Q=n(gke,"A",{href:!0});var F8t=s($Q);ngr=r(F8t,"TFConvNextForImageClassification"),F8t.forEach(t),sgr=r(gke," (ConvNext model)"),gke.forEach(t),lgr=i(eZ),r7=n(eZ,"LI",{});var hke=s(r7);x8e=n(hke,"STRONG",{});var T8t=s(x8e);igr=r(T8t,"data2vec-vision"),T8t.forEach(t),dgr=r(hke," \u2014 "),kQ=n(hke,"A",{href:!0});var M8t=s(kQ);cgr=r(M8t,"TFData2VecVisionForImageClassification"),M8t.forEach(t),fgr=r(hke," (Data2VecVision model)"),hke.forEach(t),mgr=i(eZ),t7=n(eZ,"LI",{});var pke=s(t7);$8e=n(pke,"STRONG",{});var E8t=s($8e);ggr=r(E8t,"vit"),E8t.forEach(t),hgr=r(pke," \u2014 "),SQ=n(pke,"A",{href:!0});var C8t=s(SQ);pgr=r(C8t,"TFViTForImageClassification"),C8t.forEach(t),ugr=r(pke," (ViT model)"),pke.forEach(t),eZ.forEach(t),_gr=i(ul),T(a7.$$.fragment,ul),ul.forEach(t),pl.forEach(t),IIe=i(f),Jd=n(f,"H2",{class:!0});var ONe=s(Jd);n7=n(ONe,"A",{id:!0,class:!0,href:!0});var w8t=s(n7);k8e=n(w8t,"SPAN",{});var A8t=s(k8e);T(Wy.$$.fragment,A8t),A8t.forEach(t),w8t.forEach(t),bgr=i(ONe),S8e=n(ONe,"SPAN",{});var y8t=s(S8e);vgr=r(y8t,"TFAutoModelForMaskedLM"),y8t.forEach(t),ONe.forEach(t),qIe=i(f),or=n(f,"DIV",{class:!0});var _l=s(or);T(Hy.$$.fragment,_l),Fgr=i(_l),Yd=n(_l,"P",{});var oZ=s(Yd);Tgr=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RQ=n(oZ,"A",{href:!0});var L8t=s(RQ);Mgr=r(L8t,"from_pretrained()"),L8t.forEach(t),Egr=r(oZ," class method or the "),BQ=n(oZ,"A",{href:!0});var x8t=s(BQ);Cgr=r(x8t,"from_config()"),x8t.forEach(t),wgr=r(oZ,` class
method.`),oZ.forEach(t),Agr=i(_l),Uy=n(_l,"P",{});var VNe=s(Uy);ygr=r(VNe,"This class cannot be instantiated directly using "),R8e=n(VNe,"CODE",{});var $8t=s(R8e);Lgr=r($8t,"__init__()"),$8t.forEach(t),xgr=r(VNe," (throws an error)."),VNe.forEach(t),$gr=i(_l),xt=n(_l,"DIV",{class:!0});var K3=s(xt);T(Jy.$$.fragment,K3),kgr=i(K3),B8e=n(K3,"P",{});var k8t=s(B8e);Sgr=r(k8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),k8t.forEach(t),Rgr=i(K3),Kd=n(K3,"P",{});var rZ=s(Kd);Bgr=r(rZ,`Note:
Loading a model from its configuration file does `),P8e=n(rZ,"STRONG",{});var S8t=s(P8e);Pgr=r(S8t,"not"),S8t.forEach(t),Igr=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(rZ,"A",{href:!0});var R8t=s(PQ);qgr=r(R8t,"from_pretrained()"),R8t.forEach(t),Ngr=r(rZ," to load the model weights."),rZ.forEach(t),jgr=i(K3),T(s7.$$.fragment,K3),K3.forEach(t),Dgr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(Yy.$$.fragment,bl),Ggr=i(bl),I8e=n(bl,"P",{});var B8t=s(I8e);Ogr=r(B8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),B8t.forEach(t),Vgr=i(bl),rn=n(bl,"P",{});var Z3=s(rn);Xgr=r(Z3,"The model class to instantiate is selected based on the "),q8e=n(Z3,"CODE",{});var P8t=s(q8e);zgr=r(P8t,"model_type"),P8t.forEach(t),Qgr=r(Z3,` property of the config object (either
passed as an argument or loaded from `),N8e=n(Z3,"CODE",{});var I8t=s(N8e);Wgr=r(I8t,"pretrained_model_name_or_path"),I8t.forEach(t),Hgr=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j8e=n(Z3,"CODE",{});var q8t=s(j8e);Ugr=r(q8t,"pretrained_model_name_or_path"),q8t.forEach(t),Jgr=r(Z3,":"),Z3.forEach(t),Ygr=i(bl),ie=n(bl,"UL",{});var fe=s(ie);l7=n(fe,"LI",{});var uke=s(l7);D8e=n(uke,"STRONG",{});var N8t=s(D8e);Kgr=r(N8t,"albert"),N8t.forEach(t),Zgr=r(uke," \u2014 "),IQ=n(uke,"A",{href:!0});var j8t=s(IQ);ehr=r(j8t,"TFAlbertForMaskedLM"),j8t.forEach(t),ohr=r(uke," (ALBERT model)"),uke.forEach(t),rhr=i(fe),i7=n(fe,"LI",{});var _ke=s(i7);G8e=n(_ke,"STRONG",{});var D8t=s(G8e);thr=r(D8t,"bert"),D8t.forEach(t),ahr=r(_ke," \u2014 "),qQ=n(_ke,"A",{href:!0});var G8t=s(qQ);nhr=r(G8t,"TFBertForMaskedLM"),G8t.forEach(t),shr=r(_ke," (BERT model)"),_ke.forEach(t),lhr=i(fe),d7=n(fe,"LI",{});var bke=s(d7);O8e=n(bke,"STRONG",{});var O8t=s(O8e);ihr=r(O8t,"camembert"),O8t.forEach(t),dhr=r(bke," \u2014 "),NQ=n(bke,"A",{href:!0});var V8t=s(NQ);chr=r(V8t,"TFCamembertForMaskedLM"),V8t.forEach(t),fhr=r(bke," (CamemBERT model)"),bke.forEach(t),mhr=i(fe),c7=n(fe,"LI",{});var vke=s(c7);V8e=n(vke,"STRONG",{});var X8t=s(V8e);ghr=r(X8t,"convbert"),X8t.forEach(t),hhr=r(vke," \u2014 "),jQ=n(vke,"A",{href:!0});var z8t=s(jQ);phr=r(z8t,"TFConvBertForMaskedLM"),z8t.forEach(t),uhr=r(vke," (ConvBERT model)"),vke.forEach(t),_hr=i(fe),f7=n(fe,"LI",{});var Fke=s(f7);X8e=n(Fke,"STRONG",{});var Q8t=s(X8e);bhr=r(Q8t,"deberta"),Q8t.forEach(t),vhr=r(Fke," \u2014 "),DQ=n(Fke,"A",{href:!0});var W8t=s(DQ);Fhr=r(W8t,"TFDebertaForMaskedLM"),W8t.forEach(t),Thr=r(Fke," (DeBERTa model)"),Fke.forEach(t),Mhr=i(fe),m7=n(fe,"LI",{});var Tke=s(m7);z8e=n(Tke,"STRONG",{});var H8t=s(z8e);Ehr=r(H8t,"deberta-v2"),H8t.forEach(t),Chr=r(Tke," \u2014 "),GQ=n(Tke,"A",{href:!0});var U8t=s(GQ);whr=r(U8t,"TFDebertaV2ForMaskedLM"),U8t.forEach(t),Ahr=r(Tke," (DeBERTa-v2 model)"),Tke.forEach(t),yhr=i(fe),g7=n(fe,"LI",{});var Mke=s(g7);Q8e=n(Mke,"STRONG",{});var J8t=s(Q8e);Lhr=r(J8t,"distilbert"),J8t.forEach(t),xhr=r(Mke," \u2014 "),OQ=n(Mke,"A",{href:!0});var Y8t=s(OQ);$hr=r(Y8t,"TFDistilBertForMaskedLM"),Y8t.forEach(t),khr=r(Mke," (DistilBERT model)"),Mke.forEach(t),Shr=i(fe),h7=n(fe,"LI",{});var Eke=s(h7);W8e=n(Eke,"STRONG",{});var K8t=s(W8e);Rhr=r(K8t,"electra"),K8t.forEach(t),Bhr=r(Eke," \u2014 "),VQ=n(Eke,"A",{href:!0});var Z8t=s(VQ);Phr=r(Z8t,"TFElectraForMaskedLM"),Z8t.forEach(t),Ihr=r(Eke," (ELECTRA model)"),Eke.forEach(t),qhr=i(fe),p7=n(fe,"LI",{});var Cke=s(p7);H8e=n(Cke,"STRONG",{});var ebt=s(H8e);Nhr=r(ebt,"flaubert"),ebt.forEach(t),jhr=r(Cke," \u2014 "),XQ=n(Cke,"A",{href:!0});var obt=s(XQ);Dhr=r(obt,"TFFlaubertWithLMHeadModel"),obt.forEach(t),Ghr=r(Cke," (FlauBERT model)"),Cke.forEach(t),Ohr=i(fe),u7=n(fe,"LI",{});var wke=s(u7);U8e=n(wke,"STRONG",{});var rbt=s(U8e);Vhr=r(rbt,"funnel"),rbt.forEach(t),Xhr=r(wke," \u2014 "),zQ=n(wke,"A",{href:!0});var tbt=s(zQ);zhr=r(tbt,"TFFunnelForMaskedLM"),tbt.forEach(t),Qhr=r(wke," (Funnel Transformer model)"),wke.forEach(t),Whr=i(fe),_7=n(fe,"LI",{});var Ake=s(_7);J8e=n(Ake,"STRONG",{});var abt=s(J8e);Hhr=r(abt,"layoutlm"),abt.forEach(t),Uhr=r(Ake," \u2014 "),QQ=n(Ake,"A",{href:!0});var nbt=s(QQ);Jhr=r(nbt,"TFLayoutLMForMaskedLM"),nbt.forEach(t),Yhr=r(Ake," (LayoutLM model)"),Ake.forEach(t),Khr=i(fe),b7=n(fe,"LI",{});var yke=s(b7);Y8e=n(yke,"STRONG",{});var sbt=s(Y8e);Zhr=r(sbt,"longformer"),sbt.forEach(t),epr=r(yke," \u2014 "),WQ=n(yke,"A",{href:!0});var lbt=s(WQ);opr=r(lbt,"TFLongformerForMaskedLM"),lbt.forEach(t),rpr=r(yke," (Longformer model)"),yke.forEach(t),tpr=i(fe),v7=n(fe,"LI",{});var Lke=s(v7);K8e=n(Lke,"STRONG",{});var ibt=s(K8e);apr=r(ibt,"mobilebert"),ibt.forEach(t),npr=r(Lke," \u2014 "),HQ=n(Lke,"A",{href:!0});var dbt=s(HQ);spr=r(dbt,"TFMobileBertForMaskedLM"),dbt.forEach(t),lpr=r(Lke," (MobileBERT model)"),Lke.forEach(t),ipr=i(fe),F7=n(fe,"LI",{});var xke=s(F7);Z8e=n(xke,"STRONG",{});var cbt=s(Z8e);dpr=r(cbt,"mpnet"),cbt.forEach(t),cpr=r(xke," \u2014 "),UQ=n(xke,"A",{href:!0});var fbt=s(UQ);fpr=r(fbt,"TFMPNetForMaskedLM"),fbt.forEach(t),mpr=r(xke," (MPNet model)"),xke.forEach(t),gpr=i(fe),T7=n(fe,"LI",{});var $ke=s(T7);ebe=n($ke,"STRONG",{});var mbt=s(ebe);hpr=r(mbt,"rembert"),mbt.forEach(t),ppr=r($ke," \u2014 "),JQ=n($ke,"A",{href:!0});var gbt=s(JQ);upr=r(gbt,"TFRemBertForMaskedLM"),gbt.forEach(t),_pr=r($ke," (RemBERT model)"),$ke.forEach(t),bpr=i(fe),M7=n(fe,"LI",{});var kke=s(M7);obe=n(kke,"STRONG",{});var hbt=s(obe);vpr=r(hbt,"roberta"),hbt.forEach(t),Fpr=r(kke," \u2014 "),YQ=n(kke,"A",{href:!0});var pbt=s(YQ);Tpr=r(pbt,"TFRobertaForMaskedLM"),pbt.forEach(t),Mpr=r(kke," (RoBERTa model)"),kke.forEach(t),Epr=i(fe),E7=n(fe,"LI",{});var Ske=s(E7);rbe=n(Ske,"STRONG",{});var ubt=s(rbe);Cpr=r(ubt,"roformer"),ubt.forEach(t),wpr=r(Ske," \u2014 "),KQ=n(Ske,"A",{href:!0});var _bt=s(KQ);Apr=r(_bt,"TFRoFormerForMaskedLM"),_bt.forEach(t),ypr=r(Ske," (RoFormer model)"),Ske.forEach(t),Lpr=i(fe),C7=n(fe,"LI",{});var Rke=s(C7);tbe=n(Rke,"STRONG",{});var bbt=s(tbe);xpr=r(bbt,"tapas"),bbt.forEach(t),$pr=r(Rke," \u2014 "),ZQ=n(Rke,"A",{href:!0});var vbt=s(ZQ);kpr=r(vbt,"TFTapasForMaskedLM"),vbt.forEach(t),Spr=r(Rke," (TAPAS model)"),Rke.forEach(t),Rpr=i(fe),w7=n(fe,"LI",{});var Bke=s(w7);abe=n(Bke,"STRONG",{});var Fbt=s(abe);Bpr=r(Fbt,"xlm"),Fbt.forEach(t),Ppr=r(Bke," \u2014 "),eW=n(Bke,"A",{href:!0});var Tbt=s(eW);Ipr=r(Tbt,"TFXLMWithLMHeadModel"),Tbt.forEach(t),qpr=r(Bke," (XLM model)"),Bke.forEach(t),Npr=i(fe),A7=n(fe,"LI",{});var Pke=s(A7);nbe=n(Pke,"STRONG",{});var Mbt=s(nbe);jpr=r(Mbt,"xlm-roberta"),Mbt.forEach(t),Dpr=r(Pke," \u2014 "),oW=n(Pke,"A",{href:!0});var Ebt=s(oW);Gpr=r(Ebt,"TFXLMRobertaForMaskedLM"),Ebt.forEach(t),Opr=r(Pke," (XLM-RoBERTa model)"),Pke.forEach(t),fe.forEach(t),Vpr=i(bl),T(y7.$$.fragment,bl),bl.forEach(t),_l.forEach(t),NIe=i(f),Zd=n(f,"H2",{class:!0});var XNe=s(Zd);L7=n(XNe,"A",{id:!0,class:!0,href:!0});var Cbt=s(L7);sbe=n(Cbt,"SPAN",{});var wbt=s(sbe);T(Ky.$$.fragment,wbt),wbt.forEach(t),Cbt.forEach(t),Xpr=i(XNe),lbe=n(XNe,"SPAN",{});var Abt=s(lbe);zpr=r(Abt,"TFAutoModelForSeq2SeqLM"),Abt.forEach(t),XNe.forEach(t),jIe=i(f),rr=n(f,"DIV",{class:!0});var vl=s(rr);T(Zy.$$.fragment,vl),Qpr=i(vl),ec=n(vl,"P",{});var tZ=s(ec);Wpr=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rW=n(tZ,"A",{href:!0});var ybt=s(rW);Hpr=r(ybt,"from_pretrained()"),ybt.forEach(t),Upr=r(tZ," class method or the "),tW=n(tZ,"A",{href:!0});var Lbt=s(tW);Jpr=r(Lbt,"from_config()"),Lbt.forEach(t),Ypr=r(tZ,` class
method.`),tZ.forEach(t),Kpr=i(vl),eL=n(vl,"P",{});var zNe=s(eL);Zpr=r(zNe,"This class cannot be instantiated directly using "),ibe=n(zNe,"CODE",{});var xbt=s(ibe);eur=r(xbt,"__init__()"),xbt.forEach(t),our=r(zNe," (throws an error)."),zNe.forEach(t),rur=i(vl),$t=n(vl,"DIV",{class:!0});var ew=s($t);T(oL.$$.fragment,ew),tur=i(ew),dbe=n(ew,"P",{});var $bt=s(dbe);aur=r($bt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$bt.forEach(t),nur=i(ew),oc=n(ew,"P",{});var aZ=s(oc);sur=r(aZ,`Note:
Loading a model from its configuration file does `),cbe=n(aZ,"STRONG",{});var kbt=s(cbe);lur=r(kbt,"not"),kbt.forEach(t),iur=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=n(aZ,"A",{href:!0});var Sbt=s(aW);dur=r(Sbt,"from_pretrained()"),Sbt.forEach(t),cur=r(aZ," to load the model weights."),aZ.forEach(t),fur=i(ew),T(x7.$$.fragment,ew),ew.forEach(t),mur=i(vl),$r=n(vl,"DIV",{class:!0});var Fl=s($r);T(rL.$$.fragment,Fl),gur=i(Fl),fbe=n(Fl,"P",{});var Rbt=s(fbe);hur=r(Rbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rbt.forEach(t),pur=i(Fl),tn=n(Fl,"P",{});var ow=s(tn);uur=r(ow,"The model class to instantiate is selected based on the "),mbe=n(ow,"CODE",{});var Bbt=s(mbe);_ur=r(Bbt,"model_type"),Bbt.forEach(t),bur=r(ow,` property of the config object (either
passed as an argument or loaded from `),gbe=n(ow,"CODE",{});var Pbt=s(gbe);vur=r(Pbt,"pretrained_model_name_or_path"),Pbt.forEach(t),Fur=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=n(ow,"CODE",{});var Ibt=s(hbe);Tur=r(Ibt,"pretrained_model_name_or_path"),Ibt.forEach(t),Mur=r(ow,":"),ow.forEach(t),Eur=i(Fl),ye=n(Fl,"UL",{});var Re=s(ye);$7=n(Re,"LI",{});var Ike=s($7);pbe=n(Ike,"STRONG",{});var qbt=s(pbe);Cur=r(qbt,"bart"),qbt.forEach(t),wur=r(Ike," \u2014 "),nW=n(Ike,"A",{href:!0});var Nbt=s(nW);Aur=r(Nbt,"TFBartForConditionalGeneration"),Nbt.forEach(t),yur=r(Ike," (BART model)"),Ike.forEach(t),Lur=i(Re),k7=n(Re,"LI",{});var qke=s(k7);ube=n(qke,"STRONG",{});var jbt=s(ube);xur=r(jbt,"blenderbot"),jbt.forEach(t),$ur=r(qke," \u2014 "),sW=n(qke,"A",{href:!0});var Dbt=s(sW);kur=r(Dbt,"TFBlenderbotForConditionalGeneration"),Dbt.forEach(t),Sur=r(qke," (Blenderbot model)"),qke.forEach(t),Rur=i(Re),S7=n(Re,"LI",{});var Nke=s(S7);_be=n(Nke,"STRONG",{});var Gbt=s(_be);Bur=r(Gbt,"blenderbot-small"),Gbt.forEach(t),Pur=r(Nke," \u2014 "),lW=n(Nke,"A",{href:!0});var Obt=s(lW);Iur=r(Obt,"TFBlenderbotSmallForConditionalGeneration"),Obt.forEach(t),qur=r(Nke," (BlenderbotSmall model)"),Nke.forEach(t),Nur=i(Re),R7=n(Re,"LI",{});var jke=s(R7);bbe=n(jke,"STRONG",{});var Vbt=s(bbe);jur=r(Vbt,"encoder-decoder"),Vbt.forEach(t),Dur=r(jke," \u2014 "),iW=n(jke,"A",{href:!0});var Xbt=s(iW);Gur=r(Xbt,"TFEncoderDecoderModel"),Xbt.forEach(t),Our=r(jke," (Encoder decoder model)"),jke.forEach(t),Vur=i(Re),B7=n(Re,"LI",{});var Dke=s(B7);vbe=n(Dke,"STRONG",{});var zbt=s(vbe);Xur=r(zbt,"led"),zbt.forEach(t),zur=r(Dke," \u2014 "),dW=n(Dke,"A",{href:!0});var Qbt=s(dW);Qur=r(Qbt,"TFLEDForConditionalGeneration"),Qbt.forEach(t),Wur=r(Dke," (LED model)"),Dke.forEach(t),Hur=i(Re),P7=n(Re,"LI",{});var Gke=s(P7);Fbe=n(Gke,"STRONG",{});var Wbt=s(Fbe);Uur=r(Wbt,"marian"),Wbt.forEach(t),Jur=r(Gke," \u2014 "),cW=n(Gke,"A",{href:!0});var Hbt=s(cW);Yur=r(Hbt,"TFMarianMTModel"),Hbt.forEach(t),Kur=r(Gke," (Marian model)"),Gke.forEach(t),Zur=i(Re),I7=n(Re,"LI",{});var Oke=s(I7);Tbe=n(Oke,"STRONG",{});var Ubt=s(Tbe);e_r=r(Ubt,"mbart"),Ubt.forEach(t),o_r=r(Oke," \u2014 "),fW=n(Oke,"A",{href:!0});var Jbt=s(fW);r_r=r(Jbt,"TFMBartForConditionalGeneration"),Jbt.forEach(t),t_r=r(Oke," (mBART model)"),Oke.forEach(t),a_r=i(Re),q7=n(Re,"LI",{});var Vke=s(q7);Mbe=n(Vke,"STRONG",{});var Ybt=s(Mbe);n_r=r(Ybt,"mt5"),Ybt.forEach(t),s_r=r(Vke," \u2014 "),mW=n(Vke,"A",{href:!0});var Kbt=s(mW);l_r=r(Kbt,"TFMT5ForConditionalGeneration"),Kbt.forEach(t),i_r=r(Vke," (mT5 model)"),Vke.forEach(t),d_r=i(Re),N7=n(Re,"LI",{});var Xke=s(N7);Ebe=n(Xke,"STRONG",{});var Zbt=s(Ebe);c_r=r(Zbt,"pegasus"),Zbt.forEach(t),f_r=r(Xke," \u2014 "),gW=n(Xke,"A",{href:!0});var e2t=s(gW);m_r=r(e2t,"TFPegasusForConditionalGeneration"),e2t.forEach(t),g_r=r(Xke," (Pegasus model)"),Xke.forEach(t),h_r=i(Re),j7=n(Re,"LI",{});var zke=s(j7);Cbe=n(zke,"STRONG",{});var o2t=s(Cbe);p_r=r(o2t,"t5"),o2t.forEach(t),u_r=r(zke," \u2014 "),hW=n(zke,"A",{href:!0});var r2t=s(hW);__r=r(r2t,"TFT5ForConditionalGeneration"),r2t.forEach(t),b_r=r(zke," (T5 model)"),zke.forEach(t),Re.forEach(t),v_r=i(Fl),T(D7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),DIe=i(f),rc=n(f,"H2",{class:!0});var QNe=s(rc);G7=n(QNe,"A",{id:!0,class:!0,href:!0});var t2t=s(G7);wbe=n(t2t,"SPAN",{});var a2t=s(wbe);T(tL.$$.fragment,a2t),a2t.forEach(t),t2t.forEach(t),F_r=i(QNe),Abe=n(QNe,"SPAN",{});var n2t=s(Abe);T_r=r(n2t,"TFAutoModelForSequenceClassification"),n2t.forEach(t),QNe.forEach(t),GIe=i(f),tr=n(f,"DIV",{class:!0});var Tl=s(tr);T(aL.$$.fragment,Tl),M_r=i(Tl),tc=n(Tl,"P",{});var nZ=s(tc);E_r=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pW=n(nZ,"A",{href:!0});var s2t=s(pW);C_r=r(s2t,"from_pretrained()"),s2t.forEach(t),w_r=r(nZ," class method or the "),uW=n(nZ,"A",{href:!0});var l2t=s(uW);A_r=r(l2t,"from_config()"),l2t.forEach(t),y_r=r(nZ,` class
method.`),nZ.forEach(t),L_r=i(Tl),nL=n(Tl,"P",{});var WNe=s(nL);x_r=r(WNe,"This class cannot be instantiated directly using "),ybe=n(WNe,"CODE",{});var i2t=s(ybe);$_r=r(i2t,"__init__()"),i2t.forEach(t),k_r=r(WNe," (throws an error)."),WNe.forEach(t),S_r=i(Tl),kt=n(Tl,"DIV",{class:!0});var rw=s(kt);T(sL.$$.fragment,rw),R_r=i(rw),Lbe=n(rw,"P",{});var d2t=s(Lbe);B_r=r(d2t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),d2t.forEach(t),P_r=i(rw),ac=n(rw,"P",{});var sZ=s(ac);I_r=r(sZ,`Note:
Loading a model from its configuration file does `),xbe=n(sZ,"STRONG",{});var c2t=s(xbe);q_r=r(c2t,"not"),c2t.forEach(t),N_r=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=n(sZ,"A",{href:!0});var f2t=s(_W);j_r=r(f2t,"from_pretrained()"),f2t.forEach(t),D_r=r(sZ," to load the model weights."),sZ.forEach(t),G_r=i(rw),T(O7.$$.fragment,rw),rw.forEach(t),O_r=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(lL.$$.fragment,Ml),V_r=i(Ml),$be=n(Ml,"P",{});var m2t=s($be);X_r=r(m2t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),m2t.forEach(t),z_r=i(Ml),an=n(Ml,"P",{});var tw=s(an);Q_r=r(tw,"The model class to instantiate is selected based on the "),kbe=n(tw,"CODE",{});var g2t=s(kbe);W_r=r(g2t,"model_type"),g2t.forEach(t),H_r=r(tw,` property of the config object (either
passed as an argument or loaded from `),Sbe=n(tw,"CODE",{});var h2t=s(Sbe);U_r=r(h2t,"pretrained_model_name_or_path"),h2t.forEach(t),J_r=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=n(tw,"CODE",{});var p2t=s(Rbe);Y_r=r(p2t,"pretrained_model_name_or_path"),p2t.forEach(t),K_r=r(tw,":"),tw.forEach(t),Z_r=i(Ml),Z=n(Ml,"UL",{});var re=s(Z);V7=n(re,"LI",{});var Qke=s(V7);Bbe=n(Qke,"STRONG",{});var u2t=s(Bbe);e1r=r(u2t,"albert"),u2t.forEach(t),o1r=r(Qke," \u2014 "),bW=n(Qke,"A",{href:!0});var _2t=s(bW);r1r=r(_2t,"TFAlbertForSequenceClassification"),_2t.forEach(t),t1r=r(Qke," (ALBERT model)"),Qke.forEach(t),a1r=i(re),X7=n(re,"LI",{});var Wke=s(X7);Pbe=n(Wke,"STRONG",{});var b2t=s(Pbe);n1r=r(b2t,"bert"),b2t.forEach(t),s1r=r(Wke," \u2014 "),vW=n(Wke,"A",{href:!0});var v2t=s(vW);l1r=r(v2t,"TFBertForSequenceClassification"),v2t.forEach(t),i1r=r(Wke," (BERT model)"),Wke.forEach(t),d1r=i(re),z7=n(re,"LI",{});var Hke=s(z7);Ibe=n(Hke,"STRONG",{});var F2t=s(Ibe);c1r=r(F2t,"camembert"),F2t.forEach(t),f1r=r(Hke," \u2014 "),FW=n(Hke,"A",{href:!0});var T2t=s(FW);m1r=r(T2t,"TFCamembertForSequenceClassification"),T2t.forEach(t),g1r=r(Hke," (CamemBERT model)"),Hke.forEach(t),h1r=i(re),Q7=n(re,"LI",{});var Uke=s(Q7);qbe=n(Uke,"STRONG",{});var M2t=s(qbe);p1r=r(M2t,"convbert"),M2t.forEach(t),u1r=r(Uke," \u2014 "),TW=n(Uke,"A",{href:!0});var E2t=s(TW);_1r=r(E2t,"TFConvBertForSequenceClassification"),E2t.forEach(t),b1r=r(Uke," (ConvBERT model)"),Uke.forEach(t),v1r=i(re),W7=n(re,"LI",{});var Jke=s(W7);Nbe=n(Jke,"STRONG",{});var C2t=s(Nbe);F1r=r(C2t,"ctrl"),C2t.forEach(t),T1r=r(Jke," \u2014 "),MW=n(Jke,"A",{href:!0});var w2t=s(MW);M1r=r(w2t,"TFCTRLForSequenceClassification"),w2t.forEach(t),E1r=r(Jke," (CTRL model)"),Jke.forEach(t),C1r=i(re),H7=n(re,"LI",{});var Yke=s(H7);jbe=n(Yke,"STRONG",{});var A2t=s(jbe);w1r=r(A2t,"deberta"),A2t.forEach(t),A1r=r(Yke," \u2014 "),EW=n(Yke,"A",{href:!0});var y2t=s(EW);y1r=r(y2t,"TFDebertaForSequenceClassification"),y2t.forEach(t),L1r=r(Yke," (DeBERTa model)"),Yke.forEach(t),x1r=i(re),U7=n(re,"LI",{});var Kke=s(U7);Dbe=n(Kke,"STRONG",{});var L2t=s(Dbe);$1r=r(L2t,"deberta-v2"),L2t.forEach(t),k1r=r(Kke," \u2014 "),CW=n(Kke,"A",{href:!0});var x2t=s(CW);S1r=r(x2t,"TFDebertaV2ForSequenceClassification"),x2t.forEach(t),R1r=r(Kke," (DeBERTa-v2 model)"),Kke.forEach(t),B1r=i(re),J7=n(re,"LI",{});var Zke=s(J7);Gbe=n(Zke,"STRONG",{});var $2t=s(Gbe);P1r=r($2t,"distilbert"),$2t.forEach(t),I1r=r(Zke," \u2014 "),wW=n(Zke,"A",{href:!0});var k2t=s(wW);q1r=r(k2t,"TFDistilBertForSequenceClassification"),k2t.forEach(t),N1r=r(Zke," (DistilBERT model)"),Zke.forEach(t),j1r=i(re),Y7=n(re,"LI",{});var eSe=s(Y7);Obe=n(eSe,"STRONG",{});var S2t=s(Obe);D1r=r(S2t,"electra"),S2t.forEach(t),G1r=r(eSe," \u2014 "),AW=n(eSe,"A",{href:!0});var R2t=s(AW);O1r=r(R2t,"TFElectraForSequenceClassification"),R2t.forEach(t),V1r=r(eSe," (ELECTRA model)"),eSe.forEach(t),X1r=i(re),K7=n(re,"LI",{});var oSe=s(K7);Vbe=n(oSe,"STRONG",{});var B2t=s(Vbe);z1r=r(B2t,"flaubert"),B2t.forEach(t),Q1r=r(oSe," \u2014 "),yW=n(oSe,"A",{href:!0});var P2t=s(yW);W1r=r(P2t,"TFFlaubertForSequenceClassification"),P2t.forEach(t),H1r=r(oSe," (FlauBERT model)"),oSe.forEach(t),U1r=i(re),Z7=n(re,"LI",{});var rSe=s(Z7);Xbe=n(rSe,"STRONG",{});var I2t=s(Xbe);J1r=r(I2t,"funnel"),I2t.forEach(t),Y1r=r(rSe," \u2014 "),LW=n(rSe,"A",{href:!0});var q2t=s(LW);K1r=r(q2t,"TFFunnelForSequenceClassification"),q2t.forEach(t),Z1r=r(rSe," (Funnel Transformer model)"),rSe.forEach(t),e8r=i(re),eM=n(re,"LI",{});var tSe=s(eM);zbe=n(tSe,"STRONG",{});var N2t=s(zbe);o8r=r(N2t,"gpt2"),N2t.forEach(t),r8r=r(tSe," \u2014 "),xW=n(tSe,"A",{href:!0});var j2t=s(xW);t8r=r(j2t,"TFGPT2ForSequenceClassification"),j2t.forEach(t),a8r=r(tSe," (OpenAI GPT-2 model)"),tSe.forEach(t),n8r=i(re),oM=n(re,"LI",{});var aSe=s(oM);Qbe=n(aSe,"STRONG",{});var D2t=s(Qbe);s8r=r(D2t,"gptj"),D2t.forEach(t),l8r=r(aSe," \u2014 "),$W=n(aSe,"A",{href:!0});var G2t=s($W);i8r=r(G2t,"TFGPTJForSequenceClassification"),G2t.forEach(t),d8r=r(aSe," (GPT-J model)"),aSe.forEach(t),c8r=i(re),rM=n(re,"LI",{});var nSe=s(rM);Wbe=n(nSe,"STRONG",{});var O2t=s(Wbe);f8r=r(O2t,"layoutlm"),O2t.forEach(t),m8r=r(nSe," \u2014 "),kW=n(nSe,"A",{href:!0});var V2t=s(kW);g8r=r(V2t,"TFLayoutLMForSequenceClassification"),V2t.forEach(t),h8r=r(nSe," (LayoutLM model)"),nSe.forEach(t),p8r=i(re),tM=n(re,"LI",{});var sSe=s(tM);Hbe=n(sSe,"STRONG",{});var X2t=s(Hbe);u8r=r(X2t,"longformer"),X2t.forEach(t),_8r=r(sSe," \u2014 "),SW=n(sSe,"A",{href:!0});var z2t=s(SW);b8r=r(z2t,"TFLongformerForSequenceClassification"),z2t.forEach(t),v8r=r(sSe," (Longformer model)"),sSe.forEach(t),F8r=i(re),aM=n(re,"LI",{});var lSe=s(aM);Ube=n(lSe,"STRONG",{});var Q2t=s(Ube);T8r=r(Q2t,"mobilebert"),Q2t.forEach(t),M8r=r(lSe," \u2014 "),RW=n(lSe,"A",{href:!0});var W2t=s(RW);E8r=r(W2t,"TFMobileBertForSequenceClassification"),W2t.forEach(t),C8r=r(lSe," (MobileBERT model)"),lSe.forEach(t),w8r=i(re),nM=n(re,"LI",{});var iSe=s(nM);Jbe=n(iSe,"STRONG",{});var H2t=s(Jbe);A8r=r(H2t,"mpnet"),H2t.forEach(t),y8r=r(iSe," \u2014 "),BW=n(iSe,"A",{href:!0});var U2t=s(BW);L8r=r(U2t,"TFMPNetForSequenceClassification"),U2t.forEach(t),x8r=r(iSe," (MPNet model)"),iSe.forEach(t),$8r=i(re),sM=n(re,"LI",{});var dSe=s(sM);Ybe=n(dSe,"STRONG",{});var J2t=s(Ybe);k8r=r(J2t,"openai-gpt"),J2t.forEach(t),S8r=r(dSe," \u2014 "),PW=n(dSe,"A",{href:!0});var Y2t=s(PW);R8r=r(Y2t,"TFOpenAIGPTForSequenceClassification"),Y2t.forEach(t),B8r=r(dSe," (OpenAI GPT model)"),dSe.forEach(t),P8r=i(re),lM=n(re,"LI",{});var cSe=s(lM);Kbe=n(cSe,"STRONG",{});var K2t=s(Kbe);I8r=r(K2t,"rembert"),K2t.forEach(t),q8r=r(cSe," \u2014 "),IW=n(cSe,"A",{href:!0});var Z2t=s(IW);N8r=r(Z2t,"TFRemBertForSequenceClassification"),Z2t.forEach(t),j8r=r(cSe," (RemBERT model)"),cSe.forEach(t),D8r=i(re),iM=n(re,"LI",{});var fSe=s(iM);Zbe=n(fSe,"STRONG",{});var evt=s(Zbe);G8r=r(evt,"roberta"),evt.forEach(t),O8r=r(fSe," \u2014 "),qW=n(fSe,"A",{href:!0});var ovt=s(qW);V8r=r(ovt,"TFRobertaForSequenceClassification"),ovt.forEach(t),X8r=r(fSe," (RoBERTa model)"),fSe.forEach(t),z8r=i(re),dM=n(re,"LI",{});var mSe=s(dM);e2e=n(mSe,"STRONG",{});var rvt=s(e2e);Q8r=r(rvt,"roformer"),rvt.forEach(t),W8r=r(mSe," \u2014 "),NW=n(mSe,"A",{href:!0});var tvt=s(NW);H8r=r(tvt,"TFRoFormerForSequenceClassification"),tvt.forEach(t),U8r=r(mSe," (RoFormer model)"),mSe.forEach(t),J8r=i(re),cM=n(re,"LI",{});var gSe=s(cM);o2e=n(gSe,"STRONG",{});var avt=s(o2e);Y8r=r(avt,"tapas"),avt.forEach(t),K8r=r(gSe," \u2014 "),jW=n(gSe,"A",{href:!0});var nvt=s(jW);Z8r=r(nvt,"TFTapasForSequenceClassification"),nvt.forEach(t),ebr=r(gSe," (TAPAS model)"),gSe.forEach(t),obr=i(re),fM=n(re,"LI",{});var hSe=s(fM);r2e=n(hSe,"STRONG",{});var svt=s(r2e);rbr=r(svt,"transfo-xl"),svt.forEach(t),tbr=r(hSe," \u2014 "),DW=n(hSe,"A",{href:!0});var lvt=s(DW);abr=r(lvt,"TFTransfoXLForSequenceClassification"),lvt.forEach(t),nbr=r(hSe," (Transformer-XL model)"),hSe.forEach(t),sbr=i(re),mM=n(re,"LI",{});var pSe=s(mM);t2e=n(pSe,"STRONG",{});var ivt=s(t2e);lbr=r(ivt,"xlm"),ivt.forEach(t),ibr=r(pSe," \u2014 "),GW=n(pSe,"A",{href:!0});var dvt=s(GW);dbr=r(dvt,"TFXLMForSequenceClassification"),dvt.forEach(t),cbr=r(pSe," (XLM model)"),pSe.forEach(t),fbr=i(re),gM=n(re,"LI",{});var uSe=s(gM);a2e=n(uSe,"STRONG",{});var cvt=s(a2e);mbr=r(cvt,"xlm-roberta"),cvt.forEach(t),gbr=r(uSe," \u2014 "),OW=n(uSe,"A",{href:!0});var fvt=s(OW);hbr=r(fvt,"TFXLMRobertaForSequenceClassification"),fvt.forEach(t),pbr=r(uSe," (XLM-RoBERTa model)"),uSe.forEach(t),ubr=i(re),hM=n(re,"LI",{});var _Se=s(hM);n2e=n(_Se,"STRONG",{});var mvt=s(n2e);_br=r(mvt,"xlnet"),mvt.forEach(t),bbr=r(_Se," \u2014 "),VW=n(_Se,"A",{href:!0});var gvt=s(VW);vbr=r(gvt,"TFXLNetForSequenceClassification"),gvt.forEach(t),Fbr=r(_Se," (XLNet model)"),_Se.forEach(t),re.forEach(t),Tbr=i(Ml),T(pM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),OIe=i(f),nc=n(f,"H2",{class:!0});var HNe=s(nc);uM=n(HNe,"A",{id:!0,class:!0,href:!0});var hvt=s(uM);s2e=n(hvt,"SPAN",{});var pvt=s(s2e);T(iL.$$.fragment,pvt),pvt.forEach(t),hvt.forEach(t),Mbr=i(HNe),l2e=n(HNe,"SPAN",{});var uvt=s(l2e);Ebr=r(uvt,"TFAutoModelForMultipleChoice"),uvt.forEach(t),HNe.forEach(t),VIe=i(f),ar=n(f,"DIV",{class:!0});var El=s(ar);T(dL.$$.fragment,El),Cbr=i(El),sc=n(El,"P",{});var lZ=s(sc);wbr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XW=n(lZ,"A",{href:!0});var _vt=s(XW);Abr=r(_vt,"from_pretrained()"),_vt.forEach(t),ybr=r(lZ," class method or the "),zW=n(lZ,"A",{href:!0});var bvt=s(zW);Lbr=r(bvt,"from_config()"),bvt.forEach(t),xbr=r(lZ,` class
method.`),lZ.forEach(t),$br=i(El),cL=n(El,"P",{});var UNe=s(cL);kbr=r(UNe,"This class cannot be instantiated directly using "),i2e=n(UNe,"CODE",{});var vvt=s(i2e);Sbr=r(vvt,"__init__()"),vvt.forEach(t),Rbr=r(UNe," (throws an error)."),UNe.forEach(t),Bbr=i(El),St=n(El,"DIV",{class:!0});var aw=s(St);T(fL.$$.fragment,aw),Pbr=i(aw),d2e=n(aw,"P",{});var Fvt=s(d2e);Ibr=r(Fvt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Fvt.forEach(t),qbr=i(aw),lc=n(aw,"P",{});var iZ=s(lc);Nbr=r(iZ,`Note:
Loading a model from its configuration file does `),c2e=n(iZ,"STRONG",{});var Tvt=s(c2e);jbr=r(Tvt,"not"),Tvt.forEach(t),Dbr=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(iZ,"A",{href:!0});var Mvt=s(QW);Gbr=r(Mvt,"from_pretrained()"),Mvt.forEach(t),Obr=r(iZ," to load the model weights."),iZ.forEach(t),Vbr=i(aw),T(_M.$$.fragment,aw),aw.forEach(t),Xbr=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(mL.$$.fragment,Cl),zbr=i(Cl),f2e=n(Cl,"P",{});var Evt=s(f2e);Qbr=r(Evt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Evt.forEach(t),Wbr=i(Cl),nn=n(Cl,"P",{});var nw=s(nn);Hbr=r(nw,"The model class to instantiate is selected based on the "),m2e=n(nw,"CODE",{});var Cvt=s(m2e);Ubr=r(Cvt,"model_type"),Cvt.forEach(t),Jbr=r(nw,` property of the config object (either
passed as an argument or loaded from `),g2e=n(nw,"CODE",{});var wvt=s(g2e);Ybr=r(wvt,"pretrained_model_name_or_path"),wvt.forEach(t),Kbr=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=n(nw,"CODE",{});var Avt=s(h2e);Zbr=r(Avt,"pretrained_model_name_or_path"),Avt.forEach(t),e2r=r(nw,":"),nw.forEach(t),o2r=i(Cl),pe=n(Cl,"UL",{});var _e=s(pe);bM=n(_e,"LI",{});var bSe=s(bM);p2e=n(bSe,"STRONG",{});var yvt=s(p2e);r2r=r(yvt,"albert"),yvt.forEach(t),t2r=r(bSe," \u2014 "),WW=n(bSe,"A",{href:!0});var Lvt=s(WW);a2r=r(Lvt,"TFAlbertForMultipleChoice"),Lvt.forEach(t),n2r=r(bSe," (ALBERT model)"),bSe.forEach(t),s2r=i(_e),vM=n(_e,"LI",{});var vSe=s(vM);u2e=n(vSe,"STRONG",{});var xvt=s(u2e);l2r=r(xvt,"bert"),xvt.forEach(t),i2r=r(vSe," \u2014 "),HW=n(vSe,"A",{href:!0});var $vt=s(HW);d2r=r($vt,"TFBertForMultipleChoice"),$vt.forEach(t),c2r=r(vSe," (BERT model)"),vSe.forEach(t),f2r=i(_e),FM=n(_e,"LI",{});var FSe=s(FM);_2e=n(FSe,"STRONG",{});var kvt=s(_2e);m2r=r(kvt,"camembert"),kvt.forEach(t),g2r=r(FSe," \u2014 "),UW=n(FSe,"A",{href:!0});var Svt=s(UW);h2r=r(Svt,"TFCamembertForMultipleChoice"),Svt.forEach(t),p2r=r(FSe," (CamemBERT model)"),FSe.forEach(t),u2r=i(_e),TM=n(_e,"LI",{});var TSe=s(TM);b2e=n(TSe,"STRONG",{});var Rvt=s(b2e);_2r=r(Rvt,"convbert"),Rvt.forEach(t),b2r=r(TSe," \u2014 "),JW=n(TSe,"A",{href:!0});var Bvt=s(JW);v2r=r(Bvt,"TFConvBertForMultipleChoice"),Bvt.forEach(t),F2r=r(TSe," (ConvBERT model)"),TSe.forEach(t),T2r=i(_e),MM=n(_e,"LI",{});var MSe=s(MM);v2e=n(MSe,"STRONG",{});var Pvt=s(v2e);M2r=r(Pvt,"distilbert"),Pvt.forEach(t),E2r=r(MSe," \u2014 "),YW=n(MSe,"A",{href:!0});var Ivt=s(YW);C2r=r(Ivt,"TFDistilBertForMultipleChoice"),Ivt.forEach(t),w2r=r(MSe," (DistilBERT model)"),MSe.forEach(t),A2r=i(_e),EM=n(_e,"LI",{});var ESe=s(EM);F2e=n(ESe,"STRONG",{});var qvt=s(F2e);y2r=r(qvt,"electra"),qvt.forEach(t),L2r=r(ESe," \u2014 "),KW=n(ESe,"A",{href:!0});var Nvt=s(KW);x2r=r(Nvt,"TFElectraForMultipleChoice"),Nvt.forEach(t),$2r=r(ESe," (ELECTRA model)"),ESe.forEach(t),k2r=i(_e),CM=n(_e,"LI",{});var CSe=s(CM);T2e=n(CSe,"STRONG",{});var jvt=s(T2e);S2r=r(jvt,"flaubert"),jvt.forEach(t),R2r=r(CSe," \u2014 "),ZW=n(CSe,"A",{href:!0});var Dvt=s(ZW);B2r=r(Dvt,"TFFlaubertForMultipleChoice"),Dvt.forEach(t),P2r=r(CSe," (FlauBERT model)"),CSe.forEach(t),I2r=i(_e),wM=n(_e,"LI",{});var wSe=s(wM);M2e=n(wSe,"STRONG",{});var Gvt=s(M2e);q2r=r(Gvt,"funnel"),Gvt.forEach(t),N2r=r(wSe," \u2014 "),eH=n(wSe,"A",{href:!0});var Ovt=s(eH);j2r=r(Ovt,"TFFunnelForMultipleChoice"),Ovt.forEach(t),D2r=r(wSe," (Funnel Transformer model)"),wSe.forEach(t),G2r=i(_e),AM=n(_e,"LI",{});var ASe=s(AM);E2e=n(ASe,"STRONG",{});var Vvt=s(E2e);O2r=r(Vvt,"longformer"),Vvt.forEach(t),V2r=r(ASe," \u2014 "),oH=n(ASe,"A",{href:!0});var Xvt=s(oH);X2r=r(Xvt,"TFLongformerForMultipleChoice"),Xvt.forEach(t),z2r=r(ASe," (Longformer model)"),ASe.forEach(t),Q2r=i(_e),yM=n(_e,"LI",{});var ySe=s(yM);C2e=n(ySe,"STRONG",{});var zvt=s(C2e);W2r=r(zvt,"mobilebert"),zvt.forEach(t),H2r=r(ySe," \u2014 "),rH=n(ySe,"A",{href:!0});var Qvt=s(rH);U2r=r(Qvt,"TFMobileBertForMultipleChoice"),Qvt.forEach(t),J2r=r(ySe," (MobileBERT model)"),ySe.forEach(t),Y2r=i(_e),LM=n(_e,"LI",{});var LSe=s(LM);w2e=n(LSe,"STRONG",{});var Wvt=s(w2e);K2r=r(Wvt,"mpnet"),Wvt.forEach(t),Z2r=r(LSe," \u2014 "),tH=n(LSe,"A",{href:!0});var Hvt=s(tH);evr=r(Hvt,"TFMPNetForMultipleChoice"),Hvt.forEach(t),ovr=r(LSe," (MPNet model)"),LSe.forEach(t),rvr=i(_e),xM=n(_e,"LI",{});var xSe=s(xM);A2e=n(xSe,"STRONG",{});var Uvt=s(A2e);tvr=r(Uvt,"rembert"),Uvt.forEach(t),avr=r(xSe," \u2014 "),aH=n(xSe,"A",{href:!0});var Jvt=s(aH);nvr=r(Jvt,"TFRemBertForMultipleChoice"),Jvt.forEach(t),svr=r(xSe," (RemBERT model)"),xSe.forEach(t),lvr=i(_e),$M=n(_e,"LI",{});var $Se=s($M);y2e=n($Se,"STRONG",{});var Yvt=s(y2e);ivr=r(Yvt,"roberta"),Yvt.forEach(t),dvr=r($Se," \u2014 "),nH=n($Se,"A",{href:!0});var Kvt=s(nH);cvr=r(Kvt,"TFRobertaForMultipleChoice"),Kvt.forEach(t),fvr=r($Se," (RoBERTa model)"),$Se.forEach(t),mvr=i(_e),kM=n(_e,"LI",{});var kSe=s(kM);L2e=n(kSe,"STRONG",{});var Zvt=s(L2e);gvr=r(Zvt,"roformer"),Zvt.forEach(t),hvr=r(kSe," \u2014 "),sH=n(kSe,"A",{href:!0});var eFt=s(sH);pvr=r(eFt,"TFRoFormerForMultipleChoice"),eFt.forEach(t),uvr=r(kSe," (RoFormer model)"),kSe.forEach(t),_vr=i(_e),SM=n(_e,"LI",{});var SSe=s(SM);x2e=n(SSe,"STRONG",{});var oFt=s(x2e);bvr=r(oFt,"xlm"),oFt.forEach(t),vvr=r(SSe," \u2014 "),lH=n(SSe,"A",{href:!0});var rFt=s(lH);Fvr=r(rFt,"TFXLMForMultipleChoice"),rFt.forEach(t),Tvr=r(SSe," (XLM model)"),SSe.forEach(t),Mvr=i(_e),RM=n(_e,"LI",{});var RSe=s(RM);$2e=n(RSe,"STRONG",{});var tFt=s($2e);Evr=r(tFt,"xlm-roberta"),tFt.forEach(t),Cvr=r(RSe," \u2014 "),iH=n(RSe,"A",{href:!0});var aFt=s(iH);wvr=r(aFt,"TFXLMRobertaForMultipleChoice"),aFt.forEach(t),Avr=r(RSe," (XLM-RoBERTa model)"),RSe.forEach(t),yvr=i(_e),BM=n(_e,"LI",{});var BSe=s(BM);k2e=n(BSe,"STRONG",{});var nFt=s(k2e);Lvr=r(nFt,"xlnet"),nFt.forEach(t),xvr=r(BSe," \u2014 "),dH=n(BSe,"A",{href:!0});var sFt=s(dH);$vr=r(sFt,"TFXLNetForMultipleChoice"),sFt.forEach(t),kvr=r(BSe," (XLNet model)"),BSe.forEach(t),_e.forEach(t),Svr=i(Cl),T(PM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),XIe=i(f),ic=n(f,"H2",{class:!0});var JNe=s(ic);IM=n(JNe,"A",{id:!0,class:!0,href:!0});var lFt=s(IM);S2e=n(lFt,"SPAN",{});var iFt=s(S2e);T(gL.$$.fragment,iFt),iFt.forEach(t),lFt.forEach(t),Rvr=i(JNe),R2e=n(JNe,"SPAN",{});var dFt=s(R2e);Bvr=r(dFt,"TFAutoModelForNextSentencePrediction"),dFt.forEach(t),JNe.forEach(t),zIe=i(f),nr=n(f,"DIV",{class:!0});var wl=s(nr);T(hL.$$.fragment,wl),Pvr=i(wl),dc=n(wl,"P",{});var dZ=s(dc);Ivr=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cH=n(dZ,"A",{href:!0});var cFt=s(cH);qvr=r(cFt,"from_pretrained()"),cFt.forEach(t),Nvr=r(dZ," class method or the "),fH=n(dZ,"A",{href:!0});var fFt=s(fH);jvr=r(fFt,"from_config()"),fFt.forEach(t),Dvr=r(dZ,` class
method.`),dZ.forEach(t),Gvr=i(wl),pL=n(wl,"P",{});var YNe=s(pL);Ovr=r(YNe,"This class cannot be instantiated directly using "),B2e=n(YNe,"CODE",{});var mFt=s(B2e);Vvr=r(mFt,"__init__()"),mFt.forEach(t),Xvr=r(YNe," (throws an error)."),YNe.forEach(t),zvr=i(wl),Rt=n(wl,"DIV",{class:!0});var sw=s(Rt);T(uL.$$.fragment,sw),Qvr=i(sw),P2e=n(sw,"P",{});var gFt=s(P2e);Wvr=r(gFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gFt.forEach(t),Hvr=i(sw),cc=n(sw,"P",{});var cZ=s(cc);Uvr=r(cZ,`Note:
Loading a model from its configuration file does `),I2e=n(cZ,"STRONG",{});var hFt=s(I2e);Jvr=r(hFt,"not"),hFt.forEach(t),Yvr=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(cZ,"A",{href:!0});var pFt=s(mH);Kvr=r(pFt,"from_pretrained()"),pFt.forEach(t),Zvr=r(cZ," to load the model weights."),cZ.forEach(t),eFr=i(sw),T(qM.$$.fragment,sw),sw.forEach(t),oFr=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(_L.$$.fragment,Al),rFr=i(Al),q2e=n(Al,"P",{});var uFt=s(q2e);tFr=r(uFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uFt.forEach(t),aFr=i(Al),sn=n(Al,"P",{});var lw=s(sn);nFr=r(lw,"The model class to instantiate is selected based on the "),N2e=n(lw,"CODE",{});var _Ft=s(N2e);sFr=r(_Ft,"model_type"),_Ft.forEach(t),lFr=r(lw,` property of the config object (either
passed as an argument or loaded from `),j2e=n(lw,"CODE",{});var bFt=s(j2e);iFr=r(bFt,"pretrained_model_name_or_path"),bFt.forEach(t),dFr=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=n(lw,"CODE",{});var vFt=s(D2e);cFr=r(vFt,"pretrained_model_name_or_path"),vFt.forEach(t),fFr=r(lw,":"),lw.forEach(t),mFr=i(Al),bL=n(Al,"UL",{});var KNe=s(bL);NM=n(KNe,"LI",{});var PSe=s(NM);G2e=n(PSe,"STRONG",{});var FFt=s(G2e);gFr=r(FFt,"bert"),FFt.forEach(t),hFr=r(PSe," \u2014 "),gH=n(PSe,"A",{href:!0});var TFt=s(gH);pFr=r(TFt,"TFBertForNextSentencePrediction"),TFt.forEach(t),uFr=r(PSe," (BERT model)"),PSe.forEach(t),_Fr=i(KNe),jM=n(KNe,"LI",{});var ISe=s(jM);O2e=n(ISe,"STRONG",{});var MFt=s(O2e);bFr=r(MFt,"mobilebert"),MFt.forEach(t),vFr=r(ISe," \u2014 "),hH=n(ISe,"A",{href:!0});var EFt=s(hH);FFr=r(EFt,"TFMobileBertForNextSentencePrediction"),EFt.forEach(t),TFr=r(ISe," (MobileBERT model)"),ISe.forEach(t),KNe.forEach(t),MFr=i(Al),T(DM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),QIe=i(f),fc=n(f,"H2",{class:!0});var ZNe=s(fc);GM=n(ZNe,"A",{id:!0,class:!0,href:!0});var CFt=s(GM);V2e=n(CFt,"SPAN",{});var wFt=s(V2e);T(vL.$$.fragment,wFt),wFt.forEach(t),CFt.forEach(t),EFr=i(ZNe),X2e=n(ZNe,"SPAN",{});var AFt=s(X2e);CFr=r(AFt,"TFAutoModelForTableQuestionAnswering"),AFt.forEach(t),ZNe.forEach(t),WIe=i(f),sr=n(f,"DIV",{class:!0});var yl=s(sr);T(FL.$$.fragment,yl),wFr=i(yl),mc=n(yl,"P",{});var fZ=s(mc);AFr=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pH=n(fZ,"A",{href:!0});var yFt=s(pH);yFr=r(yFt,"from_pretrained()"),yFt.forEach(t),LFr=r(fZ," class method or the "),uH=n(fZ,"A",{href:!0});var LFt=s(uH);xFr=r(LFt,"from_config()"),LFt.forEach(t),$Fr=r(fZ,` class
method.`),fZ.forEach(t),kFr=i(yl),TL=n(yl,"P",{});var eje=s(TL);SFr=r(eje,"This class cannot be instantiated directly using "),z2e=n(eje,"CODE",{});var xFt=s(z2e);RFr=r(xFt,"__init__()"),xFt.forEach(t),BFr=r(eje," (throws an error)."),eje.forEach(t),PFr=i(yl),Bt=n(yl,"DIV",{class:!0});var iw=s(Bt);T(ML.$$.fragment,iw),IFr=i(iw),Q2e=n(iw,"P",{});var $Ft=s(Q2e);qFr=r($Ft,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$Ft.forEach(t),NFr=i(iw),gc=n(iw,"P",{});var mZ=s(gc);jFr=r(mZ,`Note:
Loading a model from its configuration file does `),W2e=n(mZ,"STRONG",{});var kFt=s(W2e);DFr=r(kFt,"not"),kFt.forEach(t),GFr=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=n(mZ,"A",{href:!0});var SFt=s(_H);OFr=r(SFt,"from_pretrained()"),SFt.forEach(t),VFr=r(mZ," to load the model weights."),mZ.forEach(t),XFr=i(iw),T(OM.$$.fragment,iw),iw.forEach(t),zFr=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T(EL.$$.fragment,Ll),QFr=i(Ll),H2e=n(Ll,"P",{});var RFt=s(H2e);WFr=r(RFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),RFt.forEach(t),HFr=i(Ll),ln=n(Ll,"P",{});var dw=s(ln);UFr=r(dw,"The model class to instantiate is selected based on the "),U2e=n(dw,"CODE",{});var BFt=s(U2e);JFr=r(BFt,"model_type"),BFt.forEach(t),YFr=r(dw,` property of the config object (either
passed as an argument or loaded from `),J2e=n(dw,"CODE",{});var PFt=s(J2e);KFr=r(PFt,"pretrained_model_name_or_path"),PFt.forEach(t),ZFr=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=n(dw,"CODE",{});var IFt=s(Y2e);e0r=r(IFt,"pretrained_model_name_or_path"),IFt.forEach(t),o0r=r(dw,":"),dw.forEach(t),r0r=i(Ll),K2e=n(Ll,"UL",{});var qFt=s(K2e);VM=n(qFt,"LI",{});var qSe=s(VM);Z2e=n(qSe,"STRONG",{});var NFt=s(Z2e);t0r=r(NFt,"tapas"),NFt.forEach(t),a0r=r(qSe," \u2014 "),bH=n(qSe,"A",{href:!0});var jFt=s(bH);n0r=r(jFt,"TFTapasForQuestionAnswering"),jFt.forEach(t),s0r=r(qSe," (TAPAS model)"),qSe.forEach(t),qFt.forEach(t),l0r=i(Ll),T(XM.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),HIe=i(f),hc=n(f,"H2",{class:!0});var oje=s(hc);zM=n(oje,"A",{id:!0,class:!0,href:!0});var DFt=s(zM);eve=n(DFt,"SPAN",{});var GFt=s(eve);T(CL.$$.fragment,GFt),GFt.forEach(t),DFt.forEach(t),i0r=i(oje),ove=n(oje,"SPAN",{});var OFt=s(ove);d0r=r(OFt,"TFAutoModelForTokenClassification"),OFt.forEach(t),oje.forEach(t),UIe=i(f),lr=n(f,"DIV",{class:!0});var xl=s(lr);T(wL.$$.fragment,xl),c0r=i(xl),pc=n(xl,"P",{});var gZ=s(pc);f0r=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vH=n(gZ,"A",{href:!0});var VFt=s(vH);m0r=r(VFt,"from_pretrained()"),VFt.forEach(t),g0r=r(gZ," class method or the "),FH=n(gZ,"A",{href:!0});var XFt=s(FH);h0r=r(XFt,"from_config()"),XFt.forEach(t),p0r=r(gZ,` class
method.`),gZ.forEach(t),u0r=i(xl),AL=n(xl,"P",{});var rje=s(AL);_0r=r(rje,"This class cannot be instantiated directly using "),rve=n(rje,"CODE",{});var zFt=s(rve);b0r=r(zFt,"__init__()"),zFt.forEach(t),v0r=r(rje," (throws an error)."),rje.forEach(t),F0r=i(xl),Pt=n(xl,"DIV",{class:!0});var cw=s(Pt);T(yL.$$.fragment,cw),T0r=i(cw),tve=n(cw,"P",{});var QFt=s(tve);M0r=r(QFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),QFt.forEach(t),E0r=i(cw),uc=n(cw,"P",{});var hZ=s(uc);C0r=r(hZ,`Note:
Loading a model from its configuration file does `),ave=n(hZ,"STRONG",{});var WFt=s(ave);w0r=r(WFt,"not"),WFt.forEach(t),A0r=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=n(hZ,"A",{href:!0});var HFt=s(TH);y0r=r(HFt,"from_pretrained()"),HFt.forEach(t),L0r=r(hZ," to load the model weights."),hZ.forEach(t),x0r=i(cw),T(QM.$$.fragment,cw),cw.forEach(t),$0r=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T(LL.$$.fragment,$l),k0r=i($l),nve=n($l,"P",{});var UFt=s(nve);S0r=r(UFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),UFt.forEach(t),R0r=i($l),dn=n($l,"P",{});var fw=s(dn);B0r=r(fw,"The model class to instantiate is selected based on the "),sve=n(fw,"CODE",{});var JFt=s(sve);P0r=r(JFt,"model_type"),JFt.forEach(t),I0r=r(fw,` property of the config object (either
passed as an argument or loaded from `),lve=n(fw,"CODE",{});var YFt=s(lve);q0r=r(YFt,"pretrained_model_name_or_path"),YFt.forEach(t),N0r=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=n(fw,"CODE",{});var KFt=s(ive);j0r=r(KFt,"pretrained_model_name_or_path"),KFt.forEach(t),D0r=r(fw,":"),fw.forEach(t),G0r=i($l),de=n($l,"UL",{});var me=s(de);WM=n(me,"LI",{});var NSe=s(WM);dve=n(NSe,"STRONG",{});var ZFt=s(dve);O0r=r(ZFt,"albert"),ZFt.forEach(t),V0r=r(NSe," \u2014 "),MH=n(NSe,"A",{href:!0});var e0t=s(MH);X0r=r(e0t,"TFAlbertForTokenClassification"),e0t.forEach(t),z0r=r(NSe," (ALBERT model)"),NSe.forEach(t),Q0r=i(me),HM=n(me,"LI",{});var jSe=s(HM);cve=n(jSe,"STRONG",{});var o0t=s(cve);W0r=r(o0t,"bert"),o0t.forEach(t),H0r=r(jSe," \u2014 "),EH=n(jSe,"A",{href:!0});var r0t=s(EH);U0r=r(r0t,"TFBertForTokenClassification"),r0t.forEach(t),J0r=r(jSe," (BERT model)"),jSe.forEach(t),Y0r=i(me),UM=n(me,"LI",{});var DSe=s(UM);fve=n(DSe,"STRONG",{});var t0t=s(fve);K0r=r(t0t,"camembert"),t0t.forEach(t),Z0r=r(DSe," \u2014 "),CH=n(DSe,"A",{href:!0});var a0t=s(CH);eTr=r(a0t,"TFCamembertForTokenClassification"),a0t.forEach(t),oTr=r(DSe," (CamemBERT model)"),DSe.forEach(t),rTr=i(me),JM=n(me,"LI",{});var GSe=s(JM);mve=n(GSe,"STRONG",{});var n0t=s(mve);tTr=r(n0t,"convbert"),n0t.forEach(t),aTr=r(GSe," \u2014 "),wH=n(GSe,"A",{href:!0});var s0t=s(wH);nTr=r(s0t,"TFConvBertForTokenClassification"),s0t.forEach(t),sTr=r(GSe," (ConvBERT model)"),GSe.forEach(t),lTr=i(me),YM=n(me,"LI",{});var OSe=s(YM);gve=n(OSe,"STRONG",{});var l0t=s(gve);iTr=r(l0t,"deberta"),l0t.forEach(t),dTr=r(OSe," \u2014 "),AH=n(OSe,"A",{href:!0});var i0t=s(AH);cTr=r(i0t,"TFDebertaForTokenClassification"),i0t.forEach(t),fTr=r(OSe," (DeBERTa model)"),OSe.forEach(t),mTr=i(me),KM=n(me,"LI",{});var VSe=s(KM);hve=n(VSe,"STRONG",{});var d0t=s(hve);gTr=r(d0t,"deberta-v2"),d0t.forEach(t),hTr=r(VSe," \u2014 "),yH=n(VSe,"A",{href:!0});var c0t=s(yH);pTr=r(c0t,"TFDebertaV2ForTokenClassification"),c0t.forEach(t),uTr=r(VSe," (DeBERTa-v2 model)"),VSe.forEach(t),_Tr=i(me),ZM=n(me,"LI",{});var XSe=s(ZM);pve=n(XSe,"STRONG",{});var f0t=s(pve);bTr=r(f0t,"distilbert"),f0t.forEach(t),vTr=r(XSe," \u2014 "),LH=n(XSe,"A",{href:!0});var m0t=s(LH);FTr=r(m0t,"TFDistilBertForTokenClassification"),m0t.forEach(t),TTr=r(XSe," (DistilBERT model)"),XSe.forEach(t),MTr=i(me),e4=n(me,"LI",{});var zSe=s(e4);uve=n(zSe,"STRONG",{});var g0t=s(uve);ETr=r(g0t,"electra"),g0t.forEach(t),CTr=r(zSe," \u2014 "),xH=n(zSe,"A",{href:!0});var h0t=s(xH);wTr=r(h0t,"TFElectraForTokenClassification"),h0t.forEach(t),ATr=r(zSe," (ELECTRA model)"),zSe.forEach(t),yTr=i(me),o4=n(me,"LI",{});var QSe=s(o4);_ve=n(QSe,"STRONG",{});var p0t=s(_ve);LTr=r(p0t,"flaubert"),p0t.forEach(t),xTr=r(QSe," \u2014 "),$H=n(QSe,"A",{href:!0});var u0t=s($H);$Tr=r(u0t,"TFFlaubertForTokenClassification"),u0t.forEach(t),kTr=r(QSe," (FlauBERT model)"),QSe.forEach(t),STr=i(me),r4=n(me,"LI",{});var WSe=s(r4);bve=n(WSe,"STRONG",{});var _0t=s(bve);RTr=r(_0t,"funnel"),_0t.forEach(t),BTr=r(WSe," \u2014 "),kH=n(WSe,"A",{href:!0});var b0t=s(kH);PTr=r(b0t,"TFFunnelForTokenClassification"),b0t.forEach(t),ITr=r(WSe," (Funnel Transformer model)"),WSe.forEach(t),qTr=i(me),t4=n(me,"LI",{});var HSe=s(t4);vve=n(HSe,"STRONG",{});var v0t=s(vve);NTr=r(v0t,"layoutlm"),v0t.forEach(t),jTr=r(HSe," \u2014 "),SH=n(HSe,"A",{href:!0});var F0t=s(SH);DTr=r(F0t,"TFLayoutLMForTokenClassification"),F0t.forEach(t),GTr=r(HSe," (LayoutLM model)"),HSe.forEach(t),OTr=i(me),a4=n(me,"LI",{});var USe=s(a4);Fve=n(USe,"STRONG",{});var T0t=s(Fve);VTr=r(T0t,"longformer"),T0t.forEach(t),XTr=r(USe," \u2014 "),RH=n(USe,"A",{href:!0});var M0t=s(RH);zTr=r(M0t,"TFLongformerForTokenClassification"),M0t.forEach(t),QTr=r(USe," (Longformer model)"),USe.forEach(t),WTr=i(me),n4=n(me,"LI",{});var JSe=s(n4);Tve=n(JSe,"STRONG",{});var E0t=s(Tve);HTr=r(E0t,"mobilebert"),E0t.forEach(t),UTr=r(JSe," \u2014 "),BH=n(JSe,"A",{href:!0});var C0t=s(BH);JTr=r(C0t,"TFMobileBertForTokenClassification"),C0t.forEach(t),YTr=r(JSe," (MobileBERT model)"),JSe.forEach(t),KTr=i(me),s4=n(me,"LI",{});var YSe=s(s4);Mve=n(YSe,"STRONG",{});var w0t=s(Mve);ZTr=r(w0t,"mpnet"),w0t.forEach(t),e7r=r(YSe," \u2014 "),PH=n(YSe,"A",{href:!0});var A0t=s(PH);o7r=r(A0t,"TFMPNetForTokenClassification"),A0t.forEach(t),r7r=r(YSe," (MPNet model)"),YSe.forEach(t),t7r=i(me),l4=n(me,"LI",{});var KSe=s(l4);Eve=n(KSe,"STRONG",{});var y0t=s(Eve);a7r=r(y0t,"rembert"),y0t.forEach(t),n7r=r(KSe," \u2014 "),IH=n(KSe,"A",{href:!0});var L0t=s(IH);s7r=r(L0t,"TFRemBertForTokenClassification"),L0t.forEach(t),l7r=r(KSe," (RemBERT model)"),KSe.forEach(t),i7r=i(me),i4=n(me,"LI",{});var ZSe=s(i4);Cve=n(ZSe,"STRONG",{});var x0t=s(Cve);d7r=r(x0t,"roberta"),x0t.forEach(t),c7r=r(ZSe," \u2014 "),qH=n(ZSe,"A",{href:!0});var $0t=s(qH);f7r=r($0t,"TFRobertaForTokenClassification"),$0t.forEach(t),m7r=r(ZSe," (RoBERTa model)"),ZSe.forEach(t),g7r=i(me),d4=n(me,"LI",{});var eRe=s(d4);wve=n(eRe,"STRONG",{});var k0t=s(wve);h7r=r(k0t,"roformer"),k0t.forEach(t),p7r=r(eRe," \u2014 "),NH=n(eRe,"A",{href:!0});var S0t=s(NH);u7r=r(S0t,"TFRoFormerForTokenClassification"),S0t.forEach(t),_7r=r(eRe," (RoFormer model)"),eRe.forEach(t),b7r=i(me),c4=n(me,"LI",{});var oRe=s(c4);Ave=n(oRe,"STRONG",{});var R0t=s(Ave);v7r=r(R0t,"xlm"),R0t.forEach(t),F7r=r(oRe," \u2014 "),jH=n(oRe,"A",{href:!0});var B0t=s(jH);T7r=r(B0t,"TFXLMForTokenClassification"),B0t.forEach(t),M7r=r(oRe," (XLM model)"),oRe.forEach(t),E7r=i(me),f4=n(me,"LI",{});var rRe=s(f4);yve=n(rRe,"STRONG",{});var P0t=s(yve);C7r=r(P0t,"xlm-roberta"),P0t.forEach(t),w7r=r(rRe," \u2014 "),DH=n(rRe,"A",{href:!0});var I0t=s(DH);A7r=r(I0t,"TFXLMRobertaForTokenClassification"),I0t.forEach(t),y7r=r(rRe," (XLM-RoBERTa model)"),rRe.forEach(t),L7r=i(me),m4=n(me,"LI",{});var tRe=s(m4);Lve=n(tRe,"STRONG",{});var q0t=s(Lve);x7r=r(q0t,"xlnet"),q0t.forEach(t),$7r=r(tRe," \u2014 "),GH=n(tRe,"A",{href:!0});var N0t=s(GH);k7r=r(N0t,"TFXLNetForTokenClassification"),N0t.forEach(t),S7r=r(tRe," (XLNet model)"),tRe.forEach(t),me.forEach(t),R7r=i($l),T(g4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),JIe=i(f),_c=n(f,"H2",{class:!0});var tje=s(_c);h4=n(tje,"A",{id:!0,class:!0,href:!0});var j0t=s(h4);xve=n(j0t,"SPAN",{});var D0t=s(xve);T(xL.$$.fragment,D0t),D0t.forEach(t),j0t.forEach(t),B7r=i(tje),$ve=n(tje,"SPAN",{});var G0t=s($ve);P7r=r(G0t,"TFAutoModelForQuestionAnswering"),G0t.forEach(t),tje.forEach(t),YIe=i(f),ir=n(f,"DIV",{class:!0});var kl=s(ir);T($L.$$.fragment,kl),I7r=i(kl),bc=n(kl,"P",{});var pZ=s(bc);q7r=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),OH=n(pZ,"A",{href:!0});var O0t=s(OH);N7r=r(O0t,"from_pretrained()"),O0t.forEach(t),j7r=r(pZ," class method or the "),VH=n(pZ,"A",{href:!0});var V0t=s(VH);D7r=r(V0t,"from_config()"),V0t.forEach(t),G7r=r(pZ,` class
method.`),pZ.forEach(t),O7r=i(kl),kL=n(kl,"P",{});var aje=s(kL);V7r=r(aje,"This class cannot be instantiated directly using "),kve=n(aje,"CODE",{});var X0t=s(kve);X7r=r(X0t,"__init__()"),X0t.forEach(t),z7r=r(aje," (throws an error)."),aje.forEach(t),Q7r=i(kl),It=n(kl,"DIV",{class:!0});var mw=s(It);T(SL.$$.fragment,mw),W7r=i(mw),Sve=n(mw,"P",{});var z0t=s(Sve);H7r=r(z0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),z0t.forEach(t),U7r=i(mw),vc=n(mw,"P",{});var uZ=s(vc);J7r=r(uZ,`Note:
Loading a model from its configuration file does `),Rve=n(uZ,"STRONG",{});var Q0t=s(Rve);Y7r=r(Q0t,"not"),Q0t.forEach(t),K7r=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(uZ,"A",{href:!0});var W0t=s(XH);Z7r=r(W0t,"from_pretrained()"),W0t.forEach(t),eMr=r(uZ," to load the model weights."),uZ.forEach(t),oMr=i(mw),T(p4.$$.fragment,mw),mw.forEach(t),rMr=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(RL.$$.fragment,Sl),tMr=i(Sl),Bve=n(Sl,"P",{});var H0t=s(Bve);aMr=r(H0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),H0t.forEach(t),nMr=i(Sl),cn=n(Sl,"P",{});var gw=s(cn);sMr=r(gw,"The model class to instantiate is selected based on the "),Pve=n(gw,"CODE",{});var U0t=s(Pve);lMr=r(U0t,"model_type"),U0t.forEach(t),iMr=r(gw,` property of the config object (either
passed as an argument or loaded from `),Ive=n(gw,"CODE",{});var J0t=s(Ive);dMr=r(J0t,"pretrained_model_name_or_path"),J0t.forEach(t),cMr=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=n(gw,"CODE",{});var Y0t=s(qve);fMr=r(Y0t,"pretrained_model_name_or_path"),Y0t.forEach(t),mMr=r(gw,":"),gw.forEach(t),gMr=i(Sl),ce=n(Sl,"UL",{});var ge=s(ce);u4=n(ge,"LI",{});var aRe=s(u4);Nve=n(aRe,"STRONG",{});var K0t=s(Nve);hMr=r(K0t,"albert"),K0t.forEach(t),pMr=r(aRe," \u2014 "),zH=n(aRe,"A",{href:!0});var Z0t=s(zH);uMr=r(Z0t,"TFAlbertForQuestionAnswering"),Z0t.forEach(t),_Mr=r(aRe," (ALBERT model)"),aRe.forEach(t),bMr=i(ge),_4=n(ge,"LI",{});var nRe=s(_4);jve=n(nRe,"STRONG",{});var eTt=s(jve);vMr=r(eTt,"bert"),eTt.forEach(t),FMr=r(nRe," \u2014 "),QH=n(nRe,"A",{href:!0});var oTt=s(QH);TMr=r(oTt,"TFBertForQuestionAnswering"),oTt.forEach(t),MMr=r(nRe," (BERT model)"),nRe.forEach(t),EMr=i(ge),b4=n(ge,"LI",{});var sRe=s(b4);Dve=n(sRe,"STRONG",{});var rTt=s(Dve);CMr=r(rTt,"camembert"),rTt.forEach(t),wMr=r(sRe," \u2014 "),WH=n(sRe,"A",{href:!0});var tTt=s(WH);AMr=r(tTt,"TFCamembertForQuestionAnswering"),tTt.forEach(t),yMr=r(sRe," (CamemBERT model)"),sRe.forEach(t),LMr=i(ge),v4=n(ge,"LI",{});var lRe=s(v4);Gve=n(lRe,"STRONG",{});var aTt=s(Gve);xMr=r(aTt,"convbert"),aTt.forEach(t),$Mr=r(lRe," \u2014 "),HH=n(lRe,"A",{href:!0});var nTt=s(HH);kMr=r(nTt,"TFConvBertForQuestionAnswering"),nTt.forEach(t),SMr=r(lRe," (ConvBERT model)"),lRe.forEach(t),RMr=i(ge),F4=n(ge,"LI",{});var iRe=s(F4);Ove=n(iRe,"STRONG",{});var sTt=s(Ove);BMr=r(sTt,"deberta"),sTt.forEach(t),PMr=r(iRe," \u2014 "),UH=n(iRe,"A",{href:!0});var lTt=s(UH);IMr=r(lTt,"TFDebertaForQuestionAnswering"),lTt.forEach(t),qMr=r(iRe," (DeBERTa model)"),iRe.forEach(t),NMr=i(ge),T4=n(ge,"LI",{});var dRe=s(T4);Vve=n(dRe,"STRONG",{});var iTt=s(Vve);jMr=r(iTt,"deberta-v2"),iTt.forEach(t),DMr=r(dRe," \u2014 "),JH=n(dRe,"A",{href:!0});var dTt=s(JH);GMr=r(dTt,"TFDebertaV2ForQuestionAnswering"),dTt.forEach(t),OMr=r(dRe," (DeBERTa-v2 model)"),dRe.forEach(t),VMr=i(ge),M4=n(ge,"LI",{});var cRe=s(M4);Xve=n(cRe,"STRONG",{});var cTt=s(Xve);XMr=r(cTt,"distilbert"),cTt.forEach(t),zMr=r(cRe," \u2014 "),YH=n(cRe,"A",{href:!0});var fTt=s(YH);QMr=r(fTt,"TFDistilBertForQuestionAnswering"),fTt.forEach(t),WMr=r(cRe," (DistilBERT model)"),cRe.forEach(t),HMr=i(ge),E4=n(ge,"LI",{});var fRe=s(E4);zve=n(fRe,"STRONG",{});var mTt=s(zve);UMr=r(mTt,"electra"),mTt.forEach(t),JMr=r(fRe," \u2014 "),KH=n(fRe,"A",{href:!0});var gTt=s(KH);YMr=r(gTt,"TFElectraForQuestionAnswering"),gTt.forEach(t),KMr=r(fRe," (ELECTRA model)"),fRe.forEach(t),ZMr=i(ge),C4=n(ge,"LI",{});var mRe=s(C4);Qve=n(mRe,"STRONG",{});var hTt=s(Qve);e4r=r(hTt,"flaubert"),hTt.forEach(t),o4r=r(mRe," \u2014 "),ZH=n(mRe,"A",{href:!0});var pTt=s(ZH);r4r=r(pTt,"TFFlaubertForQuestionAnsweringSimple"),pTt.forEach(t),t4r=r(mRe," (FlauBERT model)"),mRe.forEach(t),a4r=i(ge),w4=n(ge,"LI",{});var gRe=s(w4);Wve=n(gRe,"STRONG",{});var uTt=s(Wve);n4r=r(uTt,"funnel"),uTt.forEach(t),s4r=r(gRe," \u2014 "),eU=n(gRe,"A",{href:!0});var _Tt=s(eU);l4r=r(_Tt,"TFFunnelForQuestionAnswering"),_Tt.forEach(t),i4r=r(gRe," (Funnel Transformer model)"),gRe.forEach(t),d4r=i(ge),A4=n(ge,"LI",{});var hRe=s(A4);Hve=n(hRe,"STRONG",{});var bTt=s(Hve);c4r=r(bTt,"gptj"),bTt.forEach(t),f4r=r(hRe," \u2014 "),oU=n(hRe,"A",{href:!0});var vTt=s(oU);m4r=r(vTt,"TFGPTJForQuestionAnswering"),vTt.forEach(t),g4r=r(hRe," (GPT-J model)"),hRe.forEach(t),h4r=i(ge),y4=n(ge,"LI",{});var pRe=s(y4);Uve=n(pRe,"STRONG",{});var FTt=s(Uve);p4r=r(FTt,"longformer"),FTt.forEach(t),u4r=r(pRe," \u2014 "),rU=n(pRe,"A",{href:!0});var TTt=s(rU);_4r=r(TTt,"TFLongformerForQuestionAnswering"),TTt.forEach(t),b4r=r(pRe," (Longformer model)"),pRe.forEach(t),v4r=i(ge),L4=n(ge,"LI",{});var uRe=s(L4);Jve=n(uRe,"STRONG",{});var MTt=s(Jve);F4r=r(MTt,"mobilebert"),MTt.forEach(t),T4r=r(uRe," \u2014 "),tU=n(uRe,"A",{href:!0});var ETt=s(tU);M4r=r(ETt,"TFMobileBertForQuestionAnswering"),ETt.forEach(t),E4r=r(uRe," (MobileBERT model)"),uRe.forEach(t),C4r=i(ge),x4=n(ge,"LI",{});var _Re=s(x4);Yve=n(_Re,"STRONG",{});var CTt=s(Yve);w4r=r(CTt,"mpnet"),CTt.forEach(t),A4r=r(_Re," \u2014 "),aU=n(_Re,"A",{href:!0});var wTt=s(aU);y4r=r(wTt,"TFMPNetForQuestionAnswering"),wTt.forEach(t),L4r=r(_Re," (MPNet model)"),_Re.forEach(t),x4r=i(ge),$4=n(ge,"LI",{});var bRe=s($4);Kve=n(bRe,"STRONG",{});var ATt=s(Kve);$4r=r(ATt,"rembert"),ATt.forEach(t),k4r=r(bRe," \u2014 "),nU=n(bRe,"A",{href:!0});var yTt=s(nU);S4r=r(yTt,"TFRemBertForQuestionAnswering"),yTt.forEach(t),R4r=r(bRe," (RemBERT model)"),bRe.forEach(t),B4r=i(ge),k4=n(ge,"LI",{});var vRe=s(k4);Zve=n(vRe,"STRONG",{});var LTt=s(Zve);P4r=r(LTt,"roberta"),LTt.forEach(t),I4r=r(vRe," \u2014 "),sU=n(vRe,"A",{href:!0});var xTt=s(sU);q4r=r(xTt,"TFRobertaForQuestionAnswering"),xTt.forEach(t),N4r=r(vRe," (RoBERTa model)"),vRe.forEach(t),j4r=i(ge),S4=n(ge,"LI",{});var FRe=s(S4);eFe=n(FRe,"STRONG",{});var $Tt=s(eFe);D4r=r($Tt,"roformer"),$Tt.forEach(t),G4r=r(FRe," \u2014 "),lU=n(FRe,"A",{href:!0});var kTt=s(lU);O4r=r(kTt,"TFRoFormerForQuestionAnswering"),kTt.forEach(t),V4r=r(FRe," (RoFormer model)"),FRe.forEach(t),X4r=i(ge),R4=n(ge,"LI",{});var TRe=s(R4);oFe=n(TRe,"STRONG",{});var STt=s(oFe);z4r=r(STt,"xlm"),STt.forEach(t),Q4r=r(TRe," \u2014 "),iU=n(TRe,"A",{href:!0});var RTt=s(iU);W4r=r(RTt,"TFXLMForQuestionAnsweringSimple"),RTt.forEach(t),H4r=r(TRe," (XLM model)"),TRe.forEach(t),U4r=i(ge),B4=n(ge,"LI",{});var MRe=s(B4);rFe=n(MRe,"STRONG",{});var BTt=s(rFe);J4r=r(BTt,"xlm-roberta"),BTt.forEach(t),Y4r=r(MRe," \u2014 "),dU=n(MRe,"A",{href:!0});var PTt=s(dU);K4r=r(PTt,"TFXLMRobertaForQuestionAnswering"),PTt.forEach(t),Z4r=r(MRe," (XLM-RoBERTa model)"),MRe.forEach(t),eEr=i(ge),P4=n(ge,"LI",{});var ERe=s(P4);tFe=n(ERe,"STRONG",{});var ITt=s(tFe);oEr=r(ITt,"xlnet"),ITt.forEach(t),rEr=r(ERe," \u2014 "),cU=n(ERe,"A",{href:!0});var qTt=s(cU);tEr=r(qTt,"TFXLNetForQuestionAnsweringSimple"),qTt.forEach(t),aEr=r(ERe," (XLNet model)"),ERe.forEach(t),ge.forEach(t),nEr=i(Sl),T(I4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),KIe=i(f),Fc=n(f,"H2",{class:!0});var nje=s(Fc);q4=n(nje,"A",{id:!0,class:!0,href:!0});var NTt=s(q4);aFe=n(NTt,"SPAN",{});var jTt=s(aFe);T(BL.$$.fragment,jTt),jTt.forEach(t),NTt.forEach(t),sEr=i(nje),nFe=n(nje,"SPAN",{});var DTt=s(nFe);lEr=r(DTt,"TFAutoModelForVision2Seq"),DTt.forEach(t),nje.forEach(t),ZIe=i(f),dr=n(f,"DIV",{class:!0});var Rl=s(dr);T(PL.$$.fragment,Rl),iEr=i(Rl),Tc=n(Rl,"P",{});var _Z=s(Tc);dEr=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fU=n(_Z,"A",{href:!0});var GTt=s(fU);cEr=r(GTt,"from_pretrained()"),GTt.forEach(t),fEr=r(_Z," class method or the "),mU=n(_Z,"A",{href:!0});var OTt=s(mU);mEr=r(OTt,"from_config()"),OTt.forEach(t),gEr=r(_Z,` class
method.`),_Z.forEach(t),hEr=i(Rl),IL=n(Rl,"P",{});var sje=s(IL);pEr=r(sje,"This class cannot be instantiated directly using "),sFe=n(sje,"CODE",{});var VTt=s(sFe);uEr=r(VTt,"__init__()"),VTt.forEach(t),_Er=r(sje," (throws an error)."),sje.forEach(t),bEr=i(Rl),qt=n(Rl,"DIV",{class:!0});var hw=s(qt);T(qL.$$.fragment,hw),vEr=i(hw),lFe=n(hw,"P",{});var XTt=s(lFe);FEr=r(XTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),XTt.forEach(t),TEr=i(hw),Mc=n(hw,"P",{});var bZ=s(Mc);MEr=r(bZ,`Note:
Loading a model from its configuration file does `),iFe=n(bZ,"STRONG",{});var zTt=s(iFe);EEr=r(zTt,"not"),zTt.forEach(t),CEr=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(bZ,"A",{href:!0});var QTt=s(gU);wEr=r(QTt,"from_pretrained()"),QTt.forEach(t),AEr=r(bZ," to load the model weights."),bZ.forEach(t),yEr=i(hw),T(N4.$$.fragment,hw),hw.forEach(t),LEr=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(NL.$$.fragment,Bl),xEr=i(Bl),dFe=n(Bl,"P",{});var WTt=s(dFe);$Er=r(WTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),WTt.forEach(t),kEr=i(Bl),fn=n(Bl,"P",{});var pw=s(fn);SEr=r(pw,"The model class to instantiate is selected based on the "),cFe=n(pw,"CODE",{});var HTt=s(cFe);REr=r(HTt,"model_type"),HTt.forEach(t),BEr=r(pw,` property of the config object (either
passed as an argument or loaded from `),fFe=n(pw,"CODE",{});var UTt=s(fFe);PEr=r(UTt,"pretrained_model_name_or_path"),UTt.forEach(t),IEr=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=n(pw,"CODE",{});var JTt=s(mFe);qEr=r(JTt,"pretrained_model_name_or_path"),JTt.forEach(t),NEr=r(pw,":"),pw.forEach(t),jEr=i(Bl),gFe=n(Bl,"UL",{});var YTt=s(gFe);j4=n(YTt,"LI",{});var CRe=s(j4);hFe=n(CRe,"STRONG",{});var KTt=s(hFe);DEr=r(KTt,"vision-encoder-decoder"),KTt.forEach(t),GEr=r(CRe," \u2014 "),hU=n(CRe,"A",{href:!0});var ZTt=s(hU);OEr=r(ZTt,"TFVisionEncoderDecoderModel"),ZTt.forEach(t),VEr=r(CRe," (Vision Encoder decoder model)"),CRe.forEach(t),YTt.forEach(t),XEr=i(Bl),T(D4.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),eqe=i(f),Ec=n(f,"H2",{class:!0});var lje=s(Ec);G4=n(lje,"A",{id:!0,class:!0,href:!0});var e7t=s(G4);pFe=n(e7t,"SPAN",{});var o7t=s(pFe);T(jL.$$.fragment,o7t),o7t.forEach(t),e7t.forEach(t),zEr=i(lje),uFe=n(lje,"SPAN",{});var r7t=s(uFe);QEr=r(r7t,"TFAutoModelForSpeechSeq2Seq"),r7t.forEach(t),lje.forEach(t),oqe=i(f),cr=n(f,"DIV",{class:!0});var Pl=s(cr);T(DL.$$.fragment,Pl),WEr=i(Pl),Cc=n(Pl,"P",{});var vZ=s(Cc);HEr=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pU=n(vZ,"A",{href:!0});var t7t=s(pU);UEr=r(t7t,"from_pretrained()"),t7t.forEach(t),JEr=r(vZ," class method or the "),uU=n(vZ,"A",{href:!0});var a7t=s(uU);YEr=r(a7t,"from_config()"),a7t.forEach(t),KEr=r(vZ,` class
method.`),vZ.forEach(t),ZEr=i(Pl),GL=n(Pl,"P",{});var ije=s(GL);e5r=r(ije,"This class cannot be instantiated directly using "),_Fe=n(ije,"CODE",{});var n7t=s(_Fe);o5r=r(n7t,"__init__()"),n7t.forEach(t),r5r=r(ije," (throws an error)."),ije.forEach(t),t5r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var uw=s(Nt);T(OL.$$.fragment,uw),a5r=i(uw),bFe=n(uw,"P",{});var s7t=s(bFe);n5r=r(s7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),s7t.forEach(t),s5r=i(uw),wc=n(uw,"P",{});var FZ=s(wc);l5r=r(FZ,`Note:
Loading a model from its configuration file does `),vFe=n(FZ,"STRONG",{});var l7t=s(vFe);i5r=r(l7t,"not"),l7t.forEach(t),d5r=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=n(FZ,"A",{href:!0});var i7t=s(_U);c5r=r(i7t,"from_pretrained()"),i7t.forEach(t),f5r=r(FZ," to load the model weights."),FZ.forEach(t),m5r=i(uw),T(O4.$$.fragment,uw),uw.forEach(t),g5r=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(VL.$$.fragment,Il),h5r=i(Il),FFe=n(Il,"P",{});var d7t=s(FFe);p5r=r(d7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),d7t.forEach(t),u5r=i(Il),mn=n(Il,"P",{});var _w=s(mn);_5r=r(_w,"The model class to instantiate is selected based on the "),TFe=n(_w,"CODE",{});var c7t=s(TFe);b5r=r(c7t,"model_type"),c7t.forEach(t),v5r=r(_w,` property of the config object (either
passed as an argument or loaded from `),MFe=n(_w,"CODE",{});var f7t=s(MFe);F5r=r(f7t,"pretrained_model_name_or_path"),f7t.forEach(t),T5r=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=n(_w,"CODE",{});var m7t=s(EFe);M5r=r(m7t,"pretrained_model_name_or_path"),m7t.forEach(t),E5r=r(_w,":"),_w.forEach(t),C5r=i(Il),CFe=n(Il,"UL",{});var g7t=s(CFe);V4=n(g7t,"LI",{});var wRe=s(V4);wFe=n(wRe,"STRONG",{});var h7t=s(wFe);w5r=r(h7t,"speech_to_text"),h7t.forEach(t),A5r=r(wRe," \u2014 "),bU=n(wRe,"A",{href:!0});var p7t=s(bU);y5r=r(p7t,"TFSpeech2TextForConditionalGeneration"),p7t.forEach(t),L5r=r(wRe," (Speech2Text model)"),wRe.forEach(t),g7t.forEach(t),x5r=i(Il),T(X4.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),rqe=i(f),Ac=n(f,"H2",{class:!0});var dje=s(Ac);z4=n(dje,"A",{id:!0,class:!0,href:!0});var u7t=s(z4);AFe=n(u7t,"SPAN",{});var _7t=s(AFe);T(XL.$$.fragment,_7t),_7t.forEach(t),u7t.forEach(t),$5r=i(dje),yFe=n(dje,"SPAN",{});var b7t=s(yFe);k5r=r(b7t,"FlaxAutoModel"),b7t.forEach(t),dje.forEach(t),tqe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(zL.$$.fragment,ql),S5r=i(ql),yc=n(ql,"P",{});var TZ=s(yc);R5r=r(TZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vU=n(TZ,"A",{href:!0});var v7t=s(vU);B5r=r(v7t,"from_pretrained()"),v7t.forEach(t),P5r=r(TZ," class method or the "),FU=n(TZ,"A",{href:!0});var F7t=s(FU);I5r=r(F7t,"from_config()"),F7t.forEach(t),q5r=r(TZ,` class
method.`),TZ.forEach(t),N5r=i(ql),QL=n(ql,"P",{});var cje=s(QL);j5r=r(cje,"This class cannot be instantiated directly using "),LFe=n(cje,"CODE",{});var T7t=s(LFe);D5r=r(T7t,"__init__()"),T7t.forEach(t),G5r=r(cje," (throws an error)."),cje.forEach(t),O5r=i(ql),jt=n(ql,"DIV",{class:!0});var bw=s(jt);T(WL.$$.fragment,bw),V5r=i(bw),xFe=n(bw,"P",{});var M7t=s(xFe);X5r=r(M7t,"Instantiates one of the base model classes of the library from a configuration."),M7t.forEach(t),z5r=i(bw),Lc=n(bw,"P",{});var MZ=s(Lc);Q5r=r(MZ,`Note:
Loading a model from its configuration file does `),$Fe=n(MZ,"STRONG",{});var E7t=s($Fe);W5r=r(E7t,"not"),E7t.forEach(t),H5r=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=n(MZ,"A",{href:!0});var C7t=s(TU);U5r=r(C7t,"from_pretrained()"),C7t.forEach(t),J5r=r(MZ," to load the model weights."),MZ.forEach(t),Y5r=i(bw),T(Q4.$$.fragment,bw),bw.forEach(t),K5r=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(HL.$$.fragment,Nl),Z5r=i(Nl),kFe=n(Nl,"P",{});var w7t=s(kFe);eCr=r(w7t,"Instantiate one of the base model classes of the library from a pretrained model."),w7t.forEach(t),oCr=i(Nl),gn=n(Nl,"P",{});var vw=s(gn);rCr=r(vw,"The model class to instantiate is selected based on the "),SFe=n(vw,"CODE",{});var A7t=s(SFe);tCr=r(A7t,"model_type"),A7t.forEach(t),aCr=r(vw,` property of the config object (either
passed as an argument or loaded from `),RFe=n(vw,"CODE",{});var y7t=s(RFe);nCr=r(y7t,"pretrained_model_name_or_path"),y7t.forEach(t),sCr=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(vw,"CODE",{});var L7t=s(BFe);lCr=r(L7t,"pretrained_model_name_or_path"),L7t.forEach(t),iCr=r(vw,":"),vw.forEach(t),dCr=i(Nl),oe=n(Nl,"UL",{});var ae=s(oe);W4=n(ae,"LI",{});var ARe=s(W4);PFe=n(ARe,"STRONG",{});var x7t=s(PFe);cCr=r(x7t,"albert"),x7t.forEach(t),fCr=r(ARe," \u2014 "),MU=n(ARe,"A",{href:!0});var $7t=s(MU);mCr=r($7t,"FlaxAlbertModel"),$7t.forEach(t),gCr=r(ARe," (ALBERT model)"),ARe.forEach(t),hCr=i(ae),H4=n(ae,"LI",{});var yRe=s(H4);IFe=n(yRe,"STRONG",{});var k7t=s(IFe);pCr=r(k7t,"bart"),k7t.forEach(t),uCr=r(yRe," \u2014 "),EU=n(yRe,"A",{href:!0});var S7t=s(EU);_Cr=r(S7t,"FlaxBartModel"),S7t.forEach(t),bCr=r(yRe," (BART model)"),yRe.forEach(t),vCr=i(ae),U4=n(ae,"LI",{});var LRe=s(U4);qFe=n(LRe,"STRONG",{});var R7t=s(qFe);FCr=r(R7t,"beit"),R7t.forEach(t),TCr=r(LRe," \u2014 "),CU=n(LRe,"A",{href:!0});var B7t=s(CU);MCr=r(B7t,"FlaxBeitModel"),B7t.forEach(t),ECr=r(LRe," (BEiT model)"),LRe.forEach(t),CCr=i(ae),J4=n(ae,"LI",{});var xRe=s(J4);NFe=n(xRe,"STRONG",{});var P7t=s(NFe);wCr=r(P7t,"bert"),P7t.forEach(t),ACr=r(xRe," \u2014 "),wU=n(xRe,"A",{href:!0});var I7t=s(wU);yCr=r(I7t,"FlaxBertModel"),I7t.forEach(t),LCr=r(xRe," (BERT model)"),xRe.forEach(t),xCr=i(ae),Y4=n(ae,"LI",{});var $Re=s(Y4);jFe=n($Re,"STRONG",{});var q7t=s(jFe);$Cr=r(q7t,"big_bird"),q7t.forEach(t),kCr=r($Re," \u2014 "),AU=n($Re,"A",{href:!0});var N7t=s(AU);SCr=r(N7t,"FlaxBigBirdModel"),N7t.forEach(t),RCr=r($Re," (BigBird model)"),$Re.forEach(t),BCr=i(ae),K4=n(ae,"LI",{});var kRe=s(K4);DFe=n(kRe,"STRONG",{});var j7t=s(DFe);PCr=r(j7t,"blenderbot"),j7t.forEach(t),ICr=r(kRe," \u2014 "),yU=n(kRe,"A",{href:!0});var D7t=s(yU);qCr=r(D7t,"FlaxBlenderbotModel"),D7t.forEach(t),NCr=r(kRe," (Blenderbot model)"),kRe.forEach(t),jCr=i(ae),Z4=n(ae,"LI",{});var SRe=s(Z4);GFe=n(SRe,"STRONG",{});var G7t=s(GFe);DCr=r(G7t,"blenderbot-small"),G7t.forEach(t),GCr=r(SRe," \u2014 "),LU=n(SRe,"A",{href:!0});var O7t=s(LU);OCr=r(O7t,"FlaxBlenderbotSmallModel"),O7t.forEach(t),VCr=r(SRe," (BlenderbotSmall model)"),SRe.forEach(t),XCr=i(ae),eE=n(ae,"LI",{});var RRe=s(eE);OFe=n(RRe,"STRONG",{});var V7t=s(OFe);zCr=r(V7t,"clip"),V7t.forEach(t),QCr=r(RRe," \u2014 "),xU=n(RRe,"A",{href:!0});var X7t=s(xU);WCr=r(X7t,"FlaxCLIPModel"),X7t.forEach(t),HCr=r(RRe," (CLIP model)"),RRe.forEach(t),UCr=i(ae),oE=n(ae,"LI",{});var BRe=s(oE);VFe=n(BRe,"STRONG",{});var z7t=s(VFe);JCr=r(z7t,"distilbert"),z7t.forEach(t),YCr=r(BRe," \u2014 "),$U=n(BRe,"A",{href:!0});var Q7t=s($U);KCr=r(Q7t,"FlaxDistilBertModel"),Q7t.forEach(t),ZCr=r(BRe," (DistilBERT model)"),BRe.forEach(t),e3r=i(ae),rE=n(ae,"LI",{});var PRe=s(rE);XFe=n(PRe,"STRONG",{});var W7t=s(XFe);o3r=r(W7t,"electra"),W7t.forEach(t),r3r=r(PRe," \u2014 "),kU=n(PRe,"A",{href:!0});var H7t=s(kU);t3r=r(H7t,"FlaxElectraModel"),H7t.forEach(t),a3r=r(PRe," (ELECTRA model)"),PRe.forEach(t),n3r=i(ae),tE=n(ae,"LI",{});var IRe=s(tE);zFe=n(IRe,"STRONG",{});var U7t=s(zFe);s3r=r(U7t,"gpt2"),U7t.forEach(t),l3r=r(IRe," \u2014 "),SU=n(IRe,"A",{href:!0});var J7t=s(SU);i3r=r(J7t,"FlaxGPT2Model"),J7t.forEach(t),d3r=r(IRe," (OpenAI GPT-2 model)"),IRe.forEach(t),c3r=i(ae),aE=n(ae,"LI",{});var qRe=s(aE);QFe=n(qRe,"STRONG",{});var Y7t=s(QFe);f3r=r(Y7t,"gpt_neo"),Y7t.forEach(t),m3r=r(qRe," \u2014 "),RU=n(qRe,"A",{href:!0});var K7t=s(RU);g3r=r(K7t,"FlaxGPTNeoModel"),K7t.forEach(t),h3r=r(qRe," (GPT Neo model)"),qRe.forEach(t),p3r=i(ae),nE=n(ae,"LI",{});var NRe=s(nE);WFe=n(NRe,"STRONG",{});var Z7t=s(WFe);u3r=r(Z7t,"gptj"),Z7t.forEach(t),_3r=r(NRe," \u2014 "),BU=n(NRe,"A",{href:!0});var eMt=s(BU);b3r=r(eMt,"FlaxGPTJModel"),eMt.forEach(t),v3r=r(NRe," (GPT-J model)"),NRe.forEach(t),F3r=i(ae),sE=n(ae,"LI",{});var jRe=s(sE);HFe=n(jRe,"STRONG",{});var oMt=s(HFe);T3r=r(oMt,"marian"),oMt.forEach(t),M3r=r(jRe," \u2014 "),PU=n(jRe,"A",{href:!0});var rMt=s(PU);E3r=r(rMt,"FlaxMarianModel"),rMt.forEach(t),C3r=r(jRe," (Marian model)"),jRe.forEach(t),w3r=i(ae),lE=n(ae,"LI",{});var DRe=s(lE);UFe=n(DRe,"STRONG",{});var tMt=s(UFe);A3r=r(tMt,"mbart"),tMt.forEach(t),y3r=r(DRe," \u2014 "),IU=n(DRe,"A",{href:!0});var aMt=s(IU);L3r=r(aMt,"FlaxMBartModel"),aMt.forEach(t),x3r=r(DRe," (mBART model)"),DRe.forEach(t),$3r=i(ae),iE=n(ae,"LI",{});var GRe=s(iE);JFe=n(GRe,"STRONG",{});var nMt=s(JFe);k3r=r(nMt,"mt5"),nMt.forEach(t),S3r=r(GRe," \u2014 "),qU=n(GRe,"A",{href:!0});var sMt=s(qU);R3r=r(sMt,"FlaxMT5Model"),sMt.forEach(t),B3r=r(GRe," (mT5 model)"),GRe.forEach(t),P3r=i(ae),dE=n(ae,"LI",{});var ORe=s(dE);YFe=n(ORe,"STRONG",{});var lMt=s(YFe);I3r=r(lMt,"pegasus"),lMt.forEach(t),q3r=r(ORe," \u2014 "),NU=n(ORe,"A",{href:!0});var iMt=s(NU);N3r=r(iMt,"FlaxPegasusModel"),iMt.forEach(t),j3r=r(ORe," (Pegasus model)"),ORe.forEach(t),D3r=i(ae),cE=n(ae,"LI",{});var VRe=s(cE);KFe=n(VRe,"STRONG",{});var dMt=s(KFe);G3r=r(dMt,"roberta"),dMt.forEach(t),O3r=r(VRe," \u2014 "),jU=n(VRe,"A",{href:!0});var cMt=s(jU);V3r=r(cMt,"FlaxRobertaModel"),cMt.forEach(t),X3r=r(VRe," (RoBERTa model)"),VRe.forEach(t),z3r=i(ae),fE=n(ae,"LI",{});var XRe=s(fE);ZFe=n(XRe,"STRONG",{});var fMt=s(ZFe);Q3r=r(fMt,"roformer"),fMt.forEach(t),W3r=r(XRe," \u2014 "),DU=n(XRe,"A",{href:!0});var mMt=s(DU);H3r=r(mMt,"FlaxRoFormerModel"),mMt.forEach(t),U3r=r(XRe," (RoFormer model)"),XRe.forEach(t),J3r=i(ae),mE=n(ae,"LI",{});var zRe=s(mE);e0e=n(zRe,"STRONG",{});var gMt=s(e0e);Y3r=r(gMt,"t5"),gMt.forEach(t),K3r=r(zRe," \u2014 "),GU=n(zRe,"A",{href:!0});var hMt=s(GU);Z3r=r(hMt,"FlaxT5Model"),hMt.forEach(t),ewr=r(zRe," (T5 model)"),zRe.forEach(t),owr=i(ae),gE=n(ae,"LI",{});var QRe=s(gE);o0e=n(QRe,"STRONG",{});var pMt=s(o0e);rwr=r(pMt,"vision-text-dual-encoder"),pMt.forEach(t),twr=r(QRe," \u2014 "),OU=n(QRe,"A",{href:!0});var uMt=s(OU);awr=r(uMt,"FlaxVisionTextDualEncoderModel"),uMt.forEach(t),nwr=r(QRe," (VisionTextDualEncoder model)"),QRe.forEach(t),swr=i(ae),hE=n(ae,"LI",{});var WRe=s(hE);r0e=n(WRe,"STRONG",{});var _Mt=s(r0e);lwr=r(_Mt,"vit"),_Mt.forEach(t),iwr=r(WRe," \u2014 "),VU=n(WRe,"A",{href:!0});var bMt=s(VU);dwr=r(bMt,"FlaxViTModel"),bMt.forEach(t),cwr=r(WRe," (ViT model)"),WRe.forEach(t),fwr=i(ae),pE=n(ae,"LI",{});var HRe=s(pE);t0e=n(HRe,"STRONG",{});var vMt=s(t0e);mwr=r(vMt,"wav2vec2"),vMt.forEach(t),gwr=r(HRe," \u2014 "),XU=n(HRe,"A",{href:!0});var FMt=s(XU);hwr=r(FMt,"FlaxWav2Vec2Model"),FMt.forEach(t),pwr=r(HRe," (Wav2Vec2 model)"),HRe.forEach(t),uwr=i(ae),uE=n(ae,"LI",{});var URe=s(uE);a0e=n(URe,"STRONG",{});var TMt=s(a0e);_wr=r(TMt,"xglm"),TMt.forEach(t),bwr=r(URe," \u2014 "),zU=n(URe,"A",{href:!0});var MMt=s(zU);vwr=r(MMt,"FlaxXGLMModel"),MMt.forEach(t),Fwr=r(URe," (XGLM model)"),URe.forEach(t),Twr=i(ae),_E=n(ae,"LI",{});var JRe=s(_E);n0e=n(JRe,"STRONG",{});var EMt=s(n0e);Mwr=r(EMt,"xlm-roberta"),EMt.forEach(t),Ewr=r(JRe," \u2014 "),QU=n(JRe,"A",{href:!0});var CMt=s(QU);Cwr=r(CMt,"FlaxXLMRobertaModel"),CMt.forEach(t),wwr=r(JRe," (XLM-RoBERTa model)"),JRe.forEach(t),ae.forEach(t),Awr=i(Nl),T(bE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),aqe=i(f),xc=n(f,"H2",{class:!0});var fje=s(xc);vE=n(fje,"A",{id:!0,class:!0,href:!0});var wMt=s(vE);s0e=n(wMt,"SPAN",{});var AMt=s(s0e);T(UL.$$.fragment,AMt),AMt.forEach(t),wMt.forEach(t),ywr=i(fje),l0e=n(fje,"SPAN",{});var yMt=s(l0e);Lwr=r(yMt,"FlaxAutoModelForCausalLM"),yMt.forEach(t),fje.forEach(t),nqe=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T(JL.$$.fragment,jl),xwr=i(jl),$c=n(jl,"P",{});var EZ=s($c);$wr=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WU=n(EZ,"A",{href:!0});var LMt=s(WU);kwr=r(LMt,"from_pretrained()"),LMt.forEach(t),Swr=r(EZ," class method or the "),HU=n(EZ,"A",{href:!0});var xMt=s(HU);Rwr=r(xMt,"from_config()"),xMt.forEach(t),Bwr=r(EZ,` class
method.`),EZ.forEach(t),Pwr=i(jl),YL=n(jl,"P",{});var mje=s(YL);Iwr=r(mje,"This class cannot be instantiated directly using "),i0e=n(mje,"CODE",{});var $Mt=s(i0e);qwr=r($Mt,"__init__()"),$Mt.forEach(t),Nwr=r(mje," (throws an error)."),mje.forEach(t),jwr=i(jl),Dt=n(jl,"DIV",{class:!0});var Fw=s(Dt);T(KL.$$.fragment,Fw),Dwr=i(Fw),d0e=n(Fw,"P",{});var kMt=s(d0e);Gwr=r(kMt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kMt.forEach(t),Owr=i(Fw),kc=n(Fw,"P",{});var CZ=s(kc);Vwr=r(CZ,`Note:
Loading a model from its configuration file does `),c0e=n(CZ,"STRONG",{});var SMt=s(c0e);Xwr=r(SMt,"not"),SMt.forEach(t),zwr=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=n(CZ,"A",{href:!0});var RMt=s(UU);Qwr=r(RMt,"from_pretrained()"),RMt.forEach(t),Wwr=r(CZ," to load the model weights."),CZ.forEach(t),Hwr=i(Fw),T(FE.$$.fragment,Fw),Fw.forEach(t),Uwr=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(ZL.$$.fragment,Dl),Jwr=i(Dl),f0e=n(Dl,"P",{});var BMt=s(f0e);Ywr=r(BMt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BMt.forEach(t),Kwr=i(Dl),hn=n(Dl,"P",{});var Tw=s(hn);Zwr=r(Tw,"The model class to instantiate is selected based on the "),m0e=n(Tw,"CODE",{});var PMt=s(m0e);eAr=r(PMt,"model_type"),PMt.forEach(t),oAr=r(Tw,` property of the config object (either
passed as an argument or loaded from `),g0e=n(Tw,"CODE",{});var IMt=s(g0e);rAr=r(IMt,"pretrained_model_name_or_path"),IMt.forEach(t),tAr=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h0e=n(Tw,"CODE",{});var qMt=s(h0e);aAr=r(qMt,"pretrained_model_name_or_path"),qMt.forEach(t),nAr=r(Tw,":"),Tw.forEach(t),sAr=i(Dl),ke=n(Dl,"UL",{});var Oe=s(ke);TE=n(Oe,"LI",{});var YRe=s(TE);p0e=n(YRe,"STRONG",{});var NMt=s(p0e);lAr=r(NMt,"bart"),NMt.forEach(t),iAr=r(YRe," \u2014 "),JU=n(YRe,"A",{href:!0});var jMt=s(JU);dAr=r(jMt,"FlaxBartForCausalLM"),jMt.forEach(t),cAr=r(YRe," (BART model)"),YRe.forEach(t),fAr=i(Oe),ME=n(Oe,"LI",{});var KRe=s(ME);u0e=n(KRe,"STRONG",{});var DMt=s(u0e);mAr=r(DMt,"bert"),DMt.forEach(t),gAr=r(KRe," \u2014 "),YU=n(KRe,"A",{href:!0});var GMt=s(YU);hAr=r(GMt,"FlaxBertForCausalLM"),GMt.forEach(t),pAr=r(KRe," (BERT model)"),KRe.forEach(t),uAr=i(Oe),EE=n(Oe,"LI",{});var ZRe=s(EE);_0e=n(ZRe,"STRONG",{});var OMt=s(_0e);_Ar=r(OMt,"big_bird"),OMt.forEach(t),bAr=r(ZRe," \u2014 "),KU=n(ZRe,"A",{href:!0});var VMt=s(KU);vAr=r(VMt,"FlaxBigBirdForCausalLM"),VMt.forEach(t),FAr=r(ZRe," (BigBird model)"),ZRe.forEach(t),TAr=i(Oe),CE=n(Oe,"LI",{});var eBe=s(CE);b0e=n(eBe,"STRONG",{});var XMt=s(b0e);MAr=r(XMt,"electra"),XMt.forEach(t),EAr=r(eBe," \u2014 "),ZU=n(eBe,"A",{href:!0});var zMt=s(ZU);CAr=r(zMt,"FlaxElectraForCausalLM"),zMt.forEach(t),wAr=r(eBe," (ELECTRA model)"),eBe.forEach(t),AAr=i(Oe),wE=n(Oe,"LI",{});var oBe=s(wE);v0e=n(oBe,"STRONG",{});var QMt=s(v0e);yAr=r(QMt,"gpt2"),QMt.forEach(t),LAr=r(oBe," \u2014 "),eJ=n(oBe,"A",{href:!0});var WMt=s(eJ);xAr=r(WMt,"FlaxGPT2LMHeadModel"),WMt.forEach(t),$Ar=r(oBe," (OpenAI GPT-2 model)"),oBe.forEach(t),kAr=i(Oe),AE=n(Oe,"LI",{});var rBe=s(AE);F0e=n(rBe,"STRONG",{});var HMt=s(F0e);SAr=r(HMt,"gpt_neo"),HMt.forEach(t),RAr=r(rBe," \u2014 "),oJ=n(rBe,"A",{href:!0});var UMt=s(oJ);BAr=r(UMt,"FlaxGPTNeoForCausalLM"),UMt.forEach(t),PAr=r(rBe," (GPT Neo model)"),rBe.forEach(t),IAr=i(Oe),yE=n(Oe,"LI",{});var tBe=s(yE);T0e=n(tBe,"STRONG",{});var JMt=s(T0e);qAr=r(JMt,"gptj"),JMt.forEach(t),NAr=r(tBe," \u2014 "),rJ=n(tBe,"A",{href:!0});var YMt=s(rJ);jAr=r(YMt,"FlaxGPTJForCausalLM"),YMt.forEach(t),DAr=r(tBe," (GPT-J model)"),tBe.forEach(t),GAr=i(Oe),LE=n(Oe,"LI",{});var aBe=s(LE);M0e=n(aBe,"STRONG",{});var KMt=s(M0e);OAr=r(KMt,"roberta"),KMt.forEach(t),VAr=r(aBe," \u2014 "),tJ=n(aBe,"A",{href:!0});var ZMt=s(tJ);XAr=r(ZMt,"FlaxRobertaForCausalLM"),ZMt.forEach(t),zAr=r(aBe," (RoBERTa model)"),aBe.forEach(t),QAr=i(Oe),xE=n(Oe,"LI",{});var nBe=s(xE);E0e=n(nBe,"STRONG",{});var e4t=s(E0e);WAr=r(e4t,"xglm"),e4t.forEach(t),HAr=r(nBe," \u2014 "),aJ=n(nBe,"A",{href:!0});var o4t=s(aJ);UAr=r(o4t,"FlaxXGLMForCausalLM"),o4t.forEach(t),JAr=r(nBe," (XGLM model)"),nBe.forEach(t),Oe.forEach(t),YAr=i(Dl),T($E.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),sqe=i(f),Sc=n(f,"H2",{class:!0});var gje=s(Sc);kE=n(gje,"A",{id:!0,class:!0,href:!0});var r4t=s(kE);C0e=n(r4t,"SPAN",{});var t4t=s(C0e);T(ex.$$.fragment,t4t),t4t.forEach(t),r4t.forEach(t),KAr=i(gje),w0e=n(gje,"SPAN",{});var a4t=s(w0e);ZAr=r(a4t,"FlaxAutoModelForPreTraining"),a4t.forEach(t),gje.forEach(t),lqe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(ox.$$.fragment,Gl),e6r=i(Gl),Rc=n(Gl,"P",{});var wZ=s(Rc);o6r=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nJ=n(wZ,"A",{href:!0});var n4t=s(nJ);r6r=r(n4t,"from_pretrained()"),n4t.forEach(t),t6r=r(wZ," class method or the "),sJ=n(wZ,"A",{href:!0});var s4t=s(sJ);a6r=r(s4t,"from_config()"),s4t.forEach(t),n6r=r(wZ,` class
method.`),wZ.forEach(t),s6r=i(Gl),rx=n(Gl,"P",{});var hje=s(rx);l6r=r(hje,"This class cannot be instantiated directly using "),A0e=n(hje,"CODE",{});var l4t=s(A0e);i6r=r(l4t,"__init__()"),l4t.forEach(t),d6r=r(hje," (throws an error)."),hje.forEach(t),c6r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var Mw=s(Gt);T(tx.$$.fragment,Mw),f6r=i(Mw),y0e=n(Mw,"P",{});var i4t=s(y0e);m6r=r(i4t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),i4t.forEach(t),g6r=i(Mw),Bc=n(Mw,"P",{});var AZ=s(Bc);h6r=r(AZ,`Note:
Loading a model from its configuration file does `),L0e=n(AZ,"STRONG",{});var d4t=s(L0e);p6r=r(d4t,"not"),d4t.forEach(t),u6r=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=n(AZ,"A",{href:!0});var c4t=s(lJ);_6r=r(c4t,"from_pretrained()"),c4t.forEach(t),b6r=r(AZ," to load the model weights."),AZ.forEach(t),v6r=i(Mw),T(SE.$$.fragment,Mw),Mw.forEach(t),F6r=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(ax.$$.fragment,Ol),T6r=i(Ol),x0e=n(Ol,"P",{});var f4t=s(x0e);M6r=r(f4t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),f4t.forEach(t),E6r=i(Ol),pn=n(Ol,"P",{});var Ew=s(pn);C6r=r(Ew,"The model class to instantiate is selected based on the "),$0e=n(Ew,"CODE",{});var m4t=s($0e);w6r=r(m4t,"model_type"),m4t.forEach(t),A6r=r(Ew,` property of the config object (either
passed as an argument or loaded from `),k0e=n(Ew,"CODE",{});var g4t=s(k0e);y6r=r(g4t,"pretrained_model_name_or_path"),g4t.forEach(t),L6r=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S0e=n(Ew,"CODE",{});var h4t=s(S0e);x6r=r(h4t,"pretrained_model_name_or_path"),h4t.forEach(t),$6r=r(Ew,":"),Ew.forEach(t),k6r=i(Ol),Me=n(Ol,"UL",{});var we=s(Me);RE=n(we,"LI",{});var sBe=s(RE);R0e=n(sBe,"STRONG",{});var p4t=s(R0e);S6r=r(p4t,"albert"),p4t.forEach(t),R6r=r(sBe," \u2014 "),iJ=n(sBe,"A",{href:!0});var u4t=s(iJ);B6r=r(u4t,"FlaxAlbertForPreTraining"),u4t.forEach(t),P6r=r(sBe," (ALBERT model)"),sBe.forEach(t),I6r=i(we),BE=n(we,"LI",{});var lBe=s(BE);B0e=n(lBe,"STRONG",{});var _4t=s(B0e);q6r=r(_4t,"bart"),_4t.forEach(t),N6r=r(lBe," \u2014 "),dJ=n(lBe,"A",{href:!0});var b4t=s(dJ);j6r=r(b4t,"FlaxBartForConditionalGeneration"),b4t.forEach(t),D6r=r(lBe," (BART model)"),lBe.forEach(t),G6r=i(we),PE=n(we,"LI",{});var iBe=s(PE);P0e=n(iBe,"STRONG",{});var v4t=s(P0e);O6r=r(v4t,"bert"),v4t.forEach(t),V6r=r(iBe," \u2014 "),cJ=n(iBe,"A",{href:!0});var F4t=s(cJ);X6r=r(F4t,"FlaxBertForPreTraining"),F4t.forEach(t),z6r=r(iBe," (BERT model)"),iBe.forEach(t),Q6r=i(we),IE=n(we,"LI",{});var dBe=s(IE);I0e=n(dBe,"STRONG",{});var T4t=s(I0e);W6r=r(T4t,"big_bird"),T4t.forEach(t),H6r=r(dBe," \u2014 "),fJ=n(dBe,"A",{href:!0});var M4t=s(fJ);U6r=r(M4t,"FlaxBigBirdForPreTraining"),M4t.forEach(t),J6r=r(dBe," (BigBird model)"),dBe.forEach(t),Y6r=i(we),qE=n(we,"LI",{});var cBe=s(qE);q0e=n(cBe,"STRONG",{});var E4t=s(q0e);K6r=r(E4t,"electra"),E4t.forEach(t),Z6r=r(cBe," \u2014 "),mJ=n(cBe,"A",{href:!0});var C4t=s(mJ);eyr=r(C4t,"FlaxElectraForPreTraining"),C4t.forEach(t),oyr=r(cBe," (ELECTRA model)"),cBe.forEach(t),ryr=i(we),NE=n(we,"LI",{});var fBe=s(NE);N0e=n(fBe,"STRONG",{});var w4t=s(N0e);tyr=r(w4t,"mbart"),w4t.forEach(t),ayr=r(fBe," \u2014 "),gJ=n(fBe,"A",{href:!0});var A4t=s(gJ);nyr=r(A4t,"FlaxMBartForConditionalGeneration"),A4t.forEach(t),syr=r(fBe," (mBART model)"),fBe.forEach(t),lyr=i(we),jE=n(we,"LI",{});var mBe=s(jE);j0e=n(mBe,"STRONG",{});var y4t=s(j0e);iyr=r(y4t,"mt5"),y4t.forEach(t),dyr=r(mBe," \u2014 "),hJ=n(mBe,"A",{href:!0});var L4t=s(hJ);cyr=r(L4t,"FlaxMT5ForConditionalGeneration"),L4t.forEach(t),fyr=r(mBe," (mT5 model)"),mBe.forEach(t),myr=i(we),DE=n(we,"LI",{});var gBe=s(DE);D0e=n(gBe,"STRONG",{});var x4t=s(D0e);gyr=r(x4t,"roberta"),x4t.forEach(t),hyr=r(gBe," \u2014 "),pJ=n(gBe,"A",{href:!0});var $4t=s(pJ);pyr=r($4t,"FlaxRobertaForMaskedLM"),$4t.forEach(t),uyr=r(gBe," (RoBERTa model)"),gBe.forEach(t),_yr=i(we),GE=n(we,"LI",{});var hBe=s(GE);G0e=n(hBe,"STRONG",{});var k4t=s(G0e);byr=r(k4t,"roformer"),k4t.forEach(t),vyr=r(hBe," \u2014 "),uJ=n(hBe,"A",{href:!0});var S4t=s(uJ);Fyr=r(S4t,"FlaxRoFormerForMaskedLM"),S4t.forEach(t),Tyr=r(hBe," (RoFormer model)"),hBe.forEach(t),Myr=i(we),OE=n(we,"LI",{});var pBe=s(OE);O0e=n(pBe,"STRONG",{});var R4t=s(O0e);Eyr=r(R4t,"t5"),R4t.forEach(t),Cyr=r(pBe," \u2014 "),_J=n(pBe,"A",{href:!0});var B4t=s(_J);wyr=r(B4t,"FlaxT5ForConditionalGeneration"),B4t.forEach(t),Ayr=r(pBe," (T5 model)"),pBe.forEach(t),yyr=i(we),VE=n(we,"LI",{});var uBe=s(VE);V0e=n(uBe,"STRONG",{});var P4t=s(V0e);Lyr=r(P4t,"wav2vec2"),P4t.forEach(t),xyr=r(uBe," \u2014 "),bJ=n(uBe,"A",{href:!0});var I4t=s(bJ);$yr=r(I4t,"FlaxWav2Vec2ForPreTraining"),I4t.forEach(t),kyr=r(uBe," (Wav2Vec2 model)"),uBe.forEach(t),Syr=i(we),XE=n(we,"LI",{});var _Be=s(XE);X0e=n(_Be,"STRONG",{});var q4t=s(X0e);Ryr=r(q4t,"xlm-roberta"),q4t.forEach(t),Byr=r(_Be," \u2014 "),vJ=n(_Be,"A",{href:!0});var N4t=s(vJ);Pyr=r(N4t,"FlaxXLMRobertaForMaskedLM"),N4t.forEach(t),Iyr=r(_Be," (XLM-RoBERTa model)"),_Be.forEach(t),we.forEach(t),qyr=i(Ol),T(zE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),iqe=i(f),Pc=n(f,"H2",{class:!0});var pje=s(Pc);QE=n(pje,"A",{id:!0,class:!0,href:!0});var j4t=s(QE);z0e=n(j4t,"SPAN",{});var D4t=s(z0e);T(nx.$$.fragment,D4t),D4t.forEach(t),j4t.forEach(t),Nyr=i(pje),Q0e=n(pje,"SPAN",{});var G4t=s(Q0e);jyr=r(G4t,"FlaxAutoModelForMaskedLM"),G4t.forEach(t),pje.forEach(t),dqe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(sx.$$.fragment,Vl),Dyr=i(Vl),Ic=n(Vl,"P",{});var yZ=s(Ic);Gyr=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FJ=n(yZ,"A",{href:!0});var O4t=s(FJ);Oyr=r(O4t,"from_pretrained()"),O4t.forEach(t),Vyr=r(yZ," class method or the "),TJ=n(yZ,"A",{href:!0});var V4t=s(TJ);Xyr=r(V4t,"from_config()"),V4t.forEach(t),zyr=r(yZ,` class
method.`),yZ.forEach(t),Qyr=i(Vl),lx=n(Vl,"P",{});var uje=s(lx);Wyr=r(uje,"This class cannot be instantiated directly using "),W0e=n(uje,"CODE",{});var X4t=s(W0e);Hyr=r(X4t,"__init__()"),X4t.forEach(t),Uyr=r(uje," (throws an error)."),uje.forEach(t),Jyr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var Cw=s(Ot);T(ix.$$.fragment,Cw),Yyr=i(Cw),H0e=n(Cw,"P",{});var z4t=s(H0e);Kyr=r(z4t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),z4t.forEach(t),Zyr=i(Cw),qc=n(Cw,"P",{});var LZ=s(qc);eLr=r(LZ,`Note:
Loading a model from its configuration file does `),U0e=n(LZ,"STRONG",{});var Q4t=s(U0e);oLr=r(Q4t,"not"),Q4t.forEach(t),rLr=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=n(LZ,"A",{href:!0});var W4t=s(MJ);tLr=r(W4t,"from_pretrained()"),W4t.forEach(t),aLr=r(LZ," to load the model weights."),LZ.forEach(t),nLr=i(Cw),T(WE.$$.fragment,Cw),Cw.forEach(t),sLr=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(dx.$$.fragment,Xl),lLr=i(Xl),J0e=n(Xl,"P",{});var H4t=s(J0e);iLr=r(H4t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),H4t.forEach(t),dLr=i(Xl),un=n(Xl,"P",{});var ww=s(un);cLr=r(ww,"The model class to instantiate is selected based on the "),Y0e=n(ww,"CODE",{});var U4t=s(Y0e);fLr=r(U4t,"model_type"),U4t.forEach(t),mLr=r(ww,` property of the config object (either
passed as an argument or loaded from `),K0e=n(ww,"CODE",{});var J4t=s(K0e);gLr=r(J4t,"pretrained_model_name_or_path"),J4t.forEach(t),hLr=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=n(ww,"CODE",{});var Y4t=s(Z0e);pLr=r(Y4t,"pretrained_model_name_or_path"),Y4t.forEach(t),uLr=r(ww,":"),ww.forEach(t),_Lr=i(Xl),Le=n(Xl,"UL",{});var Be=s(Le);HE=n(Be,"LI",{});var bBe=s(HE);eTe=n(bBe,"STRONG",{});var K4t=s(eTe);bLr=r(K4t,"albert"),K4t.forEach(t),vLr=r(bBe," \u2014 "),EJ=n(bBe,"A",{href:!0});var Z4t=s(EJ);FLr=r(Z4t,"FlaxAlbertForMaskedLM"),Z4t.forEach(t),TLr=r(bBe," (ALBERT model)"),bBe.forEach(t),MLr=i(Be),UE=n(Be,"LI",{});var vBe=s(UE);oTe=n(vBe,"STRONG",{});var eEt=s(oTe);ELr=r(eEt,"bart"),eEt.forEach(t),CLr=r(vBe," \u2014 "),CJ=n(vBe,"A",{href:!0});var oEt=s(CJ);wLr=r(oEt,"FlaxBartForConditionalGeneration"),oEt.forEach(t),ALr=r(vBe," (BART model)"),vBe.forEach(t),yLr=i(Be),JE=n(Be,"LI",{});var FBe=s(JE);rTe=n(FBe,"STRONG",{});var rEt=s(rTe);LLr=r(rEt,"bert"),rEt.forEach(t),xLr=r(FBe," \u2014 "),wJ=n(FBe,"A",{href:!0});var tEt=s(wJ);$Lr=r(tEt,"FlaxBertForMaskedLM"),tEt.forEach(t),kLr=r(FBe," (BERT model)"),FBe.forEach(t),SLr=i(Be),YE=n(Be,"LI",{});var TBe=s(YE);tTe=n(TBe,"STRONG",{});var aEt=s(tTe);RLr=r(aEt,"big_bird"),aEt.forEach(t),BLr=r(TBe," \u2014 "),AJ=n(TBe,"A",{href:!0});var nEt=s(AJ);PLr=r(nEt,"FlaxBigBirdForMaskedLM"),nEt.forEach(t),ILr=r(TBe," (BigBird model)"),TBe.forEach(t),qLr=i(Be),KE=n(Be,"LI",{});var MBe=s(KE);aTe=n(MBe,"STRONG",{});var sEt=s(aTe);NLr=r(sEt,"distilbert"),sEt.forEach(t),jLr=r(MBe," \u2014 "),yJ=n(MBe,"A",{href:!0});var lEt=s(yJ);DLr=r(lEt,"FlaxDistilBertForMaskedLM"),lEt.forEach(t),GLr=r(MBe," (DistilBERT model)"),MBe.forEach(t),OLr=i(Be),ZE=n(Be,"LI",{});var EBe=s(ZE);nTe=n(EBe,"STRONG",{});var iEt=s(nTe);VLr=r(iEt,"electra"),iEt.forEach(t),XLr=r(EBe," \u2014 "),LJ=n(EBe,"A",{href:!0});var dEt=s(LJ);zLr=r(dEt,"FlaxElectraForMaskedLM"),dEt.forEach(t),QLr=r(EBe," (ELECTRA model)"),EBe.forEach(t),WLr=i(Be),e5=n(Be,"LI",{});var CBe=s(e5);sTe=n(CBe,"STRONG",{});var cEt=s(sTe);HLr=r(cEt,"mbart"),cEt.forEach(t),ULr=r(CBe," \u2014 "),xJ=n(CBe,"A",{href:!0});var fEt=s(xJ);JLr=r(fEt,"FlaxMBartForConditionalGeneration"),fEt.forEach(t),YLr=r(CBe," (mBART model)"),CBe.forEach(t),KLr=i(Be),o5=n(Be,"LI",{});var wBe=s(o5);lTe=n(wBe,"STRONG",{});var mEt=s(lTe);ZLr=r(mEt,"roberta"),mEt.forEach(t),exr=r(wBe," \u2014 "),$J=n(wBe,"A",{href:!0});var gEt=s($J);oxr=r(gEt,"FlaxRobertaForMaskedLM"),gEt.forEach(t),rxr=r(wBe," (RoBERTa model)"),wBe.forEach(t),txr=i(Be),r5=n(Be,"LI",{});var ABe=s(r5);iTe=n(ABe,"STRONG",{});var hEt=s(iTe);axr=r(hEt,"roformer"),hEt.forEach(t),nxr=r(ABe," \u2014 "),kJ=n(ABe,"A",{href:!0});var pEt=s(kJ);sxr=r(pEt,"FlaxRoFormerForMaskedLM"),pEt.forEach(t),lxr=r(ABe," (RoFormer model)"),ABe.forEach(t),ixr=i(Be),t5=n(Be,"LI",{});var yBe=s(t5);dTe=n(yBe,"STRONG",{});var uEt=s(dTe);dxr=r(uEt,"xlm-roberta"),uEt.forEach(t),cxr=r(yBe," \u2014 "),SJ=n(yBe,"A",{href:!0});var _Et=s(SJ);fxr=r(_Et,"FlaxXLMRobertaForMaskedLM"),_Et.forEach(t),mxr=r(yBe," (XLM-RoBERTa model)"),yBe.forEach(t),Be.forEach(t),gxr=i(Xl),T(a5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),cqe=i(f),Nc=n(f,"H2",{class:!0});var _je=s(Nc);n5=n(_je,"A",{id:!0,class:!0,href:!0});var bEt=s(n5);cTe=n(bEt,"SPAN",{});var vEt=s(cTe);T(cx.$$.fragment,vEt),vEt.forEach(t),bEt.forEach(t),hxr=i(_je),fTe=n(_je,"SPAN",{});var FEt=s(fTe);pxr=r(FEt,"FlaxAutoModelForSeq2SeqLM"),FEt.forEach(t),_je.forEach(t),fqe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(fx.$$.fragment,zl),uxr=i(zl),jc=n(zl,"P",{});var xZ=s(jc);_xr=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RJ=n(xZ,"A",{href:!0});var TEt=s(RJ);bxr=r(TEt,"from_pretrained()"),TEt.forEach(t),vxr=r(xZ," class method or the "),BJ=n(xZ,"A",{href:!0});var MEt=s(BJ);Fxr=r(MEt,"from_config()"),MEt.forEach(t),Txr=r(xZ,` class
method.`),xZ.forEach(t),Mxr=i(zl),mx=n(zl,"P",{});var bje=s(mx);Exr=r(bje,"This class cannot be instantiated directly using "),mTe=n(bje,"CODE",{});var EEt=s(mTe);Cxr=r(EEt,"__init__()"),EEt.forEach(t),wxr=r(bje," (throws an error)."),bje.forEach(t),Axr=i(zl),Vt=n(zl,"DIV",{class:!0});var Aw=s(Vt);T(gx.$$.fragment,Aw),yxr=i(Aw),gTe=n(Aw,"P",{});var CEt=s(gTe);Lxr=r(CEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),CEt.forEach(t),xxr=i(Aw),Dc=n(Aw,"P",{});var $Z=s(Dc);$xr=r($Z,`Note:
Loading a model from its configuration file does `),hTe=n($Z,"STRONG",{});var wEt=s(hTe);kxr=r(wEt,"not"),wEt.forEach(t),Sxr=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=n($Z,"A",{href:!0});var AEt=s(PJ);Rxr=r(AEt,"from_pretrained()"),AEt.forEach(t),Bxr=r($Z," to load the model weights."),$Z.forEach(t),Pxr=i(Aw),T(s5.$$.fragment,Aw),Aw.forEach(t),Ixr=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(hx.$$.fragment,Ql),qxr=i(Ql),pTe=n(Ql,"P",{});var yEt=s(pTe);Nxr=r(yEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yEt.forEach(t),jxr=i(Ql),_n=n(Ql,"P",{});var yw=s(_n);Dxr=r(yw,"The model class to instantiate is selected based on the "),uTe=n(yw,"CODE",{});var LEt=s(uTe);Gxr=r(LEt,"model_type"),LEt.forEach(t),Oxr=r(yw,` property of the config object (either
passed as an argument or loaded from `),_Te=n(yw,"CODE",{});var xEt=s(_Te);Vxr=r(xEt,"pretrained_model_name_or_path"),xEt.forEach(t),Xxr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=n(yw,"CODE",{});var $Et=s(bTe);zxr=r($Et,"pretrained_model_name_or_path"),$Et.forEach(t),Qxr=r(yw,":"),yw.forEach(t),Wxr=i(Ql),Se=n(Ql,"UL",{});var Ve=s(Se);l5=n(Ve,"LI",{});var LBe=s(l5);vTe=n(LBe,"STRONG",{});var kEt=s(vTe);Hxr=r(kEt,"bart"),kEt.forEach(t),Uxr=r(LBe," \u2014 "),IJ=n(LBe,"A",{href:!0});var SEt=s(IJ);Jxr=r(SEt,"FlaxBartForConditionalGeneration"),SEt.forEach(t),Yxr=r(LBe," (BART model)"),LBe.forEach(t),Kxr=i(Ve),i5=n(Ve,"LI",{});var xBe=s(i5);FTe=n(xBe,"STRONG",{});var REt=s(FTe);Zxr=r(REt,"blenderbot"),REt.forEach(t),e9r=r(xBe," \u2014 "),qJ=n(xBe,"A",{href:!0});var BEt=s(qJ);o9r=r(BEt,"FlaxBlenderbotForConditionalGeneration"),BEt.forEach(t),r9r=r(xBe," (Blenderbot model)"),xBe.forEach(t),t9r=i(Ve),d5=n(Ve,"LI",{});var $Be=s(d5);TTe=n($Be,"STRONG",{});var PEt=s(TTe);a9r=r(PEt,"blenderbot-small"),PEt.forEach(t),n9r=r($Be," \u2014 "),NJ=n($Be,"A",{href:!0});var IEt=s(NJ);s9r=r(IEt,"FlaxBlenderbotSmallForConditionalGeneration"),IEt.forEach(t),l9r=r($Be," (BlenderbotSmall model)"),$Be.forEach(t),i9r=i(Ve),c5=n(Ve,"LI",{});var kBe=s(c5);MTe=n(kBe,"STRONG",{});var qEt=s(MTe);d9r=r(qEt,"encoder-decoder"),qEt.forEach(t),c9r=r(kBe," \u2014 "),jJ=n(kBe,"A",{href:!0});var NEt=s(jJ);f9r=r(NEt,"FlaxEncoderDecoderModel"),NEt.forEach(t),m9r=r(kBe," (Encoder decoder model)"),kBe.forEach(t),g9r=i(Ve),f5=n(Ve,"LI",{});var SBe=s(f5);ETe=n(SBe,"STRONG",{});var jEt=s(ETe);h9r=r(jEt,"marian"),jEt.forEach(t),p9r=r(SBe," \u2014 "),DJ=n(SBe,"A",{href:!0});var DEt=s(DJ);u9r=r(DEt,"FlaxMarianMTModel"),DEt.forEach(t),_9r=r(SBe," (Marian model)"),SBe.forEach(t),b9r=i(Ve),m5=n(Ve,"LI",{});var RBe=s(m5);CTe=n(RBe,"STRONG",{});var GEt=s(CTe);v9r=r(GEt,"mbart"),GEt.forEach(t),F9r=r(RBe," \u2014 "),GJ=n(RBe,"A",{href:!0});var OEt=s(GJ);T9r=r(OEt,"FlaxMBartForConditionalGeneration"),OEt.forEach(t),M9r=r(RBe," (mBART model)"),RBe.forEach(t),E9r=i(Ve),g5=n(Ve,"LI",{});var BBe=s(g5);wTe=n(BBe,"STRONG",{});var VEt=s(wTe);C9r=r(VEt,"mt5"),VEt.forEach(t),w9r=r(BBe," \u2014 "),OJ=n(BBe,"A",{href:!0});var XEt=s(OJ);A9r=r(XEt,"FlaxMT5ForConditionalGeneration"),XEt.forEach(t),y9r=r(BBe," (mT5 model)"),BBe.forEach(t),L9r=i(Ve),h5=n(Ve,"LI",{});var PBe=s(h5);ATe=n(PBe,"STRONG",{});var zEt=s(ATe);x9r=r(zEt,"pegasus"),zEt.forEach(t),$9r=r(PBe," \u2014 "),VJ=n(PBe,"A",{href:!0});var QEt=s(VJ);k9r=r(QEt,"FlaxPegasusForConditionalGeneration"),QEt.forEach(t),S9r=r(PBe," (Pegasus model)"),PBe.forEach(t),R9r=i(Ve),p5=n(Ve,"LI",{});var IBe=s(p5);yTe=n(IBe,"STRONG",{});var WEt=s(yTe);B9r=r(WEt,"t5"),WEt.forEach(t),P9r=r(IBe," \u2014 "),XJ=n(IBe,"A",{href:!0});var HEt=s(XJ);I9r=r(HEt,"FlaxT5ForConditionalGeneration"),HEt.forEach(t),q9r=r(IBe," (T5 model)"),IBe.forEach(t),Ve.forEach(t),N9r=i(Ql),T(u5.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),mqe=i(f),Gc=n(f,"H2",{class:!0});var vje=s(Gc);_5=n(vje,"A",{id:!0,class:!0,href:!0});var UEt=s(_5);LTe=n(UEt,"SPAN",{});var JEt=s(LTe);T(px.$$.fragment,JEt),JEt.forEach(t),UEt.forEach(t),j9r=i(vje),xTe=n(vje,"SPAN",{});var YEt=s(xTe);D9r=r(YEt,"FlaxAutoModelForSequenceClassification"),YEt.forEach(t),vje.forEach(t),gqe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(ux.$$.fragment,Wl),G9r=i(Wl),Oc=n(Wl,"P",{});var kZ=s(Oc);O9r=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zJ=n(kZ,"A",{href:!0});var KEt=s(zJ);V9r=r(KEt,"from_pretrained()"),KEt.forEach(t),X9r=r(kZ," class method or the "),QJ=n(kZ,"A",{href:!0});var ZEt=s(QJ);z9r=r(ZEt,"from_config()"),ZEt.forEach(t),Q9r=r(kZ,` class
method.`),kZ.forEach(t),W9r=i(Wl),_x=n(Wl,"P",{});var Fje=s(_x);H9r=r(Fje,"This class cannot be instantiated directly using "),$Te=n(Fje,"CODE",{});var e5t=s($Te);U9r=r(e5t,"__init__()"),e5t.forEach(t),J9r=r(Fje," (throws an error)."),Fje.forEach(t),Y9r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var Lw=s(Xt);T(bx.$$.fragment,Lw),K9r=i(Lw),kTe=n(Lw,"P",{});var o5t=s(kTe);Z9r=r(o5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),o5t.forEach(t),e$r=i(Lw),Vc=n(Lw,"P",{});var SZ=s(Vc);o$r=r(SZ,`Note:
Loading a model from its configuration file does `),STe=n(SZ,"STRONG",{});var r5t=s(STe);r$r=r(r5t,"not"),r5t.forEach(t),t$r=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(SZ,"A",{href:!0});var t5t=s(WJ);a$r=r(t5t,"from_pretrained()"),t5t.forEach(t),n$r=r(SZ," to load the model weights."),SZ.forEach(t),s$r=i(Lw),T(b5.$$.fragment,Lw),Lw.forEach(t),l$r=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(vx.$$.fragment,Hl),i$r=i(Hl),RTe=n(Hl,"P",{});var a5t=s(RTe);d$r=r(a5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),a5t.forEach(t),c$r=i(Hl),bn=n(Hl,"P",{});var xw=s(bn);f$r=r(xw,"The model class to instantiate is selected based on the "),BTe=n(xw,"CODE",{});var n5t=s(BTe);m$r=r(n5t,"model_type"),n5t.forEach(t),g$r=r(xw,` property of the config object (either
passed as an argument or loaded from `),PTe=n(xw,"CODE",{});var s5t=s(PTe);h$r=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),p$r=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ITe=n(xw,"CODE",{});var l5t=s(ITe);u$r=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),_$r=r(xw,":"),xw.forEach(t),b$r=i(Hl),xe=n(Hl,"UL",{});var Pe=s(xe);v5=n(Pe,"LI",{});var qBe=s(v5);qTe=n(qBe,"STRONG",{});var i5t=s(qTe);v$r=r(i5t,"albert"),i5t.forEach(t),F$r=r(qBe," \u2014 "),HJ=n(qBe,"A",{href:!0});var d5t=s(HJ);T$r=r(d5t,"FlaxAlbertForSequenceClassification"),d5t.forEach(t),M$r=r(qBe," (ALBERT model)"),qBe.forEach(t),E$r=i(Pe),F5=n(Pe,"LI",{});var NBe=s(F5);NTe=n(NBe,"STRONG",{});var c5t=s(NTe);C$r=r(c5t,"bart"),c5t.forEach(t),w$r=r(NBe," \u2014 "),UJ=n(NBe,"A",{href:!0});var f5t=s(UJ);A$r=r(f5t,"FlaxBartForSequenceClassification"),f5t.forEach(t),y$r=r(NBe," (BART model)"),NBe.forEach(t),L$r=i(Pe),T5=n(Pe,"LI",{});var jBe=s(T5);jTe=n(jBe,"STRONG",{});var m5t=s(jTe);x$r=r(m5t,"bert"),m5t.forEach(t),$$r=r(jBe," \u2014 "),JJ=n(jBe,"A",{href:!0});var g5t=s(JJ);k$r=r(g5t,"FlaxBertForSequenceClassification"),g5t.forEach(t),S$r=r(jBe," (BERT model)"),jBe.forEach(t),R$r=i(Pe),M5=n(Pe,"LI",{});var DBe=s(M5);DTe=n(DBe,"STRONG",{});var h5t=s(DTe);B$r=r(h5t,"big_bird"),h5t.forEach(t),P$r=r(DBe," \u2014 "),YJ=n(DBe,"A",{href:!0});var p5t=s(YJ);I$r=r(p5t,"FlaxBigBirdForSequenceClassification"),p5t.forEach(t),q$r=r(DBe," (BigBird model)"),DBe.forEach(t),N$r=i(Pe),E5=n(Pe,"LI",{});var GBe=s(E5);GTe=n(GBe,"STRONG",{});var u5t=s(GTe);j$r=r(u5t,"distilbert"),u5t.forEach(t),D$r=r(GBe," \u2014 "),KJ=n(GBe,"A",{href:!0});var _5t=s(KJ);G$r=r(_5t,"FlaxDistilBertForSequenceClassification"),_5t.forEach(t),O$r=r(GBe," (DistilBERT model)"),GBe.forEach(t),V$r=i(Pe),C5=n(Pe,"LI",{});var OBe=s(C5);OTe=n(OBe,"STRONG",{});var b5t=s(OTe);X$r=r(b5t,"electra"),b5t.forEach(t),z$r=r(OBe," \u2014 "),ZJ=n(OBe,"A",{href:!0});var v5t=s(ZJ);Q$r=r(v5t,"FlaxElectraForSequenceClassification"),v5t.forEach(t),W$r=r(OBe," (ELECTRA model)"),OBe.forEach(t),H$r=i(Pe),w5=n(Pe,"LI",{});var VBe=s(w5);VTe=n(VBe,"STRONG",{});var F5t=s(VTe);U$r=r(F5t,"mbart"),F5t.forEach(t),J$r=r(VBe," \u2014 "),eY=n(VBe,"A",{href:!0});var T5t=s(eY);Y$r=r(T5t,"FlaxMBartForSequenceClassification"),T5t.forEach(t),K$r=r(VBe," (mBART model)"),VBe.forEach(t),Z$r=i(Pe),A5=n(Pe,"LI",{});var XBe=s(A5);XTe=n(XBe,"STRONG",{});var M5t=s(XTe);ekr=r(M5t,"roberta"),M5t.forEach(t),okr=r(XBe," \u2014 "),oY=n(XBe,"A",{href:!0});var E5t=s(oY);rkr=r(E5t,"FlaxRobertaForSequenceClassification"),E5t.forEach(t),tkr=r(XBe," (RoBERTa model)"),XBe.forEach(t),akr=i(Pe),y5=n(Pe,"LI",{});var zBe=s(y5);zTe=n(zBe,"STRONG",{});var C5t=s(zTe);nkr=r(C5t,"roformer"),C5t.forEach(t),skr=r(zBe," \u2014 "),rY=n(zBe,"A",{href:!0});var w5t=s(rY);lkr=r(w5t,"FlaxRoFormerForSequenceClassification"),w5t.forEach(t),ikr=r(zBe," (RoFormer model)"),zBe.forEach(t),dkr=i(Pe),L5=n(Pe,"LI",{});var QBe=s(L5);QTe=n(QBe,"STRONG",{});var A5t=s(QTe);ckr=r(A5t,"xlm-roberta"),A5t.forEach(t),fkr=r(QBe," \u2014 "),tY=n(QBe,"A",{href:!0});var y5t=s(tY);mkr=r(y5t,"FlaxXLMRobertaForSequenceClassification"),y5t.forEach(t),gkr=r(QBe," (XLM-RoBERTa model)"),QBe.forEach(t),Pe.forEach(t),hkr=i(Hl),T(x5.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),hqe=i(f),Xc=n(f,"H2",{class:!0});var Tje=s(Xc);$5=n(Tje,"A",{id:!0,class:!0,href:!0});var L5t=s($5);WTe=n(L5t,"SPAN",{});var x5t=s(WTe);T(Fx.$$.fragment,x5t),x5t.forEach(t),L5t.forEach(t),pkr=i(Tje),HTe=n(Tje,"SPAN",{});var $5t=s(HTe);ukr=r($5t,"FlaxAutoModelForQuestionAnswering"),$5t.forEach(t),Tje.forEach(t),pqe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T(Tx.$$.fragment,Ul),_kr=i(Ul),zc=n(Ul,"P",{});var RZ=s(zc);bkr=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aY=n(RZ,"A",{href:!0});var k5t=s(aY);vkr=r(k5t,"from_pretrained()"),k5t.forEach(t),Fkr=r(RZ," class method or the "),nY=n(RZ,"A",{href:!0});var S5t=s(nY);Tkr=r(S5t,"from_config()"),S5t.forEach(t),Mkr=r(RZ,` class
method.`),RZ.forEach(t),Ekr=i(Ul),Mx=n(Ul,"P",{});var Mje=s(Mx);Ckr=r(Mje,"This class cannot be instantiated directly using "),UTe=n(Mje,"CODE",{});var R5t=s(UTe);wkr=r(R5t,"__init__()"),R5t.forEach(t),Akr=r(Mje," (throws an error)."),Mje.forEach(t),ykr=i(Ul),zt=n(Ul,"DIV",{class:!0});var $w=s(zt);T(Ex.$$.fragment,$w),Lkr=i($w),JTe=n($w,"P",{});var B5t=s(JTe);xkr=r(B5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),B5t.forEach(t),$kr=i($w),Qc=n($w,"P",{});var BZ=s(Qc);kkr=r(BZ,`Note:
Loading a model from its configuration file does `),YTe=n(BZ,"STRONG",{});var P5t=s(YTe);Skr=r(P5t,"not"),P5t.forEach(t),Rkr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=n(BZ,"A",{href:!0});var I5t=s(sY);Bkr=r(I5t,"from_pretrained()"),I5t.forEach(t),Pkr=r(BZ," to load the model weights."),BZ.forEach(t),Ikr=i($w),T(k5.$$.fragment,$w),$w.forEach(t),qkr=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(Cx.$$.fragment,Jl),Nkr=i(Jl),KTe=n(Jl,"P",{});var q5t=s(KTe);jkr=r(q5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),q5t.forEach(t),Dkr=i(Jl),vn=n(Jl,"P",{});var kw=s(vn);Gkr=r(kw,"The model class to instantiate is selected based on the "),ZTe=n(kw,"CODE",{});var N5t=s(ZTe);Okr=r(N5t,"model_type"),N5t.forEach(t),Vkr=r(kw,` property of the config object (either
passed as an argument or loaded from `),e7e=n(kw,"CODE",{});var j5t=s(e7e);Xkr=r(j5t,"pretrained_model_name_or_path"),j5t.forEach(t),zkr=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=n(kw,"CODE",{});var D5t=s(o7e);Qkr=r(D5t,"pretrained_model_name_or_path"),D5t.forEach(t),Wkr=r(kw,":"),kw.forEach(t),Hkr=i(Jl),$e=n(Jl,"UL",{});var Ie=s($e);S5=n(Ie,"LI",{});var WBe=s(S5);r7e=n(WBe,"STRONG",{});var G5t=s(r7e);Ukr=r(G5t,"albert"),G5t.forEach(t),Jkr=r(WBe," \u2014 "),lY=n(WBe,"A",{href:!0});var O5t=s(lY);Ykr=r(O5t,"FlaxAlbertForQuestionAnswering"),O5t.forEach(t),Kkr=r(WBe," (ALBERT model)"),WBe.forEach(t),Zkr=i(Ie),R5=n(Ie,"LI",{});var HBe=s(R5);t7e=n(HBe,"STRONG",{});var V5t=s(t7e);eSr=r(V5t,"bart"),V5t.forEach(t),oSr=r(HBe," \u2014 "),iY=n(HBe,"A",{href:!0});var X5t=s(iY);rSr=r(X5t,"FlaxBartForQuestionAnswering"),X5t.forEach(t),tSr=r(HBe," (BART model)"),HBe.forEach(t),aSr=i(Ie),B5=n(Ie,"LI",{});var UBe=s(B5);a7e=n(UBe,"STRONG",{});var z5t=s(a7e);nSr=r(z5t,"bert"),z5t.forEach(t),sSr=r(UBe," \u2014 "),dY=n(UBe,"A",{href:!0});var Q5t=s(dY);lSr=r(Q5t,"FlaxBertForQuestionAnswering"),Q5t.forEach(t),iSr=r(UBe," (BERT model)"),UBe.forEach(t),dSr=i(Ie),P5=n(Ie,"LI",{});var JBe=s(P5);n7e=n(JBe,"STRONG",{});var W5t=s(n7e);cSr=r(W5t,"big_bird"),W5t.forEach(t),fSr=r(JBe," \u2014 "),cY=n(JBe,"A",{href:!0});var H5t=s(cY);mSr=r(H5t,"FlaxBigBirdForQuestionAnswering"),H5t.forEach(t),gSr=r(JBe," (BigBird model)"),JBe.forEach(t),hSr=i(Ie),I5=n(Ie,"LI",{});var YBe=s(I5);s7e=n(YBe,"STRONG",{});var U5t=s(s7e);pSr=r(U5t,"distilbert"),U5t.forEach(t),uSr=r(YBe," \u2014 "),fY=n(YBe,"A",{href:!0});var J5t=s(fY);_Sr=r(J5t,"FlaxDistilBertForQuestionAnswering"),J5t.forEach(t),bSr=r(YBe," (DistilBERT model)"),YBe.forEach(t),vSr=i(Ie),q5=n(Ie,"LI",{});var KBe=s(q5);l7e=n(KBe,"STRONG",{});var Y5t=s(l7e);FSr=r(Y5t,"electra"),Y5t.forEach(t),TSr=r(KBe," \u2014 "),mY=n(KBe,"A",{href:!0});var K5t=s(mY);MSr=r(K5t,"FlaxElectraForQuestionAnswering"),K5t.forEach(t),ESr=r(KBe," (ELECTRA model)"),KBe.forEach(t),CSr=i(Ie),N5=n(Ie,"LI",{});var ZBe=s(N5);i7e=n(ZBe,"STRONG",{});var Z5t=s(i7e);wSr=r(Z5t,"mbart"),Z5t.forEach(t),ASr=r(ZBe," \u2014 "),gY=n(ZBe,"A",{href:!0});var eCt=s(gY);ySr=r(eCt,"FlaxMBartForQuestionAnswering"),eCt.forEach(t),LSr=r(ZBe," (mBART model)"),ZBe.forEach(t),xSr=i(Ie),j5=n(Ie,"LI",{});var ePe=s(j5);d7e=n(ePe,"STRONG",{});var oCt=s(d7e);$Sr=r(oCt,"roberta"),oCt.forEach(t),kSr=r(ePe," \u2014 "),hY=n(ePe,"A",{href:!0});var rCt=s(hY);SSr=r(rCt,"FlaxRobertaForQuestionAnswering"),rCt.forEach(t),RSr=r(ePe," (RoBERTa model)"),ePe.forEach(t),BSr=i(Ie),D5=n(Ie,"LI",{});var oPe=s(D5);c7e=n(oPe,"STRONG",{});var tCt=s(c7e);PSr=r(tCt,"roformer"),tCt.forEach(t),ISr=r(oPe," \u2014 "),pY=n(oPe,"A",{href:!0});var aCt=s(pY);qSr=r(aCt,"FlaxRoFormerForQuestionAnswering"),aCt.forEach(t),NSr=r(oPe," (RoFormer model)"),oPe.forEach(t),jSr=i(Ie),G5=n(Ie,"LI",{});var rPe=s(G5);f7e=n(rPe,"STRONG",{});var nCt=s(f7e);DSr=r(nCt,"xlm-roberta"),nCt.forEach(t),GSr=r(rPe," \u2014 "),uY=n(rPe,"A",{href:!0});var sCt=s(uY);OSr=r(sCt,"FlaxXLMRobertaForQuestionAnswering"),sCt.forEach(t),VSr=r(rPe," (XLM-RoBERTa model)"),rPe.forEach(t),Ie.forEach(t),XSr=i(Jl),T(O5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),uqe=i(f),Wc=n(f,"H2",{class:!0});var Eje=s(Wc);V5=n(Eje,"A",{id:!0,class:!0,href:!0});var lCt=s(V5);m7e=n(lCt,"SPAN",{});var iCt=s(m7e);T(wx.$$.fragment,iCt),iCt.forEach(t),lCt.forEach(t),zSr=i(Eje),g7e=n(Eje,"SPAN",{});var dCt=s(g7e);QSr=r(dCt,"FlaxAutoModelForTokenClassification"),dCt.forEach(t),Eje.forEach(t),_qe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T(Ax.$$.fragment,Yl),WSr=i(Yl),Hc=n(Yl,"P",{});var PZ=s(Hc);HSr=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_Y=n(PZ,"A",{href:!0});var cCt=s(_Y);USr=r(cCt,"from_pretrained()"),cCt.forEach(t),JSr=r(PZ," class method or the "),bY=n(PZ,"A",{href:!0});var fCt=s(bY);YSr=r(fCt,"from_config()"),fCt.forEach(t),KSr=r(PZ,` class
method.`),PZ.forEach(t),ZSr=i(Yl),yx=n(Yl,"P",{});var Cje=s(yx);eRr=r(Cje,"This class cannot be instantiated directly using "),h7e=n(Cje,"CODE",{});var mCt=s(h7e);oRr=r(mCt,"__init__()"),mCt.forEach(t),rRr=r(Cje," (throws an error)."),Cje.forEach(t),tRr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var Sw=s(Qt);T(Lx.$$.fragment,Sw),aRr=i(Sw),p7e=n(Sw,"P",{});var gCt=s(p7e);nRr=r(gCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gCt.forEach(t),sRr=i(Sw),Uc=n(Sw,"P",{});var IZ=s(Uc);lRr=r(IZ,`Note:
Loading a model from its configuration file does `),u7e=n(IZ,"STRONG",{});var hCt=s(u7e);iRr=r(hCt,"not"),hCt.forEach(t),dRr=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=n(IZ,"A",{href:!0});var pCt=s(vY);cRr=r(pCt,"from_pretrained()"),pCt.forEach(t),fRr=r(IZ," to load the model weights."),IZ.forEach(t),mRr=i(Sw),T(X5.$$.fragment,Sw),Sw.forEach(t),gRr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(xx.$$.fragment,Kl),hRr=i(Kl),_7e=n(Kl,"P",{});var uCt=s(_7e);pRr=r(uCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uCt.forEach(t),uRr=i(Kl),Fn=n(Kl,"P",{});var Rw=s(Fn);_Rr=r(Rw,"The model class to instantiate is selected based on the "),b7e=n(Rw,"CODE",{});var _Ct=s(b7e);bRr=r(_Ct,"model_type"),_Ct.forEach(t),vRr=r(Rw,` property of the config object (either
passed as an argument or loaded from `),v7e=n(Rw,"CODE",{});var bCt=s(v7e);FRr=r(bCt,"pretrained_model_name_or_path"),bCt.forEach(t),TRr=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F7e=n(Rw,"CODE",{});var vCt=s(F7e);MRr=r(vCt,"pretrained_model_name_or_path"),vCt.forEach(t),ERr=r(Rw,":"),Rw.forEach(t),CRr=i(Kl),De=n(Kl,"UL",{});var Fo=s(De);z5=n(Fo,"LI",{});var tPe=s(z5);T7e=n(tPe,"STRONG",{});var FCt=s(T7e);wRr=r(FCt,"albert"),FCt.forEach(t),ARr=r(tPe," \u2014 "),FY=n(tPe,"A",{href:!0});var TCt=s(FY);yRr=r(TCt,"FlaxAlbertForTokenClassification"),TCt.forEach(t),LRr=r(tPe," (ALBERT model)"),tPe.forEach(t),xRr=i(Fo),Q5=n(Fo,"LI",{});var aPe=s(Q5);M7e=n(aPe,"STRONG",{});var MCt=s(M7e);$Rr=r(MCt,"bert"),MCt.forEach(t),kRr=r(aPe," \u2014 "),TY=n(aPe,"A",{href:!0});var ECt=s(TY);SRr=r(ECt,"FlaxBertForTokenClassification"),ECt.forEach(t),RRr=r(aPe," (BERT model)"),aPe.forEach(t),BRr=i(Fo),W5=n(Fo,"LI",{});var nPe=s(W5);E7e=n(nPe,"STRONG",{});var CCt=s(E7e);PRr=r(CCt,"big_bird"),CCt.forEach(t),IRr=r(nPe," \u2014 "),MY=n(nPe,"A",{href:!0});var wCt=s(MY);qRr=r(wCt,"FlaxBigBirdForTokenClassification"),wCt.forEach(t),NRr=r(nPe," (BigBird model)"),nPe.forEach(t),jRr=i(Fo),H5=n(Fo,"LI",{});var sPe=s(H5);C7e=n(sPe,"STRONG",{});var ACt=s(C7e);DRr=r(ACt,"distilbert"),ACt.forEach(t),GRr=r(sPe," \u2014 "),EY=n(sPe,"A",{href:!0});var yCt=s(EY);ORr=r(yCt,"FlaxDistilBertForTokenClassification"),yCt.forEach(t),VRr=r(sPe," (DistilBERT model)"),sPe.forEach(t),XRr=i(Fo),U5=n(Fo,"LI",{});var lPe=s(U5);w7e=n(lPe,"STRONG",{});var LCt=s(w7e);zRr=r(LCt,"electra"),LCt.forEach(t),QRr=r(lPe," \u2014 "),CY=n(lPe,"A",{href:!0});var xCt=s(CY);WRr=r(xCt,"FlaxElectraForTokenClassification"),xCt.forEach(t),HRr=r(lPe," (ELECTRA model)"),lPe.forEach(t),URr=i(Fo),J5=n(Fo,"LI",{});var iPe=s(J5);A7e=n(iPe,"STRONG",{});var $Ct=s(A7e);JRr=r($Ct,"roberta"),$Ct.forEach(t),YRr=r(iPe," \u2014 "),wY=n(iPe,"A",{href:!0});var kCt=s(wY);KRr=r(kCt,"FlaxRobertaForTokenClassification"),kCt.forEach(t),ZRr=r(iPe," (RoBERTa model)"),iPe.forEach(t),eBr=i(Fo),Y5=n(Fo,"LI",{});var dPe=s(Y5);y7e=n(dPe,"STRONG",{});var SCt=s(y7e);oBr=r(SCt,"roformer"),SCt.forEach(t),rBr=r(dPe," \u2014 "),AY=n(dPe,"A",{href:!0});var RCt=s(AY);tBr=r(RCt,"FlaxRoFormerForTokenClassification"),RCt.forEach(t),aBr=r(dPe," (RoFormer model)"),dPe.forEach(t),nBr=i(Fo),K5=n(Fo,"LI",{});var cPe=s(K5);L7e=n(cPe,"STRONG",{});var BCt=s(L7e);sBr=r(BCt,"xlm-roberta"),BCt.forEach(t),lBr=r(cPe," \u2014 "),yY=n(cPe,"A",{href:!0});var PCt=s(yY);iBr=r(PCt,"FlaxXLMRobertaForTokenClassification"),PCt.forEach(t),dBr=r(cPe," (XLM-RoBERTa model)"),cPe.forEach(t),Fo.forEach(t),cBr=i(Kl),T(Z5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),bqe=i(f),Jc=n(f,"H2",{class:!0});var wje=s(Jc);eC=n(wje,"A",{id:!0,class:!0,href:!0});var ICt=s(eC);x7e=n(ICt,"SPAN",{});var qCt=s(x7e);T($x.$$.fragment,qCt),qCt.forEach(t),ICt.forEach(t),fBr=i(wje),$7e=n(wje,"SPAN",{});var NCt=s($7e);mBr=r(NCt,"FlaxAutoModelForMultipleChoice"),NCt.forEach(t),wje.forEach(t),vqe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T(kx.$$.fragment,Zl),gBr=i(Zl),Yc=n(Zl,"P",{});var qZ=s(Yc);hBr=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LY=n(qZ,"A",{href:!0});var jCt=s(LY);pBr=r(jCt,"from_pretrained()"),jCt.forEach(t),uBr=r(qZ," class method or the "),xY=n(qZ,"A",{href:!0});var DCt=s(xY);_Br=r(DCt,"from_config()"),DCt.forEach(t),bBr=r(qZ,` class
method.`),qZ.forEach(t),vBr=i(Zl),Sx=n(Zl,"P",{});var Aje=s(Sx);FBr=r(Aje,"This class cannot be instantiated directly using "),k7e=n(Aje,"CODE",{});var GCt=s(k7e);TBr=r(GCt,"__init__()"),GCt.forEach(t),MBr=r(Aje," (throws an error)."),Aje.forEach(t),EBr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var Bw=s(Wt);T(Rx.$$.fragment,Bw),CBr=i(Bw),S7e=n(Bw,"P",{});var OCt=s(S7e);wBr=r(OCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),OCt.forEach(t),ABr=i(Bw),Kc=n(Bw,"P",{});var NZ=s(Kc);yBr=r(NZ,`Note:
Loading a model from its configuration file does `),R7e=n(NZ,"STRONG",{});var VCt=s(R7e);LBr=r(VCt,"not"),VCt.forEach(t),xBr=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=n(NZ,"A",{href:!0});var XCt=s($Y);$Br=r(XCt,"from_pretrained()"),XCt.forEach(t),kBr=r(NZ," to load the model weights."),NZ.forEach(t),SBr=i(Bw),T(oC.$$.fragment,Bw),Bw.forEach(t),RBr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T(Bx.$$.fragment,ei),BBr=i(ei),B7e=n(ei,"P",{});var zCt=s(B7e);PBr=r(zCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zCt.forEach(t),IBr=i(ei),Tn=n(ei,"P",{});var Pw=s(Tn);qBr=r(Pw,"The model class to instantiate is selected based on the "),P7e=n(Pw,"CODE",{});var QCt=s(P7e);NBr=r(QCt,"model_type"),QCt.forEach(t),jBr=r(Pw,` property of the config object (either
passed as an argument or loaded from `),I7e=n(Pw,"CODE",{});var WCt=s(I7e);DBr=r(WCt,"pretrained_model_name_or_path"),WCt.forEach(t),GBr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q7e=n(Pw,"CODE",{});var HCt=s(q7e);OBr=r(HCt,"pretrained_model_name_or_path"),HCt.forEach(t),VBr=r(Pw,":"),Pw.forEach(t),XBr=i(ei),Ge=n(ei,"UL",{});var To=s(Ge);rC=n(To,"LI",{});var fPe=s(rC);N7e=n(fPe,"STRONG",{});var UCt=s(N7e);zBr=r(UCt,"albert"),UCt.forEach(t),QBr=r(fPe," \u2014 "),kY=n(fPe,"A",{href:!0});var JCt=s(kY);WBr=r(JCt,"FlaxAlbertForMultipleChoice"),JCt.forEach(t),HBr=r(fPe," (ALBERT model)"),fPe.forEach(t),UBr=i(To),tC=n(To,"LI",{});var mPe=s(tC);j7e=n(mPe,"STRONG",{});var YCt=s(j7e);JBr=r(YCt,"bert"),YCt.forEach(t),YBr=r(mPe," \u2014 "),SY=n(mPe,"A",{href:!0});var KCt=s(SY);KBr=r(KCt,"FlaxBertForMultipleChoice"),KCt.forEach(t),ZBr=r(mPe," (BERT model)"),mPe.forEach(t),ePr=i(To),aC=n(To,"LI",{});var gPe=s(aC);D7e=n(gPe,"STRONG",{});var ZCt=s(D7e);oPr=r(ZCt,"big_bird"),ZCt.forEach(t),rPr=r(gPe," \u2014 "),RY=n(gPe,"A",{href:!0});var e3t=s(RY);tPr=r(e3t,"FlaxBigBirdForMultipleChoice"),e3t.forEach(t),aPr=r(gPe," (BigBird model)"),gPe.forEach(t),nPr=i(To),nC=n(To,"LI",{});var hPe=s(nC);G7e=n(hPe,"STRONG",{});var o3t=s(G7e);sPr=r(o3t,"distilbert"),o3t.forEach(t),lPr=r(hPe," \u2014 "),BY=n(hPe,"A",{href:!0});var r3t=s(BY);iPr=r(r3t,"FlaxDistilBertForMultipleChoice"),r3t.forEach(t),dPr=r(hPe," (DistilBERT model)"),hPe.forEach(t),cPr=i(To),sC=n(To,"LI",{});var pPe=s(sC);O7e=n(pPe,"STRONG",{});var t3t=s(O7e);fPr=r(t3t,"electra"),t3t.forEach(t),mPr=r(pPe," \u2014 "),PY=n(pPe,"A",{href:!0});var a3t=s(PY);gPr=r(a3t,"FlaxElectraForMultipleChoice"),a3t.forEach(t),hPr=r(pPe," (ELECTRA model)"),pPe.forEach(t),pPr=i(To),lC=n(To,"LI",{});var uPe=s(lC);V7e=n(uPe,"STRONG",{});var n3t=s(V7e);uPr=r(n3t,"roberta"),n3t.forEach(t),_Pr=r(uPe," \u2014 "),IY=n(uPe,"A",{href:!0});var s3t=s(IY);bPr=r(s3t,"FlaxRobertaForMultipleChoice"),s3t.forEach(t),vPr=r(uPe," (RoBERTa model)"),uPe.forEach(t),FPr=i(To),iC=n(To,"LI",{});var _Pe=s(iC);X7e=n(_Pe,"STRONG",{});var l3t=s(X7e);TPr=r(l3t,"roformer"),l3t.forEach(t),MPr=r(_Pe," \u2014 "),qY=n(_Pe,"A",{href:!0});var i3t=s(qY);EPr=r(i3t,"FlaxRoFormerForMultipleChoice"),i3t.forEach(t),CPr=r(_Pe," (RoFormer model)"),_Pe.forEach(t),wPr=i(To),dC=n(To,"LI",{});var bPe=s(dC);z7e=n(bPe,"STRONG",{});var d3t=s(z7e);APr=r(d3t,"xlm-roberta"),d3t.forEach(t),yPr=r(bPe," \u2014 "),NY=n(bPe,"A",{href:!0});var c3t=s(NY);LPr=r(c3t,"FlaxXLMRobertaForMultipleChoice"),c3t.forEach(t),xPr=r(bPe," (XLM-RoBERTa model)"),bPe.forEach(t),To.forEach(t),$Pr=i(ei),T(cC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),Fqe=i(f),Zc=n(f,"H2",{class:!0});var yje=s(Zc);fC=n(yje,"A",{id:!0,class:!0,href:!0});var f3t=s(fC);Q7e=n(f3t,"SPAN",{});var m3t=s(Q7e);T(Px.$$.fragment,m3t),m3t.forEach(t),f3t.forEach(t),kPr=i(yje),W7e=n(yje,"SPAN",{});var g3t=s(W7e);SPr=r(g3t,"FlaxAutoModelForNextSentencePrediction"),g3t.forEach(t),yje.forEach(t),Tqe=i(f),Fr=n(f,"DIV",{class:!0});var oi=s(Fr);T(Ix.$$.fragment,oi),RPr=i(oi),ef=n(oi,"P",{});var jZ=s(ef);BPr=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jY=n(jZ,"A",{href:!0});var h3t=s(jY);PPr=r(h3t,"from_pretrained()"),h3t.forEach(t),IPr=r(jZ," class method or the "),DY=n(jZ,"A",{href:!0});var p3t=s(DY);qPr=r(p3t,"from_config()"),p3t.forEach(t),NPr=r(jZ,` class
method.`),jZ.forEach(t),jPr=i(oi),qx=n(oi,"P",{});var Lje=s(qx);DPr=r(Lje,"This class cannot be instantiated directly using "),H7e=n(Lje,"CODE",{});var u3t=s(H7e);GPr=r(u3t,"__init__()"),u3t.forEach(t),OPr=r(Lje," (throws an error)."),Lje.forEach(t),VPr=i(oi),Ht=n(oi,"DIV",{class:!0});var Iw=s(Ht);T(Nx.$$.fragment,Iw),XPr=i(Iw),U7e=n(Iw,"P",{});var _3t=s(U7e);zPr=r(_3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_3t.forEach(t),QPr=i(Iw),of=n(Iw,"P",{});var DZ=s(of);WPr=r(DZ,`Note:
Loading a model from its configuration file does `),J7e=n(DZ,"STRONG",{});var b3t=s(J7e);HPr=r(b3t,"not"),b3t.forEach(t),UPr=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=n(DZ,"A",{href:!0});var v3t=s(GY);JPr=r(v3t,"from_pretrained()"),v3t.forEach(t),YPr=r(DZ," to load the model weights."),DZ.forEach(t),KPr=i(Iw),T(mC.$$.fragment,Iw),Iw.forEach(t),ZPr=i(oi),Hr=n(oi,"DIV",{class:!0});var ri=s(Hr);T(jx.$$.fragment,ri),eIr=i(ri),Y7e=n(ri,"P",{});var F3t=s(Y7e);oIr=r(F3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),F3t.forEach(t),rIr=i(ri),Mn=n(ri,"P",{});var qw=s(Mn);tIr=r(qw,"The model class to instantiate is selected based on the "),K7e=n(qw,"CODE",{});var T3t=s(K7e);aIr=r(T3t,"model_type"),T3t.forEach(t),nIr=r(qw,` property of the config object (either
passed as an argument or loaded from `),Z7e=n(qw,"CODE",{});var M3t=s(Z7e);sIr=r(M3t,"pretrained_model_name_or_path"),M3t.forEach(t),lIr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eMe=n(qw,"CODE",{});var E3t=s(eMe);iIr=r(E3t,"pretrained_model_name_or_path"),E3t.forEach(t),dIr=r(qw,":"),qw.forEach(t),cIr=i(ri),oMe=n(ri,"UL",{});var C3t=s(oMe);gC=n(C3t,"LI",{});var vPe=s(gC);rMe=n(vPe,"STRONG",{});var w3t=s(rMe);fIr=r(w3t,"bert"),w3t.forEach(t),mIr=r(vPe," \u2014 "),OY=n(vPe,"A",{href:!0});var A3t=s(OY);gIr=r(A3t,"FlaxBertForNextSentencePrediction"),A3t.forEach(t),hIr=r(vPe," (BERT model)"),vPe.forEach(t),C3t.forEach(t),pIr=i(ri),T(hC.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Mqe=i(f),rf=n(f,"H2",{class:!0});var xje=s(rf);pC=n(xje,"A",{id:!0,class:!0,href:!0});var y3t=s(pC);tMe=n(y3t,"SPAN",{});var L3t=s(tMe);T(Dx.$$.fragment,L3t),L3t.forEach(t),y3t.forEach(t),uIr=i(xje),aMe=n(xje,"SPAN",{});var x3t=s(aMe);_Ir=r(x3t,"FlaxAutoModelForImageClassification"),x3t.forEach(t),xje.forEach(t),Eqe=i(f),Tr=n(f,"DIV",{class:!0});var ti=s(Tr);T(Gx.$$.fragment,ti),bIr=i(ti),tf=n(ti,"P",{});var GZ=s(tf);vIr=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),VY=n(GZ,"A",{href:!0});var $3t=s(VY);FIr=r($3t,"from_pretrained()"),$3t.forEach(t),TIr=r(GZ," class method or the "),XY=n(GZ,"A",{href:!0});var k3t=s(XY);MIr=r(k3t,"from_config()"),k3t.forEach(t),EIr=r(GZ,` class
method.`),GZ.forEach(t),CIr=i(ti),Ox=n(ti,"P",{});var $je=s(Ox);wIr=r($je,"This class cannot be instantiated directly using "),nMe=n($je,"CODE",{});var S3t=s(nMe);AIr=r(S3t,"__init__()"),S3t.forEach(t),yIr=r($je," (throws an error)."),$je.forEach(t),LIr=i(ti),Ut=n(ti,"DIV",{class:!0});var Nw=s(Ut);T(Vx.$$.fragment,Nw),xIr=i(Nw),sMe=n(Nw,"P",{});var R3t=s(sMe);$Ir=r(R3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),R3t.forEach(t),kIr=i(Nw),af=n(Nw,"P",{});var OZ=s(af);SIr=r(OZ,`Note:
Loading a model from its configuration file does `),lMe=n(OZ,"STRONG",{});var B3t=s(lMe);RIr=r(B3t,"not"),B3t.forEach(t),BIr=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=n(OZ,"A",{href:!0});var P3t=s(zY);PIr=r(P3t,"from_pretrained()"),P3t.forEach(t),IIr=r(OZ," to load the model weights."),OZ.forEach(t),qIr=i(Nw),T(uC.$$.fragment,Nw),Nw.forEach(t),NIr=i(ti),Ur=n(ti,"DIV",{class:!0});var ai=s(Ur);T(Xx.$$.fragment,ai),jIr=i(ai),iMe=n(ai,"P",{});var I3t=s(iMe);DIr=r(I3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),I3t.forEach(t),GIr=i(ai),En=n(ai,"P",{});var jw=s(En);OIr=r(jw,"The model class to instantiate is selected based on the "),dMe=n(jw,"CODE",{});var q3t=s(dMe);VIr=r(q3t,"model_type"),q3t.forEach(t),XIr=r(jw,` property of the config object (either
passed as an argument or loaded from `),cMe=n(jw,"CODE",{});var N3t=s(cMe);zIr=r(N3t,"pretrained_model_name_or_path"),N3t.forEach(t),QIr=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fMe=n(jw,"CODE",{});var j3t=s(fMe);WIr=r(j3t,"pretrained_model_name_or_path"),j3t.forEach(t),HIr=r(jw,":"),jw.forEach(t),UIr=i(ai),zx=n(ai,"UL",{});var kje=s(zx);_C=n(kje,"LI",{});var FPe=s(_C);mMe=n(FPe,"STRONG",{});var D3t=s(mMe);JIr=r(D3t,"beit"),D3t.forEach(t),YIr=r(FPe," \u2014 "),QY=n(FPe,"A",{href:!0});var G3t=s(QY);KIr=r(G3t,"FlaxBeitForImageClassification"),G3t.forEach(t),ZIr=r(FPe," (BEiT model)"),FPe.forEach(t),eqr=i(kje),bC=n(kje,"LI",{});var TPe=s(bC);gMe=n(TPe,"STRONG",{});var O3t=s(gMe);oqr=r(O3t,"vit"),O3t.forEach(t),rqr=r(TPe," \u2014 "),WY=n(TPe,"A",{href:!0});var V3t=s(WY);tqr=r(V3t,"FlaxViTForImageClassification"),V3t.forEach(t),aqr=r(TPe," (ViT model)"),TPe.forEach(t),kje.forEach(t),nqr=i(ai),T(vC.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Cqe=i(f),nf=n(f,"H2",{class:!0});var Sje=s(nf);FC=n(Sje,"A",{id:!0,class:!0,href:!0});var X3t=s(FC);hMe=n(X3t,"SPAN",{});var z3t=s(hMe);T(Qx.$$.fragment,z3t),z3t.forEach(t),X3t.forEach(t),sqr=i(Sje),pMe=n(Sje,"SPAN",{});var Q3t=s(pMe);lqr=r(Q3t,"FlaxAutoModelForVision2Seq"),Q3t.forEach(t),Sje.forEach(t),wqe=i(f),Mr=n(f,"DIV",{class:!0});var ni=s(Mr);T(Wx.$$.fragment,ni),iqr=i(ni),sf=n(ni,"P",{});var VZ=s(sf);dqr=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HY=n(VZ,"A",{href:!0});var W3t=s(HY);cqr=r(W3t,"from_pretrained()"),W3t.forEach(t),fqr=r(VZ," class method or the "),UY=n(VZ,"A",{href:!0});var H3t=s(UY);mqr=r(H3t,"from_config()"),H3t.forEach(t),gqr=r(VZ,` class
method.`),VZ.forEach(t),hqr=i(ni),Hx=n(ni,"P",{});var Rje=s(Hx);pqr=r(Rje,"This class cannot be instantiated directly using "),uMe=n(Rje,"CODE",{});var U3t=s(uMe);uqr=r(U3t,"__init__()"),U3t.forEach(t),_qr=r(Rje," (throws an error)."),Rje.forEach(t),bqr=i(ni),Jt=n(ni,"DIV",{class:!0});var Dw=s(Jt);T(Ux.$$.fragment,Dw),vqr=i(Dw),_Me=n(Dw,"P",{});var J3t=s(_Me);Fqr=r(J3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),J3t.forEach(t),Tqr=i(Dw),lf=n(Dw,"P",{});var XZ=s(lf);Mqr=r(XZ,`Note:
Loading a model from its configuration file does `),bMe=n(XZ,"STRONG",{});var Y3t=s(bMe);Eqr=r(Y3t,"not"),Y3t.forEach(t),Cqr=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=n(XZ,"A",{href:!0});var K3t=s(JY);wqr=r(K3t,"from_pretrained()"),K3t.forEach(t),Aqr=r(XZ," to load the model weights."),XZ.forEach(t),yqr=i(Dw),T(TC.$$.fragment,Dw),Dw.forEach(t),Lqr=i(ni),Jr=n(ni,"DIV",{class:!0});var si=s(Jr);T(Jx.$$.fragment,si),xqr=i(si),vMe=n(si,"P",{});var Z3t=s(vMe);$qr=r(Z3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Z3t.forEach(t),kqr=i(si),Cn=n(si,"P",{});var Gw=s(Cn);Sqr=r(Gw,"The model class to instantiate is selected based on the "),FMe=n(Gw,"CODE",{});var ewt=s(FMe);Rqr=r(ewt,"model_type"),ewt.forEach(t),Bqr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),TMe=n(Gw,"CODE",{});var owt=s(TMe);Pqr=r(owt,"pretrained_model_name_or_path"),owt.forEach(t),Iqr=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=n(Gw,"CODE",{});var rwt=s(MMe);qqr=r(rwt,"pretrained_model_name_or_path"),rwt.forEach(t),Nqr=r(Gw,":"),Gw.forEach(t),jqr=i(si),EMe=n(si,"UL",{});var twt=s(EMe);MC=n(twt,"LI",{});var MPe=s(MC);CMe=n(MPe,"STRONG",{});var awt=s(CMe);Dqr=r(awt,"vision-encoder-decoder"),awt.forEach(t),Gqr=r(MPe," \u2014 "),YY=n(MPe,"A",{href:!0});var nwt=s(YY);Oqr=r(nwt,"FlaxVisionEncoderDecoderModel"),nwt.forEach(t),Vqr=r(MPe," (Vision Encoder decoder model)"),MPe.forEach(t),twt.forEach(t),Xqr=i(si),T(EC.$$.fragment,si),si.forEach(t),ni.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(d6t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoTokenizer"),c(gi,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertModel"),c(uf,"id","extending-the-auto-classes"),c(uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uf,"href","#extending-the-auto-classes"),c(hi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(pi,"class","relative group"),c(p$,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(u$,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig"),c(_$,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig"),c(b$,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig"),c(v$,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig"),c(F$,"href","/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(T$,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig"),c(M$,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(E$,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(C$,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(w$,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig"),c(A$,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig"),c(y$,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPConfig"),c(L$,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig"),c(x$,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig"),c($$,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig"),c(k$,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(S$,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(R$,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(B$,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig"),c(P$,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(I$,"href","/docs/transformers/pr_17088/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(q$,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTConfig"),c(N$,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrConfig"),c(j$,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig"),c(D$,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRConfig"),c(G$,"href","/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTConfig"),c(O$,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig"),c(V$,"href","/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(X$,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig"),c(z$,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig"),c(Q$,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTConfig"),c(W$,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig"),c(H$,"href","/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNConfig"),c(U$,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config"),c(J$,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Y$,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig"),c(K$,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig"),c(Z$,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig"),c(ek,"href","/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(ok,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(rk,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(tk,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig"),c(ak,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig"),c(nk,"href","/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeConfig"),c(sk,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig"),c(lk,"href","/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Config"),c(ik,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig"),c(dk,"href","/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(ck,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig"),c(fk,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(mk,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(gk,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig"),c(hk,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config"),c(pk,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(uk,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(_k,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig"),c(bk,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig"),c(vk,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Fk,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig"),c(Tk,"href","/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Mk,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Ek,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Ck,"href","/docs/transformers/pr_17088/en/model_doc/rag#transformers.RagConfig"),c(wk,"href","/docs/transformers/pr_17088/en/model_doc/realm#transformers.RealmConfig"),c(Ak,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig"),c(yk,"href","/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetConfig"),c(Lk,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig"),c(xk,"href","/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetConfig"),c($k,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertConfig"),c(kk,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig"),c(Sk,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig"),c(Rk,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerConfig"),c(Bk,"href","/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWConfig"),c(Pk,"href","/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDConfig"),c(Ik,"href","/docs/transformers/pr_17088/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(qk,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Nk,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(jk,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterConfig"),c(Dk,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Gk,"href","/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinConfig"),c(Ok,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config"),c(Vk,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig"),c(Xk,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig"),c(zk,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Qk,"href","/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRConfig"),c(Wk,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Hk,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Uk,"href","/docs/transformers/pr_17088/en/model_doc/van#transformers.VanConfig"),c(Jk,"href","/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltConfig"),c(Yk,"href","/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Kk,"href","/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(Zk,"href","/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(eS,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig"),c(oS,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(rS,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(tS,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig"),c(aS,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig"),c(nS,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig"),c(sS,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(lS,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(iS,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(dS,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig"),c(cS,"href","/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosConfig"),c(fS,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_g,"id","transformers.AutoTokenizer"),c(_g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_g,"href","#transformers.AutoTokenizer"),c(_i,"class","relative group"),c(mS,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(gS,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizer"),c(hS,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(pS,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartTokenizer"),c(uS,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartTokenizerFast"),c(_S,"href","/docs/transformers/pr_17088/en/model_doc/barthez#transformers.BarthezTokenizer"),c(bS,"href","/docs/transformers/pr_17088/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(vS,"href","/docs/transformers/pr_17088/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(FS,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizer"),c(TS,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizerFast"),c(MS,"href","/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(ES,"href","/docs/transformers/pr_17088/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(CS,"href","/docs/transformers/pr_17088/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(wS,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(AS,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(yS,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(LS,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(xS,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c($S,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(kS,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(SS,"href","/docs/transformers/pr_17088/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(RS,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertTokenizer"),c(BS,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(PS,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineTokenizer"),c(IS,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPTokenizer"),c(qS,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(NS,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(jS,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(DS,"href","/docs/transformers/pr_17088/en/model_doc/cpm#transformers.CpmTokenizer"),c(GS,"href","/docs/transformers/pr_17088/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(OS,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(VS,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizer"),c(XS,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(zS,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaTokenizer"),c(QS,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(WS,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(HS,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(US,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(JS,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(YS,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(KS,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraTokenizer"),c(eR,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(oR,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(rR,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetTokenizer"),c(tR,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(aR,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(nR,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelTokenizer"),c(sR,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(lR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(dR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(cR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(fR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(mR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(gR,"href","/docs/transformers/pr_17088/en/model_doc/herbert#transformers.HerbertTokenizer"),c(hR,"href","/docs/transformers/pr_17088/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(pR,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(uR,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_R,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bR,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(vR,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(FR,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(TR,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(MR,"href","/docs/transformers/pr_17088/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(ER,"href","/docs/transformers/pr_17088/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(CR,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDTokenizer"),c(wR,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDTokenizerFast"),c(AR,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerTokenizer"),c(yR,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(LR,"href","/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeTokenizer"),c(xR,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertTokenizer"),c($R,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(kR,"href","/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(SR,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianTokenizer"),c(RR,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartTokenizer"),c(BR,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(PR,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(IR,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(qR,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizer"),c(NR,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizerFast"),c(jR,"href","/docs/transformers/pr_17088/en/model_doc/mluke#transformers.MLukeTokenizer"),c(DR,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(GR,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(OR,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(VR,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(XR,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.T5Tokenizer"),c(zR,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.T5TokenizerFast"),c(QR,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizer"),c(WR,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(HR,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(UR,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(JR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YR,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(KR,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(eB,"href","/docs/transformers/pr_17088/en/model_doc/phobert#transformers.PhobertTokenizer"),c(oB,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartTokenizer"),c(rB,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(tB,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizer"),c(aB,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizerFast"),c(nB,"href","/docs/transformers/pr_17088/en/model_doc/rag#transformers.RagTokenizer"),c(sB,"href","/docs/transformers/pr_17088/en/model_doc/realm#transformers.RealmTokenizer"),c(lB,"href","/docs/transformers/pr_17088/en/model_doc/realm#transformers.RealmTokenizerFast"),c(iB,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerTokenizer"),c(dB,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(cB,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertTokenizer"),c(fB,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(mB,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(gB,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(hB,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pB,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uB,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(_B,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(bB,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(vB,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(FB,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterTokenizer"),c(TB,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(MB,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(EB,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(CB,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.T5Tokenizer"),c(wB,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.T5TokenizerFast"),c(AB,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasTokenizer"),c(yB,"href","/docs/transformers/pr_17088/en/model_doc/tapex#transformers.TapexTokenizer"),c(LB,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(xB,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizer"),c($B,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizerFast"),c(kB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(SB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(RB,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMTokenizer"),c(BB,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(PB,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMTokenizer"),c(IB,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(qB,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(NB,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(jB,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DB,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GB,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(OB,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(VB,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizer"),c(XB,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jg,"id","transformers.AutoFeatureExtractor"),c(Jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jg,"href","#transformers.AutoFeatureExtractor"),c(bi,"class","relative group"),c(zB,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(QB,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(JB,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(eP,"href","/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(oP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rP,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(tP,"href","/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(aP,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(nP,"href","/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(sP,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lP,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iP,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(dP,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(cP,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(fP,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mP,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(gP,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(hP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(pP,"href","/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"id","transformers.AutoProcessor"),c(Ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ch,"href","#transformers.AutoProcessor"),c(vi,"class","relative group"),c(uP,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(_P,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPProcessor"),c(bP,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(vP,"href","/docs/transformers/pr_17088/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(FP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(TP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(MP,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(EP,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(CP,"href","/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRProcessor"),c(wP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yP,"href","/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltProcessor"),c(LP,"href","/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(xP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($P,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oh,"id","transformers.AutoModel"),c(Oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Oh,"href","#transformers.AutoModel"),c(Ti,"class","relative group"),c(kP,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SP,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RP,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BP,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertModel"),c(PP,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartModel"),c(IP,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitModel"),c(qP,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertModel"),c(NP,"href","/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(jP,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdModel"),c(DP,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(GP,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(OP,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(VP,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertModel"),c(XP,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineModel"),c(zP,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPModel"),c(QP,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertModel"),c(WP,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextModel"),c(HP,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLModel"),c(UP,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(JP,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(YP,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(KP,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaModel"),c(ZP,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(eI,"href","/docs/transformers/pr_17088/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(oI,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTModel"),c(rI,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrModel"),c(tI,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertModel"),c(aI,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(nI,"href","/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTModel"),c(sI,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraModel"),c(lI,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertModel"),c(iI,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetModel"),c(dI,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTModel"),c(cI,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelModel"),c(fI,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelBaseModel"),c(mI,"href","/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNModel"),c(gI,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Model"),c(hI,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(pI,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJModel"),c(uI,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertModel"),c(_I,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertModel"),c(bI,"href","/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(vI,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(FI,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(TI,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDModel"),c(MI,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerModel"),c(EI,"href","/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeModel"),c(CI,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertModel"),c(wI,"href","/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Model"),c(AI,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianModel"),c(yI,"href","/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerModel"),c(LI,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartModel"),c(xI,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c($I,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertModel"),c(kI,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetModel"),c(SI,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Model"),c(RI,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerModel"),c(BI,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(PI,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTModel"),c(II,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusModel"),c(qI,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverModel"),c(NI,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartModel"),c(jI,"href","/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerModel"),c(DI,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(GI,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertModel"),c(OI,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerModel"),c(VI,"href","/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetModel"),c(XI,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertModel"),c(zI,"href","/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetModel"),c(QI,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertModel"),c(WI,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaModel"),c(HI,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerModel"),c(UI,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerModel"),c(JI,"href","/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWModel"),c(YI,"href","/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDModel"),c(KI,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(ZI,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterModel"),c(eq,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(oq,"href","/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinModel"),c(rq,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Model"),c(tq,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasModel"),c(aq,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(nq,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechModel"),c(sq,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(lq,"href","/docs/transformers/pr_17088/en/model_doc/van#transformers.VanModel"),c(iq,"href","/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltModel"),c(dq,"href","/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(cq,"href","/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertModel"),c(fq,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTModel"),c(mq,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(gq,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(hq,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMModel"),c(pq,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMModel"),c(uq,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMModel"),c(_q,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(bq,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(vq,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Fq,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetModel"),c(Tq,"href","/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosModel"),c(Mq,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ru,"id","transformers.AutoModelForPreTraining"),c(Ru,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ru,"href","#transformers.AutoModelForPreTraining"),c(Ci,"class","relative group"),c(Eq,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cq,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wq,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aq,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForPreTraining"),c(yq,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Lq,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForPreTraining"),c(xq,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c($q,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(kq,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Sq,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Rq,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Bq,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Pq,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Iq,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForPreTraining"),c(qq,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Nq,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForPreTraining"),c(jq,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Dq,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Gq,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Oq,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Vq,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Xq,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(zq,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Qq,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Wq,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Hq,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Uq,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Jq,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertModel"),c(Yq,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Kq,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Zq,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(eN,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(oN,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(rN,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(tN,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(aN,"href","/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(nN,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(sN,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(lN,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(iN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(dN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(cN,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M_,"id","transformers.AutoModelForCausalLM"),c(M_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M_,"href","#transformers.AutoModelForCausalLM"),c(yi,"class","relative group"),c(fN,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mN,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gN,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hN,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForCausalLM"),c(pN,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertLMHeadModel"),c(uN,"href","/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(_N,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(bN,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(vN,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(FN,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(TN,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(MN,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(EN,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(CN,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForCausalLM"),c(wN,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(AN,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(yN,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(LN,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianForCausalLM"),c(xN,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForCausalLM"),c($N,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(kN,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(SN,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTForCausalLM"),c(RN,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(BN,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(PN,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(IN,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(qN,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(NN,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(jN,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(DN,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(GN,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(ON,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(VN,"href","/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(XN,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(zN,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(QN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(WN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(HN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(UN,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i1,"id","transformers.AutoModelForMaskedLM"),c(i1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i1,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(JN,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YN,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KN,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZN,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(ej,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(oj,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForMaskedLM"),c(rj,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(tj,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(aj,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(nj,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(sj,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(lj,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(ij,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(dj,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(cj,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(fj,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(mj,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(gj,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(hj,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(pj,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(uj,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(_j,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(bj,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(vj,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Mj,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(wj,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(yj,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(xj,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($j,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(kj,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W1,"id","transformers.AutoModelForSeq2SeqLM"),c(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ri,"class","relative group"),c(Rj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ij,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(qj,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Nj,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(jj,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Dj,"href","/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Gj,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Oj,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Vj,"href","/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Xj,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianMTModel"),c(zj,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Qj,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Wj,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Uj,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Jj,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Yj,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Kj,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h8,"id","transformers.AutoModelForSequenceClassification"),c(h8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h8,"href","#transformers.AutoModelForSequenceClassification"),c(Ii,"class","relative group"),c(Zj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eD,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oD,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rD,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(tD,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForSequenceClassification"),c(aD,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForSequenceClassification"),c(nD,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(sD,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(lD,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(iD,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(dD,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(cD,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(fD,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(mD,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(gD,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(hD,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(pD,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(uD,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(bD,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c($D,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fb,"id","transformers.AutoModelForMultipleChoice"),c(fb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fb,"href","#transformers.AutoModelForMultipleChoice"),c(ji,"class","relative group"),c(UD,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JD,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YD,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KD,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(ZD,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForMultipleChoice"),c(eG,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(oG,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(rG,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(tG,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(aG,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(nG,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(sG,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(lG,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(iG,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(dG,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(cG,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(fG,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(mG,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(gG,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(hG,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(pG,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(uG,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(_G,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(bG,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(vG,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(FG,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(TG,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(MG,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xb,"id","transformers.AutoModelForNextSentencePrediction"),c(Xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Oi,"class","relative group"),c(yG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($G,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(kG,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(SG,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(RG,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(BG,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zb,"id","transformers.AutoModelForTokenClassification"),c(Zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zb,"href","#transformers.AutoModelForTokenClassification"),c(zi,"class","relative group"),c(PG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NG,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(jG,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForTokenClassification"),c(DG,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(GG,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(OG,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForTokenClassification"),c(VG,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(XG,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(zG,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(QG,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(WG,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(HG,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(UG,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(JG,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(YG,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(KG,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(ZG,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(eO,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(oO,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(rO,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(tO,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(aO,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(nO,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(sO,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(lO,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(iO,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(dO,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(cO,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(fO,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(mO,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(gO,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(hO,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(pO,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(uO,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I2,"id","transformers.AutoModelForQuestionAnswering"),c(I2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I2,"href","#transformers.AutoModelForQuestionAnswering"),c(Hi,"class","relative group"),c(_O,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bO,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vO,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FO,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c($O,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(BO,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(oV,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(aV,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wv,"id","transformers.AutoModelForTableQuestionAnswering"),c(wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Yi,"class","relative group"),c(nV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iV,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($v,"id","transformers.AutoModelForImageClassification"),c($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($v,"href","#transformers.AutoModelForImageClassification"),c(ed,"class","relative group"),c(dV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mV,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitForImageClassification"),c(gV,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(hV,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(pV,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForImageClassification"),c(uV,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(_V,"href","/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(bV,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(vV,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(FV,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(TV,"href","/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(MV,"href","/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(EV,"href","/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(CV,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(wV,"href","/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinForImageClassification"),c(AV,"href","/docs/transformers/pr_17088/en/model_doc/van#transformers.VanForImageClassification"),c(yV,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForVision2Seq"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForVision2Seq"),c(td,"class","relative group"),c(LV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($V,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kV,"href","/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jv,"id","transformers.AutoModelForAudioClassification"),c(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jv,"href","#transformers.AutoModelForAudioClassification"),c(sd,"class","relative group"),c(SV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PV,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(IV,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(qV,"href","/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(NV,"href","/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(jV,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(DV,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iF,"id","transformers.AutoModelForAudioFrameClassification"),c(iF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iF,"href","#transformers.AutoModelForAudioFrameClassification"),c(dd,"class","relative group"),c(VV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QV,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(WV,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(HV,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(UV,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uF,"id","transformers.AutoModelForCTC"),c(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uF,"href","#transformers.AutoModelForCTC"),c(md,"class","relative group"),c(JV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZV,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(eX,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertForCTC"),c(oX,"href","/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWForCTC"),c(rX,"href","/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDForCTC"),c(tX,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(aX,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(nX,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(sX,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(pd,"class","relative group"),c(lX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cX,"href","/docs/transformers/pr_17088/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(fX,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForAudioXVector"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForAudioXVector"),c(bd,"class","relative group"),c(mX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pX,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(uX,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(_X,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(bX,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OF,"id","transformers.AutoModelForMaskedImageModeling"),c(OF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Td,"class","relative group"),c(vX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MX,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(EX,"href","/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(CX,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForObjectDetection"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForObjectDetection"),c(wd,"class","relative group"),c(wX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LX,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrForObjectDetection"),c(xX,"href","/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o0,"id","transformers.AutoModelForImageSegmentation"),c(o0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o0,"href","#transformers.AutoModelForImageSegmentation"),c(Ld,"class","relative group"),c($X,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s0,"id","transformers.AutoModelForSemanticSegmentation"),c(s0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s0,"href","#transformers.AutoModelForSemanticSegmentation"),c(kd,"class","relative group"),c(BX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qX,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(NX,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(jX,"href","/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(DX,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h0,"id","transformers.AutoModelForInstanceSegmentation"),c(h0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h0,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(GX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XX,"href","/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v0,"id","transformers.TFAutoModel"),c(v0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v0,"href","#transformers.TFAutoModel"),c(qd,"class","relative group"),c(zX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HX,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertModel"),c(UX,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartModel"),c(JX,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertModel"),c(YX,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(KX,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(ZX,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertModel"),c(ez,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.TFCLIPModel"),c(oz,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertModel"),c(rz,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.TFConvNextModel"),c(tz,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLModel"),c(az,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(nz,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaModel"),c(sz,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(lz,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(iz,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(dz,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraModel"),c(cz,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(fz,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelModel"),c(mz,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(gz,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2Model"),c(hz,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJModel"),c(pz,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.TFHubertModel"),c(uz,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(_z,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.TFLEDModel"),c(bz,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerModel"),c(vz,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Fz,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.TFMarianModel"),c(Tz,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.TFMBartModel"),c(Mz,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Ez,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Cz,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.TFMT5Model"),c(wz,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Az,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.TFPegasusModel"),c(yz,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertModel"),c(Lz,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaModel"),c(xz,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerModel"),c($z,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(kz,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5Model"),c(Sz,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasModel"),c(Rz,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Bz,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.TFViTModel"),c(Pz,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Iz,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(qz,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMModel"),c(Nz,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(jz,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mT,"id","transformers.TFAutoModelForPreTraining"),c(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mT,"href","#transformers.TFAutoModelForPreTraining"),c(Dd,"class","relative group"),c(Dz,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gz,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oz,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vz,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Xz,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(zz,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Qz,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Wz,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Hz,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Uz,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Jz,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Yz,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Kz,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Zz,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(eQ,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(oQ,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(rQ,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(tQ,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(aQ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(nQ,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(sQ,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(lQ,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(iQ,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(dQ,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(cQ,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(fQ,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.TFAutoModelForCausalLM"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.TFAutoModelForCausalLM"),c(Vd,"class","relative group"),c(mQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pQ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(uQ,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(_Q,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(bQ,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(vQ,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(FQ,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(TQ,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(MQ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(EQ,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(CQ,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(wQ,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(AQ,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.TFAutoModelForImageClassification"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c(yQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Q,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(kQ,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(SQ,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n7,"id","transformers.TFAutoModelForMaskedLM"),c(n7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n7,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(RQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IQ,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(qQ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(jQ,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(DQ,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(GQ,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(VQ,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(zQ,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(eW,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oW,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(L7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(rW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nW,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(sW,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(lW,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(iW,"href","/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(dW,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(cW,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.TFMarianMTModel"),c(fW,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(mW,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(gW,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(hW,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G7,"id","transformers.TFAutoModelForSequenceClassification"),c(G7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G7,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(pW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_W,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(vW,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(FW,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(TW,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(MW,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(EW,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(CW,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(wW,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(AW,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(yW,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(LW,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(xW,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c($W,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(kW,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(qW,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(DW,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(GW,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(OW,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(VW,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uM,"id","transformers.TFAutoModelForMultipleChoice"),c(uM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uM,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(XW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WW,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(HW,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(UW,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(JW,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(YW,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(KW,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(eH,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(oH,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(rH,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(tH,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(aH,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(nH,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(sH,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(lH,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(iH,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(dH,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(cH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(hH,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(fc,"class","relative group"),c(pH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_H,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bH,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zM,"id","transformers.TFAutoModelForTokenClassification"),c(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zM,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(vH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MH,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(EH,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(CH,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(wH,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(AH,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(yH,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(LH,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(xH,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c($H,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(kH,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(SH,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(RH,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(BH,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(PH,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(IH,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(qH,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(NH,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(jH,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(DH,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(GH,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h4,"id","transformers.TFAutoModelForQuestionAnswering"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(OH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(QH,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(WH,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(HH,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(UH,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(JH,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(YH,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(KH,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(ZH,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(eU,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(oU,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(rU,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(tU,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(aU,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(nU,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(sU,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(lU,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(iU,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(dU,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(cU,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q4,"id","transformers.TFAutoModelForVision2Seq"),c(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q4,"href","#transformers.TFAutoModelForVision2Seq"),c(Fc,"class","relative group"),c(fU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hU,"href","/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(pU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_U,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bU,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z4,"id","transformers.FlaxAutoModel"),c(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z4,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(vU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MU,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertModel"),c(EU,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartModel"),c(CU,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.FlaxBeitModel"),c(wU,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertModel"),c(AU,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(yU,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(LU,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(xU,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.FlaxCLIPModel"),c($U,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(kU,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraModel"),c(SU,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(RU,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(BU,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(PU,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.FlaxMarianModel"),c(IU,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartModel"),c(qU,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5Model"),c(NU,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(jU,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(DU,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(GU,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5Model"),c(OU,"href","/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(VU,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.FlaxViTModel"),c(XU,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(zU,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(QU,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vE,"id","transformers.FlaxAutoModelForCausalLM"),c(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vE,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(WU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JU,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(YU,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(KU,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(ZU,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(eJ,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(oJ,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(rJ,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(tJ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(aJ,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kE,"id","transformers.FlaxAutoModelForPreTraining"),c(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(nJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iJ,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(dJ,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(cJ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(fJ,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(mJ,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(gJ,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(hJ,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(pJ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(uJ,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(_J,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(bJ,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(vJ,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QE,"id","transformers.FlaxAutoModelForMaskedLM"),c(QE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(FJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EJ,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(CJ,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(wJ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(AJ,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(yJ,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(LJ,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(xJ,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c($J,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(kJ,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(SJ,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(RJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(qJ,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(NJ,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(jJ,"href","/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(DJ,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(GJ,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(OJ,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(VJ,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(XJ,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(_5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(UJ,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(JJ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(YJ,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(KJ,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(ZJ,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(eY,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(oY,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(rY,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(tY,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(aY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lY,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(iY,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(dY,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(cY,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(fY,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(mY,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(gY,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(hY,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(pY,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(uY,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.FlaxAutoModelForTokenClassification"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(_Y,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FY,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(TY,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(MY,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(EY,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(CY,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(wY,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(AY,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(yY,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(LY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Y,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kY,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(SY,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(RY,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(BY,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(PY,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(IY,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(qY,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(NY,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(jY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OY,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.FlaxAutoModelForImageClassification"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.FlaxAutoModelForImageClassification"),c(rf,"class","relative group"),c(VY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QY,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(WY,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FC,"id","transformers.FlaxAutoModelForVision2Seq"),c(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nf,"class","relative group"),c(HY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YY,"href","/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,li),b(f,mf,_),b(f,et,_),e(et,ii),e(et,di),e(di,Ow),e(et,gf),b(f,qe,_),b(f,Xe,_),e(Xe,ci),e(Xe,An),e(An,Vw),e(Xe,yn),e(Xe,Ln),e(Ln,Xw),e(Xe,fi),e(Xe,xn),e(xn,zw),e(Xe,mi),b(f,hf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,d$),e(Ae,gi),e(gi,c$),e(Ae,f$),b(f,Eo,_),b(f,Ea,_),e(Ea,m$),e(Ea,pf),e(pf,g$),e(Ea,Bje),b(f,EPe,_),b(f,hi,_),e(hi,uf),e(uf,zZ),M(Qw,zZ,null),e(hi,Pje),e(hi,QZ),e(QZ,Ije),b(f,CPe,_),b(f,$n,_),e($n,qje),e($n,WZ),e(WZ,Nje),e($n,jje),e($n,HZ),e(HZ,Dje),e($n,Gje),b(f,wPe,_),M(Ww,f,_),b(f,APe,_),b(f,h$,_),e(h$,Oje),b(f,yPe,_),M(_f,f,_),b(f,LPe,_),b(f,pi,_),e(pi,bf),e(bf,UZ),M(Hw,UZ,null),e(pi,Vje),e(pi,JZ),e(JZ,Xje),b(f,xPe,_),b(f,Co,_),M(Uw,Co,null),e(Co,zje),e(Co,Jw),e(Jw,Qje),e(Jw,p$),e(p$,Wje),e(Jw,Hje),e(Co,Uje),e(Co,Yw),e(Yw,Jje),e(Yw,YZ),e(YZ,Yje),e(Yw,Kje),e(Co,Zje),e(Co,Er),M(Kw,Er,null),e(Er,eDe),e(Er,KZ),e(KZ,oDe),e(Er,rDe),e(Er,ui),e(ui,tDe),e(ui,ZZ),e(ZZ,aDe),e(ui,nDe),e(ui,eee),e(eee,sDe),e(ui,lDe),e(Er,iDe),e(Er,y),e(y,vf),e(vf,oee),e(oee,dDe),e(vf,cDe),e(vf,u$),e(u$,fDe),e(vf,mDe),e(y,gDe),e(y,Ff),e(Ff,ree),e(ree,hDe),e(Ff,pDe),e(Ff,_$),e(_$,uDe),e(Ff,_De),e(y,bDe),e(y,Tf),e(Tf,tee),e(tee,vDe),e(Tf,FDe),e(Tf,b$),e(b$,TDe),e(Tf,MDe),e(y,EDe),e(y,Mf),e(Mf,aee),e(aee,CDe),e(Mf,wDe),e(Mf,v$),e(v$,ADe),e(Mf,yDe),e(y,LDe),e(y,Ef),e(Ef,nee),e(nee,xDe),e(Ef,$De),e(Ef,F$),e(F$,kDe),e(Ef,SDe),e(y,RDe),e(y,Cf),e(Cf,see),e(see,BDe),e(Cf,PDe),e(Cf,T$),e(T$,IDe),e(Cf,qDe),e(y,NDe),e(y,wf),e(wf,lee),e(lee,jDe),e(wf,DDe),e(wf,M$),e(M$,GDe),e(wf,ODe),e(y,VDe),e(y,Af),e(Af,iee),e(iee,XDe),e(Af,zDe),e(Af,E$),e(E$,QDe),e(Af,WDe),e(y,HDe),e(y,yf),e(yf,dee),e(dee,UDe),e(yf,JDe),e(yf,C$),e(C$,YDe),e(yf,KDe),e(y,ZDe),e(y,Lf),e(Lf,cee),e(cee,eGe),e(Lf,oGe),e(Lf,w$),e(w$,rGe),e(Lf,tGe),e(y,aGe),e(y,xf),e(xf,fee),e(fee,nGe),e(xf,sGe),e(xf,A$),e(A$,lGe),e(xf,iGe),e(y,dGe),e(y,$f),e($f,mee),e(mee,cGe),e($f,fGe),e($f,y$),e(y$,mGe),e($f,gGe),e(y,hGe),e(y,kf),e(kf,gee),e(gee,pGe),e(kf,uGe),e(kf,L$),e(L$,_Ge),e(kf,bGe),e(y,vGe),e(y,Sf),e(Sf,hee),e(hee,FGe),e(Sf,TGe),e(Sf,x$),e(x$,MGe),e(Sf,EGe),e(y,CGe),e(y,Rf),e(Rf,pee),e(pee,wGe),e(Rf,AGe),e(Rf,$$),e($$,yGe),e(Rf,LGe),e(y,xGe),e(y,Bf),e(Bf,uee),e(uee,$Ge),e(Bf,kGe),e(Bf,k$),e(k$,SGe),e(Bf,RGe),e(y,BGe),e(y,Pf),e(Pf,_ee),e(_ee,PGe),e(Pf,IGe),e(Pf,S$),e(S$,qGe),e(Pf,NGe),e(y,jGe),e(y,If),e(If,bee),e(bee,DGe),e(If,GGe),e(If,R$),e(R$,OGe),e(If,VGe),e(y,XGe),e(y,qf),e(qf,vee),e(vee,zGe),e(qf,QGe),e(qf,B$),e(B$,WGe),e(qf,HGe),e(y,UGe),e(y,Nf),e(Nf,Fee),e(Fee,JGe),e(Nf,YGe),e(Nf,P$),e(P$,KGe),e(Nf,ZGe),e(y,eOe),e(y,jf),e(jf,Tee),e(Tee,oOe),e(jf,rOe),e(jf,I$),e(I$,tOe),e(jf,aOe),e(y,nOe),e(y,Df),e(Df,Mee),e(Mee,sOe),e(Df,lOe),e(Df,q$),e(q$,iOe),e(Df,dOe),e(y,cOe),e(y,Gf),e(Gf,Eee),e(Eee,fOe),e(Gf,mOe),e(Gf,N$),e(N$,gOe),e(Gf,hOe),e(y,pOe),e(y,Of),e(Of,Cee),e(Cee,uOe),e(Of,_Oe),e(Of,j$),e(j$,bOe),e(Of,vOe),e(y,FOe),e(y,Vf),e(Vf,wee),e(wee,TOe),e(Vf,MOe),e(Vf,D$),e(D$,EOe),e(Vf,COe),e(y,wOe),e(y,Xf),e(Xf,Aee),e(Aee,AOe),e(Xf,yOe),e(Xf,G$),e(G$,LOe),e(Xf,xOe),e(y,$Oe),e(y,zf),e(zf,yee),e(yee,kOe),e(zf,SOe),e(zf,O$),e(O$,ROe),e(zf,BOe),e(y,POe),e(y,Qf),e(Qf,Lee),e(Lee,IOe),e(Qf,qOe),e(Qf,V$),e(V$,NOe),e(Qf,jOe),e(y,DOe),e(y,Wf),e(Wf,xee),e(xee,GOe),e(Wf,OOe),e(Wf,X$),e(X$,VOe),e(Wf,XOe),e(y,zOe),e(y,Hf),e(Hf,$ee),e($ee,QOe),e(Hf,WOe),e(Hf,z$),e(z$,HOe),e(Hf,UOe),e(y,JOe),e(y,Uf),e(Uf,kee),e(kee,YOe),e(Uf,KOe),e(Uf,Q$),e(Q$,ZOe),e(Uf,eVe),e(y,oVe),e(y,Jf),e(Jf,See),e(See,rVe),e(Jf,tVe),e(Jf,W$),e(W$,aVe),e(Jf,nVe),e(y,sVe),e(y,Yf),e(Yf,Ree),e(Ree,lVe),e(Yf,iVe),e(Yf,H$),e(H$,dVe),e(Yf,cVe),e(y,fVe),e(y,Kf),e(Kf,Bee),e(Bee,mVe),e(Kf,gVe),e(Kf,U$),e(U$,hVe),e(Kf,pVe),e(y,uVe),e(y,Zf),e(Zf,Pee),e(Pee,_Ve),e(Zf,bVe),e(Zf,J$),e(J$,vVe),e(Zf,FVe),e(y,TVe),e(y,em),e(em,Iee),e(Iee,MVe),e(em,EVe),e(em,Y$),e(Y$,CVe),e(em,wVe),e(y,AVe),e(y,om),e(om,qee),e(qee,yVe),e(om,LVe),e(om,K$),e(K$,xVe),e(om,$Ve),e(y,kVe),e(y,rm),e(rm,Nee),e(Nee,SVe),e(rm,RVe),e(rm,Z$),e(Z$,BVe),e(rm,PVe),e(y,IVe),e(y,tm),e(tm,jee),e(jee,qVe),e(tm,NVe),e(tm,ek),e(ek,jVe),e(tm,DVe),e(y,GVe),e(y,am),e(am,Dee),e(Dee,OVe),e(am,VVe),e(am,ok),e(ok,XVe),e(am,zVe),e(y,QVe),e(y,nm),e(nm,Gee),e(Gee,WVe),e(nm,HVe),e(nm,rk),e(rk,UVe),e(nm,JVe),e(y,YVe),e(y,sm),e(sm,Oee),e(Oee,KVe),e(sm,ZVe),e(sm,tk),e(tk,eXe),e(sm,oXe),e(y,rXe),e(y,lm),e(lm,Vee),e(Vee,tXe),e(lm,aXe),e(lm,ak),e(ak,nXe),e(lm,sXe),e(y,lXe),e(y,im),e(im,Xee),e(Xee,iXe),e(im,dXe),e(im,nk),e(nk,cXe),e(im,fXe),e(y,mXe),e(y,dm),e(dm,zee),e(zee,gXe),e(dm,hXe),e(dm,sk),e(sk,pXe),e(dm,uXe),e(y,_Xe),e(y,cm),e(cm,Qee),e(Qee,bXe),e(cm,vXe),e(cm,lk),e(lk,FXe),e(cm,TXe),e(y,MXe),e(y,fm),e(fm,Wee),e(Wee,EXe),e(fm,CXe),e(fm,ik),e(ik,wXe),e(fm,AXe),e(y,yXe),e(y,mm),e(mm,Hee),e(Hee,LXe),e(mm,xXe),e(mm,dk),e(dk,$Xe),e(mm,kXe),e(y,SXe),e(y,gm),e(gm,Uee),e(Uee,RXe),e(gm,BXe),e(gm,ck),e(ck,PXe),e(gm,IXe),e(y,qXe),e(y,hm),e(hm,Jee),e(Jee,NXe),e(hm,jXe),e(hm,fk),e(fk,DXe),e(hm,GXe),e(y,OXe),e(y,pm),e(pm,Yee),e(Yee,VXe),e(pm,XXe),e(pm,mk),e(mk,zXe),e(pm,QXe),e(y,WXe),e(y,um),e(um,Kee),e(Kee,HXe),e(um,UXe),e(um,gk),e(gk,JXe),e(um,YXe),e(y,KXe),e(y,_m),e(_m,Zee),e(Zee,ZXe),e(_m,eze),e(_m,hk),e(hk,oze),e(_m,rze),e(y,tze),e(y,bm),e(bm,eoe),e(eoe,aze),e(bm,nze),e(bm,pk),e(pk,sze),e(bm,lze),e(y,ize),e(y,vm),e(vm,ooe),e(ooe,dze),e(vm,cze),e(vm,uk),e(uk,fze),e(vm,mze),e(y,gze),e(y,Fm),e(Fm,roe),e(roe,hze),e(Fm,pze),e(Fm,_k),e(_k,uze),e(Fm,_ze),e(y,bze),e(y,Tm),e(Tm,toe),e(toe,vze),e(Tm,Fze),e(Tm,bk),e(bk,Tze),e(Tm,Mze),e(y,Eze),e(y,Mm),e(Mm,aoe),e(aoe,Cze),e(Mm,wze),e(Mm,vk),e(vk,Aze),e(Mm,yze),e(y,Lze),e(y,Em),e(Em,noe),e(noe,xze),e(Em,$ze),e(Em,Fk),e(Fk,kze),e(Em,Sze),e(y,Rze),e(y,Cm),e(Cm,soe),e(soe,Bze),e(Cm,Pze),e(Cm,Tk),e(Tk,Ize),e(Cm,qze),e(y,Nze),e(y,wm),e(wm,loe),e(loe,jze),e(wm,Dze),e(wm,Mk),e(Mk,Gze),e(wm,Oze),e(y,Vze),e(y,Am),e(Am,ioe),e(ioe,Xze),e(Am,zze),e(Am,Ek),e(Ek,Qze),e(Am,Wze),e(y,Hze),e(y,ym),e(ym,doe),e(doe,Uze),e(ym,Jze),e(ym,Ck),e(Ck,Yze),e(ym,Kze),e(y,Zze),e(y,Lm),e(Lm,coe),e(coe,eQe),e(Lm,oQe),e(Lm,wk),e(wk,rQe),e(Lm,tQe),e(y,aQe),e(y,xm),e(xm,foe),e(foe,nQe),e(xm,sQe),e(xm,Ak),e(Ak,lQe),e(xm,iQe),e(y,dQe),e(y,$m),e($m,moe),e(moe,cQe),e($m,fQe),e($m,yk),e(yk,mQe),e($m,gQe),e(y,hQe),e(y,km),e(km,goe),e(goe,pQe),e(km,uQe),e(km,Lk),e(Lk,_Qe),e(km,bQe),e(y,vQe),e(y,Sm),e(Sm,hoe),e(hoe,FQe),e(Sm,TQe),e(Sm,xk),e(xk,MQe),e(Sm,EQe),e(y,CQe),e(y,Rm),e(Rm,poe),e(poe,wQe),e(Rm,AQe),e(Rm,$k),e($k,yQe),e(Rm,LQe),e(y,xQe),e(y,Bm),e(Bm,uoe),e(uoe,$Qe),e(Bm,kQe),e(Bm,kk),e(kk,SQe),e(Bm,RQe),e(y,BQe),e(y,Pm),e(Pm,_oe),e(_oe,PQe),e(Pm,IQe),e(Pm,Sk),e(Sk,qQe),e(Pm,NQe),e(y,jQe),e(y,Im),e(Im,boe),e(boe,DQe),e(Im,GQe),e(Im,Rk),e(Rk,OQe),e(Im,VQe),e(y,XQe),e(y,qm),e(qm,voe),e(voe,zQe),e(qm,QQe),e(qm,Bk),e(Bk,WQe),e(qm,HQe),e(y,UQe),e(y,Nm),e(Nm,Foe),e(Foe,JQe),e(Nm,YQe),e(Nm,Pk),e(Pk,KQe),e(Nm,ZQe),e(y,eWe),e(y,jm),e(jm,Toe),e(Toe,oWe),e(jm,rWe),e(jm,Ik),e(Ik,tWe),e(jm,aWe),e(y,nWe),e(y,Dm),e(Dm,Moe),e(Moe,sWe),e(Dm,lWe),e(Dm,qk),e(qk,iWe),e(Dm,dWe),e(y,cWe),e(y,Gm),e(Gm,Eoe),e(Eoe,fWe),e(Gm,mWe),e(Gm,Nk),e(Nk,gWe),e(Gm,hWe),e(y,pWe),e(y,Om),e(Om,Coe),e(Coe,uWe),e(Om,_We),e(Om,jk),e(jk,bWe),e(Om,vWe),e(y,FWe),e(y,Vm),e(Vm,woe),e(woe,TWe),e(Vm,MWe),e(Vm,Dk),e(Dk,EWe),e(Vm,CWe),e(y,wWe),e(y,Xm),e(Xm,Aoe),e(Aoe,AWe),e(Xm,yWe),e(Xm,Gk),e(Gk,LWe),e(Xm,xWe),e(y,$We),e(y,zm),e(zm,yoe),e(yoe,kWe),e(zm,SWe),e(zm,Ok),e(Ok,RWe),e(zm,BWe),e(y,PWe),e(y,Qm),e(Qm,Loe),e(Loe,IWe),e(Qm,qWe),e(Qm,Vk),e(Vk,NWe),e(Qm,jWe),e(y,DWe),e(y,Wm),e(Wm,xoe),e(xoe,GWe),e(Wm,OWe),e(Wm,Xk),e(Xk,VWe),e(Wm,XWe),e(y,zWe),e(y,Hm),e(Hm,$oe),e($oe,QWe),e(Hm,WWe),e(Hm,zk),e(zk,HWe),e(Hm,UWe),e(y,JWe),e(y,Um),e(Um,koe),e(koe,YWe),e(Um,KWe),e(Um,Qk),e(Qk,ZWe),e(Um,eHe),e(y,oHe),e(y,Jm),e(Jm,Soe),e(Soe,rHe),e(Jm,tHe),e(Jm,Wk),e(Wk,aHe),e(Jm,nHe),e(y,sHe),e(y,Ym),e(Ym,Roe),e(Roe,lHe),e(Ym,iHe),e(Ym,Hk),e(Hk,dHe),e(Ym,cHe),e(y,fHe),e(y,Km),e(Km,Boe),e(Boe,mHe),e(Km,gHe),e(Km,Uk),e(Uk,hHe),e(Km,pHe),e(y,uHe),e(y,Zm),e(Zm,Poe),e(Poe,_He),e(Zm,bHe),e(Zm,Jk),e(Jk,vHe),e(Zm,FHe),e(y,THe),e(y,eg),e(eg,Ioe),e(Ioe,MHe),e(eg,EHe),e(eg,Yk),e(Yk,CHe),e(eg,wHe),e(y,AHe),e(y,og),e(og,qoe),e(qoe,yHe),e(og,LHe),e(og,Kk),e(Kk,xHe),e(og,$He),e(y,kHe),e(y,rg),e(rg,Noe),e(Noe,SHe),e(rg,RHe),e(rg,Zk),e(Zk,BHe),e(rg,PHe),e(y,IHe),e(y,tg),e(tg,joe),e(joe,qHe),e(tg,NHe),e(tg,eS),e(eS,jHe),e(tg,DHe),e(y,GHe),e(y,ag),e(ag,Doe),e(Doe,OHe),e(ag,VHe),e(ag,oS),e(oS,XHe),e(ag,zHe),e(y,QHe),e(y,ng),e(ng,Goe),e(Goe,WHe),e(ng,HHe),e(ng,rS),e(rS,UHe),e(ng,JHe),e(y,YHe),e(y,sg),e(sg,Ooe),e(Ooe,KHe),e(sg,ZHe),e(sg,tS),e(tS,eUe),e(sg,oUe),e(y,rUe),e(y,lg),e(lg,Voe),e(Voe,tUe),e(lg,aUe),e(lg,aS),e(aS,nUe),e(lg,sUe),e(y,lUe),e(y,ig),e(ig,Xoe),e(Xoe,iUe),e(ig,dUe),e(ig,nS),e(nS,cUe),e(ig,fUe),e(y,mUe),e(y,dg),e(dg,zoe),e(zoe,gUe),e(dg,hUe),e(dg,sS),e(sS,pUe),e(dg,uUe),e(y,_Ue),e(y,cg),e(cg,Qoe),e(Qoe,bUe),e(cg,vUe),e(cg,lS),e(lS,FUe),e(cg,TUe),e(y,MUe),e(y,fg),e(fg,Woe),e(Woe,EUe),e(fg,CUe),e(fg,iS),e(iS,wUe),e(fg,AUe),e(y,yUe),e(y,mg),e(mg,Hoe),e(Hoe,LUe),e(mg,xUe),e(mg,dS),e(dS,$Ue),e(mg,kUe),e(y,SUe),e(y,gg),e(gg,Uoe),e(Uoe,RUe),e(gg,BUe),e(gg,cS),e(cS,PUe),e(gg,IUe),e(y,qUe),e(y,hg),e(hg,Joe),e(Joe,NUe),e(hg,jUe),e(hg,fS),e(fS,DUe),e(hg,GUe),e(Er,OUe),M(pg,Er,null),e(Co,VUe),e(Co,ug),M(Zw,ug,null),e(ug,XUe),e(ug,Yoe),e(Yoe,zUe),b(f,$Pe,_),b(f,_i,_),e(_i,_g),e(_g,Koe),M(eA,Koe,null),e(_i,QUe),e(_i,Zoe),e(Zoe,WUe),b(f,kPe,_),b(f,wo,_),M(oA,wo,null),e(wo,HUe),e(wo,rA),e(rA,UUe),e(rA,mS),e(mS,JUe),e(rA,YUe),e(wo,KUe),e(wo,tA),e(tA,ZUe),e(tA,ere),e(ere,eJe),e(tA,oJe),e(wo,rJe),e(wo,Cr),M(aA,Cr,null),e(Cr,tJe),e(Cr,ore),e(ore,aJe),e(Cr,nJe),e(Cr,Ca),e(Ca,sJe),e(Ca,rre),e(rre,lJe),e(Ca,iJe),e(Ca,tre),e(tre,dJe),e(Ca,cJe),e(Ca,are),e(are,fJe),e(Ca,mJe),e(Cr,gJe),e(Cr,k),e(k,kn),e(kn,nre),e(nre,hJe),e(kn,pJe),e(kn,gS),e(gS,uJe),e(kn,_Je),e(kn,hS),e(hS,bJe),e(kn,vJe),e(k,FJe),e(k,Sn),e(Sn,sre),e(sre,TJe),e(Sn,MJe),e(Sn,pS),e(pS,EJe),e(Sn,CJe),e(Sn,uS),e(uS,wJe),e(Sn,AJe),e(k,yJe),e(k,Rn),e(Rn,lre),e(lre,LJe),e(Rn,xJe),e(Rn,_S),e(_S,$Je),e(Rn,kJe),e(Rn,bS),e(bS,SJe),e(Rn,RJe),e(k,BJe),e(k,bg),e(bg,ire),e(ire,PJe),e(bg,IJe),e(bg,vS),e(vS,qJe),e(bg,NJe),e(k,jJe),e(k,Bn),e(Bn,dre),e(dre,DJe),e(Bn,GJe),e(Bn,FS),e(FS,OJe),e(Bn,VJe),e(Bn,TS),e(TS,XJe),e(Bn,zJe),e(k,QJe),e(k,vg),e(vg,cre),e(cre,WJe),e(vg,HJe),e(vg,MS),e(MS,UJe),e(vg,JJe),e(k,YJe),e(k,Fg),e(Fg,fre),e(fre,KJe),e(Fg,ZJe),e(Fg,ES),e(ES,eYe),e(Fg,oYe),e(k,rYe),e(k,Tg),e(Tg,mre),e(mre,tYe),e(Tg,aYe),e(Tg,CS),e(CS,nYe),e(Tg,sYe),e(k,lYe),e(k,Pn),e(Pn,gre),e(gre,iYe),e(Pn,dYe),e(Pn,wS),e(wS,cYe),e(Pn,fYe),e(Pn,AS),e(AS,mYe),e(Pn,gYe),e(k,hYe),e(k,In),e(In,hre),e(hre,pYe),e(In,uYe),e(In,yS),e(yS,_Ye),e(In,bYe),e(In,LS),e(LS,vYe),e(In,FYe),e(k,TYe),e(k,qn),e(qn,pre),e(pre,MYe),e(qn,EYe),e(qn,xS),e(xS,CYe),e(qn,wYe),e(qn,$S),e($S,AYe),e(qn,yYe),e(k,LYe),e(k,Mg),e(Mg,ure),e(ure,xYe),e(Mg,$Ye),e(Mg,kS),e(kS,kYe),e(Mg,SYe),e(k,RYe),e(k,Eg),e(Eg,_re),e(_re,BYe),e(Eg,PYe),e(Eg,SS),e(SS,IYe),e(Eg,qYe),e(k,NYe),e(k,Nn),e(Nn,bre),e(bre,jYe),e(Nn,DYe),e(Nn,RS),e(RS,GYe),e(Nn,OYe),e(Nn,BS),e(BS,VYe),e(Nn,XYe),e(k,zYe),e(k,Cg),e(Cg,vre),e(vre,QYe),e(Cg,WYe),e(Cg,PS),e(PS,HYe),e(Cg,UYe),e(k,JYe),e(k,jn),e(jn,Fre),e(Fre,YYe),e(jn,KYe),e(jn,IS),e(IS,ZYe),e(jn,eKe),e(jn,qS),e(qS,oKe),e(jn,rKe),e(k,tKe),e(k,Dn),e(Dn,Tre),e(Tre,aKe),e(Dn,nKe),e(Dn,NS),e(NS,sKe),e(Dn,lKe),e(Dn,jS),e(jS,iKe),e(Dn,dKe),e(k,cKe),e(k,Gn),e(Gn,Mre),e(Mre,fKe),e(Gn,mKe),e(Gn,DS),e(DS,gKe),e(Gn,hKe),e(Gn,GS),e(GS,pKe),e(Gn,uKe),e(k,_Ke),e(k,wg),e(wg,Ere),e(Ere,bKe),e(wg,vKe),e(wg,OS),e(OS,FKe),e(wg,TKe),e(k,MKe),e(k,On),e(On,Cre),e(Cre,EKe),e(On,CKe),e(On,VS),e(VS,wKe),e(On,AKe),e(On,XS),e(XS,yKe),e(On,LKe),e(k,xKe),e(k,Vn),e(Vn,wre),e(wre,$Ke),e(Vn,kKe),e(Vn,zS),e(zS,SKe),e(Vn,RKe),e(Vn,QS),e(QS,BKe),e(Vn,PKe),e(k,IKe),e(k,Xn),e(Xn,Are),e(Are,qKe),e(Xn,NKe),e(Xn,WS),e(WS,jKe),e(Xn,DKe),e(Xn,HS),e(HS,GKe),e(Xn,OKe),e(k,VKe),e(k,zn),e(zn,yre),e(yre,XKe),e(zn,zKe),e(zn,US),e(US,QKe),e(zn,WKe),e(zn,JS),e(JS,HKe),e(zn,UKe),e(k,JKe),e(k,Qn),e(Qn,Lre),e(Lre,YKe),e(Qn,KKe),e(Qn,YS),e(YS,ZKe),e(Qn,eZe),e(Qn,KS),e(KS,oZe),e(Qn,rZe),e(k,tZe),e(k,Wn),e(Wn,xre),e(xre,aZe),e(Wn,nZe),e(Wn,ZS),e(ZS,sZe),e(Wn,lZe),e(Wn,eR),e(eR,iZe),e(Wn,dZe),e(k,cZe),e(k,Ag),e(Ag,$re),e($re,fZe),e(Ag,mZe),e(Ag,oR),e(oR,gZe),e(Ag,hZe),e(k,pZe),e(k,Hn),e(Hn,kre),e(kre,uZe),e(Hn,_Ze),e(Hn,rR),e(rR,bZe),e(Hn,vZe),e(Hn,tR),e(tR,FZe),e(Hn,TZe),e(k,MZe),e(k,yg),e(yg,Sre),e(Sre,EZe),e(yg,CZe),e(yg,aR),e(aR,wZe),e(yg,AZe),e(k,yZe),e(k,Un),e(Un,Rre),e(Rre,LZe),e(Un,xZe),e(Un,nR),e(nR,$Ze),e(Un,kZe),e(Un,sR),e(sR,SZe),e(Un,RZe),e(k,BZe),e(k,Jn),e(Jn,Bre),e(Bre,PZe),e(Jn,IZe),e(Jn,lR),e(lR,qZe),e(Jn,NZe),e(Jn,iR),e(iR,jZe),e(Jn,DZe),e(k,GZe),e(k,Yn),e(Yn,Pre),e(Pre,OZe),e(Yn,VZe),e(Yn,dR),e(dR,XZe),e(Yn,zZe),e(Yn,cR),e(cR,QZe),e(Yn,WZe),e(k,HZe),e(k,Kn),e(Kn,Ire),e(Ire,UZe),e(Kn,JZe),e(Kn,fR),e(fR,YZe),e(Kn,KZe),e(Kn,mR),e(mR,ZZe),e(Kn,eeo),e(k,oeo),e(k,Zn),e(Zn,qre),e(qre,reo),e(Zn,teo),e(Zn,gR),e(gR,aeo),e(Zn,neo),e(Zn,hR),e(hR,seo),e(Zn,leo),e(k,ieo),e(k,Lg),e(Lg,Nre),e(Nre,deo),e(Lg,ceo),e(Lg,pR),e(pR,feo),e(Lg,meo),e(k,geo),e(k,es),e(es,jre),e(jre,heo),e(es,peo),e(es,uR),e(uR,ueo),e(es,_eo),e(es,_R),e(_R,beo),e(es,veo),e(k,Feo),e(k,os),e(os,Dre),e(Dre,Teo),e(os,Meo),e(os,bR),e(bR,Eeo),e(os,Ceo),e(os,vR),e(vR,weo),e(os,Aeo),e(k,yeo),e(k,rs),e(rs,Gre),e(Gre,Leo),e(rs,xeo),e(rs,FR),e(FR,$eo),e(rs,keo),e(rs,TR),e(TR,Seo),e(rs,Reo),e(k,Beo),e(k,ts),e(ts,Ore),e(Ore,Peo),e(ts,Ieo),e(ts,MR),e(MR,qeo),e(ts,Neo),e(ts,ER),e(ER,jeo),e(ts,Deo),e(k,Geo),e(k,as),e(as,Vre),e(Vre,Oeo),e(as,Veo),e(as,CR),e(CR,Xeo),e(as,zeo),e(as,wR),e(wR,Qeo),e(as,Weo),e(k,Heo),e(k,ns),e(ns,Xre),e(Xre,Ueo),e(ns,Jeo),e(ns,AR),e(AR,Yeo),e(ns,Keo),e(ns,yR),e(yR,Zeo),e(ns,eoo),e(k,ooo),e(k,xg),e(xg,zre),e(zre,roo),e(xg,too),e(xg,LR),e(LR,aoo),e(xg,noo),e(k,soo),e(k,ss),e(ss,Qre),e(Qre,loo),e(ss,ioo),e(ss,xR),e(xR,doo),e(ss,coo),e(ss,$R),e($R,foo),e(ss,moo),e(k,goo),e(k,$g),e($g,Wre),e(Wre,hoo),e($g,poo),e($g,kR),e(kR,uoo),e($g,_oo),e(k,boo),e(k,kg),e(kg,Hre),e(Hre,voo),e(kg,Foo),e(kg,SR),e(SR,Too),e(kg,Moo),e(k,Eoo),e(k,ls),e(ls,Ure),e(Ure,Coo),e(ls,woo),e(ls,RR),e(RR,Aoo),e(ls,yoo),e(ls,BR),e(BR,Loo),e(ls,xoo),e(k,$oo),e(k,is),e(is,Jre),e(Jre,koo),e(is,Soo),e(is,PR),e(PR,Roo),e(is,Boo),e(is,IR),e(IR,Poo),e(is,Ioo),e(k,qoo),e(k,ds),e(ds,Yre),e(Yre,Noo),e(ds,joo),e(ds,qR),e(qR,Doo),e(ds,Goo),e(ds,NR),e(NR,Ooo),e(ds,Voo),e(k,Xoo),e(k,Sg),e(Sg,Kre),e(Kre,zoo),e(Sg,Qoo),e(Sg,jR),e(jR,Woo),e(Sg,Hoo),e(k,Uoo),e(k,cs),e(cs,Zre),e(Zre,Joo),e(cs,Yoo),e(cs,DR),e(DR,Koo),e(cs,Zoo),e(cs,GR),e(GR,ero),e(cs,oro),e(k,rro),e(k,fs),e(fs,ete),e(ete,tro),e(fs,aro),e(fs,OR),e(OR,nro),e(fs,sro),e(fs,VR),e(VR,lro),e(fs,iro),e(k,dro),e(k,ms),e(ms,ote),e(ote,cro),e(ms,fro),e(ms,XR),e(XR,mro),e(ms,gro),e(ms,zR),e(zR,hro),e(ms,pro),e(k,uro),e(k,gs),e(gs,rte),e(rte,_ro),e(gs,bro),e(gs,QR),e(QR,vro),e(gs,Fro),e(gs,WR),e(WR,Tro),e(gs,Mro),e(k,Ero),e(k,hs),e(hs,tte),e(tte,Cro),e(hs,wro),e(hs,HR),e(HR,Aro),e(hs,yro),e(hs,UR),e(UR,Lro),e(hs,xro),e(k,$ro),e(k,Rg),e(Rg,ate),e(ate,kro),e(Rg,Sro),e(Rg,JR),e(JR,Rro),e(Rg,Bro),e(k,Pro),e(k,ps),e(ps,nte),e(nte,Iro),e(ps,qro),e(ps,YR),e(YR,Nro),e(ps,jro),e(ps,KR),e(KR,Dro),e(ps,Gro),e(k,Oro),e(k,Bg),e(Bg,ste),e(ste,Vro),e(Bg,Xro),e(Bg,ZR),e(ZR,zro),e(Bg,Qro),e(k,Wro),e(k,Pg),e(Pg,lte),e(lte,Hro),e(Pg,Uro),e(Pg,eB),e(eB,Jro),e(Pg,Yro),e(k,Kro),e(k,Ig),e(Ig,ite),e(ite,Zro),e(Ig,eto),e(Ig,oB),e(oB,oto),e(Ig,rto),e(k,tto),e(k,qg),e(qg,dte),e(dte,ato),e(qg,nto),e(qg,rB),e(rB,sto),e(qg,lto),e(k,ito),e(k,us),e(us,cte),e(cte,dto),e(us,cto),e(us,tB),e(tB,fto),e(us,mto),e(us,aB),e(aB,gto),e(us,hto),e(k,pto),e(k,Ng),e(Ng,fte),e(fte,uto),e(Ng,_to),e(Ng,nB),e(nB,bto),e(Ng,vto),e(k,Fto),e(k,_s),e(_s,mte),e(mte,Tto),e(_s,Mto),e(_s,sB),e(sB,Eto),e(_s,Cto),e(_s,lB),e(lB,wto),e(_s,Ato),e(k,yto),e(k,bs),e(bs,gte),e(gte,Lto),e(bs,xto),e(bs,iB),e(iB,$to),e(bs,kto),e(bs,dB),e(dB,Sto),e(bs,Rto),e(k,Bto),e(k,vs),e(vs,hte),e(hte,Pto),e(vs,Ito),e(vs,cB),e(cB,qto),e(vs,Nto),e(vs,fB),e(fB,jto),e(vs,Dto),e(k,Gto),e(k,Fs),e(Fs,pte),e(pte,Oto),e(Fs,Vto),e(Fs,mB),e(mB,Xto),e(Fs,zto),e(Fs,gB),e(gB,Qto),e(Fs,Wto),e(k,Hto),e(k,Ts),e(Ts,ute),e(ute,Uto),e(Ts,Jto),e(Ts,hB),e(hB,Yto),e(Ts,Kto),e(Ts,pB),e(pB,Zto),e(Ts,eao),e(k,oao),e(k,Ms),e(Ms,_te),e(_te,rao),e(Ms,tao),e(Ms,uB),e(uB,aao),e(Ms,nao),e(Ms,_B),e(_B,sao),e(Ms,lao),e(k,iao),e(k,jg),e(jg,bte),e(bte,dao),e(jg,cao),e(jg,bB),e(bB,fao),e(jg,mao),e(k,gao),e(k,Dg),e(Dg,vte),e(vte,hao),e(Dg,pao),e(Dg,vB),e(vB,uao),e(Dg,_ao),e(k,bao),e(k,Es),e(Es,Fte),e(Fte,vao),e(Es,Fao),e(Es,FB),e(FB,Tao),e(Es,Mao),e(Es,TB),e(TB,Eao),e(Es,Cao),e(k,wao),e(k,Cs),e(Cs,Tte),e(Tte,Aao),e(Cs,yao),e(Cs,MB),e(MB,Lao),e(Cs,xao),e(Cs,EB),e(EB,$ao),e(Cs,kao),e(k,Sao),e(k,ws),e(ws,Mte),e(Mte,Rao),e(ws,Bao),e(ws,CB),e(CB,Pao),e(ws,Iao),e(ws,wB),e(wB,qao),e(ws,Nao),e(k,jao),e(k,Gg),e(Gg,Ete),e(Ete,Dao),e(Gg,Gao),e(Gg,AB),e(AB,Oao),e(Gg,Vao),e(k,Xao),e(k,Og),e(Og,Cte),e(Cte,zao),e(Og,Qao),e(Og,yB),e(yB,Wao),e(Og,Hao),e(k,Uao),e(k,Vg),e(Vg,wte),e(wte,Jao),e(Vg,Yao),e(Vg,LB),e(LB,Kao),e(Vg,Zao),e(k,eno),e(k,As),e(As,Ate),e(Ate,ono),e(As,rno),e(As,xB),e(xB,tno),e(As,ano),e(As,$B),e($B,nno),e(As,sno),e(k,lno),e(k,Xg),e(Xg,yte),e(yte,ino),e(Xg,dno),e(Xg,kB),e(kB,cno),e(Xg,fno),e(k,mno),e(k,zg),e(zg,Lte),e(Lte,gno),e(zg,hno),e(zg,SB),e(SB,pno),e(zg,uno),e(k,_no),e(k,ys),e(ys,xte),e(xte,bno),e(ys,vno),e(ys,RB),e(RB,Fno),e(ys,Tno),e(ys,BB),e(BB,Mno),e(ys,Eno),e(k,Cno),e(k,Qg),e(Qg,$te),e($te,wno),e(Qg,Ano),e(Qg,PB),e(PB,yno),e(Qg,Lno),e(k,xno),e(k,Wg),e(Wg,kte),e(kte,$no),e(Wg,kno),e(Wg,IB),e(IB,Sno),e(Wg,Rno),e(k,Bno),e(k,Ls),e(Ls,Ste),e(Ste,Pno),e(Ls,Ino),e(Ls,qB),e(qB,qno),e(Ls,Nno),e(Ls,NB),e(NB,jno),e(Ls,Dno),e(k,Gno),e(k,xs),e(xs,Rte),e(Rte,Ono),e(xs,Vno),e(xs,jB),e(jB,Xno),e(xs,zno),e(xs,DB),e(DB,Qno),e(xs,Wno),e(k,Hno),e(k,$s),e($s,Bte),e(Bte,Uno),e($s,Jno),e($s,GB),e(GB,Yno),e($s,Kno),e($s,OB),e(OB,Zno),e($s,eso),e(k,oso),e(k,ks),e(ks,Pte),e(Pte,rso),e(ks,tso),e(ks,VB),e(VB,aso),e(ks,nso),e(ks,XB),e(XB,sso),e(ks,lso),e(Cr,iso),M(Hg,Cr,null),e(wo,dso),e(wo,Ug),M(nA,Ug,null),e(Ug,cso),e(Ug,Ite),e(Ite,fso),b(f,SPe,_),b(f,bi,_),e(bi,Jg),e(Jg,qte),M(sA,qte,null),e(bi,mso),e(bi,Nte),e(Nte,gso),b(f,RPe,_),b(f,Ao,_),M(lA,Ao,null),e(Ao,hso),e(Ao,iA),e(iA,pso),e(iA,zB),e(zB,uso),e(iA,_so),e(Ao,bso),e(Ao,dA),e(dA,vso),e(dA,jte),e(jte,Fso),e(dA,Tso),e(Ao,Mso),e(Ao,Qe),M(cA,Qe,null),e(Qe,Eso),e(Qe,Dte),e(Dte,Cso),e(Qe,wso),e(Qe,wa),e(wa,Aso),e(wa,Gte),e(Gte,yso),e(wa,Lso),e(wa,Ote),e(Ote,xso),e(wa,$so),e(wa,Vte),e(Vte,kso),e(wa,Sso),e(Qe,Rso),e(Qe,te),e(te,Yg),e(Yg,Xte),e(Xte,Bso),e(Yg,Pso),e(Yg,QB),e(QB,Iso),e(Yg,qso),e(te,Nso),e(te,Kg),e(Kg,zte),e(zte,jso),e(Kg,Dso),e(Kg,WB),e(WB,Gso),e(Kg,Oso),e(te,Vso),e(te,Zg),e(Zg,Qte),e(Qte,Xso),e(Zg,zso),e(Zg,HB),e(HB,Qso),e(Zg,Wso),e(te,Hso),e(te,eh),e(eh,Wte),e(Wte,Uso),e(eh,Jso),e(eh,UB),e(UB,Yso),e(eh,Kso),e(te,Zso),e(te,oh),e(oh,Hte),e(Hte,elo),e(oh,olo),e(oh,JB),e(JB,rlo),e(oh,tlo),e(te,alo),e(te,rh),e(rh,Ute),e(Ute,nlo),e(rh,slo),e(rh,YB),e(YB,llo),e(rh,ilo),e(te,dlo),e(te,th),e(th,Jte),e(Jte,clo),e(th,flo),e(th,KB),e(KB,mlo),e(th,glo),e(te,hlo),e(te,ah),e(ah,Yte),e(Yte,plo),e(ah,ulo),e(ah,ZB),e(ZB,_lo),e(ah,blo),e(te,vlo),e(te,nh),e(nh,Kte),e(Kte,Flo),e(nh,Tlo),e(nh,eP),e(eP,Mlo),e(nh,Elo),e(te,Clo),e(te,sh),e(sh,Zte),e(Zte,wlo),e(sh,Alo),e(sh,oP),e(oP,ylo),e(sh,Llo),e(te,xlo),e(te,lh),e(lh,eae),e(eae,$lo),e(lh,klo),e(lh,rP),e(rP,Slo),e(lh,Rlo),e(te,Blo),e(te,ih),e(ih,oae),e(oae,Plo),e(ih,Ilo),e(ih,tP),e(tP,qlo),e(ih,Nlo),e(te,jlo),e(te,dh),e(dh,rae),e(rae,Dlo),e(dh,Glo),e(dh,aP),e(aP,Olo),e(dh,Vlo),e(te,Xlo),e(te,ch),e(ch,tae),e(tae,zlo),e(ch,Qlo),e(ch,nP),e(nP,Wlo),e(ch,Hlo),e(te,Ulo),e(te,fh),e(fh,aae),e(aae,Jlo),e(fh,Ylo),e(fh,sP),e(sP,Klo),e(fh,Zlo),e(te,eio),e(te,mh),e(mh,nae),e(nae,oio),e(mh,rio),e(mh,lP),e(lP,tio),e(mh,aio),e(te,nio),e(te,gh),e(gh,sae),e(sae,sio),e(gh,lio),e(gh,iP),e(iP,iio),e(gh,dio),e(te,cio),e(te,hh),e(hh,lae),e(lae,fio),e(hh,mio),e(hh,dP),e(dP,gio),e(hh,hio),e(te,pio),e(te,ph),e(ph,iae),e(iae,uio),e(ph,_io),e(ph,cP),e(cP,bio),e(ph,vio),e(te,Fio),e(te,uh),e(uh,dae),e(dae,Tio),e(uh,Mio),e(uh,fP),e(fP,Eio),e(uh,Cio),e(te,wio),e(te,_h),e(_h,cae),e(cae,Aio),e(_h,yio),e(_h,mP),e(mP,Lio),e(_h,xio),e(te,$io),e(te,bh),e(bh,fae),e(fae,kio),e(bh,Sio),e(bh,gP),e(gP,Rio),e(bh,Bio),e(te,Pio),e(te,vh),e(vh,mae),e(mae,Iio),e(vh,qio),e(vh,hP),e(hP,Nio),e(vh,jio),e(te,Dio),e(te,Fh),e(Fh,gae),e(gae,Gio),e(Fh,Oio),e(Fh,pP),e(pP,Vio),e(Fh,Xio),e(Qe,zio),M(Th,Qe,null),e(Qe,Qio),M(Mh,Qe,null),e(Ao,Wio),e(Ao,Eh),M(fA,Eh,null),e(Eh,Hio),e(Eh,hae),e(hae,Uio),b(f,BPe,_),b(f,vi,_),e(vi,Ch),e(Ch,pae),M(mA,pae,null),e(vi,Jio),e(vi,uae),e(uae,Yio),b(f,PPe,_),b(f,yo,_),M(gA,yo,null),e(yo,Kio),e(yo,hA),e(hA,Zio),e(hA,uP),e(uP,edo),e(hA,odo),e(yo,rdo),e(yo,pA),e(pA,tdo),e(pA,_ae),e(_ae,ado),e(pA,ndo),e(yo,sdo),e(yo,We),M(uA,We,null),e(We,ldo),e(We,bae),e(bae,ido),e(We,ddo),e(We,Fi),e(Fi,cdo),e(Fi,vae),e(vae,fdo),e(Fi,mdo),e(Fi,Fae),e(Fae,gdo),e(Fi,hdo),e(We,pdo),e(We,be),e(be,wh),e(wh,Tae),e(Tae,udo),e(wh,_do),e(wh,_P),e(_P,bdo),e(wh,vdo),e(be,Fdo),e(be,Ah),e(Ah,Mae),e(Mae,Tdo),e(Ah,Mdo),e(Ah,bP),e(bP,Edo),e(Ah,Cdo),e(be,wdo),e(be,yh),e(yh,Eae),e(Eae,Ado),e(yh,ydo),e(yh,vP),e(vP,Ldo),e(yh,xdo),e(be,$do),e(be,Lh),e(Lh,Cae),e(Cae,kdo),e(Lh,Sdo),e(Lh,FP),e(FP,Rdo),e(Lh,Bdo),e(be,Pdo),e(be,xh),e(xh,wae),e(wae,Ido),e(xh,qdo),e(xh,TP),e(TP,Ndo),e(xh,jdo),e(be,Ddo),e(be,$h),e($h,Aae),e(Aae,Gdo),e($h,Odo),e($h,MP),e(MP,Vdo),e($h,Xdo),e(be,zdo),e(be,kh),e(kh,yae),e(yae,Qdo),e(kh,Wdo),e(kh,EP),e(EP,Hdo),e(kh,Udo),e(be,Jdo),e(be,Sh),e(Sh,Lae),e(Lae,Ydo),e(Sh,Kdo),e(Sh,CP),e(CP,Zdo),e(Sh,eco),e(be,oco),e(be,Rh),e(Rh,xae),e(xae,rco),e(Rh,tco),e(Rh,wP),e(wP,aco),e(Rh,nco),e(be,sco),e(be,Bh),e(Bh,$ae),e($ae,lco),e(Bh,ico),e(Bh,AP),e(AP,dco),e(Bh,cco),e(be,fco),e(be,Ph),e(Ph,kae),e(kae,mco),e(Ph,gco),e(Ph,yP),e(yP,hco),e(Ph,pco),e(be,uco),e(be,Ih),e(Ih,Sae),e(Sae,_co),e(Ih,bco),e(Ih,LP),e(LP,vco),e(Ih,Fco),e(be,Tco),e(be,qh),e(qh,Rae),e(Rae,Mco),e(qh,Eco),e(qh,xP),e(xP,Cco),e(qh,wco),e(be,Aco),e(be,Nh),e(Nh,Bae),e(Bae,yco),e(Nh,Lco),e(Nh,$P),e($P,xco),e(Nh,$co),e(We,kco),M(jh,We,null),e(We,Sco),M(Dh,We,null),e(yo,Rco),e(yo,Gh),M(_A,Gh,null),e(Gh,Bco),e(Gh,Pae),e(Pae,Pco),b(f,IPe,_),b(f,Ti,_),e(Ti,Oh),e(Oh,Iae),M(bA,Iae,null),e(Ti,Ico),e(Ti,qae),e(qae,qco),b(f,qPe,_),b(f,Lo,_),M(vA,Lo,null),e(Lo,Nco),e(Lo,Mi),e(Mi,jco),e(Mi,kP),e(kP,Dco),e(Mi,Gco),e(Mi,SP),e(SP,Oco),e(Mi,Vco),e(Lo,Xco),e(Lo,FA),e(FA,zco),e(FA,Nae),e(Nae,Qco),e(FA,Wco),e(Lo,Hco),e(Lo,ot),M(TA,ot,null),e(ot,Uco),e(ot,jae),e(jae,Jco),e(ot,Yco),e(ot,Ei),e(Ei,Kco),e(Ei,Dae),e(Dae,Zco),e(Ei,efo),e(Ei,RP),e(RP,ofo),e(Ei,rfo),e(ot,tfo),M(Vh,ot,null),e(Lo,afo),e(Lo,He),M(MA,He,null),e(He,nfo),e(He,Gae),e(Gae,sfo),e(He,lfo),e(He,Aa),e(Aa,ifo),e(Aa,Oae),e(Oae,dfo),e(Aa,cfo),e(Aa,Vae),e(Vae,ffo),e(Aa,mfo),e(Aa,Xae),e(Xae,gfo),e(Aa,hfo),e(He,pfo),e(He,x),e(x,Xh),e(Xh,zae),e(zae,ufo),e(Xh,_fo),e(Xh,BP),e(BP,bfo),e(Xh,vfo),e(x,Ffo),e(x,zh),e(zh,Qae),e(Qae,Tfo),e(zh,Mfo),e(zh,PP),e(PP,Efo),e(zh,Cfo),e(x,wfo),e(x,Qh),e(Qh,Wae),e(Wae,Afo),e(Qh,yfo),e(Qh,IP),e(IP,Lfo),e(Qh,xfo),e(x,$fo),e(x,Wh),e(Wh,Hae),e(Hae,kfo),e(Wh,Sfo),e(Wh,qP),e(qP,Rfo),e(Wh,Bfo),e(x,Pfo),e(x,Hh),e(Hh,Uae),e(Uae,Ifo),e(Hh,qfo),e(Hh,NP),e(NP,Nfo),e(Hh,jfo),e(x,Dfo),e(x,Uh),e(Uh,Jae),e(Jae,Gfo),e(Uh,Ofo),e(Uh,jP),e(jP,Vfo),e(Uh,Xfo),e(x,zfo),e(x,Jh),e(Jh,Yae),e(Yae,Qfo),e(Jh,Wfo),e(Jh,DP),e(DP,Hfo),e(Jh,Ufo),e(x,Jfo),e(x,Yh),e(Yh,Kae),e(Kae,Yfo),e(Yh,Kfo),e(Yh,GP),e(GP,Zfo),e(Yh,emo),e(x,omo),e(x,Kh),e(Kh,Zae),e(Zae,rmo),e(Kh,tmo),e(Kh,OP),e(OP,amo),e(Kh,nmo),e(x,smo),e(x,Zh),e(Zh,ene),e(ene,lmo),e(Zh,imo),e(Zh,VP),e(VP,dmo),e(Zh,cmo),e(x,fmo),e(x,ep),e(ep,one),e(one,mmo),e(ep,gmo),e(ep,XP),e(XP,hmo),e(ep,pmo),e(x,umo),e(x,op),e(op,rne),e(rne,_mo),e(op,bmo),e(op,zP),e(zP,vmo),e(op,Fmo),e(x,Tmo),e(x,rp),e(rp,tne),e(tne,Mmo),e(rp,Emo),e(rp,QP),e(QP,Cmo),e(rp,wmo),e(x,Amo),e(x,tp),e(tp,ane),e(ane,ymo),e(tp,Lmo),e(tp,WP),e(WP,xmo),e(tp,$mo),e(x,kmo),e(x,ap),e(ap,nne),e(nne,Smo),e(ap,Rmo),e(ap,HP),e(HP,Bmo),e(ap,Pmo),e(x,Imo),e(x,np),e(np,sne),e(sne,qmo),e(np,Nmo),e(np,UP),e(UP,jmo),e(np,Dmo),e(x,Gmo),e(x,sp),e(sp,lne),e(lne,Omo),e(sp,Vmo),e(sp,JP),e(JP,Xmo),e(sp,zmo),e(x,Qmo),e(x,lp),e(lp,ine),e(ine,Wmo),e(lp,Hmo),e(lp,YP),e(YP,Umo),e(lp,Jmo),e(x,Ymo),e(x,ip),e(ip,dne),e(dne,Kmo),e(ip,Zmo),e(ip,KP),e(KP,ego),e(ip,ogo),e(x,rgo),e(x,dp),e(dp,cne),e(cne,tgo),e(dp,ago),e(dp,ZP),e(ZP,ngo),e(dp,sgo),e(x,lgo),e(x,cp),e(cp,fne),e(fne,igo),e(cp,dgo),e(cp,eI),e(eI,cgo),e(cp,fgo),e(x,mgo),e(x,fp),e(fp,mne),e(mne,ggo),e(fp,hgo),e(fp,oI),e(oI,pgo),e(fp,ugo),e(x,_go),e(x,mp),e(mp,gne),e(gne,bgo),e(mp,vgo),e(mp,rI),e(rI,Fgo),e(mp,Tgo),e(x,Mgo),e(x,gp),e(gp,hne),e(hne,Ego),e(gp,Cgo),e(gp,tI),e(tI,wgo),e(gp,Ago),e(x,ygo),e(x,hp),e(hp,pne),e(pne,Lgo),e(hp,xgo),e(hp,aI),e(aI,$go),e(hp,kgo),e(x,Sgo),e(x,pp),e(pp,une),e(une,Rgo),e(pp,Bgo),e(pp,nI),e(nI,Pgo),e(pp,Igo),e(x,qgo),e(x,up),e(up,_ne),e(_ne,Ngo),e(up,jgo),e(up,sI),e(sI,Dgo),e(up,Ggo),e(x,Ogo),e(x,_p),e(_p,bne),e(bne,Vgo),e(_p,Xgo),e(_p,lI),e(lI,zgo),e(_p,Qgo),e(x,Wgo),e(x,bp),e(bp,vne),e(vne,Hgo),e(bp,Ugo),e(bp,iI),e(iI,Jgo),e(bp,Ygo),e(x,Kgo),e(x,vp),e(vp,Fne),e(Fne,Zgo),e(vp,eho),e(vp,dI),e(dI,oho),e(vp,rho),e(x,tho),e(x,Ss),e(Ss,Tne),e(Tne,aho),e(Ss,nho),e(Ss,cI),e(cI,sho),e(Ss,lho),e(Ss,fI),e(fI,iho),e(Ss,dho),e(x,cho),e(x,Fp),e(Fp,Mne),e(Mne,fho),e(Fp,mho),e(Fp,mI),e(mI,gho),e(Fp,hho),e(x,pho),e(x,Tp),e(Tp,Ene),e(Ene,uho),e(Tp,_ho),e(Tp,gI),e(gI,bho),e(Tp,vho),e(x,Fho),e(x,Mp),e(Mp,Cne),e(Cne,Tho),e(Mp,Mho),e(Mp,hI),e(hI,Eho),e(Mp,Cho),e(x,who),e(x,Ep),e(Ep,wne),e(wne,Aho),e(Ep,yho),e(Ep,pI),e(pI,Lho),e(Ep,xho),e(x,$ho),e(x,Cp),e(Cp,Ane),e(Ane,kho),e(Cp,Sho),e(Cp,uI),e(uI,Rho),e(Cp,Bho),e(x,Pho),e(x,wp),e(wp,yne),e(yne,Iho),e(wp,qho),e(wp,_I),e(_I,Nho),e(wp,jho),e(x,Dho),e(x,Ap),e(Ap,Lne),e(Lne,Gho),e(Ap,Oho),e(Ap,bI),e(bI,Vho),e(Ap,Xho),e(x,zho),e(x,yp),e(yp,xne),e(xne,Qho),e(yp,Who),e(yp,vI),e(vI,Hho),e(yp,Uho),e(x,Jho),e(x,Lp),e(Lp,$ne),e($ne,Yho),e(Lp,Kho),e(Lp,FI),e(FI,Zho),e(Lp,epo),e(x,opo),e(x,xp),e(xp,kne),e(kne,rpo),e(xp,tpo),e(xp,TI),e(TI,apo),e(xp,npo),e(x,spo),e(x,$p),e($p,Sne),e(Sne,lpo),e($p,ipo),e($p,MI),e(MI,dpo),e($p,cpo),e(x,fpo),e(x,kp),e(kp,Rne),e(Rne,mpo),e(kp,gpo),e(kp,EI),e(EI,hpo),e(kp,ppo),e(x,upo),e(x,Sp),e(Sp,Bne),e(Bne,_po),e(Sp,bpo),e(Sp,CI),e(CI,vpo),e(Sp,Fpo),e(x,Tpo),e(x,Rp),e(Rp,Pne),e(Pne,Mpo),e(Rp,Epo),e(Rp,wI),e(wI,Cpo),e(Rp,wpo),e(x,Apo),e(x,Bp),e(Bp,Ine),e(Ine,ypo),e(Bp,Lpo),e(Bp,AI),e(AI,xpo),e(Bp,$po),e(x,kpo),e(x,Pp),e(Pp,qne),e(qne,Spo),e(Pp,Rpo),e(Pp,yI),e(yI,Bpo),e(Pp,Ppo),e(x,Ipo),e(x,Ip),e(Ip,Nne),e(Nne,qpo),e(Ip,Npo),e(Ip,LI),e(LI,jpo),e(Ip,Dpo),e(x,Gpo),e(x,qp),e(qp,jne),e(jne,Opo),e(qp,Vpo),e(qp,xI),e(xI,Xpo),e(qp,zpo),e(x,Qpo),e(x,Np),e(Np,Dne),e(Dne,Wpo),e(Np,Hpo),e(Np,$I),e($I,Upo),e(Np,Jpo),e(x,Ypo),e(x,jp),e(jp,Gne),e(Gne,Kpo),e(jp,Zpo),e(jp,kI),e(kI,euo),e(jp,ouo),e(x,ruo),e(x,Dp),e(Dp,One),e(One,tuo),e(Dp,auo),e(Dp,SI),e(SI,nuo),e(Dp,suo),e(x,luo),e(x,Gp),e(Gp,Vne),e(Vne,iuo),e(Gp,duo),e(Gp,RI),e(RI,cuo),e(Gp,fuo),e(x,muo),e(x,Op),e(Op,Xne),e(Xne,guo),e(Op,huo),e(Op,BI),e(BI,puo),e(Op,uuo),e(x,_uo),e(x,Vp),e(Vp,zne),e(zne,buo),e(Vp,vuo),e(Vp,PI),e(PI,Fuo),e(Vp,Tuo),e(x,Muo),e(x,Xp),e(Xp,Qne),e(Qne,Euo),e(Xp,Cuo),e(Xp,II),e(II,wuo),e(Xp,Auo),e(x,yuo),e(x,zp),e(zp,Wne),e(Wne,Luo),e(zp,xuo),e(zp,qI),e(qI,$uo),e(zp,kuo),e(x,Suo),e(x,Qp),e(Qp,Hne),e(Hne,Ruo),e(Qp,Buo),e(Qp,NI),e(NI,Puo),e(Qp,Iuo),e(x,quo),e(x,Wp),e(Wp,Une),e(Une,Nuo),e(Wp,juo),e(Wp,jI),e(jI,Duo),e(Wp,Guo),e(x,Ouo),e(x,Hp),e(Hp,Jne),e(Jne,Vuo),e(Hp,Xuo),e(Hp,DI),e(DI,zuo),e(Hp,Quo),e(x,Wuo),e(x,Up),e(Up,Yne),e(Yne,Huo),e(Up,Uuo),e(Up,GI),e(GI,Juo),e(Up,Yuo),e(x,Kuo),e(x,Jp),e(Jp,Kne),e(Kne,Zuo),e(Jp,e_o),e(Jp,OI),e(OI,o_o),e(Jp,r_o),e(x,t_o),e(x,Yp),e(Yp,Zne),e(Zne,a_o),e(Yp,n_o),e(Yp,VI),e(VI,s_o),e(Yp,l_o),e(x,i_o),e(x,Kp),e(Kp,ese),e(ese,d_o),e(Kp,c_o),e(Kp,XI),e(XI,f_o),e(Kp,m_o),e(x,g_o),e(x,Zp),e(Zp,ose),e(ose,h_o),e(Zp,p_o),e(Zp,zI),e(zI,u_o),e(Zp,__o),e(x,b_o),e(x,eu),e(eu,rse),e(rse,v_o),e(eu,F_o),e(eu,QI),e(QI,T_o),e(eu,M_o),e(x,E_o),e(x,ou),e(ou,tse),e(tse,C_o),e(ou,w_o),e(ou,WI),e(WI,A_o),e(ou,y_o),e(x,L_o),e(x,ru),e(ru,ase),e(ase,x_o),e(ru,$_o),e(ru,HI),e(HI,k_o),e(ru,S_o),e(x,R_o),e(x,tu),e(tu,nse),e(nse,B_o),e(tu,P_o),e(tu,UI),e(UI,I_o),e(tu,q_o),e(x,N_o),e(x,au),e(au,sse),e(sse,j_o),e(au,D_o),e(au,JI),e(JI,G_o),e(au,O_o),e(x,V_o),e(x,nu),e(nu,lse),e(lse,X_o),e(nu,z_o),e(nu,YI),e(YI,Q_o),e(nu,W_o),e(x,H_o),e(x,su),e(su,ise),e(ise,U_o),e(su,J_o),e(su,KI),e(KI,Y_o),e(su,K_o),e(x,Z_o),e(x,lu),e(lu,dse),e(dse,e1o),e(lu,o1o),e(lu,ZI),e(ZI,r1o),e(lu,t1o),e(x,a1o),e(x,iu),e(iu,cse),e(cse,n1o),e(iu,s1o),e(iu,eq),e(eq,l1o),e(iu,i1o),e(x,d1o),e(x,du),e(du,fse),e(fse,c1o),e(du,f1o),e(du,oq),e(oq,m1o),e(du,g1o),e(x,h1o),e(x,cu),e(cu,mse),e(mse,p1o),e(cu,u1o),e(cu,rq),e(rq,_1o),e(cu,b1o),e(x,v1o),e(x,fu),e(fu,gse),e(gse,F1o),e(fu,T1o),e(fu,tq),e(tq,M1o),e(fu,E1o),e(x,C1o),e(x,mu),e(mu,hse),e(hse,w1o),e(mu,A1o),e(mu,aq),e(aq,y1o),e(mu,L1o),e(x,x1o),e(x,gu),e(gu,pse),e(pse,$1o),e(gu,k1o),e(gu,nq),e(nq,S1o),e(gu,R1o),e(x,B1o),e(x,hu),e(hu,use),e(use,P1o),e(hu,I1o),e(hu,sq),e(sq,q1o),e(hu,N1o),e(x,j1o),e(x,pu),e(pu,_se),e(_se,D1o),e(pu,G1o),e(pu,lq),e(lq,O1o),e(pu,V1o),e(x,X1o),e(x,uu),e(uu,bse),e(bse,z1o),e(uu,Q1o),e(uu,iq),e(iq,W1o),e(uu,H1o),e(x,U1o),e(x,_u),e(_u,vse),e(vse,J1o),e(_u,Y1o),e(_u,dq),e(dq,K1o),e(_u,Z1o),e(x,e8o),e(x,bu),e(bu,Fse),e(Fse,o8o),e(bu,r8o),e(bu,cq),e(cq,t8o),e(bu,a8o),e(x,n8o),e(x,vu),e(vu,Tse),e(Tse,s8o),e(vu,l8o),e(vu,fq),e(fq,i8o),e(vu,d8o),e(x,c8o),e(x,Fu),e(Fu,Mse),e(Mse,f8o),e(Fu,m8o),e(Fu,mq),e(mq,g8o),e(Fu,h8o),e(x,p8o),e(x,Tu),e(Tu,Ese),e(Ese,u8o),e(Tu,_8o),e(Tu,gq),e(gq,b8o),e(Tu,v8o),e(x,F8o),e(x,Mu),e(Mu,Cse),e(Cse,T8o),e(Mu,M8o),e(Mu,hq),e(hq,E8o),e(Mu,C8o),e(x,w8o),e(x,Eu),e(Eu,wse),e(wse,A8o),e(Eu,y8o),e(Eu,pq),e(pq,L8o),e(Eu,x8o),e(x,$8o),e(x,Cu),e(Cu,Ase),e(Ase,k8o),e(Cu,S8o),e(Cu,uq),e(uq,R8o),e(Cu,B8o),e(x,P8o),e(x,wu),e(wu,yse),e(yse,I8o),e(wu,q8o),e(wu,_q),e(_q,N8o),e(wu,j8o),e(x,D8o),e(x,Au),e(Au,Lse),e(Lse,G8o),e(Au,O8o),e(Au,bq),e(bq,V8o),e(Au,X8o),e(x,z8o),e(x,yu),e(yu,xse),e(xse,Q8o),e(yu,W8o),e(yu,vq),e(vq,H8o),e(yu,U8o),e(x,J8o),e(x,Lu),e(Lu,$se),e($se,Y8o),e(Lu,K8o),e(Lu,Fq),e(Fq,Z8o),e(Lu,ebo),e(x,obo),e(x,xu),e(xu,kse),e(kse,rbo),e(xu,tbo),e(xu,Tq),e(Tq,abo),e(xu,nbo),e(x,sbo),e(x,$u),e($u,Sse),e(Sse,lbo),e($u,ibo),e($u,Mq),e(Mq,dbo),e($u,cbo),e(He,fbo),e(He,ku),e(ku,mbo),e(ku,Rse),e(Rse,gbo),e(ku,hbo),e(ku,Bse),e(Bse,pbo),e(He,ubo),M(Su,He,null),b(f,NPe,_),b(f,Ci,_),e(Ci,Ru),e(Ru,Pse),M(EA,Pse,null),e(Ci,_bo),e(Ci,Ise),e(Ise,bbo),b(f,jPe,_),b(f,xo,_),M(CA,xo,null),e(xo,vbo),e(xo,wi),e(wi,Fbo),e(wi,Eq),e(Eq,Tbo),e(wi,Mbo),e(wi,Cq),e(Cq,Ebo),e(wi,Cbo),e(xo,wbo),e(xo,wA),e(wA,Abo),e(wA,qse),e(qse,ybo),e(wA,Lbo),e(xo,xbo),e(xo,rt),M(AA,rt,null),e(rt,$bo),e(rt,Nse),e(Nse,kbo),e(rt,Sbo),e(rt,Ai),e(Ai,Rbo),e(Ai,jse),e(jse,Bbo),e(Ai,Pbo),e(Ai,wq),e(wq,Ibo),e(Ai,qbo),e(rt,Nbo),M(Bu,rt,null),e(xo,jbo),e(xo,Ue),M(yA,Ue,null),e(Ue,Dbo),e(Ue,Dse),e(Dse,Gbo),e(Ue,Obo),e(Ue,ya),e(ya,Vbo),e(ya,Gse),e(Gse,Xbo),e(ya,zbo),e(ya,Ose),e(Ose,Qbo),e(ya,Wbo),e(ya,Vse),e(Vse,Hbo),e(ya,Ubo),e(Ue,Jbo),e(Ue,G),e(G,Pu),e(Pu,Xse),e(Xse,Ybo),e(Pu,Kbo),e(Pu,Aq),e(Aq,Zbo),e(Pu,e2o),e(G,o2o),e(G,Iu),e(Iu,zse),e(zse,r2o),e(Iu,t2o),e(Iu,yq),e(yq,a2o),e(Iu,n2o),e(G,s2o),e(G,qu),e(qu,Qse),e(Qse,l2o),e(qu,i2o),e(qu,Lq),e(Lq,d2o),e(qu,c2o),e(G,f2o),e(G,Nu),e(Nu,Wse),e(Wse,m2o),e(Nu,g2o),e(Nu,xq),e(xq,h2o),e(Nu,p2o),e(G,u2o),e(G,ju),e(ju,Hse),e(Hse,_2o),e(ju,b2o),e(ju,$q),e($q,v2o),e(ju,F2o),e(G,T2o),e(G,Du),e(Du,Use),e(Use,M2o),e(Du,E2o),e(Du,kq),e(kq,C2o),e(Du,w2o),e(G,A2o),e(G,Gu),e(Gu,Jse),e(Jse,y2o),e(Gu,L2o),e(Gu,Sq),e(Sq,x2o),e(Gu,$2o),e(G,k2o),e(G,Ou),e(Ou,Yse),e(Yse,S2o),e(Ou,R2o),e(Ou,Rq),e(Rq,B2o),e(Ou,P2o),e(G,I2o),e(G,Vu),e(Vu,Kse),e(Kse,q2o),e(Vu,N2o),e(Vu,Bq),e(Bq,j2o),e(Vu,D2o),e(G,G2o),e(G,Xu),e(Xu,Zse),e(Zse,O2o),e(Xu,V2o),e(Xu,Pq),e(Pq,X2o),e(Xu,z2o),e(G,Q2o),e(G,zu),e(zu,ele),e(ele,W2o),e(zu,H2o),e(zu,Iq),e(Iq,U2o),e(zu,J2o),e(G,Y2o),e(G,Qu),e(Qu,ole),e(ole,K2o),e(Qu,Z2o),e(Qu,qq),e(qq,evo),e(Qu,ovo),e(G,rvo),e(G,Wu),e(Wu,rle),e(rle,tvo),e(Wu,avo),e(Wu,Nq),e(Nq,nvo),e(Wu,svo),e(G,lvo),e(G,Hu),e(Hu,tle),e(tle,ivo),e(Hu,dvo),e(Hu,jq),e(jq,cvo),e(Hu,fvo),e(G,mvo),e(G,Uu),e(Uu,ale),e(ale,gvo),e(Uu,hvo),e(Uu,Dq),e(Dq,pvo),e(Uu,uvo),e(G,_vo),e(G,Ju),e(Ju,nle),e(nle,bvo),e(Ju,vvo),e(Ju,Gq),e(Gq,Fvo),e(Ju,Tvo),e(G,Mvo),e(G,Yu),e(Yu,sle),e(sle,Evo),e(Yu,Cvo),e(Yu,Oq),e(Oq,wvo),e(Yu,Avo),e(G,yvo),e(G,Ku),e(Ku,lle),e(lle,Lvo),e(Ku,xvo),e(Ku,Vq),e(Vq,$vo),e(Ku,kvo),e(G,Svo),e(G,Zu),e(Zu,ile),e(ile,Rvo),e(Zu,Bvo),e(Zu,Xq),e(Xq,Pvo),e(Zu,Ivo),e(G,qvo),e(G,e_),e(e_,dle),e(dle,Nvo),e(e_,jvo),e(e_,zq),e(zq,Dvo),e(e_,Gvo),e(G,Ovo),e(G,o_),e(o_,cle),e(cle,Vvo),e(o_,Xvo),e(o_,Qq),e(Qq,zvo),e(o_,Qvo),e(G,Wvo),e(G,r_),e(r_,fle),e(fle,Hvo),e(r_,Uvo),e(r_,Wq),e(Wq,Jvo),e(r_,Yvo),e(G,Kvo),e(G,t_),e(t_,mle),e(mle,Zvo),e(t_,eFo),e(t_,Hq),e(Hq,oFo),e(t_,rFo),e(G,tFo),e(G,a_),e(a_,gle),e(gle,aFo),e(a_,nFo),e(a_,Uq),e(Uq,sFo),e(a_,lFo),e(G,iFo),e(G,n_),e(n_,hle),e(hle,dFo),e(n_,cFo),e(n_,Jq),e(Jq,fFo),e(n_,mFo),e(G,gFo),e(G,s_),e(s_,ple),e(ple,hFo),e(s_,pFo),e(s_,Yq),e(Yq,uFo),e(s_,_Fo),e(G,bFo),e(G,l_),e(l_,ule),e(ule,vFo),e(l_,FFo),e(l_,Kq),e(Kq,TFo),e(l_,MFo),e(G,EFo),e(G,i_),e(i_,_le),e(_le,CFo),e(i_,wFo),e(i_,Zq),e(Zq,AFo),e(i_,yFo),e(G,LFo),e(G,d_),e(d_,ble),e(ble,xFo),e(d_,$Fo),e(d_,eN),e(eN,kFo),e(d_,SFo),e(G,RFo),e(G,c_),e(c_,vle),e(vle,BFo),e(c_,PFo),e(c_,oN),e(oN,IFo),e(c_,qFo),e(G,NFo),e(G,f_),e(f_,Fle),e(Fle,jFo),e(f_,DFo),e(f_,rN),e(rN,GFo),e(f_,OFo),e(G,VFo),e(G,m_),e(m_,Tle),e(Tle,XFo),e(m_,zFo),e(m_,tN),e(tN,QFo),e(m_,WFo),e(G,HFo),e(G,g_),e(g_,Mle),e(Mle,UFo),e(g_,JFo),e(g_,aN),e(aN,YFo),e(g_,KFo),e(G,ZFo),e(G,h_),e(h_,Ele),e(Ele,e0o),e(h_,o0o),e(h_,nN),e(nN,r0o),e(h_,t0o),e(G,a0o),e(G,p_),e(p_,Cle),e(Cle,n0o),e(p_,s0o),e(p_,sN),e(sN,l0o),e(p_,i0o),e(G,d0o),e(G,u_),e(u_,wle),e(wle,c0o),e(u_,f0o),e(u_,lN),e(lN,m0o),e(u_,g0o),e(G,h0o),e(G,__),e(__,Ale),e(Ale,p0o),e(__,u0o),e(__,iN),e(iN,_0o),e(__,b0o),e(G,v0o),e(G,b_),e(b_,yle),e(yle,F0o),e(b_,T0o),e(b_,dN),e(dN,M0o),e(b_,E0o),e(G,C0o),e(G,v_),e(v_,Lle),e(Lle,w0o),e(v_,A0o),e(v_,cN),e(cN,y0o),e(v_,L0o),e(Ue,x0o),e(Ue,F_),e(F_,$0o),e(F_,xle),e(xle,k0o),e(F_,S0o),e(F_,$le),e($le,R0o),e(Ue,B0o),M(T_,Ue,null),b(f,DPe,_),b(f,yi,_),e(yi,M_),e(M_,kle),M(LA,kle,null),e(yi,P0o),e(yi,Sle),e(Sle,I0o),b(f,GPe,_),b(f,$o,_),M(xA,$o,null),e($o,q0o),e($o,Li),e(Li,N0o),e(Li,fN),e(fN,j0o),e(Li,D0o),e(Li,mN),e(mN,G0o),e(Li,O0o),e($o,V0o),e($o,$A),e($A,X0o),e($A,Rle),e(Rle,z0o),e($A,Q0o),e($o,W0o),e($o,tt),M(kA,tt,null),e(tt,H0o),e(tt,Ble),e(Ble,U0o),e(tt,J0o),e(tt,xi),e(xi,Y0o),e(xi,Ple),e(Ple,K0o),e(xi,Z0o),e(xi,gN),e(gN,eTo),e(xi,oTo),e(tt,rTo),M(E_,tt,null),e($o,tTo),e($o,Je),M(SA,Je,null),e(Je,aTo),e(Je,Ile),e(Ile,nTo),e(Je,sTo),e(Je,La),e(La,lTo),e(La,qle),e(qle,iTo),e(La,dTo),e(La,Nle),e(Nle,cTo),e(La,fTo),e(La,jle),e(jle,mTo),e(La,gTo),e(Je,hTo),e(Je,z),e(z,C_),e(C_,Dle),e(Dle,pTo),e(C_,uTo),e(C_,hN),e(hN,_To),e(C_,bTo),e(z,vTo),e(z,w_),e(w_,Gle),e(Gle,FTo),e(w_,TTo),e(w_,pN),e(pN,MTo),e(w_,ETo),e(z,CTo),e(z,A_),e(A_,Ole),e(Ole,wTo),e(A_,ATo),e(A_,uN),e(uN,yTo),e(A_,LTo),e(z,xTo),e(z,y_),e(y_,Vle),e(Vle,$To),e(y_,kTo),e(y_,_N),e(_N,STo),e(y_,RTo),e(z,BTo),e(z,L_),e(L_,Xle),e(Xle,PTo),e(L_,ITo),e(L_,bN),e(bN,qTo),e(L_,NTo),e(z,jTo),e(z,x_),e(x_,zle),e(zle,DTo),e(x_,GTo),e(x_,vN),e(vN,OTo),e(x_,VTo),e(z,XTo),e(z,$_),e($_,Qle),e(Qle,zTo),e($_,QTo),e($_,FN),e(FN,WTo),e($_,HTo),e(z,UTo),e(z,k_),e(k_,Wle),e(Wle,JTo),e(k_,YTo),e(k_,TN),e(TN,KTo),e(k_,ZTo),e(z,e7o),e(z,S_),e(S_,Hle),e(Hle,o7o),e(S_,r7o),e(S_,MN),e(MN,t7o),e(S_,a7o),e(z,n7o),e(z,R_),e(R_,Ule),e(Ule,s7o),e(R_,l7o),e(R_,EN),e(EN,i7o),e(R_,d7o),e(z,c7o),e(z,B_),e(B_,Jle),e(Jle,f7o),e(B_,m7o),e(B_,CN),e(CN,g7o),e(B_,h7o),e(z,p7o),e(z,P_),e(P_,Yle),e(Yle,u7o),e(P_,_7o),e(P_,wN),e(wN,b7o),e(P_,v7o),e(z,F7o),e(z,I_),e(I_,Kle),e(Kle,T7o),e(I_,M7o),e(I_,AN),e(AN,E7o),e(I_,C7o),e(z,w7o),e(z,q_),e(q_,Zle),e(Zle,A7o),e(q_,y7o),e(q_,yN),e(yN,L7o),e(q_,x7o),e(z,$7o),e(z,N_),e(N_,eie),e(eie,k7o),e(N_,S7o),e(N_,LN),e(LN,R7o),e(N_,B7o),e(z,P7o),e(z,j_),e(j_,oie),e(oie,I7o),e(j_,q7o),e(j_,xN),e(xN,N7o),e(j_,j7o),e(z,D7o),e(z,D_),e(D_,rie),e(rie,G7o),e(D_,O7o),e(D_,$N),e($N,V7o),e(D_,X7o),e(z,z7o),e(z,G_),e(G_,tie),e(tie,Q7o),e(G_,W7o),e(G_,kN),e(kN,H7o),e(G_,U7o),e(z,J7o),e(z,O_),e(O_,aie),e(aie,Y7o),e(O_,K7o),e(O_,SN),e(SN,Z7o),e(O_,eMo),e(z,oMo),e(z,V_),e(V_,nie),e(nie,rMo),e(V_,tMo),e(V_,RN),e(RN,aMo),e(V_,nMo),e(z,sMo),e(z,X_),e(X_,sie),e(sie,lMo),e(X_,iMo),e(X_,BN),e(BN,dMo),e(X_,cMo),e(z,fMo),e(z,z_),e(z_,lie),e(lie,mMo),e(z_,gMo),e(z_,PN),e(PN,hMo),e(z_,pMo),e(z,uMo),e(z,Q_),e(Q_,iie),e(iie,_Mo),e(Q_,bMo),e(Q_,IN),e(IN,vMo),e(Q_,FMo),e(z,TMo),e(z,W_),e(W_,die),e(die,MMo),e(W_,EMo),e(W_,qN),e(qN,CMo),e(W_,wMo),e(z,AMo),e(z,H_),e(H_,cie),e(cie,yMo),e(H_,LMo),e(H_,NN),e(NN,xMo),e(H_,$Mo),e(z,kMo),e(z,U_),e(U_,fie),e(fie,SMo),e(U_,RMo),e(U_,jN),e(jN,BMo),e(U_,PMo),e(z,IMo),e(z,J_),e(J_,mie),e(mie,qMo),e(J_,NMo),e(J_,DN),e(DN,jMo),e(J_,DMo),e(z,GMo),e(z,Y_),e(Y_,gie),e(gie,OMo),e(Y_,VMo),e(Y_,GN),e(GN,XMo),e(Y_,zMo),e(z,QMo),e(z,K_),e(K_,hie),e(hie,WMo),e(K_,HMo),e(K_,ON),e(ON,UMo),e(K_,JMo),e(z,YMo),e(z,Z_),e(Z_,pie),e(pie,KMo),e(Z_,ZMo),e(Z_,VN),e(VN,e4o),e(Z_,o4o),e(z,r4o),e(z,e1),e(e1,uie),e(uie,t4o),e(e1,a4o),e(e1,XN),e(XN,n4o),e(e1,s4o),e(z,l4o),e(z,o1),e(o1,_ie),e(_ie,i4o),e(o1,d4o),e(o1,zN),e(zN,c4o),e(o1,f4o),e(z,m4o),e(z,r1),e(r1,bie),e(bie,g4o),e(r1,h4o),e(r1,QN),e(QN,p4o),e(r1,u4o),e(z,_4o),e(z,t1),e(t1,vie),e(vie,b4o),e(t1,v4o),e(t1,WN),e(WN,F4o),e(t1,T4o),e(z,M4o),e(z,a1),e(a1,Fie),e(Fie,E4o),e(a1,C4o),e(a1,HN),e(HN,w4o),e(a1,A4o),e(z,y4o),e(z,n1),e(n1,Tie),e(Tie,L4o),e(n1,x4o),e(n1,UN),e(UN,$4o),e(n1,k4o),e(Je,S4o),e(Je,s1),e(s1,R4o),e(s1,Mie),e(Mie,B4o),e(s1,P4o),e(s1,Eie),e(Eie,I4o),e(Je,q4o),M(l1,Je,null),b(f,OPe,_),b(f,$i,_),e($i,i1),e(i1,Cie),M(RA,Cie,null),e($i,N4o),e($i,wie),e(wie,j4o),b(f,VPe,_),b(f,ko,_),M(BA,ko,null),e(ko,D4o),e(ko,ki),e(ki,G4o),e(ki,JN),e(JN,O4o),e(ki,V4o),e(ki,YN),e(YN,X4o),e(ki,z4o),e(ko,Q4o),e(ko,PA),e(PA,W4o),e(PA,Aie),e(Aie,H4o),e(PA,U4o),e(ko,J4o),e(ko,at),M(IA,at,null),e(at,Y4o),e(at,yie),e(yie,K4o),e(at,Z4o),e(at,Si),e(Si,eEo),e(Si,Lie),e(Lie,oEo),e(Si,rEo),e(Si,KN),e(KN,tEo),e(Si,aEo),e(at,nEo),M(d1,at,null),e(ko,sEo),e(ko,Ye),M(qA,Ye,null),e(Ye,lEo),e(Ye,xie),e(xie,iEo),e(Ye,dEo),e(Ye,xa),e(xa,cEo),e(xa,$ie),e($ie,fEo),e(xa,mEo),e(xa,kie),e(kie,gEo),e(xa,hEo),e(xa,Sie),e(Sie,pEo),e(xa,uEo),e(Ye,_Eo),e(Ye,Q),e(Q,c1),e(c1,Rie),e(Rie,bEo),e(c1,vEo),e(c1,ZN),e(ZN,FEo),e(c1,TEo),e(Q,MEo),e(Q,f1),e(f1,Bie),e(Bie,EEo),e(f1,CEo),e(f1,ej),e(ej,wEo),e(f1,AEo),e(Q,yEo),e(Q,m1),e(m1,Pie),e(Pie,LEo),e(m1,xEo),e(m1,oj),e(oj,$Eo),e(m1,kEo),e(Q,SEo),e(Q,g1),e(g1,Iie),e(Iie,REo),e(g1,BEo),e(g1,rj),e(rj,PEo),e(g1,IEo),e(Q,qEo),e(Q,h1),e(h1,qie),e(qie,NEo),e(h1,jEo),e(h1,tj),e(tj,DEo),e(h1,GEo),e(Q,OEo),e(Q,p1),e(p1,Nie),e(Nie,VEo),e(p1,XEo),e(p1,aj),e(aj,zEo),e(p1,QEo),e(Q,WEo),e(Q,u1),e(u1,jie),e(jie,HEo),e(u1,UEo),e(u1,nj),e(nj,JEo),e(u1,YEo),e(Q,KEo),e(Q,_1),e(_1,Die),e(Die,ZEo),e(_1,e5o),e(_1,sj),e(sj,o5o),e(_1,r5o),e(Q,t5o),e(Q,b1),e(b1,Gie),e(Gie,a5o),e(b1,n5o),e(b1,lj),e(lj,s5o),e(b1,l5o),e(Q,i5o),e(Q,v1),e(v1,Oie),e(Oie,d5o),e(v1,c5o),e(v1,ij),e(ij,f5o),e(v1,m5o),e(Q,g5o),e(Q,F1),e(F1,Vie),e(Vie,h5o),e(F1,p5o),e(F1,dj),e(dj,u5o),e(F1,_5o),e(Q,b5o),e(Q,T1),e(T1,Xie),e(Xie,v5o),e(T1,F5o),e(T1,cj),e(cj,T5o),e(T1,M5o),e(Q,E5o),e(Q,M1),e(M1,zie),e(zie,C5o),e(M1,w5o),e(M1,fj),e(fj,A5o),e(M1,y5o),e(Q,L5o),e(Q,E1),e(E1,Qie),e(Qie,x5o),e(E1,$5o),e(E1,mj),e(mj,k5o),e(E1,S5o),e(Q,R5o),e(Q,C1),e(C1,Wie),e(Wie,B5o),e(C1,P5o),e(C1,gj),e(gj,I5o),e(C1,q5o),e(Q,N5o),e(Q,w1),e(w1,Hie),e(Hie,j5o),e(w1,D5o),e(w1,hj),e(hj,G5o),e(w1,O5o),e(Q,V5o),e(Q,A1),e(A1,Uie),e(Uie,X5o),e(A1,z5o),e(A1,pj),e(pj,Q5o),e(A1,W5o),e(Q,H5o),e(Q,y1),e(y1,Jie),e(Jie,U5o),e(y1,J5o),e(y1,uj),e(uj,Y5o),e(y1,K5o),e(Q,Z5o),e(Q,L1),e(L1,Yie),e(Yie,eCo),e(L1,oCo),e(L1,_j),e(_j,rCo),e(L1,tCo),e(Q,aCo),e(Q,x1),e(x1,Kie),e(Kie,nCo),e(x1,sCo),e(x1,bj),e(bj,lCo),e(x1,iCo),e(Q,dCo),e(Q,$1),e($1,Zie),e(Zie,cCo),e($1,fCo),e($1,vj),e(vj,mCo),e($1,gCo),e(Q,hCo),e(Q,k1),e(k1,ede),e(ede,pCo),e(k1,uCo),e(k1,Fj),e(Fj,_Co),e(k1,bCo),e(Q,vCo),e(Q,S1),e(S1,ode),e(ode,FCo),e(S1,TCo),e(S1,Tj),e(Tj,MCo),e(S1,ECo),e(Q,CCo),e(Q,R1),e(R1,rde),e(rde,wCo),e(R1,ACo),e(R1,Mj),e(Mj,yCo),e(R1,LCo),e(Q,xCo),e(Q,B1),e(B1,tde),e(tde,$Co),e(B1,kCo),e(B1,Ej),e(Ej,SCo),e(B1,RCo),e(Q,BCo),e(Q,P1),e(P1,ade),e(ade,PCo),e(P1,ICo),e(P1,Cj),e(Cj,qCo),e(P1,NCo),e(Q,jCo),e(Q,I1),e(I1,nde),e(nde,DCo),e(I1,GCo),e(I1,wj),e(wj,OCo),e(I1,VCo),e(Q,XCo),e(Q,q1),e(q1,sde),e(sde,zCo),e(q1,QCo),e(q1,Aj),e(Aj,WCo),e(q1,HCo),e(Q,UCo),e(Q,N1),e(N1,lde),e(lde,JCo),e(N1,YCo),e(N1,yj),e(yj,KCo),e(N1,ZCo),e(Q,e3o),e(Q,j1),e(j1,ide),e(ide,o3o),e(j1,r3o),e(j1,Lj),e(Lj,t3o),e(j1,a3o),e(Q,n3o),e(Q,D1),e(D1,dde),e(dde,s3o),e(D1,l3o),e(D1,cde),e(cde,i3o),e(D1,d3o),e(Q,c3o),e(Q,G1),e(G1,fde),e(fde,f3o),e(G1,m3o),e(G1,xj),e(xj,g3o),e(G1,h3o),e(Q,p3o),e(Q,O1),e(O1,mde),e(mde,u3o),e(O1,_3o),e(O1,$j),e($j,b3o),e(O1,v3o),e(Q,F3o),e(Q,V1),e(V1,gde),e(gde,T3o),e(V1,M3o),e(V1,kj),e(kj,E3o),e(V1,C3o),e(Q,w3o),e(Q,X1),e(X1,hde),e(hde,A3o),e(X1,y3o),e(X1,Sj),e(Sj,L3o),e(X1,x3o),e(Ye,$3o),e(Ye,z1),e(z1,k3o),e(z1,pde),e(pde,S3o),e(z1,R3o),e(z1,ude),e(ude,B3o),e(Ye,P3o),M(Q1,Ye,null),b(f,XPe,_),b(f,Ri,_),e(Ri,W1),e(W1,_de),M(NA,_de,null),e(Ri,I3o),e(Ri,bde),e(bde,q3o),b(f,zPe,_),b(f,So,_),M(jA,So,null),e(So,N3o),e(So,Bi),e(Bi,j3o),e(Bi,Rj),e(Rj,D3o),e(Bi,G3o),e(Bi,Bj),e(Bj,O3o),e(Bi,V3o),e(So,X3o),e(So,DA),e(DA,z3o),e(DA,vde),e(vde,Q3o),e(DA,W3o),e(So,H3o),e(So,nt),M(GA,nt,null),e(nt,U3o),e(nt,Fde),e(Fde,J3o),e(nt,Y3o),e(nt,Pi),e(Pi,K3o),e(Pi,Tde),e(Tde,Z3o),e(Pi,ewo),e(Pi,Pj),e(Pj,owo),e(Pi,rwo),e(nt,two),M(H1,nt,null),e(So,awo),e(So,Ke),M(OA,Ke,null),e(Ke,nwo),e(Ke,Mde),e(Mde,swo),e(Ke,lwo),e(Ke,$a),e($a,iwo),e($a,Ede),e(Ede,dwo),e($a,cwo),e($a,Cde),e(Cde,fwo),e($a,mwo),e($a,wde),e(wde,gwo),e($a,hwo),e(Ke,pwo),e(Ke,he),e(he,U1),e(U1,Ade),e(Ade,uwo),e(U1,_wo),e(U1,Ij),e(Ij,bwo),e(U1,vwo),e(he,Fwo),e(he,J1),e(J1,yde),e(yde,Two),e(J1,Mwo),e(J1,qj),e(qj,Ewo),e(J1,Cwo),e(he,wwo),e(he,Y1),e(Y1,Lde),e(Lde,Awo),e(Y1,ywo),e(Y1,Nj),e(Nj,Lwo),e(Y1,xwo),e(he,$wo),e(he,K1),e(K1,xde),e(xde,kwo),e(K1,Swo),e(K1,jj),e(jj,Rwo),e(K1,Bwo),e(he,Pwo),e(he,Z1),e(Z1,$de),e($de,Iwo),e(Z1,qwo),e(Z1,Dj),e(Dj,Nwo),e(Z1,jwo),e(he,Dwo),e(he,e8),e(e8,kde),e(kde,Gwo),e(e8,Owo),e(e8,Gj),e(Gj,Vwo),e(e8,Xwo),e(he,zwo),e(he,o8),e(o8,Sde),e(Sde,Qwo),e(o8,Wwo),e(o8,Oj),e(Oj,Hwo),e(o8,Uwo),e(he,Jwo),e(he,r8),e(r8,Rde),e(Rde,Ywo),e(r8,Kwo),e(r8,Vj),e(Vj,Zwo),e(r8,eAo),e(he,oAo),e(he,t8),e(t8,Bde),e(Bde,rAo),e(t8,tAo),e(t8,Xj),e(Xj,aAo),e(t8,nAo),e(he,sAo),e(he,a8),e(a8,Pde),e(Pde,lAo),e(a8,iAo),e(a8,zj),e(zj,dAo),e(a8,cAo),e(he,fAo),e(he,n8),e(n8,Ide),e(Ide,mAo),e(n8,gAo),e(n8,Qj),e(Qj,hAo),e(n8,pAo),e(he,uAo),e(he,s8),e(s8,qde),e(qde,_Ao),e(s8,bAo),e(s8,Wj),e(Wj,vAo),e(s8,FAo),e(he,TAo),e(he,l8),e(l8,Nde),e(Nde,MAo),e(l8,EAo),e(l8,Hj),e(Hj,CAo),e(l8,wAo),e(he,AAo),e(he,i8),e(i8,jde),e(jde,yAo),e(i8,LAo),e(i8,Uj),e(Uj,xAo),e(i8,$Ao),e(he,kAo),e(he,d8),e(d8,Dde),e(Dde,SAo),e(d8,RAo),e(d8,Jj),e(Jj,BAo),e(d8,PAo),e(he,IAo),e(he,c8),e(c8,Gde),e(Gde,qAo),e(c8,NAo),e(c8,Yj),e(Yj,jAo),e(c8,DAo),e(he,GAo),e(he,f8),e(f8,Ode),e(Ode,OAo),e(f8,VAo),e(f8,Kj),e(Kj,XAo),e(f8,zAo),e(Ke,QAo),e(Ke,m8),e(m8,WAo),e(m8,Vde),e(Vde,HAo),e(m8,UAo),e(m8,Xde),e(Xde,JAo),e(Ke,YAo),M(g8,Ke,null),b(f,QPe,_),b(f,Ii,_),e(Ii,h8),e(h8,zde),M(VA,zde,null),e(Ii,KAo),e(Ii,Qde),e(Qde,ZAo),b(f,WPe,_),b(f,Ro,_),M(XA,Ro,null),e(Ro,e6o),e(Ro,qi),e(qi,o6o),e(qi,Zj),e(Zj,r6o),e(qi,t6o),e(qi,eD),e(eD,a6o),e(qi,n6o),e(Ro,s6o),e(Ro,zA),e(zA,l6o),e(zA,Wde),e(Wde,i6o),e(zA,d6o),e(Ro,c6o),e(Ro,st),M(QA,st,null),e(st,f6o),e(st,Hde),e(Hde,m6o),e(st,g6o),e(st,Ni),e(Ni,h6o),e(Ni,Ude),e(Ude,p6o),e(Ni,u6o),e(Ni,oD),e(oD,_6o),e(Ni,b6o),e(st,v6o),M(p8,st,null),e(Ro,F6o),e(Ro,Ze),M(WA,Ze,null),e(Ze,T6o),e(Ze,Jde),e(Jde,M6o),e(Ze,E6o),e(Ze,ka),e(ka,C6o),e(ka,Yde),e(Yde,w6o),e(ka,A6o),e(ka,Kde),e(Kde,y6o),e(ka,L6o),e(ka,Zde),e(Zde,x6o),e(ka,$6o),e(Ze,k6o),e(Ze,q),e(q,u8),e(u8,ece),e(ece,S6o),e(u8,R6o),e(u8,rD),e(rD,B6o),e(u8,P6o),e(q,I6o),e(q,_8),e(_8,oce),e(oce,q6o),e(_8,N6o),e(_8,tD),e(tD,j6o),e(_8,D6o),e(q,G6o),e(q,b8),e(b8,rce),e(rce,O6o),e(b8,V6o),e(b8,aD),e(aD,X6o),e(b8,z6o),e(q,Q6o),e(q,v8),e(v8,tce),e(tce,W6o),e(v8,H6o),e(v8,nD),e(nD,U6o),e(v8,J6o),e(q,Y6o),e(q,F8),e(F8,ace),e(ace,K6o),e(F8,Z6o),e(F8,sD),e(sD,eyo),e(F8,oyo),e(q,ryo),e(q,T8),e(T8,nce),e(nce,tyo),e(T8,ayo),e(T8,lD),e(lD,nyo),e(T8,syo),e(q,lyo),e(q,M8),e(M8,sce),e(sce,iyo),e(M8,dyo),e(M8,iD),e(iD,cyo),e(M8,fyo),e(q,myo),e(q,E8),e(E8,lce),e(lce,gyo),e(E8,hyo),e(E8,dD),e(dD,pyo),e(E8,uyo),e(q,_yo),e(q,C8),e(C8,ice),e(ice,byo),e(C8,vyo),e(C8,cD),e(cD,Fyo),e(C8,Tyo),e(q,Myo),e(q,w8),e(w8,dce),e(dce,Eyo),e(w8,Cyo),e(w8,fD),e(fD,wyo),e(w8,Ayo),e(q,yyo),e(q,A8),e(A8,cce),e(cce,Lyo),e(A8,xyo),e(A8,mD),e(mD,$yo),e(A8,kyo),e(q,Syo),e(q,y8),e(y8,fce),e(fce,Ryo),e(y8,Byo),e(y8,gD),e(gD,Pyo),e(y8,Iyo),e(q,qyo),e(q,L8),e(L8,mce),e(mce,Nyo),e(L8,jyo),e(L8,hD),e(hD,Dyo),e(L8,Gyo),e(q,Oyo),e(q,x8),e(x8,gce),e(gce,Vyo),e(x8,Xyo),e(x8,pD),e(pD,zyo),e(x8,Qyo),e(q,Wyo),e(q,$8),e($8,hce),e(hce,Hyo),e($8,Uyo),e($8,uD),e(uD,Jyo),e($8,Yyo),e(q,Kyo),e(q,k8),e(k8,pce),e(pce,Zyo),e(k8,eLo),e(k8,_D),e(_D,oLo),e(k8,rLo),e(q,tLo),e(q,S8),e(S8,uce),e(uce,aLo),e(S8,nLo),e(S8,bD),e(bD,sLo),e(S8,lLo),e(q,iLo),e(q,R8),e(R8,_ce),e(_ce,dLo),e(R8,cLo),e(R8,vD),e(vD,fLo),e(R8,mLo),e(q,gLo),e(q,B8),e(B8,bce),e(bce,hLo),e(B8,pLo),e(B8,FD),e(FD,uLo),e(B8,_Lo),e(q,bLo),e(q,P8),e(P8,vce),e(vce,vLo),e(P8,FLo),e(P8,TD),e(TD,TLo),e(P8,MLo),e(q,ELo),e(q,I8),e(I8,Fce),e(Fce,CLo),e(I8,wLo),e(I8,MD),e(MD,ALo),e(I8,yLo),e(q,LLo),e(q,q8),e(q8,Tce),e(Tce,xLo),e(q8,$Lo),e(q8,ED),e(ED,kLo),e(q8,SLo),e(q,RLo),e(q,N8),e(N8,Mce),e(Mce,BLo),e(N8,PLo),e(N8,CD),e(CD,ILo),e(N8,qLo),e(q,NLo),e(q,j8),e(j8,Ece),e(Ece,jLo),e(j8,DLo),e(j8,wD),e(wD,GLo),e(j8,OLo),e(q,VLo),e(q,D8),e(D8,Cce),e(Cce,XLo),e(D8,zLo),e(D8,AD),e(AD,QLo),e(D8,WLo),e(q,HLo),e(q,G8),e(G8,wce),e(wce,ULo),e(G8,JLo),e(G8,yD),e(yD,YLo),e(G8,KLo),e(q,ZLo),e(q,O8),e(O8,Ace),e(Ace,exo),e(O8,oxo),e(O8,LD),e(LD,rxo),e(O8,txo),e(q,axo),e(q,V8),e(V8,yce),e(yce,nxo),e(V8,sxo),e(V8,xD),e(xD,lxo),e(V8,ixo),e(q,dxo),e(q,X8),e(X8,Lce),e(Lce,cxo),e(X8,fxo),e(X8,$D),e($D,mxo),e(X8,gxo),e(q,hxo),e(q,z8),e(z8,xce),e(xce,pxo),e(z8,uxo),e(z8,kD),e(kD,_xo),e(z8,bxo),e(q,vxo),e(q,Q8),e(Q8,$ce),e($ce,Fxo),e(Q8,Txo),e(Q8,SD),e(SD,Mxo),e(Q8,Exo),e(q,Cxo),e(q,W8),e(W8,kce),e(kce,wxo),e(W8,Axo),e(W8,RD),e(RD,yxo),e(W8,Lxo),e(q,xxo),e(q,H8),e(H8,Sce),e(Sce,$xo),e(H8,kxo),e(H8,BD),e(BD,Sxo),e(H8,Rxo),e(q,Bxo),e(q,U8),e(U8,Rce),e(Rce,Pxo),e(U8,Ixo),e(U8,PD),e(PD,qxo),e(U8,Nxo),e(q,jxo),e(q,J8),e(J8,Bce),e(Bce,Dxo),e(J8,Gxo),e(J8,ID),e(ID,Oxo),e(J8,Vxo),e(q,Xxo),e(q,Y8),e(Y8,Pce),e(Pce,zxo),e(Y8,Qxo),e(Y8,qD),e(qD,Wxo),e(Y8,Hxo),e(q,Uxo),e(q,K8),e(K8,Ice),e(Ice,Jxo),e(K8,Yxo),e(K8,ND),e(ND,Kxo),e(K8,Zxo),e(q,e9o),e(q,Z8),e(Z8,qce),e(qce,o9o),e(Z8,r9o),e(Z8,jD),e(jD,t9o),e(Z8,a9o),e(q,n9o),e(q,eb),e(eb,Nce),e(Nce,s9o),e(eb,l9o),e(eb,DD),e(DD,i9o),e(eb,d9o),e(q,c9o),e(q,ob),e(ob,jce),e(jce,f9o),e(ob,m9o),e(ob,GD),e(GD,g9o),e(ob,h9o),e(q,p9o),e(q,rb),e(rb,Dce),e(Dce,u9o),e(rb,_9o),e(rb,OD),e(OD,b9o),e(rb,v9o),e(q,F9o),e(q,tb),e(tb,Gce),e(Gce,T9o),e(tb,M9o),e(tb,VD),e(VD,E9o),e(tb,C9o),e(q,w9o),e(q,ab),e(ab,Oce),e(Oce,A9o),e(ab,y9o),e(ab,XD),e(XD,L9o),e(ab,x9o),e(q,$9o),e(q,nb),e(nb,Vce),e(Vce,k9o),e(nb,S9o),e(nb,zD),e(zD,R9o),e(nb,B9o),e(q,P9o),e(q,sb),e(sb,Xce),e(Xce,I9o),e(sb,q9o),e(sb,QD),e(QD,N9o),e(sb,j9o),e(q,D9o),e(q,lb),e(lb,zce),e(zce,G9o),e(lb,O9o),e(lb,WD),e(WD,V9o),e(lb,X9o),e(q,z9o),e(q,ib),e(ib,Qce),e(Qce,Q9o),e(ib,W9o),e(ib,HD),e(HD,H9o),e(ib,U9o),e(Ze,J9o),e(Ze,db),e(db,Y9o),e(db,Wce),e(Wce,K9o),e(db,Z9o),e(db,Hce),e(Hce,e$o),e(Ze,o$o),M(cb,Ze,null),b(f,HPe,_),b(f,ji,_),e(ji,fb),e(fb,Uce),M(HA,Uce,null),e(ji,r$o),e(ji,Jce),e(Jce,t$o),b(f,UPe,_),b(f,Bo,_),M(UA,Bo,null),e(Bo,a$o),e(Bo,Di),e(Di,n$o),e(Di,UD),e(UD,s$o),e(Di,l$o),e(Di,JD),e(JD,i$o),e(Di,d$o),e(Bo,c$o),e(Bo,JA),e(JA,f$o),e(JA,Yce),e(Yce,m$o),e(JA,g$o),e(Bo,h$o),e(Bo,lt),M(YA,lt,null),e(lt,p$o),e(lt,Kce),e(Kce,u$o),e(lt,_$o),e(lt,Gi),e(Gi,b$o),e(Gi,Zce),e(Zce,v$o),e(Gi,F$o),e(Gi,YD),e(YD,T$o),e(Gi,M$o),e(lt,E$o),M(mb,lt,null),e(Bo,C$o),e(Bo,eo),M(KA,eo,null),e(eo,w$o),e(eo,efe),e(efe,A$o),e(eo,y$o),e(eo,Sa),e(Sa,L$o),e(Sa,ofe),e(ofe,x$o),e(Sa,$$o),e(Sa,rfe),e(rfe,k$o),e(Sa,S$o),e(Sa,tfe),e(tfe,R$o),e(Sa,B$o),e(eo,P$o),e(eo,Y),e(Y,gb),e(gb,afe),e(afe,I$o),e(gb,q$o),e(gb,KD),e(KD,N$o),e(gb,j$o),e(Y,D$o),e(Y,hb),e(hb,nfe),e(nfe,G$o),e(hb,O$o),e(hb,ZD),e(ZD,V$o),e(hb,X$o),e(Y,z$o),e(Y,pb),e(pb,sfe),e(sfe,Q$o),e(pb,W$o),e(pb,eG),e(eG,H$o),e(pb,U$o),e(Y,J$o),e(Y,ub),e(ub,lfe),e(lfe,Y$o),e(ub,K$o),e(ub,oG),e(oG,Z$o),e(ub,eko),e(Y,oko),e(Y,_b),e(_b,ife),e(ife,rko),e(_b,tko),e(_b,rG),e(rG,ako),e(_b,nko),e(Y,sko),e(Y,bb),e(bb,dfe),e(dfe,lko),e(bb,iko),e(bb,tG),e(tG,dko),e(bb,cko),e(Y,fko),e(Y,vb),e(vb,cfe),e(cfe,mko),e(vb,gko),e(vb,aG),e(aG,hko),e(vb,pko),e(Y,uko),e(Y,Fb),e(Fb,ffe),e(ffe,_ko),e(Fb,bko),e(Fb,nG),e(nG,vko),e(Fb,Fko),e(Y,Tko),e(Y,Tb),e(Tb,mfe),e(mfe,Mko),e(Tb,Eko),e(Tb,sG),e(sG,Cko),e(Tb,wko),e(Y,Ako),e(Y,Mb),e(Mb,gfe),e(gfe,yko),e(Mb,Lko),e(Mb,lG),e(lG,xko),e(Mb,$ko),e(Y,kko),e(Y,Eb),e(Eb,hfe),e(hfe,Sko),e(Eb,Rko),e(Eb,iG),e(iG,Bko),e(Eb,Pko),e(Y,Iko),e(Y,Cb),e(Cb,pfe),e(pfe,qko),e(Cb,Nko),e(Cb,dG),e(dG,jko),e(Cb,Dko),e(Y,Gko),e(Y,wb),e(wb,ufe),e(ufe,Oko),e(wb,Vko),e(wb,cG),e(cG,Xko),e(wb,zko),e(Y,Qko),e(Y,Ab),e(Ab,_fe),e(_fe,Wko),e(Ab,Hko),e(Ab,fG),e(fG,Uko),e(Ab,Jko),e(Y,Yko),e(Y,yb),e(yb,bfe),e(bfe,Kko),e(yb,Zko),e(yb,mG),e(mG,eSo),e(yb,oSo),e(Y,rSo),e(Y,Lb),e(Lb,vfe),e(vfe,tSo),e(Lb,aSo),e(Lb,gG),e(gG,nSo),e(Lb,sSo),e(Y,lSo),e(Y,xb),e(xb,Ffe),e(Ffe,iSo),e(xb,dSo),e(xb,hG),e(hG,cSo),e(xb,fSo),e(Y,mSo),e(Y,$b),e($b,Tfe),e(Tfe,gSo),e($b,hSo),e($b,pG),e(pG,pSo),e($b,uSo),e(Y,_So),e(Y,kb),e(kb,Mfe),e(Mfe,bSo),e(kb,vSo),e(kb,uG),e(uG,FSo),e(kb,TSo),e(Y,MSo),e(Y,Sb),e(Sb,Efe),e(Efe,ESo),e(Sb,CSo),e(Sb,_G),e(_G,wSo),e(Sb,ASo),e(Y,ySo),e(Y,Rb),e(Rb,Cfe),e(Cfe,LSo),e(Rb,xSo),e(Rb,bG),e(bG,$So),e(Rb,kSo),e(Y,SSo),e(Y,Bb),e(Bb,wfe),e(wfe,RSo),e(Bb,BSo),e(Bb,vG),e(vG,PSo),e(Bb,ISo),e(Y,qSo),e(Y,Pb),e(Pb,Afe),e(Afe,NSo),e(Pb,jSo),e(Pb,FG),e(FG,DSo),e(Pb,GSo),e(Y,OSo),e(Y,Ib),e(Ib,yfe),e(yfe,VSo),e(Ib,XSo),e(Ib,TG),e(TG,zSo),e(Ib,QSo),e(Y,WSo),e(Y,qb),e(qb,Lfe),e(Lfe,HSo),e(qb,USo),e(qb,MG),e(MG,JSo),e(qb,YSo),e(Y,KSo),e(Y,Nb),e(Nb,xfe),e(xfe,ZSo),e(Nb,eRo),e(Nb,EG),e(EG,oRo),e(Nb,rRo),e(Y,tRo),e(Y,jb),e(jb,$fe),e($fe,aRo),e(jb,nRo),e(jb,CG),e(CG,sRo),e(jb,lRo),e(Y,iRo),e(Y,Db),e(Db,kfe),e(kfe,dRo),e(Db,cRo),e(Db,wG),e(wG,fRo),e(Db,mRo),e(Y,gRo),e(Y,Gb),e(Gb,Sfe),e(Sfe,hRo),e(Gb,pRo),e(Gb,AG),e(AG,uRo),e(Gb,_Ro),e(eo,bRo),e(eo,Ob),e(Ob,vRo),e(Ob,Rfe),e(Rfe,FRo),e(Ob,TRo),e(Ob,Bfe),e(Bfe,MRo),e(eo,ERo),M(Vb,eo,null),b(f,JPe,_),b(f,Oi,_),e(Oi,Xb),e(Xb,Pfe),M(ZA,Pfe,null),e(Oi,CRo),e(Oi,Ife),e(Ife,wRo),b(f,YPe,_),b(f,Po,_),M(e6,Po,null),e(Po,ARo),e(Po,Vi),e(Vi,yRo),e(Vi,yG),e(yG,LRo),e(Vi,xRo),e(Vi,LG),e(LG,$Ro),e(Vi,kRo),e(Po,SRo),e(Po,o6),e(o6,RRo),e(o6,qfe),e(qfe,BRo),e(o6,PRo),e(Po,IRo),e(Po,it),M(r6,it,null),e(it,qRo),e(it,Nfe),e(Nfe,NRo),e(it,jRo),e(it,Xi),e(Xi,DRo),e(Xi,jfe),e(jfe,GRo),e(Xi,ORo),e(Xi,xG),e(xG,VRo),e(Xi,XRo),e(it,zRo),M(zb,it,null),e(Po,QRo),e(Po,oo),M(t6,oo,null),e(oo,WRo),e(oo,Dfe),e(Dfe,HRo),e(oo,URo),e(oo,Ra),e(Ra,JRo),e(Ra,Gfe),e(Gfe,YRo),e(Ra,KRo),e(Ra,Ofe),e(Ofe,ZRo),e(Ra,eBo),e(Ra,Vfe),e(Vfe,oBo),e(Ra,rBo),e(oo,tBo),e(oo,Yr),e(Yr,Qb),e(Qb,Xfe),e(Xfe,aBo),e(Qb,nBo),e(Qb,$G),e($G,sBo),e(Qb,lBo),e(Yr,iBo),e(Yr,Wb),e(Wb,zfe),e(zfe,dBo),e(Wb,cBo),e(Wb,kG),e(kG,fBo),e(Wb,mBo),e(Yr,gBo),e(Yr,Hb),e(Hb,Qfe),e(Qfe,hBo),e(Hb,pBo),e(Hb,SG),e(SG,uBo),e(Hb,_Bo),e(Yr,bBo),e(Yr,Ub),e(Ub,Wfe),e(Wfe,vBo),e(Ub,FBo),e(Ub,RG),e(RG,TBo),e(Ub,MBo),e(Yr,EBo),e(Yr,Jb),e(Jb,Hfe),e(Hfe,CBo),e(Jb,wBo),e(Jb,BG),e(BG,ABo),e(Jb,yBo),e(oo,LBo),e(oo,Yb),e(Yb,xBo),e(Yb,Ufe),e(Ufe,$Bo),e(Yb,kBo),e(Yb,Jfe),e(Jfe,SBo),e(oo,RBo),M(Kb,oo,null),b(f,KPe,_),b(f,zi,_),e(zi,Zb),e(Zb,Yfe),M(a6,Yfe,null),e(zi,BBo),e(zi,Kfe),e(Kfe,PBo),b(f,ZPe,_),b(f,Io,_),M(n6,Io,null),e(Io,IBo),e(Io,Qi),e(Qi,qBo),e(Qi,PG),e(PG,NBo),e(Qi,jBo),e(Qi,IG),e(IG,DBo),e(Qi,GBo),e(Io,OBo),e(Io,s6),e(s6,VBo),e(s6,Zfe),e(Zfe,XBo),e(s6,zBo),e(Io,QBo),e(Io,dt),M(l6,dt,null),e(dt,WBo),e(dt,eme),e(eme,HBo),e(dt,UBo),e(dt,Wi),e(Wi,JBo),e(Wi,ome),e(ome,YBo),e(Wi,KBo),e(Wi,qG),e(qG,ZBo),e(Wi,ePo),e(dt,oPo),M(e2,dt,null),e(Io,rPo),e(Io,ro),M(i6,ro,null),e(ro,tPo),e(ro,rme),e(rme,aPo),e(ro,nPo),e(ro,Ba),e(Ba,sPo),e(Ba,tme),e(tme,lPo),e(Ba,iPo),e(Ba,ame),e(ame,dPo),e(Ba,cPo),e(Ba,nme),e(nme,fPo),e(Ba,mPo),e(ro,gPo),e(ro,U),e(U,o2),e(o2,sme),e(sme,hPo),e(o2,pPo),e(o2,NG),e(NG,uPo),e(o2,_Po),e(U,bPo),e(U,r2),e(r2,lme),e(lme,vPo),e(r2,FPo),e(r2,jG),e(jG,TPo),e(r2,MPo),e(U,EPo),e(U,t2),e(t2,ime),e(ime,CPo),e(t2,wPo),e(t2,DG),e(DG,APo),e(t2,yPo),e(U,LPo),e(U,a2),e(a2,dme),e(dme,xPo),e(a2,$Po),e(a2,GG),e(GG,kPo),e(a2,SPo),e(U,RPo),e(U,n2),e(n2,cme),e(cme,BPo),e(n2,PPo),e(n2,OG),e(OG,IPo),e(n2,qPo),e(U,NPo),e(U,s2),e(s2,fme),e(fme,jPo),e(s2,DPo),e(s2,VG),e(VG,GPo),e(s2,OPo),e(U,VPo),e(U,l2),e(l2,mme),e(mme,XPo),e(l2,zPo),e(l2,XG),e(XG,QPo),e(l2,WPo),e(U,HPo),e(U,i2),e(i2,gme),e(gme,UPo),e(i2,JPo),e(i2,zG),e(zG,YPo),e(i2,KPo),e(U,ZPo),e(U,d2),e(d2,hme),e(hme,eIo),e(d2,oIo),e(d2,QG),e(QG,rIo),e(d2,tIo),e(U,aIo),e(U,c2),e(c2,pme),e(pme,nIo),e(c2,sIo),e(c2,WG),e(WG,lIo),e(c2,iIo),e(U,dIo),e(U,f2),e(f2,ume),e(ume,cIo),e(f2,fIo),e(f2,HG),e(HG,mIo),e(f2,gIo),e(U,hIo),e(U,m2),e(m2,_me),e(_me,pIo),e(m2,uIo),e(m2,UG),e(UG,_Io),e(m2,bIo),e(U,vIo),e(U,g2),e(g2,bme),e(bme,FIo),e(g2,TIo),e(g2,JG),e(JG,MIo),e(g2,EIo),e(U,CIo),e(U,h2),e(h2,vme),e(vme,wIo),e(h2,AIo),e(h2,YG),e(YG,yIo),e(h2,LIo),e(U,xIo),e(U,p2),e(p2,Fme),e(Fme,$Io),e(p2,kIo),e(p2,KG),e(KG,SIo),e(p2,RIo),e(U,BIo),e(U,u2),e(u2,Tme),e(Tme,PIo),e(u2,IIo),e(u2,ZG),e(ZG,qIo),e(u2,NIo),e(U,jIo),e(U,_2),e(_2,Mme),e(Mme,DIo),e(_2,GIo),e(_2,eO),e(eO,OIo),e(_2,VIo),e(U,XIo),e(U,b2),e(b2,Eme),e(Eme,zIo),e(b2,QIo),e(b2,oO),e(oO,WIo),e(b2,HIo),e(U,UIo),e(U,v2),e(v2,Cme),e(Cme,JIo),e(v2,YIo),e(v2,rO),e(rO,KIo),e(v2,ZIo),e(U,eqo),e(U,F2),e(F2,wme),e(wme,oqo),e(F2,rqo),e(F2,tO),e(tO,tqo),e(F2,aqo),e(U,nqo),e(U,T2),e(T2,Ame),e(Ame,sqo),e(T2,lqo),e(T2,aO),e(aO,iqo),e(T2,dqo),e(U,cqo),e(U,M2),e(M2,yme),e(yme,fqo),e(M2,mqo),e(M2,nO),e(nO,gqo),e(M2,hqo),e(U,pqo),e(U,E2),e(E2,Lme),e(Lme,uqo),e(E2,_qo),e(E2,sO),e(sO,bqo),e(E2,vqo),e(U,Fqo),e(U,C2),e(C2,xme),e(xme,Tqo),e(C2,Mqo),e(C2,lO),e(lO,Eqo),e(C2,Cqo),e(U,wqo),e(U,w2),e(w2,$me),e($me,Aqo),e(w2,yqo),e(w2,iO),e(iO,Lqo),e(w2,xqo),e(U,$qo),e(U,A2),e(A2,kme),e(kme,kqo),e(A2,Sqo),e(A2,dO),e(dO,Rqo),e(A2,Bqo),e(U,Pqo),e(U,y2),e(y2,Sme),e(Sme,Iqo),e(y2,qqo),e(y2,cO),e(cO,Nqo),e(y2,jqo),e(U,Dqo),e(U,L2),e(L2,Rme),e(Rme,Gqo),e(L2,Oqo),e(L2,fO),e(fO,Vqo),e(L2,Xqo),e(U,zqo),e(U,x2),e(x2,Bme),e(Bme,Qqo),e(x2,Wqo),e(x2,mO),e(mO,Hqo),e(x2,Uqo),e(U,Jqo),e(U,$2),e($2,Pme),e(Pme,Yqo),e($2,Kqo),e($2,gO),e(gO,Zqo),e($2,eNo),e(U,oNo),e(U,k2),e(k2,Ime),e(Ime,rNo),e(k2,tNo),e(k2,hO),e(hO,aNo),e(k2,nNo),e(U,sNo),e(U,S2),e(S2,qme),e(qme,lNo),e(S2,iNo),e(S2,pO),e(pO,dNo),e(S2,cNo),e(U,fNo),e(U,R2),e(R2,Nme),e(Nme,mNo),e(R2,gNo),e(R2,uO),e(uO,hNo),e(R2,pNo),e(ro,uNo),e(ro,B2),e(B2,_No),e(B2,jme),e(jme,bNo),e(B2,vNo),e(B2,Dme),e(Dme,FNo),e(ro,TNo),M(P2,ro,null),b(f,eIe,_),b(f,Hi,_),e(Hi,I2),e(I2,Gme),M(d6,Gme,null),e(Hi,MNo),e(Hi,Ome),e(Ome,ENo),b(f,oIe,_),b(f,qo,_),M(c6,qo,null),e(qo,CNo),e(qo,Ui),e(Ui,wNo),e(Ui,_O),e(_O,ANo),e(Ui,yNo),e(Ui,bO),e(bO,LNo),e(Ui,xNo),e(qo,$No),e(qo,f6),e(f6,kNo),e(f6,Vme),e(Vme,SNo),e(f6,RNo),e(qo,BNo),e(qo,ct),M(m6,ct,null),e(ct,PNo),e(ct,Xme),e(Xme,INo),e(ct,qNo),e(ct,Ji),e(Ji,NNo),e(Ji,zme),e(zme,jNo),e(Ji,DNo),e(Ji,vO),e(vO,GNo),e(Ji,ONo),e(ct,VNo),M(q2,ct,null),e(qo,XNo),e(qo,to),M(g6,to,null),e(to,zNo),e(to,Qme),e(Qme,QNo),e(to,WNo),e(to,Pa),e(Pa,HNo),e(Pa,Wme),e(Wme,UNo),e(Pa,JNo),e(Pa,Hme),e(Hme,YNo),e(Pa,KNo),e(Pa,Ume),e(Ume,ZNo),e(Pa,ejo),e(to,ojo),e(to,O),e(O,N2),e(N2,Jme),e(Jme,rjo),e(N2,tjo),e(N2,FO),e(FO,ajo),e(N2,njo),e(O,sjo),e(O,j2),e(j2,Yme),e(Yme,ljo),e(j2,ijo),e(j2,TO),e(TO,djo),e(j2,cjo),e(O,fjo),e(O,D2),e(D2,Kme),e(Kme,mjo),e(D2,gjo),e(D2,MO),e(MO,hjo),e(D2,pjo),e(O,ujo),e(O,G2),e(G2,Zme),e(Zme,_jo),e(G2,bjo),e(G2,EO),e(EO,vjo),e(G2,Fjo),e(O,Tjo),e(O,O2),e(O2,ege),e(ege,Mjo),e(O2,Ejo),e(O2,CO),e(CO,Cjo),e(O2,wjo),e(O,Ajo),e(O,V2),e(V2,oge),e(oge,yjo),e(V2,Ljo),e(V2,wO),e(wO,xjo),e(V2,$jo),e(O,kjo),e(O,X2),e(X2,rge),e(rge,Sjo),e(X2,Rjo),e(X2,AO),e(AO,Bjo),e(X2,Pjo),e(O,Ijo),e(O,z2),e(z2,tge),e(tge,qjo),e(z2,Njo),e(z2,yO),e(yO,jjo),e(z2,Djo),e(O,Gjo),e(O,Q2),e(Q2,age),e(age,Ojo),e(Q2,Vjo),e(Q2,LO),e(LO,Xjo),e(Q2,zjo),e(O,Qjo),e(O,W2),e(W2,nge),e(nge,Wjo),e(W2,Hjo),e(W2,xO),e(xO,Ujo),e(W2,Jjo),e(O,Yjo),e(O,H2),e(H2,sge),e(sge,Kjo),e(H2,Zjo),e(H2,$O),e($O,eDo),e(H2,oDo),e(O,rDo),e(O,U2),e(U2,lge),e(lge,tDo),e(U2,aDo),e(U2,kO),e(kO,nDo),e(U2,sDo),e(O,lDo),e(O,J2),e(J2,ige),e(ige,iDo),e(J2,dDo),e(J2,SO),e(SO,cDo),e(J2,fDo),e(O,mDo),e(O,Y2),e(Y2,dge),e(dge,gDo),e(Y2,hDo),e(Y2,RO),e(RO,pDo),e(Y2,uDo),e(O,_Do),e(O,K2),e(K2,cge),e(cge,bDo),e(K2,vDo),e(K2,BO),e(BO,FDo),e(K2,TDo),e(O,MDo),e(O,Z2),e(Z2,fge),e(fge,EDo),e(Z2,CDo),e(Z2,PO),e(PO,wDo),e(Z2,ADo),e(O,yDo),e(O,ev),e(ev,mge),e(mge,LDo),e(ev,xDo),e(ev,IO),e(IO,$Do),e(ev,kDo),e(O,SDo),e(O,ov),e(ov,gge),e(gge,RDo),e(ov,BDo),e(ov,qO),e(qO,PDo),e(ov,IDo),e(O,qDo),e(O,rv),e(rv,hge),e(hge,NDo),e(rv,jDo),e(rv,NO),e(NO,DDo),e(rv,GDo),e(O,ODo),e(O,tv),e(tv,pge),e(pge,VDo),e(tv,XDo),e(tv,jO),e(jO,zDo),e(tv,QDo),e(O,WDo),e(O,av),e(av,uge),e(uge,HDo),e(av,UDo),e(av,DO),e(DO,JDo),e(av,YDo),e(O,KDo),e(O,nv),e(nv,_ge),e(_ge,ZDo),e(nv,eGo),e(nv,GO),e(GO,oGo),e(nv,rGo),e(O,tGo),e(O,sv),e(sv,bge),e(bge,aGo),e(sv,nGo),e(sv,OO),e(OO,sGo),e(sv,lGo),e(O,iGo),e(O,lv),e(lv,vge),e(vge,dGo),e(lv,cGo),e(lv,VO),e(VO,fGo),e(lv,mGo),e(O,gGo),e(O,iv),e(iv,Fge),e(Fge,hGo),e(iv,pGo),e(iv,XO),e(XO,uGo),e(iv,_Go),e(O,bGo),e(O,dv),e(dv,Tge),e(Tge,vGo),e(dv,FGo),e(dv,zO),e(zO,TGo),e(dv,MGo),e(O,EGo),e(O,cv),e(cv,Mge),e(Mge,CGo),e(cv,wGo),e(cv,QO),e(QO,AGo),e(cv,yGo),e(O,LGo),e(O,fv),e(fv,Ege),e(Ege,xGo),e(fv,$Go),e(fv,WO),e(WO,kGo),e(fv,SGo),e(O,RGo),e(O,mv),e(mv,Cge),e(Cge,BGo),e(mv,PGo),e(mv,HO),e(HO,IGo),e(mv,qGo),e(O,NGo),e(O,gv),e(gv,wge),e(wge,jGo),e(gv,DGo),e(gv,UO),e(UO,GGo),e(gv,OGo),e(O,VGo),e(O,hv),e(hv,Age),e(Age,XGo),e(hv,zGo),e(hv,JO),e(JO,QGo),e(hv,WGo),e(O,HGo),e(O,pv),e(pv,yge),e(yge,UGo),e(pv,JGo),e(pv,YO),e(YO,YGo),e(pv,KGo),e(O,ZGo),e(O,uv),e(uv,Lge),e(Lge,eOo),e(uv,oOo),e(uv,KO),e(KO,rOo),e(uv,tOo),e(O,aOo),e(O,_v),e(_v,xge),e(xge,nOo),e(_v,sOo),e(_v,ZO),e(ZO,lOo),e(_v,iOo),e(O,dOo),e(O,bv),e(bv,$ge),e($ge,cOo),e(bv,fOo),e(bv,eV),e(eV,mOo),e(bv,gOo),e(O,hOo),e(O,vv),e(vv,kge),e(kge,pOo),e(vv,uOo),e(vv,oV),e(oV,_Oo),e(vv,bOo),e(O,vOo),e(O,Fv),e(Fv,Sge),e(Sge,FOo),e(Fv,TOo),e(Fv,rV),e(rV,MOo),e(Fv,EOo),e(O,COo),e(O,Tv),e(Tv,Rge),e(Rge,wOo),e(Tv,AOo),e(Tv,tV),e(tV,yOo),e(Tv,LOo),e(O,xOo),e(O,Mv),e(Mv,Bge),e(Bge,$Oo),e(Mv,kOo),e(Mv,aV),e(aV,SOo),e(Mv,ROo),e(to,BOo),e(to,Ev),e(Ev,POo),e(Ev,Pge),e(Pge,IOo),e(Ev,qOo),e(Ev,Ige),e(Ige,NOo),e(to,jOo),M(Cv,to,null),b(f,rIe,_),b(f,Yi,_),e(Yi,wv),e(wv,qge),M(h6,qge,null),e(Yi,DOo),e(Yi,Nge),e(Nge,GOo),b(f,tIe,_),b(f,No,_),M(p6,No,null),e(No,OOo),e(No,Ki),e(Ki,VOo),e(Ki,nV),e(nV,XOo),e(Ki,zOo),e(Ki,sV),e(sV,QOo),e(Ki,WOo),e(No,HOo),e(No,u6),e(u6,UOo),e(u6,jge),e(jge,JOo),e(u6,YOo),e(No,KOo),e(No,ft),M(_6,ft,null),e(ft,ZOo),e(ft,Dge),e(Dge,eVo),e(ft,oVo),e(ft,Zi),e(Zi,rVo),e(Zi,Gge),e(Gge,tVo),e(Zi,aVo),e(Zi,lV),e(lV,nVo),e(Zi,sVo),e(ft,lVo),M(Av,ft,null),e(No,iVo),e(No,ao),M(b6,ao,null),e(ao,dVo),e(ao,Oge),e(Oge,cVo),e(ao,fVo),e(ao,Ia),e(Ia,mVo),e(Ia,Vge),e(Vge,gVo),e(Ia,hVo),e(Ia,Xge),e(Xge,pVo),e(Ia,uVo),e(Ia,zge),e(zge,_Vo),e(Ia,bVo),e(ao,vVo),e(ao,Qge),e(Qge,yv),e(yv,Wge),e(Wge,FVo),e(yv,TVo),e(yv,iV),e(iV,MVo),e(yv,EVo),e(ao,CVo),e(ao,Lv),e(Lv,wVo),e(Lv,Hge),e(Hge,AVo),e(Lv,yVo),e(Lv,Uge),e(Uge,LVo),e(ao,xVo),M(xv,ao,null),b(f,aIe,_),b(f,ed,_),e(ed,$v),e($v,Jge),M(v6,Jge,null),e(ed,$Vo),e(ed,Yge),e(Yge,kVo),b(f,nIe,_),b(f,jo,_),M(F6,jo,null),e(jo,SVo),e(jo,od),e(od,RVo),e(od,dV),e(dV,BVo),e(od,PVo),e(od,cV),e(cV,IVo),e(od,qVo),e(jo,NVo),e(jo,T6),e(T6,jVo),e(T6,Kge),e(Kge,DVo),e(T6,GVo),e(jo,OVo),e(jo,mt),M(M6,mt,null),e(mt,VVo),e(mt,Zge),e(Zge,XVo),e(mt,zVo),e(mt,rd),e(rd,QVo),e(rd,ehe),e(ehe,WVo),e(rd,HVo),e(rd,fV),e(fV,UVo),e(rd,JVo),e(mt,YVo),M(kv,mt,null),e(jo,KVo),e(jo,no),M(E6,no,null),e(no,ZVo),e(no,ohe),e(ohe,eXo),e(no,oXo),e(no,qa),e(qa,rXo),e(qa,rhe),e(rhe,tXo),e(qa,aXo),e(qa,the),e(the,nXo),e(qa,sXo),e(qa,ahe),e(ahe,lXo),e(qa,iXo),e(no,dXo),e(no,ve),e(ve,Sv),e(Sv,nhe),e(nhe,cXo),e(Sv,fXo),e(Sv,mV),e(mV,mXo),e(Sv,gXo),e(ve,hXo),e(ve,Rv),e(Rv,she),e(she,pXo),e(Rv,uXo),e(Rv,gV),e(gV,_Xo),e(Rv,bXo),e(ve,vXo),e(ve,Bv),e(Bv,lhe),e(lhe,FXo),e(Bv,TXo),e(Bv,hV),e(hV,MXo),e(Bv,EXo),e(ve,CXo),e(ve,Rs),e(Rs,ihe),e(ihe,wXo),e(Rs,AXo),e(Rs,pV),e(pV,yXo),e(Rs,LXo),e(Rs,uV),e(uV,xXo),e(Rs,$Xo),e(ve,kXo),e(ve,Pv),e(Pv,dhe),e(dhe,SXo),e(Pv,RXo),e(Pv,_V),e(_V,BXo),e(Pv,PXo),e(ve,IXo),e(ve,gt),e(gt,che),e(che,qXo),e(gt,NXo),e(gt,bV),e(bV,jXo),e(gt,DXo),e(gt,vV),e(vV,GXo),e(gt,OXo),e(gt,FV),e(FV,VXo),e(gt,XXo),e(ve,zXo),e(ve,Iv),e(Iv,fhe),e(fhe,QXo),e(Iv,WXo),e(Iv,TV),e(TV,HXo),e(Iv,UXo),e(ve,JXo),e(ve,qv),e(qv,mhe),e(mhe,YXo),e(qv,KXo),e(qv,MV),e(MV,ZXo),e(qv,ezo),e(ve,ozo),e(ve,Nv),e(Nv,ghe),e(ghe,rzo),e(Nv,tzo),e(Nv,EV),e(EV,azo),e(Nv,nzo),e(ve,szo),e(ve,jv),e(jv,hhe),e(hhe,lzo),e(jv,izo),e(jv,CV),e(CV,dzo),e(jv,czo),e(ve,fzo),e(ve,Dv),e(Dv,phe),e(phe,mzo),e(Dv,gzo),e(Dv,wV),e(wV,hzo),e(Dv,pzo),e(ve,uzo),e(ve,Gv),e(Gv,uhe),e(uhe,_zo),e(Gv,bzo),e(Gv,AV),e(AV,vzo),e(Gv,Fzo),e(ve,Tzo),e(ve,Ov),e(Ov,_he),e(_he,Mzo),e(Ov,Ezo),e(Ov,yV),e(yV,Czo),e(Ov,wzo),e(no,Azo),e(no,Vv),e(Vv,yzo),e(Vv,bhe),e(bhe,Lzo),e(Vv,xzo),e(Vv,vhe),e(vhe,$zo),e(no,kzo),M(Xv,no,null),b(f,sIe,_),b(f,td,_),e(td,zv),e(zv,Fhe),M(C6,Fhe,null),e(td,Szo),e(td,The),e(The,Rzo),b(f,lIe,_),b(f,Do,_),M(w6,Do,null),e(Do,Bzo),e(Do,ad),e(ad,Pzo),e(ad,LV),e(LV,Izo),e(ad,qzo),e(ad,xV),e(xV,Nzo),e(ad,jzo),e(Do,Dzo),e(Do,A6),e(A6,Gzo),e(A6,Mhe),e(Mhe,Ozo),e(A6,Vzo),e(Do,Xzo),e(Do,ht),M(y6,ht,null),e(ht,zzo),e(ht,Ehe),e(Ehe,Qzo),e(ht,Wzo),e(ht,nd),e(nd,Hzo),e(nd,Che),e(Che,Uzo),e(nd,Jzo),e(nd,$V),e($V,Yzo),e(nd,Kzo),e(ht,Zzo),M(Qv,ht,null),e(Do,eQo),e(Do,so),M(L6,so,null),e(so,oQo),e(so,whe),e(whe,rQo),e(so,tQo),e(so,Na),e(Na,aQo),e(Na,Ahe),e(Ahe,nQo),e(Na,sQo),e(Na,yhe),e(yhe,lQo),e(Na,iQo),e(Na,Lhe),e(Lhe,dQo),e(Na,cQo),e(so,fQo),e(so,xhe),e(xhe,Wv),e(Wv,$he),e($he,mQo),e(Wv,gQo),e(Wv,kV),e(kV,hQo),e(Wv,pQo),e(so,uQo),e(so,Hv),e(Hv,_Qo),e(Hv,khe),e(khe,bQo),e(Hv,vQo),e(Hv,She),e(She,FQo),e(so,TQo),M(Uv,so,null),b(f,iIe,_),b(f,sd,_),e(sd,Jv),e(Jv,Rhe),M(x6,Rhe,null),e(sd,MQo),e(sd,Bhe),e(Bhe,EQo),b(f,dIe,_),b(f,Go,_),M($6,Go,null),e(Go,CQo),e(Go,ld),e(ld,wQo),e(ld,SV),e(SV,AQo),e(ld,yQo),e(ld,RV),e(RV,LQo),e(ld,xQo),e(Go,$Qo),e(Go,k6),e(k6,kQo),e(k6,Phe),e(Phe,SQo),e(k6,RQo),e(Go,BQo),e(Go,pt),M(S6,pt,null),e(pt,PQo),e(pt,Ihe),e(Ihe,IQo),e(pt,qQo),e(pt,id),e(id,NQo),e(id,qhe),e(qhe,jQo),e(id,DQo),e(id,BV),e(BV,GQo),e(id,OQo),e(pt,VQo),M(Yv,pt,null),e(Go,XQo),e(Go,lo),M(R6,lo,null),e(lo,zQo),e(lo,Nhe),e(Nhe,QQo),e(lo,WQo),e(lo,ja),e(ja,HQo),e(ja,jhe),e(jhe,UQo),e(ja,JQo),e(ja,Dhe),e(Dhe,YQo),e(ja,KQo),e(ja,Ghe),e(Ghe,ZQo),e(ja,eWo),e(lo,oWo),e(lo,Ne),e(Ne,Kv),e(Kv,Ohe),e(Ohe,rWo),e(Kv,tWo),e(Kv,PV),e(PV,aWo),e(Kv,nWo),e(Ne,sWo),e(Ne,Zv),e(Zv,Vhe),e(Vhe,lWo),e(Zv,iWo),e(Zv,IV),e(IV,dWo),e(Zv,cWo),e(Ne,fWo),e(Ne,eF),e(eF,Xhe),e(Xhe,mWo),e(eF,gWo),e(eF,qV),e(qV,hWo),e(eF,pWo),e(Ne,uWo),e(Ne,oF),e(oF,zhe),e(zhe,_Wo),e(oF,bWo),e(oF,NV),e(NV,vWo),e(oF,FWo),e(Ne,TWo),e(Ne,rF),e(rF,Qhe),e(Qhe,MWo),e(rF,EWo),e(rF,jV),e(jV,CWo),e(rF,wWo),e(Ne,AWo),e(Ne,tF),e(tF,Whe),e(Whe,yWo),e(tF,LWo),e(tF,DV),e(DV,xWo),e(tF,$Wo),e(Ne,kWo),e(Ne,aF),e(aF,Hhe),e(Hhe,SWo),e(aF,RWo),e(aF,GV),e(GV,BWo),e(aF,PWo),e(Ne,IWo),e(Ne,nF),e(nF,Uhe),e(Uhe,qWo),e(nF,NWo),e(nF,OV),e(OV,jWo),e(nF,DWo),e(lo,GWo),e(lo,sF),e(sF,OWo),e(sF,Jhe),e(Jhe,VWo),e(sF,XWo),e(sF,Yhe),e(Yhe,zWo),e(lo,QWo),M(lF,lo,null),b(f,cIe,_),b(f,dd,_),e(dd,iF),e(iF,Khe),M(B6,Khe,null),e(dd,WWo),e(dd,Zhe),e(Zhe,HWo),b(f,fIe,_),b(f,Oo,_),M(P6,Oo,null),e(Oo,UWo),e(Oo,cd),e(cd,JWo),e(cd,VV),e(VV,YWo),e(cd,KWo),e(cd,XV),e(XV,ZWo),e(cd,eHo),e(Oo,oHo),e(Oo,I6),e(I6,rHo),e(I6,epe),e(epe,tHo),e(I6,aHo),e(Oo,nHo),e(Oo,ut),M(q6,ut,null),e(ut,sHo),e(ut,ope),e(ope,lHo),e(ut,iHo),e(ut,fd),e(fd,dHo),e(fd,rpe),e(rpe,cHo),e(fd,fHo),e(fd,zV),e(zV,mHo),e(fd,gHo),e(ut,hHo),M(dF,ut,null),e(Oo,pHo),e(Oo,io),M(N6,io,null),e(io,uHo),e(io,tpe),e(tpe,_Ho),e(io,bHo),e(io,Da),e(Da,vHo),e(Da,ape),e(ape,FHo),e(Da,THo),e(Da,npe),e(npe,MHo),e(Da,EHo),e(Da,spe),e(spe,CHo),e(Da,wHo),e(io,AHo),e(io,Ga),e(Ga,cF),e(cF,lpe),e(lpe,yHo),e(cF,LHo),e(cF,QV),e(QV,xHo),e(cF,$Ho),e(Ga,kHo),e(Ga,fF),e(fF,ipe),e(ipe,SHo),e(fF,RHo),e(fF,WV),e(WV,BHo),e(fF,PHo),e(Ga,IHo),e(Ga,mF),e(mF,dpe),e(dpe,qHo),e(mF,NHo),e(mF,HV),e(HV,jHo),e(mF,DHo),e(Ga,GHo),e(Ga,gF),e(gF,cpe),e(cpe,OHo),e(gF,VHo),e(gF,UV),e(UV,XHo),e(gF,zHo),e(io,QHo),e(io,hF),e(hF,WHo),e(hF,fpe),e(fpe,HHo),e(hF,UHo),e(hF,mpe),e(mpe,JHo),e(io,YHo),M(pF,io,null),b(f,mIe,_),b(f,md,_),e(md,uF),e(uF,gpe),M(j6,gpe,null),e(md,KHo),e(md,hpe),e(hpe,ZHo),b(f,gIe,_),b(f,Vo,_),M(D6,Vo,null),e(Vo,eUo),e(Vo,gd),e(gd,oUo),e(gd,JV),e(JV,rUo),e(gd,tUo),e(gd,YV),e(YV,aUo),e(gd,nUo),e(Vo,sUo),e(Vo,G6),e(G6,lUo),e(G6,ppe),e(ppe,iUo),e(G6,dUo),e(Vo,cUo),e(Vo,_t),M(O6,_t,null),e(_t,fUo),e(_t,upe),e(upe,mUo),e(_t,gUo),e(_t,hd),e(hd,hUo),e(hd,_pe),e(_pe,pUo),e(hd,uUo),e(hd,KV),e(KV,_Uo),e(hd,bUo),e(_t,vUo),M(_F,_t,null),e(Vo,FUo),e(Vo,co),M(V6,co,null),e(co,TUo),e(co,bpe),e(bpe,MUo),e(co,EUo),e(co,Oa),e(Oa,CUo),e(Oa,vpe),e(vpe,wUo),e(Oa,AUo),e(Oa,Fpe),e(Fpe,yUo),e(Oa,LUo),e(Oa,Tpe),e(Tpe,xUo),e(Oa,$Uo),e(co,kUo),e(co,je),e(je,bF),e(bF,Mpe),e(Mpe,SUo),e(bF,RUo),e(bF,ZV),e(ZV,BUo),e(bF,PUo),e(je,IUo),e(je,vF),e(vF,Epe),e(Epe,qUo),e(vF,NUo),e(vF,eX),e(eX,jUo),e(vF,DUo),e(je,GUo),e(je,FF),e(FF,Cpe),e(Cpe,OUo),e(FF,VUo),e(FF,oX),e(oX,XUo),e(FF,zUo),e(je,QUo),e(je,TF),e(TF,wpe),e(wpe,WUo),e(TF,HUo),e(TF,rX),e(rX,UUo),e(TF,JUo),e(je,YUo),e(je,MF),e(MF,Ape),e(Ape,KUo),e(MF,ZUo),e(MF,tX),e(tX,eJo),e(MF,oJo),e(je,rJo),e(je,EF),e(EF,ype),e(ype,tJo),e(EF,aJo),e(EF,aX),e(aX,nJo),e(EF,sJo),e(je,lJo),e(je,CF),e(CF,Lpe),e(Lpe,iJo),e(CF,dJo),e(CF,nX),e(nX,cJo),e(CF,fJo),e(je,mJo),e(je,wF),e(wF,xpe),e(xpe,gJo),e(wF,hJo),e(wF,sX),e(sX,pJo),e(wF,uJo),e(co,_Jo),e(co,AF),e(AF,bJo),e(AF,$pe),e($pe,vJo),e(AF,FJo),e(AF,kpe),e(kpe,TJo),e(co,MJo),M(yF,co,null),b(f,hIe,_),b(f,pd,_),e(pd,LF),e(LF,Spe),M(X6,Spe,null),e(pd,EJo),e(pd,Rpe),e(Rpe,CJo),b(f,pIe,_),b(f,Xo,_),M(z6,Xo,null),e(Xo,wJo),e(Xo,ud),e(ud,AJo),e(ud,lX),e(lX,yJo),e(ud,LJo),e(ud,iX),e(iX,xJo),e(ud,$Jo),e(Xo,kJo),e(Xo,Q6),e(Q6,SJo),e(Q6,Bpe),e(Bpe,RJo),e(Q6,BJo),e(Xo,PJo),e(Xo,bt),M(W6,bt,null),e(bt,IJo),e(bt,Ppe),e(Ppe,qJo),e(bt,NJo),e(bt,_d),e(_d,jJo),e(_d,Ipe),e(Ipe,DJo),e(_d,GJo),e(_d,dX),e(dX,OJo),e(_d,VJo),e(bt,XJo),M(xF,bt,null),e(Xo,zJo),e(Xo,fo),M(H6,fo,null),e(fo,QJo),e(fo,qpe),e(qpe,WJo),e(fo,HJo),e(fo,Va),e(Va,UJo),e(Va,Npe),e(Npe,JJo),e(Va,YJo),e(Va,jpe),e(jpe,KJo),e(Va,ZJo),e(Va,Dpe),e(Dpe,eYo),e(Va,oYo),e(fo,rYo),e(fo,U6),e(U6,$F),e($F,Gpe),e(Gpe,tYo),e($F,aYo),e($F,cX),e(cX,nYo),e($F,sYo),e(U6,lYo),e(U6,kF),e(kF,Ope),e(Ope,iYo),e(kF,dYo),e(kF,fX),e(fX,cYo),e(kF,fYo),e(fo,mYo),e(fo,SF),e(SF,gYo),e(SF,Vpe),e(Vpe,hYo),e(SF,pYo),e(SF,Xpe),e(Xpe,uYo),e(fo,_Yo),M(RF,fo,null),b(f,uIe,_),b(f,bd,_),e(bd,BF),e(BF,zpe),M(J6,zpe,null),e(bd,bYo),e(bd,Qpe),e(Qpe,vYo),b(f,_Ie,_),b(f,zo,_),M(Y6,zo,null),e(zo,FYo),e(zo,vd),e(vd,TYo),e(vd,mX),e(mX,MYo),e(vd,EYo),e(vd,gX),e(gX,CYo),e(vd,wYo),e(zo,AYo),e(zo,K6),e(K6,yYo),e(K6,Wpe),e(Wpe,LYo),e(K6,xYo),e(zo,$Yo),e(zo,vt),M(Z6,vt,null),e(vt,kYo),e(vt,Hpe),e(Hpe,SYo),e(vt,RYo),e(vt,Fd),e(Fd,BYo),e(Fd,Upe),e(Upe,PYo),e(Fd,IYo),e(Fd,hX),e(hX,qYo),e(Fd,NYo),e(vt,jYo),M(PF,vt,null),e(zo,DYo),e(zo,mo),M(ey,mo,null),e(mo,GYo),e(mo,Jpe),e(Jpe,OYo),e(mo,VYo),e(mo,Xa),e(Xa,XYo),e(Xa,Ype),e(Ype,zYo),e(Xa,QYo),e(Xa,Kpe),e(Kpe,WYo),e(Xa,HYo),e(Xa,Zpe),e(Zpe,UYo),e(Xa,JYo),e(mo,YYo),e(mo,za),e(za,IF),e(IF,eue),e(eue,KYo),e(IF,ZYo),e(IF,pX),e(pX,eKo),e(IF,oKo),e(za,rKo),e(za,qF),e(qF,oue),e(oue,tKo),e(qF,aKo),e(qF,uX),e(uX,nKo),e(qF,sKo),e(za,lKo),e(za,NF),e(NF,rue),e(rue,iKo),e(NF,dKo),e(NF,_X),e(_X,cKo),e(NF,fKo),e(za,mKo),e(za,jF),e(jF,tue),e(tue,gKo),e(jF,hKo),e(jF,bX),e(bX,pKo),e(jF,uKo),e(mo,_Ko),e(mo,DF),e(DF,bKo),e(DF,aue),e(aue,vKo),e(DF,FKo),e(DF,nue),e(nue,TKo),e(mo,MKo),M(GF,mo,null),b(f,bIe,_),b(f,Td,_),e(Td,OF),e(OF,sue),M(oy,sue,null),e(Td,EKo),e(Td,lue),e(lue,CKo),b(f,vIe,_),b(f,Qo,_),M(ry,Qo,null),e(Qo,wKo),e(Qo,Md),e(Md,AKo),e(Md,vX),e(vX,yKo),e(Md,LKo),e(Md,FX),e(FX,xKo),e(Md,$Ko),e(Qo,kKo),e(Qo,ty),e(ty,SKo),e(ty,iue),e(iue,RKo),e(ty,BKo),e(Qo,PKo),e(Qo,Ft),M(ay,Ft,null),e(Ft,IKo),e(Ft,due),e(due,qKo),e(Ft,NKo),e(Ft,Ed),e(Ed,jKo),e(Ed,cue),e(cue,DKo),e(Ed,GKo),e(Ed,TX),e(TX,OKo),e(Ed,VKo),e(Ft,XKo),M(VF,Ft,null),e(Qo,zKo),e(Qo,go),M(ny,go,null),e(go,QKo),e(go,fue),e(fue,WKo),e(go,HKo),e(go,Qa),e(Qa,UKo),e(Qa,mue),e(mue,JKo),e(Qa,YKo),e(Qa,gue),e(gue,KKo),e(Qa,ZKo),e(Qa,hue),e(hue,eZo),e(Qa,oZo),e(go,rZo),e(go,Cd),e(Cd,XF),e(XF,pue),e(pue,tZo),e(XF,aZo),e(XF,MX),e(MX,nZo),e(XF,sZo),e(Cd,lZo),e(Cd,zF),e(zF,uue),e(uue,iZo),e(zF,dZo),e(zF,EX),e(EX,cZo),e(zF,fZo),e(Cd,mZo),e(Cd,QF),e(QF,_ue),e(_ue,gZo),e(QF,hZo),e(QF,CX),e(CX,pZo),e(QF,uZo),e(go,_Zo),e(go,WF),e(WF,bZo),e(WF,bue),e(bue,vZo),e(WF,FZo),e(WF,vue),e(vue,TZo),e(go,MZo),M(HF,go,null),b(f,FIe,_),b(f,wd,_),e(wd,UF),e(UF,Fue),M(sy,Fue,null),e(wd,EZo),e(wd,Tue),e(Tue,CZo),b(f,TIe,_),b(f,Wo,_),M(ly,Wo,null),e(Wo,wZo),e(Wo,Ad),e(Ad,AZo),e(Ad,wX),e(wX,yZo),e(Ad,LZo),e(Ad,AX),e(AX,xZo),e(Ad,$Zo),e(Wo,kZo),e(Wo,iy),e(iy,SZo),e(iy,Mue),e(Mue,RZo),e(iy,BZo),e(Wo,PZo),e(Wo,Tt),M(dy,Tt,null),e(Tt,IZo),e(Tt,Eue),e(Eue,qZo),e(Tt,NZo),e(Tt,yd),e(yd,jZo),e(yd,Cue),e(Cue,DZo),e(yd,GZo),e(yd,yX),e(yX,OZo),e(yd,VZo),e(Tt,XZo),M(JF,Tt,null),e(Wo,zZo),e(Wo,ho),M(cy,ho,null),e(ho,QZo),e(ho,wue),e(wue,WZo),e(ho,HZo),e(ho,Wa),e(Wa,UZo),e(Wa,Aue),e(Aue,JZo),e(Wa,YZo),e(Wa,yue),e(yue,KZo),e(Wa,ZZo),e(Wa,Lue),e(Lue,eer),e(Wa,oer),e(ho,rer),e(ho,fy),e(fy,YF),e(YF,xue),e(xue,ter),e(YF,aer),e(YF,LX),e(LX,ner),e(YF,ser),e(fy,ler),e(fy,KF),e(KF,$ue),e($ue,ier),e(KF,der),e(KF,xX),e(xX,cer),e(KF,fer),e(ho,mer),e(ho,ZF),e(ZF,ger),e(ZF,kue),e(kue,her),e(ZF,per),e(ZF,Sue),e(Sue,uer),e(ho,_er),M(e0,ho,null),b(f,MIe,_),b(f,Ld,_),e(Ld,o0),e(o0,Rue),M(my,Rue,null),e(Ld,ber),e(Ld,Bue),e(Bue,ver),b(f,EIe,_),b(f,Ho,_),M(gy,Ho,null),e(Ho,Fer),e(Ho,xd),e(xd,Ter),e(xd,$X),e($X,Mer),e(xd,Eer),e(xd,kX),e(kX,Cer),e(xd,wer),e(Ho,Aer),e(Ho,hy),e(hy,yer),e(hy,Pue),e(Pue,Ler),e(hy,xer),e(Ho,$er),e(Ho,Mt),M(py,Mt,null),e(Mt,ker),e(Mt,Iue),e(Iue,Ser),e(Mt,Rer),e(Mt,$d),e($d,Ber),e($d,que),e(que,Per),e($d,Ier),e($d,SX),e(SX,qer),e($d,Ner),e(Mt,jer),M(r0,Mt,null),e(Ho,Der),e(Ho,po),M(uy,po,null),e(po,Ger),e(po,Nue),e(Nue,Oer),e(po,Ver),e(po,Ha),e(Ha,Xer),e(Ha,jue),e(jue,zer),e(Ha,Qer),e(Ha,Due),e(Due,Wer),e(Ha,Her),e(Ha,Gue),e(Gue,Uer),e(Ha,Jer),e(po,Yer),e(po,Oue),e(Oue,t0),e(t0,Vue),e(Vue,Ker),e(t0,Zer),e(t0,RX),e(RX,eor),e(t0,oor),e(po,ror),e(po,a0),e(a0,tor),e(a0,Xue),e(Xue,aor),e(a0,nor),e(a0,zue),e(zue,sor),e(po,lor),M(n0,po,null),b(f,CIe,_),b(f,kd,_),e(kd,s0),e(s0,Que),M(_y,Que,null),e(kd,ior),e(kd,Wue),e(Wue,dor),b(f,wIe,_),b(f,Uo,_),M(by,Uo,null),e(Uo,cor),e(Uo,Sd),e(Sd,mor),e(Sd,BX),e(BX,gor),e(Sd,hor),e(Sd,PX),e(PX,por),e(Sd,uor),e(Uo,_or),e(Uo,vy),e(vy,bor),e(vy,Hue),e(Hue,vor),e(vy,For),e(Uo,Tor),e(Uo,Et),M(Fy,Et,null),e(Et,Mor),e(Et,Uue),e(Uue,Eor),e(Et,Cor),e(Et,Rd),e(Rd,wor),e(Rd,Jue),e(Jue,Aor),e(Rd,yor),e(Rd,IX),e(IX,Lor),e(Rd,xor),e(Et,$or),M(l0,Et,null),e(Uo,kor),e(Uo,uo),M(Ty,uo,null),e(uo,Sor),e(uo,Yue),e(Yue,Ror),e(uo,Bor),e(uo,Ua),e(Ua,Por),e(Ua,Kue),e(Kue,Ior),e(Ua,qor),e(Ua,Zue),e(Zue,Nor),e(Ua,jor),e(Ua,e_e),e(e_e,Dor),e(Ua,Gor),e(uo,Oor),e(uo,Ja),e(Ja,i0),e(i0,o_e),e(o_e,Vor),e(i0,Xor),e(i0,qX),e(qX,zor),e(i0,Qor),e(Ja,Wor),e(Ja,d0),e(d0,r_e),e(r_e,Hor),e(d0,Uor),e(d0,NX),e(NX,Jor),e(d0,Yor),e(Ja,Kor),e(Ja,c0),e(c0,t_e),e(t_e,Zor),e(c0,err),e(c0,jX),e(jX,orr),e(c0,rrr),e(Ja,trr),e(Ja,f0),e(f0,a_e),e(a_e,arr),e(f0,nrr),e(f0,DX),e(DX,srr),e(f0,lrr),e(uo,irr),e(uo,m0),e(m0,drr),e(m0,n_e),e(n_e,crr),e(m0,frr),e(m0,s_e),e(s_e,mrr),e(uo,grr),M(g0,uo,null),b(f,AIe,_),b(f,Bd,_),e(Bd,h0),e(h0,l_e),M(My,l_e,null),e(Bd,hrr),e(Bd,i_e),e(i_e,prr),b(f,yIe,_),b(f,Jo,_),M(Ey,Jo,null),e(Jo,urr),e(Jo,Pd),e(Pd,_rr),e(Pd,GX),e(GX,brr),e(Pd,vrr),e(Pd,OX),e(OX,Frr),e(Pd,Trr),e(Jo,Mrr),e(Jo,Cy),e(Cy,Err),e(Cy,d_e),e(d_e,Crr),e(Cy,wrr),e(Jo,Arr),e(Jo,Ct),M(wy,Ct,null),e(Ct,yrr),e(Ct,c_e),e(c_e,Lrr),e(Ct,xrr),e(Ct,Id),e(Id,$rr),e(Id,f_e),e(f_e,krr),e(Id,Srr),e(Id,VX),e(VX,Rrr),e(Id,Brr),e(Ct,Prr),M(p0,Ct,null),e(Jo,Irr),e(Jo,_o),M(Ay,_o,null),e(_o,qrr),e(_o,m_e),e(m_e,Nrr),e(_o,jrr),e(_o,Ya),e(Ya,Drr),e(Ya,g_e),e(g_e,Grr),e(Ya,Orr),e(Ya,h_e),e(h_e,Vrr),e(Ya,Xrr),e(Ya,p_e),e(p_e,zrr),e(Ya,Qrr),e(_o,Wrr),e(_o,u_e),e(u_e,u0),e(u0,__e),e(__e,Hrr),e(u0,Urr),e(u0,XX),e(XX,Jrr),e(u0,Yrr),e(_o,Krr),e(_o,_0),e(_0,Zrr),e(_0,b_e),e(b_e,etr),e(_0,otr),e(_0,v_e),e(v_e,rtr),e(_o,ttr),M(b0,_o,null),b(f,LIe,_),b(f,qd,_),e(qd,v0),e(v0,F_e),M(yy,F_e,null),e(qd,atr),e(qd,T_e),e(T_e,ntr),b(f,xIe,_),b(f,Yo,_),M(Ly,Yo,null),e(Yo,str),e(Yo,Nd),e(Nd,ltr),e(Nd,zX),e(zX,itr),e(Nd,dtr),e(Nd,QX),e(QX,ctr),e(Nd,ftr),e(Yo,mtr),e(Yo,xy),e(xy,gtr),e(xy,M_e),e(M_e,htr),e(xy,ptr),e(Yo,utr),e(Yo,wt),M($y,wt,null),e(wt,_tr),e(wt,E_e),e(E_e,btr),e(wt,vtr),e(wt,jd),e(jd,Ftr),e(jd,C_e),e(C_e,Ttr),e(jd,Mtr),e(jd,WX),e(WX,Etr),e(jd,Ctr),e(wt,wtr),M(F0,wt,null),e(Yo,Atr),e(Yo,wr),M(ky,wr,null),e(wr,ytr),e(wr,w_e),e(w_e,Ltr),e(wr,xtr),e(wr,Ka),e(Ka,$tr),e(Ka,A_e),e(A_e,ktr),e(Ka,Str),e(Ka,y_e),e(y_e,Rtr),e(Ka,Btr),e(Ka,L_e),e(L_e,Ptr),e(Ka,Itr),e(wr,qtr),e(wr,j),e(j,T0),e(T0,x_e),e(x_e,Ntr),e(T0,jtr),e(T0,HX),e(HX,Dtr),e(T0,Gtr),e(j,Otr),e(j,M0),e(M0,$_e),e($_e,Vtr),e(M0,Xtr),e(M0,UX),e(UX,ztr),e(M0,Qtr),e(j,Wtr),e(j,E0),e(E0,k_e),e(k_e,Htr),e(E0,Utr),e(E0,JX),e(JX,Jtr),e(E0,Ytr),e(j,Ktr),e(j,C0),e(C0,S_e),e(S_e,Ztr),e(C0,ear),e(C0,YX),e(YX,oar),e(C0,rar),e(j,tar),e(j,w0),e(w0,R_e),e(R_e,aar),e(w0,nar),e(w0,KX),e(KX,sar),e(w0,lar),e(j,iar),e(j,A0),e(A0,B_e),e(B_e,dar),e(A0,car),e(A0,ZX),e(ZX,far),e(A0,mar),e(j,gar),e(j,y0),e(y0,P_e),e(P_e,har),e(y0,par),e(y0,ez),e(ez,uar),e(y0,_ar),e(j,bar),e(j,L0),e(L0,I_e),e(I_e,Far),e(L0,Tar),e(L0,oz),e(oz,Mar),e(L0,Ear),e(j,Car),e(j,x0),e(x0,q_e),e(q_e,war),e(x0,Aar),e(x0,rz),e(rz,yar),e(x0,Lar),e(j,xar),e(j,$0),e($0,N_e),e(N_e,$ar),e($0,kar),e($0,tz),e(tz,Sar),e($0,Rar),e(j,Bar),e(j,k0),e(k0,j_e),e(j_e,Par),e(k0,Iar),e(k0,az),e(az,qar),e(k0,Nar),e(j,jar),e(j,S0),e(S0,D_e),e(D_e,Dar),e(S0,Gar),e(S0,nz),e(nz,Oar),e(S0,Var),e(j,Xar),e(j,R0),e(R0,G_e),e(G_e,zar),e(R0,Qar),e(R0,sz),e(sz,War),e(R0,Har),e(j,Uar),e(j,B0),e(B0,O_e),e(O_e,Jar),e(B0,Yar),e(B0,lz),e(lz,Kar),e(B0,Zar),e(j,enr),e(j,P0),e(P0,V_e),e(V_e,onr),e(P0,rnr),e(P0,iz),e(iz,tnr),e(P0,anr),e(j,nnr),e(j,I0),e(I0,X_e),e(X_e,snr),e(I0,lnr),e(I0,dz),e(dz,inr),e(I0,dnr),e(j,cnr),e(j,q0),e(q0,z_e),e(z_e,fnr),e(q0,mnr),e(q0,cz),e(cz,gnr),e(q0,hnr),e(j,pnr),e(j,Bs),e(Bs,Q_e),e(Q_e,unr),e(Bs,_nr),e(Bs,fz),e(fz,bnr),e(Bs,vnr),e(Bs,mz),e(mz,Fnr),e(Bs,Tnr),e(j,Mnr),e(j,N0),e(N0,W_e),e(W_e,Enr),e(N0,Cnr),e(N0,gz),e(gz,wnr),e(N0,Anr),e(j,ynr),e(j,j0),e(j0,H_e),e(H_e,Lnr),e(j0,xnr),e(j0,hz),e(hz,$nr),e(j0,knr),e(j,Snr),e(j,D0),e(D0,U_e),e(U_e,Rnr),e(D0,Bnr),e(D0,pz),e(pz,Pnr),e(D0,Inr),e(j,qnr),e(j,G0),e(G0,J_e),e(J_e,Nnr),e(G0,jnr),e(G0,uz),e(uz,Dnr),e(G0,Gnr),e(j,Onr),e(j,O0),e(O0,Y_e),e(Y_e,Vnr),e(O0,Xnr),e(O0,_z),e(_z,znr),e(O0,Qnr),e(j,Wnr),e(j,V0),e(V0,K_e),e(K_e,Hnr),e(V0,Unr),e(V0,bz),e(bz,Jnr),e(V0,Ynr),e(j,Knr),e(j,X0),e(X0,Z_e),e(Z_e,Znr),e(X0,esr),e(X0,vz),e(vz,osr),e(X0,rsr),e(j,tsr),e(j,z0),e(z0,e1e),e(e1e,asr),e(z0,nsr),e(z0,Fz),e(Fz,ssr),e(z0,lsr),e(j,isr),e(j,Q0),e(Q0,o1e),e(o1e,dsr),e(Q0,csr),e(Q0,Tz),e(Tz,fsr),e(Q0,msr),e(j,gsr),e(j,W0),e(W0,r1e),e(r1e,hsr),e(W0,psr),e(W0,Mz),e(Mz,usr),e(W0,_sr),e(j,bsr),e(j,H0),e(H0,t1e),e(t1e,vsr),e(H0,Fsr),e(H0,Ez),e(Ez,Tsr),e(H0,Msr),e(j,Esr),e(j,U0),e(U0,a1e),e(a1e,Csr),e(U0,wsr),e(U0,Cz),e(Cz,Asr),e(U0,ysr),e(j,Lsr),e(j,J0),e(J0,n1e),e(n1e,xsr),e(J0,$sr),e(J0,wz),e(wz,ksr),e(J0,Ssr),e(j,Rsr),e(j,Y0),e(Y0,s1e),e(s1e,Bsr),e(Y0,Psr),e(Y0,Az),e(Az,Isr),e(Y0,qsr),e(j,Nsr),e(j,K0),e(K0,l1e),e(l1e,jsr),e(K0,Dsr),e(K0,yz),e(yz,Gsr),e(K0,Osr),e(j,Vsr),e(j,Z0),e(Z0,i1e),e(i1e,Xsr),e(Z0,zsr),e(Z0,Lz),e(Lz,Qsr),e(Z0,Wsr),e(j,Hsr),e(j,eT),e(eT,d1e),e(d1e,Usr),e(eT,Jsr),e(eT,xz),e(xz,Ysr),e(eT,Ksr),e(j,Zsr),e(j,oT),e(oT,c1e),e(c1e,elr),e(oT,olr),e(oT,$z),e($z,rlr),e(oT,tlr),e(j,alr),e(j,rT),e(rT,f1e),e(f1e,nlr),e(rT,slr),e(rT,kz),e(kz,llr),e(rT,ilr),e(j,dlr),e(j,tT),e(tT,m1e),e(m1e,clr),e(tT,flr),e(tT,Sz),e(Sz,mlr),e(tT,glr),e(j,hlr),e(j,aT),e(aT,g1e),e(g1e,plr),e(aT,ulr),e(aT,Rz),e(Rz,_lr),e(aT,blr),e(j,vlr),e(j,nT),e(nT,h1e),e(h1e,Flr),e(nT,Tlr),e(nT,Bz),e(Bz,Mlr),e(nT,Elr),e(j,Clr),e(j,sT),e(sT,p1e),e(p1e,wlr),e(sT,Alr),e(sT,Pz),e(Pz,ylr),e(sT,Llr),e(j,xlr),e(j,lT),e(lT,u1e),e(u1e,$lr),e(lT,klr),e(lT,Iz),e(Iz,Slr),e(lT,Rlr),e(j,Blr),e(j,iT),e(iT,_1e),e(_1e,Plr),e(iT,Ilr),e(iT,qz),e(qz,qlr),e(iT,Nlr),e(j,jlr),e(j,dT),e(dT,b1e),e(b1e,Dlr),e(dT,Glr),e(dT,Nz),e(Nz,Olr),e(dT,Vlr),e(j,Xlr),e(j,cT),e(cT,v1e),e(v1e,zlr),e(cT,Qlr),e(cT,jz),e(jz,Wlr),e(cT,Hlr),e(wr,Ulr),M(fT,wr,null),b(f,$Ie,_),b(f,Dd,_),e(Dd,mT),e(mT,F1e),M(Sy,F1e,null),e(Dd,Jlr),e(Dd,T1e),e(T1e,Ylr),b(f,kIe,_),b(f,Ko,_),M(Ry,Ko,null),e(Ko,Klr),e(Ko,Gd),e(Gd,Zlr),e(Gd,Dz),e(Dz,eir),e(Gd,oir),e(Gd,Gz),e(Gz,rir),e(Gd,tir),e(Ko,air),e(Ko,By),e(By,nir),e(By,M1e),e(M1e,sir),e(By,lir),e(Ko,iir),e(Ko,At),M(Py,At,null),e(At,dir),e(At,E1e),e(E1e,cir),e(At,fir),e(At,Od),e(Od,mir),e(Od,C1e),e(C1e,gir),e(Od,hir),e(Od,Oz),e(Oz,pir),e(Od,uir),e(At,_ir),M(gT,At,null),e(Ko,bir),e(Ko,Ar),M(Iy,Ar,null),e(Ar,vir),e(Ar,w1e),e(w1e,Fir),e(Ar,Tir),e(Ar,Za),e(Za,Mir),e(Za,A1e),e(A1e,Eir),e(Za,Cir),e(Za,y1e),e(y1e,wir),e(Za,Air),e(Za,L1e),e(L1e,yir),e(Za,Lir),e(Ar,xir),e(Ar,ne),e(ne,hT),e(hT,x1e),e(x1e,$ir),e(hT,kir),e(hT,Vz),e(Vz,Sir),e(hT,Rir),e(ne,Bir),e(ne,pT),e(pT,$1e),e($1e,Pir),e(pT,Iir),e(pT,Xz),e(Xz,qir),e(pT,Nir),e(ne,jir),e(ne,uT),e(uT,k1e),e(k1e,Dir),e(uT,Gir),e(uT,zz),e(zz,Oir),e(uT,Vir),e(ne,Xir),e(ne,_T),e(_T,S1e),e(S1e,zir),e(_T,Qir),e(_T,Qz),e(Qz,Wir),e(_T,Hir),e(ne,Uir),e(ne,bT),e(bT,R1e),e(R1e,Jir),e(bT,Yir),e(bT,Wz),e(Wz,Kir),e(bT,Zir),e(ne,edr),e(ne,vT),e(vT,B1e),e(B1e,odr),e(vT,rdr),e(vT,Hz),e(Hz,tdr),e(vT,adr),e(ne,ndr),e(ne,FT),e(FT,P1e),e(P1e,sdr),e(FT,ldr),e(FT,Uz),e(Uz,idr),e(FT,ddr),e(ne,cdr),e(ne,TT),e(TT,I1e),e(I1e,fdr),e(TT,mdr),e(TT,Jz),e(Jz,gdr),e(TT,hdr),e(ne,pdr),e(ne,MT),e(MT,q1e),e(q1e,udr),e(MT,_dr),e(MT,Yz),e(Yz,bdr),e(MT,vdr),e(ne,Fdr),e(ne,ET),e(ET,N1e),e(N1e,Tdr),e(ET,Mdr),e(ET,Kz),e(Kz,Edr),e(ET,Cdr),e(ne,wdr),e(ne,CT),e(CT,j1e),e(j1e,Adr),e(CT,ydr),e(CT,Zz),e(Zz,Ldr),e(CT,xdr),e(ne,$dr),e(ne,wT),e(wT,D1e),e(D1e,kdr),e(wT,Sdr),e(wT,eQ),e(eQ,Rdr),e(wT,Bdr),e(ne,Pdr),e(ne,AT),e(AT,G1e),e(G1e,Idr),e(AT,qdr),e(AT,oQ),e(oQ,Ndr),e(AT,jdr),e(ne,Ddr),e(ne,yT),e(yT,O1e),e(O1e,Gdr),e(yT,Odr),e(yT,rQ),e(rQ,Vdr),e(yT,Xdr),e(ne,zdr),e(ne,LT),e(LT,V1e),e(V1e,Qdr),e(LT,Wdr),e(LT,tQ),e(tQ,Hdr),e(LT,Udr),e(ne,Jdr),e(ne,xT),e(xT,X1e),e(X1e,Ydr),e(xT,Kdr),e(xT,aQ),e(aQ,Zdr),e(xT,ecr),e(ne,ocr),e(ne,$T),e($T,z1e),e(z1e,rcr),e($T,tcr),e($T,nQ),e(nQ,acr),e($T,ncr),e(ne,scr),e(ne,kT),e(kT,Q1e),e(Q1e,lcr),e(kT,icr),e(kT,sQ),e(sQ,dcr),e(kT,ccr),e(ne,fcr),e(ne,ST),e(ST,W1e),e(W1e,mcr),e(ST,gcr),e(ST,lQ),e(lQ,hcr),e(ST,pcr),e(ne,ucr),e(ne,RT),e(RT,H1e),e(H1e,_cr),e(RT,bcr),e(RT,iQ),e(iQ,vcr),e(RT,Fcr),e(ne,Tcr),e(ne,BT),e(BT,U1e),e(U1e,Mcr),e(BT,Ecr),e(BT,dQ),e(dQ,Ccr),e(BT,wcr),e(ne,Acr),e(ne,PT),e(PT,J1e),e(J1e,ycr),e(PT,Lcr),e(PT,cQ),e(cQ,xcr),e(PT,$cr),e(ne,kcr),e(ne,IT),e(IT,Y1e),e(Y1e,Scr),e(IT,Rcr),e(IT,fQ),e(fQ,Bcr),e(IT,Pcr),e(Ar,Icr),M(qT,Ar,null),b(f,SIe,_),b(f,Vd,_),e(Vd,NT),e(NT,K1e),M(qy,K1e,null),e(Vd,qcr),e(Vd,Z1e),e(Z1e,Ncr),b(f,RIe,_),b(f,Zo,_),M(Ny,Zo,null),e(Zo,jcr),e(Zo,Xd),e(Xd,Dcr),e(Xd,mQ),e(mQ,Gcr),e(Xd,Ocr),e(Xd,gQ),e(gQ,Vcr),e(Xd,Xcr),e(Zo,zcr),e(Zo,jy),e(jy,Qcr),e(jy,e8e),e(e8e,Wcr),e(jy,Hcr),e(Zo,Ucr),e(Zo,yt),M(Dy,yt,null),e(yt,Jcr),e(yt,o8e),e(o8e,Ycr),e(yt,Kcr),e(yt,zd),e(zd,Zcr),e(zd,r8e),e(r8e,efr),e(zd,ofr),e(zd,hQ),e(hQ,rfr),e(zd,tfr),e(yt,afr),M(jT,yt,null),e(Zo,nfr),e(Zo,yr),M(Gy,yr,null),e(yr,sfr),e(yr,t8e),e(t8e,lfr),e(yr,ifr),e(yr,en),e(en,dfr),e(en,a8e),e(a8e,cfr),e(en,ffr),e(en,n8e),e(n8e,mfr),e(en,gfr),e(en,s8e),e(s8e,hfr),e(en,pfr),e(yr,ufr),e(yr,Te),e(Te,DT),e(DT,l8e),e(l8e,_fr),e(DT,bfr),e(DT,pQ),e(pQ,vfr),e(DT,Ffr),e(Te,Tfr),e(Te,GT),e(GT,i8e),e(i8e,Mfr),e(GT,Efr),e(GT,uQ),e(uQ,Cfr),e(GT,wfr),e(Te,Afr),e(Te,OT),e(OT,d8e),e(d8e,yfr),e(OT,Lfr),e(OT,_Q),e(_Q,xfr),e(OT,$fr),e(Te,kfr),e(Te,VT),e(VT,c8e),e(c8e,Sfr),e(VT,Rfr),e(VT,bQ),e(bQ,Bfr),e(VT,Pfr),e(Te,Ifr),e(Te,XT),e(XT,f8e),e(f8e,qfr),e(XT,Nfr),e(XT,vQ),e(vQ,jfr),e(XT,Dfr),e(Te,Gfr),e(Te,zT),e(zT,m8e),e(m8e,Ofr),e(zT,Vfr),e(zT,FQ),e(FQ,Xfr),e(zT,zfr),e(Te,Qfr),e(Te,QT),e(QT,g8e),e(g8e,Wfr),e(QT,Hfr),e(QT,TQ),e(TQ,Ufr),e(QT,Jfr),e(Te,Yfr),e(Te,WT),e(WT,h8e),e(h8e,Kfr),e(WT,Zfr),e(WT,MQ),e(MQ,emr),e(WT,omr),e(Te,rmr),e(Te,HT),e(HT,p8e),e(p8e,tmr),e(HT,amr),e(HT,EQ),e(EQ,nmr),e(HT,smr),e(Te,lmr),e(Te,UT),e(UT,u8e),e(u8e,imr),e(UT,dmr),e(UT,CQ),e(CQ,cmr),e(UT,fmr),e(Te,mmr),e(Te,JT),e(JT,_8e),e(_8e,gmr),e(JT,hmr),e(JT,wQ),e(wQ,pmr),e(JT,umr),e(Te,_mr),e(Te,YT),e(YT,b8e),e(b8e,bmr),e(YT,vmr),e(YT,AQ),e(AQ,Fmr),e(YT,Tmr),e(yr,Mmr),M(KT,yr,null),b(f,BIe,_),b(f,Qd,_),e(Qd,ZT),e(ZT,v8e),M(Oy,v8e,null),e(Qd,Emr),e(Qd,F8e),e(F8e,Cmr),b(f,PIe,_),b(f,er,_),M(Vy,er,null),e(er,wmr),e(er,Wd),e(Wd,Amr),e(Wd,yQ),e(yQ,ymr),e(Wd,Lmr),e(Wd,LQ),e(LQ,xmr),e(Wd,$mr),e(er,kmr),e(er,Xy),e(Xy,Smr),e(Xy,T8e),e(T8e,Rmr),e(Xy,Bmr),e(er,Pmr),e(er,Lt),M(zy,Lt,null),e(Lt,Imr),e(Lt,M8e),e(M8e,qmr),e(Lt,Nmr),e(Lt,Hd),e(Hd,jmr),e(Hd,E8e),e(E8e,Dmr),e(Hd,Gmr),e(Hd,xQ),e(xQ,Omr),e(Hd,Vmr),e(Lt,Xmr),M(e7,Lt,null),e(er,zmr),e(er,Lr),M(Qy,Lr,null),e(Lr,Qmr),e(Lr,C8e),e(C8e,Wmr),e(Lr,Hmr),e(Lr,on),e(on,Umr),e(on,w8e),e(w8e,Jmr),e(on,Ymr),e(on,A8e),e(A8e,Kmr),e(on,Zmr),e(on,y8e),e(y8e,egr),e(on,ogr),e(Lr,rgr),e(Lr,Ud),e(Ud,o7),e(o7,L8e),e(L8e,tgr),e(o7,agr),e(o7,$Q),e($Q,ngr),e(o7,sgr),e(Ud,lgr),e(Ud,r7),e(r7,x8e),e(x8e,igr),e(r7,dgr),e(r7,kQ),e(kQ,cgr),e(r7,fgr),e(Ud,mgr),e(Ud,t7),e(t7,$8e),e($8e,ggr),e(t7,hgr),e(t7,SQ),e(SQ,pgr),e(t7,ugr),e(Lr,_gr),M(a7,Lr,null),b(f,IIe,_),b(f,Jd,_),e(Jd,n7),e(n7,k8e),M(Wy,k8e,null),e(Jd,bgr),e(Jd,S8e),e(S8e,vgr),b(f,qIe,_),b(f,or,_),M(Hy,or,null),e(or,Fgr),e(or,Yd),e(Yd,Tgr),e(Yd,RQ),e(RQ,Mgr),e(Yd,Egr),e(Yd,BQ),e(BQ,Cgr),e(Yd,wgr),e(or,Agr),e(or,Uy),e(Uy,ygr),e(Uy,R8e),e(R8e,Lgr),e(Uy,xgr),e(or,$gr),e(or,xt),M(Jy,xt,null),e(xt,kgr),e(xt,B8e),e(B8e,Sgr),e(xt,Rgr),e(xt,Kd),e(Kd,Bgr),e(Kd,P8e),e(P8e,Pgr),e(Kd,Igr),e(Kd,PQ),e(PQ,qgr),e(Kd,Ngr),e(xt,jgr),M(s7,xt,null),e(or,Dgr),e(or,xr),M(Yy,xr,null),e(xr,Ggr),e(xr,I8e),e(I8e,Ogr),e(xr,Vgr),e(xr,rn),e(rn,Xgr),e(rn,q8e),e(q8e,zgr),e(rn,Qgr),e(rn,N8e),e(N8e,Wgr),e(rn,Hgr),e(rn,j8e),e(j8e,Ugr),e(rn,Jgr),e(xr,Ygr),e(xr,ie),e(ie,l7),e(l7,D8e),e(D8e,Kgr),e(l7,Zgr),e(l7,IQ),e(IQ,ehr),e(l7,ohr),e(ie,rhr),e(ie,i7),e(i7,G8e),e(G8e,thr),e(i7,ahr),e(i7,qQ),e(qQ,nhr),e(i7,shr),e(ie,lhr),e(ie,d7),e(d7,O8e),e(O8e,ihr),e(d7,dhr),e(d7,NQ),e(NQ,chr),e(d7,fhr),e(ie,mhr),e(ie,c7),e(c7,V8e),e(V8e,ghr),e(c7,hhr),e(c7,jQ),e(jQ,phr),e(c7,uhr),e(ie,_hr),e(ie,f7),e(f7,X8e),e(X8e,bhr),e(f7,vhr),e(f7,DQ),e(DQ,Fhr),e(f7,Thr),e(ie,Mhr),e(ie,m7),e(m7,z8e),e(z8e,Ehr),e(m7,Chr),e(m7,GQ),e(GQ,whr),e(m7,Ahr),e(ie,yhr),e(ie,g7),e(g7,Q8e),e(Q8e,Lhr),e(g7,xhr),e(g7,OQ),e(OQ,$hr),e(g7,khr),e(ie,Shr),e(ie,h7),e(h7,W8e),e(W8e,Rhr),e(h7,Bhr),e(h7,VQ),e(VQ,Phr),e(h7,Ihr),e(ie,qhr),e(ie,p7),e(p7,H8e),e(H8e,Nhr),e(p7,jhr),e(p7,XQ),e(XQ,Dhr),e(p7,Ghr),e(ie,Ohr),e(ie,u7),e(u7,U8e),e(U8e,Vhr),e(u7,Xhr),e(u7,zQ),e(zQ,zhr),e(u7,Qhr),e(ie,Whr),e(ie,_7),e(_7,J8e),e(J8e,Hhr),e(_7,Uhr),e(_7,QQ),e(QQ,Jhr),e(_7,Yhr),e(ie,Khr),e(ie,b7),e(b7,Y8e),e(Y8e,Zhr),e(b7,epr),e(b7,WQ),e(WQ,opr),e(b7,rpr),e(ie,tpr),e(ie,v7),e(v7,K8e),e(K8e,apr),e(v7,npr),e(v7,HQ),e(HQ,spr),e(v7,lpr),e(ie,ipr),e(ie,F7),e(F7,Z8e),e(Z8e,dpr),e(F7,cpr),e(F7,UQ),e(UQ,fpr),e(F7,mpr),e(ie,gpr),e(ie,T7),e(T7,ebe),e(ebe,hpr),e(T7,ppr),e(T7,JQ),e(JQ,upr),e(T7,_pr),e(ie,bpr),e(ie,M7),e(M7,obe),e(obe,vpr),e(M7,Fpr),e(M7,YQ),e(YQ,Tpr),e(M7,Mpr),e(ie,Epr),e(ie,E7),e(E7,rbe),e(rbe,Cpr),e(E7,wpr),e(E7,KQ),e(KQ,Apr),e(E7,ypr),e(ie,Lpr),e(ie,C7),e(C7,tbe),e(tbe,xpr),e(C7,$pr),e(C7,ZQ),e(ZQ,kpr),e(C7,Spr),e(ie,Rpr),e(ie,w7),e(w7,abe),e(abe,Bpr),e(w7,Ppr),e(w7,eW),e(eW,Ipr),e(w7,qpr),e(ie,Npr),e(ie,A7),e(A7,nbe),e(nbe,jpr),e(A7,Dpr),e(A7,oW),e(oW,Gpr),e(A7,Opr),e(xr,Vpr),M(y7,xr,null),b(f,NIe,_),b(f,Zd,_),e(Zd,L7),e(L7,sbe),M(Ky,sbe,null),e(Zd,Xpr),e(Zd,lbe),e(lbe,zpr),b(f,jIe,_),b(f,rr,_),M(Zy,rr,null),e(rr,Qpr),e(rr,ec),e(ec,Wpr),e(ec,rW),e(rW,Hpr),e(ec,Upr),e(ec,tW),e(tW,Jpr),e(ec,Ypr),e(rr,Kpr),e(rr,eL),e(eL,Zpr),e(eL,ibe),e(ibe,eur),e(eL,our),e(rr,rur),e(rr,$t),M(oL,$t,null),e($t,tur),e($t,dbe),e(dbe,aur),e($t,nur),e($t,oc),e(oc,sur),e(oc,cbe),e(cbe,lur),e(oc,iur),e(oc,aW),e(aW,dur),e(oc,cur),e($t,fur),M(x7,$t,null),e(rr,mur),e(rr,$r),M(rL,$r,null),e($r,gur),e($r,fbe),e(fbe,hur),e($r,pur),e($r,tn),e(tn,uur),e(tn,mbe),e(mbe,_ur),e(tn,bur),e(tn,gbe),e(gbe,vur),e(tn,Fur),e(tn,hbe),e(hbe,Tur),e(tn,Mur),e($r,Eur),e($r,ye),e(ye,$7),e($7,pbe),e(pbe,Cur),e($7,wur),e($7,nW),e(nW,Aur),e($7,yur),e(ye,Lur),e(ye,k7),e(k7,ube),e(ube,xur),e(k7,$ur),e(k7,sW),e(sW,kur),e(k7,Sur),e(ye,Rur),e(ye,S7),e(S7,_be),e(_be,Bur),e(S7,Pur),e(S7,lW),e(lW,Iur),e(S7,qur),e(ye,Nur),e(ye,R7),e(R7,bbe),e(bbe,jur),e(R7,Dur),e(R7,iW),e(iW,Gur),e(R7,Our),e(ye,Vur),e(ye,B7),e(B7,vbe),e(vbe,Xur),e(B7,zur),e(B7,dW),e(dW,Qur),e(B7,Wur),e(ye,Hur),e(ye,P7),e(P7,Fbe),e(Fbe,Uur),e(P7,Jur),e(P7,cW),e(cW,Yur),e(P7,Kur),e(ye,Zur),e(ye,I7),e(I7,Tbe),e(Tbe,e_r),e(I7,o_r),e(I7,fW),e(fW,r_r),e(I7,t_r),e(ye,a_r),e(ye,q7),e(q7,Mbe),e(Mbe,n_r),e(q7,s_r),e(q7,mW),e(mW,l_r),e(q7,i_r),e(ye,d_r),e(ye,N7),e(N7,Ebe),e(Ebe,c_r),e(N7,f_r),e(N7,gW),e(gW,m_r),e(N7,g_r),e(ye,h_r),e(ye,j7),e(j7,Cbe),e(Cbe,p_r),e(j7,u_r),e(j7,hW),e(hW,__r),e(j7,b_r),e($r,v_r),M(D7,$r,null),b(f,DIe,_),b(f,rc,_),e(rc,G7),e(G7,wbe),M(tL,wbe,null),e(rc,F_r),e(rc,Abe),e(Abe,T_r),b(f,GIe,_),b(f,tr,_),M(aL,tr,null),e(tr,M_r),e(tr,tc),e(tc,E_r),e(tc,pW),e(pW,C_r),e(tc,w_r),e(tc,uW),e(uW,A_r),e(tc,y_r),e(tr,L_r),e(tr,nL),e(nL,x_r),e(nL,ybe),e(ybe,$_r),e(nL,k_r),e(tr,S_r),e(tr,kt),M(sL,kt,null),e(kt,R_r),e(kt,Lbe),e(Lbe,B_r),e(kt,P_r),e(kt,ac),e(ac,I_r),e(ac,xbe),e(xbe,q_r),e(ac,N_r),e(ac,_W),e(_W,j_r),e(ac,D_r),e(kt,G_r),M(O7,kt,null),e(tr,O_r),e(tr,kr),M(lL,kr,null),e(kr,V_r),e(kr,$be),e($be,X_r),e(kr,z_r),e(kr,an),e(an,Q_r),e(an,kbe),e(kbe,W_r),e(an,H_r),e(an,Sbe),e(Sbe,U_r),e(an,J_r),e(an,Rbe),e(Rbe,Y_r),e(an,K_r),e(kr,Z_r),e(kr,Z),e(Z,V7),e(V7,Bbe),e(Bbe,e1r),e(V7,o1r),e(V7,bW),e(bW,r1r),e(V7,t1r),e(Z,a1r),e(Z,X7),e(X7,Pbe),e(Pbe,n1r),e(X7,s1r),e(X7,vW),e(vW,l1r),e(X7,i1r),e(Z,d1r),e(Z,z7),e(z7,Ibe),e(Ibe,c1r),e(z7,f1r),e(z7,FW),e(FW,m1r),e(z7,g1r),e(Z,h1r),e(Z,Q7),e(Q7,qbe),e(qbe,p1r),e(Q7,u1r),e(Q7,TW),e(TW,_1r),e(Q7,b1r),e(Z,v1r),e(Z,W7),e(W7,Nbe),e(Nbe,F1r),e(W7,T1r),e(W7,MW),e(MW,M1r),e(W7,E1r),e(Z,C1r),e(Z,H7),e(H7,jbe),e(jbe,w1r),e(H7,A1r),e(H7,EW),e(EW,y1r),e(H7,L1r),e(Z,x1r),e(Z,U7),e(U7,Dbe),e(Dbe,$1r),e(U7,k1r),e(U7,CW),e(CW,S1r),e(U7,R1r),e(Z,B1r),e(Z,J7),e(J7,Gbe),e(Gbe,P1r),e(J7,I1r),e(J7,wW),e(wW,q1r),e(J7,N1r),e(Z,j1r),e(Z,Y7),e(Y7,Obe),e(Obe,D1r),e(Y7,G1r),e(Y7,AW),e(AW,O1r),e(Y7,V1r),e(Z,X1r),e(Z,K7),e(K7,Vbe),e(Vbe,z1r),e(K7,Q1r),e(K7,yW),e(yW,W1r),e(K7,H1r),e(Z,U1r),e(Z,Z7),e(Z7,Xbe),e(Xbe,J1r),e(Z7,Y1r),e(Z7,LW),e(LW,K1r),e(Z7,Z1r),e(Z,e8r),e(Z,eM),e(eM,zbe),e(zbe,o8r),e(eM,r8r),e(eM,xW),e(xW,t8r),e(eM,a8r),e(Z,n8r),e(Z,oM),e(oM,Qbe),e(Qbe,s8r),e(oM,l8r),e(oM,$W),e($W,i8r),e(oM,d8r),e(Z,c8r),e(Z,rM),e(rM,Wbe),e(Wbe,f8r),e(rM,m8r),e(rM,kW),e(kW,g8r),e(rM,h8r),e(Z,p8r),e(Z,tM),e(tM,Hbe),e(Hbe,u8r),e(tM,_8r),e(tM,SW),e(SW,b8r),e(tM,v8r),e(Z,F8r),e(Z,aM),e(aM,Ube),e(Ube,T8r),e(aM,M8r),e(aM,RW),e(RW,E8r),e(aM,C8r),e(Z,w8r),e(Z,nM),e(nM,Jbe),e(Jbe,A8r),e(nM,y8r),e(nM,BW),e(BW,L8r),e(nM,x8r),e(Z,$8r),e(Z,sM),e(sM,Ybe),e(Ybe,k8r),e(sM,S8r),e(sM,PW),e(PW,R8r),e(sM,B8r),e(Z,P8r),e(Z,lM),e(lM,Kbe),e(Kbe,I8r),e(lM,q8r),e(lM,IW),e(IW,N8r),e(lM,j8r),e(Z,D8r),e(Z,iM),e(iM,Zbe),e(Zbe,G8r),e(iM,O8r),e(iM,qW),e(qW,V8r),e(iM,X8r),e(Z,z8r),e(Z,dM),e(dM,e2e),e(e2e,Q8r),e(dM,W8r),e(dM,NW),e(NW,H8r),e(dM,U8r),e(Z,J8r),e(Z,cM),e(cM,o2e),e(o2e,Y8r),e(cM,K8r),e(cM,jW),e(jW,Z8r),e(cM,ebr),e(Z,obr),e(Z,fM),e(fM,r2e),e(r2e,rbr),e(fM,tbr),e(fM,DW),e(DW,abr),e(fM,nbr),e(Z,sbr),e(Z,mM),e(mM,t2e),e(t2e,lbr),e(mM,ibr),e(mM,GW),e(GW,dbr),e(mM,cbr),e(Z,fbr),e(Z,gM),e(gM,a2e),e(a2e,mbr),e(gM,gbr),e(gM,OW),e(OW,hbr),e(gM,pbr),e(Z,ubr),e(Z,hM),e(hM,n2e),e(n2e,_br),e(hM,bbr),e(hM,VW),e(VW,vbr),e(hM,Fbr),e(kr,Tbr),M(pM,kr,null),b(f,OIe,_),b(f,nc,_),e(nc,uM),e(uM,s2e),M(iL,s2e,null),e(nc,Mbr),e(nc,l2e),e(l2e,Ebr),b(f,VIe,_),b(f,ar,_),M(dL,ar,null),e(ar,Cbr),e(ar,sc),e(sc,wbr),e(sc,XW),e(XW,Abr),e(sc,ybr),e(sc,zW),e(zW,Lbr),e(sc,xbr),e(ar,$br),e(ar,cL),e(cL,kbr),e(cL,i2e),e(i2e,Sbr),e(cL,Rbr),e(ar,Bbr),e(ar,St),M(fL,St,null),e(St,Pbr),e(St,d2e),e(d2e,Ibr),e(St,qbr),e(St,lc),e(lc,Nbr),e(lc,c2e),e(c2e,jbr),e(lc,Dbr),e(lc,QW),e(QW,Gbr),e(lc,Obr),e(St,Vbr),M(_M,St,null),e(ar,Xbr),e(ar,Sr),M(mL,Sr,null),e(Sr,zbr),e(Sr,f2e),e(f2e,Qbr),e(Sr,Wbr),e(Sr,nn),e(nn,Hbr),e(nn,m2e),e(m2e,Ubr),e(nn,Jbr),e(nn,g2e),e(g2e,Ybr),e(nn,Kbr),e(nn,h2e),e(h2e,Zbr),e(nn,e2r),e(Sr,o2r),e(Sr,pe),e(pe,bM),e(bM,p2e),e(p2e,r2r),e(bM,t2r),e(bM,WW),e(WW,a2r),e(bM,n2r),e(pe,s2r),e(pe,vM),e(vM,u2e),e(u2e,l2r),e(vM,i2r),e(vM,HW),e(HW,d2r),e(vM,c2r),e(pe,f2r),e(pe,FM),e(FM,_2e),e(_2e,m2r),e(FM,g2r),e(FM,UW),e(UW,h2r),e(FM,p2r),e(pe,u2r),e(pe,TM),e(TM,b2e),e(b2e,_2r),e(TM,b2r),e(TM,JW),e(JW,v2r),e(TM,F2r),e(pe,T2r),e(pe,MM),e(MM,v2e),e(v2e,M2r),e(MM,E2r),e(MM,YW),e(YW,C2r),e(MM,w2r),e(pe,A2r),e(pe,EM),e(EM,F2e),e(F2e,y2r),e(EM,L2r),e(EM,KW),e(KW,x2r),e(EM,$2r),e(pe,k2r),e(pe,CM),e(CM,T2e),e(T2e,S2r),e(CM,R2r),e(CM,ZW),e(ZW,B2r),e(CM,P2r),e(pe,I2r),e(pe,wM),e(wM,M2e),e(M2e,q2r),e(wM,N2r),e(wM,eH),e(eH,j2r),e(wM,D2r),e(pe,G2r),e(pe,AM),e(AM,E2e),e(E2e,O2r),e(AM,V2r),e(AM,oH),e(oH,X2r),e(AM,z2r),e(pe,Q2r),e(pe,yM),e(yM,C2e),e(C2e,W2r),e(yM,H2r),e(yM,rH),e(rH,U2r),e(yM,J2r),e(pe,Y2r),e(pe,LM),e(LM,w2e),e(w2e,K2r),e(LM,Z2r),e(LM,tH),e(tH,evr),e(LM,ovr),e(pe,rvr),e(pe,xM),e(xM,A2e),e(A2e,tvr),e(xM,avr),e(xM,aH),e(aH,nvr),e(xM,svr),e(pe,lvr),e(pe,$M),e($M,y2e),e(y2e,ivr),e($M,dvr),e($M,nH),e(nH,cvr),e($M,fvr),e(pe,mvr),e(pe,kM),e(kM,L2e),e(L2e,gvr),e(kM,hvr),e(kM,sH),e(sH,pvr),e(kM,uvr),e(pe,_vr),e(pe,SM),e(SM,x2e),e(x2e,bvr),e(SM,vvr),e(SM,lH),e(lH,Fvr),e(SM,Tvr),e(pe,Mvr),e(pe,RM),e(RM,$2e),e($2e,Evr),e(RM,Cvr),e(RM,iH),e(iH,wvr),e(RM,Avr),e(pe,yvr),e(pe,BM),e(BM,k2e),e(k2e,Lvr),e(BM,xvr),e(BM,dH),e(dH,$vr),e(BM,kvr),e(Sr,Svr),M(PM,Sr,null),b(f,XIe,_),b(f,ic,_),e(ic,IM),e(IM,S2e),M(gL,S2e,null),e(ic,Rvr),e(ic,R2e),e(R2e,Bvr),b(f,zIe,_),b(f,nr,_),M(hL,nr,null),e(nr,Pvr),e(nr,dc),e(dc,Ivr),e(dc,cH),e(cH,qvr),e(dc,Nvr),e(dc,fH),e(fH,jvr),e(dc,Dvr),e(nr,Gvr),e(nr,pL),e(pL,Ovr),e(pL,B2e),e(B2e,Vvr),e(pL,Xvr),e(nr,zvr),e(nr,Rt),M(uL,Rt,null),e(Rt,Qvr),e(Rt,P2e),e(P2e,Wvr),e(Rt,Hvr),e(Rt,cc),e(cc,Uvr),e(cc,I2e),e(I2e,Jvr),e(cc,Yvr),e(cc,mH),e(mH,Kvr),e(cc,Zvr),e(Rt,eFr),M(qM,Rt,null),e(nr,oFr),e(nr,Rr),M(_L,Rr,null),e(Rr,rFr),e(Rr,q2e),e(q2e,tFr),e(Rr,aFr),e(Rr,sn),e(sn,nFr),e(sn,N2e),e(N2e,sFr),e(sn,lFr),e(sn,j2e),e(j2e,iFr),e(sn,dFr),e(sn,D2e),e(D2e,cFr),e(sn,fFr),e(Rr,mFr),e(Rr,bL),e(bL,NM),e(NM,G2e),e(G2e,gFr),e(NM,hFr),e(NM,gH),e(gH,pFr),e(NM,uFr),e(bL,_Fr),e(bL,jM),e(jM,O2e),e(O2e,bFr),e(jM,vFr),e(jM,hH),e(hH,FFr),e(jM,TFr),e(Rr,MFr),M(DM,Rr,null),b(f,QIe,_),b(f,fc,_),e(fc,GM),e(GM,V2e),M(vL,V2e,null),e(fc,EFr),e(fc,X2e),e(X2e,CFr),b(f,WIe,_),b(f,sr,_),M(FL,sr,null),e(sr,wFr),e(sr,mc),e(mc,AFr),e(mc,pH),e(pH,yFr),e(mc,LFr),e(mc,uH),e(uH,xFr),e(mc,$Fr),e(sr,kFr),e(sr,TL),e(TL,SFr),e(TL,z2e),e(z2e,RFr),e(TL,BFr),e(sr,PFr),e(sr,Bt),M(ML,Bt,null),e(Bt,IFr),e(Bt,Q2e),e(Q2e,qFr),e(Bt,NFr),e(Bt,gc),e(gc,jFr),e(gc,W2e),e(W2e,DFr),e(gc,GFr),e(gc,_H),e(_H,OFr),e(gc,VFr),e(Bt,XFr),M(OM,Bt,null),e(sr,zFr),e(sr,Br),M(EL,Br,null),e(Br,QFr),e(Br,H2e),e(H2e,WFr),e(Br,HFr),e(Br,ln),e(ln,UFr),e(ln,U2e),e(U2e,JFr),e(ln,YFr),e(ln,J2e),e(J2e,KFr),e(ln,ZFr),e(ln,Y2e),e(Y2e,e0r),e(ln,o0r),e(Br,r0r),e(Br,K2e),e(K2e,VM),e(VM,Z2e),e(Z2e,t0r),e(VM,a0r),e(VM,bH),e(bH,n0r),e(VM,s0r),e(Br,l0r),M(XM,Br,null),b(f,HIe,_),b(f,hc,_),e(hc,zM),e(zM,eve),M(CL,eve,null),e(hc,i0r),e(hc,ove),e(ove,d0r),b(f,UIe,_),b(f,lr,_),M(wL,lr,null),e(lr,c0r),e(lr,pc),e(pc,f0r),e(pc,vH),e(vH,m0r),e(pc,g0r),e(pc,FH),e(FH,h0r),e(pc,p0r),e(lr,u0r),e(lr,AL),e(AL,_0r),e(AL,rve),e(rve,b0r),e(AL,v0r),e(lr,F0r),e(lr,Pt),M(yL,Pt,null),e(Pt,T0r),e(Pt,tve),e(tve,M0r),e(Pt,E0r),e(Pt,uc),e(uc,C0r),e(uc,ave),e(ave,w0r),e(uc,A0r),e(uc,TH),e(TH,y0r),e(uc,L0r),e(Pt,x0r),M(QM,Pt,null),e(lr,$0r),e(lr,Pr),M(LL,Pr,null),e(Pr,k0r),e(Pr,nve),e(nve,S0r),e(Pr,R0r),e(Pr,dn),e(dn,B0r),e(dn,sve),e(sve,P0r),e(dn,I0r),e(dn,lve),e(lve,q0r),e(dn,N0r),e(dn,ive),e(ive,j0r),e(dn,D0r),e(Pr,G0r),e(Pr,de),e(de,WM),e(WM,dve),e(dve,O0r),e(WM,V0r),e(WM,MH),e(MH,X0r),e(WM,z0r),e(de,Q0r),e(de,HM),e(HM,cve),e(cve,W0r),e(HM,H0r),e(HM,EH),e(EH,U0r),e(HM,J0r),e(de,Y0r),e(de,UM),e(UM,fve),e(fve,K0r),e(UM,Z0r),e(UM,CH),e(CH,eTr),e(UM,oTr),e(de,rTr),e(de,JM),e(JM,mve),e(mve,tTr),e(JM,aTr),e(JM,wH),e(wH,nTr),e(JM,sTr),e(de,lTr),e(de,YM),e(YM,gve),e(gve,iTr),e(YM,dTr),e(YM,AH),e(AH,cTr),e(YM,fTr),e(de,mTr),e(de,KM),e(KM,hve),e(hve,gTr),e(KM,hTr),e(KM,yH),e(yH,pTr),e(KM,uTr),e(de,_Tr),e(de,ZM),e(ZM,pve),e(pve,bTr),e(ZM,vTr),e(ZM,LH),e(LH,FTr),e(ZM,TTr),e(de,MTr),e(de,e4),e(e4,uve),e(uve,ETr),e(e4,CTr),e(e4,xH),e(xH,wTr),e(e4,ATr),e(de,yTr),e(de,o4),e(o4,_ve),e(_ve,LTr),e(o4,xTr),e(o4,$H),e($H,$Tr),e(o4,kTr),e(de,STr),e(de,r4),e(r4,bve),e(bve,RTr),e(r4,BTr),e(r4,kH),e(kH,PTr),e(r4,ITr),e(de,qTr),e(de,t4),e(t4,vve),e(vve,NTr),e(t4,jTr),e(t4,SH),e(SH,DTr),e(t4,GTr),e(de,OTr),e(de,a4),e(a4,Fve),e(Fve,VTr),e(a4,XTr),e(a4,RH),e(RH,zTr),e(a4,QTr),e(de,WTr),e(de,n4),e(n4,Tve),e(Tve,HTr),e(n4,UTr),e(n4,BH),e(BH,JTr),e(n4,YTr),e(de,KTr),e(de,s4),e(s4,Mve),e(Mve,ZTr),e(s4,e7r),e(s4,PH),e(PH,o7r),e(s4,r7r),e(de,t7r),e(de,l4),e(l4,Eve),e(Eve,a7r),e(l4,n7r),e(l4,IH),e(IH,s7r),e(l4,l7r),e(de,i7r),e(de,i4),e(i4,Cve),e(Cve,d7r),e(i4,c7r),e(i4,qH),e(qH,f7r),e(i4,m7r),e(de,g7r),e(de,d4),e(d4,wve),e(wve,h7r),e(d4,p7r),e(d4,NH),e(NH,u7r),e(d4,_7r),e(de,b7r),e(de,c4),e(c4,Ave),e(Ave,v7r),e(c4,F7r),e(c4,jH),e(jH,T7r),e(c4,M7r),e(de,E7r),e(de,f4),e(f4,yve),e(yve,C7r),e(f4,w7r),e(f4,DH),e(DH,A7r),e(f4,y7r),e(de,L7r),e(de,m4),e(m4,Lve),e(Lve,x7r),e(m4,$7r),e(m4,GH),e(GH,k7r),e(m4,S7r),e(Pr,R7r),M(g4,Pr,null),b(f,JIe,_),b(f,_c,_),e(_c,h4),e(h4,xve),M(xL,xve,null),e(_c,B7r),e(_c,$ve),e($ve,P7r),b(f,YIe,_),b(f,ir,_),M($L,ir,null),e(ir,I7r),e(ir,bc),e(bc,q7r),e(bc,OH),e(OH,N7r),e(bc,j7r),e(bc,VH),e(VH,D7r),e(bc,G7r),e(ir,O7r),e(ir,kL),e(kL,V7r),e(kL,kve),e(kve,X7r),e(kL,z7r),e(ir,Q7r),e(ir,It),M(SL,It,null),e(It,W7r),e(It,Sve),e(Sve,H7r),e(It,U7r),e(It,vc),e(vc,J7r),e(vc,Rve),e(Rve,Y7r),e(vc,K7r),e(vc,XH),e(XH,Z7r),e(vc,eMr),e(It,oMr),M(p4,It,null),e(ir,rMr),e(ir,Ir),M(RL,Ir,null),e(Ir,tMr),e(Ir,Bve),e(Bve,aMr),e(Ir,nMr),e(Ir,cn),e(cn,sMr),e(cn,Pve),e(Pve,lMr),e(cn,iMr),e(cn,Ive),e(Ive,dMr),e(cn,cMr),e(cn,qve),e(qve,fMr),e(cn,mMr),e(Ir,gMr),e(Ir,ce),e(ce,u4),e(u4,Nve),e(Nve,hMr),e(u4,pMr),e(u4,zH),e(zH,uMr),e(u4,_Mr),e(ce,bMr),e(ce,_4),e(_4,jve),e(jve,vMr),e(_4,FMr),e(_4,QH),e(QH,TMr),e(_4,MMr),e(ce,EMr),e(ce,b4),e(b4,Dve),e(Dve,CMr),e(b4,wMr),e(b4,WH),e(WH,AMr),e(b4,yMr),e(ce,LMr),e(ce,v4),e(v4,Gve),e(Gve,xMr),e(v4,$Mr),e(v4,HH),e(HH,kMr),e(v4,SMr),e(ce,RMr),e(ce,F4),e(F4,Ove),e(Ove,BMr),e(F4,PMr),e(F4,UH),e(UH,IMr),e(F4,qMr),e(ce,NMr),e(ce,T4),e(T4,Vve),e(Vve,jMr),e(T4,DMr),e(T4,JH),e(JH,GMr),e(T4,OMr),e(ce,VMr),e(ce,M4),e(M4,Xve),e(Xve,XMr),e(M4,zMr),e(M4,YH),e(YH,QMr),e(M4,WMr),e(ce,HMr),e(ce,E4),e(E4,zve),e(zve,UMr),e(E4,JMr),e(E4,KH),e(KH,YMr),e(E4,KMr),e(ce,ZMr),e(ce,C4),e(C4,Qve),e(Qve,e4r),e(C4,o4r),e(C4,ZH),e(ZH,r4r),e(C4,t4r),e(ce,a4r),e(ce,w4),e(w4,Wve),e(Wve,n4r),e(w4,s4r),e(w4,eU),e(eU,l4r),e(w4,i4r),e(ce,d4r),e(ce,A4),e(A4,Hve),e(Hve,c4r),e(A4,f4r),e(A4,oU),e(oU,m4r),e(A4,g4r),e(ce,h4r),e(ce,y4),e(y4,Uve),e(Uve,p4r),e(y4,u4r),e(y4,rU),e(rU,_4r),e(y4,b4r),e(ce,v4r),e(ce,L4),e(L4,Jve),e(Jve,F4r),e(L4,T4r),e(L4,tU),e(tU,M4r),e(L4,E4r),e(ce,C4r),e(ce,x4),e(x4,Yve),e(Yve,w4r),e(x4,A4r),e(x4,aU),e(aU,y4r),e(x4,L4r),e(ce,x4r),e(ce,$4),e($4,Kve),e(Kve,$4r),e($4,k4r),e($4,nU),e(nU,S4r),e($4,R4r),e(ce,B4r),e(ce,k4),e(k4,Zve),e(Zve,P4r),e(k4,I4r),e(k4,sU),e(sU,q4r),e(k4,N4r),e(ce,j4r),e(ce,S4),e(S4,eFe),e(eFe,D4r),e(S4,G4r),e(S4,lU),e(lU,O4r),e(S4,V4r),e(ce,X4r),e(ce,R4),e(R4,oFe),e(oFe,z4r),e(R4,Q4r),e(R4,iU),e(iU,W4r),e(R4,H4r),e(ce,U4r),e(ce,B4),e(B4,rFe),e(rFe,J4r),e(B4,Y4r),e(B4,dU),e(dU,K4r),e(B4,Z4r),e(ce,eEr),e(ce,P4),e(P4,tFe),e(tFe,oEr),e(P4,rEr),e(P4,cU),e(cU,tEr),e(P4,aEr),e(Ir,nEr),M(I4,Ir,null),b(f,KIe,_),b(f,Fc,_),e(Fc,q4),e(q4,aFe),M(BL,aFe,null),e(Fc,sEr),e(Fc,nFe),e(nFe,lEr),b(f,ZIe,_),b(f,dr,_),M(PL,dr,null),e(dr,iEr),e(dr,Tc),e(Tc,dEr),e(Tc,fU),e(fU,cEr),e(Tc,fEr),e(Tc,mU),e(mU,mEr),e(Tc,gEr),e(dr,hEr),e(dr,IL),e(IL,pEr),e(IL,sFe),e(sFe,uEr),e(IL,_Er),e(dr,bEr),e(dr,qt),M(qL,qt,null),e(qt,vEr),e(qt,lFe),e(lFe,FEr),e(qt,TEr),e(qt,Mc),e(Mc,MEr),e(Mc,iFe),e(iFe,EEr),e(Mc,CEr),e(Mc,gU),e(gU,wEr),e(Mc,AEr),e(qt,yEr),M(N4,qt,null),e(dr,LEr),e(dr,qr),M(NL,qr,null),e(qr,xEr),e(qr,dFe),e(dFe,$Er),e(qr,kEr),e(qr,fn),e(fn,SEr),e(fn,cFe),e(cFe,REr),e(fn,BEr),e(fn,fFe),e(fFe,PEr),e(fn,IEr),e(fn,mFe),e(mFe,qEr),e(fn,NEr),e(qr,jEr),e(qr,gFe),e(gFe,j4),e(j4,hFe),e(hFe,DEr),e(j4,GEr),e(j4,hU),e(hU,OEr),e(j4,VEr),e(qr,XEr),M(D4,qr,null),b(f,eqe,_),b(f,Ec,_),e(Ec,G4),e(G4,pFe),M(jL,pFe,null),e(Ec,zEr),e(Ec,uFe),e(uFe,QEr),b(f,oqe,_),b(f,cr,_),M(DL,cr,null),e(cr,WEr),e(cr,Cc),e(Cc,HEr),e(Cc,pU),e(pU,UEr),e(Cc,JEr),e(Cc,uU),e(uU,YEr),e(Cc,KEr),e(cr,ZEr),e(cr,GL),e(GL,e5r),e(GL,_Fe),e(_Fe,o5r),e(GL,r5r),e(cr,t5r),e(cr,Nt),M(OL,Nt,null),e(Nt,a5r),e(Nt,bFe),e(bFe,n5r),e(Nt,s5r),e(Nt,wc),e(wc,l5r),e(wc,vFe),e(vFe,i5r),e(wc,d5r),e(wc,_U),e(_U,c5r),e(wc,f5r),e(Nt,m5r),M(O4,Nt,null),e(cr,g5r),e(cr,Nr),M(VL,Nr,null),e(Nr,h5r),e(Nr,FFe),e(FFe,p5r),e(Nr,u5r),e(Nr,mn),e(mn,_5r),e(mn,TFe),e(TFe,b5r),e(mn,v5r),e(mn,MFe),e(MFe,F5r),e(mn,T5r),e(mn,EFe),e(EFe,M5r),e(mn,E5r),e(Nr,C5r),e(Nr,CFe),e(CFe,V4),e(V4,wFe),e(wFe,w5r),e(V4,A5r),e(V4,bU),e(bU,y5r),e(V4,L5r),e(Nr,x5r),M(X4,Nr,null),b(f,rqe,_),b(f,Ac,_),e(Ac,z4),e(z4,AFe),M(XL,AFe,null),e(Ac,$5r),e(Ac,yFe),e(yFe,k5r),b(f,tqe,_),b(f,fr,_),M(zL,fr,null),e(fr,S5r),e(fr,yc),e(yc,R5r),e(yc,vU),e(vU,B5r),e(yc,P5r),e(yc,FU),e(FU,I5r),e(yc,q5r),e(fr,N5r),e(fr,QL),e(QL,j5r),e(QL,LFe),e(LFe,D5r),e(QL,G5r),e(fr,O5r),e(fr,jt),M(WL,jt,null),e(jt,V5r),e(jt,xFe),e(xFe,X5r),e(jt,z5r),e(jt,Lc),e(Lc,Q5r),e(Lc,$Fe),e($Fe,W5r),e(Lc,H5r),e(Lc,TU),e(TU,U5r),e(Lc,J5r),e(jt,Y5r),M(Q4,jt,null),e(fr,K5r),e(fr,jr),M(HL,jr,null),e(jr,Z5r),e(jr,kFe),e(kFe,eCr),e(jr,oCr),e(jr,gn),e(gn,rCr),e(gn,SFe),e(SFe,tCr),e(gn,aCr),e(gn,RFe),e(RFe,nCr),e(gn,sCr),e(gn,BFe),e(BFe,lCr),e(gn,iCr),e(jr,dCr),e(jr,oe),e(oe,W4),e(W4,PFe),e(PFe,cCr),e(W4,fCr),e(W4,MU),e(MU,mCr),e(W4,gCr),e(oe,hCr),e(oe,H4),e(H4,IFe),e(IFe,pCr),e(H4,uCr),e(H4,EU),e(EU,_Cr),e(H4,bCr),e(oe,vCr),e(oe,U4),e(U4,qFe),e(qFe,FCr),e(U4,TCr),e(U4,CU),e(CU,MCr),e(U4,ECr),e(oe,CCr),e(oe,J4),e(J4,NFe),e(NFe,wCr),e(J4,ACr),e(J4,wU),e(wU,yCr),e(J4,LCr),e(oe,xCr),e(oe,Y4),e(Y4,jFe),e(jFe,$Cr),e(Y4,kCr),e(Y4,AU),e(AU,SCr),e(Y4,RCr),e(oe,BCr),e(oe,K4),e(K4,DFe),e(DFe,PCr),e(K4,ICr),e(K4,yU),e(yU,qCr),e(K4,NCr),e(oe,jCr),e(oe,Z4),e(Z4,GFe),e(GFe,DCr),e(Z4,GCr),e(Z4,LU),e(LU,OCr),e(Z4,VCr),e(oe,XCr),e(oe,eE),e(eE,OFe),e(OFe,zCr),e(eE,QCr),e(eE,xU),e(xU,WCr),e(eE,HCr),e(oe,UCr),e(oe,oE),e(oE,VFe),e(VFe,JCr),e(oE,YCr),e(oE,$U),e($U,KCr),e(oE,ZCr),e(oe,e3r),e(oe,rE),e(rE,XFe),e(XFe,o3r),e(rE,r3r),e(rE,kU),e(kU,t3r),e(rE,a3r),e(oe,n3r),e(oe,tE),e(tE,zFe),e(zFe,s3r),e(tE,l3r),e(tE,SU),e(SU,i3r),e(tE,d3r),e(oe,c3r),e(oe,aE),e(aE,QFe),e(QFe,f3r),e(aE,m3r),e(aE,RU),e(RU,g3r),e(aE,h3r),e(oe,p3r),e(oe,nE),e(nE,WFe),e(WFe,u3r),e(nE,_3r),e(nE,BU),e(BU,b3r),e(nE,v3r),e(oe,F3r),e(oe,sE),e(sE,HFe),e(HFe,T3r),e(sE,M3r),e(sE,PU),e(PU,E3r),e(sE,C3r),e(oe,w3r),e(oe,lE),e(lE,UFe),e(UFe,A3r),e(lE,y3r),e(lE,IU),e(IU,L3r),e(lE,x3r),e(oe,$3r),e(oe,iE),e(iE,JFe),e(JFe,k3r),e(iE,S3r),e(iE,qU),e(qU,R3r),e(iE,B3r),e(oe,P3r),e(oe,dE),e(dE,YFe),e(YFe,I3r),e(dE,q3r),e(dE,NU),e(NU,N3r),e(dE,j3r),e(oe,D3r),e(oe,cE),e(cE,KFe),e(KFe,G3r),e(cE,O3r),e(cE,jU),e(jU,V3r),e(cE,X3r),e(oe,z3r),e(oe,fE),e(fE,ZFe),e(ZFe,Q3r),e(fE,W3r),e(fE,DU),e(DU,H3r),e(fE,U3r),e(oe,J3r),e(oe,mE),e(mE,e0e),e(e0e,Y3r),e(mE,K3r),e(mE,GU),e(GU,Z3r),e(mE,ewr),e(oe,owr),e(oe,gE),e(gE,o0e),e(o0e,rwr),e(gE,twr),e(gE,OU),e(OU,awr),e(gE,nwr),e(oe,swr),e(oe,hE),e(hE,r0e),e(r0e,lwr),e(hE,iwr),e(hE,VU),e(VU,dwr),e(hE,cwr),e(oe,fwr),e(oe,pE),e(pE,t0e),e(t0e,mwr),e(pE,gwr),e(pE,XU),e(XU,hwr),e(pE,pwr),e(oe,uwr),e(oe,uE),e(uE,a0e),e(a0e,_wr),e(uE,bwr),e(uE,zU),e(zU,vwr),e(uE,Fwr),e(oe,Twr),e(oe,_E),e(_E,n0e),e(n0e,Mwr),e(_E,Ewr),e(_E,QU),e(QU,Cwr),e(_E,wwr),e(jr,Awr),M(bE,jr,null),b(f,aqe,_),b(f,xc,_),e(xc,vE),e(vE,s0e),M(UL,s0e,null),e(xc,ywr),e(xc,l0e),e(l0e,Lwr),b(f,nqe,_),b(f,mr,_),M(JL,mr,null),e(mr,xwr),e(mr,$c),e($c,$wr),e($c,WU),e(WU,kwr),e($c,Swr),e($c,HU),e(HU,Rwr),e($c,Bwr),e(mr,Pwr),e(mr,YL),e(YL,Iwr),e(YL,i0e),e(i0e,qwr),e(YL,Nwr),e(mr,jwr),e(mr,Dt),M(KL,Dt,null),e(Dt,Dwr),e(Dt,d0e),e(d0e,Gwr),e(Dt,Owr),e(Dt,kc),e(kc,Vwr),e(kc,c0e),e(c0e,Xwr),e(kc,zwr),e(kc,UU),e(UU,Qwr),e(kc,Wwr),e(Dt,Hwr),M(FE,Dt,null),e(mr,Uwr),e(mr,Dr),M(ZL,Dr,null),e(Dr,Jwr),e(Dr,f0e),e(f0e,Ywr),e(Dr,Kwr),e(Dr,hn),e(hn,Zwr),e(hn,m0e),e(m0e,eAr),e(hn,oAr),e(hn,g0e),e(g0e,rAr),e(hn,tAr),e(hn,h0e),e(h0e,aAr),e(hn,nAr),e(Dr,sAr),e(Dr,ke),e(ke,TE),e(TE,p0e),e(p0e,lAr),e(TE,iAr),e(TE,JU),e(JU,dAr),e(TE,cAr),e(ke,fAr),e(ke,ME),e(ME,u0e),e(u0e,mAr),e(ME,gAr),e(ME,YU),e(YU,hAr),e(ME,pAr),e(ke,uAr),e(ke,EE),e(EE,_0e),e(_0e,_Ar),e(EE,bAr),e(EE,KU),e(KU,vAr),e(EE,FAr),e(ke,TAr),e(ke,CE),e(CE,b0e),e(b0e,MAr),e(CE,EAr),e(CE,ZU),e(ZU,CAr),e(CE,wAr),e(ke,AAr),e(ke,wE),e(wE,v0e),e(v0e,yAr),e(wE,LAr),e(wE,eJ),e(eJ,xAr),e(wE,$Ar),e(ke,kAr),e(ke,AE),e(AE,F0e),e(F0e,SAr),e(AE,RAr),e(AE,oJ),e(oJ,BAr),e(AE,PAr),e(ke,IAr),e(ke,yE),e(yE,T0e),e(T0e,qAr),e(yE,NAr),e(yE,rJ),e(rJ,jAr),e(yE,DAr),e(ke,GAr),e(ke,LE),e(LE,M0e),e(M0e,OAr),e(LE,VAr),e(LE,tJ),e(tJ,XAr),e(LE,zAr),e(ke,QAr),e(ke,xE),e(xE,E0e),e(E0e,WAr),e(xE,HAr),e(xE,aJ),e(aJ,UAr),e(xE,JAr),e(Dr,YAr),M($E,Dr,null),b(f,sqe,_),b(f,Sc,_),e(Sc,kE),e(kE,C0e),M(ex,C0e,null),e(Sc,KAr),e(Sc,w0e),e(w0e,ZAr),b(f,lqe,_),b(f,gr,_),M(ox,gr,null),e(gr,e6r),e(gr,Rc),e(Rc,o6r),e(Rc,nJ),e(nJ,r6r),e(Rc,t6r),e(Rc,sJ),e(sJ,a6r),e(Rc,n6r),e(gr,s6r),e(gr,rx),e(rx,l6r),e(rx,A0e),e(A0e,i6r),e(rx,d6r),e(gr,c6r),e(gr,Gt),M(tx,Gt,null),e(Gt,f6r),e(Gt,y0e),e(y0e,m6r),e(Gt,g6r),e(Gt,Bc),e(Bc,h6r),e(Bc,L0e),e(L0e,p6r),e(Bc,u6r),e(Bc,lJ),e(lJ,_6r),e(Bc,b6r),e(Gt,v6r),M(SE,Gt,null),e(gr,F6r),e(gr,Gr),M(ax,Gr,null),e(Gr,T6r),e(Gr,x0e),e(x0e,M6r),e(Gr,E6r),e(Gr,pn),e(pn,C6r),e(pn,$0e),e($0e,w6r),e(pn,A6r),e(pn,k0e),e(k0e,y6r),e(pn,L6r),e(pn,S0e),e(S0e,x6r),e(pn,$6r),e(Gr,k6r),e(Gr,Me),e(Me,RE),e(RE,R0e),e(R0e,S6r),e(RE,R6r),e(RE,iJ),e(iJ,B6r),e(RE,P6r),e(Me,I6r),e(Me,BE),e(BE,B0e),e(B0e,q6r),e(BE,N6r),e(BE,dJ),e(dJ,j6r),e(BE,D6r),e(Me,G6r),e(Me,PE),e(PE,P0e),e(P0e,O6r),e(PE,V6r),e(PE,cJ),e(cJ,X6r),e(PE,z6r),e(Me,Q6r),e(Me,IE),e(IE,I0e),e(I0e,W6r),e(IE,H6r),e(IE,fJ),e(fJ,U6r),e(IE,J6r),e(Me,Y6r),e(Me,qE),e(qE,q0e),e(q0e,K6r),e(qE,Z6r),e(qE,mJ),e(mJ,eyr),e(qE,oyr),e(Me,ryr),e(Me,NE),e(NE,N0e),e(N0e,tyr),e(NE,ayr),e(NE,gJ),e(gJ,nyr),e(NE,syr),e(Me,lyr),e(Me,jE),e(jE,j0e),e(j0e,iyr),e(jE,dyr),e(jE,hJ),e(hJ,cyr),e(jE,fyr),e(Me,myr),e(Me,DE),e(DE,D0e),e(D0e,gyr),e(DE,hyr),e(DE,pJ),e(pJ,pyr),e(DE,uyr),e(Me,_yr),e(Me,GE),e(GE,G0e),e(G0e,byr),e(GE,vyr),e(GE,uJ),e(uJ,Fyr),e(GE,Tyr),e(Me,Myr),e(Me,OE),e(OE,O0e),e(O0e,Eyr),e(OE,Cyr),e(OE,_J),e(_J,wyr),e(OE,Ayr),e(Me,yyr),e(Me,VE),e(VE,V0e),e(V0e,Lyr),e(VE,xyr),e(VE,bJ),e(bJ,$yr),e(VE,kyr),e(Me,Syr),e(Me,XE),e(XE,X0e),e(X0e,Ryr),e(XE,Byr),e(XE,vJ),e(vJ,Pyr),e(XE,Iyr),e(Gr,qyr),M(zE,Gr,null),b(f,iqe,_),b(f,Pc,_),e(Pc,QE),e(QE,z0e),M(nx,z0e,null),e(Pc,Nyr),e(Pc,Q0e),e(Q0e,jyr),b(f,dqe,_),b(f,hr,_),M(sx,hr,null),e(hr,Dyr),e(hr,Ic),e(Ic,Gyr),e(Ic,FJ),e(FJ,Oyr),e(Ic,Vyr),e(Ic,TJ),e(TJ,Xyr),e(Ic,zyr),e(hr,Qyr),e(hr,lx),e(lx,Wyr),e(lx,W0e),e(W0e,Hyr),e(lx,Uyr),e(hr,Jyr),e(hr,Ot),M(ix,Ot,null),e(Ot,Yyr),e(Ot,H0e),e(H0e,Kyr),e(Ot,Zyr),e(Ot,qc),e(qc,eLr),e(qc,U0e),e(U0e,oLr),e(qc,rLr),e(qc,MJ),e(MJ,tLr),e(qc,aLr),e(Ot,nLr),M(WE,Ot,null),e(hr,sLr),e(hr,Or),M(dx,Or,null),e(Or,lLr),e(Or,J0e),e(J0e,iLr),e(Or,dLr),e(Or,un),e(un,cLr),e(un,Y0e),e(Y0e,fLr),e(un,mLr),e(un,K0e),e(K0e,gLr),e(un,hLr),e(un,Z0e),e(Z0e,pLr),e(un,uLr),e(Or,_Lr),e(Or,Le),e(Le,HE),e(HE,eTe),e(eTe,bLr),e(HE,vLr),e(HE,EJ),e(EJ,FLr),e(HE,TLr),e(Le,MLr),e(Le,UE),e(UE,oTe),e(oTe,ELr),e(UE,CLr),e(UE,CJ),e(CJ,wLr),e(UE,ALr),e(Le,yLr),e(Le,JE),e(JE,rTe),e(rTe,LLr),e(JE,xLr),e(JE,wJ),e(wJ,$Lr),e(JE,kLr),e(Le,SLr),e(Le,YE),e(YE,tTe),e(tTe,RLr),e(YE,BLr),e(YE,AJ),e(AJ,PLr),e(YE,ILr),e(Le,qLr),e(Le,KE),e(KE,aTe),e(aTe,NLr),e(KE,jLr),e(KE,yJ),e(yJ,DLr),e(KE,GLr),e(Le,OLr),e(Le,ZE),e(ZE,nTe),e(nTe,VLr),e(ZE,XLr),e(ZE,LJ),e(LJ,zLr),e(ZE,QLr),e(Le,WLr),e(Le,e5),e(e5,sTe),e(sTe,HLr),e(e5,ULr),e(e5,xJ),e(xJ,JLr),e(e5,YLr),e(Le,KLr),e(Le,o5),e(o5,lTe),e(lTe,ZLr),e(o5,exr),e(o5,$J),e($J,oxr),e(o5,rxr),e(Le,txr),e(Le,r5),e(r5,iTe),e(iTe,axr),e(r5,nxr),e(r5,kJ),e(kJ,sxr),e(r5,lxr),e(Le,ixr),e(Le,t5),e(t5,dTe),e(dTe,dxr),e(t5,cxr),e(t5,SJ),e(SJ,fxr),e(t5,mxr),e(Or,gxr),M(a5,Or,null),b(f,cqe,_),b(f,Nc,_),e(Nc,n5),e(n5,cTe),M(cx,cTe,null),e(Nc,hxr),e(Nc,fTe),e(fTe,pxr),b(f,fqe,_),b(f,pr,_),M(fx,pr,null),e(pr,uxr),e(pr,jc),e(jc,_xr),e(jc,RJ),e(RJ,bxr),e(jc,vxr),e(jc,BJ),e(BJ,Fxr),e(jc,Txr),e(pr,Mxr),e(pr,mx),e(mx,Exr),e(mx,mTe),e(mTe,Cxr),e(mx,wxr),e(pr,Axr),e(pr,Vt),M(gx,Vt,null),e(Vt,yxr),e(Vt,gTe),e(gTe,Lxr),e(Vt,xxr),e(Vt,Dc),e(Dc,$xr),e(Dc,hTe),e(hTe,kxr),e(Dc,Sxr),e(Dc,PJ),e(PJ,Rxr),e(Dc,Bxr),e(Vt,Pxr),M(s5,Vt,null),e(pr,Ixr),e(pr,Vr),M(hx,Vr,null),e(Vr,qxr),e(Vr,pTe),e(pTe,Nxr),e(Vr,jxr),e(Vr,_n),e(_n,Dxr),e(_n,uTe),e(uTe,Gxr),e(_n,Oxr),e(_n,_Te),e(_Te,Vxr),e(_n,Xxr),e(_n,bTe),e(bTe,zxr),e(_n,Qxr),e(Vr,Wxr),e(Vr,Se),e(Se,l5),e(l5,vTe),e(vTe,Hxr),e(l5,Uxr),e(l5,IJ),e(IJ,Jxr),e(l5,Yxr),e(Se,Kxr),e(Se,i5),e(i5,FTe),e(FTe,Zxr),e(i5,e9r),e(i5,qJ),e(qJ,o9r),e(i5,r9r),e(Se,t9r),e(Se,d5),e(d5,TTe),e(TTe,a9r),e(d5,n9r),e(d5,NJ),e(NJ,s9r),e(d5,l9r),e(Se,i9r),e(Se,c5),e(c5,MTe),e(MTe,d9r),e(c5,c9r),e(c5,jJ),e(jJ,f9r),e(c5,m9r),e(Se,g9r),e(Se,f5),e(f5,ETe),e(ETe,h9r),e(f5,p9r),e(f5,DJ),e(DJ,u9r),e(f5,_9r),e(Se,b9r),e(Se,m5),e(m5,CTe),e(CTe,v9r),e(m5,F9r),e(m5,GJ),e(GJ,T9r),e(m5,M9r),e(Se,E9r),e(Se,g5),e(g5,wTe),e(wTe,C9r),e(g5,w9r),e(g5,OJ),e(OJ,A9r),e(g5,y9r),e(Se,L9r),e(Se,h5),e(h5,ATe),e(ATe,x9r),e(h5,$9r),e(h5,VJ),e(VJ,k9r),e(h5,S9r),e(Se,R9r),e(Se,p5),e(p5,yTe),e(yTe,B9r),e(p5,P9r),e(p5,XJ),e(XJ,I9r),e(p5,q9r),e(Vr,N9r),M(u5,Vr,null),b(f,mqe,_),b(f,Gc,_),e(Gc,_5),e(_5,LTe),M(px,LTe,null),e(Gc,j9r),e(Gc,xTe),e(xTe,D9r),b(f,gqe,_),b(f,ur,_),M(ux,ur,null),e(ur,G9r),e(ur,Oc),e(Oc,O9r),e(Oc,zJ),e(zJ,V9r),e(Oc,X9r),e(Oc,QJ),e(QJ,z9r),e(Oc,Q9r),e(ur,W9r),e(ur,_x),e(_x,H9r),e(_x,$Te),e($Te,U9r),e(_x,J9r),e(ur,Y9r),e(ur,Xt),M(bx,Xt,null),e(Xt,K9r),e(Xt,kTe),e(kTe,Z9r),e(Xt,e$r),e(Xt,Vc),e(Vc,o$r),e(Vc,STe),e(STe,r$r),e(Vc,t$r),e(Vc,WJ),e(WJ,a$r),e(Vc,n$r),e(Xt,s$r),M(b5,Xt,null),e(ur,l$r),e(ur,Xr),M(vx,Xr,null),e(Xr,i$r),e(Xr,RTe),e(RTe,d$r),e(Xr,c$r),e(Xr,bn),e(bn,f$r),e(bn,BTe),e(BTe,m$r),e(bn,g$r),e(bn,PTe),e(PTe,h$r),e(bn,p$r),e(bn,ITe),e(ITe,u$r),e(bn,_$r),e(Xr,b$r),e(Xr,xe),e(xe,v5),e(v5,qTe),e(qTe,v$r),e(v5,F$r),e(v5,HJ),e(HJ,T$r),e(v5,M$r),e(xe,E$r),e(xe,F5),e(F5,NTe),e(NTe,C$r),e(F5,w$r),e(F5,UJ),e(UJ,A$r),e(F5,y$r),e(xe,L$r),e(xe,T5),e(T5,jTe),e(jTe,x$r),e(T5,$$r),e(T5,JJ),e(JJ,k$r),e(T5,S$r),e(xe,R$r),e(xe,M5),e(M5,DTe),e(DTe,B$r),e(M5,P$r),e(M5,YJ),e(YJ,I$r),e(M5,q$r),e(xe,N$r),e(xe,E5),e(E5,GTe),e(GTe,j$r),e(E5,D$r),e(E5,KJ),e(KJ,G$r),e(E5,O$r),e(xe,V$r),e(xe,C5),e(C5,OTe),e(OTe,X$r),e(C5,z$r),e(C5,ZJ),e(ZJ,Q$r),e(C5,W$r),e(xe,H$r),e(xe,w5),e(w5,VTe),e(VTe,U$r),e(w5,J$r),e(w5,eY),e(eY,Y$r),e(w5,K$r),e(xe,Z$r),e(xe,A5),e(A5,XTe),e(XTe,ekr),e(A5,okr),e(A5,oY),e(oY,rkr),e(A5,tkr),e(xe,akr),e(xe,y5),e(y5,zTe),e(zTe,nkr),e(y5,skr),e(y5,rY),e(rY,lkr),e(y5,ikr),e(xe,dkr),e(xe,L5),e(L5,QTe),e(QTe,ckr),e(L5,fkr),e(L5,tY),e(tY,mkr),e(L5,gkr),e(Xr,hkr),M(x5,Xr,null),b(f,hqe,_),b(f,Xc,_),e(Xc,$5),e($5,WTe),M(Fx,WTe,null),e(Xc,pkr),e(Xc,HTe),e(HTe,ukr),b(f,pqe,_),b(f,_r,_),M(Tx,_r,null),e(_r,_kr),e(_r,zc),e(zc,bkr),e(zc,aY),e(aY,vkr),e(zc,Fkr),e(zc,nY),e(nY,Tkr),e(zc,Mkr),e(_r,Ekr),e(_r,Mx),e(Mx,Ckr),e(Mx,UTe),e(UTe,wkr),e(Mx,Akr),e(_r,ykr),e(_r,zt),M(Ex,zt,null),e(zt,Lkr),e(zt,JTe),e(JTe,xkr),e(zt,$kr),e(zt,Qc),e(Qc,kkr),e(Qc,YTe),e(YTe,Skr),e(Qc,Rkr),e(Qc,sY),e(sY,Bkr),e(Qc,Pkr),e(zt,Ikr),M(k5,zt,null),e(_r,qkr),e(_r,zr),M(Cx,zr,null),e(zr,Nkr),e(zr,KTe),e(KTe,jkr),e(zr,Dkr),e(zr,vn),e(vn,Gkr),e(vn,ZTe),e(ZTe,Okr),e(vn,Vkr),e(vn,e7e),e(e7e,Xkr),e(vn,zkr),e(vn,o7e),e(o7e,Qkr),e(vn,Wkr),e(zr,Hkr),e(zr,$e),e($e,S5),e(S5,r7e),e(r7e,Ukr),e(S5,Jkr),e(S5,lY),e(lY,Ykr),e(S5,Kkr),e($e,Zkr),e($e,R5),e(R5,t7e),e(t7e,eSr),e(R5,oSr),e(R5,iY),e(iY,rSr),e(R5,tSr),e($e,aSr),e($e,B5),e(B5,a7e),e(a7e,nSr),e(B5,sSr),e(B5,dY),e(dY,lSr),e(B5,iSr),e($e,dSr),e($e,P5),e(P5,n7e),e(n7e,cSr),e(P5,fSr),e(P5,cY),e(cY,mSr),e(P5,gSr),e($e,hSr),e($e,I5),e(I5,s7e),e(s7e,pSr),e(I5,uSr),e(I5,fY),e(fY,_Sr),e(I5,bSr),e($e,vSr),e($e,q5),e(q5,l7e),e(l7e,FSr),e(q5,TSr),e(q5,mY),e(mY,MSr),e(q5,ESr),e($e,CSr),e($e,N5),e(N5,i7e),e(i7e,wSr),e(N5,ASr),e(N5,gY),e(gY,ySr),e(N5,LSr),e($e,xSr),e($e,j5),e(j5,d7e),e(d7e,$Sr),e(j5,kSr),e(j5,hY),e(hY,SSr),e(j5,RSr),e($e,BSr),e($e,D5),e(D5,c7e),e(c7e,PSr),e(D5,ISr),e(D5,pY),e(pY,qSr),e(D5,NSr),e($e,jSr),e($e,G5),e(G5,f7e),e(f7e,DSr),e(G5,GSr),e(G5,uY),e(uY,OSr),e(G5,VSr),e(zr,XSr),M(O5,zr,null),b(f,uqe,_),b(f,Wc,_),e(Wc,V5),e(V5,m7e),M(wx,m7e,null),e(Wc,zSr),e(Wc,g7e),e(g7e,QSr),b(f,_qe,_),b(f,br,_),M(Ax,br,null),e(br,WSr),e(br,Hc),e(Hc,HSr),e(Hc,_Y),e(_Y,USr),e(Hc,JSr),e(Hc,bY),e(bY,YSr),e(Hc,KSr),e(br,ZSr),e(br,yx),e(yx,eRr),e(yx,h7e),e(h7e,oRr),e(yx,rRr),e(br,tRr),e(br,Qt),M(Lx,Qt,null),e(Qt,aRr),e(Qt,p7e),e(p7e,nRr),e(Qt,sRr),e(Qt,Uc),e(Uc,lRr),e(Uc,u7e),e(u7e,iRr),e(Uc,dRr),e(Uc,vY),e(vY,cRr),e(Uc,fRr),e(Qt,mRr),M(X5,Qt,null),e(br,gRr),e(br,Qr),M(xx,Qr,null),e(Qr,hRr),e(Qr,_7e),e(_7e,pRr),e(Qr,uRr),e(Qr,Fn),e(Fn,_Rr),e(Fn,b7e),e(b7e,bRr),e(Fn,vRr),e(Fn,v7e),e(v7e,FRr),e(Fn,TRr),e(Fn,F7e),e(F7e,MRr),e(Fn,ERr),e(Qr,CRr),e(Qr,De),e(De,z5),e(z5,T7e),e(T7e,wRr),e(z5,ARr),e(z5,FY),e(FY,yRr),e(z5,LRr),e(De,xRr),e(De,Q5),e(Q5,M7e),e(M7e,$Rr),e(Q5,kRr),e(Q5,TY),e(TY,SRr),e(Q5,RRr),e(De,BRr),e(De,W5),e(W5,E7e),e(E7e,PRr),e(W5,IRr),e(W5,MY),e(MY,qRr),e(W5,NRr),e(De,jRr),e(De,H5),e(H5,C7e),e(C7e,DRr),e(H5,GRr),e(H5,EY),e(EY,ORr),e(H5,VRr),e(De,XRr),e(De,U5),e(U5,w7e),e(w7e,zRr),e(U5,QRr),e(U5,CY),e(CY,WRr),e(U5,HRr),e(De,URr),e(De,J5),e(J5,A7e),e(A7e,JRr),e(J5,YRr),e(J5,wY),e(wY,KRr),e(J5,ZRr),e(De,eBr),e(De,Y5),e(Y5,y7e),e(y7e,oBr),e(Y5,rBr),e(Y5,AY),e(AY,tBr),e(Y5,aBr),e(De,nBr),e(De,K5),e(K5,L7e),e(L7e,sBr),e(K5,lBr),e(K5,yY),e(yY,iBr),e(K5,dBr),e(Qr,cBr),M(Z5,Qr,null),b(f,bqe,_),b(f,Jc,_),e(Jc,eC),e(eC,x7e),M($x,x7e,null),e(Jc,fBr),e(Jc,$7e),e($7e,mBr),b(f,vqe,_),b(f,vr,_),M(kx,vr,null),e(vr,gBr),e(vr,Yc),e(Yc,hBr),e(Yc,LY),e(LY,pBr),e(Yc,uBr),e(Yc,xY),e(xY,_Br),e(Yc,bBr),e(vr,vBr),e(vr,Sx),e(Sx,FBr),e(Sx,k7e),e(k7e,TBr),e(Sx,MBr),e(vr,EBr),e(vr,Wt),M(Rx,Wt,null),e(Wt,CBr),e(Wt,S7e),e(S7e,wBr),e(Wt,ABr),e(Wt,Kc),e(Kc,yBr),e(Kc,R7e),e(R7e,LBr),e(Kc,xBr),e(Kc,$Y),e($Y,$Br),e(Kc,kBr),e(Wt,SBr),M(oC,Wt,null),e(vr,RBr),e(vr,Wr),M(Bx,Wr,null),e(Wr,BBr),e(Wr,B7e),e(B7e,PBr),e(Wr,IBr),e(Wr,Tn),e(Tn,qBr),e(Tn,P7e),e(P7e,NBr),e(Tn,jBr),e(Tn,I7e),e(I7e,DBr),e(Tn,GBr),e(Tn,q7e),e(q7e,OBr),e(Tn,VBr),e(Wr,XBr),e(Wr,Ge),e(Ge,rC),e(rC,N7e),e(N7e,zBr),e(rC,QBr),e(rC,kY),e(kY,WBr),e(rC,HBr),e(Ge,UBr),e(Ge,tC),e(tC,j7e),e(j7e,JBr),e(tC,YBr),e(tC,SY),e(SY,KBr),e(tC,ZBr),e(Ge,ePr),e(Ge,aC),e(aC,D7e),e(D7e,oPr),e(aC,rPr),e(aC,RY),e(RY,tPr),e(aC,aPr),e(Ge,nPr),e(Ge,nC),e(nC,G7e),e(G7e,sPr),e(nC,lPr),e(nC,BY),e(BY,iPr),e(nC,dPr),e(Ge,cPr),e(Ge,sC),e(sC,O7e),e(O7e,fPr),e(sC,mPr),e(sC,PY),e(PY,gPr),e(sC,hPr),e(Ge,pPr),e(Ge,lC),e(lC,V7e),e(V7e,uPr),e(lC,_Pr),e(lC,IY),e(IY,bPr),e(lC,vPr),e(Ge,FPr),e(Ge,iC),e(iC,X7e),e(X7e,TPr),e(iC,MPr),e(iC,qY),e(qY,EPr),e(iC,CPr),e(Ge,wPr),e(Ge,dC),e(dC,z7e),e(z7e,APr),e(dC,yPr),e(dC,NY),e(NY,LPr),e(dC,xPr),e(Wr,$Pr),M(cC,Wr,null),b(f,Fqe,_),b(f,Zc,_),e(Zc,fC),e(fC,Q7e),M(Px,Q7e,null),e(Zc,kPr),e(Zc,W7e),e(W7e,SPr),b(f,Tqe,_),b(f,Fr,_),M(Ix,Fr,null),e(Fr,RPr),e(Fr,ef),e(ef,BPr),e(ef,jY),e(jY,PPr),e(ef,IPr),e(ef,DY),e(DY,qPr),e(ef,NPr),e(Fr,jPr),e(Fr,qx),e(qx,DPr),e(qx,H7e),e(H7e,GPr),e(qx,OPr),e(Fr,VPr),e(Fr,Ht),M(Nx,Ht,null),e(Ht,XPr),e(Ht,U7e),e(U7e,zPr),e(Ht,QPr),e(Ht,of),e(of,WPr),e(of,J7e),e(J7e,HPr),e(of,UPr),e(of,GY),e(GY,JPr),e(of,YPr),e(Ht,KPr),M(mC,Ht,null),e(Fr,ZPr),e(Fr,Hr),M(jx,Hr,null),e(Hr,eIr),e(Hr,Y7e),e(Y7e,oIr),e(Hr,rIr),e(Hr,Mn),e(Mn,tIr),e(Mn,K7e),e(K7e,aIr),e(Mn,nIr),e(Mn,Z7e),e(Z7e,sIr),e(Mn,lIr),e(Mn,eMe),e(eMe,iIr),e(Mn,dIr),e(Hr,cIr),e(Hr,oMe),e(oMe,gC),e(gC,rMe),e(rMe,fIr),e(gC,mIr),e(gC,OY),e(OY,gIr),e(gC,hIr),e(Hr,pIr),M(hC,Hr,null),b(f,Mqe,_),b(f,rf,_),e(rf,pC),e(pC,tMe),M(Dx,tMe,null),e(rf,uIr),e(rf,aMe),e(aMe,_Ir),b(f,Eqe,_),b(f,Tr,_),M(Gx,Tr,null),e(Tr,bIr),e(Tr,tf),e(tf,vIr),e(tf,VY),e(VY,FIr),e(tf,TIr),e(tf,XY),e(XY,MIr),e(tf,EIr),e(Tr,CIr),e(Tr,Ox),e(Ox,wIr),e(Ox,nMe),e(nMe,AIr),e(Ox,yIr),e(Tr,LIr),e(Tr,Ut),M(Vx,Ut,null),e(Ut,xIr),e(Ut,sMe),e(sMe,$Ir),e(Ut,kIr),e(Ut,af),e(af,SIr),e(af,lMe),e(lMe,RIr),e(af,BIr),e(af,zY),e(zY,PIr),e(af,IIr),e(Ut,qIr),M(uC,Ut,null),e(Tr,NIr),e(Tr,Ur),M(Xx,Ur,null),e(Ur,jIr),e(Ur,iMe),e(iMe,DIr),e(Ur,GIr),e(Ur,En),e(En,OIr),e(En,dMe),e(dMe,VIr),e(En,XIr),e(En,cMe),e(cMe,zIr),e(En,QIr),e(En,fMe),e(fMe,WIr),e(En,HIr),e(Ur,UIr),e(Ur,zx),e(zx,_C),e(_C,mMe),e(mMe,JIr),e(_C,YIr),e(_C,QY),e(QY,KIr),e(_C,ZIr),e(zx,eqr),e(zx,bC),e(bC,gMe),e(gMe,oqr),e(bC,rqr),e(bC,WY),e(WY,tqr),e(bC,aqr),e(Ur,nqr),M(vC,Ur,null),b(f,Cqe,_),b(f,nf,_),e(nf,FC),e(FC,hMe),M(Qx,hMe,null),e(nf,sqr),e(nf,pMe),e(pMe,lqr),b(f,wqe,_),b(f,Mr,_),M(Wx,Mr,null),e(Mr,iqr),e(Mr,sf),e(sf,dqr),e(sf,HY),e(HY,cqr),e(sf,fqr),e(sf,UY),e(UY,mqr),e(sf,gqr),e(Mr,hqr),e(Mr,Hx),e(Hx,pqr),e(Hx,uMe),e(uMe,uqr),e(Hx,_qr),e(Mr,bqr),e(Mr,Jt),M(Ux,Jt,null),e(Jt,vqr),e(Jt,_Me),e(_Me,Fqr),e(Jt,Tqr),e(Jt,lf),e(lf,Mqr),e(lf,bMe),e(bMe,Eqr),e(lf,Cqr),e(lf,JY),e(JY,wqr),e(lf,Aqr),e(Jt,yqr),M(TC,Jt,null),e(Mr,Lqr),e(Mr,Jr),M(Jx,Jr,null),e(Jr,xqr),e(Jr,vMe),e(vMe,$qr),e(Jr,kqr),e(Jr,Cn),e(Cn,Sqr),e(Cn,FMe),e(FMe,Rqr),e(Cn,Bqr),e(Cn,TMe),e(TMe,Pqr),e(Cn,Iqr),e(Cn,MMe),e(MMe,qqr),e(Cn,Nqr),e(Jr,jqr),e(Jr,EMe),e(EMe,MC),e(MC,CMe),e(CMe,Dqr),e(MC,Gqr),e(MC,YY),e(YY,Oqr),e(MC,Vqr),e(Jr,Xqr),M(EC,Jr,null),Aqe=!0},p(f,[_]){const Yx={};_&2&&(Yx.$$scope={dirty:_,ctx:f}),_f.$set(Yx);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),pg.$set(wMe);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),Hg.$set(AMe);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),Th.$set(yMe);const Kx={};_&2&&(Kx.$$scope={dirty:_,ctx:f}),Mh.$set(Kx);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),jh.$set(LMe);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),Dh.$set(wn);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),Vh.$set(xMe);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),Su.$set($Me);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),Bu.$set(kMe);const Zx={};_&2&&(Zx.$$scope={dirty:_,ctx:f}),T_.$set(Zx);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),E_.$set(SMe);const e9={};_&2&&(e9.$$scope={dirty:_,ctx:f}),l1.$set(e9);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),d1.$set(RMe);const o9={};_&2&&(o9.$$scope={dirty:_,ctx:f}),Q1.$set(o9);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),H1.$set(BMe);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),g8.$set(PMe);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),p8.$set(IMe);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),cb.$set(df);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),mb.$set(qMe);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),Vb.$set(NMe);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),zb.$set(jMe);const r9={};_&2&&(r9.$$scope={dirty:_,ctx:f}),Kb.$set(r9);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),e2.$set(DMe);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),P2.$set(GMe);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),q2.$set(OMe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),Cv.$set(Kr);const t9={};_&2&&(t9.$$scope={dirty:_,ctx:f}),Av.$set(t9);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),xv.$set(VMe);const a9={};_&2&&(a9.$$scope={dirty:_,ctx:f}),kv.$set(a9);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),Xv.$set(XMe);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),Qv.$set(Zr);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),Uv.$set(zMe);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),Yv.$set(cf);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),lF.$set(QMe);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),dF.$set(WMe);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),pF.$set(L);const CC={};_&2&&(CC.$$scope={dirty:_,ctx:f}),_F.$set(CC);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),yF.$set(HMe);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),xF.$set(UMe);const wC={};_&2&&(wC.$$scope={dirty:_,ctx:f}),RF.$set(wC);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),PF.$set(JMe);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),GF.$set(YMe);const AC={};_&2&&(AC.$$scope={dirty:_,ctx:f}),VF.$set(AC);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),HF.$set(KMe);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),JF.$set(ZMe);const yC={};_&2&&(yC.$$scope={dirty:_,ctx:f}),e0.$set(yC);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),r0.$set(e4e);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),n0.$set(o4e);const LC={};_&2&&(LC.$$scope={dirty:_,ctx:f}),l0.$set(LC);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),g0.$set(r4e);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),p0.$set(t4e);const xC={};_&2&&(xC.$$scope={dirty:_,ctx:f}),b0.$set(xC);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),F0.$set(a4e);const n4e={};_&2&&(n4e.$$scope={dirty:_,ctx:f}),fT.$set(n4e);const $C={};_&2&&($C.$$scope={dirty:_,ctx:f}),gT.$set($C);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:f}),qT.$set(s4e);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:f}),jT.$set(l4e);const kC={};_&2&&(kC.$$scope={dirty:_,ctx:f}),KT.$set(kC);const i4e={};_&2&&(i4e.$$scope={dirty:_,ctx:f}),e7.$set(i4e);const d4e={};_&2&&(d4e.$$scope={dirty:_,ctx:f}),a7.$set(d4e);const SC={};_&2&&(SC.$$scope={dirty:_,ctx:f}),s7.$set(SC);const c4e={};_&2&&(c4e.$$scope={dirty:_,ctx:f}),y7.$set(c4e);const f4e={};_&2&&(f4e.$$scope={dirty:_,ctx:f}),x7.$set(f4e);const RC={};_&2&&(RC.$$scope={dirty:_,ctx:f}),D7.$set(RC);const m4e={};_&2&&(m4e.$$scope={dirty:_,ctx:f}),O7.$set(m4e);const g4e={};_&2&&(g4e.$$scope={dirty:_,ctx:f}),pM.$set(g4e);const BC={};_&2&&(BC.$$scope={dirty:_,ctx:f}),_M.$set(BC);const h4e={};_&2&&(h4e.$$scope={dirty:_,ctx:f}),PM.$set(h4e);const p4e={};_&2&&(p4e.$$scope={dirty:_,ctx:f}),qM.$set(p4e);const PC={};_&2&&(PC.$$scope={dirty:_,ctx:f}),DM.$set(PC);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),OM.$set(u4e);const _4e={};_&2&&(_4e.$$scope={dirty:_,ctx:f}),XM.$set(_4e);const IC={};_&2&&(IC.$$scope={dirty:_,ctx:f}),QM.$set(IC);const b4e={};_&2&&(b4e.$$scope={dirty:_,ctx:f}),g4.$set(b4e);const v4e={};_&2&&(v4e.$$scope={dirty:_,ctx:f}),p4.$set(v4e);const qC={};_&2&&(qC.$$scope={dirty:_,ctx:f}),I4.$set(qC);const F4e={};_&2&&(F4e.$$scope={dirty:_,ctx:f}),N4.$set(F4e);const T4e={};_&2&&(T4e.$$scope={dirty:_,ctx:f}),D4.$set(T4e);const NC={};_&2&&(NC.$$scope={dirty:_,ctx:f}),O4.$set(NC);const M4e={};_&2&&(M4e.$$scope={dirty:_,ctx:f}),X4.$set(M4e);const E4e={};_&2&&(E4e.$$scope={dirty:_,ctx:f}),Q4.$set(E4e);const jC={};_&2&&(jC.$$scope={dirty:_,ctx:f}),bE.$set(jC);const C4e={};_&2&&(C4e.$$scope={dirty:_,ctx:f}),FE.$set(C4e);const w4e={};_&2&&(w4e.$$scope={dirty:_,ctx:f}),$E.$set(w4e);const DC={};_&2&&(DC.$$scope={dirty:_,ctx:f}),SE.$set(DC);const A4e={};_&2&&(A4e.$$scope={dirty:_,ctx:f}),zE.$set(A4e);const y4e={};_&2&&(y4e.$$scope={dirty:_,ctx:f}),WE.$set(y4e);const GC={};_&2&&(GC.$$scope={dirty:_,ctx:f}),a5.$set(GC);const L4e={};_&2&&(L4e.$$scope={dirty:_,ctx:f}),s5.$set(L4e);const x4e={};_&2&&(x4e.$$scope={dirty:_,ctx:f}),u5.$set(x4e);const OC={};_&2&&(OC.$$scope={dirty:_,ctx:f}),b5.$set(OC);const $4e={};_&2&&($4e.$$scope={dirty:_,ctx:f}),x5.$set($4e);const k4e={};_&2&&(k4e.$$scope={dirty:_,ctx:f}),k5.$set(k4e);const VC={};_&2&&(VC.$$scope={dirty:_,ctx:f}),O5.$set(VC);const S4e={};_&2&&(S4e.$$scope={dirty:_,ctx:f}),X5.$set(S4e);const R4e={};_&2&&(R4e.$$scope={dirty:_,ctx:f}),Z5.$set(R4e);const XC={};_&2&&(XC.$$scope={dirty:_,ctx:f}),oC.$set(XC);const B4e={};_&2&&(B4e.$$scope={dirty:_,ctx:f}),cC.$set(B4e);const P4e={};_&2&&(P4e.$$scope={dirty:_,ctx:f}),mC.$set(P4e);const zC={};_&2&&(zC.$$scope={dirty:_,ctx:f}),hC.$set(zC);const I4e={};_&2&&(I4e.$$scope={dirty:_,ctx:f}),uC.$set(I4e);const q4e={};_&2&&(q4e.$$scope={dirty:_,ctx:f}),vC.$set(q4e);const QC={};_&2&&(QC.$$scope={dirty:_,ctx:f}),TC.$set(QC);const N4e={};_&2&&(N4e.$$scope={dirty:_,ctx:f}),EC.$set(N4e)},i(f){Aqe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(Qw.$$.fragment,f),E(Ww.$$.fragment,f),E(_f.$$.fragment,f),E(Hw.$$.fragment,f),E(Uw.$$.fragment,f),E(Kw.$$.fragment,f),E(pg.$$.fragment,f),E(Zw.$$.fragment,f),E(eA.$$.fragment,f),E(oA.$$.fragment,f),E(aA.$$.fragment,f),E(Hg.$$.fragment,f),E(nA.$$.fragment,f),E(sA.$$.fragment,f),E(lA.$$.fragment,f),E(cA.$$.fragment,f),E(Th.$$.fragment,f),E(Mh.$$.fragment,f),E(fA.$$.fragment,f),E(mA.$$.fragment,f),E(gA.$$.fragment,f),E(uA.$$.fragment,f),E(jh.$$.fragment,f),E(Dh.$$.fragment,f),E(_A.$$.fragment,f),E(bA.$$.fragment,f),E(vA.$$.fragment,f),E(TA.$$.fragment,f),E(Vh.$$.fragment,f),E(MA.$$.fragment,f),E(Su.$$.fragment,f),E(EA.$$.fragment,f),E(CA.$$.fragment,f),E(AA.$$.fragment,f),E(Bu.$$.fragment,f),E(yA.$$.fragment,f),E(T_.$$.fragment,f),E(LA.$$.fragment,f),E(xA.$$.fragment,f),E(kA.$$.fragment,f),E(E_.$$.fragment,f),E(SA.$$.fragment,f),E(l1.$$.fragment,f),E(RA.$$.fragment,f),E(BA.$$.fragment,f),E(IA.$$.fragment,f),E(d1.$$.fragment,f),E(qA.$$.fragment,f),E(Q1.$$.fragment,f),E(NA.$$.fragment,f),E(jA.$$.fragment,f),E(GA.$$.fragment,f),E(H1.$$.fragment,f),E(OA.$$.fragment,f),E(g8.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(QA.$$.fragment,f),E(p8.$$.fragment,f),E(WA.$$.fragment,f),E(cb.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(YA.$$.fragment,f),E(mb.$$.fragment,f),E(KA.$$.fragment,f),E(Vb.$$.fragment,f),E(ZA.$$.fragment,f),E(e6.$$.fragment,f),E(r6.$$.fragment,f),E(zb.$$.fragment,f),E(t6.$$.fragment,f),E(Kb.$$.fragment,f),E(a6.$$.fragment,f),E(n6.$$.fragment,f),E(l6.$$.fragment,f),E(e2.$$.fragment,f),E(i6.$$.fragment,f),E(P2.$$.fragment,f),E(d6.$$.fragment,f),E(c6.$$.fragment,f),E(m6.$$.fragment,f),E(q2.$$.fragment,f),E(g6.$$.fragment,f),E(Cv.$$.fragment,f),E(h6.$$.fragment,f),E(p6.$$.fragment,f),E(_6.$$.fragment,f),E(Av.$$.fragment,f),E(b6.$$.fragment,f),E(xv.$$.fragment,f),E(v6.$$.fragment,f),E(F6.$$.fragment,f),E(M6.$$.fragment,f),E(kv.$$.fragment,f),E(E6.$$.fragment,f),E(Xv.$$.fragment,f),E(C6.$$.fragment,f),E(w6.$$.fragment,f),E(y6.$$.fragment,f),E(Qv.$$.fragment,f),E(L6.$$.fragment,f),E(Uv.$$.fragment,f),E(x6.$$.fragment,f),E($6.$$.fragment,f),E(S6.$$.fragment,f),E(Yv.$$.fragment,f),E(R6.$$.fragment,f),E(lF.$$.fragment,f),E(B6.$$.fragment,f),E(P6.$$.fragment,f),E(q6.$$.fragment,f),E(dF.$$.fragment,f),E(N6.$$.fragment,f),E(pF.$$.fragment,f),E(j6.$$.fragment,f),E(D6.$$.fragment,f),E(O6.$$.fragment,f),E(_F.$$.fragment,f),E(V6.$$.fragment,f),E(yF.$$.fragment,f),E(X6.$$.fragment,f),E(z6.$$.fragment,f),E(W6.$$.fragment,f),E(xF.$$.fragment,f),E(H6.$$.fragment,f),E(RF.$$.fragment,f),E(J6.$$.fragment,f),E(Y6.$$.fragment,f),E(Z6.$$.fragment,f),E(PF.$$.fragment,f),E(ey.$$.fragment,f),E(GF.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(VF.$$.fragment,f),E(ny.$$.fragment,f),E(HF.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(JF.$$.fragment,f),E(cy.$$.fragment,f),E(e0.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(r0.$$.fragment,f),E(uy.$$.fragment,f),E(n0.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(l0.$$.fragment,f),E(Ty.$$.fragment,f),E(g0.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(p0.$$.fragment,f),E(Ay.$$.fragment,f),E(b0.$$.fragment,f),E(yy.$$.fragment,f),E(Ly.$$.fragment,f),E($y.$$.fragment,f),E(F0.$$.fragment,f),E(ky.$$.fragment,f),E(fT.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(gT.$$.fragment,f),E(Iy.$$.fragment,f),E(qT.$$.fragment,f),E(qy.$$.fragment,f),E(Ny.$$.fragment,f),E(Dy.$$.fragment,f),E(jT.$$.fragment,f),E(Gy.$$.fragment,f),E(KT.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(e7.$$.fragment,f),E(Qy.$$.fragment,f),E(a7.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(s7.$$.fragment,f),E(Yy.$$.fragment,f),E(y7.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(oL.$$.fragment,f),E(x7.$$.fragment,f),E(rL.$$.fragment,f),E(D7.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(O7.$$.fragment,f),E(lL.$$.fragment,f),E(pM.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(_M.$$.fragment,f),E(mL.$$.fragment,f),E(PM.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(qM.$$.fragment,f),E(_L.$$.fragment,f),E(DM.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(OM.$$.fragment,f),E(EL.$$.fragment,f),E(XM.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(QM.$$.fragment,f),E(LL.$$.fragment,f),E(g4.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(p4.$$.fragment,f),E(RL.$$.fragment,f),E(I4.$$.fragment,f),E(BL.$$.fragment,f),E(PL.$$.fragment,f),E(qL.$$.fragment,f),E(N4.$$.fragment,f),E(NL.$$.fragment,f),E(D4.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(O4.$$.fragment,f),E(VL.$$.fragment,f),E(X4.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(Q4.$$.fragment,f),E(HL.$$.fragment,f),E(bE.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(FE.$$.fragment,f),E(ZL.$$.fragment,f),E($E.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(SE.$$.fragment,f),E(ax.$$.fragment,f),E(zE.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(WE.$$.fragment,f),E(dx.$$.fragment,f),E(a5.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(s5.$$.fragment,f),E(hx.$$.fragment,f),E(u5.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(b5.$$.fragment,f),E(vx.$$.fragment,f),E(x5.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(k5.$$.fragment,f),E(Cx.$$.fragment,f),E(O5.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(X5.$$.fragment,f),E(xx.$$.fragment,f),E(Z5.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(oC.$$.fragment,f),E(Bx.$$.fragment,f),E(cC.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(mC.$$.fragment,f),E(jx.$$.fragment,f),E(hC.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(uC.$$.fragment,f),E(Xx.$$.fragment,f),E(vC.$$.fragment,f),E(Qx.$$.fragment,f),E(Wx.$$.fragment,f),E(Ux.$$.fragment,f),E(TC.$$.fragment,f),E(Jx.$$.fragment,f),E(EC.$$.fragment,f),Aqe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(Qw.$$.fragment,f),C(Ww.$$.fragment,f),C(_f.$$.fragment,f),C(Hw.$$.fragment,f),C(Uw.$$.fragment,f),C(Kw.$$.fragment,f),C(pg.$$.fragment,f),C(Zw.$$.fragment,f),C(eA.$$.fragment,f),C(oA.$$.fragment,f),C(aA.$$.fragment,f),C(Hg.$$.fragment,f),C(nA.$$.fragment,f),C(sA.$$.fragment,f),C(lA.$$.fragment,f),C(cA.$$.fragment,f),C(Th.$$.fragment,f),C(Mh.$$.fragment,f),C(fA.$$.fragment,f),C(mA.$$.fragment,f),C(gA.$$.fragment,f),C(uA.$$.fragment,f),C(jh.$$.fragment,f),C(Dh.$$.fragment,f),C(_A.$$.fragment,f),C(bA.$$.fragment,f),C(vA.$$.fragment,f),C(TA.$$.fragment,f),C(Vh.$$.fragment,f),C(MA.$$.fragment,f),C(Su.$$.fragment,f),C(EA.$$.fragment,f),C(CA.$$.fragment,f),C(AA.$$.fragment,f),C(Bu.$$.fragment,f),C(yA.$$.fragment,f),C(T_.$$.fragment,f),C(LA.$$.fragment,f),C(xA.$$.fragment,f),C(kA.$$.fragment,f),C(E_.$$.fragment,f),C(SA.$$.fragment,f),C(l1.$$.fragment,f),C(RA.$$.fragment,f),C(BA.$$.fragment,f),C(IA.$$.fragment,f),C(d1.$$.fragment,f),C(qA.$$.fragment,f),C(Q1.$$.fragment,f),C(NA.$$.fragment,f),C(jA.$$.fragment,f),C(GA.$$.fragment,f),C(H1.$$.fragment,f),C(OA.$$.fragment,f),C(g8.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(QA.$$.fragment,f),C(p8.$$.fragment,f),C(WA.$$.fragment,f),C(cb.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(YA.$$.fragment,f),C(mb.$$.fragment,f),C(KA.$$.fragment,f),C(Vb.$$.fragment,f),C(ZA.$$.fragment,f),C(e6.$$.fragment,f),C(r6.$$.fragment,f),C(zb.$$.fragment,f),C(t6.$$.fragment,f),C(Kb.$$.fragment,f),C(a6.$$.fragment,f),C(n6.$$.fragment,f),C(l6.$$.fragment,f),C(e2.$$.fragment,f),C(i6.$$.fragment,f),C(P2.$$.fragment,f),C(d6.$$.fragment,f),C(c6.$$.fragment,f),C(m6.$$.fragment,f),C(q2.$$.fragment,f),C(g6.$$.fragment,f),C(Cv.$$.fragment,f),C(h6.$$.fragment,f),C(p6.$$.fragment,f),C(_6.$$.fragment,f),C(Av.$$.fragment,f),C(b6.$$.fragment,f),C(xv.$$.fragment,f),C(v6.$$.fragment,f),C(F6.$$.fragment,f),C(M6.$$.fragment,f),C(kv.$$.fragment,f),C(E6.$$.fragment,f),C(Xv.$$.fragment,f),C(C6.$$.fragment,f),C(w6.$$.fragment,f),C(y6.$$.fragment,f),C(Qv.$$.fragment,f),C(L6.$$.fragment,f),C(Uv.$$.fragment,f),C(x6.$$.fragment,f),C($6.$$.fragment,f),C(S6.$$.fragment,f),C(Yv.$$.fragment,f),C(R6.$$.fragment,f),C(lF.$$.fragment,f),C(B6.$$.fragment,f),C(P6.$$.fragment,f),C(q6.$$.fragment,f),C(dF.$$.fragment,f),C(N6.$$.fragment,f),C(pF.$$.fragment,f),C(j6.$$.fragment,f),C(D6.$$.fragment,f),C(O6.$$.fragment,f),C(_F.$$.fragment,f),C(V6.$$.fragment,f),C(yF.$$.fragment,f),C(X6.$$.fragment,f),C(z6.$$.fragment,f),C(W6.$$.fragment,f),C(xF.$$.fragment,f),C(H6.$$.fragment,f),C(RF.$$.fragment,f),C(J6.$$.fragment,f),C(Y6.$$.fragment,f),C(Z6.$$.fragment,f),C(PF.$$.fragment,f),C(ey.$$.fragment,f),C(GF.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(VF.$$.fragment,f),C(ny.$$.fragment,f),C(HF.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(JF.$$.fragment,f),C(cy.$$.fragment,f),C(e0.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(r0.$$.fragment,f),C(uy.$$.fragment,f),C(n0.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(l0.$$.fragment,f),C(Ty.$$.fragment,f),C(g0.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(p0.$$.fragment,f),C(Ay.$$.fragment,f),C(b0.$$.fragment,f),C(yy.$$.fragment,f),C(Ly.$$.fragment,f),C($y.$$.fragment,f),C(F0.$$.fragment,f),C(ky.$$.fragment,f),C(fT.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(gT.$$.fragment,f),C(Iy.$$.fragment,f),C(qT.$$.fragment,f),C(qy.$$.fragment,f),C(Ny.$$.fragment,f),C(Dy.$$.fragment,f),C(jT.$$.fragment,f),C(Gy.$$.fragment,f),C(KT.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(e7.$$.fragment,f),C(Qy.$$.fragment,f),C(a7.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(s7.$$.fragment,f),C(Yy.$$.fragment,f),C(y7.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(oL.$$.fragment,f),C(x7.$$.fragment,f),C(rL.$$.fragment,f),C(D7.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(O7.$$.fragment,f),C(lL.$$.fragment,f),C(pM.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(_M.$$.fragment,f),C(mL.$$.fragment,f),C(PM.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(qM.$$.fragment,f),C(_L.$$.fragment,f),C(DM.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(OM.$$.fragment,f),C(EL.$$.fragment,f),C(XM.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(QM.$$.fragment,f),C(LL.$$.fragment,f),C(g4.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(p4.$$.fragment,f),C(RL.$$.fragment,f),C(I4.$$.fragment,f),C(BL.$$.fragment,f),C(PL.$$.fragment,f),C(qL.$$.fragment,f),C(N4.$$.fragment,f),C(NL.$$.fragment,f),C(D4.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(O4.$$.fragment,f),C(VL.$$.fragment,f),C(X4.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(Q4.$$.fragment,f),C(HL.$$.fragment,f),C(bE.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(FE.$$.fragment,f),C(ZL.$$.fragment,f),C($E.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(SE.$$.fragment,f),C(ax.$$.fragment,f),C(zE.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(WE.$$.fragment,f),C(dx.$$.fragment,f),C(a5.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(s5.$$.fragment,f),C(hx.$$.fragment,f),C(u5.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(b5.$$.fragment,f),C(vx.$$.fragment,f),C(x5.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(k5.$$.fragment,f),C(Cx.$$.fragment,f),C(O5.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(X5.$$.fragment,f),C(xx.$$.fragment,f),C(Z5.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(oC.$$.fragment,f),C(Bx.$$.fragment,f),C(cC.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(mC.$$.fragment,f),C(jx.$$.fragment,f),C(hC.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(uC.$$.fragment,f),C(Xx.$$.fragment,f),C(vC.$$.fragment,f),C(Qx.$$.fragment,f),C(Wx.$$.fragment,f),C(Ux.$$.fragment,f),C(TC.$$.fragment,f),C(Jx.$$.fragment,f),C(EC.$$.fragment,f),Aqe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(mf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(hf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(EPe),f&&t(hi),w(Qw),f&&t(CPe),f&&t($n),f&&t(wPe),w(Ww,f),f&&t(APe),f&&t(h$),f&&t(yPe),w(_f,f),f&&t(LPe),f&&t(pi),w(Hw),f&&t(xPe),f&&t(Co),w(Uw),w(Kw),w(pg),w(Zw),f&&t($Pe),f&&t(_i),w(eA),f&&t(kPe),f&&t(wo),w(oA),w(aA),w(Hg),w(nA),f&&t(SPe),f&&t(bi),w(sA),f&&t(RPe),f&&t(Ao),w(lA),w(cA),w(Th),w(Mh),w(fA),f&&t(BPe),f&&t(vi),w(mA),f&&t(PPe),f&&t(yo),w(gA),w(uA),w(jh),w(Dh),w(_A),f&&t(IPe),f&&t(Ti),w(bA),f&&t(qPe),f&&t(Lo),w(vA),w(TA),w(Vh),w(MA),w(Su),f&&t(NPe),f&&t(Ci),w(EA),f&&t(jPe),f&&t(xo),w(CA),w(AA),w(Bu),w(yA),w(T_),f&&t(DPe),f&&t(yi),w(LA),f&&t(GPe),f&&t($o),w(xA),w(kA),w(E_),w(SA),w(l1),f&&t(OPe),f&&t($i),w(RA),f&&t(VPe),f&&t(ko),w(BA),w(IA),w(d1),w(qA),w(Q1),f&&t(XPe),f&&t(Ri),w(NA),f&&t(zPe),f&&t(So),w(jA),w(GA),w(H1),w(OA),w(g8),f&&t(QPe),f&&t(Ii),w(VA),f&&t(WPe),f&&t(Ro),w(XA),w(QA),w(p8),w(WA),w(cb),f&&t(HPe),f&&t(ji),w(HA),f&&t(UPe),f&&t(Bo),w(UA),w(YA),w(mb),w(KA),w(Vb),f&&t(JPe),f&&t(Oi),w(ZA),f&&t(YPe),f&&t(Po),w(e6),w(r6),w(zb),w(t6),w(Kb),f&&t(KPe),f&&t(zi),w(a6),f&&t(ZPe),f&&t(Io),w(n6),w(l6),w(e2),w(i6),w(P2),f&&t(eIe),f&&t(Hi),w(d6),f&&t(oIe),f&&t(qo),w(c6),w(m6),w(q2),w(g6),w(Cv),f&&t(rIe),f&&t(Yi),w(h6),f&&t(tIe),f&&t(No),w(p6),w(_6),w(Av),w(b6),w(xv),f&&t(aIe),f&&t(ed),w(v6),f&&t(nIe),f&&t(jo),w(F6),w(M6),w(kv),w(E6),w(Xv),f&&t(sIe),f&&t(td),w(C6),f&&t(lIe),f&&t(Do),w(w6),w(y6),w(Qv),w(L6),w(Uv),f&&t(iIe),f&&t(sd),w(x6),f&&t(dIe),f&&t(Go),w($6),w(S6),w(Yv),w(R6),w(lF),f&&t(cIe),f&&t(dd),w(B6),f&&t(fIe),f&&t(Oo),w(P6),w(q6),w(dF),w(N6),w(pF),f&&t(mIe),f&&t(md),w(j6),f&&t(gIe),f&&t(Vo),w(D6),w(O6),w(_F),w(V6),w(yF),f&&t(hIe),f&&t(pd),w(X6),f&&t(pIe),f&&t(Xo),w(z6),w(W6),w(xF),w(H6),w(RF),f&&t(uIe),f&&t(bd),w(J6),f&&t(_Ie),f&&t(zo),w(Y6),w(Z6),w(PF),w(ey),w(GF),f&&t(bIe),f&&t(Td),w(oy),f&&t(vIe),f&&t(Qo),w(ry),w(ay),w(VF),w(ny),w(HF),f&&t(FIe),f&&t(wd),w(sy),f&&t(TIe),f&&t(Wo),w(ly),w(dy),w(JF),w(cy),w(e0),f&&t(MIe),f&&t(Ld),w(my),f&&t(EIe),f&&t(Ho),w(gy),w(py),w(r0),w(uy),w(n0),f&&t(CIe),f&&t(kd),w(_y),f&&t(wIe),f&&t(Uo),w(by),w(Fy),w(l0),w(Ty),w(g0),f&&t(AIe),f&&t(Bd),w(My),f&&t(yIe),f&&t(Jo),w(Ey),w(wy),w(p0),w(Ay),w(b0),f&&t(LIe),f&&t(qd),w(yy),f&&t(xIe),f&&t(Yo),w(Ly),w($y),w(F0),w(ky),w(fT),f&&t($Ie),f&&t(Dd),w(Sy),f&&t(kIe),f&&t(Ko),w(Ry),w(Py),w(gT),w(Iy),w(qT),f&&t(SIe),f&&t(Vd),w(qy),f&&t(RIe),f&&t(Zo),w(Ny),w(Dy),w(jT),w(Gy),w(KT),f&&t(BIe),f&&t(Qd),w(Oy),f&&t(PIe),f&&t(er),w(Vy),w(zy),w(e7),w(Qy),w(a7),f&&t(IIe),f&&t(Jd),w(Wy),f&&t(qIe),f&&t(or),w(Hy),w(Jy),w(s7),w(Yy),w(y7),f&&t(NIe),f&&t(Zd),w(Ky),f&&t(jIe),f&&t(rr),w(Zy),w(oL),w(x7),w(rL),w(D7),f&&t(DIe),f&&t(rc),w(tL),f&&t(GIe),f&&t(tr),w(aL),w(sL),w(O7),w(lL),w(pM),f&&t(OIe),f&&t(nc),w(iL),f&&t(VIe),f&&t(ar),w(dL),w(fL),w(_M),w(mL),w(PM),f&&t(XIe),f&&t(ic),w(gL),f&&t(zIe),f&&t(nr),w(hL),w(uL),w(qM),w(_L),w(DM),f&&t(QIe),f&&t(fc),w(vL),f&&t(WIe),f&&t(sr),w(FL),w(ML),w(OM),w(EL),w(XM),f&&t(HIe),f&&t(hc),w(CL),f&&t(UIe),f&&t(lr),w(wL),w(yL),w(QM),w(LL),w(g4),f&&t(JIe),f&&t(_c),w(xL),f&&t(YIe),f&&t(ir),w($L),w(SL),w(p4),w(RL),w(I4),f&&t(KIe),f&&t(Fc),w(BL),f&&t(ZIe),f&&t(dr),w(PL),w(qL),w(N4),w(NL),w(D4),f&&t(eqe),f&&t(Ec),w(jL),f&&t(oqe),f&&t(cr),w(DL),w(OL),w(O4),w(VL),w(X4),f&&t(rqe),f&&t(Ac),w(XL),f&&t(tqe),f&&t(fr),w(zL),w(WL),w(Q4),w(HL),w(bE),f&&t(aqe),f&&t(xc),w(UL),f&&t(nqe),f&&t(mr),w(JL),w(KL),w(FE),w(ZL),w($E),f&&t(sqe),f&&t(Sc),w(ex),f&&t(lqe),f&&t(gr),w(ox),w(tx),w(SE),w(ax),w(zE),f&&t(iqe),f&&t(Pc),w(nx),f&&t(dqe),f&&t(hr),w(sx),w(ix),w(WE),w(dx),w(a5),f&&t(cqe),f&&t(Nc),w(cx),f&&t(fqe),f&&t(pr),w(fx),w(gx),w(s5),w(hx),w(u5),f&&t(mqe),f&&t(Gc),w(px),f&&t(gqe),f&&t(ur),w(ux),w(bx),w(b5),w(vx),w(x5),f&&t(hqe),f&&t(Xc),w(Fx),f&&t(pqe),f&&t(_r),w(Tx),w(Ex),w(k5),w(Cx),w(O5),f&&t(uqe),f&&t(Wc),w(wx),f&&t(_qe),f&&t(br),w(Ax),w(Lx),w(X5),w(xx),w(Z5),f&&t(bqe),f&&t(Jc),w($x),f&&t(vqe),f&&t(vr),w(kx),w(Rx),w(oC),w(Bx),w(cC),f&&t(Fqe),f&&t(Zc),w(Px),f&&t(Tqe),f&&t(Fr),w(Ix),w(Nx),w(mC),w(jx),w(hC),f&&t(Mqe),f&&t(rf),w(Dx),f&&t(Eqe),f&&t(Tr),w(Gx),w(Vx),w(uC),w(Xx),w(vC),f&&t(Cqe),f&&t(nf),w(Qx),f&&t(wqe),f&&t(Mr),w(Wx),w(Ux),w(TC),w(Jx),w(EC)}}}const d6t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function c6t(A){return cwt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class _6t extends swt{constructor(g){super();lwt(this,g,c6t,i6t,iwt,{})}}export{_6t as default,d6t as metadata};
