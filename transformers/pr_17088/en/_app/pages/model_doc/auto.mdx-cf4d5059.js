import{S as Vwt,i as Xwt,s as zwt,e as a,k as l,w as F,t as o,M as Qwt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as Wwt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as TNr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function Hwt(A){let g,v,p,m,u,d,h,Mo,ii,gf,et,di,ci,zw,hf,Ne,Xe,fi,An,Qw,yn,Ln,Ww,mi,xn,Hw,gi,pf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ii=a("code"),gf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),di=a("code"),ci=o('"new-model"'),zw=o(")."),hf=l(),Ne=a("p"),Xe=o("Likewise, if your "),fi=a("code"),An=o("NewModel"),Qw=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),Ww=o(`, make sure its
`),mi=a("code"),xn=o("config_class"),Hw=o(` attribute is set to the same class you use when registering the model (here
`),gi=a("code"),pf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var g$=s(p);m=r(g$,"NewModelConfig"),g$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var hi=s(d);h=r(hi,"PretrainedConfig"),hi.forEach(t),Mo=r(Ae,`, make sure its
`),ii=n(Ae,"CODE",{});var h$=s(ii);gf=r(h$,"model_type"),h$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),di=n(Ae,"CODE",{});var p$=s(di);ci=r(p$,'"new-model"'),p$.forEach(t),zw=r(Ae,")."),Ae.forEach(t),hf=i(ze),Ne=n(ze,"P",{});var Eo=s(Ne);Xe=r(Eo,"Likewise, if your "),fi=n(Eo,"CODE",{});var Ea=s(fi);An=r(Ea,"NewModel"),Ea.forEach(t),Qw=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var u$=s(yn);Ln=r(u$,"PreTrainedModel"),u$.forEach(t),Ww=r(Eo,`, make sure its
`),mi=n(Eo,"CODE",{});var uf=s(mi);xn=r(uf,"config_class"),uf.forEach(t),Hw=r(Eo,` attribute is set to the same class you use when registering the model (here
`),gi=n(Eo,"CODE",{});var _$=s(gi);pf=r(_$,"NewModelConfig"),_$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ii),e(ii,gf),e(g,et),e(g,di),e(di,ci),e(g,zw),b(ze,hf,Ae),b(ze,Ne,Ae),e(Ne,Xe),e(Ne,fi),e(fi,An),e(Ne,Qw),e(Ne,yn),e(yn,Ln),e(Ne,Ww),e(Ne,mi),e(mi,xn),e(Ne,Hw),e(Ne,gi),e(gi,pf),e(Ne,Ma)},d(ze){ze&&t(g),ze&&t(hf),ze&&t(Ne)}}}function Uwt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jwt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ywt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Kwt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zwt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function eAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _At(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $At(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z6t(A){let g,v,p,m,u,d,h,Mo,ii,gf,et,di,ci,zw,hf,Ne,Xe,fi,An,Qw,yn,Ln,Ww,mi,xn,Hw,gi,pf,Ma,ze,Ae,g$,hi,h$,p$,Eo,Ea,u$,uf,_$,Wje,IBe,pi,_f,ZZ,Uw,Hje,eee,Uje,qBe,$n,Jje,oee,Yje,Kje,ree,Zje,eDe,NBe,Jw,jBe,b$,oDe,DBe,bf,GBe,ui,vf,tee,Yw,rDe,aee,tDe,OBe,Co,Kw,aDe,Zw,nDe,v$,sDe,lDe,iDe,eA,dDe,nee,cDe,fDe,mDe,Er,oA,gDe,see,hDe,pDe,_i,uDe,lee,_De,bDe,iee,vDe,FDe,TDe,y,Ff,dee,MDe,EDe,F$,CDe,wDe,ADe,Tf,cee,yDe,LDe,T$,xDe,$De,kDe,Mf,fee,SDe,RDe,M$,PDe,BDe,IDe,Ef,mee,qDe,NDe,E$,jDe,DDe,GDe,Cf,gee,ODe,VDe,C$,XDe,zDe,QDe,wf,hee,WDe,HDe,w$,UDe,JDe,YDe,Af,pee,KDe,ZDe,A$,eGe,oGe,rGe,yf,uee,tGe,aGe,y$,nGe,sGe,lGe,Lf,_ee,iGe,dGe,L$,cGe,fGe,mGe,xf,bee,gGe,hGe,x$,pGe,uGe,_Ge,$f,vee,bGe,vGe,$$,FGe,TGe,MGe,kf,Fee,EGe,CGe,k$,wGe,AGe,yGe,Sf,Tee,LGe,xGe,S$,$Ge,kGe,SGe,Rf,Mee,RGe,PGe,R$,BGe,IGe,qGe,Pf,Eee,NGe,jGe,P$,DGe,GGe,OGe,Bf,Cee,VGe,XGe,B$,zGe,QGe,WGe,If,wee,HGe,UGe,I$,JGe,YGe,KGe,qf,Aee,ZGe,eOe,q$,oOe,rOe,tOe,Nf,yee,aOe,nOe,N$,sOe,lOe,iOe,jf,Lee,dOe,cOe,j$,fOe,mOe,gOe,Df,xee,hOe,pOe,D$,uOe,_Oe,bOe,Gf,$ee,vOe,FOe,G$,TOe,MOe,EOe,Of,kee,COe,wOe,O$,AOe,yOe,LOe,Vf,See,xOe,$Oe,V$,kOe,SOe,ROe,Xf,Ree,POe,BOe,X$,IOe,qOe,NOe,zf,Pee,jOe,DOe,z$,GOe,OOe,VOe,Qf,Bee,XOe,zOe,Q$,QOe,WOe,HOe,Wf,Iee,UOe,JOe,W$,YOe,KOe,ZOe,Hf,qee,eVe,oVe,H$,rVe,tVe,aVe,Uf,Nee,nVe,sVe,U$,lVe,iVe,dVe,Jf,jee,cVe,fVe,J$,mVe,gVe,hVe,Yf,Dee,pVe,uVe,Y$,_Ve,bVe,vVe,Kf,Gee,FVe,TVe,K$,MVe,EVe,CVe,Zf,Oee,wVe,AVe,Z$,yVe,LVe,xVe,em,Vee,$Ve,kVe,ek,SVe,RVe,PVe,om,Xee,BVe,IVe,ok,qVe,NVe,jVe,rm,zee,DVe,GVe,rk,OVe,VVe,XVe,tm,Qee,zVe,QVe,tk,WVe,HVe,UVe,am,Wee,JVe,YVe,ak,KVe,ZVe,eXe,nm,Hee,oXe,rXe,nk,tXe,aXe,nXe,sm,Uee,sXe,lXe,sk,iXe,dXe,cXe,lm,Jee,fXe,mXe,lk,gXe,hXe,pXe,im,Yee,uXe,_Xe,ik,bXe,vXe,FXe,dm,Kee,TXe,MXe,dk,EXe,CXe,wXe,cm,Zee,AXe,yXe,ck,LXe,xXe,$Xe,fm,eoe,kXe,SXe,fk,RXe,PXe,BXe,mm,ooe,IXe,qXe,mk,NXe,jXe,DXe,gm,roe,GXe,OXe,gk,VXe,XXe,zXe,hm,toe,QXe,WXe,hk,HXe,UXe,JXe,pm,aoe,YXe,KXe,pk,ZXe,eze,oze,um,noe,rze,tze,uk,aze,nze,sze,_m,soe,lze,ize,_k,dze,cze,fze,bm,loe,mze,gze,bk,hze,pze,uze,vm,ioe,_ze,bze,vk,vze,Fze,Tze,Fm,doe,Mze,Eze,Fk,Cze,wze,Aze,Tm,coe,yze,Lze,Tk,xze,$ze,kze,Mm,foe,Sze,Rze,Mk,Pze,Bze,Ize,Em,moe,qze,Nze,Ek,jze,Dze,Gze,Cm,goe,Oze,Vze,Ck,Xze,zze,Qze,wm,hoe,Wze,Hze,wk,Uze,Jze,Yze,Am,poe,Kze,Zze,Ak,eQe,oQe,rQe,ym,uoe,tQe,aQe,yk,nQe,sQe,lQe,Lm,_oe,iQe,dQe,Lk,cQe,fQe,mQe,xm,boe,gQe,hQe,xk,pQe,uQe,_Qe,$m,voe,bQe,vQe,$k,FQe,TQe,MQe,km,Foe,EQe,CQe,kk,wQe,AQe,yQe,Sm,Toe,LQe,xQe,Sk,$Qe,kQe,SQe,Rm,Moe,RQe,PQe,Rk,BQe,IQe,qQe,Pm,Eoe,NQe,jQe,Pk,DQe,GQe,OQe,Bm,Coe,VQe,XQe,Bk,zQe,QQe,WQe,Im,woe,HQe,UQe,Ik,JQe,YQe,KQe,qm,Aoe,ZQe,eWe,qk,oWe,rWe,tWe,Nm,yoe,aWe,nWe,Nk,sWe,lWe,iWe,jm,Loe,dWe,cWe,jk,fWe,mWe,gWe,Dm,xoe,hWe,pWe,Dk,uWe,_We,bWe,Gm,$oe,vWe,FWe,Gk,TWe,MWe,EWe,Om,koe,CWe,wWe,Ok,AWe,yWe,LWe,Vm,Soe,xWe,$We,Vk,kWe,SWe,RWe,Xm,Roe,PWe,BWe,Xk,IWe,qWe,NWe,zm,Poe,jWe,DWe,zk,GWe,OWe,VWe,Qm,Boe,XWe,zWe,Qk,QWe,WWe,HWe,Wm,Ioe,UWe,JWe,Wk,YWe,KWe,ZWe,Hm,qoe,eHe,oHe,Hk,rHe,tHe,aHe,Um,Noe,nHe,sHe,Uk,lHe,iHe,dHe,Jm,joe,cHe,fHe,Jk,mHe,gHe,hHe,Ym,Doe,pHe,uHe,Yk,_He,bHe,vHe,Km,Goe,FHe,THe,Kk,MHe,EHe,CHe,Zm,Ooe,wHe,AHe,Zk,yHe,LHe,xHe,eg,Voe,$He,kHe,eS,SHe,RHe,PHe,og,Xoe,BHe,IHe,oS,qHe,NHe,jHe,rg,zoe,DHe,GHe,rS,OHe,VHe,XHe,tg,Qoe,zHe,QHe,tS,WHe,HHe,UHe,ag,Woe,JHe,YHe,aS,KHe,ZHe,eUe,ng,Hoe,oUe,rUe,nS,tUe,aUe,nUe,sg,Uoe,sUe,lUe,sS,iUe,dUe,cUe,lg,Joe,fUe,mUe,lS,gUe,hUe,pUe,ig,Yoe,uUe,_Ue,iS,bUe,vUe,FUe,dg,Koe,TUe,MUe,dS,EUe,CUe,wUe,cg,Zoe,AUe,yUe,cS,LUe,xUe,$Ue,fg,ere,kUe,SUe,fS,RUe,PUe,BUe,mg,ore,IUe,qUe,mS,NUe,jUe,DUe,gg,rre,GUe,OUe,gS,VUe,XUe,zUe,hg,tre,QUe,WUe,hS,HUe,UUe,JUe,pg,are,YUe,KUe,pS,ZUe,eJe,oJe,ug,rJe,_g,rA,tJe,nre,aJe,VBe,bi,bg,sre,tA,nJe,lre,sJe,XBe,wo,aA,lJe,nA,iJe,uS,dJe,cJe,fJe,sA,mJe,ire,gJe,hJe,pJe,Cr,lA,uJe,dre,_Je,bJe,Ca,vJe,cre,FJe,TJe,fre,MJe,EJe,mre,CJe,wJe,AJe,k,kn,gre,yJe,LJe,_S,xJe,$Je,bS,kJe,SJe,RJe,Sn,hre,PJe,BJe,vS,IJe,qJe,FS,NJe,jJe,DJe,Rn,pre,GJe,OJe,TS,VJe,XJe,MS,zJe,QJe,WJe,vg,ure,HJe,UJe,ES,JJe,YJe,KJe,Pn,_re,ZJe,eYe,CS,oYe,rYe,wS,tYe,aYe,nYe,Fg,bre,sYe,lYe,AS,iYe,dYe,cYe,Tg,vre,fYe,mYe,yS,gYe,hYe,pYe,Mg,Fre,uYe,_Ye,LS,bYe,vYe,FYe,Bn,Tre,TYe,MYe,xS,EYe,CYe,$S,wYe,AYe,yYe,In,Mre,LYe,xYe,kS,$Ye,kYe,SS,SYe,RYe,PYe,qn,Ere,BYe,IYe,RS,qYe,NYe,PS,jYe,DYe,GYe,Eg,Cre,OYe,VYe,BS,XYe,zYe,QYe,Cg,wre,WYe,HYe,IS,UYe,JYe,YYe,Nn,Are,KYe,ZYe,qS,eKe,oKe,NS,rKe,tKe,aKe,wg,yre,nKe,sKe,jS,lKe,iKe,dKe,jn,Lre,cKe,fKe,DS,mKe,gKe,GS,hKe,pKe,uKe,Dn,xre,_Ke,bKe,OS,vKe,FKe,VS,TKe,MKe,EKe,Gn,$re,CKe,wKe,XS,AKe,yKe,zS,LKe,xKe,$Ke,Ag,kre,kKe,SKe,QS,RKe,PKe,BKe,On,Sre,IKe,qKe,WS,NKe,jKe,HS,DKe,GKe,OKe,Vn,Rre,VKe,XKe,US,zKe,QKe,JS,WKe,HKe,UKe,Xn,Pre,JKe,YKe,YS,KKe,ZKe,KS,eZe,oZe,rZe,zn,Bre,tZe,aZe,ZS,nZe,sZe,eR,lZe,iZe,dZe,Qn,Ire,cZe,fZe,oR,mZe,gZe,rR,hZe,pZe,uZe,Wn,qre,_Ze,bZe,tR,vZe,FZe,aR,TZe,MZe,EZe,yg,Nre,CZe,wZe,nR,AZe,yZe,LZe,Hn,jre,xZe,$Ze,sR,kZe,SZe,lR,RZe,PZe,BZe,Lg,Dre,IZe,qZe,iR,NZe,jZe,DZe,Un,Gre,GZe,OZe,dR,VZe,XZe,cR,zZe,QZe,WZe,Jn,Ore,HZe,UZe,fR,JZe,YZe,mR,KZe,ZZe,eeo,Yn,Vre,oeo,reo,gR,teo,aeo,hR,neo,seo,leo,Kn,Xre,ieo,deo,pR,ceo,feo,uR,meo,geo,heo,Zn,zre,peo,ueo,_R,_eo,beo,bR,veo,Feo,Teo,xg,Qre,Meo,Eeo,vR,Ceo,weo,Aeo,es,Wre,yeo,Leo,FR,xeo,$eo,TR,keo,Seo,Reo,os,Hre,Peo,Beo,MR,Ieo,qeo,ER,Neo,jeo,Deo,rs,Ure,Geo,Oeo,CR,Veo,Xeo,wR,zeo,Qeo,Weo,ts,Jre,Heo,Ueo,AR,Jeo,Yeo,yR,Keo,Zeo,eoo,as,Yre,ooo,roo,LR,too,aoo,xR,noo,soo,loo,ns,Kre,ioo,doo,$R,coo,foo,kR,moo,goo,hoo,$g,Zre,poo,uoo,SR,_oo,boo,voo,ss,ete,Foo,Too,RR,Moo,Eoo,PR,Coo,woo,Aoo,kg,ote,yoo,Loo,BR,xoo,$oo,koo,Sg,rte,Soo,Roo,IR,Poo,Boo,Ioo,ls,tte,qoo,Noo,qR,joo,Doo,NR,Goo,Ooo,Voo,is,ate,Xoo,zoo,jR,Qoo,Woo,DR,Hoo,Uoo,Joo,ds,nte,Yoo,Koo,GR,Zoo,ero,OR,oro,rro,tro,Rg,ste,aro,nro,VR,sro,lro,iro,cs,lte,dro,cro,XR,fro,mro,zR,gro,hro,pro,fs,ite,uro,_ro,QR,bro,vro,WR,Fro,Tro,Mro,ms,dte,Ero,Cro,HR,wro,Aro,UR,yro,Lro,xro,gs,cte,$ro,kro,JR,Sro,Rro,YR,Pro,Bro,Iro,hs,fte,qro,Nro,KR,jro,Dro,ZR,Gro,Oro,Vro,ps,mte,Xro,zro,eP,Qro,Wro,oP,Hro,Uro,Jro,us,gte,Yro,Kro,rP,Zro,eto,tP,oto,rto,tto,Pg,hte,ato,nto,aP,sto,lto,ito,Bg,pte,dto,cto,nP,fto,mto,gto,Ig,ute,hto,pto,sP,uto,_to,bto,qg,_te,vto,Fto,lP,Tto,Mto,Eto,_s,bte,Cto,wto,iP,Ato,yto,dP,Lto,xto,$to,Ng,vte,kto,Sto,cP,Rto,Pto,Bto,bs,Fte,Ito,qto,fP,Nto,jto,mP,Dto,Gto,Oto,vs,Tte,Vto,Xto,gP,zto,Qto,hP,Wto,Hto,Uto,Fs,Mte,Jto,Yto,pP,Kto,Zto,uP,eao,oao,rao,Ts,Ete,tao,aao,_P,nao,sao,bP,lao,iao,dao,Ms,Cte,cao,fao,vP,mao,gao,FP,hao,pao,uao,Es,wte,_ao,bao,TP,vao,Fao,MP,Tao,Mao,Eao,jg,Ate,Cao,wao,EP,Aao,yao,Lao,Dg,yte,xao,$ao,CP,kao,Sao,Rao,Cs,Lte,Pao,Bao,wP,Iao,qao,AP,Nao,jao,Dao,ws,xte,Gao,Oao,yP,Vao,Xao,LP,zao,Qao,Wao,As,$te,Hao,Uao,xP,Jao,Yao,$P,Kao,Zao,eno,Gg,kte,ono,rno,kP,tno,ano,nno,Og,Ste,sno,lno,SP,ino,dno,cno,Vg,Rte,fno,mno,RP,gno,hno,pno,ys,Pte,uno,_no,PP,bno,vno,BP,Fno,Tno,Mno,Xg,Bte,Eno,Cno,IP,wno,Ano,yno,zg,Ite,Lno,xno,qP,$no,kno,Sno,Ls,qte,Rno,Pno,NP,Bno,Ino,jP,qno,Nno,jno,Qg,Nte,Dno,Gno,DP,Ono,Vno,Xno,Wg,jte,zno,Qno,GP,Wno,Hno,Uno,xs,Dte,Jno,Yno,OP,Kno,Zno,VP,eso,oso,rso,$s,Gte,tso,aso,XP,nso,sso,zP,lso,iso,dso,ks,Ote,cso,fso,QP,mso,gso,WP,hso,pso,uso,Ss,Vte,_so,bso,HP,vso,Fso,UP,Tso,Mso,Eso,Hg,Cso,Ug,iA,wso,Xte,Aso,zBe,vi,Jg,zte,dA,yso,Qte,Lso,QBe,Ao,cA,xso,fA,$so,JP,kso,Sso,Rso,mA,Pso,Wte,Bso,Iso,qso,Qe,gA,Nso,Hte,jso,Dso,wa,Gso,Ute,Oso,Vso,Jte,Xso,zso,Yte,Qso,Wso,Hso,ae,Yg,Kte,Uso,Jso,YP,Yso,Kso,Zso,Kg,Zte,elo,olo,KP,rlo,tlo,alo,Zg,eae,nlo,slo,ZP,llo,ilo,dlo,eh,oae,clo,flo,eB,mlo,glo,hlo,oh,rae,plo,ulo,oB,_lo,blo,vlo,rh,tae,Flo,Tlo,rB,Mlo,Elo,Clo,th,aae,wlo,Alo,tB,ylo,Llo,xlo,ah,nae,$lo,klo,aB,Slo,Rlo,Plo,nh,sae,Blo,Ilo,nB,qlo,Nlo,jlo,sh,lae,Dlo,Glo,sB,Olo,Vlo,Xlo,lh,iae,zlo,Qlo,lB,Wlo,Hlo,Ulo,ih,dae,Jlo,Ylo,iB,Klo,Zlo,eio,dh,cae,oio,rio,dB,tio,aio,nio,ch,fae,sio,lio,cB,iio,dio,cio,fh,mae,fio,mio,fB,gio,hio,pio,mh,gae,uio,_io,mB,bio,vio,Fio,gh,hae,Tio,Mio,gB,Eio,Cio,wio,hh,pae,Aio,yio,hB,Lio,xio,$io,ph,uae,kio,Sio,pB,Rio,Pio,Bio,uh,_ae,Iio,qio,uB,Nio,jio,Dio,_h,bae,Gio,Oio,_B,Vio,Xio,zio,bh,vae,Qio,Wio,bB,Hio,Uio,Jio,vh,Fae,Yio,Kio,vB,Zio,edo,odo,Fh,Tae,rdo,tdo,FB,ado,ndo,sdo,Th,ldo,Mh,ido,Eh,hA,ddo,Mae,cdo,WBe,Fi,Ch,Eae,pA,fdo,Cae,mdo,HBe,yo,uA,gdo,_A,hdo,TB,pdo,udo,_do,bA,bdo,wae,vdo,Fdo,Tdo,We,vA,Mdo,Aae,Edo,Cdo,Ti,wdo,yae,Ado,ydo,Lae,Ldo,xdo,$do,be,wh,xae,kdo,Sdo,MB,Rdo,Pdo,Bdo,Ah,$ae,Ido,qdo,EB,Ndo,jdo,Ddo,yh,kae,Gdo,Odo,CB,Vdo,Xdo,zdo,Lh,Sae,Qdo,Wdo,wB,Hdo,Udo,Jdo,xh,Rae,Ydo,Kdo,AB,Zdo,eco,oco,$h,Pae,rco,tco,yB,aco,nco,sco,kh,Bae,lco,ico,LB,dco,cco,fco,Sh,Iae,mco,gco,xB,hco,pco,uco,Rh,qae,_co,bco,$B,vco,Fco,Tco,Ph,Nae,Mco,Eco,kB,Cco,wco,Aco,Bh,jae,yco,Lco,SB,xco,$co,kco,Ih,Dae,Sco,Rco,RB,Pco,Bco,Ico,qh,Gae,qco,Nco,PB,jco,Dco,Gco,Nh,Oae,Oco,Vco,BB,Xco,zco,Qco,jh,Wco,Dh,Hco,Gh,FA,Uco,Vae,Jco,UBe,Mi,Oh,Xae,TA,Yco,zae,Kco,JBe,Lo,MA,Zco,Ei,efo,IB,ofo,rfo,qB,tfo,afo,nfo,EA,sfo,Qae,lfo,ifo,dfo,ot,CA,cfo,Wae,ffo,mfo,Ci,gfo,Hae,hfo,pfo,NB,ufo,_fo,bfo,Vh,vfo,He,wA,Ffo,Uae,Tfo,Mfo,Aa,Efo,Jae,Cfo,wfo,Yae,Afo,yfo,Kae,Lfo,xfo,$fo,x,Xh,Zae,kfo,Sfo,jB,Rfo,Pfo,Bfo,zh,ene,Ifo,qfo,DB,Nfo,jfo,Dfo,Qh,one,Gfo,Ofo,GB,Vfo,Xfo,zfo,Wh,rne,Qfo,Wfo,OB,Hfo,Ufo,Jfo,Hh,tne,Yfo,Kfo,VB,Zfo,emo,omo,Uh,ane,rmo,tmo,XB,amo,nmo,smo,Jh,nne,lmo,imo,zB,dmo,cmo,fmo,Yh,sne,mmo,gmo,QB,hmo,pmo,umo,Kh,lne,_mo,bmo,WB,vmo,Fmo,Tmo,Zh,ine,Mmo,Emo,HB,Cmo,wmo,Amo,ep,dne,ymo,Lmo,UB,xmo,$mo,kmo,op,cne,Smo,Rmo,JB,Pmo,Bmo,Imo,rp,fne,qmo,Nmo,YB,jmo,Dmo,Gmo,tp,mne,Omo,Vmo,KB,Xmo,zmo,Qmo,ap,gne,Wmo,Hmo,ZB,Umo,Jmo,Ymo,np,hne,Kmo,Zmo,eI,ego,ogo,rgo,sp,pne,tgo,ago,oI,ngo,sgo,lgo,lp,une,igo,dgo,rI,cgo,fgo,mgo,ip,_ne,ggo,hgo,tI,pgo,ugo,_go,dp,bne,bgo,vgo,aI,Fgo,Tgo,Mgo,cp,vne,Ego,Cgo,nI,wgo,Ago,ygo,fp,Fne,Lgo,xgo,sI,$go,kgo,Sgo,mp,Tne,Rgo,Pgo,lI,Bgo,Igo,qgo,gp,Mne,Ngo,jgo,iI,Dgo,Ggo,Ogo,hp,Ene,Vgo,Xgo,dI,zgo,Qgo,Wgo,pp,Cne,Hgo,Ugo,cI,Jgo,Ygo,Kgo,up,wne,Zgo,eho,fI,oho,rho,tho,_p,Ane,aho,nho,mI,sho,lho,iho,bp,yne,dho,cho,gI,fho,mho,gho,vp,Lne,hho,pho,hI,uho,_ho,bho,Rs,xne,vho,Fho,pI,Tho,Mho,uI,Eho,Cho,who,Fp,$ne,Aho,yho,_I,Lho,xho,$ho,Tp,kne,kho,Sho,bI,Rho,Pho,Bho,Mp,Sne,Iho,qho,vI,Nho,jho,Dho,Ep,Rne,Gho,Oho,FI,Vho,Xho,zho,Cp,Pne,Qho,Who,TI,Hho,Uho,Jho,wp,Bne,Yho,Kho,MI,Zho,epo,opo,Ap,Ine,rpo,tpo,EI,apo,npo,spo,yp,qne,lpo,ipo,CI,dpo,cpo,fpo,Lp,Nne,mpo,gpo,wI,hpo,ppo,upo,xp,jne,_po,bpo,AI,vpo,Fpo,Tpo,$p,Dne,Mpo,Epo,yI,Cpo,wpo,Apo,kp,Gne,ypo,Lpo,LI,xpo,$po,kpo,Sp,One,Spo,Rpo,xI,Ppo,Bpo,Ipo,Rp,Vne,qpo,Npo,$I,jpo,Dpo,Gpo,Pp,Xne,Opo,Vpo,kI,Xpo,zpo,Qpo,Bp,zne,Wpo,Hpo,SI,Upo,Jpo,Ypo,Ip,Qne,Kpo,Zpo,RI,euo,ouo,ruo,qp,Wne,tuo,auo,PI,nuo,suo,luo,Np,Hne,iuo,duo,BI,cuo,fuo,muo,jp,Une,guo,huo,II,puo,uuo,_uo,Dp,Jne,buo,vuo,qI,Fuo,Tuo,Muo,Gp,Yne,Euo,Cuo,NI,wuo,Auo,yuo,Op,Kne,Luo,xuo,jI,$uo,kuo,Suo,Vp,Zne,Ruo,Puo,DI,Buo,Iuo,quo,Xp,ese,Nuo,juo,GI,Duo,Guo,Ouo,zp,ose,Vuo,Xuo,OI,zuo,Quo,Wuo,Qp,rse,Huo,Uuo,VI,Juo,Yuo,Kuo,Wp,tse,Zuo,e_o,XI,o_o,r_o,t_o,Hp,ase,a_o,n_o,zI,s_o,l_o,i_o,Up,nse,d_o,c_o,QI,f_o,m_o,g_o,Jp,sse,h_o,p_o,WI,u_o,__o,b_o,Yp,lse,v_o,F_o,HI,T_o,M_o,E_o,Kp,ise,C_o,w_o,UI,A_o,y_o,L_o,Zp,dse,x_o,$_o,JI,k_o,S_o,R_o,eu,cse,P_o,B_o,YI,I_o,q_o,N_o,ou,fse,j_o,D_o,KI,G_o,O_o,V_o,ru,mse,X_o,z_o,ZI,Q_o,W_o,H_o,tu,gse,U_o,J_o,eq,Y_o,K_o,Z_o,au,hse,e1o,o1o,oq,r1o,t1o,a1o,nu,pse,n1o,s1o,rq,l1o,i1o,d1o,su,use,c1o,f1o,tq,m1o,g1o,h1o,lu,_se,p1o,u1o,aq,_1o,b1o,v1o,iu,bse,F1o,T1o,nq,M1o,E1o,C1o,du,vse,w1o,A1o,sq,y1o,L1o,x1o,cu,Fse,$1o,k1o,lq,S1o,R1o,P1o,fu,Tse,B1o,I1o,iq,q1o,N1o,j1o,mu,Mse,D1o,G1o,dq,O1o,V1o,X1o,gu,Ese,z1o,Q1o,cq,W1o,H1o,U1o,hu,Cse,J1o,Y1o,fq,K1o,Z1o,e8o,pu,wse,o8o,r8o,mq,t8o,a8o,n8o,uu,Ase,s8o,l8o,gq,i8o,d8o,c8o,_u,yse,f8o,m8o,hq,g8o,h8o,p8o,bu,Lse,u8o,_8o,pq,b8o,v8o,F8o,vu,xse,T8o,M8o,uq,E8o,C8o,w8o,Fu,$se,A8o,y8o,_q,L8o,x8o,$8o,Tu,kse,k8o,S8o,bq,R8o,P8o,B8o,Mu,Sse,I8o,q8o,vq,N8o,j8o,D8o,Eu,Rse,G8o,O8o,Fq,V8o,X8o,z8o,Cu,Pse,Q8o,W8o,Tq,H8o,U8o,J8o,wu,Bse,Y8o,K8o,Mq,Z8o,ebo,obo,Au,Ise,rbo,tbo,Eq,abo,nbo,sbo,yu,qse,lbo,ibo,Cq,dbo,cbo,fbo,Lu,Nse,mbo,gbo,wq,hbo,pbo,ubo,xu,jse,_bo,bbo,Aq,vbo,Fbo,Tbo,$u,Dse,Mbo,Ebo,yq,Cbo,wbo,Abo,ku,ybo,Gse,Lbo,xbo,Ose,$bo,kbo,Su,YBe,wi,Ru,Vse,AA,Sbo,Xse,Rbo,KBe,xo,yA,Pbo,Ai,Bbo,Lq,Ibo,qbo,xq,Nbo,jbo,Dbo,LA,Gbo,zse,Obo,Vbo,Xbo,rt,xA,zbo,Qse,Qbo,Wbo,yi,Hbo,Wse,Ubo,Jbo,$q,Ybo,Kbo,Zbo,Pu,e2o,Ue,$A,o2o,Hse,r2o,t2o,ya,a2o,Use,n2o,s2o,Jse,l2o,i2o,Yse,d2o,c2o,f2o,G,Bu,Kse,m2o,g2o,kq,h2o,p2o,u2o,Iu,Zse,_2o,b2o,Sq,v2o,F2o,T2o,qu,ele,M2o,E2o,Rq,C2o,w2o,A2o,Nu,ole,y2o,L2o,Pq,x2o,$2o,k2o,ju,rle,S2o,R2o,Bq,P2o,B2o,I2o,Du,tle,q2o,N2o,Iq,j2o,D2o,G2o,Gu,ale,O2o,V2o,qq,X2o,z2o,Q2o,Ou,nle,W2o,H2o,Nq,U2o,J2o,Y2o,Vu,sle,K2o,Z2o,jq,evo,ovo,rvo,Xu,lle,tvo,avo,Dq,nvo,svo,lvo,zu,ile,ivo,dvo,Gq,cvo,fvo,mvo,Qu,dle,gvo,hvo,Oq,pvo,uvo,_vo,Wu,cle,bvo,vvo,Vq,Fvo,Tvo,Mvo,Hu,fle,Evo,Cvo,Xq,wvo,Avo,yvo,Uu,mle,Lvo,xvo,zq,$vo,kvo,Svo,Ju,gle,Rvo,Pvo,Qq,Bvo,Ivo,qvo,Yu,hle,Nvo,jvo,Wq,Dvo,Gvo,Ovo,Ku,ple,Vvo,Xvo,Hq,zvo,Qvo,Wvo,Zu,ule,Hvo,Uvo,Uq,Jvo,Yvo,Kvo,e_,_le,Zvo,eFo,Jq,oFo,rFo,tFo,o_,ble,aFo,nFo,Yq,sFo,lFo,iFo,r_,vle,dFo,cFo,Kq,fFo,mFo,gFo,t_,Fle,hFo,pFo,Zq,uFo,_Fo,bFo,a_,Tle,vFo,FFo,eN,TFo,MFo,EFo,n_,Mle,CFo,wFo,oN,AFo,yFo,LFo,s_,Ele,xFo,$Fo,rN,kFo,SFo,RFo,l_,Cle,PFo,BFo,tN,IFo,qFo,NFo,i_,wle,jFo,DFo,aN,GFo,OFo,VFo,d_,Ale,XFo,zFo,nN,QFo,WFo,HFo,c_,yle,UFo,JFo,sN,YFo,KFo,ZFo,f_,Lle,e0o,o0o,lN,r0o,t0o,a0o,m_,xle,n0o,s0o,iN,l0o,i0o,d0o,g_,$le,c0o,f0o,dN,m0o,g0o,h0o,h_,kle,p0o,u0o,cN,_0o,b0o,v0o,p_,Sle,F0o,T0o,fN,M0o,E0o,C0o,u_,Rle,w0o,A0o,mN,y0o,L0o,x0o,__,Ple,$0o,k0o,gN,S0o,R0o,P0o,b_,Ble,B0o,I0o,hN,q0o,N0o,j0o,v_,Ile,D0o,G0o,pN,O0o,V0o,X0o,F_,z0o,qle,Q0o,W0o,Nle,H0o,U0o,T_,ZBe,Li,M_,jle,kA,J0o,Dle,Y0o,eIe,$o,SA,K0o,xi,Z0o,uN,eTo,oTo,_N,rTo,tTo,aTo,RA,nTo,Gle,sTo,lTo,iTo,tt,PA,dTo,Ole,cTo,fTo,$i,mTo,Vle,gTo,hTo,bN,pTo,uTo,_To,E_,bTo,Je,BA,vTo,Xle,FTo,TTo,La,MTo,zle,ETo,CTo,Qle,wTo,ATo,Wle,yTo,LTo,xTo,z,C_,Hle,$To,kTo,vN,STo,RTo,PTo,w_,Ule,BTo,ITo,FN,qTo,NTo,jTo,A_,Jle,DTo,GTo,TN,OTo,VTo,XTo,y_,Yle,zTo,QTo,MN,WTo,HTo,UTo,L_,Kle,JTo,YTo,EN,KTo,ZTo,e7o,x_,Zle,o7o,r7o,CN,t7o,a7o,n7o,$_,eie,s7o,l7o,wN,i7o,d7o,c7o,k_,oie,f7o,m7o,AN,g7o,h7o,p7o,S_,rie,u7o,_7o,yN,b7o,v7o,F7o,R_,tie,T7o,M7o,LN,E7o,C7o,w7o,P_,aie,A7o,y7o,xN,L7o,x7o,$7o,B_,nie,k7o,S7o,$N,R7o,P7o,B7o,I_,sie,I7o,q7o,kN,N7o,j7o,D7o,q_,lie,G7o,O7o,SN,V7o,X7o,z7o,N_,iie,Q7o,W7o,RN,H7o,U7o,J7o,j_,die,Y7o,K7o,PN,Z7o,eMo,oMo,D_,cie,rMo,tMo,BN,aMo,nMo,sMo,G_,fie,lMo,iMo,IN,dMo,cMo,fMo,O_,mie,mMo,gMo,qN,hMo,pMo,uMo,V_,gie,_Mo,bMo,NN,vMo,FMo,TMo,X_,hie,MMo,EMo,jN,CMo,wMo,AMo,z_,pie,yMo,LMo,DN,xMo,$Mo,kMo,Q_,uie,SMo,RMo,GN,PMo,BMo,IMo,W_,_ie,qMo,NMo,ON,jMo,DMo,GMo,H_,bie,OMo,VMo,VN,XMo,zMo,QMo,U_,vie,WMo,HMo,XN,UMo,JMo,YMo,J_,Fie,KMo,ZMo,zN,e4o,o4o,r4o,Y_,Tie,t4o,a4o,QN,n4o,s4o,l4o,K_,Mie,i4o,d4o,WN,c4o,f4o,m4o,Z_,Eie,g4o,h4o,HN,p4o,u4o,_4o,e1,Cie,b4o,v4o,UN,F4o,T4o,M4o,o1,wie,E4o,C4o,JN,w4o,A4o,y4o,r1,Aie,L4o,x4o,YN,$4o,k4o,S4o,t1,yie,R4o,P4o,KN,B4o,I4o,q4o,a1,Lie,N4o,j4o,ZN,D4o,G4o,O4o,n1,xie,V4o,X4o,ej,z4o,Q4o,W4o,s1,H4o,$ie,U4o,J4o,kie,Y4o,K4o,l1,oIe,ki,i1,Sie,IA,Z4o,Rie,eEo,rIe,ko,qA,oEo,Si,rEo,oj,tEo,aEo,rj,nEo,sEo,lEo,NA,iEo,Pie,dEo,cEo,fEo,at,jA,mEo,Bie,gEo,hEo,Ri,pEo,Iie,uEo,_Eo,tj,bEo,vEo,FEo,d1,TEo,Ye,DA,MEo,qie,EEo,CEo,xa,wEo,Nie,AEo,yEo,jie,LEo,xEo,Die,$Eo,kEo,SEo,Q,c1,Gie,REo,PEo,aj,BEo,IEo,qEo,f1,Oie,NEo,jEo,nj,DEo,GEo,OEo,m1,Vie,VEo,XEo,sj,zEo,QEo,WEo,g1,Xie,HEo,UEo,lj,JEo,YEo,KEo,h1,zie,ZEo,e5o,ij,o5o,r5o,t5o,p1,Qie,a5o,n5o,dj,s5o,l5o,i5o,u1,Wie,d5o,c5o,cj,f5o,m5o,g5o,_1,Hie,h5o,p5o,fj,u5o,_5o,b5o,b1,Uie,v5o,F5o,mj,T5o,M5o,E5o,v1,Jie,C5o,w5o,gj,A5o,y5o,L5o,F1,Yie,x5o,$5o,hj,k5o,S5o,R5o,T1,Kie,P5o,B5o,pj,I5o,q5o,N5o,M1,Zie,j5o,D5o,uj,G5o,O5o,V5o,E1,ede,X5o,z5o,_j,Q5o,W5o,H5o,C1,ode,U5o,J5o,bj,Y5o,K5o,Z5o,w1,rde,eCo,oCo,vj,rCo,tCo,aCo,A1,tde,nCo,sCo,Fj,lCo,iCo,dCo,y1,ade,cCo,fCo,Tj,mCo,gCo,hCo,L1,nde,pCo,uCo,Mj,_Co,bCo,vCo,x1,sde,FCo,TCo,Ej,MCo,ECo,CCo,$1,lde,wCo,ACo,Cj,yCo,LCo,xCo,k1,ide,$Co,kCo,wj,SCo,RCo,PCo,S1,dde,BCo,ICo,Aj,qCo,NCo,jCo,R1,cde,DCo,GCo,yj,OCo,VCo,XCo,P1,fde,zCo,QCo,Lj,WCo,HCo,UCo,B1,mde,JCo,YCo,xj,KCo,ZCo,e3o,I1,gde,o3o,r3o,$j,t3o,a3o,n3o,q1,hde,s3o,l3o,kj,i3o,d3o,c3o,N1,pde,f3o,m3o,Sj,g3o,h3o,p3o,j1,ude,u3o,_3o,Rj,b3o,v3o,F3o,D1,_de,T3o,M3o,bde,E3o,C3o,w3o,G1,vde,A3o,y3o,Pj,L3o,x3o,$3o,O1,Fde,k3o,S3o,Bj,R3o,P3o,B3o,V1,Tde,I3o,q3o,Ij,N3o,j3o,D3o,X1,Mde,G3o,O3o,qj,V3o,X3o,z3o,z1,Q3o,Ede,W3o,H3o,Cde,U3o,J3o,Q1,tIe,Pi,W1,wde,GA,Y3o,Ade,K3o,aIe,So,OA,Z3o,Bi,ewo,Nj,owo,rwo,jj,two,awo,nwo,VA,swo,yde,lwo,iwo,dwo,nt,XA,cwo,Lde,fwo,mwo,Ii,gwo,xde,hwo,pwo,Dj,uwo,_wo,bwo,H1,vwo,Ke,zA,Fwo,$de,Two,Mwo,$a,Ewo,kde,Cwo,wwo,Sde,Awo,ywo,Rde,Lwo,xwo,$wo,he,U1,Pde,kwo,Swo,Gj,Rwo,Pwo,Bwo,J1,Bde,Iwo,qwo,Oj,Nwo,jwo,Dwo,Y1,Ide,Gwo,Owo,Vj,Vwo,Xwo,zwo,K1,qde,Qwo,Wwo,Xj,Hwo,Uwo,Jwo,Z1,Nde,Ywo,Kwo,zj,Zwo,eAo,oAo,e8,jde,rAo,tAo,Qj,aAo,nAo,sAo,o8,Dde,lAo,iAo,Wj,dAo,cAo,fAo,r8,Gde,mAo,gAo,Hj,hAo,pAo,uAo,t8,Ode,_Ao,bAo,Uj,vAo,FAo,TAo,a8,Vde,MAo,EAo,Jj,CAo,wAo,AAo,n8,Xde,yAo,LAo,Yj,xAo,$Ao,kAo,s8,zde,SAo,RAo,Kj,PAo,BAo,IAo,l8,Qde,qAo,NAo,Zj,jAo,DAo,GAo,i8,Wde,OAo,VAo,eD,XAo,zAo,QAo,d8,Hde,WAo,HAo,oD,UAo,JAo,YAo,c8,Ude,KAo,ZAo,rD,e6o,o6o,r6o,f8,Jde,t6o,a6o,tD,n6o,s6o,l6o,m8,i6o,Yde,d6o,c6o,Kde,f6o,m6o,g8,nIe,qi,h8,Zde,QA,g6o,ece,h6o,sIe,Ro,WA,p6o,Ni,u6o,aD,_6o,b6o,nD,v6o,F6o,T6o,HA,M6o,oce,E6o,C6o,w6o,st,UA,A6o,rce,y6o,L6o,ji,x6o,tce,$6o,k6o,sD,S6o,R6o,P6o,p8,B6o,Ze,JA,I6o,ace,q6o,N6o,ka,j6o,nce,D6o,G6o,sce,O6o,V6o,lce,X6o,z6o,Q6o,q,u8,ice,W6o,H6o,lD,U6o,J6o,Y6o,_8,dce,K6o,Z6o,iD,eyo,oyo,ryo,b8,cce,tyo,ayo,dD,nyo,syo,lyo,v8,fce,iyo,dyo,cD,cyo,fyo,myo,F8,mce,gyo,hyo,fD,pyo,uyo,_yo,T8,gce,byo,vyo,mD,Fyo,Tyo,Myo,M8,hce,Eyo,Cyo,gD,wyo,Ayo,yyo,E8,pce,Lyo,xyo,hD,$yo,kyo,Syo,C8,uce,Ryo,Pyo,pD,Byo,Iyo,qyo,w8,_ce,Nyo,jyo,uD,Dyo,Gyo,Oyo,A8,bce,Vyo,Xyo,_D,zyo,Qyo,Wyo,y8,vce,Hyo,Uyo,bD,Jyo,Yyo,Kyo,L8,Fce,Zyo,eLo,vD,oLo,rLo,tLo,x8,Tce,aLo,nLo,FD,sLo,lLo,iLo,$8,Mce,dLo,cLo,TD,fLo,mLo,gLo,k8,Ece,hLo,pLo,MD,uLo,_Lo,bLo,S8,Cce,vLo,FLo,ED,TLo,MLo,ELo,R8,wce,CLo,wLo,CD,ALo,yLo,LLo,P8,Ace,xLo,$Lo,wD,kLo,SLo,RLo,B8,yce,PLo,BLo,AD,ILo,qLo,NLo,I8,Lce,jLo,DLo,yD,GLo,OLo,VLo,q8,xce,XLo,zLo,LD,QLo,WLo,HLo,N8,$ce,ULo,JLo,xD,YLo,KLo,ZLo,j8,kce,exo,oxo,$D,rxo,txo,axo,D8,Sce,nxo,sxo,kD,lxo,ixo,dxo,G8,Rce,cxo,fxo,SD,mxo,gxo,hxo,O8,Pce,pxo,uxo,RD,_xo,bxo,vxo,V8,Bce,Fxo,Txo,PD,Mxo,Exo,Cxo,X8,Ice,wxo,Axo,BD,yxo,Lxo,xxo,z8,qce,$xo,kxo,ID,Sxo,Rxo,Pxo,Q8,Nce,Bxo,Ixo,qD,qxo,Nxo,jxo,W8,jce,Dxo,Gxo,ND,Oxo,Vxo,Xxo,H8,Dce,zxo,Qxo,jD,Wxo,Hxo,Uxo,U8,Gce,Jxo,Yxo,DD,Kxo,Zxo,e9o,J8,Oce,o9o,r9o,GD,t9o,a9o,n9o,Y8,Vce,s9o,l9o,OD,i9o,d9o,c9o,K8,Xce,f9o,m9o,VD,g9o,h9o,p9o,Z8,zce,u9o,_9o,XD,b9o,v9o,F9o,eb,Qce,T9o,M9o,zD,E9o,C9o,w9o,ob,Wce,A9o,y9o,QD,L9o,x9o,$9o,rb,Hce,k9o,S9o,WD,R9o,P9o,B9o,tb,Uce,I9o,q9o,HD,N9o,j9o,D9o,ab,Jce,G9o,O9o,UD,V9o,X9o,z9o,nb,Yce,Q9o,W9o,JD,H9o,U9o,J9o,sb,Kce,Y9o,K9o,YD,Z9o,e$o,o$o,lb,Zce,r$o,t$o,KD,a$o,n$o,s$o,ib,efe,l$o,i$o,ZD,d$o,c$o,f$o,db,m$o,ofe,g$o,h$o,rfe,p$o,u$o,cb,lIe,Di,fb,tfe,YA,_$o,afe,b$o,iIe,Po,KA,v$o,Gi,F$o,eG,T$o,M$o,oG,E$o,C$o,w$o,ZA,A$o,nfe,y$o,L$o,x$o,lt,e6,$$o,sfe,k$o,S$o,Oi,R$o,lfe,P$o,B$o,rG,I$o,q$o,N$o,mb,j$o,eo,o6,D$o,ife,G$o,O$o,Sa,V$o,dfe,X$o,z$o,cfe,Q$o,W$o,ffe,H$o,U$o,J$o,Y,gb,mfe,Y$o,K$o,tG,Z$o,eko,oko,hb,gfe,rko,tko,aG,ako,nko,sko,pb,hfe,lko,iko,nG,dko,cko,fko,ub,pfe,mko,gko,sG,hko,pko,uko,_b,ufe,_ko,bko,lG,vko,Fko,Tko,bb,_fe,Mko,Eko,iG,Cko,wko,Ako,vb,bfe,yko,Lko,dG,xko,$ko,kko,Fb,vfe,Sko,Rko,cG,Pko,Bko,Iko,Tb,Ffe,qko,Nko,fG,jko,Dko,Gko,Mb,Tfe,Oko,Vko,mG,Xko,zko,Qko,Eb,Mfe,Wko,Hko,gG,Uko,Jko,Yko,Cb,Efe,Kko,Zko,hG,eSo,oSo,rSo,wb,Cfe,tSo,aSo,pG,nSo,sSo,lSo,Ab,wfe,iSo,dSo,uG,cSo,fSo,mSo,yb,Afe,gSo,hSo,_G,pSo,uSo,_So,Lb,yfe,bSo,vSo,bG,FSo,TSo,MSo,xb,Lfe,ESo,CSo,vG,wSo,ASo,ySo,$b,xfe,LSo,xSo,FG,$So,kSo,SSo,kb,$fe,RSo,PSo,TG,BSo,ISo,qSo,Sb,kfe,NSo,jSo,MG,DSo,GSo,OSo,Rb,Sfe,VSo,XSo,EG,zSo,QSo,WSo,Pb,Rfe,HSo,USo,CG,JSo,YSo,KSo,Bb,Pfe,ZSo,eRo,wG,oRo,rRo,tRo,Ib,Bfe,aRo,nRo,AG,sRo,lRo,iRo,qb,Ife,dRo,cRo,yG,fRo,mRo,gRo,Nb,qfe,hRo,pRo,LG,uRo,_Ro,bRo,jb,Nfe,vRo,FRo,xG,TRo,MRo,ERo,Db,jfe,CRo,wRo,$G,ARo,yRo,LRo,Gb,Dfe,xRo,$Ro,kG,kRo,SRo,RRo,Ob,PRo,Gfe,BRo,IRo,Ofe,qRo,NRo,Vb,dIe,Vi,Xb,Vfe,r6,jRo,Xfe,DRo,cIe,Bo,t6,GRo,Xi,ORo,SG,VRo,XRo,RG,zRo,QRo,WRo,a6,HRo,zfe,URo,JRo,YRo,it,n6,KRo,Qfe,ZRo,ePo,zi,oPo,Wfe,rPo,tPo,PG,aPo,nPo,sPo,zb,lPo,oo,s6,iPo,Hfe,dPo,cPo,Ra,fPo,Ufe,mPo,gPo,Jfe,hPo,pPo,Yfe,uPo,_Po,bPo,Yr,Qb,Kfe,vPo,FPo,BG,TPo,MPo,EPo,Wb,Zfe,CPo,wPo,IG,APo,yPo,LPo,Hb,eme,xPo,$Po,qG,kPo,SPo,RPo,Ub,ome,PPo,BPo,NG,IPo,qPo,NPo,Jb,rme,jPo,DPo,jG,GPo,OPo,VPo,Yb,XPo,tme,zPo,QPo,ame,WPo,HPo,Kb,fIe,Qi,Zb,nme,l6,UPo,sme,JPo,mIe,Io,i6,YPo,Wi,KPo,DG,ZPo,eBo,GG,oBo,rBo,tBo,d6,aBo,lme,nBo,sBo,lBo,dt,c6,iBo,ime,dBo,cBo,Hi,fBo,dme,mBo,gBo,OG,hBo,pBo,uBo,e2,_Bo,ro,f6,bBo,cme,vBo,FBo,Pa,TBo,fme,MBo,EBo,mme,CBo,wBo,gme,ABo,yBo,LBo,U,o2,hme,xBo,$Bo,VG,kBo,SBo,RBo,r2,pme,PBo,BBo,XG,IBo,qBo,NBo,t2,ume,jBo,DBo,zG,GBo,OBo,VBo,a2,_me,XBo,zBo,QG,QBo,WBo,HBo,n2,bme,UBo,JBo,WG,YBo,KBo,ZBo,s2,vme,eIo,oIo,HG,rIo,tIo,aIo,l2,Fme,nIo,sIo,UG,lIo,iIo,dIo,i2,Tme,cIo,fIo,JG,mIo,gIo,hIo,d2,Mme,pIo,uIo,YG,_Io,bIo,vIo,c2,Eme,FIo,TIo,KG,MIo,EIo,CIo,f2,Cme,wIo,AIo,ZG,yIo,LIo,xIo,m2,wme,$Io,kIo,eO,SIo,RIo,PIo,g2,Ame,BIo,IIo,oO,qIo,NIo,jIo,h2,yme,DIo,GIo,rO,OIo,VIo,XIo,p2,Lme,zIo,QIo,tO,WIo,HIo,UIo,u2,xme,JIo,YIo,aO,KIo,ZIo,eqo,_2,$me,oqo,rqo,nO,tqo,aqo,nqo,b2,kme,sqo,lqo,sO,iqo,dqo,cqo,v2,Sme,fqo,mqo,lO,gqo,hqo,pqo,F2,Rme,uqo,_qo,iO,bqo,vqo,Fqo,T2,Pme,Tqo,Mqo,dO,Eqo,Cqo,wqo,M2,Bme,Aqo,yqo,cO,Lqo,xqo,$qo,E2,Ime,kqo,Sqo,fO,Rqo,Pqo,Bqo,C2,qme,Iqo,qqo,mO,Nqo,jqo,Dqo,w2,Nme,Gqo,Oqo,gO,Vqo,Xqo,zqo,A2,jme,Qqo,Wqo,hO,Hqo,Uqo,Jqo,y2,Dme,Yqo,Kqo,pO,Zqo,eNo,oNo,L2,Gme,rNo,tNo,uO,aNo,nNo,sNo,x2,Ome,lNo,iNo,_O,dNo,cNo,fNo,$2,Vme,mNo,gNo,bO,hNo,pNo,uNo,k2,Xme,_No,bNo,vO,vNo,FNo,TNo,S2,zme,MNo,ENo,FO,CNo,wNo,ANo,R2,Qme,yNo,LNo,TO,xNo,$No,kNo,P2,SNo,Wme,RNo,PNo,Hme,BNo,INo,B2,gIe,Ui,I2,Ume,m6,qNo,Jme,NNo,hIe,qo,g6,jNo,Ji,DNo,MO,GNo,ONo,EO,VNo,XNo,zNo,h6,QNo,Yme,WNo,HNo,UNo,ct,p6,JNo,Kme,YNo,KNo,Yi,ZNo,Zme,ejo,ojo,CO,rjo,tjo,ajo,q2,njo,to,u6,sjo,ege,ljo,ijo,Ba,djo,oge,cjo,fjo,rge,mjo,gjo,tge,hjo,pjo,ujo,O,N2,age,_jo,bjo,wO,vjo,Fjo,Tjo,j2,nge,Mjo,Ejo,AO,Cjo,wjo,Ajo,D2,sge,yjo,Ljo,yO,xjo,$jo,kjo,G2,lge,Sjo,Rjo,LO,Pjo,Bjo,Ijo,O2,ige,qjo,Njo,xO,jjo,Djo,Gjo,V2,dge,Ojo,Vjo,$O,Xjo,zjo,Qjo,X2,cge,Wjo,Hjo,kO,Ujo,Jjo,Yjo,z2,fge,Kjo,Zjo,SO,eDo,oDo,rDo,Q2,mge,tDo,aDo,RO,nDo,sDo,lDo,W2,gge,iDo,dDo,PO,cDo,fDo,mDo,H2,hge,gDo,hDo,BO,pDo,uDo,_Do,U2,pge,bDo,vDo,IO,FDo,TDo,MDo,J2,uge,EDo,CDo,qO,wDo,ADo,yDo,Y2,_ge,LDo,xDo,NO,$Do,kDo,SDo,K2,bge,RDo,PDo,jO,BDo,IDo,qDo,Z2,vge,NDo,jDo,DO,DDo,GDo,ODo,ev,Fge,VDo,XDo,GO,zDo,QDo,WDo,ov,Tge,HDo,UDo,OO,JDo,YDo,KDo,rv,Mge,ZDo,eGo,VO,oGo,rGo,tGo,tv,Ege,aGo,nGo,XO,sGo,lGo,iGo,av,Cge,dGo,cGo,zO,fGo,mGo,gGo,nv,wge,hGo,pGo,QO,uGo,_Go,bGo,sv,Age,vGo,FGo,WO,TGo,MGo,EGo,lv,yge,CGo,wGo,HO,AGo,yGo,LGo,iv,Lge,xGo,$Go,UO,kGo,SGo,RGo,dv,xge,PGo,BGo,JO,IGo,qGo,NGo,cv,$ge,jGo,DGo,YO,GGo,OGo,VGo,fv,kge,XGo,zGo,KO,QGo,WGo,HGo,mv,Sge,UGo,JGo,ZO,YGo,KGo,ZGo,gv,Rge,eOo,oOo,eV,rOo,tOo,aOo,hv,Pge,nOo,sOo,oV,lOo,iOo,dOo,pv,Bge,cOo,fOo,rV,mOo,gOo,hOo,uv,Ige,pOo,uOo,tV,_Oo,bOo,vOo,_v,qge,FOo,TOo,aV,MOo,EOo,COo,bv,Nge,wOo,AOo,nV,yOo,LOo,xOo,vv,jge,$Oo,kOo,sV,SOo,ROo,POo,Fv,Dge,BOo,IOo,lV,qOo,NOo,jOo,Tv,Gge,DOo,GOo,iV,OOo,VOo,XOo,Mv,Oge,zOo,QOo,dV,WOo,HOo,UOo,Ev,JOo,Vge,YOo,KOo,Xge,ZOo,eVo,Cv,pIe,Ki,wv,zge,_6,oVo,Qge,rVo,uIe,No,b6,tVo,Zi,aVo,cV,nVo,sVo,fV,lVo,iVo,dVo,v6,cVo,Wge,fVo,mVo,gVo,ft,F6,hVo,Hge,pVo,uVo,ed,_Vo,Uge,bVo,vVo,mV,FVo,TVo,MVo,Av,EVo,ao,T6,CVo,Jge,wVo,AVo,Ia,yVo,Yge,LVo,xVo,Kge,$Vo,kVo,Zge,SVo,RVo,PVo,ehe,yv,ohe,BVo,IVo,gV,qVo,NVo,jVo,Lv,DVo,rhe,GVo,OVo,the,VVo,XVo,xv,_Ie,od,$v,ahe,M6,zVo,nhe,QVo,bIe,jo,E6,WVo,rd,HVo,hV,UVo,JVo,pV,YVo,KVo,ZVo,C6,eXo,she,oXo,rXo,tXo,mt,w6,aXo,lhe,nXo,sXo,td,lXo,ihe,iXo,dXo,uV,cXo,fXo,mXo,kv,gXo,no,A6,hXo,dhe,pXo,uXo,qa,_Xo,che,bXo,vXo,fhe,FXo,TXo,mhe,MXo,EXo,CXo,ve,Sv,ghe,wXo,AXo,_V,yXo,LXo,xXo,Rv,hhe,$Xo,kXo,bV,SXo,RXo,PXo,Pv,phe,BXo,IXo,vV,qXo,NXo,jXo,Ps,uhe,DXo,GXo,FV,OXo,VXo,TV,XXo,zXo,QXo,Bv,_he,WXo,HXo,MV,UXo,JXo,YXo,gt,bhe,KXo,ZXo,EV,ezo,ozo,CV,rzo,tzo,wV,azo,nzo,szo,Iv,vhe,lzo,izo,AV,dzo,czo,fzo,qv,Fhe,mzo,gzo,yV,hzo,pzo,uzo,Nv,The,_zo,bzo,LV,vzo,Fzo,Tzo,jv,Mhe,Mzo,Ezo,xV,Czo,wzo,Azo,Dv,Ehe,yzo,Lzo,$V,xzo,$zo,kzo,Gv,Che,Szo,Rzo,kV,Pzo,Bzo,Izo,Ov,whe,qzo,Nzo,SV,jzo,Dzo,Gzo,Vv,Ozo,Ahe,Vzo,Xzo,yhe,zzo,Qzo,Xv,vIe,ad,zv,Lhe,y6,Wzo,xhe,Hzo,FIe,Do,L6,Uzo,nd,Jzo,RV,Yzo,Kzo,PV,Zzo,eQo,oQo,x6,rQo,$he,tQo,aQo,nQo,ht,$6,sQo,khe,lQo,iQo,sd,dQo,She,cQo,fQo,BV,mQo,gQo,hQo,Qv,pQo,so,k6,uQo,Rhe,_Qo,bQo,Na,vQo,Phe,FQo,TQo,Bhe,MQo,EQo,Ihe,CQo,wQo,AQo,qhe,Wv,Nhe,yQo,LQo,IV,xQo,$Qo,kQo,Hv,SQo,jhe,RQo,PQo,Dhe,BQo,IQo,Uv,TIe,ld,Jv,Ghe,S6,qQo,Ohe,NQo,MIe,Go,R6,jQo,id,DQo,qV,GQo,OQo,NV,VQo,XQo,zQo,P6,QQo,Vhe,WQo,HQo,UQo,pt,B6,JQo,Xhe,YQo,KQo,dd,ZQo,zhe,eWo,oWo,jV,rWo,tWo,aWo,Yv,nWo,lo,I6,sWo,Qhe,lWo,iWo,ja,dWo,Whe,cWo,fWo,Hhe,mWo,gWo,Uhe,hWo,pWo,uWo,je,Kv,Jhe,_Wo,bWo,DV,vWo,FWo,TWo,Zv,Yhe,MWo,EWo,GV,CWo,wWo,AWo,eF,Khe,yWo,LWo,OV,xWo,$Wo,kWo,oF,Zhe,SWo,RWo,VV,PWo,BWo,IWo,rF,epe,qWo,NWo,XV,jWo,DWo,GWo,tF,ope,OWo,VWo,zV,XWo,zWo,QWo,aF,rpe,WWo,HWo,QV,UWo,JWo,YWo,nF,tpe,KWo,ZWo,WV,eHo,oHo,rHo,sF,tHo,ape,aHo,nHo,npe,sHo,lHo,lF,EIe,cd,iF,spe,q6,iHo,lpe,dHo,CIe,Oo,N6,cHo,fd,fHo,HV,mHo,gHo,UV,hHo,pHo,uHo,j6,_Ho,ipe,bHo,vHo,FHo,ut,D6,THo,dpe,MHo,EHo,md,CHo,cpe,wHo,AHo,JV,yHo,LHo,xHo,dF,$Ho,io,G6,kHo,fpe,SHo,RHo,Da,PHo,mpe,BHo,IHo,gpe,qHo,NHo,hpe,jHo,DHo,GHo,Ga,cF,ppe,OHo,VHo,YV,XHo,zHo,QHo,fF,upe,WHo,HHo,KV,UHo,JHo,YHo,mF,_pe,KHo,ZHo,ZV,eUo,oUo,rUo,gF,bpe,tUo,aUo,eX,nUo,sUo,lUo,hF,iUo,vpe,dUo,cUo,Fpe,fUo,mUo,pF,wIe,gd,uF,Tpe,O6,gUo,Mpe,hUo,AIe,Vo,V6,pUo,hd,uUo,oX,_Uo,bUo,rX,vUo,FUo,TUo,X6,MUo,Epe,EUo,CUo,wUo,_t,z6,AUo,Cpe,yUo,LUo,pd,xUo,wpe,$Uo,kUo,tX,SUo,RUo,PUo,_F,BUo,co,Q6,IUo,Ape,qUo,NUo,Oa,jUo,ype,DUo,GUo,Lpe,OUo,VUo,xpe,XUo,zUo,QUo,De,bF,$pe,WUo,HUo,aX,UUo,JUo,YUo,vF,kpe,KUo,ZUo,nX,eJo,oJo,rJo,FF,Spe,tJo,aJo,sX,nJo,sJo,lJo,TF,Rpe,iJo,dJo,lX,cJo,fJo,mJo,MF,Ppe,gJo,hJo,iX,pJo,uJo,_Jo,EF,Bpe,bJo,vJo,dX,FJo,TJo,MJo,CF,Ipe,EJo,CJo,cX,wJo,AJo,yJo,wF,qpe,LJo,xJo,fX,$Jo,kJo,SJo,AF,RJo,Npe,PJo,BJo,jpe,IJo,qJo,yF,yIe,ud,LF,Dpe,W6,NJo,Gpe,jJo,LIe,Xo,H6,DJo,_d,GJo,mX,OJo,VJo,gX,XJo,zJo,QJo,U6,WJo,Ope,HJo,UJo,JJo,bt,J6,YJo,Vpe,KJo,ZJo,bd,eYo,Xpe,oYo,rYo,hX,tYo,aYo,nYo,xF,sYo,fo,Y6,lYo,zpe,iYo,dYo,Va,cYo,Qpe,fYo,mYo,Wpe,gYo,hYo,Hpe,pYo,uYo,_Yo,K6,$F,Upe,bYo,vYo,pX,FYo,TYo,MYo,kF,Jpe,EYo,CYo,uX,wYo,AYo,yYo,SF,LYo,Ype,xYo,$Yo,Kpe,kYo,SYo,RF,xIe,vd,PF,Zpe,Z6,RYo,eue,PYo,$Ie,zo,ey,BYo,Fd,IYo,_X,qYo,NYo,bX,jYo,DYo,GYo,oy,OYo,oue,VYo,XYo,zYo,vt,ry,QYo,rue,WYo,HYo,Td,UYo,tue,JYo,YYo,vX,KYo,ZYo,eKo,BF,oKo,mo,ty,rKo,aue,tKo,aKo,Xa,nKo,nue,sKo,lKo,sue,iKo,dKo,lue,cKo,fKo,mKo,za,IF,iue,gKo,hKo,FX,pKo,uKo,_Ko,qF,due,bKo,vKo,TX,FKo,TKo,MKo,NF,cue,EKo,CKo,MX,wKo,AKo,yKo,jF,fue,LKo,xKo,EX,$Ko,kKo,SKo,DF,RKo,mue,PKo,BKo,gue,IKo,qKo,GF,kIe,Md,OF,hue,ay,NKo,pue,jKo,SIe,Qo,ny,DKo,Ed,GKo,CX,OKo,VKo,wX,XKo,zKo,QKo,sy,WKo,uue,HKo,UKo,JKo,Ft,ly,YKo,_ue,KKo,ZKo,Cd,eZo,bue,oZo,rZo,AX,tZo,aZo,nZo,VF,sZo,go,iy,lZo,vue,iZo,dZo,Qa,cZo,Fue,fZo,mZo,Tue,gZo,hZo,Mue,pZo,uZo,_Zo,wd,XF,Eue,bZo,vZo,yX,FZo,TZo,MZo,zF,Cue,EZo,CZo,LX,wZo,AZo,yZo,QF,wue,LZo,xZo,xX,$Zo,kZo,SZo,WF,RZo,Aue,PZo,BZo,yue,IZo,qZo,HF,RIe,Ad,UF,Lue,dy,NZo,xue,jZo,PIe,Wo,cy,DZo,yd,GZo,$X,OZo,VZo,kX,XZo,zZo,QZo,fy,WZo,$ue,HZo,UZo,JZo,Tt,my,YZo,kue,KZo,ZZo,Ld,eer,Sue,oer,rer,SX,ter,aer,ner,JF,ser,ho,gy,ler,Rue,ier,der,Wa,cer,Pue,fer,mer,Bue,ger,her,Iue,per,uer,_er,hy,YF,que,ber,ver,RX,Fer,Ter,Mer,KF,Nue,Eer,Cer,PX,wer,Aer,yer,ZF,Ler,jue,xer,$er,Due,ker,Ser,e0,BIe,xd,o0,Gue,py,Rer,Oue,Per,IIe,Ho,uy,Ber,$d,Ier,BX,qer,Ner,IX,jer,Der,Ger,_y,Oer,Vue,Ver,Xer,zer,Mt,by,Qer,Xue,Wer,Her,kd,Uer,zue,Jer,Yer,qX,Ker,Zer,eor,r0,oor,po,vy,ror,Que,tor,aor,Ha,nor,Wue,sor,lor,Hue,ior,dor,Uue,cor,mor,gor,Jue,t0,Yue,hor,por,NX,uor,_or,bor,a0,vor,Kue,For,Tor,Zue,Mor,Eor,n0,qIe,Sd,s0,e_e,Fy,Cor,o_e,wor,NIe,Uo,Ty,Aor,Rd,yor,jX,Lor,xor,DX,$or,kor,Sor,My,Ror,r_e,Por,Bor,Ior,Et,Ey,qor,t_e,Nor,jor,Pd,Dor,a_e,Gor,Oor,GX,Vor,Xor,zor,l0,Qor,uo,Cy,Wor,n_e,Hor,Uor,Ua,Jor,s_e,Yor,Kor,l_e,Zor,err,i_e,orr,rrr,trr,Ja,i0,d_e,arr,nrr,OX,srr,lrr,irr,d0,c_e,drr,crr,VX,frr,mrr,grr,c0,f_e,hrr,prr,XX,urr,_rr,brr,f0,m_e,vrr,Frr,zX,Trr,Mrr,Err,m0,Crr,g_e,wrr,Arr,h_e,yrr,Lrr,g0,jIe,Bd,h0,p_e,wy,xrr,u_e,$rr,DIe,Jo,Ay,krr,Id,Srr,QX,Rrr,Prr,WX,Brr,Irr,qrr,yy,Nrr,__e,jrr,Drr,Grr,Ct,Ly,Orr,b_e,Vrr,Xrr,qd,zrr,v_e,Qrr,Wrr,HX,Hrr,Urr,Jrr,p0,Yrr,_o,xy,Krr,F_e,Zrr,etr,Ya,otr,T_e,rtr,ttr,M_e,atr,ntr,E_e,str,ltr,itr,C_e,u0,w_e,dtr,ctr,UX,ftr,mtr,gtr,_0,htr,A_e,ptr,utr,y_e,_tr,btr,b0,GIe,Nd,v0,L_e,$y,vtr,x_e,Ftr,OIe,Yo,ky,Ttr,jd,Mtr,JX,Etr,Ctr,YX,wtr,Atr,ytr,Sy,Ltr,$_e,xtr,$tr,ktr,wt,Ry,Str,k_e,Rtr,Ptr,Dd,Btr,S_e,Itr,qtr,KX,Ntr,jtr,Dtr,F0,Gtr,wr,Py,Otr,R_e,Vtr,Xtr,Ka,ztr,P_e,Qtr,Wtr,B_e,Htr,Utr,I_e,Jtr,Ytr,Ktr,N,T0,q_e,Ztr,ear,ZX,oar,rar,tar,M0,N_e,aar,nar,ez,sar,lar,iar,E0,j_e,dar,car,oz,far,mar,gar,C0,D_e,har,par,rz,uar,_ar,bar,w0,G_e,Far,Tar,tz,Mar,Ear,Car,A0,O_e,war,Aar,az,yar,Lar,xar,y0,V_e,$ar,kar,nz,Sar,Rar,Par,L0,X_e,Bar,Iar,sz,qar,Nar,jar,x0,z_e,Dar,Gar,lz,Oar,Var,Xar,$0,Q_e,zar,Qar,iz,War,Har,Uar,k0,W_e,Jar,Yar,dz,Kar,Zar,enr,S0,H_e,onr,rnr,cz,tnr,anr,nnr,R0,U_e,snr,lnr,fz,inr,dnr,cnr,P0,J_e,fnr,mnr,mz,gnr,hnr,pnr,B0,Y_e,unr,_nr,gz,bnr,vnr,Fnr,I0,K_e,Tnr,Mnr,hz,Enr,Cnr,wnr,q0,Z_e,Anr,ynr,pz,Lnr,xnr,$nr,Bs,e1e,knr,Snr,uz,Rnr,Pnr,_z,Bnr,Inr,qnr,N0,o1e,Nnr,jnr,bz,Dnr,Gnr,Onr,j0,r1e,Vnr,Xnr,vz,znr,Qnr,Wnr,D0,t1e,Hnr,Unr,Fz,Jnr,Ynr,Knr,G0,a1e,Znr,esr,Tz,osr,rsr,tsr,O0,n1e,asr,nsr,Mz,ssr,lsr,isr,V0,s1e,dsr,csr,Ez,fsr,msr,gsr,X0,l1e,hsr,psr,Cz,usr,_sr,bsr,z0,i1e,vsr,Fsr,wz,Tsr,Msr,Esr,Q0,d1e,Csr,wsr,Az,Asr,ysr,Lsr,W0,c1e,xsr,$sr,yz,ksr,Ssr,Rsr,H0,f1e,Psr,Bsr,Lz,Isr,qsr,Nsr,U0,m1e,jsr,Dsr,xz,Gsr,Osr,Vsr,J0,g1e,Xsr,zsr,$z,Qsr,Wsr,Hsr,Y0,h1e,Usr,Jsr,kz,Ysr,Ksr,Zsr,K0,p1e,elr,olr,Sz,rlr,tlr,alr,Z0,u1e,nlr,slr,Rz,llr,ilr,dlr,eT,_1e,clr,flr,Pz,mlr,glr,hlr,oT,b1e,plr,ulr,Bz,_lr,blr,vlr,rT,v1e,Flr,Tlr,Iz,Mlr,Elr,Clr,tT,F1e,wlr,Alr,qz,ylr,Llr,xlr,aT,T1e,$lr,klr,Nz,Slr,Rlr,Plr,nT,M1e,Blr,Ilr,jz,qlr,Nlr,jlr,sT,E1e,Dlr,Glr,Dz,Olr,Vlr,Xlr,lT,C1e,zlr,Qlr,Gz,Wlr,Hlr,Ulr,iT,w1e,Jlr,Ylr,Oz,Klr,Zlr,eir,dT,A1e,oir,rir,Vz,tir,air,nir,cT,y1e,sir,lir,Xz,iir,dir,cir,fT,L1e,fir,mir,zz,gir,hir,pir,mT,VIe,Gd,gT,x1e,By,uir,$1e,_ir,XIe,Ko,Iy,bir,Od,vir,Qz,Fir,Tir,Wz,Mir,Eir,Cir,qy,wir,k1e,Air,yir,Lir,At,Ny,xir,S1e,$ir,kir,Vd,Sir,R1e,Rir,Pir,Hz,Bir,Iir,qir,hT,Nir,Ar,jy,jir,P1e,Dir,Gir,Za,Oir,B1e,Vir,Xir,I1e,zir,Qir,q1e,Wir,Hir,Uir,ne,pT,N1e,Jir,Yir,Uz,Kir,Zir,edr,uT,j1e,odr,rdr,Jz,tdr,adr,ndr,_T,D1e,sdr,ldr,Yz,idr,ddr,cdr,bT,G1e,fdr,mdr,Kz,gdr,hdr,pdr,vT,O1e,udr,_dr,Zz,bdr,vdr,Fdr,FT,V1e,Tdr,Mdr,eQ,Edr,Cdr,wdr,TT,X1e,Adr,ydr,oQ,Ldr,xdr,$dr,MT,z1e,kdr,Sdr,rQ,Rdr,Pdr,Bdr,ET,Q1e,Idr,qdr,tQ,Ndr,jdr,Ddr,CT,W1e,Gdr,Odr,aQ,Vdr,Xdr,zdr,wT,H1e,Qdr,Wdr,nQ,Hdr,Udr,Jdr,AT,U1e,Ydr,Kdr,sQ,Zdr,ecr,ocr,yT,J1e,rcr,tcr,lQ,acr,ncr,scr,LT,Y1e,lcr,icr,iQ,dcr,ccr,fcr,xT,K1e,mcr,gcr,dQ,hcr,pcr,ucr,$T,Z1e,_cr,bcr,cQ,vcr,Fcr,Tcr,kT,e8e,Mcr,Ecr,fQ,Ccr,wcr,Acr,ST,o8e,ycr,Lcr,mQ,xcr,$cr,kcr,RT,r8e,Scr,Rcr,gQ,Pcr,Bcr,Icr,PT,t8e,qcr,Ncr,hQ,jcr,Dcr,Gcr,BT,a8e,Ocr,Vcr,pQ,Xcr,zcr,Qcr,IT,n8e,Wcr,Hcr,uQ,Ucr,Jcr,Ycr,qT,s8e,Kcr,Zcr,_Q,efr,ofr,rfr,NT,zIe,Xd,jT,l8e,Dy,tfr,i8e,afr,QIe,Zo,Gy,nfr,zd,sfr,bQ,lfr,ifr,vQ,dfr,cfr,ffr,Oy,mfr,d8e,gfr,hfr,pfr,yt,Vy,ufr,c8e,_fr,bfr,Qd,vfr,f8e,Ffr,Tfr,FQ,Mfr,Efr,Cfr,DT,wfr,yr,Xy,Afr,m8e,yfr,Lfr,en,xfr,g8e,$fr,kfr,h8e,Sfr,Rfr,p8e,Pfr,Bfr,Ifr,Te,GT,u8e,qfr,Nfr,TQ,jfr,Dfr,Gfr,OT,_8e,Ofr,Vfr,MQ,Xfr,zfr,Qfr,VT,b8e,Wfr,Hfr,EQ,Ufr,Jfr,Yfr,XT,v8e,Kfr,Zfr,CQ,emr,omr,rmr,zT,F8e,tmr,amr,wQ,nmr,smr,lmr,QT,T8e,imr,dmr,AQ,cmr,fmr,mmr,WT,M8e,gmr,hmr,yQ,pmr,umr,_mr,HT,E8e,bmr,vmr,LQ,Fmr,Tmr,Mmr,UT,C8e,Emr,Cmr,xQ,wmr,Amr,ymr,JT,w8e,Lmr,xmr,$Q,$mr,kmr,Smr,YT,A8e,Rmr,Pmr,kQ,Bmr,Imr,qmr,KT,y8e,Nmr,jmr,SQ,Dmr,Gmr,Omr,ZT,WIe,Wd,e7,L8e,zy,Vmr,x8e,Xmr,HIe,er,Qy,zmr,Hd,Qmr,RQ,Wmr,Hmr,PQ,Umr,Jmr,Ymr,Wy,Kmr,$8e,Zmr,egr,ogr,Lt,Hy,rgr,k8e,tgr,agr,Ud,ngr,S8e,sgr,lgr,BQ,igr,dgr,cgr,o7,fgr,Lr,Uy,mgr,R8e,ggr,hgr,on,pgr,P8e,ugr,_gr,B8e,bgr,vgr,I8e,Fgr,Tgr,Mgr,Jd,r7,q8e,Egr,Cgr,IQ,wgr,Agr,ygr,t7,N8e,Lgr,xgr,qQ,$gr,kgr,Sgr,a7,j8e,Rgr,Pgr,NQ,Bgr,Igr,qgr,n7,UIe,Yd,s7,D8e,Jy,Ngr,G8e,jgr,JIe,or,Yy,Dgr,Kd,Ggr,jQ,Ogr,Vgr,DQ,Xgr,zgr,Qgr,Ky,Wgr,O8e,Hgr,Ugr,Jgr,xt,Zy,Ygr,V8e,Kgr,Zgr,Zd,ehr,X8e,ohr,rhr,GQ,thr,ahr,nhr,l7,shr,xr,eL,lhr,z8e,ihr,dhr,rn,chr,Q8e,fhr,mhr,W8e,ghr,hhr,H8e,phr,uhr,_hr,ie,i7,U8e,bhr,vhr,OQ,Fhr,Thr,Mhr,d7,J8e,Ehr,Chr,VQ,whr,Ahr,yhr,c7,Y8e,Lhr,xhr,XQ,$hr,khr,Shr,f7,K8e,Rhr,Phr,zQ,Bhr,Ihr,qhr,m7,Z8e,Nhr,jhr,QQ,Dhr,Ghr,Ohr,g7,ebe,Vhr,Xhr,WQ,zhr,Qhr,Whr,h7,obe,Hhr,Uhr,HQ,Jhr,Yhr,Khr,p7,rbe,Zhr,epr,UQ,opr,rpr,tpr,u7,tbe,apr,npr,JQ,spr,lpr,ipr,_7,abe,dpr,cpr,YQ,fpr,mpr,gpr,b7,nbe,hpr,ppr,KQ,upr,_pr,bpr,v7,sbe,vpr,Fpr,ZQ,Tpr,Mpr,Epr,F7,lbe,Cpr,wpr,eW,Apr,ypr,Lpr,T7,ibe,xpr,$pr,oW,kpr,Spr,Rpr,M7,dbe,Ppr,Bpr,rW,Ipr,qpr,Npr,E7,cbe,jpr,Dpr,tW,Gpr,Opr,Vpr,C7,fbe,Xpr,zpr,aW,Qpr,Wpr,Hpr,w7,mbe,Upr,Jpr,nW,Ypr,Kpr,Zpr,A7,gbe,eur,our,sW,rur,tur,aur,y7,hbe,nur,sur,lW,lur,iur,dur,L7,YIe,ec,x7,pbe,oL,cur,ube,fur,KIe,rr,rL,mur,oc,gur,iW,hur,pur,dW,uur,_ur,bur,tL,vur,_be,Fur,Tur,Mur,$t,aL,Eur,bbe,Cur,wur,rc,Aur,vbe,yur,Lur,cW,xur,$ur,kur,$7,Sur,$r,nL,Rur,Fbe,Pur,Bur,tn,Iur,Tbe,qur,Nur,Mbe,jur,Dur,Ebe,Gur,Our,Vur,ye,k7,Cbe,Xur,zur,fW,Qur,Wur,Hur,S7,wbe,Uur,Jur,mW,Yur,Kur,Zur,R7,Abe,e_r,o_r,gW,r_r,t_r,a_r,P7,ybe,n_r,s_r,hW,l_r,i_r,d_r,B7,Lbe,c_r,f_r,pW,m_r,g_r,h_r,I7,xbe,p_r,u_r,uW,__r,b_r,v_r,q7,$be,F_r,T_r,_W,M_r,E_r,C_r,N7,kbe,w_r,A_r,bW,y_r,L_r,x_r,j7,Sbe,$_r,k_r,vW,S_r,R_r,P_r,D7,Rbe,B_r,I_r,FW,q_r,N_r,j_r,G7,ZIe,tc,O7,Pbe,sL,D_r,Bbe,G_r,eqe,tr,lL,O_r,ac,V_r,TW,X_r,z_r,MW,Q_r,W_r,H_r,iL,U_r,Ibe,J_r,Y_r,K_r,kt,dL,Z_r,qbe,e1r,o1r,nc,r1r,Nbe,t1r,a1r,EW,n1r,s1r,l1r,V7,i1r,kr,cL,d1r,jbe,c1r,f1r,an,m1r,Dbe,g1r,h1r,Gbe,p1r,u1r,Obe,_1r,b1r,v1r,Z,X7,Vbe,F1r,T1r,CW,M1r,E1r,C1r,z7,Xbe,w1r,A1r,wW,y1r,L1r,x1r,Q7,zbe,$1r,k1r,AW,S1r,R1r,P1r,W7,Qbe,B1r,I1r,yW,q1r,N1r,j1r,H7,Wbe,D1r,G1r,LW,O1r,V1r,X1r,U7,Hbe,z1r,Q1r,xW,W1r,H1r,U1r,J7,Ube,J1r,Y1r,$W,K1r,Z1r,e8r,Y7,Jbe,o8r,r8r,kW,t8r,a8r,n8r,K7,Ybe,s8r,l8r,SW,i8r,d8r,c8r,Z7,Kbe,f8r,m8r,RW,g8r,h8r,p8r,eM,Zbe,u8r,_8r,PW,b8r,v8r,F8r,oM,e2e,T8r,M8r,BW,E8r,C8r,w8r,rM,o2e,A8r,y8r,IW,L8r,x8r,$8r,tM,r2e,k8r,S8r,qW,R8r,P8r,B8r,aM,t2e,I8r,q8r,NW,N8r,j8r,D8r,nM,a2e,G8r,O8r,jW,V8r,X8r,z8r,sM,n2e,Q8r,W8r,DW,H8r,U8r,J8r,lM,s2e,Y8r,K8r,GW,Z8r,ebr,obr,iM,l2e,rbr,tbr,OW,abr,nbr,sbr,dM,i2e,lbr,ibr,VW,dbr,cbr,fbr,cM,d2e,mbr,gbr,XW,hbr,pbr,ubr,fM,c2e,_br,bbr,zW,vbr,Fbr,Tbr,mM,f2e,Mbr,Ebr,QW,Cbr,wbr,Abr,gM,m2e,ybr,Lbr,WW,xbr,$br,kbr,hM,g2e,Sbr,Rbr,HW,Pbr,Bbr,Ibr,pM,h2e,qbr,Nbr,UW,jbr,Dbr,Gbr,uM,oqe,sc,_M,p2e,fL,Obr,u2e,Vbr,rqe,ar,mL,Xbr,lc,zbr,JW,Qbr,Wbr,YW,Hbr,Ubr,Jbr,gL,Ybr,_2e,Kbr,Zbr,e2r,St,hL,o2r,b2e,r2r,t2r,ic,a2r,v2e,n2r,s2r,KW,l2r,i2r,d2r,bM,c2r,Sr,pL,f2r,F2e,m2r,g2r,nn,h2r,T2e,p2r,u2r,M2e,_2r,b2r,E2e,v2r,F2r,T2r,pe,vM,C2e,M2r,E2r,ZW,C2r,w2r,A2r,FM,w2e,y2r,L2r,eH,x2r,$2r,k2r,TM,A2e,S2r,R2r,oH,P2r,B2r,I2r,MM,y2e,q2r,N2r,rH,j2r,D2r,G2r,EM,L2e,O2r,V2r,tH,X2r,z2r,Q2r,CM,x2e,W2r,H2r,aH,U2r,J2r,Y2r,wM,$2e,K2r,Z2r,nH,evr,ovr,rvr,AM,k2e,tvr,avr,sH,nvr,svr,lvr,yM,S2e,ivr,dvr,lH,cvr,fvr,mvr,LM,R2e,gvr,hvr,iH,pvr,uvr,_vr,xM,P2e,bvr,vvr,dH,Fvr,Tvr,Mvr,$M,B2e,Evr,Cvr,cH,wvr,Avr,yvr,kM,I2e,Lvr,xvr,fH,$vr,kvr,Svr,SM,q2e,Rvr,Pvr,mH,Bvr,Ivr,qvr,RM,N2e,Nvr,jvr,gH,Dvr,Gvr,Ovr,PM,j2e,Vvr,Xvr,hH,zvr,Qvr,Wvr,BM,D2e,Hvr,Uvr,pH,Jvr,Yvr,Kvr,IM,tqe,dc,qM,G2e,uL,Zvr,O2e,eFr,aqe,nr,_L,oFr,cc,rFr,uH,tFr,aFr,_H,nFr,sFr,lFr,bL,iFr,V2e,dFr,cFr,fFr,Rt,vL,mFr,X2e,gFr,hFr,fc,pFr,z2e,uFr,_Fr,bH,bFr,vFr,FFr,NM,TFr,Rr,FL,MFr,Q2e,EFr,CFr,sn,wFr,W2e,AFr,yFr,H2e,LFr,xFr,U2e,$Fr,kFr,SFr,TL,jM,J2e,RFr,PFr,vH,BFr,IFr,qFr,DM,Y2e,NFr,jFr,FH,DFr,GFr,OFr,GM,nqe,mc,OM,K2e,ML,VFr,Z2e,XFr,sqe,sr,EL,zFr,gc,QFr,TH,WFr,HFr,MH,UFr,JFr,YFr,CL,KFr,eve,ZFr,e0r,o0r,Pt,wL,r0r,ove,t0r,a0r,hc,n0r,rve,s0r,l0r,EH,i0r,d0r,c0r,VM,f0r,Pr,AL,m0r,tve,g0r,h0r,ln,p0r,ave,u0r,_0r,nve,b0r,v0r,sve,F0r,T0r,M0r,lve,XM,ive,E0r,C0r,CH,w0r,A0r,y0r,zM,lqe,pc,QM,dve,yL,L0r,cve,x0r,iqe,lr,LL,$0r,uc,k0r,wH,S0r,R0r,AH,P0r,B0r,I0r,xL,q0r,fve,N0r,j0r,D0r,Bt,$L,G0r,mve,O0r,V0r,_c,X0r,gve,z0r,Q0r,yH,W0r,H0r,U0r,WM,J0r,Br,kL,Y0r,hve,K0r,Z0r,dn,eTr,pve,oTr,rTr,uve,tTr,aTr,_ve,nTr,sTr,lTr,de,HM,bve,iTr,dTr,LH,cTr,fTr,mTr,UM,vve,gTr,hTr,xH,pTr,uTr,_Tr,JM,Fve,bTr,vTr,$H,FTr,TTr,MTr,YM,Tve,ETr,CTr,kH,wTr,ATr,yTr,KM,Mve,LTr,xTr,SH,$Tr,kTr,STr,ZM,Eve,RTr,PTr,RH,BTr,ITr,qTr,e4,Cve,NTr,jTr,PH,DTr,GTr,OTr,o4,wve,VTr,XTr,BH,zTr,QTr,WTr,r4,Ave,HTr,UTr,IH,JTr,YTr,KTr,t4,yve,ZTr,e7r,qH,o7r,r7r,t7r,a4,Lve,a7r,n7r,NH,s7r,l7r,i7r,n4,xve,d7r,c7r,jH,f7r,m7r,g7r,s4,$ve,h7r,p7r,DH,u7r,_7r,b7r,l4,kve,v7r,F7r,GH,T7r,M7r,E7r,i4,Sve,C7r,w7r,OH,A7r,y7r,L7r,d4,Rve,x7r,$7r,VH,k7r,S7r,R7r,c4,Pve,P7r,B7r,XH,I7r,q7r,N7r,f4,Bve,j7r,D7r,zH,G7r,O7r,V7r,m4,Ive,X7r,z7r,QH,Q7r,W7r,H7r,g4,qve,U7r,J7r,WH,Y7r,K7r,Z7r,h4,dqe,bc,p4,Nve,SL,eMr,jve,oMr,cqe,ir,RL,rMr,vc,tMr,HH,aMr,nMr,UH,sMr,lMr,iMr,PL,dMr,Dve,cMr,fMr,mMr,It,BL,gMr,Gve,hMr,pMr,Fc,uMr,Ove,_Mr,bMr,JH,vMr,FMr,TMr,u4,MMr,Ir,IL,EMr,Vve,CMr,wMr,cn,AMr,Xve,yMr,LMr,zve,xMr,$Mr,Qve,kMr,SMr,RMr,ce,_4,Wve,PMr,BMr,YH,IMr,qMr,NMr,b4,Hve,jMr,DMr,KH,GMr,OMr,VMr,v4,Uve,XMr,zMr,ZH,QMr,WMr,HMr,F4,Jve,UMr,JMr,eU,YMr,KMr,ZMr,T4,Yve,e4r,o4r,oU,r4r,t4r,a4r,M4,Kve,n4r,s4r,rU,l4r,i4r,d4r,E4,Zve,c4r,f4r,tU,m4r,g4r,h4r,C4,eFe,p4r,u4r,aU,_4r,b4r,v4r,w4,oFe,F4r,T4r,nU,M4r,E4r,C4r,A4,rFe,w4r,A4r,sU,y4r,L4r,x4r,y4,tFe,$4r,k4r,lU,S4r,R4r,P4r,L4,aFe,B4r,I4r,iU,q4r,N4r,j4r,x4,nFe,D4r,G4r,dU,O4r,V4r,X4r,$4,sFe,z4r,Q4r,cU,W4r,H4r,U4r,k4,lFe,J4r,Y4r,fU,K4r,Z4r,eEr,S4,iFe,oEr,rEr,mU,tEr,aEr,nEr,R4,dFe,sEr,lEr,gU,iEr,dEr,cEr,P4,cFe,fEr,mEr,hU,gEr,hEr,pEr,B4,fFe,uEr,_Er,pU,bEr,vEr,FEr,I4,mFe,TEr,MEr,uU,EEr,CEr,wEr,q4,fqe,Tc,N4,gFe,qL,AEr,hFe,yEr,mqe,dr,NL,LEr,Mc,xEr,_U,$Er,kEr,bU,SEr,REr,PEr,jL,BEr,pFe,IEr,qEr,NEr,qt,DL,jEr,uFe,DEr,GEr,Ec,OEr,_Fe,VEr,XEr,vU,zEr,QEr,WEr,j4,HEr,qr,GL,UEr,bFe,JEr,YEr,fn,KEr,vFe,ZEr,e5r,FFe,o5r,r5r,TFe,t5r,a5r,n5r,MFe,D4,EFe,s5r,l5r,FU,i5r,d5r,c5r,G4,gqe,Cc,O4,CFe,OL,f5r,wFe,m5r,hqe,cr,VL,g5r,wc,h5r,TU,p5r,u5r,MU,_5r,b5r,v5r,XL,F5r,AFe,T5r,M5r,E5r,Nt,zL,C5r,yFe,w5r,A5r,Ac,y5r,LFe,L5r,x5r,EU,$5r,k5r,S5r,V4,R5r,Nr,QL,P5r,xFe,B5r,I5r,mn,q5r,$Fe,N5r,j5r,kFe,D5r,G5r,SFe,O5r,V5r,X5r,RFe,X4,PFe,z5r,Q5r,CU,W5r,H5r,U5r,z4,pqe,yc,Q4,BFe,WL,J5r,IFe,Y5r,uqe,fr,HL,K5r,Lc,Z5r,wU,eCr,oCr,AU,rCr,tCr,aCr,UL,nCr,qFe,sCr,lCr,iCr,jt,JL,dCr,NFe,cCr,fCr,xc,mCr,jFe,gCr,hCr,yU,pCr,uCr,_Cr,W4,bCr,jr,YL,vCr,DFe,FCr,TCr,gn,MCr,GFe,ECr,CCr,OFe,wCr,ACr,VFe,yCr,LCr,xCr,ee,H4,XFe,$Cr,kCr,LU,SCr,RCr,PCr,U4,zFe,BCr,ICr,xU,qCr,NCr,jCr,J4,QFe,DCr,GCr,$U,OCr,VCr,XCr,Y4,WFe,zCr,QCr,kU,WCr,HCr,UCr,K4,HFe,JCr,YCr,SU,KCr,ZCr,e3r,Z4,UFe,o3r,r3r,RU,t3r,a3r,n3r,eE,JFe,s3r,l3r,PU,i3r,d3r,c3r,oE,YFe,f3r,m3r,BU,g3r,h3r,p3r,rE,KFe,u3r,_3r,IU,b3r,v3r,F3r,tE,ZFe,T3r,M3r,qU,E3r,C3r,w3r,aE,e0e,A3r,y3r,NU,L3r,x3r,$3r,nE,o0e,k3r,S3r,jU,R3r,P3r,B3r,sE,r0e,I3r,q3r,DU,N3r,j3r,D3r,lE,t0e,G3r,O3r,GU,V3r,X3r,z3r,iE,a0e,Q3r,W3r,OU,H3r,U3r,J3r,dE,n0e,Y3r,K3r,VU,Z3r,ewr,owr,cE,s0e,rwr,twr,XU,awr,nwr,swr,fE,l0e,lwr,iwr,zU,dwr,cwr,fwr,mE,i0e,mwr,gwr,QU,hwr,pwr,uwr,gE,d0e,_wr,bwr,WU,vwr,Fwr,Twr,hE,c0e,Mwr,Ewr,HU,Cwr,wwr,Awr,pE,f0e,ywr,Lwr,UU,xwr,$wr,kwr,uE,m0e,Swr,Rwr,JU,Pwr,Bwr,Iwr,_E,g0e,qwr,Nwr,YU,jwr,Dwr,Gwr,bE,h0e,Owr,Vwr,KU,Xwr,zwr,Qwr,vE,p0e,Wwr,Hwr,ZU,Uwr,Jwr,Ywr,FE,_qe,$c,TE,u0e,KL,Kwr,_0e,Zwr,bqe,mr,ZL,eAr,kc,oAr,eJ,rAr,tAr,oJ,aAr,nAr,sAr,ex,lAr,b0e,iAr,dAr,cAr,Dt,ox,fAr,v0e,mAr,gAr,Sc,hAr,F0e,pAr,uAr,rJ,_Ar,bAr,vAr,ME,FAr,Dr,rx,TAr,T0e,MAr,EAr,hn,CAr,M0e,wAr,AAr,E0e,yAr,LAr,C0e,xAr,$Ar,kAr,Le,EE,w0e,SAr,RAr,tJ,PAr,BAr,IAr,CE,A0e,qAr,NAr,aJ,jAr,DAr,GAr,wE,y0e,OAr,VAr,nJ,XAr,zAr,QAr,AE,L0e,WAr,HAr,sJ,UAr,JAr,YAr,yE,x0e,KAr,ZAr,lJ,e6r,o6r,r6r,LE,$0e,t6r,a6r,iJ,n6r,s6r,l6r,xE,k0e,i6r,d6r,dJ,c6r,f6r,m6r,$E,S0e,g6r,h6r,cJ,p6r,u6r,_6r,kE,R0e,b6r,v6r,fJ,F6r,T6r,M6r,SE,P0e,E6r,C6r,mJ,w6r,A6r,y6r,RE,vqe,Rc,PE,B0e,tx,L6r,I0e,x6r,Fqe,gr,ax,$6r,Pc,k6r,gJ,S6r,R6r,hJ,P6r,B6r,I6r,nx,q6r,q0e,N6r,j6r,D6r,Gt,sx,G6r,N0e,O6r,V6r,Bc,X6r,j0e,z6r,Q6r,pJ,W6r,H6r,U6r,BE,J6r,Gr,lx,Y6r,D0e,K6r,Z6r,pn,eyr,G0e,oyr,ryr,O0e,tyr,ayr,V0e,nyr,syr,lyr,Me,IE,X0e,iyr,dyr,uJ,cyr,fyr,myr,qE,z0e,gyr,hyr,_J,pyr,uyr,_yr,NE,Q0e,byr,vyr,bJ,Fyr,Tyr,Myr,jE,W0e,Eyr,Cyr,vJ,wyr,Ayr,yyr,DE,H0e,Lyr,xyr,FJ,$yr,kyr,Syr,GE,U0e,Ryr,Pyr,TJ,Byr,Iyr,qyr,OE,J0e,Nyr,jyr,MJ,Dyr,Gyr,Oyr,VE,Y0e,Vyr,Xyr,EJ,zyr,Qyr,Wyr,XE,K0e,Hyr,Uyr,CJ,Jyr,Yyr,Kyr,zE,Z0e,Zyr,eLr,wJ,oLr,rLr,tLr,QE,eTe,aLr,nLr,AJ,sLr,lLr,iLr,WE,oTe,dLr,cLr,yJ,fLr,mLr,gLr,HE,Tqe,Ic,UE,rTe,ix,hLr,tTe,pLr,Mqe,hr,dx,uLr,qc,_Lr,LJ,bLr,vLr,xJ,FLr,TLr,MLr,cx,ELr,aTe,CLr,wLr,ALr,Ot,fx,yLr,nTe,LLr,xLr,Nc,$Lr,sTe,kLr,SLr,$J,RLr,PLr,BLr,JE,ILr,Or,mx,qLr,lTe,NLr,jLr,un,DLr,iTe,GLr,OLr,dTe,VLr,XLr,cTe,zLr,QLr,WLr,xe,YE,fTe,HLr,ULr,kJ,JLr,YLr,KLr,KE,mTe,ZLr,exr,SJ,oxr,rxr,txr,ZE,gTe,axr,nxr,RJ,sxr,lxr,ixr,e5,hTe,dxr,cxr,PJ,fxr,mxr,gxr,o5,pTe,hxr,pxr,BJ,uxr,_xr,bxr,r5,uTe,vxr,Fxr,IJ,Txr,Mxr,Exr,t5,_Te,Cxr,wxr,qJ,Axr,yxr,Lxr,a5,bTe,xxr,$xr,NJ,kxr,Sxr,Rxr,n5,vTe,Pxr,Bxr,jJ,Ixr,qxr,Nxr,s5,FTe,jxr,Dxr,DJ,Gxr,Oxr,Vxr,l5,Eqe,jc,i5,TTe,gx,Xxr,MTe,zxr,Cqe,pr,hx,Qxr,Dc,Wxr,GJ,Hxr,Uxr,OJ,Jxr,Yxr,Kxr,px,Zxr,ETe,e9r,o9r,r9r,Vt,ux,t9r,CTe,a9r,n9r,Gc,s9r,wTe,l9r,i9r,VJ,d9r,c9r,f9r,d5,m9r,Vr,_x,g9r,ATe,h9r,p9r,_n,u9r,yTe,_9r,b9r,LTe,v9r,F9r,xTe,T9r,M9r,E9r,Se,c5,$Te,C9r,w9r,XJ,A9r,y9r,L9r,f5,kTe,x9r,$9r,zJ,k9r,S9r,R9r,m5,STe,P9r,B9r,QJ,I9r,q9r,N9r,g5,RTe,j9r,D9r,WJ,G9r,O9r,V9r,h5,PTe,X9r,z9r,HJ,Q9r,W9r,H9r,p5,BTe,U9r,J9r,UJ,Y9r,K9r,Z9r,u5,ITe,e$r,o$r,JJ,r$r,t$r,a$r,_5,qTe,n$r,s$r,YJ,l$r,i$r,d$r,b5,NTe,c$r,f$r,KJ,m$r,g$r,h$r,v5,wqe,Oc,F5,jTe,bx,p$r,DTe,u$r,Aqe,ur,vx,_$r,Vc,b$r,ZJ,v$r,F$r,eY,T$r,M$r,E$r,Fx,C$r,GTe,w$r,A$r,y$r,Xt,Tx,L$r,OTe,x$r,$$r,Xc,k$r,VTe,S$r,R$r,oY,P$r,B$r,I$r,T5,q$r,Xr,Mx,N$r,XTe,j$r,D$r,bn,G$r,zTe,O$r,V$r,QTe,X$r,z$r,WTe,Q$r,W$r,H$r,$e,M5,HTe,U$r,J$r,rY,Y$r,K$r,Z$r,E5,UTe,ekr,okr,tY,rkr,tkr,akr,C5,JTe,nkr,skr,aY,lkr,ikr,dkr,w5,YTe,ckr,fkr,nY,mkr,gkr,hkr,A5,KTe,pkr,ukr,sY,_kr,bkr,vkr,y5,ZTe,Fkr,Tkr,lY,Mkr,Ekr,Ckr,L5,e7e,wkr,Akr,iY,ykr,Lkr,xkr,x5,o7e,$kr,kkr,dY,Skr,Rkr,Pkr,$5,r7e,Bkr,Ikr,cY,qkr,Nkr,jkr,k5,t7e,Dkr,Gkr,fY,Okr,Vkr,Xkr,S5,yqe,zc,R5,a7e,Ex,zkr,n7e,Qkr,Lqe,_r,Cx,Wkr,Qc,Hkr,mY,Ukr,Jkr,gY,Ykr,Kkr,Zkr,wx,eSr,s7e,oSr,rSr,tSr,zt,Ax,aSr,l7e,nSr,sSr,Wc,lSr,i7e,iSr,dSr,hY,cSr,fSr,mSr,P5,gSr,zr,yx,hSr,d7e,pSr,uSr,vn,_Sr,c7e,bSr,vSr,f7e,FSr,TSr,m7e,MSr,ESr,CSr,ke,B5,g7e,wSr,ASr,pY,ySr,LSr,xSr,I5,h7e,$Sr,kSr,uY,SSr,RSr,PSr,q5,p7e,BSr,ISr,_Y,qSr,NSr,jSr,N5,u7e,DSr,GSr,bY,OSr,VSr,XSr,j5,_7e,zSr,QSr,vY,WSr,HSr,USr,D5,b7e,JSr,YSr,FY,KSr,ZSr,eRr,G5,v7e,oRr,rRr,TY,tRr,aRr,nRr,O5,F7e,sRr,lRr,MY,iRr,dRr,cRr,V5,T7e,fRr,mRr,EY,gRr,hRr,pRr,X5,M7e,uRr,_Rr,CY,bRr,vRr,FRr,z5,xqe,Hc,Q5,E7e,Lx,TRr,C7e,MRr,$qe,br,xx,ERr,Uc,CRr,wY,wRr,ARr,AY,yRr,LRr,xRr,$x,$Rr,w7e,kRr,SRr,RRr,Qt,kx,PRr,A7e,BRr,IRr,Jc,qRr,y7e,NRr,jRr,yY,DRr,GRr,ORr,W5,VRr,Qr,Sx,XRr,L7e,zRr,QRr,Fn,WRr,x7e,HRr,URr,$7e,JRr,YRr,k7e,KRr,ZRr,ePr,Ge,H5,S7e,oPr,rPr,LY,tPr,aPr,nPr,U5,R7e,sPr,lPr,xY,iPr,dPr,cPr,J5,P7e,fPr,mPr,$Y,gPr,hPr,pPr,Y5,B7e,uPr,_Pr,kY,bPr,vPr,FPr,K5,I7e,TPr,MPr,SY,EPr,CPr,wPr,Z5,q7e,APr,yPr,RY,LPr,xPr,$Pr,eC,N7e,kPr,SPr,PY,RPr,PPr,BPr,oC,j7e,IPr,qPr,BY,NPr,jPr,DPr,rC,kqe,Yc,tC,D7e,Rx,GPr,G7e,OPr,Sqe,vr,Px,VPr,Kc,XPr,IY,zPr,QPr,qY,WPr,HPr,UPr,Bx,JPr,O7e,YPr,KPr,ZPr,Wt,Ix,eBr,V7e,oBr,rBr,Zc,tBr,X7e,aBr,nBr,NY,sBr,lBr,iBr,aC,dBr,Wr,qx,cBr,z7e,fBr,mBr,Tn,gBr,Q7e,hBr,pBr,W7e,uBr,_Br,H7e,bBr,vBr,FBr,Oe,nC,U7e,TBr,MBr,jY,EBr,CBr,wBr,sC,J7e,ABr,yBr,DY,LBr,xBr,$Br,lC,Y7e,kBr,SBr,GY,RBr,PBr,BBr,iC,K7e,IBr,qBr,OY,NBr,jBr,DBr,dC,Z7e,GBr,OBr,VY,VBr,XBr,zBr,cC,eMe,QBr,WBr,XY,HBr,UBr,JBr,fC,oMe,YBr,KBr,zY,ZBr,eIr,oIr,mC,rMe,rIr,tIr,QY,aIr,nIr,sIr,gC,Rqe,ef,hC,tMe,Nx,lIr,aMe,iIr,Pqe,Fr,jx,dIr,of,cIr,WY,fIr,mIr,HY,gIr,hIr,pIr,Dx,uIr,nMe,_Ir,bIr,vIr,Ht,Gx,FIr,sMe,TIr,MIr,rf,EIr,lMe,CIr,wIr,UY,AIr,yIr,LIr,pC,xIr,Hr,Ox,$Ir,iMe,kIr,SIr,Mn,RIr,dMe,PIr,BIr,cMe,IIr,qIr,fMe,NIr,jIr,DIr,mMe,uC,gMe,GIr,OIr,JY,VIr,XIr,zIr,_C,Bqe,tf,bC,hMe,Vx,QIr,pMe,WIr,Iqe,Tr,Xx,HIr,af,UIr,YY,JIr,YIr,KY,KIr,ZIr,eqr,zx,oqr,uMe,rqr,tqr,aqr,Ut,Qx,nqr,_Me,sqr,lqr,nf,iqr,bMe,dqr,cqr,ZY,fqr,mqr,gqr,vC,hqr,Ur,Wx,pqr,vMe,uqr,_qr,En,bqr,FMe,vqr,Fqr,TMe,Tqr,Mqr,MMe,Eqr,Cqr,wqr,Hx,FC,EMe,Aqr,yqr,eK,Lqr,xqr,$qr,TC,CMe,kqr,Sqr,oK,Rqr,Pqr,Bqr,MC,qqe,sf,EC,wMe,Ux,Iqr,AMe,qqr,Nqe,Mr,Jx,Nqr,lf,jqr,rK,Dqr,Gqr,tK,Oqr,Vqr,Xqr,Yx,zqr,yMe,Qqr,Wqr,Hqr,Jt,Kx,Uqr,LMe,Jqr,Yqr,df,Kqr,xMe,Zqr,eNr,aK,oNr,rNr,tNr,CC,aNr,Jr,Zx,nNr,$Me,sNr,lNr,Cn,iNr,kMe,dNr,cNr,SMe,fNr,mNr,RMe,gNr,hNr,pNr,PMe,wC,BMe,uNr,_Nr,nK,bNr,vNr,FNr,AC,jqe;return d=new oe({}),Ma=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Uw=new oe({}),Jw=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),bf=new TNr({props:{warning:!0,$$slots:{default:[Hwt]},$$scope:{ctx:A}}}),Yw=new oe({}),Kw=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/configuration_auto.py#L566"}}),oA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/configuration_auto.py#L589"}}),ug=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Uwt]},$$scope:{ctx:A}}}),rA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/configuration_auto.py#L711"}}),tA=new oe({}),aA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/tokenization_auto.py#L378"}}),lA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17088/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/tokenization_auto.py#L392"}}),Hg=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Jwt]},$$scope:{ctx:A}}}),iA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/tokenization_auto.py#L588"}}),dA=new oe({}),cA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),gA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17088/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),Th=new TNr({props:{$$slots:{default:[Ywt]},$$scope:{ctx:A}}}),Mh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Kwt]},$$scope:{ctx:A}}}),hA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),pA=new oe({}),uA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/processing_auto.py#L76"}}),vA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/processing_auto.py#L90"}}),jh=new TNr({props:{$$slots:{default:[Zwt]},$$scope:{ctx:A}}}),Dh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[eAt]},$$scope:{ctx:A}}}),FA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/processing_auto.py#L243"}}),TA=new oe({}),MA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L719"}}),CA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Vh=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[oAt]},$$scope:{ctx:A}}}),wA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Su=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[rAt]},$$scope:{ctx:A}}}),AA=new oe({}),yA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L726"}}),xA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Pu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[tAt]},$$scope:{ctx:A}}}),$A=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),T_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[aAt]},$$scope:{ctx:A}}}),kA=new oe({}),SA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L741"}}),PA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),E_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[nAt]},$$scope:{ctx:A}}}),BA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),l1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[sAt]},$$scope:{ctx:A}}}),IA=new oe({}),qA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L748"}}),jA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),d1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[lAt]},$$scope:{ctx:A}}}),DA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Q1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[iAt]},$$scope:{ctx:A}}}),GA=new oe({}),OA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L755"}}),XA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),H1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[dAt]},$$scope:{ctx:A}}}),zA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),g8=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[cAt]},$$scope:{ctx:A}}}),QA=new oe({}),WA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L764"}}),UA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),p8=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[fAt]},$$scope:{ctx:A}}}),JA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),cb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[mAt]},$$scope:{ctx:A}}}),YA=new oe({}),KA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L798"}}),e6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),mb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[gAt]},$$scope:{ctx:A}}}),o6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Vb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[hAt]},$$scope:{ctx:A}}}),r6=new oe({}),t6=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L805"}}),n6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),zb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[pAt]},$$scope:{ctx:A}}}),s6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Kb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[uAt]},$$scope:{ctx:A}}}),l6=new oe({}),i6=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L791"}}),c6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),e2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[_At]},$$scope:{ctx:A}}}),f6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),B2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[bAt]},$$scope:{ctx:A}}}),m6=new oe({}),g6=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L773"}}),p6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),q2=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[vAt]},$$scope:{ctx:A}}}),u6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Cv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[FAt]},$$scope:{ctx:A}}}),_6=new oe({}),b6=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L780"}}),F6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Av=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[TAt]},$$scope:{ctx:A}}}),T6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),xv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[MAt]},$$scope:{ctx:A}}}),M6=new oe({}),E6=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L814"}}),w6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),kv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[EAt]},$$scope:{ctx:A}}}),A6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[CAt]},$$scope:{ctx:A}}}),y6=new oe({}),L6=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L853"}}),$6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[wAt]},$$scope:{ctx:A}}}),k6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Uv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[AAt]},$$scope:{ctx:A}}}),S6=new oe({}),R6=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L860"}}),B6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Yv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[yAt]},$$scope:{ctx:A}}}),I6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),lF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[LAt]},$$scope:{ctx:A}}}),q6=new oe({}),N6=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L883"}}),D6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),dF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[xAt]},$$scope:{ctx:A}}}),G6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),pF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[$At]},$$scope:{ctx:A}}}),O6=new oe({}),V6=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L867"}}),z6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),_F=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[kAt]},$$scope:{ctx:A}}}),Q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),yF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[SAt]},$$scope:{ctx:A}}}),W6=new oe({}),H6=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L874"}}),J6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),xF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[RAt]},$$scope:{ctx:A}}}),Y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),RF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[PAt]},$$scope:{ctx:A}}}),Z6=new oe({}),ey=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L892"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),BF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[BAt]},$$scope:{ctx:A}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),GF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[IAt]},$$scope:{ctx:A}}}),ay=new oe({}),ny=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L899"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),VF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[qAt]},$$scope:{ctx:A}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[NAt]},$$scope:{ctx:A}}}),dy=new oe({}),cy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L846"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[jAt]},$$scope:{ctx:A}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),e0=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[DAt]},$$scope:{ctx:A}}}),py=new oe({}),uy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L821"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[GAt]},$$scope:{ctx:A}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[OAt]},$$scope:{ctx:A}}}),Fy=new oe({}),Ty=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L828"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),l0=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[VAt]},$$scope:{ctx:A}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),g0=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[XAt]},$$scope:{ctx:A}}}),wy=new oe({}),Ay=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L837"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),p0=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[zAt]},$$scope:{ctx:A}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),b0=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[QAt]},$$scope:{ctx:A}}}),$y=new oe({}),ky=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L384"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),F0=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[WAt]},$$scope:{ctx:A}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),mT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[HAt]},$$scope:{ctx:A}}}),By=new oe({}),Iy=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L391"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[UAt]},$$scope:{ctx:A}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),NT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[JAt]},$$scope:{ctx:A}}}),Dy=new oe({}),Gy=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),DT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[YAt]},$$scope:{ctx:A}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),ZT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[KAt]},$$scope:{ctx:A}}}),zy=new oe({}),Qy=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),o7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[ZAt]},$$scope:{ctx:A}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),n7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[e6t]},$$scope:{ctx:A}}}),Jy=new oe({}),Yy=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L429"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),l7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[o6t]},$$scope:{ctx:A}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),L7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[r6t]},$$scope:{ctx:A}}}),oL=new oe({}),rL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L436"}}),aL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),$7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[t6t]},$$scope:{ctx:A}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),G7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[a6t]},$$scope:{ctx:A}}}),sL=new oe({}),lL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L445"}}),dL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),V7=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[n6t]},$$scope:{ctx:A}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),uM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[s6t]},$$scope:{ctx:A}}}),fL=new oe({}),mL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L481"}}),hL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),bM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[l6t]},$$scope:{ctx:A}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),IM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[i6t]},$$scope:{ctx:A}}}),uL=new oe({}),_L=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L488"}}),vL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),NM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[d6t]},$$scope:{ctx:A}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),GM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[c6t]},$$scope:{ctx:A}}}),ML=new oe({}),EL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L461"}}),wL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),VM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[f6t]},$$scope:{ctx:A}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),zM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[m6t]},$$scope:{ctx:A}}}),yL=new oe({}),LL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),$L=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),WM=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[g6t]},$$scope:{ctx:A}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[h6t]},$$scope:{ctx:A}}}),SL=new oe({}),RL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),BL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[p6t]},$$scope:{ctx:A}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),q4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[u6t]},$$scope:{ctx:A}}}),qL=new oe({}),NL=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L422"}}),DL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),j4=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[_6t]},$$scope:{ctx:A}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),G4=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[b6t]},$$scope:{ctx:A}}}),OL=new oe({}),VL=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L497"}}),zL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),V4=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[v6t]},$$scope:{ctx:A}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[F6t]},$$scope:{ctx:A}}}),WL=new oe({}),HL=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),JL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),W4=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[T6t]},$$scope:{ctx:A}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),FE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[M6t]},$$scope:{ctx:A}}}),KL=new oe({}),ZL=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),ME=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[E6t]},$$scope:{ctx:A}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),RE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[C6t]},$$scope:{ctx:A}}}),tx=new oe({}),ax=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[w6t]},$$scope:{ctx:A}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),HE=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[A6t]},$$scope:{ctx:A}}}),ix=new oe({}),dx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),JE=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[y6t]},$$scope:{ctx:A}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),l5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[L6t]},$$scope:{ctx:A}}}),gx=new oe({}),hx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),d5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[x6t]},$$scope:{ctx:A}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),v5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[$6t]},$$scope:{ctx:A}}}),bx=new oe({}),vx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),T5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[k6t]},$$scope:{ctx:A}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),S5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[S6t]},$$scope:{ctx:A}}}),Ex=new oe({}),Cx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),P5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[R6t]},$$scope:{ctx:A}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[P6t]},$$scope:{ctx:A}}}),Lx=new oe({}),xx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[B6t]},$$scope:{ctx:A}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[I6t]},$$scope:{ctx:A}}}),Rx=new oe({}),Px=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[q6t]},$$scope:{ctx:A}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),gC=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[N6t]},$$scope:{ctx:A}}}),Nx=new oe({}),jx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[j6t]},$$scope:{ctx:A}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),_C=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[D6t]},$$scope:{ctx:A}}}),Vx=new oe({}),Xx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),vC=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[G6t]},$$scope:{ctx:A}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[O6t]},$$scope:{ctx:A}}}),Ux=new oe({}),Jx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[V6t]},$$scope:{ctx:A}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[X6t]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ii=o("Auto Classes"),gf=l(),et=a("p"),di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=a("code"),zw=o("from_pretrained()"),hf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ne=l(),Xe=a("p"),fi=o("Instantiating one of "),An=a("a"),Qw=o("AutoConfig"),yn=o(", "),Ln=a("a"),Ww=o("AutoModel"),mi=o(`, and
`),xn=a("a"),Hw=o("AutoTokenizer"),gi=o(" will directly create a class of the relevant architecture. For instance"),pf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),g$=o("will create a model that is an instance of "),hi=a("a"),h$=o("BertModel"),p$=o("."),Eo=l(),Ea=a("p"),u$=o("There is one class of "),uf=a("code"),_$=o("AutoModel"),Wje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),IBe=l(),pi=a("h2"),_f=a("a"),ZZ=a("span"),F(Uw.$$.fragment),Hje=l(),eee=a("span"),Uje=o("Extending the Auto Classes"),qBe=l(),$n=a("p"),Jje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),oee=a("code"),Yje=o("NewModel"),Kje=o(", make sure you have a "),ree=a("code"),Zje=o("NewModelConfig"),eDe=o(` then you can add those to the auto
classes like this:`),NBe=l(),F(Jw.$$.fragment),jBe=l(),b$=a("p"),oDe=o("You will then be able to use the auto classes like you would usually do!"),DBe=l(),F(bf.$$.fragment),GBe=l(),ui=a("h2"),vf=a("a"),tee=a("span"),F(Yw.$$.fragment),rDe=l(),aee=a("span"),tDe=o("AutoConfig"),OBe=l(),Co=a("div"),F(Kw.$$.fragment),aDe=l(),Zw=a("p"),nDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),v$=a("a"),sDe=o("from_pretrained()"),lDe=o(" class method."),iDe=l(),eA=a("p"),dDe=o("This class cannot be instantiated directly using "),nee=a("code"),cDe=o("__init__()"),fDe=o(" (throws an error)."),mDe=l(),Er=a("div"),F(oA.$$.fragment),gDe=l(),see=a("p"),hDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),pDe=l(),_i=a("p"),uDe=o("The configuration class to instantiate is selected based on the "),lee=a("code"),_De=o("model_type"),bDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),iee=a("code"),vDe=o("pretrained_model_name_or_path"),FDe=o(":"),TDe=l(),y=a("ul"),Ff=a("li"),dee=a("strong"),MDe=o("albert"),EDe=o(" \u2014 "),F$=a("a"),CDe=o("AlbertConfig"),wDe=o(" (ALBERT model)"),ADe=l(),Tf=a("li"),cee=a("strong"),yDe=o("bart"),LDe=o(" \u2014 "),T$=a("a"),xDe=o("BartConfig"),$De=o(" (BART model)"),kDe=l(),Mf=a("li"),fee=a("strong"),SDe=o("beit"),RDe=o(" \u2014 "),M$=a("a"),PDe=o("BeitConfig"),BDe=o(" (BEiT model)"),IDe=l(),Ef=a("li"),mee=a("strong"),qDe=o("bert"),NDe=o(" \u2014 "),E$=a("a"),jDe=o("BertConfig"),DDe=o(" (BERT model)"),GDe=l(),Cf=a("li"),gee=a("strong"),ODe=o("bert-generation"),VDe=o(" \u2014 "),C$=a("a"),XDe=o("BertGenerationConfig"),zDe=o(" (Bert Generation model)"),QDe=l(),wf=a("li"),hee=a("strong"),WDe=o("big_bird"),HDe=o(" \u2014 "),w$=a("a"),UDe=o("BigBirdConfig"),JDe=o(" (BigBird model)"),YDe=l(),Af=a("li"),pee=a("strong"),KDe=o("bigbird_pegasus"),ZDe=o(" \u2014 "),A$=a("a"),eGe=o("BigBirdPegasusConfig"),oGe=o(" (BigBirdPegasus model)"),rGe=l(),yf=a("li"),uee=a("strong"),tGe=o("blenderbot"),aGe=o(" \u2014 "),y$=a("a"),nGe=o("BlenderbotConfig"),sGe=o(" (Blenderbot model)"),lGe=l(),Lf=a("li"),_ee=a("strong"),iGe=o("blenderbot-small"),dGe=o(" \u2014 "),L$=a("a"),cGe=o("BlenderbotSmallConfig"),fGe=o(" (BlenderbotSmall model)"),mGe=l(),xf=a("li"),bee=a("strong"),gGe=o("camembert"),hGe=o(" \u2014 "),x$=a("a"),pGe=o("CamembertConfig"),uGe=o(" (CamemBERT model)"),_Ge=l(),$f=a("li"),vee=a("strong"),bGe=o("canine"),vGe=o(" \u2014 "),$$=a("a"),FGe=o("CanineConfig"),TGe=o(" (Canine model)"),MGe=l(),kf=a("li"),Fee=a("strong"),EGe=o("clip"),CGe=o(" \u2014 "),k$=a("a"),wGe=o("CLIPConfig"),AGe=o(" (CLIP model)"),yGe=l(),Sf=a("li"),Tee=a("strong"),LGe=o("convbert"),xGe=o(" \u2014 "),S$=a("a"),$Ge=o("ConvBertConfig"),kGe=o(" (ConvBERT model)"),SGe=l(),Rf=a("li"),Mee=a("strong"),RGe=o("convnext"),PGe=o(" \u2014 "),R$=a("a"),BGe=o("ConvNextConfig"),IGe=o(" (ConvNext model)"),qGe=l(),Pf=a("li"),Eee=a("strong"),NGe=o("ctrl"),jGe=o(" \u2014 "),P$=a("a"),DGe=o("CTRLConfig"),GGe=o(" (CTRL model)"),OGe=l(),Bf=a("li"),Cee=a("strong"),VGe=o("data2vec-audio"),XGe=o(" \u2014 "),B$=a("a"),zGe=o("Data2VecAudioConfig"),QGe=o(" (Data2VecAudio model)"),WGe=l(),If=a("li"),wee=a("strong"),HGe=o("data2vec-text"),UGe=o(" \u2014 "),I$=a("a"),JGe=o("Data2VecTextConfig"),YGe=o(" (Data2VecText model)"),KGe=l(),qf=a("li"),Aee=a("strong"),ZGe=o("data2vec-vision"),eOe=o(" \u2014 "),q$=a("a"),oOe=o("Data2VecVisionConfig"),rOe=o(" (Data2VecVision model)"),tOe=l(),Nf=a("li"),yee=a("strong"),aOe=o("deberta"),nOe=o(" \u2014 "),N$=a("a"),sOe=o("DebertaConfig"),lOe=o(" (DeBERTa model)"),iOe=l(),jf=a("li"),Lee=a("strong"),dOe=o("deberta-v2"),cOe=o(" \u2014 "),j$=a("a"),fOe=o("DebertaV2Config"),mOe=o(" (DeBERTa-v2 model)"),gOe=l(),Df=a("li"),xee=a("strong"),hOe=o("decision_transformer"),pOe=o(" \u2014 "),D$=a("a"),uOe=o("DecisionTransformerConfig"),_Oe=o(" (Decision Transformer model)"),bOe=l(),Gf=a("li"),$ee=a("strong"),vOe=o("deit"),FOe=o(" \u2014 "),G$=a("a"),TOe=o("DeiTConfig"),MOe=o(" (DeiT model)"),EOe=l(),Of=a("li"),kee=a("strong"),COe=o("detr"),wOe=o(" \u2014 "),O$=a("a"),AOe=o("DetrConfig"),yOe=o(" (DETR model)"),LOe=l(),Vf=a("li"),See=a("strong"),xOe=o("distilbert"),$Oe=o(" \u2014 "),V$=a("a"),kOe=o("DistilBertConfig"),SOe=o(" (DistilBERT model)"),ROe=l(),Xf=a("li"),Ree=a("strong"),POe=o("dpr"),BOe=o(" \u2014 "),X$=a("a"),IOe=o("DPRConfig"),qOe=o(" (DPR model)"),NOe=l(),zf=a("li"),Pee=a("strong"),jOe=o("dpt"),DOe=o(" \u2014 "),z$=a("a"),GOe=o("DPTConfig"),OOe=o(" (DPT model)"),VOe=l(),Qf=a("li"),Bee=a("strong"),XOe=o("electra"),zOe=o(" \u2014 "),Q$=a("a"),QOe=o("ElectraConfig"),WOe=o(" (ELECTRA model)"),HOe=l(),Wf=a("li"),Iee=a("strong"),UOe=o("encoder-decoder"),JOe=o(" \u2014 "),W$=a("a"),YOe=o("EncoderDecoderConfig"),KOe=o(" (Encoder decoder model)"),ZOe=l(),Hf=a("li"),qee=a("strong"),eVe=o("flaubert"),oVe=o(" \u2014 "),H$=a("a"),rVe=o("FlaubertConfig"),tVe=o(" (FlauBERT model)"),aVe=l(),Uf=a("li"),Nee=a("strong"),nVe=o("fnet"),sVe=o(" \u2014 "),U$=a("a"),lVe=o("FNetConfig"),iVe=o(" (FNet model)"),dVe=l(),Jf=a("li"),jee=a("strong"),cVe=o("fsmt"),fVe=o(" \u2014 "),J$=a("a"),mVe=o("FSMTConfig"),gVe=o(" (FairSeq Machine-Translation model)"),hVe=l(),Yf=a("li"),Dee=a("strong"),pVe=o("funnel"),uVe=o(" \u2014 "),Y$=a("a"),_Ve=o("FunnelConfig"),bVe=o(" (Funnel Transformer model)"),vVe=l(),Kf=a("li"),Gee=a("strong"),FVe=o("glpn"),TVe=o(" \u2014 "),K$=a("a"),MVe=o("GLPNConfig"),EVe=o(" (GLPN model)"),CVe=l(),Zf=a("li"),Oee=a("strong"),wVe=o("gpt2"),AVe=o(" \u2014 "),Z$=a("a"),yVe=o("GPT2Config"),LVe=o(" (OpenAI GPT-2 model)"),xVe=l(),em=a("li"),Vee=a("strong"),$Ve=o("gpt_neo"),kVe=o(" \u2014 "),ek=a("a"),SVe=o("GPTNeoConfig"),RVe=o(" (GPT Neo model)"),PVe=l(),om=a("li"),Xee=a("strong"),BVe=o("gptj"),IVe=o(" \u2014 "),ok=a("a"),qVe=o("GPTJConfig"),NVe=o(" (GPT-J model)"),jVe=l(),rm=a("li"),zee=a("strong"),DVe=o("hubert"),GVe=o(" \u2014 "),rk=a("a"),OVe=o("HubertConfig"),VVe=o(" (Hubert model)"),XVe=l(),tm=a("li"),Qee=a("strong"),zVe=o("ibert"),QVe=o(" \u2014 "),tk=a("a"),WVe=o("IBertConfig"),HVe=o(" (I-BERT model)"),UVe=l(),am=a("li"),Wee=a("strong"),JVe=o("imagegpt"),YVe=o(" \u2014 "),ak=a("a"),KVe=o("ImageGPTConfig"),ZVe=o(" (ImageGPT model)"),eXe=l(),nm=a("li"),Hee=a("strong"),oXe=o("layoutlm"),rXe=o(" \u2014 "),nk=a("a"),tXe=o("LayoutLMConfig"),aXe=o(" (LayoutLM model)"),nXe=l(),sm=a("li"),Uee=a("strong"),sXe=o("layoutlmv2"),lXe=o(" \u2014 "),sk=a("a"),iXe=o("LayoutLMv2Config"),dXe=o(" (LayoutLMv2 model)"),cXe=l(),lm=a("li"),Jee=a("strong"),fXe=o("led"),mXe=o(" \u2014 "),lk=a("a"),gXe=o("LEDConfig"),hXe=o(" (LED model)"),pXe=l(),im=a("li"),Yee=a("strong"),uXe=o("longformer"),_Xe=o(" \u2014 "),ik=a("a"),bXe=o("LongformerConfig"),vXe=o(" (Longformer model)"),FXe=l(),dm=a("li"),Kee=a("strong"),TXe=o("luke"),MXe=o(" \u2014 "),dk=a("a"),EXe=o("LukeConfig"),CXe=o(" (LUKE model)"),wXe=l(),cm=a("li"),Zee=a("strong"),AXe=o("lxmert"),yXe=o(" \u2014 "),ck=a("a"),LXe=o("LxmertConfig"),xXe=o(" (LXMERT model)"),$Xe=l(),fm=a("li"),eoe=a("strong"),kXe=o("m2m_100"),SXe=o(" \u2014 "),fk=a("a"),RXe=o("M2M100Config"),PXe=o(" (M2M100 model)"),BXe=l(),mm=a("li"),ooe=a("strong"),IXe=o("marian"),qXe=o(" \u2014 "),mk=a("a"),NXe=o("MarianConfig"),jXe=o(" (Marian model)"),DXe=l(),gm=a("li"),roe=a("strong"),GXe=o("maskformer"),OXe=o(" \u2014 "),gk=a("a"),VXe=o("MaskFormerConfig"),XXe=o(" (MaskFormer model)"),zXe=l(),hm=a("li"),toe=a("strong"),QXe=o("mbart"),WXe=o(" \u2014 "),hk=a("a"),HXe=o("MBartConfig"),UXe=o(" (mBART model)"),JXe=l(),pm=a("li"),aoe=a("strong"),YXe=o("megatron-bert"),KXe=o(" \u2014 "),pk=a("a"),ZXe=o("MegatronBertConfig"),eze=o(" (MegatronBert model)"),oze=l(),um=a("li"),noe=a("strong"),rze=o("mobilebert"),tze=o(" \u2014 "),uk=a("a"),aze=o("MobileBertConfig"),nze=o(" (MobileBERT model)"),sze=l(),_m=a("li"),soe=a("strong"),lze=o("mpnet"),ize=o(" \u2014 "),_k=a("a"),dze=o("MPNetConfig"),cze=o(" (MPNet model)"),fze=l(),bm=a("li"),loe=a("strong"),mze=o("mt5"),gze=o(" \u2014 "),bk=a("a"),hze=o("MT5Config"),pze=o(" (mT5 model)"),uze=l(),vm=a("li"),ioe=a("strong"),_ze=o("nystromformer"),bze=o(" \u2014 "),vk=a("a"),vze=o("NystromformerConfig"),Fze=o(" (Nystromformer model)"),Tze=l(),Fm=a("li"),doe=a("strong"),Mze=o("openai-gpt"),Eze=o(" \u2014 "),Fk=a("a"),Cze=o("OpenAIGPTConfig"),wze=o(" (OpenAI GPT model)"),Aze=l(),Tm=a("li"),coe=a("strong"),yze=o("opt"),Lze=o(" \u2014 "),Tk=a("a"),xze=o("OPTConfig"),$ze=o(" (OPT model)"),kze=l(),Mm=a("li"),foe=a("strong"),Sze=o("pegasus"),Rze=o(" \u2014 "),Mk=a("a"),Pze=o("PegasusConfig"),Bze=o(" (Pegasus model)"),Ize=l(),Em=a("li"),moe=a("strong"),qze=o("perceiver"),Nze=o(" \u2014 "),Ek=a("a"),jze=o("PerceiverConfig"),Dze=o(" (Perceiver model)"),Gze=l(),Cm=a("li"),goe=a("strong"),Oze=o("plbart"),Vze=o(" \u2014 "),Ck=a("a"),Xze=o("PLBartConfig"),zze=o(" (PLBart model)"),Qze=l(),wm=a("li"),hoe=a("strong"),Wze=o("poolformer"),Hze=o(" \u2014 "),wk=a("a"),Uze=o("PoolFormerConfig"),Jze=o(" (PoolFormer model)"),Yze=l(),Am=a("li"),poe=a("strong"),Kze=o("prophetnet"),Zze=o(" \u2014 "),Ak=a("a"),eQe=o("ProphetNetConfig"),oQe=o(" (ProphetNet model)"),rQe=l(),ym=a("li"),uoe=a("strong"),tQe=o("qdqbert"),aQe=o(" \u2014 "),yk=a("a"),nQe=o("QDQBertConfig"),sQe=o(" (QDQBert model)"),lQe=l(),Lm=a("li"),_oe=a("strong"),iQe=o("rag"),dQe=o(" \u2014 "),Lk=a("a"),cQe=o("RagConfig"),fQe=o(" (RAG model)"),mQe=l(),xm=a("li"),boe=a("strong"),gQe=o("realm"),hQe=o(" \u2014 "),xk=a("a"),pQe=o("RealmConfig"),uQe=o(" (Realm model)"),_Qe=l(),$m=a("li"),voe=a("strong"),bQe=o("reformer"),vQe=o(" \u2014 "),$k=a("a"),FQe=o("ReformerConfig"),TQe=o(" (Reformer model)"),MQe=l(),km=a("li"),Foe=a("strong"),EQe=o("regnet"),CQe=o(" \u2014 "),kk=a("a"),wQe=o("RegNetConfig"),AQe=o(" (RegNet model)"),yQe=l(),Sm=a("li"),Toe=a("strong"),LQe=o("rembert"),xQe=o(" \u2014 "),Sk=a("a"),$Qe=o("RemBertConfig"),kQe=o(" (RemBERT model)"),SQe=l(),Rm=a("li"),Moe=a("strong"),RQe=o("resnet"),PQe=o(" \u2014 "),Rk=a("a"),BQe=o("ResNetConfig"),IQe=o(" (ResNet model)"),qQe=l(),Pm=a("li"),Eoe=a("strong"),NQe=o("retribert"),jQe=o(" \u2014 "),Pk=a("a"),DQe=o("RetriBertConfig"),GQe=o(" (RetriBERT model)"),OQe=l(),Bm=a("li"),Coe=a("strong"),VQe=o("roberta"),XQe=o(" \u2014 "),Bk=a("a"),zQe=o("RobertaConfig"),QQe=o(" (RoBERTa model)"),WQe=l(),Im=a("li"),woe=a("strong"),HQe=o("roformer"),UQe=o(" \u2014 "),Ik=a("a"),JQe=o("RoFormerConfig"),YQe=o(" (RoFormer model)"),KQe=l(),qm=a("li"),Aoe=a("strong"),ZQe=o("segformer"),eWe=o(" \u2014 "),qk=a("a"),oWe=o("SegformerConfig"),rWe=o(" (SegFormer model)"),tWe=l(),Nm=a("li"),yoe=a("strong"),aWe=o("sew"),nWe=o(" \u2014 "),Nk=a("a"),sWe=o("SEWConfig"),lWe=o(" (SEW model)"),iWe=l(),jm=a("li"),Loe=a("strong"),dWe=o("sew-d"),cWe=o(" \u2014 "),jk=a("a"),fWe=o("SEWDConfig"),mWe=o(" (SEW-D model)"),gWe=l(),Dm=a("li"),xoe=a("strong"),hWe=o("speech-encoder-decoder"),pWe=o(" \u2014 "),Dk=a("a"),uWe=o("SpeechEncoderDecoderConfig"),_We=o(" (Speech Encoder decoder model)"),bWe=l(),Gm=a("li"),$oe=a("strong"),vWe=o("speech_to_text"),FWe=o(" \u2014 "),Gk=a("a"),TWe=o("Speech2TextConfig"),MWe=o(" (Speech2Text model)"),EWe=l(),Om=a("li"),koe=a("strong"),CWe=o("speech_to_text_2"),wWe=o(" \u2014 "),Ok=a("a"),AWe=o("Speech2Text2Config"),yWe=o(" (Speech2Text2 model)"),LWe=l(),Vm=a("li"),Soe=a("strong"),xWe=o("splinter"),$We=o(" \u2014 "),Vk=a("a"),kWe=o("SplinterConfig"),SWe=o(" (Splinter model)"),RWe=l(),Xm=a("li"),Roe=a("strong"),PWe=o("squeezebert"),BWe=o(" \u2014 "),Xk=a("a"),IWe=o("SqueezeBertConfig"),qWe=o(" (SqueezeBERT model)"),NWe=l(),zm=a("li"),Poe=a("strong"),jWe=o("swin"),DWe=o(" \u2014 "),zk=a("a"),GWe=o("SwinConfig"),OWe=o(" (Swin model)"),VWe=l(),Qm=a("li"),Boe=a("strong"),XWe=o("t5"),zWe=o(" \u2014 "),Qk=a("a"),QWe=o("T5Config"),WWe=o(" (T5 model)"),HWe=l(),Wm=a("li"),Ioe=a("strong"),UWe=o("tapas"),JWe=o(" \u2014 "),Wk=a("a"),YWe=o("TapasConfig"),KWe=o(" (TAPAS model)"),ZWe=l(),Hm=a("li"),qoe=a("strong"),eHe=o("tapex"),oHe=o(" \u2014 "),Hk=a("a"),rHe=o("BartConfig"),tHe=o(" (TAPEX model)"),aHe=l(),Um=a("li"),Noe=a("strong"),nHe=o("transfo-xl"),sHe=o(" \u2014 "),Uk=a("a"),lHe=o("TransfoXLConfig"),iHe=o(" (Transformer-XL model)"),dHe=l(),Jm=a("li"),joe=a("strong"),cHe=o("trocr"),fHe=o(" \u2014 "),Jk=a("a"),mHe=o("TrOCRConfig"),gHe=o(" (TrOCR model)"),hHe=l(),Ym=a("li"),Doe=a("strong"),pHe=o("unispeech"),uHe=o(" \u2014 "),Yk=a("a"),_He=o("UniSpeechConfig"),bHe=o(" (UniSpeech model)"),vHe=l(),Km=a("li"),Goe=a("strong"),FHe=o("unispeech-sat"),THe=o(" \u2014 "),Kk=a("a"),MHe=o("UniSpeechSatConfig"),EHe=o(" (UniSpeechSat model)"),CHe=l(),Zm=a("li"),Ooe=a("strong"),wHe=o("van"),AHe=o(" \u2014 "),Zk=a("a"),yHe=o("VanConfig"),LHe=o(" (VAN model)"),xHe=l(),eg=a("li"),Voe=a("strong"),$He=o("vilt"),kHe=o(" \u2014 "),eS=a("a"),SHe=o("ViltConfig"),RHe=o(" (ViLT model)"),PHe=l(),og=a("li"),Xoe=a("strong"),BHe=o("vision-encoder-decoder"),IHe=o(" \u2014 "),oS=a("a"),qHe=o("VisionEncoderDecoderConfig"),NHe=o(" (Vision Encoder decoder model)"),jHe=l(),rg=a("li"),zoe=a("strong"),DHe=o("vision-text-dual-encoder"),GHe=o(" \u2014 "),rS=a("a"),OHe=o("VisionTextDualEncoderConfig"),VHe=o(" (VisionTextDualEncoder model)"),XHe=l(),tg=a("li"),Qoe=a("strong"),zHe=o("visual_bert"),QHe=o(" \u2014 "),tS=a("a"),WHe=o("VisualBertConfig"),HHe=o(" (VisualBert model)"),UHe=l(),ag=a("li"),Woe=a("strong"),JHe=o("vit"),YHe=o(" \u2014 "),aS=a("a"),KHe=o("ViTConfig"),ZHe=o(" (ViT model)"),eUe=l(),ng=a("li"),Hoe=a("strong"),oUe=o("vit_mae"),rUe=o(" \u2014 "),nS=a("a"),tUe=o("ViTMAEConfig"),aUe=o(" (ViTMAE model)"),nUe=l(),sg=a("li"),Uoe=a("strong"),sUe=o("wav2vec2"),lUe=o(" \u2014 "),sS=a("a"),iUe=o("Wav2Vec2Config"),dUe=o(" (Wav2Vec2 model)"),cUe=l(),lg=a("li"),Joe=a("strong"),fUe=o("wavlm"),mUe=o(" \u2014 "),lS=a("a"),gUe=o("WavLMConfig"),hUe=o(" (WavLM model)"),pUe=l(),ig=a("li"),Yoe=a("strong"),uUe=o("xglm"),_Ue=o(" \u2014 "),iS=a("a"),bUe=o("XGLMConfig"),vUe=o(" (XGLM model)"),FUe=l(),dg=a("li"),Koe=a("strong"),TUe=o("xlm"),MUe=o(" \u2014 "),dS=a("a"),EUe=o("XLMConfig"),CUe=o(" (XLM model)"),wUe=l(),cg=a("li"),Zoe=a("strong"),AUe=o("xlm-prophetnet"),yUe=o(" \u2014 "),cS=a("a"),LUe=o("XLMProphetNetConfig"),xUe=o(" (XLMProphetNet model)"),$Ue=l(),fg=a("li"),ere=a("strong"),kUe=o("xlm-roberta"),SUe=o(" \u2014 "),fS=a("a"),RUe=o("XLMRobertaConfig"),PUe=o(" (XLM-RoBERTa model)"),BUe=l(),mg=a("li"),ore=a("strong"),IUe=o("xlm-roberta-xl"),qUe=o(" \u2014 "),mS=a("a"),NUe=o("XLMRobertaXLConfig"),jUe=o(" (XLM-RoBERTa-XL model)"),DUe=l(),gg=a("li"),rre=a("strong"),GUe=o("xlnet"),OUe=o(" \u2014 "),gS=a("a"),VUe=o("XLNetConfig"),XUe=o(" (XLNet model)"),zUe=l(),hg=a("li"),tre=a("strong"),QUe=o("yolos"),WUe=o(" \u2014 "),hS=a("a"),HUe=o("YolosConfig"),UUe=o(" (YOLOS model)"),JUe=l(),pg=a("li"),are=a("strong"),YUe=o("yoso"),KUe=o(" \u2014 "),pS=a("a"),ZUe=o("YosoConfig"),eJe=o(" (YOSO model)"),oJe=l(),F(ug.$$.fragment),rJe=l(),_g=a("div"),F(rA.$$.fragment),tJe=l(),nre=a("p"),aJe=o("Register a new configuration for this class."),VBe=l(),bi=a("h2"),bg=a("a"),sre=a("span"),F(tA.$$.fragment),nJe=l(),lre=a("span"),sJe=o("AutoTokenizer"),XBe=l(),wo=a("div"),F(aA.$$.fragment),lJe=l(),nA=a("p"),iJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),uS=a("a"),dJe=o("AutoTokenizer.from_pretrained()"),cJe=o(" class method."),fJe=l(),sA=a("p"),mJe=o("This class cannot be instantiated directly using "),ire=a("code"),gJe=o("__init__()"),hJe=o(" (throws an error)."),pJe=l(),Cr=a("div"),F(lA.$$.fragment),uJe=l(),dre=a("p"),_Je=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),bJe=l(),Ca=a("p"),vJe=o("The tokenizer class to instantiate is selected based on the "),cre=a("code"),FJe=o("model_type"),TJe=o(` property of the config object (either
passed as an argument or loaded from `),fre=a("code"),MJe=o("pretrained_model_name_or_path"),EJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mre=a("code"),CJe=o("pretrained_model_name_or_path"),wJe=o(":"),AJe=l(),k=a("ul"),kn=a("li"),gre=a("strong"),yJe=o("albert"),LJe=o(" \u2014 "),_S=a("a"),xJe=o("AlbertTokenizer"),$Je=o(" or "),bS=a("a"),kJe=o("AlbertTokenizerFast"),SJe=o(" (ALBERT model)"),RJe=l(),Sn=a("li"),hre=a("strong"),PJe=o("bart"),BJe=o(" \u2014 "),vS=a("a"),IJe=o("BartTokenizer"),qJe=o(" or "),FS=a("a"),NJe=o("BartTokenizerFast"),jJe=o(" (BART model)"),DJe=l(),Rn=a("li"),pre=a("strong"),GJe=o("barthez"),OJe=o(" \u2014 "),TS=a("a"),VJe=o("BarthezTokenizer"),XJe=o(" or "),MS=a("a"),zJe=o("BarthezTokenizerFast"),QJe=o(" (BARThez model)"),WJe=l(),vg=a("li"),ure=a("strong"),HJe=o("bartpho"),UJe=o(" \u2014 "),ES=a("a"),JJe=o("BartphoTokenizer"),YJe=o(" (BARTpho model)"),KJe=l(),Pn=a("li"),_re=a("strong"),ZJe=o("bert"),eYe=o(" \u2014 "),CS=a("a"),oYe=o("BertTokenizer"),rYe=o(" or "),wS=a("a"),tYe=o("BertTokenizerFast"),aYe=o(" (BERT model)"),nYe=l(),Fg=a("li"),bre=a("strong"),sYe=o("bert-generation"),lYe=o(" \u2014 "),AS=a("a"),iYe=o("BertGenerationTokenizer"),dYe=o(" (Bert Generation model)"),cYe=l(),Tg=a("li"),vre=a("strong"),fYe=o("bert-japanese"),mYe=o(" \u2014 "),yS=a("a"),gYe=o("BertJapaneseTokenizer"),hYe=o(" (BertJapanese model)"),pYe=l(),Mg=a("li"),Fre=a("strong"),uYe=o("bertweet"),_Ye=o(" \u2014 "),LS=a("a"),bYe=o("BertweetTokenizer"),vYe=o(" (Bertweet model)"),FYe=l(),Bn=a("li"),Tre=a("strong"),TYe=o("big_bird"),MYe=o(" \u2014 "),xS=a("a"),EYe=o("BigBirdTokenizer"),CYe=o(" or "),$S=a("a"),wYe=o("BigBirdTokenizerFast"),AYe=o(" (BigBird model)"),yYe=l(),In=a("li"),Mre=a("strong"),LYe=o("bigbird_pegasus"),xYe=o(" \u2014 "),kS=a("a"),$Ye=o("PegasusTokenizer"),kYe=o(" or "),SS=a("a"),SYe=o("PegasusTokenizerFast"),RYe=o(" (BigBirdPegasus model)"),PYe=l(),qn=a("li"),Ere=a("strong"),BYe=o("blenderbot"),IYe=o(" \u2014 "),RS=a("a"),qYe=o("BlenderbotTokenizer"),NYe=o(" or "),PS=a("a"),jYe=o("BlenderbotTokenizerFast"),DYe=o(" (Blenderbot model)"),GYe=l(),Eg=a("li"),Cre=a("strong"),OYe=o("blenderbot-small"),VYe=o(" \u2014 "),BS=a("a"),XYe=o("BlenderbotSmallTokenizer"),zYe=o(" (BlenderbotSmall model)"),QYe=l(),Cg=a("li"),wre=a("strong"),WYe=o("byt5"),HYe=o(" \u2014 "),IS=a("a"),UYe=o("ByT5Tokenizer"),JYe=o(" (ByT5 model)"),YYe=l(),Nn=a("li"),Are=a("strong"),KYe=o("camembert"),ZYe=o(" \u2014 "),qS=a("a"),eKe=o("CamembertTokenizer"),oKe=o(" or "),NS=a("a"),rKe=o("CamembertTokenizerFast"),tKe=o(" (CamemBERT model)"),aKe=l(),wg=a("li"),yre=a("strong"),nKe=o("canine"),sKe=o(" \u2014 "),jS=a("a"),lKe=o("CanineTokenizer"),iKe=o(" (Canine model)"),dKe=l(),jn=a("li"),Lre=a("strong"),cKe=o("clip"),fKe=o(" \u2014 "),DS=a("a"),mKe=o("CLIPTokenizer"),gKe=o(" or "),GS=a("a"),hKe=o("CLIPTokenizerFast"),pKe=o(" (CLIP model)"),uKe=l(),Dn=a("li"),xre=a("strong"),_Ke=o("convbert"),bKe=o(" \u2014 "),OS=a("a"),vKe=o("ConvBertTokenizer"),FKe=o(" or "),VS=a("a"),TKe=o("ConvBertTokenizerFast"),MKe=o(" (ConvBERT model)"),EKe=l(),Gn=a("li"),$re=a("strong"),CKe=o("cpm"),wKe=o(" \u2014 "),XS=a("a"),AKe=o("CpmTokenizer"),yKe=o(" or "),zS=a("a"),LKe=o("CpmTokenizerFast"),xKe=o(" (CPM model)"),$Ke=l(),Ag=a("li"),kre=a("strong"),kKe=o("ctrl"),SKe=o(" \u2014 "),QS=a("a"),RKe=o("CTRLTokenizer"),PKe=o(" (CTRL model)"),BKe=l(),On=a("li"),Sre=a("strong"),IKe=o("data2vec-text"),qKe=o(" \u2014 "),WS=a("a"),NKe=o("RobertaTokenizer"),jKe=o(" or "),HS=a("a"),DKe=o("RobertaTokenizerFast"),GKe=o(" (Data2VecText model)"),OKe=l(),Vn=a("li"),Rre=a("strong"),VKe=o("deberta"),XKe=o(" \u2014 "),US=a("a"),zKe=o("DebertaTokenizer"),QKe=o(" or "),JS=a("a"),WKe=o("DebertaTokenizerFast"),HKe=o(" (DeBERTa model)"),UKe=l(),Xn=a("li"),Pre=a("strong"),JKe=o("deberta-v2"),YKe=o(" \u2014 "),YS=a("a"),KKe=o("DebertaV2Tokenizer"),ZKe=o(" or "),KS=a("a"),eZe=o("DebertaV2TokenizerFast"),oZe=o(" (DeBERTa-v2 model)"),rZe=l(),zn=a("li"),Bre=a("strong"),tZe=o("distilbert"),aZe=o(" \u2014 "),ZS=a("a"),nZe=o("DistilBertTokenizer"),sZe=o(" or "),eR=a("a"),lZe=o("DistilBertTokenizerFast"),iZe=o(" (DistilBERT model)"),dZe=l(),Qn=a("li"),Ire=a("strong"),cZe=o("dpr"),fZe=o(" \u2014 "),oR=a("a"),mZe=o("DPRQuestionEncoderTokenizer"),gZe=o(" or "),rR=a("a"),hZe=o("DPRQuestionEncoderTokenizerFast"),pZe=o(" (DPR model)"),uZe=l(),Wn=a("li"),qre=a("strong"),_Ze=o("electra"),bZe=o(" \u2014 "),tR=a("a"),vZe=o("ElectraTokenizer"),FZe=o(" or "),aR=a("a"),TZe=o("ElectraTokenizerFast"),MZe=o(" (ELECTRA model)"),EZe=l(),yg=a("li"),Nre=a("strong"),CZe=o("flaubert"),wZe=o(" \u2014 "),nR=a("a"),AZe=o("FlaubertTokenizer"),yZe=o(" (FlauBERT model)"),LZe=l(),Hn=a("li"),jre=a("strong"),xZe=o("fnet"),$Ze=o(" \u2014 "),sR=a("a"),kZe=o("FNetTokenizer"),SZe=o(" or "),lR=a("a"),RZe=o("FNetTokenizerFast"),PZe=o(" (FNet model)"),BZe=l(),Lg=a("li"),Dre=a("strong"),IZe=o("fsmt"),qZe=o(" \u2014 "),iR=a("a"),NZe=o("FSMTTokenizer"),jZe=o(" (FairSeq Machine-Translation model)"),DZe=l(),Un=a("li"),Gre=a("strong"),GZe=o("funnel"),OZe=o(" \u2014 "),dR=a("a"),VZe=o("FunnelTokenizer"),XZe=o(" or "),cR=a("a"),zZe=o("FunnelTokenizerFast"),QZe=o(" (Funnel Transformer model)"),WZe=l(),Jn=a("li"),Ore=a("strong"),HZe=o("gpt2"),UZe=o(" \u2014 "),fR=a("a"),JZe=o("GPT2Tokenizer"),YZe=o(" or "),mR=a("a"),KZe=o("GPT2TokenizerFast"),ZZe=o(" (OpenAI GPT-2 model)"),eeo=l(),Yn=a("li"),Vre=a("strong"),oeo=o("gpt_neo"),reo=o(" \u2014 "),gR=a("a"),teo=o("GPT2Tokenizer"),aeo=o(" or "),hR=a("a"),neo=o("GPT2TokenizerFast"),seo=o(" (GPT Neo model)"),leo=l(),Kn=a("li"),Xre=a("strong"),ieo=o("gptj"),deo=o(" \u2014 "),pR=a("a"),ceo=o("GPT2Tokenizer"),feo=o(" or "),uR=a("a"),meo=o("GPT2TokenizerFast"),geo=o(" (GPT-J model)"),heo=l(),Zn=a("li"),zre=a("strong"),peo=o("herbert"),ueo=o(" \u2014 "),_R=a("a"),_eo=o("HerbertTokenizer"),beo=o(" or "),bR=a("a"),veo=o("HerbertTokenizerFast"),Feo=o(" (HerBERT model)"),Teo=l(),xg=a("li"),Qre=a("strong"),Meo=o("hubert"),Eeo=o(" \u2014 "),vR=a("a"),Ceo=o("Wav2Vec2CTCTokenizer"),weo=o(" (Hubert model)"),Aeo=l(),es=a("li"),Wre=a("strong"),yeo=o("ibert"),Leo=o(" \u2014 "),FR=a("a"),xeo=o("RobertaTokenizer"),$eo=o(" or "),TR=a("a"),keo=o("RobertaTokenizerFast"),Seo=o(" (I-BERT model)"),Reo=l(),os=a("li"),Hre=a("strong"),Peo=o("layoutlm"),Beo=o(" \u2014 "),MR=a("a"),Ieo=o("LayoutLMTokenizer"),qeo=o(" or "),ER=a("a"),Neo=o("LayoutLMTokenizerFast"),jeo=o(" (LayoutLM model)"),Deo=l(),rs=a("li"),Ure=a("strong"),Geo=o("layoutlmv2"),Oeo=o(" \u2014 "),CR=a("a"),Veo=o("LayoutLMv2Tokenizer"),Xeo=o(" or "),wR=a("a"),zeo=o("LayoutLMv2TokenizerFast"),Qeo=o(" (LayoutLMv2 model)"),Weo=l(),ts=a("li"),Jre=a("strong"),Heo=o("layoutxlm"),Ueo=o(" \u2014 "),AR=a("a"),Jeo=o("LayoutXLMTokenizer"),Yeo=o(" or "),yR=a("a"),Keo=o("LayoutXLMTokenizerFast"),Zeo=o(" (LayoutXLM model)"),eoo=l(),as=a("li"),Yre=a("strong"),ooo=o("led"),roo=o(" \u2014 "),LR=a("a"),too=o("LEDTokenizer"),aoo=o(" or "),xR=a("a"),noo=o("LEDTokenizerFast"),soo=o(" (LED model)"),loo=l(),ns=a("li"),Kre=a("strong"),ioo=o("longformer"),doo=o(" \u2014 "),$R=a("a"),coo=o("LongformerTokenizer"),foo=o(" or "),kR=a("a"),moo=o("LongformerTokenizerFast"),goo=o(" (Longformer model)"),hoo=l(),$g=a("li"),Zre=a("strong"),poo=o("luke"),uoo=o(" \u2014 "),SR=a("a"),_oo=o("LukeTokenizer"),boo=o(" (LUKE model)"),voo=l(),ss=a("li"),ete=a("strong"),Foo=o("lxmert"),Too=o(" \u2014 "),RR=a("a"),Moo=o("LxmertTokenizer"),Eoo=o(" or "),PR=a("a"),Coo=o("LxmertTokenizerFast"),woo=o(" (LXMERT model)"),Aoo=l(),kg=a("li"),ote=a("strong"),yoo=o("m2m_100"),Loo=o(" \u2014 "),BR=a("a"),xoo=o("M2M100Tokenizer"),$oo=o(" (M2M100 model)"),koo=l(),Sg=a("li"),rte=a("strong"),Soo=o("marian"),Roo=o(" \u2014 "),IR=a("a"),Poo=o("MarianTokenizer"),Boo=o(" (Marian model)"),Ioo=l(),ls=a("li"),tte=a("strong"),qoo=o("mbart"),Noo=o(" \u2014 "),qR=a("a"),joo=o("MBartTokenizer"),Doo=o(" or "),NR=a("a"),Goo=o("MBartTokenizerFast"),Ooo=o(" (mBART model)"),Voo=l(),is=a("li"),ate=a("strong"),Xoo=o("mbart50"),zoo=o(" \u2014 "),jR=a("a"),Qoo=o("MBart50Tokenizer"),Woo=o(" or "),DR=a("a"),Hoo=o("MBart50TokenizerFast"),Uoo=o(" (mBART-50 model)"),Joo=l(),ds=a("li"),nte=a("strong"),Yoo=o("megatron-bert"),Koo=o(" \u2014 "),GR=a("a"),Zoo=o("BertTokenizer"),ero=o(" or "),OR=a("a"),oro=o("BertTokenizerFast"),rro=o(" (MegatronBert model)"),tro=l(),Rg=a("li"),ste=a("strong"),aro=o("mluke"),nro=o(" \u2014 "),VR=a("a"),sro=o("MLukeTokenizer"),lro=o(" (mLUKE model)"),iro=l(),cs=a("li"),lte=a("strong"),dro=o("mobilebert"),cro=o(" \u2014 "),XR=a("a"),fro=o("MobileBertTokenizer"),mro=o(" or "),zR=a("a"),gro=o("MobileBertTokenizerFast"),hro=o(" (MobileBERT model)"),pro=l(),fs=a("li"),ite=a("strong"),uro=o("mpnet"),_ro=o(" \u2014 "),QR=a("a"),bro=o("MPNetTokenizer"),vro=o(" or "),WR=a("a"),Fro=o("MPNetTokenizerFast"),Tro=o(" (MPNet model)"),Mro=l(),ms=a("li"),dte=a("strong"),Ero=o("mt5"),Cro=o(" \u2014 "),HR=a("a"),wro=o("MT5Tokenizer"),Aro=o(" or "),UR=a("a"),yro=o("MT5TokenizerFast"),Lro=o(" (mT5 model)"),xro=l(),gs=a("li"),cte=a("strong"),$ro=o("nystromformer"),kro=o(" \u2014 "),JR=a("a"),Sro=o("AlbertTokenizer"),Rro=o(" or "),YR=a("a"),Pro=o("AlbertTokenizerFast"),Bro=o(" (Nystromformer model)"),Iro=l(),hs=a("li"),fte=a("strong"),qro=o("openai-gpt"),Nro=o(" \u2014 "),KR=a("a"),jro=o("OpenAIGPTTokenizer"),Dro=o(" or "),ZR=a("a"),Gro=o("OpenAIGPTTokenizerFast"),Oro=o(" (OpenAI GPT model)"),Vro=l(),ps=a("li"),mte=a("strong"),Xro=o("opt"),zro=o(" \u2014 "),eP=a("a"),Qro=o("GPT2Tokenizer"),Wro=o(" or "),oP=a("a"),Hro=o("GPT2TokenizerFast"),Uro=o(" (OPT model)"),Jro=l(),us=a("li"),gte=a("strong"),Yro=o("pegasus"),Kro=o(" \u2014 "),rP=a("a"),Zro=o("PegasusTokenizer"),eto=o(" or "),tP=a("a"),oto=o("PegasusTokenizerFast"),rto=o(" (Pegasus model)"),tto=l(),Pg=a("li"),hte=a("strong"),ato=o("perceiver"),nto=o(" \u2014 "),aP=a("a"),sto=o("PerceiverTokenizer"),lto=o(" (Perceiver model)"),ito=l(),Bg=a("li"),pte=a("strong"),dto=o("phobert"),cto=o(" \u2014 "),nP=a("a"),fto=o("PhobertTokenizer"),mto=o(" (PhoBERT model)"),gto=l(),Ig=a("li"),ute=a("strong"),hto=o("plbart"),pto=o(" \u2014 "),sP=a("a"),uto=o("PLBartTokenizer"),_to=o(" (PLBart model)"),bto=l(),qg=a("li"),_te=a("strong"),vto=o("prophetnet"),Fto=o(" \u2014 "),lP=a("a"),Tto=o("ProphetNetTokenizer"),Mto=o(" (ProphetNet model)"),Eto=l(),_s=a("li"),bte=a("strong"),Cto=o("qdqbert"),wto=o(" \u2014 "),iP=a("a"),Ato=o("BertTokenizer"),yto=o(" or "),dP=a("a"),Lto=o("BertTokenizerFast"),xto=o(" (QDQBert model)"),$to=l(),Ng=a("li"),vte=a("strong"),kto=o("rag"),Sto=o(" \u2014 "),cP=a("a"),Rto=o("RagTokenizer"),Pto=o(" (RAG model)"),Bto=l(),bs=a("li"),Fte=a("strong"),Ito=o("realm"),qto=o(" \u2014 "),fP=a("a"),Nto=o("RealmTokenizer"),jto=o(" or "),mP=a("a"),Dto=o("RealmTokenizerFast"),Gto=o(" (Realm model)"),Oto=l(),vs=a("li"),Tte=a("strong"),Vto=o("reformer"),Xto=o(" \u2014 "),gP=a("a"),zto=o("ReformerTokenizer"),Qto=o(" or "),hP=a("a"),Wto=o("ReformerTokenizerFast"),Hto=o(" (Reformer model)"),Uto=l(),Fs=a("li"),Mte=a("strong"),Jto=o("rembert"),Yto=o(" \u2014 "),pP=a("a"),Kto=o("RemBertTokenizer"),Zto=o(" or "),uP=a("a"),eao=o("RemBertTokenizerFast"),oao=o(" (RemBERT model)"),rao=l(),Ts=a("li"),Ete=a("strong"),tao=o("retribert"),aao=o(" \u2014 "),_P=a("a"),nao=o("RetriBertTokenizer"),sao=o(" or "),bP=a("a"),lao=o("RetriBertTokenizerFast"),iao=o(" (RetriBERT model)"),dao=l(),Ms=a("li"),Cte=a("strong"),cao=o("roberta"),fao=o(" \u2014 "),vP=a("a"),mao=o("RobertaTokenizer"),gao=o(" or "),FP=a("a"),hao=o("RobertaTokenizerFast"),pao=o(" (RoBERTa model)"),uao=l(),Es=a("li"),wte=a("strong"),_ao=o("roformer"),bao=o(" \u2014 "),TP=a("a"),vao=o("RoFormerTokenizer"),Fao=o(" or "),MP=a("a"),Tao=o("RoFormerTokenizerFast"),Mao=o(" (RoFormer model)"),Eao=l(),jg=a("li"),Ate=a("strong"),Cao=o("speech_to_text"),wao=o(" \u2014 "),EP=a("a"),Aao=o("Speech2TextTokenizer"),yao=o(" (Speech2Text model)"),Lao=l(),Dg=a("li"),yte=a("strong"),xao=o("speech_to_text_2"),$ao=o(" \u2014 "),CP=a("a"),kao=o("Speech2Text2Tokenizer"),Sao=o(" (Speech2Text2 model)"),Rao=l(),Cs=a("li"),Lte=a("strong"),Pao=o("splinter"),Bao=o(" \u2014 "),wP=a("a"),Iao=o("SplinterTokenizer"),qao=o(" or "),AP=a("a"),Nao=o("SplinterTokenizerFast"),jao=o(" (Splinter model)"),Dao=l(),ws=a("li"),xte=a("strong"),Gao=o("squeezebert"),Oao=o(" \u2014 "),yP=a("a"),Vao=o("SqueezeBertTokenizer"),Xao=o(" or "),LP=a("a"),zao=o("SqueezeBertTokenizerFast"),Qao=o(" (SqueezeBERT model)"),Wao=l(),As=a("li"),$te=a("strong"),Hao=o("t5"),Uao=o(" \u2014 "),xP=a("a"),Jao=o("T5Tokenizer"),Yao=o(" or "),$P=a("a"),Kao=o("T5TokenizerFast"),Zao=o(" (T5 model)"),eno=l(),Gg=a("li"),kte=a("strong"),ono=o("tapas"),rno=o(" \u2014 "),kP=a("a"),tno=o("TapasTokenizer"),ano=o(" (TAPAS model)"),nno=l(),Og=a("li"),Ste=a("strong"),sno=o("tapex"),lno=o(" \u2014 "),SP=a("a"),ino=o("TapexTokenizer"),dno=o(" (TAPEX model)"),cno=l(),Vg=a("li"),Rte=a("strong"),fno=o("transfo-xl"),mno=o(" \u2014 "),RP=a("a"),gno=o("TransfoXLTokenizer"),hno=o(" (Transformer-XL model)"),pno=l(),ys=a("li"),Pte=a("strong"),uno=o("visual_bert"),_no=o(" \u2014 "),PP=a("a"),bno=o("BertTokenizer"),vno=o(" or "),BP=a("a"),Fno=o("BertTokenizerFast"),Tno=o(" (VisualBert model)"),Mno=l(),Xg=a("li"),Bte=a("strong"),Eno=o("wav2vec2"),Cno=o(" \u2014 "),IP=a("a"),wno=o("Wav2Vec2CTCTokenizer"),Ano=o(" (Wav2Vec2 model)"),yno=l(),zg=a("li"),Ite=a("strong"),Lno=o("wav2vec2_phoneme"),xno=o(" \u2014 "),qP=a("a"),$no=o("Wav2Vec2PhonemeCTCTokenizer"),kno=o(" (Wav2Vec2Phoneme model)"),Sno=l(),Ls=a("li"),qte=a("strong"),Rno=o("xglm"),Pno=o(" \u2014 "),NP=a("a"),Bno=o("XGLMTokenizer"),Ino=o(" or "),jP=a("a"),qno=o("XGLMTokenizerFast"),Nno=o(" (XGLM model)"),jno=l(),Qg=a("li"),Nte=a("strong"),Dno=o("xlm"),Gno=o(" \u2014 "),DP=a("a"),Ono=o("XLMTokenizer"),Vno=o(" (XLM model)"),Xno=l(),Wg=a("li"),jte=a("strong"),zno=o("xlm-prophetnet"),Qno=o(" \u2014 "),GP=a("a"),Wno=o("XLMProphetNetTokenizer"),Hno=o(" (XLMProphetNet model)"),Uno=l(),xs=a("li"),Dte=a("strong"),Jno=o("xlm-roberta"),Yno=o(" \u2014 "),OP=a("a"),Kno=o("XLMRobertaTokenizer"),Zno=o(" or "),VP=a("a"),eso=o("XLMRobertaTokenizerFast"),oso=o(" (XLM-RoBERTa model)"),rso=l(),$s=a("li"),Gte=a("strong"),tso=o("xlm-roberta-xl"),aso=o(" \u2014 "),XP=a("a"),nso=o("RobertaTokenizer"),sso=o(" or "),zP=a("a"),lso=o("RobertaTokenizerFast"),iso=o(" (XLM-RoBERTa-XL model)"),dso=l(),ks=a("li"),Ote=a("strong"),cso=o("xlnet"),fso=o(" \u2014 "),QP=a("a"),mso=o("XLNetTokenizer"),gso=o(" or "),WP=a("a"),hso=o("XLNetTokenizerFast"),pso=o(" (XLNet model)"),uso=l(),Ss=a("li"),Vte=a("strong"),_so=o("yoso"),bso=o(" \u2014 "),HP=a("a"),vso=o("AlbertTokenizer"),Fso=o(" or "),UP=a("a"),Tso=o("AlbertTokenizerFast"),Mso=o(" (YOSO model)"),Eso=l(),F(Hg.$$.fragment),Cso=l(),Ug=a("div"),F(iA.$$.fragment),wso=l(),Xte=a("p"),Aso=o("Register a new tokenizer in this mapping."),zBe=l(),vi=a("h2"),Jg=a("a"),zte=a("span"),F(dA.$$.fragment),yso=l(),Qte=a("span"),Lso=o("AutoFeatureExtractor"),QBe=l(),Ao=a("div"),F(cA.$$.fragment),xso=l(),fA=a("p"),$so=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),JP=a("a"),kso=o("AutoFeatureExtractor.from_pretrained()"),Sso=o(" class method."),Rso=l(),mA=a("p"),Pso=o("This class cannot be instantiated directly using "),Wte=a("code"),Bso=o("__init__()"),Iso=o(" (throws an error)."),qso=l(),Qe=a("div"),F(gA.$$.fragment),Nso=l(),Hte=a("p"),jso=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Dso=l(),wa=a("p"),Gso=o("The feature extractor class to instantiate is selected based on the "),Ute=a("code"),Oso=o("model_type"),Vso=o(` property of the config object
(either passed as an argument or loaded from `),Jte=a("code"),Xso=o("pretrained_model_name_or_path"),zso=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Yte=a("code"),Qso=o("pretrained_model_name_or_path"),Wso=o(":"),Hso=l(),ae=a("ul"),Yg=a("li"),Kte=a("strong"),Uso=o("beit"),Jso=o(" \u2014 "),YP=a("a"),Yso=o("BeitFeatureExtractor"),Kso=o(" (BEiT model)"),Zso=l(),Kg=a("li"),Zte=a("strong"),elo=o("clip"),olo=o(" \u2014 "),KP=a("a"),rlo=o("CLIPFeatureExtractor"),tlo=o(" (CLIP model)"),alo=l(),Zg=a("li"),eae=a("strong"),nlo=o("convnext"),slo=o(" \u2014 "),ZP=a("a"),llo=o("ConvNextFeatureExtractor"),ilo=o(" (ConvNext model)"),dlo=l(),eh=a("li"),oae=a("strong"),clo=o("data2vec-audio"),flo=o(" \u2014 "),eB=a("a"),mlo=o("Wav2Vec2FeatureExtractor"),glo=o(" (Data2VecAudio model)"),hlo=l(),oh=a("li"),rae=a("strong"),plo=o("data2vec-vision"),ulo=o(" \u2014 "),oB=a("a"),_lo=o("BeitFeatureExtractor"),blo=o(" (Data2VecVision model)"),vlo=l(),rh=a("li"),tae=a("strong"),Flo=o("deit"),Tlo=o(" \u2014 "),rB=a("a"),Mlo=o("DeiTFeatureExtractor"),Elo=o(" (DeiT model)"),Clo=l(),th=a("li"),aae=a("strong"),wlo=o("detr"),Alo=o(" \u2014 "),tB=a("a"),ylo=o("DetrFeatureExtractor"),Llo=o(" (DETR model)"),xlo=l(),ah=a("li"),nae=a("strong"),$lo=o("dpt"),klo=o(" \u2014 "),aB=a("a"),Slo=o("DPTFeatureExtractor"),Rlo=o(" (DPT model)"),Plo=l(),nh=a("li"),sae=a("strong"),Blo=o("glpn"),Ilo=o(" \u2014 "),nB=a("a"),qlo=o("GLPNFeatureExtractor"),Nlo=o(" (GLPN model)"),jlo=l(),sh=a("li"),lae=a("strong"),Dlo=o("hubert"),Glo=o(" \u2014 "),sB=a("a"),Olo=o("Wav2Vec2FeatureExtractor"),Vlo=o(" (Hubert model)"),Xlo=l(),lh=a("li"),iae=a("strong"),zlo=o("layoutlmv2"),Qlo=o(" \u2014 "),lB=a("a"),Wlo=o("LayoutLMv2FeatureExtractor"),Hlo=o(" (LayoutLMv2 model)"),Ulo=l(),ih=a("li"),dae=a("strong"),Jlo=o("maskformer"),Ylo=o(" \u2014 "),iB=a("a"),Klo=o("MaskFormerFeatureExtractor"),Zlo=o(" (MaskFormer model)"),eio=l(),dh=a("li"),cae=a("strong"),oio=o("perceiver"),rio=o(" \u2014 "),dB=a("a"),tio=o("PerceiverFeatureExtractor"),aio=o(" (Perceiver model)"),nio=l(),ch=a("li"),fae=a("strong"),sio=o("poolformer"),lio=o(" \u2014 "),cB=a("a"),iio=o("PoolFormerFeatureExtractor"),dio=o(" (PoolFormer model)"),cio=l(),fh=a("li"),mae=a("strong"),fio=o("regnet"),mio=o(" \u2014 "),fB=a("a"),gio=o("ConvNextFeatureExtractor"),hio=o(" (RegNet model)"),pio=l(),mh=a("li"),gae=a("strong"),uio=o("resnet"),_io=o(" \u2014 "),mB=a("a"),bio=o("ConvNextFeatureExtractor"),vio=o(" (ResNet model)"),Fio=l(),gh=a("li"),hae=a("strong"),Tio=o("segformer"),Mio=o(" \u2014 "),gB=a("a"),Eio=o("SegformerFeatureExtractor"),Cio=o(" (SegFormer model)"),wio=l(),hh=a("li"),pae=a("strong"),Aio=o("speech_to_text"),yio=o(" \u2014 "),hB=a("a"),Lio=o("Speech2TextFeatureExtractor"),xio=o(" (Speech2Text model)"),$io=l(),ph=a("li"),uae=a("strong"),kio=o("swin"),Sio=o(" \u2014 "),pB=a("a"),Rio=o("ViTFeatureExtractor"),Pio=o(" (Swin model)"),Bio=l(),uh=a("li"),_ae=a("strong"),Iio=o("van"),qio=o(" \u2014 "),uB=a("a"),Nio=o("ConvNextFeatureExtractor"),jio=o(" (VAN model)"),Dio=l(),_h=a("li"),bae=a("strong"),Gio=o("vit"),Oio=o(" \u2014 "),_B=a("a"),Vio=o("ViTFeatureExtractor"),Xio=o(" (ViT model)"),zio=l(),bh=a("li"),vae=a("strong"),Qio=o("vit_mae"),Wio=o(" \u2014 "),bB=a("a"),Hio=o("ViTFeatureExtractor"),Uio=o(" (ViTMAE model)"),Jio=l(),vh=a("li"),Fae=a("strong"),Yio=o("wav2vec2"),Kio=o(" \u2014 "),vB=a("a"),Zio=o("Wav2Vec2FeatureExtractor"),edo=o(" (Wav2Vec2 model)"),odo=l(),Fh=a("li"),Tae=a("strong"),rdo=o("yolos"),tdo=o(" \u2014 "),FB=a("a"),ado=o("YolosFeatureExtractor"),ndo=o(" (YOLOS model)"),sdo=l(),F(Th.$$.fragment),ldo=l(),F(Mh.$$.fragment),ido=l(),Eh=a("div"),F(hA.$$.fragment),ddo=l(),Mae=a("p"),cdo=o("Register a new feature extractor for this class."),WBe=l(),Fi=a("h2"),Ch=a("a"),Eae=a("span"),F(pA.$$.fragment),fdo=l(),Cae=a("span"),mdo=o("AutoProcessor"),HBe=l(),yo=a("div"),F(uA.$$.fragment),gdo=l(),_A=a("p"),hdo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),TB=a("a"),pdo=o("AutoProcessor.from_pretrained()"),udo=o(" class method."),_do=l(),bA=a("p"),bdo=o("This class cannot be instantiated directly using "),wae=a("code"),vdo=o("__init__()"),Fdo=o(" (throws an error)."),Tdo=l(),We=a("div"),F(vA.$$.fragment),Mdo=l(),Aae=a("p"),Edo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Cdo=l(),Ti=a("p"),wdo=o("The processor class to instantiate is selected based on the "),yae=a("code"),Ado=o("model_type"),ydo=o(` property of the config object (either
passed as an argument or loaded from `),Lae=a("code"),Ldo=o("pretrained_model_name_or_path"),xdo=o(" if possible):"),$do=l(),be=a("ul"),wh=a("li"),xae=a("strong"),kdo=o("clip"),Sdo=o(" \u2014 "),MB=a("a"),Rdo=o("CLIPProcessor"),Pdo=o(" (CLIP model)"),Bdo=l(),Ah=a("li"),$ae=a("strong"),Ido=o("layoutlmv2"),qdo=o(" \u2014 "),EB=a("a"),Ndo=o("LayoutLMv2Processor"),jdo=o(" (LayoutLMv2 model)"),Ddo=l(),yh=a("li"),kae=a("strong"),Gdo=o("layoutxlm"),Odo=o(" \u2014 "),CB=a("a"),Vdo=o("LayoutXLMProcessor"),Xdo=o(" (LayoutXLM model)"),zdo=l(),Lh=a("li"),Sae=a("strong"),Qdo=o("sew"),Wdo=o(" \u2014 "),wB=a("a"),Hdo=o("Wav2Vec2Processor"),Udo=o(" (SEW model)"),Jdo=l(),xh=a("li"),Rae=a("strong"),Ydo=o("sew-d"),Kdo=o(" \u2014 "),AB=a("a"),Zdo=o("Wav2Vec2Processor"),eco=o(" (SEW-D model)"),oco=l(),$h=a("li"),Pae=a("strong"),rco=o("speech_to_text"),tco=o(" \u2014 "),yB=a("a"),aco=o("Speech2TextProcessor"),nco=o(" (Speech2Text model)"),sco=l(),kh=a("li"),Bae=a("strong"),lco=o("speech_to_text_2"),ico=o(" \u2014 "),LB=a("a"),dco=o("Speech2Text2Processor"),cco=o(" (Speech2Text2 model)"),fco=l(),Sh=a("li"),Iae=a("strong"),mco=o("trocr"),gco=o(" \u2014 "),xB=a("a"),hco=o("TrOCRProcessor"),pco=o(" (TrOCR model)"),uco=l(),Rh=a("li"),qae=a("strong"),_co=o("unispeech"),bco=o(" \u2014 "),$B=a("a"),vco=o("Wav2Vec2Processor"),Fco=o(" (UniSpeech model)"),Tco=l(),Ph=a("li"),Nae=a("strong"),Mco=o("unispeech-sat"),Eco=o(" \u2014 "),kB=a("a"),Cco=o("Wav2Vec2Processor"),wco=o(" (UniSpeechSat model)"),Aco=l(),Bh=a("li"),jae=a("strong"),yco=o("vilt"),Lco=o(" \u2014 "),SB=a("a"),xco=o("ViltProcessor"),$co=o(" (ViLT model)"),kco=l(),Ih=a("li"),Dae=a("strong"),Sco=o("vision-text-dual-encoder"),Rco=o(" \u2014 "),RB=a("a"),Pco=o("VisionTextDualEncoderProcessor"),Bco=o(" (VisionTextDualEncoder model)"),Ico=l(),qh=a("li"),Gae=a("strong"),qco=o("wav2vec2"),Nco=o(" \u2014 "),PB=a("a"),jco=o("Wav2Vec2Processor"),Dco=o(" (Wav2Vec2 model)"),Gco=l(),Nh=a("li"),Oae=a("strong"),Oco=o("wavlm"),Vco=o(" \u2014 "),BB=a("a"),Xco=o("Wav2Vec2Processor"),zco=o(" (WavLM model)"),Qco=l(),F(jh.$$.fragment),Wco=l(),F(Dh.$$.fragment),Hco=l(),Gh=a("div"),F(FA.$$.fragment),Uco=l(),Vae=a("p"),Jco=o("Register a new processor for this class."),UBe=l(),Mi=a("h2"),Oh=a("a"),Xae=a("span"),F(TA.$$.fragment),Yco=l(),zae=a("span"),Kco=o("AutoModel"),JBe=l(),Lo=a("div"),F(MA.$$.fragment),Zco=l(),Ei=a("p"),efo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IB=a("a"),ofo=o("from_pretrained()"),rfo=o(" class method or the "),qB=a("a"),tfo=o("from_config()"),afo=o(` class
method.`),nfo=l(),EA=a("p"),sfo=o("This class cannot be instantiated directly using "),Qae=a("code"),lfo=o("__init__()"),ifo=o(" (throws an error)."),dfo=l(),ot=a("div"),F(CA.$$.fragment),cfo=l(),Wae=a("p"),ffo=o("Instantiates one of the base model classes of the library from a configuration."),mfo=l(),Ci=a("p"),gfo=o(`Note:
Loading a model from its configuration file does `),Hae=a("strong"),hfo=o("not"),pfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NB=a("a"),ufo=o("from_pretrained()"),_fo=o(" to load the model weights."),bfo=l(),F(Vh.$$.fragment),vfo=l(),He=a("div"),F(wA.$$.fragment),Ffo=l(),Uae=a("p"),Tfo=o("Instantiate one of the base model classes of the library from a pretrained model."),Mfo=l(),Aa=a("p"),Efo=o("The model class to instantiate is selected based on the "),Jae=a("code"),Cfo=o("model_type"),wfo=o(` property of the config object (either
passed as an argument or loaded from `),Yae=a("code"),Afo=o("pretrained_model_name_or_path"),yfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kae=a("code"),Lfo=o("pretrained_model_name_or_path"),xfo=o(":"),$fo=l(),x=a("ul"),Xh=a("li"),Zae=a("strong"),kfo=o("albert"),Sfo=o(" \u2014 "),jB=a("a"),Rfo=o("AlbertModel"),Pfo=o(" (ALBERT model)"),Bfo=l(),zh=a("li"),ene=a("strong"),Ifo=o("bart"),qfo=o(" \u2014 "),DB=a("a"),Nfo=o("BartModel"),jfo=o(" (BART model)"),Dfo=l(),Qh=a("li"),one=a("strong"),Gfo=o("beit"),Ofo=o(" \u2014 "),GB=a("a"),Vfo=o("BeitModel"),Xfo=o(" (BEiT model)"),zfo=l(),Wh=a("li"),rne=a("strong"),Qfo=o("bert"),Wfo=o(" \u2014 "),OB=a("a"),Hfo=o("BertModel"),Ufo=o(" (BERT model)"),Jfo=l(),Hh=a("li"),tne=a("strong"),Yfo=o("bert-generation"),Kfo=o(" \u2014 "),VB=a("a"),Zfo=o("BertGenerationEncoder"),emo=o(" (Bert Generation model)"),omo=l(),Uh=a("li"),ane=a("strong"),rmo=o("big_bird"),tmo=o(" \u2014 "),XB=a("a"),amo=o("BigBirdModel"),nmo=o(" (BigBird model)"),smo=l(),Jh=a("li"),nne=a("strong"),lmo=o("bigbird_pegasus"),imo=o(" \u2014 "),zB=a("a"),dmo=o("BigBirdPegasusModel"),cmo=o(" (BigBirdPegasus model)"),fmo=l(),Yh=a("li"),sne=a("strong"),mmo=o("blenderbot"),gmo=o(" \u2014 "),QB=a("a"),hmo=o("BlenderbotModel"),pmo=o(" (Blenderbot model)"),umo=l(),Kh=a("li"),lne=a("strong"),_mo=o("blenderbot-small"),bmo=o(" \u2014 "),WB=a("a"),vmo=o("BlenderbotSmallModel"),Fmo=o(" (BlenderbotSmall model)"),Tmo=l(),Zh=a("li"),ine=a("strong"),Mmo=o("camembert"),Emo=o(" \u2014 "),HB=a("a"),Cmo=o("CamembertModel"),wmo=o(" (CamemBERT model)"),Amo=l(),ep=a("li"),dne=a("strong"),ymo=o("canine"),Lmo=o(" \u2014 "),UB=a("a"),xmo=o("CanineModel"),$mo=o(" (Canine model)"),kmo=l(),op=a("li"),cne=a("strong"),Smo=o("clip"),Rmo=o(" \u2014 "),JB=a("a"),Pmo=o("CLIPModel"),Bmo=o(" (CLIP model)"),Imo=l(),rp=a("li"),fne=a("strong"),qmo=o("convbert"),Nmo=o(" \u2014 "),YB=a("a"),jmo=o("ConvBertModel"),Dmo=o(" (ConvBERT model)"),Gmo=l(),tp=a("li"),mne=a("strong"),Omo=o("convnext"),Vmo=o(" \u2014 "),KB=a("a"),Xmo=o("ConvNextModel"),zmo=o(" (ConvNext model)"),Qmo=l(),ap=a("li"),gne=a("strong"),Wmo=o("ctrl"),Hmo=o(" \u2014 "),ZB=a("a"),Umo=o("CTRLModel"),Jmo=o(" (CTRL model)"),Ymo=l(),np=a("li"),hne=a("strong"),Kmo=o("data2vec-audio"),Zmo=o(" \u2014 "),eI=a("a"),ego=o("Data2VecAudioModel"),ogo=o(" (Data2VecAudio model)"),rgo=l(),sp=a("li"),pne=a("strong"),tgo=o("data2vec-text"),ago=o(" \u2014 "),oI=a("a"),ngo=o("Data2VecTextModel"),sgo=o(" (Data2VecText model)"),lgo=l(),lp=a("li"),une=a("strong"),igo=o("data2vec-vision"),dgo=o(" \u2014 "),rI=a("a"),cgo=o("Data2VecVisionModel"),fgo=o(" (Data2VecVision model)"),mgo=l(),ip=a("li"),_ne=a("strong"),ggo=o("deberta"),hgo=o(" \u2014 "),tI=a("a"),pgo=o("DebertaModel"),ugo=o(" (DeBERTa model)"),_go=l(),dp=a("li"),bne=a("strong"),bgo=o("deberta-v2"),vgo=o(" \u2014 "),aI=a("a"),Fgo=o("DebertaV2Model"),Tgo=o(" (DeBERTa-v2 model)"),Mgo=l(),cp=a("li"),vne=a("strong"),Ego=o("decision_transformer"),Cgo=o(" \u2014 "),nI=a("a"),wgo=o("DecisionTransformerModel"),Ago=o(" (Decision Transformer model)"),ygo=l(),fp=a("li"),Fne=a("strong"),Lgo=o("deit"),xgo=o(" \u2014 "),sI=a("a"),$go=o("DeiTModel"),kgo=o(" (DeiT model)"),Sgo=l(),mp=a("li"),Tne=a("strong"),Rgo=o("detr"),Pgo=o(" \u2014 "),lI=a("a"),Bgo=o("DetrModel"),Igo=o(" (DETR model)"),qgo=l(),gp=a("li"),Mne=a("strong"),Ngo=o("distilbert"),jgo=o(" \u2014 "),iI=a("a"),Dgo=o("DistilBertModel"),Ggo=o(" (DistilBERT model)"),Ogo=l(),hp=a("li"),Ene=a("strong"),Vgo=o("dpr"),Xgo=o(" \u2014 "),dI=a("a"),zgo=o("DPRQuestionEncoder"),Qgo=o(" (DPR model)"),Wgo=l(),pp=a("li"),Cne=a("strong"),Hgo=o("dpt"),Ugo=o(" \u2014 "),cI=a("a"),Jgo=o("DPTModel"),Ygo=o(" (DPT model)"),Kgo=l(),up=a("li"),wne=a("strong"),Zgo=o("electra"),eho=o(" \u2014 "),fI=a("a"),oho=o("ElectraModel"),rho=o(" (ELECTRA model)"),tho=l(),_p=a("li"),Ane=a("strong"),aho=o("flaubert"),nho=o(" \u2014 "),mI=a("a"),sho=o("FlaubertModel"),lho=o(" (FlauBERT model)"),iho=l(),bp=a("li"),yne=a("strong"),dho=o("fnet"),cho=o(" \u2014 "),gI=a("a"),fho=o("FNetModel"),mho=o(" (FNet model)"),gho=l(),vp=a("li"),Lne=a("strong"),hho=o("fsmt"),pho=o(" \u2014 "),hI=a("a"),uho=o("FSMTModel"),_ho=o(" (FairSeq Machine-Translation model)"),bho=l(),Rs=a("li"),xne=a("strong"),vho=o("funnel"),Fho=o(" \u2014 "),pI=a("a"),Tho=o("FunnelModel"),Mho=o(" or "),uI=a("a"),Eho=o("FunnelBaseModel"),Cho=o(" (Funnel Transformer model)"),who=l(),Fp=a("li"),$ne=a("strong"),Aho=o("glpn"),yho=o(" \u2014 "),_I=a("a"),Lho=o("GLPNModel"),xho=o(" (GLPN model)"),$ho=l(),Tp=a("li"),kne=a("strong"),kho=o("gpt2"),Sho=o(" \u2014 "),bI=a("a"),Rho=o("GPT2Model"),Pho=o(" (OpenAI GPT-2 model)"),Bho=l(),Mp=a("li"),Sne=a("strong"),Iho=o("gpt_neo"),qho=o(" \u2014 "),vI=a("a"),Nho=o("GPTNeoModel"),jho=o(" (GPT Neo model)"),Dho=l(),Ep=a("li"),Rne=a("strong"),Gho=o("gptj"),Oho=o(" \u2014 "),FI=a("a"),Vho=o("GPTJModel"),Xho=o(" (GPT-J model)"),zho=l(),Cp=a("li"),Pne=a("strong"),Qho=o("hubert"),Who=o(" \u2014 "),TI=a("a"),Hho=o("HubertModel"),Uho=o(" (Hubert model)"),Jho=l(),wp=a("li"),Bne=a("strong"),Yho=o("ibert"),Kho=o(" \u2014 "),MI=a("a"),Zho=o("IBertModel"),epo=o(" (I-BERT model)"),opo=l(),Ap=a("li"),Ine=a("strong"),rpo=o("imagegpt"),tpo=o(" \u2014 "),EI=a("a"),apo=o("ImageGPTModel"),npo=o(" (ImageGPT model)"),spo=l(),yp=a("li"),qne=a("strong"),lpo=o("layoutlm"),ipo=o(" \u2014 "),CI=a("a"),dpo=o("LayoutLMModel"),cpo=o(" (LayoutLM model)"),fpo=l(),Lp=a("li"),Nne=a("strong"),mpo=o("layoutlmv2"),gpo=o(" \u2014 "),wI=a("a"),hpo=o("LayoutLMv2Model"),ppo=o(" (LayoutLMv2 model)"),upo=l(),xp=a("li"),jne=a("strong"),_po=o("led"),bpo=o(" \u2014 "),AI=a("a"),vpo=o("LEDModel"),Fpo=o(" (LED model)"),Tpo=l(),$p=a("li"),Dne=a("strong"),Mpo=o("longformer"),Epo=o(" \u2014 "),yI=a("a"),Cpo=o("LongformerModel"),wpo=o(" (Longformer model)"),Apo=l(),kp=a("li"),Gne=a("strong"),ypo=o("luke"),Lpo=o(" \u2014 "),LI=a("a"),xpo=o("LukeModel"),$po=o(" (LUKE model)"),kpo=l(),Sp=a("li"),One=a("strong"),Spo=o("lxmert"),Rpo=o(" \u2014 "),xI=a("a"),Ppo=o("LxmertModel"),Bpo=o(" (LXMERT model)"),Ipo=l(),Rp=a("li"),Vne=a("strong"),qpo=o("m2m_100"),Npo=o(" \u2014 "),$I=a("a"),jpo=o("M2M100Model"),Dpo=o(" (M2M100 model)"),Gpo=l(),Pp=a("li"),Xne=a("strong"),Opo=o("marian"),Vpo=o(" \u2014 "),kI=a("a"),Xpo=o("MarianModel"),zpo=o(" (Marian model)"),Qpo=l(),Bp=a("li"),zne=a("strong"),Wpo=o("maskformer"),Hpo=o(" \u2014 "),SI=a("a"),Upo=o("MaskFormerModel"),Jpo=o(" (MaskFormer model)"),Ypo=l(),Ip=a("li"),Qne=a("strong"),Kpo=o("mbart"),Zpo=o(" \u2014 "),RI=a("a"),euo=o("MBartModel"),ouo=o(" (mBART model)"),ruo=l(),qp=a("li"),Wne=a("strong"),tuo=o("megatron-bert"),auo=o(" \u2014 "),PI=a("a"),nuo=o("MegatronBertModel"),suo=o(" (MegatronBert model)"),luo=l(),Np=a("li"),Hne=a("strong"),iuo=o("mobilebert"),duo=o(" \u2014 "),BI=a("a"),cuo=o("MobileBertModel"),fuo=o(" (MobileBERT model)"),muo=l(),jp=a("li"),Une=a("strong"),guo=o("mpnet"),huo=o(" \u2014 "),II=a("a"),puo=o("MPNetModel"),uuo=o(" (MPNet model)"),_uo=l(),Dp=a("li"),Jne=a("strong"),buo=o("mt5"),vuo=o(" \u2014 "),qI=a("a"),Fuo=o("MT5Model"),Tuo=o(" (mT5 model)"),Muo=l(),Gp=a("li"),Yne=a("strong"),Euo=o("nystromformer"),Cuo=o(" \u2014 "),NI=a("a"),wuo=o("NystromformerModel"),Auo=o(" (Nystromformer model)"),yuo=l(),Op=a("li"),Kne=a("strong"),Luo=o("openai-gpt"),xuo=o(" \u2014 "),jI=a("a"),$uo=o("OpenAIGPTModel"),kuo=o(" (OpenAI GPT model)"),Suo=l(),Vp=a("li"),Zne=a("strong"),Ruo=o("opt"),Puo=o(" \u2014 "),DI=a("a"),Buo=o("OPTModel"),Iuo=o(" (OPT model)"),quo=l(),Xp=a("li"),ese=a("strong"),Nuo=o("pegasus"),juo=o(" \u2014 "),GI=a("a"),Duo=o("PegasusModel"),Guo=o(" (Pegasus model)"),Ouo=l(),zp=a("li"),ose=a("strong"),Vuo=o("perceiver"),Xuo=o(" \u2014 "),OI=a("a"),zuo=o("PerceiverModel"),Quo=o(" (Perceiver model)"),Wuo=l(),Qp=a("li"),rse=a("strong"),Huo=o("plbart"),Uuo=o(" \u2014 "),VI=a("a"),Juo=o("PLBartModel"),Yuo=o(" (PLBart model)"),Kuo=l(),Wp=a("li"),tse=a("strong"),Zuo=o("poolformer"),e_o=o(" \u2014 "),XI=a("a"),o_o=o("PoolFormerModel"),r_o=o(" (PoolFormer model)"),t_o=l(),Hp=a("li"),ase=a("strong"),a_o=o("prophetnet"),n_o=o(" \u2014 "),zI=a("a"),s_o=o("ProphetNetModel"),l_o=o(" (ProphetNet model)"),i_o=l(),Up=a("li"),nse=a("strong"),d_o=o("qdqbert"),c_o=o(" \u2014 "),QI=a("a"),f_o=o("QDQBertModel"),m_o=o(" (QDQBert model)"),g_o=l(),Jp=a("li"),sse=a("strong"),h_o=o("reformer"),p_o=o(" \u2014 "),WI=a("a"),u_o=o("ReformerModel"),__o=o(" (Reformer model)"),b_o=l(),Yp=a("li"),lse=a("strong"),v_o=o("regnet"),F_o=o(" \u2014 "),HI=a("a"),T_o=o("RegNetModel"),M_o=o(" (RegNet model)"),E_o=l(),Kp=a("li"),ise=a("strong"),C_o=o("rembert"),w_o=o(" \u2014 "),UI=a("a"),A_o=o("RemBertModel"),y_o=o(" (RemBERT model)"),L_o=l(),Zp=a("li"),dse=a("strong"),x_o=o("resnet"),$_o=o(" \u2014 "),JI=a("a"),k_o=o("ResNetModel"),S_o=o(" (ResNet model)"),R_o=l(),eu=a("li"),cse=a("strong"),P_o=o("retribert"),B_o=o(" \u2014 "),YI=a("a"),I_o=o("RetriBertModel"),q_o=o(" (RetriBERT model)"),N_o=l(),ou=a("li"),fse=a("strong"),j_o=o("roberta"),D_o=o(" \u2014 "),KI=a("a"),G_o=o("RobertaModel"),O_o=o(" (RoBERTa model)"),V_o=l(),ru=a("li"),mse=a("strong"),X_o=o("roformer"),z_o=o(" \u2014 "),ZI=a("a"),Q_o=o("RoFormerModel"),W_o=o(" (RoFormer model)"),H_o=l(),tu=a("li"),gse=a("strong"),U_o=o("segformer"),J_o=o(" \u2014 "),eq=a("a"),Y_o=o("SegformerModel"),K_o=o(" (SegFormer model)"),Z_o=l(),au=a("li"),hse=a("strong"),e1o=o("sew"),o1o=o(" \u2014 "),oq=a("a"),r1o=o("SEWModel"),t1o=o(" (SEW model)"),a1o=l(),nu=a("li"),pse=a("strong"),n1o=o("sew-d"),s1o=o(" \u2014 "),rq=a("a"),l1o=o("SEWDModel"),i1o=o(" (SEW-D model)"),d1o=l(),su=a("li"),use=a("strong"),c1o=o("speech_to_text"),f1o=o(" \u2014 "),tq=a("a"),m1o=o("Speech2TextModel"),g1o=o(" (Speech2Text model)"),h1o=l(),lu=a("li"),_se=a("strong"),p1o=o("splinter"),u1o=o(" \u2014 "),aq=a("a"),_1o=o("SplinterModel"),b1o=o(" (Splinter model)"),v1o=l(),iu=a("li"),bse=a("strong"),F1o=o("squeezebert"),T1o=o(" \u2014 "),nq=a("a"),M1o=o("SqueezeBertModel"),E1o=o(" (SqueezeBERT model)"),C1o=l(),du=a("li"),vse=a("strong"),w1o=o("swin"),A1o=o(" \u2014 "),sq=a("a"),y1o=o("SwinModel"),L1o=o(" (Swin model)"),x1o=l(),cu=a("li"),Fse=a("strong"),$1o=o("t5"),k1o=o(" \u2014 "),lq=a("a"),S1o=o("T5Model"),R1o=o(" (T5 model)"),P1o=l(),fu=a("li"),Tse=a("strong"),B1o=o("tapas"),I1o=o(" \u2014 "),iq=a("a"),q1o=o("TapasModel"),N1o=o(" (TAPAS model)"),j1o=l(),mu=a("li"),Mse=a("strong"),D1o=o("transfo-xl"),G1o=o(" \u2014 "),dq=a("a"),O1o=o("TransfoXLModel"),V1o=o(" (Transformer-XL model)"),X1o=l(),gu=a("li"),Ese=a("strong"),z1o=o("unispeech"),Q1o=o(" \u2014 "),cq=a("a"),W1o=o("UniSpeechModel"),H1o=o(" (UniSpeech model)"),U1o=l(),hu=a("li"),Cse=a("strong"),J1o=o("unispeech-sat"),Y1o=o(" \u2014 "),fq=a("a"),K1o=o("UniSpeechSatModel"),Z1o=o(" (UniSpeechSat model)"),e8o=l(),pu=a("li"),wse=a("strong"),o8o=o("van"),r8o=o(" \u2014 "),mq=a("a"),t8o=o("VanModel"),a8o=o(" (VAN model)"),n8o=l(),uu=a("li"),Ase=a("strong"),s8o=o("vilt"),l8o=o(" \u2014 "),gq=a("a"),i8o=o("ViltModel"),d8o=o(" (ViLT model)"),c8o=l(),_u=a("li"),yse=a("strong"),f8o=o("vision-text-dual-encoder"),m8o=o(" \u2014 "),hq=a("a"),g8o=o("VisionTextDualEncoderModel"),h8o=o(" (VisionTextDualEncoder model)"),p8o=l(),bu=a("li"),Lse=a("strong"),u8o=o("visual_bert"),_8o=o(" \u2014 "),pq=a("a"),b8o=o("VisualBertModel"),v8o=o(" (VisualBert model)"),F8o=l(),vu=a("li"),xse=a("strong"),T8o=o("vit"),M8o=o(" \u2014 "),uq=a("a"),E8o=o("ViTModel"),C8o=o(" (ViT model)"),w8o=l(),Fu=a("li"),$se=a("strong"),A8o=o("vit_mae"),y8o=o(" \u2014 "),_q=a("a"),L8o=o("ViTMAEModel"),x8o=o(" (ViTMAE model)"),$8o=l(),Tu=a("li"),kse=a("strong"),k8o=o("wav2vec2"),S8o=o(" \u2014 "),bq=a("a"),R8o=o("Wav2Vec2Model"),P8o=o(" (Wav2Vec2 model)"),B8o=l(),Mu=a("li"),Sse=a("strong"),I8o=o("wavlm"),q8o=o(" \u2014 "),vq=a("a"),N8o=o("WavLMModel"),j8o=o(" (WavLM model)"),D8o=l(),Eu=a("li"),Rse=a("strong"),G8o=o("xglm"),O8o=o(" \u2014 "),Fq=a("a"),V8o=o("XGLMModel"),X8o=o(" (XGLM model)"),z8o=l(),Cu=a("li"),Pse=a("strong"),Q8o=o("xlm"),W8o=o(" \u2014 "),Tq=a("a"),H8o=o("XLMModel"),U8o=o(" (XLM model)"),J8o=l(),wu=a("li"),Bse=a("strong"),Y8o=o("xlm-prophetnet"),K8o=o(" \u2014 "),Mq=a("a"),Z8o=o("XLMProphetNetModel"),ebo=o(" (XLMProphetNet model)"),obo=l(),Au=a("li"),Ise=a("strong"),rbo=o("xlm-roberta"),tbo=o(" \u2014 "),Eq=a("a"),abo=o("XLMRobertaModel"),nbo=o(" (XLM-RoBERTa model)"),sbo=l(),yu=a("li"),qse=a("strong"),lbo=o("xlm-roberta-xl"),ibo=o(" \u2014 "),Cq=a("a"),dbo=o("XLMRobertaXLModel"),cbo=o(" (XLM-RoBERTa-XL model)"),fbo=l(),Lu=a("li"),Nse=a("strong"),mbo=o("xlnet"),gbo=o(" \u2014 "),wq=a("a"),hbo=o("XLNetModel"),pbo=o(" (XLNet model)"),ubo=l(),xu=a("li"),jse=a("strong"),_bo=o("yolos"),bbo=o(" \u2014 "),Aq=a("a"),vbo=o("YolosModel"),Fbo=o(" (YOLOS model)"),Tbo=l(),$u=a("li"),Dse=a("strong"),Mbo=o("yoso"),Ebo=o(" \u2014 "),yq=a("a"),Cbo=o("YosoModel"),wbo=o(" (YOSO model)"),Abo=l(),ku=a("p"),ybo=o("The model is set in evaluation mode by default using "),Gse=a("code"),Lbo=o("model.eval()"),xbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ose=a("code"),$bo=o("model.train()"),kbo=l(),F(Su.$$.fragment),YBe=l(),wi=a("h2"),Ru=a("a"),Vse=a("span"),F(AA.$$.fragment),Sbo=l(),Xse=a("span"),Rbo=o("AutoModelForPreTraining"),KBe=l(),xo=a("div"),F(yA.$$.fragment),Pbo=l(),Ai=a("p"),Bbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Lq=a("a"),Ibo=o("from_pretrained()"),qbo=o(" class method or the "),xq=a("a"),Nbo=o("from_config()"),jbo=o(` class
method.`),Dbo=l(),LA=a("p"),Gbo=o("This class cannot be instantiated directly using "),zse=a("code"),Obo=o("__init__()"),Vbo=o(" (throws an error)."),Xbo=l(),rt=a("div"),F(xA.$$.fragment),zbo=l(),Qse=a("p"),Qbo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Wbo=l(),yi=a("p"),Hbo=o(`Note:
Loading a model from its configuration file does `),Wse=a("strong"),Ubo=o("not"),Jbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$q=a("a"),Ybo=o("from_pretrained()"),Kbo=o(" to load the model weights."),Zbo=l(),F(Pu.$$.fragment),e2o=l(),Ue=a("div"),F($A.$$.fragment),o2o=l(),Hse=a("p"),r2o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),t2o=l(),ya=a("p"),a2o=o("The model class to instantiate is selected based on the "),Use=a("code"),n2o=o("model_type"),s2o=o(` property of the config object (either
passed as an argument or loaded from `),Jse=a("code"),l2o=o("pretrained_model_name_or_path"),i2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yse=a("code"),d2o=o("pretrained_model_name_or_path"),c2o=o(":"),f2o=l(),G=a("ul"),Bu=a("li"),Kse=a("strong"),m2o=o("albert"),g2o=o(" \u2014 "),kq=a("a"),h2o=o("AlbertForPreTraining"),p2o=o(" (ALBERT model)"),u2o=l(),Iu=a("li"),Zse=a("strong"),_2o=o("bart"),b2o=o(" \u2014 "),Sq=a("a"),v2o=o("BartForConditionalGeneration"),F2o=o(" (BART model)"),T2o=l(),qu=a("li"),ele=a("strong"),M2o=o("bert"),E2o=o(" \u2014 "),Rq=a("a"),C2o=o("BertForPreTraining"),w2o=o(" (BERT model)"),A2o=l(),Nu=a("li"),ole=a("strong"),y2o=o("big_bird"),L2o=o(" \u2014 "),Pq=a("a"),x2o=o("BigBirdForPreTraining"),$2o=o(" (BigBird model)"),k2o=l(),ju=a("li"),rle=a("strong"),S2o=o("camembert"),R2o=o(" \u2014 "),Bq=a("a"),P2o=o("CamembertForMaskedLM"),B2o=o(" (CamemBERT model)"),I2o=l(),Du=a("li"),tle=a("strong"),q2o=o("ctrl"),N2o=o(" \u2014 "),Iq=a("a"),j2o=o("CTRLLMHeadModel"),D2o=o(" (CTRL model)"),G2o=l(),Gu=a("li"),ale=a("strong"),O2o=o("data2vec-text"),V2o=o(" \u2014 "),qq=a("a"),X2o=o("Data2VecTextForMaskedLM"),z2o=o(" (Data2VecText model)"),Q2o=l(),Ou=a("li"),nle=a("strong"),W2o=o("deberta"),H2o=o(" \u2014 "),Nq=a("a"),U2o=o("DebertaForMaskedLM"),J2o=o(" (DeBERTa model)"),Y2o=l(),Vu=a("li"),sle=a("strong"),K2o=o("deberta-v2"),Z2o=o(" \u2014 "),jq=a("a"),evo=o("DebertaV2ForMaskedLM"),ovo=o(" (DeBERTa-v2 model)"),rvo=l(),Xu=a("li"),lle=a("strong"),tvo=o("distilbert"),avo=o(" \u2014 "),Dq=a("a"),nvo=o("DistilBertForMaskedLM"),svo=o(" (DistilBERT model)"),lvo=l(),zu=a("li"),ile=a("strong"),ivo=o("electra"),dvo=o(" \u2014 "),Gq=a("a"),cvo=o("ElectraForPreTraining"),fvo=o(" (ELECTRA model)"),mvo=l(),Qu=a("li"),dle=a("strong"),gvo=o("flaubert"),hvo=o(" \u2014 "),Oq=a("a"),pvo=o("FlaubertWithLMHeadModel"),uvo=o(" (FlauBERT model)"),_vo=l(),Wu=a("li"),cle=a("strong"),bvo=o("fnet"),vvo=o(" \u2014 "),Vq=a("a"),Fvo=o("FNetForPreTraining"),Tvo=o(" (FNet model)"),Mvo=l(),Hu=a("li"),fle=a("strong"),Evo=o("fsmt"),Cvo=o(" \u2014 "),Xq=a("a"),wvo=o("FSMTForConditionalGeneration"),Avo=o(" (FairSeq Machine-Translation model)"),yvo=l(),Uu=a("li"),mle=a("strong"),Lvo=o("funnel"),xvo=o(" \u2014 "),zq=a("a"),$vo=o("FunnelForPreTraining"),kvo=o(" (Funnel Transformer model)"),Svo=l(),Ju=a("li"),gle=a("strong"),Rvo=o("gpt2"),Pvo=o(" \u2014 "),Qq=a("a"),Bvo=o("GPT2LMHeadModel"),Ivo=o(" (OpenAI GPT-2 model)"),qvo=l(),Yu=a("li"),hle=a("strong"),Nvo=o("ibert"),jvo=o(" \u2014 "),Wq=a("a"),Dvo=o("IBertForMaskedLM"),Gvo=o(" (I-BERT model)"),Ovo=l(),Ku=a("li"),ple=a("strong"),Vvo=o("layoutlm"),Xvo=o(" \u2014 "),Hq=a("a"),zvo=o("LayoutLMForMaskedLM"),Qvo=o(" (LayoutLM model)"),Wvo=l(),Zu=a("li"),ule=a("strong"),Hvo=o("longformer"),Uvo=o(" \u2014 "),Uq=a("a"),Jvo=o("LongformerForMaskedLM"),Yvo=o(" (Longformer model)"),Kvo=l(),e_=a("li"),_le=a("strong"),Zvo=o("lxmert"),eFo=o(" \u2014 "),Jq=a("a"),oFo=o("LxmertForPreTraining"),rFo=o(" (LXMERT model)"),tFo=l(),o_=a("li"),ble=a("strong"),aFo=o("megatron-bert"),nFo=o(" \u2014 "),Yq=a("a"),sFo=o("MegatronBertForPreTraining"),lFo=o(" (MegatronBert model)"),iFo=l(),r_=a("li"),vle=a("strong"),dFo=o("mobilebert"),cFo=o(" \u2014 "),Kq=a("a"),fFo=o("MobileBertForPreTraining"),mFo=o(" (MobileBERT model)"),gFo=l(),t_=a("li"),Fle=a("strong"),hFo=o("mpnet"),pFo=o(" \u2014 "),Zq=a("a"),uFo=o("MPNetForMaskedLM"),_Fo=o(" (MPNet model)"),bFo=l(),a_=a("li"),Tle=a("strong"),vFo=o("openai-gpt"),FFo=o(" \u2014 "),eN=a("a"),TFo=o("OpenAIGPTLMHeadModel"),MFo=o(" (OpenAI GPT model)"),EFo=l(),n_=a("li"),Mle=a("strong"),CFo=o("retribert"),wFo=o(" \u2014 "),oN=a("a"),AFo=o("RetriBertModel"),yFo=o(" (RetriBERT model)"),LFo=l(),s_=a("li"),Ele=a("strong"),xFo=o("roberta"),$Fo=o(" \u2014 "),rN=a("a"),kFo=o("RobertaForMaskedLM"),SFo=o(" (RoBERTa model)"),RFo=l(),l_=a("li"),Cle=a("strong"),PFo=o("squeezebert"),BFo=o(" \u2014 "),tN=a("a"),IFo=o("SqueezeBertForMaskedLM"),qFo=o(" (SqueezeBERT model)"),NFo=l(),i_=a("li"),wle=a("strong"),jFo=o("t5"),DFo=o(" \u2014 "),aN=a("a"),GFo=o("T5ForConditionalGeneration"),OFo=o(" (T5 model)"),VFo=l(),d_=a("li"),Ale=a("strong"),XFo=o("tapas"),zFo=o(" \u2014 "),nN=a("a"),QFo=o("TapasForMaskedLM"),WFo=o(" (TAPAS model)"),HFo=l(),c_=a("li"),yle=a("strong"),UFo=o("transfo-xl"),JFo=o(" \u2014 "),sN=a("a"),YFo=o("TransfoXLLMHeadModel"),KFo=o(" (Transformer-XL model)"),ZFo=l(),f_=a("li"),Lle=a("strong"),e0o=o("unispeech"),o0o=o(" \u2014 "),lN=a("a"),r0o=o("UniSpeechForPreTraining"),t0o=o(" (UniSpeech model)"),a0o=l(),m_=a("li"),xle=a("strong"),n0o=o("unispeech-sat"),s0o=o(" \u2014 "),iN=a("a"),l0o=o("UniSpeechSatForPreTraining"),i0o=o(" (UniSpeechSat model)"),d0o=l(),g_=a("li"),$le=a("strong"),c0o=o("visual_bert"),f0o=o(" \u2014 "),dN=a("a"),m0o=o("VisualBertForPreTraining"),g0o=o(" (VisualBert model)"),h0o=l(),h_=a("li"),kle=a("strong"),p0o=o("vit_mae"),u0o=o(" \u2014 "),cN=a("a"),_0o=o("ViTMAEForPreTraining"),b0o=o(" (ViTMAE model)"),v0o=l(),p_=a("li"),Sle=a("strong"),F0o=o("wav2vec2"),T0o=o(" \u2014 "),fN=a("a"),M0o=o("Wav2Vec2ForPreTraining"),E0o=o(" (Wav2Vec2 model)"),C0o=l(),u_=a("li"),Rle=a("strong"),w0o=o("xlm"),A0o=o(" \u2014 "),mN=a("a"),y0o=o("XLMWithLMHeadModel"),L0o=o(" (XLM model)"),x0o=l(),__=a("li"),Ple=a("strong"),$0o=o("xlm-roberta"),k0o=o(" \u2014 "),gN=a("a"),S0o=o("XLMRobertaForMaskedLM"),R0o=o(" (XLM-RoBERTa model)"),P0o=l(),b_=a("li"),Ble=a("strong"),B0o=o("xlm-roberta-xl"),I0o=o(" \u2014 "),hN=a("a"),q0o=o("XLMRobertaXLForMaskedLM"),N0o=o(" (XLM-RoBERTa-XL model)"),j0o=l(),v_=a("li"),Ile=a("strong"),D0o=o("xlnet"),G0o=o(" \u2014 "),pN=a("a"),O0o=o("XLNetLMHeadModel"),V0o=o(" (XLNet model)"),X0o=l(),F_=a("p"),z0o=o("The model is set in evaluation mode by default using "),qle=a("code"),Q0o=o("model.eval()"),W0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nle=a("code"),H0o=o("model.train()"),U0o=l(),F(T_.$$.fragment),ZBe=l(),Li=a("h2"),M_=a("a"),jle=a("span"),F(kA.$$.fragment),J0o=l(),Dle=a("span"),Y0o=o("AutoModelForCausalLM"),eIe=l(),$o=a("div"),F(SA.$$.fragment),K0o=l(),xi=a("p"),Z0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uN=a("a"),eTo=o("from_pretrained()"),oTo=o(" class method or the "),_N=a("a"),rTo=o("from_config()"),tTo=o(` class
method.`),aTo=l(),RA=a("p"),nTo=o("This class cannot be instantiated directly using "),Gle=a("code"),sTo=o("__init__()"),lTo=o(" (throws an error)."),iTo=l(),tt=a("div"),F(PA.$$.fragment),dTo=l(),Ole=a("p"),cTo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fTo=l(),$i=a("p"),mTo=o(`Note:
Loading a model from its configuration file does `),Vle=a("strong"),gTo=o("not"),hTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bN=a("a"),pTo=o("from_pretrained()"),uTo=o(" to load the model weights."),_To=l(),F(E_.$$.fragment),bTo=l(),Je=a("div"),F(BA.$$.fragment),vTo=l(),Xle=a("p"),FTo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),TTo=l(),La=a("p"),MTo=o("The model class to instantiate is selected based on the "),zle=a("code"),ETo=o("model_type"),CTo=o(` property of the config object (either
passed as an argument or loaded from `),Qle=a("code"),wTo=o("pretrained_model_name_or_path"),ATo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wle=a("code"),yTo=o("pretrained_model_name_or_path"),LTo=o(":"),xTo=l(),z=a("ul"),C_=a("li"),Hle=a("strong"),$To=o("bart"),kTo=o(" \u2014 "),vN=a("a"),STo=o("BartForCausalLM"),RTo=o(" (BART model)"),PTo=l(),w_=a("li"),Ule=a("strong"),BTo=o("bert"),ITo=o(" \u2014 "),FN=a("a"),qTo=o("BertLMHeadModel"),NTo=o(" (BERT model)"),jTo=l(),A_=a("li"),Jle=a("strong"),DTo=o("bert-generation"),GTo=o(" \u2014 "),TN=a("a"),OTo=o("BertGenerationDecoder"),VTo=o(" (Bert Generation model)"),XTo=l(),y_=a("li"),Yle=a("strong"),zTo=o("big_bird"),QTo=o(" \u2014 "),MN=a("a"),WTo=o("BigBirdForCausalLM"),HTo=o(" (BigBird model)"),UTo=l(),L_=a("li"),Kle=a("strong"),JTo=o("bigbird_pegasus"),YTo=o(" \u2014 "),EN=a("a"),KTo=o("BigBirdPegasusForCausalLM"),ZTo=o(" (BigBirdPegasus model)"),e7o=l(),x_=a("li"),Zle=a("strong"),o7o=o("blenderbot"),r7o=o(" \u2014 "),CN=a("a"),t7o=o("BlenderbotForCausalLM"),a7o=o(" (Blenderbot model)"),n7o=l(),$_=a("li"),eie=a("strong"),s7o=o("blenderbot-small"),l7o=o(" \u2014 "),wN=a("a"),i7o=o("BlenderbotSmallForCausalLM"),d7o=o(" (BlenderbotSmall model)"),c7o=l(),k_=a("li"),oie=a("strong"),f7o=o("camembert"),m7o=o(" \u2014 "),AN=a("a"),g7o=o("CamembertForCausalLM"),h7o=o(" (CamemBERT model)"),p7o=l(),S_=a("li"),rie=a("strong"),u7o=o("ctrl"),_7o=o(" \u2014 "),yN=a("a"),b7o=o("CTRLLMHeadModel"),v7o=o(" (CTRL model)"),F7o=l(),R_=a("li"),tie=a("strong"),T7o=o("data2vec-text"),M7o=o(" \u2014 "),LN=a("a"),E7o=o("Data2VecTextForCausalLM"),C7o=o(" (Data2VecText model)"),w7o=l(),P_=a("li"),aie=a("strong"),A7o=o("electra"),y7o=o(" \u2014 "),xN=a("a"),L7o=o("ElectraForCausalLM"),x7o=o(" (ELECTRA model)"),$7o=l(),B_=a("li"),nie=a("strong"),k7o=o("gpt2"),S7o=o(" \u2014 "),$N=a("a"),R7o=o("GPT2LMHeadModel"),P7o=o(" (OpenAI GPT-2 model)"),B7o=l(),I_=a("li"),sie=a("strong"),I7o=o("gpt_neo"),q7o=o(" \u2014 "),kN=a("a"),N7o=o("GPTNeoForCausalLM"),j7o=o(" (GPT Neo model)"),D7o=l(),q_=a("li"),lie=a("strong"),G7o=o("gptj"),O7o=o(" \u2014 "),SN=a("a"),V7o=o("GPTJForCausalLM"),X7o=o(" (GPT-J model)"),z7o=l(),N_=a("li"),iie=a("strong"),Q7o=o("marian"),W7o=o(" \u2014 "),RN=a("a"),H7o=o("MarianForCausalLM"),U7o=o(" (Marian model)"),J7o=l(),j_=a("li"),die=a("strong"),Y7o=o("mbart"),K7o=o(" \u2014 "),PN=a("a"),Z7o=o("MBartForCausalLM"),eMo=o(" (mBART model)"),oMo=l(),D_=a("li"),cie=a("strong"),rMo=o("megatron-bert"),tMo=o(" \u2014 "),BN=a("a"),aMo=o("MegatronBertForCausalLM"),nMo=o(" (MegatronBert model)"),sMo=l(),G_=a("li"),fie=a("strong"),lMo=o("openai-gpt"),iMo=o(" \u2014 "),IN=a("a"),dMo=o("OpenAIGPTLMHeadModel"),cMo=o(" (OpenAI GPT model)"),fMo=l(),O_=a("li"),mie=a("strong"),mMo=o("opt"),gMo=o(" \u2014 "),qN=a("a"),hMo=o("OPTForCausalLM"),pMo=o(" (OPT model)"),uMo=l(),V_=a("li"),gie=a("strong"),_Mo=o("pegasus"),bMo=o(" \u2014 "),NN=a("a"),vMo=o("PegasusForCausalLM"),FMo=o(" (Pegasus model)"),TMo=l(),X_=a("li"),hie=a("strong"),MMo=o("plbart"),EMo=o(" \u2014 "),jN=a("a"),CMo=o("PLBartForCausalLM"),wMo=o(" (PLBart model)"),AMo=l(),z_=a("li"),pie=a("strong"),yMo=o("prophetnet"),LMo=o(" \u2014 "),DN=a("a"),xMo=o("ProphetNetForCausalLM"),$Mo=o(" (ProphetNet model)"),kMo=l(),Q_=a("li"),uie=a("strong"),SMo=o("qdqbert"),RMo=o(" \u2014 "),GN=a("a"),PMo=o("QDQBertLMHeadModel"),BMo=o(" (QDQBert model)"),IMo=l(),W_=a("li"),_ie=a("strong"),qMo=o("reformer"),NMo=o(" \u2014 "),ON=a("a"),jMo=o("ReformerModelWithLMHead"),DMo=o(" (Reformer model)"),GMo=l(),H_=a("li"),bie=a("strong"),OMo=o("rembert"),VMo=o(" \u2014 "),VN=a("a"),XMo=o("RemBertForCausalLM"),zMo=o(" (RemBERT model)"),QMo=l(),U_=a("li"),vie=a("strong"),WMo=o("roberta"),HMo=o(" \u2014 "),XN=a("a"),UMo=o("RobertaForCausalLM"),JMo=o(" (RoBERTa model)"),YMo=l(),J_=a("li"),Fie=a("strong"),KMo=o("roformer"),ZMo=o(" \u2014 "),zN=a("a"),e4o=o("RoFormerForCausalLM"),o4o=o(" (RoFormer model)"),r4o=l(),Y_=a("li"),Tie=a("strong"),t4o=o("speech_to_text_2"),a4o=o(" \u2014 "),QN=a("a"),n4o=o("Speech2Text2ForCausalLM"),s4o=o(" (Speech2Text2 model)"),l4o=l(),K_=a("li"),Mie=a("strong"),i4o=o("transfo-xl"),d4o=o(" \u2014 "),WN=a("a"),c4o=o("TransfoXLLMHeadModel"),f4o=o(" (Transformer-XL model)"),m4o=l(),Z_=a("li"),Eie=a("strong"),g4o=o("trocr"),h4o=o(" \u2014 "),HN=a("a"),p4o=o("TrOCRForCausalLM"),u4o=o(" (TrOCR model)"),_4o=l(),e1=a("li"),Cie=a("strong"),b4o=o("xglm"),v4o=o(" \u2014 "),UN=a("a"),F4o=o("XGLMForCausalLM"),T4o=o(" (XGLM model)"),M4o=l(),o1=a("li"),wie=a("strong"),E4o=o("xlm"),C4o=o(" \u2014 "),JN=a("a"),w4o=o("XLMWithLMHeadModel"),A4o=o(" (XLM model)"),y4o=l(),r1=a("li"),Aie=a("strong"),L4o=o("xlm-prophetnet"),x4o=o(" \u2014 "),YN=a("a"),$4o=o("XLMProphetNetForCausalLM"),k4o=o(" (XLMProphetNet model)"),S4o=l(),t1=a("li"),yie=a("strong"),R4o=o("xlm-roberta"),P4o=o(" \u2014 "),KN=a("a"),B4o=o("XLMRobertaForCausalLM"),I4o=o(" (XLM-RoBERTa model)"),q4o=l(),a1=a("li"),Lie=a("strong"),N4o=o("xlm-roberta-xl"),j4o=o(" \u2014 "),ZN=a("a"),D4o=o("XLMRobertaXLForCausalLM"),G4o=o(" (XLM-RoBERTa-XL model)"),O4o=l(),n1=a("li"),xie=a("strong"),V4o=o("xlnet"),X4o=o(" \u2014 "),ej=a("a"),z4o=o("XLNetLMHeadModel"),Q4o=o(" (XLNet model)"),W4o=l(),s1=a("p"),H4o=o("The model is set in evaluation mode by default using "),$ie=a("code"),U4o=o("model.eval()"),J4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=a("code"),Y4o=o("model.train()"),K4o=l(),F(l1.$$.fragment),oIe=l(),ki=a("h2"),i1=a("a"),Sie=a("span"),F(IA.$$.fragment),Z4o=l(),Rie=a("span"),eEo=o("AutoModelForMaskedLM"),rIe=l(),ko=a("div"),F(qA.$$.fragment),oEo=l(),Si=a("p"),rEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),oj=a("a"),tEo=o("from_pretrained()"),aEo=o(" class method or the "),rj=a("a"),nEo=o("from_config()"),sEo=o(` class
method.`),lEo=l(),NA=a("p"),iEo=o("This class cannot be instantiated directly using "),Pie=a("code"),dEo=o("__init__()"),cEo=o(" (throws an error)."),fEo=l(),at=a("div"),F(jA.$$.fragment),mEo=l(),Bie=a("p"),gEo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),hEo=l(),Ri=a("p"),pEo=o(`Note:
Loading a model from its configuration file does `),Iie=a("strong"),uEo=o("not"),_Eo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tj=a("a"),bEo=o("from_pretrained()"),vEo=o(" to load the model weights."),FEo=l(),F(d1.$$.fragment),TEo=l(),Ye=a("div"),F(DA.$$.fragment),MEo=l(),qie=a("p"),EEo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),CEo=l(),xa=a("p"),wEo=o("The model class to instantiate is selected based on the "),Nie=a("code"),AEo=o("model_type"),yEo=o(` property of the config object (either
passed as an argument or loaded from `),jie=a("code"),LEo=o("pretrained_model_name_or_path"),xEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=a("code"),$Eo=o("pretrained_model_name_or_path"),kEo=o(":"),SEo=l(),Q=a("ul"),c1=a("li"),Gie=a("strong"),REo=o("albert"),PEo=o(" \u2014 "),aj=a("a"),BEo=o("AlbertForMaskedLM"),IEo=o(" (ALBERT model)"),qEo=l(),f1=a("li"),Oie=a("strong"),NEo=o("bart"),jEo=o(" \u2014 "),nj=a("a"),DEo=o("BartForConditionalGeneration"),GEo=o(" (BART model)"),OEo=l(),m1=a("li"),Vie=a("strong"),VEo=o("bert"),XEo=o(" \u2014 "),sj=a("a"),zEo=o("BertForMaskedLM"),QEo=o(" (BERT model)"),WEo=l(),g1=a("li"),Xie=a("strong"),HEo=o("big_bird"),UEo=o(" \u2014 "),lj=a("a"),JEo=o("BigBirdForMaskedLM"),YEo=o(" (BigBird model)"),KEo=l(),h1=a("li"),zie=a("strong"),ZEo=o("camembert"),e5o=o(" \u2014 "),ij=a("a"),o5o=o("CamembertForMaskedLM"),r5o=o(" (CamemBERT model)"),t5o=l(),p1=a("li"),Qie=a("strong"),a5o=o("convbert"),n5o=o(" \u2014 "),dj=a("a"),s5o=o("ConvBertForMaskedLM"),l5o=o(" (ConvBERT model)"),i5o=l(),u1=a("li"),Wie=a("strong"),d5o=o("data2vec-text"),c5o=o(" \u2014 "),cj=a("a"),f5o=o("Data2VecTextForMaskedLM"),m5o=o(" (Data2VecText model)"),g5o=l(),_1=a("li"),Hie=a("strong"),h5o=o("deberta"),p5o=o(" \u2014 "),fj=a("a"),u5o=o("DebertaForMaskedLM"),_5o=o(" (DeBERTa model)"),b5o=l(),b1=a("li"),Uie=a("strong"),v5o=o("deberta-v2"),F5o=o(" \u2014 "),mj=a("a"),T5o=o("DebertaV2ForMaskedLM"),M5o=o(" (DeBERTa-v2 model)"),E5o=l(),v1=a("li"),Jie=a("strong"),C5o=o("distilbert"),w5o=o(" \u2014 "),gj=a("a"),A5o=o("DistilBertForMaskedLM"),y5o=o(" (DistilBERT model)"),L5o=l(),F1=a("li"),Yie=a("strong"),x5o=o("electra"),$5o=o(" \u2014 "),hj=a("a"),k5o=o("ElectraForMaskedLM"),S5o=o(" (ELECTRA model)"),R5o=l(),T1=a("li"),Kie=a("strong"),P5o=o("flaubert"),B5o=o(" \u2014 "),pj=a("a"),I5o=o("FlaubertWithLMHeadModel"),q5o=o(" (FlauBERT model)"),N5o=l(),M1=a("li"),Zie=a("strong"),j5o=o("fnet"),D5o=o(" \u2014 "),uj=a("a"),G5o=o("FNetForMaskedLM"),O5o=o(" (FNet model)"),V5o=l(),E1=a("li"),ede=a("strong"),X5o=o("funnel"),z5o=o(" \u2014 "),_j=a("a"),Q5o=o("FunnelForMaskedLM"),W5o=o(" (Funnel Transformer model)"),H5o=l(),C1=a("li"),ode=a("strong"),U5o=o("ibert"),J5o=o(" \u2014 "),bj=a("a"),Y5o=o("IBertForMaskedLM"),K5o=o(" (I-BERT model)"),Z5o=l(),w1=a("li"),rde=a("strong"),eCo=o("layoutlm"),oCo=o(" \u2014 "),vj=a("a"),rCo=o("LayoutLMForMaskedLM"),tCo=o(" (LayoutLM model)"),aCo=l(),A1=a("li"),tde=a("strong"),nCo=o("longformer"),sCo=o(" \u2014 "),Fj=a("a"),lCo=o("LongformerForMaskedLM"),iCo=o(" (Longformer model)"),dCo=l(),y1=a("li"),ade=a("strong"),cCo=o("mbart"),fCo=o(" \u2014 "),Tj=a("a"),mCo=o("MBartForConditionalGeneration"),gCo=o(" (mBART model)"),hCo=l(),L1=a("li"),nde=a("strong"),pCo=o("megatron-bert"),uCo=o(" \u2014 "),Mj=a("a"),_Co=o("MegatronBertForMaskedLM"),bCo=o(" (MegatronBert model)"),vCo=l(),x1=a("li"),sde=a("strong"),FCo=o("mobilebert"),TCo=o(" \u2014 "),Ej=a("a"),MCo=o("MobileBertForMaskedLM"),ECo=o(" (MobileBERT model)"),CCo=l(),$1=a("li"),lde=a("strong"),wCo=o("mpnet"),ACo=o(" \u2014 "),Cj=a("a"),yCo=o("MPNetForMaskedLM"),LCo=o(" (MPNet model)"),xCo=l(),k1=a("li"),ide=a("strong"),$Co=o("nystromformer"),kCo=o(" \u2014 "),wj=a("a"),SCo=o("NystromformerForMaskedLM"),RCo=o(" (Nystromformer model)"),PCo=l(),S1=a("li"),dde=a("strong"),BCo=o("perceiver"),ICo=o(" \u2014 "),Aj=a("a"),qCo=o("PerceiverForMaskedLM"),NCo=o(" (Perceiver model)"),jCo=l(),R1=a("li"),cde=a("strong"),DCo=o("qdqbert"),GCo=o(" \u2014 "),yj=a("a"),OCo=o("QDQBertForMaskedLM"),VCo=o(" (QDQBert model)"),XCo=l(),P1=a("li"),fde=a("strong"),zCo=o("reformer"),QCo=o(" \u2014 "),Lj=a("a"),WCo=o("ReformerForMaskedLM"),HCo=o(" (Reformer model)"),UCo=l(),B1=a("li"),mde=a("strong"),JCo=o("rembert"),YCo=o(" \u2014 "),xj=a("a"),KCo=o("RemBertForMaskedLM"),ZCo=o(" (RemBERT model)"),e3o=l(),I1=a("li"),gde=a("strong"),o3o=o("roberta"),r3o=o(" \u2014 "),$j=a("a"),t3o=o("RobertaForMaskedLM"),a3o=o(" (RoBERTa model)"),n3o=l(),q1=a("li"),hde=a("strong"),s3o=o("roformer"),l3o=o(" \u2014 "),kj=a("a"),i3o=o("RoFormerForMaskedLM"),d3o=o(" (RoFormer model)"),c3o=l(),N1=a("li"),pde=a("strong"),f3o=o("squeezebert"),m3o=o(" \u2014 "),Sj=a("a"),g3o=o("SqueezeBertForMaskedLM"),h3o=o(" (SqueezeBERT model)"),p3o=l(),j1=a("li"),ude=a("strong"),u3o=o("tapas"),_3o=o(" \u2014 "),Rj=a("a"),b3o=o("TapasForMaskedLM"),v3o=o(" (TAPAS model)"),F3o=l(),D1=a("li"),_de=a("strong"),T3o=o("wav2vec2"),M3o=o(" \u2014 "),bde=a("code"),E3o=o("Wav2Vec2ForMaskedLM"),C3o=o(" (Wav2Vec2 model)"),w3o=l(),G1=a("li"),vde=a("strong"),A3o=o("xlm"),y3o=o(" \u2014 "),Pj=a("a"),L3o=o("XLMWithLMHeadModel"),x3o=o(" (XLM model)"),$3o=l(),O1=a("li"),Fde=a("strong"),k3o=o("xlm-roberta"),S3o=o(" \u2014 "),Bj=a("a"),R3o=o("XLMRobertaForMaskedLM"),P3o=o(" (XLM-RoBERTa model)"),B3o=l(),V1=a("li"),Tde=a("strong"),I3o=o("xlm-roberta-xl"),q3o=o(" \u2014 "),Ij=a("a"),N3o=o("XLMRobertaXLForMaskedLM"),j3o=o(" (XLM-RoBERTa-XL model)"),D3o=l(),X1=a("li"),Mde=a("strong"),G3o=o("yoso"),O3o=o(" \u2014 "),qj=a("a"),V3o=o("YosoForMaskedLM"),X3o=o(" (YOSO model)"),z3o=l(),z1=a("p"),Q3o=o("The model is set in evaluation mode by default using "),Ede=a("code"),W3o=o("model.eval()"),H3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=a("code"),U3o=o("model.train()"),J3o=l(),F(Q1.$$.fragment),tIe=l(),Pi=a("h2"),W1=a("a"),wde=a("span"),F(GA.$$.fragment),Y3o=l(),Ade=a("span"),K3o=o("AutoModelForSeq2SeqLM"),aIe=l(),So=a("div"),F(OA.$$.fragment),Z3o=l(),Bi=a("p"),ewo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Nj=a("a"),owo=o("from_pretrained()"),rwo=o(" class method or the "),jj=a("a"),two=o("from_config()"),awo=o(` class
method.`),nwo=l(),VA=a("p"),swo=o("This class cannot be instantiated directly using "),yde=a("code"),lwo=o("__init__()"),iwo=o(" (throws an error)."),dwo=l(),nt=a("div"),F(XA.$$.fragment),cwo=l(),Lde=a("p"),fwo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mwo=l(),Ii=a("p"),gwo=o(`Note:
Loading a model from its configuration file does `),xde=a("strong"),hwo=o("not"),pwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dj=a("a"),uwo=o("from_pretrained()"),_wo=o(" to load the model weights."),bwo=l(),F(H1.$$.fragment),vwo=l(),Ke=a("div"),F(zA.$$.fragment),Fwo=l(),$de=a("p"),Two=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Mwo=l(),$a=a("p"),Ewo=o("The model class to instantiate is selected based on the "),kde=a("code"),Cwo=o("model_type"),wwo=o(` property of the config object (either
passed as an argument or loaded from `),Sde=a("code"),Awo=o("pretrained_model_name_or_path"),ywo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rde=a("code"),Lwo=o("pretrained_model_name_or_path"),xwo=o(":"),$wo=l(),he=a("ul"),U1=a("li"),Pde=a("strong"),kwo=o("bart"),Swo=o(" \u2014 "),Gj=a("a"),Rwo=o("BartForConditionalGeneration"),Pwo=o(" (BART model)"),Bwo=l(),J1=a("li"),Bde=a("strong"),Iwo=o("bigbird_pegasus"),qwo=o(" \u2014 "),Oj=a("a"),Nwo=o("BigBirdPegasusForConditionalGeneration"),jwo=o(" (BigBirdPegasus model)"),Dwo=l(),Y1=a("li"),Ide=a("strong"),Gwo=o("blenderbot"),Owo=o(" \u2014 "),Vj=a("a"),Vwo=o("BlenderbotForConditionalGeneration"),Xwo=o(" (Blenderbot model)"),zwo=l(),K1=a("li"),qde=a("strong"),Qwo=o("blenderbot-small"),Wwo=o(" \u2014 "),Xj=a("a"),Hwo=o("BlenderbotSmallForConditionalGeneration"),Uwo=o(" (BlenderbotSmall model)"),Jwo=l(),Z1=a("li"),Nde=a("strong"),Ywo=o("encoder-decoder"),Kwo=o(" \u2014 "),zj=a("a"),Zwo=o("EncoderDecoderModel"),eAo=o(" (Encoder decoder model)"),oAo=l(),e8=a("li"),jde=a("strong"),rAo=o("fsmt"),tAo=o(" \u2014 "),Qj=a("a"),aAo=o("FSMTForConditionalGeneration"),nAo=o(" (FairSeq Machine-Translation model)"),sAo=l(),o8=a("li"),Dde=a("strong"),lAo=o("led"),iAo=o(" \u2014 "),Wj=a("a"),dAo=o("LEDForConditionalGeneration"),cAo=o(" (LED model)"),fAo=l(),r8=a("li"),Gde=a("strong"),mAo=o("m2m_100"),gAo=o(" \u2014 "),Hj=a("a"),hAo=o("M2M100ForConditionalGeneration"),pAo=o(" (M2M100 model)"),uAo=l(),t8=a("li"),Ode=a("strong"),_Ao=o("marian"),bAo=o(" \u2014 "),Uj=a("a"),vAo=o("MarianMTModel"),FAo=o(" (Marian model)"),TAo=l(),a8=a("li"),Vde=a("strong"),MAo=o("mbart"),EAo=o(" \u2014 "),Jj=a("a"),CAo=o("MBartForConditionalGeneration"),wAo=o(" (mBART model)"),AAo=l(),n8=a("li"),Xde=a("strong"),yAo=o("mt5"),LAo=o(" \u2014 "),Yj=a("a"),xAo=o("MT5ForConditionalGeneration"),$Ao=o(" (mT5 model)"),kAo=l(),s8=a("li"),zde=a("strong"),SAo=o("pegasus"),RAo=o(" \u2014 "),Kj=a("a"),PAo=o("PegasusForConditionalGeneration"),BAo=o(" (Pegasus model)"),IAo=l(),l8=a("li"),Qde=a("strong"),qAo=o("plbart"),NAo=o(" \u2014 "),Zj=a("a"),jAo=o("PLBartForConditionalGeneration"),DAo=o(" (PLBart model)"),GAo=l(),i8=a("li"),Wde=a("strong"),OAo=o("prophetnet"),VAo=o(" \u2014 "),eD=a("a"),XAo=o("ProphetNetForConditionalGeneration"),zAo=o(" (ProphetNet model)"),QAo=l(),d8=a("li"),Hde=a("strong"),WAo=o("t5"),HAo=o(" \u2014 "),oD=a("a"),UAo=o("T5ForConditionalGeneration"),JAo=o(" (T5 model)"),YAo=l(),c8=a("li"),Ude=a("strong"),KAo=o("tapex"),ZAo=o(" \u2014 "),rD=a("a"),e6o=o("BartForConditionalGeneration"),o6o=o(" (TAPEX model)"),r6o=l(),f8=a("li"),Jde=a("strong"),t6o=o("xlm-prophetnet"),a6o=o(" \u2014 "),tD=a("a"),n6o=o("XLMProphetNetForConditionalGeneration"),s6o=o(" (XLMProphetNet model)"),l6o=l(),m8=a("p"),i6o=o("The model is set in evaluation mode by default using "),Yde=a("code"),d6o=o("model.eval()"),c6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kde=a("code"),f6o=o("model.train()"),m6o=l(),F(g8.$$.fragment),nIe=l(),qi=a("h2"),h8=a("a"),Zde=a("span"),F(QA.$$.fragment),g6o=l(),ece=a("span"),h6o=o("AutoModelForSequenceClassification"),sIe=l(),Ro=a("div"),F(WA.$$.fragment),p6o=l(),Ni=a("p"),u6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),aD=a("a"),_6o=o("from_pretrained()"),b6o=o(" class method or the "),nD=a("a"),v6o=o("from_config()"),F6o=o(` class
method.`),T6o=l(),HA=a("p"),M6o=o("This class cannot be instantiated directly using "),oce=a("code"),E6o=o("__init__()"),C6o=o(" (throws an error)."),w6o=l(),st=a("div"),F(UA.$$.fragment),A6o=l(),rce=a("p"),y6o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),L6o=l(),ji=a("p"),x6o=o(`Note:
Loading a model from its configuration file does `),tce=a("strong"),$6o=o("not"),k6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sD=a("a"),S6o=o("from_pretrained()"),R6o=o(" to load the model weights."),P6o=l(),F(p8.$$.fragment),B6o=l(),Ze=a("div"),F(JA.$$.fragment),I6o=l(),ace=a("p"),q6o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),N6o=l(),ka=a("p"),j6o=o("The model class to instantiate is selected based on the "),nce=a("code"),D6o=o("model_type"),G6o=o(` property of the config object (either
passed as an argument or loaded from `),sce=a("code"),O6o=o("pretrained_model_name_or_path"),V6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lce=a("code"),X6o=o("pretrained_model_name_or_path"),z6o=o(":"),Q6o=l(),q=a("ul"),u8=a("li"),ice=a("strong"),W6o=o("albert"),H6o=o(" \u2014 "),lD=a("a"),U6o=o("AlbertForSequenceClassification"),J6o=o(" (ALBERT model)"),Y6o=l(),_8=a("li"),dce=a("strong"),K6o=o("bart"),Z6o=o(" \u2014 "),iD=a("a"),eyo=o("BartForSequenceClassification"),oyo=o(" (BART model)"),ryo=l(),b8=a("li"),cce=a("strong"),tyo=o("bert"),ayo=o(" \u2014 "),dD=a("a"),nyo=o("BertForSequenceClassification"),syo=o(" (BERT model)"),lyo=l(),v8=a("li"),fce=a("strong"),iyo=o("big_bird"),dyo=o(" \u2014 "),cD=a("a"),cyo=o("BigBirdForSequenceClassification"),fyo=o(" (BigBird model)"),myo=l(),F8=a("li"),mce=a("strong"),gyo=o("bigbird_pegasus"),hyo=o(" \u2014 "),fD=a("a"),pyo=o("BigBirdPegasusForSequenceClassification"),uyo=o(" (BigBirdPegasus model)"),_yo=l(),T8=a("li"),gce=a("strong"),byo=o("camembert"),vyo=o(" \u2014 "),mD=a("a"),Fyo=o("CamembertForSequenceClassification"),Tyo=o(" (CamemBERT model)"),Myo=l(),M8=a("li"),hce=a("strong"),Eyo=o("canine"),Cyo=o(" \u2014 "),gD=a("a"),wyo=o("CanineForSequenceClassification"),Ayo=o(" (Canine model)"),yyo=l(),E8=a("li"),pce=a("strong"),Lyo=o("convbert"),xyo=o(" \u2014 "),hD=a("a"),$yo=o("ConvBertForSequenceClassification"),kyo=o(" (ConvBERT model)"),Syo=l(),C8=a("li"),uce=a("strong"),Ryo=o("ctrl"),Pyo=o(" \u2014 "),pD=a("a"),Byo=o("CTRLForSequenceClassification"),Iyo=o(" (CTRL model)"),qyo=l(),w8=a("li"),_ce=a("strong"),Nyo=o("data2vec-text"),jyo=o(" \u2014 "),uD=a("a"),Dyo=o("Data2VecTextForSequenceClassification"),Gyo=o(" (Data2VecText model)"),Oyo=l(),A8=a("li"),bce=a("strong"),Vyo=o("deberta"),Xyo=o(" \u2014 "),_D=a("a"),zyo=o("DebertaForSequenceClassification"),Qyo=o(" (DeBERTa model)"),Wyo=l(),y8=a("li"),vce=a("strong"),Hyo=o("deberta-v2"),Uyo=o(" \u2014 "),bD=a("a"),Jyo=o("DebertaV2ForSequenceClassification"),Yyo=o(" (DeBERTa-v2 model)"),Kyo=l(),L8=a("li"),Fce=a("strong"),Zyo=o("distilbert"),eLo=o(" \u2014 "),vD=a("a"),oLo=o("DistilBertForSequenceClassification"),rLo=o(" (DistilBERT model)"),tLo=l(),x8=a("li"),Tce=a("strong"),aLo=o("electra"),nLo=o(" \u2014 "),FD=a("a"),sLo=o("ElectraForSequenceClassification"),lLo=o(" (ELECTRA model)"),iLo=l(),$8=a("li"),Mce=a("strong"),dLo=o("flaubert"),cLo=o(" \u2014 "),TD=a("a"),fLo=o("FlaubertForSequenceClassification"),mLo=o(" (FlauBERT model)"),gLo=l(),k8=a("li"),Ece=a("strong"),hLo=o("fnet"),pLo=o(" \u2014 "),MD=a("a"),uLo=o("FNetForSequenceClassification"),_Lo=o(" (FNet model)"),bLo=l(),S8=a("li"),Cce=a("strong"),vLo=o("funnel"),FLo=o(" \u2014 "),ED=a("a"),TLo=o("FunnelForSequenceClassification"),MLo=o(" (Funnel Transformer model)"),ELo=l(),R8=a("li"),wce=a("strong"),CLo=o("gpt2"),wLo=o(" \u2014 "),CD=a("a"),ALo=o("GPT2ForSequenceClassification"),yLo=o(" (OpenAI GPT-2 model)"),LLo=l(),P8=a("li"),Ace=a("strong"),xLo=o("gpt_neo"),$Lo=o(" \u2014 "),wD=a("a"),kLo=o("GPTNeoForSequenceClassification"),SLo=o(" (GPT Neo model)"),RLo=l(),B8=a("li"),yce=a("strong"),PLo=o("gptj"),BLo=o(" \u2014 "),AD=a("a"),ILo=o("GPTJForSequenceClassification"),qLo=o(" (GPT-J model)"),NLo=l(),I8=a("li"),Lce=a("strong"),jLo=o("ibert"),DLo=o(" \u2014 "),yD=a("a"),GLo=o("IBertForSequenceClassification"),OLo=o(" (I-BERT model)"),VLo=l(),q8=a("li"),xce=a("strong"),XLo=o("layoutlm"),zLo=o(" \u2014 "),LD=a("a"),QLo=o("LayoutLMForSequenceClassification"),WLo=o(" (LayoutLM model)"),HLo=l(),N8=a("li"),$ce=a("strong"),ULo=o("layoutlmv2"),JLo=o(" \u2014 "),xD=a("a"),YLo=o("LayoutLMv2ForSequenceClassification"),KLo=o(" (LayoutLMv2 model)"),ZLo=l(),j8=a("li"),kce=a("strong"),exo=o("led"),oxo=o(" \u2014 "),$D=a("a"),rxo=o("LEDForSequenceClassification"),txo=o(" (LED model)"),axo=l(),D8=a("li"),Sce=a("strong"),nxo=o("longformer"),sxo=o(" \u2014 "),kD=a("a"),lxo=o("LongformerForSequenceClassification"),ixo=o(" (Longformer model)"),dxo=l(),G8=a("li"),Rce=a("strong"),cxo=o("mbart"),fxo=o(" \u2014 "),SD=a("a"),mxo=o("MBartForSequenceClassification"),gxo=o(" (mBART model)"),hxo=l(),O8=a("li"),Pce=a("strong"),pxo=o("megatron-bert"),uxo=o(" \u2014 "),RD=a("a"),_xo=o("MegatronBertForSequenceClassification"),bxo=o(" (MegatronBert model)"),vxo=l(),V8=a("li"),Bce=a("strong"),Fxo=o("mobilebert"),Txo=o(" \u2014 "),PD=a("a"),Mxo=o("MobileBertForSequenceClassification"),Exo=o(" (MobileBERT model)"),Cxo=l(),X8=a("li"),Ice=a("strong"),wxo=o("mpnet"),Axo=o(" \u2014 "),BD=a("a"),yxo=o("MPNetForSequenceClassification"),Lxo=o(" (MPNet model)"),xxo=l(),z8=a("li"),qce=a("strong"),$xo=o("nystromformer"),kxo=o(" \u2014 "),ID=a("a"),Sxo=o("NystromformerForSequenceClassification"),Rxo=o(" (Nystromformer model)"),Pxo=l(),Q8=a("li"),Nce=a("strong"),Bxo=o("openai-gpt"),Ixo=o(" \u2014 "),qD=a("a"),qxo=o("OpenAIGPTForSequenceClassification"),Nxo=o(" (OpenAI GPT model)"),jxo=l(),W8=a("li"),jce=a("strong"),Dxo=o("perceiver"),Gxo=o(" \u2014 "),ND=a("a"),Oxo=o("PerceiverForSequenceClassification"),Vxo=o(" (Perceiver model)"),Xxo=l(),H8=a("li"),Dce=a("strong"),zxo=o("plbart"),Qxo=o(" \u2014 "),jD=a("a"),Wxo=o("PLBartForSequenceClassification"),Hxo=o(" (PLBart model)"),Uxo=l(),U8=a("li"),Gce=a("strong"),Jxo=o("qdqbert"),Yxo=o(" \u2014 "),DD=a("a"),Kxo=o("QDQBertForSequenceClassification"),Zxo=o(" (QDQBert model)"),e9o=l(),J8=a("li"),Oce=a("strong"),o9o=o("reformer"),r9o=o(" \u2014 "),GD=a("a"),t9o=o("ReformerForSequenceClassification"),a9o=o(" (Reformer model)"),n9o=l(),Y8=a("li"),Vce=a("strong"),s9o=o("rembert"),l9o=o(" \u2014 "),OD=a("a"),i9o=o("RemBertForSequenceClassification"),d9o=o(" (RemBERT model)"),c9o=l(),K8=a("li"),Xce=a("strong"),f9o=o("roberta"),m9o=o(" \u2014 "),VD=a("a"),g9o=o("RobertaForSequenceClassification"),h9o=o(" (RoBERTa model)"),p9o=l(),Z8=a("li"),zce=a("strong"),u9o=o("roformer"),_9o=o(" \u2014 "),XD=a("a"),b9o=o("RoFormerForSequenceClassification"),v9o=o(" (RoFormer model)"),F9o=l(),eb=a("li"),Qce=a("strong"),T9o=o("squeezebert"),M9o=o(" \u2014 "),zD=a("a"),E9o=o("SqueezeBertForSequenceClassification"),C9o=o(" (SqueezeBERT model)"),w9o=l(),ob=a("li"),Wce=a("strong"),A9o=o("tapas"),y9o=o(" \u2014 "),QD=a("a"),L9o=o("TapasForSequenceClassification"),x9o=o(" (TAPAS model)"),$9o=l(),rb=a("li"),Hce=a("strong"),k9o=o("tapex"),S9o=o(" \u2014 "),WD=a("a"),R9o=o("BartForSequenceClassification"),P9o=o(" (TAPEX model)"),B9o=l(),tb=a("li"),Uce=a("strong"),I9o=o("transfo-xl"),q9o=o(" \u2014 "),HD=a("a"),N9o=o("TransfoXLForSequenceClassification"),j9o=o(" (Transformer-XL model)"),D9o=l(),ab=a("li"),Jce=a("strong"),G9o=o("xlm"),O9o=o(" \u2014 "),UD=a("a"),V9o=o("XLMForSequenceClassification"),X9o=o(" (XLM model)"),z9o=l(),nb=a("li"),Yce=a("strong"),Q9o=o("xlm-roberta"),W9o=o(" \u2014 "),JD=a("a"),H9o=o("XLMRobertaForSequenceClassification"),U9o=o(" (XLM-RoBERTa model)"),J9o=l(),sb=a("li"),Kce=a("strong"),Y9o=o("xlm-roberta-xl"),K9o=o(" \u2014 "),YD=a("a"),Z9o=o("XLMRobertaXLForSequenceClassification"),e$o=o(" (XLM-RoBERTa-XL model)"),o$o=l(),lb=a("li"),Zce=a("strong"),r$o=o("xlnet"),t$o=o(" \u2014 "),KD=a("a"),a$o=o("XLNetForSequenceClassification"),n$o=o(" (XLNet model)"),s$o=l(),ib=a("li"),efe=a("strong"),l$o=o("yoso"),i$o=o(" \u2014 "),ZD=a("a"),d$o=o("YosoForSequenceClassification"),c$o=o(" (YOSO model)"),f$o=l(),db=a("p"),m$o=o("The model is set in evaluation mode by default using "),ofe=a("code"),g$o=o("model.eval()"),h$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rfe=a("code"),p$o=o("model.train()"),u$o=l(),F(cb.$$.fragment),lIe=l(),Di=a("h2"),fb=a("a"),tfe=a("span"),F(YA.$$.fragment),_$o=l(),afe=a("span"),b$o=o("AutoModelForMultipleChoice"),iIe=l(),Po=a("div"),F(KA.$$.fragment),v$o=l(),Gi=a("p"),F$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eG=a("a"),T$o=o("from_pretrained()"),M$o=o(" class method or the "),oG=a("a"),E$o=o("from_config()"),C$o=o(` class
method.`),w$o=l(),ZA=a("p"),A$o=o("This class cannot be instantiated directly using "),nfe=a("code"),y$o=o("__init__()"),L$o=o(" (throws an error)."),x$o=l(),lt=a("div"),F(e6.$$.fragment),$$o=l(),sfe=a("p"),k$o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),S$o=l(),Oi=a("p"),R$o=o(`Note:
Loading a model from its configuration file does `),lfe=a("strong"),P$o=o("not"),B$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=a("a"),I$o=o("from_pretrained()"),q$o=o(" to load the model weights."),N$o=l(),F(mb.$$.fragment),j$o=l(),eo=a("div"),F(o6.$$.fragment),D$o=l(),ife=a("p"),G$o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),O$o=l(),Sa=a("p"),V$o=o("The model class to instantiate is selected based on the "),dfe=a("code"),X$o=o("model_type"),z$o=o(` property of the config object (either
passed as an argument or loaded from `),cfe=a("code"),Q$o=o("pretrained_model_name_or_path"),W$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ffe=a("code"),H$o=o("pretrained_model_name_or_path"),U$o=o(":"),J$o=l(),Y=a("ul"),gb=a("li"),mfe=a("strong"),Y$o=o("albert"),K$o=o(" \u2014 "),tG=a("a"),Z$o=o("AlbertForMultipleChoice"),eko=o(" (ALBERT model)"),oko=l(),hb=a("li"),gfe=a("strong"),rko=o("bert"),tko=o(" \u2014 "),aG=a("a"),ako=o("BertForMultipleChoice"),nko=o(" (BERT model)"),sko=l(),pb=a("li"),hfe=a("strong"),lko=o("big_bird"),iko=o(" \u2014 "),nG=a("a"),dko=o("BigBirdForMultipleChoice"),cko=o(" (BigBird model)"),fko=l(),ub=a("li"),pfe=a("strong"),mko=o("camembert"),gko=o(" \u2014 "),sG=a("a"),hko=o("CamembertForMultipleChoice"),pko=o(" (CamemBERT model)"),uko=l(),_b=a("li"),ufe=a("strong"),_ko=o("canine"),bko=o(" \u2014 "),lG=a("a"),vko=o("CanineForMultipleChoice"),Fko=o(" (Canine model)"),Tko=l(),bb=a("li"),_fe=a("strong"),Mko=o("convbert"),Eko=o(" \u2014 "),iG=a("a"),Cko=o("ConvBertForMultipleChoice"),wko=o(" (ConvBERT model)"),Ako=l(),vb=a("li"),bfe=a("strong"),yko=o("data2vec-text"),Lko=o(" \u2014 "),dG=a("a"),xko=o("Data2VecTextForMultipleChoice"),$ko=o(" (Data2VecText model)"),kko=l(),Fb=a("li"),vfe=a("strong"),Sko=o("deberta-v2"),Rko=o(" \u2014 "),cG=a("a"),Pko=o("DebertaV2ForMultipleChoice"),Bko=o(" (DeBERTa-v2 model)"),Iko=l(),Tb=a("li"),Ffe=a("strong"),qko=o("distilbert"),Nko=o(" \u2014 "),fG=a("a"),jko=o("DistilBertForMultipleChoice"),Dko=o(" (DistilBERT model)"),Gko=l(),Mb=a("li"),Tfe=a("strong"),Oko=o("electra"),Vko=o(" \u2014 "),mG=a("a"),Xko=o("ElectraForMultipleChoice"),zko=o(" (ELECTRA model)"),Qko=l(),Eb=a("li"),Mfe=a("strong"),Wko=o("flaubert"),Hko=o(" \u2014 "),gG=a("a"),Uko=o("FlaubertForMultipleChoice"),Jko=o(" (FlauBERT model)"),Yko=l(),Cb=a("li"),Efe=a("strong"),Kko=o("fnet"),Zko=o(" \u2014 "),hG=a("a"),eSo=o("FNetForMultipleChoice"),oSo=o(" (FNet model)"),rSo=l(),wb=a("li"),Cfe=a("strong"),tSo=o("funnel"),aSo=o(" \u2014 "),pG=a("a"),nSo=o("FunnelForMultipleChoice"),sSo=o(" (Funnel Transformer model)"),lSo=l(),Ab=a("li"),wfe=a("strong"),iSo=o("ibert"),dSo=o(" \u2014 "),uG=a("a"),cSo=o("IBertForMultipleChoice"),fSo=o(" (I-BERT model)"),mSo=l(),yb=a("li"),Afe=a("strong"),gSo=o("longformer"),hSo=o(" \u2014 "),_G=a("a"),pSo=o("LongformerForMultipleChoice"),uSo=o(" (Longformer model)"),_So=l(),Lb=a("li"),yfe=a("strong"),bSo=o("megatron-bert"),vSo=o(" \u2014 "),bG=a("a"),FSo=o("MegatronBertForMultipleChoice"),TSo=o(" (MegatronBert model)"),MSo=l(),xb=a("li"),Lfe=a("strong"),ESo=o("mobilebert"),CSo=o(" \u2014 "),vG=a("a"),wSo=o("MobileBertForMultipleChoice"),ASo=o(" (MobileBERT model)"),ySo=l(),$b=a("li"),xfe=a("strong"),LSo=o("mpnet"),xSo=o(" \u2014 "),FG=a("a"),$So=o("MPNetForMultipleChoice"),kSo=o(" (MPNet model)"),SSo=l(),kb=a("li"),$fe=a("strong"),RSo=o("nystromformer"),PSo=o(" \u2014 "),TG=a("a"),BSo=o("NystromformerForMultipleChoice"),ISo=o(" (Nystromformer model)"),qSo=l(),Sb=a("li"),kfe=a("strong"),NSo=o("qdqbert"),jSo=o(" \u2014 "),MG=a("a"),DSo=o("QDQBertForMultipleChoice"),GSo=o(" (QDQBert model)"),OSo=l(),Rb=a("li"),Sfe=a("strong"),VSo=o("rembert"),XSo=o(" \u2014 "),EG=a("a"),zSo=o("RemBertForMultipleChoice"),QSo=o(" (RemBERT model)"),WSo=l(),Pb=a("li"),Rfe=a("strong"),HSo=o("roberta"),USo=o(" \u2014 "),CG=a("a"),JSo=o("RobertaForMultipleChoice"),YSo=o(" (RoBERTa model)"),KSo=l(),Bb=a("li"),Pfe=a("strong"),ZSo=o("roformer"),eRo=o(" \u2014 "),wG=a("a"),oRo=o("RoFormerForMultipleChoice"),rRo=o(" (RoFormer model)"),tRo=l(),Ib=a("li"),Bfe=a("strong"),aRo=o("squeezebert"),nRo=o(" \u2014 "),AG=a("a"),sRo=o("SqueezeBertForMultipleChoice"),lRo=o(" (SqueezeBERT model)"),iRo=l(),qb=a("li"),Ife=a("strong"),dRo=o("xlm"),cRo=o(" \u2014 "),yG=a("a"),fRo=o("XLMForMultipleChoice"),mRo=o(" (XLM model)"),gRo=l(),Nb=a("li"),qfe=a("strong"),hRo=o("xlm-roberta"),pRo=o(" \u2014 "),LG=a("a"),uRo=o("XLMRobertaForMultipleChoice"),_Ro=o(" (XLM-RoBERTa model)"),bRo=l(),jb=a("li"),Nfe=a("strong"),vRo=o("xlm-roberta-xl"),FRo=o(" \u2014 "),xG=a("a"),TRo=o("XLMRobertaXLForMultipleChoice"),MRo=o(" (XLM-RoBERTa-XL model)"),ERo=l(),Db=a("li"),jfe=a("strong"),CRo=o("xlnet"),wRo=o(" \u2014 "),$G=a("a"),ARo=o("XLNetForMultipleChoice"),yRo=o(" (XLNet model)"),LRo=l(),Gb=a("li"),Dfe=a("strong"),xRo=o("yoso"),$Ro=o(" \u2014 "),kG=a("a"),kRo=o("YosoForMultipleChoice"),SRo=o(" (YOSO model)"),RRo=l(),Ob=a("p"),PRo=o("The model is set in evaluation mode by default using "),Gfe=a("code"),BRo=o("model.eval()"),IRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ofe=a("code"),qRo=o("model.train()"),NRo=l(),F(Vb.$$.fragment),dIe=l(),Vi=a("h2"),Xb=a("a"),Vfe=a("span"),F(r6.$$.fragment),jRo=l(),Xfe=a("span"),DRo=o("AutoModelForNextSentencePrediction"),cIe=l(),Bo=a("div"),F(t6.$$.fragment),GRo=l(),Xi=a("p"),ORo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),SG=a("a"),VRo=o("from_pretrained()"),XRo=o(" class method or the "),RG=a("a"),zRo=o("from_config()"),QRo=o(` class
method.`),WRo=l(),a6=a("p"),HRo=o("This class cannot be instantiated directly using "),zfe=a("code"),URo=o("__init__()"),JRo=o(" (throws an error)."),YRo=l(),it=a("div"),F(n6.$$.fragment),KRo=l(),Qfe=a("p"),ZRo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ePo=l(),zi=a("p"),oPo=o(`Note:
Loading a model from its configuration file does `),Wfe=a("strong"),rPo=o("not"),tPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),aPo=o("from_pretrained()"),nPo=o(" to load the model weights."),sPo=l(),F(zb.$$.fragment),lPo=l(),oo=a("div"),F(s6.$$.fragment),iPo=l(),Hfe=a("p"),dPo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cPo=l(),Ra=a("p"),fPo=o("The model class to instantiate is selected based on the "),Ufe=a("code"),mPo=o("model_type"),gPo=o(` property of the config object (either
passed as an argument or loaded from `),Jfe=a("code"),hPo=o("pretrained_model_name_or_path"),pPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=a("code"),uPo=o("pretrained_model_name_or_path"),_Po=o(":"),bPo=l(),Yr=a("ul"),Qb=a("li"),Kfe=a("strong"),vPo=o("bert"),FPo=o(" \u2014 "),BG=a("a"),TPo=o("BertForNextSentencePrediction"),MPo=o(" (BERT model)"),EPo=l(),Wb=a("li"),Zfe=a("strong"),CPo=o("fnet"),wPo=o(" \u2014 "),IG=a("a"),APo=o("FNetForNextSentencePrediction"),yPo=o(" (FNet model)"),LPo=l(),Hb=a("li"),eme=a("strong"),xPo=o("megatron-bert"),$Po=o(" \u2014 "),qG=a("a"),kPo=o("MegatronBertForNextSentencePrediction"),SPo=o(" (MegatronBert model)"),RPo=l(),Ub=a("li"),ome=a("strong"),PPo=o("mobilebert"),BPo=o(" \u2014 "),NG=a("a"),IPo=o("MobileBertForNextSentencePrediction"),qPo=o(" (MobileBERT model)"),NPo=l(),Jb=a("li"),rme=a("strong"),jPo=o("qdqbert"),DPo=o(" \u2014 "),jG=a("a"),GPo=o("QDQBertForNextSentencePrediction"),OPo=o(" (QDQBert model)"),VPo=l(),Yb=a("p"),XPo=o("The model is set in evaluation mode by default using "),tme=a("code"),zPo=o("model.eval()"),QPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=a("code"),WPo=o("model.train()"),HPo=l(),F(Kb.$$.fragment),fIe=l(),Qi=a("h2"),Zb=a("a"),nme=a("span"),F(l6.$$.fragment),UPo=l(),sme=a("span"),JPo=o("AutoModelForTokenClassification"),mIe=l(),Io=a("div"),F(i6.$$.fragment),YPo=l(),Wi=a("p"),KPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DG=a("a"),ZPo=o("from_pretrained()"),eBo=o(" class method or the "),GG=a("a"),oBo=o("from_config()"),rBo=o(` class
method.`),tBo=l(),d6=a("p"),aBo=o("This class cannot be instantiated directly using "),lme=a("code"),nBo=o("__init__()"),sBo=o(" (throws an error)."),lBo=l(),dt=a("div"),F(c6.$$.fragment),iBo=l(),ime=a("p"),dBo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cBo=l(),Hi=a("p"),fBo=o(`Note:
Loading a model from its configuration file does `),dme=a("strong"),mBo=o("not"),gBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=a("a"),hBo=o("from_pretrained()"),pBo=o(" to load the model weights."),uBo=l(),F(e2.$$.fragment),_Bo=l(),ro=a("div"),F(f6.$$.fragment),bBo=l(),cme=a("p"),vBo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),FBo=l(),Pa=a("p"),TBo=o("The model class to instantiate is selected based on the "),fme=a("code"),MBo=o("model_type"),EBo=o(` property of the config object (either
passed as an argument or loaded from `),mme=a("code"),CBo=o("pretrained_model_name_or_path"),wBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=a("code"),ABo=o("pretrained_model_name_or_path"),yBo=o(":"),LBo=l(),U=a("ul"),o2=a("li"),hme=a("strong"),xBo=o("albert"),$Bo=o(" \u2014 "),VG=a("a"),kBo=o("AlbertForTokenClassification"),SBo=o(" (ALBERT model)"),RBo=l(),r2=a("li"),pme=a("strong"),PBo=o("bert"),BBo=o(" \u2014 "),XG=a("a"),IBo=o("BertForTokenClassification"),qBo=o(" (BERT model)"),NBo=l(),t2=a("li"),ume=a("strong"),jBo=o("big_bird"),DBo=o(" \u2014 "),zG=a("a"),GBo=o("BigBirdForTokenClassification"),OBo=o(" (BigBird model)"),VBo=l(),a2=a("li"),_me=a("strong"),XBo=o("camembert"),zBo=o(" \u2014 "),QG=a("a"),QBo=o("CamembertForTokenClassification"),WBo=o(" (CamemBERT model)"),HBo=l(),n2=a("li"),bme=a("strong"),UBo=o("canine"),JBo=o(" \u2014 "),WG=a("a"),YBo=o("CanineForTokenClassification"),KBo=o(" (Canine model)"),ZBo=l(),s2=a("li"),vme=a("strong"),eIo=o("convbert"),oIo=o(" \u2014 "),HG=a("a"),rIo=o("ConvBertForTokenClassification"),tIo=o(" (ConvBERT model)"),aIo=l(),l2=a("li"),Fme=a("strong"),nIo=o("data2vec-text"),sIo=o(" \u2014 "),UG=a("a"),lIo=o("Data2VecTextForTokenClassification"),iIo=o(" (Data2VecText model)"),dIo=l(),i2=a("li"),Tme=a("strong"),cIo=o("deberta"),fIo=o(" \u2014 "),JG=a("a"),mIo=o("DebertaForTokenClassification"),gIo=o(" (DeBERTa model)"),hIo=l(),d2=a("li"),Mme=a("strong"),pIo=o("deberta-v2"),uIo=o(" \u2014 "),YG=a("a"),_Io=o("DebertaV2ForTokenClassification"),bIo=o(" (DeBERTa-v2 model)"),vIo=l(),c2=a("li"),Eme=a("strong"),FIo=o("distilbert"),TIo=o(" \u2014 "),KG=a("a"),MIo=o("DistilBertForTokenClassification"),EIo=o(" (DistilBERT model)"),CIo=l(),f2=a("li"),Cme=a("strong"),wIo=o("electra"),AIo=o(" \u2014 "),ZG=a("a"),yIo=o("ElectraForTokenClassification"),LIo=o(" (ELECTRA model)"),xIo=l(),m2=a("li"),wme=a("strong"),$Io=o("flaubert"),kIo=o(" \u2014 "),eO=a("a"),SIo=o("FlaubertForTokenClassification"),RIo=o(" (FlauBERT model)"),PIo=l(),g2=a("li"),Ame=a("strong"),BIo=o("fnet"),IIo=o(" \u2014 "),oO=a("a"),qIo=o("FNetForTokenClassification"),NIo=o(" (FNet model)"),jIo=l(),h2=a("li"),yme=a("strong"),DIo=o("funnel"),GIo=o(" \u2014 "),rO=a("a"),OIo=o("FunnelForTokenClassification"),VIo=o(" (Funnel Transformer model)"),XIo=l(),p2=a("li"),Lme=a("strong"),zIo=o("gpt2"),QIo=o(" \u2014 "),tO=a("a"),WIo=o("GPT2ForTokenClassification"),HIo=o(" (OpenAI GPT-2 model)"),UIo=l(),u2=a("li"),xme=a("strong"),JIo=o("ibert"),YIo=o(" \u2014 "),aO=a("a"),KIo=o("IBertForTokenClassification"),ZIo=o(" (I-BERT model)"),eqo=l(),_2=a("li"),$me=a("strong"),oqo=o("layoutlm"),rqo=o(" \u2014 "),nO=a("a"),tqo=o("LayoutLMForTokenClassification"),aqo=o(" (LayoutLM model)"),nqo=l(),b2=a("li"),kme=a("strong"),sqo=o("layoutlmv2"),lqo=o(" \u2014 "),sO=a("a"),iqo=o("LayoutLMv2ForTokenClassification"),dqo=o(" (LayoutLMv2 model)"),cqo=l(),v2=a("li"),Sme=a("strong"),fqo=o("longformer"),mqo=o(" \u2014 "),lO=a("a"),gqo=o("LongformerForTokenClassification"),hqo=o(" (Longformer model)"),pqo=l(),F2=a("li"),Rme=a("strong"),uqo=o("megatron-bert"),_qo=o(" \u2014 "),iO=a("a"),bqo=o("MegatronBertForTokenClassification"),vqo=o(" (MegatronBert model)"),Fqo=l(),T2=a("li"),Pme=a("strong"),Tqo=o("mobilebert"),Mqo=o(" \u2014 "),dO=a("a"),Eqo=o("MobileBertForTokenClassification"),Cqo=o(" (MobileBERT model)"),wqo=l(),M2=a("li"),Bme=a("strong"),Aqo=o("mpnet"),yqo=o(" \u2014 "),cO=a("a"),Lqo=o("MPNetForTokenClassification"),xqo=o(" (MPNet model)"),$qo=l(),E2=a("li"),Ime=a("strong"),kqo=o("nystromformer"),Sqo=o(" \u2014 "),fO=a("a"),Rqo=o("NystromformerForTokenClassification"),Pqo=o(" (Nystromformer model)"),Bqo=l(),C2=a("li"),qme=a("strong"),Iqo=o("qdqbert"),qqo=o(" \u2014 "),mO=a("a"),Nqo=o("QDQBertForTokenClassification"),jqo=o(" (QDQBert model)"),Dqo=l(),w2=a("li"),Nme=a("strong"),Gqo=o("rembert"),Oqo=o(" \u2014 "),gO=a("a"),Vqo=o("RemBertForTokenClassification"),Xqo=o(" (RemBERT model)"),zqo=l(),A2=a("li"),jme=a("strong"),Qqo=o("roberta"),Wqo=o(" \u2014 "),hO=a("a"),Hqo=o("RobertaForTokenClassification"),Uqo=o(" (RoBERTa model)"),Jqo=l(),y2=a("li"),Dme=a("strong"),Yqo=o("roformer"),Kqo=o(" \u2014 "),pO=a("a"),Zqo=o("RoFormerForTokenClassification"),eNo=o(" (RoFormer model)"),oNo=l(),L2=a("li"),Gme=a("strong"),rNo=o("squeezebert"),tNo=o(" \u2014 "),uO=a("a"),aNo=o("SqueezeBertForTokenClassification"),nNo=o(" (SqueezeBERT model)"),sNo=l(),x2=a("li"),Ome=a("strong"),lNo=o("xlm"),iNo=o(" \u2014 "),_O=a("a"),dNo=o("XLMForTokenClassification"),cNo=o(" (XLM model)"),fNo=l(),$2=a("li"),Vme=a("strong"),mNo=o("xlm-roberta"),gNo=o(" \u2014 "),bO=a("a"),hNo=o("XLMRobertaForTokenClassification"),pNo=o(" (XLM-RoBERTa model)"),uNo=l(),k2=a("li"),Xme=a("strong"),_No=o("xlm-roberta-xl"),bNo=o(" \u2014 "),vO=a("a"),vNo=o("XLMRobertaXLForTokenClassification"),FNo=o(" (XLM-RoBERTa-XL model)"),TNo=l(),S2=a("li"),zme=a("strong"),MNo=o("xlnet"),ENo=o(" \u2014 "),FO=a("a"),CNo=o("XLNetForTokenClassification"),wNo=o(" (XLNet model)"),ANo=l(),R2=a("li"),Qme=a("strong"),yNo=o("yoso"),LNo=o(" \u2014 "),TO=a("a"),xNo=o("YosoForTokenClassification"),$No=o(" (YOSO model)"),kNo=l(),P2=a("p"),SNo=o("The model is set in evaluation mode by default using "),Wme=a("code"),RNo=o("model.eval()"),PNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hme=a("code"),BNo=o("model.train()"),INo=l(),F(B2.$$.fragment),gIe=l(),Ui=a("h2"),I2=a("a"),Ume=a("span"),F(m6.$$.fragment),qNo=l(),Jme=a("span"),NNo=o("AutoModelForQuestionAnswering"),hIe=l(),qo=a("div"),F(g6.$$.fragment),jNo=l(),Ji=a("p"),DNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MO=a("a"),GNo=o("from_pretrained()"),ONo=o(" class method or the "),EO=a("a"),VNo=o("from_config()"),XNo=o(` class
method.`),zNo=l(),h6=a("p"),QNo=o("This class cannot be instantiated directly using "),Yme=a("code"),WNo=o("__init__()"),HNo=o(" (throws an error)."),UNo=l(),ct=a("div"),F(p6.$$.fragment),JNo=l(),Kme=a("p"),YNo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),KNo=l(),Yi=a("p"),ZNo=o(`Note:
Loading a model from its configuration file does `),Zme=a("strong"),ejo=o("not"),ojo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CO=a("a"),rjo=o("from_pretrained()"),tjo=o(" to load the model weights."),ajo=l(),F(q2.$$.fragment),njo=l(),to=a("div"),F(u6.$$.fragment),sjo=l(),ege=a("p"),ljo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ijo=l(),Ba=a("p"),djo=o("The model class to instantiate is selected based on the "),oge=a("code"),cjo=o("model_type"),fjo=o(` property of the config object (either
passed as an argument or loaded from `),rge=a("code"),mjo=o("pretrained_model_name_or_path"),gjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tge=a("code"),hjo=o("pretrained_model_name_or_path"),pjo=o(":"),ujo=l(),O=a("ul"),N2=a("li"),age=a("strong"),_jo=o("albert"),bjo=o(" \u2014 "),wO=a("a"),vjo=o("AlbertForQuestionAnswering"),Fjo=o(" (ALBERT model)"),Tjo=l(),j2=a("li"),nge=a("strong"),Mjo=o("bart"),Ejo=o(" \u2014 "),AO=a("a"),Cjo=o("BartForQuestionAnswering"),wjo=o(" (BART model)"),Ajo=l(),D2=a("li"),sge=a("strong"),yjo=o("bert"),Ljo=o(" \u2014 "),yO=a("a"),xjo=o("BertForQuestionAnswering"),$jo=o(" (BERT model)"),kjo=l(),G2=a("li"),lge=a("strong"),Sjo=o("big_bird"),Rjo=o(" \u2014 "),LO=a("a"),Pjo=o("BigBirdForQuestionAnswering"),Bjo=o(" (BigBird model)"),Ijo=l(),O2=a("li"),ige=a("strong"),qjo=o("bigbird_pegasus"),Njo=o(" \u2014 "),xO=a("a"),jjo=o("BigBirdPegasusForQuestionAnswering"),Djo=o(" (BigBirdPegasus model)"),Gjo=l(),V2=a("li"),dge=a("strong"),Ojo=o("camembert"),Vjo=o(" \u2014 "),$O=a("a"),Xjo=o("CamembertForQuestionAnswering"),zjo=o(" (CamemBERT model)"),Qjo=l(),X2=a("li"),cge=a("strong"),Wjo=o("canine"),Hjo=o(" \u2014 "),kO=a("a"),Ujo=o("CanineForQuestionAnswering"),Jjo=o(" (Canine model)"),Yjo=l(),z2=a("li"),fge=a("strong"),Kjo=o("convbert"),Zjo=o(" \u2014 "),SO=a("a"),eDo=o("ConvBertForQuestionAnswering"),oDo=o(" (ConvBERT model)"),rDo=l(),Q2=a("li"),mge=a("strong"),tDo=o("data2vec-text"),aDo=o(" \u2014 "),RO=a("a"),nDo=o("Data2VecTextForQuestionAnswering"),sDo=o(" (Data2VecText model)"),lDo=l(),W2=a("li"),gge=a("strong"),iDo=o("deberta"),dDo=o(" \u2014 "),PO=a("a"),cDo=o("DebertaForQuestionAnswering"),fDo=o(" (DeBERTa model)"),mDo=l(),H2=a("li"),hge=a("strong"),gDo=o("deberta-v2"),hDo=o(" \u2014 "),BO=a("a"),pDo=o("DebertaV2ForQuestionAnswering"),uDo=o(" (DeBERTa-v2 model)"),_Do=l(),U2=a("li"),pge=a("strong"),bDo=o("distilbert"),vDo=o(" \u2014 "),IO=a("a"),FDo=o("DistilBertForQuestionAnswering"),TDo=o(" (DistilBERT model)"),MDo=l(),J2=a("li"),uge=a("strong"),EDo=o("electra"),CDo=o(" \u2014 "),qO=a("a"),wDo=o("ElectraForQuestionAnswering"),ADo=o(" (ELECTRA model)"),yDo=l(),Y2=a("li"),_ge=a("strong"),LDo=o("flaubert"),xDo=o(" \u2014 "),NO=a("a"),$Do=o("FlaubertForQuestionAnsweringSimple"),kDo=o(" (FlauBERT model)"),SDo=l(),K2=a("li"),bge=a("strong"),RDo=o("fnet"),PDo=o(" \u2014 "),jO=a("a"),BDo=o("FNetForQuestionAnswering"),IDo=o(" (FNet model)"),qDo=l(),Z2=a("li"),vge=a("strong"),NDo=o("funnel"),jDo=o(" \u2014 "),DO=a("a"),DDo=o("FunnelForQuestionAnswering"),GDo=o(" (Funnel Transformer model)"),ODo=l(),ev=a("li"),Fge=a("strong"),VDo=o("gptj"),XDo=o(" \u2014 "),GO=a("a"),zDo=o("GPTJForQuestionAnswering"),QDo=o(" (GPT-J model)"),WDo=l(),ov=a("li"),Tge=a("strong"),HDo=o("ibert"),UDo=o(" \u2014 "),OO=a("a"),JDo=o("IBertForQuestionAnswering"),YDo=o(" (I-BERT model)"),KDo=l(),rv=a("li"),Mge=a("strong"),ZDo=o("layoutlmv2"),eGo=o(" \u2014 "),VO=a("a"),oGo=o("LayoutLMv2ForQuestionAnswering"),rGo=o(" (LayoutLMv2 model)"),tGo=l(),tv=a("li"),Ege=a("strong"),aGo=o("led"),nGo=o(" \u2014 "),XO=a("a"),sGo=o("LEDForQuestionAnswering"),lGo=o(" (LED model)"),iGo=l(),av=a("li"),Cge=a("strong"),dGo=o("longformer"),cGo=o(" \u2014 "),zO=a("a"),fGo=o("LongformerForQuestionAnswering"),mGo=o(" (Longformer model)"),gGo=l(),nv=a("li"),wge=a("strong"),hGo=o("lxmert"),pGo=o(" \u2014 "),QO=a("a"),uGo=o("LxmertForQuestionAnswering"),_Go=o(" (LXMERT model)"),bGo=l(),sv=a("li"),Age=a("strong"),vGo=o("mbart"),FGo=o(" \u2014 "),WO=a("a"),TGo=o("MBartForQuestionAnswering"),MGo=o(" (mBART model)"),EGo=l(),lv=a("li"),yge=a("strong"),CGo=o("megatron-bert"),wGo=o(" \u2014 "),HO=a("a"),AGo=o("MegatronBertForQuestionAnswering"),yGo=o(" (MegatronBert model)"),LGo=l(),iv=a("li"),Lge=a("strong"),xGo=o("mobilebert"),$Go=o(" \u2014 "),UO=a("a"),kGo=o("MobileBertForQuestionAnswering"),SGo=o(" (MobileBERT model)"),RGo=l(),dv=a("li"),xge=a("strong"),PGo=o("mpnet"),BGo=o(" \u2014 "),JO=a("a"),IGo=o("MPNetForQuestionAnswering"),qGo=o(" (MPNet model)"),NGo=l(),cv=a("li"),$ge=a("strong"),jGo=o("nystromformer"),DGo=o(" \u2014 "),YO=a("a"),GGo=o("NystromformerForQuestionAnswering"),OGo=o(" (Nystromformer model)"),VGo=l(),fv=a("li"),kge=a("strong"),XGo=o("qdqbert"),zGo=o(" \u2014 "),KO=a("a"),QGo=o("QDQBertForQuestionAnswering"),WGo=o(" (QDQBert model)"),HGo=l(),mv=a("li"),Sge=a("strong"),UGo=o("reformer"),JGo=o(" \u2014 "),ZO=a("a"),YGo=o("ReformerForQuestionAnswering"),KGo=o(" (Reformer model)"),ZGo=l(),gv=a("li"),Rge=a("strong"),eOo=o("rembert"),oOo=o(" \u2014 "),eV=a("a"),rOo=o("RemBertForQuestionAnswering"),tOo=o(" (RemBERT model)"),aOo=l(),hv=a("li"),Pge=a("strong"),nOo=o("roberta"),sOo=o(" \u2014 "),oV=a("a"),lOo=o("RobertaForQuestionAnswering"),iOo=o(" (RoBERTa model)"),dOo=l(),pv=a("li"),Bge=a("strong"),cOo=o("roformer"),fOo=o(" \u2014 "),rV=a("a"),mOo=o("RoFormerForQuestionAnswering"),gOo=o(" (RoFormer model)"),hOo=l(),uv=a("li"),Ige=a("strong"),pOo=o("splinter"),uOo=o(" \u2014 "),tV=a("a"),_Oo=o("SplinterForQuestionAnswering"),bOo=o(" (Splinter model)"),vOo=l(),_v=a("li"),qge=a("strong"),FOo=o("squeezebert"),TOo=o(" \u2014 "),aV=a("a"),MOo=o("SqueezeBertForQuestionAnswering"),EOo=o(" (SqueezeBERT model)"),COo=l(),bv=a("li"),Nge=a("strong"),wOo=o("xlm"),AOo=o(" \u2014 "),nV=a("a"),yOo=o("XLMForQuestionAnsweringSimple"),LOo=o(" (XLM model)"),xOo=l(),vv=a("li"),jge=a("strong"),$Oo=o("xlm-roberta"),kOo=o(" \u2014 "),sV=a("a"),SOo=o("XLMRobertaForQuestionAnswering"),ROo=o(" (XLM-RoBERTa model)"),POo=l(),Fv=a("li"),Dge=a("strong"),BOo=o("xlm-roberta-xl"),IOo=o(" \u2014 "),lV=a("a"),qOo=o("XLMRobertaXLForQuestionAnswering"),NOo=o(" (XLM-RoBERTa-XL model)"),jOo=l(),Tv=a("li"),Gge=a("strong"),DOo=o("xlnet"),GOo=o(" \u2014 "),iV=a("a"),OOo=o("XLNetForQuestionAnsweringSimple"),VOo=o(" (XLNet model)"),XOo=l(),Mv=a("li"),Oge=a("strong"),zOo=o("yoso"),QOo=o(" \u2014 "),dV=a("a"),WOo=o("YosoForQuestionAnswering"),HOo=o(" (YOSO model)"),UOo=l(),Ev=a("p"),JOo=o("The model is set in evaluation mode by default using "),Vge=a("code"),YOo=o("model.eval()"),KOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xge=a("code"),ZOo=o("model.train()"),eVo=l(),F(Cv.$$.fragment),pIe=l(),Ki=a("h2"),wv=a("a"),zge=a("span"),F(_6.$$.fragment),oVo=l(),Qge=a("span"),rVo=o("AutoModelForTableQuestionAnswering"),uIe=l(),No=a("div"),F(b6.$$.fragment),tVo=l(),Zi=a("p"),aVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),cV=a("a"),nVo=o("from_pretrained()"),sVo=o(" class method or the "),fV=a("a"),lVo=o("from_config()"),iVo=o(` class
method.`),dVo=l(),v6=a("p"),cVo=o("This class cannot be instantiated directly using "),Wge=a("code"),fVo=o("__init__()"),mVo=o(" (throws an error)."),gVo=l(),ft=a("div"),F(F6.$$.fragment),hVo=l(),Hge=a("p"),pVo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),uVo=l(),ed=a("p"),_Vo=o(`Note:
Loading a model from its configuration file does `),Uge=a("strong"),bVo=o("not"),vVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=a("a"),FVo=o("from_pretrained()"),TVo=o(" to load the model weights."),MVo=l(),F(Av.$$.fragment),EVo=l(),ao=a("div"),F(T6.$$.fragment),CVo=l(),Jge=a("p"),wVo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),AVo=l(),Ia=a("p"),yVo=o("The model class to instantiate is selected based on the "),Yge=a("code"),LVo=o("model_type"),xVo=o(` property of the config object (either
passed as an argument or loaded from `),Kge=a("code"),$Vo=o("pretrained_model_name_or_path"),kVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=a("code"),SVo=o("pretrained_model_name_or_path"),RVo=o(":"),PVo=l(),ehe=a("ul"),yv=a("li"),ohe=a("strong"),BVo=o("tapas"),IVo=o(" \u2014 "),gV=a("a"),qVo=o("TapasForQuestionAnswering"),NVo=o(" (TAPAS model)"),jVo=l(),Lv=a("p"),DVo=o("The model is set in evaluation mode by default using "),rhe=a("code"),GVo=o("model.eval()"),OVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),the=a("code"),VVo=o("model.train()"),XVo=l(),F(xv.$$.fragment),_Ie=l(),od=a("h2"),$v=a("a"),ahe=a("span"),F(M6.$$.fragment),zVo=l(),nhe=a("span"),QVo=o("AutoModelForImageClassification"),bIe=l(),jo=a("div"),F(E6.$$.fragment),WVo=l(),rd=a("p"),HVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hV=a("a"),UVo=o("from_pretrained()"),JVo=o(" class method or the "),pV=a("a"),YVo=o("from_config()"),KVo=o(` class
method.`),ZVo=l(),C6=a("p"),eXo=o("This class cannot be instantiated directly using "),she=a("code"),oXo=o("__init__()"),rXo=o(" (throws an error)."),tXo=l(),mt=a("div"),F(w6.$$.fragment),aXo=l(),lhe=a("p"),nXo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),sXo=l(),td=a("p"),lXo=o(`Note:
Loading a model from its configuration file does `),ihe=a("strong"),iXo=o("not"),dXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=a("a"),cXo=o("from_pretrained()"),fXo=o(" to load the model weights."),mXo=l(),F(kv.$$.fragment),gXo=l(),no=a("div"),F(A6.$$.fragment),hXo=l(),dhe=a("p"),pXo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),uXo=l(),qa=a("p"),_Xo=o("The model class to instantiate is selected based on the "),che=a("code"),bXo=o("model_type"),vXo=o(` property of the config object (either
passed as an argument or loaded from `),fhe=a("code"),FXo=o("pretrained_model_name_or_path"),TXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=a("code"),MXo=o("pretrained_model_name_or_path"),EXo=o(":"),CXo=l(),ve=a("ul"),Sv=a("li"),ghe=a("strong"),wXo=o("beit"),AXo=o(" \u2014 "),_V=a("a"),yXo=o("BeitForImageClassification"),LXo=o(" (BEiT model)"),xXo=l(),Rv=a("li"),hhe=a("strong"),$Xo=o("convnext"),kXo=o(" \u2014 "),bV=a("a"),SXo=o("ConvNextForImageClassification"),RXo=o(" (ConvNext model)"),PXo=l(),Pv=a("li"),phe=a("strong"),BXo=o("data2vec-vision"),IXo=o(" \u2014 "),vV=a("a"),qXo=o("Data2VecVisionForImageClassification"),NXo=o(" (Data2VecVision model)"),jXo=l(),Ps=a("li"),uhe=a("strong"),DXo=o("deit"),GXo=o(" \u2014 "),FV=a("a"),OXo=o("DeiTForImageClassification"),VXo=o(" or "),TV=a("a"),XXo=o("DeiTForImageClassificationWithTeacher"),zXo=o(" (DeiT model)"),QXo=l(),Bv=a("li"),_he=a("strong"),WXo=o("imagegpt"),HXo=o(" \u2014 "),MV=a("a"),UXo=o("ImageGPTForImageClassification"),JXo=o(" (ImageGPT model)"),YXo=l(),gt=a("li"),bhe=a("strong"),KXo=o("perceiver"),ZXo=o(" \u2014 "),EV=a("a"),ezo=o("PerceiverForImageClassificationLearned"),ozo=o(" or "),CV=a("a"),rzo=o("PerceiverForImageClassificationFourier"),tzo=o(" or "),wV=a("a"),azo=o("PerceiverForImageClassificationConvProcessing"),nzo=o(" (Perceiver model)"),szo=l(),Iv=a("li"),vhe=a("strong"),lzo=o("poolformer"),izo=o(" \u2014 "),AV=a("a"),dzo=o("PoolFormerForImageClassification"),czo=o(" (PoolFormer model)"),fzo=l(),qv=a("li"),Fhe=a("strong"),mzo=o("regnet"),gzo=o(" \u2014 "),yV=a("a"),hzo=o("RegNetForImageClassification"),pzo=o(" (RegNet model)"),uzo=l(),Nv=a("li"),The=a("strong"),_zo=o("resnet"),bzo=o(" \u2014 "),LV=a("a"),vzo=o("ResNetForImageClassification"),Fzo=o(" (ResNet model)"),Tzo=l(),jv=a("li"),Mhe=a("strong"),Mzo=o("segformer"),Ezo=o(" \u2014 "),xV=a("a"),Czo=o("SegformerForImageClassification"),wzo=o(" (SegFormer model)"),Azo=l(),Dv=a("li"),Ehe=a("strong"),yzo=o("swin"),Lzo=o(" \u2014 "),$V=a("a"),xzo=o("SwinForImageClassification"),$zo=o(" (Swin model)"),kzo=l(),Gv=a("li"),Che=a("strong"),Szo=o("van"),Rzo=o(" \u2014 "),kV=a("a"),Pzo=o("VanForImageClassification"),Bzo=o(" (VAN model)"),Izo=l(),Ov=a("li"),whe=a("strong"),qzo=o("vit"),Nzo=o(" \u2014 "),SV=a("a"),jzo=o("ViTForImageClassification"),Dzo=o(" (ViT model)"),Gzo=l(),Vv=a("p"),Ozo=o("The model is set in evaluation mode by default using "),Ahe=a("code"),Vzo=o("model.eval()"),Xzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=a("code"),zzo=o("model.train()"),Qzo=l(),F(Xv.$$.fragment),vIe=l(),ad=a("h2"),zv=a("a"),Lhe=a("span"),F(y6.$$.fragment),Wzo=l(),xhe=a("span"),Hzo=o("AutoModelForVision2Seq"),FIe=l(),Do=a("div"),F(L6.$$.fragment),Uzo=l(),nd=a("p"),Jzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RV=a("a"),Yzo=o("from_pretrained()"),Kzo=o(" class method or the "),PV=a("a"),Zzo=o("from_config()"),eQo=o(` class
method.`),oQo=l(),x6=a("p"),rQo=o("This class cannot be instantiated directly using "),$he=a("code"),tQo=o("__init__()"),aQo=o(" (throws an error)."),nQo=l(),ht=a("div"),F($6.$$.fragment),sQo=l(),khe=a("p"),lQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),iQo=l(),sd=a("p"),dQo=o(`Note:
Loading a model from its configuration file does `),She=a("strong"),cQo=o("not"),fQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=a("a"),mQo=o("from_pretrained()"),gQo=o(" to load the model weights."),hQo=l(),F(Qv.$$.fragment),pQo=l(),so=a("div"),F(k6.$$.fragment),uQo=l(),Rhe=a("p"),_Qo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),bQo=l(),Na=a("p"),vQo=o("The model class to instantiate is selected based on the "),Phe=a("code"),FQo=o("model_type"),TQo=o(` property of the config object (either
passed as an argument or loaded from `),Bhe=a("code"),MQo=o("pretrained_model_name_or_path"),EQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=a("code"),CQo=o("pretrained_model_name_or_path"),wQo=o(":"),AQo=l(),qhe=a("ul"),Wv=a("li"),Nhe=a("strong"),yQo=o("vision-encoder-decoder"),LQo=o(" \u2014 "),IV=a("a"),xQo=o("VisionEncoderDecoderModel"),$Qo=o(" (Vision Encoder decoder model)"),kQo=l(),Hv=a("p"),SQo=o("The model is set in evaluation mode by default using "),jhe=a("code"),RQo=o("model.eval()"),PQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=a("code"),BQo=o("model.train()"),IQo=l(),F(Uv.$$.fragment),TIe=l(),ld=a("h2"),Jv=a("a"),Ghe=a("span"),F(S6.$$.fragment),qQo=l(),Ohe=a("span"),NQo=o("AutoModelForAudioClassification"),MIe=l(),Go=a("div"),F(R6.$$.fragment),jQo=l(),id=a("p"),DQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),qV=a("a"),GQo=o("from_pretrained()"),OQo=o(" class method or the "),NV=a("a"),VQo=o("from_config()"),XQo=o(` class
method.`),zQo=l(),P6=a("p"),QQo=o("This class cannot be instantiated directly using "),Vhe=a("code"),WQo=o("__init__()"),HQo=o(" (throws an error)."),UQo=l(),pt=a("div"),F(B6.$$.fragment),JQo=l(),Xhe=a("p"),YQo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),KQo=l(),dd=a("p"),ZQo=o(`Note:
Loading a model from its configuration file does `),zhe=a("strong"),eWo=o("not"),oWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=a("a"),rWo=o("from_pretrained()"),tWo=o(" to load the model weights."),aWo=l(),F(Yv.$$.fragment),nWo=l(),lo=a("div"),F(I6.$$.fragment),sWo=l(),Qhe=a("p"),lWo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),iWo=l(),ja=a("p"),dWo=o("The model class to instantiate is selected based on the "),Whe=a("code"),cWo=o("model_type"),fWo=o(` property of the config object (either
passed as an argument or loaded from `),Hhe=a("code"),mWo=o("pretrained_model_name_or_path"),gWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=a("code"),hWo=o("pretrained_model_name_or_path"),pWo=o(":"),uWo=l(),je=a("ul"),Kv=a("li"),Jhe=a("strong"),_Wo=o("data2vec-audio"),bWo=o(" \u2014 "),DV=a("a"),vWo=o("Data2VecAudioForSequenceClassification"),FWo=o(" (Data2VecAudio model)"),TWo=l(),Zv=a("li"),Yhe=a("strong"),MWo=o("hubert"),EWo=o(" \u2014 "),GV=a("a"),CWo=o("HubertForSequenceClassification"),wWo=o(" (Hubert model)"),AWo=l(),eF=a("li"),Khe=a("strong"),yWo=o("sew"),LWo=o(" \u2014 "),OV=a("a"),xWo=o("SEWForSequenceClassification"),$Wo=o(" (SEW model)"),kWo=l(),oF=a("li"),Zhe=a("strong"),SWo=o("sew-d"),RWo=o(" \u2014 "),VV=a("a"),PWo=o("SEWDForSequenceClassification"),BWo=o(" (SEW-D model)"),IWo=l(),rF=a("li"),epe=a("strong"),qWo=o("unispeech"),NWo=o(" \u2014 "),XV=a("a"),jWo=o("UniSpeechForSequenceClassification"),DWo=o(" (UniSpeech model)"),GWo=l(),tF=a("li"),ope=a("strong"),OWo=o("unispeech-sat"),VWo=o(" \u2014 "),zV=a("a"),XWo=o("UniSpeechSatForSequenceClassification"),zWo=o(" (UniSpeechSat model)"),QWo=l(),aF=a("li"),rpe=a("strong"),WWo=o("wav2vec2"),HWo=o(" \u2014 "),QV=a("a"),UWo=o("Wav2Vec2ForSequenceClassification"),JWo=o(" (Wav2Vec2 model)"),YWo=l(),nF=a("li"),tpe=a("strong"),KWo=o("wavlm"),ZWo=o(" \u2014 "),WV=a("a"),eHo=o("WavLMForSequenceClassification"),oHo=o(" (WavLM model)"),rHo=l(),sF=a("p"),tHo=o("The model is set in evaluation mode by default using "),ape=a("code"),aHo=o("model.eval()"),nHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),npe=a("code"),sHo=o("model.train()"),lHo=l(),F(lF.$$.fragment),EIe=l(),cd=a("h2"),iF=a("a"),spe=a("span"),F(q6.$$.fragment),iHo=l(),lpe=a("span"),dHo=o("AutoModelForAudioFrameClassification"),CIe=l(),Oo=a("div"),F(N6.$$.fragment),cHo=l(),fd=a("p"),fHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),HV=a("a"),mHo=o("from_pretrained()"),gHo=o(" class method or the "),UV=a("a"),hHo=o("from_config()"),pHo=o(` class
method.`),uHo=l(),j6=a("p"),_Ho=o("This class cannot be instantiated directly using "),ipe=a("code"),bHo=o("__init__()"),vHo=o(" (throws an error)."),FHo=l(),ut=a("div"),F(D6.$$.fragment),THo=l(),dpe=a("p"),MHo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),EHo=l(),md=a("p"),CHo=o(`Note:
Loading a model from its configuration file does `),cpe=a("strong"),wHo=o("not"),AHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=a("a"),yHo=o("from_pretrained()"),LHo=o(" to load the model weights."),xHo=l(),F(dF.$$.fragment),$Ho=l(),io=a("div"),F(G6.$$.fragment),kHo=l(),fpe=a("p"),SHo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),RHo=l(),Da=a("p"),PHo=o("The model class to instantiate is selected based on the "),mpe=a("code"),BHo=o("model_type"),IHo=o(` property of the config object (either
passed as an argument or loaded from `),gpe=a("code"),qHo=o("pretrained_model_name_or_path"),NHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hpe=a("code"),jHo=o("pretrained_model_name_or_path"),DHo=o(":"),GHo=l(),Ga=a("ul"),cF=a("li"),ppe=a("strong"),OHo=o("data2vec-audio"),VHo=o(" \u2014 "),YV=a("a"),XHo=o("Data2VecAudioForAudioFrameClassification"),zHo=o(" (Data2VecAudio model)"),QHo=l(),fF=a("li"),upe=a("strong"),WHo=o("unispeech-sat"),HHo=o(" \u2014 "),KV=a("a"),UHo=o("UniSpeechSatForAudioFrameClassification"),JHo=o(" (UniSpeechSat model)"),YHo=l(),mF=a("li"),_pe=a("strong"),KHo=o("wav2vec2"),ZHo=o(" \u2014 "),ZV=a("a"),eUo=o("Wav2Vec2ForAudioFrameClassification"),oUo=o(" (Wav2Vec2 model)"),rUo=l(),gF=a("li"),bpe=a("strong"),tUo=o("wavlm"),aUo=o(" \u2014 "),eX=a("a"),nUo=o("WavLMForAudioFrameClassification"),sUo=o(" (WavLM model)"),lUo=l(),hF=a("p"),iUo=o("The model is set in evaluation mode by default using "),vpe=a("code"),dUo=o("model.eval()"),cUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fpe=a("code"),fUo=o("model.train()"),mUo=l(),F(pF.$$.fragment),wIe=l(),gd=a("h2"),uF=a("a"),Tpe=a("span"),F(O6.$$.fragment),gUo=l(),Mpe=a("span"),hUo=o("AutoModelForCTC"),AIe=l(),Vo=a("div"),F(V6.$$.fragment),pUo=l(),hd=a("p"),uUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),oX=a("a"),_Uo=o("from_pretrained()"),bUo=o(" class method or the "),rX=a("a"),vUo=o("from_config()"),FUo=o(` class
method.`),TUo=l(),X6=a("p"),MUo=o("This class cannot be instantiated directly using "),Epe=a("code"),EUo=o("__init__()"),CUo=o(" (throws an error)."),wUo=l(),_t=a("div"),F(z6.$$.fragment),AUo=l(),Cpe=a("p"),yUo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),LUo=l(),pd=a("p"),xUo=o(`Note:
Loading a model from its configuration file does `),wpe=a("strong"),$Uo=o("not"),kUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=a("a"),SUo=o("from_pretrained()"),RUo=o(" to load the model weights."),PUo=l(),F(_F.$$.fragment),BUo=l(),co=a("div"),F(Q6.$$.fragment),IUo=l(),Ape=a("p"),qUo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),NUo=l(),Oa=a("p"),jUo=o("The model class to instantiate is selected based on the "),ype=a("code"),DUo=o("model_type"),GUo=o(` property of the config object (either
passed as an argument or loaded from `),Lpe=a("code"),OUo=o("pretrained_model_name_or_path"),VUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=a("code"),XUo=o("pretrained_model_name_or_path"),zUo=o(":"),QUo=l(),De=a("ul"),bF=a("li"),$pe=a("strong"),WUo=o("data2vec-audio"),HUo=o(" \u2014 "),aX=a("a"),UUo=o("Data2VecAudioForCTC"),JUo=o(" (Data2VecAudio model)"),YUo=l(),vF=a("li"),kpe=a("strong"),KUo=o("hubert"),ZUo=o(" \u2014 "),nX=a("a"),eJo=o("HubertForCTC"),oJo=o(" (Hubert model)"),rJo=l(),FF=a("li"),Spe=a("strong"),tJo=o("sew"),aJo=o(" \u2014 "),sX=a("a"),nJo=o("SEWForCTC"),sJo=o(" (SEW model)"),lJo=l(),TF=a("li"),Rpe=a("strong"),iJo=o("sew-d"),dJo=o(" \u2014 "),lX=a("a"),cJo=o("SEWDForCTC"),fJo=o(" (SEW-D model)"),mJo=l(),MF=a("li"),Ppe=a("strong"),gJo=o("unispeech"),hJo=o(" \u2014 "),iX=a("a"),pJo=o("UniSpeechForCTC"),uJo=o(" (UniSpeech model)"),_Jo=l(),EF=a("li"),Bpe=a("strong"),bJo=o("unispeech-sat"),vJo=o(" \u2014 "),dX=a("a"),FJo=o("UniSpeechSatForCTC"),TJo=o(" (UniSpeechSat model)"),MJo=l(),CF=a("li"),Ipe=a("strong"),EJo=o("wav2vec2"),CJo=o(" \u2014 "),cX=a("a"),wJo=o("Wav2Vec2ForCTC"),AJo=o(" (Wav2Vec2 model)"),yJo=l(),wF=a("li"),qpe=a("strong"),LJo=o("wavlm"),xJo=o(" \u2014 "),fX=a("a"),$Jo=o("WavLMForCTC"),kJo=o(" (WavLM model)"),SJo=l(),AF=a("p"),RJo=o("The model is set in evaluation mode by default using "),Npe=a("code"),PJo=o("model.eval()"),BJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jpe=a("code"),IJo=o("model.train()"),qJo=l(),F(yF.$$.fragment),yIe=l(),ud=a("h2"),LF=a("a"),Dpe=a("span"),F(W6.$$.fragment),NJo=l(),Gpe=a("span"),jJo=o("AutoModelForSpeechSeq2Seq"),LIe=l(),Xo=a("div"),F(H6.$$.fragment),DJo=l(),_d=a("p"),GJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),mX=a("a"),OJo=o("from_pretrained()"),VJo=o(" class method or the "),gX=a("a"),XJo=o("from_config()"),zJo=o(` class
method.`),QJo=l(),U6=a("p"),WJo=o("This class cannot be instantiated directly using "),Ope=a("code"),HJo=o("__init__()"),UJo=o(" (throws an error)."),JJo=l(),bt=a("div"),F(J6.$$.fragment),YJo=l(),Vpe=a("p"),KJo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ZJo=l(),bd=a("p"),eYo=o(`Note:
Loading a model from its configuration file does `),Xpe=a("strong"),oYo=o("not"),rYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=a("a"),tYo=o("from_pretrained()"),aYo=o(" to load the model weights."),nYo=l(),F(xF.$$.fragment),sYo=l(),fo=a("div"),F(Y6.$$.fragment),lYo=l(),zpe=a("p"),iYo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),dYo=l(),Va=a("p"),cYo=o("The model class to instantiate is selected based on the "),Qpe=a("code"),fYo=o("model_type"),mYo=o(` property of the config object (either
passed as an argument or loaded from `),Wpe=a("code"),gYo=o("pretrained_model_name_or_path"),hYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=a("code"),pYo=o("pretrained_model_name_or_path"),uYo=o(":"),_Yo=l(),K6=a("ul"),$F=a("li"),Upe=a("strong"),bYo=o("speech-encoder-decoder"),vYo=o(" \u2014 "),pX=a("a"),FYo=o("SpeechEncoderDecoderModel"),TYo=o(" (Speech Encoder decoder model)"),MYo=l(),kF=a("li"),Jpe=a("strong"),EYo=o("speech_to_text"),CYo=o(" \u2014 "),uX=a("a"),wYo=o("Speech2TextForConditionalGeneration"),AYo=o(" (Speech2Text model)"),yYo=l(),SF=a("p"),LYo=o("The model is set in evaluation mode by default using "),Ype=a("code"),xYo=o("model.eval()"),$Yo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kpe=a("code"),kYo=o("model.train()"),SYo=l(),F(RF.$$.fragment),xIe=l(),vd=a("h2"),PF=a("a"),Zpe=a("span"),F(Z6.$$.fragment),RYo=l(),eue=a("span"),PYo=o("AutoModelForAudioXVector"),$Ie=l(),zo=a("div"),F(ey.$$.fragment),BYo=l(),Fd=a("p"),IYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),_X=a("a"),qYo=o("from_pretrained()"),NYo=o(" class method or the "),bX=a("a"),jYo=o("from_config()"),DYo=o(` class
method.`),GYo=l(),oy=a("p"),OYo=o("This class cannot be instantiated directly using "),oue=a("code"),VYo=o("__init__()"),XYo=o(" (throws an error)."),zYo=l(),vt=a("div"),F(ry.$$.fragment),QYo=l(),rue=a("p"),WYo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),HYo=l(),Td=a("p"),UYo=o(`Note:
Loading a model from its configuration file does `),tue=a("strong"),JYo=o("not"),YYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=a("a"),KYo=o("from_pretrained()"),ZYo=o(" to load the model weights."),eKo=l(),F(BF.$$.fragment),oKo=l(),mo=a("div"),F(ty.$$.fragment),rKo=l(),aue=a("p"),tKo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),aKo=l(),Xa=a("p"),nKo=o("The model class to instantiate is selected based on the "),nue=a("code"),sKo=o("model_type"),lKo=o(` property of the config object (either
passed as an argument or loaded from `),sue=a("code"),iKo=o("pretrained_model_name_or_path"),dKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lue=a("code"),cKo=o("pretrained_model_name_or_path"),fKo=o(":"),mKo=l(),za=a("ul"),IF=a("li"),iue=a("strong"),gKo=o("data2vec-audio"),hKo=o(" \u2014 "),FX=a("a"),pKo=o("Data2VecAudioForXVector"),uKo=o(" (Data2VecAudio model)"),_Ko=l(),qF=a("li"),due=a("strong"),bKo=o("unispeech-sat"),vKo=o(" \u2014 "),TX=a("a"),FKo=o("UniSpeechSatForXVector"),TKo=o(" (UniSpeechSat model)"),MKo=l(),NF=a("li"),cue=a("strong"),EKo=o("wav2vec2"),CKo=o(" \u2014 "),MX=a("a"),wKo=o("Wav2Vec2ForXVector"),AKo=o(" (Wav2Vec2 model)"),yKo=l(),jF=a("li"),fue=a("strong"),LKo=o("wavlm"),xKo=o(" \u2014 "),EX=a("a"),$Ko=o("WavLMForXVector"),kKo=o(" (WavLM model)"),SKo=l(),DF=a("p"),RKo=o("The model is set in evaluation mode by default using "),mue=a("code"),PKo=o("model.eval()"),BKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=a("code"),IKo=o("model.train()"),qKo=l(),F(GF.$$.fragment),kIe=l(),Md=a("h2"),OF=a("a"),hue=a("span"),F(ay.$$.fragment),NKo=l(),pue=a("span"),jKo=o("AutoModelForMaskedImageModeling"),SIe=l(),Qo=a("div"),F(ny.$$.fragment),DKo=l(),Ed=a("p"),GKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),CX=a("a"),OKo=o("from_pretrained()"),VKo=o(" class method or the "),wX=a("a"),XKo=o("from_config()"),zKo=o(` class
method.`),QKo=l(),sy=a("p"),WKo=o("This class cannot be instantiated directly using "),uue=a("code"),HKo=o("__init__()"),UKo=o(" (throws an error)."),JKo=l(),Ft=a("div"),F(ly.$$.fragment),YKo=l(),_ue=a("p"),KKo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),ZKo=l(),Cd=a("p"),eZo=o(`Note:
Loading a model from its configuration file does `),bue=a("strong"),oZo=o("not"),rZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=a("a"),tZo=o("from_pretrained()"),aZo=o(" to load the model weights."),nZo=l(),F(VF.$$.fragment),sZo=l(),go=a("div"),F(iy.$$.fragment),lZo=l(),vue=a("p"),iZo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),dZo=l(),Qa=a("p"),cZo=o("The model class to instantiate is selected based on the "),Fue=a("code"),fZo=o("model_type"),mZo=o(` property of the config object (either
passed as an argument or loaded from `),Tue=a("code"),gZo=o("pretrained_model_name_or_path"),hZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=a("code"),pZo=o("pretrained_model_name_or_path"),uZo=o(":"),_Zo=l(),wd=a("ul"),XF=a("li"),Eue=a("strong"),bZo=o("deit"),vZo=o(" \u2014 "),yX=a("a"),FZo=o("DeiTForMaskedImageModeling"),TZo=o(" (DeiT model)"),MZo=l(),zF=a("li"),Cue=a("strong"),EZo=o("swin"),CZo=o(" \u2014 "),LX=a("a"),wZo=o("SwinForMaskedImageModeling"),AZo=o(" (Swin model)"),yZo=l(),QF=a("li"),wue=a("strong"),LZo=o("vit"),xZo=o(" \u2014 "),xX=a("a"),$Zo=o("ViTForMaskedImageModeling"),kZo=o(" (ViT model)"),SZo=l(),WF=a("p"),RZo=o("The model is set in evaluation mode by default using "),Aue=a("code"),PZo=o("model.eval()"),BZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yue=a("code"),IZo=o("model.train()"),qZo=l(),F(HF.$$.fragment),RIe=l(),Ad=a("h2"),UF=a("a"),Lue=a("span"),F(dy.$$.fragment),NZo=l(),xue=a("span"),jZo=o("AutoModelForObjectDetection"),PIe=l(),Wo=a("div"),F(cy.$$.fragment),DZo=l(),yd=a("p"),GZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),$X=a("a"),OZo=o("from_pretrained()"),VZo=o(" class method or the "),kX=a("a"),XZo=o("from_config()"),zZo=o(` class
method.`),QZo=l(),fy=a("p"),WZo=o("This class cannot be instantiated directly using "),$ue=a("code"),HZo=o("__init__()"),UZo=o(" (throws an error)."),JZo=l(),Tt=a("div"),F(my.$$.fragment),YZo=l(),kue=a("p"),KZo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ZZo=l(),Ld=a("p"),eer=o(`Note:
Loading a model from its configuration file does `),Sue=a("strong"),oer=o("not"),rer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),ter=o("from_pretrained()"),aer=o(" to load the model weights."),ner=l(),F(JF.$$.fragment),ser=l(),ho=a("div"),F(gy.$$.fragment),ler=l(),Rue=a("p"),ier=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),der=l(),Wa=a("p"),cer=o("The model class to instantiate is selected based on the "),Pue=a("code"),fer=o("model_type"),mer=o(` property of the config object (either
passed as an argument or loaded from `),Bue=a("code"),ger=o("pretrained_model_name_or_path"),her=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=a("code"),per=o("pretrained_model_name_or_path"),uer=o(":"),_er=l(),hy=a("ul"),YF=a("li"),que=a("strong"),ber=o("detr"),ver=o(" \u2014 "),RX=a("a"),Fer=o("DetrForObjectDetection"),Ter=o(" (DETR model)"),Mer=l(),KF=a("li"),Nue=a("strong"),Eer=o("yolos"),Cer=o(" \u2014 "),PX=a("a"),wer=o("YolosForObjectDetection"),Aer=o(" (YOLOS model)"),yer=l(),ZF=a("p"),Ler=o("The model is set in evaluation mode by default using "),jue=a("code"),xer=o("model.eval()"),$er=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Due=a("code"),ker=o("model.train()"),Ser=l(),F(e0.$$.fragment),BIe=l(),xd=a("h2"),o0=a("a"),Gue=a("span"),F(py.$$.fragment),Rer=l(),Oue=a("span"),Per=o("AutoModelForImageSegmentation"),IIe=l(),Ho=a("div"),F(uy.$$.fragment),Ber=l(),$d=a("p"),Ier=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),BX=a("a"),qer=o("from_pretrained()"),Ner=o(" class method or the "),IX=a("a"),jer=o("from_config()"),Der=o(` class
method.`),Ger=l(),_y=a("p"),Oer=o("This class cannot be instantiated directly using "),Vue=a("code"),Ver=o("__init__()"),Xer=o(" (throws an error)."),zer=l(),Mt=a("div"),F(by.$$.fragment),Qer=l(),Xue=a("p"),Wer=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Her=l(),kd=a("p"),Uer=o(`Note:
Loading a model from its configuration file does `),zue=a("strong"),Jer=o("not"),Yer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=a("a"),Ker=o("from_pretrained()"),Zer=o(" to load the model weights."),eor=l(),F(r0.$$.fragment),oor=l(),po=a("div"),F(vy.$$.fragment),ror=l(),Que=a("p"),tor=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),aor=l(),Ha=a("p"),nor=o("The model class to instantiate is selected based on the "),Wue=a("code"),sor=o("model_type"),lor=o(` property of the config object (either
passed as an argument or loaded from `),Hue=a("code"),ior=o("pretrained_model_name_or_path"),dor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uue=a("code"),cor=o("pretrained_model_name_or_path"),mor=o(":"),gor=l(),Jue=a("ul"),t0=a("li"),Yue=a("strong"),hor=o("detr"),por=o(" \u2014 "),NX=a("a"),uor=o("DetrForSegmentation"),_or=o(" (DETR model)"),bor=l(),a0=a("p"),vor=o("The model is set in evaluation mode by default using "),Kue=a("code"),For=o("model.eval()"),Tor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zue=a("code"),Mor=o("model.train()"),Eor=l(),F(n0.$$.fragment),qIe=l(),Sd=a("h2"),s0=a("a"),e_e=a("span"),F(Fy.$$.fragment),Cor=l(),o_e=a("span"),wor=o("AutoModelForSemanticSegmentation"),NIe=l(),Uo=a("div"),F(Ty.$$.fragment),Aor=l(),Rd=a("p"),yor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),jX=a("a"),Lor=o("from_pretrained()"),xor=o(" class method or the "),DX=a("a"),$or=o("from_config()"),kor=o(` class
method.`),Sor=l(),My=a("p"),Ror=o("This class cannot be instantiated directly using "),r_e=a("code"),Por=o("__init__()"),Bor=o(" (throws an error)."),Ior=l(),Et=a("div"),F(Ey.$$.fragment),qor=l(),t_e=a("p"),Nor=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),jor=l(),Pd=a("p"),Dor=o(`Note:
Loading a model from its configuration file does `),a_e=a("strong"),Gor=o("not"),Oor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=a("a"),Vor=o("from_pretrained()"),Xor=o(" to load the model weights."),zor=l(),F(l0.$$.fragment),Qor=l(),uo=a("div"),F(Cy.$$.fragment),Wor=l(),n_e=a("p"),Hor=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Uor=l(),Ua=a("p"),Jor=o("The model class to instantiate is selected based on the "),s_e=a("code"),Yor=o("model_type"),Kor=o(` property of the config object (either
passed as an argument or loaded from `),l_e=a("code"),Zor=o("pretrained_model_name_or_path"),err=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=a("code"),orr=o("pretrained_model_name_or_path"),rrr=o(":"),trr=l(),Ja=a("ul"),i0=a("li"),d_e=a("strong"),arr=o("beit"),nrr=o(" \u2014 "),OX=a("a"),srr=o("BeitForSemanticSegmentation"),lrr=o(" (BEiT model)"),irr=l(),d0=a("li"),c_e=a("strong"),drr=o("data2vec-vision"),crr=o(" \u2014 "),VX=a("a"),frr=o("Data2VecVisionForSemanticSegmentation"),mrr=o(" (Data2VecVision model)"),grr=l(),c0=a("li"),f_e=a("strong"),hrr=o("dpt"),prr=o(" \u2014 "),XX=a("a"),urr=o("DPTForSemanticSegmentation"),_rr=o(" (DPT model)"),brr=l(),f0=a("li"),m_e=a("strong"),vrr=o("segformer"),Frr=o(" \u2014 "),zX=a("a"),Trr=o("SegformerForSemanticSegmentation"),Mrr=o(" (SegFormer model)"),Err=l(),m0=a("p"),Crr=o("The model is set in evaluation mode by default using "),g_e=a("code"),wrr=o("model.eval()"),Arr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h_e=a("code"),yrr=o("model.train()"),Lrr=l(),F(g0.$$.fragment),jIe=l(),Bd=a("h2"),h0=a("a"),p_e=a("span"),F(wy.$$.fragment),xrr=l(),u_e=a("span"),$rr=o("AutoModelForInstanceSegmentation"),DIe=l(),Jo=a("div"),F(Ay.$$.fragment),krr=l(),Id=a("p"),Srr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),QX=a("a"),Rrr=o("from_pretrained()"),Prr=o(" class method or the "),WX=a("a"),Brr=o("from_config()"),Irr=o(` class
method.`),qrr=l(),yy=a("p"),Nrr=o("This class cannot be instantiated directly using "),__e=a("code"),jrr=o("__init__()"),Drr=o(" (throws an error)."),Grr=l(),Ct=a("div"),F(Ly.$$.fragment),Orr=l(),b_e=a("p"),Vrr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Xrr=l(),qd=a("p"),zrr=o(`Note:
Loading a model from its configuration file does `),v_e=a("strong"),Qrr=o("not"),Wrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=a("a"),Hrr=o("from_pretrained()"),Urr=o(" to load the model weights."),Jrr=l(),F(p0.$$.fragment),Yrr=l(),_o=a("div"),F(xy.$$.fragment),Krr=l(),F_e=a("p"),Zrr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),etr=l(),Ya=a("p"),otr=o("The model class to instantiate is selected based on the "),T_e=a("code"),rtr=o("model_type"),ttr=o(` property of the config object (either
passed as an argument or loaded from `),M_e=a("code"),atr=o("pretrained_model_name_or_path"),ntr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=a("code"),str=o("pretrained_model_name_or_path"),ltr=o(":"),itr=l(),C_e=a("ul"),u0=a("li"),w_e=a("strong"),dtr=o("maskformer"),ctr=o(" \u2014 "),UX=a("a"),ftr=o("MaskFormerForInstanceSegmentation"),mtr=o(" (MaskFormer model)"),gtr=l(),_0=a("p"),htr=o("The model is set in evaluation mode by default using "),A_e=a("code"),ptr=o("model.eval()"),utr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y_e=a("code"),_tr=o("model.train()"),btr=l(),F(b0.$$.fragment),GIe=l(),Nd=a("h2"),v0=a("a"),L_e=a("span"),F($y.$$.fragment),vtr=l(),x_e=a("span"),Ftr=o("TFAutoModel"),OIe=l(),Yo=a("div"),F(ky.$$.fragment),Ttr=l(),jd=a("p"),Mtr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JX=a("a"),Etr=o("from_pretrained()"),Ctr=o(" class method or the "),YX=a("a"),wtr=o("from_config()"),Atr=o(` class
method.`),ytr=l(),Sy=a("p"),Ltr=o("This class cannot be instantiated directly using "),$_e=a("code"),xtr=o("__init__()"),$tr=o(" (throws an error)."),ktr=l(),wt=a("div"),F(Ry.$$.fragment),Str=l(),k_e=a("p"),Rtr=o("Instantiates one of the base model classes of the library from a configuration."),Ptr=l(),Dd=a("p"),Btr=o(`Note:
Loading a model from its configuration file does `),S_e=a("strong"),Itr=o("not"),qtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KX=a("a"),Ntr=o("from_pretrained()"),jtr=o(" to load the model weights."),Dtr=l(),F(F0.$$.fragment),Gtr=l(),wr=a("div"),F(Py.$$.fragment),Otr=l(),R_e=a("p"),Vtr=o("Instantiate one of the base model classes of the library from a pretrained model."),Xtr=l(),Ka=a("p"),ztr=o("The model class to instantiate is selected based on the "),P_e=a("code"),Qtr=o("model_type"),Wtr=o(` property of the config object (either
passed as an argument or loaded from `),B_e=a("code"),Htr=o("pretrained_model_name_or_path"),Utr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=a("code"),Jtr=o("pretrained_model_name_or_path"),Ytr=o(":"),Ktr=l(),N=a("ul"),T0=a("li"),q_e=a("strong"),Ztr=o("albert"),ear=o(" \u2014 "),ZX=a("a"),oar=o("TFAlbertModel"),rar=o(" (ALBERT model)"),tar=l(),M0=a("li"),N_e=a("strong"),aar=o("bart"),nar=o(" \u2014 "),ez=a("a"),sar=o("TFBartModel"),lar=o(" (BART model)"),iar=l(),E0=a("li"),j_e=a("strong"),dar=o("bert"),car=o(" \u2014 "),oz=a("a"),far=o("TFBertModel"),mar=o(" (BERT model)"),gar=l(),C0=a("li"),D_e=a("strong"),har=o("blenderbot"),par=o(" \u2014 "),rz=a("a"),uar=o("TFBlenderbotModel"),_ar=o(" (Blenderbot model)"),bar=l(),w0=a("li"),G_e=a("strong"),Far=o("blenderbot-small"),Tar=o(" \u2014 "),tz=a("a"),Mar=o("TFBlenderbotSmallModel"),Ear=o(" (BlenderbotSmall model)"),Car=l(),A0=a("li"),O_e=a("strong"),war=o("camembert"),Aar=o(" \u2014 "),az=a("a"),yar=o("TFCamembertModel"),Lar=o(" (CamemBERT model)"),xar=l(),y0=a("li"),V_e=a("strong"),$ar=o("clip"),kar=o(" \u2014 "),nz=a("a"),Sar=o("TFCLIPModel"),Rar=o(" (CLIP model)"),Par=l(),L0=a("li"),X_e=a("strong"),Bar=o("convbert"),Iar=o(" \u2014 "),sz=a("a"),qar=o("TFConvBertModel"),Nar=o(" (ConvBERT model)"),jar=l(),x0=a("li"),z_e=a("strong"),Dar=o("convnext"),Gar=o(" \u2014 "),lz=a("a"),Oar=o("TFConvNextModel"),Var=o(" (ConvNext model)"),Xar=l(),$0=a("li"),Q_e=a("strong"),zar=o("ctrl"),Qar=o(" \u2014 "),iz=a("a"),War=o("TFCTRLModel"),Har=o(" (CTRL model)"),Uar=l(),k0=a("li"),W_e=a("strong"),Jar=o("data2vec-vision"),Yar=o(" \u2014 "),dz=a("a"),Kar=o("TFData2VecVisionModel"),Zar=o(" (Data2VecVision model)"),enr=l(),S0=a("li"),H_e=a("strong"),onr=o("deberta"),rnr=o(" \u2014 "),cz=a("a"),tnr=o("TFDebertaModel"),anr=o(" (DeBERTa model)"),nnr=l(),R0=a("li"),U_e=a("strong"),snr=o("deberta-v2"),lnr=o(" \u2014 "),fz=a("a"),inr=o("TFDebertaV2Model"),dnr=o(" (DeBERTa-v2 model)"),cnr=l(),P0=a("li"),J_e=a("strong"),fnr=o("distilbert"),mnr=o(" \u2014 "),mz=a("a"),gnr=o("TFDistilBertModel"),hnr=o(" (DistilBERT model)"),pnr=l(),B0=a("li"),Y_e=a("strong"),unr=o("dpr"),_nr=o(" \u2014 "),gz=a("a"),bnr=o("TFDPRQuestionEncoder"),vnr=o(" (DPR model)"),Fnr=l(),I0=a("li"),K_e=a("strong"),Tnr=o("electra"),Mnr=o(" \u2014 "),hz=a("a"),Enr=o("TFElectraModel"),Cnr=o(" (ELECTRA model)"),wnr=l(),q0=a("li"),Z_e=a("strong"),Anr=o("flaubert"),ynr=o(" \u2014 "),pz=a("a"),Lnr=o("TFFlaubertModel"),xnr=o(" (FlauBERT model)"),$nr=l(),Bs=a("li"),e1e=a("strong"),knr=o("funnel"),Snr=o(" \u2014 "),uz=a("a"),Rnr=o("TFFunnelModel"),Pnr=o(" or "),_z=a("a"),Bnr=o("TFFunnelBaseModel"),Inr=o(" (Funnel Transformer model)"),qnr=l(),N0=a("li"),o1e=a("strong"),Nnr=o("gpt2"),jnr=o(" \u2014 "),bz=a("a"),Dnr=o("TFGPT2Model"),Gnr=o(" (OpenAI GPT-2 model)"),Onr=l(),j0=a("li"),r1e=a("strong"),Vnr=o("gptj"),Xnr=o(" \u2014 "),vz=a("a"),znr=o("TFGPTJModel"),Qnr=o(" (GPT-J model)"),Wnr=l(),D0=a("li"),t1e=a("strong"),Hnr=o("hubert"),Unr=o(" \u2014 "),Fz=a("a"),Jnr=o("TFHubertModel"),Ynr=o(" (Hubert model)"),Knr=l(),G0=a("li"),a1e=a("strong"),Znr=o("layoutlm"),esr=o(" \u2014 "),Tz=a("a"),osr=o("TFLayoutLMModel"),rsr=o(" (LayoutLM model)"),tsr=l(),O0=a("li"),n1e=a("strong"),asr=o("led"),nsr=o(" \u2014 "),Mz=a("a"),ssr=o("TFLEDModel"),lsr=o(" (LED model)"),isr=l(),V0=a("li"),s1e=a("strong"),dsr=o("longformer"),csr=o(" \u2014 "),Ez=a("a"),fsr=o("TFLongformerModel"),msr=o(" (Longformer model)"),gsr=l(),X0=a("li"),l1e=a("strong"),hsr=o("lxmert"),psr=o(" \u2014 "),Cz=a("a"),usr=o("TFLxmertModel"),_sr=o(" (LXMERT model)"),bsr=l(),z0=a("li"),i1e=a("strong"),vsr=o("marian"),Fsr=o(" \u2014 "),wz=a("a"),Tsr=o("TFMarianModel"),Msr=o(" (Marian model)"),Esr=l(),Q0=a("li"),d1e=a("strong"),Csr=o("mbart"),wsr=o(" \u2014 "),Az=a("a"),Asr=o("TFMBartModel"),ysr=o(" (mBART model)"),Lsr=l(),W0=a("li"),c1e=a("strong"),xsr=o("mobilebert"),$sr=o(" \u2014 "),yz=a("a"),ksr=o("TFMobileBertModel"),Ssr=o(" (MobileBERT model)"),Rsr=l(),H0=a("li"),f1e=a("strong"),Psr=o("mpnet"),Bsr=o(" \u2014 "),Lz=a("a"),Isr=o("TFMPNetModel"),qsr=o(" (MPNet model)"),Nsr=l(),U0=a("li"),m1e=a("strong"),jsr=o("mt5"),Dsr=o(" \u2014 "),xz=a("a"),Gsr=o("TFMT5Model"),Osr=o(" (mT5 model)"),Vsr=l(),J0=a("li"),g1e=a("strong"),Xsr=o("openai-gpt"),zsr=o(" \u2014 "),$z=a("a"),Qsr=o("TFOpenAIGPTModel"),Wsr=o(" (OpenAI GPT model)"),Hsr=l(),Y0=a("li"),h1e=a("strong"),Usr=o("opt"),Jsr=o(" \u2014 "),kz=a("a"),Ysr=o("TFOPTModel"),Ksr=o(" (OPT model)"),Zsr=l(),K0=a("li"),p1e=a("strong"),elr=o("pegasus"),olr=o(" \u2014 "),Sz=a("a"),rlr=o("TFPegasusModel"),tlr=o(" (Pegasus model)"),alr=l(),Z0=a("li"),u1e=a("strong"),nlr=o("rembert"),slr=o(" \u2014 "),Rz=a("a"),llr=o("TFRemBertModel"),ilr=o(" (RemBERT model)"),dlr=l(),eT=a("li"),_1e=a("strong"),clr=o("roberta"),flr=o(" \u2014 "),Pz=a("a"),mlr=o("TFRobertaModel"),glr=o(" (RoBERTa model)"),hlr=l(),oT=a("li"),b1e=a("strong"),plr=o("roformer"),ulr=o(" \u2014 "),Bz=a("a"),_lr=o("TFRoFormerModel"),blr=o(" (RoFormer model)"),vlr=l(),rT=a("li"),v1e=a("strong"),Flr=o("speech_to_text"),Tlr=o(" \u2014 "),Iz=a("a"),Mlr=o("TFSpeech2TextModel"),Elr=o(" (Speech2Text model)"),Clr=l(),tT=a("li"),F1e=a("strong"),wlr=o("t5"),Alr=o(" \u2014 "),qz=a("a"),ylr=o("TFT5Model"),Llr=o(" (T5 model)"),xlr=l(),aT=a("li"),T1e=a("strong"),$lr=o("tapas"),klr=o(" \u2014 "),Nz=a("a"),Slr=o("TFTapasModel"),Rlr=o(" (TAPAS model)"),Plr=l(),nT=a("li"),M1e=a("strong"),Blr=o("transfo-xl"),Ilr=o(" \u2014 "),jz=a("a"),qlr=o("TFTransfoXLModel"),Nlr=o(" (Transformer-XL model)"),jlr=l(),sT=a("li"),E1e=a("strong"),Dlr=o("vit"),Glr=o(" \u2014 "),Dz=a("a"),Olr=o("TFViTModel"),Vlr=o(" (ViT model)"),Xlr=l(),lT=a("li"),C1e=a("strong"),zlr=o("vit_mae"),Qlr=o(" \u2014 "),Gz=a("a"),Wlr=o("TFViTMAEModel"),Hlr=o(" (ViTMAE model)"),Ulr=l(),iT=a("li"),w1e=a("strong"),Jlr=o("wav2vec2"),Ylr=o(" \u2014 "),Oz=a("a"),Klr=o("TFWav2Vec2Model"),Zlr=o(" (Wav2Vec2 model)"),eir=l(),dT=a("li"),A1e=a("strong"),oir=o("xlm"),rir=o(" \u2014 "),Vz=a("a"),tir=o("TFXLMModel"),air=o(" (XLM model)"),nir=l(),cT=a("li"),y1e=a("strong"),sir=o("xlm-roberta"),lir=o(" \u2014 "),Xz=a("a"),iir=o("TFXLMRobertaModel"),dir=o(" (XLM-RoBERTa model)"),cir=l(),fT=a("li"),L1e=a("strong"),fir=o("xlnet"),mir=o(" \u2014 "),zz=a("a"),gir=o("TFXLNetModel"),hir=o(" (XLNet model)"),pir=l(),F(mT.$$.fragment),VIe=l(),Gd=a("h2"),gT=a("a"),x1e=a("span"),F(By.$$.fragment),uir=l(),$1e=a("span"),_ir=o("TFAutoModelForPreTraining"),XIe=l(),Ko=a("div"),F(Iy.$$.fragment),bir=l(),Od=a("p"),vir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qz=a("a"),Fir=o("from_pretrained()"),Tir=o(" class method or the "),Wz=a("a"),Mir=o("from_config()"),Eir=o(` class
method.`),Cir=l(),qy=a("p"),wir=o("This class cannot be instantiated directly using "),k1e=a("code"),Air=o("__init__()"),yir=o(" (throws an error)."),Lir=l(),At=a("div"),F(Ny.$$.fragment),xir=l(),S1e=a("p"),$ir=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kir=l(),Vd=a("p"),Sir=o(`Note:
Loading a model from its configuration file does `),R1e=a("strong"),Rir=o("not"),Pir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=a("a"),Bir=o("from_pretrained()"),Iir=o(" to load the model weights."),qir=l(),F(hT.$$.fragment),Nir=l(),Ar=a("div"),F(jy.$$.fragment),jir=l(),P1e=a("p"),Dir=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gir=l(),Za=a("p"),Oir=o("The model class to instantiate is selected based on the "),B1e=a("code"),Vir=o("model_type"),Xir=o(` property of the config object (either
passed as an argument or loaded from `),I1e=a("code"),zir=o("pretrained_model_name_or_path"),Qir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q1e=a("code"),Wir=o("pretrained_model_name_or_path"),Hir=o(":"),Uir=l(),ne=a("ul"),pT=a("li"),N1e=a("strong"),Jir=o("albert"),Yir=o(" \u2014 "),Uz=a("a"),Kir=o("TFAlbertForPreTraining"),Zir=o(" (ALBERT model)"),edr=l(),uT=a("li"),j1e=a("strong"),odr=o("bart"),rdr=o(" \u2014 "),Jz=a("a"),tdr=o("TFBartForConditionalGeneration"),adr=o(" (BART model)"),ndr=l(),_T=a("li"),D1e=a("strong"),sdr=o("bert"),ldr=o(" \u2014 "),Yz=a("a"),idr=o("TFBertForPreTraining"),ddr=o(" (BERT model)"),cdr=l(),bT=a("li"),G1e=a("strong"),fdr=o("camembert"),mdr=o(" \u2014 "),Kz=a("a"),gdr=o("TFCamembertForMaskedLM"),hdr=o(" (CamemBERT model)"),pdr=l(),vT=a("li"),O1e=a("strong"),udr=o("ctrl"),_dr=o(" \u2014 "),Zz=a("a"),bdr=o("TFCTRLLMHeadModel"),vdr=o(" (CTRL model)"),Fdr=l(),FT=a("li"),V1e=a("strong"),Tdr=o("distilbert"),Mdr=o(" \u2014 "),eQ=a("a"),Edr=o("TFDistilBertForMaskedLM"),Cdr=o(" (DistilBERT model)"),wdr=l(),TT=a("li"),X1e=a("strong"),Adr=o("electra"),ydr=o(" \u2014 "),oQ=a("a"),Ldr=o("TFElectraForPreTraining"),xdr=o(" (ELECTRA model)"),$dr=l(),MT=a("li"),z1e=a("strong"),kdr=o("flaubert"),Sdr=o(" \u2014 "),rQ=a("a"),Rdr=o("TFFlaubertWithLMHeadModel"),Pdr=o(" (FlauBERT model)"),Bdr=l(),ET=a("li"),Q1e=a("strong"),Idr=o("funnel"),qdr=o(" \u2014 "),tQ=a("a"),Ndr=o("TFFunnelForPreTraining"),jdr=o(" (Funnel Transformer model)"),Ddr=l(),CT=a("li"),W1e=a("strong"),Gdr=o("gpt2"),Odr=o(" \u2014 "),aQ=a("a"),Vdr=o("TFGPT2LMHeadModel"),Xdr=o(" (OpenAI GPT-2 model)"),zdr=l(),wT=a("li"),H1e=a("strong"),Qdr=o("layoutlm"),Wdr=o(" \u2014 "),nQ=a("a"),Hdr=o("TFLayoutLMForMaskedLM"),Udr=o(" (LayoutLM model)"),Jdr=l(),AT=a("li"),U1e=a("strong"),Ydr=o("lxmert"),Kdr=o(" \u2014 "),sQ=a("a"),Zdr=o("TFLxmertForPreTraining"),ecr=o(" (LXMERT model)"),ocr=l(),yT=a("li"),J1e=a("strong"),rcr=o("mobilebert"),tcr=o(" \u2014 "),lQ=a("a"),acr=o("TFMobileBertForPreTraining"),ncr=o(" (MobileBERT model)"),scr=l(),LT=a("li"),Y1e=a("strong"),lcr=o("mpnet"),icr=o(" \u2014 "),iQ=a("a"),dcr=o("TFMPNetForMaskedLM"),ccr=o(" (MPNet model)"),fcr=l(),xT=a("li"),K1e=a("strong"),mcr=o("openai-gpt"),gcr=o(" \u2014 "),dQ=a("a"),hcr=o("TFOpenAIGPTLMHeadModel"),pcr=o(" (OpenAI GPT model)"),ucr=l(),$T=a("li"),Z1e=a("strong"),_cr=o("roberta"),bcr=o(" \u2014 "),cQ=a("a"),vcr=o("TFRobertaForMaskedLM"),Fcr=o(" (RoBERTa model)"),Tcr=l(),kT=a("li"),e8e=a("strong"),Mcr=o("t5"),Ecr=o(" \u2014 "),fQ=a("a"),Ccr=o("TFT5ForConditionalGeneration"),wcr=o(" (T5 model)"),Acr=l(),ST=a("li"),o8e=a("strong"),ycr=o("tapas"),Lcr=o(" \u2014 "),mQ=a("a"),xcr=o("TFTapasForMaskedLM"),$cr=o(" (TAPAS model)"),kcr=l(),RT=a("li"),r8e=a("strong"),Scr=o("transfo-xl"),Rcr=o(" \u2014 "),gQ=a("a"),Pcr=o("TFTransfoXLLMHeadModel"),Bcr=o(" (Transformer-XL model)"),Icr=l(),PT=a("li"),t8e=a("strong"),qcr=o("vit_mae"),Ncr=o(" \u2014 "),hQ=a("a"),jcr=o("TFViTMAEForPreTraining"),Dcr=o(" (ViTMAE model)"),Gcr=l(),BT=a("li"),a8e=a("strong"),Ocr=o("xlm"),Vcr=o(" \u2014 "),pQ=a("a"),Xcr=o("TFXLMWithLMHeadModel"),zcr=o(" (XLM model)"),Qcr=l(),IT=a("li"),n8e=a("strong"),Wcr=o("xlm-roberta"),Hcr=o(" \u2014 "),uQ=a("a"),Ucr=o("TFXLMRobertaForMaskedLM"),Jcr=o(" (XLM-RoBERTa model)"),Ycr=l(),qT=a("li"),s8e=a("strong"),Kcr=o("xlnet"),Zcr=o(" \u2014 "),_Q=a("a"),efr=o("TFXLNetLMHeadModel"),ofr=o(" (XLNet model)"),rfr=l(),F(NT.$$.fragment),zIe=l(),Xd=a("h2"),jT=a("a"),l8e=a("span"),F(Dy.$$.fragment),tfr=l(),i8e=a("span"),afr=o("TFAutoModelForCausalLM"),QIe=l(),Zo=a("div"),F(Gy.$$.fragment),nfr=l(),zd=a("p"),sfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bQ=a("a"),lfr=o("from_pretrained()"),ifr=o(" class method or the "),vQ=a("a"),dfr=o("from_config()"),cfr=o(` class
method.`),ffr=l(),Oy=a("p"),mfr=o("This class cannot be instantiated directly using "),d8e=a("code"),gfr=o("__init__()"),hfr=o(" (throws an error)."),pfr=l(),yt=a("div"),F(Vy.$$.fragment),ufr=l(),c8e=a("p"),_fr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),bfr=l(),Qd=a("p"),vfr=o(`Note:
Loading a model from its configuration file does `),f8e=a("strong"),Ffr=o("not"),Tfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),Mfr=o("from_pretrained()"),Efr=o(" to load the model weights."),Cfr=l(),F(DT.$$.fragment),wfr=l(),yr=a("div"),F(Xy.$$.fragment),Afr=l(),m8e=a("p"),yfr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Lfr=l(),en=a("p"),xfr=o("The model class to instantiate is selected based on the "),g8e=a("code"),$fr=o("model_type"),kfr=o(` property of the config object (either
passed as an argument or loaded from `),h8e=a("code"),Sfr=o("pretrained_model_name_or_path"),Rfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p8e=a("code"),Pfr=o("pretrained_model_name_or_path"),Bfr=o(":"),Ifr=l(),Te=a("ul"),GT=a("li"),u8e=a("strong"),qfr=o("bert"),Nfr=o(" \u2014 "),TQ=a("a"),jfr=o("TFBertLMHeadModel"),Dfr=o(" (BERT model)"),Gfr=l(),OT=a("li"),_8e=a("strong"),Ofr=o("camembert"),Vfr=o(" \u2014 "),MQ=a("a"),Xfr=o("TFCamembertForCausalLM"),zfr=o(" (CamemBERT model)"),Qfr=l(),VT=a("li"),b8e=a("strong"),Wfr=o("ctrl"),Hfr=o(" \u2014 "),EQ=a("a"),Ufr=o("TFCTRLLMHeadModel"),Jfr=o(" (CTRL model)"),Yfr=l(),XT=a("li"),v8e=a("strong"),Kfr=o("gpt2"),Zfr=o(" \u2014 "),CQ=a("a"),emr=o("TFGPT2LMHeadModel"),omr=o(" (OpenAI GPT-2 model)"),rmr=l(),zT=a("li"),F8e=a("strong"),tmr=o("gptj"),amr=o(" \u2014 "),wQ=a("a"),nmr=o("TFGPTJForCausalLM"),smr=o(" (GPT-J model)"),lmr=l(),QT=a("li"),T8e=a("strong"),imr=o("openai-gpt"),dmr=o(" \u2014 "),AQ=a("a"),cmr=o("TFOpenAIGPTLMHeadModel"),fmr=o(" (OpenAI GPT model)"),mmr=l(),WT=a("li"),M8e=a("strong"),gmr=o("rembert"),hmr=o(" \u2014 "),yQ=a("a"),pmr=o("TFRemBertForCausalLM"),umr=o(" (RemBERT model)"),_mr=l(),HT=a("li"),E8e=a("strong"),bmr=o("roberta"),vmr=o(" \u2014 "),LQ=a("a"),Fmr=o("TFRobertaForCausalLM"),Tmr=o(" (RoBERTa model)"),Mmr=l(),UT=a("li"),C8e=a("strong"),Emr=o("roformer"),Cmr=o(" \u2014 "),xQ=a("a"),wmr=o("TFRoFormerForCausalLM"),Amr=o(" (RoFormer model)"),ymr=l(),JT=a("li"),w8e=a("strong"),Lmr=o("transfo-xl"),xmr=o(" \u2014 "),$Q=a("a"),$mr=o("TFTransfoXLLMHeadModel"),kmr=o(" (Transformer-XL model)"),Smr=l(),YT=a("li"),A8e=a("strong"),Rmr=o("xlm"),Pmr=o(" \u2014 "),kQ=a("a"),Bmr=o("TFXLMWithLMHeadModel"),Imr=o(" (XLM model)"),qmr=l(),KT=a("li"),y8e=a("strong"),Nmr=o("xlnet"),jmr=o(" \u2014 "),SQ=a("a"),Dmr=o("TFXLNetLMHeadModel"),Gmr=o(" (XLNet model)"),Omr=l(),F(ZT.$$.fragment),WIe=l(),Wd=a("h2"),e7=a("a"),L8e=a("span"),F(zy.$$.fragment),Vmr=l(),x8e=a("span"),Xmr=o("TFAutoModelForImageClassification"),HIe=l(),er=a("div"),F(Qy.$$.fragment),zmr=l(),Hd=a("p"),Qmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RQ=a("a"),Wmr=o("from_pretrained()"),Hmr=o(" class method or the "),PQ=a("a"),Umr=o("from_config()"),Jmr=o(` class
method.`),Ymr=l(),Wy=a("p"),Kmr=o("This class cannot be instantiated directly using "),$8e=a("code"),Zmr=o("__init__()"),egr=o(" (throws an error)."),ogr=l(),Lt=a("div"),F(Hy.$$.fragment),rgr=l(),k8e=a("p"),tgr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),agr=l(),Ud=a("p"),ngr=o(`Note:
Loading a model from its configuration file does `),S8e=a("strong"),sgr=o("not"),lgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=a("a"),igr=o("from_pretrained()"),dgr=o(" to load the model weights."),cgr=l(),F(o7.$$.fragment),fgr=l(),Lr=a("div"),F(Uy.$$.fragment),mgr=l(),R8e=a("p"),ggr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hgr=l(),on=a("p"),pgr=o("The model class to instantiate is selected based on the "),P8e=a("code"),ugr=o("model_type"),_gr=o(` property of the config object (either
passed as an argument or loaded from `),B8e=a("code"),bgr=o("pretrained_model_name_or_path"),vgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I8e=a("code"),Fgr=o("pretrained_model_name_or_path"),Tgr=o(":"),Mgr=l(),Jd=a("ul"),r7=a("li"),q8e=a("strong"),Egr=o("convnext"),Cgr=o(" \u2014 "),IQ=a("a"),wgr=o("TFConvNextForImageClassification"),Agr=o(" (ConvNext model)"),ygr=l(),t7=a("li"),N8e=a("strong"),Lgr=o("data2vec-vision"),xgr=o(" \u2014 "),qQ=a("a"),$gr=o("TFData2VecVisionForImageClassification"),kgr=o(" (Data2VecVision model)"),Sgr=l(),a7=a("li"),j8e=a("strong"),Rgr=o("vit"),Pgr=o(" \u2014 "),NQ=a("a"),Bgr=o("TFViTForImageClassification"),Igr=o(" (ViT model)"),qgr=l(),F(n7.$$.fragment),UIe=l(),Yd=a("h2"),s7=a("a"),D8e=a("span"),F(Jy.$$.fragment),Ngr=l(),G8e=a("span"),jgr=o("TFAutoModelForMaskedLM"),JIe=l(),or=a("div"),F(Yy.$$.fragment),Dgr=l(),Kd=a("p"),Ggr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jQ=a("a"),Ogr=o("from_pretrained()"),Vgr=o(" class method or the "),DQ=a("a"),Xgr=o("from_config()"),zgr=o(` class
method.`),Qgr=l(),Ky=a("p"),Wgr=o("This class cannot be instantiated directly using "),O8e=a("code"),Hgr=o("__init__()"),Ugr=o(" (throws an error)."),Jgr=l(),xt=a("div"),F(Zy.$$.fragment),Ygr=l(),V8e=a("p"),Kgr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Zgr=l(),Zd=a("p"),ehr=o(`Note:
Loading a model from its configuration file does `),X8e=a("strong"),ohr=o("not"),rhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GQ=a("a"),thr=o("from_pretrained()"),ahr=o(" to load the model weights."),nhr=l(),F(l7.$$.fragment),shr=l(),xr=a("div"),F(eL.$$.fragment),lhr=l(),z8e=a("p"),ihr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dhr=l(),rn=a("p"),chr=o("The model class to instantiate is selected based on the "),Q8e=a("code"),fhr=o("model_type"),mhr=o(` property of the config object (either
passed as an argument or loaded from `),W8e=a("code"),ghr=o("pretrained_model_name_or_path"),hhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H8e=a("code"),phr=o("pretrained_model_name_or_path"),uhr=o(":"),_hr=l(),ie=a("ul"),i7=a("li"),U8e=a("strong"),bhr=o("albert"),vhr=o(" \u2014 "),OQ=a("a"),Fhr=o("TFAlbertForMaskedLM"),Thr=o(" (ALBERT model)"),Mhr=l(),d7=a("li"),J8e=a("strong"),Ehr=o("bert"),Chr=o(" \u2014 "),VQ=a("a"),whr=o("TFBertForMaskedLM"),Ahr=o(" (BERT model)"),yhr=l(),c7=a("li"),Y8e=a("strong"),Lhr=o("camembert"),xhr=o(" \u2014 "),XQ=a("a"),$hr=o("TFCamembertForMaskedLM"),khr=o(" (CamemBERT model)"),Shr=l(),f7=a("li"),K8e=a("strong"),Rhr=o("convbert"),Phr=o(" \u2014 "),zQ=a("a"),Bhr=o("TFConvBertForMaskedLM"),Ihr=o(" (ConvBERT model)"),qhr=l(),m7=a("li"),Z8e=a("strong"),Nhr=o("deberta"),jhr=o(" \u2014 "),QQ=a("a"),Dhr=o("TFDebertaForMaskedLM"),Ghr=o(" (DeBERTa model)"),Ohr=l(),g7=a("li"),ebe=a("strong"),Vhr=o("deberta-v2"),Xhr=o(" \u2014 "),WQ=a("a"),zhr=o("TFDebertaV2ForMaskedLM"),Qhr=o(" (DeBERTa-v2 model)"),Whr=l(),h7=a("li"),obe=a("strong"),Hhr=o("distilbert"),Uhr=o(" \u2014 "),HQ=a("a"),Jhr=o("TFDistilBertForMaskedLM"),Yhr=o(" (DistilBERT model)"),Khr=l(),p7=a("li"),rbe=a("strong"),Zhr=o("electra"),epr=o(" \u2014 "),UQ=a("a"),opr=o("TFElectraForMaskedLM"),rpr=o(" (ELECTRA model)"),tpr=l(),u7=a("li"),tbe=a("strong"),apr=o("flaubert"),npr=o(" \u2014 "),JQ=a("a"),spr=o("TFFlaubertWithLMHeadModel"),lpr=o(" (FlauBERT model)"),ipr=l(),_7=a("li"),abe=a("strong"),dpr=o("funnel"),cpr=o(" \u2014 "),YQ=a("a"),fpr=o("TFFunnelForMaskedLM"),mpr=o(" (Funnel Transformer model)"),gpr=l(),b7=a("li"),nbe=a("strong"),hpr=o("layoutlm"),ppr=o(" \u2014 "),KQ=a("a"),upr=o("TFLayoutLMForMaskedLM"),_pr=o(" (LayoutLM model)"),bpr=l(),v7=a("li"),sbe=a("strong"),vpr=o("longformer"),Fpr=o(" \u2014 "),ZQ=a("a"),Tpr=o("TFLongformerForMaskedLM"),Mpr=o(" (Longformer model)"),Epr=l(),F7=a("li"),lbe=a("strong"),Cpr=o("mobilebert"),wpr=o(" \u2014 "),eW=a("a"),Apr=o("TFMobileBertForMaskedLM"),ypr=o(" (MobileBERT model)"),Lpr=l(),T7=a("li"),ibe=a("strong"),xpr=o("mpnet"),$pr=o(" \u2014 "),oW=a("a"),kpr=o("TFMPNetForMaskedLM"),Spr=o(" (MPNet model)"),Rpr=l(),M7=a("li"),dbe=a("strong"),Ppr=o("rembert"),Bpr=o(" \u2014 "),rW=a("a"),Ipr=o("TFRemBertForMaskedLM"),qpr=o(" (RemBERT model)"),Npr=l(),E7=a("li"),cbe=a("strong"),jpr=o("roberta"),Dpr=o(" \u2014 "),tW=a("a"),Gpr=o("TFRobertaForMaskedLM"),Opr=o(" (RoBERTa model)"),Vpr=l(),C7=a("li"),fbe=a("strong"),Xpr=o("roformer"),zpr=o(" \u2014 "),aW=a("a"),Qpr=o("TFRoFormerForMaskedLM"),Wpr=o(" (RoFormer model)"),Hpr=l(),w7=a("li"),mbe=a("strong"),Upr=o("tapas"),Jpr=o(" \u2014 "),nW=a("a"),Ypr=o("TFTapasForMaskedLM"),Kpr=o(" (TAPAS model)"),Zpr=l(),A7=a("li"),gbe=a("strong"),eur=o("xlm"),our=o(" \u2014 "),sW=a("a"),rur=o("TFXLMWithLMHeadModel"),tur=o(" (XLM model)"),aur=l(),y7=a("li"),hbe=a("strong"),nur=o("xlm-roberta"),sur=o(" \u2014 "),lW=a("a"),lur=o("TFXLMRobertaForMaskedLM"),iur=o(" (XLM-RoBERTa model)"),dur=l(),F(L7.$$.fragment),YIe=l(),ec=a("h2"),x7=a("a"),pbe=a("span"),F(oL.$$.fragment),cur=l(),ube=a("span"),fur=o("TFAutoModelForSeq2SeqLM"),KIe=l(),rr=a("div"),F(rL.$$.fragment),mur=l(),oc=a("p"),gur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iW=a("a"),hur=o("from_pretrained()"),pur=o(" class method or the "),dW=a("a"),uur=o("from_config()"),_ur=o(` class
method.`),bur=l(),tL=a("p"),vur=o("This class cannot be instantiated directly using "),_be=a("code"),Fur=o("__init__()"),Tur=o(" (throws an error)."),Mur=l(),$t=a("div"),F(aL.$$.fragment),Eur=l(),bbe=a("p"),Cur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wur=l(),rc=a("p"),Aur=o(`Note:
Loading a model from its configuration file does `),vbe=a("strong"),yur=o("not"),Lur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=a("a"),xur=o("from_pretrained()"),$ur=o(" to load the model weights."),kur=l(),F($7.$$.fragment),Sur=l(),$r=a("div"),F(nL.$$.fragment),Rur=l(),Fbe=a("p"),Pur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Bur=l(),tn=a("p"),Iur=o("The model class to instantiate is selected based on the "),Tbe=a("code"),qur=o("model_type"),Nur=o(` property of the config object (either
passed as an argument or loaded from `),Mbe=a("code"),jur=o("pretrained_model_name_or_path"),Dur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=a("code"),Gur=o("pretrained_model_name_or_path"),Our=o(":"),Vur=l(),ye=a("ul"),k7=a("li"),Cbe=a("strong"),Xur=o("bart"),zur=o(" \u2014 "),fW=a("a"),Qur=o("TFBartForConditionalGeneration"),Wur=o(" (BART model)"),Hur=l(),S7=a("li"),wbe=a("strong"),Uur=o("blenderbot"),Jur=o(" \u2014 "),mW=a("a"),Yur=o("TFBlenderbotForConditionalGeneration"),Kur=o(" (Blenderbot model)"),Zur=l(),R7=a("li"),Abe=a("strong"),e_r=o("blenderbot-small"),o_r=o(" \u2014 "),gW=a("a"),r_r=o("TFBlenderbotSmallForConditionalGeneration"),t_r=o(" (BlenderbotSmall model)"),a_r=l(),P7=a("li"),ybe=a("strong"),n_r=o("encoder-decoder"),s_r=o(" \u2014 "),hW=a("a"),l_r=o("TFEncoderDecoderModel"),i_r=o(" (Encoder decoder model)"),d_r=l(),B7=a("li"),Lbe=a("strong"),c_r=o("led"),f_r=o(" \u2014 "),pW=a("a"),m_r=o("TFLEDForConditionalGeneration"),g_r=o(" (LED model)"),h_r=l(),I7=a("li"),xbe=a("strong"),p_r=o("marian"),u_r=o(" \u2014 "),uW=a("a"),__r=o("TFMarianMTModel"),b_r=o(" (Marian model)"),v_r=l(),q7=a("li"),$be=a("strong"),F_r=o("mbart"),T_r=o(" \u2014 "),_W=a("a"),M_r=o("TFMBartForConditionalGeneration"),E_r=o(" (mBART model)"),C_r=l(),N7=a("li"),kbe=a("strong"),w_r=o("mt5"),A_r=o(" \u2014 "),bW=a("a"),y_r=o("TFMT5ForConditionalGeneration"),L_r=o(" (mT5 model)"),x_r=l(),j7=a("li"),Sbe=a("strong"),$_r=o("pegasus"),k_r=o(" \u2014 "),vW=a("a"),S_r=o("TFPegasusForConditionalGeneration"),R_r=o(" (Pegasus model)"),P_r=l(),D7=a("li"),Rbe=a("strong"),B_r=o("t5"),I_r=o(" \u2014 "),FW=a("a"),q_r=o("TFT5ForConditionalGeneration"),N_r=o(" (T5 model)"),j_r=l(),F(G7.$$.fragment),ZIe=l(),tc=a("h2"),O7=a("a"),Pbe=a("span"),F(sL.$$.fragment),D_r=l(),Bbe=a("span"),G_r=o("TFAutoModelForSequenceClassification"),eqe=l(),tr=a("div"),F(lL.$$.fragment),O_r=l(),ac=a("p"),V_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TW=a("a"),X_r=o("from_pretrained()"),z_r=o(" class method or the "),MW=a("a"),Q_r=o("from_config()"),W_r=o(` class
method.`),H_r=l(),iL=a("p"),U_r=o("This class cannot be instantiated directly using "),Ibe=a("code"),J_r=o("__init__()"),Y_r=o(" (throws an error)."),K_r=l(),kt=a("div"),F(dL.$$.fragment),Z_r=l(),qbe=a("p"),e1r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),o1r=l(),nc=a("p"),r1r=o(`Note:
Loading a model from its configuration file does `),Nbe=a("strong"),t1r=o("not"),a1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),n1r=o("from_pretrained()"),s1r=o(" to load the model weights."),l1r=l(),F(V7.$$.fragment),i1r=l(),kr=a("div"),F(cL.$$.fragment),d1r=l(),jbe=a("p"),c1r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),f1r=l(),an=a("p"),m1r=o("The model class to instantiate is selected based on the "),Dbe=a("code"),g1r=o("model_type"),h1r=o(` property of the config object (either
passed as an argument or loaded from `),Gbe=a("code"),p1r=o("pretrained_model_name_or_path"),u1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=a("code"),_1r=o("pretrained_model_name_or_path"),b1r=o(":"),v1r=l(),Z=a("ul"),X7=a("li"),Vbe=a("strong"),F1r=o("albert"),T1r=o(" \u2014 "),CW=a("a"),M1r=o("TFAlbertForSequenceClassification"),E1r=o(" (ALBERT model)"),C1r=l(),z7=a("li"),Xbe=a("strong"),w1r=o("bert"),A1r=o(" \u2014 "),wW=a("a"),y1r=o("TFBertForSequenceClassification"),L1r=o(" (BERT model)"),x1r=l(),Q7=a("li"),zbe=a("strong"),$1r=o("camembert"),k1r=o(" \u2014 "),AW=a("a"),S1r=o("TFCamembertForSequenceClassification"),R1r=o(" (CamemBERT model)"),P1r=l(),W7=a("li"),Qbe=a("strong"),B1r=o("convbert"),I1r=o(" \u2014 "),yW=a("a"),q1r=o("TFConvBertForSequenceClassification"),N1r=o(" (ConvBERT model)"),j1r=l(),H7=a("li"),Wbe=a("strong"),D1r=o("ctrl"),G1r=o(" \u2014 "),LW=a("a"),O1r=o("TFCTRLForSequenceClassification"),V1r=o(" (CTRL model)"),X1r=l(),U7=a("li"),Hbe=a("strong"),z1r=o("deberta"),Q1r=o(" \u2014 "),xW=a("a"),W1r=o("TFDebertaForSequenceClassification"),H1r=o(" (DeBERTa model)"),U1r=l(),J7=a("li"),Ube=a("strong"),J1r=o("deberta-v2"),Y1r=o(" \u2014 "),$W=a("a"),K1r=o("TFDebertaV2ForSequenceClassification"),Z1r=o(" (DeBERTa-v2 model)"),e8r=l(),Y7=a("li"),Jbe=a("strong"),o8r=o("distilbert"),r8r=o(" \u2014 "),kW=a("a"),t8r=o("TFDistilBertForSequenceClassification"),a8r=o(" (DistilBERT model)"),n8r=l(),K7=a("li"),Ybe=a("strong"),s8r=o("electra"),l8r=o(" \u2014 "),SW=a("a"),i8r=o("TFElectraForSequenceClassification"),d8r=o(" (ELECTRA model)"),c8r=l(),Z7=a("li"),Kbe=a("strong"),f8r=o("flaubert"),m8r=o(" \u2014 "),RW=a("a"),g8r=o("TFFlaubertForSequenceClassification"),h8r=o(" (FlauBERT model)"),p8r=l(),eM=a("li"),Zbe=a("strong"),u8r=o("funnel"),_8r=o(" \u2014 "),PW=a("a"),b8r=o("TFFunnelForSequenceClassification"),v8r=o(" (Funnel Transformer model)"),F8r=l(),oM=a("li"),e2e=a("strong"),T8r=o("gpt2"),M8r=o(" \u2014 "),BW=a("a"),E8r=o("TFGPT2ForSequenceClassification"),C8r=o(" (OpenAI GPT-2 model)"),w8r=l(),rM=a("li"),o2e=a("strong"),A8r=o("gptj"),y8r=o(" \u2014 "),IW=a("a"),L8r=o("TFGPTJForSequenceClassification"),x8r=o(" (GPT-J model)"),$8r=l(),tM=a("li"),r2e=a("strong"),k8r=o("layoutlm"),S8r=o(" \u2014 "),qW=a("a"),R8r=o("TFLayoutLMForSequenceClassification"),P8r=o(" (LayoutLM model)"),B8r=l(),aM=a("li"),t2e=a("strong"),I8r=o("longformer"),q8r=o(" \u2014 "),NW=a("a"),N8r=o("TFLongformerForSequenceClassification"),j8r=o(" (Longformer model)"),D8r=l(),nM=a("li"),a2e=a("strong"),G8r=o("mobilebert"),O8r=o(" \u2014 "),jW=a("a"),V8r=o("TFMobileBertForSequenceClassification"),X8r=o(" (MobileBERT model)"),z8r=l(),sM=a("li"),n2e=a("strong"),Q8r=o("mpnet"),W8r=o(" \u2014 "),DW=a("a"),H8r=o("TFMPNetForSequenceClassification"),U8r=o(" (MPNet model)"),J8r=l(),lM=a("li"),s2e=a("strong"),Y8r=o("openai-gpt"),K8r=o(" \u2014 "),GW=a("a"),Z8r=o("TFOpenAIGPTForSequenceClassification"),ebr=o(" (OpenAI GPT model)"),obr=l(),iM=a("li"),l2e=a("strong"),rbr=o("rembert"),tbr=o(" \u2014 "),OW=a("a"),abr=o("TFRemBertForSequenceClassification"),nbr=o(" (RemBERT model)"),sbr=l(),dM=a("li"),i2e=a("strong"),lbr=o("roberta"),ibr=o(" \u2014 "),VW=a("a"),dbr=o("TFRobertaForSequenceClassification"),cbr=o(" (RoBERTa model)"),fbr=l(),cM=a("li"),d2e=a("strong"),mbr=o("roformer"),gbr=o(" \u2014 "),XW=a("a"),hbr=o("TFRoFormerForSequenceClassification"),pbr=o(" (RoFormer model)"),ubr=l(),fM=a("li"),c2e=a("strong"),_br=o("tapas"),bbr=o(" \u2014 "),zW=a("a"),vbr=o("TFTapasForSequenceClassification"),Fbr=o(" (TAPAS model)"),Tbr=l(),mM=a("li"),f2e=a("strong"),Mbr=o("transfo-xl"),Ebr=o(" \u2014 "),QW=a("a"),Cbr=o("TFTransfoXLForSequenceClassification"),wbr=o(" (Transformer-XL model)"),Abr=l(),gM=a("li"),m2e=a("strong"),ybr=o("xlm"),Lbr=o(" \u2014 "),WW=a("a"),xbr=o("TFXLMForSequenceClassification"),$br=o(" (XLM model)"),kbr=l(),hM=a("li"),g2e=a("strong"),Sbr=o("xlm-roberta"),Rbr=o(" \u2014 "),HW=a("a"),Pbr=o("TFXLMRobertaForSequenceClassification"),Bbr=o(" (XLM-RoBERTa model)"),Ibr=l(),pM=a("li"),h2e=a("strong"),qbr=o("xlnet"),Nbr=o(" \u2014 "),UW=a("a"),jbr=o("TFXLNetForSequenceClassification"),Dbr=o(" (XLNet model)"),Gbr=l(),F(uM.$$.fragment),oqe=l(),sc=a("h2"),_M=a("a"),p2e=a("span"),F(fL.$$.fragment),Obr=l(),u2e=a("span"),Vbr=o("TFAutoModelForMultipleChoice"),rqe=l(),ar=a("div"),F(mL.$$.fragment),Xbr=l(),lc=a("p"),zbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JW=a("a"),Qbr=o("from_pretrained()"),Wbr=o(" class method or the "),YW=a("a"),Hbr=o("from_config()"),Ubr=o(` class
method.`),Jbr=l(),gL=a("p"),Ybr=o("This class cannot be instantiated directly using "),_2e=a("code"),Kbr=o("__init__()"),Zbr=o(" (throws an error)."),e2r=l(),St=a("div"),F(hL.$$.fragment),o2r=l(),b2e=a("p"),r2r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),t2r=l(),ic=a("p"),a2r=o(`Note:
Loading a model from its configuration file does `),v2e=a("strong"),n2r=o("not"),s2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),l2r=o("from_pretrained()"),i2r=o(" to load the model weights."),d2r=l(),F(bM.$$.fragment),c2r=l(),Sr=a("div"),F(pL.$$.fragment),f2r=l(),F2e=a("p"),m2r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),g2r=l(),nn=a("p"),h2r=o("The model class to instantiate is selected based on the "),T2e=a("code"),p2r=o("model_type"),u2r=o(` property of the config object (either
passed as an argument or loaded from `),M2e=a("code"),_2r=o("pretrained_model_name_or_path"),b2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=a("code"),v2r=o("pretrained_model_name_or_path"),F2r=o(":"),T2r=l(),pe=a("ul"),vM=a("li"),C2e=a("strong"),M2r=o("albert"),E2r=o(" \u2014 "),ZW=a("a"),C2r=o("TFAlbertForMultipleChoice"),w2r=o(" (ALBERT model)"),A2r=l(),FM=a("li"),w2e=a("strong"),y2r=o("bert"),L2r=o(" \u2014 "),eH=a("a"),x2r=o("TFBertForMultipleChoice"),$2r=o(" (BERT model)"),k2r=l(),TM=a("li"),A2e=a("strong"),S2r=o("camembert"),R2r=o(" \u2014 "),oH=a("a"),P2r=o("TFCamembertForMultipleChoice"),B2r=o(" (CamemBERT model)"),I2r=l(),MM=a("li"),y2e=a("strong"),q2r=o("convbert"),N2r=o(" \u2014 "),rH=a("a"),j2r=o("TFConvBertForMultipleChoice"),D2r=o(" (ConvBERT model)"),G2r=l(),EM=a("li"),L2e=a("strong"),O2r=o("distilbert"),V2r=o(" \u2014 "),tH=a("a"),X2r=o("TFDistilBertForMultipleChoice"),z2r=o(" (DistilBERT model)"),Q2r=l(),CM=a("li"),x2e=a("strong"),W2r=o("electra"),H2r=o(" \u2014 "),aH=a("a"),U2r=o("TFElectraForMultipleChoice"),J2r=o(" (ELECTRA model)"),Y2r=l(),wM=a("li"),$2e=a("strong"),K2r=o("flaubert"),Z2r=o(" \u2014 "),nH=a("a"),evr=o("TFFlaubertForMultipleChoice"),ovr=o(" (FlauBERT model)"),rvr=l(),AM=a("li"),k2e=a("strong"),tvr=o("funnel"),avr=o(" \u2014 "),sH=a("a"),nvr=o("TFFunnelForMultipleChoice"),svr=o(" (Funnel Transformer model)"),lvr=l(),yM=a("li"),S2e=a("strong"),ivr=o("longformer"),dvr=o(" \u2014 "),lH=a("a"),cvr=o("TFLongformerForMultipleChoice"),fvr=o(" (Longformer model)"),mvr=l(),LM=a("li"),R2e=a("strong"),gvr=o("mobilebert"),hvr=o(" \u2014 "),iH=a("a"),pvr=o("TFMobileBertForMultipleChoice"),uvr=o(" (MobileBERT model)"),_vr=l(),xM=a("li"),P2e=a("strong"),bvr=o("mpnet"),vvr=o(" \u2014 "),dH=a("a"),Fvr=o("TFMPNetForMultipleChoice"),Tvr=o(" (MPNet model)"),Mvr=l(),$M=a("li"),B2e=a("strong"),Evr=o("rembert"),Cvr=o(" \u2014 "),cH=a("a"),wvr=o("TFRemBertForMultipleChoice"),Avr=o(" (RemBERT model)"),yvr=l(),kM=a("li"),I2e=a("strong"),Lvr=o("roberta"),xvr=o(" \u2014 "),fH=a("a"),$vr=o("TFRobertaForMultipleChoice"),kvr=o(" (RoBERTa model)"),Svr=l(),SM=a("li"),q2e=a("strong"),Rvr=o("roformer"),Pvr=o(" \u2014 "),mH=a("a"),Bvr=o("TFRoFormerForMultipleChoice"),Ivr=o(" (RoFormer model)"),qvr=l(),RM=a("li"),N2e=a("strong"),Nvr=o("xlm"),jvr=o(" \u2014 "),gH=a("a"),Dvr=o("TFXLMForMultipleChoice"),Gvr=o(" (XLM model)"),Ovr=l(),PM=a("li"),j2e=a("strong"),Vvr=o("xlm-roberta"),Xvr=o(" \u2014 "),hH=a("a"),zvr=o("TFXLMRobertaForMultipleChoice"),Qvr=o(" (XLM-RoBERTa model)"),Wvr=l(),BM=a("li"),D2e=a("strong"),Hvr=o("xlnet"),Uvr=o(" \u2014 "),pH=a("a"),Jvr=o("TFXLNetForMultipleChoice"),Yvr=o(" (XLNet model)"),Kvr=l(),F(IM.$$.fragment),tqe=l(),dc=a("h2"),qM=a("a"),G2e=a("span"),F(uL.$$.fragment),Zvr=l(),O2e=a("span"),eFr=o("TFAutoModelForNextSentencePrediction"),aqe=l(),nr=a("div"),F(_L.$$.fragment),oFr=l(),cc=a("p"),rFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uH=a("a"),tFr=o("from_pretrained()"),aFr=o(" class method or the "),_H=a("a"),nFr=o("from_config()"),sFr=o(` class
method.`),lFr=l(),bL=a("p"),iFr=o("This class cannot be instantiated directly using "),V2e=a("code"),dFr=o("__init__()"),cFr=o(" (throws an error)."),fFr=l(),Rt=a("div"),F(vL.$$.fragment),mFr=l(),X2e=a("p"),gFr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hFr=l(),fc=a("p"),pFr=o(`Note:
Loading a model from its configuration file does `),z2e=a("strong"),uFr=o("not"),_Fr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=a("a"),bFr=o("from_pretrained()"),vFr=o(" to load the model weights."),FFr=l(),F(NM.$$.fragment),TFr=l(),Rr=a("div"),F(FL.$$.fragment),MFr=l(),Q2e=a("p"),EFr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),CFr=l(),sn=a("p"),wFr=o("The model class to instantiate is selected based on the "),W2e=a("code"),AFr=o("model_type"),yFr=o(` property of the config object (either
passed as an argument or loaded from `),H2e=a("code"),LFr=o("pretrained_model_name_or_path"),xFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=a("code"),$Fr=o("pretrained_model_name_or_path"),kFr=o(":"),SFr=l(),TL=a("ul"),jM=a("li"),J2e=a("strong"),RFr=o("bert"),PFr=o(" \u2014 "),vH=a("a"),BFr=o("TFBertForNextSentencePrediction"),IFr=o(" (BERT model)"),qFr=l(),DM=a("li"),Y2e=a("strong"),NFr=o("mobilebert"),jFr=o(" \u2014 "),FH=a("a"),DFr=o("TFMobileBertForNextSentencePrediction"),GFr=o(" (MobileBERT model)"),OFr=l(),F(GM.$$.fragment),nqe=l(),mc=a("h2"),OM=a("a"),K2e=a("span"),F(ML.$$.fragment),VFr=l(),Z2e=a("span"),XFr=o("TFAutoModelForTableQuestionAnswering"),sqe=l(),sr=a("div"),F(EL.$$.fragment),zFr=l(),gc=a("p"),QFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TH=a("a"),WFr=o("from_pretrained()"),HFr=o(" class method or the "),MH=a("a"),UFr=o("from_config()"),JFr=o(` class
method.`),YFr=l(),CL=a("p"),KFr=o("This class cannot be instantiated directly using "),eve=a("code"),ZFr=o("__init__()"),e0r=o(" (throws an error)."),o0r=l(),Pt=a("div"),F(wL.$$.fragment),r0r=l(),ove=a("p"),t0r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),a0r=l(),hc=a("p"),n0r=o(`Note:
Loading a model from its configuration file does `),rve=a("strong"),s0r=o("not"),l0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=a("a"),i0r=o("from_pretrained()"),d0r=o(" to load the model weights."),c0r=l(),F(VM.$$.fragment),f0r=l(),Pr=a("div"),F(AL.$$.fragment),m0r=l(),tve=a("p"),g0r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),h0r=l(),ln=a("p"),p0r=o("The model class to instantiate is selected based on the "),ave=a("code"),u0r=o("model_type"),_0r=o(` property of the config object (either
passed as an argument or loaded from `),nve=a("code"),b0r=o("pretrained_model_name_or_path"),v0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=a("code"),F0r=o("pretrained_model_name_or_path"),T0r=o(":"),M0r=l(),lve=a("ul"),XM=a("li"),ive=a("strong"),E0r=o("tapas"),C0r=o(" \u2014 "),CH=a("a"),w0r=o("TFTapasForQuestionAnswering"),A0r=o(" (TAPAS model)"),y0r=l(),F(zM.$$.fragment),lqe=l(),pc=a("h2"),QM=a("a"),dve=a("span"),F(yL.$$.fragment),L0r=l(),cve=a("span"),x0r=o("TFAutoModelForTokenClassification"),iqe=l(),lr=a("div"),F(LL.$$.fragment),$0r=l(),uc=a("p"),k0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wH=a("a"),S0r=o("from_pretrained()"),R0r=o(" class method or the "),AH=a("a"),P0r=o("from_config()"),B0r=o(` class
method.`),I0r=l(),xL=a("p"),q0r=o("This class cannot be instantiated directly using "),fve=a("code"),N0r=o("__init__()"),j0r=o(" (throws an error)."),D0r=l(),Bt=a("div"),F($L.$$.fragment),G0r=l(),mve=a("p"),O0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),V0r=l(),_c=a("p"),X0r=o(`Note:
Loading a model from its configuration file does `),gve=a("strong"),z0r=o("not"),Q0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=a("a"),W0r=o("from_pretrained()"),H0r=o(" to load the model weights."),U0r=l(),F(WM.$$.fragment),J0r=l(),Br=a("div"),F(kL.$$.fragment),Y0r=l(),hve=a("p"),K0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Z0r=l(),dn=a("p"),eTr=o("The model class to instantiate is selected based on the "),pve=a("code"),oTr=o("model_type"),rTr=o(` property of the config object (either
passed as an argument or loaded from `),uve=a("code"),tTr=o("pretrained_model_name_or_path"),aTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=a("code"),nTr=o("pretrained_model_name_or_path"),sTr=o(":"),lTr=l(),de=a("ul"),HM=a("li"),bve=a("strong"),iTr=o("albert"),dTr=o(" \u2014 "),LH=a("a"),cTr=o("TFAlbertForTokenClassification"),fTr=o(" (ALBERT model)"),mTr=l(),UM=a("li"),vve=a("strong"),gTr=o("bert"),hTr=o(" \u2014 "),xH=a("a"),pTr=o("TFBertForTokenClassification"),uTr=o(" (BERT model)"),_Tr=l(),JM=a("li"),Fve=a("strong"),bTr=o("camembert"),vTr=o(" \u2014 "),$H=a("a"),FTr=o("TFCamembertForTokenClassification"),TTr=o(" (CamemBERT model)"),MTr=l(),YM=a("li"),Tve=a("strong"),ETr=o("convbert"),CTr=o(" \u2014 "),kH=a("a"),wTr=o("TFConvBertForTokenClassification"),ATr=o(" (ConvBERT model)"),yTr=l(),KM=a("li"),Mve=a("strong"),LTr=o("deberta"),xTr=o(" \u2014 "),SH=a("a"),$Tr=o("TFDebertaForTokenClassification"),kTr=o(" (DeBERTa model)"),STr=l(),ZM=a("li"),Eve=a("strong"),RTr=o("deberta-v2"),PTr=o(" \u2014 "),RH=a("a"),BTr=o("TFDebertaV2ForTokenClassification"),ITr=o(" (DeBERTa-v2 model)"),qTr=l(),e4=a("li"),Cve=a("strong"),NTr=o("distilbert"),jTr=o(" \u2014 "),PH=a("a"),DTr=o("TFDistilBertForTokenClassification"),GTr=o(" (DistilBERT model)"),OTr=l(),o4=a("li"),wve=a("strong"),VTr=o("electra"),XTr=o(" \u2014 "),BH=a("a"),zTr=o("TFElectraForTokenClassification"),QTr=o(" (ELECTRA model)"),WTr=l(),r4=a("li"),Ave=a("strong"),HTr=o("flaubert"),UTr=o(" \u2014 "),IH=a("a"),JTr=o("TFFlaubertForTokenClassification"),YTr=o(" (FlauBERT model)"),KTr=l(),t4=a("li"),yve=a("strong"),ZTr=o("funnel"),e7r=o(" \u2014 "),qH=a("a"),o7r=o("TFFunnelForTokenClassification"),r7r=o(" (Funnel Transformer model)"),t7r=l(),a4=a("li"),Lve=a("strong"),a7r=o("layoutlm"),n7r=o(" \u2014 "),NH=a("a"),s7r=o("TFLayoutLMForTokenClassification"),l7r=o(" (LayoutLM model)"),i7r=l(),n4=a("li"),xve=a("strong"),d7r=o("longformer"),c7r=o(" \u2014 "),jH=a("a"),f7r=o("TFLongformerForTokenClassification"),m7r=o(" (Longformer model)"),g7r=l(),s4=a("li"),$ve=a("strong"),h7r=o("mobilebert"),p7r=o(" \u2014 "),DH=a("a"),u7r=o("TFMobileBertForTokenClassification"),_7r=o(" (MobileBERT model)"),b7r=l(),l4=a("li"),kve=a("strong"),v7r=o("mpnet"),F7r=o(" \u2014 "),GH=a("a"),T7r=o("TFMPNetForTokenClassification"),M7r=o(" (MPNet model)"),E7r=l(),i4=a("li"),Sve=a("strong"),C7r=o("rembert"),w7r=o(" \u2014 "),OH=a("a"),A7r=o("TFRemBertForTokenClassification"),y7r=o(" (RemBERT model)"),L7r=l(),d4=a("li"),Rve=a("strong"),x7r=o("roberta"),$7r=o(" \u2014 "),VH=a("a"),k7r=o("TFRobertaForTokenClassification"),S7r=o(" (RoBERTa model)"),R7r=l(),c4=a("li"),Pve=a("strong"),P7r=o("roformer"),B7r=o(" \u2014 "),XH=a("a"),I7r=o("TFRoFormerForTokenClassification"),q7r=o(" (RoFormer model)"),N7r=l(),f4=a("li"),Bve=a("strong"),j7r=o("xlm"),D7r=o(" \u2014 "),zH=a("a"),G7r=o("TFXLMForTokenClassification"),O7r=o(" (XLM model)"),V7r=l(),m4=a("li"),Ive=a("strong"),X7r=o("xlm-roberta"),z7r=o(" \u2014 "),QH=a("a"),Q7r=o("TFXLMRobertaForTokenClassification"),W7r=o(" (XLM-RoBERTa model)"),H7r=l(),g4=a("li"),qve=a("strong"),U7r=o("xlnet"),J7r=o(" \u2014 "),WH=a("a"),Y7r=o("TFXLNetForTokenClassification"),K7r=o(" (XLNet model)"),Z7r=l(),F(h4.$$.fragment),dqe=l(),bc=a("h2"),p4=a("a"),Nve=a("span"),F(SL.$$.fragment),eMr=l(),jve=a("span"),oMr=o("TFAutoModelForQuestionAnswering"),cqe=l(),ir=a("div"),F(RL.$$.fragment),rMr=l(),vc=a("p"),tMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HH=a("a"),aMr=o("from_pretrained()"),nMr=o(" class method or the "),UH=a("a"),sMr=o("from_config()"),lMr=o(` class
method.`),iMr=l(),PL=a("p"),dMr=o("This class cannot be instantiated directly using "),Dve=a("code"),cMr=o("__init__()"),fMr=o(" (throws an error)."),mMr=l(),It=a("div"),F(BL.$$.fragment),gMr=l(),Gve=a("p"),hMr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pMr=l(),Fc=a("p"),uMr=o(`Note:
Loading a model from its configuration file does `),Ove=a("strong"),_Mr=o("not"),bMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=a("a"),vMr=o("from_pretrained()"),FMr=o(" to load the model weights."),TMr=l(),F(u4.$$.fragment),MMr=l(),Ir=a("div"),F(IL.$$.fragment),EMr=l(),Vve=a("p"),CMr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wMr=l(),cn=a("p"),AMr=o("The model class to instantiate is selected based on the "),Xve=a("code"),yMr=o("model_type"),LMr=o(` property of the config object (either
passed as an argument or loaded from `),zve=a("code"),xMr=o("pretrained_model_name_or_path"),$Mr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=a("code"),kMr=o("pretrained_model_name_or_path"),SMr=o(":"),RMr=l(),ce=a("ul"),_4=a("li"),Wve=a("strong"),PMr=o("albert"),BMr=o(" \u2014 "),YH=a("a"),IMr=o("TFAlbertForQuestionAnswering"),qMr=o(" (ALBERT model)"),NMr=l(),b4=a("li"),Hve=a("strong"),jMr=o("bert"),DMr=o(" \u2014 "),KH=a("a"),GMr=o("TFBertForQuestionAnswering"),OMr=o(" (BERT model)"),VMr=l(),v4=a("li"),Uve=a("strong"),XMr=o("camembert"),zMr=o(" \u2014 "),ZH=a("a"),QMr=o("TFCamembertForQuestionAnswering"),WMr=o(" (CamemBERT model)"),HMr=l(),F4=a("li"),Jve=a("strong"),UMr=o("convbert"),JMr=o(" \u2014 "),eU=a("a"),YMr=o("TFConvBertForQuestionAnswering"),KMr=o(" (ConvBERT model)"),ZMr=l(),T4=a("li"),Yve=a("strong"),e4r=o("deberta"),o4r=o(" \u2014 "),oU=a("a"),r4r=o("TFDebertaForQuestionAnswering"),t4r=o(" (DeBERTa model)"),a4r=l(),M4=a("li"),Kve=a("strong"),n4r=o("deberta-v2"),s4r=o(" \u2014 "),rU=a("a"),l4r=o("TFDebertaV2ForQuestionAnswering"),i4r=o(" (DeBERTa-v2 model)"),d4r=l(),E4=a("li"),Zve=a("strong"),c4r=o("distilbert"),f4r=o(" \u2014 "),tU=a("a"),m4r=o("TFDistilBertForQuestionAnswering"),g4r=o(" (DistilBERT model)"),h4r=l(),C4=a("li"),eFe=a("strong"),p4r=o("electra"),u4r=o(" \u2014 "),aU=a("a"),_4r=o("TFElectraForQuestionAnswering"),b4r=o(" (ELECTRA model)"),v4r=l(),w4=a("li"),oFe=a("strong"),F4r=o("flaubert"),T4r=o(" \u2014 "),nU=a("a"),M4r=o("TFFlaubertForQuestionAnsweringSimple"),E4r=o(" (FlauBERT model)"),C4r=l(),A4=a("li"),rFe=a("strong"),w4r=o("funnel"),A4r=o(" \u2014 "),sU=a("a"),y4r=o("TFFunnelForQuestionAnswering"),L4r=o(" (Funnel Transformer model)"),x4r=l(),y4=a("li"),tFe=a("strong"),$4r=o("gptj"),k4r=o(" \u2014 "),lU=a("a"),S4r=o("TFGPTJForQuestionAnswering"),R4r=o(" (GPT-J model)"),P4r=l(),L4=a("li"),aFe=a("strong"),B4r=o("longformer"),I4r=o(" \u2014 "),iU=a("a"),q4r=o("TFLongformerForQuestionAnswering"),N4r=o(" (Longformer model)"),j4r=l(),x4=a("li"),nFe=a("strong"),D4r=o("mobilebert"),G4r=o(" \u2014 "),dU=a("a"),O4r=o("TFMobileBertForQuestionAnswering"),V4r=o(" (MobileBERT model)"),X4r=l(),$4=a("li"),sFe=a("strong"),z4r=o("mpnet"),Q4r=o(" \u2014 "),cU=a("a"),W4r=o("TFMPNetForQuestionAnswering"),H4r=o(" (MPNet model)"),U4r=l(),k4=a("li"),lFe=a("strong"),J4r=o("rembert"),Y4r=o(" \u2014 "),fU=a("a"),K4r=o("TFRemBertForQuestionAnswering"),Z4r=o(" (RemBERT model)"),eEr=l(),S4=a("li"),iFe=a("strong"),oEr=o("roberta"),rEr=o(" \u2014 "),mU=a("a"),tEr=o("TFRobertaForQuestionAnswering"),aEr=o(" (RoBERTa model)"),nEr=l(),R4=a("li"),dFe=a("strong"),sEr=o("roformer"),lEr=o(" \u2014 "),gU=a("a"),iEr=o("TFRoFormerForQuestionAnswering"),dEr=o(" (RoFormer model)"),cEr=l(),P4=a("li"),cFe=a("strong"),fEr=o("xlm"),mEr=o(" \u2014 "),hU=a("a"),gEr=o("TFXLMForQuestionAnsweringSimple"),hEr=o(" (XLM model)"),pEr=l(),B4=a("li"),fFe=a("strong"),uEr=o("xlm-roberta"),_Er=o(" \u2014 "),pU=a("a"),bEr=o("TFXLMRobertaForQuestionAnswering"),vEr=o(" (XLM-RoBERTa model)"),FEr=l(),I4=a("li"),mFe=a("strong"),TEr=o("xlnet"),MEr=o(" \u2014 "),uU=a("a"),EEr=o("TFXLNetForQuestionAnsweringSimple"),CEr=o(" (XLNet model)"),wEr=l(),F(q4.$$.fragment),fqe=l(),Tc=a("h2"),N4=a("a"),gFe=a("span"),F(qL.$$.fragment),AEr=l(),hFe=a("span"),yEr=o("TFAutoModelForVision2Seq"),mqe=l(),dr=a("div"),F(NL.$$.fragment),LEr=l(),Mc=a("p"),xEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_U=a("a"),$Er=o("from_pretrained()"),kEr=o(" class method or the "),bU=a("a"),SEr=o("from_config()"),REr=o(` class
method.`),PEr=l(),jL=a("p"),BEr=o("This class cannot be instantiated directly using "),pFe=a("code"),IEr=o("__init__()"),qEr=o(" (throws an error)."),NEr=l(),qt=a("div"),F(DL.$$.fragment),jEr=l(),uFe=a("p"),DEr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),GEr=l(),Ec=a("p"),OEr=o(`Note:
Loading a model from its configuration file does `),_Fe=a("strong"),VEr=o("not"),XEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),zEr=o("from_pretrained()"),QEr=o(" to load the model weights."),WEr=l(),F(j4.$$.fragment),HEr=l(),qr=a("div"),F(GL.$$.fragment),UEr=l(),bFe=a("p"),JEr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),YEr=l(),fn=a("p"),KEr=o("The model class to instantiate is selected based on the "),vFe=a("code"),ZEr=o("model_type"),e5r=o(` property of the config object (either
passed as an argument or loaded from `),FFe=a("code"),o5r=o("pretrained_model_name_or_path"),r5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=a("code"),t5r=o("pretrained_model_name_or_path"),a5r=o(":"),n5r=l(),MFe=a("ul"),D4=a("li"),EFe=a("strong"),s5r=o("vision-encoder-decoder"),l5r=o(" \u2014 "),FU=a("a"),i5r=o("TFVisionEncoderDecoderModel"),d5r=o(" (Vision Encoder decoder model)"),c5r=l(),F(G4.$$.fragment),gqe=l(),Cc=a("h2"),O4=a("a"),CFe=a("span"),F(OL.$$.fragment),f5r=l(),wFe=a("span"),m5r=o("TFAutoModelForSpeechSeq2Seq"),hqe=l(),cr=a("div"),F(VL.$$.fragment),g5r=l(),wc=a("p"),h5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TU=a("a"),p5r=o("from_pretrained()"),u5r=o(" class method or the "),MU=a("a"),_5r=o("from_config()"),b5r=o(` class
method.`),v5r=l(),XL=a("p"),F5r=o("This class cannot be instantiated directly using "),AFe=a("code"),T5r=o("__init__()"),M5r=o(" (throws an error)."),E5r=l(),Nt=a("div"),F(zL.$$.fragment),C5r=l(),yFe=a("p"),w5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),A5r=l(),Ac=a("p"),y5r=o(`Note:
Loading a model from its configuration file does `),LFe=a("strong"),L5r=o("not"),x5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=a("a"),$5r=o("from_pretrained()"),k5r=o(" to load the model weights."),S5r=l(),F(V4.$$.fragment),R5r=l(),Nr=a("div"),F(QL.$$.fragment),P5r=l(),xFe=a("p"),B5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),I5r=l(),mn=a("p"),q5r=o("The model class to instantiate is selected based on the "),$Fe=a("code"),N5r=o("model_type"),j5r=o(` property of the config object (either
passed as an argument or loaded from `),kFe=a("code"),D5r=o("pretrained_model_name_or_path"),G5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=a("code"),O5r=o("pretrained_model_name_or_path"),V5r=o(":"),X5r=l(),RFe=a("ul"),X4=a("li"),PFe=a("strong"),z5r=o("speech_to_text"),Q5r=o(" \u2014 "),CU=a("a"),W5r=o("TFSpeech2TextForConditionalGeneration"),H5r=o(" (Speech2Text model)"),U5r=l(),F(z4.$$.fragment),pqe=l(),yc=a("h2"),Q4=a("a"),BFe=a("span"),F(WL.$$.fragment),J5r=l(),IFe=a("span"),Y5r=o("FlaxAutoModel"),uqe=l(),fr=a("div"),F(HL.$$.fragment),K5r=l(),Lc=a("p"),Z5r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wU=a("a"),eCr=o("from_pretrained()"),oCr=o(" class method or the "),AU=a("a"),rCr=o("from_config()"),tCr=o(` class
method.`),aCr=l(),UL=a("p"),nCr=o("This class cannot be instantiated directly using "),qFe=a("code"),sCr=o("__init__()"),lCr=o(" (throws an error)."),iCr=l(),jt=a("div"),F(JL.$$.fragment),dCr=l(),NFe=a("p"),cCr=o("Instantiates one of the base model classes of the library from a configuration."),fCr=l(),xc=a("p"),mCr=o(`Note:
Loading a model from its configuration file does `),jFe=a("strong"),gCr=o("not"),hCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=a("a"),pCr=o("from_pretrained()"),uCr=o(" to load the model weights."),_Cr=l(),F(W4.$$.fragment),bCr=l(),jr=a("div"),F(YL.$$.fragment),vCr=l(),DFe=a("p"),FCr=o("Instantiate one of the base model classes of the library from a pretrained model."),TCr=l(),gn=a("p"),MCr=o("The model class to instantiate is selected based on the "),GFe=a("code"),ECr=o("model_type"),CCr=o(` property of the config object (either
passed as an argument or loaded from `),OFe=a("code"),wCr=o("pretrained_model_name_or_path"),ACr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=a("code"),yCr=o("pretrained_model_name_or_path"),LCr=o(":"),xCr=l(),ee=a("ul"),H4=a("li"),XFe=a("strong"),$Cr=o("albert"),kCr=o(" \u2014 "),LU=a("a"),SCr=o("FlaxAlbertModel"),RCr=o(" (ALBERT model)"),PCr=l(),U4=a("li"),zFe=a("strong"),BCr=o("bart"),ICr=o(" \u2014 "),xU=a("a"),qCr=o("FlaxBartModel"),NCr=o(" (BART model)"),jCr=l(),J4=a("li"),QFe=a("strong"),DCr=o("beit"),GCr=o(" \u2014 "),$U=a("a"),OCr=o("FlaxBeitModel"),VCr=o(" (BEiT model)"),XCr=l(),Y4=a("li"),WFe=a("strong"),zCr=o("bert"),QCr=o(" \u2014 "),kU=a("a"),WCr=o("FlaxBertModel"),HCr=o(" (BERT model)"),UCr=l(),K4=a("li"),HFe=a("strong"),JCr=o("big_bird"),YCr=o(" \u2014 "),SU=a("a"),KCr=o("FlaxBigBirdModel"),ZCr=o(" (BigBird model)"),e3r=l(),Z4=a("li"),UFe=a("strong"),o3r=o("blenderbot"),r3r=o(" \u2014 "),RU=a("a"),t3r=o("FlaxBlenderbotModel"),a3r=o(" (Blenderbot model)"),n3r=l(),eE=a("li"),JFe=a("strong"),s3r=o("blenderbot-small"),l3r=o(" \u2014 "),PU=a("a"),i3r=o("FlaxBlenderbotSmallModel"),d3r=o(" (BlenderbotSmall model)"),c3r=l(),oE=a("li"),YFe=a("strong"),f3r=o("clip"),m3r=o(" \u2014 "),BU=a("a"),g3r=o("FlaxCLIPModel"),h3r=o(" (CLIP model)"),p3r=l(),rE=a("li"),KFe=a("strong"),u3r=o("distilbert"),_3r=o(" \u2014 "),IU=a("a"),b3r=o("FlaxDistilBertModel"),v3r=o(" (DistilBERT model)"),F3r=l(),tE=a("li"),ZFe=a("strong"),T3r=o("electra"),M3r=o(" \u2014 "),qU=a("a"),E3r=o("FlaxElectraModel"),C3r=o(" (ELECTRA model)"),w3r=l(),aE=a("li"),e0e=a("strong"),A3r=o("gpt2"),y3r=o(" \u2014 "),NU=a("a"),L3r=o("FlaxGPT2Model"),x3r=o(" (OpenAI GPT-2 model)"),$3r=l(),nE=a("li"),o0e=a("strong"),k3r=o("gpt_neo"),S3r=o(" \u2014 "),jU=a("a"),R3r=o("FlaxGPTNeoModel"),P3r=o(" (GPT Neo model)"),B3r=l(),sE=a("li"),r0e=a("strong"),I3r=o("gptj"),q3r=o(" \u2014 "),DU=a("a"),N3r=o("FlaxGPTJModel"),j3r=o(" (GPT-J model)"),D3r=l(),lE=a("li"),t0e=a("strong"),G3r=o("marian"),O3r=o(" \u2014 "),GU=a("a"),V3r=o("FlaxMarianModel"),X3r=o(" (Marian model)"),z3r=l(),iE=a("li"),a0e=a("strong"),Q3r=o("mbart"),W3r=o(" \u2014 "),OU=a("a"),H3r=o("FlaxMBartModel"),U3r=o(" (mBART model)"),J3r=l(),dE=a("li"),n0e=a("strong"),Y3r=o("mt5"),K3r=o(" \u2014 "),VU=a("a"),Z3r=o("FlaxMT5Model"),ewr=o(" (mT5 model)"),owr=l(),cE=a("li"),s0e=a("strong"),rwr=o("opt"),twr=o(" \u2014 "),XU=a("a"),awr=o("FlaxOPTModel"),nwr=o(" (OPT model)"),swr=l(),fE=a("li"),l0e=a("strong"),lwr=o("pegasus"),iwr=o(" \u2014 "),zU=a("a"),dwr=o("FlaxPegasusModel"),cwr=o(" (Pegasus model)"),fwr=l(),mE=a("li"),i0e=a("strong"),mwr=o("roberta"),gwr=o(" \u2014 "),QU=a("a"),hwr=o("FlaxRobertaModel"),pwr=o(" (RoBERTa model)"),uwr=l(),gE=a("li"),d0e=a("strong"),_wr=o("roformer"),bwr=o(" \u2014 "),WU=a("a"),vwr=o("FlaxRoFormerModel"),Fwr=o(" (RoFormer model)"),Twr=l(),hE=a("li"),c0e=a("strong"),Mwr=o("t5"),Ewr=o(" \u2014 "),HU=a("a"),Cwr=o("FlaxT5Model"),wwr=o(" (T5 model)"),Awr=l(),pE=a("li"),f0e=a("strong"),ywr=o("vision-text-dual-encoder"),Lwr=o(" \u2014 "),UU=a("a"),xwr=o("FlaxVisionTextDualEncoderModel"),$wr=o(" (VisionTextDualEncoder model)"),kwr=l(),uE=a("li"),m0e=a("strong"),Swr=o("vit"),Rwr=o(" \u2014 "),JU=a("a"),Pwr=o("FlaxViTModel"),Bwr=o(" (ViT model)"),Iwr=l(),_E=a("li"),g0e=a("strong"),qwr=o("wav2vec2"),Nwr=o(" \u2014 "),YU=a("a"),jwr=o("FlaxWav2Vec2Model"),Dwr=o(" (Wav2Vec2 model)"),Gwr=l(),bE=a("li"),h0e=a("strong"),Owr=o("xglm"),Vwr=o(" \u2014 "),KU=a("a"),Xwr=o("FlaxXGLMModel"),zwr=o(" (XGLM model)"),Qwr=l(),vE=a("li"),p0e=a("strong"),Wwr=o("xlm-roberta"),Hwr=o(" \u2014 "),ZU=a("a"),Uwr=o("FlaxXLMRobertaModel"),Jwr=o(" (XLM-RoBERTa model)"),Ywr=l(),F(FE.$$.fragment),_qe=l(),$c=a("h2"),TE=a("a"),u0e=a("span"),F(KL.$$.fragment),Kwr=l(),_0e=a("span"),Zwr=o("FlaxAutoModelForCausalLM"),bqe=l(),mr=a("div"),F(ZL.$$.fragment),eAr=l(),kc=a("p"),oAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eJ=a("a"),rAr=o("from_pretrained()"),tAr=o(" class method or the "),oJ=a("a"),aAr=o("from_config()"),nAr=o(` class
method.`),sAr=l(),ex=a("p"),lAr=o("This class cannot be instantiated directly using "),b0e=a("code"),iAr=o("__init__()"),dAr=o(" (throws an error)."),cAr=l(),Dt=a("div"),F(ox.$$.fragment),fAr=l(),v0e=a("p"),mAr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gAr=l(),Sc=a("p"),hAr=o(`Note:
Loading a model from its configuration file does `),F0e=a("strong"),pAr=o("not"),uAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=a("a"),_Ar=o("from_pretrained()"),bAr=o(" to load the model weights."),vAr=l(),F(ME.$$.fragment),FAr=l(),Dr=a("div"),F(rx.$$.fragment),TAr=l(),T0e=a("p"),MAr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),EAr=l(),hn=a("p"),CAr=o("The model class to instantiate is selected based on the "),M0e=a("code"),wAr=o("model_type"),AAr=o(` property of the config object (either
passed as an argument or loaded from `),E0e=a("code"),yAr=o("pretrained_model_name_or_path"),LAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C0e=a("code"),xAr=o("pretrained_model_name_or_path"),$Ar=o(":"),kAr=l(),Le=a("ul"),EE=a("li"),w0e=a("strong"),SAr=o("bart"),RAr=o(" \u2014 "),tJ=a("a"),PAr=o("FlaxBartForCausalLM"),BAr=o(" (BART model)"),IAr=l(),CE=a("li"),A0e=a("strong"),qAr=o("bert"),NAr=o(" \u2014 "),aJ=a("a"),jAr=o("FlaxBertForCausalLM"),DAr=o(" (BERT model)"),GAr=l(),wE=a("li"),y0e=a("strong"),OAr=o("big_bird"),VAr=o(" \u2014 "),nJ=a("a"),XAr=o("FlaxBigBirdForCausalLM"),zAr=o(" (BigBird model)"),QAr=l(),AE=a("li"),L0e=a("strong"),WAr=o("electra"),HAr=o(" \u2014 "),sJ=a("a"),UAr=o("FlaxElectraForCausalLM"),JAr=o(" (ELECTRA model)"),YAr=l(),yE=a("li"),x0e=a("strong"),KAr=o("gpt2"),ZAr=o(" \u2014 "),lJ=a("a"),e6r=o("FlaxGPT2LMHeadModel"),o6r=o(" (OpenAI GPT-2 model)"),r6r=l(),LE=a("li"),$0e=a("strong"),t6r=o("gpt_neo"),a6r=o(" \u2014 "),iJ=a("a"),n6r=o("FlaxGPTNeoForCausalLM"),s6r=o(" (GPT Neo model)"),l6r=l(),xE=a("li"),k0e=a("strong"),i6r=o("gptj"),d6r=o(" \u2014 "),dJ=a("a"),c6r=o("FlaxGPTJForCausalLM"),f6r=o(" (GPT-J model)"),m6r=l(),$E=a("li"),S0e=a("strong"),g6r=o("opt"),h6r=o(" \u2014 "),cJ=a("a"),p6r=o("FlaxOPTForCausalLM"),u6r=o(" (OPT model)"),_6r=l(),kE=a("li"),R0e=a("strong"),b6r=o("roberta"),v6r=o(" \u2014 "),fJ=a("a"),F6r=o("FlaxRobertaForCausalLM"),T6r=o(" (RoBERTa model)"),M6r=l(),SE=a("li"),P0e=a("strong"),E6r=o("xglm"),C6r=o(" \u2014 "),mJ=a("a"),w6r=o("FlaxXGLMForCausalLM"),A6r=o(" (XGLM model)"),y6r=l(),F(RE.$$.fragment),vqe=l(),Rc=a("h2"),PE=a("a"),B0e=a("span"),F(tx.$$.fragment),L6r=l(),I0e=a("span"),x6r=o("FlaxAutoModelForPreTraining"),Fqe=l(),gr=a("div"),F(ax.$$.fragment),$6r=l(),Pc=a("p"),k6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gJ=a("a"),S6r=o("from_pretrained()"),R6r=o(" class method or the "),hJ=a("a"),P6r=o("from_config()"),B6r=o(` class
method.`),I6r=l(),nx=a("p"),q6r=o("This class cannot be instantiated directly using "),q0e=a("code"),N6r=o("__init__()"),j6r=o(" (throws an error)."),D6r=l(),Gt=a("div"),F(sx.$$.fragment),G6r=l(),N0e=a("p"),O6r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),V6r=l(),Bc=a("p"),X6r=o(`Note:
Loading a model from its configuration file does `),j0e=a("strong"),z6r=o("not"),Q6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=a("a"),W6r=o("from_pretrained()"),H6r=o(" to load the model weights."),U6r=l(),F(BE.$$.fragment),J6r=l(),Gr=a("div"),F(lx.$$.fragment),Y6r=l(),D0e=a("p"),K6r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Z6r=l(),pn=a("p"),eyr=o("The model class to instantiate is selected based on the "),G0e=a("code"),oyr=o("model_type"),ryr=o(` property of the config object (either
passed as an argument or loaded from `),O0e=a("code"),tyr=o("pretrained_model_name_or_path"),ayr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V0e=a("code"),nyr=o("pretrained_model_name_or_path"),syr=o(":"),lyr=l(),Me=a("ul"),IE=a("li"),X0e=a("strong"),iyr=o("albert"),dyr=o(" \u2014 "),uJ=a("a"),cyr=o("FlaxAlbertForPreTraining"),fyr=o(" (ALBERT model)"),myr=l(),qE=a("li"),z0e=a("strong"),gyr=o("bart"),hyr=o(" \u2014 "),_J=a("a"),pyr=o("FlaxBartForConditionalGeneration"),uyr=o(" (BART model)"),_yr=l(),NE=a("li"),Q0e=a("strong"),byr=o("bert"),vyr=o(" \u2014 "),bJ=a("a"),Fyr=o("FlaxBertForPreTraining"),Tyr=o(" (BERT model)"),Myr=l(),jE=a("li"),W0e=a("strong"),Eyr=o("big_bird"),Cyr=o(" \u2014 "),vJ=a("a"),wyr=o("FlaxBigBirdForPreTraining"),Ayr=o(" (BigBird model)"),yyr=l(),DE=a("li"),H0e=a("strong"),Lyr=o("electra"),xyr=o(" \u2014 "),FJ=a("a"),$yr=o("FlaxElectraForPreTraining"),kyr=o(" (ELECTRA model)"),Syr=l(),GE=a("li"),U0e=a("strong"),Ryr=o("mbart"),Pyr=o(" \u2014 "),TJ=a("a"),Byr=o("FlaxMBartForConditionalGeneration"),Iyr=o(" (mBART model)"),qyr=l(),OE=a("li"),J0e=a("strong"),Nyr=o("mt5"),jyr=o(" \u2014 "),MJ=a("a"),Dyr=o("FlaxMT5ForConditionalGeneration"),Gyr=o(" (mT5 model)"),Oyr=l(),VE=a("li"),Y0e=a("strong"),Vyr=o("roberta"),Xyr=o(" \u2014 "),EJ=a("a"),zyr=o("FlaxRobertaForMaskedLM"),Qyr=o(" (RoBERTa model)"),Wyr=l(),XE=a("li"),K0e=a("strong"),Hyr=o("roformer"),Uyr=o(" \u2014 "),CJ=a("a"),Jyr=o("FlaxRoFormerForMaskedLM"),Yyr=o(" (RoFormer model)"),Kyr=l(),zE=a("li"),Z0e=a("strong"),Zyr=o("t5"),eLr=o(" \u2014 "),wJ=a("a"),oLr=o("FlaxT5ForConditionalGeneration"),rLr=o(" (T5 model)"),tLr=l(),QE=a("li"),eTe=a("strong"),aLr=o("wav2vec2"),nLr=o(" \u2014 "),AJ=a("a"),sLr=o("FlaxWav2Vec2ForPreTraining"),lLr=o(" (Wav2Vec2 model)"),iLr=l(),WE=a("li"),oTe=a("strong"),dLr=o("xlm-roberta"),cLr=o(" \u2014 "),yJ=a("a"),fLr=o("FlaxXLMRobertaForMaskedLM"),mLr=o(" (XLM-RoBERTa model)"),gLr=l(),F(HE.$$.fragment),Tqe=l(),Ic=a("h2"),UE=a("a"),rTe=a("span"),F(ix.$$.fragment),hLr=l(),tTe=a("span"),pLr=o("FlaxAutoModelForMaskedLM"),Mqe=l(),hr=a("div"),F(dx.$$.fragment),uLr=l(),qc=a("p"),_Lr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LJ=a("a"),bLr=o("from_pretrained()"),vLr=o(" class method or the "),xJ=a("a"),FLr=o("from_config()"),TLr=o(` class
method.`),MLr=l(),cx=a("p"),ELr=o("This class cannot be instantiated directly using "),aTe=a("code"),CLr=o("__init__()"),wLr=o(" (throws an error)."),ALr=l(),Ot=a("div"),F(fx.$$.fragment),yLr=l(),nTe=a("p"),LLr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xLr=l(),Nc=a("p"),$Lr=o(`Note:
Loading a model from its configuration file does `),sTe=a("strong"),kLr=o("not"),SLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=a("a"),RLr=o("from_pretrained()"),PLr=o(" to load the model weights."),BLr=l(),F(JE.$$.fragment),ILr=l(),Or=a("div"),F(mx.$$.fragment),qLr=l(),lTe=a("p"),NLr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jLr=l(),un=a("p"),DLr=o("The model class to instantiate is selected based on the "),iTe=a("code"),GLr=o("model_type"),OLr=o(` property of the config object (either
passed as an argument or loaded from `),dTe=a("code"),VLr=o("pretrained_model_name_or_path"),XLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=a("code"),zLr=o("pretrained_model_name_or_path"),QLr=o(":"),WLr=l(),xe=a("ul"),YE=a("li"),fTe=a("strong"),HLr=o("albert"),ULr=o(" \u2014 "),kJ=a("a"),JLr=o("FlaxAlbertForMaskedLM"),YLr=o(" (ALBERT model)"),KLr=l(),KE=a("li"),mTe=a("strong"),ZLr=o("bart"),exr=o(" \u2014 "),SJ=a("a"),oxr=o("FlaxBartForConditionalGeneration"),rxr=o(" (BART model)"),txr=l(),ZE=a("li"),gTe=a("strong"),axr=o("bert"),nxr=o(" \u2014 "),RJ=a("a"),sxr=o("FlaxBertForMaskedLM"),lxr=o(" (BERT model)"),ixr=l(),e5=a("li"),hTe=a("strong"),dxr=o("big_bird"),cxr=o(" \u2014 "),PJ=a("a"),fxr=o("FlaxBigBirdForMaskedLM"),mxr=o(" (BigBird model)"),gxr=l(),o5=a("li"),pTe=a("strong"),hxr=o("distilbert"),pxr=o(" \u2014 "),BJ=a("a"),uxr=o("FlaxDistilBertForMaskedLM"),_xr=o(" (DistilBERT model)"),bxr=l(),r5=a("li"),uTe=a("strong"),vxr=o("electra"),Fxr=o(" \u2014 "),IJ=a("a"),Txr=o("FlaxElectraForMaskedLM"),Mxr=o(" (ELECTRA model)"),Exr=l(),t5=a("li"),_Te=a("strong"),Cxr=o("mbart"),wxr=o(" \u2014 "),qJ=a("a"),Axr=o("FlaxMBartForConditionalGeneration"),yxr=o(" (mBART model)"),Lxr=l(),a5=a("li"),bTe=a("strong"),xxr=o("roberta"),$xr=o(" \u2014 "),NJ=a("a"),kxr=o("FlaxRobertaForMaskedLM"),Sxr=o(" (RoBERTa model)"),Rxr=l(),n5=a("li"),vTe=a("strong"),Pxr=o("roformer"),Bxr=o(" \u2014 "),jJ=a("a"),Ixr=o("FlaxRoFormerForMaskedLM"),qxr=o(" (RoFormer model)"),Nxr=l(),s5=a("li"),FTe=a("strong"),jxr=o("xlm-roberta"),Dxr=o(" \u2014 "),DJ=a("a"),Gxr=o("FlaxXLMRobertaForMaskedLM"),Oxr=o(" (XLM-RoBERTa model)"),Vxr=l(),F(l5.$$.fragment),Eqe=l(),jc=a("h2"),i5=a("a"),TTe=a("span"),F(gx.$$.fragment),Xxr=l(),MTe=a("span"),zxr=o("FlaxAutoModelForSeq2SeqLM"),Cqe=l(),pr=a("div"),F(hx.$$.fragment),Qxr=l(),Dc=a("p"),Wxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GJ=a("a"),Hxr=o("from_pretrained()"),Uxr=o(" class method or the "),OJ=a("a"),Jxr=o("from_config()"),Yxr=o(` class
method.`),Kxr=l(),px=a("p"),Zxr=o("This class cannot be instantiated directly using "),ETe=a("code"),e9r=o("__init__()"),o9r=o(" (throws an error)."),r9r=l(),Vt=a("div"),F(ux.$$.fragment),t9r=l(),CTe=a("p"),a9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),n9r=l(),Gc=a("p"),s9r=o(`Note:
Loading a model from its configuration file does `),wTe=a("strong"),l9r=o("not"),i9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),d9r=o("from_pretrained()"),c9r=o(" to load the model weights."),f9r=l(),F(d5.$$.fragment),m9r=l(),Vr=a("div"),F(_x.$$.fragment),g9r=l(),ATe=a("p"),h9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),p9r=l(),_n=a("p"),u9r=o("The model class to instantiate is selected based on the "),yTe=a("code"),_9r=o("model_type"),b9r=o(` property of the config object (either
passed as an argument or loaded from `),LTe=a("code"),v9r=o("pretrained_model_name_or_path"),F9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=a("code"),T9r=o("pretrained_model_name_or_path"),M9r=o(":"),E9r=l(),Se=a("ul"),c5=a("li"),$Te=a("strong"),C9r=o("bart"),w9r=o(" \u2014 "),XJ=a("a"),A9r=o("FlaxBartForConditionalGeneration"),y9r=o(" (BART model)"),L9r=l(),f5=a("li"),kTe=a("strong"),x9r=o("blenderbot"),$9r=o(" \u2014 "),zJ=a("a"),k9r=o("FlaxBlenderbotForConditionalGeneration"),S9r=o(" (Blenderbot model)"),R9r=l(),m5=a("li"),STe=a("strong"),P9r=o("blenderbot-small"),B9r=o(" \u2014 "),QJ=a("a"),I9r=o("FlaxBlenderbotSmallForConditionalGeneration"),q9r=o(" (BlenderbotSmall model)"),N9r=l(),g5=a("li"),RTe=a("strong"),j9r=o("encoder-decoder"),D9r=o(" \u2014 "),WJ=a("a"),G9r=o("FlaxEncoderDecoderModel"),O9r=o(" (Encoder decoder model)"),V9r=l(),h5=a("li"),PTe=a("strong"),X9r=o("marian"),z9r=o(" \u2014 "),HJ=a("a"),Q9r=o("FlaxMarianMTModel"),W9r=o(" (Marian model)"),H9r=l(),p5=a("li"),BTe=a("strong"),U9r=o("mbart"),J9r=o(" \u2014 "),UJ=a("a"),Y9r=o("FlaxMBartForConditionalGeneration"),K9r=o(" (mBART model)"),Z9r=l(),u5=a("li"),ITe=a("strong"),e$r=o("mt5"),o$r=o(" \u2014 "),JJ=a("a"),r$r=o("FlaxMT5ForConditionalGeneration"),t$r=o(" (mT5 model)"),a$r=l(),_5=a("li"),qTe=a("strong"),n$r=o("pegasus"),s$r=o(" \u2014 "),YJ=a("a"),l$r=o("FlaxPegasusForConditionalGeneration"),i$r=o(" (Pegasus model)"),d$r=l(),b5=a("li"),NTe=a("strong"),c$r=o("t5"),f$r=o(" \u2014 "),KJ=a("a"),m$r=o("FlaxT5ForConditionalGeneration"),g$r=o(" (T5 model)"),h$r=l(),F(v5.$$.fragment),wqe=l(),Oc=a("h2"),F5=a("a"),jTe=a("span"),F(bx.$$.fragment),p$r=l(),DTe=a("span"),u$r=o("FlaxAutoModelForSequenceClassification"),Aqe=l(),ur=a("div"),F(vx.$$.fragment),_$r=l(),Vc=a("p"),b$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZJ=a("a"),v$r=o("from_pretrained()"),F$r=o(" class method or the "),eY=a("a"),T$r=o("from_config()"),M$r=o(` class
method.`),E$r=l(),Fx=a("p"),C$r=o("This class cannot be instantiated directly using "),GTe=a("code"),w$r=o("__init__()"),A$r=o(" (throws an error)."),y$r=l(),Xt=a("div"),F(Tx.$$.fragment),L$r=l(),OTe=a("p"),x$r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$$r=l(),Xc=a("p"),k$r=o(`Note:
Loading a model from its configuration file does `),VTe=a("strong"),S$r=o("not"),R$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),P$r=o("from_pretrained()"),B$r=o(" to load the model weights."),I$r=l(),F(T5.$$.fragment),q$r=l(),Xr=a("div"),F(Mx.$$.fragment),N$r=l(),XTe=a("p"),j$r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),D$r=l(),bn=a("p"),G$r=o("The model class to instantiate is selected based on the "),zTe=a("code"),O$r=o("model_type"),V$r=o(` property of the config object (either
passed as an argument or loaded from `),QTe=a("code"),X$r=o("pretrained_model_name_or_path"),z$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=a("code"),Q$r=o("pretrained_model_name_or_path"),W$r=o(":"),H$r=l(),$e=a("ul"),M5=a("li"),HTe=a("strong"),U$r=o("albert"),J$r=o(" \u2014 "),rY=a("a"),Y$r=o("FlaxAlbertForSequenceClassification"),K$r=o(" (ALBERT model)"),Z$r=l(),E5=a("li"),UTe=a("strong"),ekr=o("bart"),okr=o(" \u2014 "),tY=a("a"),rkr=o("FlaxBartForSequenceClassification"),tkr=o(" (BART model)"),akr=l(),C5=a("li"),JTe=a("strong"),nkr=o("bert"),skr=o(" \u2014 "),aY=a("a"),lkr=o("FlaxBertForSequenceClassification"),ikr=o(" (BERT model)"),dkr=l(),w5=a("li"),YTe=a("strong"),ckr=o("big_bird"),fkr=o(" \u2014 "),nY=a("a"),mkr=o("FlaxBigBirdForSequenceClassification"),gkr=o(" (BigBird model)"),hkr=l(),A5=a("li"),KTe=a("strong"),pkr=o("distilbert"),ukr=o(" \u2014 "),sY=a("a"),_kr=o("FlaxDistilBertForSequenceClassification"),bkr=o(" (DistilBERT model)"),vkr=l(),y5=a("li"),ZTe=a("strong"),Fkr=o("electra"),Tkr=o(" \u2014 "),lY=a("a"),Mkr=o("FlaxElectraForSequenceClassification"),Ekr=o(" (ELECTRA model)"),Ckr=l(),L5=a("li"),e7e=a("strong"),wkr=o("mbart"),Akr=o(" \u2014 "),iY=a("a"),ykr=o("FlaxMBartForSequenceClassification"),Lkr=o(" (mBART model)"),xkr=l(),x5=a("li"),o7e=a("strong"),$kr=o("roberta"),kkr=o(" \u2014 "),dY=a("a"),Skr=o("FlaxRobertaForSequenceClassification"),Rkr=o(" (RoBERTa model)"),Pkr=l(),$5=a("li"),r7e=a("strong"),Bkr=o("roformer"),Ikr=o(" \u2014 "),cY=a("a"),qkr=o("FlaxRoFormerForSequenceClassification"),Nkr=o(" (RoFormer model)"),jkr=l(),k5=a("li"),t7e=a("strong"),Dkr=o("xlm-roberta"),Gkr=o(" \u2014 "),fY=a("a"),Okr=o("FlaxXLMRobertaForSequenceClassification"),Vkr=o(" (XLM-RoBERTa model)"),Xkr=l(),F(S5.$$.fragment),yqe=l(),zc=a("h2"),R5=a("a"),a7e=a("span"),F(Ex.$$.fragment),zkr=l(),n7e=a("span"),Qkr=o("FlaxAutoModelForQuestionAnswering"),Lqe=l(),_r=a("div"),F(Cx.$$.fragment),Wkr=l(),Qc=a("p"),Hkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mY=a("a"),Ukr=o("from_pretrained()"),Jkr=o(" class method or the "),gY=a("a"),Ykr=o("from_config()"),Kkr=o(` class
method.`),Zkr=l(),wx=a("p"),eSr=o("This class cannot be instantiated directly using "),s7e=a("code"),oSr=o("__init__()"),rSr=o(" (throws an error)."),tSr=l(),zt=a("div"),F(Ax.$$.fragment),aSr=l(),l7e=a("p"),nSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sSr=l(),Wc=a("p"),lSr=o(`Note:
Loading a model from its configuration file does `),i7e=a("strong"),iSr=o("not"),dSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=a("a"),cSr=o("from_pretrained()"),fSr=o(" to load the model weights."),mSr=l(),F(P5.$$.fragment),gSr=l(),zr=a("div"),F(yx.$$.fragment),hSr=l(),d7e=a("p"),pSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uSr=l(),vn=a("p"),_Sr=o("The model class to instantiate is selected based on the "),c7e=a("code"),bSr=o("model_type"),vSr=o(` property of the config object (either
passed as an argument or loaded from `),f7e=a("code"),FSr=o("pretrained_model_name_or_path"),TSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m7e=a("code"),MSr=o("pretrained_model_name_or_path"),ESr=o(":"),CSr=l(),ke=a("ul"),B5=a("li"),g7e=a("strong"),wSr=o("albert"),ASr=o(" \u2014 "),pY=a("a"),ySr=o("FlaxAlbertForQuestionAnswering"),LSr=o(" (ALBERT model)"),xSr=l(),I5=a("li"),h7e=a("strong"),$Sr=o("bart"),kSr=o(" \u2014 "),uY=a("a"),SSr=o("FlaxBartForQuestionAnswering"),RSr=o(" (BART model)"),PSr=l(),q5=a("li"),p7e=a("strong"),BSr=o("bert"),ISr=o(" \u2014 "),_Y=a("a"),qSr=o("FlaxBertForQuestionAnswering"),NSr=o(" (BERT model)"),jSr=l(),N5=a("li"),u7e=a("strong"),DSr=o("big_bird"),GSr=o(" \u2014 "),bY=a("a"),OSr=o("FlaxBigBirdForQuestionAnswering"),VSr=o(" (BigBird model)"),XSr=l(),j5=a("li"),_7e=a("strong"),zSr=o("distilbert"),QSr=o(" \u2014 "),vY=a("a"),WSr=o("FlaxDistilBertForQuestionAnswering"),HSr=o(" (DistilBERT model)"),USr=l(),D5=a("li"),b7e=a("strong"),JSr=o("electra"),YSr=o(" \u2014 "),FY=a("a"),KSr=o("FlaxElectraForQuestionAnswering"),ZSr=o(" (ELECTRA model)"),eRr=l(),G5=a("li"),v7e=a("strong"),oRr=o("mbart"),rRr=o(" \u2014 "),TY=a("a"),tRr=o("FlaxMBartForQuestionAnswering"),aRr=o(" (mBART model)"),nRr=l(),O5=a("li"),F7e=a("strong"),sRr=o("roberta"),lRr=o(" \u2014 "),MY=a("a"),iRr=o("FlaxRobertaForQuestionAnswering"),dRr=o(" (RoBERTa model)"),cRr=l(),V5=a("li"),T7e=a("strong"),fRr=o("roformer"),mRr=o(" \u2014 "),EY=a("a"),gRr=o("FlaxRoFormerForQuestionAnswering"),hRr=o(" (RoFormer model)"),pRr=l(),X5=a("li"),M7e=a("strong"),uRr=o("xlm-roberta"),_Rr=o(" \u2014 "),CY=a("a"),bRr=o("FlaxXLMRobertaForQuestionAnswering"),vRr=o(" (XLM-RoBERTa model)"),FRr=l(),F(z5.$$.fragment),xqe=l(),Hc=a("h2"),Q5=a("a"),E7e=a("span"),F(Lx.$$.fragment),TRr=l(),C7e=a("span"),MRr=o("FlaxAutoModelForTokenClassification"),$qe=l(),br=a("div"),F(xx.$$.fragment),ERr=l(),Uc=a("p"),CRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wY=a("a"),wRr=o("from_pretrained()"),ARr=o(" class method or the "),AY=a("a"),yRr=o("from_config()"),LRr=o(` class
method.`),xRr=l(),$x=a("p"),$Rr=o("This class cannot be instantiated directly using "),w7e=a("code"),kRr=o("__init__()"),SRr=o(" (throws an error)."),RRr=l(),Qt=a("div"),F(kx.$$.fragment),PRr=l(),A7e=a("p"),BRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),IRr=l(),Jc=a("p"),qRr=o(`Note:
Loading a model from its configuration file does `),y7e=a("strong"),NRr=o("not"),jRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),DRr=o("from_pretrained()"),GRr=o(" to load the model weights."),ORr=l(),F(W5.$$.fragment),VRr=l(),Qr=a("div"),F(Sx.$$.fragment),XRr=l(),L7e=a("p"),zRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QRr=l(),Fn=a("p"),WRr=o("The model class to instantiate is selected based on the "),x7e=a("code"),HRr=o("model_type"),URr=o(` property of the config object (either
passed as an argument or loaded from `),$7e=a("code"),JRr=o("pretrained_model_name_or_path"),YRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k7e=a("code"),KRr=o("pretrained_model_name_or_path"),ZRr=o(":"),ePr=l(),Ge=a("ul"),H5=a("li"),S7e=a("strong"),oPr=o("albert"),rPr=o(" \u2014 "),LY=a("a"),tPr=o("FlaxAlbertForTokenClassification"),aPr=o(" (ALBERT model)"),nPr=l(),U5=a("li"),R7e=a("strong"),sPr=o("bert"),lPr=o(" \u2014 "),xY=a("a"),iPr=o("FlaxBertForTokenClassification"),dPr=o(" (BERT model)"),cPr=l(),J5=a("li"),P7e=a("strong"),fPr=o("big_bird"),mPr=o(" \u2014 "),$Y=a("a"),gPr=o("FlaxBigBirdForTokenClassification"),hPr=o(" (BigBird model)"),pPr=l(),Y5=a("li"),B7e=a("strong"),uPr=o("distilbert"),_Pr=o(" \u2014 "),kY=a("a"),bPr=o("FlaxDistilBertForTokenClassification"),vPr=o(" (DistilBERT model)"),FPr=l(),K5=a("li"),I7e=a("strong"),TPr=o("electra"),MPr=o(" \u2014 "),SY=a("a"),EPr=o("FlaxElectraForTokenClassification"),CPr=o(" (ELECTRA model)"),wPr=l(),Z5=a("li"),q7e=a("strong"),APr=o("roberta"),yPr=o(" \u2014 "),RY=a("a"),LPr=o("FlaxRobertaForTokenClassification"),xPr=o(" (RoBERTa model)"),$Pr=l(),eC=a("li"),N7e=a("strong"),kPr=o("roformer"),SPr=o(" \u2014 "),PY=a("a"),RPr=o("FlaxRoFormerForTokenClassification"),PPr=o(" (RoFormer model)"),BPr=l(),oC=a("li"),j7e=a("strong"),IPr=o("xlm-roberta"),qPr=o(" \u2014 "),BY=a("a"),NPr=o("FlaxXLMRobertaForTokenClassification"),jPr=o(" (XLM-RoBERTa model)"),DPr=l(),F(rC.$$.fragment),kqe=l(),Yc=a("h2"),tC=a("a"),D7e=a("span"),F(Rx.$$.fragment),GPr=l(),G7e=a("span"),OPr=o("FlaxAutoModelForMultipleChoice"),Sqe=l(),vr=a("div"),F(Px.$$.fragment),VPr=l(),Kc=a("p"),XPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IY=a("a"),zPr=o("from_pretrained()"),QPr=o(" class method or the "),qY=a("a"),WPr=o("from_config()"),HPr=o(` class
method.`),UPr=l(),Bx=a("p"),JPr=o("This class cannot be instantiated directly using "),O7e=a("code"),YPr=o("__init__()"),KPr=o(" (throws an error)."),ZPr=l(),Wt=a("div"),F(Ix.$$.fragment),eBr=l(),V7e=a("p"),oBr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rBr=l(),Zc=a("p"),tBr=o(`Note:
Loading a model from its configuration file does `),X7e=a("strong"),aBr=o("not"),nBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=a("a"),sBr=o("from_pretrained()"),lBr=o(" to load the model weights."),iBr=l(),F(aC.$$.fragment),dBr=l(),Wr=a("div"),F(qx.$$.fragment),cBr=l(),z7e=a("p"),fBr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mBr=l(),Tn=a("p"),gBr=o("The model class to instantiate is selected based on the "),Q7e=a("code"),hBr=o("model_type"),pBr=o(` property of the config object (either
passed as an argument or loaded from `),W7e=a("code"),uBr=o("pretrained_model_name_or_path"),_Br=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H7e=a("code"),bBr=o("pretrained_model_name_or_path"),vBr=o(":"),FBr=l(),Oe=a("ul"),nC=a("li"),U7e=a("strong"),TBr=o("albert"),MBr=o(" \u2014 "),jY=a("a"),EBr=o("FlaxAlbertForMultipleChoice"),CBr=o(" (ALBERT model)"),wBr=l(),sC=a("li"),J7e=a("strong"),ABr=o("bert"),yBr=o(" \u2014 "),DY=a("a"),LBr=o("FlaxBertForMultipleChoice"),xBr=o(" (BERT model)"),$Br=l(),lC=a("li"),Y7e=a("strong"),kBr=o("big_bird"),SBr=o(" \u2014 "),GY=a("a"),RBr=o("FlaxBigBirdForMultipleChoice"),PBr=o(" (BigBird model)"),BBr=l(),iC=a("li"),K7e=a("strong"),IBr=o("distilbert"),qBr=o(" \u2014 "),OY=a("a"),NBr=o("FlaxDistilBertForMultipleChoice"),jBr=o(" (DistilBERT model)"),DBr=l(),dC=a("li"),Z7e=a("strong"),GBr=o("electra"),OBr=o(" \u2014 "),VY=a("a"),VBr=o("FlaxElectraForMultipleChoice"),XBr=o(" (ELECTRA model)"),zBr=l(),cC=a("li"),eMe=a("strong"),QBr=o("roberta"),WBr=o(" \u2014 "),XY=a("a"),HBr=o("FlaxRobertaForMultipleChoice"),UBr=o(" (RoBERTa model)"),JBr=l(),fC=a("li"),oMe=a("strong"),YBr=o("roformer"),KBr=o(" \u2014 "),zY=a("a"),ZBr=o("FlaxRoFormerForMultipleChoice"),eIr=o(" (RoFormer model)"),oIr=l(),mC=a("li"),rMe=a("strong"),rIr=o("xlm-roberta"),tIr=o(" \u2014 "),QY=a("a"),aIr=o("FlaxXLMRobertaForMultipleChoice"),nIr=o(" (XLM-RoBERTa model)"),sIr=l(),F(gC.$$.fragment),Rqe=l(),ef=a("h2"),hC=a("a"),tMe=a("span"),F(Nx.$$.fragment),lIr=l(),aMe=a("span"),iIr=o("FlaxAutoModelForNextSentencePrediction"),Pqe=l(),Fr=a("div"),F(jx.$$.fragment),dIr=l(),of=a("p"),cIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WY=a("a"),fIr=o("from_pretrained()"),mIr=o(" class method or the "),HY=a("a"),gIr=o("from_config()"),hIr=o(` class
method.`),pIr=l(),Dx=a("p"),uIr=o("This class cannot be instantiated directly using "),nMe=a("code"),_Ir=o("__init__()"),bIr=o(" (throws an error)."),vIr=l(),Ht=a("div"),F(Gx.$$.fragment),FIr=l(),sMe=a("p"),TIr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),MIr=l(),rf=a("p"),EIr=o(`Note:
Loading a model from its configuration file does `),lMe=a("strong"),CIr=o("not"),wIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=a("a"),AIr=o("from_pretrained()"),yIr=o(" to load the model weights."),LIr=l(),F(pC.$$.fragment),xIr=l(),Hr=a("div"),F(Ox.$$.fragment),$Ir=l(),iMe=a("p"),kIr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SIr=l(),Mn=a("p"),RIr=o("The model class to instantiate is selected based on the "),dMe=a("code"),PIr=o("model_type"),BIr=o(` property of the config object (either
passed as an argument or loaded from `),cMe=a("code"),IIr=o("pretrained_model_name_or_path"),qIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fMe=a("code"),NIr=o("pretrained_model_name_or_path"),jIr=o(":"),DIr=l(),mMe=a("ul"),uC=a("li"),gMe=a("strong"),GIr=o("bert"),OIr=o(" \u2014 "),JY=a("a"),VIr=o("FlaxBertForNextSentencePrediction"),XIr=o(" (BERT model)"),zIr=l(),F(_C.$$.fragment),Bqe=l(),tf=a("h2"),bC=a("a"),hMe=a("span"),F(Vx.$$.fragment),QIr=l(),pMe=a("span"),WIr=o("FlaxAutoModelForImageClassification"),Iqe=l(),Tr=a("div"),F(Xx.$$.fragment),HIr=l(),af=a("p"),UIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YY=a("a"),JIr=o("from_pretrained()"),YIr=o(" class method or the "),KY=a("a"),KIr=o("from_config()"),ZIr=o(` class
method.`),eqr=l(),zx=a("p"),oqr=o("This class cannot be instantiated directly using "),uMe=a("code"),rqr=o("__init__()"),tqr=o(" (throws an error)."),aqr=l(),Ut=a("div"),F(Qx.$$.fragment),nqr=l(),_Me=a("p"),sqr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lqr=l(),nf=a("p"),iqr=o(`Note:
Loading a model from its configuration file does `),bMe=a("strong"),dqr=o("not"),cqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),fqr=o("from_pretrained()"),mqr=o(" to load the model weights."),gqr=l(),F(vC.$$.fragment),hqr=l(),Ur=a("div"),F(Wx.$$.fragment),pqr=l(),vMe=a("p"),uqr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_qr=l(),En=a("p"),bqr=o("The model class to instantiate is selected based on the "),FMe=a("code"),vqr=o("model_type"),Fqr=o(` property of the config object (either
passed as an argument or loaded from `),TMe=a("code"),Tqr=o("pretrained_model_name_or_path"),Mqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=a("code"),Eqr=o("pretrained_model_name_or_path"),Cqr=o(":"),wqr=l(),Hx=a("ul"),FC=a("li"),EMe=a("strong"),Aqr=o("beit"),yqr=o(" \u2014 "),eK=a("a"),Lqr=o("FlaxBeitForImageClassification"),xqr=o(" (BEiT model)"),$qr=l(),TC=a("li"),CMe=a("strong"),kqr=o("vit"),Sqr=o(" \u2014 "),oK=a("a"),Rqr=o("FlaxViTForImageClassification"),Pqr=o(" (ViT model)"),Bqr=l(),F(MC.$$.fragment),qqe=l(),sf=a("h2"),EC=a("a"),wMe=a("span"),F(Ux.$$.fragment),Iqr=l(),AMe=a("span"),qqr=o("FlaxAutoModelForVision2Seq"),Nqe=l(),Mr=a("div"),F(Jx.$$.fragment),Nqr=l(),lf=a("p"),jqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rK=a("a"),Dqr=o("from_pretrained()"),Gqr=o(" class method or the "),tK=a("a"),Oqr=o("from_config()"),Vqr=o(` class
method.`),Xqr=l(),Yx=a("p"),zqr=o("This class cannot be instantiated directly using "),yMe=a("code"),Qqr=o("__init__()"),Wqr=o(" (throws an error)."),Hqr=l(),Jt=a("div"),F(Kx.$$.fragment),Uqr=l(),LMe=a("p"),Jqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Yqr=l(),df=a("p"),Kqr=o(`Note:
Loading a model from its configuration file does `),xMe=a("strong"),Zqr=o("not"),eNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),oNr=o("from_pretrained()"),rNr=o(" to load the model weights."),tNr=l(),F(CC.$$.fragment),aNr=l(),Jr=a("div"),F(Zx.$$.fragment),nNr=l(),$Me=a("p"),sNr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lNr=l(),Cn=a("p"),iNr=o("The model class to instantiate is selected based on the "),kMe=a("code"),dNr=o("model_type"),cNr=o(` property of the config object (either
passed as an argument or loaded from `),SMe=a("code"),fNr=o("pretrained_model_name_or_path"),mNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RMe=a("code"),gNr=o("pretrained_model_name_or_path"),hNr=o(":"),pNr=l(),PMe=a("ul"),wC=a("li"),BMe=a("strong"),uNr=o("vision-encoder-decoder"),_Nr=o(" \u2014 "),nK=a("a"),bNr=o("FlaxVisionEncoderDecoderModel"),vNr=o(" (Vision Encoder decoder model)"),FNr=l(),F(AC.$$.fragment),this.h()},l(f){const _=Qwt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var e9=s(p);m=n(e9,"A",{id:!0,class:!0,href:!0});var IMe=s(m);u=n(IMe,"SPAN",{});var qMe=s(u);T(d.$$.fragment,qMe),qMe.forEach(t),IMe.forEach(t),h=i(e9),Mo=n(e9,"SPAN",{});var NMe=s(Mo);ii=r(NMe,"Auto Classes"),NMe.forEach(t),e9.forEach(t),gf=i(f),et=n(f,"P",{});var o9=s(et);di=r(o9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=n(o9,"CODE",{});var jMe=s(ci);zw=r(jMe,"from_pretrained()"),jMe.forEach(t),hf=r(o9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),o9.forEach(t),Ne=i(f),Xe=n(f,"P",{});var wn=s(Xe);fi=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var DMe=s(An);Qw=r(DMe,"AutoConfig"),DMe.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var GMe=s(Ln);Ww=r(GMe,"AutoModel"),GMe.forEach(t),mi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var OMe=s(xn);Hw=r(OMe,"AutoTokenizer"),OMe.forEach(t),gi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),pf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var r9=s(Ae);g$=r(r9,"will create a model that is an instance of "),hi=n(r9,"A",{href:!0});var VMe=s(hi);h$=r(VMe,"BertModel"),VMe.forEach(t),p$=r(r9,"."),r9.forEach(t),Eo=i(f),Ea=n(f,"P",{});var t9=s(Ea);u$=r(t9,"There is one class of "),uf=n(t9,"CODE",{});var XMe=s(uf);_$=r(XMe,"AutoModel"),XMe.forEach(t),Wje=r(t9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),t9.forEach(t),IBe=i(f),pi=n(f,"H2",{class:!0});var a9=s(pi);_f=n(a9,"A",{id:!0,class:!0,href:!0});var zMe=s(_f);ZZ=n(zMe,"SPAN",{});var QMe=s(ZZ);T(Uw.$$.fragment,QMe),QMe.forEach(t),zMe.forEach(t),Hje=i(a9),eee=n(a9,"SPAN",{});var WMe=s(eee);Uje=r(WMe,"Extending the Auto Classes"),WMe.forEach(t),a9.forEach(t),qBe=i(f),$n=n(f,"P",{});var cf=s($n);Jje=r(cf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),oee=n(cf,"CODE",{});var HMe=s(oee);Yje=r(HMe,"NewModel"),HMe.forEach(t),Kje=r(cf,", make sure you have a "),ree=n(cf,"CODE",{});var UMe=s(ree);Zje=r(UMe,"NewModelConfig"),UMe.forEach(t),eDe=r(cf,` then you can add those to the auto
classes like this:`),cf.forEach(t),NBe=i(f),T(Jw.$$.fragment,f),jBe=i(f),b$=n(f,"P",{});var JMe=s(b$);oDe=r(JMe,"You will then be able to use the auto classes like you would usually do!"),JMe.forEach(t),DBe=i(f),T(bf.$$.fragment,f),GBe=i(f),ui=n(f,"H2",{class:!0});var n9=s(ui);vf=n(n9,"A",{id:!0,class:!0,href:!0});var YMe=s(vf);tee=n(YMe,"SPAN",{});var KMe=s(tee);T(Yw.$$.fragment,KMe),KMe.forEach(t),YMe.forEach(t),rDe=i(n9),aee=n(n9,"SPAN",{});var ZMe=s(aee);tDe=r(ZMe,"AutoConfig"),ZMe.forEach(t),n9.forEach(t),OBe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(Kw.$$.fragment,Kr),aDe=i(Kr),Zw=n(Kr,"P",{});var s9=s(Zw);nDe=r(s9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),v$=n(s9,"A",{href:!0});var e4e=s(v$);sDe=r(e4e,"from_pretrained()"),e4e.forEach(t),lDe=r(s9," class method."),s9.forEach(t),iDe=i(Kr),eA=n(Kr,"P",{});var l9=s(eA);dDe=r(l9,"This class cannot be instantiated directly using "),nee=n(l9,"CODE",{});var o4e=s(nee);cDe=r(o4e,"__init__()"),o4e.forEach(t),fDe=r(l9," (throws an error)."),l9.forEach(t),mDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(oA.$$.fragment,Zr),gDe=i(Zr),see=n(Zr,"P",{});var r4e=s(see);hDe=r(r4e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),r4e.forEach(t),pDe=i(Zr),_i=n(Zr,"P",{});var ff=s(_i);uDe=r(ff,"The configuration class to instantiate is selected based on the "),lee=n(ff,"CODE",{});var t4e=s(lee);_De=r(t4e,"model_type"),t4e.forEach(t),bDe=r(ff,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),iee=n(ff,"CODE",{});var a4e=s(iee);vDe=r(a4e,"pretrained_model_name_or_path"),a4e.forEach(t),FDe=r(ff,":"),ff.forEach(t),TDe=i(Zr),y=n(Zr,"UL",{});var L=s(y);Ff=n(L,"LI",{});var yC=s(Ff);dee=n(yC,"STRONG",{});var n4e=s(dee);MDe=r(n4e,"albert"),n4e.forEach(t),EDe=r(yC," \u2014 "),F$=n(yC,"A",{href:!0});var s4e=s(F$);CDe=r(s4e,"AlbertConfig"),s4e.forEach(t),wDe=r(yC," (ALBERT model)"),yC.forEach(t),ADe=i(L),Tf=n(L,"LI",{});var LC=s(Tf);cee=n(LC,"STRONG",{});var l4e=s(cee);yDe=r(l4e,"bart"),l4e.forEach(t),LDe=r(LC," \u2014 "),T$=n(LC,"A",{href:!0});var i4e=s(T$);xDe=r(i4e,"BartConfig"),i4e.forEach(t),$De=r(LC," (BART model)"),LC.forEach(t),kDe=i(L),Mf=n(L,"LI",{});var xC=s(Mf);fee=n(xC,"STRONG",{});var d4e=s(fee);SDe=r(d4e,"beit"),d4e.forEach(t),RDe=r(xC," \u2014 "),M$=n(xC,"A",{href:!0});var c4e=s(M$);PDe=r(c4e,"BeitConfig"),c4e.forEach(t),BDe=r(xC," (BEiT model)"),xC.forEach(t),IDe=i(L),Ef=n(L,"LI",{});var $C=s(Ef);mee=n($C,"STRONG",{});var f4e=s(mee);qDe=r(f4e,"bert"),f4e.forEach(t),NDe=r($C," \u2014 "),E$=n($C,"A",{href:!0});var m4e=s(E$);jDe=r(m4e,"BertConfig"),m4e.forEach(t),DDe=r($C," (BERT model)"),$C.forEach(t),GDe=i(L),Cf=n(L,"LI",{});var kC=s(Cf);gee=n(kC,"STRONG",{});var g4e=s(gee);ODe=r(g4e,"bert-generation"),g4e.forEach(t),VDe=r(kC," \u2014 "),C$=n(kC,"A",{href:!0});var h4e=s(C$);XDe=r(h4e,"BertGenerationConfig"),h4e.forEach(t),zDe=r(kC," (Bert Generation model)"),kC.forEach(t),QDe=i(L),wf=n(L,"LI",{});var SC=s(wf);hee=n(SC,"STRONG",{});var p4e=s(hee);WDe=r(p4e,"big_bird"),p4e.forEach(t),HDe=r(SC," \u2014 "),w$=n(SC,"A",{href:!0});var u4e=s(w$);UDe=r(u4e,"BigBirdConfig"),u4e.forEach(t),JDe=r(SC," (BigBird model)"),SC.forEach(t),YDe=i(L),Af=n(L,"LI",{});var RC=s(Af);pee=n(RC,"STRONG",{});var _4e=s(pee);KDe=r(_4e,"bigbird_pegasus"),_4e.forEach(t),ZDe=r(RC," \u2014 "),A$=n(RC,"A",{href:!0});var b4e=s(A$);eGe=r(b4e,"BigBirdPegasusConfig"),b4e.forEach(t),oGe=r(RC," (BigBirdPegasus model)"),RC.forEach(t),rGe=i(L),yf=n(L,"LI",{});var PC=s(yf);uee=n(PC,"STRONG",{});var v4e=s(uee);tGe=r(v4e,"blenderbot"),v4e.forEach(t),aGe=r(PC," \u2014 "),y$=n(PC,"A",{href:!0});var F4e=s(y$);nGe=r(F4e,"BlenderbotConfig"),F4e.forEach(t),sGe=r(PC," (Blenderbot model)"),PC.forEach(t),lGe=i(L),Lf=n(L,"LI",{});var BC=s(Lf);_ee=n(BC,"STRONG",{});var T4e=s(_ee);iGe=r(T4e,"blenderbot-small"),T4e.forEach(t),dGe=r(BC," \u2014 "),L$=n(BC,"A",{href:!0});var M4e=s(L$);cGe=r(M4e,"BlenderbotSmallConfig"),M4e.forEach(t),fGe=r(BC," (BlenderbotSmall model)"),BC.forEach(t),mGe=i(L),xf=n(L,"LI",{});var IC=s(xf);bee=n(IC,"STRONG",{});var E4e=s(bee);gGe=r(E4e,"camembert"),E4e.forEach(t),hGe=r(IC," \u2014 "),x$=n(IC,"A",{href:!0});var C4e=s(x$);pGe=r(C4e,"CamembertConfig"),C4e.forEach(t),uGe=r(IC," (CamemBERT model)"),IC.forEach(t),_Ge=i(L),$f=n(L,"LI",{});var qC=s($f);vee=n(qC,"STRONG",{});var w4e=s(vee);bGe=r(w4e,"canine"),w4e.forEach(t),vGe=r(qC," \u2014 "),$$=n(qC,"A",{href:!0});var A4e=s($$);FGe=r(A4e,"CanineConfig"),A4e.forEach(t),TGe=r(qC," (Canine model)"),qC.forEach(t),MGe=i(L),kf=n(L,"LI",{});var NC=s(kf);Fee=n(NC,"STRONG",{});var y4e=s(Fee);EGe=r(y4e,"clip"),y4e.forEach(t),CGe=r(NC," \u2014 "),k$=n(NC,"A",{href:!0});var L4e=s(k$);wGe=r(L4e,"CLIPConfig"),L4e.forEach(t),AGe=r(NC," (CLIP model)"),NC.forEach(t),yGe=i(L),Sf=n(L,"LI",{});var jC=s(Sf);Tee=n(jC,"STRONG",{});var x4e=s(Tee);LGe=r(x4e,"convbert"),x4e.forEach(t),xGe=r(jC," \u2014 "),S$=n(jC,"A",{href:!0});var $4e=s(S$);$Ge=r($4e,"ConvBertConfig"),$4e.forEach(t),kGe=r(jC," (ConvBERT model)"),jC.forEach(t),SGe=i(L),Rf=n(L,"LI",{});var DC=s(Rf);Mee=n(DC,"STRONG",{});var k4e=s(Mee);RGe=r(k4e,"convnext"),k4e.forEach(t),PGe=r(DC," \u2014 "),R$=n(DC,"A",{href:!0});var S4e=s(R$);BGe=r(S4e,"ConvNextConfig"),S4e.forEach(t),IGe=r(DC," (ConvNext model)"),DC.forEach(t),qGe=i(L),Pf=n(L,"LI",{});var GC=s(Pf);Eee=n(GC,"STRONG",{});var R4e=s(Eee);NGe=r(R4e,"ctrl"),R4e.forEach(t),jGe=r(GC," \u2014 "),P$=n(GC,"A",{href:!0});var P4e=s(P$);DGe=r(P4e,"CTRLConfig"),P4e.forEach(t),GGe=r(GC," (CTRL model)"),GC.forEach(t),OGe=i(L),Bf=n(L,"LI",{});var OC=s(Bf);Cee=n(OC,"STRONG",{});var B4e=s(Cee);VGe=r(B4e,"data2vec-audio"),B4e.forEach(t),XGe=r(OC," \u2014 "),B$=n(OC,"A",{href:!0});var I4e=s(B$);zGe=r(I4e,"Data2VecAudioConfig"),I4e.forEach(t),QGe=r(OC," (Data2VecAudio model)"),OC.forEach(t),WGe=i(L),If=n(L,"LI",{});var VC=s(If);wee=n(VC,"STRONG",{});var q4e=s(wee);HGe=r(q4e,"data2vec-text"),q4e.forEach(t),UGe=r(VC," \u2014 "),I$=n(VC,"A",{href:!0});var N4e=s(I$);JGe=r(N4e,"Data2VecTextConfig"),N4e.forEach(t),YGe=r(VC," (Data2VecText model)"),VC.forEach(t),KGe=i(L),qf=n(L,"LI",{});var XC=s(qf);Aee=n(XC,"STRONG",{});var j4e=s(Aee);ZGe=r(j4e,"data2vec-vision"),j4e.forEach(t),eOe=r(XC," \u2014 "),q$=n(XC,"A",{href:!0});var D4e=s(q$);oOe=r(D4e,"Data2VecVisionConfig"),D4e.forEach(t),rOe=r(XC," (Data2VecVision model)"),XC.forEach(t),tOe=i(L),Nf=n(L,"LI",{});var zC=s(Nf);yee=n(zC,"STRONG",{});var G4e=s(yee);aOe=r(G4e,"deberta"),G4e.forEach(t),nOe=r(zC," \u2014 "),N$=n(zC,"A",{href:!0});var O4e=s(N$);sOe=r(O4e,"DebertaConfig"),O4e.forEach(t),lOe=r(zC," (DeBERTa model)"),zC.forEach(t),iOe=i(L),jf=n(L,"LI",{});var QC=s(jf);Lee=n(QC,"STRONG",{});var V4e=s(Lee);dOe=r(V4e,"deberta-v2"),V4e.forEach(t),cOe=r(QC," \u2014 "),j$=n(QC,"A",{href:!0});var X4e=s(j$);fOe=r(X4e,"DebertaV2Config"),X4e.forEach(t),mOe=r(QC," (DeBERTa-v2 model)"),QC.forEach(t),gOe=i(L),Df=n(L,"LI",{});var WC=s(Df);xee=n(WC,"STRONG",{});var z4e=s(xee);hOe=r(z4e,"decision_transformer"),z4e.forEach(t),pOe=r(WC," \u2014 "),D$=n(WC,"A",{href:!0});var Q4e=s(D$);uOe=r(Q4e,"DecisionTransformerConfig"),Q4e.forEach(t),_Oe=r(WC," (Decision Transformer model)"),WC.forEach(t),bOe=i(L),Gf=n(L,"LI",{});var HC=s(Gf);$ee=n(HC,"STRONG",{});var W4e=s($ee);vOe=r(W4e,"deit"),W4e.forEach(t),FOe=r(HC," \u2014 "),G$=n(HC,"A",{href:!0});var H4e=s(G$);TOe=r(H4e,"DeiTConfig"),H4e.forEach(t),MOe=r(HC," (DeiT model)"),HC.forEach(t),EOe=i(L),Of=n(L,"LI",{});var UC=s(Of);kee=n(UC,"STRONG",{});var U4e=s(kee);COe=r(U4e,"detr"),U4e.forEach(t),wOe=r(UC," \u2014 "),O$=n(UC,"A",{href:!0});var MNr=s(O$);AOe=r(MNr,"DetrConfig"),MNr.forEach(t),yOe=r(UC," (DETR model)"),UC.forEach(t),LOe=i(L),Vf=n(L,"LI",{});var J4e=s(Vf);See=n(J4e,"STRONG",{});var ENr=s(See);xOe=r(ENr,"distilbert"),ENr.forEach(t),$Oe=r(J4e," \u2014 "),V$=n(J4e,"A",{href:!0});var CNr=s(V$);kOe=r(CNr,"DistilBertConfig"),CNr.forEach(t),SOe=r(J4e," (DistilBERT model)"),J4e.forEach(t),ROe=i(L),Xf=n(L,"LI",{});var Y4e=s(Xf);Ree=n(Y4e,"STRONG",{});var wNr=s(Ree);POe=r(wNr,"dpr"),wNr.forEach(t),BOe=r(Y4e," \u2014 "),X$=n(Y4e,"A",{href:!0});var ANr=s(X$);IOe=r(ANr,"DPRConfig"),ANr.forEach(t),qOe=r(Y4e," (DPR model)"),Y4e.forEach(t),NOe=i(L),zf=n(L,"LI",{});var K4e=s(zf);Pee=n(K4e,"STRONG",{});var yNr=s(Pee);jOe=r(yNr,"dpt"),yNr.forEach(t),DOe=r(K4e," \u2014 "),z$=n(K4e,"A",{href:!0});var LNr=s(z$);GOe=r(LNr,"DPTConfig"),LNr.forEach(t),OOe=r(K4e," (DPT model)"),K4e.forEach(t),VOe=i(L),Qf=n(L,"LI",{});var Z4e=s(Qf);Bee=n(Z4e,"STRONG",{});var xNr=s(Bee);XOe=r(xNr,"electra"),xNr.forEach(t),zOe=r(Z4e," \u2014 "),Q$=n(Z4e,"A",{href:!0});var $Nr=s(Q$);QOe=r($Nr,"ElectraConfig"),$Nr.forEach(t),WOe=r(Z4e," (ELECTRA model)"),Z4e.forEach(t),HOe=i(L),Wf=n(L,"LI",{});var eEe=s(Wf);Iee=n(eEe,"STRONG",{});var kNr=s(Iee);UOe=r(kNr,"encoder-decoder"),kNr.forEach(t),JOe=r(eEe," \u2014 "),W$=n(eEe,"A",{href:!0});var SNr=s(W$);YOe=r(SNr,"EncoderDecoderConfig"),SNr.forEach(t),KOe=r(eEe," (Encoder decoder model)"),eEe.forEach(t),ZOe=i(L),Hf=n(L,"LI",{});var oEe=s(Hf);qee=n(oEe,"STRONG",{});var RNr=s(qee);eVe=r(RNr,"flaubert"),RNr.forEach(t),oVe=r(oEe," \u2014 "),H$=n(oEe,"A",{href:!0});var PNr=s(H$);rVe=r(PNr,"FlaubertConfig"),PNr.forEach(t),tVe=r(oEe," (FlauBERT model)"),oEe.forEach(t),aVe=i(L),Uf=n(L,"LI",{});var rEe=s(Uf);Nee=n(rEe,"STRONG",{});var BNr=s(Nee);nVe=r(BNr,"fnet"),BNr.forEach(t),sVe=r(rEe," \u2014 "),U$=n(rEe,"A",{href:!0});var INr=s(U$);lVe=r(INr,"FNetConfig"),INr.forEach(t),iVe=r(rEe," (FNet model)"),rEe.forEach(t),dVe=i(L),Jf=n(L,"LI",{});var tEe=s(Jf);jee=n(tEe,"STRONG",{});var qNr=s(jee);cVe=r(qNr,"fsmt"),qNr.forEach(t),fVe=r(tEe," \u2014 "),J$=n(tEe,"A",{href:!0});var NNr=s(J$);mVe=r(NNr,"FSMTConfig"),NNr.forEach(t),gVe=r(tEe," (FairSeq Machine-Translation model)"),tEe.forEach(t),hVe=i(L),Yf=n(L,"LI",{});var aEe=s(Yf);Dee=n(aEe,"STRONG",{});var jNr=s(Dee);pVe=r(jNr,"funnel"),jNr.forEach(t),uVe=r(aEe," \u2014 "),Y$=n(aEe,"A",{href:!0});var DNr=s(Y$);_Ve=r(DNr,"FunnelConfig"),DNr.forEach(t),bVe=r(aEe," (Funnel Transformer model)"),aEe.forEach(t),vVe=i(L),Kf=n(L,"LI",{});var nEe=s(Kf);Gee=n(nEe,"STRONG",{});var GNr=s(Gee);FVe=r(GNr,"glpn"),GNr.forEach(t),TVe=r(nEe," \u2014 "),K$=n(nEe,"A",{href:!0});var ONr=s(K$);MVe=r(ONr,"GLPNConfig"),ONr.forEach(t),EVe=r(nEe," (GLPN model)"),nEe.forEach(t),CVe=i(L),Zf=n(L,"LI",{});var sEe=s(Zf);Oee=n(sEe,"STRONG",{});var VNr=s(Oee);wVe=r(VNr,"gpt2"),VNr.forEach(t),AVe=r(sEe," \u2014 "),Z$=n(sEe,"A",{href:!0});var XNr=s(Z$);yVe=r(XNr,"GPT2Config"),XNr.forEach(t),LVe=r(sEe," (OpenAI GPT-2 model)"),sEe.forEach(t),xVe=i(L),em=n(L,"LI",{});var lEe=s(em);Vee=n(lEe,"STRONG",{});var zNr=s(Vee);$Ve=r(zNr,"gpt_neo"),zNr.forEach(t),kVe=r(lEe," \u2014 "),ek=n(lEe,"A",{href:!0});var QNr=s(ek);SVe=r(QNr,"GPTNeoConfig"),QNr.forEach(t),RVe=r(lEe," (GPT Neo model)"),lEe.forEach(t),PVe=i(L),om=n(L,"LI",{});var iEe=s(om);Xee=n(iEe,"STRONG",{});var WNr=s(Xee);BVe=r(WNr,"gptj"),WNr.forEach(t),IVe=r(iEe," \u2014 "),ok=n(iEe,"A",{href:!0});var HNr=s(ok);qVe=r(HNr,"GPTJConfig"),HNr.forEach(t),NVe=r(iEe," (GPT-J model)"),iEe.forEach(t),jVe=i(L),rm=n(L,"LI",{});var dEe=s(rm);zee=n(dEe,"STRONG",{});var UNr=s(zee);DVe=r(UNr,"hubert"),UNr.forEach(t),GVe=r(dEe," \u2014 "),rk=n(dEe,"A",{href:!0});var JNr=s(rk);OVe=r(JNr,"HubertConfig"),JNr.forEach(t),VVe=r(dEe," (Hubert model)"),dEe.forEach(t),XVe=i(L),tm=n(L,"LI",{});var cEe=s(tm);Qee=n(cEe,"STRONG",{});var YNr=s(Qee);zVe=r(YNr,"ibert"),YNr.forEach(t),QVe=r(cEe," \u2014 "),tk=n(cEe,"A",{href:!0});var KNr=s(tk);WVe=r(KNr,"IBertConfig"),KNr.forEach(t),HVe=r(cEe," (I-BERT model)"),cEe.forEach(t),UVe=i(L),am=n(L,"LI",{});var fEe=s(am);Wee=n(fEe,"STRONG",{});var ZNr=s(Wee);JVe=r(ZNr,"imagegpt"),ZNr.forEach(t),YVe=r(fEe," \u2014 "),ak=n(fEe,"A",{href:!0});var ejr=s(ak);KVe=r(ejr,"ImageGPTConfig"),ejr.forEach(t),ZVe=r(fEe," (ImageGPT model)"),fEe.forEach(t),eXe=i(L),nm=n(L,"LI",{});var mEe=s(nm);Hee=n(mEe,"STRONG",{});var ojr=s(Hee);oXe=r(ojr,"layoutlm"),ojr.forEach(t),rXe=r(mEe," \u2014 "),nk=n(mEe,"A",{href:!0});var rjr=s(nk);tXe=r(rjr,"LayoutLMConfig"),rjr.forEach(t),aXe=r(mEe," (LayoutLM model)"),mEe.forEach(t),nXe=i(L),sm=n(L,"LI",{});var gEe=s(sm);Uee=n(gEe,"STRONG",{});var tjr=s(Uee);sXe=r(tjr,"layoutlmv2"),tjr.forEach(t),lXe=r(gEe," \u2014 "),sk=n(gEe,"A",{href:!0});var ajr=s(sk);iXe=r(ajr,"LayoutLMv2Config"),ajr.forEach(t),dXe=r(gEe," (LayoutLMv2 model)"),gEe.forEach(t),cXe=i(L),lm=n(L,"LI",{});var hEe=s(lm);Jee=n(hEe,"STRONG",{});var njr=s(Jee);fXe=r(njr,"led"),njr.forEach(t),mXe=r(hEe," \u2014 "),lk=n(hEe,"A",{href:!0});var sjr=s(lk);gXe=r(sjr,"LEDConfig"),sjr.forEach(t),hXe=r(hEe," (LED model)"),hEe.forEach(t),pXe=i(L),im=n(L,"LI",{});var pEe=s(im);Yee=n(pEe,"STRONG",{});var ljr=s(Yee);uXe=r(ljr,"longformer"),ljr.forEach(t),_Xe=r(pEe," \u2014 "),ik=n(pEe,"A",{href:!0});var ijr=s(ik);bXe=r(ijr,"LongformerConfig"),ijr.forEach(t),vXe=r(pEe," (Longformer model)"),pEe.forEach(t),FXe=i(L),dm=n(L,"LI",{});var uEe=s(dm);Kee=n(uEe,"STRONG",{});var djr=s(Kee);TXe=r(djr,"luke"),djr.forEach(t),MXe=r(uEe," \u2014 "),dk=n(uEe,"A",{href:!0});var cjr=s(dk);EXe=r(cjr,"LukeConfig"),cjr.forEach(t),CXe=r(uEe," (LUKE model)"),uEe.forEach(t),wXe=i(L),cm=n(L,"LI",{});var _Ee=s(cm);Zee=n(_Ee,"STRONG",{});var fjr=s(Zee);AXe=r(fjr,"lxmert"),fjr.forEach(t),yXe=r(_Ee," \u2014 "),ck=n(_Ee,"A",{href:!0});var mjr=s(ck);LXe=r(mjr,"LxmertConfig"),mjr.forEach(t),xXe=r(_Ee," (LXMERT model)"),_Ee.forEach(t),$Xe=i(L),fm=n(L,"LI",{});var bEe=s(fm);eoe=n(bEe,"STRONG",{});var gjr=s(eoe);kXe=r(gjr,"m2m_100"),gjr.forEach(t),SXe=r(bEe," \u2014 "),fk=n(bEe,"A",{href:!0});var hjr=s(fk);RXe=r(hjr,"M2M100Config"),hjr.forEach(t),PXe=r(bEe," (M2M100 model)"),bEe.forEach(t),BXe=i(L),mm=n(L,"LI",{});var vEe=s(mm);ooe=n(vEe,"STRONG",{});var pjr=s(ooe);IXe=r(pjr,"marian"),pjr.forEach(t),qXe=r(vEe," \u2014 "),mk=n(vEe,"A",{href:!0});var ujr=s(mk);NXe=r(ujr,"MarianConfig"),ujr.forEach(t),jXe=r(vEe," (Marian model)"),vEe.forEach(t),DXe=i(L),gm=n(L,"LI",{});var FEe=s(gm);roe=n(FEe,"STRONG",{});var _jr=s(roe);GXe=r(_jr,"maskformer"),_jr.forEach(t),OXe=r(FEe," \u2014 "),gk=n(FEe,"A",{href:!0});var bjr=s(gk);VXe=r(bjr,"MaskFormerConfig"),bjr.forEach(t),XXe=r(FEe," (MaskFormer model)"),FEe.forEach(t),zXe=i(L),hm=n(L,"LI",{});var TEe=s(hm);toe=n(TEe,"STRONG",{});var vjr=s(toe);QXe=r(vjr,"mbart"),vjr.forEach(t),WXe=r(TEe," \u2014 "),hk=n(TEe,"A",{href:!0});var Fjr=s(hk);HXe=r(Fjr,"MBartConfig"),Fjr.forEach(t),UXe=r(TEe," (mBART model)"),TEe.forEach(t),JXe=i(L),pm=n(L,"LI",{});var MEe=s(pm);aoe=n(MEe,"STRONG",{});var Tjr=s(aoe);YXe=r(Tjr,"megatron-bert"),Tjr.forEach(t),KXe=r(MEe," \u2014 "),pk=n(MEe,"A",{href:!0});var Mjr=s(pk);ZXe=r(Mjr,"MegatronBertConfig"),Mjr.forEach(t),eze=r(MEe," (MegatronBert model)"),MEe.forEach(t),oze=i(L),um=n(L,"LI",{});var EEe=s(um);noe=n(EEe,"STRONG",{});var Ejr=s(noe);rze=r(Ejr,"mobilebert"),Ejr.forEach(t),tze=r(EEe," \u2014 "),uk=n(EEe,"A",{href:!0});var Cjr=s(uk);aze=r(Cjr,"MobileBertConfig"),Cjr.forEach(t),nze=r(EEe," (MobileBERT model)"),EEe.forEach(t),sze=i(L),_m=n(L,"LI",{});var CEe=s(_m);soe=n(CEe,"STRONG",{});var wjr=s(soe);lze=r(wjr,"mpnet"),wjr.forEach(t),ize=r(CEe," \u2014 "),_k=n(CEe,"A",{href:!0});var Ajr=s(_k);dze=r(Ajr,"MPNetConfig"),Ajr.forEach(t),cze=r(CEe," (MPNet model)"),CEe.forEach(t),fze=i(L),bm=n(L,"LI",{});var wEe=s(bm);loe=n(wEe,"STRONG",{});var yjr=s(loe);mze=r(yjr,"mt5"),yjr.forEach(t),gze=r(wEe," \u2014 "),bk=n(wEe,"A",{href:!0});var Ljr=s(bk);hze=r(Ljr,"MT5Config"),Ljr.forEach(t),pze=r(wEe," (mT5 model)"),wEe.forEach(t),uze=i(L),vm=n(L,"LI",{});var AEe=s(vm);ioe=n(AEe,"STRONG",{});var xjr=s(ioe);_ze=r(xjr,"nystromformer"),xjr.forEach(t),bze=r(AEe," \u2014 "),vk=n(AEe,"A",{href:!0});var $jr=s(vk);vze=r($jr,"NystromformerConfig"),$jr.forEach(t),Fze=r(AEe," (Nystromformer model)"),AEe.forEach(t),Tze=i(L),Fm=n(L,"LI",{});var yEe=s(Fm);doe=n(yEe,"STRONG",{});var kjr=s(doe);Mze=r(kjr,"openai-gpt"),kjr.forEach(t),Eze=r(yEe," \u2014 "),Fk=n(yEe,"A",{href:!0});var Sjr=s(Fk);Cze=r(Sjr,"OpenAIGPTConfig"),Sjr.forEach(t),wze=r(yEe," (OpenAI GPT model)"),yEe.forEach(t),Aze=i(L),Tm=n(L,"LI",{});var LEe=s(Tm);coe=n(LEe,"STRONG",{});var Rjr=s(coe);yze=r(Rjr,"opt"),Rjr.forEach(t),Lze=r(LEe," \u2014 "),Tk=n(LEe,"A",{href:!0});var Pjr=s(Tk);xze=r(Pjr,"OPTConfig"),Pjr.forEach(t),$ze=r(LEe," (OPT model)"),LEe.forEach(t),kze=i(L),Mm=n(L,"LI",{});var xEe=s(Mm);foe=n(xEe,"STRONG",{});var Bjr=s(foe);Sze=r(Bjr,"pegasus"),Bjr.forEach(t),Rze=r(xEe," \u2014 "),Mk=n(xEe,"A",{href:!0});var Ijr=s(Mk);Pze=r(Ijr,"PegasusConfig"),Ijr.forEach(t),Bze=r(xEe," (Pegasus model)"),xEe.forEach(t),Ize=i(L),Em=n(L,"LI",{});var $Ee=s(Em);moe=n($Ee,"STRONG",{});var qjr=s(moe);qze=r(qjr,"perceiver"),qjr.forEach(t),Nze=r($Ee," \u2014 "),Ek=n($Ee,"A",{href:!0});var Njr=s(Ek);jze=r(Njr,"PerceiverConfig"),Njr.forEach(t),Dze=r($Ee," (Perceiver model)"),$Ee.forEach(t),Gze=i(L),Cm=n(L,"LI",{});var kEe=s(Cm);goe=n(kEe,"STRONG",{});var jjr=s(goe);Oze=r(jjr,"plbart"),jjr.forEach(t),Vze=r(kEe," \u2014 "),Ck=n(kEe,"A",{href:!0});var Djr=s(Ck);Xze=r(Djr,"PLBartConfig"),Djr.forEach(t),zze=r(kEe," (PLBart model)"),kEe.forEach(t),Qze=i(L),wm=n(L,"LI",{});var SEe=s(wm);hoe=n(SEe,"STRONG",{});var Gjr=s(hoe);Wze=r(Gjr,"poolformer"),Gjr.forEach(t),Hze=r(SEe," \u2014 "),wk=n(SEe,"A",{href:!0});var Ojr=s(wk);Uze=r(Ojr,"PoolFormerConfig"),Ojr.forEach(t),Jze=r(SEe," (PoolFormer model)"),SEe.forEach(t),Yze=i(L),Am=n(L,"LI",{});var REe=s(Am);poe=n(REe,"STRONG",{});var Vjr=s(poe);Kze=r(Vjr,"prophetnet"),Vjr.forEach(t),Zze=r(REe," \u2014 "),Ak=n(REe,"A",{href:!0});var Xjr=s(Ak);eQe=r(Xjr,"ProphetNetConfig"),Xjr.forEach(t),oQe=r(REe," (ProphetNet model)"),REe.forEach(t),rQe=i(L),ym=n(L,"LI",{});var PEe=s(ym);uoe=n(PEe,"STRONG",{});var zjr=s(uoe);tQe=r(zjr,"qdqbert"),zjr.forEach(t),aQe=r(PEe," \u2014 "),yk=n(PEe,"A",{href:!0});var Qjr=s(yk);nQe=r(Qjr,"QDQBertConfig"),Qjr.forEach(t),sQe=r(PEe," (QDQBert model)"),PEe.forEach(t),lQe=i(L),Lm=n(L,"LI",{});var BEe=s(Lm);_oe=n(BEe,"STRONG",{});var Wjr=s(_oe);iQe=r(Wjr,"rag"),Wjr.forEach(t),dQe=r(BEe," \u2014 "),Lk=n(BEe,"A",{href:!0});var Hjr=s(Lk);cQe=r(Hjr,"RagConfig"),Hjr.forEach(t),fQe=r(BEe," (RAG model)"),BEe.forEach(t),mQe=i(L),xm=n(L,"LI",{});var IEe=s(xm);boe=n(IEe,"STRONG",{});var Ujr=s(boe);gQe=r(Ujr,"realm"),Ujr.forEach(t),hQe=r(IEe," \u2014 "),xk=n(IEe,"A",{href:!0});var Jjr=s(xk);pQe=r(Jjr,"RealmConfig"),Jjr.forEach(t),uQe=r(IEe," (Realm model)"),IEe.forEach(t),_Qe=i(L),$m=n(L,"LI",{});var qEe=s($m);voe=n(qEe,"STRONG",{});var Yjr=s(voe);bQe=r(Yjr,"reformer"),Yjr.forEach(t),vQe=r(qEe," \u2014 "),$k=n(qEe,"A",{href:!0});var Kjr=s($k);FQe=r(Kjr,"ReformerConfig"),Kjr.forEach(t),TQe=r(qEe," (Reformer model)"),qEe.forEach(t),MQe=i(L),km=n(L,"LI",{});var NEe=s(km);Foe=n(NEe,"STRONG",{});var Zjr=s(Foe);EQe=r(Zjr,"regnet"),Zjr.forEach(t),CQe=r(NEe," \u2014 "),kk=n(NEe,"A",{href:!0});var eDr=s(kk);wQe=r(eDr,"RegNetConfig"),eDr.forEach(t),AQe=r(NEe," (RegNet model)"),NEe.forEach(t),yQe=i(L),Sm=n(L,"LI",{});var jEe=s(Sm);Toe=n(jEe,"STRONG",{});var oDr=s(Toe);LQe=r(oDr,"rembert"),oDr.forEach(t),xQe=r(jEe," \u2014 "),Sk=n(jEe,"A",{href:!0});var rDr=s(Sk);$Qe=r(rDr,"RemBertConfig"),rDr.forEach(t),kQe=r(jEe," (RemBERT model)"),jEe.forEach(t),SQe=i(L),Rm=n(L,"LI",{});var DEe=s(Rm);Moe=n(DEe,"STRONG",{});var tDr=s(Moe);RQe=r(tDr,"resnet"),tDr.forEach(t),PQe=r(DEe," \u2014 "),Rk=n(DEe,"A",{href:!0});var aDr=s(Rk);BQe=r(aDr,"ResNetConfig"),aDr.forEach(t),IQe=r(DEe," (ResNet model)"),DEe.forEach(t),qQe=i(L),Pm=n(L,"LI",{});var GEe=s(Pm);Eoe=n(GEe,"STRONG",{});var nDr=s(Eoe);NQe=r(nDr,"retribert"),nDr.forEach(t),jQe=r(GEe," \u2014 "),Pk=n(GEe,"A",{href:!0});var sDr=s(Pk);DQe=r(sDr,"RetriBertConfig"),sDr.forEach(t),GQe=r(GEe," (RetriBERT model)"),GEe.forEach(t),OQe=i(L),Bm=n(L,"LI",{});var OEe=s(Bm);Coe=n(OEe,"STRONG",{});var lDr=s(Coe);VQe=r(lDr,"roberta"),lDr.forEach(t),XQe=r(OEe," \u2014 "),Bk=n(OEe,"A",{href:!0});var iDr=s(Bk);zQe=r(iDr,"RobertaConfig"),iDr.forEach(t),QQe=r(OEe," (RoBERTa model)"),OEe.forEach(t),WQe=i(L),Im=n(L,"LI",{});var VEe=s(Im);woe=n(VEe,"STRONG",{});var dDr=s(woe);HQe=r(dDr,"roformer"),dDr.forEach(t),UQe=r(VEe," \u2014 "),Ik=n(VEe,"A",{href:!0});var cDr=s(Ik);JQe=r(cDr,"RoFormerConfig"),cDr.forEach(t),YQe=r(VEe," (RoFormer model)"),VEe.forEach(t),KQe=i(L),qm=n(L,"LI",{});var XEe=s(qm);Aoe=n(XEe,"STRONG",{});var fDr=s(Aoe);ZQe=r(fDr,"segformer"),fDr.forEach(t),eWe=r(XEe," \u2014 "),qk=n(XEe,"A",{href:!0});var mDr=s(qk);oWe=r(mDr,"SegformerConfig"),mDr.forEach(t),rWe=r(XEe," (SegFormer model)"),XEe.forEach(t),tWe=i(L),Nm=n(L,"LI",{});var zEe=s(Nm);yoe=n(zEe,"STRONG",{});var gDr=s(yoe);aWe=r(gDr,"sew"),gDr.forEach(t),nWe=r(zEe," \u2014 "),Nk=n(zEe,"A",{href:!0});var hDr=s(Nk);sWe=r(hDr,"SEWConfig"),hDr.forEach(t),lWe=r(zEe," (SEW model)"),zEe.forEach(t),iWe=i(L),jm=n(L,"LI",{});var QEe=s(jm);Loe=n(QEe,"STRONG",{});var pDr=s(Loe);dWe=r(pDr,"sew-d"),pDr.forEach(t),cWe=r(QEe," \u2014 "),jk=n(QEe,"A",{href:!0});var uDr=s(jk);fWe=r(uDr,"SEWDConfig"),uDr.forEach(t),mWe=r(QEe," (SEW-D model)"),QEe.forEach(t),gWe=i(L),Dm=n(L,"LI",{});var WEe=s(Dm);xoe=n(WEe,"STRONG",{});var _Dr=s(xoe);hWe=r(_Dr,"speech-encoder-decoder"),_Dr.forEach(t),pWe=r(WEe," \u2014 "),Dk=n(WEe,"A",{href:!0});var bDr=s(Dk);uWe=r(bDr,"SpeechEncoderDecoderConfig"),bDr.forEach(t),_We=r(WEe," (Speech Encoder decoder model)"),WEe.forEach(t),bWe=i(L),Gm=n(L,"LI",{});var HEe=s(Gm);$oe=n(HEe,"STRONG",{});var vDr=s($oe);vWe=r(vDr,"speech_to_text"),vDr.forEach(t),FWe=r(HEe," \u2014 "),Gk=n(HEe,"A",{href:!0});var FDr=s(Gk);TWe=r(FDr,"Speech2TextConfig"),FDr.forEach(t),MWe=r(HEe," (Speech2Text model)"),HEe.forEach(t),EWe=i(L),Om=n(L,"LI",{});var UEe=s(Om);koe=n(UEe,"STRONG",{});var TDr=s(koe);CWe=r(TDr,"speech_to_text_2"),TDr.forEach(t),wWe=r(UEe," \u2014 "),Ok=n(UEe,"A",{href:!0});var MDr=s(Ok);AWe=r(MDr,"Speech2Text2Config"),MDr.forEach(t),yWe=r(UEe," (Speech2Text2 model)"),UEe.forEach(t),LWe=i(L),Vm=n(L,"LI",{});var JEe=s(Vm);Soe=n(JEe,"STRONG",{});var EDr=s(Soe);xWe=r(EDr,"splinter"),EDr.forEach(t),$We=r(JEe," \u2014 "),Vk=n(JEe,"A",{href:!0});var CDr=s(Vk);kWe=r(CDr,"SplinterConfig"),CDr.forEach(t),SWe=r(JEe," (Splinter model)"),JEe.forEach(t),RWe=i(L),Xm=n(L,"LI",{});var YEe=s(Xm);Roe=n(YEe,"STRONG",{});var wDr=s(Roe);PWe=r(wDr,"squeezebert"),wDr.forEach(t),BWe=r(YEe," \u2014 "),Xk=n(YEe,"A",{href:!0});var ADr=s(Xk);IWe=r(ADr,"SqueezeBertConfig"),ADr.forEach(t),qWe=r(YEe," (SqueezeBERT model)"),YEe.forEach(t),NWe=i(L),zm=n(L,"LI",{});var KEe=s(zm);Poe=n(KEe,"STRONG",{});var yDr=s(Poe);jWe=r(yDr,"swin"),yDr.forEach(t),DWe=r(KEe," \u2014 "),zk=n(KEe,"A",{href:!0});var LDr=s(zk);GWe=r(LDr,"SwinConfig"),LDr.forEach(t),OWe=r(KEe," (Swin model)"),KEe.forEach(t),VWe=i(L),Qm=n(L,"LI",{});var ZEe=s(Qm);Boe=n(ZEe,"STRONG",{});var xDr=s(Boe);XWe=r(xDr,"t5"),xDr.forEach(t),zWe=r(ZEe," \u2014 "),Qk=n(ZEe,"A",{href:!0});var $Dr=s(Qk);QWe=r($Dr,"T5Config"),$Dr.forEach(t),WWe=r(ZEe," (T5 model)"),ZEe.forEach(t),HWe=i(L),Wm=n(L,"LI",{});var e5e=s(Wm);Ioe=n(e5e,"STRONG",{});var kDr=s(Ioe);UWe=r(kDr,"tapas"),kDr.forEach(t),JWe=r(e5e," \u2014 "),Wk=n(e5e,"A",{href:!0});var SDr=s(Wk);YWe=r(SDr,"TapasConfig"),SDr.forEach(t),KWe=r(e5e," (TAPAS model)"),e5e.forEach(t),ZWe=i(L),Hm=n(L,"LI",{});var o5e=s(Hm);qoe=n(o5e,"STRONG",{});var RDr=s(qoe);eHe=r(RDr,"tapex"),RDr.forEach(t),oHe=r(o5e," \u2014 "),Hk=n(o5e,"A",{href:!0});var PDr=s(Hk);rHe=r(PDr,"BartConfig"),PDr.forEach(t),tHe=r(o5e," (TAPEX model)"),o5e.forEach(t),aHe=i(L),Um=n(L,"LI",{});var r5e=s(Um);Noe=n(r5e,"STRONG",{});var BDr=s(Noe);nHe=r(BDr,"transfo-xl"),BDr.forEach(t),sHe=r(r5e," \u2014 "),Uk=n(r5e,"A",{href:!0});var IDr=s(Uk);lHe=r(IDr,"TransfoXLConfig"),IDr.forEach(t),iHe=r(r5e," (Transformer-XL model)"),r5e.forEach(t),dHe=i(L),Jm=n(L,"LI",{});var t5e=s(Jm);joe=n(t5e,"STRONG",{});var qDr=s(joe);cHe=r(qDr,"trocr"),qDr.forEach(t),fHe=r(t5e," \u2014 "),Jk=n(t5e,"A",{href:!0});var NDr=s(Jk);mHe=r(NDr,"TrOCRConfig"),NDr.forEach(t),gHe=r(t5e," (TrOCR model)"),t5e.forEach(t),hHe=i(L),Ym=n(L,"LI",{});var a5e=s(Ym);Doe=n(a5e,"STRONG",{});var jDr=s(Doe);pHe=r(jDr,"unispeech"),jDr.forEach(t),uHe=r(a5e," \u2014 "),Yk=n(a5e,"A",{href:!0});var DDr=s(Yk);_He=r(DDr,"UniSpeechConfig"),DDr.forEach(t),bHe=r(a5e," (UniSpeech model)"),a5e.forEach(t),vHe=i(L),Km=n(L,"LI",{});var n5e=s(Km);Goe=n(n5e,"STRONG",{});var GDr=s(Goe);FHe=r(GDr,"unispeech-sat"),GDr.forEach(t),THe=r(n5e," \u2014 "),Kk=n(n5e,"A",{href:!0});var ODr=s(Kk);MHe=r(ODr,"UniSpeechSatConfig"),ODr.forEach(t),EHe=r(n5e," (UniSpeechSat model)"),n5e.forEach(t),CHe=i(L),Zm=n(L,"LI",{});var s5e=s(Zm);Ooe=n(s5e,"STRONG",{});var VDr=s(Ooe);wHe=r(VDr,"van"),VDr.forEach(t),AHe=r(s5e," \u2014 "),Zk=n(s5e,"A",{href:!0});var XDr=s(Zk);yHe=r(XDr,"VanConfig"),XDr.forEach(t),LHe=r(s5e," (VAN model)"),s5e.forEach(t),xHe=i(L),eg=n(L,"LI",{});var l5e=s(eg);Voe=n(l5e,"STRONG",{});var zDr=s(Voe);$He=r(zDr,"vilt"),zDr.forEach(t),kHe=r(l5e," \u2014 "),eS=n(l5e,"A",{href:!0});var QDr=s(eS);SHe=r(QDr,"ViltConfig"),QDr.forEach(t),RHe=r(l5e," (ViLT model)"),l5e.forEach(t),PHe=i(L),og=n(L,"LI",{});var i5e=s(og);Xoe=n(i5e,"STRONG",{});var WDr=s(Xoe);BHe=r(WDr,"vision-encoder-decoder"),WDr.forEach(t),IHe=r(i5e," \u2014 "),oS=n(i5e,"A",{href:!0});var HDr=s(oS);qHe=r(HDr,"VisionEncoderDecoderConfig"),HDr.forEach(t),NHe=r(i5e," (Vision Encoder decoder model)"),i5e.forEach(t),jHe=i(L),rg=n(L,"LI",{});var d5e=s(rg);zoe=n(d5e,"STRONG",{});var UDr=s(zoe);DHe=r(UDr,"vision-text-dual-encoder"),UDr.forEach(t),GHe=r(d5e," \u2014 "),rS=n(d5e,"A",{href:!0});var JDr=s(rS);OHe=r(JDr,"VisionTextDualEncoderConfig"),JDr.forEach(t),VHe=r(d5e," (VisionTextDualEncoder model)"),d5e.forEach(t),XHe=i(L),tg=n(L,"LI",{});var c5e=s(tg);Qoe=n(c5e,"STRONG",{});var YDr=s(Qoe);zHe=r(YDr,"visual_bert"),YDr.forEach(t),QHe=r(c5e," \u2014 "),tS=n(c5e,"A",{href:!0});var KDr=s(tS);WHe=r(KDr,"VisualBertConfig"),KDr.forEach(t),HHe=r(c5e," (VisualBert model)"),c5e.forEach(t),UHe=i(L),ag=n(L,"LI",{});var f5e=s(ag);Woe=n(f5e,"STRONG",{});var ZDr=s(Woe);JHe=r(ZDr,"vit"),ZDr.forEach(t),YHe=r(f5e," \u2014 "),aS=n(f5e,"A",{href:!0});var eGr=s(aS);KHe=r(eGr,"ViTConfig"),eGr.forEach(t),ZHe=r(f5e," (ViT model)"),f5e.forEach(t),eUe=i(L),ng=n(L,"LI",{});var m5e=s(ng);Hoe=n(m5e,"STRONG",{});var oGr=s(Hoe);oUe=r(oGr,"vit_mae"),oGr.forEach(t),rUe=r(m5e," \u2014 "),nS=n(m5e,"A",{href:!0});var rGr=s(nS);tUe=r(rGr,"ViTMAEConfig"),rGr.forEach(t),aUe=r(m5e," (ViTMAE model)"),m5e.forEach(t),nUe=i(L),sg=n(L,"LI",{});var g5e=s(sg);Uoe=n(g5e,"STRONG",{});var tGr=s(Uoe);sUe=r(tGr,"wav2vec2"),tGr.forEach(t),lUe=r(g5e," \u2014 "),sS=n(g5e,"A",{href:!0});var aGr=s(sS);iUe=r(aGr,"Wav2Vec2Config"),aGr.forEach(t),dUe=r(g5e," (Wav2Vec2 model)"),g5e.forEach(t),cUe=i(L),lg=n(L,"LI",{});var h5e=s(lg);Joe=n(h5e,"STRONG",{});var nGr=s(Joe);fUe=r(nGr,"wavlm"),nGr.forEach(t),mUe=r(h5e," \u2014 "),lS=n(h5e,"A",{href:!0});var sGr=s(lS);gUe=r(sGr,"WavLMConfig"),sGr.forEach(t),hUe=r(h5e," (WavLM model)"),h5e.forEach(t),pUe=i(L),ig=n(L,"LI",{});var p5e=s(ig);Yoe=n(p5e,"STRONG",{});var lGr=s(Yoe);uUe=r(lGr,"xglm"),lGr.forEach(t),_Ue=r(p5e," \u2014 "),iS=n(p5e,"A",{href:!0});var iGr=s(iS);bUe=r(iGr,"XGLMConfig"),iGr.forEach(t),vUe=r(p5e," (XGLM model)"),p5e.forEach(t),FUe=i(L),dg=n(L,"LI",{});var u5e=s(dg);Koe=n(u5e,"STRONG",{});var dGr=s(Koe);TUe=r(dGr,"xlm"),dGr.forEach(t),MUe=r(u5e," \u2014 "),dS=n(u5e,"A",{href:!0});var cGr=s(dS);EUe=r(cGr,"XLMConfig"),cGr.forEach(t),CUe=r(u5e," (XLM model)"),u5e.forEach(t),wUe=i(L),cg=n(L,"LI",{});var _5e=s(cg);Zoe=n(_5e,"STRONG",{});var fGr=s(Zoe);AUe=r(fGr,"xlm-prophetnet"),fGr.forEach(t),yUe=r(_5e," \u2014 "),cS=n(_5e,"A",{href:!0});var mGr=s(cS);LUe=r(mGr,"XLMProphetNetConfig"),mGr.forEach(t),xUe=r(_5e," (XLMProphetNet model)"),_5e.forEach(t),$Ue=i(L),fg=n(L,"LI",{});var b5e=s(fg);ere=n(b5e,"STRONG",{});var gGr=s(ere);kUe=r(gGr,"xlm-roberta"),gGr.forEach(t),SUe=r(b5e," \u2014 "),fS=n(b5e,"A",{href:!0});var hGr=s(fS);RUe=r(hGr,"XLMRobertaConfig"),hGr.forEach(t),PUe=r(b5e," (XLM-RoBERTa model)"),b5e.forEach(t),BUe=i(L),mg=n(L,"LI",{});var v5e=s(mg);ore=n(v5e,"STRONG",{});var pGr=s(ore);IUe=r(pGr,"xlm-roberta-xl"),pGr.forEach(t),qUe=r(v5e," \u2014 "),mS=n(v5e,"A",{href:!0});var uGr=s(mS);NUe=r(uGr,"XLMRobertaXLConfig"),uGr.forEach(t),jUe=r(v5e," (XLM-RoBERTa-XL model)"),v5e.forEach(t),DUe=i(L),gg=n(L,"LI",{});var F5e=s(gg);rre=n(F5e,"STRONG",{});var _Gr=s(rre);GUe=r(_Gr,"xlnet"),_Gr.forEach(t),OUe=r(F5e," \u2014 "),gS=n(F5e,"A",{href:!0});var bGr=s(gS);VUe=r(bGr,"XLNetConfig"),bGr.forEach(t),XUe=r(F5e," (XLNet model)"),F5e.forEach(t),zUe=i(L),hg=n(L,"LI",{});var T5e=s(hg);tre=n(T5e,"STRONG",{});var vGr=s(tre);QUe=r(vGr,"yolos"),vGr.forEach(t),WUe=r(T5e," \u2014 "),hS=n(T5e,"A",{href:!0});var FGr=s(hS);HUe=r(FGr,"YolosConfig"),FGr.forEach(t),UUe=r(T5e," (YOLOS model)"),T5e.forEach(t),JUe=i(L),pg=n(L,"LI",{});var M5e=s(pg);are=n(M5e,"STRONG",{});var TGr=s(are);YUe=r(TGr,"yoso"),TGr.forEach(t),KUe=r(M5e," \u2014 "),pS=n(M5e,"A",{href:!0});var MGr=s(pS);ZUe=r(MGr,"YosoConfig"),MGr.forEach(t),eJe=r(M5e," (YOSO model)"),M5e.forEach(t),L.forEach(t),oJe=i(Zr),T(ug.$$.fragment,Zr),Zr.forEach(t),rJe=i(Kr),_g=n(Kr,"DIV",{class:!0});var Dqe=s(_g);T(rA.$$.fragment,Dqe),tJe=i(Dqe),nre=n(Dqe,"P",{});var EGr=s(nre);aJe=r(EGr,"Register a new configuration for this class."),EGr.forEach(t),Dqe.forEach(t),Kr.forEach(t),VBe=i(f),bi=n(f,"H2",{class:!0});var Gqe=s(bi);bg=n(Gqe,"A",{id:!0,class:!0,href:!0});var CGr=s(bg);sre=n(CGr,"SPAN",{});var wGr=s(sre);T(tA.$$.fragment,wGr),wGr.forEach(t),CGr.forEach(t),nJe=i(Gqe),lre=n(Gqe,"SPAN",{});var AGr=s(lre);sJe=r(AGr,"AutoTokenizer"),AGr.forEach(t),Gqe.forEach(t),XBe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(aA.$$.fragment,Is),lJe=i(Is),nA=n(Is,"P",{});var Oqe=s(nA);iJe=r(Oqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),uS=n(Oqe,"A",{href:!0});var yGr=s(uS);dJe=r(yGr,"AutoTokenizer.from_pretrained()"),yGr.forEach(t),cJe=r(Oqe," class method."),Oqe.forEach(t),fJe=i(Is),sA=n(Is,"P",{});var Vqe=s(sA);mJe=r(Vqe,"This class cannot be instantiated directly using "),ire=n(Vqe,"CODE",{});var LGr=s(ire);gJe=r(LGr,"__init__()"),LGr.forEach(t),hJe=r(Vqe," (throws an error)."),Vqe.forEach(t),pJe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(lA.$$.fragment,qs),uJe=i(qs),dre=n(qs,"P",{});var xGr=s(dre);_Je=r(xGr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),xGr.forEach(t),bJe=i(qs),Ca=n(qs,"P",{});var JC=s(Ca);vJe=r(JC,"The tokenizer class to instantiate is selected based on the "),cre=n(JC,"CODE",{});var $Gr=s(cre);FJe=r($Gr,"model_type"),$Gr.forEach(t),TJe=r(JC,` property of the config object (either
passed as an argument or loaded from `),fre=n(JC,"CODE",{});var kGr=s(fre);MJe=r(kGr,"pretrained_model_name_or_path"),kGr.forEach(t),EJe=r(JC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mre=n(JC,"CODE",{});var SGr=s(mre);CJe=r(SGr,"pretrained_model_name_or_path"),SGr.forEach(t),wJe=r(JC,":"),JC.forEach(t),AJe=i(qs),k=n(qs,"UL",{});var S=s(k);kn=n(S,"LI",{});var i9=s(kn);gre=n(i9,"STRONG",{});var RGr=s(gre);yJe=r(RGr,"albert"),RGr.forEach(t),LJe=r(i9," \u2014 "),_S=n(i9,"A",{href:!0});var PGr=s(_S);xJe=r(PGr,"AlbertTokenizer"),PGr.forEach(t),$Je=r(i9," or "),bS=n(i9,"A",{href:!0});var BGr=s(bS);kJe=r(BGr,"AlbertTokenizerFast"),BGr.forEach(t),SJe=r(i9," (ALBERT model)"),i9.forEach(t),RJe=i(S),Sn=n(S,"LI",{});var d9=s(Sn);hre=n(d9,"STRONG",{});var IGr=s(hre);PJe=r(IGr,"bart"),IGr.forEach(t),BJe=r(d9," \u2014 "),vS=n(d9,"A",{href:!0});var qGr=s(vS);IJe=r(qGr,"BartTokenizer"),qGr.forEach(t),qJe=r(d9," or "),FS=n(d9,"A",{href:!0});var NGr=s(FS);NJe=r(NGr,"BartTokenizerFast"),NGr.forEach(t),jJe=r(d9," (BART model)"),d9.forEach(t),DJe=i(S),Rn=n(S,"LI",{});var c9=s(Rn);pre=n(c9,"STRONG",{});var jGr=s(pre);GJe=r(jGr,"barthez"),jGr.forEach(t),OJe=r(c9," \u2014 "),TS=n(c9,"A",{href:!0});var DGr=s(TS);VJe=r(DGr,"BarthezTokenizer"),DGr.forEach(t),XJe=r(c9," or "),MS=n(c9,"A",{href:!0});var GGr=s(MS);zJe=r(GGr,"BarthezTokenizerFast"),GGr.forEach(t),QJe=r(c9," (BARThez model)"),c9.forEach(t),WJe=i(S),vg=n(S,"LI",{});var E5e=s(vg);ure=n(E5e,"STRONG",{});var OGr=s(ure);HJe=r(OGr,"bartpho"),OGr.forEach(t),UJe=r(E5e," \u2014 "),ES=n(E5e,"A",{href:!0});var VGr=s(ES);JJe=r(VGr,"BartphoTokenizer"),VGr.forEach(t),YJe=r(E5e," (BARTpho model)"),E5e.forEach(t),KJe=i(S),Pn=n(S,"LI",{});var f9=s(Pn);_re=n(f9,"STRONG",{});var XGr=s(_re);ZJe=r(XGr,"bert"),XGr.forEach(t),eYe=r(f9," \u2014 "),CS=n(f9,"A",{href:!0});var zGr=s(CS);oYe=r(zGr,"BertTokenizer"),zGr.forEach(t),rYe=r(f9," or "),wS=n(f9,"A",{href:!0});var QGr=s(wS);tYe=r(QGr,"BertTokenizerFast"),QGr.forEach(t),aYe=r(f9," (BERT model)"),f9.forEach(t),nYe=i(S),Fg=n(S,"LI",{});var C5e=s(Fg);bre=n(C5e,"STRONG",{});var WGr=s(bre);sYe=r(WGr,"bert-generation"),WGr.forEach(t),lYe=r(C5e," \u2014 "),AS=n(C5e,"A",{href:!0});var HGr=s(AS);iYe=r(HGr,"BertGenerationTokenizer"),HGr.forEach(t),dYe=r(C5e," (Bert Generation model)"),C5e.forEach(t),cYe=i(S),Tg=n(S,"LI",{});var w5e=s(Tg);vre=n(w5e,"STRONG",{});var UGr=s(vre);fYe=r(UGr,"bert-japanese"),UGr.forEach(t),mYe=r(w5e," \u2014 "),yS=n(w5e,"A",{href:!0});var JGr=s(yS);gYe=r(JGr,"BertJapaneseTokenizer"),JGr.forEach(t),hYe=r(w5e," (BertJapanese model)"),w5e.forEach(t),pYe=i(S),Mg=n(S,"LI",{});var A5e=s(Mg);Fre=n(A5e,"STRONG",{});var YGr=s(Fre);uYe=r(YGr,"bertweet"),YGr.forEach(t),_Ye=r(A5e," \u2014 "),LS=n(A5e,"A",{href:!0});var KGr=s(LS);bYe=r(KGr,"BertweetTokenizer"),KGr.forEach(t),vYe=r(A5e," (Bertweet model)"),A5e.forEach(t),FYe=i(S),Bn=n(S,"LI",{});var m9=s(Bn);Tre=n(m9,"STRONG",{});var ZGr=s(Tre);TYe=r(ZGr,"big_bird"),ZGr.forEach(t),MYe=r(m9," \u2014 "),xS=n(m9,"A",{href:!0});var eOr=s(xS);EYe=r(eOr,"BigBirdTokenizer"),eOr.forEach(t),CYe=r(m9," or "),$S=n(m9,"A",{href:!0});var oOr=s($S);wYe=r(oOr,"BigBirdTokenizerFast"),oOr.forEach(t),AYe=r(m9," (BigBird model)"),m9.forEach(t),yYe=i(S),In=n(S,"LI",{});var g9=s(In);Mre=n(g9,"STRONG",{});var rOr=s(Mre);LYe=r(rOr,"bigbird_pegasus"),rOr.forEach(t),xYe=r(g9," \u2014 "),kS=n(g9,"A",{href:!0});var tOr=s(kS);$Ye=r(tOr,"PegasusTokenizer"),tOr.forEach(t),kYe=r(g9," or "),SS=n(g9,"A",{href:!0});var aOr=s(SS);SYe=r(aOr,"PegasusTokenizerFast"),aOr.forEach(t),RYe=r(g9," (BigBirdPegasus model)"),g9.forEach(t),PYe=i(S),qn=n(S,"LI",{});var h9=s(qn);Ere=n(h9,"STRONG",{});var nOr=s(Ere);BYe=r(nOr,"blenderbot"),nOr.forEach(t),IYe=r(h9," \u2014 "),RS=n(h9,"A",{href:!0});var sOr=s(RS);qYe=r(sOr,"BlenderbotTokenizer"),sOr.forEach(t),NYe=r(h9," or "),PS=n(h9,"A",{href:!0});var lOr=s(PS);jYe=r(lOr,"BlenderbotTokenizerFast"),lOr.forEach(t),DYe=r(h9," (Blenderbot model)"),h9.forEach(t),GYe=i(S),Eg=n(S,"LI",{});var y5e=s(Eg);Cre=n(y5e,"STRONG",{});var iOr=s(Cre);OYe=r(iOr,"blenderbot-small"),iOr.forEach(t),VYe=r(y5e," \u2014 "),BS=n(y5e,"A",{href:!0});var dOr=s(BS);XYe=r(dOr,"BlenderbotSmallTokenizer"),dOr.forEach(t),zYe=r(y5e," (BlenderbotSmall model)"),y5e.forEach(t),QYe=i(S),Cg=n(S,"LI",{});var L5e=s(Cg);wre=n(L5e,"STRONG",{});var cOr=s(wre);WYe=r(cOr,"byt5"),cOr.forEach(t),HYe=r(L5e," \u2014 "),IS=n(L5e,"A",{href:!0});var fOr=s(IS);UYe=r(fOr,"ByT5Tokenizer"),fOr.forEach(t),JYe=r(L5e," (ByT5 model)"),L5e.forEach(t),YYe=i(S),Nn=n(S,"LI",{});var p9=s(Nn);Are=n(p9,"STRONG",{});var mOr=s(Are);KYe=r(mOr,"camembert"),mOr.forEach(t),ZYe=r(p9," \u2014 "),qS=n(p9,"A",{href:!0});var gOr=s(qS);eKe=r(gOr,"CamembertTokenizer"),gOr.forEach(t),oKe=r(p9," or "),NS=n(p9,"A",{href:!0});var hOr=s(NS);rKe=r(hOr,"CamembertTokenizerFast"),hOr.forEach(t),tKe=r(p9," (CamemBERT model)"),p9.forEach(t),aKe=i(S),wg=n(S,"LI",{});var x5e=s(wg);yre=n(x5e,"STRONG",{});var pOr=s(yre);nKe=r(pOr,"canine"),pOr.forEach(t),sKe=r(x5e," \u2014 "),jS=n(x5e,"A",{href:!0});var uOr=s(jS);lKe=r(uOr,"CanineTokenizer"),uOr.forEach(t),iKe=r(x5e," (Canine model)"),x5e.forEach(t),dKe=i(S),jn=n(S,"LI",{});var u9=s(jn);Lre=n(u9,"STRONG",{});var _Or=s(Lre);cKe=r(_Or,"clip"),_Or.forEach(t),fKe=r(u9," \u2014 "),DS=n(u9,"A",{href:!0});var bOr=s(DS);mKe=r(bOr,"CLIPTokenizer"),bOr.forEach(t),gKe=r(u9," or "),GS=n(u9,"A",{href:!0});var vOr=s(GS);hKe=r(vOr,"CLIPTokenizerFast"),vOr.forEach(t),pKe=r(u9," (CLIP model)"),u9.forEach(t),uKe=i(S),Dn=n(S,"LI",{});var _9=s(Dn);xre=n(_9,"STRONG",{});var FOr=s(xre);_Ke=r(FOr,"convbert"),FOr.forEach(t),bKe=r(_9," \u2014 "),OS=n(_9,"A",{href:!0});var TOr=s(OS);vKe=r(TOr,"ConvBertTokenizer"),TOr.forEach(t),FKe=r(_9," or "),VS=n(_9,"A",{href:!0});var MOr=s(VS);TKe=r(MOr,"ConvBertTokenizerFast"),MOr.forEach(t),MKe=r(_9," (ConvBERT model)"),_9.forEach(t),EKe=i(S),Gn=n(S,"LI",{});var b9=s(Gn);$re=n(b9,"STRONG",{});var EOr=s($re);CKe=r(EOr,"cpm"),EOr.forEach(t),wKe=r(b9," \u2014 "),XS=n(b9,"A",{href:!0});var COr=s(XS);AKe=r(COr,"CpmTokenizer"),COr.forEach(t),yKe=r(b9," or "),zS=n(b9,"A",{href:!0});var wOr=s(zS);LKe=r(wOr,"CpmTokenizerFast"),wOr.forEach(t),xKe=r(b9," (CPM model)"),b9.forEach(t),$Ke=i(S),Ag=n(S,"LI",{});var $5e=s(Ag);kre=n($5e,"STRONG",{});var AOr=s(kre);kKe=r(AOr,"ctrl"),AOr.forEach(t),SKe=r($5e," \u2014 "),QS=n($5e,"A",{href:!0});var yOr=s(QS);RKe=r(yOr,"CTRLTokenizer"),yOr.forEach(t),PKe=r($5e," (CTRL model)"),$5e.forEach(t),BKe=i(S),On=n(S,"LI",{});var v9=s(On);Sre=n(v9,"STRONG",{});var LOr=s(Sre);IKe=r(LOr,"data2vec-text"),LOr.forEach(t),qKe=r(v9," \u2014 "),WS=n(v9,"A",{href:!0});var xOr=s(WS);NKe=r(xOr,"RobertaTokenizer"),xOr.forEach(t),jKe=r(v9," or "),HS=n(v9,"A",{href:!0});var $Or=s(HS);DKe=r($Or,"RobertaTokenizerFast"),$Or.forEach(t),GKe=r(v9," (Data2VecText model)"),v9.forEach(t),OKe=i(S),Vn=n(S,"LI",{});var F9=s(Vn);Rre=n(F9,"STRONG",{});var kOr=s(Rre);VKe=r(kOr,"deberta"),kOr.forEach(t),XKe=r(F9," \u2014 "),US=n(F9,"A",{href:!0});var SOr=s(US);zKe=r(SOr,"DebertaTokenizer"),SOr.forEach(t),QKe=r(F9," or "),JS=n(F9,"A",{href:!0});var ROr=s(JS);WKe=r(ROr,"DebertaTokenizerFast"),ROr.forEach(t),HKe=r(F9," (DeBERTa model)"),F9.forEach(t),UKe=i(S),Xn=n(S,"LI",{});var T9=s(Xn);Pre=n(T9,"STRONG",{});var POr=s(Pre);JKe=r(POr,"deberta-v2"),POr.forEach(t),YKe=r(T9," \u2014 "),YS=n(T9,"A",{href:!0});var BOr=s(YS);KKe=r(BOr,"DebertaV2Tokenizer"),BOr.forEach(t),ZKe=r(T9," or "),KS=n(T9,"A",{href:!0});var IOr=s(KS);eZe=r(IOr,"DebertaV2TokenizerFast"),IOr.forEach(t),oZe=r(T9," (DeBERTa-v2 model)"),T9.forEach(t),rZe=i(S),zn=n(S,"LI",{});var M9=s(zn);Bre=n(M9,"STRONG",{});var qOr=s(Bre);tZe=r(qOr,"distilbert"),qOr.forEach(t),aZe=r(M9," \u2014 "),ZS=n(M9,"A",{href:!0});var NOr=s(ZS);nZe=r(NOr,"DistilBertTokenizer"),NOr.forEach(t),sZe=r(M9," or "),eR=n(M9,"A",{href:!0});var jOr=s(eR);lZe=r(jOr,"DistilBertTokenizerFast"),jOr.forEach(t),iZe=r(M9," (DistilBERT model)"),M9.forEach(t),dZe=i(S),Qn=n(S,"LI",{});var E9=s(Qn);Ire=n(E9,"STRONG",{});var DOr=s(Ire);cZe=r(DOr,"dpr"),DOr.forEach(t),fZe=r(E9," \u2014 "),oR=n(E9,"A",{href:!0});var GOr=s(oR);mZe=r(GOr,"DPRQuestionEncoderTokenizer"),GOr.forEach(t),gZe=r(E9," or "),rR=n(E9,"A",{href:!0});var OOr=s(rR);hZe=r(OOr,"DPRQuestionEncoderTokenizerFast"),OOr.forEach(t),pZe=r(E9," (DPR model)"),E9.forEach(t),uZe=i(S),Wn=n(S,"LI",{});var C9=s(Wn);qre=n(C9,"STRONG",{});var VOr=s(qre);_Ze=r(VOr,"electra"),VOr.forEach(t),bZe=r(C9," \u2014 "),tR=n(C9,"A",{href:!0});var XOr=s(tR);vZe=r(XOr,"ElectraTokenizer"),XOr.forEach(t),FZe=r(C9," or "),aR=n(C9,"A",{href:!0});var zOr=s(aR);TZe=r(zOr,"ElectraTokenizerFast"),zOr.forEach(t),MZe=r(C9," (ELECTRA model)"),C9.forEach(t),EZe=i(S),yg=n(S,"LI",{});var k5e=s(yg);Nre=n(k5e,"STRONG",{});var QOr=s(Nre);CZe=r(QOr,"flaubert"),QOr.forEach(t),wZe=r(k5e," \u2014 "),nR=n(k5e,"A",{href:!0});var WOr=s(nR);AZe=r(WOr,"FlaubertTokenizer"),WOr.forEach(t),yZe=r(k5e," (FlauBERT model)"),k5e.forEach(t),LZe=i(S),Hn=n(S,"LI",{});var w9=s(Hn);jre=n(w9,"STRONG",{});var HOr=s(jre);xZe=r(HOr,"fnet"),HOr.forEach(t),$Ze=r(w9," \u2014 "),sR=n(w9,"A",{href:!0});var UOr=s(sR);kZe=r(UOr,"FNetTokenizer"),UOr.forEach(t),SZe=r(w9," or "),lR=n(w9,"A",{href:!0});var JOr=s(lR);RZe=r(JOr,"FNetTokenizerFast"),JOr.forEach(t),PZe=r(w9," (FNet model)"),w9.forEach(t),BZe=i(S),Lg=n(S,"LI",{});var S5e=s(Lg);Dre=n(S5e,"STRONG",{});var YOr=s(Dre);IZe=r(YOr,"fsmt"),YOr.forEach(t),qZe=r(S5e," \u2014 "),iR=n(S5e,"A",{href:!0});var KOr=s(iR);NZe=r(KOr,"FSMTTokenizer"),KOr.forEach(t),jZe=r(S5e," (FairSeq Machine-Translation model)"),S5e.forEach(t),DZe=i(S),Un=n(S,"LI",{});var A9=s(Un);Gre=n(A9,"STRONG",{});var ZOr=s(Gre);GZe=r(ZOr,"funnel"),ZOr.forEach(t),OZe=r(A9," \u2014 "),dR=n(A9,"A",{href:!0});var eVr=s(dR);VZe=r(eVr,"FunnelTokenizer"),eVr.forEach(t),XZe=r(A9," or "),cR=n(A9,"A",{href:!0});var oVr=s(cR);zZe=r(oVr,"FunnelTokenizerFast"),oVr.forEach(t),QZe=r(A9," (Funnel Transformer model)"),A9.forEach(t),WZe=i(S),Jn=n(S,"LI",{});var y9=s(Jn);Ore=n(y9,"STRONG",{});var rVr=s(Ore);HZe=r(rVr,"gpt2"),rVr.forEach(t),UZe=r(y9," \u2014 "),fR=n(y9,"A",{href:!0});var tVr=s(fR);JZe=r(tVr,"GPT2Tokenizer"),tVr.forEach(t),YZe=r(y9," or "),mR=n(y9,"A",{href:!0});var aVr=s(mR);KZe=r(aVr,"GPT2TokenizerFast"),aVr.forEach(t),ZZe=r(y9," (OpenAI GPT-2 model)"),y9.forEach(t),eeo=i(S),Yn=n(S,"LI",{});var L9=s(Yn);Vre=n(L9,"STRONG",{});var nVr=s(Vre);oeo=r(nVr,"gpt_neo"),nVr.forEach(t),reo=r(L9," \u2014 "),gR=n(L9,"A",{href:!0});var sVr=s(gR);teo=r(sVr,"GPT2Tokenizer"),sVr.forEach(t),aeo=r(L9," or "),hR=n(L9,"A",{href:!0});var lVr=s(hR);neo=r(lVr,"GPT2TokenizerFast"),lVr.forEach(t),seo=r(L9," (GPT Neo model)"),L9.forEach(t),leo=i(S),Kn=n(S,"LI",{});var x9=s(Kn);Xre=n(x9,"STRONG",{});var iVr=s(Xre);ieo=r(iVr,"gptj"),iVr.forEach(t),deo=r(x9," \u2014 "),pR=n(x9,"A",{href:!0});var dVr=s(pR);ceo=r(dVr,"GPT2Tokenizer"),dVr.forEach(t),feo=r(x9," or "),uR=n(x9,"A",{href:!0});var cVr=s(uR);meo=r(cVr,"GPT2TokenizerFast"),cVr.forEach(t),geo=r(x9," (GPT-J model)"),x9.forEach(t),heo=i(S),Zn=n(S,"LI",{});var $9=s(Zn);zre=n($9,"STRONG",{});var fVr=s(zre);peo=r(fVr,"herbert"),fVr.forEach(t),ueo=r($9," \u2014 "),_R=n($9,"A",{href:!0});var mVr=s(_R);_eo=r(mVr,"HerbertTokenizer"),mVr.forEach(t),beo=r($9," or "),bR=n($9,"A",{href:!0});var gVr=s(bR);veo=r(gVr,"HerbertTokenizerFast"),gVr.forEach(t),Feo=r($9," (HerBERT model)"),$9.forEach(t),Teo=i(S),xg=n(S,"LI",{});var R5e=s(xg);Qre=n(R5e,"STRONG",{});var hVr=s(Qre);Meo=r(hVr,"hubert"),hVr.forEach(t),Eeo=r(R5e," \u2014 "),vR=n(R5e,"A",{href:!0});var pVr=s(vR);Ceo=r(pVr,"Wav2Vec2CTCTokenizer"),pVr.forEach(t),weo=r(R5e," (Hubert model)"),R5e.forEach(t),Aeo=i(S),es=n(S,"LI",{});var k9=s(es);Wre=n(k9,"STRONG",{});var uVr=s(Wre);yeo=r(uVr,"ibert"),uVr.forEach(t),Leo=r(k9," \u2014 "),FR=n(k9,"A",{href:!0});var _Vr=s(FR);xeo=r(_Vr,"RobertaTokenizer"),_Vr.forEach(t),$eo=r(k9," or "),TR=n(k9,"A",{href:!0});var bVr=s(TR);keo=r(bVr,"RobertaTokenizerFast"),bVr.forEach(t),Seo=r(k9," (I-BERT model)"),k9.forEach(t),Reo=i(S),os=n(S,"LI",{});var S9=s(os);Hre=n(S9,"STRONG",{});var vVr=s(Hre);Peo=r(vVr,"layoutlm"),vVr.forEach(t),Beo=r(S9," \u2014 "),MR=n(S9,"A",{href:!0});var FVr=s(MR);Ieo=r(FVr,"LayoutLMTokenizer"),FVr.forEach(t),qeo=r(S9," or "),ER=n(S9,"A",{href:!0});var TVr=s(ER);Neo=r(TVr,"LayoutLMTokenizerFast"),TVr.forEach(t),jeo=r(S9," (LayoutLM model)"),S9.forEach(t),Deo=i(S),rs=n(S,"LI",{});var R9=s(rs);Ure=n(R9,"STRONG",{});var MVr=s(Ure);Geo=r(MVr,"layoutlmv2"),MVr.forEach(t),Oeo=r(R9," \u2014 "),CR=n(R9,"A",{href:!0});var EVr=s(CR);Veo=r(EVr,"LayoutLMv2Tokenizer"),EVr.forEach(t),Xeo=r(R9," or "),wR=n(R9,"A",{href:!0});var CVr=s(wR);zeo=r(CVr,"LayoutLMv2TokenizerFast"),CVr.forEach(t),Qeo=r(R9," (LayoutLMv2 model)"),R9.forEach(t),Weo=i(S),ts=n(S,"LI",{});var P9=s(ts);Jre=n(P9,"STRONG",{});var wVr=s(Jre);Heo=r(wVr,"layoutxlm"),wVr.forEach(t),Ueo=r(P9," \u2014 "),AR=n(P9,"A",{href:!0});var AVr=s(AR);Jeo=r(AVr,"LayoutXLMTokenizer"),AVr.forEach(t),Yeo=r(P9," or "),yR=n(P9,"A",{href:!0});var yVr=s(yR);Keo=r(yVr,"LayoutXLMTokenizerFast"),yVr.forEach(t),Zeo=r(P9," (LayoutXLM model)"),P9.forEach(t),eoo=i(S),as=n(S,"LI",{});var B9=s(as);Yre=n(B9,"STRONG",{});var LVr=s(Yre);ooo=r(LVr,"led"),LVr.forEach(t),roo=r(B9," \u2014 "),LR=n(B9,"A",{href:!0});var xVr=s(LR);too=r(xVr,"LEDTokenizer"),xVr.forEach(t),aoo=r(B9," or "),xR=n(B9,"A",{href:!0});var $Vr=s(xR);noo=r($Vr,"LEDTokenizerFast"),$Vr.forEach(t),soo=r(B9," (LED model)"),B9.forEach(t),loo=i(S),ns=n(S,"LI",{});var I9=s(ns);Kre=n(I9,"STRONG",{});var kVr=s(Kre);ioo=r(kVr,"longformer"),kVr.forEach(t),doo=r(I9," \u2014 "),$R=n(I9,"A",{href:!0});var SVr=s($R);coo=r(SVr,"LongformerTokenizer"),SVr.forEach(t),foo=r(I9," or "),kR=n(I9,"A",{href:!0});var RVr=s(kR);moo=r(RVr,"LongformerTokenizerFast"),RVr.forEach(t),goo=r(I9," (Longformer model)"),I9.forEach(t),hoo=i(S),$g=n(S,"LI",{});var P5e=s($g);Zre=n(P5e,"STRONG",{});var PVr=s(Zre);poo=r(PVr,"luke"),PVr.forEach(t),uoo=r(P5e," \u2014 "),SR=n(P5e,"A",{href:!0});var BVr=s(SR);_oo=r(BVr,"LukeTokenizer"),BVr.forEach(t),boo=r(P5e," (LUKE model)"),P5e.forEach(t),voo=i(S),ss=n(S,"LI",{});var q9=s(ss);ete=n(q9,"STRONG",{});var IVr=s(ete);Foo=r(IVr,"lxmert"),IVr.forEach(t),Too=r(q9," \u2014 "),RR=n(q9,"A",{href:!0});var qVr=s(RR);Moo=r(qVr,"LxmertTokenizer"),qVr.forEach(t),Eoo=r(q9," or "),PR=n(q9,"A",{href:!0});var NVr=s(PR);Coo=r(NVr,"LxmertTokenizerFast"),NVr.forEach(t),woo=r(q9," (LXMERT model)"),q9.forEach(t),Aoo=i(S),kg=n(S,"LI",{});var B5e=s(kg);ote=n(B5e,"STRONG",{});var jVr=s(ote);yoo=r(jVr,"m2m_100"),jVr.forEach(t),Loo=r(B5e," \u2014 "),BR=n(B5e,"A",{href:!0});var DVr=s(BR);xoo=r(DVr,"M2M100Tokenizer"),DVr.forEach(t),$oo=r(B5e," (M2M100 model)"),B5e.forEach(t),koo=i(S),Sg=n(S,"LI",{});var I5e=s(Sg);rte=n(I5e,"STRONG",{});var GVr=s(rte);Soo=r(GVr,"marian"),GVr.forEach(t),Roo=r(I5e," \u2014 "),IR=n(I5e,"A",{href:!0});var OVr=s(IR);Poo=r(OVr,"MarianTokenizer"),OVr.forEach(t),Boo=r(I5e," (Marian model)"),I5e.forEach(t),Ioo=i(S),ls=n(S,"LI",{});var N9=s(ls);tte=n(N9,"STRONG",{});var VVr=s(tte);qoo=r(VVr,"mbart"),VVr.forEach(t),Noo=r(N9," \u2014 "),qR=n(N9,"A",{href:!0});var XVr=s(qR);joo=r(XVr,"MBartTokenizer"),XVr.forEach(t),Doo=r(N9," or "),NR=n(N9,"A",{href:!0});var zVr=s(NR);Goo=r(zVr,"MBartTokenizerFast"),zVr.forEach(t),Ooo=r(N9," (mBART model)"),N9.forEach(t),Voo=i(S),is=n(S,"LI",{});var j9=s(is);ate=n(j9,"STRONG",{});var QVr=s(ate);Xoo=r(QVr,"mbart50"),QVr.forEach(t),zoo=r(j9," \u2014 "),jR=n(j9,"A",{href:!0});var WVr=s(jR);Qoo=r(WVr,"MBart50Tokenizer"),WVr.forEach(t),Woo=r(j9," or "),DR=n(j9,"A",{href:!0});var HVr=s(DR);Hoo=r(HVr,"MBart50TokenizerFast"),HVr.forEach(t),Uoo=r(j9," (mBART-50 model)"),j9.forEach(t),Joo=i(S),ds=n(S,"LI",{});var D9=s(ds);nte=n(D9,"STRONG",{});var UVr=s(nte);Yoo=r(UVr,"megatron-bert"),UVr.forEach(t),Koo=r(D9," \u2014 "),GR=n(D9,"A",{href:!0});var JVr=s(GR);Zoo=r(JVr,"BertTokenizer"),JVr.forEach(t),ero=r(D9," or "),OR=n(D9,"A",{href:!0});var YVr=s(OR);oro=r(YVr,"BertTokenizerFast"),YVr.forEach(t),rro=r(D9," (MegatronBert model)"),D9.forEach(t),tro=i(S),Rg=n(S,"LI",{});var q5e=s(Rg);ste=n(q5e,"STRONG",{});var KVr=s(ste);aro=r(KVr,"mluke"),KVr.forEach(t),nro=r(q5e," \u2014 "),VR=n(q5e,"A",{href:!0});var ZVr=s(VR);sro=r(ZVr,"MLukeTokenizer"),ZVr.forEach(t),lro=r(q5e," (mLUKE model)"),q5e.forEach(t),iro=i(S),cs=n(S,"LI",{});var G9=s(cs);lte=n(G9,"STRONG",{});var eXr=s(lte);dro=r(eXr,"mobilebert"),eXr.forEach(t),cro=r(G9," \u2014 "),XR=n(G9,"A",{href:!0});var oXr=s(XR);fro=r(oXr,"MobileBertTokenizer"),oXr.forEach(t),mro=r(G9," or "),zR=n(G9,"A",{href:!0});var rXr=s(zR);gro=r(rXr,"MobileBertTokenizerFast"),rXr.forEach(t),hro=r(G9," (MobileBERT model)"),G9.forEach(t),pro=i(S),fs=n(S,"LI",{});var O9=s(fs);ite=n(O9,"STRONG",{});var tXr=s(ite);uro=r(tXr,"mpnet"),tXr.forEach(t),_ro=r(O9," \u2014 "),QR=n(O9,"A",{href:!0});var aXr=s(QR);bro=r(aXr,"MPNetTokenizer"),aXr.forEach(t),vro=r(O9," or "),WR=n(O9,"A",{href:!0});var nXr=s(WR);Fro=r(nXr,"MPNetTokenizerFast"),nXr.forEach(t),Tro=r(O9," (MPNet model)"),O9.forEach(t),Mro=i(S),ms=n(S,"LI",{});var V9=s(ms);dte=n(V9,"STRONG",{});var sXr=s(dte);Ero=r(sXr,"mt5"),sXr.forEach(t),Cro=r(V9," \u2014 "),HR=n(V9,"A",{href:!0});var lXr=s(HR);wro=r(lXr,"MT5Tokenizer"),lXr.forEach(t),Aro=r(V9," or "),UR=n(V9,"A",{href:!0});var iXr=s(UR);yro=r(iXr,"MT5TokenizerFast"),iXr.forEach(t),Lro=r(V9," (mT5 model)"),V9.forEach(t),xro=i(S),gs=n(S,"LI",{});var X9=s(gs);cte=n(X9,"STRONG",{});var dXr=s(cte);$ro=r(dXr,"nystromformer"),dXr.forEach(t),kro=r(X9," \u2014 "),JR=n(X9,"A",{href:!0});var cXr=s(JR);Sro=r(cXr,"AlbertTokenizer"),cXr.forEach(t),Rro=r(X9," or "),YR=n(X9,"A",{href:!0});var fXr=s(YR);Pro=r(fXr,"AlbertTokenizerFast"),fXr.forEach(t),Bro=r(X9," (Nystromformer model)"),X9.forEach(t),Iro=i(S),hs=n(S,"LI",{});var z9=s(hs);fte=n(z9,"STRONG",{});var mXr=s(fte);qro=r(mXr,"openai-gpt"),mXr.forEach(t),Nro=r(z9," \u2014 "),KR=n(z9,"A",{href:!0});var gXr=s(KR);jro=r(gXr,"OpenAIGPTTokenizer"),gXr.forEach(t),Dro=r(z9," or "),ZR=n(z9,"A",{href:!0});var hXr=s(ZR);Gro=r(hXr,"OpenAIGPTTokenizerFast"),hXr.forEach(t),Oro=r(z9," (OpenAI GPT model)"),z9.forEach(t),Vro=i(S),ps=n(S,"LI",{});var Q9=s(ps);mte=n(Q9,"STRONG",{});var pXr=s(mte);Xro=r(pXr,"opt"),pXr.forEach(t),zro=r(Q9," \u2014 "),eP=n(Q9,"A",{href:!0});var uXr=s(eP);Qro=r(uXr,"GPT2Tokenizer"),uXr.forEach(t),Wro=r(Q9," or "),oP=n(Q9,"A",{href:!0});var _Xr=s(oP);Hro=r(_Xr,"GPT2TokenizerFast"),_Xr.forEach(t),Uro=r(Q9," (OPT model)"),Q9.forEach(t),Jro=i(S),us=n(S,"LI",{});var W9=s(us);gte=n(W9,"STRONG",{});var bXr=s(gte);Yro=r(bXr,"pegasus"),bXr.forEach(t),Kro=r(W9," \u2014 "),rP=n(W9,"A",{href:!0});var vXr=s(rP);Zro=r(vXr,"PegasusTokenizer"),vXr.forEach(t),eto=r(W9," or "),tP=n(W9,"A",{href:!0});var FXr=s(tP);oto=r(FXr,"PegasusTokenizerFast"),FXr.forEach(t),rto=r(W9," (Pegasus model)"),W9.forEach(t),tto=i(S),Pg=n(S,"LI",{});var N5e=s(Pg);hte=n(N5e,"STRONG",{});var TXr=s(hte);ato=r(TXr,"perceiver"),TXr.forEach(t),nto=r(N5e," \u2014 "),aP=n(N5e,"A",{href:!0});var MXr=s(aP);sto=r(MXr,"PerceiverTokenizer"),MXr.forEach(t),lto=r(N5e," (Perceiver model)"),N5e.forEach(t),ito=i(S),Bg=n(S,"LI",{});var j5e=s(Bg);pte=n(j5e,"STRONG",{});var EXr=s(pte);dto=r(EXr,"phobert"),EXr.forEach(t),cto=r(j5e," \u2014 "),nP=n(j5e,"A",{href:!0});var CXr=s(nP);fto=r(CXr,"PhobertTokenizer"),CXr.forEach(t),mto=r(j5e," (PhoBERT model)"),j5e.forEach(t),gto=i(S),Ig=n(S,"LI",{});var D5e=s(Ig);ute=n(D5e,"STRONG",{});var wXr=s(ute);hto=r(wXr,"plbart"),wXr.forEach(t),pto=r(D5e," \u2014 "),sP=n(D5e,"A",{href:!0});var AXr=s(sP);uto=r(AXr,"PLBartTokenizer"),AXr.forEach(t),_to=r(D5e," (PLBart model)"),D5e.forEach(t),bto=i(S),qg=n(S,"LI",{});var G5e=s(qg);_te=n(G5e,"STRONG",{});var yXr=s(_te);vto=r(yXr,"prophetnet"),yXr.forEach(t),Fto=r(G5e," \u2014 "),lP=n(G5e,"A",{href:!0});var LXr=s(lP);Tto=r(LXr,"ProphetNetTokenizer"),LXr.forEach(t),Mto=r(G5e," (ProphetNet model)"),G5e.forEach(t),Eto=i(S),_s=n(S,"LI",{});var H9=s(_s);bte=n(H9,"STRONG",{});var xXr=s(bte);Cto=r(xXr,"qdqbert"),xXr.forEach(t),wto=r(H9," \u2014 "),iP=n(H9,"A",{href:!0});var $Xr=s(iP);Ato=r($Xr,"BertTokenizer"),$Xr.forEach(t),yto=r(H9," or "),dP=n(H9,"A",{href:!0});var kXr=s(dP);Lto=r(kXr,"BertTokenizerFast"),kXr.forEach(t),xto=r(H9," (QDQBert model)"),H9.forEach(t),$to=i(S),Ng=n(S,"LI",{});var O5e=s(Ng);vte=n(O5e,"STRONG",{});var SXr=s(vte);kto=r(SXr,"rag"),SXr.forEach(t),Sto=r(O5e," \u2014 "),cP=n(O5e,"A",{href:!0});var RXr=s(cP);Rto=r(RXr,"RagTokenizer"),RXr.forEach(t),Pto=r(O5e," (RAG model)"),O5e.forEach(t),Bto=i(S),bs=n(S,"LI",{});var U9=s(bs);Fte=n(U9,"STRONG",{});var PXr=s(Fte);Ito=r(PXr,"realm"),PXr.forEach(t),qto=r(U9," \u2014 "),fP=n(U9,"A",{href:!0});var BXr=s(fP);Nto=r(BXr,"RealmTokenizer"),BXr.forEach(t),jto=r(U9," or "),mP=n(U9,"A",{href:!0});var IXr=s(mP);Dto=r(IXr,"RealmTokenizerFast"),IXr.forEach(t),Gto=r(U9," (Realm model)"),U9.forEach(t),Oto=i(S),vs=n(S,"LI",{});var J9=s(vs);Tte=n(J9,"STRONG",{});var qXr=s(Tte);Vto=r(qXr,"reformer"),qXr.forEach(t),Xto=r(J9," \u2014 "),gP=n(J9,"A",{href:!0});var NXr=s(gP);zto=r(NXr,"ReformerTokenizer"),NXr.forEach(t),Qto=r(J9," or "),hP=n(J9,"A",{href:!0});var jXr=s(hP);Wto=r(jXr,"ReformerTokenizerFast"),jXr.forEach(t),Hto=r(J9," (Reformer model)"),J9.forEach(t),Uto=i(S),Fs=n(S,"LI",{});var Y9=s(Fs);Mte=n(Y9,"STRONG",{});var DXr=s(Mte);Jto=r(DXr,"rembert"),DXr.forEach(t),Yto=r(Y9," \u2014 "),pP=n(Y9,"A",{href:!0});var GXr=s(pP);Kto=r(GXr,"RemBertTokenizer"),GXr.forEach(t),Zto=r(Y9," or "),uP=n(Y9,"A",{href:!0});var OXr=s(uP);eao=r(OXr,"RemBertTokenizerFast"),OXr.forEach(t),oao=r(Y9," (RemBERT model)"),Y9.forEach(t),rao=i(S),Ts=n(S,"LI",{});var K9=s(Ts);Ete=n(K9,"STRONG",{});var VXr=s(Ete);tao=r(VXr,"retribert"),VXr.forEach(t),aao=r(K9," \u2014 "),_P=n(K9,"A",{href:!0});var XXr=s(_P);nao=r(XXr,"RetriBertTokenizer"),XXr.forEach(t),sao=r(K9," or "),bP=n(K9,"A",{href:!0});var zXr=s(bP);lao=r(zXr,"RetriBertTokenizerFast"),zXr.forEach(t),iao=r(K9," (RetriBERT model)"),K9.forEach(t),dao=i(S),Ms=n(S,"LI",{});var Z9=s(Ms);Cte=n(Z9,"STRONG",{});var QXr=s(Cte);cao=r(QXr,"roberta"),QXr.forEach(t),fao=r(Z9," \u2014 "),vP=n(Z9,"A",{href:!0});var WXr=s(vP);mao=r(WXr,"RobertaTokenizer"),WXr.forEach(t),gao=r(Z9," or "),FP=n(Z9,"A",{href:!0});var HXr=s(FP);hao=r(HXr,"RobertaTokenizerFast"),HXr.forEach(t),pao=r(Z9," (RoBERTa model)"),Z9.forEach(t),uao=i(S),Es=n(S,"LI",{});var e$=s(Es);wte=n(e$,"STRONG",{});var UXr=s(wte);_ao=r(UXr,"roformer"),UXr.forEach(t),bao=r(e$," \u2014 "),TP=n(e$,"A",{href:!0});var JXr=s(TP);vao=r(JXr,"RoFormerTokenizer"),JXr.forEach(t),Fao=r(e$," or "),MP=n(e$,"A",{href:!0});var YXr=s(MP);Tao=r(YXr,"RoFormerTokenizerFast"),YXr.forEach(t),Mao=r(e$," (RoFormer model)"),e$.forEach(t),Eao=i(S),jg=n(S,"LI",{});var V5e=s(jg);Ate=n(V5e,"STRONG",{});var KXr=s(Ate);Cao=r(KXr,"speech_to_text"),KXr.forEach(t),wao=r(V5e," \u2014 "),EP=n(V5e,"A",{href:!0});var ZXr=s(EP);Aao=r(ZXr,"Speech2TextTokenizer"),ZXr.forEach(t),yao=r(V5e," (Speech2Text model)"),V5e.forEach(t),Lao=i(S),Dg=n(S,"LI",{});var X5e=s(Dg);yte=n(X5e,"STRONG",{});var ezr=s(yte);xao=r(ezr,"speech_to_text_2"),ezr.forEach(t),$ao=r(X5e," \u2014 "),CP=n(X5e,"A",{href:!0});var ozr=s(CP);kao=r(ozr,"Speech2Text2Tokenizer"),ozr.forEach(t),Sao=r(X5e," (Speech2Text2 model)"),X5e.forEach(t),Rao=i(S),Cs=n(S,"LI",{});var o$=s(Cs);Lte=n(o$,"STRONG",{});var rzr=s(Lte);Pao=r(rzr,"splinter"),rzr.forEach(t),Bao=r(o$," \u2014 "),wP=n(o$,"A",{href:!0});var tzr=s(wP);Iao=r(tzr,"SplinterTokenizer"),tzr.forEach(t),qao=r(o$," or "),AP=n(o$,"A",{href:!0});var azr=s(AP);Nao=r(azr,"SplinterTokenizerFast"),azr.forEach(t),jao=r(o$," (Splinter model)"),o$.forEach(t),Dao=i(S),ws=n(S,"LI",{});var r$=s(ws);xte=n(r$,"STRONG",{});var nzr=s(xte);Gao=r(nzr,"squeezebert"),nzr.forEach(t),Oao=r(r$," \u2014 "),yP=n(r$,"A",{href:!0});var szr=s(yP);Vao=r(szr,"SqueezeBertTokenizer"),szr.forEach(t),Xao=r(r$," or "),LP=n(r$,"A",{href:!0});var lzr=s(LP);zao=r(lzr,"SqueezeBertTokenizerFast"),lzr.forEach(t),Qao=r(r$," (SqueezeBERT model)"),r$.forEach(t),Wao=i(S),As=n(S,"LI",{});var t$=s(As);$te=n(t$,"STRONG",{});var izr=s($te);Hao=r(izr,"t5"),izr.forEach(t),Uao=r(t$," \u2014 "),xP=n(t$,"A",{href:!0});var dzr=s(xP);Jao=r(dzr,"T5Tokenizer"),dzr.forEach(t),Yao=r(t$," or "),$P=n(t$,"A",{href:!0});var czr=s($P);Kao=r(czr,"T5TokenizerFast"),czr.forEach(t),Zao=r(t$," (T5 model)"),t$.forEach(t),eno=i(S),Gg=n(S,"LI",{});var z5e=s(Gg);kte=n(z5e,"STRONG",{});var fzr=s(kte);ono=r(fzr,"tapas"),fzr.forEach(t),rno=r(z5e," \u2014 "),kP=n(z5e,"A",{href:!0});var mzr=s(kP);tno=r(mzr,"TapasTokenizer"),mzr.forEach(t),ano=r(z5e," (TAPAS model)"),z5e.forEach(t),nno=i(S),Og=n(S,"LI",{});var Q5e=s(Og);Ste=n(Q5e,"STRONG",{});var gzr=s(Ste);sno=r(gzr,"tapex"),gzr.forEach(t),lno=r(Q5e," \u2014 "),SP=n(Q5e,"A",{href:!0});var hzr=s(SP);ino=r(hzr,"TapexTokenizer"),hzr.forEach(t),dno=r(Q5e," (TAPEX model)"),Q5e.forEach(t),cno=i(S),Vg=n(S,"LI",{});var W5e=s(Vg);Rte=n(W5e,"STRONG",{});var pzr=s(Rte);fno=r(pzr,"transfo-xl"),pzr.forEach(t),mno=r(W5e," \u2014 "),RP=n(W5e,"A",{href:!0});var uzr=s(RP);gno=r(uzr,"TransfoXLTokenizer"),uzr.forEach(t),hno=r(W5e," (Transformer-XL model)"),W5e.forEach(t),pno=i(S),ys=n(S,"LI",{});var a$=s(ys);Pte=n(a$,"STRONG",{});var _zr=s(Pte);uno=r(_zr,"visual_bert"),_zr.forEach(t),_no=r(a$," \u2014 "),PP=n(a$,"A",{href:!0});var bzr=s(PP);bno=r(bzr,"BertTokenizer"),bzr.forEach(t),vno=r(a$," or "),BP=n(a$,"A",{href:!0});var vzr=s(BP);Fno=r(vzr,"BertTokenizerFast"),vzr.forEach(t),Tno=r(a$," (VisualBert model)"),a$.forEach(t),Mno=i(S),Xg=n(S,"LI",{});var H5e=s(Xg);Bte=n(H5e,"STRONG",{});var Fzr=s(Bte);Eno=r(Fzr,"wav2vec2"),Fzr.forEach(t),Cno=r(H5e," \u2014 "),IP=n(H5e,"A",{href:!0});var Tzr=s(IP);wno=r(Tzr,"Wav2Vec2CTCTokenizer"),Tzr.forEach(t),Ano=r(H5e," (Wav2Vec2 model)"),H5e.forEach(t),yno=i(S),zg=n(S,"LI",{});var U5e=s(zg);Ite=n(U5e,"STRONG",{});var Mzr=s(Ite);Lno=r(Mzr,"wav2vec2_phoneme"),Mzr.forEach(t),xno=r(U5e," \u2014 "),qP=n(U5e,"A",{href:!0});var Ezr=s(qP);$no=r(Ezr,"Wav2Vec2PhonemeCTCTokenizer"),Ezr.forEach(t),kno=r(U5e," (Wav2Vec2Phoneme model)"),U5e.forEach(t),Sno=i(S),Ls=n(S,"LI",{});var n$=s(Ls);qte=n(n$,"STRONG",{});var Czr=s(qte);Rno=r(Czr,"xglm"),Czr.forEach(t),Pno=r(n$," \u2014 "),NP=n(n$,"A",{href:!0});var wzr=s(NP);Bno=r(wzr,"XGLMTokenizer"),wzr.forEach(t),Ino=r(n$," or "),jP=n(n$,"A",{href:!0});var Azr=s(jP);qno=r(Azr,"XGLMTokenizerFast"),Azr.forEach(t),Nno=r(n$," (XGLM model)"),n$.forEach(t),jno=i(S),Qg=n(S,"LI",{});var J5e=s(Qg);Nte=n(J5e,"STRONG",{});var yzr=s(Nte);Dno=r(yzr,"xlm"),yzr.forEach(t),Gno=r(J5e," \u2014 "),DP=n(J5e,"A",{href:!0});var Lzr=s(DP);Ono=r(Lzr,"XLMTokenizer"),Lzr.forEach(t),Vno=r(J5e," (XLM model)"),J5e.forEach(t),Xno=i(S),Wg=n(S,"LI",{});var Y5e=s(Wg);jte=n(Y5e,"STRONG",{});var xzr=s(jte);zno=r(xzr,"xlm-prophetnet"),xzr.forEach(t),Qno=r(Y5e," \u2014 "),GP=n(Y5e,"A",{href:!0});var $zr=s(GP);Wno=r($zr,"XLMProphetNetTokenizer"),$zr.forEach(t),Hno=r(Y5e," (XLMProphetNet model)"),Y5e.forEach(t),Uno=i(S),xs=n(S,"LI",{});var s$=s(xs);Dte=n(s$,"STRONG",{});var kzr=s(Dte);Jno=r(kzr,"xlm-roberta"),kzr.forEach(t),Yno=r(s$," \u2014 "),OP=n(s$,"A",{href:!0});var Szr=s(OP);Kno=r(Szr,"XLMRobertaTokenizer"),Szr.forEach(t),Zno=r(s$," or "),VP=n(s$,"A",{href:!0});var Rzr=s(VP);eso=r(Rzr,"XLMRobertaTokenizerFast"),Rzr.forEach(t),oso=r(s$," (XLM-RoBERTa model)"),s$.forEach(t),rso=i(S),$s=n(S,"LI",{});var l$=s($s);Gte=n(l$,"STRONG",{});var Pzr=s(Gte);tso=r(Pzr,"xlm-roberta-xl"),Pzr.forEach(t),aso=r(l$," \u2014 "),XP=n(l$,"A",{href:!0});var Bzr=s(XP);nso=r(Bzr,"RobertaTokenizer"),Bzr.forEach(t),sso=r(l$," or "),zP=n(l$,"A",{href:!0});var Izr=s(zP);lso=r(Izr,"RobertaTokenizerFast"),Izr.forEach(t),iso=r(l$," (XLM-RoBERTa-XL model)"),l$.forEach(t),dso=i(S),ks=n(S,"LI",{});var i$=s(ks);Ote=n(i$,"STRONG",{});var qzr=s(Ote);cso=r(qzr,"xlnet"),qzr.forEach(t),fso=r(i$," \u2014 "),QP=n(i$,"A",{href:!0});var Nzr=s(QP);mso=r(Nzr,"XLNetTokenizer"),Nzr.forEach(t),gso=r(i$," or "),WP=n(i$,"A",{href:!0});var jzr=s(WP);hso=r(jzr,"XLNetTokenizerFast"),jzr.forEach(t),pso=r(i$," (XLNet model)"),i$.forEach(t),uso=i(S),Ss=n(S,"LI",{});var d$=s(Ss);Vte=n(d$,"STRONG",{});var Dzr=s(Vte);_so=r(Dzr,"yoso"),Dzr.forEach(t),bso=r(d$," \u2014 "),HP=n(d$,"A",{href:!0});var Gzr=s(HP);vso=r(Gzr,"AlbertTokenizer"),Gzr.forEach(t),Fso=r(d$," or "),UP=n(d$,"A",{href:!0});var Ozr=s(UP);Tso=r(Ozr,"AlbertTokenizerFast"),Ozr.forEach(t),Mso=r(d$," (YOSO model)"),d$.forEach(t),S.forEach(t),Eso=i(qs),T(Hg.$$.fragment,qs),qs.forEach(t),Cso=i(Is),Ug=n(Is,"DIV",{class:!0});var Xqe=s(Ug);T(iA.$$.fragment,Xqe),wso=i(Xqe),Xte=n(Xqe,"P",{});var Vzr=s(Xte);Aso=r(Vzr,"Register a new tokenizer in this mapping."),Vzr.forEach(t),Xqe.forEach(t),Is.forEach(t),zBe=i(f),vi=n(f,"H2",{class:!0});var zqe=s(vi);Jg=n(zqe,"A",{id:!0,class:!0,href:!0});var Xzr=s(Jg);zte=n(Xzr,"SPAN",{});var zzr=s(zte);T(dA.$$.fragment,zzr),zzr.forEach(t),Xzr.forEach(t),yso=i(zqe),Qte=n(zqe,"SPAN",{});var Qzr=s(Qte);Lso=r(Qzr,"AutoFeatureExtractor"),Qzr.forEach(t),zqe.forEach(t),QBe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(cA.$$.fragment,Ns),xso=i(Ns),fA=n(Ns,"P",{});var Qqe=s(fA);$so=r(Qqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),JP=n(Qqe,"A",{href:!0});var Wzr=s(JP);kso=r(Wzr,"AutoFeatureExtractor.from_pretrained()"),Wzr.forEach(t),Sso=r(Qqe," class method."),Qqe.forEach(t),Rso=i(Ns),mA=n(Ns,"P",{});var Wqe=s(mA);Pso=r(Wqe,"This class cannot be instantiated directly using "),Wte=n(Wqe,"CODE",{});var Hzr=s(Wte);Bso=r(Hzr,"__init__()"),Hzr.forEach(t),Iso=r(Wqe," (throws an error)."),Wqe.forEach(t),qso=i(Ns),Qe=n(Ns,"DIV",{class:!0});var Yt=s(Qe);T(gA.$$.fragment,Yt),Nso=i(Yt),Hte=n(Yt,"P",{});var Uzr=s(Hte);jso=r(Uzr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Uzr.forEach(t),Dso=i(Yt),wa=n(Yt,"P",{});var YC=s(wa);Gso=r(YC,"The feature extractor class to instantiate is selected based on the "),Ute=n(YC,"CODE",{});var Jzr=s(Ute);Oso=r(Jzr,"model_type"),Jzr.forEach(t),Vso=r(YC,` property of the config object
(either passed as an argument or loaded from `),Jte=n(YC,"CODE",{});var Yzr=s(Jte);Xso=r(Yzr,"pretrained_model_name_or_path"),Yzr.forEach(t),zso=r(YC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Yte=n(YC,"CODE",{});var Kzr=s(Yte);Qso=r(Kzr,"pretrained_model_name_or_path"),Kzr.forEach(t),Wso=r(YC,":"),YC.forEach(t),Hso=i(Yt),ae=n(Yt,"UL",{});var se=s(ae);Yg=n(se,"LI",{});var K5e=s(Yg);Kte=n(K5e,"STRONG",{});var Zzr=s(Kte);Uso=r(Zzr,"beit"),Zzr.forEach(t),Jso=r(K5e," \u2014 "),YP=n(K5e,"A",{href:!0});var eQr=s(YP);Yso=r(eQr,"BeitFeatureExtractor"),eQr.forEach(t),Kso=r(K5e," (BEiT model)"),K5e.forEach(t),Zso=i(se),Kg=n(se,"LI",{});var Z5e=s(Kg);Zte=n(Z5e,"STRONG",{});var oQr=s(Zte);elo=r(oQr,"clip"),oQr.forEach(t),olo=r(Z5e," \u2014 "),KP=n(Z5e,"A",{href:!0});var rQr=s(KP);rlo=r(rQr,"CLIPFeatureExtractor"),rQr.forEach(t),tlo=r(Z5e," (CLIP model)"),Z5e.forEach(t),alo=i(se),Zg=n(se,"LI",{});var eCe=s(Zg);eae=n(eCe,"STRONG",{});var tQr=s(eae);nlo=r(tQr,"convnext"),tQr.forEach(t),slo=r(eCe," \u2014 "),ZP=n(eCe,"A",{href:!0});var aQr=s(ZP);llo=r(aQr,"ConvNextFeatureExtractor"),aQr.forEach(t),ilo=r(eCe," (ConvNext model)"),eCe.forEach(t),dlo=i(se),eh=n(se,"LI",{});var oCe=s(eh);oae=n(oCe,"STRONG",{});var nQr=s(oae);clo=r(nQr,"data2vec-audio"),nQr.forEach(t),flo=r(oCe," \u2014 "),eB=n(oCe,"A",{href:!0});var sQr=s(eB);mlo=r(sQr,"Wav2Vec2FeatureExtractor"),sQr.forEach(t),glo=r(oCe," (Data2VecAudio model)"),oCe.forEach(t),hlo=i(se),oh=n(se,"LI",{});var rCe=s(oh);rae=n(rCe,"STRONG",{});var lQr=s(rae);plo=r(lQr,"data2vec-vision"),lQr.forEach(t),ulo=r(rCe," \u2014 "),oB=n(rCe,"A",{href:!0});var iQr=s(oB);_lo=r(iQr,"BeitFeatureExtractor"),iQr.forEach(t),blo=r(rCe," (Data2VecVision model)"),rCe.forEach(t),vlo=i(se),rh=n(se,"LI",{});var tCe=s(rh);tae=n(tCe,"STRONG",{});var dQr=s(tae);Flo=r(dQr,"deit"),dQr.forEach(t),Tlo=r(tCe," \u2014 "),rB=n(tCe,"A",{href:!0});var cQr=s(rB);Mlo=r(cQr,"DeiTFeatureExtractor"),cQr.forEach(t),Elo=r(tCe," (DeiT model)"),tCe.forEach(t),Clo=i(se),th=n(se,"LI",{});var aCe=s(th);aae=n(aCe,"STRONG",{});var fQr=s(aae);wlo=r(fQr,"detr"),fQr.forEach(t),Alo=r(aCe," \u2014 "),tB=n(aCe,"A",{href:!0});var mQr=s(tB);ylo=r(mQr,"DetrFeatureExtractor"),mQr.forEach(t),Llo=r(aCe," (DETR model)"),aCe.forEach(t),xlo=i(se),ah=n(se,"LI",{});var nCe=s(ah);nae=n(nCe,"STRONG",{});var gQr=s(nae);$lo=r(gQr,"dpt"),gQr.forEach(t),klo=r(nCe," \u2014 "),aB=n(nCe,"A",{href:!0});var hQr=s(aB);Slo=r(hQr,"DPTFeatureExtractor"),hQr.forEach(t),Rlo=r(nCe," (DPT model)"),nCe.forEach(t),Plo=i(se),nh=n(se,"LI",{});var sCe=s(nh);sae=n(sCe,"STRONG",{});var pQr=s(sae);Blo=r(pQr,"glpn"),pQr.forEach(t),Ilo=r(sCe," \u2014 "),nB=n(sCe,"A",{href:!0});var uQr=s(nB);qlo=r(uQr,"GLPNFeatureExtractor"),uQr.forEach(t),Nlo=r(sCe," (GLPN model)"),sCe.forEach(t),jlo=i(se),sh=n(se,"LI",{});var lCe=s(sh);lae=n(lCe,"STRONG",{});var _Qr=s(lae);Dlo=r(_Qr,"hubert"),_Qr.forEach(t),Glo=r(lCe," \u2014 "),sB=n(lCe,"A",{href:!0});var bQr=s(sB);Olo=r(bQr,"Wav2Vec2FeatureExtractor"),bQr.forEach(t),Vlo=r(lCe," (Hubert model)"),lCe.forEach(t),Xlo=i(se),lh=n(se,"LI",{});var iCe=s(lh);iae=n(iCe,"STRONG",{});var vQr=s(iae);zlo=r(vQr,"layoutlmv2"),vQr.forEach(t),Qlo=r(iCe," \u2014 "),lB=n(iCe,"A",{href:!0});var FQr=s(lB);Wlo=r(FQr,"LayoutLMv2FeatureExtractor"),FQr.forEach(t),Hlo=r(iCe," (LayoutLMv2 model)"),iCe.forEach(t),Ulo=i(se),ih=n(se,"LI",{});var dCe=s(ih);dae=n(dCe,"STRONG",{});var TQr=s(dae);Jlo=r(TQr,"maskformer"),TQr.forEach(t),Ylo=r(dCe," \u2014 "),iB=n(dCe,"A",{href:!0});var MQr=s(iB);Klo=r(MQr,"MaskFormerFeatureExtractor"),MQr.forEach(t),Zlo=r(dCe," (MaskFormer model)"),dCe.forEach(t),eio=i(se),dh=n(se,"LI",{});var cCe=s(dh);cae=n(cCe,"STRONG",{});var EQr=s(cae);oio=r(EQr,"perceiver"),EQr.forEach(t),rio=r(cCe," \u2014 "),dB=n(cCe,"A",{href:!0});var CQr=s(dB);tio=r(CQr,"PerceiverFeatureExtractor"),CQr.forEach(t),aio=r(cCe," (Perceiver model)"),cCe.forEach(t),nio=i(se),ch=n(se,"LI",{});var fCe=s(ch);fae=n(fCe,"STRONG",{});var wQr=s(fae);sio=r(wQr,"poolformer"),wQr.forEach(t),lio=r(fCe," \u2014 "),cB=n(fCe,"A",{href:!0});var AQr=s(cB);iio=r(AQr,"PoolFormerFeatureExtractor"),AQr.forEach(t),dio=r(fCe," (PoolFormer model)"),fCe.forEach(t),cio=i(se),fh=n(se,"LI",{});var mCe=s(fh);mae=n(mCe,"STRONG",{});var yQr=s(mae);fio=r(yQr,"regnet"),yQr.forEach(t),mio=r(mCe," \u2014 "),fB=n(mCe,"A",{href:!0});var LQr=s(fB);gio=r(LQr,"ConvNextFeatureExtractor"),LQr.forEach(t),hio=r(mCe," (RegNet model)"),mCe.forEach(t),pio=i(se),mh=n(se,"LI",{});var gCe=s(mh);gae=n(gCe,"STRONG",{});var xQr=s(gae);uio=r(xQr,"resnet"),xQr.forEach(t),_io=r(gCe," \u2014 "),mB=n(gCe,"A",{href:!0});var $Qr=s(mB);bio=r($Qr,"ConvNextFeatureExtractor"),$Qr.forEach(t),vio=r(gCe," (ResNet model)"),gCe.forEach(t),Fio=i(se),gh=n(se,"LI",{});var hCe=s(gh);hae=n(hCe,"STRONG",{});var kQr=s(hae);Tio=r(kQr,"segformer"),kQr.forEach(t),Mio=r(hCe," \u2014 "),gB=n(hCe,"A",{href:!0});var SQr=s(gB);Eio=r(SQr,"SegformerFeatureExtractor"),SQr.forEach(t),Cio=r(hCe," (SegFormer model)"),hCe.forEach(t),wio=i(se),hh=n(se,"LI",{});var pCe=s(hh);pae=n(pCe,"STRONG",{});var RQr=s(pae);Aio=r(RQr,"speech_to_text"),RQr.forEach(t),yio=r(pCe," \u2014 "),hB=n(pCe,"A",{href:!0});var PQr=s(hB);Lio=r(PQr,"Speech2TextFeatureExtractor"),PQr.forEach(t),xio=r(pCe," (Speech2Text model)"),pCe.forEach(t),$io=i(se),ph=n(se,"LI",{});var uCe=s(ph);uae=n(uCe,"STRONG",{});var BQr=s(uae);kio=r(BQr,"swin"),BQr.forEach(t),Sio=r(uCe," \u2014 "),pB=n(uCe,"A",{href:!0});var IQr=s(pB);Rio=r(IQr,"ViTFeatureExtractor"),IQr.forEach(t),Pio=r(uCe," (Swin model)"),uCe.forEach(t),Bio=i(se),uh=n(se,"LI",{});var _Ce=s(uh);_ae=n(_Ce,"STRONG",{});var qQr=s(_ae);Iio=r(qQr,"van"),qQr.forEach(t),qio=r(_Ce," \u2014 "),uB=n(_Ce,"A",{href:!0});var NQr=s(uB);Nio=r(NQr,"ConvNextFeatureExtractor"),NQr.forEach(t),jio=r(_Ce," (VAN model)"),_Ce.forEach(t),Dio=i(se),_h=n(se,"LI",{});var bCe=s(_h);bae=n(bCe,"STRONG",{});var jQr=s(bae);Gio=r(jQr,"vit"),jQr.forEach(t),Oio=r(bCe," \u2014 "),_B=n(bCe,"A",{href:!0});var DQr=s(_B);Vio=r(DQr,"ViTFeatureExtractor"),DQr.forEach(t),Xio=r(bCe," (ViT model)"),bCe.forEach(t),zio=i(se),bh=n(se,"LI",{});var vCe=s(bh);vae=n(vCe,"STRONG",{});var GQr=s(vae);Qio=r(GQr,"vit_mae"),GQr.forEach(t),Wio=r(vCe," \u2014 "),bB=n(vCe,"A",{href:!0});var OQr=s(bB);Hio=r(OQr,"ViTFeatureExtractor"),OQr.forEach(t),Uio=r(vCe," (ViTMAE model)"),vCe.forEach(t),Jio=i(se),vh=n(se,"LI",{});var FCe=s(vh);Fae=n(FCe,"STRONG",{});var VQr=s(Fae);Yio=r(VQr,"wav2vec2"),VQr.forEach(t),Kio=r(FCe," \u2014 "),vB=n(FCe,"A",{href:!0});var XQr=s(vB);Zio=r(XQr,"Wav2Vec2FeatureExtractor"),XQr.forEach(t),edo=r(FCe," (Wav2Vec2 model)"),FCe.forEach(t),odo=i(se),Fh=n(se,"LI",{});var TCe=s(Fh);Tae=n(TCe,"STRONG",{});var zQr=s(Tae);rdo=r(zQr,"yolos"),zQr.forEach(t),tdo=r(TCe," \u2014 "),FB=n(TCe,"A",{href:!0});var QQr=s(FB);ado=r(QQr,"YolosFeatureExtractor"),QQr.forEach(t),ndo=r(TCe," (YOLOS model)"),TCe.forEach(t),se.forEach(t),sdo=i(Yt),T(Th.$$.fragment,Yt),ldo=i(Yt),T(Mh.$$.fragment,Yt),Yt.forEach(t),ido=i(Ns),Eh=n(Ns,"DIV",{class:!0});var Hqe=s(Eh);T(hA.$$.fragment,Hqe),ddo=i(Hqe),Mae=n(Hqe,"P",{});var WQr=s(Mae);cdo=r(WQr,"Register a new feature extractor for this class."),WQr.forEach(t),Hqe.forEach(t),Ns.forEach(t),WBe=i(f),Fi=n(f,"H2",{class:!0});var Uqe=s(Fi);Ch=n(Uqe,"A",{id:!0,class:!0,href:!0});var HQr=s(Ch);Eae=n(HQr,"SPAN",{});var UQr=s(Eae);T(pA.$$.fragment,UQr),UQr.forEach(t),HQr.forEach(t),fdo=i(Uqe),Cae=n(Uqe,"SPAN",{});var JQr=s(Cae);mdo=r(JQr,"AutoProcessor"),JQr.forEach(t),Uqe.forEach(t),HBe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(uA.$$.fragment,js),gdo=i(js),_A=n(js,"P",{});var Jqe=s(_A);hdo=r(Jqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),TB=n(Jqe,"A",{href:!0});var YQr=s(TB);pdo=r(YQr,"AutoProcessor.from_pretrained()"),YQr.forEach(t),udo=r(Jqe," class method."),Jqe.forEach(t),_do=i(js),bA=n(js,"P",{});var Yqe=s(bA);bdo=r(Yqe,"This class cannot be instantiated directly using "),wae=n(Yqe,"CODE",{});var KQr=s(wae);vdo=r(KQr,"__init__()"),KQr.forEach(t),Fdo=r(Yqe," (throws an error)."),Yqe.forEach(t),Tdo=i(js),We=n(js,"DIV",{class:!0});var Kt=s(We);T(vA.$$.fragment,Kt),Mdo=i(Kt),Aae=n(Kt,"P",{});var ZQr=s(Aae);Edo=r(ZQr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ZQr.forEach(t),Cdo=i(Kt),Ti=n(Kt,"P",{});var sK=s(Ti);wdo=r(sK,"The processor class to instantiate is selected based on the "),yae=n(sK,"CODE",{});var eWr=s(yae);Ado=r(eWr,"model_type"),eWr.forEach(t),ydo=r(sK,` property of the config object (either
passed as an argument or loaded from `),Lae=n(sK,"CODE",{});var oWr=s(Lae);Ldo=r(oWr,"pretrained_model_name_or_path"),oWr.forEach(t),xdo=r(sK," if possible):"),sK.forEach(t),$do=i(Kt),be=n(Kt,"UL",{});var Fe=s(be);wh=n(Fe,"LI",{});var MCe=s(wh);xae=n(MCe,"STRONG",{});var rWr=s(xae);kdo=r(rWr,"clip"),rWr.forEach(t),Sdo=r(MCe," \u2014 "),MB=n(MCe,"A",{href:!0});var tWr=s(MB);Rdo=r(tWr,"CLIPProcessor"),tWr.forEach(t),Pdo=r(MCe," (CLIP model)"),MCe.forEach(t),Bdo=i(Fe),Ah=n(Fe,"LI",{});var ECe=s(Ah);$ae=n(ECe,"STRONG",{});var aWr=s($ae);Ido=r(aWr,"layoutlmv2"),aWr.forEach(t),qdo=r(ECe," \u2014 "),EB=n(ECe,"A",{href:!0});var nWr=s(EB);Ndo=r(nWr,"LayoutLMv2Processor"),nWr.forEach(t),jdo=r(ECe," (LayoutLMv2 model)"),ECe.forEach(t),Ddo=i(Fe),yh=n(Fe,"LI",{});var CCe=s(yh);kae=n(CCe,"STRONG",{});var sWr=s(kae);Gdo=r(sWr,"layoutxlm"),sWr.forEach(t),Odo=r(CCe," \u2014 "),CB=n(CCe,"A",{href:!0});var lWr=s(CB);Vdo=r(lWr,"LayoutXLMProcessor"),lWr.forEach(t),Xdo=r(CCe," (LayoutXLM model)"),CCe.forEach(t),zdo=i(Fe),Lh=n(Fe,"LI",{});var wCe=s(Lh);Sae=n(wCe,"STRONG",{});var iWr=s(Sae);Qdo=r(iWr,"sew"),iWr.forEach(t),Wdo=r(wCe," \u2014 "),wB=n(wCe,"A",{href:!0});var dWr=s(wB);Hdo=r(dWr,"Wav2Vec2Processor"),dWr.forEach(t),Udo=r(wCe," (SEW model)"),wCe.forEach(t),Jdo=i(Fe),xh=n(Fe,"LI",{});var ACe=s(xh);Rae=n(ACe,"STRONG",{});var cWr=s(Rae);Ydo=r(cWr,"sew-d"),cWr.forEach(t),Kdo=r(ACe," \u2014 "),AB=n(ACe,"A",{href:!0});var fWr=s(AB);Zdo=r(fWr,"Wav2Vec2Processor"),fWr.forEach(t),eco=r(ACe," (SEW-D model)"),ACe.forEach(t),oco=i(Fe),$h=n(Fe,"LI",{});var yCe=s($h);Pae=n(yCe,"STRONG",{});var mWr=s(Pae);rco=r(mWr,"speech_to_text"),mWr.forEach(t),tco=r(yCe," \u2014 "),yB=n(yCe,"A",{href:!0});var gWr=s(yB);aco=r(gWr,"Speech2TextProcessor"),gWr.forEach(t),nco=r(yCe," (Speech2Text model)"),yCe.forEach(t),sco=i(Fe),kh=n(Fe,"LI",{});var LCe=s(kh);Bae=n(LCe,"STRONG",{});var hWr=s(Bae);lco=r(hWr,"speech_to_text_2"),hWr.forEach(t),ico=r(LCe," \u2014 "),LB=n(LCe,"A",{href:!0});var pWr=s(LB);dco=r(pWr,"Speech2Text2Processor"),pWr.forEach(t),cco=r(LCe," (Speech2Text2 model)"),LCe.forEach(t),fco=i(Fe),Sh=n(Fe,"LI",{});var xCe=s(Sh);Iae=n(xCe,"STRONG",{});var uWr=s(Iae);mco=r(uWr,"trocr"),uWr.forEach(t),gco=r(xCe," \u2014 "),xB=n(xCe,"A",{href:!0});var _Wr=s(xB);hco=r(_Wr,"TrOCRProcessor"),_Wr.forEach(t),pco=r(xCe," (TrOCR model)"),xCe.forEach(t),uco=i(Fe),Rh=n(Fe,"LI",{});var $Ce=s(Rh);qae=n($Ce,"STRONG",{});var bWr=s(qae);_co=r(bWr,"unispeech"),bWr.forEach(t),bco=r($Ce," \u2014 "),$B=n($Ce,"A",{href:!0});var vWr=s($B);vco=r(vWr,"Wav2Vec2Processor"),vWr.forEach(t),Fco=r($Ce," (UniSpeech model)"),$Ce.forEach(t),Tco=i(Fe),Ph=n(Fe,"LI",{});var kCe=s(Ph);Nae=n(kCe,"STRONG",{});var FWr=s(Nae);Mco=r(FWr,"unispeech-sat"),FWr.forEach(t),Eco=r(kCe," \u2014 "),kB=n(kCe,"A",{href:!0});var TWr=s(kB);Cco=r(TWr,"Wav2Vec2Processor"),TWr.forEach(t),wco=r(kCe," (UniSpeechSat model)"),kCe.forEach(t),Aco=i(Fe),Bh=n(Fe,"LI",{});var SCe=s(Bh);jae=n(SCe,"STRONG",{});var MWr=s(jae);yco=r(MWr,"vilt"),MWr.forEach(t),Lco=r(SCe," \u2014 "),SB=n(SCe,"A",{href:!0});var EWr=s(SB);xco=r(EWr,"ViltProcessor"),EWr.forEach(t),$co=r(SCe," (ViLT model)"),SCe.forEach(t),kco=i(Fe),Ih=n(Fe,"LI",{});var RCe=s(Ih);Dae=n(RCe,"STRONG",{});var CWr=s(Dae);Sco=r(CWr,"vision-text-dual-encoder"),CWr.forEach(t),Rco=r(RCe," \u2014 "),RB=n(RCe,"A",{href:!0});var wWr=s(RB);Pco=r(wWr,"VisionTextDualEncoderProcessor"),wWr.forEach(t),Bco=r(RCe," (VisionTextDualEncoder model)"),RCe.forEach(t),Ico=i(Fe),qh=n(Fe,"LI",{});var PCe=s(qh);Gae=n(PCe,"STRONG",{});var AWr=s(Gae);qco=r(AWr,"wav2vec2"),AWr.forEach(t),Nco=r(PCe," \u2014 "),PB=n(PCe,"A",{href:!0});var yWr=s(PB);jco=r(yWr,"Wav2Vec2Processor"),yWr.forEach(t),Dco=r(PCe," (Wav2Vec2 model)"),PCe.forEach(t),Gco=i(Fe),Nh=n(Fe,"LI",{});var BCe=s(Nh);Oae=n(BCe,"STRONG",{});var LWr=s(Oae);Oco=r(LWr,"wavlm"),LWr.forEach(t),Vco=r(BCe," \u2014 "),BB=n(BCe,"A",{href:!0});var xWr=s(BB);Xco=r(xWr,"Wav2Vec2Processor"),xWr.forEach(t),zco=r(BCe," (WavLM model)"),BCe.forEach(t),Fe.forEach(t),Qco=i(Kt),T(jh.$$.fragment,Kt),Wco=i(Kt),T(Dh.$$.fragment,Kt),Kt.forEach(t),Hco=i(js),Gh=n(js,"DIV",{class:!0});var Kqe=s(Gh);T(FA.$$.fragment,Kqe),Uco=i(Kqe),Vae=n(Kqe,"P",{});var $Wr=s(Vae);Jco=r($Wr,"Register a new processor for this class."),$Wr.forEach(t),Kqe.forEach(t),js.forEach(t),UBe=i(f),Mi=n(f,"H2",{class:!0});var Zqe=s(Mi);Oh=n(Zqe,"A",{id:!0,class:!0,href:!0});var kWr=s(Oh);Xae=n(kWr,"SPAN",{});var SWr=s(Xae);T(TA.$$.fragment,SWr),SWr.forEach(t),kWr.forEach(t),Yco=i(Zqe),zae=n(Zqe,"SPAN",{});var RWr=s(zae);Kco=r(RWr,"AutoModel"),RWr.forEach(t),Zqe.forEach(t),JBe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(MA.$$.fragment,Ds),Zco=i(Ds),Ei=n(Ds,"P",{});var lK=s(Ei);efo=r(lK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IB=n(lK,"A",{href:!0});var PWr=s(IB);ofo=r(PWr,"from_pretrained()"),PWr.forEach(t),rfo=r(lK," class method or the "),qB=n(lK,"A",{href:!0});var BWr=s(qB);tfo=r(BWr,"from_config()"),BWr.forEach(t),afo=r(lK,` class
method.`),lK.forEach(t),nfo=i(Ds),EA=n(Ds,"P",{});var eNe=s(EA);sfo=r(eNe,"This class cannot be instantiated directly using "),Qae=n(eNe,"CODE",{});var IWr=s(Qae);lfo=r(IWr,"__init__()"),IWr.forEach(t),ifo=r(eNe," (throws an error)."),eNe.forEach(t),dfo=i(Ds),ot=n(Ds,"DIV",{class:!0});var KC=s(ot);T(CA.$$.fragment,KC),cfo=i(KC),Wae=n(KC,"P",{});var qWr=s(Wae);ffo=r(qWr,"Instantiates one of the base model classes of the library from a configuration."),qWr.forEach(t),mfo=i(KC),Ci=n(KC,"P",{});var iK=s(Ci);gfo=r(iK,`Note:
Loading a model from its configuration file does `),Hae=n(iK,"STRONG",{});var NWr=s(Hae);hfo=r(NWr,"not"),NWr.forEach(t),pfo=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NB=n(iK,"A",{href:!0});var jWr=s(NB);ufo=r(jWr,"from_pretrained()"),jWr.forEach(t),_fo=r(iK," to load the model weights."),iK.forEach(t),bfo=i(KC),T(Vh.$$.fragment,KC),KC.forEach(t),vfo=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(wA.$$.fragment,Zt),Ffo=i(Zt),Uae=n(Zt,"P",{});var DWr=s(Uae);Tfo=r(DWr,"Instantiate one of the base model classes of the library from a pretrained model."),DWr.forEach(t),Mfo=i(Zt),Aa=n(Zt,"P",{});var ZC=s(Aa);Efo=r(ZC,"The model class to instantiate is selected based on the "),Jae=n(ZC,"CODE",{});var GWr=s(Jae);Cfo=r(GWr,"model_type"),GWr.forEach(t),wfo=r(ZC,` property of the config object (either
passed as an argument or loaded from `),Yae=n(ZC,"CODE",{});var OWr=s(Yae);Afo=r(OWr,"pretrained_model_name_or_path"),OWr.forEach(t),yfo=r(ZC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kae=n(ZC,"CODE",{});var VWr=s(Kae);Lfo=r(VWr,"pretrained_model_name_or_path"),VWr.forEach(t),xfo=r(ZC,":"),ZC.forEach(t),$fo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Xh=n($,"LI",{});var ICe=s(Xh);Zae=n(ICe,"STRONG",{});var XWr=s(Zae);kfo=r(XWr,"albert"),XWr.forEach(t),Sfo=r(ICe," \u2014 "),jB=n(ICe,"A",{href:!0});var zWr=s(jB);Rfo=r(zWr,"AlbertModel"),zWr.forEach(t),Pfo=r(ICe," (ALBERT model)"),ICe.forEach(t),Bfo=i($),zh=n($,"LI",{});var qCe=s(zh);ene=n(qCe,"STRONG",{});var QWr=s(ene);Ifo=r(QWr,"bart"),QWr.forEach(t),qfo=r(qCe," \u2014 "),DB=n(qCe,"A",{href:!0});var WWr=s(DB);Nfo=r(WWr,"BartModel"),WWr.forEach(t),jfo=r(qCe," (BART model)"),qCe.forEach(t),Dfo=i($),Qh=n($,"LI",{});var NCe=s(Qh);one=n(NCe,"STRONG",{});var HWr=s(one);Gfo=r(HWr,"beit"),HWr.forEach(t),Ofo=r(NCe," \u2014 "),GB=n(NCe,"A",{href:!0});var UWr=s(GB);Vfo=r(UWr,"BeitModel"),UWr.forEach(t),Xfo=r(NCe," (BEiT model)"),NCe.forEach(t),zfo=i($),Wh=n($,"LI",{});var jCe=s(Wh);rne=n(jCe,"STRONG",{});var JWr=s(rne);Qfo=r(JWr,"bert"),JWr.forEach(t),Wfo=r(jCe," \u2014 "),OB=n(jCe,"A",{href:!0});var YWr=s(OB);Hfo=r(YWr,"BertModel"),YWr.forEach(t),Ufo=r(jCe," (BERT model)"),jCe.forEach(t),Jfo=i($),Hh=n($,"LI",{});var DCe=s(Hh);tne=n(DCe,"STRONG",{});var KWr=s(tne);Yfo=r(KWr,"bert-generation"),KWr.forEach(t),Kfo=r(DCe," \u2014 "),VB=n(DCe,"A",{href:!0});var ZWr=s(VB);Zfo=r(ZWr,"BertGenerationEncoder"),ZWr.forEach(t),emo=r(DCe," (Bert Generation model)"),DCe.forEach(t),omo=i($),Uh=n($,"LI",{});var GCe=s(Uh);ane=n(GCe,"STRONG",{});var eHr=s(ane);rmo=r(eHr,"big_bird"),eHr.forEach(t),tmo=r(GCe," \u2014 "),XB=n(GCe,"A",{href:!0});var oHr=s(XB);amo=r(oHr,"BigBirdModel"),oHr.forEach(t),nmo=r(GCe," (BigBird model)"),GCe.forEach(t),smo=i($),Jh=n($,"LI",{});var OCe=s(Jh);nne=n(OCe,"STRONG",{});var rHr=s(nne);lmo=r(rHr,"bigbird_pegasus"),rHr.forEach(t),imo=r(OCe," \u2014 "),zB=n(OCe,"A",{href:!0});var tHr=s(zB);dmo=r(tHr,"BigBirdPegasusModel"),tHr.forEach(t),cmo=r(OCe," (BigBirdPegasus model)"),OCe.forEach(t),fmo=i($),Yh=n($,"LI",{});var VCe=s(Yh);sne=n(VCe,"STRONG",{});var aHr=s(sne);mmo=r(aHr,"blenderbot"),aHr.forEach(t),gmo=r(VCe," \u2014 "),QB=n(VCe,"A",{href:!0});var nHr=s(QB);hmo=r(nHr,"BlenderbotModel"),nHr.forEach(t),pmo=r(VCe," (Blenderbot model)"),VCe.forEach(t),umo=i($),Kh=n($,"LI",{});var XCe=s(Kh);lne=n(XCe,"STRONG",{});var sHr=s(lne);_mo=r(sHr,"blenderbot-small"),sHr.forEach(t),bmo=r(XCe," \u2014 "),WB=n(XCe,"A",{href:!0});var lHr=s(WB);vmo=r(lHr,"BlenderbotSmallModel"),lHr.forEach(t),Fmo=r(XCe," (BlenderbotSmall model)"),XCe.forEach(t),Tmo=i($),Zh=n($,"LI",{});var zCe=s(Zh);ine=n(zCe,"STRONG",{});var iHr=s(ine);Mmo=r(iHr,"camembert"),iHr.forEach(t),Emo=r(zCe," \u2014 "),HB=n(zCe,"A",{href:!0});var dHr=s(HB);Cmo=r(dHr,"CamembertModel"),dHr.forEach(t),wmo=r(zCe," (CamemBERT model)"),zCe.forEach(t),Amo=i($),ep=n($,"LI",{});var QCe=s(ep);dne=n(QCe,"STRONG",{});var cHr=s(dne);ymo=r(cHr,"canine"),cHr.forEach(t),Lmo=r(QCe," \u2014 "),UB=n(QCe,"A",{href:!0});var fHr=s(UB);xmo=r(fHr,"CanineModel"),fHr.forEach(t),$mo=r(QCe," (Canine model)"),QCe.forEach(t),kmo=i($),op=n($,"LI",{});var WCe=s(op);cne=n(WCe,"STRONG",{});var mHr=s(cne);Smo=r(mHr,"clip"),mHr.forEach(t),Rmo=r(WCe," \u2014 "),JB=n(WCe,"A",{href:!0});var gHr=s(JB);Pmo=r(gHr,"CLIPModel"),gHr.forEach(t),Bmo=r(WCe," (CLIP model)"),WCe.forEach(t),Imo=i($),rp=n($,"LI",{});var HCe=s(rp);fne=n(HCe,"STRONG",{});var hHr=s(fne);qmo=r(hHr,"convbert"),hHr.forEach(t),Nmo=r(HCe," \u2014 "),YB=n(HCe,"A",{href:!0});var pHr=s(YB);jmo=r(pHr,"ConvBertModel"),pHr.forEach(t),Dmo=r(HCe," (ConvBERT model)"),HCe.forEach(t),Gmo=i($),tp=n($,"LI",{});var UCe=s(tp);mne=n(UCe,"STRONG",{});var uHr=s(mne);Omo=r(uHr,"convnext"),uHr.forEach(t),Vmo=r(UCe," \u2014 "),KB=n(UCe,"A",{href:!0});var _Hr=s(KB);Xmo=r(_Hr,"ConvNextModel"),_Hr.forEach(t),zmo=r(UCe," (ConvNext model)"),UCe.forEach(t),Qmo=i($),ap=n($,"LI",{});var JCe=s(ap);gne=n(JCe,"STRONG",{});var bHr=s(gne);Wmo=r(bHr,"ctrl"),bHr.forEach(t),Hmo=r(JCe," \u2014 "),ZB=n(JCe,"A",{href:!0});var vHr=s(ZB);Umo=r(vHr,"CTRLModel"),vHr.forEach(t),Jmo=r(JCe," (CTRL model)"),JCe.forEach(t),Ymo=i($),np=n($,"LI",{});var YCe=s(np);hne=n(YCe,"STRONG",{});var FHr=s(hne);Kmo=r(FHr,"data2vec-audio"),FHr.forEach(t),Zmo=r(YCe," \u2014 "),eI=n(YCe,"A",{href:!0});var THr=s(eI);ego=r(THr,"Data2VecAudioModel"),THr.forEach(t),ogo=r(YCe," (Data2VecAudio model)"),YCe.forEach(t),rgo=i($),sp=n($,"LI",{});var KCe=s(sp);pne=n(KCe,"STRONG",{});var MHr=s(pne);tgo=r(MHr,"data2vec-text"),MHr.forEach(t),ago=r(KCe," \u2014 "),oI=n(KCe,"A",{href:!0});var EHr=s(oI);ngo=r(EHr,"Data2VecTextModel"),EHr.forEach(t),sgo=r(KCe," (Data2VecText model)"),KCe.forEach(t),lgo=i($),lp=n($,"LI",{});var ZCe=s(lp);une=n(ZCe,"STRONG",{});var CHr=s(une);igo=r(CHr,"data2vec-vision"),CHr.forEach(t),dgo=r(ZCe," \u2014 "),rI=n(ZCe,"A",{href:!0});var wHr=s(rI);cgo=r(wHr,"Data2VecVisionModel"),wHr.forEach(t),fgo=r(ZCe," (Data2VecVision model)"),ZCe.forEach(t),mgo=i($),ip=n($,"LI",{});var e3e=s(ip);_ne=n(e3e,"STRONG",{});var AHr=s(_ne);ggo=r(AHr,"deberta"),AHr.forEach(t),hgo=r(e3e," \u2014 "),tI=n(e3e,"A",{href:!0});var yHr=s(tI);pgo=r(yHr,"DebertaModel"),yHr.forEach(t),ugo=r(e3e," (DeBERTa model)"),e3e.forEach(t),_go=i($),dp=n($,"LI",{});var o3e=s(dp);bne=n(o3e,"STRONG",{});var LHr=s(bne);bgo=r(LHr,"deberta-v2"),LHr.forEach(t),vgo=r(o3e," \u2014 "),aI=n(o3e,"A",{href:!0});var xHr=s(aI);Fgo=r(xHr,"DebertaV2Model"),xHr.forEach(t),Tgo=r(o3e," (DeBERTa-v2 model)"),o3e.forEach(t),Mgo=i($),cp=n($,"LI",{});var r3e=s(cp);vne=n(r3e,"STRONG",{});var $Hr=s(vne);Ego=r($Hr,"decision_transformer"),$Hr.forEach(t),Cgo=r(r3e," \u2014 "),nI=n(r3e,"A",{href:!0});var kHr=s(nI);wgo=r(kHr,"DecisionTransformerModel"),kHr.forEach(t),Ago=r(r3e," (Decision Transformer model)"),r3e.forEach(t),ygo=i($),fp=n($,"LI",{});var t3e=s(fp);Fne=n(t3e,"STRONG",{});var SHr=s(Fne);Lgo=r(SHr,"deit"),SHr.forEach(t),xgo=r(t3e," \u2014 "),sI=n(t3e,"A",{href:!0});var RHr=s(sI);$go=r(RHr,"DeiTModel"),RHr.forEach(t),kgo=r(t3e," (DeiT model)"),t3e.forEach(t),Sgo=i($),mp=n($,"LI",{});var a3e=s(mp);Tne=n(a3e,"STRONG",{});var PHr=s(Tne);Rgo=r(PHr,"detr"),PHr.forEach(t),Pgo=r(a3e," \u2014 "),lI=n(a3e,"A",{href:!0});var BHr=s(lI);Bgo=r(BHr,"DetrModel"),BHr.forEach(t),Igo=r(a3e," (DETR model)"),a3e.forEach(t),qgo=i($),gp=n($,"LI",{});var n3e=s(gp);Mne=n(n3e,"STRONG",{});var IHr=s(Mne);Ngo=r(IHr,"distilbert"),IHr.forEach(t),jgo=r(n3e," \u2014 "),iI=n(n3e,"A",{href:!0});var qHr=s(iI);Dgo=r(qHr,"DistilBertModel"),qHr.forEach(t),Ggo=r(n3e," (DistilBERT model)"),n3e.forEach(t),Ogo=i($),hp=n($,"LI",{});var s3e=s(hp);Ene=n(s3e,"STRONG",{});var NHr=s(Ene);Vgo=r(NHr,"dpr"),NHr.forEach(t),Xgo=r(s3e," \u2014 "),dI=n(s3e,"A",{href:!0});var jHr=s(dI);zgo=r(jHr,"DPRQuestionEncoder"),jHr.forEach(t),Qgo=r(s3e," (DPR model)"),s3e.forEach(t),Wgo=i($),pp=n($,"LI",{});var l3e=s(pp);Cne=n(l3e,"STRONG",{});var DHr=s(Cne);Hgo=r(DHr,"dpt"),DHr.forEach(t),Ugo=r(l3e," \u2014 "),cI=n(l3e,"A",{href:!0});var GHr=s(cI);Jgo=r(GHr,"DPTModel"),GHr.forEach(t),Ygo=r(l3e," (DPT model)"),l3e.forEach(t),Kgo=i($),up=n($,"LI",{});var i3e=s(up);wne=n(i3e,"STRONG",{});var OHr=s(wne);Zgo=r(OHr,"electra"),OHr.forEach(t),eho=r(i3e," \u2014 "),fI=n(i3e,"A",{href:!0});var VHr=s(fI);oho=r(VHr,"ElectraModel"),VHr.forEach(t),rho=r(i3e," (ELECTRA model)"),i3e.forEach(t),tho=i($),_p=n($,"LI",{});var d3e=s(_p);Ane=n(d3e,"STRONG",{});var XHr=s(Ane);aho=r(XHr,"flaubert"),XHr.forEach(t),nho=r(d3e," \u2014 "),mI=n(d3e,"A",{href:!0});var zHr=s(mI);sho=r(zHr,"FlaubertModel"),zHr.forEach(t),lho=r(d3e," (FlauBERT model)"),d3e.forEach(t),iho=i($),bp=n($,"LI",{});var c3e=s(bp);yne=n(c3e,"STRONG",{});var QHr=s(yne);dho=r(QHr,"fnet"),QHr.forEach(t),cho=r(c3e," \u2014 "),gI=n(c3e,"A",{href:!0});var WHr=s(gI);fho=r(WHr,"FNetModel"),WHr.forEach(t),mho=r(c3e," (FNet model)"),c3e.forEach(t),gho=i($),vp=n($,"LI",{});var f3e=s(vp);Lne=n(f3e,"STRONG",{});var HHr=s(Lne);hho=r(HHr,"fsmt"),HHr.forEach(t),pho=r(f3e," \u2014 "),hI=n(f3e,"A",{href:!0});var UHr=s(hI);uho=r(UHr,"FSMTModel"),UHr.forEach(t),_ho=r(f3e," (FairSeq Machine-Translation model)"),f3e.forEach(t),bho=i($),Rs=n($,"LI",{});var c$=s(Rs);xne=n(c$,"STRONG",{});var JHr=s(xne);vho=r(JHr,"funnel"),JHr.forEach(t),Fho=r(c$," \u2014 "),pI=n(c$,"A",{href:!0});var YHr=s(pI);Tho=r(YHr,"FunnelModel"),YHr.forEach(t),Mho=r(c$," or "),uI=n(c$,"A",{href:!0});var KHr=s(uI);Eho=r(KHr,"FunnelBaseModel"),KHr.forEach(t),Cho=r(c$," (Funnel Transformer model)"),c$.forEach(t),who=i($),Fp=n($,"LI",{});var m3e=s(Fp);$ne=n(m3e,"STRONG",{});var ZHr=s($ne);Aho=r(ZHr,"glpn"),ZHr.forEach(t),yho=r(m3e," \u2014 "),_I=n(m3e,"A",{href:!0});var eUr=s(_I);Lho=r(eUr,"GLPNModel"),eUr.forEach(t),xho=r(m3e," (GLPN model)"),m3e.forEach(t),$ho=i($),Tp=n($,"LI",{});var g3e=s(Tp);kne=n(g3e,"STRONG",{});var oUr=s(kne);kho=r(oUr,"gpt2"),oUr.forEach(t),Sho=r(g3e," \u2014 "),bI=n(g3e,"A",{href:!0});var rUr=s(bI);Rho=r(rUr,"GPT2Model"),rUr.forEach(t),Pho=r(g3e," (OpenAI GPT-2 model)"),g3e.forEach(t),Bho=i($),Mp=n($,"LI",{});var h3e=s(Mp);Sne=n(h3e,"STRONG",{});var tUr=s(Sne);Iho=r(tUr,"gpt_neo"),tUr.forEach(t),qho=r(h3e," \u2014 "),vI=n(h3e,"A",{href:!0});var aUr=s(vI);Nho=r(aUr,"GPTNeoModel"),aUr.forEach(t),jho=r(h3e," (GPT Neo model)"),h3e.forEach(t),Dho=i($),Ep=n($,"LI",{});var p3e=s(Ep);Rne=n(p3e,"STRONG",{});var nUr=s(Rne);Gho=r(nUr,"gptj"),nUr.forEach(t),Oho=r(p3e," \u2014 "),FI=n(p3e,"A",{href:!0});var sUr=s(FI);Vho=r(sUr,"GPTJModel"),sUr.forEach(t),Xho=r(p3e," (GPT-J model)"),p3e.forEach(t),zho=i($),Cp=n($,"LI",{});var u3e=s(Cp);Pne=n(u3e,"STRONG",{});var lUr=s(Pne);Qho=r(lUr,"hubert"),lUr.forEach(t),Who=r(u3e," \u2014 "),TI=n(u3e,"A",{href:!0});var iUr=s(TI);Hho=r(iUr,"HubertModel"),iUr.forEach(t),Uho=r(u3e," (Hubert model)"),u3e.forEach(t),Jho=i($),wp=n($,"LI",{});var _3e=s(wp);Bne=n(_3e,"STRONG",{});var dUr=s(Bne);Yho=r(dUr,"ibert"),dUr.forEach(t),Kho=r(_3e," \u2014 "),MI=n(_3e,"A",{href:!0});var cUr=s(MI);Zho=r(cUr,"IBertModel"),cUr.forEach(t),epo=r(_3e," (I-BERT model)"),_3e.forEach(t),opo=i($),Ap=n($,"LI",{});var b3e=s(Ap);Ine=n(b3e,"STRONG",{});var fUr=s(Ine);rpo=r(fUr,"imagegpt"),fUr.forEach(t),tpo=r(b3e," \u2014 "),EI=n(b3e,"A",{href:!0});var mUr=s(EI);apo=r(mUr,"ImageGPTModel"),mUr.forEach(t),npo=r(b3e," (ImageGPT model)"),b3e.forEach(t),spo=i($),yp=n($,"LI",{});var v3e=s(yp);qne=n(v3e,"STRONG",{});var gUr=s(qne);lpo=r(gUr,"layoutlm"),gUr.forEach(t),ipo=r(v3e," \u2014 "),CI=n(v3e,"A",{href:!0});var hUr=s(CI);dpo=r(hUr,"LayoutLMModel"),hUr.forEach(t),cpo=r(v3e," (LayoutLM model)"),v3e.forEach(t),fpo=i($),Lp=n($,"LI",{});var F3e=s(Lp);Nne=n(F3e,"STRONG",{});var pUr=s(Nne);mpo=r(pUr,"layoutlmv2"),pUr.forEach(t),gpo=r(F3e," \u2014 "),wI=n(F3e,"A",{href:!0});var uUr=s(wI);hpo=r(uUr,"LayoutLMv2Model"),uUr.forEach(t),ppo=r(F3e," (LayoutLMv2 model)"),F3e.forEach(t),upo=i($),xp=n($,"LI",{});var T3e=s(xp);jne=n(T3e,"STRONG",{});var _Ur=s(jne);_po=r(_Ur,"led"),_Ur.forEach(t),bpo=r(T3e," \u2014 "),AI=n(T3e,"A",{href:!0});var bUr=s(AI);vpo=r(bUr,"LEDModel"),bUr.forEach(t),Fpo=r(T3e," (LED model)"),T3e.forEach(t),Tpo=i($),$p=n($,"LI",{});var M3e=s($p);Dne=n(M3e,"STRONG",{});var vUr=s(Dne);Mpo=r(vUr,"longformer"),vUr.forEach(t),Epo=r(M3e," \u2014 "),yI=n(M3e,"A",{href:!0});var FUr=s(yI);Cpo=r(FUr,"LongformerModel"),FUr.forEach(t),wpo=r(M3e," (Longformer model)"),M3e.forEach(t),Apo=i($),kp=n($,"LI",{});var E3e=s(kp);Gne=n(E3e,"STRONG",{});var TUr=s(Gne);ypo=r(TUr,"luke"),TUr.forEach(t),Lpo=r(E3e," \u2014 "),LI=n(E3e,"A",{href:!0});var MUr=s(LI);xpo=r(MUr,"LukeModel"),MUr.forEach(t),$po=r(E3e," (LUKE model)"),E3e.forEach(t),kpo=i($),Sp=n($,"LI",{});var C3e=s(Sp);One=n(C3e,"STRONG",{});var EUr=s(One);Spo=r(EUr,"lxmert"),EUr.forEach(t),Rpo=r(C3e," \u2014 "),xI=n(C3e,"A",{href:!0});var CUr=s(xI);Ppo=r(CUr,"LxmertModel"),CUr.forEach(t),Bpo=r(C3e," (LXMERT model)"),C3e.forEach(t),Ipo=i($),Rp=n($,"LI",{});var w3e=s(Rp);Vne=n(w3e,"STRONG",{});var wUr=s(Vne);qpo=r(wUr,"m2m_100"),wUr.forEach(t),Npo=r(w3e," \u2014 "),$I=n(w3e,"A",{href:!0});var AUr=s($I);jpo=r(AUr,"M2M100Model"),AUr.forEach(t),Dpo=r(w3e," (M2M100 model)"),w3e.forEach(t),Gpo=i($),Pp=n($,"LI",{});var A3e=s(Pp);Xne=n(A3e,"STRONG",{});var yUr=s(Xne);Opo=r(yUr,"marian"),yUr.forEach(t),Vpo=r(A3e," \u2014 "),kI=n(A3e,"A",{href:!0});var LUr=s(kI);Xpo=r(LUr,"MarianModel"),LUr.forEach(t),zpo=r(A3e," (Marian model)"),A3e.forEach(t),Qpo=i($),Bp=n($,"LI",{});var y3e=s(Bp);zne=n(y3e,"STRONG",{});var xUr=s(zne);Wpo=r(xUr,"maskformer"),xUr.forEach(t),Hpo=r(y3e," \u2014 "),SI=n(y3e,"A",{href:!0});var $Ur=s(SI);Upo=r($Ur,"MaskFormerModel"),$Ur.forEach(t),Jpo=r(y3e," (MaskFormer model)"),y3e.forEach(t),Ypo=i($),Ip=n($,"LI",{});var L3e=s(Ip);Qne=n(L3e,"STRONG",{});var kUr=s(Qne);Kpo=r(kUr,"mbart"),kUr.forEach(t),Zpo=r(L3e," \u2014 "),RI=n(L3e,"A",{href:!0});var SUr=s(RI);euo=r(SUr,"MBartModel"),SUr.forEach(t),ouo=r(L3e," (mBART model)"),L3e.forEach(t),ruo=i($),qp=n($,"LI",{});var x3e=s(qp);Wne=n(x3e,"STRONG",{});var RUr=s(Wne);tuo=r(RUr,"megatron-bert"),RUr.forEach(t),auo=r(x3e," \u2014 "),PI=n(x3e,"A",{href:!0});var PUr=s(PI);nuo=r(PUr,"MegatronBertModel"),PUr.forEach(t),suo=r(x3e," (MegatronBert model)"),x3e.forEach(t),luo=i($),Np=n($,"LI",{});var $3e=s(Np);Hne=n($3e,"STRONG",{});var BUr=s(Hne);iuo=r(BUr,"mobilebert"),BUr.forEach(t),duo=r($3e," \u2014 "),BI=n($3e,"A",{href:!0});var IUr=s(BI);cuo=r(IUr,"MobileBertModel"),IUr.forEach(t),fuo=r($3e," (MobileBERT model)"),$3e.forEach(t),muo=i($),jp=n($,"LI",{});var k3e=s(jp);Une=n(k3e,"STRONG",{});var qUr=s(Une);guo=r(qUr,"mpnet"),qUr.forEach(t),huo=r(k3e," \u2014 "),II=n(k3e,"A",{href:!0});var NUr=s(II);puo=r(NUr,"MPNetModel"),NUr.forEach(t),uuo=r(k3e," (MPNet model)"),k3e.forEach(t),_uo=i($),Dp=n($,"LI",{});var S3e=s(Dp);Jne=n(S3e,"STRONG",{});var jUr=s(Jne);buo=r(jUr,"mt5"),jUr.forEach(t),vuo=r(S3e," \u2014 "),qI=n(S3e,"A",{href:!0});var DUr=s(qI);Fuo=r(DUr,"MT5Model"),DUr.forEach(t),Tuo=r(S3e," (mT5 model)"),S3e.forEach(t),Muo=i($),Gp=n($,"LI",{});var R3e=s(Gp);Yne=n(R3e,"STRONG",{});var GUr=s(Yne);Euo=r(GUr,"nystromformer"),GUr.forEach(t),Cuo=r(R3e," \u2014 "),NI=n(R3e,"A",{href:!0});var OUr=s(NI);wuo=r(OUr,"NystromformerModel"),OUr.forEach(t),Auo=r(R3e," (Nystromformer model)"),R3e.forEach(t),yuo=i($),Op=n($,"LI",{});var P3e=s(Op);Kne=n(P3e,"STRONG",{});var VUr=s(Kne);Luo=r(VUr,"openai-gpt"),VUr.forEach(t),xuo=r(P3e," \u2014 "),jI=n(P3e,"A",{href:!0});var XUr=s(jI);$uo=r(XUr,"OpenAIGPTModel"),XUr.forEach(t),kuo=r(P3e," (OpenAI GPT model)"),P3e.forEach(t),Suo=i($),Vp=n($,"LI",{});var B3e=s(Vp);Zne=n(B3e,"STRONG",{});var zUr=s(Zne);Ruo=r(zUr,"opt"),zUr.forEach(t),Puo=r(B3e," \u2014 "),DI=n(B3e,"A",{href:!0});var QUr=s(DI);Buo=r(QUr,"OPTModel"),QUr.forEach(t),Iuo=r(B3e," (OPT model)"),B3e.forEach(t),quo=i($),Xp=n($,"LI",{});var I3e=s(Xp);ese=n(I3e,"STRONG",{});var WUr=s(ese);Nuo=r(WUr,"pegasus"),WUr.forEach(t),juo=r(I3e," \u2014 "),GI=n(I3e,"A",{href:!0});var HUr=s(GI);Duo=r(HUr,"PegasusModel"),HUr.forEach(t),Guo=r(I3e," (Pegasus model)"),I3e.forEach(t),Ouo=i($),zp=n($,"LI",{});var q3e=s(zp);ose=n(q3e,"STRONG",{});var UUr=s(ose);Vuo=r(UUr,"perceiver"),UUr.forEach(t),Xuo=r(q3e," \u2014 "),OI=n(q3e,"A",{href:!0});var JUr=s(OI);zuo=r(JUr,"PerceiverModel"),JUr.forEach(t),Quo=r(q3e," (Perceiver model)"),q3e.forEach(t),Wuo=i($),Qp=n($,"LI",{});var N3e=s(Qp);rse=n(N3e,"STRONG",{});var YUr=s(rse);Huo=r(YUr,"plbart"),YUr.forEach(t),Uuo=r(N3e," \u2014 "),VI=n(N3e,"A",{href:!0});var KUr=s(VI);Juo=r(KUr,"PLBartModel"),KUr.forEach(t),Yuo=r(N3e," (PLBart model)"),N3e.forEach(t),Kuo=i($),Wp=n($,"LI",{});var j3e=s(Wp);tse=n(j3e,"STRONG",{});var ZUr=s(tse);Zuo=r(ZUr,"poolformer"),ZUr.forEach(t),e_o=r(j3e," \u2014 "),XI=n(j3e,"A",{href:!0});var eJr=s(XI);o_o=r(eJr,"PoolFormerModel"),eJr.forEach(t),r_o=r(j3e," (PoolFormer model)"),j3e.forEach(t),t_o=i($),Hp=n($,"LI",{});var D3e=s(Hp);ase=n(D3e,"STRONG",{});var oJr=s(ase);a_o=r(oJr,"prophetnet"),oJr.forEach(t),n_o=r(D3e," \u2014 "),zI=n(D3e,"A",{href:!0});var rJr=s(zI);s_o=r(rJr,"ProphetNetModel"),rJr.forEach(t),l_o=r(D3e," (ProphetNet model)"),D3e.forEach(t),i_o=i($),Up=n($,"LI",{});var G3e=s(Up);nse=n(G3e,"STRONG",{});var tJr=s(nse);d_o=r(tJr,"qdqbert"),tJr.forEach(t),c_o=r(G3e," \u2014 "),QI=n(G3e,"A",{href:!0});var aJr=s(QI);f_o=r(aJr,"QDQBertModel"),aJr.forEach(t),m_o=r(G3e," (QDQBert model)"),G3e.forEach(t),g_o=i($),Jp=n($,"LI",{});var O3e=s(Jp);sse=n(O3e,"STRONG",{});var nJr=s(sse);h_o=r(nJr,"reformer"),nJr.forEach(t),p_o=r(O3e," \u2014 "),WI=n(O3e,"A",{href:!0});var sJr=s(WI);u_o=r(sJr,"ReformerModel"),sJr.forEach(t),__o=r(O3e," (Reformer model)"),O3e.forEach(t),b_o=i($),Yp=n($,"LI",{});var V3e=s(Yp);lse=n(V3e,"STRONG",{});var lJr=s(lse);v_o=r(lJr,"regnet"),lJr.forEach(t),F_o=r(V3e," \u2014 "),HI=n(V3e,"A",{href:!0});var iJr=s(HI);T_o=r(iJr,"RegNetModel"),iJr.forEach(t),M_o=r(V3e," (RegNet model)"),V3e.forEach(t),E_o=i($),Kp=n($,"LI",{});var X3e=s(Kp);ise=n(X3e,"STRONG",{});var dJr=s(ise);C_o=r(dJr,"rembert"),dJr.forEach(t),w_o=r(X3e," \u2014 "),UI=n(X3e,"A",{href:!0});var cJr=s(UI);A_o=r(cJr,"RemBertModel"),cJr.forEach(t),y_o=r(X3e," (RemBERT model)"),X3e.forEach(t),L_o=i($),Zp=n($,"LI",{});var z3e=s(Zp);dse=n(z3e,"STRONG",{});var fJr=s(dse);x_o=r(fJr,"resnet"),fJr.forEach(t),$_o=r(z3e," \u2014 "),JI=n(z3e,"A",{href:!0});var mJr=s(JI);k_o=r(mJr,"ResNetModel"),mJr.forEach(t),S_o=r(z3e," (ResNet model)"),z3e.forEach(t),R_o=i($),eu=n($,"LI",{});var Q3e=s(eu);cse=n(Q3e,"STRONG",{});var gJr=s(cse);P_o=r(gJr,"retribert"),gJr.forEach(t),B_o=r(Q3e," \u2014 "),YI=n(Q3e,"A",{href:!0});var hJr=s(YI);I_o=r(hJr,"RetriBertModel"),hJr.forEach(t),q_o=r(Q3e," (RetriBERT model)"),Q3e.forEach(t),N_o=i($),ou=n($,"LI",{});var W3e=s(ou);fse=n(W3e,"STRONG",{});var pJr=s(fse);j_o=r(pJr,"roberta"),pJr.forEach(t),D_o=r(W3e," \u2014 "),KI=n(W3e,"A",{href:!0});var uJr=s(KI);G_o=r(uJr,"RobertaModel"),uJr.forEach(t),O_o=r(W3e," (RoBERTa model)"),W3e.forEach(t),V_o=i($),ru=n($,"LI",{});var H3e=s(ru);mse=n(H3e,"STRONG",{});var _Jr=s(mse);X_o=r(_Jr,"roformer"),_Jr.forEach(t),z_o=r(H3e," \u2014 "),ZI=n(H3e,"A",{href:!0});var bJr=s(ZI);Q_o=r(bJr,"RoFormerModel"),bJr.forEach(t),W_o=r(H3e," (RoFormer model)"),H3e.forEach(t),H_o=i($),tu=n($,"LI",{});var U3e=s(tu);gse=n(U3e,"STRONG",{});var vJr=s(gse);U_o=r(vJr,"segformer"),vJr.forEach(t),J_o=r(U3e," \u2014 "),eq=n(U3e,"A",{href:!0});var FJr=s(eq);Y_o=r(FJr,"SegformerModel"),FJr.forEach(t),K_o=r(U3e," (SegFormer model)"),U3e.forEach(t),Z_o=i($),au=n($,"LI",{});var J3e=s(au);hse=n(J3e,"STRONG",{});var TJr=s(hse);e1o=r(TJr,"sew"),TJr.forEach(t),o1o=r(J3e," \u2014 "),oq=n(J3e,"A",{href:!0});var MJr=s(oq);r1o=r(MJr,"SEWModel"),MJr.forEach(t),t1o=r(J3e," (SEW model)"),J3e.forEach(t),a1o=i($),nu=n($,"LI",{});var Y3e=s(nu);pse=n(Y3e,"STRONG",{});var EJr=s(pse);n1o=r(EJr,"sew-d"),EJr.forEach(t),s1o=r(Y3e," \u2014 "),rq=n(Y3e,"A",{href:!0});var CJr=s(rq);l1o=r(CJr,"SEWDModel"),CJr.forEach(t),i1o=r(Y3e," (SEW-D model)"),Y3e.forEach(t),d1o=i($),su=n($,"LI",{});var K3e=s(su);use=n(K3e,"STRONG",{});var wJr=s(use);c1o=r(wJr,"speech_to_text"),wJr.forEach(t),f1o=r(K3e," \u2014 "),tq=n(K3e,"A",{href:!0});var AJr=s(tq);m1o=r(AJr,"Speech2TextModel"),AJr.forEach(t),g1o=r(K3e," (Speech2Text model)"),K3e.forEach(t),h1o=i($),lu=n($,"LI",{});var Z3e=s(lu);_se=n(Z3e,"STRONG",{});var yJr=s(_se);p1o=r(yJr,"splinter"),yJr.forEach(t),u1o=r(Z3e," \u2014 "),aq=n(Z3e,"A",{href:!0});var LJr=s(aq);_1o=r(LJr,"SplinterModel"),LJr.forEach(t),b1o=r(Z3e," (Splinter model)"),Z3e.forEach(t),v1o=i($),iu=n($,"LI",{});var ewe=s(iu);bse=n(ewe,"STRONG",{});var xJr=s(bse);F1o=r(xJr,"squeezebert"),xJr.forEach(t),T1o=r(ewe," \u2014 "),nq=n(ewe,"A",{href:!0});var $Jr=s(nq);M1o=r($Jr,"SqueezeBertModel"),$Jr.forEach(t),E1o=r(ewe," (SqueezeBERT model)"),ewe.forEach(t),C1o=i($),du=n($,"LI",{});var owe=s(du);vse=n(owe,"STRONG",{});var kJr=s(vse);w1o=r(kJr,"swin"),kJr.forEach(t),A1o=r(owe," \u2014 "),sq=n(owe,"A",{href:!0});var SJr=s(sq);y1o=r(SJr,"SwinModel"),SJr.forEach(t),L1o=r(owe," (Swin model)"),owe.forEach(t),x1o=i($),cu=n($,"LI",{});var rwe=s(cu);Fse=n(rwe,"STRONG",{});var RJr=s(Fse);$1o=r(RJr,"t5"),RJr.forEach(t),k1o=r(rwe," \u2014 "),lq=n(rwe,"A",{href:!0});var PJr=s(lq);S1o=r(PJr,"T5Model"),PJr.forEach(t),R1o=r(rwe," (T5 model)"),rwe.forEach(t),P1o=i($),fu=n($,"LI",{});var twe=s(fu);Tse=n(twe,"STRONG",{});var BJr=s(Tse);B1o=r(BJr,"tapas"),BJr.forEach(t),I1o=r(twe," \u2014 "),iq=n(twe,"A",{href:!0});var IJr=s(iq);q1o=r(IJr,"TapasModel"),IJr.forEach(t),N1o=r(twe," (TAPAS model)"),twe.forEach(t),j1o=i($),mu=n($,"LI",{});var awe=s(mu);Mse=n(awe,"STRONG",{});var qJr=s(Mse);D1o=r(qJr,"transfo-xl"),qJr.forEach(t),G1o=r(awe," \u2014 "),dq=n(awe,"A",{href:!0});var NJr=s(dq);O1o=r(NJr,"TransfoXLModel"),NJr.forEach(t),V1o=r(awe," (Transformer-XL model)"),awe.forEach(t),X1o=i($),gu=n($,"LI",{});var nwe=s(gu);Ese=n(nwe,"STRONG",{});var jJr=s(Ese);z1o=r(jJr,"unispeech"),jJr.forEach(t),Q1o=r(nwe," \u2014 "),cq=n(nwe,"A",{href:!0});var DJr=s(cq);W1o=r(DJr,"UniSpeechModel"),DJr.forEach(t),H1o=r(nwe," (UniSpeech model)"),nwe.forEach(t),U1o=i($),hu=n($,"LI",{});var swe=s(hu);Cse=n(swe,"STRONG",{});var GJr=s(Cse);J1o=r(GJr,"unispeech-sat"),GJr.forEach(t),Y1o=r(swe," \u2014 "),fq=n(swe,"A",{href:!0});var OJr=s(fq);K1o=r(OJr,"UniSpeechSatModel"),OJr.forEach(t),Z1o=r(swe," (UniSpeechSat model)"),swe.forEach(t),e8o=i($),pu=n($,"LI",{});var lwe=s(pu);wse=n(lwe,"STRONG",{});var VJr=s(wse);o8o=r(VJr,"van"),VJr.forEach(t),r8o=r(lwe," \u2014 "),mq=n(lwe,"A",{href:!0});var XJr=s(mq);t8o=r(XJr,"VanModel"),XJr.forEach(t),a8o=r(lwe," (VAN model)"),lwe.forEach(t),n8o=i($),uu=n($,"LI",{});var iwe=s(uu);Ase=n(iwe,"STRONG",{});var zJr=s(Ase);s8o=r(zJr,"vilt"),zJr.forEach(t),l8o=r(iwe," \u2014 "),gq=n(iwe,"A",{href:!0});var QJr=s(gq);i8o=r(QJr,"ViltModel"),QJr.forEach(t),d8o=r(iwe," (ViLT model)"),iwe.forEach(t),c8o=i($),_u=n($,"LI",{});var dwe=s(_u);yse=n(dwe,"STRONG",{});var WJr=s(yse);f8o=r(WJr,"vision-text-dual-encoder"),WJr.forEach(t),m8o=r(dwe," \u2014 "),hq=n(dwe,"A",{href:!0});var HJr=s(hq);g8o=r(HJr,"VisionTextDualEncoderModel"),HJr.forEach(t),h8o=r(dwe," (VisionTextDualEncoder model)"),dwe.forEach(t),p8o=i($),bu=n($,"LI",{});var cwe=s(bu);Lse=n(cwe,"STRONG",{});var UJr=s(Lse);u8o=r(UJr,"visual_bert"),UJr.forEach(t),_8o=r(cwe," \u2014 "),pq=n(cwe,"A",{href:!0});var JJr=s(pq);b8o=r(JJr,"VisualBertModel"),JJr.forEach(t),v8o=r(cwe," (VisualBert model)"),cwe.forEach(t),F8o=i($),vu=n($,"LI",{});var fwe=s(vu);xse=n(fwe,"STRONG",{});var YJr=s(xse);T8o=r(YJr,"vit"),YJr.forEach(t),M8o=r(fwe," \u2014 "),uq=n(fwe,"A",{href:!0});var KJr=s(uq);E8o=r(KJr,"ViTModel"),KJr.forEach(t),C8o=r(fwe," (ViT model)"),fwe.forEach(t),w8o=i($),Fu=n($,"LI",{});var mwe=s(Fu);$se=n(mwe,"STRONG",{});var ZJr=s($se);A8o=r(ZJr,"vit_mae"),ZJr.forEach(t),y8o=r(mwe," \u2014 "),_q=n(mwe,"A",{href:!0});var eYr=s(_q);L8o=r(eYr,"ViTMAEModel"),eYr.forEach(t),x8o=r(mwe," (ViTMAE model)"),mwe.forEach(t),$8o=i($),Tu=n($,"LI",{});var gwe=s(Tu);kse=n(gwe,"STRONG",{});var oYr=s(kse);k8o=r(oYr,"wav2vec2"),oYr.forEach(t),S8o=r(gwe," \u2014 "),bq=n(gwe,"A",{href:!0});var rYr=s(bq);R8o=r(rYr,"Wav2Vec2Model"),rYr.forEach(t),P8o=r(gwe," (Wav2Vec2 model)"),gwe.forEach(t),B8o=i($),Mu=n($,"LI",{});var hwe=s(Mu);Sse=n(hwe,"STRONG",{});var tYr=s(Sse);I8o=r(tYr,"wavlm"),tYr.forEach(t),q8o=r(hwe," \u2014 "),vq=n(hwe,"A",{href:!0});var aYr=s(vq);N8o=r(aYr,"WavLMModel"),aYr.forEach(t),j8o=r(hwe," (WavLM model)"),hwe.forEach(t),D8o=i($),Eu=n($,"LI",{});var pwe=s(Eu);Rse=n(pwe,"STRONG",{});var nYr=s(Rse);G8o=r(nYr,"xglm"),nYr.forEach(t),O8o=r(pwe," \u2014 "),Fq=n(pwe,"A",{href:!0});var sYr=s(Fq);V8o=r(sYr,"XGLMModel"),sYr.forEach(t),X8o=r(pwe," (XGLM model)"),pwe.forEach(t),z8o=i($),Cu=n($,"LI",{});var uwe=s(Cu);Pse=n(uwe,"STRONG",{});var lYr=s(Pse);Q8o=r(lYr,"xlm"),lYr.forEach(t),W8o=r(uwe," \u2014 "),Tq=n(uwe,"A",{href:!0});var iYr=s(Tq);H8o=r(iYr,"XLMModel"),iYr.forEach(t),U8o=r(uwe," (XLM model)"),uwe.forEach(t),J8o=i($),wu=n($,"LI",{});var _we=s(wu);Bse=n(_we,"STRONG",{});var dYr=s(Bse);Y8o=r(dYr,"xlm-prophetnet"),dYr.forEach(t),K8o=r(_we," \u2014 "),Mq=n(_we,"A",{href:!0});var cYr=s(Mq);Z8o=r(cYr,"XLMProphetNetModel"),cYr.forEach(t),ebo=r(_we," (XLMProphetNet model)"),_we.forEach(t),obo=i($),Au=n($,"LI",{});var bwe=s(Au);Ise=n(bwe,"STRONG",{});var fYr=s(Ise);rbo=r(fYr,"xlm-roberta"),fYr.forEach(t),tbo=r(bwe," \u2014 "),Eq=n(bwe,"A",{href:!0});var mYr=s(Eq);abo=r(mYr,"XLMRobertaModel"),mYr.forEach(t),nbo=r(bwe," (XLM-RoBERTa model)"),bwe.forEach(t),sbo=i($),yu=n($,"LI",{});var vwe=s(yu);qse=n(vwe,"STRONG",{});var gYr=s(qse);lbo=r(gYr,"xlm-roberta-xl"),gYr.forEach(t),ibo=r(vwe," \u2014 "),Cq=n(vwe,"A",{href:!0});var hYr=s(Cq);dbo=r(hYr,"XLMRobertaXLModel"),hYr.forEach(t),cbo=r(vwe," (XLM-RoBERTa-XL model)"),vwe.forEach(t),fbo=i($),Lu=n($,"LI",{});var Fwe=s(Lu);Nse=n(Fwe,"STRONG",{});var pYr=s(Nse);mbo=r(pYr,"xlnet"),pYr.forEach(t),gbo=r(Fwe," \u2014 "),wq=n(Fwe,"A",{href:!0});var uYr=s(wq);hbo=r(uYr,"XLNetModel"),uYr.forEach(t),pbo=r(Fwe," (XLNet model)"),Fwe.forEach(t),ubo=i($),xu=n($,"LI",{});var Twe=s(xu);jse=n(Twe,"STRONG",{});var _Yr=s(jse);_bo=r(_Yr,"yolos"),_Yr.forEach(t),bbo=r(Twe," \u2014 "),Aq=n(Twe,"A",{href:!0});var bYr=s(Aq);vbo=r(bYr,"YolosModel"),bYr.forEach(t),Fbo=r(Twe," (YOLOS model)"),Twe.forEach(t),Tbo=i($),$u=n($,"LI",{});var Mwe=s($u);Dse=n(Mwe,"STRONG",{});var vYr=s(Dse);Mbo=r(vYr,"yoso"),vYr.forEach(t),Ebo=r(Mwe," \u2014 "),yq=n(Mwe,"A",{href:!0});var FYr=s(yq);Cbo=r(FYr,"YosoModel"),FYr.forEach(t),wbo=r(Mwe," (YOSO model)"),Mwe.forEach(t),$.forEach(t),Abo=i(Zt),ku=n(Zt,"P",{});var Ewe=s(ku);ybo=r(Ewe,"The model is set in evaluation mode by default using "),Gse=n(Ewe,"CODE",{});var TYr=s(Gse);Lbo=r(TYr,"model.eval()"),TYr.forEach(t),xbo=r(Ewe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ose=n(Ewe,"CODE",{});var MYr=s(Ose);$bo=r(MYr,"model.train()"),MYr.forEach(t),Ewe.forEach(t),kbo=i(Zt),T(Su.$$.fragment,Zt),Zt.forEach(t),Ds.forEach(t),YBe=i(f),wi=n(f,"H2",{class:!0});var oNe=s(wi);Ru=n(oNe,"A",{id:!0,class:!0,href:!0});var EYr=s(Ru);Vse=n(EYr,"SPAN",{});var CYr=s(Vse);T(AA.$$.fragment,CYr),CYr.forEach(t),EYr.forEach(t),Sbo=i(oNe),Xse=n(oNe,"SPAN",{});var wYr=s(Xse);Rbo=r(wYr,"AutoModelForPreTraining"),wYr.forEach(t),oNe.forEach(t),KBe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(yA.$$.fragment,Gs),Pbo=i(Gs),Ai=n(Gs,"P",{});var dK=s(Ai);Bbo=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Lq=n(dK,"A",{href:!0});var AYr=s(Lq);Ibo=r(AYr,"from_pretrained()"),AYr.forEach(t),qbo=r(dK," class method or the "),xq=n(dK,"A",{href:!0});var yYr=s(xq);Nbo=r(yYr,"from_config()"),yYr.forEach(t),jbo=r(dK,` class
method.`),dK.forEach(t),Dbo=i(Gs),LA=n(Gs,"P",{});var rNe=s(LA);Gbo=r(rNe,"This class cannot be instantiated directly using "),zse=n(rNe,"CODE",{});var LYr=s(zse);Obo=r(LYr,"__init__()"),LYr.forEach(t),Vbo=r(rNe," (throws an error)."),rNe.forEach(t),Xbo=i(Gs),rt=n(Gs,"DIV",{class:!0});var e3=s(rt);T(xA.$$.fragment,e3),zbo=i(e3),Qse=n(e3,"P",{});var xYr=s(Qse);Qbo=r(xYr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xYr.forEach(t),Wbo=i(e3),yi=n(e3,"P",{});var cK=s(yi);Hbo=r(cK,`Note:
Loading a model from its configuration file does `),Wse=n(cK,"STRONG",{});var $Yr=s(Wse);Ubo=r($Yr,"not"),$Yr.forEach(t),Jbo=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$q=n(cK,"A",{href:!0});var kYr=s($q);Ybo=r(kYr,"from_pretrained()"),kYr.forEach(t),Kbo=r(cK," to load the model weights."),cK.forEach(t),Zbo=i(e3),T(Pu.$$.fragment,e3),e3.forEach(t),e2o=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T($A.$$.fragment,ea),o2o=i(ea),Hse=n(ea,"P",{});var SYr=s(Hse);r2o=r(SYr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),SYr.forEach(t),t2o=i(ea),ya=n(ea,"P",{});var o3=s(ya);a2o=r(o3,"The model class to instantiate is selected based on the "),Use=n(o3,"CODE",{});var RYr=s(Use);n2o=r(RYr,"model_type"),RYr.forEach(t),s2o=r(o3,` property of the config object (either
passed as an argument or loaded from `),Jse=n(o3,"CODE",{});var PYr=s(Jse);l2o=r(PYr,"pretrained_model_name_or_path"),PYr.forEach(t),i2o=r(o3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yse=n(o3,"CODE",{});var BYr=s(Yse);d2o=r(BYr,"pretrained_model_name_or_path"),BYr.forEach(t),c2o=r(o3,":"),o3.forEach(t),f2o=i(ea),G=n(ea,"UL",{});var V=s(G);Bu=n(V,"LI",{});var Cwe=s(Bu);Kse=n(Cwe,"STRONG",{});var IYr=s(Kse);m2o=r(IYr,"albert"),IYr.forEach(t),g2o=r(Cwe," \u2014 "),kq=n(Cwe,"A",{href:!0});var qYr=s(kq);h2o=r(qYr,"AlbertForPreTraining"),qYr.forEach(t),p2o=r(Cwe," (ALBERT model)"),Cwe.forEach(t),u2o=i(V),Iu=n(V,"LI",{});var wwe=s(Iu);Zse=n(wwe,"STRONG",{});var NYr=s(Zse);_2o=r(NYr,"bart"),NYr.forEach(t),b2o=r(wwe," \u2014 "),Sq=n(wwe,"A",{href:!0});var jYr=s(Sq);v2o=r(jYr,"BartForConditionalGeneration"),jYr.forEach(t),F2o=r(wwe," (BART model)"),wwe.forEach(t),T2o=i(V),qu=n(V,"LI",{});var Awe=s(qu);ele=n(Awe,"STRONG",{});var DYr=s(ele);M2o=r(DYr,"bert"),DYr.forEach(t),E2o=r(Awe," \u2014 "),Rq=n(Awe,"A",{href:!0});var GYr=s(Rq);C2o=r(GYr,"BertForPreTraining"),GYr.forEach(t),w2o=r(Awe," (BERT model)"),Awe.forEach(t),A2o=i(V),Nu=n(V,"LI",{});var ywe=s(Nu);ole=n(ywe,"STRONG",{});var OYr=s(ole);y2o=r(OYr,"big_bird"),OYr.forEach(t),L2o=r(ywe," \u2014 "),Pq=n(ywe,"A",{href:!0});var VYr=s(Pq);x2o=r(VYr,"BigBirdForPreTraining"),VYr.forEach(t),$2o=r(ywe," (BigBird model)"),ywe.forEach(t),k2o=i(V),ju=n(V,"LI",{});var Lwe=s(ju);rle=n(Lwe,"STRONG",{});var XYr=s(rle);S2o=r(XYr,"camembert"),XYr.forEach(t),R2o=r(Lwe," \u2014 "),Bq=n(Lwe,"A",{href:!0});var zYr=s(Bq);P2o=r(zYr,"CamembertForMaskedLM"),zYr.forEach(t),B2o=r(Lwe," (CamemBERT model)"),Lwe.forEach(t),I2o=i(V),Du=n(V,"LI",{});var xwe=s(Du);tle=n(xwe,"STRONG",{});var QYr=s(tle);q2o=r(QYr,"ctrl"),QYr.forEach(t),N2o=r(xwe," \u2014 "),Iq=n(xwe,"A",{href:!0});var WYr=s(Iq);j2o=r(WYr,"CTRLLMHeadModel"),WYr.forEach(t),D2o=r(xwe," (CTRL model)"),xwe.forEach(t),G2o=i(V),Gu=n(V,"LI",{});var $we=s(Gu);ale=n($we,"STRONG",{});var HYr=s(ale);O2o=r(HYr,"data2vec-text"),HYr.forEach(t),V2o=r($we," \u2014 "),qq=n($we,"A",{href:!0});var UYr=s(qq);X2o=r(UYr,"Data2VecTextForMaskedLM"),UYr.forEach(t),z2o=r($we," (Data2VecText model)"),$we.forEach(t),Q2o=i(V),Ou=n(V,"LI",{});var kwe=s(Ou);nle=n(kwe,"STRONG",{});var JYr=s(nle);W2o=r(JYr,"deberta"),JYr.forEach(t),H2o=r(kwe," \u2014 "),Nq=n(kwe,"A",{href:!0});var YYr=s(Nq);U2o=r(YYr,"DebertaForMaskedLM"),YYr.forEach(t),J2o=r(kwe," (DeBERTa model)"),kwe.forEach(t),Y2o=i(V),Vu=n(V,"LI",{});var Swe=s(Vu);sle=n(Swe,"STRONG",{});var KYr=s(sle);K2o=r(KYr,"deberta-v2"),KYr.forEach(t),Z2o=r(Swe," \u2014 "),jq=n(Swe,"A",{href:!0});var ZYr=s(jq);evo=r(ZYr,"DebertaV2ForMaskedLM"),ZYr.forEach(t),ovo=r(Swe," (DeBERTa-v2 model)"),Swe.forEach(t),rvo=i(V),Xu=n(V,"LI",{});var Rwe=s(Xu);lle=n(Rwe,"STRONG",{});var eKr=s(lle);tvo=r(eKr,"distilbert"),eKr.forEach(t),avo=r(Rwe," \u2014 "),Dq=n(Rwe,"A",{href:!0});var oKr=s(Dq);nvo=r(oKr,"DistilBertForMaskedLM"),oKr.forEach(t),svo=r(Rwe," (DistilBERT model)"),Rwe.forEach(t),lvo=i(V),zu=n(V,"LI",{});var Pwe=s(zu);ile=n(Pwe,"STRONG",{});var rKr=s(ile);ivo=r(rKr,"electra"),rKr.forEach(t),dvo=r(Pwe," \u2014 "),Gq=n(Pwe,"A",{href:!0});var tKr=s(Gq);cvo=r(tKr,"ElectraForPreTraining"),tKr.forEach(t),fvo=r(Pwe," (ELECTRA model)"),Pwe.forEach(t),mvo=i(V),Qu=n(V,"LI",{});var Bwe=s(Qu);dle=n(Bwe,"STRONG",{});var aKr=s(dle);gvo=r(aKr,"flaubert"),aKr.forEach(t),hvo=r(Bwe," \u2014 "),Oq=n(Bwe,"A",{href:!0});var nKr=s(Oq);pvo=r(nKr,"FlaubertWithLMHeadModel"),nKr.forEach(t),uvo=r(Bwe," (FlauBERT model)"),Bwe.forEach(t),_vo=i(V),Wu=n(V,"LI",{});var Iwe=s(Wu);cle=n(Iwe,"STRONG",{});var sKr=s(cle);bvo=r(sKr,"fnet"),sKr.forEach(t),vvo=r(Iwe," \u2014 "),Vq=n(Iwe,"A",{href:!0});var lKr=s(Vq);Fvo=r(lKr,"FNetForPreTraining"),lKr.forEach(t),Tvo=r(Iwe," (FNet model)"),Iwe.forEach(t),Mvo=i(V),Hu=n(V,"LI",{});var qwe=s(Hu);fle=n(qwe,"STRONG",{});var iKr=s(fle);Evo=r(iKr,"fsmt"),iKr.forEach(t),Cvo=r(qwe," \u2014 "),Xq=n(qwe,"A",{href:!0});var dKr=s(Xq);wvo=r(dKr,"FSMTForConditionalGeneration"),dKr.forEach(t),Avo=r(qwe," (FairSeq Machine-Translation model)"),qwe.forEach(t),yvo=i(V),Uu=n(V,"LI",{});var Nwe=s(Uu);mle=n(Nwe,"STRONG",{});var cKr=s(mle);Lvo=r(cKr,"funnel"),cKr.forEach(t),xvo=r(Nwe," \u2014 "),zq=n(Nwe,"A",{href:!0});var fKr=s(zq);$vo=r(fKr,"FunnelForPreTraining"),fKr.forEach(t),kvo=r(Nwe," (Funnel Transformer model)"),Nwe.forEach(t),Svo=i(V),Ju=n(V,"LI",{});var jwe=s(Ju);gle=n(jwe,"STRONG",{});var mKr=s(gle);Rvo=r(mKr,"gpt2"),mKr.forEach(t),Pvo=r(jwe," \u2014 "),Qq=n(jwe,"A",{href:!0});var gKr=s(Qq);Bvo=r(gKr,"GPT2LMHeadModel"),gKr.forEach(t),Ivo=r(jwe," (OpenAI GPT-2 model)"),jwe.forEach(t),qvo=i(V),Yu=n(V,"LI",{});var Dwe=s(Yu);hle=n(Dwe,"STRONG",{});var hKr=s(hle);Nvo=r(hKr,"ibert"),hKr.forEach(t),jvo=r(Dwe," \u2014 "),Wq=n(Dwe,"A",{href:!0});var pKr=s(Wq);Dvo=r(pKr,"IBertForMaskedLM"),pKr.forEach(t),Gvo=r(Dwe," (I-BERT model)"),Dwe.forEach(t),Ovo=i(V),Ku=n(V,"LI",{});var Gwe=s(Ku);ple=n(Gwe,"STRONG",{});var uKr=s(ple);Vvo=r(uKr,"layoutlm"),uKr.forEach(t),Xvo=r(Gwe," \u2014 "),Hq=n(Gwe,"A",{href:!0});var _Kr=s(Hq);zvo=r(_Kr,"LayoutLMForMaskedLM"),_Kr.forEach(t),Qvo=r(Gwe," (LayoutLM model)"),Gwe.forEach(t),Wvo=i(V),Zu=n(V,"LI",{});var Owe=s(Zu);ule=n(Owe,"STRONG",{});var bKr=s(ule);Hvo=r(bKr,"longformer"),bKr.forEach(t),Uvo=r(Owe," \u2014 "),Uq=n(Owe,"A",{href:!0});var vKr=s(Uq);Jvo=r(vKr,"LongformerForMaskedLM"),vKr.forEach(t),Yvo=r(Owe," (Longformer model)"),Owe.forEach(t),Kvo=i(V),e_=n(V,"LI",{});var Vwe=s(e_);_le=n(Vwe,"STRONG",{});var FKr=s(_le);Zvo=r(FKr,"lxmert"),FKr.forEach(t),eFo=r(Vwe," \u2014 "),Jq=n(Vwe,"A",{href:!0});var TKr=s(Jq);oFo=r(TKr,"LxmertForPreTraining"),TKr.forEach(t),rFo=r(Vwe," (LXMERT model)"),Vwe.forEach(t),tFo=i(V),o_=n(V,"LI",{});var Xwe=s(o_);ble=n(Xwe,"STRONG",{});var MKr=s(ble);aFo=r(MKr,"megatron-bert"),MKr.forEach(t),nFo=r(Xwe," \u2014 "),Yq=n(Xwe,"A",{href:!0});var EKr=s(Yq);sFo=r(EKr,"MegatronBertForPreTraining"),EKr.forEach(t),lFo=r(Xwe," (MegatronBert model)"),Xwe.forEach(t),iFo=i(V),r_=n(V,"LI",{});var zwe=s(r_);vle=n(zwe,"STRONG",{});var CKr=s(vle);dFo=r(CKr,"mobilebert"),CKr.forEach(t),cFo=r(zwe," \u2014 "),Kq=n(zwe,"A",{href:!0});var wKr=s(Kq);fFo=r(wKr,"MobileBertForPreTraining"),wKr.forEach(t),mFo=r(zwe," (MobileBERT model)"),zwe.forEach(t),gFo=i(V),t_=n(V,"LI",{});var Qwe=s(t_);Fle=n(Qwe,"STRONG",{});var AKr=s(Fle);hFo=r(AKr,"mpnet"),AKr.forEach(t),pFo=r(Qwe," \u2014 "),Zq=n(Qwe,"A",{href:!0});var yKr=s(Zq);uFo=r(yKr,"MPNetForMaskedLM"),yKr.forEach(t),_Fo=r(Qwe," (MPNet model)"),Qwe.forEach(t),bFo=i(V),a_=n(V,"LI",{});var Wwe=s(a_);Tle=n(Wwe,"STRONG",{});var LKr=s(Tle);vFo=r(LKr,"openai-gpt"),LKr.forEach(t),FFo=r(Wwe," \u2014 "),eN=n(Wwe,"A",{href:!0});var xKr=s(eN);TFo=r(xKr,"OpenAIGPTLMHeadModel"),xKr.forEach(t),MFo=r(Wwe," (OpenAI GPT model)"),Wwe.forEach(t),EFo=i(V),n_=n(V,"LI",{});var Hwe=s(n_);Mle=n(Hwe,"STRONG",{});var $Kr=s(Mle);CFo=r($Kr,"retribert"),$Kr.forEach(t),wFo=r(Hwe," \u2014 "),oN=n(Hwe,"A",{href:!0});var kKr=s(oN);AFo=r(kKr,"RetriBertModel"),kKr.forEach(t),yFo=r(Hwe," (RetriBERT model)"),Hwe.forEach(t),LFo=i(V),s_=n(V,"LI",{});var Uwe=s(s_);Ele=n(Uwe,"STRONG",{});var SKr=s(Ele);xFo=r(SKr,"roberta"),SKr.forEach(t),$Fo=r(Uwe," \u2014 "),rN=n(Uwe,"A",{href:!0});var RKr=s(rN);kFo=r(RKr,"RobertaForMaskedLM"),RKr.forEach(t),SFo=r(Uwe," (RoBERTa model)"),Uwe.forEach(t),RFo=i(V),l_=n(V,"LI",{});var Jwe=s(l_);Cle=n(Jwe,"STRONG",{});var PKr=s(Cle);PFo=r(PKr,"squeezebert"),PKr.forEach(t),BFo=r(Jwe," \u2014 "),tN=n(Jwe,"A",{href:!0});var BKr=s(tN);IFo=r(BKr,"SqueezeBertForMaskedLM"),BKr.forEach(t),qFo=r(Jwe," (SqueezeBERT model)"),Jwe.forEach(t),NFo=i(V),i_=n(V,"LI",{});var Ywe=s(i_);wle=n(Ywe,"STRONG",{});var IKr=s(wle);jFo=r(IKr,"t5"),IKr.forEach(t),DFo=r(Ywe," \u2014 "),aN=n(Ywe,"A",{href:!0});var qKr=s(aN);GFo=r(qKr,"T5ForConditionalGeneration"),qKr.forEach(t),OFo=r(Ywe," (T5 model)"),Ywe.forEach(t),VFo=i(V),d_=n(V,"LI",{});var Kwe=s(d_);Ale=n(Kwe,"STRONG",{});var NKr=s(Ale);XFo=r(NKr,"tapas"),NKr.forEach(t),zFo=r(Kwe," \u2014 "),nN=n(Kwe,"A",{href:!0});var jKr=s(nN);QFo=r(jKr,"TapasForMaskedLM"),jKr.forEach(t),WFo=r(Kwe," (TAPAS model)"),Kwe.forEach(t),HFo=i(V),c_=n(V,"LI",{});var Zwe=s(c_);yle=n(Zwe,"STRONG",{});var DKr=s(yle);UFo=r(DKr,"transfo-xl"),DKr.forEach(t),JFo=r(Zwe," \u2014 "),sN=n(Zwe,"A",{href:!0});var GKr=s(sN);YFo=r(GKr,"TransfoXLLMHeadModel"),GKr.forEach(t),KFo=r(Zwe," (Transformer-XL model)"),Zwe.forEach(t),ZFo=i(V),f_=n(V,"LI",{});var eAe=s(f_);Lle=n(eAe,"STRONG",{});var OKr=s(Lle);e0o=r(OKr,"unispeech"),OKr.forEach(t),o0o=r(eAe," \u2014 "),lN=n(eAe,"A",{href:!0});var VKr=s(lN);r0o=r(VKr,"UniSpeechForPreTraining"),VKr.forEach(t),t0o=r(eAe," (UniSpeech model)"),eAe.forEach(t),a0o=i(V),m_=n(V,"LI",{});var oAe=s(m_);xle=n(oAe,"STRONG",{});var XKr=s(xle);n0o=r(XKr,"unispeech-sat"),XKr.forEach(t),s0o=r(oAe," \u2014 "),iN=n(oAe,"A",{href:!0});var zKr=s(iN);l0o=r(zKr,"UniSpeechSatForPreTraining"),zKr.forEach(t),i0o=r(oAe," (UniSpeechSat model)"),oAe.forEach(t),d0o=i(V),g_=n(V,"LI",{});var rAe=s(g_);$le=n(rAe,"STRONG",{});var QKr=s($le);c0o=r(QKr,"visual_bert"),QKr.forEach(t),f0o=r(rAe," \u2014 "),dN=n(rAe,"A",{href:!0});var WKr=s(dN);m0o=r(WKr,"VisualBertForPreTraining"),WKr.forEach(t),g0o=r(rAe," (VisualBert model)"),rAe.forEach(t),h0o=i(V),h_=n(V,"LI",{});var tAe=s(h_);kle=n(tAe,"STRONG",{});var HKr=s(kle);p0o=r(HKr,"vit_mae"),HKr.forEach(t),u0o=r(tAe," \u2014 "),cN=n(tAe,"A",{href:!0});var UKr=s(cN);_0o=r(UKr,"ViTMAEForPreTraining"),UKr.forEach(t),b0o=r(tAe," (ViTMAE model)"),tAe.forEach(t),v0o=i(V),p_=n(V,"LI",{});var aAe=s(p_);Sle=n(aAe,"STRONG",{});var JKr=s(Sle);F0o=r(JKr,"wav2vec2"),JKr.forEach(t),T0o=r(aAe," \u2014 "),fN=n(aAe,"A",{href:!0});var YKr=s(fN);M0o=r(YKr,"Wav2Vec2ForPreTraining"),YKr.forEach(t),E0o=r(aAe," (Wav2Vec2 model)"),aAe.forEach(t),C0o=i(V),u_=n(V,"LI",{});var nAe=s(u_);Rle=n(nAe,"STRONG",{});var KKr=s(Rle);w0o=r(KKr,"xlm"),KKr.forEach(t),A0o=r(nAe," \u2014 "),mN=n(nAe,"A",{href:!0});var ZKr=s(mN);y0o=r(ZKr,"XLMWithLMHeadModel"),ZKr.forEach(t),L0o=r(nAe," (XLM model)"),nAe.forEach(t),x0o=i(V),__=n(V,"LI",{});var sAe=s(__);Ple=n(sAe,"STRONG",{});var eZr=s(Ple);$0o=r(eZr,"xlm-roberta"),eZr.forEach(t),k0o=r(sAe," \u2014 "),gN=n(sAe,"A",{href:!0});var oZr=s(gN);S0o=r(oZr,"XLMRobertaForMaskedLM"),oZr.forEach(t),R0o=r(sAe," (XLM-RoBERTa model)"),sAe.forEach(t),P0o=i(V),b_=n(V,"LI",{});var lAe=s(b_);Ble=n(lAe,"STRONG",{});var rZr=s(Ble);B0o=r(rZr,"xlm-roberta-xl"),rZr.forEach(t),I0o=r(lAe," \u2014 "),hN=n(lAe,"A",{href:!0});var tZr=s(hN);q0o=r(tZr,"XLMRobertaXLForMaskedLM"),tZr.forEach(t),N0o=r(lAe," (XLM-RoBERTa-XL model)"),lAe.forEach(t),j0o=i(V),v_=n(V,"LI",{});var iAe=s(v_);Ile=n(iAe,"STRONG",{});var aZr=s(Ile);D0o=r(aZr,"xlnet"),aZr.forEach(t),G0o=r(iAe," \u2014 "),pN=n(iAe,"A",{href:!0});var nZr=s(pN);O0o=r(nZr,"XLNetLMHeadModel"),nZr.forEach(t),V0o=r(iAe," (XLNet model)"),iAe.forEach(t),V.forEach(t),X0o=i(ea),F_=n(ea,"P",{});var dAe=s(F_);z0o=r(dAe,"The model is set in evaluation mode by default using "),qle=n(dAe,"CODE",{});var sZr=s(qle);Q0o=r(sZr,"model.eval()"),sZr.forEach(t),W0o=r(dAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nle=n(dAe,"CODE",{});var lZr=s(Nle);H0o=r(lZr,"model.train()"),lZr.forEach(t),dAe.forEach(t),U0o=i(ea),T(T_.$$.fragment,ea),ea.forEach(t),Gs.forEach(t),ZBe=i(f),Li=n(f,"H2",{class:!0});var tNe=s(Li);M_=n(tNe,"A",{id:!0,class:!0,href:!0});var iZr=s(M_);jle=n(iZr,"SPAN",{});var dZr=s(jle);T(kA.$$.fragment,dZr),dZr.forEach(t),iZr.forEach(t),J0o=i(tNe),Dle=n(tNe,"SPAN",{});var cZr=s(Dle);Y0o=r(cZr,"AutoModelForCausalLM"),cZr.forEach(t),tNe.forEach(t),eIe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(SA.$$.fragment,Os),K0o=i(Os),xi=n(Os,"P",{});var fK=s(xi);Z0o=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uN=n(fK,"A",{href:!0});var fZr=s(uN);eTo=r(fZr,"from_pretrained()"),fZr.forEach(t),oTo=r(fK," class method or the "),_N=n(fK,"A",{href:!0});var mZr=s(_N);rTo=r(mZr,"from_config()"),mZr.forEach(t),tTo=r(fK,` class
method.`),fK.forEach(t),aTo=i(Os),RA=n(Os,"P",{});var aNe=s(RA);nTo=r(aNe,"This class cannot be instantiated directly using "),Gle=n(aNe,"CODE",{});var gZr=s(Gle);sTo=r(gZr,"__init__()"),gZr.forEach(t),lTo=r(aNe," (throws an error)."),aNe.forEach(t),iTo=i(Os),tt=n(Os,"DIV",{class:!0});var r3=s(tt);T(PA.$$.fragment,r3),dTo=i(r3),Ole=n(r3,"P",{});var hZr=s(Ole);cTo=r(hZr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),hZr.forEach(t),fTo=i(r3),$i=n(r3,"P",{});var mK=s($i);mTo=r(mK,`Note:
Loading a model from its configuration file does `),Vle=n(mK,"STRONG",{});var pZr=s(Vle);gTo=r(pZr,"not"),pZr.forEach(t),hTo=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bN=n(mK,"A",{href:!0});var uZr=s(bN);pTo=r(uZr,"from_pretrained()"),uZr.forEach(t),uTo=r(mK," to load the model weights."),mK.forEach(t),_To=i(r3),T(E_.$$.fragment,r3),r3.forEach(t),bTo=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(BA.$$.fragment,oa),vTo=i(oa),Xle=n(oa,"P",{});var _Zr=s(Xle);FTo=r(_Zr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_Zr.forEach(t),TTo=i(oa),La=n(oa,"P",{});var t3=s(La);MTo=r(t3,"The model class to instantiate is selected based on the "),zle=n(t3,"CODE",{});var bZr=s(zle);ETo=r(bZr,"model_type"),bZr.forEach(t),CTo=r(t3,` property of the config object (either
passed as an argument or loaded from `),Qle=n(t3,"CODE",{});var vZr=s(Qle);wTo=r(vZr,"pretrained_model_name_or_path"),vZr.forEach(t),ATo=r(t3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wle=n(t3,"CODE",{});var FZr=s(Wle);yTo=r(FZr,"pretrained_model_name_or_path"),FZr.forEach(t),LTo=r(t3,":"),t3.forEach(t),xTo=i(oa),z=n(oa,"UL",{});var W=s(z);C_=n(W,"LI",{});var cAe=s(C_);Hle=n(cAe,"STRONG",{});var TZr=s(Hle);$To=r(TZr,"bart"),TZr.forEach(t),kTo=r(cAe," \u2014 "),vN=n(cAe,"A",{href:!0});var MZr=s(vN);STo=r(MZr,"BartForCausalLM"),MZr.forEach(t),RTo=r(cAe," (BART model)"),cAe.forEach(t),PTo=i(W),w_=n(W,"LI",{});var fAe=s(w_);Ule=n(fAe,"STRONG",{});var EZr=s(Ule);BTo=r(EZr,"bert"),EZr.forEach(t),ITo=r(fAe," \u2014 "),FN=n(fAe,"A",{href:!0});var CZr=s(FN);qTo=r(CZr,"BertLMHeadModel"),CZr.forEach(t),NTo=r(fAe," (BERT model)"),fAe.forEach(t),jTo=i(W),A_=n(W,"LI",{});var mAe=s(A_);Jle=n(mAe,"STRONG",{});var wZr=s(Jle);DTo=r(wZr,"bert-generation"),wZr.forEach(t),GTo=r(mAe," \u2014 "),TN=n(mAe,"A",{href:!0});var AZr=s(TN);OTo=r(AZr,"BertGenerationDecoder"),AZr.forEach(t),VTo=r(mAe," (Bert Generation model)"),mAe.forEach(t),XTo=i(W),y_=n(W,"LI",{});var gAe=s(y_);Yle=n(gAe,"STRONG",{});var yZr=s(Yle);zTo=r(yZr,"big_bird"),yZr.forEach(t),QTo=r(gAe," \u2014 "),MN=n(gAe,"A",{href:!0});var LZr=s(MN);WTo=r(LZr,"BigBirdForCausalLM"),LZr.forEach(t),HTo=r(gAe," (BigBird model)"),gAe.forEach(t),UTo=i(W),L_=n(W,"LI",{});var hAe=s(L_);Kle=n(hAe,"STRONG",{});var xZr=s(Kle);JTo=r(xZr,"bigbird_pegasus"),xZr.forEach(t),YTo=r(hAe," \u2014 "),EN=n(hAe,"A",{href:!0});var $Zr=s(EN);KTo=r($Zr,"BigBirdPegasusForCausalLM"),$Zr.forEach(t),ZTo=r(hAe," (BigBirdPegasus model)"),hAe.forEach(t),e7o=i(W),x_=n(W,"LI",{});var pAe=s(x_);Zle=n(pAe,"STRONG",{});var kZr=s(Zle);o7o=r(kZr,"blenderbot"),kZr.forEach(t),r7o=r(pAe," \u2014 "),CN=n(pAe,"A",{href:!0});var SZr=s(CN);t7o=r(SZr,"BlenderbotForCausalLM"),SZr.forEach(t),a7o=r(pAe," (Blenderbot model)"),pAe.forEach(t),n7o=i(W),$_=n(W,"LI",{});var uAe=s($_);eie=n(uAe,"STRONG",{});var RZr=s(eie);s7o=r(RZr,"blenderbot-small"),RZr.forEach(t),l7o=r(uAe," \u2014 "),wN=n(uAe,"A",{href:!0});var PZr=s(wN);i7o=r(PZr,"BlenderbotSmallForCausalLM"),PZr.forEach(t),d7o=r(uAe," (BlenderbotSmall model)"),uAe.forEach(t),c7o=i(W),k_=n(W,"LI",{});var _Ae=s(k_);oie=n(_Ae,"STRONG",{});var BZr=s(oie);f7o=r(BZr,"camembert"),BZr.forEach(t),m7o=r(_Ae," \u2014 "),AN=n(_Ae,"A",{href:!0});var IZr=s(AN);g7o=r(IZr,"CamembertForCausalLM"),IZr.forEach(t),h7o=r(_Ae," (CamemBERT model)"),_Ae.forEach(t),p7o=i(W),S_=n(W,"LI",{});var bAe=s(S_);rie=n(bAe,"STRONG",{});var qZr=s(rie);u7o=r(qZr,"ctrl"),qZr.forEach(t),_7o=r(bAe," \u2014 "),yN=n(bAe,"A",{href:!0});var NZr=s(yN);b7o=r(NZr,"CTRLLMHeadModel"),NZr.forEach(t),v7o=r(bAe," (CTRL model)"),bAe.forEach(t),F7o=i(W),R_=n(W,"LI",{});var vAe=s(R_);tie=n(vAe,"STRONG",{});var jZr=s(tie);T7o=r(jZr,"data2vec-text"),jZr.forEach(t),M7o=r(vAe," \u2014 "),LN=n(vAe,"A",{href:!0});var DZr=s(LN);E7o=r(DZr,"Data2VecTextForCausalLM"),DZr.forEach(t),C7o=r(vAe," (Data2VecText model)"),vAe.forEach(t),w7o=i(W),P_=n(W,"LI",{});var FAe=s(P_);aie=n(FAe,"STRONG",{});var GZr=s(aie);A7o=r(GZr,"electra"),GZr.forEach(t),y7o=r(FAe," \u2014 "),xN=n(FAe,"A",{href:!0});var OZr=s(xN);L7o=r(OZr,"ElectraForCausalLM"),OZr.forEach(t),x7o=r(FAe," (ELECTRA model)"),FAe.forEach(t),$7o=i(W),B_=n(W,"LI",{});var TAe=s(B_);nie=n(TAe,"STRONG",{});var VZr=s(nie);k7o=r(VZr,"gpt2"),VZr.forEach(t),S7o=r(TAe," \u2014 "),$N=n(TAe,"A",{href:!0});var XZr=s($N);R7o=r(XZr,"GPT2LMHeadModel"),XZr.forEach(t),P7o=r(TAe," (OpenAI GPT-2 model)"),TAe.forEach(t),B7o=i(W),I_=n(W,"LI",{});var MAe=s(I_);sie=n(MAe,"STRONG",{});var zZr=s(sie);I7o=r(zZr,"gpt_neo"),zZr.forEach(t),q7o=r(MAe," \u2014 "),kN=n(MAe,"A",{href:!0});var QZr=s(kN);N7o=r(QZr,"GPTNeoForCausalLM"),QZr.forEach(t),j7o=r(MAe," (GPT Neo model)"),MAe.forEach(t),D7o=i(W),q_=n(W,"LI",{});var EAe=s(q_);lie=n(EAe,"STRONG",{});var WZr=s(lie);G7o=r(WZr,"gptj"),WZr.forEach(t),O7o=r(EAe," \u2014 "),SN=n(EAe,"A",{href:!0});var HZr=s(SN);V7o=r(HZr,"GPTJForCausalLM"),HZr.forEach(t),X7o=r(EAe," (GPT-J model)"),EAe.forEach(t),z7o=i(W),N_=n(W,"LI",{});var CAe=s(N_);iie=n(CAe,"STRONG",{});var UZr=s(iie);Q7o=r(UZr,"marian"),UZr.forEach(t),W7o=r(CAe," \u2014 "),RN=n(CAe,"A",{href:!0});var JZr=s(RN);H7o=r(JZr,"MarianForCausalLM"),JZr.forEach(t),U7o=r(CAe," (Marian model)"),CAe.forEach(t),J7o=i(W),j_=n(W,"LI",{});var wAe=s(j_);die=n(wAe,"STRONG",{});var YZr=s(die);Y7o=r(YZr,"mbart"),YZr.forEach(t),K7o=r(wAe," \u2014 "),PN=n(wAe,"A",{href:!0});var KZr=s(PN);Z7o=r(KZr,"MBartForCausalLM"),KZr.forEach(t),eMo=r(wAe," (mBART model)"),wAe.forEach(t),oMo=i(W),D_=n(W,"LI",{});var AAe=s(D_);cie=n(AAe,"STRONG",{});var ZZr=s(cie);rMo=r(ZZr,"megatron-bert"),ZZr.forEach(t),tMo=r(AAe," \u2014 "),BN=n(AAe,"A",{href:!0});var eet=s(BN);aMo=r(eet,"MegatronBertForCausalLM"),eet.forEach(t),nMo=r(AAe," (MegatronBert model)"),AAe.forEach(t),sMo=i(W),G_=n(W,"LI",{});var yAe=s(G_);fie=n(yAe,"STRONG",{});var oet=s(fie);lMo=r(oet,"openai-gpt"),oet.forEach(t),iMo=r(yAe," \u2014 "),IN=n(yAe,"A",{href:!0});var ret=s(IN);dMo=r(ret,"OpenAIGPTLMHeadModel"),ret.forEach(t),cMo=r(yAe," (OpenAI GPT model)"),yAe.forEach(t),fMo=i(W),O_=n(W,"LI",{});var LAe=s(O_);mie=n(LAe,"STRONG",{});var tet=s(mie);mMo=r(tet,"opt"),tet.forEach(t),gMo=r(LAe," \u2014 "),qN=n(LAe,"A",{href:!0});var aet=s(qN);hMo=r(aet,"OPTForCausalLM"),aet.forEach(t),pMo=r(LAe," (OPT model)"),LAe.forEach(t),uMo=i(W),V_=n(W,"LI",{});var xAe=s(V_);gie=n(xAe,"STRONG",{});var net=s(gie);_Mo=r(net,"pegasus"),net.forEach(t),bMo=r(xAe," \u2014 "),NN=n(xAe,"A",{href:!0});var set=s(NN);vMo=r(set,"PegasusForCausalLM"),set.forEach(t),FMo=r(xAe," (Pegasus model)"),xAe.forEach(t),TMo=i(W),X_=n(W,"LI",{});var $Ae=s(X_);hie=n($Ae,"STRONG",{});var iet=s(hie);MMo=r(iet,"plbart"),iet.forEach(t),EMo=r($Ae," \u2014 "),jN=n($Ae,"A",{href:!0});var det=s(jN);CMo=r(det,"PLBartForCausalLM"),det.forEach(t),wMo=r($Ae," (PLBart model)"),$Ae.forEach(t),AMo=i(W),z_=n(W,"LI",{});var kAe=s(z_);pie=n(kAe,"STRONG",{});var cet=s(pie);yMo=r(cet,"prophetnet"),cet.forEach(t),LMo=r(kAe," \u2014 "),DN=n(kAe,"A",{href:!0});var fet=s(DN);xMo=r(fet,"ProphetNetForCausalLM"),fet.forEach(t),$Mo=r(kAe," (ProphetNet model)"),kAe.forEach(t),kMo=i(W),Q_=n(W,"LI",{});var SAe=s(Q_);uie=n(SAe,"STRONG",{});var met=s(uie);SMo=r(met,"qdqbert"),met.forEach(t),RMo=r(SAe," \u2014 "),GN=n(SAe,"A",{href:!0});var get=s(GN);PMo=r(get,"QDQBertLMHeadModel"),get.forEach(t),BMo=r(SAe," (QDQBert model)"),SAe.forEach(t),IMo=i(W),W_=n(W,"LI",{});var RAe=s(W_);_ie=n(RAe,"STRONG",{});var het=s(_ie);qMo=r(het,"reformer"),het.forEach(t),NMo=r(RAe," \u2014 "),ON=n(RAe,"A",{href:!0});var pet=s(ON);jMo=r(pet,"ReformerModelWithLMHead"),pet.forEach(t),DMo=r(RAe," (Reformer model)"),RAe.forEach(t),GMo=i(W),H_=n(W,"LI",{});var PAe=s(H_);bie=n(PAe,"STRONG",{});var uet=s(bie);OMo=r(uet,"rembert"),uet.forEach(t),VMo=r(PAe," \u2014 "),VN=n(PAe,"A",{href:!0});var _et=s(VN);XMo=r(_et,"RemBertForCausalLM"),_et.forEach(t),zMo=r(PAe," (RemBERT model)"),PAe.forEach(t),QMo=i(W),U_=n(W,"LI",{});var BAe=s(U_);vie=n(BAe,"STRONG",{});var bet=s(vie);WMo=r(bet,"roberta"),bet.forEach(t),HMo=r(BAe," \u2014 "),XN=n(BAe,"A",{href:!0});var vet=s(XN);UMo=r(vet,"RobertaForCausalLM"),vet.forEach(t),JMo=r(BAe," (RoBERTa model)"),BAe.forEach(t),YMo=i(W),J_=n(W,"LI",{});var IAe=s(J_);Fie=n(IAe,"STRONG",{});var Fet=s(Fie);KMo=r(Fet,"roformer"),Fet.forEach(t),ZMo=r(IAe," \u2014 "),zN=n(IAe,"A",{href:!0});var Tet=s(zN);e4o=r(Tet,"RoFormerForCausalLM"),Tet.forEach(t),o4o=r(IAe," (RoFormer model)"),IAe.forEach(t),r4o=i(W),Y_=n(W,"LI",{});var qAe=s(Y_);Tie=n(qAe,"STRONG",{});var Met=s(Tie);t4o=r(Met,"speech_to_text_2"),Met.forEach(t),a4o=r(qAe," \u2014 "),QN=n(qAe,"A",{href:!0});var Eet=s(QN);n4o=r(Eet,"Speech2Text2ForCausalLM"),Eet.forEach(t),s4o=r(qAe," (Speech2Text2 model)"),qAe.forEach(t),l4o=i(W),K_=n(W,"LI",{});var NAe=s(K_);Mie=n(NAe,"STRONG",{});var Cet=s(Mie);i4o=r(Cet,"transfo-xl"),Cet.forEach(t),d4o=r(NAe," \u2014 "),WN=n(NAe,"A",{href:!0});var wet=s(WN);c4o=r(wet,"TransfoXLLMHeadModel"),wet.forEach(t),f4o=r(NAe," (Transformer-XL model)"),NAe.forEach(t),m4o=i(W),Z_=n(W,"LI",{});var jAe=s(Z_);Eie=n(jAe,"STRONG",{});var Aet=s(Eie);g4o=r(Aet,"trocr"),Aet.forEach(t),h4o=r(jAe," \u2014 "),HN=n(jAe,"A",{href:!0});var yet=s(HN);p4o=r(yet,"TrOCRForCausalLM"),yet.forEach(t),u4o=r(jAe," (TrOCR model)"),jAe.forEach(t),_4o=i(W),e1=n(W,"LI",{});var DAe=s(e1);Cie=n(DAe,"STRONG",{});var Let=s(Cie);b4o=r(Let,"xglm"),Let.forEach(t),v4o=r(DAe," \u2014 "),UN=n(DAe,"A",{href:!0});var xet=s(UN);F4o=r(xet,"XGLMForCausalLM"),xet.forEach(t),T4o=r(DAe," (XGLM model)"),DAe.forEach(t),M4o=i(W),o1=n(W,"LI",{});var GAe=s(o1);wie=n(GAe,"STRONG",{});var $et=s(wie);E4o=r($et,"xlm"),$et.forEach(t),C4o=r(GAe," \u2014 "),JN=n(GAe,"A",{href:!0});var ket=s(JN);w4o=r(ket,"XLMWithLMHeadModel"),ket.forEach(t),A4o=r(GAe," (XLM model)"),GAe.forEach(t),y4o=i(W),r1=n(W,"LI",{});var OAe=s(r1);Aie=n(OAe,"STRONG",{});var Set=s(Aie);L4o=r(Set,"xlm-prophetnet"),Set.forEach(t),x4o=r(OAe," \u2014 "),YN=n(OAe,"A",{href:!0});var Ret=s(YN);$4o=r(Ret,"XLMProphetNetForCausalLM"),Ret.forEach(t),k4o=r(OAe," (XLMProphetNet model)"),OAe.forEach(t),S4o=i(W),t1=n(W,"LI",{});var VAe=s(t1);yie=n(VAe,"STRONG",{});var Pet=s(yie);R4o=r(Pet,"xlm-roberta"),Pet.forEach(t),P4o=r(VAe," \u2014 "),KN=n(VAe,"A",{href:!0});var Bet=s(KN);B4o=r(Bet,"XLMRobertaForCausalLM"),Bet.forEach(t),I4o=r(VAe," (XLM-RoBERTa model)"),VAe.forEach(t),q4o=i(W),a1=n(W,"LI",{});var XAe=s(a1);Lie=n(XAe,"STRONG",{});var Iet=s(Lie);N4o=r(Iet,"xlm-roberta-xl"),Iet.forEach(t),j4o=r(XAe," \u2014 "),ZN=n(XAe,"A",{href:!0});var qet=s(ZN);D4o=r(qet,"XLMRobertaXLForCausalLM"),qet.forEach(t),G4o=r(XAe," (XLM-RoBERTa-XL model)"),XAe.forEach(t),O4o=i(W),n1=n(W,"LI",{});var zAe=s(n1);xie=n(zAe,"STRONG",{});var Net=s(xie);V4o=r(Net,"xlnet"),Net.forEach(t),X4o=r(zAe," \u2014 "),ej=n(zAe,"A",{href:!0});var jet=s(ej);z4o=r(jet,"XLNetLMHeadModel"),jet.forEach(t),Q4o=r(zAe," (XLNet model)"),zAe.forEach(t),W.forEach(t),W4o=i(oa),s1=n(oa,"P",{});var QAe=s(s1);H4o=r(QAe,"The model is set in evaluation mode by default using "),$ie=n(QAe,"CODE",{});var Det=s($ie);U4o=r(Det,"model.eval()"),Det.forEach(t),J4o=r(QAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=n(QAe,"CODE",{});var Get=s(kie);Y4o=r(Get,"model.train()"),Get.forEach(t),QAe.forEach(t),K4o=i(oa),T(l1.$$.fragment,oa),oa.forEach(t),Os.forEach(t),oIe=i(f),ki=n(f,"H2",{class:!0});var nNe=s(ki);i1=n(nNe,"A",{id:!0,class:!0,href:!0});var Oet=s(i1);Sie=n(Oet,"SPAN",{});var Vet=s(Sie);T(IA.$$.fragment,Vet),Vet.forEach(t),Oet.forEach(t),Z4o=i(nNe),Rie=n(nNe,"SPAN",{});var Xet=s(Rie);eEo=r(Xet,"AutoModelForMaskedLM"),Xet.forEach(t),nNe.forEach(t),rIe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(qA.$$.fragment,Vs),oEo=i(Vs),Si=n(Vs,"P",{});var gK=s(Si);rEo=r(gK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),oj=n(gK,"A",{href:!0});var zet=s(oj);tEo=r(zet,"from_pretrained()"),zet.forEach(t),aEo=r(gK," class method or the "),rj=n(gK,"A",{href:!0});var Qet=s(rj);nEo=r(Qet,"from_config()"),Qet.forEach(t),sEo=r(gK,` class
method.`),gK.forEach(t),lEo=i(Vs),NA=n(Vs,"P",{});var sNe=s(NA);iEo=r(sNe,"This class cannot be instantiated directly using "),Pie=n(sNe,"CODE",{});var Wet=s(Pie);dEo=r(Wet,"__init__()"),Wet.forEach(t),cEo=r(sNe," (throws an error)."),sNe.forEach(t),fEo=i(Vs),at=n(Vs,"DIV",{class:!0});var a3=s(at);T(jA.$$.fragment,a3),mEo=i(a3),Bie=n(a3,"P",{});var Het=s(Bie);gEo=r(Het,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Het.forEach(t),hEo=i(a3),Ri=n(a3,"P",{});var hK=s(Ri);pEo=r(hK,`Note:
Loading a model from its configuration file does `),Iie=n(hK,"STRONG",{});var Uet=s(Iie);uEo=r(Uet,"not"),Uet.forEach(t),_Eo=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tj=n(hK,"A",{href:!0});var Jet=s(tj);bEo=r(Jet,"from_pretrained()"),Jet.forEach(t),vEo=r(hK," to load the model weights."),hK.forEach(t),FEo=i(a3),T(d1.$$.fragment,a3),a3.forEach(t),TEo=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(DA.$$.fragment,ra),MEo=i(ra),qie=n(ra,"P",{});var Yet=s(qie);EEo=r(Yet,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Yet.forEach(t),CEo=i(ra),xa=n(ra,"P",{});var n3=s(xa);wEo=r(n3,"The model class to instantiate is selected based on the "),Nie=n(n3,"CODE",{});var Ket=s(Nie);AEo=r(Ket,"model_type"),Ket.forEach(t),yEo=r(n3,` property of the config object (either
passed as an argument or loaded from `),jie=n(n3,"CODE",{});var Zet=s(jie);LEo=r(Zet,"pretrained_model_name_or_path"),Zet.forEach(t),xEo=r(n3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=n(n3,"CODE",{});var eot=s(Die);$Eo=r(eot,"pretrained_model_name_or_path"),eot.forEach(t),kEo=r(n3,":"),n3.forEach(t),SEo=i(ra),Q=n(ra,"UL",{});var H=s(Q);c1=n(H,"LI",{});var WAe=s(c1);Gie=n(WAe,"STRONG",{});var oot=s(Gie);REo=r(oot,"albert"),oot.forEach(t),PEo=r(WAe," \u2014 "),aj=n(WAe,"A",{href:!0});var rot=s(aj);BEo=r(rot,"AlbertForMaskedLM"),rot.forEach(t),IEo=r(WAe," (ALBERT model)"),WAe.forEach(t),qEo=i(H),f1=n(H,"LI",{});var HAe=s(f1);Oie=n(HAe,"STRONG",{});var tot=s(Oie);NEo=r(tot,"bart"),tot.forEach(t),jEo=r(HAe," \u2014 "),nj=n(HAe,"A",{href:!0});var aot=s(nj);DEo=r(aot,"BartForConditionalGeneration"),aot.forEach(t),GEo=r(HAe," (BART model)"),HAe.forEach(t),OEo=i(H),m1=n(H,"LI",{});var UAe=s(m1);Vie=n(UAe,"STRONG",{});var not=s(Vie);VEo=r(not,"bert"),not.forEach(t),XEo=r(UAe," \u2014 "),sj=n(UAe,"A",{href:!0});var sot=s(sj);zEo=r(sot,"BertForMaskedLM"),sot.forEach(t),QEo=r(UAe," (BERT model)"),UAe.forEach(t),WEo=i(H),g1=n(H,"LI",{});var JAe=s(g1);Xie=n(JAe,"STRONG",{});var lot=s(Xie);HEo=r(lot,"big_bird"),lot.forEach(t),UEo=r(JAe," \u2014 "),lj=n(JAe,"A",{href:!0});var iot=s(lj);JEo=r(iot,"BigBirdForMaskedLM"),iot.forEach(t),YEo=r(JAe," (BigBird model)"),JAe.forEach(t),KEo=i(H),h1=n(H,"LI",{});var YAe=s(h1);zie=n(YAe,"STRONG",{});var dot=s(zie);ZEo=r(dot,"camembert"),dot.forEach(t),e5o=r(YAe," \u2014 "),ij=n(YAe,"A",{href:!0});var cot=s(ij);o5o=r(cot,"CamembertForMaskedLM"),cot.forEach(t),r5o=r(YAe," (CamemBERT model)"),YAe.forEach(t),t5o=i(H),p1=n(H,"LI",{});var KAe=s(p1);Qie=n(KAe,"STRONG",{});var fot=s(Qie);a5o=r(fot,"convbert"),fot.forEach(t),n5o=r(KAe," \u2014 "),dj=n(KAe,"A",{href:!0});var mot=s(dj);s5o=r(mot,"ConvBertForMaskedLM"),mot.forEach(t),l5o=r(KAe," (ConvBERT model)"),KAe.forEach(t),i5o=i(H),u1=n(H,"LI",{});var ZAe=s(u1);Wie=n(ZAe,"STRONG",{});var got=s(Wie);d5o=r(got,"data2vec-text"),got.forEach(t),c5o=r(ZAe," \u2014 "),cj=n(ZAe,"A",{href:!0});var hot=s(cj);f5o=r(hot,"Data2VecTextForMaskedLM"),hot.forEach(t),m5o=r(ZAe," (Data2VecText model)"),ZAe.forEach(t),g5o=i(H),_1=n(H,"LI",{});var e6e=s(_1);Hie=n(e6e,"STRONG",{});var pot=s(Hie);h5o=r(pot,"deberta"),pot.forEach(t),p5o=r(e6e," \u2014 "),fj=n(e6e,"A",{href:!0});var uot=s(fj);u5o=r(uot,"DebertaForMaskedLM"),uot.forEach(t),_5o=r(e6e," (DeBERTa model)"),e6e.forEach(t),b5o=i(H),b1=n(H,"LI",{});var o6e=s(b1);Uie=n(o6e,"STRONG",{});var _ot=s(Uie);v5o=r(_ot,"deberta-v2"),_ot.forEach(t),F5o=r(o6e," \u2014 "),mj=n(o6e,"A",{href:!0});var bot=s(mj);T5o=r(bot,"DebertaV2ForMaskedLM"),bot.forEach(t),M5o=r(o6e," (DeBERTa-v2 model)"),o6e.forEach(t),E5o=i(H),v1=n(H,"LI",{});var r6e=s(v1);Jie=n(r6e,"STRONG",{});var vot=s(Jie);C5o=r(vot,"distilbert"),vot.forEach(t),w5o=r(r6e," \u2014 "),gj=n(r6e,"A",{href:!0});var Fot=s(gj);A5o=r(Fot,"DistilBertForMaskedLM"),Fot.forEach(t),y5o=r(r6e," (DistilBERT model)"),r6e.forEach(t),L5o=i(H),F1=n(H,"LI",{});var t6e=s(F1);Yie=n(t6e,"STRONG",{});var Tot=s(Yie);x5o=r(Tot,"electra"),Tot.forEach(t),$5o=r(t6e," \u2014 "),hj=n(t6e,"A",{href:!0});var Mot=s(hj);k5o=r(Mot,"ElectraForMaskedLM"),Mot.forEach(t),S5o=r(t6e," (ELECTRA model)"),t6e.forEach(t),R5o=i(H),T1=n(H,"LI",{});var a6e=s(T1);Kie=n(a6e,"STRONG",{});var Eot=s(Kie);P5o=r(Eot,"flaubert"),Eot.forEach(t),B5o=r(a6e," \u2014 "),pj=n(a6e,"A",{href:!0});var Cot=s(pj);I5o=r(Cot,"FlaubertWithLMHeadModel"),Cot.forEach(t),q5o=r(a6e," (FlauBERT model)"),a6e.forEach(t),N5o=i(H),M1=n(H,"LI",{});var n6e=s(M1);Zie=n(n6e,"STRONG",{});var wot=s(Zie);j5o=r(wot,"fnet"),wot.forEach(t),D5o=r(n6e," \u2014 "),uj=n(n6e,"A",{href:!0});var Aot=s(uj);G5o=r(Aot,"FNetForMaskedLM"),Aot.forEach(t),O5o=r(n6e," (FNet model)"),n6e.forEach(t),V5o=i(H),E1=n(H,"LI",{});var s6e=s(E1);ede=n(s6e,"STRONG",{});var yot=s(ede);X5o=r(yot,"funnel"),yot.forEach(t),z5o=r(s6e," \u2014 "),_j=n(s6e,"A",{href:!0});var Lot=s(_j);Q5o=r(Lot,"FunnelForMaskedLM"),Lot.forEach(t),W5o=r(s6e," (Funnel Transformer model)"),s6e.forEach(t),H5o=i(H),C1=n(H,"LI",{});var l6e=s(C1);ode=n(l6e,"STRONG",{});var xot=s(ode);U5o=r(xot,"ibert"),xot.forEach(t),J5o=r(l6e," \u2014 "),bj=n(l6e,"A",{href:!0});var $ot=s(bj);Y5o=r($ot,"IBertForMaskedLM"),$ot.forEach(t),K5o=r(l6e," (I-BERT model)"),l6e.forEach(t),Z5o=i(H),w1=n(H,"LI",{});var i6e=s(w1);rde=n(i6e,"STRONG",{});var kot=s(rde);eCo=r(kot,"layoutlm"),kot.forEach(t),oCo=r(i6e," \u2014 "),vj=n(i6e,"A",{href:!0});var Sot=s(vj);rCo=r(Sot,"LayoutLMForMaskedLM"),Sot.forEach(t),tCo=r(i6e," (LayoutLM model)"),i6e.forEach(t),aCo=i(H),A1=n(H,"LI",{});var d6e=s(A1);tde=n(d6e,"STRONG",{});var Rot=s(tde);nCo=r(Rot,"longformer"),Rot.forEach(t),sCo=r(d6e," \u2014 "),Fj=n(d6e,"A",{href:!0});var Pot=s(Fj);lCo=r(Pot,"LongformerForMaskedLM"),Pot.forEach(t),iCo=r(d6e," (Longformer model)"),d6e.forEach(t),dCo=i(H),y1=n(H,"LI",{});var c6e=s(y1);ade=n(c6e,"STRONG",{});var Bot=s(ade);cCo=r(Bot,"mbart"),Bot.forEach(t),fCo=r(c6e," \u2014 "),Tj=n(c6e,"A",{href:!0});var Iot=s(Tj);mCo=r(Iot,"MBartForConditionalGeneration"),Iot.forEach(t),gCo=r(c6e," (mBART model)"),c6e.forEach(t),hCo=i(H),L1=n(H,"LI",{});var f6e=s(L1);nde=n(f6e,"STRONG",{});var qot=s(nde);pCo=r(qot,"megatron-bert"),qot.forEach(t),uCo=r(f6e," \u2014 "),Mj=n(f6e,"A",{href:!0});var Not=s(Mj);_Co=r(Not,"MegatronBertForMaskedLM"),Not.forEach(t),bCo=r(f6e," (MegatronBert model)"),f6e.forEach(t),vCo=i(H),x1=n(H,"LI",{});var m6e=s(x1);sde=n(m6e,"STRONG",{});var jot=s(sde);FCo=r(jot,"mobilebert"),jot.forEach(t),TCo=r(m6e," \u2014 "),Ej=n(m6e,"A",{href:!0});var Dot=s(Ej);MCo=r(Dot,"MobileBertForMaskedLM"),Dot.forEach(t),ECo=r(m6e," (MobileBERT model)"),m6e.forEach(t),CCo=i(H),$1=n(H,"LI",{});var g6e=s($1);lde=n(g6e,"STRONG",{});var Got=s(lde);wCo=r(Got,"mpnet"),Got.forEach(t),ACo=r(g6e," \u2014 "),Cj=n(g6e,"A",{href:!0});var Oot=s(Cj);yCo=r(Oot,"MPNetForMaskedLM"),Oot.forEach(t),LCo=r(g6e," (MPNet model)"),g6e.forEach(t),xCo=i(H),k1=n(H,"LI",{});var h6e=s(k1);ide=n(h6e,"STRONG",{});var Vot=s(ide);$Co=r(Vot,"nystromformer"),Vot.forEach(t),kCo=r(h6e," \u2014 "),wj=n(h6e,"A",{href:!0});var Xot=s(wj);SCo=r(Xot,"NystromformerForMaskedLM"),Xot.forEach(t),RCo=r(h6e," (Nystromformer model)"),h6e.forEach(t),PCo=i(H),S1=n(H,"LI",{});var p6e=s(S1);dde=n(p6e,"STRONG",{});var zot=s(dde);BCo=r(zot,"perceiver"),zot.forEach(t),ICo=r(p6e," \u2014 "),Aj=n(p6e,"A",{href:!0});var Qot=s(Aj);qCo=r(Qot,"PerceiverForMaskedLM"),Qot.forEach(t),NCo=r(p6e," (Perceiver model)"),p6e.forEach(t),jCo=i(H),R1=n(H,"LI",{});var u6e=s(R1);cde=n(u6e,"STRONG",{});var Wot=s(cde);DCo=r(Wot,"qdqbert"),Wot.forEach(t),GCo=r(u6e," \u2014 "),yj=n(u6e,"A",{href:!0});var Hot=s(yj);OCo=r(Hot,"QDQBertForMaskedLM"),Hot.forEach(t),VCo=r(u6e," (QDQBert model)"),u6e.forEach(t),XCo=i(H),P1=n(H,"LI",{});var _6e=s(P1);fde=n(_6e,"STRONG",{});var Uot=s(fde);zCo=r(Uot,"reformer"),Uot.forEach(t),QCo=r(_6e," \u2014 "),Lj=n(_6e,"A",{href:!0});var Jot=s(Lj);WCo=r(Jot,"ReformerForMaskedLM"),Jot.forEach(t),HCo=r(_6e," (Reformer model)"),_6e.forEach(t),UCo=i(H),B1=n(H,"LI",{});var b6e=s(B1);mde=n(b6e,"STRONG",{});var Yot=s(mde);JCo=r(Yot,"rembert"),Yot.forEach(t),YCo=r(b6e," \u2014 "),xj=n(b6e,"A",{href:!0});var Kot=s(xj);KCo=r(Kot,"RemBertForMaskedLM"),Kot.forEach(t),ZCo=r(b6e," (RemBERT model)"),b6e.forEach(t),e3o=i(H),I1=n(H,"LI",{});var v6e=s(I1);gde=n(v6e,"STRONG",{});var Zot=s(gde);o3o=r(Zot,"roberta"),Zot.forEach(t),r3o=r(v6e," \u2014 "),$j=n(v6e,"A",{href:!0});var ert=s($j);t3o=r(ert,"RobertaForMaskedLM"),ert.forEach(t),a3o=r(v6e," (RoBERTa model)"),v6e.forEach(t),n3o=i(H),q1=n(H,"LI",{});var F6e=s(q1);hde=n(F6e,"STRONG",{});var ort=s(hde);s3o=r(ort,"roformer"),ort.forEach(t),l3o=r(F6e," \u2014 "),kj=n(F6e,"A",{href:!0});var rrt=s(kj);i3o=r(rrt,"RoFormerForMaskedLM"),rrt.forEach(t),d3o=r(F6e," (RoFormer model)"),F6e.forEach(t),c3o=i(H),N1=n(H,"LI",{});var T6e=s(N1);pde=n(T6e,"STRONG",{});var trt=s(pde);f3o=r(trt,"squeezebert"),trt.forEach(t),m3o=r(T6e," \u2014 "),Sj=n(T6e,"A",{href:!0});var art=s(Sj);g3o=r(art,"SqueezeBertForMaskedLM"),art.forEach(t),h3o=r(T6e," (SqueezeBERT model)"),T6e.forEach(t),p3o=i(H),j1=n(H,"LI",{});var M6e=s(j1);ude=n(M6e,"STRONG",{});var nrt=s(ude);u3o=r(nrt,"tapas"),nrt.forEach(t),_3o=r(M6e," \u2014 "),Rj=n(M6e,"A",{href:!0});var srt=s(Rj);b3o=r(srt,"TapasForMaskedLM"),srt.forEach(t),v3o=r(M6e," (TAPAS model)"),M6e.forEach(t),F3o=i(H),D1=n(H,"LI",{});var E6e=s(D1);_de=n(E6e,"STRONG",{});var lrt=s(_de);T3o=r(lrt,"wav2vec2"),lrt.forEach(t),M3o=r(E6e," \u2014 "),bde=n(E6e,"CODE",{});var irt=s(bde);E3o=r(irt,"Wav2Vec2ForMaskedLM"),irt.forEach(t),C3o=r(E6e," (Wav2Vec2 model)"),E6e.forEach(t),w3o=i(H),G1=n(H,"LI",{});var C6e=s(G1);vde=n(C6e,"STRONG",{});var drt=s(vde);A3o=r(drt,"xlm"),drt.forEach(t),y3o=r(C6e," \u2014 "),Pj=n(C6e,"A",{href:!0});var crt=s(Pj);L3o=r(crt,"XLMWithLMHeadModel"),crt.forEach(t),x3o=r(C6e," (XLM model)"),C6e.forEach(t),$3o=i(H),O1=n(H,"LI",{});var w6e=s(O1);Fde=n(w6e,"STRONG",{});var frt=s(Fde);k3o=r(frt,"xlm-roberta"),frt.forEach(t),S3o=r(w6e," \u2014 "),Bj=n(w6e,"A",{href:!0});var mrt=s(Bj);R3o=r(mrt,"XLMRobertaForMaskedLM"),mrt.forEach(t),P3o=r(w6e," (XLM-RoBERTa model)"),w6e.forEach(t),B3o=i(H),V1=n(H,"LI",{});var A6e=s(V1);Tde=n(A6e,"STRONG",{});var grt=s(Tde);I3o=r(grt,"xlm-roberta-xl"),grt.forEach(t),q3o=r(A6e," \u2014 "),Ij=n(A6e,"A",{href:!0});var hrt=s(Ij);N3o=r(hrt,"XLMRobertaXLForMaskedLM"),hrt.forEach(t),j3o=r(A6e," (XLM-RoBERTa-XL model)"),A6e.forEach(t),D3o=i(H),X1=n(H,"LI",{});var y6e=s(X1);Mde=n(y6e,"STRONG",{});var prt=s(Mde);G3o=r(prt,"yoso"),prt.forEach(t),O3o=r(y6e," \u2014 "),qj=n(y6e,"A",{href:!0});var urt=s(qj);V3o=r(urt,"YosoForMaskedLM"),urt.forEach(t),X3o=r(y6e," (YOSO model)"),y6e.forEach(t),H.forEach(t),z3o=i(ra),z1=n(ra,"P",{});var L6e=s(z1);Q3o=r(L6e,"The model is set in evaluation mode by default using "),Ede=n(L6e,"CODE",{});var _rt=s(Ede);W3o=r(_rt,"model.eval()"),_rt.forEach(t),H3o=r(L6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=n(L6e,"CODE",{});var brt=s(Cde);U3o=r(brt,"model.train()"),brt.forEach(t),L6e.forEach(t),J3o=i(ra),T(Q1.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),tIe=i(f),Pi=n(f,"H2",{class:!0});var lNe=s(Pi);W1=n(lNe,"A",{id:!0,class:!0,href:!0});var vrt=s(W1);wde=n(vrt,"SPAN",{});var Frt=s(wde);T(GA.$$.fragment,Frt),Frt.forEach(t),vrt.forEach(t),Y3o=i(lNe),Ade=n(lNe,"SPAN",{});var Trt=s(Ade);K3o=r(Trt,"AutoModelForSeq2SeqLM"),Trt.forEach(t),lNe.forEach(t),aIe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(OA.$$.fragment,Xs),Z3o=i(Xs),Bi=n(Xs,"P",{});var pK=s(Bi);ewo=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Nj=n(pK,"A",{href:!0});var Mrt=s(Nj);owo=r(Mrt,"from_pretrained()"),Mrt.forEach(t),rwo=r(pK," class method or the "),jj=n(pK,"A",{href:!0});var Ert=s(jj);two=r(Ert,"from_config()"),Ert.forEach(t),awo=r(pK,` class
method.`),pK.forEach(t),nwo=i(Xs),VA=n(Xs,"P",{});var iNe=s(VA);swo=r(iNe,"This class cannot be instantiated directly using "),yde=n(iNe,"CODE",{});var Crt=s(yde);lwo=r(Crt,"__init__()"),Crt.forEach(t),iwo=r(iNe," (throws an error)."),iNe.forEach(t),dwo=i(Xs),nt=n(Xs,"DIV",{class:!0});var s3=s(nt);T(XA.$$.fragment,s3),cwo=i(s3),Lde=n(s3,"P",{});var wrt=s(Lde);fwo=r(wrt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wrt.forEach(t),mwo=i(s3),Ii=n(s3,"P",{});var uK=s(Ii);gwo=r(uK,`Note:
Loading a model from its configuration file does `),xde=n(uK,"STRONG",{});var Art=s(xde);hwo=r(Art,"not"),Art.forEach(t),pwo=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dj=n(uK,"A",{href:!0});var yrt=s(Dj);uwo=r(yrt,"from_pretrained()"),yrt.forEach(t),_wo=r(uK," to load the model weights."),uK.forEach(t),bwo=i(s3),T(H1.$$.fragment,s3),s3.forEach(t),vwo=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(zA.$$.fragment,ta),Fwo=i(ta),$de=n(ta,"P",{});var Lrt=s($de);Two=r(Lrt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Lrt.forEach(t),Mwo=i(ta),$a=n(ta,"P",{});var l3=s($a);Ewo=r(l3,"The model class to instantiate is selected based on the "),kde=n(l3,"CODE",{});var xrt=s(kde);Cwo=r(xrt,"model_type"),xrt.forEach(t),wwo=r(l3,` property of the config object (either
passed as an argument or loaded from `),Sde=n(l3,"CODE",{});var $rt=s(Sde);Awo=r($rt,"pretrained_model_name_or_path"),$rt.forEach(t),ywo=r(l3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rde=n(l3,"CODE",{});var krt=s(Rde);Lwo=r(krt,"pretrained_model_name_or_path"),krt.forEach(t),xwo=r(l3,":"),l3.forEach(t),$wo=i(ta),he=n(ta,"UL",{});var ue=s(he);U1=n(ue,"LI",{});var x6e=s(U1);Pde=n(x6e,"STRONG",{});var Srt=s(Pde);kwo=r(Srt,"bart"),Srt.forEach(t),Swo=r(x6e," \u2014 "),Gj=n(x6e,"A",{href:!0});var Rrt=s(Gj);Rwo=r(Rrt,"BartForConditionalGeneration"),Rrt.forEach(t),Pwo=r(x6e," (BART model)"),x6e.forEach(t),Bwo=i(ue),J1=n(ue,"LI",{});var $6e=s(J1);Bde=n($6e,"STRONG",{});var Prt=s(Bde);Iwo=r(Prt,"bigbird_pegasus"),Prt.forEach(t),qwo=r($6e," \u2014 "),Oj=n($6e,"A",{href:!0});var Brt=s(Oj);Nwo=r(Brt,"BigBirdPegasusForConditionalGeneration"),Brt.forEach(t),jwo=r($6e," (BigBirdPegasus model)"),$6e.forEach(t),Dwo=i(ue),Y1=n(ue,"LI",{});var k6e=s(Y1);Ide=n(k6e,"STRONG",{});var Irt=s(Ide);Gwo=r(Irt,"blenderbot"),Irt.forEach(t),Owo=r(k6e," \u2014 "),Vj=n(k6e,"A",{href:!0});var qrt=s(Vj);Vwo=r(qrt,"BlenderbotForConditionalGeneration"),qrt.forEach(t),Xwo=r(k6e," (Blenderbot model)"),k6e.forEach(t),zwo=i(ue),K1=n(ue,"LI",{});var S6e=s(K1);qde=n(S6e,"STRONG",{});var Nrt=s(qde);Qwo=r(Nrt,"blenderbot-small"),Nrt.forEach(t),Wwo=r(S6e," \u2014 "),Xj=n(S6e,"A",{href:!0});var jrt=s(Xj);Hwo=r(jrt,"BlenderbotSmallForConditionalGeneration"),jrt.forEach(t),Uwo=r(S6e," (BlenderbotSmall model)"),S6e.forEach(t),Jwo=i(ue),Z1=n(ue,"LI",{});var R6e=s(Z1);Nde=n(R6e,"STRONG",{});var Drt=s(Nde);Ywo=r(Drt,"encoder-decoder"),Drt.forEach(t),Kwo=r(R6e," \u2014 "),zj=n(R6e,"A",{href:!0});var Grt=s(zj);Zwo=r(Grt,"EncoderDecoderModel"),Grt.forEach(t),eAo=r(R6e," (Encoder decoder model)"),R6e.forEach(t),oAo=i(ue),e8=n(ue,"LI",{});var P6e=s(e8);jde=n(P6e,"STRONG",{});var Ort=s(jde);rAo=r(Ort,"fsmt"),Ort.forEach(t),tAo=r(P6e," \u2014 "),Qj=n(P6e,"A",{href:!0});var Vrt=s(Qj);aAo=r(Vrt,"FSMTForConditionalGeneration"),Vrt.forEach(t),nAo=r(P6e," (FairSeq Machine-Translation model)"),P6e.forEach(t),sAo=i(ue),o8=n(ue,"LI",{});var B6e=s(o8);Dde=n(B6e,"STRONG",{});var Xrt=s(Dde);lAo=r(Xrt,"led"),Xrt.forEach(t),iAo=r(B6e," \u2014 "),Wj=n(B6e,"A",{href:!0});var zrt=s(Wj);dAo=r(zrt,"LEDForConditionalGeneration"),zrt.forEach(t),cAo=r(B6e," (LED model)"),B6e.forEach(t),fAo=i(ue),r8=n(ue,"LI",{});var I6e=s(r8);Gde=n(I6e,"STRONG",{});var Qrt=s(Gde);mAo=r(Qrt,"m2m_100"),Qrt.forEach(t),gAo=r(I6e," \u2014 "),Hj=n(I6e,"A",{href:!0});var Wrt=s(Hj);hAo=r(Wrt,"M2M100ForConditionalGeneration"),Wrt.forEach(t),pAo=r(I6e," (M2M100 model)"),I6e.forEach(t),uAo=i(ue),t8=n(ue,"LI",{});var q6e=s(t8);Ode=n(q6e,"STRONG",{});var Hrt=s(Ode);_Ao=r(Hrt,"marian"),Hrt.forEach(t),bAo=r(q6e," \u2014 "),Uj=n(q6e,"A",{href:!0});var Urt=s(Uj);vAo=r(Urt,"MarianMTModel"),Urt.forEach(t),FAo=r(q6e," (Marian model)"),q6e.forEach(t),TAo=i(ue),a8=n(ue,"LI",{});var N6e=s(a8);Vde=n(N6e,"STRONG",{});var Jrt=s(Vde);MAo=r(Jrt,"mbart"),Jrt.forEach(t),EAo=r(N6e," \u2014 "),Jj=n(N6e,"A",{href:!0});var Yrt=s(Jj);CAo=r(Yrt,"MBartForConditionalGeneration"),Yrt.forEach(t),wAo=r(N6e," (mBART model)"),N6e.forEach(t),AAo=i(ue),n8=n(ue,"LI",{});var j6e=s(n8);Xde=n(j6e,"STRONG",{});var Krt=s(Xde);yAo=r(Krt,"mt5"),Krt.forEach(t),LAo=r(j6e," \u2014 "),Yj=n(j6e,"A",{href:!0});var Zrt=s(Yj);xAo=r(Zrt,"MT5ForConditionalGeneration"),Zrt.forEach(t),$Ao=r(j6e," (mT5 model)"),j6e.forEach(t),kAo=i(ue),s8=n(ue,"LI",{});var D6e=s(s8);zde=n(D6e,"STRONG",{});var ett=s(zde);SAo=r(ett,"pegasus"),ett.forEach(t),RAo=r(D6e," \u2014 "),Kj=n(D6e,"A",{href:!0});var ott=s(Kj);PAo=r(ott,"PegasusForConditionalGeneration"),ott.forEach(t),BAo=r(D6e," (Pegasus model)"),D6e.forEach(t),IAo=i(ue),l8=n(ue,"LI",{});var G6e=s(l8);Qde=n(G6e,"STRONG",{});var rtt=s(Qde);qAo=r(rtt,"plbart"),rtt.forEach(t),NAo=r(G6e," \u2014 "),Zj=n(G6e,"A",{href:!0});var ttt=s(Zj);jAo=r(ttt,"PLBartForConditionalGeneration"),ttt.forEach(t),DAo=r(G6e," (PLBart model)"),G6e.forEach(t),GAo=i(ue),i8=n(ue,"LI",{});var O6e=s(i8);Wde=n(O6e,"STRONG",{});var att=s(Wde);OAo=r(att,"prophetnet"),att.forEach(t),VAo=r(O6e," \u2014 "),eD=n(O6e,"A",{href:!0});var ntt=s(eD);XAo=r(ntt,"ProphetNetForConditionalGeneration"),ntt.forEach(t),zAo=r(O6e," (ProphetNet model)"),O6e.forEach(t),QAo=i(ue),d8=n(ue,"LI",{});var V6e=s(d8);Hde=n(V6e,"STRONG",{});var stt=s(Hde);WAo=r(stt,"t5"),stt.forEach(t),HAo=r(V6e," \u2014 "),oD=n(V6e,"A",{href:!0});var ltt=s(oD);UAo=r(ltt,"T5ForConditionalGeneration"),ltt.forEach(t),JAo=r(V6e," (T5 model)"),V6e.forEach(t),YAo=i(ue),c8=n(ue,"LI",{});var X6e=s(c8);Ude=n(X6e,"STRONG",{});var itt=s(Ude);KAo=r(itt,"tapex"),itt.forEach(t),ZAo=r(X6e," \u2014 "),rD=n(X6e,"A",{href:!0});var dtt=s(rD);e6o=r(dtt,"BartForConditionalGeneration"),dtt.forEach(t),o6o=r(X6e," (TAPEX model)"),X6e.forEach(t),r6o=i(ue),f8=n(ue,"LI",{});var z6e=s(f8);Jde=n(z6e,"STRONG",{});var ctt=s(Jde);t6o=r(ctt,"xlm-prophetnet"),ctt.forEach(t),a6o=r(z6e," \u2014 "),tD=n(z6e,"A",{href:!0});var ftt=s(tD);n6o=r(ftt,"XLMProphetNetForConditionalGeneration"),ftt.forEach(t),s6o=r(z6e," (XLMProphetNet model)"),z6e.forEach(t),ue.forEach(t),l6o=i(ta),m8=n(ta,"P",{});var Q6e=s(m8);i6o=r(Q6e,"The model is set in evaluation mode by default using "),Yde=n(Q6e,"CODE",{});var mtt=s(Yde);d6o=r(mtt,"model.eval()"),mtt.forEach(t),c6o=r(Q6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kde=n(Q6e,"CODE",{});var gtt=s(Kde);f6o=r(gtt,"model.train()"),gtt.forEach(t),Q6e.forEach(t),m6o=i(ta),T(g8.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),nIe=i(f),qi=n(f,"H2",{class:!0});var dNe=s(qi);h8=n(dNe,"A",{id:!0,class:!0,href:!0});var htt=s(h8);Zde=n(htt,"SPAN",{});var ptt=s(Zde);T(QA.$$.fragment,ptt),ptt.forEach(t),htt.forEach(t),g6o=i(dNe),ece=n(dNe,"SPAN",{});var utt=s(ece);h6o=r(utt,"AutoModelForSequenceClassification"),utt.forEach(t),dNe.forEach(t),sIe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(WA.$$.fragment,zs),p6o=i(zs),Ni=n(zs,"P",{});var _K=s(Ni);u6o=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),aD=n(_K,"A",{href:!0});var _tt=s(aD);_6o=r(_tt,"from_pretrained()"),_tt.forEach(t),b6o=r(_K," class method or the "),nD=n(_K,"A",{href:!0});var btt=s(nD);v6o=r(btt,"from_config()"),btt.forEach(t),F6o=r(_K,` class
method.`),_K.forEach(t),T6o=i(zs),HA=n(zs,"P",{});var cNe=s(HA);M6o=r(cNe,"This class cannot be instantiated directly using "),oce=n(cNe,"CODE",{});var vtt=s(oce);E6o=r(vtt,"__init__()"),vtt.forEach(t),C6o=r(cNe," (throws an error)."),cNe.forEach(t),w6o=i(zs),st=n(zs,"DIV",{class:!0});var i3=s(st);T(UA.$$.fragment,i3),A6o=i(i3),rce=n(i3,"P",{});var Ftt=s(rce);y6o=r(Ftt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ftt.forEach(t),L6o=i(i3),ji=n(i3,"P",{});var bK=s(ji);x6o=r(bK,`Note:
Loading a model from its configuration file does `),tce=n(bK,"STRONG",{});var Ttt=s(tce);$6o=r(Ttt,"not"),Ttt.forEach(t),k6o=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sD=n(bK,"A",{href:!0});var Mtt=s(sD);S6o=r(Mtt,"from_pretrained()"),Mtt.forEach(t),R6o=r(bK," to load the model weights."),bK.forEach(t),P6o=i(i3),T(p8.$$.fragment,i3),i3.forEach(t),B6o=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(JA.$$.fragment,aa),I6o=i(aa),ace=n(aa,"P",{});var Ett=s(ace);q6o=r(Ett,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ett.forEach(t),N6o=i(aa),ka=n(aa,"P",{});var d3=s(ka);j6o=r(d3,"The model class to instantiate is selected based on the "),nce=n(d3,"CODE",{});var Ctt=s(nce);D6o=r(Ctt,"model_type"),Ctt.forEach(t),G6o=r(d3,` property of the config object (either
passed as an argument or loaded from `),sce=n(d3,"CODE",{});var wtt=s(sce);O6o=r(wtt,"pretrained_model_name_or_path"),wtt.forEach(t),V6o=r(d3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lce=n(d3,"CODE",{});var Att=s(lce);X6o=r(Att,"pretrained_model_name_or_path"),Att.forEach(t),z6o=r(d3,":"),d3.forEach(t),Q6o=i(aa),q=n(aa,"UL",{});var j=s(q);u8=n(j,"LI",{});var W6e=s(u8);ice=n(W6e,"STRONG",{});var ytt=s(ice);W6o=r(ytt,"albert"),ytt.forEach(t),H6o=r(W6e," \u2014 "),lD=n(W6e,"A",{href:!0});var Ltt=s(lD);U6o=r(Ltt,"AlbertForSequenceClassification"),Ltt.forEach(t),J6o=r(W6e," (ALBERT model)"),W6e.forEach(t),Y6o=i(j),_8=n(j,"LI",{});var H6e=s(_8);dce=n(H6e,"STRONG",{});var xtt=s(dce);K6o=r(xtt,"bart"),xtt.forEach(t),Z6o=r(H6e," \u2014 "),iD=n(H6e,"A",{href:!0});var $tt=s(iD);eyo=r($tt,"BartForSequenceClassification"),$tt.forEach(t),oyo=r(H6e," (BART model)"),H6e.forEach(t),ryo=i(j),b8=n(j,"LI",{});var U6e=s(b8);cce=n(U6e,"STRONG",{});var ktt=s(cce);tyo=r(ktt,"bert"),ktt.forEach(t),ayo=r(U6e," \u2014 "),dD=n(U6e,"A",{href:!0});var Stt=s(dD);nyo=r(Stt,"BertForSequenceClassification"),Stt.forEach(t),syo=r(U6e," (BERT model)"),U6e.forEach(t),lyo=i(j),v8=n(j,"LI",{});var J6e=s(v8);fce=n(J6e,"STRONG",{});var Rtt=s(fce);iyo=r(Rtt,"big_bird"),Rtt.forEach(t),dyo=r(J6e," \u2014 "),cD=n(J6e,"A",{href:!0});var Ptt=s(cD);cyo=r(Ptt,"BigBirdForSequenceClassification"),Ptt.forEach(t),fyo=r(J6e," (BigBird model)"),J6e.forEach(t),myo=i(j),F8=n(j,"LI",{});var Y6e=s(F8);mce=n(Y6e,"STRONG",{});var Btt=s(mce);gyo=r(Btt,"bigbird_pegasus"),Btt.forEach(t),hyo=r(Y6e," \u2014 "),fD=n(Y6e,"A",{href:!0});var Itt=s(fD);pyo=r(Itt,"BigBirdPegasusForSequenceClassification"),Itt.forEach(t),uyo=r(Y6e," (BigBirdPegasus model)"),Y6e.forEach(t),_yo=i(j),T8=n(j,"LI",{});var K6e=s(T8);gce=n(K6e,"STRONG",{});var qtt=s(gce);byo=r(qtt,"camembert"),qtt.forEach(t),vyo=r(K6e," \u2014 "),mD=n(K6e,"A",{href:!0});var Ntt=s(mD);Fyo=r(Ntt,"CamembertForSequenceClassification"),Ntt.forEach(t),Tyo=r(K6e," (CamemBERT model)"),K6e.forEach(t),Myo=i(j),M8=n(j,"LI",{});var Z6e=s(M8);hce=n(Z6e,"STRONG",{});var jtt=s(hce);Eyo=r(jtt,"canine"),jtt.forEach(t),Cyo=r(Z6e," \u2014 "),gD=n(Z6e,"A",{href:!0});var Dtt=s(gD);wyo=r(Dtt,"CanineForSequenceClassification"),Dtt.forEach(t),Ayo=r(Z6e," (Canine model)"),Z6e.forEach(t),yyo=i(j),E8=n(j,"LI",{});var eye=s(E8);pce=n(eye,"STRONG",{});var Gtt=s(pce);Lyo=r(Gtt,"convbert"),Gtt.forEach(t),xyo=r(eye," \u2014 "),hD=n(eye,"A",{href:!0});var Ott=s(hD);$yo=r(Ott,"ConvBertForSequenceClassification"),Ott.forEach(t),kyo=r(eye," (ConvBERT model)"),eye.forEach(t),Syo=i(j),C8=n(j,"LI",{});var oye=s(C8);uce=n(oye,"STRONG",{});var Vtt=s(uce);Ryo=r(Vtt,"ctrl"),Vtt.forEach(t),Pyo=r(oye," \u2014 "),pD=n(oye,"A",{href:!0});var Xtt=s(pD);Byo=r(Xtt,"CTRLForSequenceClassification"),Xtt.forEach(t),Iyo=r(oye," (CTRL model)"),oye.forEach(t),qyo=i(j),w8=n(j,"LI",{});var rye=s(w8);_ce=n(rye,"STRONG",{});var ztt=s(_ce);Nyo=r(ztt,"data2vec-text"),ztt.forEach(t),jyo=r(rye," \u2014 "),uD=n(rye,"A",{href:!0});var Qtt=s(uD);Dyo=r(Qtt,"Data2VecTextForSequenceClassification"),Qtt.forEach(t),Gyo=r(rye," (Data2VecText model)"),rye.forEach(t),Oyo=i(j),A8=n(j,"LI",{});var tye=s(A8);bce=n(tye,"STRONG",{});var Wtt=s(bce);Vyo=r(Wtt,"deberta"),Wtt.forEach(t),Xyo=r(tye," \u2014 "),_D=n(tye,"A",{href:!0});var Htt=s(_D);zyo=r(Htt,"DebertaForSequenceClassification"),Htt.forEach(t),Qyo=r(tye," (DeBERTa model)"),tye.forEach(t),Wyo=i(j),y8=n(j,"LI",{});var aye=s(y8);vce=n(aye,"STRONG",{});var Utt=s(vce);Hyo=r(Utt,"deberta-v2"),Utt.forEach(t),Uyo=r(aye," \u2014 "),bD=n(aye,"A",{href:!0});var Jtt=s(bD);Jyo=r(Jtt,"DebertaV2ForSequenceClassification"),Jtt.forEach(t),Yyo=r(aye," (DeBERTa-v2 model)"),aye.forEach(t),Kyo=i(j),L8=n(j,"LI",{});var nye=s(L8);Fce=n(nye,"STRONG",{});var Ytt=s(Fce);Zyo=r(Ytt,"distilbert"),Ytt.forEach(t),eLo=r(nye," \u2014 "),vD=n(nye,"A",{href:!0});var Ktt=s(vD);oLo=r(Ktt,"DistilBertForSequenceClassification"),Ktt.forEach(t),rLo=r(nye," (DistilBERT model)"),nye.forEach(t),tLo=i(j),x8=n(j,"LI",{});var sye=s(x8);Tce=n(sye,"STRONG",{});var Ztt=s(Tce);aLo=r(Ztt,"electra"),Ztt.forEach(t),nLo=r(sye," \u2014 "),FD=n(sye,"A",{href:!0});var eat=s(FD);sLo=r(eat,"ElectraForSequenceClassification"),eat.forEach(t),lLo=r(sye," (ELECTRA model)"),sye.forEach(t),iLo=i(j),$8=n(j,"LI",{});var lye=s($8);Mce=n(lye,"STRONG",{});var oat=s(Mce);dLo=r(oat,"flaubert"),oat.forEach(t),cLo=r(lye," \u2014 "),TD=n(lye,"A",{href:!0});var rat=s(TD);fLo=r(rat,"FlaubertForSequenceClassification"),rat.forEach(t),mLo=r(lye," (FlauBERT model)"),lye.forEach(t),gLo=i(j),k8=n(j,"LI",{});var iye=s(k8);Ece=n(iye,"STRONG",{});var tat=s(Ece);hLo=r(tat,"fnet"),tat.forEach(t),pLo=r(iye," \u2014 "),MD=n(iye,"A",{href:!0});var aat=s(MD);uLo=r(aat,"FNetForSequenceClassification"),aat.forEach(t),_Lo=r(iye," (FNet model)"),iye.forEach(t),bLo=i(j),S8=n(j,"LI",{});var dye=s(S8);Cce=n(dye,"STRONG",{});var nat=s(Cce);vLo=r(nat,"funnel"),nat.forEach(t),FLo=r(dye," \u2014 "),ED=n(dye,"A",{href:!0});var sat=s(ED);TLo=r(sat,"FunnelForSequenceClassification"),sat.forEach(t),MLo=r(dye," (Funnel Transformer model)"),dye.forEach(t),ELo=i(j),R8=n(j,"LI",{});var cye=s(R8);wce=n(cye,"STRONG",{});var lat=s(wce);CLo=r(lat,"gpt2"),lat.forEach(t),wLo=r(cye," \u2014 "),CD=n(cye,"A",{href:!0});var iat=s(CD);ALo=r(iat,"GPT2ForSequenceClassification"),iat.forEach(t),yLo=r(cye," (OpenAI GPT-2 model)"),cye.forEach(t),LLo=i(j),P8=n(j,"LI",{});var fye=s(P8);Ace=n(fye,"STRONG",{});var dat=s(Ace);xLo=r(dat,"gpt_neo"),dat.forEach(t),$Lo=r(fye," \u2014 "),wD=n(fye,"A",{href:!0});var cat=s(wD);kLo=r(cat,"GPTNeoForSequenceClassification"),cat.forEach(t),SLo=r(fye," (GPT Neo model)"),fye.forEach(t),RLo=i(j),B8=n(j,"LI",{});var mye=s(B8);yce=n(mye,"STRONG",{});var fat=s(yce);PLo=r(fat,"gptj"),fat.forEach(t),BLo=r(mye," \u2014 "),AD=n(mye,"A",{href:!0});var mat=s(AD);ILo=r(mat,"GPTJForSequenceClassification"),mat.forEach(t),qLo=r(mye," (GPT-J model)"),mye.forEach(t),NLo=i(j),I8=n(j,"LI",{});var gye=s(I8);Lce=n(gye,"STRONG",{});var gat=s(Lce);jLo=r(gat,"ibert"),gat.forEach(t),DLo=r(gye," \u2014 "),yD=n(gye,"A",{href:!0});var hat=s(yD);GLo=r(hat,"IBertForSequenceClassification"),hat.forEach(t),OLo=r(gye," (I-BERT model)"),gye.forEach(t),VLo=i(j),q8=n(j,"LI",{});var hye=s(q8);xce=n(hye,"STRONG",{});var pat=s(xce);XLo=r(pat,"layoutlm"),pat.forEach(t),zLo=r(hye," \u2014 "),LD=n(hye,"A",{href:!0});var uat=s(LD);QLo=r(uat,"LayoutLMForSequenceClassification"),uat.forEach(t),WLo=r(hye," (LayoutLM model)"),hye.forEach(t),HLo=i(j),N8=n(j,"LI",{});var pye=s(N8);$ce=n(pye,"STRONG",{});var _at=s($ce);ULo=r(_at,"layoutlmv2"),_at.forEach(t),JLo=r(pye," \u2014 "),xD=n(pye,"A",{href:!0});var bat=s(xD);YLo=r(bat,"LayoutLMv2ForSequenceClassification"),bat.forEach(t),KLo=r(pye," (LayoutLMv2 model)"),pye.forEach(t),ZLo=i(j),j8=n(j,"LI",{});var uye=s(j8);kce=n(uye,"STRONG",{});var vat=s(kce);exo=r(vat,"led"),vat.forEach(t),oxo=r(uye," \u2014 "),$D=n(uye,"A",{href:!0});var Fat=s($D);rxo=r(Fat,"LEDForSequenceClassification"),Fat.forEach(t),txo=r(uye," (LED model)"),uye.forEach(t),axo=i(j),D8=n(j,"LI",{});var _ye=s(D8);Sce=n(_ye,"STRONG",{});var Tat=s(Sce);nxo=r(Tat,"longformer"),Tat.forEach(t),sxo=r(_ye," \u2014 "),kD=n(_ye,"A",{href:!0});var Mat=s(kD);lxo=r(Mat,"LongformerForSequenceClassification"),Mat.forEach(t),ixo=r(_ye," (Longformer model)"),_ye.forEach(t),dxo=i(j),G8=n(j,"LI",{});var bye=s(G8);Rce=n(bye,"STRONG",{});var Eat=s(Rce);cxo=r(Eat,"mbart"),Eat.forEach(t),fxo=r(bye," \u2014 "),SD=n(bye,"A",{href:!0});var Cat=s(SD);mxo=r(Cat,"MBartForSequenceClassification"),Cat.forEach(t),gxo=r(bye," (mBART model)"),bye.forEach(t),hxo=i(j),O8=n(j,"LI",{});var vye=s(O8);Pce=n(vye,"STRONG",{});var wat=s(Pce);pxo=r(wat,"megatron-bert"),wat.forEach(t),uxo=r(vye," \u2014 "),RD=n(vye,"A",{href:!0});var Aat=s(RD);_xo=r(Aat,"MegatronBertForSequenceClassification"),Aat.forEach(t),bxo=r(vye," (MegatronBert model)"),vye.forEach(t),vxo=i(j),V8=n(j,"LI",{});var Fye=s(V8);Bce=n(Fye,"STRONG",{});var yat=s(Bce);Fxo=r(yat,"mobilebert"),yat.forEach(t),Txo=r(Fye," \u2014 "),PD=n(Fye,"A",{href:!0});var Lat=s(PD);Mxo=r(Lat,"MobileBertForSequenceClassification"),Lat.forEach(t),Exo=r(Fye," (MobileBERT model)"),Fye.forEach(t),Cxo=i(j),X8=n(j,"LI",{});var Tye=s(X8);Ice=n(Tye,"STRONG",{});var xat=s(Ice);wxo=r(xat,"mpnet"),xat.forEach(t),Axo=r(Tye," \u2014 "),BD=n(Tye,"A",{href:!0});var $at=s(BD);yxo=r($at,"MPNetForSequenceClassification"),$at.forEach(t),Lxo=r(Tye," (MPNet model)"),Tye.forEach(t),xxo=i(j),z8=n(j,"LI",{});var Mye=s(z8);qce=n(Mye,"STRONG",{});var kat=s(qce);$xo=r(kat,"nystromformer"),kat.forEach(t),kxo=r(Mye," \u2014 "),ID=n(Mye,"A",{href:!0});var Sat=s(ID);Sxo=r(Sat,"NystromformerForSequenceClassification"),Sat.forEach(t),Rxo=r(Mye," (Nystromformer model)"),Mye.forEach(t),Pxo=i(j),Q8=n(j,"LI",{});var Eye=s(Q8);Nce=n(Eye,"STRONG",{});var Rat=s(Nce);Bxo=r(Rat,"openai-gpt"),Rat.forEach(t),Ixo=r(Eye," \u2014 "),qD=n(Eye,"A",{href:!0});var Pat=s(qD);qxo=r(Pat,"OpenAIGPTForSequenceClassification"),Pat.forEach(t),Nxo=r(Eye," (OpenAI GPT model)"),Eye.forEach(t),jxo=i(j),W8=n(j,"LI",{});var Cye=s(W8);jce=n(Cye,"STRONG",{});var Bat=s(jce);Dxo=r(Bat,"perceiver"),Bat.forEach(t),Gxo=r(Cye," \u2014 "),ND=n(Cye,"A",{href:!0});var Iat=s(ND);Oxo=r(Iat,"PerceiverForSequenceClassification"),Iat.forEach(t),Vxo=r(Cye," (Perceiver model)"),Cye.forEach(t),Xxo=i(j),H8=n(j,"LI",{});var wye=s(H8);Dce=n(wye,"STRONG",{});var qat=s(Dce);zxo=r(qat,"plbart"),qat.forEach(t),Qxo=r(wye," \u2014 "),jD=n(wye,"A",{href:!0});var Nat=s(jD);Wxo=r(Nat,"PLBartForSequenceClassification"),Nat.forEach(t),Hxo=r(wye," (PLBart model)"),wye.forEach(t),Uxo=i(j),U8=n(j,"LI",{});var Aye=s(U8);Gce=n(Aye,"STRONG",{});var jat=s(Gce);Jxo=r(jat,"qdqbert"),jat.forEach(t),Yxo=r(Aye," \u2014 "),DD=n(Aye,"A",{href:!0});var Dat=s(DD);Kxo=r(Dat,"QDQBertForSequenceClassification"),Dat.forEach(t),Zxo=r(Aye," (QDQBert model)"),Aye.forEach(t),e9o=i(j),J8=n(j,"LI",{});var yye=s(J8);Oce=n(yye,"STRONG",{});var Gat=s(Oce);o9o=r(Gat,"reformer"),Gat.forEach(t),r9o=r(yye," \u2014 "),GD=n(yye,"A",{href:!0});var Oat=s(GD);t9o=r(Oat,"ReformerForSequenceClassification"),Oat.forEach(t),a9o=r(yye," (Reformer model)"),yye.forEach(t),n9o=i(j),Y8=n(j,"LI",{});var Lye=s(Y8);Vce=n(Lye,"STRONG",{});var Vat=s(Vce);s9o=r(Vat,"rembert"),Vat.forEach(t),l9o=r(Lye," \u2014 "),OD=n(Lye,"A",{href:!0});var Xat=s(OD);i9o=r(Xat,"RemBertForSequenceClassification"),Xat.forEach(t),d9o=r(Lye," (RemBERT model)"),Lye.forEach(t),c9o=i(j),K8=n(j,"LI",{});var xye=s(K8);Xce=n(xye,"STRONG",{});var zat=s(Xce);f9o=r(zat,"roberta"),zat.forEach(t),m9o=r(xye," \u2014 "),VD=n(xye,"A",{href:!0});var Qat=s(VD);g9o=r(Qat,"RobertaForSequenceClassification"),Qat.forEach(t),h9o=r(xye," (RoBERTa model)"),xye.forEach(t),p9o=i(j),Z8=n(j,"LI",{});var $ye=s(Z8);zce=n($ye,"STRONG",{});var Wat=s(zce);u9o=r(Wat,"roformer"),Wat.forEach(t),_9o=r($ye," \u2014 "),XD=n($ye,"A",{href:!0});var Hat=s(XD);b9o=r(Hat,"RoFormerForSequenceClassification"),Hat.forEach(t),v9o=r($ye," (RoFormer model)"),$ye.forEach(t),F9o=i(j),eb=n(j,"LI",{});var kye=s(eb);Qce=n(kye,"STRONG",{});var Uat=s(Qce);T9o=r(Uat,"squeezebert"),Uat.forEach(t),M9o=r(kye," \u2014 "),zD=n(kye,"A",{href:!0});var Jat=s(zD);E9o=r(Jat,"SqueezeBertForSequenceClassification"),Jat.forEach(t),C9o=r(kye," (SqueezeBERT model)"),kye.forEach(t),w9o=i(j),ob=n(j,"LI",{});var Sye=s(ob);Wce=n(Sye,"STRONG",{});var Yat=s(Wce);A9o=r(Yat,"tapas"),Yat.forEach(t),y9o=r(Sye," \u2014 "),QD=n(Sye,"A",{href:!0});var Kat=s(QD);L9o=r(Kat,"TapasForSequenceClassification"),Kat.forEach(t),x9o=r(Sye," (TAPAS model)"),Sye.forEach(t),$9o=i(j),rb=n(j,"LI",{});var Rye=s(rb);Hce=n(Rye,"STRONG",{});var Zat=s(Hce);k9o=r(Zat,"tapex"),Zat.forEach(t),S9o=r(Rye," \u2014 "),WD=n(Rye,"A",{href:!0});var ent=s(WD);R9o=r(ent,"BartForSequenceClassification"),ent.forEach(t),P9o=r(Rye," (TAPEX model)"),Rye.forEach(t),B9o=i(j),tb=n(j,"LI",{});var Pye=s(tb);Uce=n(Pye,"STRONG",{});var ont=s(Uce);I9o=r(ont,"transfo-xl"),ont.forEach(t),q9o=r(Pye," \u2014 "),HD=n(Pye,"A",{href:!0});var rnt=s(HD);N9o=r(rnt,"TransfoXLForSequenceClassification"),rnt.forEach(t),j9o=r(Pye," (Transformer-XL model)"),Pye.forEach(t),D9o=i(j),ab=n(j,"LI",{});var Bye=s(ab);Jce=n(Bye,"STRONG",{});var tnt=s(Jce);G9o=r(tnt,"xlm"),tnt.forEach(t),O9o=r(Bye," \u2014 "),UD=n(Bye,"A",{href:!0});var ant=s(UD);V9o=r(ant,"XLMForSequenceClassification"),ant.forEach(t),X9o=r(Bye," (XLM model)"),Bye.forEach(t),z9o=i(j),nb=n(j,"LI",{});var Iye=s(nb);Yce=n(Iye,"STRONG",{});var nnt=s(Yce);Q9o=r(nnt,"xlm-roberta"),nnt.forEach(t),W9o=r(Iye," \u2014 "),JD=n(Iye,"A",{href:!0});var snt=s(JD);H9o=r(snt,"XLMRobertaForSequenceClassification"),snt.forEach(t),U9o=r(Iye," (XLM-RoBERTa model)"),Iye.forEach(t),J9o=i(j),sb=n(j,"LI",{});var qye=s(sb);Kce=n(qye,"STRONG",{});var lnt=s(Kce);Y9o=r(lnt,"xlm-roberta-xl"),lnt.forEach(t),K9o=r(qye," \u2014 "),YD=n(qye,"A",{href:!0});var int=s(YD);Z9o=r(int,"XLMRobertaXLForSequenceClassification"),int.forEach(t),e$o=r(qye," (XLM-RoBERTa-XL model)"),qye.forEach(t),o$o=i(j),lb=n(j,"LI",{});var Nye=s(lb);Zce=n(Nye,"STRONG",{});var dnt=s(Zce);r$o=r(dnt,"xlnet"),dnt.forEach(t),t$o=r(Nye," \u2014 "),KD=n(Nye,"A",{href:!0});var cnt=s(KD);a$o=r(cnt,"XLNetForSequenceClassification"),cnt.forEach(t),n$o=r(Nye," (XLNet model)"),Nye.forEach(t),s$o=i(j),ib=n(j,"LI",{});var jye=s(ib);efe=n(jye,"STRONG",{});var fnt=s(efe);l$o=r(fnt,"yoso"),fnt.forEach(t),i$o=r(jye," \u2014 "),ZD=n(jye,"A",{href:!0});var mnt=s(ZD);d$o=r(mnt,"YosoForSequenceClassification"),mnt.forEach(t),c$o=r(jye," (YOSO model)"),jye.forEach(t),j.forEach(t),f$o=i(aa),db=n(aa,"P",{});var Dye=s(db);m$o=r(Dye,"The model is set in evaluation mode by default using "),ofe=n(Dye,"CODE",{});var gnt=s(ofe);g$o=r(gnt,"model.eval()"),gnt.forEach(t),h$o=r(Dye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rfe=n(Dye,"CODE",{});var hnt=s(rfe);p$o=r(hnt,"model.train()"),hnt.forEach(t),Dye.forEach(t),u$o=i(aa),T(cb.$$.fragment,aa),aa.forEach(t),zs.forEach(t),lIe=i(f),Di=n(f,"H2",{class:!0});var fNe=s(Di);fb=n(fNe,"A",{id:!0,class:!0,href:!0});var pnt=s(fb);tfe=n(pnt,"SPAN",{});var unt=s(tfe);T(YA.$$.fragment,unt),unt.forEach(t),pnt.forEach(t),_$o=i(fNe),afe=n(fNe,"SPAN",{});var _nt=s(afe);b$o=r(_nt,"AutoModelForMultipleChoice"),_nt.forEach(t),fNe.forEach(t),iIe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(KA.$$.fragment,Qs),v$o=i(Qs),Gi=n(Qs,"P",{});var vK=s(Gi);F$o=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eG=n(vK,"A",{href:!0});var bnt=s(eG);T$o=r(bnt,"from_pretrained()"),bnt.forEach(t),M$o=r(vK," class method or the "),oG=n(vK,"A",{href:!0});var vnt=s(oG);E$o=r(vnt,"from_config()"),vnt.forEach(t),C$o=r(vK,` class
method.`),vK.forEach(t),w$o=i(Qs),ZA=n(Qs,"P",{});var mNe=s(ZA);A$o=r(mNe,"This class cannot be instantiated directly using "),nfe=n(mNe,"CODE",{});var Fnt=s(nfe);y$o=r(Fnt,"__init__()"),Fnt.forEach(t),L$o=r(mNe," (throws an error)."),mNe.forEach(t),x$o=i(Qs),lt=n(Qs,"DIV",{class:!0});var c3=s(lt);T(e6.$$.fragment,c3),$$o=i(c3),sfe=n(c3,"P",{});var Tnt=s(sfe);k$o=r(Tnt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Tnt.forEach(t),S$o=i(c3),Oi=n(c3,"P",{});var FK=s(Oi);R$o=r(FK,`Note:
Loading a model from its configuration file does `),lfe=n(FK,"STRONG",{});var Mnt=s(lfe);P$o=r(Mnt,"not"),Mnt.forEach(t),B$o=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=n(FK,"A",{href:!0});var Ent=s(rG);I$o=r(Ent,"from_pretrained()"),Ent.forEach(t),q$o=r(FK," to load the model weights."),FK.forEach(t),N$o=i(c3),T(mb.$$.fragment,c3),c3.forEach(t),j$o=i(Qs),eo=n(Qs,"DIV",{class:!0});var na=s(eo);T(o6.$$.fragment,na),D$o=i(na),ife=n(na,"P",{});var Cnt=s(ife);G$o=r(Cnt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Cnt.forEach(t),O$o=i(na),Sa=n(na,"P",{});var f3=s(Sa);V$o=r(f3,"The model class to instantiate is selected based on the "),dfe=n(f3,"CODE",{});var wnt=s(dfe);X$o=r(wnt,"model_type"),wnt.forEach(t),z$o=r(f3,` property of the config object (either
passed as an argument or loaded from `),cfe=n(f3,"CODE",{});var Ant=s(cfe);Q$o=r(Ant,"pretrained_model_name_or_path"),Ant.forEach(t),W$o=r(f3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ffe=n(f3,"CODE",{});var ynt=s(ffe);H$o=r(ynt,"pretrained_model_name_or_path"),ynt.forEach(t),U$o=r(f3,":"),f3.forEach(t),J$o=i(na),Y=n(na,"UL",{});var K=s(Y);gb=n(K,"LI",{});var Gye=s(gb);mfe=n(Gye,"STRONG",{});var Lnt=s(mfe);Y$o=r(Lnt,"albert"),Lnt.forEach(t),K$o=r(Gye," \u2014 "),tG=n(Gye,"A",{href:!0});var xnt=s(tG);Z$o=r(xnt,"AlbertForMultipleChoice"),xnt.forEach(t),eko=r(Gye," (ALBERT model)"),Gye.forEach(t),oko=i(K),hb=n(K,"LI",{});var Oye=s(hb);gfe=n(Oye,"STRONG",{});var $nt=s(gfe);rko=r($nt,"bert"),$nt.forEach(t),tko=r(Oye," \u2014 "),aG=n(Oye,"A",{href:!0});var knt=s(aG);ako=r(knt,"BertForMultipleChoice"),knt.forEach(t),nko=r(Oye," (BERT model)"),Oye.forEach(t),sko=i(K),pb=n(K,"LI",{});var Vye=s(pb);hfe=n(Vye,"STRONG",{});var Snt=s(hfe);lko=r(Snt,"big_bird"),Snt.forEach(t),iko=r(Vye," \u2014 "),nG=n(Vye,"A",{href:!0});var Rnt=s(nG);dko=r(Rnt,"BigBirdForMultipleChoice"),Rnt.forEach(t),cko=r(Vye," (BigBird model)"),Vye.forEach(t),fko=i(K),ub=n(K,"LI",{});var Xye=s(ub);pfe=n(Xye,"STRONG",{});var Pnt=s(pfe);mko=r(Pnt,"camembert"),Pnt.forEach(t),gko=r(Xye," \u2014 "),sG=n(Xye,"A",{href:!0});var Bnt=s(sG);hko=r(Bnt,"CamembertForMultipleChoice"),Bnt.forEach(t),pko=r(Xye," (CamemBERT model)"),Xye.forEach(t),uko=i(K),_b=n(K,"LI",{});var zye=s(_b);ufe=n(zye,"STRONG",{});var Int=s(ufe);_ko=r(Int,"canine"),Int.forEach(t),bko=r(zye," \u2014 "),lG=n(zye,"A",{href:!0});var qnt=s(lG);vko=r(qnt,"CanineForMultipleChoice"),qnt.forEach(t),Fko=r(zye," (Canine model)"),zye.forEach(t),Tko=i(K),bb=n(K,"LI",{});var Qye=s(bb);_fe=n(Qye,"STRONG",{});var Nnt=s(_fe);Mko=r(Nnt,"convbert"),Nnt.forEach(t),Eko=r(Qye," \u2014 "),iG=n(Qye,"A",{href:!0});var jnt=s(iG);Cko=r(jnt,"ConvBertForMultipleChoice"),jnt.forEach(t),wko=r(Qye," (ConvBERT model)"),Qye.forEach(t),Ako=i(K),vb=n(K,"LI",{});var Wye=s(vb);bfe=n(Wye,"STRONG",{});var Dnt=s(bfe);yko=r(Dnt,"data2vec-text"),Dnt.forEach(t),Lko=r(Wye," \u2014 "),dG=n(Wye,"A",{href:!0});var Gnt=s(dG);xko=r(Gnt,"Data2VecTextForMultipleChoice"),Gnt.forEach(t),$ko=r(Wye," (Data2VecText model)"),Wye.forEach(t),kko=i(K),Fb=n(K,"LI",{});var Hye=s(Fb);vfe=n(Hye,"STRONG",{});var Ont=s(vfe);Sko=r(Ont,"deberta-v2"),Ont.forEach(t),Rko=r(Hye," \u2014 "),cG=n(Hye,"A",{href:!0});var Vnt=s(cG);Pko=r(Vnt,"DebertaV2ForMultipleChoice"),Vnt.forEach(t),Bko=r(Hye," (DeBERTa-v2 model)"),Hye.forEach(t),Iko=i(K),Tb=n(K,"LI",{});var Uye=s(Tb);Ffe=n(Uye,"STRONG",{});var Xnt=s(Ffe);qko=r(Xnt,"distilbert"),Xnt.forEach(t),Nko=r(Uye," \u2014 "),fG=n(Uye,"A",{href:!0});var znt=s(fG);jko=r(znt,"DistilBertForMultipleChoice"),znt.forEach(t),Dko=r(Uye," (DistilBERT model)"),Uye.forEach(t),Gko=i(K),Mb=n(K,"LI",{});var Jye=s(Mb);Tfe=n(Jye,"STRONG",{});var Qnt=s(Tfe);Oko=r(Qnt,"electra"),Qnt.forEach(t),Vko=r(Jye," \u2014 "),mG=n(Jye,"A",{href:!0});var Wnt=s(mG);Xko=r(Wnt,"ElectraForMultipleChoice"),Wnt.forEach(t),zko=r(Jye," (ELECTRA model)"),Jye.forEach(t),Qko=i(K),Eb=n(K,"LI",{});var Yye=s(Eb);Mfe=n(Yye,"STRONG",{});var Hnt=s(Mfe);Wko=r(Hnt,"flaubert"),Hnt.forEach(t),Hko=r(Yye," \u2014 "),gG=n(Yye,"A",{href:!0});var Unt=s(gG);Uko=r(Unt,"FlaubertForMultipleChoice"),Unt.forEach(t),Jko=r(Yye," (FlauBERT model)"),Yye.forEach(t),Yko=i(K),Cb=n(K,"LI",{});var Kye=s(Cb);Efe=n(Kye,"STRONG",{});var Jnt=s(Efe);Kko=r(Jnt,"fnet"),Jnt.forEach(t),Zko=r(Kye," \u2014 "),hG=n(Kye,"A",{href:!0});var Ynt=s(hG);eSo=r(Ynt,"FNetForMultipleChoice"),Ynt.forEach(t),oSo=r(Kye," (FNet model)"),Kye.forEach(t),rSo=i(K),wb=n(K,"LI",{});var Zye=s(wb);Cfe=n(Zye,"STRONG",{});var Knt=s(Cfe);tSo=r(Knt,"funnel"),Knt.forEach(t),aSo=r(Zye," \u2014 "),pG=n(Zye,"A",{href:!0});var Znt=s(pG);nSo=r(Znt,"FunnelForMultipleChoice"),Znt.forEach(t),sSo=r(Zye," (Funnel Transformer model)"),Zye.forEach(t),lSo=i(K),Ab=n(K,"LI",{});var eLe=s(Ab);wfe=n(eLe,"STRONG",{});var est=s(wfe);iSo=r(est,"ibert"),est.forEach(t),dSo=r(eLe," \u2014 "),uG=n(eLe,"A",{href:!0});var ost=s(uG);cSo=r(ost,"IBertForMultipleChoice"),ost.forEach(t),fSo=r(eLe," (I-BERT model)"),eLe.forEach(t),mSo=i(K),yb=n(K,"LI",{});var oLe=s(yb);Afe=n(oLe,"STRONG",{});var rst=s(Afe);gSo=r(rst,"longformer"),rst.forEach(t),hSo=r(oLe," \u2014 "),_G=n(oLe,"A",{href:!0});var tst=s(_G);pSo=r(tst,"LongformerForMultipleChoice"),tst.forEach(t),uSo=r(oLe," (Longformer model)"),oLe.forEach(t),_So=i(K),Lb=n(K,"LI",{});var rLe=s(Lb);yfe=n(rLe,"STRONG",{});var ast=s(yfe);bSo=r(ast,"megatron-bert"),ast.forEach(t),vSo=r(rLe," \u2014 "),bG=n(rLe,"A",{href:!0});var nst=s(bG);FSo=r(nst,"MegatronBertForMultipleChoice"),nst.forEach(t),TSo=r(rLe," (MegatronBert model)"),rLe.forEach(t),MSo=i(K),xb=n(K,"LI",{});var tLe=s(xb);Lfe=n(tLe,"STRONG",{});var sst=s(Lfe);ESo=r(sst,"mobilebert"),sst.forEach(t),CSo=r(tLe," \u2014 "),vG=n(tLe,"A",{href:!0});var lst=s(vG);wSo=r(lst,"MobileBertForMultipleChoice"),lst.forEach(t),ASo=r(tLe," (MobileBERT model)"),tLe.forEach(t),ySo=i(K),$b=n(K,"LI",{});var aLe=s($b);xfe=n(aLe,"STRONG",{});var ist=s(xfe);LSo=r(ist,"mpnet"),ist.forEach(t),xSo=r(aLe," \u2014 "),FG=n(aLe,"A",{href:!0});var dst=s(FG);$So=r(dst,"MPNetForMultipleChoice"),dst.forEach(t),kSo=r(aLe," (MPNet model)"),aLe.forEach(t),SSo=i(K),kb=n(K,"LI",{});var nLe=s(kb);$fe=n(nLe,"STRONG",{});var cst=s($fe);RSo=r(cst,"nystromformer"),cst.forEach(t),PSo=r(nLe," \u2014 "),TG=n(nLe,"A",{href:!0});var fst=s(TG);BSo=r(fst,"NystromformerForMultipleChoice"),fst.forEach(t),ISo=r(nLe," (Nystromformer model)"),nLe.forEach(t),qSo=i(K),Sb=n(K,"LI",{});var sLe=s(Sb);kfe=n(sLe,"STRONG",{});var mst=s(kfe);NSo=r(mst,"qdqbert"),mst.forEach(t),jSo=r(sLe," \u2014 "),MG=n(sLe,"A",{href:!0});var gst=s(MG);DSo=r(gst,"QDQBertForMultipleChoice"),gst.forEach(t),GSo=r(sLe," (QDQBert model)"),sLe.forEach(t),OSo=i(K),Rb=n(K,"LI",{});var lLe=s(Rb);Sfe=n(lLe,"STRONG",{});var hst=s(Sfe);VSo=r(hst,"rembert"),hst.forEach(t),XSo=r(lLe," \u2014 "),EG=n(lLe,"A",{href:!0});var pst=s(EG);zSo=r(pst,"RemBertForMultipleChoice"),pst.forEach(t),QSo=r(lLe," (RemBERT model)"),lLe.forEach(t),WSo=i(K),Pb=n(K,"LI",{});var iLe=s(Pb);Rfe=n(iLe,"STRONG",{});var ust=s(Rfe);HSo=r(ust,"roberta"),ust.forEach(t),USo=r(iLe," \u2014 "),CG=n(iLe,"A",{href:!0});var _st=s(CG);JSo=r(_st,"RobertaForMultipleChoice"),_st.forEach(t),YSo=r(iLe," (RoBERTa model)"),iLe.forEach(t),KSo=i(K),Bb=n(K,"LI",{});var dLe=s(Bb);Pfe=n(dLe,"STRONG",{});var bst=s(Pfe);ZSo=r(bst,"roformer"),bst.forEach(t),eRo=r(dLe," \u2014 "),wG=n(dLe,"A",{href:!0});var vst=s(wG);oRo=r(vst,"RoFormerForMultipleChoice"),vst.forEach(t),rRo=r(dLe," (RoFormer model)"),dLe.forEach(t),tRo=i(K),Ib=n(K,"LI",{});var cLe=s(Ib);Bfe=n(cLe,"STRONG",{});var Fst=s(Bfe);aRo=r(Fst,"squeezebert"),Fst.forEach(t),nRo=r(cLe," \u2014 "),AG=n(cLe,"A",{href:!0});var Tst=s(AG);sRo=r(Tst,"SqueezeBertForMultipleChoice"),Tst.forEach(t),lRo=r(cLe," (SqueezeBERT model)"),cLe.forEach(t),iRo=i(K),qb=n(K,"LI",{});var fLe=s(qb);Ife=n(fLe,"STRONG",{});var Mst=s(Ife);dRo=r(Mst,"xlm"),Mst.forEach(t),cRo=r(fLe," \u2014 "),yG=n(fLe,"A",{href:!0});var Est=s(yG);fRo=r(Est,"XLMForMultipleChoice"),Est.forEach(t),mRo=r(fLe," (XLM model)"),fLe.forEach(t),gRo=i(K),Nb=n(K,"LI",{});var mLe=s(Nb);qfe=n(mLe,"STRONG",{});var Cst=s(qfe);hRo=r(Cst,"xlm-roberta"),Cst.forEach(t),pRo=r(mLe," \u2014 "),LG=n(mLe,"A",{href:!0});var wst=s(LG);uRo=r(wst,"XLMRobertaForMultipleChoice"),wst.forEach(t),_Ro=r(mLe," (XLM-RoBERTa model)"),mLe.forEach(t),bRo=i(K),jb=n(K,"LI",{});var gLe=s(jb);Nfe=n(gLe,"STRONG",{});var Ast=s(Nfe);vRo=r(Ast,"xlm-roberta-xl"),Ast.forEach(t),FRo=r(gLe," \u2014 "),xG=n(gLe,"A",{href:!0});var yst=s(xG);TRo=r(yst,"XLMRobertaXLForMultipleChoice"),yst.forEach(t),MRo=r(gLe," (XLM-RoBERTa-XL model)"),gLe.forEach(t),ERo=i(K),Db=n(K,"LI",{});var hLe=s(Db);jfe=n(hLe,"STRONG",{});var Lst=s(jfe);CRo=r(Lst,"xlnet"),Lst.forEach(t),wRo=r(hLe," \u2014 "),$G=n(hLe,"A",{href:!0});var xst=s($G);ARo=r(xst,"XLNetForMultipleChoice"),xst.forEach(t),yRo=r(hLe," (XLNet model)"),hLe.forEach(t),LRo=i(K),Gb=n(K,"LI",{});var pLe=s(Gb);Dfe=n(pLe,"STRONG",{});var $st=s(Dfe);xRo=r($st,"yoso"),$st.forEach(t),$Ro=r(pLe," \u2014 "),kG=n(pLe,"A",{href:!0});var kst=s(kG);kRo=r(kst,"YosoForMultipleChoice"),kst.forEach(t),SRo=r(pLe," (YOSO model)"),pLe.forEach(t),K.forEach(t),RRo=i(na),Ob=n(na,"P",{});var uLe=s(Ob);PRo=r(uLe,"The model is set in evaluation mode by default using "),Gfe=n(uLe,"CODE",{});var Sst=s(Gfe);BRo=r(Sst,"model.eval()"),Sst.forEach(t),IRo=r(uLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ofe=n(uLe,"CODE",{});var Rst=s(Ofe);qRo=r(Rst,"model.train()"),Rst.forEach(t),uLe.forEach(t),NRo=i(na),T(Vb.$$.fragment,na),na.forEach(t),Qs.forEach(t),dIe=i(f),Vi=n(f,"H2",{class:!0});var gNe=s(Vi);Xb=n(gNe,"A",{id:!0,class:!0,href:!0});var Pst=s(Xb);Vfe=n(Pst,"SPAN",{});var Bst=s(Vfe);T(r6.$$.fragment,Bst),Bst.forEach(t),Pst.forEach(t),jRo=i(gNe),Xfe=n(gNe,"SPAN",{});var Ist=s(Xfe);DRo=r(Ist,"AutoModelForNextSentencePrediction"),Ist.forEach(t),gNe.forEach(t),cIe=i(f),Bo=n(f,"DIV",{class:!0});var Ws=s(Bo);T(t6.$$.fragment,Ws),GRo=i(Ws),Xi=n(Ws,"P",{});var TK=s(Xi);ORo=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),SG=n(TK,"A",{href:!0});var qst=s(SG);VRo=r(qst,"from_pretrained()"),qst.forEach(t),XRo=r(TK," class method or the "),RG=n(TK,"A",{href:!0});var Nst=s(RG);zRo=r(Nst,"from_config()"),Nst.forEach(t),QRo=r(TK,` class
method.`),TK.forEach(t),WRo=i(Ws),a6=n(Ws,"P",{});var hNe=s(a6);HRo=r(hNe,"This class cannot be instantiated directly using "),zfe=n(hNe,"CODE",{});var jst=s(zfe);URo=r(jst,"__init__()"),jst.forEach(t),JRo=r(hNe," (throws an error)."),hNe.forEach(t),YRo=i(Ws),it=n(Ws,"DIV",{class:!0});var m3=s(it);T(n6.$$.fragment,m3),KRo=i(m3),Qfe=n(m3,"P",{});var Dst=s(Qfe);ZRo=r(Dst,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Dst.forEach(t),ePo=i(m3),zi=n(m3,"P",{});var MK=s(zi);oPo=r(MK,`Note:
Loading a model from its configuration file does `),Wfe=n(MK,"STRONG",{});var Gst=s(Wfe);rPo=r(Gst,"not"),Gst.forEach(t),tPo=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n(MK,"A",{href:!0});var Ost=s(PG);aPo=r(Ost,"from_pretrained()"),Ost.forEach(t),nPo=r(MK," to load the model weights."),MK.forEach(t),sPo=i(m3),T(zb.$$.fragment,m3),m3.forEach(t),lPo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(s6.$$.fragment,sa),iPo=i(sa),Hfe=n(sa,"P",{});var Vst=s(Hfe);dPo=r(Vst,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Vst.forEach(t),cPo=i(sa),Ra=n(sa,"P",{});var g3=s(Ra);fPo=r(g3,"The model class to instantiate is selected based on the "),Ufe=n(g3,"CODE",{});var Xst=s(Ufe);mPo=r(Xst,"model_type"),Xst.forEach(t),gPo=r(g3,` property of the config object (either
passed as an argument or loaded from `),Jfe=n(g3,"CODE",{});var zst=s(Jfe);hPo=r(zst,"pretrained_model_name_or_path"),zst.forEach(t),pPo=r(g3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=n(g3,"CODE",{});var Qst=s(Yfe);uPo=r(Qst,"pretrained_model_name_or_path"),Qst.forEach(t),_Po=r(g3,":"),g3.forEach(t),bPo=i(sa),Yr=n(sa,"UL",{});var Hs=s(Yr);Qb=n(Hs,"LI",{});var _Le=s(Qb);Kfe=n(_Le,"STRONG",{});var Wst=s(Kfe);vPo=r(Wst,"bert"),Wst.forEach(t),FPo=r(_Le," \u2014 "),BG=n(_Le,"A",{href:!0});var Hst=s(BG);TPo=r(Hst,"BertForNextSentencePrediction"),Hst.forEach(t),MPo=r(_Le," (BERT model)"),_Le.forEach(t),EPo=i(Hs),Wb=n(Hs,"LI",{});var bLe=s(Wb);Zfe=n(bLe,"STRONG",{});var Ust=s(Zfe);CPo=r(Ust,"fnet"),Ust.forEach(t),wPo=r(bLe," \u2014 "),IG=n(bLe,"A",{href:!0});var Jst=s(IG);APo=r(Jst,"FNetForNextSentencePrediction"),Jst.forEach(t),yPo=r(bLe," (FNet model)"),bLe.forEach(t),LPo=i(Hs),Hb=n(Hs,"LI",{});var vLe=s(Hb);eme=n(vLe,"STRONG",{});var Yst=s(eme);xPo=r(Yst,"megatron-bert"),Yst.forEach(t),$Po=r(vLe," \u2014 "),qG=n(vLe,"A",{href:!0});var Kst=s(qG);kPo=r(Kst,"MegatronBertForNextSentencePrediction"),Kst.forEach(t),SPo=r(vLe," (MegatronBert model)"),vLe.forEach(t),RPo=i(Hs),Ub=n(Hs,"LI",{});var FLe=s(Ub);ome=n(FLe,"STRONG",{});var Zst=s(ome);PPo=r(Zst,"mobilebert"),Zst.forEach(t),BPo=r(FLe," \u2014 "),NG=n(FLe,"A",{href:!0});var elt=s(NG);IPo=r(elt,"MobileBertForNextSentencePrediction"),elt.forEach(t),qPo=r(FLe," (MobileBERT model)"),FLe.forEach(t),NPo=i(Hs),Jb=n(Hs,"LI",{});var TLe=s(Jb);rme=n(TLe,"STRONG",{});var olt=s(rme);jPo=r(olt,"qdqbert"),olt.forEach(t),DPo=r(TLe," \u2014 "),jG=n(TLe,"A",{href:!0});var rlt=s(jG);GPo=r(rlt,"QDQBertForNextSentencePrediction"),rlt.forEach(t),OPo=r(TLe," (QDQBert model)"),TLe.forEach(t),Hs.forEach(t),VPo=i(sa),Yb=n(sa,"P",{});var MLe=s(Yb);XPo=r(MLe,"The model is set in evaluation mode by default using "),tme=n(MLe,"CODE",{});var tlt=s(tme);zPo=r(tlt,"model.eval()"),tlt.forEach(t),QPo=r(MLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=n(MLe,"CODE",{});var alt=s(ame);WPo=r(alt,"model.train()"),alt.forEach(t),MLe.forEach(t),HPo=i(sa),T(Kb.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),fIe=i(f),Qi=n(f,"H2",{class:!0});var pNe=s(Qi);Zb=n(pNe,"A",{id:!0,class:!0,href:!0});var nlt=s(Zb);nme=n(nlt,"SPAN",{});var slt=s(nme);T(l6.$$.fragment,slt),slt.forEach(t),nlt.forEach(t),UPo=i(pNe),sme=n(pNe,"SPAN",{});var llt=s(sme);JPo=r(llt,"AutoModelForTokenClassification"),llt.forEach(t),pNe.forEach(t),mIe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(i6.$$.fragment,Us),YPo=i(Us),Wi=n(Us,"P",{});var EK=s(Wi);KPo=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DG=n(EK,"A",{href:!0});var ilt=s(DG);ZPo=r(ilt,"from_pretrained()"),ilt.forEach(t),eBo=r(EK," class method or the "),GG=n(EK,"A",{href:!0});var dlt=s(GG);oBo=r(dlt,"from_config()"),dlt.forEach(t),rBo=r(EK,` class
method.`),EK.forEach(t),tBo=i(Us),d6=n(Us,"P",{});var uNe=s(d6);aBo=r(uNe,"This class cannot be instantiated directly using "),lme=n(uNe,"CODE",{});var clt=s(lme);nBo=r(clt,"__init__()"),clt.forEach(t),sBo=r(uNe," (throws an error)."),uNe.forEach(t),lBo=i(Us),dt=n(Us,"DIV",{class:!0});var h3=s(dt);T(c6.$$.fragment,h3),iBo=i(h3),ime=n(h3,"P",{});var flt=s(ime);dBo=r(flt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),flt.forEach(t),cBo=i(h3),Hi=n(h3,"P",{});var CK=s(Hi);fBo=r(CK,`Note:
Loading a model from its configuration file does `),dme=n(CK,"STRONG",{});var mlt=s(dme);mBo=r(mlt,"not"),mlt.forEach(t),gBo=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=n(CK,"A",{href:!0});var glt=s(OG);hBo=r(glt,"from_pretrained()"),glt.forEach(t),pBo=r(CK," to load the model weights."),CK.forEach(t),uBo=i(h3),T(e2.$$.fragment,h3),h3.forEach(t),_Bo=i(Us),ro=n(Us,"DIV",{class:!0});var la=s(ro);T(f6.$$.fragment,la),bBo=i(la),cme=n(la,"P",{});var hlt=s(cme);vBo=r(hlt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hlt.forEach(t),FBo=i(la),Pa=n(la,"P",{});var p3=s(Pa);TBo=r(p3,"The model class to instantiate is selected based on the "),fme=n(p3,"CODE",{});var plt=s(fme);MBo=r(plt,"model_type"),plt.forEach(t),EBo=r(p3,` property of the config object (either
passed as an argument or loaded from `),mme=n(p3,"CODE",{});var ult=s(mme);CBo=r(ult,"pretrained_model_name_or_path"),ult.forEach(t),wBo=r(p3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=n(p3,"CODE",{});var _lt=s(gme);ABo=r(_lt,"pretrained_model_name_or_path"),_lt.forEach(t),yBo=r(p3,":"),p3.forEach(t),LBo=i(la),U=n(la,"UL",{});var J=s(U);o2=n(J,"LI",{});var ELe=s(o2);hme=n(ELe,"STRONG",{});var blt=s(hme);xBo=r(blt,"albert"),blt.forEach(t),$Bo=r(ELe," \u2014 "),VG=n(ELe,"A",{href:!0});var vlt=s(VG);kBo=r(vlt,"AlbertForTokenClassification"),vlt.forEach(t),SBo=r(ELe," (ALBERT model)"),ELe.forEach(t),RBo=i(J),r2=n(J,"LI",{});var CLe=s(r2);pme=n(CLe,"STRONG",{});var Flt=s(pme);PBo=r(Flt,"bert"),Flt.forEach(t),BBo=r(CLe," \u2014 "),XG=n(CLe,"A",{href:!0});var Tlt=s(XG);IBo=r(Tlt,"BertForTokenClassification"),Tlt.forEach(t),qBo=r(CLe," (BERT model)"),CLe.forEach(t),NBo=i(J),t2=n(J,"LI",{});var wLe=s(t2);ume=n(wLe,"STRONG",{});var Mlt=s(ume);jBo=r(Mlt,"big_bird"),Mlt.forEach(t),DBo=r(wLe," \u2014 "),zG=n(wLe,"A",{href:!0});var Elt=s(zG);GBo=r(Elt,"BigBirdForTokenClassification"),Elt.forEach(t),OBo=r(wLe," (BigBird model)"),wLe.forEach(t),VBo=i(J),a2=n(J,"LI",{});var ALe=s(a2);_me=n(ALe,"STRONG",{});var Clt=s(_me);XBo=r(Clt,"camembert"),Clt.forEach(t),zBo=r(ALe," \u2014 "),QG=n(ALe,"A",{href:!0});var wlt=s(QG);QBo=r(wlt,"CamembertForTokenClassification"),wlt.forEach(t),WBo=r(ALe," (CamemBERT model)"),ALe.forEach(t),HBo=i(J),n2=n(J,"LI",{});var yLe=s(n2);bme=n(yLe,"STRONG",{});var Alt=s(bme);UBo=r(Alt,"canine"),Alt.forEach(t),JBo=r(yLe," \u2014 "),WG=n(yLe,"A",{href:!0});var ylt=s(WG);YBo=r(ylt,"CanineForTokenClassification"),ylt.forEach(t),KBo=r(yLe," (Canine model)"),yLe.forEach(t),ZBo=i(J),s2=n(J,"LI",{});var LLe=s(s2);vme=n(LLe,"STRONG",{});var Llt=s(vme);eIo=r(Llt,"convbert"),Llt.forEach(t),oIo=r(LLe," \u2014 "),HG=n(LLe,"A",{href:!0});var xlt=s(HG);rIo=r(xlt,"ConvBertForTokenClassification"),xlt.forEach(t),tIo=r(LLe," (ConvBERT model)"),LLe.forEach(t),aIo=i(J),l2=n(J,"LI",{});var xLe=s(l2);Fme=n(xLe,"STRONG",{});var $lt=s(Fme);nIo=r($lt,"data2vec-text"),$lt.forEach(t),sIo=r(xLe," \u2014 "),UG=n(xLe,"A",{href:!0});var klt=s(UG);lIo=r(klt,"Data2VecTextForTokenClassification"),klt.forEach(t),iIo=r(xLe," (Data2VecText model)"),xLe.forEach(t),dIo=i(J),i2=n(J,"LI",{});var $Le=s(i2);Tme=n($Le,"STRONG",{});var Slt=s(Tme);cIo=r(Slt,"deberta"),Slt.forEach(t),fIo=r($Le," \u2014 "),JG=n($Le,"A",{href:!0});var Rlt=s(JG);mIo=r(Rlt,"DebertaForTokenClassification"),Rlt.forEach(t),gIo=r($Le," (DeBERTa model)"),$Le.forEach(t),hIo=i(J),d2=n(J,"LI",{});var kLe=s(d2);Mme=n(kLe,"STRONG",{});var Plt=s(Mme);pIo=r(Plt,"deberta-v2"),Plt.forEach(t),uIo=r(kLe," \u2014 "),YG=n(kLe,"A",{href:!0});var Blt=s(YG);_Io=r(Blt,"DebertaV2ForTokenClassification"),Blt.forEach(t),bIo=r(kLe," (DeBERTa-v2 model)"),kLe.forEach(t),vIo=i(J),c2=n(J,"LI",{});var SLe=s(c2);Eme=n(SLe,"STRONG",{});var Ilt=s(Eme);FIo=r(Ilt,"distilbert"),Ilt.forEach(t),TIo=r(SLe," \u2014 "),KG=n(SLe,"A",{href:!0});var qlt=s(KG);MIo=r(qlt,"DistilBertForTokenClassification"),qlt.forEach(t),EIo=r(SLe," (DistilBERT model)"),SLe.forEach(t),CIo=i(J),f2=n(J,"LI",{});var RLe=s(f2);Cme=n(RLe,"STRONG",{});var Nlt=s(Cme);wIo=r(Nlt,"electra"),Nlt.forEach(t),AIo=r(RLe," \u2014 "),ZG=n(RLe,"A",{href:!0});var jlt=s(ZG);yIo=r(jlt,"ElectraForTokenClassification"),jlt.forEach(t),LIo=r(RLe," (ELECTRA model)"),RLe.forEach(t),xIo=i(J),m2=n(J,"LI",{});var PLe=s(m2);wme=n(PLe,"STRONG",{});var Dlt=s(wme);$Io=r(Dlt,"flaubert"),Dlt.forEach(t),kIo=r(PLe," \u2014 "),eO=n(PLe,"A",{href:!0});var Glt=s(eO);SIo=r(Glt,"FlaubertForTokenClassification"),Glt.forEach(t),RIo=r(PLe," (FlauBERT model)"),PLe.forEach(t),PIo=i(J),g2=n(J,"LI",{});var BLe=s(g2);Ame=n(BLe,"STRONG",{});var Olt=s(Ame);BIo=r(Olt,"fnet"),Olt.forEach(t),IIo=r(BLe," \u2014 "),oO=n(BLe,"A",{href:!0});var Vlt=s(oO);qIo=r(Vlt,"FNetForTokenClassification"),Vlt.forEach(t),NIo=r(BLe," (FNet model)"),BLe.forEach(t),jIo=i(J),h2=n(J,"LI",{});var ILe=s(h2);yme=n(ILe,"STRONG",{});var Xlt=s(yme);DIo=r(Xlt,"funnel"),Xlt.forEach(t),GIo=r(ILe," \u2014 "),rO=n(ILe,"A",{href:!0});var zlt=s(rO);OIo=r(zlt,"FunnelForTokenClassification"),zlt.forEach(t),VIo=r(ILe," (Funnel Transformer model)"),ILe.forEach(t),XIo=i(J),p2=n(J,"LI",{});var qLe=s(p2);Lme=n(qLe,"STRONG",{});var Qlt=s(Lme);zIo=r(Qlt,"gpt2"),Qlt.forEach(t),QIo=r(qLe," \u2014 "),tO=n(qLe,"A",{href:!0});var Wlt=s(tO);WIo=r(Wlt,"GPT2ForTokenClassification"),Wlt.forEach(t),HIo=r(qLe," (OpenAI GPT-2 model)"),qLe.forEach(t),UIo=i(J),u2=n(J,"LI",{});var NLe=s(u2);xme=n(NLe,"STRONG",{});var Hlt=s(xme);JIo=r(Hlt,"ibert"),Hlt.forEach(t),YIo=r(NLe," \u2014 "),aO=n(NLe,"A",{href:!0});var Ult=s(aO);KIo=r(Ult,"IBertForTokenClassification"),Ult.forEach(t),ZIo=r(NLe," (I-BERT model)"),NLe.forEach(t),eqo=i(J),_2=n(J,"LI",{});var jLe=s(_2);$me=n(jLe,"STRONG",{});var Jlt=s($me);oqo=r(Jlt,"layoutlm"),Jlt.forEach(t),rqo=r(jLe," \u2014 "),nO=n(jLe,"A",{href:!0});var Ylt=s(nO);tqo=r(Ylt,"LayoutLMForTokenClassification"),Ylt.forEach(t),aqo=r(jLe," (LayoutLM model)"),jLe.forEach(t),nqo=i(J),b2=n(J,"LI",{});var DLe=s(b2);kme=n(DLe,"STRONG",{});var Klt=s(kme);sqo=r(Klt,"layoutlmv2"),Klt.forEach(t),lqo=r(DLe," \u2014 "),sO=n(DLe,"A",{href:!0});var Zlt=s(sO);iqo=r(Zlt,"LayoutLMv2ForTokenClassification"),Zlt.forEach(t),dqo=r(DLe," (LayoutLMv2 model)"),DLe.forEach(t),cqo=i(J),v2=n(J,"LI",{});var GLe=s(v2);Sme=n(GLe,"STRONG",{});var eit=s(Sme);fqo=r(eit,"longformer"),eit.forEach(t),mqo=r(GLe," \u2014 "),lO=n(GLe,"A",{href:!0});var oit=s(lO);gqo=r(oit,"LongformerForTokenClassification"),oit.forEach(t),hqo=r(GLe," (Longformer model)"),GLe.forEach(t),pqo=i(J),F2=n(J,"LI",{});var OLe=s(F2);Rme=n(OLe,"STRONG",{});var rit=s(Rme);uqo=r(rit,"megatron-bert"),rit.forEach(t),_qo=r(OLe," \u2014 "),iO=n(OLe,"A",{href:!0});var tit=s(iO);bqo=r(tit,"MegatronBertForTokenClassification"),tit.forEach(t),vqo=r(OLe," (MegatronBert model)"),OLe.forEach(t),Fqo=i(J),T2=n(J,"LI",{});var VLe=s(T2);Pme=n(VLe,"STRONG",{});var ait=s(Pme);Tqo=r(ait,"mobilebert"),ait.forEach(t),Mqo=r(VLe," \u2014 "),dO=n(VLe,"A",{href:!0});var nit=s(dO);Eqo=r(nit,"MobileBertForTokenClassification"),nit.forEach(t),Cqo=r(VLe," (MobileBERT model)"),VLe.forEach(t),wqo=i(J),M2=n(J,"LI",{});var XLe=s(M2);Bme=n(XLe,"STRONG",{});var sit=s(Bme);Aqo=r(sit,"mpnet"),sit.forEach(t),yqo=r(XLe," \u2014 "),cO=n(XLe,"A",{href:!0});var lit=s(cO);Lqo=r(lit,"MPNetForTokenClassification"),lit.forEach(t),xqo=r(XLe," (MPNet model)"),XLe.forEach(t),$qo=i(J),E2=n(J,"LI",{});var zLe=s(E2);Ime=n(zLe,"STRONG",{});var iit=s(Ime);kqo=r(iit,"nystromformer"),iit.forEach(t),Sqo=r(zLe," \u2014 "),fO=n(zLe,"A",{href:!0});var dit=s(fO);Rqo=r(dit,"NystromformerForTokenClassification"),dit.forEach(t),Pqo=r(zLe," (Nystromformer model)"),zLe.forEach(t),Bqo=i(J),C2=n(J,"LI",{});var QLe=s(C2);qme=n(QLe,"STRONG",{});var cit=s(qme);Iqo=r(cit,"qdqbert"),cit.forEach(t),qqo=r(QLe," \u2014 "),mO=n(QLe,"A",{href:!0});var fit=s(mO);Nqo=r(fit,"QDQBertForTokenClassification"),fit.forEach(t),jqo=r(QLe," (QDQBert model)"),QLe.forEach(t),Dqo=i(J),w2=n(J,"LI",{});var WLe=s(w2);Nme=n(WLe,"STRONG",{});var mit=s(Nme);Gqo=r(mit,"rembert"),mit.forEach(t),Oqo=r(WLe," \u2014 "),gO=n(WLe,"A",{href:!0});var git=s(gO);Vqo=r(git,"RemBertForTokenClassification"),git.forEach(t),Xqo=r(WLe," (RemBERT model)"),WLe.forEach(t),zqo=i(J),A2=n(J,"LI",{});var HLe=s(A2);jme=n(HLe,"STRONG",{});var hit=s(jme);Qqo=r(hit,"roberta"),hit.forEach(t),Wqo=r(HLe," \u2014 "),hO=n(HLe,"A",{href:!0});var pit=s(hO);Hqo=r(pit,"RobertaForTokenClassification"),pit.forEach(t),Uqo=r(HLe," (RoBERTa model)"),HLe.forEach(t),Jqo=i(J),y2=n(J,"LI",{});var ULe=s(y2);Dme=n(ULe,"STRONG",{});var uit=s(Dme);Yqo=r(uit,"roformer"),uit.forEach(t),Kqo=r(ULe," \u2014 "),pO=n(ULe,"A",{href:!0});var _it=s(pO);Zqo=r(_it,"RoFormerForTokenClassification"),_it.forEach(t),eNo=r(ULe," (RoFormer model)"),ULe.forEach(t),oNo=i(J),L2=n(J,"LI",{});var JLe=s(L2);Gme=n(JLe,"STRONG",{});var bit=s(Gme);rNo=r(bit,"squeezebert"),bit.forEach(t),tNo=r(JLe," \u2014 "),uO=n(JLe,"A",{href:!0});var vit=s(uO);aNo=r(vit,"SqueezeBertForTokenClassification"),vit.forEach(t),nNo=r(JLe," (SqueezeBERT model)"),JLe.forEach(t),sNo=i(J),x2=n(J,"LI",{});var YLe=s(x2);Ome=n(YLe,"STRONG",{});var Fit=s(Ome);lNo=r(Fit,"xlm"),Fit.forEach(t),iNo=r(YLe," \u2014 "),_O=n(YLe,"A",{href:!0});var Tit=s(_O);dNo=r(Tit,"XLMForTokenClassification"),Tit.forEach(t),cNo=r(YLe," (XLM model)"),YLe.forEach(t),fNo=i(J),$2=n(J,"LI",{});var KLe=s($2);Vme=n(KLe,"STRONG",{});var Mit=s(Vme);mNo=r(Mit,"xlm-roberta"),Mit.forEach(t),gNo=r(KLe," \u2014 "),bO=n(KLe,"A",{href:!0});var Eit=s(bO);hNo=r(Eit,"XLMRobertaForTokenClassification"),Eit.forEach(t),pNo=r(KLe," (XLM-RoBERTa model)"),KLe.forEach(t),uNo=i(J),k2=n(J,"LI",{});var ZLe=s(k2);Xme=n(ZLe,"STRONG",{});var Cit=s(Xme);_No=r(Cit,"xlm-roberta-xl"),Cit.forEach(t),bNo=r(ZLe," \u2014 "),vO=n(ZLe,"A",{href:!0});var wit=s(vO);vNo=r(wit,"XLMRobertaXLForTokenClassification"),wit.forEach(t),FNo=r(ZLe," (XLM-RoBERTa-XL model)"),ZLe.forEach(t),TNo=i(J),S2=n(J,"LI",{});var exe=s(S2);zme=n(exe,"STRONG",{});var Ait=s(zme);MNo=r(Ait,"xlnet"),Ait.forEach(t),ENo=r(exe," \u2014 "),FO=n(exe,"A",{href:!0});var yit=s(FO);CNo=r(yit,"XLNetForTokenClassification"),yit.forEach(t),wNo=r(exe," (XLNet model)"),exe.forEach(t),ANo=i(J),R2=n(J,"LI",{});var oxe=s(R2);Qme=n(oxe,"STRONG",{});var Lit=s(Qme);yNo=r(Lit,"yoso"),Lit.forEach(t),LNo=r(oxe," \u2014 "),TO=n(oxe,"A",{href:!0});var xit=s(TO);xNo=r(xit,"YosoForTokenClassification"),xit.forEach(t),$No=r(oxe," (YOSO model)"),oxe.forEach(t),J.forEach(t),kNo=i(la),P2=n(la,"P",{});var rxe=s(P2);SNo=r(rxe,"The model is set in evaluation mode by default using "),Wme=n(rxe,"CODE",{});var $it=s(Wme);RNo=r($it,"model.eval()"),$it.forEach(t),PNo=r(rxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hme=n(rxe,"CODE",{});var kit=s(Hme);BNo=r(kit,"model.train()"),kit.forEach(t),rxe.forEach(t),INo=i(la),T(B2.$$.fragment,la),la.forEach(t),Us.forEach(t),gIe=i(f),Ui=n(f,"H2",{class:!0});var _Ne=s(Ui);I2=n(_Ne,"A",{id:!0,class:!0,href:!0});var Sit=s(I2);Ume=n(Sit,"SPAN",{});var Rit=s(Ume);T(m6.$$.fragment,Rit),Rit.forEach(t),Sit.forEach(t),qNo=i(_Ne),Jme=n(_Ne,"SPAN",{});var Pit=s(Jme);NNo=r(Pit,"AutoModelForQuestionAnswering"),Pit.forEach(t),_Ne.forEach(t),hIe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(g6.$$.fragment,Js),jNo=i(Js),Ji=n(Js,"P",{});var wK=s(Ji);DNo=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MO=n(wK,"A",{href:!0});var Bit=s(MO);GNo=r(Bit,"from_pretrained()"),Bit.forEach(t),ONo=r(wK," class method or the "),EO=n(wK,"A",{href:!0});var Iit=s(EO);VNo=r(Iit,"from_config()"),Iit.forEach(t),XNo=r(wK,` class
method.`),wK.forEach(t),zNo=i(Js),h6=n(Js,"P",{});var bNe=s(h6);QNo=r(bNe,"This class cannot be instantiated directly using "),Yme=n(bNe,"CODE",{});var qit=s(Yme);WNo=r(qit,"__init__()"),qit.forEach(t),HNo=r(bNe," (throws an error)."),bNe.forEach(t),UNo=i(Js),ct=n(Js,"DIV",{class:!0});var u3=s(ct);T(p6.$$.fragment,u3),JNo=i(u3),Kme=n(u3,"P",{});var Nit=s(Kme);YNo=r(Nit,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Nit.forEach(t),KNo=i(u3),Yi=n(u3,"P",{});var AK=s(Yi);ZNo=r(AK,`Note:
Loading a model from its configuration file does `),Zme=n(AK,"STRONG",{});var jit=s(Zme);ejo=r(jit,"not"),jit.forEach(t),ojo=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CO=n(AK,"A",{href:!0});var Dit=s(CO);rjo=r(Dit,"from_pretrained()"),Dit.forEach(t),tjo=r(AK," to load the model weights."),AK.forEach(t),ajo=i(u3),T(q2.$$.fragment,u3),u3.forEach(t),njo=i(Js),to=n(Js,"DIV",{class:!0});var ia=s(to);T(u6.$$.fragment,ia),sjo=i(ia),ege=n(ia,"P",{});var Git=s(ege);ljo=r(Git,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Git.forEach(t),ijo=i(ia),Ba=n(ia,"P",{});var _3=s(Ba);djo=r(_3,"The model class to instantiate is selected based on the "),oge=n(_3,"CODE",{});var Oit=s(oge);cjo=r(Oit,"model_type"),Oit.forEach(t),fjo=r(_3,` property of the config object (either
passed as an argument or loaded from `),rge=n(_3,"CODE",{});var Vit=s(rge);mjo=r(Vit,"pretrained_model_name_or_path"),Vit.forEach(t),gjo=r(_3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tge=n(_3,"CODE",{});var Xit=s(tge);hjo=r(Xit,"pretrained_model_name_or_path"),Xit.forEach(t),pjo=r(_3,":"),_3.forEach(t),ujo=i(ia),O=n(ia,"UL",{});var X=s(O);N2=n(X,"LI",{});var txe=s(N2);age=n(txe,"STRONG",{});var zit=s(age);_jo=r(zit,"albert"),zit.forEach(t),bjo=r(txe," \u2014 "),wO=n(txe,"A",{href:!0});var Qit=s(wO);vjo=r(Qit,"AlbertForQuestionAnswering"),Qit.forEach(t),Fjo=r(txe," (ALBERT model)"),txe.forEach(t),Tjo=i(X),j2=n(X,"LI",{});var axe=s(j2);nge=n(axe,"STRONG",{});var Wit=s(nge);Mjo=r(Wit,"bart"),Wit.forEach(t),Ejo=r(axe," \u2014 "),AO=n(axe,"A",{href:!0});var Hit=s(AO);Cjo=r(Hit,"BartForQuestionAnswering"),Hit.forEach(t),wjo=r(axe," (BART model)"),axe.forEach(t),Ajo=i(X),D2=n(X,"LI",{});var nxe=s(D2);sge=n(nxe,"STRONG",{});var Uit=s(sge);yjo=r(Uit,"bert"),Uit.forEach(t),Ljo=r(nxe," \u2014 "),yO=n(nxe,"A",{href:!0});var Jit=s(yO);xjo=r(Jit,"BertForQuestionAnswering"),Jit.forEach(t),$jo=r(nxe," (BERT model)"),nxe.forEach(t),kjo=i(X),G2=n(X,"LI",{});var sxe=s(G2);lge=n(sxe,"STRONG",{});var Yit=s(lge);Sjo=r(Yit,"big_bird"),Yit.forEach(t),Rjo=r(sxe," \u2014 "),LO=n(sxe,"A",{href:!0});var Kit=s(LO);Pjo=r(Kit,"BigBirdForQuestionAnswering"),Kit.forEach(t),Bjo=r(sxe," (BigBird model)"),sxe.forEach(t),Ijo=i(X),O2=n(X,"LI",{});var lxe=s(O2);ige=n(lxe,"STRONG",{});var Zit=s(ige);qjo=r(Zit,"bigbird_pegasus"),Zit.forEach(t),Njo=r(lxe," \u2014 "),xO=n(lxe,"A",{href:!0});var edt=s(xO);jjo=r(edt,"BigBirdPegasusForQuestionAnswering"),edt.forEach(t),Djo=r(lxe," (BigBirdPegasus model)"),lxe.forEach(t),Gjo=i(X),V2=n(X,"LI",{});var ixe=s(V2);dge=n(ixe,"STRONG",{});var odt=s(dge);Ojo=r(odt,"camembert"),odt.forEach(t),Vjo=r(ixe," \u2014 "),$O=n(ixe,"A",{href:!0});var rdt=s($O);Xjo=r(rdt,"CamembertForQuestionAnswering"),rdt.forEach(t),zjo=r(ixe," (CamemBERT model)"),ixe.forEach(t),Qjo=i(X),X2=n(X,"LI",{});var dxe=s(X2);cge=n(dxe,"STRONG",{});var tdt=s(cge);Wjo=r(tdt,"canine"),tdt.forEach(t),Hjo=r(dxe," \u2014 "),kO=n(dxe,"A",{href:!0});var adt=s(kO);Ujo=r(adt,"CanineForQuestionAnswering"),adt.forEach(t),Jjo=r(dxe," (Canine model)"),dxe.forEach(t),Yjo=i(X),z2=n(X,"LI",{});var cxe=s(z2);fge=n(cxe,"STRONG",{});var ndt=s(fge);Kjo=r(ndt,"convbert"),ndt.forEach(t),Zjo=r(cxe," \u2014 "),SO=n(cxe,"A",{href:!0});var sdt=s(SO);eDo=r(sdt,"ConvBertForQuestionAnswering"),sdt.forEach(t),oDo=r(cxe," (ConvBERT model)"),cxe.forEach(t),rDo=i(X),Q2=n(X,"LI",{});var fxe=s(Q2);mge=n(fxe,"STRONG",{});var ldt=s(mge);tDo=r(ldt,"data2vec-text"),ldt.forEach(t),aDo=r(fxe," \u2014 "),RO=n(fxe,"A",{href:!0});var idt=s(RO);nDo=r(idt,"Data2VecTextForQuestionAnswering"),idt.forEach(t),sDo=r(fxe," (Data2VecText model)"),fxe.forEach(t),lDo=i(X),W2=n(X,"LI",{});var mxe=s(W2);gge=n(mxe,"STRONG",{});var ddt=s(gge);iDo=r(ddt,"deberta"),ddt.forEach(t),dDo=r(mxe," \u2014 "),PO=n(mxe,"A",{href:!0});var cdt=s(PO);cDo=r(cdt,"DebertaForQuestionAnswering"),cdt.forEach(t),fDo=r(mxe," (DeBERTa model)"),mxe.forEach(t),mDo=i(X),H2=n(X,"LI",{});var gxe=s(H2);hge=n(gxe,"STRONG",{});var fdt=s(hge);gDo=r(fdt,"deberta-v2"),fdt.forEach(t),hDo=r(gxe," \u2014 "),BO=n(gxe,"A",{href:!0});var mdt=s(BO);pDo=r(mdt,"DebertaV2ForQuestionAnswering"),mdt.forEach(t),uDo=r(gxe," (DeBERTa-v2 model)"),gxe.forEach(t),_Do=i(X),U2=n(X,"LI",{});var hxe=s(U2);pge=n(hxe,"STRONG",{});var gdt=s(pge);bDo=r(gdt,"distilbert"),gdt.forEach(t),vDo=r(hxe," \u2014 "),IO=n(hxe,"A",{href:!0});var hdt=s(IO);FDo=r(hdt,"DistilBertForQuestionAnswering"),hdt.forEach(t),TDo=r(hxe," (DistilBERT model)"),hxe.forEach(t),MDo=i(X),J2=n(X,"LI",{});var pxe=s(J2);uge=n(pxe,"STRONG",{});var pdt=s(uge);EDo=r(pdt,"electra"),pdt.forEach(t),CDo=r(pxe," \u2014 "),qO=n(pxe,"A",{href:!0});var udt=s(qO);wDo=r(udt,"ElectraForQuestionAnswering"),udt.forEach(t),ADo=r(pxe," (ELECTRA model)"),pxe.forEach(t),yDo=i(X),Y2=n(X,"LI",{});var uxe=s(Y2);_ge=n(uxe,"STRONG",{});var _dt=s(_ge);LDo=r(_dt,"flaubert"),_dt.forEach(t),xDo=r(uxe," \u2014 "),NO=n(uxe,"A",{href:!0});var bdt=s(NO);$Do=r(bdt,"FlaubertForQuestionAnsweringSimple"),bdt.forEach(t),kDo=r(uxe," (FlauBERT model)"),uxe.forEach(t),SDo=i(X),K2=n(X,"LI",{});var _xe=s(K2);bge=n(_xe,"STRONG",{});var vdt=s(bge);RDo=r(vdt,"fnet"),vdt.forEach(t),PDo=r(_xe," \u2014 "),jO=n(_xe,"A",{href:!0});var Fdt=s(jO);BDo=r(Fdt,"FNetForQuestionAnswering"),Fdt.forEach(t),IDo=r(_xe," (FNet model)"),_xe.forEach(t),qDo=i(X),Z2=n(X,"LI",{});var bxe=s(Z2);vge=n(bxe,"STRONG",{});var Tdt=s(vge);NDo=r(Tdt,"funnel"),Tdt.forEach(t),jDo=r(bxe," \u2014 "),DO=n(bxe,"A",{href:!0});var Mdt=s(DO);DDo=r(Mdt,"FunnelForQuestionAnswering"),Mdt.forEach(t),GDo=r(bxe," (Funnel Transformer model)"),bxe.forEach(t),ODo=i(X),ev=n(X,"LI",{});var vxe=s(ev);Fge=n(vxe,"STRONG",{});var Edt=s(Fge);VDo=r(Edt,"gptj"),Edt.forEach(t),XDo=r(vxe," \u2014 "),GO=n(vxe,"A",{href:!0});var Cdt=s(GO);zDo=r(Cdt,"GPTJForQuestionAnswering"),Cdt.forEach(t),QDo=r(vxe," (GPT-J model)"),vxe.forEach(t),WDo=i(X),ov=n(X,"LI",{});var Fxe=s(ov);Tge=n(Fxe,"STRONG",{});var wdt=s(Tge);HDo=r(wdt,"ibert"),wdt.forEach(t),UDo=r(Fxe," \u2014 "),OO=n(Fxe,"A",{href:!0});var Adt=s(OO);JDo=r(Adt,"IBertForQuestionAnswering"),Adt.forEach(t),YDo=r(Fxe," (I-BERT model)"),Fxe.forEach(t),KDo=i(X),rv=n(X,"LI",{});var Txe=s(rv);Mge=n(Txe,"STRONG",{});var ydt=s(Mge);ZDo=r(ydt,"layoutlmv2"),ydt.forEach(t),eGo=r(Txe," \u2014 "),VO=n(Txe,"A",{href:!0});var Ldt=s(VO);oGo=r(Ldt,"LayoutLMv2ForQuestionAnswering"),Ldt.forEach(t),rGo=r(Txe," (LayoutLMv2 model)"),Txe.forEach(t),tGo=i(X),tv=n(X,"LI",{});var Mxe=s(tv);Ege=n(Mxe,"STRONG",{});var xdt=s(Ege);aGo=r(xdt,"led"),xdt.forEach(t),nGo=r(Mxe," \u2014 "),XO=n(Mxe,"A",{href:!0});var $dt=s(XO);sGo=r($dt,"LEDForQuestionAnswering"),$dt.forEach(t),lGo=r(Mxe," (LED model)"),Mxe.forEach(t),iGo=i(X),av=n(X,"LI",{});var Exe=s(av);Cge=n(Exe,"STRONG",{});var kdt=s(Cge);dGo=r(kdt,"longformer"),kdt.forEach(t),cGo=r(Exe," \u2014 "),zO=n(Exe,"A",{href:!0});var Sdt=s(zO);fGo=r(Sdt,"LongformerForQuestionAnswering"),Sdt.forEach(t),mGo=r(Exe," (Longformer model)"),Exe.forEach(t),gGo=i(X),nv=n(X,"LI",{});var Cxe=s(nv);wge=n(Cxe,"STRONG",{});var Rdt=s(wge);hGo=r(Rdt,"lxmert"),Rdt.forEach(t),pGo=r(Cxe," \u2014 "),QO=n(Cxe,"A",{href:!0});var Pdt=s(QO);uGo=r(Pdt,"LxmertForQuestionAnswering"),Pdt.forEach(t),_Go=r(Cxe," (LXMERT model)"),Cxe.forEach(t),bGo=i(X),sv=n(X,"LI",{});var wxe=s(sv);Age=n(wxe,"STRONG",{});var Bdt=s(Age);vGo=r(Bdt,"mbart"),Bdt.forEach(t),FGo=r(wxe," \u2014 "),WO=n(wxe,"A",{href:!0});var Idt=s(WO);TGo=r(Idt,"MBartForQuestionAnswering"),Idt.forEach(t),MGo=r(wxe," (mBART model)"),wxe.forEach(t),EGo=i(X),lv=n(X,"LI",{});var Axe=s(lv);yge=n(Axe,"STRONG",{});var qdt=s(yge);CGo=r(qdt,"megatron-bert"),qdt.forEach(t),wGo=r(Axe," \u2014 "),HO=n(Axe,"A",{href:!0});var Ndt=s(HO);AGo=r(Ndt,"MegatronBertForQuestionAnswering"),Ndt.forEach(t),yGo=r(Axe," (MegatronBert model)"),Axe.forEach(t),LGo=i(X),iv=n(X,"LI",{});var yxe=s(iv);Lge=n(yxe,"STRONG",{});var jdt=s(Lge);xGo=r(jdt,"mobilebert"),jdt.forEach(t),$Go=r(yxe," \u2014 "),UO=n(yxe,"A",{href:!0});var Ddt=s(UO);kGo=r(Ddt,"MobileBertForQuestionAnswering"),Ddt.forEach(t),SGo=r(yxe," (MobileBERT model)"),yxe.forEach(t),RGo=i(X),dv=n(X,"LI",{});var Lxe=s(dv);xge=n(Lxe,"STRONG",{});var Gdt=s(xge);PGo=r(Gdt,"mpnet"),Gdt.forEach(t),BGo=r(Lxe," \u2014 "),JO=n(Lxe,"A",{href:!0});var Odt=s(JO);IGo=r(Odt,"MPNetForQuestionAnswering"),Odt.forEach(t),qGo=r(Lxe," (MPNet model)"),Lxe.forEach(t),NGo=i(X),cv=n(X,"LI",{});var xxe=s(cv);$ge=n(xxe,"STRONG",{});var Vdt=s($ge);jGo=r(Vdt,"nystromformer"),Vdt.forEach(t),DGo=r(xxe," \u2014 "),YO=n(xxe,"A",{href:!0});var Xdt=s(YO);GGo=r(Xdt,"NystromformerForQuestionAnswering"),Xdt.forEach(t),OGo=r(xxe," (Nystromformer model)"),xxe.forEach(t),VGo=i(X),fv=n(X,"LI",{});var $xe=s(fv);kge=n($xe,"STRONG",{});var zdt=s(kge);XGo=r(zdt,"qdqbert"),zdt.forEach(t),zGo=r($xe," \u2014 "),KO=n($xe,"A",{href:!0});var Qdt=s(KO);QGo=r(Qdt,"QDQBertForQuestionAnswering"),Qdt.forEach(t),WGo=r($xe," (QDQBert model)"),$xe.forEach(t),HGo=i(X),mv=n(X,"LI",{});var kxe=s(mv);Sge=n(kxe,"STRONG",{});var Wdt=s(Sge);UGo=r(Wdt,"reformer"),Wdt.forEach(t),JGo=r(kxe," \u2014 "),ZO=n(kxe,"A",{href:!0});var Hdt=s(ZO);YGo=r(Hdt,"ReformerForQuestionAnswering"),Hdt.forEach(t),KGo=r(kxe," (Reformer model)"),kxe.forEach(t),ZGo=i(X),gv=n(X,"LI",{});var Sxe=s(gv);Rge=n(Sxe,"STRONG",{});var Udt=s(Rge);eOo=r(Udt,"rembert"),Udt.forEach(t),oOo=r(Sxe," \u2014 "),eV=n(Sxe,"A",{href:!0});var Jdt=s(eV);rOo=r(Jdt,"RemBertForQuestionAnswering"),Jdt.forEach(t),tOo=r(Sxe," (RemBERT model)"),Sxe.forEach(t),aOo=i(X),hv=n(X,"LI",{});var Rxe=s(hv);Pge=n(Rxe,"STRONG",{});var Ydt=s(Pge);nOo=r(Ydt,"roberta"),Ydt.forEach(t),sOo=r(Rxe," \u2014 "),oV=n(Rxe,"A",{href:!0});var Kdt=s(oV);lOo=r(Kdt,"RobertaForQuestionAnswering"),Kdt.forEach(t),iOo=r(Rxe," (RoBERTa model)"),Rxe.forEach(t),dOo=i(X),pv=n(X,"LI",{});var Pxe=s(pv);Bge=n(Pxe,"STRONG",{});var Zdt=s(Bge);cOo=r(Zdt,"roformer"),Zdt.forEach(t),fOo=r(Pxe," \u2014 "),rV=n(Pxe,"A",{href:!0});var ect=s(rV);mOo=r(ect,"RoFormerForQuestionAnswering"),ect.forEach(t),gOo=r(Pxe," (RoFormer model)"),Pxe.forEach(t),hOo=i(X),uv=n(X,"LI",{});var Bxe=s(uv);Ige=n(Bxe,"STRONG",{});var oct=s(Ige);pOo=r(oct,"splinter"),oct.forEach(t),uOo=r(Bxe," \u2014 "),tV=n(Bxe,"A",{href:!0});var rct=s(tV);_Oo=r(rct,"SplinterForQuestionAnswering"),rct.forEach(t),bOo=r(Bxe," (Splinter model)"),Bxe.forEach(t),vOo=i(X),_v=n(X,"LI",{});var Ixe=s(_v);qge=n(Ixe,"STRONG",{});var tct=s(qge);FOo=r(tct,"squeezebert"),tct.forEach(t),TOo=r(Ixe," \u2014 "),aV=n(Ixe,"A",{href:!0});var act=s(aV);MOo=r(act,"SqueezeBertForQuestionAnswering"),act.forEach(t),EOo=r(Ixe," (SqueezeBERT model)"),Ixe.forEach(t),COo=i(X),bv=n(X,"LI",{});var qxe=s(bv);Nge=n(qxe,"STRONG",{});var nct=s(Nge);wOo=r(nct,"xlm"),nct.forEach(t),AOo=r(qxe," \u2014 "),nV=n(qxe,"A",{href:!0});var sct=s(nV);yOo=r(sct,"XLMForQuestionAnsweringSimple"),sct.forEach(t),LOo=r(qxe," (XLM model)"),qxe.forEach(t),xOo=i(X),vv=n(X,"LI",{});var Nxe=s(vv);jge=n(Nxe,"STRONG",{});var lct=s(jge);$Oo=r(lct,"xlm-roberta"),lct.forEach(t),kOo=r(Nxe," \u2014 "),sV=n(Nxe,"A",{href:!0});var ict=s(sV);SOo=r(ict,"XLMRobertaForQuestionAnswering"),ict.forEach(t),ROo=r(Nxe," (XLM-RoBERTa model)"),Nxe.forEach(t),POo=i(X),Fv=n(X,"LI",{});var jxe=s(Fv);Dge=n(jxe,"STRONG",{});var dct=s(Dge);BOo=r(dct,"xlm-roberta-xl"),dct.forEach(t),IOo=r(jxe," \u2014 "),lV=n(jxe,"A",{href:!0});var cct=s(lV);qOo=r(cct,"XLMRobertaXLForQuestionAnswering"),cct.forEach(t),NOo=r(jxe," (XLM-RoBERTa-XL model)"),jxe.forEach(t),jOo=i(X),Tv=n(X,"LI",{});var Dxe=s(Tv);Gge=n(Dxe,"STRONG",{});var fct=s(Gge);DOo=r(fct,"xlnet"),fct.forEach(t),GOo=r(Dxe," \u2014 "),iV=n(Dxe,"A",{href:!0});var mct=s(iV);OOo=r(mct,"XLNetForQuestionAnsweringSimple"),mct.forEach(t),VOo=r(Dxe," (XLNet model)"),Dxe.forEach(t),XOo=i(X),Mv=n(X,"LI",{});var Gxe=s(Mv);Oge=n(Gxe,"STRONG",{});var gct=s(Oge);zOo=r(gct,"yoso"),gct.forEach(t),QOo=r(Gxe," \u2014 "),dV=n(Gxe,"A",{href:!0});var hct=s(dV);WOo=r(hct,"YosoForQuestionAnswering"),hct.forEach(t),HOo=r(Gxe," (YOSO model)"),Gxe.forEach(t),X.forEach(t),UOo=i(ia),Ev=n(ia,"P",{});var Oxe=s(Ev);JOo=r(Oxe,"The model is set in evaluation mode by default using "),Vge=n(Oxe,"CODE",{});var pct=s(Vge);YOo=r(pct,"model.eval()"),pct.forEach(t),KOo=r(Oxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xge=n(Oxe,"CODE",{});var uct=s(Xge);ZOo=r(uct,"model.train()"),uct.forEach(t),Oxe.forEach(t),eVo=i(ia),T(Cv.$$.fragment,ia),ia.forEach(t),Js.forEach(t),pIe=i(f),Ki=n(f,"H2",{class:!0});var vNe=s(Ki);wv=n(vNe,"A",{id:!0,class:!0,href:!0});var _ct=s(wv);zge=n(_ct,"SPAN",{});var bct=s(zge);T(_6.$$.fragment,bct),bct.forEach(t),_ct.forEach(t),oVo=i(vNe),Qge=n(vNe,"SPAN",{});var vct=s(Qge);rVo=r(vct,"AutoModelForTableQuestionAnswering"),vct.forEach(t),vNe.forEach(t),uIe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(b6.$$.fragment,Ys),tVo=i(Ys),Zi=n(Ys,"P",{});var yK=s(Zi);aVo=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),cV=n(yK,"A",{href:!0});var Fct=s(cV);nVo=r(Fct,"from_pretrained()"),Fct.forEach(t),sVo=r(yK," class method or the "),fV=n(yK,"A",{href:!0});var Tct=s(fV);lVo=r(Tct,"from_config()"),Tct.forEach(t),iVo=r(yK,` class
method.`),yK.forEach(t),dVo=i(Ys),v6=n(Ys,"P",{});var FNe=s(v6);cVo=r(FNe,"This class cannot be instantiated directly using "),Wge=n(FNe,"CODE",{});var Mct=s(Wge);fVo=r(Mct,"__init__()"),Mct.forEach(t),mVo=r(FNe," (throws an error)."),FNe.forEach(t),gVo=i(Ys),ft=n(Ys,"DIV",{class:!0});var b3=s(ft);T(F6.$$.fragment,b3),hVo=i(b3),Hge=n(b3,"P",{});var Ect=s(Hge);pVo=r(Ect,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Ect.forEach(t),uVo=i(b3),ed=n(b3,"P",{});var LK=s(ed);_Vo=r(LK,`Note:
Loading a model from its configuration file does `),Uge=n(LK,"STRONG",{});var Cct=s(Uge);bVo=r(Cct,"not"),Cct.forEach(t),vVo=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=n(LK,"A",{href:!0});var wct=s(mV);FVo=r(wct,"from_pretrained()"),wct.forEach(t),TVo=r(LK," to load the model weights."),LK.forEach(t),MVo=i(b3),T(Av.$$.fragment,b3),b3.forEach(t),EVo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(T6.$$.fragment,da),CVo=i(da),Jge=n(da,"P",{});var Act=s(Jge);wVo=r(Act,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Act.forEach(t),AVo=i(da),Ia=n(da,"P",{});var v3=s(Ia);yVo=r(v3,"The model class to instantiate is selected based on the "),Yge=n(v3,"CODE",{});var yct=s(Yge);LVo=r(yct,"model_type"),yct.forEach(t),xVo=r(v3,` property of the config object (either
passed as an argument or loaded from `),Kge=n(v3,"CODE",{});var Lct=s(Kge);$Vo=r(Lct,"pretrained_model_name_or_path"),Lct.forEach(t),kVo=r(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=n(v3,"CODE",{});var xct=s(Zge);SVo=r(xct,"pretrained_model_name_or_path"),xct.forEach(t),RVo=r(v3,":"),v3.forEach(t),PVo=i(da),ehe=n(da,"UL",{});var $ct=s(ehe);yv=n($ct,"LI",{});var Vxe=s(yv);ohe=n(Vxe,"STRONG",{});var kct=s(ohe);BVo=r(kct,"tapas"),kct.forEach(t),IVo=r(Vxe," \u2014 "),gV=n(Vxe,"A",{href:!0});var Sct=s(gV);qVo=r(Sct,"TapasForQuestionAnswering"),Sct.forEach(t),NVo=r(Vxe," (TAPAS model)"),Vxe.forEach(t),$ct.forEach(t),jVo=i(da),Lv=n(da,"P",{});var Xxe=s(Lv);DVo=r(Xxe,"The model is set in evaluation mode by default using "),rhe=n(Xxe,"CODE",{});var Rct=s(rhe);GVo=r(Rct,"model.eval()"),Rct.forEach(t),OVo=r(Xxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),the=n(Xxe,"CODE",{});var Pct=s(the);VVo=r(Pct,"model.train()"),Pct.forEach(t),Xxe.forEach(t),XVo=i(da),T(xv.$$.fragment,da),da.forEach(t),Ys.forEach(t),_Ie=i(f),od=n(f,"H2",{class:!0});var TNe=s(od);$v=n(TNe,"A",{id:!0,class:!0,href:!0});var Bct=s($v);ahe=n(Bct,"SPAN",{});var Ict=s(ahe);T(M6.$$.fragment,Ict),Ict.forEach(t),Bct.forEach(t),zVo=i(TNe),nhe=n(TNe,"SPAN",{});var qct=s(nhe);QVo=r(qct,"AutoModelForImageClassification"),qct.forEach(t),TNe.forEach(t),bIe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(E6.$$.fragment,Ks),WVo=i(Ks),rd=n(Ks,"P",{});var xK=s(rd);HVo=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hV=n(xK,"A",{href:!0});var Nct=s(hV);UVo=r(Nct,"from_pretrained()"),Nct.forEach(t),JVo=r(xK," class method or the "),pV=n(xK,"A",{href:!0});var jct=s(pV);YVo=r(jct,"from_config()"),jct.forEach(t),KVo=r(xK,` class
method.`),xK.forEach(t),ZVo=i(Ks),C6=n(Ks,"P",{});var MNe=s(C6);eXo=r(MNe,"This class cannot be instantiated directly using "),she=n(MNe,"CODE",{});var Dct=s(she);oXo=r(Dct,"__init__()"),Dct.forEach(t),rXo=r(MNe," (throws an error)."),MNe.forEach(t),tXo=i(Ks),mt=n(Ks,"DIV",{class:!0});var F3=s(mt);T(w6.$$.fragment,F3),aXo=i(F3),lhe=n(F3,"P",{});var Gct=s(lhe);nXo=r(Gct,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Gct.forEach(t),sXo=i(F3),td=n(F3,"P",{});var $K=s(td);lXo=r($K,`Note:
Loading a model from its configuration file does `),ihe=n($K,"STRONG",{});var Oct=s(ihe);iXo=r(Oct,"not"),Oct.forEach(t),dXo=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=n($K,"A",{href:!0});var Vct=s(uV);cXo=r(Vct,"from_pretrained()"),Vct.forEach(t),fXo=r($K," to load the model weights."),$K.forEach(t),mXo=i(F3),T(kv.$$.fragment,F3),F3.forEach(t),gXo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(A6.$$.fragment,ca),hXo=i(ca),dhe=n(ca,"P",{});var Xct=s(dhe);pXo=r(Xct,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xct.forEach(t),uXo=i(ca),qa=n(ca,"P",{});var T3=s(qa);_Xo=r(T3,"The model class to instantiate is selected based on the "),che=n(T3,"CODE",{});var zct=s(che);bXo=r(zct,"model_type"),zct.forEach(t),vXo=r(T3,` property of the config object (either
passed as an argument or loaded from `),fhe=n(T3,"CODE",{});var Qct=s(fhe);FXo=r(Qct,"pretrained_model_name_or_path"),Qct.forEach(t),TXo=r(T3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=n(T3,"CODE",{});var Wct=s(mhe);MXo=r(Wct,"pretrained_model_name_or_path"),Wct.forEach(t),EXo=r(T3,":"),T3.forEach(t),CXo=i(ca),ve=n(ca,"UL",{});var Ee=s(ve);Sv=n(Ee,"LI",{});var zxe=s(Sv);ghe=n(zxe,"STRONG",{});var Hct=s(ghe);wXo=r(Hct,"beit"),Hct.forEach(t),AXo=r(zxe," \u2014 "),_V=n(zxe,"A",{href:!0});var Uct=s(_V);yXo=r(Uct,"BeitForImageClassification"),Uct.forEach(t),LXo=r(zxe," (BEiT model)"),zxe.forEach(t),xXo=i(Ee),Rv=n(Ee,"LI",{});var Qxe=s(Rv);hhe=n(Qxe,"STRONG",{});var Jct=s(hhe);$Xo=r(Jct,"convnext"),Jct.forEach(t),kXo=r(Qxe," \u2014 "),bV=n(Qxe,"A",{href:!0});var Yct=s(bV);SXo=r(Yct,"ConvNextForImageClassification"),Yct.forEach(t),RXo=r(Qxe," (ConvNext model)"),Qxe.forEach(t),PXo=i(Ee),Pv=n(Ee,"LI",{});var Wxe=s(Pv);phe=n(Wxe,"STRONG",{});var Kct=s(phe);BXo=r(Kct,"data2vec-vision"),Kct.forEach(t),IXo=r(Wxe," \u2014 "),vV=n(Wxe,"A",{href:!0});var Zct=s(vV);qXo=r(Zct,"Data2VecVisionForImageClassification"),Zct.forEach(t),NXo=r(Wxe," (Data2VecVision model)"),Wxe.forEach(t),jXo=i(Ee),Ps=n(Ee,"LI",{});var f$=s(Ps);uhe=n(f$,"STRONG",{});var eft=s(uhe);DXo=r(eft,"deit"),eft.forEach(t),GXo=r(f$," \u2014 "),FV=n(f$,"A",{href:!0});var oft=s(FV);OXo=r(oft,"DeiTForImageClassification"),oft.forEach(t),VXo=r(f$," or "),TV=n(f$,"A",{href:!0});var rft=s(TV);XXo=r(rft,"DeiTForImageClassificationWithTeacher"),rft.forEach(t),zXo=r(f$," (DeiT model)"),f$.forEach(t),QXo=i(Ee),Bv=n(Ee,"LI",{});var Hxe=s(Bv);_he=n(Hxe,"STRONG",{});var tft=s(_he);WXo=r(tft,"imagegpt"),tft.forEach(t),HXo=r(Hxe," \u2014 "),MV=n(Hxe,"A",{href:!0});var aft=s(MV);UXo=r(aft,"ImageGPTForImageClassification"),aft.forEach(t),JXo=r(Hxe," (ImageGPT model)"),Hxe.forEach(t),YXo=i(Ee),gt=n(Ee,"LI",{});var mf=s(gt);bhe=n(mf,"STRONG",{});var nft=s(bhe);KXo=r(nft,"perceiver"),nft.forEach(t),ZXo=r(mf," \u2014 "),EV=n(mf,"A",{href:!0});var sft=s(EV);ezo=r(sft,"PerceiverForImageClassificationLearned"),sft.forEach(t),ozo=r(mf," or "),CV=n(mf,"A",{href:!0});var lft=s(CV);rzo=r(lft,"PerceiverForImageClassificationFourier"),lft.forEach(t),tzo=r(mf," or "),wV=n(mf,"A",{href:!0});var ift=s(wV);azo=r(ift,"PerceiverForImageClassificationConvProcessing"),ift.forEach(t),nzo=r(mf," (Perceiver model)"),mf.forEach(t),szo=i(Ee),Iv=n(Ee,"LI",{});var Uxe=s(Iv);vhe=n(Uxe,"STRONG",{});var dft=s(vhe);lzo=r(dft,"poolformer"),dft.forEach(t),izo=r(Uxe," \u2014 "),AV=n(Uxe,"A",{href:!0});var cft=s(AV);dzo=r(cft,"PoolFormerForImageClassification"),cft.forEach(t),czo=r(Uxe," (PoolFormer model)"),Uxe.forEach(t),fzo=i(Ee),qv=n(Ee,"LI",{});var Jxe=s(qv);Fhe=n(Jxe,"STRONG",{});var fft=s(Fhe);mzo=r(fft,"regnet"),fft.forEach(t),gzo=r(Jxe," \u2014 "),yV=n(Jxe,"A",{href:!0});var mft=s(yV);hzo=r(mft,"RegNetForImageClassification"),mft.forEach(t),pzo=r(Jxe," (RegNet model)"),Jxe.forEach(t),uzo=i(Ee),Nv=n(Ee,"LI",{});var Yxe=s(Nv);The=n(Yxe,"STRONG",{});var gft=s(The);_zo=r(gft,"resnet"),gft.forEach(t),bzo=r(Yxe," \u2014 "),LV=n(Yxe,"A",{href:!0});var hft=s(LV);vzo=r(hft,"ResNetForImageClassification"),hft.forEach(t),Fzo=r(Yxe," (ResNet model)"),Yxe.forEach(t),Tzo=i(Ee),jv=n(Ee,"LI",{});var Kxe=s(jv);Mhe=n(Kxe,"STRONG",{});var pft=s(Mhe);Mzo=r(pft,"segformer"),pft.forEach(t),Ezo=r(Kxe," \u2014 "),xV=n(Kxe,"A",{href:!0});var uft=s(xV);Czo=r(uft,"SegformerForImageClassification"),uft.forEach(t),wzo=r(Kxe," (SegFormer model)"),Kxe.forEach(t),Azo=i(Ee),Dv=n(Ee,"LI",{});var Zxe=s(Dv);Ehe=n(Zxe,"STRONG",{});var _ft=s(Ehe);yzo=r(_ft,"swin"),_ft.forEach(t),Lzo=r(Zxe," \u2014 "),$V=n(Zxe,"A",{href:!0});var bft=s($V);xzo=r(bft,"SwinForImageClassification"),bft.forEach(t),$zo=r(Zxe," (Swin model)"),Zxe.forEach(t),kzo=i(Ee),Gv=n(Ee,"LI",{});var e9e=s(Gv);Che=n(e9e,"STRONG",{});var vft=s(Che);Szo=r(vft,"van"),vft.forEach(t),Rzo=r(e9e," \u2014 "),kV=n(e9e,"A",{href:!0});var Fft=s(kV);Pzo=r(Fft,"VanForImageClassification"),Fft.forEach(t),Bzo=r(e9e," (VAN model)"),e9e.forEach(t),Izo=i(Ee),Ov=n(Ee,"LI",{});var o9e=s(Ov);whe=n(o9e,"STRONG",{});var Tft=s(whe);qzo=r(Tft,"vit"),Tft.forEach(t),Nzo=r(o9e," \u2014 "),SV=n(o9e,"A",{href:!0});var Mft=s(SV);jzo=r(Mft,"ViTForImageClassification"),Mft.forEach(t),Dzo=r(o9e," (ViT model)"),o9e.forEach(t),Ee.forEach(t),Gzo=i(ca),Vv=n(ca,"P",{});var r9e=s(Vv);Ozo=r(r9e,"The model is set in evaluation mode by default using "),Ahe=n(r9e,"CODE",{});var Eft=s(Ahe);Vzo=r(Eft,"model.eval()"),Eft.forEach(t),Xzo=r(r9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=n(r9e,"CODE",{});var Cft=s(yhe);zzo=r(Cft,"model.train()"),Cft.forEach(t),r9e.forEach(t),Qzo=i(ca),T(Xv.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),vIe=i(f),ad=n(f,"H2",{class:!0});var ENe=s(ad);zv=n(ENe,"A",{id:!0,class:!0,href:!0});var wft=s(zv);Lhe=n(wft,"SPAN",{});var Aft=s(Lhe);T(y6.$$.fragment,Aft),Aft.forEach(t),wft.forEach(t),Wzo=i(ENe),xhe=n(ENe,"SPAN",{});var yft=s(xhe);Hzo=r(yft,"AutoModelForVision2Seq"),yft.forEach(t),ENe.forEach(t),FIe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(L6.$$.fragment,Zs),Uzo=i(Zs),nd=n(Zs,"P",{});var kK=s(nd);Jzo=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RV=n(kK,"A",{href:!0});var Lft=s(RV);Yzo=r(Lft,"from_pretrained()"),Lft.forEach(t),Kzo=r(kK," class method or the "),PV=n(kK,"A",{href:!0});var xft=s(PV);Zzo=r(xft,"from_config()"),xft.forEach(t),eQo=r(kK,` class
method.`),kK.forEach(t),oQo=i(Zs),x6=n(Zs,"P",{});var CNe=s(x6);rQo=r(CNe,"This class cannot be instantiated directly using "),$he=n(CNe,"CODE",{});var $ft=s($he);tQo=r($ft,"__init__()"),$ft.forEach(t),aQo=r(CNe," (throws an error)."),CNe.forEach(t),nQo=i(Zs),ht=n(Zs,"DIV",{class:!0});var M3=s(ht);T($6.$$.fragment,M3),sQo=i(M3),khe=n(M3,"P",{});var kft=s(khe);lQo=r(kft,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),kft.forEach(t),iQo=i(M3),sd=n(M3,"P",{});var SK=s(sd);dQo=r(SK,`Note:
Loading a model from its configuration file does `),She=n(SK,"STRONG",{});var Sft=s(She);cQo=r(Sft,"not"),Sft.forEach(t),fQo=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=n(SK,"A",{href:!0});var Rft=s(BV);mQo=r(Rft,"from_pretrained()"),Rft.forEach(t),gQo=r(SK," to load the model weights."),SK.forEach(t),hQo=i(M3),T(Qv.$$.fragment,M3),M3.forEach(t),pQo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(k6.$$.fragment,fa),uQo=i(fa),Rhe=n(fa,"P",{});var Pft=s(Rhe);_Qo=r(Pft,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Pft.forEach(t),bQo=i(fa),Na=n(fa,"P",{});var E3=s(Na);vQo=r(E3,"The model class to instantiate is selected based on the "),Phe=n(E3,"CODE",{});var Bft=s(Phe);FQo=r(Bft,"model_type"),Bft.forEach(t),TQo=r(E3,` property of the config object (either
passed as an argument or loaded from `),Bhe=n(E3,"CODE",{});var Ift=s(Bhe);MQo=r(Ift,"pretrained_model_name_or_path"),Ift.forEach(t),EQo=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=n(E3,"CODE",{});var qft=s(Ihe);CQo=r(qft,"pretrained_model_name_or_path"),qft.forEach(t),wQo=r(E3,":"),E3.forEach(t),AQo=i(fa),qhe=n(fa,"UL",{});var Nft=s(qhe);Wv=n(Nft,"LI",{});var t9e=s(Wv);Nhe=n(t9e,"STRONG",{});var jft=s(Nhe);yQo=r(jft,"vision-encoder-decoder"),jft.forEach(t),LQo=r(t9e," \u2014 "),IV=n(t9e,"A",{href:!0});var Dft=s(IV);xQo=r(Dft,"VisionEncoderDecoderModel"),Dft.forEach(t),$Qo=r(t9e," (Vision Encoder decoder model)"),t9e.forEach(t),Nft.forEach(t),kQo=i(fa),Hv=n(fa,"P",{});var a9e=s(Hv);SQo=r(a9e,"The model is set in evaluation mode by default using "),jhe=n(a9e,"CODE",{});var Gft=s(jhe);RQo=r(Gft,"model.eval()"),Gft.forEach(t),PQo=r(a9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=n(a9e,"CODE",{});var Oft=s(Dhe);BQo=r(Oft,"model.train()"),Oft.forEach(t),a9e.forEach(t),IQo=i(fa),T(Uv.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),TIe=i(f),ld=n(f,"H2",{class:!0});var wNe=s(ld);Jv=n(wNe,"A",{id:!0,class:!0,href:!0});var Vft=s(Jv);Ghe=n(Vft,"SPAN",{});var Xft=s(Ghe);T(S6.$$.fragment,Xft),Xft.forEach(t),Vft.forEach(t),qQo=i(wNe),Ohe=n(wNe,"SPAN",{});var zft=s(Ohe);NQo=r(zft,"AutoModelForAudioClassification"),zft.forEach(t),wNe.forEach(t),MIe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(R6.$$.fragment,el),jQo=i(el),id=n(el,"P",{});var RK=s(id);DQo=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),qV=n(RK,"A",{href:!0});var Qft=s(qV);GQo=r(Qft,"from_pretrained()"),Qft.forEach(t),OQo=r(RK," class method or the "),NV=n(RK,"A",{href:!0});var Wft=s(NV);VQo=r(Wft,"from_config()"),Wft.forEach(t),XQo=r(RK,` class
method.`),RK.forEach(t),zQo=i(el),P6=n(el,"P",{});var ANe=s(P6);QQo=r(ANe,"This class cannot be instantiated directly using "),Vhe=n(ANe,"CODE",{});var Hft=s(Vhe);WQo=r(Hft,"__init__()"),Hft.forEach(t),HQo=r(ANe," (throws an error)."),ANe.forEach(t),UQo=i(el),pt=n(el,"DIV",{class:!0});var C3=s(pt);T(B6.$$.fragment,C3),JQo=i(C3),Xhe=n(C3,"P",{});var Uft=s(Xhe);YQo=r(Uft,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Uft.forEach(t),KQo=i(C3),dd=n(C3,"P",{});var PK=s(dd);ZQo=r(PK,`Note:
Loading a model from its configuration file does `),zhe=n(PK,"STRONG",{});var Jft=s(zhe);eWo=r(Jft,"not"),Jft.forEach(t),oWo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=n(PK,"A",{href:!0});var Yft=s(jV);rWo=r(Yft,"from_pretrained()"),Yft.forEach(t),tWo=r(PK," to load the model weights."),PK.forEach(t),aWo=i(C3),T(Yv.$$.fragment,C3),C3.forEach(t),nWo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(I6.$$.fragment,ma),sWo=i(ma),Qhe=n(ma,"P",{});var Kft=s(Qhe);lWo=r(Kft,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Kft.forEach(t),iWo=i(ma),ja=n(ma,"P",{});var w3=s(ja);dWo=r(w3,"The model class to instantiate is selected based on the "),Whe=n(w3,"CODE",{});var Zft=s(Whe);cWo=r(Zft,"model_type"),Zft.forEach(t),fWo=r(w3,` property of the config object (either
passed as an argument or loaded from `),Hhe=n(w3,"CODE",{});var emt=s(Hhe);mWo=r(emt,"pretrained_model_name_or_path"),emt.forEach(t),gWo=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=n(w3,"CODE",{});var omt=s(Uhe);hWo=r(omt,"pretrained_model_name_or_path"),omt.forEach(t),pWo=r(w3,":"),w3.forEach(t),uWo=i(ma),je=n(ma,"UL",{});var bo=s(je);Kv=n(bo,"LI",{});var n9e=s(Kv);Jhe=n(n9e,"STRONG",{});var rmt=s(Jhe);_Wo=r(rmt,"data2vec-audio"),rmt.forEach(t),bWo=r(n9e," \u2014 "),DV=n(n9e,"A",{href:!0});var tmt=s(DV);vWo=r(tmt,"Data2VecAudioForSequenceClassification"),tmt.forEach(t),FWo=r(n9e," (Data2VecAudio model)"),n9e.forEach(t),TWo=i(bo),Zv=n(bo,"LI",{});var s9e=s(Zv);Yhe=n(s9e,"STRONG",{});var amt=s(Yhe);MWo=r(amt,"hubert"),amt.forEach(t),EWo=r(s9e," \u2014 "),GV=n(s9e,"A",{href:!0});var nmt=s(GV);CWo=r(nmt,"HubertForSequenceClassification"),nmt.forEach(t),wWo=r(s9e," (Hubert model)"),s9e.forEach(t),AWo=i(bo),eF=n(bo,"LI",{});var l9e=s(eF);Khe=n(l9e,"STRONG",{});var smt=s(Khe);yWo=r(smt,"sew"),smt.forEach(t),LWo=r(l9e," \u2014 "),OV=n(l9e,"A",{href:!0});var lmt=s(OV);xWo=r(lmt,"SEWForSequenceClassification"),lmt.forEach(t),$Wo=r(l9e," (SEW model)"),l9e.forEach(t),kWo=i(bo),oF=n(bo,"LI",{});var i9e=s(oF);Zhe=n(i9e,"STRONG",{});var imt=s(Zhe);SWo=r(imt,"sew-d"),imt.forEach(t),RWo=r(i9e," \u2014 "),VV=n(i9e,"A",{href:!0});var dmt=s(VV);PWo=r(dmt,"SEWDForSequenceClassification"),dmt.forEach(t),BWo=r(i9e," (SEW-D model)"),i9e.forEach(t),IWo=i(bo),rF=n(bo,"LI",{});var d9e=s(rF);epe=n(d9e,"STRONG",{});var cmt=s(epe);qWo=r(cmt,"unispeech"),cmt.forEach(t),NWo=r(d9e," \u2014 "),XV=n(d9e,"A",{href:!0});var fmt=s(XV);jWo=r(fmt,"UniSpeechForSequenceClassification"),fmt.forEach(t),DWo=r(d9e," (UniSpeech model)"),d9e.forEach(t),GWo=i(bo),tF=n(bo,"LI",{});var c9e=s(tF);ope=n(c9e,"STRONG",{});var mmt=s(ope);OWo=r(mmt,"unispeech-sat"),mmt.forEach(t),VWo=r(c9e," \u2014 "),zV=n(c9e,"A",{href:!0});var gmt=s(zV);XWo=r(gmt,"UniSpeechSatForSequenceClassification"),gmt.forEach(t),zWo=r(c9e," (UniSpeechSat model)"),c9e.forEach(t),QWo=i(bo),aF=n(bo,"LI",{});var f9e=s(aF);rpe=n(f9e,"STRONG",{});var hmt=s(rpe);WWo=r(hmt,"wav2vec2"),hmt.forEach(t),HWo=r(f9e," \u2014 "),QV=n(f9e,"A",{href:!0});var pmt=s(QV);UWo=r(pmt,"Wav2Vec2ForSequenceClassification"),pmt.forEach(t),JWo=r(f9e," (Wav2Vec2 model)"),f9e.forEach(t),YWo=i(bo),nF=n(bo,"LI",{});var m9e=s(nF);tpe=n(m9e,"STRONG",{});var umt=s(tpe);KWo=r(umt,"wavlm"),umt.forEach(t),ZWo=r(m9e," \u2014 "),WV=n(m9e,"A",{href:!0});var _mt=s(WV);eHo=r(_mt,"WavLMForSequenceClassification"),_mt.forEach(t),oHo=r(m9e," (WavLM model)"),m9e.forEach(t),bo.forEach(t),rHo=i(ma),sF=n(ma,"P",{});var g9e=s(sF);tHo=r(g9e,"The model is set in evaluation mode by default using "),ape=n(g9e,"CODE",{});var bmt=s(ape);aHo=r(bmt,"model.eval()"),bmt.forEach(t),nHo=r(g9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),npe=n(g9e,"CODE",{});var vmt=s(npe);sHo=r(vmt,"model.train()"),vmt.forEach(t),g9e.forEach(t),lHo=i(ma),T(lF.$$.fragment,ma),ma.forEach(t),el.forEach(t),EIe=i(f),cd=n(f,"H2",{class:!0});var yNe=s(cd);iF=n(yNe,"A",{id:!0,class:!0,href:!0});var Fmt=s(iF);spe=n(Fmt,"SPAN",{});var Tmt=s(spe);T(q6.$$.fragment,Tmt),Tmt.forEach(t),Fmt.forEach(t),iHo=i(yNe),lpe=n(yNe,"SPAN",{});var Mmt=s(lpe);dHo=r(Mmt,"AutoModelForAudioFrameClassification"),Mmt.forEach(t),yNe.forEach(t),CIe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(N6.$$.fragment,ol),cHo=i(ol),fd=n(ol,"P",{});var BK=s(fd);fHo=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),HV=n(BK,"A",{href:!0});var Emt=s(HV);mHo=r(Emt,"from_pretrained()"),Emt.forEach(t),gHo=r(BK," class method or the "),UV=n(BK,"A",{href:!0});var Cmt=s(UV);hHo=r(Cmt,"from_config()"),Cmt.forEach(t),pHo=r(BK,` class
method.`),BK.forEach(t),uHo=i(ol),j6=n(ol,"P",{});var LNe=s(j6);_Ho=r(LNe,"This class cannot be instantiated directly using "),ipe=n(LNe,"CODE",{});var wmt=s(ipe);bHo=r(wmt,"__init__()"),wmt.forEach(t),vHo=r(LNe," (throws an error)."),LNe.forEach(t),FHo=i(ol),ut=n(ol,"DIV",{class:!0});var A3=s(ut);T(D6.$$.fragment,A3),THo=i(A3),dpe=n(A3,"P",{});var Amt=s(dpe);MHo=r(Amt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Amt.forEach(t),EHo=i(A3),md=n(A3,"P",{});var IK=s(md);CHo=r(IK,`Note:
Loading a model from its configuration file does `),cpe=n(IK,"STRONG",{});var ymt=s(cpe);wHo=r(ymt,"not"),ymt.forEach(t),AHo=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=n(IK,"A",{href:!0});var Lmt=s(JV);yHo=r(Lmt,"from_pretrained()"),Lmt.forEach(t),LHo=r(IK," to load the model weights."),IK.forEach(t),xHo=i(A3),T(dF.$$.fragment,A3),A3.forEach(t),$Ho=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(G6.$$.fragment,ga),kHo=i(ga),fpe=n(ga,"P",{});var xmt=s(fpe);SHo=r(xmt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xmt.forEach(t),RHo=i(ga),Da=n(ga,"P",{});var y3=s(Da);PHo=r(y3,"The model class to instantiate is selected based on the "),mpe=n(y3,"CODE",{});var $mt=s(mpe);BHo=r($mt,"model_type"),$mt.forEach(t),IHo=r(y3,` property of the config object (either
passed as an argument or loaded from `),gpe=n(y3,"CODE",{});var kmt=s(gpe);qHo=r(kmt,"pretrained_model_name_or_path"),kmt.forEach(t),NHo=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hpe=n(y3,"CODE",{});var Smt=s(hpe);jHo=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),DHo=r(y3,":"),y3.forEach(t),GHo=i(ga),Ga=n(ga,"UL",{});var L3=s(Ga);cF=n(L3,"LI",{});var h9e=s(cF);ppe=n(h9e,"STRONG",{});var Rmt=s(ppe);OHo=r(Rmt,"data2vec-audio"),Rmt.forEach(t),VHo=r(h9e," \u2014 "),YV=n(h9e,"A",{href:!0});var Pmt=s(YV);XHo=r(Pmt,"Data2VecAudioForAudioFrameClassification"),Pmt.forEach(t),zHo=r(h9e," (Data2VecAudio model)"),h9e.forEach(t),QHo=i(L3),fF=n(L3,"LI",{});var p9e=s(fF);upe=n(p9e,"STRONG",{});var Bmt=s(upe);WHo=r(Bmt,"unispeech-sat"),Bmt.forEach(t),HHo=r(p9e," \u2014 "),KV=n(p9e,"A",{href:!0});var Imt=s(KV);UHo=r(Imt,"UniSpeechSatForAudioFrameClassification"),Imt.forEach(t),JHo=r(p9e," (UniSpeechSat model)"),p9e.forEach(t),YHo=i(L3),mF=n(L3,"LI",{});var u9e=s(mF);_pe=n(u9e,"STRONG",{});var qmt=s(_pe);KHo=r(qmt,"wav2vec2"),qmt.forEach(t),ZHo=r(u9e," \u2014 "),ZV=n(u9e,"A",{href:!0});var Nmt=s(ZV);eUo=r(Nmt,"Wav2Vec2ForAudioFrameClassification"),Nmt.forEach(t),oUo=r(u9e," (Wav2Vec2 model)"),u9e.forEach(t),rUo=i(L3),gF=n(L3,"LI",{});var _9e=s(gF);bpe=n(_9e,"STRONG",{});var jmt=s(bpe);tUo=r(jmt,"wavlm"),jmt.forEach(t),aUo=r(_9e," \u2014 "),eX=n(_9e,"A",{href:!0});var Dmt=s(eX);nUo=r(Dmt,"WavLMForAudioFrameClassification"),Dmt.forEach(t),sUo=r(_9e," (WavLM model)"),_9e.forEach(t),L3.forEach(t),lUo=i(ga),hF=n(ga,"P",{});var b9e=s(hF);iUo=r(b9e,"The model is set in evaluation mode by default using "),vpe=n(b9e,"CODE",{});var Gmt=s(vpe);dUo=r(Gmt,"model.eval()"),Gmt.forEach(t),cUo=r(b9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fpe=n(b9e,"CODE",{});var Omt=s(Fpe);fUo=r(Omt,"model.train()"),Omt.forEach(t),b9e.forEach(t),mUo=i(ga),T(pF.$$.fragment,ga),ga.forEach(t),ol.forEach(t),wIe=i(f),gd=n(f,"H2",{class:!0});var xNe=s(gd);uF=n(xNe,"A",{id:!0,class:!0,href:!0});var Vmt=s(uF);Tpe=n(Vmt,"SPAN",{});var Xmt=s(Tpe);T(O6.$$.fragment,Xmt),Xmt.forEach(t),Vmt.forEach(t),gUo=i(xNe),Mpe=n(xNe,"SPAN",{});var zmt=s(Mpe);hUo=r(zmt,"AutoModelForCTC"),zmt.forEach(t),xNe.forEach(t),AIe=i(f),Vo=n(f,"DIV",{class:!0});var rl=s(Vo);T(V6.$$.fragment,rl),pUo=i(rl),hd=n(rl,"P",{});var qK=s(hd);uUo=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),oX=n(qK,"A",{href:!0});var Qmt=s(oX);_Uo=r(Qmt,"from_pretrained()"),Qmt.forEach(t),bUo=r(qK," class method or the "),rX=n(qK,"A",{href:!0});var Wmt=s(rX);vUo=r(Wmt,"from_config()"),Wmt.forEach(t),FUo=r(qK,` class
method.`),qK.forEach(t),TUo=i(rl),X6=n(rl,"P",{});var $Ne=s(X6);MUo=r($Ne,"This class cannot be instantiated directly using "),Epe=n($Ne,"CODE",{});var Hmt=s(Epe);EUo=r(Hmt,"__init__()"),Hmt.forEach(t),CUo=r($Ne," (throws an error)."),$Ne.forEach(t),wUo=i(rl),_t=n(rl,"DIV",{class:!0});var x3=s(_t);T(z6.$$.fragment,x3),AUo=i(x3),Cpe=n(x3,"P",{});var Umt=s(Cpe);yUo=r(Umt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Umt.forEach(t),LUo=i(x3),pd=n(x3,"P",{});var NK=s(pd);xUo=r(NK,`Note:
Loading a model from its configuration file does `),wpe=n(NK,"STRONG",{});var Jmt=s(wpe);$Uo=r(Jmt,"not"),Jmt.forEach(t),kUo=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=n(NK,"A",{href:!0});var Ymt=s(tX);SUo=r(Ymt,"from_pretrained()"),Ymt.forEach(t),RUo=r(NK," to load the model weights."),NK.forEach(t),PUo=i(x3),T(_F.$$.fragment,x3),x3.forEach(t),BUo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(Q6.$$.fragment,ha),IUo=i(ha),Ape=n(ha,"P",{});var Kmt=s(Ape);qUo=r(Kmt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Kmt.forEach(t),NUo=i(ha),Oa=n(ha,"P",{});var $3=s(Oa);jUo=r($3,"The model class to instantiate is selected based on the "),ype=n($3,"CODE",{});var Zmt=s(ype);DUo=r(Zmt,"model_type"),Zmt.forEach(t),GUo=r($3,` property of the config object (either
passed as an argument or loaded from `),Lpe=n($3,"CODE",{});var egt=s(Lpe);OUo=r(egt,"pretrained_model_name_or_path"),egt.forEach(t),VUo=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=n($3,"CODE",{});var ogt=s(xpe);XUo=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),zUo=r($3,":"),$3.forEach(t),QUo=i(ha),De=n(ha,"UL",{});var vo=s(De);bF=n(vo,"LI",{});var v9e=s(bF);$pe=n(v9e,"STRONG",{});var rgt=s($pe);WUo=r(rgt,"data2vec-audio"),rgt.forEach(t),HUo=r(v9e," \u2014 "),aX=n(v9e,"A",{href:!0});var tgt=s(aX);UUo=r(tgt,"Data2VecAudioForCTC"),tgt.forEach(t),JUo=r(v9e," (Data2VecAudio model)"),v9e.forEach(t),YUo=i(vo),vF=n(vo,"LI",{});var F9e=s(vF);kpe=n(F9e,"STRONG",{});var agt=s(kpe);KUo=r(agt,"hubert"),agt.forEach(t),ZUo=r(F9e," \u2014 "),nX=n(F9e,"A",{href:!0});var ngt=s(nX);eJo=r(ngt,"HubertForCTC"),ngt.forEach(t),oJo=r(F9e," (Hubert model)"),F9e.forEach(t),rJo=i(vo),FF=n(vo,"LI",{});var T9e=s(FF);Spe=n(T9e,"STRONG",{});var sgt=s(Spe);tJo=r(sgt,"sew"),sgt.forEach(t),aJo=r(T9e," \u2014 "),sX=n(T9e,"A",{href:!0});var lgt=s(sX);nJo=r(lgt,"SEWForCTC"),lgt.forEach(t),sJo=r(T9e," (SEW model)"),T9e.forEach(t),lJo=i(vo),TF=n(vo,"LI",{});var M9e=s(TF);Rpe=n(M9e,"STRONG",{});var igt=s(Rpe);iJo=r(igt,"sew-d"),igt.forEach(t),dJo=r(M9e," \u2014 "),lX=n(M9e,"A",{href:!0});var dgt=s(lX);cJo=r(dgt,"SEWDForCTC"),dgt.forEach(t),fJo=r(M9e," (SEW-D model)"),M9e.forEach(t),mJo=i(vo),MF=n(vo,"LI",{});var E9e=s(MF);Ppe=n(E9e,"STRONG",{});var cgt=s(Ppe);gJo=r(cgt,"unispeech"),cgt.forEach(t),hJo=r(E9e," \u2014 "),iX=n(E9e,"A",{href:!0});var fgt=s(iX);pJo=r(fgt,"UniSpeechForCTC"),fgt.forEach(t),uJo=r(E9e," (UniSpeech model)"),E9e.forEach(t),_Jo=i(vo),EF=n(vo,"LI",{});var C9e=s(EF);Bpe=n(C9e,"STRONG",{});var mgt=s(Bpe);bJo=r(mgt,"unispeech-sat"),mgt.forEach(t),vJo=r(C9e," \u2014 "),dX=n(C9e,"A",{href:!0});var ggt=s(dX);FJo=r(ggt,"UniSpeechSatForCTC"),ggt.forEach(t),TJo=r(C9e," (UniSpeechSat model)"),C9e.forEach(t),MJo=i(vo),CF=n(vo,"LI",{});var w9e=s(CF);Ipe=n(w9e,"STRONG",{});var hgt=s(Ipe);EJo=r(hgt,"wav2vec2"),hgt.forEach(t),CJo=r(w9e," \u2014 "),cX=n(w9e,"A",{href:!0});var pgt=s(cX);wJo=r(pgt,"Wav2Vec2ForCTC"),pgt.forEach(t),AJo=r(w9e," (Wav2Vec2 model)"),w9e.forEach(t),yJo=i(vo),wF=n(vo,"LI",{});var A9e=s(wF);qpe=n(A9e,"STRONG",{});var ugt=s(qpe);LJo=r(ugt,"wavlm"),ugt.forEach(t),xJo=r(A9e," \u2014 "),fX=n(A9e,"A",{href:!0});var _gt=s(fX);$Jo=r(_gt,"WavLMForCTC"),_gt.forEach(t),kJo=r(A9e," (WavLM model)"),A9e.forEach(t),vo.forEach(t),SJo=i(ha),AF=n(ha,"P",{});var y9e=s(AF);RJo=r(y9e,"The model is set in evaluation mode by default using "),Npe=n(y9e,"CODE",{});var bgt=s(Npe);PJo=r(bgt,"model.eval()"),bgt.forEach(t),BJo=r(y9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jpe=n(y9e,"CODE",{});var vgt=s(jpe);IJo=r(vgt,"model.train()"),vgt.forEach(t),y9e.forEach(t),qJo=i(ha),T(yF.$$.fragment,ha),ha.forEach(t),rl.forEach(t),yIe=i(f),ud=n(f,"H2",{class:!0});var kNe=s(ud);LF=n(kNe,"A",{id:!0,class:!0,href:!0});var Fgt=s(LF);Dpe=n(Fgt,"SPAN",{});var Tgt=s(Dpe);T(W6.$$.fragment,Tgt),Tgt.forEach(t),Fgt.forEach(t),NJo=i(kNe),Gpe=n(kNe,"SPAN",{});var Mgt=s(Gpe);jJo=r(Mgt,"AutoModelForSpeechSeq2Seq"),Mgt.forEach(t),kNe.forEach(t),LIe=i(f),Xo=n(f,"DIV",{class:!0});var tl=s(Xo);T(H6.$$.fragment,tl),DJo=i(tl),_d=n(tl,"P",{});var jK=s(_d);GJo=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),mX=n(jK,"A",{href:!0});var Egt=s(mX);OJo=r(Egt,"from_pretrained()"),Egt.forEach(t),VJo=r(jK," class method or the "),gX=n(jK,"A",{href:!0});var Cgt=s(gX);XJo=r(Cgt,"from_config()"),Cgt.forEach(t),zJo=r(jK,` class
method.`),jK.forEach(t),QJo=i(tl),U6=n(tl,"P",{});var SNe=s(U6);WJo=r(SNe,"This class cannot be instantiated directly using "),Ope=n(SNe,"CODE",{});var wgt=s(Ope);HJo=r(wgt,"__init__()"),wgt.forEach(t),UJo=r(SNe," (throws an error)."),SNe.forEach(t),JJo=i(tl),bt=n(tl,"DIV",{class:!0});var k3=s(bt);T(J6.$$.fragment,k3),YJo=i(k3),Vpe=n(k3,"P",{});var Agt=s(Vpe);KJo=r(Agt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Agt.forEach(t),ZJo=i(k3),bd=n(k3,"P",{});var DK=s(bd);eYo=r(DK,`Note:
Loading a model from its configuration file does `),Xpe=n(DK,"STRONG",{});var ygt=s(Xpe);oYo=r(ygt,"not"),ygt.forEach(t),rYo=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=n(DK,"A",{href:!0});var Lgt=s(hX);tYo=r(Lgt,"from_pretrained()"),Lgt.forEach(t),aYo=r(DK," to load the model weights."),DK.forEach(t),nYo=i(k3),T(xF.$$.fragment,k3),k3.forEach(t),sYo=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(Y6.$$.fragment,pa),lYo=i(pa),zpe=n(pa,"P",{});var xgt=s(zpe);iYo=r(xgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),xgt.forEach(t),dYo=i(pa),Va=n(pa,"P",{});var S3=s(Va);cYo=r(S3,"The model class to instantiate is selected based on the "),Qpe=n(S3,"CODE",{});var $gt=s(Qpe);fYo=r($gt,"model_type"),$gt.forEach(t),mYo=r(S3,` property of the config object (either
passed as an argument or loaded from `),Wpe=n(S3,"CODE",{});var kgt=s(Wpe);gYo=r(kgt,"pretrained_model_name_or_path"),kgt.forEach(t),hYo=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=n(S3,"CODE",{});var Sgt=s(Hpe);pYo=r(Sgt,"pretrained_model_name_or_path"),Sgt.forEach(t),uYo=r(S3,":"),S3.forEach(t),_Yo=i(pa),K6=n(pa,"UL",{});var RNe=s(K6);$F=n(RNe,"LI",{});var L9e=s($F);Upe=n(L9e,"STRONG",{});var Rgt=s(Upe);bYo=r(Rgt,"speech-encoder-decoder"),Rgt.forEach(t),vYo=r(L9e," \u2014 "),pX=n(L9e,"A",{href:!0});var Pgt=s(pX);FYo=r(Pgt,"SpeechEncoderDecoderModel"),Pgt.forEach(t),TYo=r(L9e," (Speech Encoder decoder model)"),L9e.forEach(t),MYo=i(RNe),kF=n(RNe,"LI",{});var x9e=s(kF);Jpe=n(x9e,"STRONG",{});var Bgt=s(Jpe);EYo=r(Bgt,"speech_to_text"),Bgt.forEach(t),CYo=r(x9e," \u2014 "),uX=n(x9e,"A",{href:!0});var Igt=s(uX);wYo=r(Igt,"Speech2TextForConditionalGeneration"),Igt.forEach(t),AYo=r(x9e," (Speech2Text model)"),x9e.forEach(t),RNe.forEach(t),yYo=i(pa),SF=n(pa,"P",{});var $9e=s(SF);LYo=r($9e,"The model is set in evaluation mode by default using "),Ype=n($9e,"CODE",{});var qgt=s(Ype);xYo=r(qgt,"model.eval()"),qgt.forEach(t),$Yo=r($9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kpe=n($9e,"CODE",{});var Ngt=s(Kpe);kYo=r(Ngt,"model.train()"),Ngt.forEach(t),$9e.forEach(t),SYo=i(pa),T(RF.$$.fragment,pa),pa.forEach(t),tl.forEach(t),xIe=i(f),vd=n(f,"H2",{class:!0});var PNe=s(vd);PF=n(PNe,"A",{id:!0,class:!0,href:!0});var jgt=s(PF);Zpe=n(jgt,"SPAN",{});var Dgt=s(Zpe);T(Z6.$$.fragment,Dgt),Dgt.forEach(t),jgt.forEach(t),RYo=i(PNe),eue=n(PNe,"SPAN",{});var Ggt=s(eue);PYo=r(Ggt,"AutoModelForAudioXVector"),Ggt.forEach(t),PNe.forEach(t),$Ie=i(f),zo=n(f,"DIV",{class:!0});var al=s(zo);T(ey.$$.fragment,al),BYo=i(al),Fd=n(al,"P",{});var GK=s(Fd);IYo=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),_X=n(GK,"A",{href:!0});var Ogt=s(_X);qYo=r(Ogt,"from_pretrained()"),Ogt.forEach(t),NYo=r(GK," class method or the "),bX=n(GK,"A",{href:!0});var Vgt=s(bX);jYo=r(Vgt,"from_config()"),Vgt.forEach(t),DYo=r(GK,` class
method.`),GK.forEach(t),GYo=i(al),oy=n(al,"P",{});var BNe=s(oy);OYo=r(BNe,"This class cannot be instantiated directly using "),oue=n(BNe,"CODE",{});var Xgt=s(oue);VYo=r(Xgt,"__init__()"),Xgt.forEach(t),XYo=r(BNe," (throws an error)."),BNe.forEach(t),zYo=i(al),vt=n(al,"DIV",{class:!0});var R3=s(vt);T(ry.$$.fragment,R3),QYo=i(R3),rue=n(R3,"P",{});var zgt=s(rue);WYo=r(zgt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),zgt.forEach(t),HYo=i(R3),Td=n(R3,"P",{});var OK=s(Td);UYo=r(OK,`Note:
Loading a model from its configuration file does `),tue=n(OK,"STRONG",{});var Qgt=s(tue);JYo=r(Qgt,"not"),Qgt.forEach(t),YYo=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=n(OK,"A",{href:!0});var Wgt=s(vX);KYo=r(Wgt,"from_pretrained()"),Wgt.forEach(t),ZYo=r(OK," to load the model weights."),OK.forEach(t),eKo=i(R3),T(BF.$$.fragment,R3),R3.forEach(t),oKo=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(ty.$$.fragment,ua),rKo=i(ua),aue=n(ua,"P",{});var Hgt=s(aue);tKo=r(Hgt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Hgt.forEach(t),aKo=i(ua),Xa=n(ua,"P",{});var P3=s(Xa);nKo=r(P3,"The model class to instantiate is selected based on the "),nue=n(P3,"CODE",{});var Ugt=s(nue);sKo=r(Ugt,"model_type"),Ugt.forEach(t),lKo=r(P3,` property of the config object (either
passed as an argument or loaded from `),sue=n(P3,"CODE",{});var Jgt=s(sue);iKo=r(Jgt,"pretrained_model_name_or_path"),Jgt.forEach(t),dKo=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lue=n(P3,"CODE",{});var Ygt=s(lue);cKo=r(Ygt,"pretrained_model_name_or_path"),Ygt.forEach(t),fKo=r(P3,":"),P3.forEach(t),mKo=i(ua),za=n(ua,"UL",{});var B3=s(za);IF=n(B3,"LI",{});var k9e=s(IF);iue=n(k9e,"STRONG",{});var Kgt=s(iue);gKo=r(Kgt,"data2vec-audio"),Kgt.forEach(t),hKo=r(k9e," \u2014 "),FX=n(k9e,"A",{href:!0});var Zgt=s(FX);pKo=r(Zgt,"Data2VecAudioForXVector"),Zgt.forEach(t),uKo=r(k9e," (Data2VecAudio model)"),k9e.forEach(t),_Ko=i(B3),qF=n(B3,"LI",{});var S9e=s(qF);due=n(S9e,"STRONG",{});var eht=s(due);bKo=r(eht,"unispeech-sat"),eht.forEach(t),vKo=r(S9e," \u2014 "),TX=n(S9e,"A",{href:!0});var oht=s(TX);FKo=r(oht,"UniSpeechSatForXVector"),oht.forEach(t),TKo=r(S9e," (UniSpeechSat model)"),S9e.forEach(t),MKo=i(B3),NF=n(B3,"LI",{});var R9e=s(NF);cue=n(R9e,"STRONG",{});var rht=s(cue);EKo=r(rht,"wav2vec2"),rht.forEach(t),CKo=r(R9e," \u2014 "),MX=n(R9e,"A",{href:!0});var tht=s(MX);wKo=r(tht,"Wav2Vec2ForXVector"),tht.forEach(t),AKo=r(R9e," (Wav2Vec2 model)"),R9e.forEach(t),yKo=i(B3),jF=n(B3,"LI",{});var P9e=s(jF);fue=n(P9e,"STRONG",{});var aht=s(fue);LKo=r(aht,"wavlm"),aht.forEach(t),xKo=r(P9e," \u2014 "),EX=n(P9e,"A",{href:!0});var nht=s(EX);$Ko=r(nht,"WavLMForXVector"),nht.forEach(t),kKo=r(P9e," (WavLM model)"),P9e.forEach(t),B3.forEach(t),SKo=i(ua),DF=n(ua,"P",{});var B9e=s(DF);RKo=r(B9e,"The model is set in evaluation mode by default using "),mue=n(B9e,"CODE",{});var sht=s(mue);PKo=r(sht,"model.eval()"),sht.forEach(t),BKo=r(B9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=n(B9e,"CODE",{});var lht=s(gue);IKo=r(lht,"model.train()"),lht.forEach(t),B9e.forEach(t),qKo=i(ua),T(GF.$$.fragment,ua),ua.forEach(t),al.forEach(t),kIe=i(f),Md=n(f,"H2",{class:!0});var INe=s(Md);OF=n(INe,"A",{id:!0,class:!0,href:!0});var iht=s(OF);hue=n(iht,"SPAN",{});var dht=s(hue);T(ay.$$.fragment,dht),dht.forEach(t),iht.forEach(t),NKo=i(INe),pue=n(INe,"SPAN",{});var cht=s(pue);jKo=r(cht,"AutoModelForMaskedImageModeling"),cht.forEach(t),INe.forEach(t),SIe=i(f),Qo=n(f,"DIV",{class:!0});var nl=s(Qo);T(ny.$$.fragment,nl),DKo=i(nl),Ed=n(nl,"P",{});var VK=s(Ed);GKo=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),CX=n(VK,"A",{href:!0});var fht=s(CX);OKo=r(fht,"from_pretrained()"),fht.forEach(t),VKo=r(VK," class method or the "),wX=n(VK,"A",{href:!0});var mht=s(wX);XKo=r(mht,"from_config()"),mht.forEach(t),zKo=r(VK,` class
method.`),VK.forEach(t),QKo=i(nl),sy=n(nl,"P",{});var qNe=s(sy);WKo=r(qNe,"This class cannot be instantiated directly using "),uue=n(qNe,"CODE",{});var ght=s(uue);HKo=r(ght,"__init__()"),ght.forEach(t),UKo=r(qNe," (throws an error)."),qNe.forEach(t),JKo=i(nl),Ft=n(nl,"DIV",{class:!0});var I3=s(Ft);T(ly.$$.fragment,I3),YKo=i(I3),_ue=n(I3,"P",{});var hht=s(_ue);KKo=r(hht,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),hht.forEach(t),ZKo=i(I3),Cd=n(I3,"P",{});var XK=s(Cd);eZo=r(XK,`Note:
Loading a model from its configuration file does `),bue=n(XK,"STRONG",{});var pht=s(bue);oZo=r(pht,"not"),pht.forEach(t),rZo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=n(XK,"A",{href:!0});var uht=s(AX);tZo=r(uht,"from_pretrained()"),uht.forEach(t),aZo=r(XK," to load the model weights."),XK.forEach(t),nZo=i(I3),T(VF.$$.fragment,I3),I3.forEach(t),sZo=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(iy.$$.fragment,_a),lZo=i(_a),vue=n(_a,"P",{});var _ht=s(vue);iZo=r(_ht,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),_ht.forEach(t),dZo=i(_a),Qa=n(_a,"P",{});var q3=s(Qa);cZo=r(q3,"The model class to instantiate is selected based on the "),Fue=n(q3,"CODE",{});var bht=s(Fue);fZo=r(bht,"model_type"),bht.forEach(t),mZo=r(q3,` property of the config object (either
passed as an argument or loaded from `),Tue=n(q3,"CODE",{});var vht=s(Tue);gZo=r(vht,"pretrained_model_name_or_path"),vht.forEach(t),hZo=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=n(q3,"CODE",{});var Fht=s(Mue);pZo=r(Fht,"pretrained_model_name_or_path"),Fht.forEach(t),uZo=r(q3,":"),q3.forEach(t),_Zo=i(_a),wd=n(_a,"UL",{});var zK=s(wd);XF=n(zK,"LI",{});var I9e=s(XF);Eue=n(I9e,"STRONG",{});var Tht=s(Eue);bZo=r(Tht,"deit"),Tht.forEach(t),vZo=r(I9e," \u2014 "),yX=n(I9e,"A",{href:!0});var Mht=s(yX);FZo=r(Mht,"DeiTForMaskedImageModeling"),Mht.forEach(t),TZo=r(I9e," (DeiT model)"),I9e.forEach(t),MZo=i(zK),zF=n(zK,"LI",{});var q9e=s(zF);Cue=n(q9e,"STRONG",{});var Eht=s(Cue);EZo=r(Eht,"swin"),Eht.forEach(t),CZo=r(q9e," \u2014 "),LX=n(q9e,"A",{href:!0});var Cht=s(LX);wZo=r(Cht,"SwinForMaskedImageModeling"),Cht.forEach(t),AZo=r(q9e," (Swin model)"),q9e.forEach(t),yZo=i(zK),QF=n(zK,"LI",{});var N9e=s(QF);wue=n(N9e,"STRONG",{});var wht=s(wue);LZo=r(wht,"vit"),wht.forEach(t),xZo=r(N9e," \u2014 "),xX=n(N9e,"A",{href:!0});var Aht=s(xX);$Zo=r(Aht,"ViTForMaskedImageModeling"),Aht.forEach(t),kZo=r(N9e," (ViT model)"),N9e.forEach(t),zK.forEach(t),SZo=i(_a),WF=n(_a,"P",{});var j9e=s(WF);RZo=r(j9e,"The model is set in evaluation mode by default using "),Aue=n(j9e,"CODE",{});var yht=s(Aue);PZo=r(yht,"model.eval()"),yht.forEach(t),BZo=r(j9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yue=n(j9e,"CODE",{});var Lht=s(yue);IZo=r(Lht,"model.train()"),Lht.forEach(t),j9e.forEach(t),qZo=i(_a),T(HF.$$.fragment,_a),_a.forEach(t),nl.forEach(t),RIe=i(f),Ad=n(f,"H2",{class:!0});var NNe=s(Ad);UF=n(NNe,"A",{id:!0,class:!0,href:!0});var xht=s(UF);Lue=n(xht,"SPAN",{});var $ht=s(Lue);T(dy.$$.fragment,$ht),$ht.forEach(t),xht.forEach(t),NZo=i(NNe),xue=n(NNe,"SPAN",{});var kht=s(xue);jZo=r(kht,"AutoModelForObjectDetection"),kht.forEach(t),NNe.forEach(t),PIe=i(f),Wo=n(f,"DIV",{class:!0});var sl=s(Wo);T(cy.$$.fragment,sl),DZo=i(sl),yd=n(sl,"P",{});var QK=s(yd);GZo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),$X=n(QK,"A",{href:!0});var Sht=s($X);OZo=r(Sht,"from_pretrained()"),Sht.forEach(t),VZo=r(QK," class method or the "),kX=n(QK,"A",{href:!0});var Rht=s(kX);XZo=r(Rht,"from_config()"),Rht.forEach(t),zZo=r(QK,` class
method.`),QK.forEach(t),QZo=i(sl),fy=n(sl,"P",{});var jNe=s(fy);WZo=r(jNe,"This class cannot be instantiated directly using "),$ue=n(jNe,"CODE",{});var Pht=s($ue);HZo=r(Pht,"__init__()"),Pht.forEach(t),UZo=r(jNe," (throws an error)."),jNe.forEach(t),JZo=i(sl),Tt=n(sl,"DIV",{class:!0});var N3=s(Tt);T(my.$$.fragment,N3),YZo=i(N3),kue=n(N3,"P",{});var Bht=s(kue);KZo=r(Bht,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Bht.forEach(t),ZZo=i(N3),Ld=n(N3,"P",{});var WK=s(Ld);eer=r(WK,`Note:
Loading a model from its configuration file does `),Sue=n(WK,"STRONG",{});var Iht=s(Sue);oer=r(Iht,"not"),Iht.forEach(t),rer=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(WK,"A",{href:!0});var qht=s(SX);ter=r(qht,"from_pretrained()"),qht.forEach(t),aer=r(WK," to load the model weights."),WK.forEach(t),ner=i(N3),T(JF.$$.fragment,N3),N3.forEach(t),ser=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(gy.$$.fragment,ba),ler=i(ba),Rue=n(ba,"P",{});var Nht=s(Rue);ier=r(Nht,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Nht.forEach(t),der=i(ba),Wa=n(ba,"P",{});var j3=s(Wa);cer=r(j3,"The model class to instantiate is selected based on the "),Pue=n(j3,"CODE",{});var jht=s(Pue);fer=r(jht,"model_type"),jht.forEach(t),mer=r(j3,` property of the config object (either
passed as an argument or loaded from `),Bue=n(j3,"CODE",{});var Dht=s(Bue);ger=r(Dht,"pretrained_model_name_or_path"),Dht.forEach(t),her=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=n(j3,"CODE",{});var Ght=s(Iue);per=r(Ght,"pretrained_model_name_or_path"),Ght.forEach(t),uer=r(j3,":"),j3.forEach(t),_er=i(ba),hy=n(ba,"UL",{});var DNe=s(hy);YF=n(DNe,"LI",{});var D9e=s(YF);que=n(D9e,"STRONG",{});var Oht=s(que);ber=r(Oht,"detr"),Oht.forEach(t),ver=r(D9e," \u2014 "),RX=n(D9e,"A",{href:!0});var Vht=s(RX);Fer=r(Vht,"DetrForObjectDetection"),Vht.forEach(t),Ter=r(D9e," (DETR model)"),D9e.forEach(t),Mer=i(DNe),KF=n(DNe,"LI",{});var G9e=s(KF);Nue=n(G9e,"STRONG",{});var Xht=s(Nue);Eer=r(Xht,"yolos"),Xht.forEach(t),Cer=r(G9e," \u2014 "),PX=n(G9e,"A",{href:!0});var zht=s(PX);wer=r(zht,"YolosForObjectDetection"),zht.forEach(t),Aer=r(G9e," (YOLOS model)"),G9e.forEach(t),DNe.forEach(t),yer=i(ba),ZF=n(ba,"P",{});var O9e=s(ZF);Ler=r(O9e,"The model is set in evaluation mode by default using "),jue=n(O9e,"CODE",{});var Qht=s(jue);xer=r(Qht,"model.eval()"),Qht.forEach(t),$er=r(O9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Due=n(O9e,"CODE",{});var Wht=s(Due);ker=r(Wht,"model.train()"),Wht.forEach(t),O9e.forEach(t),Ser=i(ba),T(e0.$$.fragment,ba),ba.forEach(t),sl.forEach(t),BIe=i(f),xd=n(f,"H2",{class:!0});var GNe=s(xd);o0=n(GNe,"A",{id:!0,class:!0,href:!0});var Hht=s(o0);Gue=n(Hht,"SPAN",{});var Uht=s(Gue);T(py.$$.fragment,Uht),Uht.forEach(t),Hht.forEach(t),Rer=i(GNe),Oue=n(GNe,"SPAN",{});var Jht=s(Oue);Per=r(Jht,"AutoModelForImageSegmentation"),Jht.forEach(t),GNe.forEach(t),IIe=i(f),Ho=n(f,"DIV",{class:!0});var ll=s(Ho);T(uy.$$.fragment,ll),Ber=i(ll),$d=n(ll,"P",{});var HK=s($d);Ier=r(HK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),BX=n(HK,"A",{href:!0});var Yht=s(BX);qer=r(Yht,"from_pretrained()"),Yht.forEach(t),Ner=r(HK," class method or the "),IX=n(HK,"A",{href:!0});var Kht=s(IX);jer=r(Kht,"from_config()"),Kht.forEach(t),Der=r(HK,` class
method.`),HK.forEach(t),Ger=i(ll),_y=n(ll,"P",{});var ONe=s(_y);Oer=r(ONe,"This class cannot be instantiated directly using "),Vue=n(ONe,"CODE",{});var Zht=s(Vue);Ver=r(Zht,"__init__()"),Zht.forEach(t),Xer=r(ONe," (throws an error)."),ONe.forEach(t),zer=i(ll),Mt=n(ll,"DIV",{class:!0});var D3=s(Mt);T(by.$$.fragment,D3),Qer=i(D3),Xue=n(D3,"P",{});var ept=s(Xue);Wer=r(ept,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ept.forEach(t),Her=i(D3),kd=n(D3,"P",{});var UK=s(kd);Uer=r(UK,`Note:
Loading a model from its configuration file does `),zue=n(UK,"STRONG",{});var opt=s(zue);Jer=r(opt,"not"),opt.forEach(t),Yer=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=n(UK,"A",{href:!0});var rpt=s(qX);Ker=r(rpt,"from_pretrained()"),rpt.forEach(t),Zer=r(UK," to load the model weights."),UK.forEach(t),eor=i(D3),T(r0.$$.fragment,D3),D3.forEach(t),oor=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(vy.$$.fragment,va),ror=i(va),Que=n(va,"P",{});var tpt=s(Que);tor=r(tpt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),tpt.forEach(t),aor=i(va),Ha=n(va,"P",{});var G3=s(Ha);nor=r(G3,"The model class to instantiate is selected based on the "),Wue=n(G3,"CODE",{});var apt=s(Wue);sor=r(apt,"model_type"),apt.forEach(t),lor=r(G3,` property of the config object (either
passed as an argument or loaded from `),Hue=n(G3,"CODE",{});var npt=s(Hue);ior=r(npt,"pretrained_model_name_or_path"),npt.forEach(t),dor=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uue=n(G3,"CODE",{});var spt=s(Uue);cor=r(spt,"pretrained_model_name_or_path"),spt.forEach(t),mor=r(G3,":"),G3.forEach(t),gor=i(va),Jue=n(va,"UL",{});var lpt=s(Jue);t0=n(lpt,"LI",{});var V9e=s(t0);Yue=n(V9e,"STRONG",{});var ipt=s(Yue);hor=r(ipt,"detr"),ipt.forEach(t),por=r(V9e," \u2014 "),NX=n(V9e,"A",{href:!0});var dpt=s(NX);uor=r(dpt,"DetrForSegmentation"),dpt.forEach(t),_or=r(V9e," (DETR model)"),V9e.forEach(t),lpt.forEach(t),bor=i(va),a0=n(va,"P",{});var X9e=s(a0);vor=r(X9e,"The model is set in evaluation mode by default using "),Kue=n(X9e,"CODE",{});var cpt=s(Kue);For=r(cpt,"model.eval()"),cpt.forEach(t),Tor=r(X9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zue=n(X9e,"CODE",{});var fpt=s(Zue);Mor=r(fpt,"model.train()"),fpt.forEach(t),X9e.forEach(t),Eor=i(va),T(n0.$$.fragment,va),va.forEach(t),ll.forEach(t),qIe=i(f),Sd=n(f,"H2",{class:!0});var VNe=s(Sd);s0=n(VNe,"A",{id:!0,class:!0,href:!0});var mpt=s(s0);e_e=n(mpt,"SPAN",{});var gpt=s(e_e);T(Fy.$$.fragment,gpt),gpt.forEach(t),mpt.forEach(t),Cor=i(VNe),o_e=n(VNe,"SPAN",{});var hpt=s(o_e);wor=r(hpt,"AutoModelForSemanticSegmentation"),hpt.forEach(t),VNe.forEach(t),NIe=i(f),Uo=n(f,"DIV",{class:!0});var il=s(Uo);T(Ty.$$.fragment,il),Aor=i(il),Rd=n(il,"P",{});var JK=s(Rd);yor=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),jX=n(JK,"A",{href:!0});var ppt=s(jX);Lor=r(ppt,"from_pretrained()"),ppt.forEach(t),xor=r(JK," class method or the "),DX=n(JK,"A",{href:!0});var upt=s(DX);$or=r(upt,"from_config()"),upt.forEach(t),kor=r(JK,` class
method.`),JK.forEach(t),Sor=i(il),My=n(il,"P",{});var XNe=s(My);Ror=r(XNe,"This class cannot be instantiated directly using "),r_e=n(XNe,"CODE",{});var _pt=s(r_e);Por=r(_pt,"__init__()"),_pt.forEach(t),Bor=r(XNe," (throws an error)."),XNe.forEach(t),Ior=i(il),Et=n(il,"DIV",{class:!0});var O3=s(Et);T(Ey.$$.fragment,O3),qor=i(O3),t_e=n(O3,"P",{});var bpt=s(t_e);Nor=r(bpt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),bpt.forEach(t),jor=i(O3),Pd=n(O3,"P",{});var YK=s(Pd);Dor=r(YK,`Note:
Loading a model from its configuration file does `),a_e=n(YK,"STRONG",{});var vpt=s(a_e);Gor=r(vpt,"not"),vpt.forEach(t),Oor=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=n(YK,"A",{href:!0});var Fpt=s(GX);Vor=r(Fpt,"from_pretrained()"),Fpt.forEach(t),Xor=r(YK," to load the model weights."),YK.forEach(t),zor=i(O3),T(l0.$$.fragment,O3),O3.forEach(t),Qor=i(il),uo=n(il,"DIV",{class:!0});var Fa=s(uo);T(Cy.$$.fragment,Fa),Wor=i(Fa),n_e=n(Fa,"P",{});var Tpt=s(n_e);Hor=r(Tpt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Tpt.forEach(t),Uor=i(Fa),Ua=n(Fa,"P",{});var V3=s(Ua);Jor=r(V3,"The model class to instantiate is selected based on the "),s_e=n(V3,"CODE",{});var Mpt=s(s_e);Yor=r(Mpt,"model_type"),Mpt.forEach(t),Kor=r(V3,` property of the config object (either
passed as an argument or loaded from `),l_e=n(V3,"CODE",{});var Ept=s(l_e);Zor=r(Ept,"pretrained_model_name_or_path"),Ept.forEach(t),err=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=n(V3,"CODE",{});var Cpt=s(i_e);orr=r(Cpt,"pretrained_model_name_or_path"),Cpt.forEach(t),rrr=r(V3,":"),V3.forEach(t),trr=i(Fa),Ja=n(Fa,"UL",{});var X3=s(Ja);i0=n(X3,"LI",{});var z9e=s(i0);d_e=n(z9e,"STRONG",{});var wpt=s(d_e);arr=r(wpt,"beit"),wpt.forEach(t),nrr=r(z9e," \u2014 "),OX=n(z9e,"A",{href:!0});var Apt=s(OX);srr=r(Apt,"BeitForSemanticSegmentation"),Apt.forEach(t),lrr=r(z9e," (BEiT model)"),z9e.forEach(t),irr=i(X3),d0=n(X3,"LI",{});var Q9e=s(d0);c_e=n(Q9e,"STRONG",{});var ypt=s(c_e);drr=r(ypt,"data2vec-vision"),ypt.forEach(t),crr=r(Q9e," \u2014 "),VX=n(Q9e,"A",{href:!0});var Lpt=s(VX);frr=r(Lpt,"Data2VecVisionForSemanticSegmentation"),Lpt.forEach(t),mrr=r(Q9e," (Data2VecVision model)"),Q9e.forEach(t),grr=i(X3),c0=n(X3,"LI",{});var W9e=s(c0);f_e=n(W9e,"STRONG",{});var xpt=s(f_e);hrr=r(xpt,"dpt"),xpt.forEach(t),prr=r(W9e," \u2014 "),XX=n(W9e,"A",{href:!0});var $pt=s(XX);urr=r($pt,"DPTForSemanticSegmentation"),$pt.forEach(t),_rr=r(W9e," (DPT model)"),W9e.forEach(t),brr=i(X3),f0=n(X3,"LI",{});var H9e=s(f0);m_e=n(H9e,"STRONG",{});var kpt=s(m_e);vrr=r(kpt,"segformer"),kpt.forEach(t),Frr=r(H9e," \u2014 "),zX=n(H9e,"A",{href:!0});var Spt=s(zX);Trr=r(Spt,"SegformerForSemanticSegmentation"),Spt.forEach(t),Mrr=r(H9e," (SegFormer model)"),H9e.forEach(t),X3.forEach(t),Err=i(Fa),m0=n(Fa,"P",{});var U9e=s(m0);Crr=r(U9e,"The model is set in evaluation mode by default using "),g_e=n(U9e,"CODE",{});var Rpt=s(g_e);wrr=r(Rpt,"model.eval()"),Rpt.forEach(t),Arr=r(U9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h_e=n(U9e,"CODE",{});var Ppt=s(h_e);yrr=r(Ppt,"model.train()"),Ppt.forEach(t),U9e.forEach(t),Lrr=i(Fa),T(g0.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),jIe=i(f),Bd=n(f,"H2",{class:!0});var zNe=s(Bd);h0=n(zNe,"A",{id:!0,class:!0,href:!0});var Bpt=s(h0);p_e=n(Bpt,"SPAN",{});var Ipt=s(p_e);T(wy.$$.fragment,Ipt),Ipt.forEach(t),Bpt.forEach(t),xrr=i(zNe),u_e=n(zNe,"SPAN",{});var qpt=s(u_e);$rr=r(qpt,"AutoModelForInstanceSegmentation"),qpt.forEach(t),zNe.forEach(t),DIe=i(f),Jo=n(f,"DIV",{class:!0});var dl=s(Jo);T(Ay.$$.fragment,dl),krr=i(dl),Id=n(dl,"P",{});var KK=s(Id);Srr=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),QX=n(KK,"A",{href:!0});var Npt=s(QX);Rrr=r(Npt,"from_pretrained()"),Npt.forEach(t),Prr=r(KK," class method or the "),WX=n(KK,"A",{href:!0});var jpt=s(WX);Brr=r(jpt,"from_config()"),jpt.forEach(t),Irr=r(KK,` class
method.`),KK.forEach(t),qrr=i(dl),yy=n(dl,"P",{});var QNe=s(yy);Nrr=r(QNe,"This class cannot be instantiated directly using "),__e=n(QNe,"CODE",{});var Dpt=s(__e);jrr=r(Dpt,"__init__()"),Dpt.forEach(t),Drr=r(QNe," (throws an error)."),QNe.forEach(t),Grr=i(dl),Ct=n(dl,"DIV",{class:!0});var z3=s(Ct);T(Ly.$$.fragment,z3),Orr=i(z3),b_e=n(z3,"P",{});var Gpt=s(b_e);Vrr=r(Gpt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Gpt.forEach(t),Xrr=i(z3),qd=n(z3,"P",{});var ZK=s(qd);zrr=r(ZK,`Note:
Loading a model from its configuration file does `),v_e=n(ZK,"STRONG",{});var Opt=s(v_e);Qrr=r(Opt,"not"),Opt.forEach(t),Wrr=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=n(ZK,"A",{href:!0});var Vpt=s(HX);Hrr=r(Vpt,"from_pretrained()"),Vpt.forEach(t),Urr=r(ZK," to load the model weights."),ZK.forEach(t),Jrr=i(z3),T(p0.$$.fragment,z3),z3.forEach(t),Yrr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(xy.$$.fragment,Ta),Krr=i(Ta),F_e=n(Ta,"P",{});var Xpt=s(F_e);Zrr=r(Xpt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Xpt.forEach(t),etr=i(Ta),Ya=n(Ta,"P",{});var Q3=s(Ya);otr=r(Q3,"The model class to instantiate is selected based on the "),T_e=n(Q3,"CODE",{});var zpt=s(T_e);rtr=r(zpt,"model_type"),zpt.forEach(t),ttr=r(Q3,` property of the config object (either
passed as an argument or loaded from `),M_e=n(Q3,"CODE",{});var Qpt=s(M_e);atr=r(Qpt,"pretrained_model_name_or_path"),Qpt.forEach(t),ntr=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=n(Q3,"CODE",{});var Wpt=s(E_e);str=r(Wpt,"pretrained_model_name_or_path"),Wpt.forEach(t),ltr=r(Q3,":"),Q3.forEach(t),itr=i(Ta),C_e=n(Ta,"UL",{});var Hpt=s(C_e);u0=n(Hpt,"LI",{});var J9e=s(u0);w_e=n(J9e,"STRONG",{});var Upt=s(w_e);dtr=r(Upt,"maskformer"),Upt.forEach(t),ctr=r(J9e," \u2014 "),UX=n(J9e,"A",{href:!0});var Jpt=s(UX);ftr=r(Jpt,"MaskFormerForInstanceSegmentation"),Jpt.forEach(t),mtr=r(J9e," (MaskFormer model)"),J9e.forEach(t),Hpt.forEach(t),gtr=i(Ta),_0=n(Ta,"P",{});var Y9e=s(_0);htr=r(Y9e,"The model is set in evaluation mode by default using "),A_e=n(Y9e,"CODE",{});var Ypt=s(A_e);ptr=r(Ypt,"model.eval()"),Ypt.forEach(t),utr=r(Y9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y_e=n(Y9e,"CODE",{});var Kpt=s(y_e);_tr=r(Kpt,"model.train()"),Kpt.forEach(t),Y9e.forEach(t),btr=i(Ta),T(b0.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),GIe=i(f),Nd=n(f,"H2",{class:!0});var WNe=s(Nd);v0=n(WNe,"A",{id:!0,class:!0,href:!0});var Zpt=s(v0);L_e=n(Zpt,"SPAN",{});var eut=s(L_e);T($y.$$.fragment,eut),eut.forEach(t),Zpt.forEach(t),vtr=i(WNe),x_e=n(WNe,"SPAN",{});var out=s(x_e);Ftr=r(out,"TFAutoModel"),out.forEach(t),WNe.forEach(t),OIe=i(f),Yo=n(f,"DIV",{class:!0});var cl=s(Yo);T(ky.$$.fragment,cl),Ttr=i(cl),jd=n(cl,"P",{});var eZ=s(jd);Mtr=r(eZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JX=n(eZ,"A",{href:!0});var rut=s(JX);Etr=r(rut,"from_pretrained()"),rut.forEach(t),Ctr=r(eZ," class method or the "),YX=n(eZ,"A",{href:!0});var tut=s(YX);wtr=r(tut,"from_config()"),tut.forEach(t),Atr=r(eZ,` class
method.`),eZ.forEach(t),ytr=i(cl),Sy=n(cl,"P",{});var HNe=s(Sy);Ltr=r(HNe,"This class cannot be instantiated directly using "),$_e=n(HNe,"CODE",{});var aut=s($_e);xtr=r(aut,"__init__()"),aut.forEach(t),$tr=r(HNe," (throws an error)."),HNe.forEach(t),ktr=i(cl),wt=n(cl,"DIV",{class:!0});var W3=s(wt);T(Ry.$$.fragment,W3),Str=i(W3),k_e=n(W3,"P",{});var nut=s(k_e);Rtr=r(nut,"Instantiates one of the base model classes of the library from a configuration."),nut.forEach(t),Ptr=i(W3),Dd=n(W3,"P",{});var oZ=s(Dd);Btr=r(oZ,`Note:
Loading a model from its configuration file does `),S_e=n(oZ,"STRONG",{});var sut=s(S_e);Itr=r(sut,"not"),sut.forEach(t),qtr=r(oZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KX=n(oZ,"A",{href:!0});var lut=s(KX);Ntr=r(lut,"from_pretrained()"),lut.forEach(t),jtr=r(oZ," to load the model weights."),oZ.forEach(t),Dtr=i(W3),T(F0.$$.fragment,W3),W3.forEach(t),Gtr=i(cl),wr=n(cl,"DIV",{class:!0});var fl=s(wr);T(Py.$$.fragment,fl),Otr=i(fl),R_e=n(fl,"P",{});var iut=s(R_e);Vtr=r(iut,"Instantiate one of the base model classes of the library from a pretrained model."),iut.forEach(t),Xtr=i(fl),Ka=n(fl,"P",{});var H3=s(Ka);ztr=r(H3,"The model class to instantiate is selected based on the "),P_e=n(H3,"CODE",{});var dut=s(P_e);Qtr=r(dut,"model_type"),dut.forEach(t),Wtr=r(H3,` property of the config object (either
passed as an argument or loaded from `),B_e=n(H3,"CODE",{});var cut=s(B_e);Htr=r(cut,"pretrained_model_name_or_path"),cut.forEach(t),Utr=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=n(H3,"CODE",{});var fut=s(I_e);Jtr=r(fut,"pretrained_model_name_or_path"),fut.forEach(t),Ytr=r(H3,":"),H3.forEach(t),Ktr=i(fl),N=n(fl,"UL",{});var D=s(N);T0=n(D,"LI",{});var K9e=s(T0);q_e=n(K9e,"STRONG",{});var mut=s(q_e);Ztr=r(mut,"albert"),mut.forEach(t),ear=r(K9e," \u2014 "),ZX=n(K9e,"A",{href:!0});var gut=s(ZX);oar=r(gut,"TFAlbertModel"),gut.forEach(t),rar=r(K9e," (ALBERT model)"),K9e.forEach(t),tar=i(D),M0=n(D,"LI",{});var Z9e=s(M0);N_e=n(Z9e,"STRONG",{});var hut=s(N_e);aar=r(hut,"bart"),hut.forEach(t),nar=r(Z9e," \u2014 "),ez=n(Z9e,"A",{href:!0});var put=s(ez);sar=r(put,"TFBartModel"),put.forEach(t),lar=r(Z9e," (BART model)"),Z9e.forEach(t),iar=i(D),E0=n(D,"LI",{});var e$e=s(E0);j_e=n(e$e,"STRONG",{});var uut=s(j_e);dar=r(uut,"bert"),uut.forEach(t),car=r(e$e," \u2014 "),oz=n(e$e,"A",{href:!0});var _ut=s(oz);far=r(_ut,"TFBertModel"),_ut.forEach(t),mar=r(e$e," (BERT model)"),e$e.forEach(t),gar=i(D),C0=n(D,"LI",{});var o$e=s(C0);D_e=n(o$e,"STRONG",{});var but=s(D_e);har=r(but,"blenderbot"),but.forEach(t),par=r(o$e," \u2014 "),rz=n(o$e,"A",{href:!0});var vut=s(rz);uar=r(vut,"TFBlenderbotModel"),vut.forEach(t),_ar=r(o$e," (Blenderbot model)"),o$e.forEach(t),bar=i(D),w0=n(D,"LI",{});var r$e=s(w0);G_e=n(r$e,"STRONG",{});var Fut=s(G_e);Far=r(Fut,"blenderbot-small"),Fut.forEach(t),Tar=r(r$e," \u2014 "),tz=n(r$e,"A",{href:!0});var Tut=s(tz);Mar=r(Tut,"TFBlenderbotSmallModel"),Tut.forEach(t),Ear=r(r$e," (BlenderbotSmall model)"),r$e.forEach(t),Car=i(D),A0=n(D,"LI",{});var t$e=s(A0);O_e=n(t$e,"STRONG",{});var Mut=s(O_e);war=r(Mut,"camembert"),Mut.forEach(t),Aar=r(t$e," \u2014 "),az=n(t$e,"A",{href:!0});var Eut=s(az);yar=r(Eut,"TFCamembertModel"),Eut.forEach(t),Lar=r(t$e," (CamemBERT model)"),t$e.forEach(t),xar=i(D),y0=n(D,"LI",{});var a$e=s(y0);V_e=n(a$e,"STRONG",{});var Cut=s(V_e);$ar=r(Cut,"clip"),Cut.forEach(t),kar=r(a$e," \u2014 "),nz=n(a$e,"A",{href:!0});var wut=s(nz);Sar=r(wut,"TFCLIPModel"),wut.forEach(t),Rar=r(a$e," (CLIP model)"),a$e.forEach(t),Par=i(D),L0=n(D,"LI",{});var n$e=s(L0);X_e=n(n$e,"STRONG",{});var Aut=s(X_e);Bar=r(Aut,"convbert"),Aut.forEach(t),Iar=r(n$e," \u2014 "),sz=n(n$e,"A",{href:!0});var yut=s(sz);qar=r(yut,"TFConvBertModel"),yut.forEach(t),Nar=r(n$e," (ConvBERT model)"),n$e.forEach(t),jar=i(D),x0=n(D,"LI",{});var s$e=s(x0);z_e=n(s$e,"STRONG",{});var Lut=s(z_e);Dar=r(Lut,"convnext"),Lut.forEach(t),Gar=r(s$e," \u2014 "),lz=n(s$e,"A",{href:!0});var xut=s(lz);Oar=r(xut,"TFConvNextModel"),xut.forEach(t),Var=r(s$e," (ConvNext model)"),s$e.forEach(t),Xar=i(D),$0=n(D,"LI",{});var l$e=s($0);Q_e=n(l$e,"STRONG",{});var $ut=s(Q_e);zar=r($ut,"ctrl"),$ut.forEach(t),Qar=r(l$e," \u2014 "),iz=n(l$e,"A",{href:!0});var kut=s(iz);War=r(kut,"TFCTRLModel"),kut.forEach(t),Har=r(l$e," (CTRL model)"),l$e.forEach(t),Uar=i(D),k0=n(D,"LI",{});var i$e=s(k0);W_e=n(i$e,"STRONG",{});var Sut=s(W_e);Jar=r(Sut,"data2vec-vision"),Sut.forEach(t),Yar=r(i$e," \u2014 "),dz=n(i$e,"A",{href:!0});var Rut=s(dz);Kar=r(Rut,"TFData2VecVisionModel"),Rut.forEach(t),Zar=r(i$e," (Data2VecVision model)"),i$e.forEach(t),enr=i(D),S0=n(D,"LI",{});var d$e=s(S0);H_e=n(d$e,"STRONG",{});var Put=s(H_e);onr=r(Put,"deberta"),Put.forEach(t),rnr=r(d$e," \u2014 "),cz=n(d$e,"A",{href:!0});var But=s(cz);tnr=r(But,"TFDebertaModel"),But.forEach(t),anr=r(d$e," (DeBERTa model)"),d$e.forEach(t),nnr=i(D),R0=n(D,"LI",{});var c$e=s(R0);U_e=n(c$e,"STRONG",{});var Iut=s(U_e);snr=r(Iut,"deberta-v2"),Iut.forEach(t),lnr=r(c$e," \u2014 "),fz=n(c$e,"A",{href:!0});var qut=s(fz);inr=r(qut,"TFDebertaV2Model"),qut.forEach(t),dnr=r(c$e," (DeBERTa-v2 model)"),c$e.forEach(t),cnr=i(D),P0=n(D,"LI",{});var f$e=s(P0);J_e=n(f$e,"STRONG",{});var Nut=s(J_e);fnr=r(Nut,"distilbert"),Nut.forEach(t),mnr=r(f$e," \u2014 "),mz=n(f$e,"A",{href:!0});var jut=s(mz);gnr=r(jut,"TFDistilBertModel"),jut.forEach(t),hnr=r(f$e," (DistilBERT model)"),f$e.forEach(t),pnr=i(D),B0=n(D,"LI",{});var m$e=s(B0);Y_e=n(m$e,"STRONG",{});var Dut=s(Y_e);unr=r(Dut,"dpr"),Dut.forEach(t),_nr=r(m$e," \u2014 "),gz=n(m$e,"A",{href:!0});var Gut=s(gz);bnr=r(Gut,"TFDPRQuestionEncoder"),Gut.forEach(t),vnr=r(m$e," (DPR model)"),m$e.forEach(t),Fnr=i(D),I0=n(D,"LI",{});var g$e=s(I0);K_e=n(g$e,"STRONG",{});var Out=s(K_e);Tnr=r(Out,"electra"),Out.forEach(t),Mnr=r(g$e," \u2014 "),hz=n(g$e,"A",{href:!0});var Vut=s(hz);Enr=r(Vut,"TFElectraModel"),Vut.forEach(t),Cnr=r(g$e," (ELECTRA model)"),g$e.forEach(t),wnr=i(D),q0=n(D,"LI",{});var h$e=s(q0);Z_e=n(h$e,"STRONG",{});var Xut=s(Z_e);Anr=r(Xut,"flaubert"),Xut.forEach(t),ynr=r(h$e," \u2014 "),pz=n(h$e,"A",{href:!0});var zut=s(pz);Lnr=r(zut,"TFFlaubertModel"),zut.forEach(t),xnr=r(h$e," (FlauBERT model)"),h$e.forEach(t),$nr=i(D),Bs=n(D,"LI",{});var m$=s(Bs);e1e=n(m$,"STRONG",{});var Qut=s(e1e);knr=r(Qut,"funnel"),Qut.forEach(t),Snr=r(m$," \u2014 "),uz=n(m$,"A",{href:!0});var Wut=s(uz);Rnr=r(Wut,"TFFunnelModel"),Wut.forEach(t),Pnr=r(m$," or "),_z=n(m$,"A",{href:!0});var Hut=s(_z);Bnr=r(Hut,"TFFunnelBaseModel"),Hut.forEach(t),Inr=r(m$," (Funnel Transformer model)"),m$.forEach(t),qnr=i(D),N0=n(D,"LI",{});var p$e=s(N0);o1e=n(p$e,"STRONG",{});var Uut=s(o1e);Nnr=r(Uut,"gpt2"),Uut.forEach(t),jnr=r(p$e," \u2014 "),bz=n(p$e,"A",{href:!0});var Jut=s(bz);Dnr=r(Jut,"TFGPT2Model"),Jut.forEach(t),Gnr=r(p$e," (OpenAI GPT-2 model)"),p$e.forEach(t),Onr=i(D),j0=n(D,"LI",{});var u$e=s(j0);r1e=n(u$e,"STRONG",{});var Yut=s(r1e);Vnr=r(Yut,"gptj"),Yut.forEach(t),Xnr=r(u$e," \u2014 "),vz=n(u$e,"A",{href:!0});var Kut=s(vz);znr=r(Kut,"TFGPTJModel"),Kut.forEach(t),Qnr=r(u$e," (GPT-J model)"),u$e.forEach(t),Wnr=i(D),D0=n(D,"LI",{});var _$e=s(D0);t1e=n(_$e,"STRONG",{});var Zut=s(t1e);Hnr=r(Zut,"hubert"),Zut.forEach(t),Unr=r(_$e," \u2014 "),Fz=n(_$e,"A",{href:!0});var e_t=s(Fz);Jnr=r(e_t,"TFHubertModel"),e_t.forEach(t),Ynr=r(_$e," (Hubert model)"),_$e.forEach(t),Knr=i(D),G0=n(D,"LI",{});var b$e=s(G0);a1e=n(b$e,"STRONG",{});var o_t=s(a1e);Znr=r(o_t,"layoutlm"),o_t.forEach(t),esr=r(b$e," \u2014 "),Tz=n(b$e,"A",{href:!0});var r_t=s(Tz);osr=r(r_t,"TFLayoutLMModel"),r_t.forEach(t),rsr=r(b$e," (LayoutLM model)"),b$e.forEach(t),tsr=i(D),O0=n(D,"LI",{});var v$e=s(O0);n1e=n(v$e,"STRONG",{});var t_t=s(n1e);asr=r(t_t,"led"),t_t.forEach(t),nsr=r(v$e," \u2014 "),Mz=n(v$e,"A",{href:!0});var a_t=s(Mz);ssr=r(a_t,"TFLEDModel"),a_t.forEach(t),lsr=r(v$e," (LED model)"),v$e.forEach(t),isr=i(D),V0=n(D,"LI",{});var F$e=s(V0);s1e=n(F$e,"STRONG",{});var n_t=s(s1e);dsr=r(n_t,"longformer"),n_t.forEach(t),csr=r(F$e," \u2014 "),Ez=n(F$e,"A",{href:!0});var s_t=s(Ez);fsr=r(s_t,"TFLongformerModel"),s_t.forEach(t),msr=r(F$e," (Longformer model)"),F$e.forEach(t),gsr=i(D),X0=n(D,"LI",{});var T$e=s(X0);l1e=n(T$e,"STRONG",{});var l_t=s(l1e);hsr=r(l_t,"lxmert"),l_t.forEach(t),psr=r(T$e," \u2014 "),Cz=n(T$e,"A",{href:!0});var i_t=s(Cz);usr=r(i_t,"TFLxmertModel"),i_t.forEach(t),_sr=r(T$e," (LXMERT model)"),T$e.forEach(t),bsr=i(D),z0=n(D,"LI",{});var M$e=s(z0);i1e=n(M$e,"STRONG",{});var d_t=s(i1e);vsr=r(d_t,"marian"),d_t.forEach(t),Fsr=r(M$e," \u2014 "),wz=n(M$e,"A",{href:!0});var c_t=s(wz);Tsr=r(c_t,"TFMarianModel"),c_t.forEach(t),Msr=r(M$e," (Marian model)"),M$e.forEach(t),Esr=i(D),Q0=n(D,"LI",{});var E$e=s(Q0);d1e=n(E$e,"STRONG",{});var f_t=s(d1e);Csr=r(f_t,"mbart"),f_t.forEach(t),wsr=r(E$e," \u2014 "),Az=n(E$e,"A",{href:!0});var m_t=s(Az);Asr=r(m_t,"TFMBartModel"),m_t.forEach(t),ysr=r(E$e," (mBART model)"),E$e.forEach(t),Lsr=i(D),W0=n(D,"LI",{});var C$e=s(W0);c1e=n(C$e,"STRONG",{});var g_t=s(c1e);xsr=r(g_t,"mobilebert"),g_t.forEach(t),$sr=r(C$e," \u2014 "),yz=n(C$e,"A",{href:!0});var h_t=s(yz);ksr=r(h_t,"TFMobileBertModel"),h_t.forEach(t),Ssr=r(C$e," (MobileBERT model)"),C$e.forEach(t),Rsr=i(D),H0=n(D,"LI",{});var w$e=s(H0);f1e=n(w$e,"STRONG",{});var p_t=s(f1e);Psr=r(p_t,"mpnet"),p_t.forEach(t),Bsr=r(w$e," \u2014 "),Lz=n(w$e,"A",{href:!0});var u_t=s(Lz);Isr=r(u_t,"TFMPNetModel"),u_t.forEach(t),qsr=r(w$e," (MPNet model)"),w$e.forEach(t),Nsr=i(D),U0=n(D,"LI",{});var A$e=s(U0);m1e=n(A$e,"STRONG",{});var __t=s(m1e);jsr=r(__t,"mt5"),__t.forEach(t),Dsr=r(A$e," \u2014 "),xz=n(A$e,"A",{href:!0});var b_t=s(xz);Gsr=r(b_t,"TFMT5Model"),b_t.forEach(t),Osr=r(A$e," (mT5 model)"),A$e.forEach(t),Vsr=i(D),J0=n(D,"LI",{});var y$e=s(J0);g1e=n(y$e,"STRONG",{});var v_t=s(g1e);Xsr=r(v_t,"openai-gpt"),v_t.forEach(t),zsr=r(y$e," \u2014 "),$z=n(y$e,"A",{href:!0});var F_t=s($z);Qsr=r(F_t,"TFOpenAIGPTModel"),F_t.forEach(t),Wsr=r(y$e," (OpenAI GPT model)"),y$e.forEach(t),Hsr=i(D),Y0=n(D,"LI",{});var L$e=s(Y0);h1e=n(L$e,"STRONG",{});var T_t=s(h1e);Usr=r(T_t,"opt"),T_t.forEach(t),Jsr=r(L$e," \u2014 "),kz=n(L$e,"A",{href:!0});var M_t=s(kz);Ysr=r(M_t,"TFOPTModel"),M_t.forEach(t),Ksr=r(L$e," (OPT model)"),L$e.forEach(t),Zsr=i(D),K0=n(D,"LI",{});var x$e=s(K0);p1e=n(x$e,"STRONG",{});var E_t=s(p1e);elr=r(E_t,"pegasus"),E_t.forEach(t),olr=r(x$e," \u2014 "),Sz=n(x$e,"A",{href:!0});var C_t=s(Sz);rlr=r(C_t,"TFPegasusModel"),C_t.forEach(t),tlr=r(x$e," (Pegasus model)"),x$e.forEach(t),alr=i(D),Z0=n(D,"LI",{});var $$e=s(Z0);u1e=n($$e,"STRONG",{});var w_t=s(u1e);nlr=r(w_t,"rembert"),w_t.forEach(t),slr=r($$e," \u2014 "),Rz=n($$e,"A",{href:!0});var A_t=s(Rz);llr=r(A_t,"TFRemBertModel"),A_t.forEach(t),ilr=r($$e," (RemBERT model)"),$$e.forEach(t),dlr=i(D),eT=n(D,"LI",{});var k$e=s(eT);_1e=n(k$e,"STRONG",{});var y_t=s(_1e);clr=r(y_t,"roberta"),y_t.forEach(t),flr=r(k$e," \u2014 "),Pz=n(k$e,"A",{href:!0});var L_t=s(Pz);mlr=r(L_t,"TFRobertaModel"),L_t.forEach(t),glr=r(k$e," (RoBERTa model)"),k$e.forEach(t),hlr=i(D),oT=n(D,"LI",{});var S$e=s(oT);b1e=n(S$e,"STRONG",{});var x_t=s(b1e);plr=r(x_t,"roformer"),x_t.forEach(t),ulr=r(S$e," \u2014 "),Bz=n(S$e,"A",{href:!0});var $_t=s(Bz);_lr=r($_t,"TFRoFormerModel"),$_t.forEach(t),blr=r(S$e," (RoFormer model)"),S$e.forEach(t),vlr=i(D),rT=n(D,"LI",{});var R$e=s(rT);v1e=n(R$e,"STRONG",{});var k_t=s(v1e);Flr=r(k_t,"speech_to_text"),k_t.forEach(t),Tlr=r(R$e," \u2014 "),Iz=n(R$e,"A",{href:!0});var S_t=s(Iz);Mlr=r(S_t,"TFSpeech2TextModel"),S_t.forEach(t),Elr=r(R$e," (Speech2Text model)"),R$e.forEach(t),Clr=i(D),tT=n(D,"LI",{});var P$e=s(tT);F1e=n(P$e,"STRONG",{});var R_t=s(F1e);wlr=r(R_t,"t5"),R_t.forEach(t),Alr=r(P$e," \u2014 "),qz=n(P$e,"A",{href:!0});var P_t=s(qz);ylr=r(P_t,"TFT5Model"),P_t.forEach(t),Llr=r(P$e," (T5 model)"),P$e.forEach(t),xlr=i(D),aT=n(D,"LI",{});var B$e=s(aT);T1e=n(B$e,"STRONG",{});var B_t=s(T1e);$lr=r(B_t,"tapas"),B_t.forEach(t),klr=r(B$e," \u2014 "),Nz=n(B$e,"A",{href:!0});var I_t=s(Nz);Slr=r(I_t,"TFTapasModel"),I_t.forEach(t),Rlr=r(B$e," (TAPAS model)"),B$e.forEach(t),Plr=i(D),nT=n(D,"LI",{});var I$e=s(nT);M1e=n(I$e,"STRONG",{});var q_t=s(M1e);Blr=r(q_t,"transfo-xl"),q_t.forEach(t),Ilr=r(I$e," \u2014 "),jz=n(I$e,"A",{href:!0});var N_t=s(jz);qlr=r(N_t,"TFTransfoXLModel"),N_t.forEach(t),Nlr=r(I$e," (Transformer-XL model)"),I$e.forEach(t),jlr=i(D),sT=n(D,"LI",{});var q$e=s(sT);E1e=n(q$e,"STRONG",{});var j_t=s(E1e);Dlr=r(j_t,"vit"),j_t.forEach(t),Glr=r(q$e," \u2014 "),Dz=n(q$e,"A",{href:!0});var D_t=s(Dz);Olr=r(D_t,"TFViTModel"),D_t.forEach(t),Vlr=r(q$e," (ViT model)"),q$e.forEach(t),Xlr=i(D),lT=n(D,"LI",{});var N$e=s(lT);C1e=n(N$e,"STRONG",{});var G_t=s(C1e);zlr=r(G_t,"vit_mae"),G_t.forEach(t),Qlr=r(N$e," \u2014 "),Gz=n(N$e,"A",{href:!0});var O_t=s(Gz);Wlr=r(O_t,"TFViTMAEModel"),O_t.forEach(t),Hlr=r(N$e," (ViTMAE model)"),N$e.forEach(t),Ulr=i(D),iT=n(D,"LI",{});var j$e=s(iT);w1e=n(j$e,"STRONG",{});var V_t=s(w1e);Jlr=r(V_t,"wav2vec2"),V_t.forEach(t),Ylr=r(j$e," \u2014 "),Oz=n(j$e,"A",{href:!0});var X_t=s(Oz);Klr=r(X_t,"TFWav2Vec2Model"),X_t.forEach(t),Zlr=r(j$e," (Wav2Vec2 model)"),j$e.forEach(t),eir=i(D),dT=n(D,"LI",{});var D$e=s(dT);A1e=n(D$e,"STRONG",{});var z_t=s(A1e);oir=r(z_t,"xlm"),z_t.forEach(t),rir=r(D$e," \u2014 "),Vz=n(D$e,"A",{href:!0});var Q_t=s(Vz);tir=r(Q_t,"TFXLMModel"),Q_t.forEach(t),air=r(D$e," (XLM model)"),D$e.forEach(t),nir=i(D),cT=n(D,"LI",{});var G$e=s(cT);y1e=n(G$e,"STRONG",{});var W_t=s(y1e);sir=r(W_t,"xlm-roberta"),W_t.forEach(t),lir=r(G$e," \u2014 "),Xz=n(G$e,"A",{href:!0});var H_t=s(Xz);iir=r(H_t,"TFXLMRobertaModel"),H_t.forEach(t),dir=r(G$e," (XLM-RoBERTa model)"),G$e.forEach(t),cir=i(D),fT=n(D,"LI",{});var O$e=s(fT);L1e=n(O$e,"STRONG",{});var U_t=s(L1e);fir=r(U_t,"xlnet"),U_t.forEach(t),mir=r(O$e," \u2014 "),zz=n(O$e,"A",{href:!0});var J_t=s(zz);gir=r(J_t,"TFXLNetModel"),J_t.forEach(t),hir=r(O$e," (XLNet model)"),O$e.forEach(t),D.forEach(t),pir=i(fl),T(mT.$$.fragment,fl),fl.forEach(t),cl.forEach(t),VIe=i(f),Gd=n(f,"H2",{class:!0});var UNe=s(Gd);gT=n(UNe,"A",{id:!0,class:!0,href:!0});var Y_t=s(gT);x1e=n(Y_t,"SPAN",{});var K_t=s(x1e);T(By.$$.fragment,K_t),K_t.forEach(t),Y_t.forEach(t),uir=i(UNe),$1e=n(UNe,"SPAN",{});var Z_t=s($1e);_ir=r(Z_t,"TFAutoModelForPreTraining"),Z_t.forEach(t),UNe.forEach(t),XIe=i(f),Ko=n(f,"DIV",{class:!0});var ml=s(Ko);T(Iy.$$.fragment,ml),bir=i(ml),Od=n(ml,"P",{});var rZ=s(Od);vir=r(rZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qz=n(rZ,"A",{href:!0});var e1t=s(Qz);Fir=r(e1t,"from_pretrained()"),e1t.forEach(t),Tir=r(rZ," class method or the "),Wz=n(rZ,"A",{href:!0});var o1t=s(Wz);Mir=r(o1t,"from_config()"),o1t.forEach(t),Eir=r(rZ,` class
method.`),rZ.forEach(t),Cir=i(ml),qy=n(ml,"P",{});var JNe=s(qy);wir=r(JNe,"This class cannot be instantiated directly using "),k1e=n(JNe,"CODE",{});var r1t=s(k1e);Air=r(r1t,"__init__()"),r1t.forEach(t),yir=r(JNe," (throws an error)."),JNe.forEach(t),Lir=i(ml),At=n(ml,"DIV",{class:!0});var U3=s(At);T(Ny.$$.fragment,U3),xir=i(U3),S1e=n(U3,"P",{});var t1t=s(S1e);$ir=r(t1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),t1t.forEach(t),kir=i(U3),Vd=n(U3,"P",{});var tZ=s(Vd);Sir=r(tZ,`Note:
Loading a model from its configuration file does `),R1e=n(tZ,"STRONG",{});var a1t=s(R1e);Rir=r(a1t,"not"),a1t.forEach(t),Pir=r(tZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=n(tZ,"A",{href:!0});var n1t=s(Hz);Bir=r(n1t,"from_pretrained()"),n1t.forEach(t),Iir=r(tZ," to load the model weights."),tZ.forEach(t),qir=i(U3),T(hT.$$.fragment,U3),U3.forEach(t),Nir=i(ml),Ar=n(ml,"DIV",{class:!0});var gl=s(Ar);T(jy.$$.fragment,gl),jir=i(gl),P1e=n(gl,"P",{});var s1t=s(P1e);Dir=r(s1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),s1t.forEach(t),Gir=i(gl),Za=n(gl,"P",{});var J3=s(Za);Oir=r(J3,"The model class to instantiate is selected based on the "),B1e=n(J3,"CODE",{});var l1t=s(B1e);Vir=r(l1t,"model_type"),l1t.forEach(t),Xir=r(J3,` property of the config object (either
passed as an argument or loaded from `),I1e=n(J3,"CODE",{});var i1t=s(I1e);zir=r(i1t,"pretrained_model_name_or_path"),i1t.forEach(t),Qir=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q1e=n(J3,"CODE",{});var d1t=s(q1e);Wir=r(d1t,"pretrained_model_name_or_path"),d1t.forEach(t),Hir=r(J3,":"),J3.forEach(t),Uir=i(gl),ne=n(gl,"UL",{});var le=s(ne);pT=n(le,"LI",{});var V$e=s(pT);N1e=n(V$e,"STRONG",{});var c1t=s(N1e);Jir=r(c1t,"albert"),c1t.forEach(t),Yir=r(V$e," \u2014 "),Uz=n(V$e,"A",{href:!0});var f1t=s(Uz);Kir=r(f1t,"TFAlbertForPreTraining"),f1t.forEach(t),Zir=r(V$e," (ALBERT model)"),V$e.forEach(t),edr=i(le),uT=n(le,"LI",{});var X$e=s(uT);j1e=n(X$e,"STRONG",{});var m1t=s(j1e);odr=r(m1t,"bart"),m1t.forEach(t),rdr=r(X$e," \u2014 "),Jz=n(X$e,"A",{href:!0});var g1t=s(Jz);tdr=r(g1t,"TFBartForConditionalGeneration"),g1t.forEach(t),adr=r(X$e," (BART model)"),X$e.forEach(t),ndr=i(le),_T=n(le,"LI",{});var z$e=s(_T);D1e=n(z$e,"STRONG",{});var h1t=s(D1e);sdr=r(h1t,"bert"),h1t.forEach(t),ldr=r(z$e," \u2014 "),Yz=n(z$e,"A",{href:!0});var p1t=s(Yz);idr=r(p1t,"TFBertForPreTraining"),p1t.forEach(t),ddr=r(z$e," (BERT model)"),z$e.forEach(t),cdr=i(le),bT=n(le,"LI",{});var Q$e=s(bT);G1e=n(Q$e,"STRONG",{});var u1t=s(G1e);fdr=r(u1t,"camembert"),u1t.forEach(t),mdr=r(Q$e," \u2014 "),Kz=n(Q$e,"A",{href:!0});var _1t=s(Kz);gdr=r(_1t,"TFCamembertForMaskedLM"),_1t.forEach(t),hdr=r(Q$e," (CamemBERT model)"),Q$e.forEach(t),pdr=i(le),vT=n(le,"LI",{});var W$e=s(vT);O1e=n(W$e,"STRONG",{});var b1t=s(O1e);udr=r(b1t,"ctrl"),b1t.forEach(t),_dr=r(W$e," \u2014 "),Zz=n(W$e,"A",{href:!0});var v1t=s(Zz);bdr=r(v1t,"TFCTRLLMHeadModel"),v1t.forEach(t),vdr=r(W$e," (CTRL model)"),W$e.forEach(t),Fdr=i(le),FT=n(le,"LI",{});var H$e=s(FT);V1e=n(H$e,"STRONG",{});var F1t=s(V1e);Tdr=r(F1t,"distilbert"),F1t.forEach(t),Mdr=r(H$e," \u2014 "),eQ=n(H$e,"A",{href:!0});var T1t=s(eQ);Edr=r(T1t,"TFDistilBertForMaskedLM"),T1t.forEach(t),Cdr=r(H$e," (DistilBERT model)"),H$e.forEach(t),wdr=i(le),TT=n(le,"LI",{});var U$e=s(TT);X1e=n(U$e,"STRONG",{});var M1t=s(X1e);Adr=r(M1t,"electra"),M1t.forEach(t),ydr=r(U$e," \u2014 "),oQ=n(U$e,"A",{href:!0});var E1t=s(oQ);Ldr=r(E1t,"TFElectraForPreTraining"),E1t.forEach(t),xdr=r(U$e," (ELECTRA model)"),U$e.forEach(t),$dr=i(le),MT=n(le,"LI",{});var J$e=s(MT);z1e=n(J$e,"STRONG",{});var C1t=s(z1e);kdr=r(C1t,"flaubert"),C1t.forEach(t),Sdr=r(J$e," \u2014 "),rQ=n(J$e,"A",{href:!0});var w1t=s(rQ);Rdr=r(w1t,"TFFlaubertWithLMHeadModel"),w1t.forEach(t),Pdr=r(J$e," (FlauBERT model)"),J$e.forEach(t),Bdr=i(le),ET=n(le,"LI",{});var Y$e=s(ET);Q1e=n(Y$e,"STRONG",{});var A1t=s(Q1e);Idr=r(A1t,"funnel"),A1t.forEach(t),qdr=r(Y$e," \u2014 "),tQ=n(Y$e,"A",{href:!0});var y1t=s(tQ);Ndr=r(y1t,"TFFunnelForPreTraining"),y1t.forEach(t),jdr=r(Y$e," (Funnel Transformer model)"),Y$e.forEach(t),Ddr=i(le),CT=n(le,"LI",{});var K$e=s(CT);W1e=n(K$e,"STRONG",{});var L1t=s(W1e);Gdr=r(L1t,"gpt2"),L1t.forEach(t),Odr=r(K$e," \u2014 "),aQ=n(K$e,"A",{href:!0});var x1t=s(aQ);Vdr=r(x1t,"TFGPT2LMHeadModel"),x1t.forEach(t),Xdr=r(K$e," (OpenAI GPT-2 model)"),K$e.forEach(t),zdr=i(le),wT=n(le,"LI",{});var Z$e=s(wT);H1e=n(Z$e,"STRONG",{});var $1t=s(H1e);Qdr=r($1t,"layoutlm"),$1t.forEach(t),Wdr=r(Z$e," \u2014 "),nQ=n(Z$e,"A",{href:!0});var k1t=s(nQ);Hdr=r(k1t,"TFLayoutLMForMaskedLM"),k1t.forEach(t),Udr=r(Z$e," (LayoutLM model)"),Z$e.forEach(t),Jdr=i(le),AT=n(le,"LI",{});var eke=s(AT);U1e=n(eke,"STRONG",{});var S1t=s(U1e);Ydr=r(S1t,"lxmert"),S1t.forEach(t),Kdr=r(eke," \u2014 "),sQ=n(eke,"A",{href:!0});var R1t=s(sQ);Zdr=r(R1t,"TFLxmertForPreTraining"),R1t.forEach(t),ecr=r(eke," (LXMERT model)"),eke.forEach(t),ocr=i(le),yT=n(le,"LI",{});var oke=s(yT);J1e=n(oke,"STRONG",{});var P1t=s(J1e);rcr=r(P1t,"mobilebert"),P1t.forEach(t),tcr=r(oke," \u2014 "),lQ=n(oke,"A",{href:!0});var B1t=s(lQ);acr=r(B1t,"TFMobileBertForPreTraining"),B1t.forEach(t),ncr=r(oke," (MobileBERT model)"),oke.forEach(t),scr=i(le),LT=n(le,"LI",{});var rke=s(LT);Y1e=n(rke,"STRONG",{});var I1t=s(Y1e);lcr=r(I1t,"mpnet"),I1t.forEach(t),icr=r(rke," \u2014 "),iQ=n(rke,"A",{href:!0});var q1t=s(iQ);dcr=r(q1t,"TFMPNetForMaskedLM"),q1t.forEach(t),ccr=r(rke," (MPNet model)"),rke.forEach(t),fcr=i(le),xT=n(le,"LI",{});var tke=s(xT);K1e=n(tke,"STRONG",{});var N1t=s(K1e);mcr=r(N1t,"openai-gpt"),N1t.forEach(t),gcr=r(tke," \u2014 "),dQ=n(tke,"A",{href:!0});var j1t=s(dQ);hcr=r(j1t,"TFOpenAIGPTLMHeadModel"),j1t.forEach(t),pcr=r(tke," (OpenAI GPT model)"),tke.forEach(t),ucr=i(le),$T=n(le,"LI",{});var ake=s($T);Z1e=n(ake,"STRONG",{});var D1t=s(Z1e);_cr=r(D1t,"roberta"),D1t.forEach(t),bcr=r(ake," \u2014 "),cQ=n(ake,"A",{href:!0});var G1t=s(cQ);vcr=r(G1t,"TFRobertaForMaskedLM"),G1t.forEach(t),Fcr=r(ake," (RoBERTa model)"),ake.forEach(t),Tcr=i(le),kT=n(le,"LI",{});var nke=s(kT);e8e=n(nke,"STRONG",{});var O1t=s(e8e);Mcr=r(O1t,"t5"),O1t.forEach(t),Ecr=r(nke," \u2014 "),fQ=n(nke,"A",{href:!0});var V1t=s(fQ);Ccr=r(V1t,"TFT5ForConditionalGeneration"),V1t.forEach(t),wcr=r(nke," (T5 model)"),nke.forEach(t),Acr=i(le),ST=n(le,"LI",{});var ske=s(ST);o8e=n(ske,"STRONG",{});var X1t=s(o8e);ycr=r(X1t,"tapas"),X1t.forEach(t),Lcr=r(ske," \u2014 "),mQ=n(ske,"A",{href:!0});var z1t=s(mQ);xcr=r(z1t,"TFTapasForMaskedLM"),z1t.forEach(t),$cr=r(ske," (TAPAS model)"),ske.forEach(t),kcr=i(le),RT=n(le,"LI",{});var lke=s(RT);r8e=n(lke,"STRONG",{});var Q1t=s(r8e);Scr=r(Q1t,"transfo-xl"),Q1t.forEach(t),Rcr=r(lke," \u2014 "),gQ=n(lke,"A",{href:!0});var W1t=s(gQ);Pcr=r(W1t,"TFTransfoXLLMHeadModel"),W1t.forEach(t),Bcr=r(lke," (Transformer-XL model)"),lke.forEach(t),Icr=i(le),PT=n(le,"LI",{});var ike=s(PT);t8e=n(ike,"STRONG",{});var H1t=s(t8e);qcr=r(H1t,"vit_mae"),H1t.forEach(t),Ncr=r(ike," \u2014 "),hQ=n(ike,"A",{href:!0});var U1t=s(hQ);jcr=r(U1t,"TFViTMAEForPreTraining"),U1t.forEach(t),Dcr=r(ike," (ViTMAE model)"),ike.forEach(t),Gcr=i(le),BT=n(le,"LI",{});var dke=s(BT);a8e=n(dke,"STRONG",{});var J1t=s(a8e);Ocr=r(J1t,"xlm"),J1t.forEach(t),Vcr=r(dke," \u2014 "),pQ=n(dke,"A",{href:!0});var Y1t=s(pQ);Xcr=r(Y1t,"TFXLMWithLMHeadModel"),Y1t.forEach(t),zcr=r(dke," (XLM model)"),dke.forEach(t),Qcr=i(le),IT=n(le,"LI",{});var cke=s(IT);n8e=n(cke,"STRONG",{});var K1t=s(n8e);Wcr=r(K1t,"xlm-roberta"),K1t.forEach(t),Hcr=r(cke," \u2014 "),uQ=n(cke,"A",{href:!0});var Z1t=s(uQ);Ucr=r(Z1t,"TFXLMRobertaForMaskedLM"),Z1t.forEach(t),Jcr=r(cke," (XLM-RoBERTa model)"),cke.forEach(t),Ycr=i(le),qT=n(le,"LI",{});var fke=s(qT);s8e=n(fke,"STRONG",{});var e8t=s(s8e);Kcr=r(e8t,"xlnet"),e8t.forEach(t),Zcr=r(fke," \u2014 "),_Q=n(fke,"A",{href:!0});var o8t=s(_Q);efr=r(o8t,"TFXLNetLMHeadModel"),o8t.forEach(t),ofr=r(fke," (XLNet model)"),fke.forEach(t),le.forEach(t),rfr=i(gl),T(NT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),zIe=i(f),Xd=n(f,"H2",{class:!0});var YNe=s(Xd);jT=n(YNe,"A",{id:!0,class:!0,href:!0});var r8t=s(jT);l8e=n(r8t,"SPAN",{});var t8t=s(l8e);T(Dy.$$.fragment,t8t),t8t.forEach(t),r8t.forEach(t),tfr=i(YNe),i8e=n(YNe,"SPAN",{});var a8t=s(i8e);afr=r(a8t,"TFAutoModelForCausalLM"),a8t.forEach(t),YNe.forEach(t),QIe=i(f),Zo=n(f,"DIV",{class:!0});var hl=s(Zo);T(Gy.$$.fragment,hl),nfr=i(hl),zd=n(hl,"P",{});var aZ=s(zd);sfr=r(aZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bQ=n(aZ,"A",{href:!0});var n8t=s(bQ);lfr=r(n8t,"from_pretrained()"),n8t.forEach(t),ifr=r(aZ," class method or the "),vQ=n(aZ,"A",{href:!0});var s8t=s(vQ);dfr=r(s8t,"from_config()"),s8t.forEach(t),cfr=r(aZ,` class
method.`),aZ.forEach(t),ffr=i(hl),Oy=n(hl,"P",{});var KNe=s(Oy);mfr=r(KNe,"This class cannot be instantiated directly using "),d8e=n(KNe,"CODE",{});var l8t=s(d8e);gfr=r(l8t,"__init__()"),l8t.forEach(t),hfr=r(KNe," (throws an error)."),KNe.forEach(t),pfr=i(hl),yt=n(hl,"DIV",{class:!0});var Y3=s(yt);T(Vy.$$.fragment,Y3),ufr=i(Y3),c8e=n(Y3,"P",{});var i8t=s(c8e);_fr=r(i8t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),i8t.forEach(t),bfr=i(Y3),Qd=n(Y3,"P",{});var nZ=s(Qd);vfr=r(nZ,`Note:
Loading a model from its configuration file does `),f8e=n(nZ,"STRONG",{});var d8t=s(f8e);Ffr=r(d8t,"not"),d8t.forEach(t),Tfr=r(nZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(nZ,"A",{href:!0});var c8t=s(FQ);Mfr=r(c8t,"from_pretrained()"),c8t.forEach(t),Efr=r(nZ," to load the model weights."),nZ.forEach(t),Cfr=i(Y3),T(DT.$$.fragment,Y3),Y3.forEach(t),wfr=i(hl),yr=n(hl,"DIV",{class:!0});var pl=s(yr);T(Xy.$$.fragment,pl),Afr=i(pl),m8e=n(pl,"P",{});var f8t=s(m8e);yfr=r(f8t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),f8t.forEach(t),Lfr=i(pl),en=n(pl,"P",{});var K3=s(en);xfr=r(K3,"The model class to instantiate is selected based on the "),g8e=n(K3,"CODE",{});var m8t=s(g8e);$fr=r(m8t,"model_type"),m8t.forEach(t),kfr=r(K3,` property of the config object (either
passed as an argument or loaded from `),h8e=n(K3,"CODE",{});var g8t=s(h8e);Sfr=r(g8t,"pretrained_model_name_or_path"),g8t.forEach(t),Rfr=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p8e=n(K3,"CODE",{});var h8t=s(p8e);Pfr=r(h8t,"pretrained_model_name_or_path"),h8t.forEach(t),Bfr=r(K3,":"),K3.forEach(t),Ifr=i(pl),Te=n(pl,"UL",{});var Ce=s(Te);GT=n(Ce,"LI",{});var mke=s(GT);u8e=n(mke,"STRONG",{});var p8t=s(u8e);qfr=r(p8t,"bert"),p8t.forEach(t),Nfr=r(mke," \u2014 "),TQ=n(mke,"A",{href:!0});var u8t=s(TQ);jfr=r(u8t,"TFBertLMHeadModel"),u8t.forEach(t),Dfr=r(mke," (BERT model)"),mke.forEach(t),Gfr=i(Ce),OT=n(Ce,"LI",{});var gke=s(OT);_8e=n(gke,"STRONG",{});var _8t=s(_8e);Ofr=r(_8t,"camembert"),_8t.forEach(t),Vfr=r(gke," \u2014 "),MQ=n(gke,"A",{href:!0});var b8t=s(MQ);Xfr=r(b8t,"TFCamembertForCausalLM"),b8t.forEach(t),zfr=r(gke," (CamemBERT model)"),gke.forEach(t),Qfr=i(Ce),VT=n(Ce,"LI",{});var hke=s(VT);b8e=n(hke,"STRONG",{});var v8t=s(b8e);Wfr=r(v8t,"ctrl"),v8t.forEach(t),Hfr=r(hke," \u2014 "),EQ=n(hke,"A",{href:!0});var F8t=s(EQ);Ufr=r(F8t,"TFCTRLLMHeadModel"),F8t.forEach(t),Jfr=r(hke," (CTRL model)"),hke.forEach(t),Yfr=i(Ce),XT=n(Ce,"LI",{});var pke=s(XT);v8e=n(pke,"STRONG",{});var T8t=s(v8e);Kfr=r(T8t,"gpt2"),T8t.forEach(t),Zfr=r(pke," \u2014 "),CQ=n(pke,"A",{href:!0});var M8t=s(CQ);emr=r(M8t,"TFGPT2LMHeadModel"),M8t.forEach(t),omr=r(pke," (OpenAI GPT-2 model)"),pke.forEach(t),rmr=i(Ce),zT=n(Ce,"LI",{});var uke=s(zT);F8e=n(uke,"STRONG",{});var E8t=s(F8e);tmr=r(E8t,"gptj"),E8t.forEach(t),amr=r(uke," \u2014 "),wQ=n(uke,"A",{href:!0});var C8t=s(wQ);nmr=r(C8t,"TFGPTJForCausalLM"),C8t.forEach(t),smr=r(uke," (GPT-J model)"),uke.forEach(t),lmr=i(Ce),QT=n(Ce,"LI",{});var _ke=s(QT);T8e=n(_ke,"STRONG",{});var w8t=s(T8e);imr=r(w8t,"openai-gpt"),w8t.forEach(t),dmr=r(_ke," \u2014 "),AQ=n(_ke,"A",{href:!0});var A8t=s(AQ);cmr=r(A8t,"TFOpenAIGPTLMHeadModel"),A8t.forEach(t),fmr=r(_ke," (OpenAI GPT model)"),_ke.forEach(t),mmr=i(Ce),WT=n(Ce,"LI",{});var bke=s(WT);M8e=n(bke,"STRONG",{});var y8t=s(M8e);gmr=r(y8t,"rembert"),y8t.forEach(t),hmr=r(bke," \u2014 "),yQ=n(bke,"A",{href:!0});var L8t=s(yQ);pmr=r(L8t,"TFRemBertForCausalLM"),L8t.forEach(t),umr=r(bke," (RemBERT model)"),bke.forEach(t),_mr=i(Ce),HT=n(Ce,"LI",{});var vke=s(HT);E8e=n(vke,"STRONG",{});var x8t=s(E8e);bmr=r(x8t,"roberta"),x8t.forEach(t),vmr=r(vke," \u2014 "),LQ=n(vke,"A",{href:!0});var $8t=s(LQ);Fmr=r($8t,"TFRobertaForCausalLM"),$8t.forEach(t),Tmr=r(vke," (RoBERTa model)"),vke.forEach(t),Mmr=i(Ce),UT=n(Ce,"LI",{});var Fke=s(UT);C8e=n(Fke,"STRONG",{});var k8t=s(C8e);Emr=r(k8t,"roformer"),k8t.forEach(t),Cmr=r(Fke," \u2014 "),xQ=n(Fke,"A",{href:!0});var S8t=s(xQ);wmr=r(S8t,"TFRoFormerForCausalLM"),S8t.forEach(t),Amr=r(Fke," (RoFormer model)"),Fke.forEach(t),ymr=i(Ce),JT=n(Ce,"LI",{});var Tke=s(JT);w8e=n(Tke,"STRONG",{});var R8t=s(w8e);Lmr=r(R8t,"transfo-xl"),R8t.forEach(t),xmr=r(Tke," \u2014 "),$Q=n(Tke,"A",{href:!0});var P8t=s($Q);$mr=r(P8t,"TFTransfoXLLMHeadModel"),P8t.forEach(t),kmr=r(Tke," (Transformer-XL model)"),Tke.forEach(t),Smr=i(Ce),YT=n(Ce,"LI",{});var Mke=s(YT);A8e=n(Mke,"STRONG",{});var B8t=s(A8e);Rmr=r(B8t,"xlm"),B8t.forEach(t),Pmr=r(Mke," \u2014 "),kQ=n(Mke,"A",{href:!0});var I8t=s(kQ);Bmr=r(I8t,"TFXLMWithLMHeadModel"),I8t.forEach(t),Imr=r(Mke," (XLM model)"),Mke.forEach(t),qmr=i(Ce),KT=n(Ce,"LI",{});var Eke=s(KT);y8e=n(Eke,"STRONG",{});var q8t=s(y8e);Nmr=r(q8t,"xlnet"),q8t.forEach(t),jmr=r(Eke," \u2014 "),SQ=n(Eke,"A",{href:!0});var N8t=s(SQ);Dmr=r(N8t,"TFXLNetLMHeadModel"),N8t.forEach(t),Gmr=r(Eke," (XLNet model)"),Eke.forEach(t),Ce.forEach(t),Omr=i(pl),T(ZT.$$.fragment,pl),pl.forEach(t),hl.forEach(t),WIe=i(f),Wd=n(f,"H2",{class:!0});var ZNe=s(Wd);e7=n(ZNe,"A",{id:!0,class:!0,href:!0});var j8t=s(e7);L8e=n(j8t,"SPAN",{});var D8t=s(L8e);T(zy.$$.fragment,D8t),D8t.forEach(t),j8t.forEach(t),Vmr=i(ZNe),x8e=n(ZNe,"SPAN",{});var G8t=s(x8e);Xmr=r(G8t,"TFAutoModelForImageClassification"),G8t.forEach(t),ZNe.forEach(t),HIe=i(f),er=n(f,"DIV",{class:!0});var ul=s(er);T(Qy.$$.fragment,ul),zmr=i(ul),Hd=n(ul,"P",{});var sZ=s(Hd);Qmr=r(sZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RQ=n(sZ,"A",{href:!0});var O8t=s(RQ);Wmr=r(O8t,"from_pretrained()"),O8t.forEach(t),Hmr=r(sZ," class method or the "),PQ=n(sZ,"A",{href:!0});var V8t=s(PQ);Umr=r(V8t,"from_config()"),V8t.forEach(t),Jmr=r(sZ,` class
method.`),sZ.forEach(t),Ymr=i(ul),Wy=n(ul,"P",{});var eje=s(Wy);Kmr=r(eje,"This class cannot be instantiated directly using "),$8e=n(eje,"CODE",{});var X8t=s($8e);Zmr=r(X8t,"__init__()"),X8t.forEach(t),egr=r(eje," (throws an error)."),eje.forEach(t),ogr=i(ul),Lt=n(ul,"DIV",{class:!0});var Z3=s(Lt);T(Hy.$$.fragment,Z3),rgr=i(Z3),k8e=n(Z3,"P",{});var z8t=s(k8e);tgr=r(z8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),z8t.forEach(t),agr=i(Z3),Ud=n(Z3,"P",{});var lZ=s(Ud);ngr=r(lZ,`Note:
Loading a model from its configuration file does `),S8e=n(lZ,"STRONG",{});var Q8t=s(S8e);sgr=r(Q8t,"not"),Q8t.forEach(t),lgr=r(lZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=n(lZ,"A",{href:!0});var W8t=s(BQ);igr=r(W8t,"from_pretrained()"),W8t.forEach(t),dgr=r(lZ," to load the model weights."),lZ.forEach(t),cgr=i(Z3),T(o7.$$.fragment,Z3),Z3.forEach(t),fgr=i(ul),Lr=n(ul,"DIV",{class:!0});var _l=s(Lr);T(Uy.$$.fragment,_l),mgr=i(_l),R8e=n(_l,"P",{});var H8t=s(R8e);ggr=r(H8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),H8t.forEach(t),hgr=i(_l),on=n(_l,"P",{});var ew=s(on);pgr=r(ew,"The model class to instantiate is selected based on the "),P8e=n(ew,"CODE",{});var U8t=s(P8e);ugr=r(U8t,"model_type"),U8t.forEach(t),_gr=r(ew,` property of the config object (either
passed as an argument or loaded from `),B8e=n(ew,"CODE",{});var J8t=s(B8e);bgr=r(J8t,"pretrained_model_name_or_path"),J8t.forEach(t),vgr=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I8e=n(ew,"CODE",{});var Y8t=s(I8e);Fgr=r(Y8t,"pretrained_model_name_or_path"),Y8t.forEach(t),Tgr=r(ew,":"),ew.forEach(t),Mgr=i(_l),Jd=n(_l,"UL",{});var iZ=s(Jd);r7=n(iZ,"LI",{});var Cke=s(r7);q8e=n(Cke,"STRONG",{});var K8t=s(q8e);Egr=r(K8t,"convnext"),K8t.forEach(t),Cgr=r(Cke," \u2014 "),IQ=n(Cke,"A",{href:!0});var Z8t=s(IQ);wgr=r(Z8t,"TFConvNextForImageClassification"),Z8t.forEach(t),Agr=r(Cke," (ConvNext model)"),Cke.forEach(t),ygr=i(iZ),t7=n(iZ,"LI",{});var wke=s(t7);N8e=n(wke,"STRONG",{});var ebt=s(N8e);Lgr=r(ebt,"data2vec-vision"),ebt.forEach(t),xgr=r(wke," \u2014 "),qQ=n(wke,"A",{href:!0});var obt=s(qQ);$gr=r(obt,"TFData2VecVisionForImageClassification"),obt.forEach(t),kgr=r(wke," (Data2VecVision model)"),wke.forEach(t),Sgr=i(iZ),a7=n(iZ,"LI",{});var Ake=s(a7);j8e=n(Ake,"STRONG",{});var rbt=s(j8e);Rgr=r(rbt,"vit"),rbt.forEach(t),Pgr=r(Ake," \u2014 "),NQ=n(Ake,"A",{href:!0});var tbt=s(NQ);Bgr=r(tbt,"TFViTForImageClassification"),tbt.forEach(t),Igr=r(Ake," (ViT model)"),Ake.forEach(t),iZ.forEach(t),qgr=i(_l),T(n7.$$.fragment,_l),_l.forEach(t),ul.forEach(t),UIe=i(f),Yd=n(f,"H2",{class:!0});var oje=s(Yd);s7=n(oje,"A",{id:!0,class:!0,href:!0});var abt=s(s7);D8e=n(abt,"SPAN",{});var nbt=s(D8e);T(Jy.$$.fragment,nbt),nbt.forEach(t),abt.forEach(t),Ngr=i(oje),G8e=n(oje,"SPAN",{});var sbt=s(G8e);jgr=r(sbt,"TFAutoModelForMaskedLM"),sbt.forEach(t),oje.forEach(t),JIe=i(f),or=n(f,"DIV",{class:!0});var bl=s(or);T(Yy.$$.fragment,bl),Dgr=i(bl),Kd=n(bl,"P",{});var dZ=s(Kd);Ggr=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jQ=n(dZ,"A",{href:!0});var lbt=s(jQ);Ogr=r(lbt,"from_pretrained()"),lbt.forEach(t),Vgr=r(dZ," class method or the "),DQ=n(dZ,"A",{href:!0});var ibt=s(DQ);Xgr=r(ibt,"from_config()"),ibt.forEach(t),zgr=r(dZ,` class
method.`),dZ.forEach(t),Qgr=i(bl),Ky=n(bl,"P",{});var rje=s(Ky);Wgr=r(rje,"This class cannot be instantiated directly using "),O8e=n(rje,"CODE",{});var dbt=s(O8e);Hgr=r(dbt,"__init__()"),dbt.forEach(t),Ugr=r(rje," (throws an error)."),rje.forEach(t),Jgr=i(bl),xt=n(bl,"DIV",{class:!0});var ow=s(xt);T(Zy.$$.fragment,ow),Ygr=i(ow),V8e=n(ow,"P",{});var cbt=s(V8e);Kgr=r(cbt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),cbt.forEach(t),Zgr=i(ow),Zd=n(ow,"P",{});var cZ=s(Zd);ehr=r(cZ,`Note:
Loading a model from its configuration file does `),X8e=n(cZ,"STRONG",{});var fbt=s(X8e);ohr=r(fbt,"not"),fbt.forEach(t),rhr=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GQ=n(cZ,"A",{href:!0});var mbt=s(GQ);thr=r(mbt,"from_pretrained()"),mbt.forEach(t),ahr=r(cZ," to load the model weights."),cZ.forEach(t),nhr=i(ow),T(l7.$$.fragment,ow),ow.forEach(t),shr=i(bl),xr=n(bl,"DIV",{class:!0});var vl=s(xr);T(eL.$$.fragment,vl),lhr=i(vl),z8e=n(vl,"P",{});var gbt=s(z8e);ihr=r(gbt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),gbt.forEach(t),dhr=i(vl),rn=n(vl,"P",{});var rw=s(rn);chr=r(rw,"The model class to instantiate is selected based on the "),Q8e=n(rw,"CODE",{});var hbt=s(Q8e);fhr=r(hbt,"model_type"),hbt.forEach(t),mhr=r(rw,` property of the config object (either
passed as an argument or loaded from `),W8e=n(rw,"CODE",{});var pbt=s(W8e);ghr=r(pbt,"pretrained_model_name_or_path"),pbt.forEach(t),hhr=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H8e=n(rw,"CODE",{});var ubt=s(H8e);phr=r(ubt,"pretrained_model_name_or_path"),ubt.forEach(t),uhr=r(rw,":"),rw.forEach(t),_hr=i(vl),ie=n(vl,"UL",{});var fe=s(ie);i7=n(fe,"LI",{});var yke=s(i7);U8e=n(yke,"STRONG",{});var _bt=s(U8e);bhr=r(_bt,"albert"),_bt.forEach(t),vhr=r(yke," \u2014 "),OQ=n(yke,"A",{href:!0});var bbt=s(OQ);Fhr=r(bbt,"TFAlbertForMaskedLM"),bbt.forEach(t),Thr=r(yke," (ALBERT model)"),yke.forEach(t),Mhr=i(fe),d7=n(fe,"LI",{});var Lke=s(d7);J8e=n(Lke,"STRONG",{});var vbt=s(J8e);Ehr=r(vbt,"bert"),vbt.forEach(t),Chr=r(Lke," \u2014 "),VQ=n(Lke,"A",{href:!0});var Fbt=s(VQ);whr=r(Fbt,"TFBertForMaskedLM"),Fbt.forEach(t),Ahr=r(Lke," (BERT model)"),Lke.forEach(t),yhr=i(fe),c7=n(fe,"LI",{});var xke=s(c7);Y8e=n(xke,"STRONG",{});var Tbt=s(Y8e);Lhr=r(Tbt,"camembert"),Tbt.forEach(t),xhr=r(xke," \u2014 "),XQ=n(xke,"A",{href:!0});var Mbt=s(XQ);$hr=r(Mbt,"TFCamembertForMaskedLM"),Mbt.forEach(t),khr=r(xke," (CamemBERT model)"),xke.forEach(t),Shr=i(fe),f7=n(fe,"LI",{});var $ke=s(f7);K8e=n($ke,"STRONG",{});var Ebt=s(K8e);Rhr=r(Ebt,"convbert"),Ebt.forEach(t),Phr=r($ke," \u2014 "),zQ=n($ke,"A",{href:!0});var Cbt=s(zQ);Bhr=r(Cbt,"TFConvBertForMaskedLM"),Cbt.forEach(t),Ihr=r($ke," (ConvBERT model)"),$ke.forEach(t),qhr=i(fe),m7=n(fe,"LI",{});var kke=s(m7);Z8e=n(kke,"STRONG",{});var wbt=s(Z8e);Nhr=r(wbt,"deberta"),wbt.forEach(t),jhr=r(kke," \u2014 "),QQ=n(kke,"A",{href:!0});var Abt=s(QQ);Dhr=r(Abt,"TFDebertaForMaskedLM"),Abt.forEach(t),Ghr=r(kke," (DeBERTa model)"),kke.forEach(t),Ohr=i(fe),g7=n(fe,"LI",{});var Ske=s(g7);ebe=n(Ske,"STRONG",{});var ybt=s(ebe);Vhr=r(ybt,"deberta-v2"),ybt.forEach(t),Xhr=r(Ske," \u2014 "),WQ=n(Ske,"A",{href:!0});var Lbt=s(WQ);zhr=r(Lbt,"TFDebertaV2ForMaskedLM"),Lbt.forEach(t),Qhr=r(Ske," (DeBERTa-v2 model)"),Ske.forEach(t),Whr=i(fe),h7=n(fe,"LI",{});var Rke=s(h7);obe=n(Rke,"STRONG",{});var xbt=s(obe);Hhr=r(xbt,"distilbert"),xbt.forEach(t),Uhr=r(Rke," \u2014 "),HQ=n(Rke,"A",{href:!0});var $bt=s(HQ);Jhr=r($bt,"TFDistilBertForMaskedLM"),$bt.forEach(t),Yhr=r(Rke," (DistilBERT model)"),Rke.forEach(t),Khr=i(fe),p7=n(fe,"LI",{});var Pke=s(p7);rbe=n(Pke,"STRONG",{});var kbt=s(rbe);Zhr=r(kbt,"electra"),kbt.forEach(t),epr=r(Pke," \u2014 "),UQ=n(Pke,"A",{href:!0});var Sbt=s(UQ);opr=r(Sbt,"TFElectraForMaskedLM"),Sbt.forEach(t),rpr=r(Pke," (ELECTRA model)"),Pke.forEach(t),tpr=i(fe),u7=n(fe,"LI",{});var Bke=s(u7);tbe=n(Bke,"STRONG",{});var Rbt=s(tbe);apr=r(Rbt,"flaubert"),Rbt.forEach(t),npr=r(Bke," \u2014 "),JQ=n(Bke,"A",{href:!0});var Pbt=s(JQ);spr=r(Pbt,"TFFlaubertWithLMHeadModel"),Pbt.forEach(t),lpr=r(Bke," (FlauBERT model)"),Bke.forEach(t),ipr=i(fe),_7=n(fe,"LI",{});var Ike=s(_7);abe=n(Ike,"STRONG",{});var Bbt=s(abe);dpr=r(Bbt,"funnel"),Bbt.forEach(t),cpr=r(Ike," \u2014 "),YQ=n(Ike,"A",{href:!0});var Ibt=s(YQ);fpr=r(Ibt,"TFFunnelForMaskedLM"),Ibt.forEach(t),mpr=r(Ike," (Funnel Transformer model)"),Ike.forEach(t),gpr=i(fe),b7=n(fe,"LI",{});var qke=s(b7);nbe=n(qke,"STRONG",{});var qbt=s(nbe);hpr=r(qbt,"layoutlm"),qbt.forEach(t),ppr=r(qke," \u2014 "),KQ=n(qke,"A",{href:!0});var Nbt=s(KQ);upr=r(Nbt,"TFLayoutLMForMaskedLM"),Nbt.forEach(t),_pr=r(qke," (LayoutLM model)"),qke.forEach(t),bpr=i(fe),v7=n(fe,"LI",{});var Nke=s(v7);sbe=n(Nke,"STRONG",{});var jbt=s(sbe);vpr=r(jbt,"longformer"),jbt.forEach(t),Fpr=r(Nke," \u2014 "),ZQ=n(Nke,"A",{href:!0});var Dbt=s(ZQ);Tpr=r(Dbt,"TFLongformerForMaskedLM"),Dbt.forEach(t),Mpr=r(Nke," (Longformer model)"),Nke.forEach(t),Epr=i(fe),F7=n(fe,"LI",{});var jke=s(F7);lbe=n(jke,"STRONG",{});var Gbt=s(lbe);Cpr=r(Gbt,"mobilebert"),Gbt.forEach(t),wpr=r(jke," \u2014 "),eW=n(jke,"A",{href:!0});var Obt=s(eW);Apr=r(Obt,"TFMobileBertForMaskedLM"),Obt.forEach(t),ypr=r(jke," (MobileBERT model)"),jke.forEach(t),Lpr=i(fe),T7=n(fe,"LI",{});var Dke=s(T7);ibe=n(Dke,"STRONG",{});var Vbt=s(ibe);xpr=r(Vbt,"mpnet"),Vbt.forEach(t),$pr=r(Dke," \u2014 "),oW=n(Dke,"A",{href:!0});var Xbt=s(oW);kpr=r(Xbt,"TFMPNetForMaskedLM"),Xbt.forEach(t),Spr=r(Dke," (MPNet model)"),Dke.forEach(t),Rpr=i(fe),M7=n(fe,"LI",{});var Gke=s(M7);dbe=n(Gke,"STRONG",{});var zbt=s(dbe);Ppr=r(zbt,"rembert"),zbt.forEach(t),Bpr=r(Gke," \u2014 "),rW=n(Gke,"A",{href:!0});var Qbt=s(rW);Ipr=r(Qbt,"TFRemBertForMaskedLM"),Qbt.forEach(t),qpr=r(Gke," (RemBERT model)"),Gke.forEach(t),Npr=i(fe),E7=n(fe,"LI",{});var Oke=s(E7);cbe=n(Oke,"STRONG",{});var Wbt=s(cbe);jpr=r(Wbt,"roberta"),Wbt.forEach(t),Dpr=r(Oke," \u2014 "),tW=n(Oke,"A",{href:!0});var Hbt=s(tW);Gpr=r(Hbt,"TFRobertaForMaskedLM"),Hbt.forEach(t),Opr=r(Oke," (RoBERTa model)"),Oke.forEach(t),Vpr=i(fe),C7=n(fe,"LI",{});var Vke=s(C7);fbe=n(Vke,"STRONG",{});var Ubt=s(fbe);Xpr=r(Ubt,"roformer"),Ubt.forEach(t),zpr=r(Vke," \u2014 "),aW=n(Vke,"A",{href:!0});var Jbt=s(aW);Qpr=r(Jbt,"TFRoFormerForMaskedLM"),Jbt.forEach(t),Wpr=r(Vke," (RoFormer model)"),Vke.forEach(t),Hpr=i(fe),w7=n(fe,"LI",{});var Xke=s(w7);mbe=n(Xke,"STRONG",{});var Ybt=s(mbe);Upr=r(Ybt,"tapas"),Ybt.forEach(t),Jpr=r(Xke," \u2014 "),nW=n(Xke,"A",{href:!0});var Kbt=s(nW);Ypr=r(Kbt,"TFTapasForMaskedLM"),Kbt.forEach(t),Kpr=r(Xke," (TAPAS model)"),Xke.forEach(t),Zpr=i(fe),A7=n(fe,"LI",{});var zke=s(A7);gbe=n(zke,"STRONG",{});var Zbt=s(gbe);eur=r(Zbt,"xlm"),Zbt.forEach(t),our=r(zke," \u2014 "),sW=n(zke,"A",{href:!0});var e2t=s(sW);rur=r(e2t,"TFXLMWithLMHeadModel"),e2t.forEach(t),tur=r(zke," (XLM model)"),zke.forEach(t),aur=i(fe),y7=n(fe,"LI",{});var Qke=s(y7);hbe=n(Qke,"STRONG",{});var o2t=s(hbe);nur=r(o2t,"xlm-roberta"),o2t.forEach(t),sur=r(Qke," \u2014 "),lW=n(Qke,"A",{href:!0});var r2t=s(lW);lur=r(r2t,"TFXLMRobertaForMaskedLM"),r2t.forEach(t),iur=r(Qke," (XLM-RoBERTa model)"),Qke.forEach(t),fe.forEach(t),dur=i(vl),T(L7.$$.fragment,vl),vl.forEach(t),bl.forEach(t),YIe=i(f),ec=n(f,"H2",{class:!0});var tje=s(ec);x7=n(tje,"A",{id:!0,class:!0,href:!0});var t2t=s(x7);pbe=n(t2t,"SPAN",{});var a2t=s(pbe);T(oL.$$.fragment,a2t),a2t.forEach(t),t2t.forEach(t),cur=i(tje),ube=n(tje,"SPAN",{});var n2t=s(ube);fur=r(n2t,"TFAutoModelForSeq2SeqLM"),n2t.forEach(t),tje.forEach(t),KIe=i(f),rr=n(f,"DIV",{class:!0});var Fl=s(rr);T(rL.$$.fragment,Fl),mur=i(Fl),oc=n(Fl,"P",{});var fZ=s(oc);gur=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iW=n(fZ,"A",{href:!0});var s2t=s(iW);hur=r(s2t,"from_pretrained()"),s2t.forEach(t),pur=r(fZ," class method or the "),dW=n(fZ,"A",{href:!0});var l2t=s(dW);uur=r(l2t,"from_config()"),l2t.forEach(t),_ur=r(fZ,` class
method.`),fZ.forEach(t),bur=i(Fl),tL=n(Fl,"P",{});var aje=s(tL);vur=r(aje,"This class cannot be instantiated directly using "),_be=n(aje,"CODE",{});var i2t=s(_be);Fur=r(i2t,"__init__()"),i2t.forEach(t),Tur=r(aje," (throws an error)."),aje.forEach(t),Mur=i(Fl),$t=n(Fl,"DIV",{class:!0});var tw=s($t);T(aL.$$.fragment,tw),Eur=i(tw),bbe=n(tw,"P",{});var d2t=s(bbe);Cur=r(d2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),d2t.forEach(t),wur=i(tw),rc=n(tw,"P",{});var mZ=s(rc);Aur=r(mZ,`Note:
Loading a model from its configuration file does `),vbe=n(mZ,"STRONG",{});var c2t=s(vbe);yur=r(c2t,"not"),c2t.forEach(t),Lur=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=n(mZ,"A",{href:!0});var f2t=s(cW);xur=r(f2t,"from_pretrained()"),f2t.forEach(t),$ur=r(mZ," to load the model weights."),mZ.forEach(t),kur=i(tw),T($7.$$.fragment,tw),tw.forEach(t),Sur=i(Fl),$r=n(Fl,"DIV",{class:!0});var Tl=s($r);T(nL.$$.fragment,Tl),Rur=i(Tl),Fbe=n(Tl,"P",{});var m2t=s(Fbe);Pur=r(m2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),m2t.forEach(t),Bur=i(Tl),tn=n(Tl,"P",{});var aw=s(tn);Iur=r(aw,"The model class to instantiate is selected based on the "),Tbe=n(aw,"CODE",{});var g2t=s(Tbe);qur=r(g2t,"model_type"),g2t.forEach(t),Nur=r(aw,` property of the config object (either
passed as an argument or loaded from `),Mbe=n(aw,"CODE",{});var h2t=s(Mbe);jur=r(h2t,"pretrained_model_name_or_path"),h2t.forEach(t),Dur=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=n(aw,"CODE",{});var p2t=s(Ebe);Gur=r(p2t,"pretrained_model_name_or_path"),p2t.forEach(t),Our=r(aw,":"),aw.forEach(t),Vur=i(Tl),ye=n(Tl,"UL",{});var Re=s(ye);k7=n(Re,"LI",{});var Wke=s(k7);Cbe=n(Wke,"STRONG",{});var u2t=s(Cbe);Xur=r(u2t,"bart"),u2t.forEach(t),zur=r(Wke," \u2014 "),fW=n(Wke,"A",{href:!0});var _2t=s(fW);Qur=r(_2t,"TFBartForConditionalGeneration"),_2t.forEach(t),Wur=r(Wke," (BART model)"),Wke.forEach(t),Hur=i(Re),S7=n(Re,"LI",{});var Hke=s(S7);wbe=n(Hke,"STRONG",{});var b2t=s(wbe);Uur=r(b2t,"blenderbot"),b2t.forEach(t),Jur=r(Hke," \u2014 "),mW=n(Hke,"A",{href:!0});var v2t=s(mW);Yur=r(v2t,"TFBlenderbotForConditionalGeneration"),v2t.forEach(t),Kur=r(Hke," (Blenderbot model)"),Hke.forEach(t),Zur=i(Re),R7=n(Re,"LI",{});var Uke=s(R7);Abe=n(Uke,"STRONG",{});var F2t=s(Abe);e_r=r(F2t,"blenderbot-small"),F2t.forEach(t),o_r=r(Uke," \u2014 "),gW=n(Uke,"A",{href:!0});var T2t=s(gW);r_r=r(T2t,"TFBlenderbotSmallForConditionalGeneration"),T2t.forEach(t),t_r=r(Uke," (BlenderbotSmall model)"),Uke.forEach(t),a_r=i(Re),P7=n(Re,"LI",{});var Jke=s(P7);ybe=n(Jke,"STRONG",{});var M2t=s(ybe);n_r=r(M2t,"encoder-decoder"),M2t.forEach(t),s_r=r(Jke," \u2014 "),hW=n(Jke,"A",{href:!0});var E2t=s(hW);l_r=r(E2t,"TFEncoderDecoderModel"),E2t.forEach(t),i_r=r(Jke," (Encoder decoder model)"),Jke.forEach(t),d_r=i(Re),B7=n(Re,"LI",{});var Yke=s(B7);Lbe=n(Yke,"STRONG",{});var C2t=s(Lbe);c_r=r(C2t,"led"),C2t.forEach(t),f_r=r(Yke," \u2014 "),pW=n(Yke,"A",{href:!0});var w2t=s(pW);m_r=r(w2t,"TFLEDForConditionalGeneration"),w2t.forEach(t),g_r=r(Yke," (LED model)"),Yke.forEach(t),h_r=i(Re),I7=n(Re,"LI",{});var Kke=s(I7);xbe=n(Kke,"STRONG",{});var A2t=s(xbe);p_r=r(A2t,"marian"),A2t.forEach(t),u_r=r(Kke," \u2014 "),uW=n(Kke,"A",{href:!0});var y2t=s(uW);__r=r(y2t,"TFMarianMTModel"),y2t.forEach(t),b_r=r(Kke," (Marian model)"),Kke.forEach(t),v_r=i(Re),q7=n(Re,"LI",{});var Zke=s(q7);$be=n(Zke,"STRONG",{});var L2t=s($be);F_r=r(L2t,"mbart"),L2t.forEach(t),T_r=r(Zke," \u2014 "),_W=n(Zke,"A",{href:!0});var x2t=s(_W);M_r=r(x2t,"TFMBartForConditionalGeneration"),x2t.forEach(t),E_r=r(Zke," (mBART model)"),Zke.forEach(t),C_r=i(Re),N7=n(Re,"LI",{});var eSe=s(N7);kbe=n(eSe,"STRONG",{});var $2t=s(kbe);w_r=r($2t,"mt5"),$2t.forEach(t),A_r=r(eSe," \u2014 "),bW=n(eSe,"A",{href:!0});var k2t=s(bW);y_r=r(k2t,"TFMT5ForConditionalGeneration"),k2t.forEach(t),L_r=r(eSe," (mT5 model)"),eSe.forEach(t),x_r=i(Re),j7=n(Re,"LI",{});var oSe=s(j7);Sbe=n(oSe,"STRONG",{});var S2t=s(Sbe);$_r=r(S2t,"pegasus"),S2t.forEach(t),k_r=r(oSe," \u2014 "),vW=n(oSe,"A",{href:!0});var R2t=s(vW);S_r=r(R2t,"TFPegasusForConditionalGeneration"),R2t.forEach(t),R_r=r(oSe," (Pegasus model)"),oSe.forEach(t),P_r=i(Re),D7=n(Re,"LI",{});var rSe=s(D7);Rbe=n(rSe,"STRONG",{});var P2t=s(Rbe);B_r=r(P2t,"t5"),P2t.forEach(t),I_r=r(rSe," \u2014 "),FW=n(rSe,"A",{href:!0});var B2t=s(FW);q_r=r(B2t,"TFT5ForConditionalGeneration"),B2t.forEach(t),N_r=r(rSe," (T5 model)"),rSe.forEach(t),Re.forEach(t),j_r=i(Tl),T(G7.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),ZIe=i(f),tc=n(f,"H2",{class:!0});var nje=s(tc);O7=n(nje,"A",{id:!0,class:!0,href:!0});var I2t=s(O7);Pbe=n(I2t,"SPAN",{});var q2t=s(Pbe);T(sL.$$.fragment,q2t),q2t.forEach(t),I2t.forEach(t),D_r=i(nje),Bbe=n(nje,"SPAN",{});var N2t=s(Bbe);G_r=r(N2t,"TFAutoModelForSequenceClassification"),N2t.forEach(t),nje.forEach(t),eqe=i(f),tr=n(f,"DIV",{class:!0});var Ml=s(tr);T(lL.$$.fragment,Ml),O_r=i(Ml),ac=n(Ml,"P",{});var gZ=s(ac);V_r=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TW=n(gZ,"A",{href:!0});var j2t=s(TW);X_r=r(j2t,"from_pretrained()"),j2t.forEach(t),z_r=r(gZ," class method or the "),MW=n(gZ,"A",{href:!0});var D2t=s(MW);Q_r=r(D2t,"from_config()"),D2t.forEach(t),W_r=r(gZ,` class
method.`),gZ.forEach(t),H_r=i(Ml),iL=n(Ml,"P",{});var sje=s(iL);U_r=r(sje,"This class cannot be instantiated directly using "),Ibe=n(sje,"CODE",{});var G2t=s(Ibe);J_r=r(G2t,"__init__()"),G2t.forEach(t),Y_r=r(sje," (throws an error)."),sje.forEach(t),K_r=i(Ml),kt=n(Ml,"DIV",{class:!0});var nw=s(kt);T(dL.$$.fragment,nw),Z_r=i(nw),qbe=n(nw,"P",{});var O2t=s(qbe);e1r=r(O2t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),O2t.forEach(t),o1r=i(nw),nc=n(nw,"P",{});var hZ=s(nc);r1r=r(hZ,`Note:
Loading a model from its configuration file does `),Nbe=n(hZ,"STRONG",{});var V2t=s(Nbe);t1r=r(V2t,"not"),V2t.forEach(t),a1r=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(hZ,"A",{href:!0});var X2t=s(EW);n1r=r(X2t,"from_pretrained()"),X2t.forEach(t),s1r=r(hZ," to load the model weights."),hZ.forEach(t),l1r=i(nw),T(V7.$$.fragment,nw),nw.forEach(t),i1r=i(Ml),kr=n(Ml,"DIV",{class:!0});var El=s(kr);T(cL.$$.fragment,El),d1r=i(El),jbe=n(El,"P",{});var z2t=s(jbe);c1r=r(z2t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),z2t.forEach(t),f1r=i(El),an=n(El,"P",{});var sw=s(an);m1r=r(sw,"The model class to instantiate is selected based on the "),Dbe=n(sw,"CODE",{});var Q2t=s(Dbe);g1r=r(Q2t,"model_type"),Q2t.forEach(t),h1r=r(sw,` property of the config object (either
passed as an argument or loaded from `),Gbe=n(sw,"CODE",{});var W2t=s(Gbe);p1r=r(W2t,"pretrained_model_name_or_path"),W2t.forEach(t),u1r=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=n(sw,"CODE",{});var H2t=s(Obe);_1r=r(H2t,"pretrained_model_name_or_path"),H2t.forEach(t),b1r=r(sw,":"),sw.forEach(t),v1r=i(El),Z=n(El,"UL",{});var re=s(Z);X7=n(re,"LI",{});var tSe=s(X7);Vbe=n(tSe,"STRONG",{});var U2t=s(Vbe);F1r=r(U2t,"albert"),U2t.forEach(t),T1r=r(tSe," \u2014 "),CW=n(tSe,"A",{href:!0});var J2t=s(CW);M1r=r(J2t,"TFAlbertForSequenceClassification"),J2t.forEach(t),E1r=r(tSe," (ALBERT model)"),tSe.forEach(t),C1r=i(re),z7=n(re,"LI",{});var aSe=s(z7);Xbe=n(aSe,"STRONG",{});var Y2t=s(Xbe);w1r=r(Y2t,"bert"),Y2t.forEach(t),A1r=r(aSe," \u2014 "),wW=n(aSe,"A",{href:!0});var K2t=s(wW);y1r=r(K2t,"TFBertForSequenceClassification"),K2t.forEach(t),L1r=r(aSe," (BERT model)"),aSe.forEach(t),x1r=i(re),Q7=n(re,"LI",{});var nSe=s(Q7);zbe=n(nSe,"STRONG",{});var Z2t=s(zbe);$1r=r(Z2t,"camembert"),Z2t.forEach(t),k1r=r(nSe," \u2014 "),AW=n(nSe,"A",{href:!0});var evt=s(AW);S1r=r(evt,"TFCamembertForSequenceClassification"),evt.forEach(t),R1r=r(nSe," (CamemBERT model)"),nSe.forEach(t),P1r=i(re),W7=n(re,"LI",{});var sSe=s(W7);Qbe=n(sSe,"STRONG",{});var ovt=s(Qbe);B1r=r(ovt,"convbert"),ovt.forEach(t),I1r=r(sSe," \u2014 "),yW=n(sSe,"A",{href:!0});var rvt=s(yW);q1r=r(rvt,"TFConvBertForSequenceClassification"),rvt.forEach(t),N1r=r(sSe," (ConvBERT model)"),sSe.forEach(t),j1r=i(re),H7=n(re,"LI",{});var lSe=s(H7);Wbe=n(lSe,"STRONG",{});var tvt=s(Wbe);D1r=r(tvt,"ctrl"),tvt.forEach(t),G1r=r(lSe," \u2014 "),LW=n(lSe,"A",{href:!0});var avt=s(LW);O1r=r(avt,"TFCTRLForSequenceClassification"),avt.forEach(t),V1r=r(lSe," (CTRL model)"),lSe.forEach(t),X1r=i(re),U7=n(re,"LI",{});var iSe=s(U7);Hbe=n(iSe,"STRONG",{});var nvt=s(Hbe);z1r=r(nvt,"deberta"),nvt.forEach(t),Q1r=r(iSe," \u2014 "),xW=n(iSe,"A",{href:!0});var svt=s(xW);W1r=r(svt,"TFDebertaForSequenceClassification"),svt.forEach(t),H1r=r(iSe," (DeBERTa model)"),iSe.forEach(t),U1r=i(re),J7=n(re,"LI",{});var dSe=s(J7);Ube=n(dSe,"STRONG",{});var lvt=s(Ube);J1r=r(lvt,"deberta-v2"),lvt.forEach(t),Y1r=r(dSe," \u2014 "),$W=n(dSe,"A",{href:!0});var ivt=s($W);K1r=r(ivt,"TFDebertaV2ForSequenceClassification"),ivt.forEach(t),Z1r=r(dSe," (DeBERTa-v2 model)"),dSe.forEach(t),e8r=i(re),Y7=n(re,"LI",{});var cSe=s(Y7);Jbe=n(cSe,"STRONG",{});var dvt=s(Jbe);o8r=r(dvt,"distilbert"),dvt.forEach(t),r8r=r(cSe," \u2014 "),kW=n(cSe,"A",{href:!0});var cvt=s(kW);t8r=r(cvt,"TFDistilBertForSequenceClassification"),cvt.forEach(t),a8r=r(cSe," (DistilBERT model)"),cSe.forEach(t),n8r=i(re),K7=n(re,"LI",{});var fSe=s(K7);Ybe=n(fSe,"STRONG",{});var fvt=s(Ybe);s8r=r(fvt,"electra"),fvt.forEach(t),l8r=r(fSe," \u2014 "),SW=n(fSe,"A",{href:!0});var mvt=s(SW);i8r=r(mvt,"TFElectraForSequenceClassification"),mvt.forEach(t),d8r=r(fSe," (ELECTRA model)"),fSe.forEach(t),c8r=i(re),Z7=n(re,"LI",{});var mSe=s(Z7);Kbe=n(mSe,"STRONG",{});var gvt=s(Kbe);f8r=r(gvt,"flaubert"),gvt.forEach(t),m8r=r(mSe," \u2014 "),RW=n(mSe,"A",{href:!0});var hvt=s(RW);g8r=r(hvt,"TFFlaubertForSequenceClassification"),hvt.forEach(t),h8r=r(mSe," (FlauBERT model)"),mSe.forEach(t),p8r=i(re),eM=n(re,"LI",{});var gSe=s(eM);Zbe=n(gSe,"STRONG",{});var pvt=s(Zbe);u8r=r(pvt,"funnel"),pvt.forEach(t),_8r=r(gSe," \u2014 "),PW=n(gSe,"A",{href:!0});var uvt=s(PW);b8r=r(uvt,"TFFunnelForSequenceClassification"),uvt.forEach(t),v8r=r(gSe," (Funnel Transformer model)"),gSe.forEach(t),F8r=i(re),oM=n(re,"LI",{});var hSe=s(oM);e2e=n(hSe,"STRONG",{});var _vt=s(e2e);T8r=r(_vt,"gpt2"),_vt.forEach(t),M8r=r(hSe," \u2014 "),BW=n(hSe,"A",{href:!0});var bvt=s(BW);E8r=r(bvt,"TFGPT2ForSequenceClassification"),bvt.forEach(t),C8r=r(hSe," (OpenAI GPT-2 model)"),hSe.forEach(t),w8r=i(re),rM=n(re,"LI",{});var pSe=s(rM);o2e=n(pSe,"STRONG",{});var vvt=s(o2e);A8r=r(vvt,"gptj"),vvt.forEach(t),y8r=r(pSe," \u2014 "),IW=n(pSe,"A",{href:!0});var Fvt=s(IW);L8r=r(Fvt,"TFGPTJForSequenceClassification"),Fvt.forEach(t),x8r=r(pSe," (GPT-J model)"),pSe.forEach(t),$8r=i(re),tM=n(re,"LI",{});var uSe=s(tM);r2e=n(uSe,"STRONG",{});var Tvt=s(r2e);k8r=r(Tvt,"layoutlm"),Tvt.forEach(t),S8r=r(uSe," \u2014 "),qW=n(uSe,"A",{href:!0});var Mvt=s(qW);R8r=r(Mvt,"TFLayoutLMForSequenceClassification"),Mvt.forEach(t),P8r=r(uSe," (LayoutLM model)"),uSe.forEach(t),B8r=i(re),aM=n(re,"LI",{});var _Se=s(aM);t2e=n(_Se,"STRONG",{});var Evt=s(t2e);I8r=r(Evt,"longformer"),Evt.forEach(t),q8r=r(_Se," \u2014 "),NW=n(_Se,"A",{href:!0});var Cvt=s(NW);N8r=r(Cvt,"TFLongformerForSequenceClassification"),Cvt.forEach(t),j8r=r(_Se," (Longformer model)"),_Se.forEach(t),D8r=i(re),nM=n(re,"LI",{});var bSe=s(nM);a2e=n(bSe,"STRONG",{});var wvt=s(a2e);G8r=r(wvt,"mobilebert"),wvt.forEach(t),O8r=r(bSe," \u2014 "),jW=n(bSe,"A",{href:!0});var Avt=s(jW);V8r=r(Avt,"TFMobileBertForSequenceClassification"),Avt.forEach(t),X8r=r(bSe," (MobileBERT model)"),bSe.forEach(t),z8r=i(re),sM=n(re,"LI",{});var vSe=s(sM);n2e=n(vSe,"STRONG",{});var yvt=s(n2e);Q8r=r(yvt,"mpnet"),yvt.forEach(t),W8r=r(vSe," \u2014 "),DW=n(vSe,"A",{href:!0});var Lvt=s(DW);H8r=r(Lvt,"TFMPNetForSequenceClassification"),Lvt.forEach(t),U8r=r(vSe," (MPNet model)"),vSe.forEach(t),J8r=i(re),lM=n(re,"LI",{});var FSe=s(lM);s2e=n(FSe,"STRONG",{});var xvt=s(s2e);Y8r=r(xvt,"openai-gpt"),xvt.forEach(t),K8r=r(FSe," \u2014 "),GW=n(FSe,"A",{href:!0});var $vt=s(GW);Z8r=r($vt,"TFOpenAIGPTForSequenceClassification"),$vt.forEach(t),ebr=r(FSe," (OpenAI GPT model)"),FSe.forEach(t),obr=i(re),iM=n(re,"LI",{});var TSe=s(iM);l2e=n(TSe,"STRONG",{});var kvt=s(l2e);rbr=r(kvt,"rembert"),kvt.forEach(t),tbr=r(TSe," \u2014 "),OW=n(TSe,"A",{href:!0});var Svt=s(OW);abr=r(Svt,"TFRemBertForSequenceClassification"),Svt.forEach(t),nbr=r(TSe," (RemBERT model)"),TSe.forEach(t),sbr=i(re),dM=n(re,"LI",{});var MSe=s(dM);i2e=n(MSe,"STRONG",{});var Rvt=s(i2e);lbr=r(Rvt,"roberta"),Rvt.forEach(t),ibr=r(MSe," \u2014 "),VW=n(MSe,"A",{href:!0});var Pvt=s(VW);dbr=r(Pvt,"TFRobertaForSequenceClassification"),Pvt.forEach(t),cbr=r(MSe," (RoBERTa model)"),MSe.forEach(t),fbr=i(re),cM=n(re,"LI",{});var ESe=s(cM);d2e=n(ESe,"STRONG",{});var Bvt=s(d2e);mbr=r(Bvt,"roformer"),Bvt.forEach(t),gbr=r(ESe," \u2014 "),XW=n(ESe,"A",{href:!0});var Ivt=s(XW);hbr=r(Ivt,"TFRoFormerForSequenceClassification"),Ivt.forEach(t),pbr=r(ESe," (RoFormer model)"),ESe.forEach(t),ubr=i(re),fM=n(re,"LI",{});var CSe=s(fM);c2e=n(CSe,"STRONG",{});var qvt=s(c2e);_br=r(qvt,"tapas"),qvt.forEach(t),bbr=r(CSe," \u2014 "),zW=n(CSe,"A",{href:!0});var Nvt=s(zW);vbr=r(Nvt,"TFTapasForSequenceClassification"),Nvt.forEach(t),Fbr=r(CSe," (TAPAS model)"),CSe.forEach(t),Tbr=i(re),mM=n(re,"LI",{});var wSe=s(mM);f2e=n(wSe,"STRONG",{});var jvt=s(f2e);Mbr=r(jvt,"transfo-xl"),jvt.forEach(t),Ebr=r(wSe," \u2014 "),QW=n(wSe,"A",{href:!0});var Dvt=s(QW);Cbr=r(Dvt,"TFTransfoXLForSequenceClassification"),Dvt.forEach(t),wbr=r(wSe," (Transformer-XL model)"),wSe.forEach(t),Abr=i(re),gM=n(re,"LI",{});var ASe=s(gM);m2e=n(ASe,"STRONG",{});var Gvt=s(m2e);ybr=r(Gvt,"xlm"),Gvt.forEach(t),Lbr=r(ASe," \u2014 "),WW=n(ASe,"A",{href:!0});var Ovt=s(WW);xbr=r(Ovt,"TFXLMForSequenceClassification"),Ovt.forEach(t),$br=r(ASe," (XLM model)"),ASe.forEach(t),kbr=i(re),hM=n(re,"LI",{});var ySe=s(hM);g2e=n(ySe,"STRONG",{});var Vvt=s(g2e);Sbr=r(Vvt,"xlm-roberta"),Vvt.forEach(t),Rbr=r(ySe," \u2014 "),HW=n(ySe,"A",{href:!0});var Xvt=s(HW);Pbr=r(Xvt,"TFXLMRobertaForSequenceClassification"),Xvt.forEach(t),Bbr=r(ySe," (XLM-RoBERTa model)"),ySe.forEach(t),Ibr=i(re),pM=n(re,"LI",{});var LSe=s(pM);h2e=n(LSe,"STRONG",{});var zvt=s(h2e);qbr=r(zvt,"xlnet"),zvt.forEach(t),Nbr=r(LSe," \u2014 "),UW=n(LSe,"A",{href:!0});var Qvt=s(UW);jbr=r(Qvt,"TFXLNetForSequenceClassification"),Qvt.forEach(t),Dbr=r(LSe," (XLNet model)"),LSe.forEach(t),re.forEach(t),Gbr=i(El),T(uM.$$.fragment,El),El.forEach(t),Ml.forEach(t),oqe=i(f),sc=n(f,"H2",{class:!0});var lje=s(sc);_M=n(lje,"A",{id:!0,class:!0,href:!0});var Wvt=s(_M);p2e=n(Wvt,"SPAN",{});var Hvt=s(p2e);T(fL.$$.fragment,Hvt),Hvt.forEach(t),Wvt.forEach(t),Obr=i(lje),u2e=n(lje,"SPAN",{});var Uvt=s(u2e);Vbr=r(Uvt,"TFAutoModelForMultipleChoice"),Uvt.forEach(t),lje.forEach(t),rqe=i(f),ar=n(f,"DIV",{class:!0});var Cl=s(ar);T(mL.$$.fragment,Cl),Xbr=i(Cl),lc=n(Cl,"P",{});var pZ=s(lc);zbr=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JW=n(pZ,"A",{href:!0});var Jvt=s(JW);Qbr=r(Jvt,"from_pretrained()"),Jvt.forEach(t),Wbr=r(pZ," class method or the "),YW=n(pZ,"A",{href:!0});var Yvt=s(YW);Hbr=r(Yvt,"from_config()"),Yvt.forEach(t),Ubr=r(pZ,` class
method.`),pZ.forEach(t),Jbr=i(Cl),gL=n(Cl,"P",{});var ije=s(gL);Ybr=r(ije,"This class cannot be instantiated directly using "),_2e=n(ije,"CODE",{});var Kvt=s(_2e);Kbr=r(Kvt,"__init__()"),Kvt.forEach(t),Zbr=r(ije," (throws an error)."),ije.forEach(t),e2r=i(Cl),St=n(Cl,"DIV",{class:!0});var lw=s(St);T(hL.$$.fragment,lw),o2r=i(lw),b2e=n(lw,"P",{});var Zvt=s(b2e);r2r=r(Zvt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Zvt.forEach(t),t2r=i(lw),ic=n(lw,"P",{});var uZ=s(ic);a2r=r(uZ,`Note:
Loading a model from its configuration file does `),v2e=n(uZ,"STRONG",{});var eFt=s(v2e);n2r=r(eFt,"not"),eFt.forEach(t),s2r=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n(uZ,"A",{href:!0});var oFt=s(KW);l2r=r(oFt,"from_pretrained()"),oFt.forEach(t),i2r=r(uZ," to load the model weights."),uZ.forEach(t),d2r=i(lw),T(bM.$$.fragment,lw),lw.forEach(t),c2r=i(Cl),Sr=n(Cl,"DIV",{class:!0});var wl=s(Sr);T(pL.$$.fragment,wl),f2r=i(wl),F2e=n(wl,"P",{});var rFt=s(F2e);m2r=r(rFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rFt.forEach(t),g2r=i(wl),nn=n(wl,"P",{});var iw=s(nn);h2r=r(iw,"The model class to instantiate is selected based on the "),T2e=n(iw,"CODE",{});var tFt=s(T2e);p2r=r(tFt,"model_type"),tFt.forEach(t),u2r=r(iw,` property of the config object (either
passed as an argument or loaded from `),M2e=n(iw,"CODE",{});var aFt=s(M2e);_2r=r(aFt,"pretrained_model_name_or_path"),aFt.forEach(t),b2r=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=n(iw,"CODE",{});var nFt=s(E2e);v2r=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),F2r=r(iw,":"),iw.forEach(t),T2r=i(wl),pe=n(wl,"UL",{});var _e=s(pe);vM=n(_e,"LI",{});var xSe=s(vM);C2e=n(xSe,"STRONG",{});var sFt=s(C2e);M2r=r(sFt,"albert"),sFt.forEach(t),E2r=r(xSe," \u2014 "),ZW=n(xSe,"A",{href:!0});var lFt=s(ZW);C2r=r(lFt,"TFAlbertForMultipleChoice"),lFt.forEach(t),w2r=r(xSe," (ALBERT model)"),xSe.forEach(t),A2r=i(_e),FM=n(_e,"LI",{});var $Se=s(FM);w2e=n($Se,"STRONG",{});var iFt=s(w2e);y2r=r(iFt,"bert"),iFt.forEach(t),L2r=r($Se," \u2014 "),eH=n($Se,"A",{href:!0});var dFt=s(eH);x2r=r(dFt,"TFBertForMultipleChoice"),dFt.forEach(t),$2r=r($Se," (BERT model)"),$Se.forEach(t),k2r=i(_e),TM=n(_e,"LI",{});var kSe=s(TM);A2e=n(kSe,"STRONG",{});var cFt=s(A2e);S2r=r(cFt,"camembert"),cFt.forEach(t),R2r=r(kSe," \u2014 "),oH=n(kSe,"A",{href:!0});var fFt=s(oH);P2r=r(fFt,"TFCamembertForMultipleChoice"),fFt.forEach(t),B2r=r(kSe," (CamemBERT model)"),kSe.forEach(t),I2r=i(_e),MM=n(_e,"LI",{});var SSe=s(MM);y2e=n(SSe,"STRONG",{});var mFt=s(y2e);q2r=r(mFt,"convbert"),mFt.forEach(t),N2r=r(SSe," \u2014 "),rH=n(SSe,"A",{href:!0});var gFt=s(rH);j2r=r(gFt,"TFConvBertForMultipleChoice"),gFt.forEach(t),D2r=r(SSe," (ConvBERT model)"),SSe.forEach(t),G2r=i(_e),EM=n(_e,"LI",{});var RSe=s(EM);L2e=n(RSe,"STRONG",{});var hFt=s(L2e);O2r=r(hFt,"distilbert"),hFt.forEach(t),V2r=r(RSe," \u2014 "),tH=n(RSe,"A",{href:!0});var pFt=s(tH);X2r=r(pFt,"TFDistilBertForMultipleChoice"),pFt.forEach(t),z2r=r(RSe," (DistilBERT model)"),RSe.forEach(t),Q2r=i(_e),CM=n(_e,"LI",{});var PSe=s(CM);x2e=n(PSe,"STRONG",{});var uFt=s(x2e);W2r=r(uFt,"electra"),uFt.forEach(t),H2r=r(PSe," \u2014 "),aH=n(PSe,"A",{href:!0});var _Ft=s(aH);U2r=r(_Ft,"TFElectraForMultipleChoice"),_Ft.forEach(t),J2r=r(PSe," (ELECTRA model)"),PSe.forEach(t),Y2r=i(_e),wM=n(_e,"LI",{});var BSe=s(wM);$2e=n(BSe,"STRONG",{});var bFt=s($2e);K2r=r(bFt,"flaubert"),bFt.forEach(t),Z2r=r(BSe," \u2014 "),nH=n(BSe,"A",{href:!0});var vFt=s(nH);evr=r(vFt,"TFFlaubertForMultipleChoice"),vFt.forEach(t),ovr=r(BSe," (FlauBERT model)"),BSe.forEach(t),rvr=i(_e),AM=n(_e,"LI",{});var ISe=s(AM);k2e=n(ISe,"STRONG",{});var FFt=s(k2e);tvr=r(FFt,"funnel"),FFt.forEach(t),avr=r(ISe," \u2014 "),sH=n(ISe,"A",{href:!0});var TFt=s(sH);nvr=r(TFt,"TFFunnelForMultipleChoice"),TFt.forEach(t),svr=r(ISe," (Funnel Transformer model)"),ISe.forEach(t),lvr=i(_e),yM=n(_e,"LI",{});var qSe=s(yM);S2e=n(qSe,"STRONG",{});var MFt=s(S2e);ivr=r(MFt,"longformer"),MFt.forEach(t),dvr=r(qSe," \u2014 "),lH=n(qSe,"A",{href:!0});var EFt=s(lH);cvr=r(EFt,"TFLongformerForMultipleChoice"),EFt.forEach(t),fvr=r(qSe," (Longformer model)"),qSe.forEach(t),mvr=i(_e),LM=n(_e,"LI",{});var NSe=s(LM);R2e=n(NSe,"STRONG",{});var CFt=s(R2e);gvr=r(CFt,"mobilebert"),CFt.forEach(t),hvr=r(NSe," \u2014 "),iH=n(NSe,"A",{href:!0});var wFt=s(iH);pvr=r(wFt,"TFMobileBertForMultipleChoice"),wFt.forEach(t),uvr=r(NSe," (MobileBERT model)"),NSe.forEach(t),_vr=i(_e),xM=n(_e,"LI",{});var jSe=s(xM);P2e=n(jSe,"STRONG",{});var AFt=s(P2e);bvr=r(AFt,"mpnet"),AFt.forEach(t),vvr=r(jSe," \u2014 "),dH=n(jSe,"A",{href:!0});var yFt=s(dH);Fvr=r(yFt,"TFMPNetForMultipleChoice"),yFt.forEach(t),Tvr=r(jSe," (MPNet model)"),jSe.forEach(t),Mvr=i(_e),$M=n(_e,"LI",{});var DSe=s($M);B2e=n(DSe,"STRONG",{});var LFt=s(B2e);Evr=r(LFt,"rembert"),LFt.forEach(t),Cvr=r(DSe," \u2014 "),cH=n(DSe,"A",{href:!0});var xFt=s(cH);wvr=r(xFt,"TFRemBertForMultipleChoice"),xFt.forEach(t),Avr=r(DSe," (RemBERT model)"),DSe.forEach(t),yvr=i(_e),kM=n(_e,"LI",{});var GSe=s(kM);I2e=n(GSe,"STRONG",{});var $Ft=s(I2e);Lvr=r($Ft,"roberta"),$Ft.forEach(t),xvr=r(GSe," \u2014 "),fH=n(GSe,"A",{href:!0});var kFt=s(fH);$vr=r(kFt,"TFRobertaForMultipleChoice"),kFt.forEach(t),kvr=r(GSe," (RoBERTa model)"),GSe.forEach(t),Svr=i(_e),SM=n(_e,"LI",{});var OSe=s(SM);q2e=n(OSe,"STRONG",{});var SFt=s(q2e);Rvr=r(SFt,"roformer"),SFt.forEach(t),Pvr=r(OSe," \u2014 "),mH=n(OSe,"A",{href:!0});var RFt=s(mH);Bvr=r(RFt,"TFRoFormerForMultipleChoice"),RFt.forEach(t),Ivr=r(OSe," (RoFormer model)"),OSe.forEach(t),qvr=i(_e),RM=n(_e,"LI",{});var VSe=s(RM);N2e=n(VSe,"STRONG",{});var PFt=s(N2e);Nvr=r(PFt,"xlm"),PFt.forEach(t),jvr=r(VSe," \u2014 "),gH=n(VSe,"A",{href:!0});var BFt=s(gH);Dvr=r(BFt,"TFXLMForMultipleChoice"),BFt.forEach(t),Gvr=r(VSe," (XLM model)"),VSe.forEach(t),Ovr=i(_e),PM=n(_e,"LI",{});var XSe=s(PM);j2e=n(XSe,"STRONG",{});var IFt=s(j2e);Vvr=r(IFt,"xlm-roberta"),IFt.forEach(t),Xvr=r(XSe," \u2014 "),hH=n(XSe,"A",{href:!0});var qFt=s(hH);zvr=r(qFt,"TFXLMRobertaForMultipleChoice"),qFt.forEach(t),Qvr=r(XSe," (XLM-RoBERTa model)"),XSe.forEach(t),Wvr=i(_e),BM=n(_e,"LI",{});var zSe=s(BM);D2e=n(zSe,"STRONG",{});var NFt=s(D2e);Hvr=r(NFt,"xlnet"),NFt.forEach(t),Uvr=r(zSe," \u2014 "),pH=n(zSe,"A",{href:!0});var jFt=s(pH);Jvr=r(jFt,"TFXLNetForMultipleChoice"),jFt.forEach(t),Yvr=r(zSe," (XLNet model)"),zSe.forEach(t),_e.forEach(t),Kvr=i(wl),T(IM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),tqe=i(f),dc=n(f,"H2",{class:!0});var dje=s(dc);qM=n(dje,"A",{id:!0,class:!0,href:!0});var DFt=s(qM);G2e=n(DFt,"SPAN",{});var GFt=s(G2e);T(uL.$$.fragment,GFt),GFt.forEach(t),DFt.forEach(t),Zvr=i(dje),O2e=n(dje,"SPAN",{});var OFt=s(O2e);eFr=r(OFt,"TFAutoModelForNextSentencePrediction"),OFt.forEach(t),dje.forEach(t),aqe=i(f),nr=n(f,"DIV",{class:!0});var Al=s(nr);T(_L.$$.fragment,Al),oFr=i(Al),cc=n(Al,"P",{});var _Z=s(cc);rFr=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uH=n(_Z,"A",{href:!0});var VFt=s(uH);tFr=r(VFt,"from_pretrained()"),VFt.forEach(t),aFr=r(_Z," class method or the "),_H=n(_Z,"A",{href:!0});var XFt=s(_H);nFr=r(XFt,"from_config()"),XFt.forEach(t),sFr=r(_Z,` class
method.`),_Z.forEach(t),lFr=i(Al),bL=n(Al,"P",{});var cje=s(bL);iFr=r(cje,"This class cannot be instantiated directly using "),V2e=n(cje,"CODE",{});var zFt=s(V2e);dFr=r(zFt,"__init__()"),zFt.forEach(t),cFr=r(cje," (throws an error)."),cje.forEach(t),fFr=i(Al),Rt=n(Al,"DIV",{class:!0});var dw=s(Rt);T(vL.$$.fragment,dw),mFr=i(dw),X2e=n(dw,"P",{});var QFt=s(X2e);gFr=r(QFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),QFt.forEach(t),hFr=i(dw),fc=n(dw,"P",{});var bZ=s(fc);pFr=r(bZ,`Note:
Loading a model from its configuration file does `),z2e=n(bZ,"STRONG",{});var WFt=s(z2e);uFr=r(WFt,"not"),WFt.forEach(t),_Fr=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=n(bZ,"A",{href:!0});var HFt=s(bH);bFr=r(HFt,"from_pretrained()"),HFt.forEach(t),vFr=r(bZ," to load the model weights."),bZ.forEach(t),FFr=i(dw),T(NM.$$.fragment,dw),dw.forEach(t),TFr=i(Al),Rr=n(Al,"DIV",{class:!0});var yl=s(Rr);T(FL.$$.fragment,yl),MFr=i(yl),Q2e=n(yl,"P",{});var UFt=s(Q2e);EFr=r(UFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),UFt.forEach(t),CFr=i(yl),sn=n(yl,"P",{});var cw=s(sn);wFr=r(cw,"The model class to instantiate is selected based on the "),W2e=n(cw,"CODE",{});var JFt=s(W2e);AFr=r(JFt,"model_type"),JFt.forEach(t),yFr=r(cw,` property of the config object (either
passed as an argument or loaded from `),H2e=n(cw,"CODE",{});var YFt=s(H2e);LFr=r(YFt,"pretrained_model_name_or_path"),YFt.forEach(t),xFr=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=n(cw,"CODE",{});var KFt=s(U2e);$Fr=r(KFt,"pretrained_model_name_or_path"),KFt.forEach(t),kFr=r(cw,":"),cw.forEach(t),SFr=i(yl),TL=n(yl,"UL",{});var fje=s(TL);jM=n(fje,"LI",{});var QSe=s(jM);J2e=n(QSe,"STRONG",{});var ZFt=s(J2e);RFr=r(ZFt,"bert"),ZFt.forEach(t),PFr=r(QSe," \u2014 "),vH=n(QSe,"A",{href:!0});var e0t=s(vH);BFr=r(e0t,"TFBertForNextSentencePrediction"),e0t.forEach(t),IFr=r(QSe," (BERT model)"),QSe.forEach(t),qFr=i(fje),DM=n(fje,"LI",{});var WSe=s(DM);Y2e=n(WSe,"STRONG",{});var o0t=s(Y2e);NFr=r(o0t,"mobilebert"),o0t.forEach(t),jFr=r(WSe," \u2014 "),FH=n(WSe,"A",{href:!0});var r0t=s(FH);DFr=r(r0t,"TFMobileBertForNextSentencePrediction"),r0t.forEach(t),GFr=r(WSe," (MobileBERT model)"),WSe.forEach(t),fje.forEach(t),OFr=i(yl),T(GM.$$.fragment,yl),yl.forEach(t),Al.forEach(t),nqe=i(f),mc=n(f,"H2",{class:!0});var mje=s(mc);OM=n(mje,"A",{id:!0,class:!0,href:!0});var t0t=s(OM);K2e=n(t0t,"SPAN",{});var a0t=s(K2e);T(ML.$$.fragment,a0t),a0t.forEach(t),t0t.forEach(t),VFr=i(mje),Z2e=n(mje,"SPAN",{});var n0t=s(Z2e);XFr=r(n0t,"TFAutoModelForTableQuestionAnswering"),n0t.forEach(t),mje.forEach(t),sqe=i(f),sr=n(f,"DIV",{class:!0});var Ll=s(sr);T(EL.$$.fragment,Ll),zFr=i(Ll),gc=n(Ll,"P",{});var vZ=s(gc);QFr=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TH=n(vZ,"A",{href:!0});var s0t=s(TH);WFr=r(s0t,"from_pretrained()"),s0t.forEach(t),HFr=r(vZ," class method or the "),MH=n(vZ,"A",{href:!0});var l0t=s(MH);UFr=r(l0t,"from_config()"),l0t.forEach(t),JFr=r(vZ,` class
method.`),vZ.forEach(t),YFr=i(Ll),CL=n(Ll,"P",{});var gje=s(CL);KFr=r(gje,"This class cannot be instantiated directly using "),eve=n(gje,"CODE",{});var i0t=s(eve);ZFr=r(i0t,"__init__()"),i0t.forEach(t),e0r=r(gje," (throws an error)."),gje.forEach(t),o0r=i(Ll),Pt=n(Ll,"DIV",{class:!0});var fw=s(Pt);T(wL.$$.fragment,fw),r0r=i(fw),ove=n(fw,"P",{});var d0t=s(ove);t0r=r(d0t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),d0t.forEach(t),a0r=i(fw),hc=n(fw,"P",{});var FZ=s(hc);n0r=r(FZ,`Note:
Loading a model from its configuration file does `),rve=n(FZ,"STRONG",{});var c0t=s(rve);s0r=r(c0t,"not"),c0t.forEach(t),l0r=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=n(FZ,"A",{href:!0});var f0t=s(EH);i0r=r(f0t,"from_pretrained()"),f0t.forEach(t),d0r=r(FZ," to load the model weights."),FZ.forEach(t),c0r=i(fw),T(VM.$$.fragment,fw),fw.forEach(t),f0r=i(Ll),Pr=n(Ll,"DIV",{class:!0});var xl=s(Pr);T(AL.$$.fragment,xl),m0r=i(xl),tve=n(xl,"P",{});var m0t=s(tve);g0r=r(m0t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),m0t.forEach(t),h0r=i(xl),ln=n(xl,"P",{});var mw=s(ln);p0r=r(mw,"The model class to instantiate is selected based on the "),ave=n(mw,"CODE",{});var g0t=s(ave);u0r=r(g0t,"model_type"),g0t.forEach(t),_0r=r(mw,` property of the config object (either
passed as an argument or loaded from `),nve=n(mw,"CODE",{});var h0t=s(nve);b0r=r(h0t,"pretrained_model_name_or_path"),h0t.forEach(t),v0r=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=n(mw,"CODE",{});var p0t=s(sve);F0r=r(p0t,"pretrained_model_name_or_path"),p0t.forEach(t),T0r=r(mw,":"),mw.forEach(t),M0r=i(xl),lve=n(xl,"UL",{});var u0t=s(lve);XM=n(u0t,"LI",{});var HSe=s(XM);ive=n(HSe,"STRONG",{});var _0t=s(ive);E0r=r(_0t,"tapas"),_0t.forEach(t),C0r=r(HSe," \u2014 "),CH=n(HSe,"A",{href:!0});var b0t=s(CH);w0r=r(b0t,"TFTapasForQuestionAnswering"),b0t.forEach(t),A0r=r(HSe," (TAPAS model)"),HSe.forEach(t),u0t.forEach(t),y0r=i(xl),T(zM.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),lqe=i(f),pc=n(f,"H2",{class:!0});var hje=s(pc);QM=n(hje,"A",{id:!0,class:!0,href:!0});var v0t=s(QM);dve=n(v0t,"SPAN",{});var F0t=s(dve);T(yL.$$.fragment,F0t),F0t.forEach(t),v0t.forEach(t),L0r=i(hje),cve=n(hje,"SPAN",{});var T0t=s(cve);x0r=r(T0t,"TFAutoModelForTokenClassification"),T0t.forEach(t),hje.forEach(t),iqe=i(f),lr=n(f,"DIV",{class:!0});var $l=s(lr);T(LL.$$.fragment,$l),$0r=i($l),uc=n($l,"P",{});var TZ=s(uc);k0r=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wH=n(TZ,"A",{href:!0});var M0t=s(wH);S0r=r(M0t,"from_pretrained()"),M0t.forEach(t),R0r=r(TZ," class method or the "),AH=n(TZ,"A",{href:!0});var E0t=s(AH);P0r=r(E0t,"from_config()"),E0t.forEach(t),B0r=r(TZ,` class
method.`),TZ.forEach(t),I0r=i($l),xL=n($l,"P",{});var pje=s(xL);q0r=r(pje,"This class cannot be instantiated directly using "),fve=n(pje,"CODE",{});var C0t=s(fve);N0r=r(C0t,"__init__()"),C0t.forEach(t),j0r=r(pje," (throws an error)."),pje.forEach(t),D0r=i($l),Bt=n($l,"DIV",{class:!0});var gw=s(Bt);T($L.$$.fragment,gw),G0r=i(gw),mve=n(gw,"P",{});var w0t=s(mve);O0r=r(w0t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),w0t.forEach(t),V0r=i(gw),_c=n(gw,"P",{});var MZ=s(_c);X0r=r(MZ,`Note:
Loading a model from its configuration file does `),gve=n(MZ,"STRONG",{});var A0t=s(gve);z0r=r(A0t,"not"),A0t.forEach(t),Q0r=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=n(MZ,"A",{href:!0});var y0t=s(yH);W0r=r(y0t,"from_pretrained()"),y0t.forEach(t),H0r=r(MZ," to load the model weights."),MZ.forEach(t),U0r=i(gw),T(WM.$$.fragment,gw),gw.forEach(t),J0r=i($l),Br=n($l,"DIV",{class:!0});var kl=s(Br);T(kL.$$.fragment,kl),Y0r=i(kl),hve=n(kl,"P",{});var L0t=s(hve);K0r=r(L0t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),L0t.forEach(t),Z0r=i(kl),dn=n(kl,"P",{});var hw=s(dn);eTr=r(hw,"The model class to instantiate is selected based on the "),pve=n(hw,"CODE",{});var x0t=s(pve);oTr=r(x0t,"model_type"),x0t.forEach(t),rTr=r(hw,` property of the config object (either
passed as an argument or loaded from `),uve=n(hw,"CODE",{});var $0t=s(uve);tTr=r($0t,"pretrained_model_name_or_path"),$0t.forEach(t),aTr=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=n(hw,"CODE",{});var k0t=s(_ve);nTr=r(k0t,"pretrained_model_name_or_path"),k0t.forEach(t),sTr=r(hw,":"),hw.forEach(t),lTr=i(kl),de=n(kl,"UL",{});var me=s(de);HM=n(me,"LI",{});var USe=s(HM);bve=n(USe,"STRONG",{});var S0t=s(bve);iTr=r(S0t,"albert"),S0t.forEach(t),dTr=r(USe," \u2014 "),LH=n(USe,"A",{href:!0});var R0t=s(LH);cTr=r(R0t,"TFAlbertForTokenClassification"),R0t.forEach(t),fTr=r(USe," (ALBERT model)"),USe.forEach(t),mTr=i(me),UM=n(me,"LI",{});var JSe=s(UM);vve=n(JSe,"STRONG",{});var P0t=s(vve);gTr=r(P0t,"bert"),P0t.forEach(t),hTr=r(JSe," \u2014 "),xH=n(JSe,"A",{href:!0});var B0t=s(xH);pTr=r(B0t,"TFBertForTokenClassification"),B0t.forEach(t),uTr=r(JSe," (BERT model)"),JSe.forEach(t),_Tr=i(me),JM=n(me,"LI",{});var YSe=s(JM);Fve=n(YSe,"STRONG",{});var I0t=s(Fve);bTr=r(I0t,"camembert"),I0t.forEach(t),vTr=r(YSe," \u2014 "),$H=n(YSe,"A",{href:!0});var q0t=s($H);FTr=r(q0t,"TFCamembertForTokenClassification"),q0t.forEach(t),TTr=r(YSe," (CamemBERT model)"),YSe.forEach(t),MTr=i(me),YM=n(me,"LI",{});var KSe=s(YM);Tve=n(KSe,"STRONG",{});var N0t=s(Tve);ETr=r(N0t,"convbert"),N0t.forEach(t),CTr=r(KSe," \u2014 "),kH=n(KSe,"A",{href:!0});var j0t=s(kH);wTr=r(j0t,"TFConvBertForTokenClassification"),j0t.forEach(t),ATr=r(KSe," (ConvBERT model)"),KSe.forEach(t),yTr=i(me),KM=n(me,"LI",{});var ZSe=s(KM);Mve=n(ZSe,"STRONG",{});var D0t=s(Mve);LTr=r(D0t,"deberta"),D0t.forEach(t),xTr=r(ZSe," \u2014 "),SH=n(ZSe,"A",{href:!0});var G0t=s(SH);$Tr=r(G0t,"TFDebertaForTokenClassification"),G0t.forEach(t),kTr=r(ZSe," (DeBERTa model)"),ZSe.forEach(t),STr=i(me),ZM=n(me,"LI",{});var eRe=s(ZM);Eve=n(eRe,"STRONG",{});var O0t=s(Eve);RTr=r(O0t,"deberta-v2"),O0t.forEach(t),PTr=r(eRe," \u2014 "),RH=n(eRe,"A",{href:!0});var V0t=s(RH);BTr=r(V0t,"TFDebertaV2ForTokenClassification"),V0t.forEach(t),ITr=r(eRe," (DeBERTa-v2 model)"),eRe.forEach(t),qTr=i(me),e4=n(me,"LI",{});var oRe=s(e4);Cve=n(oRe,"STRONG",{});var X0t=s(Cve);NTr=r(X0t,"distilbert"),X0t.forEach(t),jTr=r(oRe," \u2014 "),PH=n(oRe,"A",{href:!0});var z0t=s(PH);DTr=r(z0t,"TFDistilBertForTokenClassification"),z0t.forEach(t),GTr=r(oRe," (DistilBERT model)"),oRe.forEach(t),OTr=i(me),o4=n(me,"LI",{});var rRe=s(o4);wve=n(rRe,"STRONG",{});var Q0t=s(wve);VTr=r(Q0t,"electra"),Q0t.forEach(t),XTr=r(rRe," \u2014 "),BH=n(rRe,"A",{href:!0});var W0t=s(BH);zTr=r(W0t,"TFElectraForTokenClassification"),W0t.forEach(t),QTr=r(rRe," (ELECTRA model)"),rRe.forEach(t),WTr=i(me),r4=n(me,"LI",{});var tRe=s(r4);Ave=n(tRe,"STRONG",{});var H0t=s(Ave);HTr=r(H0t,"flaubert"),H0t.forEach(t),UTr=r(tRe," \u2014 "),IH=n(tRe,"A",{href:!0});var U0t=s(IH);JTr=r(U0t,"TFFlaubertForTokenClassification"),U0t.forEach(t),YTr=r(tRe," (FlauBERT model)"),tRe.forEach(t),KTr=i(me),t4=n(me,"LI",{});var aRe=s(t4);yve=n(aRe,"STRONG",{});var J0t=s(yve);ZTr=r(J0t,"funnel"),J0t.forEach(t),e7r=r(aRe," \u2014 "),qH=n(aRe,"A",{href:!0});var Y0t=s(qH);o7r=r(Y0t,"TFFunnelForTokenClassification"),Y0t.forEach(t),r7r=r(aRe," (Funnel Transformer model)"),aRe.forEach(t),t7r=i(me),a4=n(me,"LI",{});var nRe=s(a4);Lve=n(nRe,"STRONG",{});var K0t=s(Lve);a7r=r(K0t,"layoutlm"),K0t.forEach(t),n7r=r(nRe," \u2014 "),NH=n(nRe,"A",{href:!0});var Z0t=s(NH);s7r=r(Z0t,"TFLayoutLMForTokenClassification"),Z0t.forEach(t),l7r=r(nRe," (LayoutLM model)"),nRe.forEach(t),i7r=i(me),n4=n(me,"LI",{});var sRe=s(n4);xve=n(sRe,"STRONG",{});var eTt=s(xve);d7r=r(eTt,"longformer"),eTt.forEach(t),c7r=r(sRe," \u2014 "),jH=n(sRe,"A",{href:!0});var oTt=s(jH);f7r=r(oTt,"TFLongformerForTokenClassification"),oTt.forEach(t),m7r=r(sRe," (Longformer model)"),sRe.forEach(t),g7r=i(me),s4=n(me,"LI",{});var lRe=s(s4);$ve=n(lRe,"STRONG",{});var rTt=s($ve);h7r=r(rTt,"mobilebert"),rTt.forEach(t),p7r=r(lRe," \u2014 "),DH=n(lRe,"A",{href:!0});var tTt=s(DH);u7r=r(tTt,"TFMobileBertForTokenClassification"),tTt.forEach(t),_7r=r(lRe," (MobileBERT model)"),lRe.forEach(t),b7r=i(me),l4=n(me,"LI",{});var iRe=s(l4);kve=n(iRe,"STRONG",{});var aTt=s(kve);v7r=r(aTt,"mpnet"),aTt.forEach(t),F7r=r(iRe," \u2014 "),GH=n(iRe,"A",{href:!0});var nTt=s(GH);T7r=r(nTt,"TFMPNetForTokenClassification"),nTt.forEach(t),M7r=r(iRe," (MPNet model)"),iRe.forEach(t),E7r=i(me),i4=n(me,"LI",{});var dRe=s(i4);Sve=n(dRe,"STRONG",{});var sTt=s(Sve);C7r=r(sTt,"rembert"),sTt.forEach(t),w7r=r(dRe," \u2014 "),OH=n(dRe,"A",{href:!0});var lTt=s(OH);A7r=r(lTt,"TFRemBertForTokenClassification"),lTt.forEach(t),y7r=r(dRe," (RemBERT model)"),dRe.forEach(t),L7r=i(me),d4=n(me,"LI",{});var cRe=s(d4);Rve=n(cRe,"STRONG",{});var iTt=s(Rve);x7r=r(iTt,"roberta"),iTt.forEach(t),$7r=r(cRe," \u2014 "),VH=n(cRe,"A",{href:!0});var dTt=s(VH);k7r=r(dTt,"TFRobertaForTokenClassification"),dTt.forEach(t),S7r=r(cRe," (RoBERTa model)"),cRe.forEach(t),R7r=i(me),c4=n(me,"LI",{});var fRe=s(c4);Pve=n(fRe,"STRONG",{});var cTt=s(Pve);P7r=r(cTt,"roformer"),cTt.forEach(t),B7r=r(fRe," \u2014 "),XH=n(fRe,"A",{href:!0});var fTt=s(XH);I7r=r(fTt,"TFRoFormerForTokenClassification"),fTt.forEach(t),q7r=r(fRe," (RoFormer model)"),fRe.forEach(t),N7r=i(me),f4=n(me,"LI",{});var mRe=s(f4);Bve=n(mRe,"STRONG",{});var mTt=s(Bve);j7r=r(mTt,"xlm"),mTt.forEach(t),D7r=r(mRe," \u2014 "),zH=n(mRe,"A",{href:!0});var gTt=s(zH);G7r=r(gTt,"TFXLMForTokenClassification"),gTt.forEach(t),O7r=r(mRe," (XLM model)"),mRe.forEach(t),V7r=i(me),m4=n(me,"LI",{});var gRe=s(m4);Ive=n(gRe,"STRONG",{});var hTt=s(Ive);X7r=r(hTt,"xlm-roberta"),hTt.forEach(t),z7r=r(gRe," \u2014 "),QH=n(gRe,"A",{href:!0});var pTt=s(QH);Q7r=r(pTt,"TFXLMRobertaForTokenClassification"),pTt.forEach(t),W7r=r(gRe," (XLM-RoBERTa model)"),gRe.forEach(t),H7r=i(me),g4=n(me,"LI",{});var hRe=s(g4);qve=n(hRe,"STRONG",{});var uTt=s(qve);U7r=r(uTt,"xlnet"),uTt.forEach(t),J7r=r(hRe," \u2014 "),WH=n(hRe,"A",{href:!0});var _Tt=s(WH);Y7r=r(_Tt,"TFXLNetForTokenClassification"),_Tt.forEach(t),K7r=r(hRe," (XLNet model)"),hRe.forEach(t),me.forEach(t),Z7r=i(kl),T(h4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),dqe=i(f),bc=n(f,"H2",{class:!0});var uje=s(bc);p4=n(uje,"A",{id:!0,class:!0,href:!0});var bTt=s(p4);Nve=n(bTt,"SPAN",{});var vTt=s(Nve);T(SL.$$.fragment,vTt),vTt.forEach(t),bTt.forEach(t),eMr=i(uje),jve=n(uje,"SPAN",{});var FTt=s(jve);oMr=r(FTt,"TFAutoModelForQuestionAnswering"),FTt.forEach(t),uje.forEach(t),cqe=i(f),ir=n(f,"DIV",{class:!0});var Sl=s(ir);T(RL.$$.fragment,Sl),rMr=i(Sl),vc=n(Sl,"P",{});var EZ=s(vc);tMr=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HH=n(EZ,"A",{href:!0});var TTt=s(HH);aMr=r(TTt,"from_pretrained()"),TTt.forEach(t),nMr=r(EZ," class method or the "),UH=n(EZ,"A",{href:!0});var MTt=s(UH);sMr=r(MTt,"from_config()"),MTt.forEach(t),lMr=r(EZ,` class
method.`),EZ.forEach(t),iMr=i(Sl),PL=n(Sl,"P",{});var _je=s(PL);dMr=r(_je,"This class cannot be instantiated directly using "),Dve=n(_je,"CODE",{});var ETt=s(Dve);cMr=r(ETt,"__init__()"),ETt.forEach(t),fMr=r(_je," (throws an error)."),_je.forEach(t),mMr=i(Sl),It=n(Sl,"DIV",{class:!0});var pw=s(It);T(BL.$$.fragment,pw),gMr=i(pw),Gve=n(pw,"P",{});var CTt=s(Gve);hMr=r(CTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),CTt.forEach(t),pMr=i(pw),Fc=n(pw,"P",{});var CZ=s(Fc);uMr=r(CZ,`Note:
Loading a model from its configuration file does `),Ove=n(CZ,"STRONG",{});var wTt=s(Ove);_Mr=r(wTt,"not"),wTt.forEach(t),bMr=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=n(CZ,"A",{href:!0});var ATt=s(JH);vMr=r(ATt,"from_pretrained()"),ATt.forEach(t),FMr=r(CZ," to load the model weights."),CZ.forEach(t),TMr=i(pw),T(u4.$$.fragment,pw),pw.forEach(t),MMr=i(Sl),Ir=n(Sl,"DIV",{class:!0});var Rl=s(Ir);T(IL.$$.fragment,Rl),EMr=i(Rl),Vve=n(Rl,"P",{});var yTt=s(Vve);CMr=r(yTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yTt.forEach(t),wMr=i(Rl),cn=n(Rl,"P",{});var uw=s(cn);AMr=r(uw,"The model class to instantiate is selected based on the "),Xve=n(uw,"CODE",{});var LTt=s(Xve);yMr=r(LTt,"model_type"),LTt.forEach(t),LMr=r(uw,` property of the config object (either
passed as an argument or loaded from `),zve=n(uw,"CODE",{});var xTt=s(zve);xMr=r(xTt,"pretrained_model_name_or_path"),xTt.forEach(t),$Mr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=n(uw,"CODE",{});var $Tt=s(Qve);kMr=r($Tt,"pretrained_model_name_or_path"),$Tt.forEach(t),SMr=r(uw,":"),uw.forEach(t),RMr=i(Rl),ce=n(Rl,"UL",{});var ge=s(ce);_4=n(ge,"LI",{});var pRe=s(_4);Wve=n(pRe,"STRONG",{});var kTt=s(Wve);PMr=r(kTt,"albert"),kTt.forEach(t),BMr=r(pRe," \u2014 "),YH=n(pRe,"A",{href:!0});var STt=s(YH);IMr=r(STt,"TFAlbertForQuestionAnswering"),STt.forEach(t),qMr=r(pRe," (ALBERT model)"),pRe.forEach(t),NMr=i(ge),b4=n(ge,"LI",{});var uRe=s(b4);Hve=n(uRe,"STRONG",{});var RTt=s(Hve);jMr=r(RTt,"bert"),RTt.forEach(t),DMr=r(uRe," \u2014 "),KH=n(uRe,"A",{href:!0});var PTt=s(KH);GMr=r(PTt,"TFBertForQuestionAnswering"),PTt.forEach(t),OMr=r(uRe," (BERT model)"),uRe.forEach(t),VMr=i(ge),v4=n(ge,"LI",{});var _Re=s(v4);Uve=n(_Re,"STRONG",{});var BTt=s(Uve);XMr=r(BTt,"camembert"),BTt.forEach(t),zMr=r(_Re," \u2014 "),ZH=n(_Re,"A",{href:!0});var ITt=s(ZH);QMr=r(ITt,"TFCamembertForQuestionAnswering"),ITt.forEach(t),WMr=r(_Re," (CamemBERT model)"),_Re.forEach(t),HMr=i(ge),F4=n(ge,"LI",{});var bRe=s(F4);Jve=n(bRe,"STRONG",{});var qTt=s(Jve);UMr=r(qTt,"convbert"),qTt.forEach(t),JMr=r(bRe," \u2014 "),eU=n(bRe,"A",{href:!0});var NTt=s(eU);YMr=r(NTt,"TFConvBertForQuestionAnswering"),NTt.forEach(t),KMr=r(bRe," (ConvBERT model)"),bRe.forEach(t),ZMr=i(ge),T4=n(ge,"LI",{});var vRe=s(T4);Yve=n(vRe,"STRONG",{});var jTt=s(Yve);e4r=r(jTt,"deberta"),jTt.forEach(t),o4r=r(vRe," \u2014 "),oU=n(vRe,"A",{href:!0});var DTt=s(oU);r4r=r(DTt,"TFDebertaForQuestionAnswering"),DTt.forEach(t),t4r=r(vRe," (DeBERTa model)"),vRe.forEach(t),a4r=i(ge),M4=n(ge,"LI",{});var FRe=s(M4);Kve=n(FRe,"STRONG",{});var GTt=s(Kve);n4r=r(GTt,"deberta-v2"),GTt.forEach(t),s4r=r(FRe," \u2014 "),rU=n(FRe,"A",{href:!0});var OTt=s(rU);l4r=r(OTt,"TFDebertaV2ForQuestionAnswering"),OTt.forEach(t),i4r=r(FRe," (DeBERTa-v2 model)"),FRe.forEach(t),d4r=i(ge),E4=n(ge,"LI",{});var TRe=s(E4);Zve=n(TRe,"STRONG",{});var VTt=s(Zve);c4r=r(VTt,"distilbert"),VTt.forEach(t),f4r=r(TRe," \u2014 "),tU=n(TRe,"A",{href:!0});var XTt=s(tU);m4r=r(XTt,"TFDistilBertForQuestionAnswering"),XTt.forEach(t),g4r=r(TRe," (DistilBERT model)"),TRe.forEach(t),h4r=i(ge),C4=n(ge,"LI",{});var MRe=s(C4);eFe=n(MRe,"STRONG",{});var zTt=s(eFe);p4r=r(zTt,"electra"),zTt.forEach(t),u4r=r(MRe," \u2014 "),aU=n(MRe,"A",{href:!0});var QTt=s(aU);_4r=r(QTt,"TFElectraForQuestionAnswering"),QTt.forEach(t),b4r=r(MRe," (ELECTRA model)"),MRe.forEach(t),v4r=i(ge),w4=n(ge,"LI",{});var ERe=s(w4);oFe=n(ERe,"STRONG",{});var WTt=s(oFe);F4r=r(WTt,"flaubert"),WTt.forEach(t),T4r=r(ERe," \u2014 "),nU=n(ERe,"A",{href:!0});var HTt=s(nU);M4r=r(HTt,"TFFlaubertForQuestionAnsweringSimple"),HTt.forEach(t),E4r=r(ERe," (FlauBERT model)"),ERe.forEach(t),C4r=i(ge),A4=n(ge,"LI",{});var CRe=s(A4);rFe=n(CRe,"STRONG",{});var UTt=s(rFe);w4r=r(UTt,"funnel"),UTt.forEach(t),A4r=r(CRe," \u2014 "),sU=n(CRe,"A",{href:!0});var JTt=s(sU);y4r=r(JTt,"TFFunnelForQuestionAnswering"),JTt.forEach(t),L4r=r(CRe," (Funnel Transformer model)"),CRe.forEach(t),x4r=i(ge),y4=n(ge,"LI",{});var wRe=s(y4);tFe=n(wRe,"STRONG",{});var YTt=s(tFe);$4r=r(YTt,"gptj"),YTt.forEach(t),k4r=r(wRe," \u2014 "),lU=n(wRe,"A",{href:!0});var KTt=s(lU);S4r=r(KTt,"TFGPTJForQuestionAnswering"),KTt.forEach(t),R4r=r(wRe," (GPT-J model)"),wRe.forEach(t),P4r=i(ge),L4=n(ge,"LI",{});var ARe=s(L4);aFe=n(ARe,"STRONG",{});var ZTt=s(aFe);B4r=r(ZTt,"longformer"),ZTt.forEach(t),I4r=r(ARe," \u2014 "),iU=n(ARe,"A",{href:!0});var e7t=s(iU);q4r=r(e7t,"TFLongformerForQuestionAnswering"),e7t.forEach(t),N4r=r(ARe," (Longformer model)"),ARe.forEach(t),j4r=i(ge),x4=n(ge,"LI",{});var yRe=s(x4);nFe=n(yRe,"STRONG",{});var o7t=s(nFe);D4r=r(o7t,"mobilebert"),o7t.forEach(t),G4r=r(yRe," \u2014 "),dU=n(yRe,"A",{href:!0});var r7t=s(dU);O4r=r(r7t,"TFMobileBertForQuestionAnswering"),r7t.forEach(t),V4r=r(yRe," (MobileBERT model)"),yRe.forEach(t),X4r=i(ge),$4=n(ge,"LI",{});var LRe=s($4);sFe=n(LRe,"STRONG",{});var t7t=s(sFe);z4r=r(t7t,"mpnet"),t7t.forEach(t),Q4r=r(LRe," \u2014 "),cU=n(LRe,"A",{href:!0});var a7t=s(cU);W4r=r(a7t,"TFMPNetForQuestionAnswering"),a7t.forEach(t),H4r=r(LRe," (MPNet model)"),LRe.forEach(t),U4r=i(ge),k4=n(ge,"LI",{});var xRe=s(k4);lFe=n(xRe,"STRONG",{});var n7t=s(lFe);J4r=r(n7t,"rembert"),n7t.forEach(t),Y4r=r(xRe," \u2014 "),fU=n(xRe,"A",{href:!0});var s7t=s(fU);K4r=r(s7t,"TFRemBertForQuestionAnswering"),s7t.forEach(t),Z4r=r(xRe," (RemBERT model)"),xRe.forEach(t),eEr=i(ge),S4=n(ge,"LI",{});var $Re=s(S4);iFe=n($Re,"STRONG",{});var l7t=s(iFe);oEr=r(l7t,"roberta"),l7t.forEach(t),rEr=r($Re," \u2014 "),mU=n($Re,"A",{href:!0});var i7t=s(mU);tEr=r(i7t,"TFRobertaForQuestionAnswering"),i7t.forEach(t),aEr=r($Re," (RoBERTa model)"),$Re.forEach(t),nEr=i(ge),R4=n(ge,"LI",{});var kRe=s(R4);dFe=n(kRe,"STRONG",{});var d7t=s(dFe);sEr=r(d7t,"roformer"),d7t.forEach(t),lEr=r(kRe," \u2014 "),gU=n(kRe,"A",{href:!0});var c7t=s(gU);iEr=r(c7t,"TFRoFormerForQuestionAnswering"),c7t.forEach(t),dEr=r(kRe," (RoFormer model)"),kRe.forEach(t),cEr=i(ge),P4=n(ge,"LI",{});var SRe=s(P4);cFe=n(SRe,"STRONG",{});var f7t=s(cFe);fEr=r(f7t,"xlm"),f7t.forEach(t),mEr=r(SRe," \u2014 "),hU=n(SRe,"A",{href:!0});var m7t=s(hU);gEr=r(m7t,"TFXLMForQuestionAnsweringSimple"),m7t.forEach(t),hEr=r(SRe," (XLM model)"),SRe.forEach(t),pEr=i(ge),B4=n(ge,"LI",{});var RRe=s(B4);fFe=n(RRe,"STRONG",{});var g7t=s(fFe);uEr=r(g7t,"xlm-roberta"),g7t.forEach(t),_Er=r(RRe," \u2014 "),pU=n(RRe,"A",{href:!0});var h7t=s(pU);bEr=r(h7t,"TFXLMRobertaForQuestionAnswering"),h7t.forEach(t),vEr=r(RRe," (XLM-RoBERTa model)"),RRe.forEach(t),FEr=i(ge),I4=n(ge,"LI",{});var PRe=s(I4);mFe=n(PRe,"STRONG",{});var p7t=s(mFe);TEr=r(p7t,"xlnet"),p7t.forEach(t),MEr=r(PRe," \u2014 "),uU=n(PRe,"A",{href:!0});var u7t=s(uU);EEr=r(u7t,"TFXLNetForQuestionAnsweringSimple"),u7t.forEach(t),CEr=r(PRe," (XLNet model)"),PRe.forEach(t),ge.forEach(t),wEr=i(Rl),T(q4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),fqe=i(f),Tc=n(f,"H2",{class:!0});var bje=s(Tc);N4=n(bje,"A",{id:!0,class:!0,href:!0});var _7t=s(N4);gFe=n(_7t,"SPAN",{});var b7t=s(gFe);T(qL.$$.fragment,b7t),b7t.forEach(t),_7t.forEach(t),AEr=i(bje),hFe=n(bje,"SPAN",{});var v7t=s(hFe);yEr=r(v7t,"TFAutoModelForVision2Seq"),v7t.forEach(t),bje.forEach(t),mqe=i(f),dr=n(f,"DIV",{class:!0});var Pl=s(dr);T(NL.$$.fragment,Pl),LEr=i(Pl),Mc=n(Pl,"P",{});var wZ=s(Mc);xEr=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_U=n(wZ,"A",{href:!0});var F7t=s(_U);$Er=r(F7t,"from_pretrained()"),F7t.forEach(t),kEr=r(wZ," class method or the "),bU=n(wZ,"A",{href:!0});var T7t=s(bU);SEr=r(T7t,"from_config()"),T7t.forEach(t),REr=r(wZ,` class
method.`),wZ.forEach(t),PEr=i(Pl),jL=n(Pl,"P",{});var vje=s(jL);BEr=r(vje,"This class cannot be instantiated directly using "),pFe=n(vje,"CODE",{});var M7t=s(pFe);IEr=r(M7t,"__init__()"),M7t.forEach(t),qEr=r(vje," (throws an error)."),vje.forEach(t),NEr=i(Pl),qt=n(Pl,"DIV",{class:!0});var _w=s(qt);T(DL.$$.fragment,_w),jEr=i(_w),uFe=n(_w,"P",{});var E7t=s(uFe);DEr=r(E7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),E7t.forEach(t),GEr=i(_w),Ec=n(_w,"P",{});var AZ=s(Ec);OEr=r(AZ,`Note:
Loading a model from its configuration file does `),_Fe=n(AZ,"STRONG",{});var C7t=s(_Fe);VEr=r(C7t,"not"),C7t.forEach(t),XEr=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(AZ,"A",{href:!0});var w7t=s(vU);zEr=r(w7t,"from_pretrained()"),w7t.forEach(t),QEr=r(AZ," to load the model weights."),AZ.forEach(t),WEr=i(_w),T(j4.$$.fragment,_w),_w.forEach(t),HEr=i(Pl),qr=n(Pl,"DIV",{class:!0});var Bl=s(qr);T(GL.$$.fragment,Bl),UEr=i(Bl),bFe=n(Bl,"P",{});var A7t=s(bFe);JEr=r(A7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),A7t.forEach(t),YEr=i(Bl),fn=n(Bl,"P",{});var bw=s(fn);KEr=r(bw,"The model class to instantiate is selected based on the "),vFe=n(bw,"CODE",{});var y7t=s(vFe);ZEr=r(y7t,"model_type"),y7t.forEach(t),e5r=r(bw,` property of the config object (either
passed as an argument or loaded from `),FFe=n(bw,"CODE",{});var L7t=s(FFe);o5r=r(L7t,"pretrained_model_name_or_path"),L7t.forEach(t),r5r=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=n(bw,"CODE",{});var x7t=s(TFe);t5r=r(x7t,"pretrained_model_name_or_path"),x7t.forEach(t),a5r=r(bw,":"),bw.forEach(t),n5r=i(Bl),MFe=n(Bl,"UL",{});var $7t=s(MFe);D4=n($7t,"LI",{});var BRe=s(D4);EFe=n(BRe,"STRONG",{});var k7t=s(EFe);s5r=r(k7t,"vision-encoder-decoder"),k7t.forEach(t),l5r=r(BRe," \u2014 "),FU=n(BRe,"A",{href:!0});var S7t=s(FU);i5r=r(S7t,"TFVisionEncoderDecoderModel"),S7t.forEach(t),d5r=r(BRe," (Vision Encoder decoder model)"),BRe.forEach(t),$7t.forEach(t),c5r=i(Bl),T(G4.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),gqe=i(f),Cc=n(f,"H2",{class:!0});var Fje=s(Cc);O4=n(Fje,"A",{id:!0,class:!0,href:!0});var R7t=s(O4);CFe=n(R7t,"SPAN",{});var P7t=s(CFe);T(OL.$$.fragment,P7t),P7t.forEach(t),R7t.forEach(t),f5r=i(Fje),wFe=n(Fje,"SPAN",{});var B7t=s(wFe);m5r=r(B7t,"TFAutoModelForSpeechSeq2Seq"),B7t.forEach(t),Fje.forEach(t),hqe=i(f),cr=n(f,"DIV",{class:!0});var Il=s(cr);T(VL.$$.fragment,Il),g5r=i(Il),wc=n(Il,"P",{});var yZ=s(wc);h5r=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TU=n(yZ,"A",{href:!0});var I7t=s(TU);p5r=r(I7t,"from_pretrained()"),I7t.forEach(t),u5r=r(yZ," class method or the "),MU=n(yZ,"A",{href:!0});var q7t=s(MU);_5r=r(q7t,"from_config()"),q7t.forEach(t),b5r=r(yZ,` class
method.`),yZ.forEach(t),v5r=i(Il),XL=n(Il,"P",{});var Tje=s(XL);F5r=r(Tje,"This class cannot be instantiated directly using "),AFe=n(Tje,"CODE",{});var N7t=s(AFe);T5r=r(N7t,"__init__()"),N7t.forEach(t),M5r=r(Tje," (throws an error)."),Tje.forEach(t),E5r=i(Il),Nt=n(Il,"DIV",{class:!0});var vw=s(Nt);T(zL.$$.fragment,vw),C5r=i(vw),yFe=n(vw,"P",{});var j7t=s(yFe);w5r=r(j7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),j7t.forEach(t),A5r=i(vw),Ac=n(vw,"P",{});var LZ=s(Ac);y5r=r(LZ,`Note:
Loading a model from its configuration file does `),LFe=n(LZ,"STRONG",{});var D7t=s(LFe);L5r=r(D7t,"not"),D7t.forEach(t),x5r=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=n(LZ,"A",{href:!0});var G7t=s(EU);$5r=r(G7t,"from_pretrained()"),G7t.forEach(t),k5r=r(LZ," to load the model weights."),LZ.forEach(t),S5r=i(vw),T(V4.$$.fragment,vw),vw.forEach(t),R5r=i(Il),Nr=n(Il,"DIV",{class:!0});var ql=s(Nr);T(QL.$$.fragment,ql),P5r=i(ql),xFe=n(ql,"P",{});var O7t=s(xFe);B5r=r(O7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),O7t.forEach(t),I5r=i(ql),mn=n(ql,"P",{});var Fw=s(mn);q5r=r(Fw,"The model class to instantiate is selected based on the "),$Fe=n(Fw,"CODE",{});var V7t=s($Fe);N5r=r(V7t,"model_type"),V7t.forEach(t),j5r=r(Fw,` property of the config object (either
passed as an argument or loaded from `),kFe=n(Fw,"CODE",{});var X7t=s(kFe);D5r=r(X7t,"pretrained_model_name_or_path"),X7t.forEach(t),G5r=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=n(Fw,"CODE",{});var z7t=s(SFe);O5r=r(z7t,"pretrained_model_name_or_path"),z7t.forEach(t),V5r=r(Fw,":"),Fw.forEach(t),X5r=i(ql),RFe=n(ql,"UL",{});var Q7t=s(RFe);X4=n(Q7t,"LI",{});var IRe=s(X4);PFe=n(IRe,"STRONG",{});var W7t=s(PFe);z5r=r(W7t,"speech_to_text"),W7t.forEach(t),Q5r=r(IRe," \u2014 "),CU=n(IRe,"A",{href:!0});var H7t=s(CU);W5r=r(H7t,"TFSpeech2TextForConditionalGeneration"),H7t.forEach(t),H5r=r(IRe," (Speech2Text model)"),IRe.forEach(t),Q7t.forEach(t),U5r=i(ql),T(z4.$$.fragment,ql),ql.forEach(t),Il.forEach(t),pqe=i(f),yc=n(f,"H2",{class:!0});var Mje=s(yc);Q4=n(Mje,"A",{id:!0,class:!0,href:!0});var U7t=s(Q4);BFe=n(U7t,"SPAN",{});var J7t=s(BFe);T(WL.$$.fragment,J7t),J7t.forEach(t),U7t.forEach(t),J5r=i(Mje),IFe=n(Mje,"SPAN",{});var Y7t=s(IFe);Y5r=r(Y7t,"FlaxAutoModel"),Y7t.forEach(t),Mje.forEach(t),uqe=i(f),fr=n(f,"DIV",{class:!0});var Nl=s(fr);T(HL.$$.fragment,Nl),K5r=i(Nl),Lc=n(Nl,"P",{});var xZ=s(Lc);Z5r=r(xZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wU=n(xZ,"A",{href:!0});var K7t=s(wU);eCr=r(K7t,"from_pretrained()"),K7t.forEach(t),oCr=r(xZ," class method or the "),AU=n(xZ,"A",{href:!0});var Z7t=s(AU);rCr=r(Z7t,"from_config()"),Z7t.forEach(t),tCr=r(xZ,` class
method.`),xZ.forEach(t),aCr=i(Nl),UL=n(Nl,"P",{});var Eje=s(UL);nCr=r(Eje,"This class cannot be instantiated directly using "),qFe=n(Eje,"CODE",{});var eMt=s(qFe);sCr=r(eMt,"__init__()"),eMt.forEach(t),lCr=r(Eje," (throws an error)."),Eje.forEach(t),iCr=i(Nl),jt=n(Nl,"DIV",{class:!0});var Tw=s(jt);T(JL.$$.fragment,Tw),dCr=i(Tw),NFe=n(Tw,"P",{});var oMt=s(NFe);cCr=r(oMt,"Instantiates one of the base model classes of the library from a configuration."),oMt.forEach(t),fCr=i(Tw),xc=n(Tw,"P",{});var $Z=s(xc);mCr=r($Z,`Note:
Loading a model from its configuration file does `),jFe=n($Z,"STRONG",{});var rMt=s(jFe);gCr=r(rMt,"not"),rMt.forEach(t),hCr=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=n($Z,"A",{href:!0});var tMt=s(yU);pCr=r(tMt,"from_pretrained()"),tMt.forEach(t),uCr=r($Z," to load the model weights."),$Z.forEach(t),_Cr=i(Tw),T(W4.$$.fragment,Tw),Tw.forEach(t),bCr=i(Nl),jr=n(Nl,"DIV",{class:!0});var jl=s(jr);T(YL.$$.fragment,jl),vCr=i(jl),DFe=n(jl,"P",{});var aMt=s(DFe);FCr=r(aMt,"Instantiate one of the base model classes of the library from a pretrained model."),aMt.forEach(t),TCr=i(jl),gn=n(jl,"P",{});var Mw=s(gn);MCr=r(Mw,"The model class to instantiate is selected based on the "),GFe=n(Mw,"CODE",{});var nMt=s(GFe);ECr=r(nMt,"model_type"),nMt.forEach(t),CCr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),OFe=n(Mw,"CODE",{});var sMt=s(OFe);wCr=r(sMt,"pretrained_model_name_or_path"),sMt.forEach(t),ACr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=n(Mw,"CODE",{});var lMt=s(VFe);yCr=r(lMt,"pretrained_model_name_or_path"),lMt.forEach(t),LCr=r(Mw,":"),Mw.forEach(t),xCr=i(jl),ee=n(jl,"UL",{});var te=s(ee);H4=n(te,"LI",{});var qRe=s(H4);XFe=n(qRe,"STRONG",{});var iMt=s(XFe);$Cr=r(iMt,"albert"),iMt.forEach(t),kCr=r(qRe," \u2014 "),LU=n(qRe,"A",{href:!0});var dMt=s(LU);SCr=r(dMt,"FlaxAlbertModel"),dMt.forEach(t),RCr=r(qRe," (ALBERT model)"),qRe.forEach(t),PCr=i(te),U4=n(te,"LI",{});var NRe=s(U4);zFe=n(NRe,"STRONG",{});var cMt=s(zFe);BCr=r(cMt,"bart"),cMt.forEach(t),ICr=r(NRe," \u2014 "),xU=n(NRe,"A",{href:!0});var fMt=s(xU);qCr=r(fMt,"FlaxBartModel"),fMt.forEach(t),NCr=r(NRe," (BART model)"),NRe.forEach(t),jCr=i(te),J4=n(te,"LI",{});var jRe=s(J4);QFe=n(jRe,"STRONG",{});var mMt=s(QFe);DCr=r(mMt,"beit"),mMt.forEach(t),GCr=r(jRe," \u2014 "),$U=n(jRe,"A",{href:!0});var gMt=s($U);OCr=r(gMt,"FlaxBeitModel"),gMt.forEach(t),VCr=r(jRe," (BEiT model)"),jRe.forEach(t),XCr=i(te),Y4=n(te,"LI",{});var DRe=s(Y4);WFe=n(DRe,"STRONG",{});var hMt=s(WFe);zCr=r(hMt,"bert"),hMt.forEach(t),QCr=r(DRe," \u2014 "),kU=n(DRe,"A",{href:!0});var pMt=s(kU);WCr=r(pMt,"FlaxBertModel"),pMt.forEach(t),HCr=r(DRe," (BERT model)"),DRe.forEach(t),UCr=i(te),K4=n(te,"LI",{});var GRe=s(K4);HFe=n(GRe,"STRONG",{});var uMt=s(HFe);JCr=r(uMt,"big_bird"),uMt.forEach(t),YCr=r(GRe," \u2014 "),SU=n(GRe,"A",{href:!0});var _Mt=s(SU);KCr=r(_Mt,"FlaxBigBirdModel"),_Mt.forEach(t),ZCr=r(GRe," (BigBird model)"),GRe.forEach(t),e3r=i(te),Z4=n(te,"LI",{});var ORe=s(Z4);UFe=n(ORe,"STRONG",{});var bMt=s(UFe);o3r=r(bMt,"blenderbot"),bMt.forEach(t),r3r=r(ORe," \u2014 "),RU=n(ORe,"A",{href:!0});var vMt=s(RU);t3r=r(vMt,"FlaxBlenderbotModel"),vMt.forEach(t),a3r=r(ORe," (Blenderbot model)"),ORe.forEach(t),n3r=i(te),eE=n(te,"LI",{});var VRe=s(eE);JFe=n(VRe,"STRONG",{});var FMt=s(JFe);s3r=r(FMt,"blenderbot-small"),FMt.forEach(t),l3r=r(VRe," \u2014 "),PU=n(VRe,"A",{href:!0});var TMt=s(PU);i3r=r(TMt,"FlaxBlenderbotSmallModel"),TMt.forEach(t),d3r=r(VRe," (BlenderbotSmall model)"),VRe.forEach(t),c3r=i(te),oE=n(te,"LI",{});var XRe=s(oE);YFe=n(XRe,"STRONG",{});var MMt=s(YFe);f3r=r(MMt,"clip"),MMt.forEach(t),m3r=r(XRe," \u2014 "),BU=n(XRe,"A",{href:!0});var EMt=s(BU);g3r=r(EMt,"FlaxCLIPModel"),EMt.forEach(t),h3r=r(XRe," (CLIP model)"),XRe.forEach(t),p3r=i(te),rE=n(te,"LI",{});var zRe=s(rE);KFe=n(zRe,"STRONG",{});var CMt=s(KFe);u3r=r(CMt,"distilbert"),CMt.forEach(t),_3r=r(zRe," \u2014 "),IU=n(zRe,"A",{href:!0});var wMt=s(IU);b3r=r(wMt,"FlaxDistilBertModel"),wMt.forEach(t),v3r=r(zRe," (DistilBERT model)"),zRe.forEach(t),F3r=i(te),tE=n(te,"LI",{});var QRe=s(tE);ZFe=n(QRe,"STRONG",{});var AMt=s(ZFe);T3r=r(AMt,"electra"),AMt.forEach(t),M3r=r(QRe," \u2014 "),qU=n(QRe,"A",{href:!0});var yMt=s(qU);E3r=r(yMt,"FlaxElectraModel"),yMt.forEach(t),C3r=r(QRe," (ELECTRA model)"),QRe.forEach(t),w3r=i(te),aE=n(te,"LI",{});var WRe=s(aE);e0e=n(WRe,"STRONG",{});var LMt=s(e0e);A3r=r(LMt,"gpt2"),LMt.forEach(t),y3r=r(WRe," \u2014 "),NU=n(WRe,"A",{href:!0});var xMt=s(NU);L3r=r(xMt,"FlaxGPT2Model"),xMt.forEach(t),x3r=r(WRe," (OpenAI GPT-2 model)"),WRe.forEach(t),$3r=i(te),nE=n(te,"LI",{});var HRe=s(nE);o0e=n(HRe,"STRONG",{});var $Mt=s(o0e);k3r=r($Mt,"gpt_neo"),$Mt.forEach(t),S3r=r(HRe," \u2014 "),jU=n(HRe,"A",{href:!0});var kMt=s(jU);R3r=r(kMt,"FlaxGPTNeoModel"),kMt.forEach(t),P3r=r(HRe," (GPT Neo model)"),HRe.forEach(t),B3r=i(te),sE=n(te,"LI",{});var URe=s(sE);r0e=n(URe,"STRONG",{});var SMt=s(r0e);I3r=r(SMt,"gptj"),SMt.forEach(t),q3r=r(URe," \u2014 "),DU=n(URe,"A",{href:!0});var RMt=s(DU);N3r=r(RMt,"FlaxGPTJModel"),RMt.forEach(t),j3r=r(URe," (GPT-J model)"),URe.forEach(t),D3r=i(te),lE=n(te,"LI",{});var JRe=s(lE);t0e=n(JRe,"STRONG",{});var PMt=s(t0e);G3r=r(PMt,"marian"),PMt.forEach(t),O3r=r(JRe," \u2014 "),GU=n(JRe,"A",{href:!0});var BMt=s(GU);V3r=r(BMt,"FlaxMarianModel"),BMt.forEach(t),X3r=r(JRe," (Marian model)"),JRe.forEach(t),z3r=i(te),iE=n(te,"LI",{});var YRe=s(iE);a0e=n(YRe,"STRONG",{});var IMt=s(a0e);Q3r=r(IMt,"mbart"),IMt.forEach(t),W3r=r(YRe," \u2014 "),OU=n(YRe,"A",{href:!0});var qMt=s(OU);H3r=r(qMt,"FlaxMBartModel"),qMt.forEach(t),U3r=r(YRe," (mBART model)"),YRe.forEach(t),J3r=i(te),dE=n(te,"LI",{});var KRe=s(dE);n0e=n(KRe,"STRONG",{});var NMt=s(n0e);Y3r=r(NMt,"mt5"),NMt.forEach(t),K3r=r(KRe," \u2014 "),VU=n(KRe,"A",{href:!0});var jMt=s(VU);Z3r=r(jMt,"FlaxMT5Model"),jMt.forEach(t),ewr=r(KRe," (mT5 model)"),KRe.forEach(t),owr=i(te),cE=n(te,"LI",{});var ZRe=s(cE);s0e=n(ZRe,"STRONG",{});var DMt=s(s0e);rwr=r(DMt,"opt"),DMt.forEach(t),twr=r(ZRe," \u2014 "),XU=n(ZRe,"A",{href:!0});var GMt=s(XU);awr=r(GMt,"FlaxOPTModel"),GMt.forEach(t),nwr=r(ZRe," (OPT model)"),ZRe.forEach(t),swr=i(te),fE=n(te,"LI",{});var ePe=s(fE);l0e=n(ePe,"STRONG",{});var OMt=s(l0e);lwr=r(OMt,"pegasus"),OMt.forEach(t),iwr=r(ePe," \u2014 "),zU=n(ePe,"A",{href:!0});var VMt=s(zU);dwr=r(VMt,"FlaxPegasusModel"),VMt.forEach(t),cwr=r(ePe," (Pegasus model)"),ePe.forEach(t),fwr=i(te),mE=n(te,"LI",{});var oPe=s(mE);i0e=n(oPe,"STRONG",{});var XMt=s(i0e);mwr=r(XMt,"roberta"),XMt.forEach(t),gwr=r(oPe," \u2014 "),QU=n(oPe,"A",{href:!0});var zMt=s(QU);hwr=r(zMt,"FlaxRobertaModel"),zMt.forEach(t),pwr=r(oPe," (RoBERTa model)"),oPe.forEach(t),uwr=i(te),gE=n(te,"LI",{});var rPe=s(gE);d0e=n(rPe,"STRONG",{});var QMt=s(d0e);_wr=r(QMt,"roformer"),QMt.forEach(t),bwr=r(rPe," \u2014 "),WU=n(rPe,"A",{href:!0});var WMt=s(WU);vwr=r(WMt,"FlaxRoFormerModel"),WMt.forEach(t),Fwr=r(rPe," (RoFormer model)"),rPe.forEach(t),Twr=i(te),hE=n(te,"LI",{});var tPe=s(hE);c0e=n(tPe,"STRONG",{});var HMt=s(c0e);Mwr=r(HMt,"t5"),HMt.forEach(t),Ewr=r(tPe," \u2014 "),HU=n(tPe,"A",{href:!0});var UMt=s(HU);Cwr=r(UMt,"FlaxT5Model"),UMt.forEach(t),wwr=r(tPe," (T5 model)"),tPe.forEach(t),Awr=i(te),pE=n(te,"LI",{});var aPe=s(pE);f0e=n(aPe,"STRONG",{});var JMt=s(f0e);ywr=r(JMt,"vision-text-dual-encoder"),JMt.forEach(t),Lwr=r(aPe," \u2014 "),UU=n(aPe,"A",{href:!0});var YMt=s(UU);xwr=r(YMt,"FlaxVisionTextDualEncoderModel"),YMt.forEach(t),$wr=r(aPe," (VisionTextDualEncoder model)"),aPe.forEach(t),kwr=i(te),uE=n(te,"LI",{});var nPe=s(uE);m0e=n(nPe,"STRONG",{});var KMt=s(m0e);Swr=r(KMt,"vit"),KMt.forEach(t),Rwr=r(nPe," \u2014 "),JU=n(nPe,"A",{href:!0});var ZMt=s(JU);Pwr=r(ZMt,"FlaxViTModel"),ZMt.forEach(t),Bwr=r(nPe," (ViT model)"),nPe.forEach(t),Iwr=i(te),_E=n(te,"LI",{});var sPe=s(_E);g0e=n(sPe,"STRONG",{});var e4t=s(g0e);qwr=r(e4t,"wav2vec2"),e4t.forEach(t),Nwr=r(sPe," \u2014 "),YU=n(sPe,"A",{href:!0});var o4t=s(YU);jwr=r(o4t,"FlaxWav2Vec2Model"),o4t.forEach(t),Dwr=r(sPe," (Wav2Vec2 model)"),sPe.forEach(t),Gwr=i(te),bE=n(te,"LI",{});var lPe=s(bE);h0e=n(lPe,"STRONG",{});var r4t=s(h0e);Owr=r(r4t,"xglm"),r4t.forEach(t),Vwr=r(lPe," \u2014 "),KU=n(lPe,"A",{href:!0});var t4t=s(KU);Xwr=r(t4t,"FlaxXGLMModel"),t4t.forEach(t),zwr=r(lPe," (XGLM model)"),lPe.forEach(t),Qwr=i(te),vE=n(te,"LI",{});var iPe=s(vE);p0e=n(iPe,"STRONG",{});var a4t=s(p0e);Wwr=r(a4t,"xlm-roberta"),a4t.forEach(t),Hwr=r(iPe," \u2014 "),ZU=n(iPe,"A",{href:!0});var n4t=s(ZU);Uwr=r(n4t,"FlaxXLMRobertaModel"),n4t.forEach(t),Jwr=r(iPe," (XLM-RoBERTa model)"),iPe.forEach(t),te.forEach(t),Ywr=i(jl),T(FE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),_qe=i(f),$c=n(f,"H2",{class:!0});var Cje=s($c);TE=n(Cje,"A",{id:!0,class:!0,href:!0});var s4t=s(TE);u0e=n(s4t,"SPAN",{});var l4t=s(u0e);T(KL.$$.fragment,l4t),l4t.forEach(t),s4t.forEach(t),Kwr=i(Cje),_0e=n(Cje,"SPAN",{});var i4t=s(_0e);Zwr=r(i4t,"FlaxAutoModelForCausalLM"),i4t.forEach(t),Cje.forEach(t),bqe=i(f),mr=n(f,"DIV",{class:!0});var Dl=s(mr);T(ZL.$$.fragment,Dl),eAr=i(Dl),kc=n(Dl,"P",{});var kZ=s(kc);oAr=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eJ=n(kZ,"A",{href:!0});var d4t=s(eJ);rAr=r(d4t,"from_pretrained()"),d4t.forEach(t),tAr=r(kZ," class method or the "),oJ=n(kZ,"A",{href:!0});var c4t=s(oJ);aAr=r(c4t,"from_config()"),c4t.forEach(t),nAr=r(kZ,` class
method.`),kZ.forEach(t),sAr=i(Dl),ex=n(Dl,"P",{});var wje=s(ex);lAr=r(wje,"This class cannot be instantiated directly using "),b0e=n(wje,"CODE",{});var f4t=s(b0e);iAr=r(f4t,"__init__()"),f4t.forEach(t),dAr=r(wje," (throws an error)."),wje.forEach(t),cAr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var Ew=s(Dt);T(ox.$$.fragment,Ew),fAr=i(Ew),v0e=n(Ew,"P",{});var m4t=s(v0e);mAr=r(m4t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),m4t.forEach(t),gAr=i(Ew),Sc=n(Ew,"P",{});var SZ=s(Sc);hAr=r(SZ,`Note:
Loading a model from its configuration file does `),F0e=n(SZ,"STRONG",{});var g4t=s(F0e);pAr=r(g4t,"not"),g4t.forEach(t),uAr=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=n(SZ,"A",{href:!0});var h4t=s(rJ);_Ar=r(h4t,"from_pretrained()"),h4t.forEach(t),bAr=r(SZ," to load the model weights."),SZ.forEach(t),vAr=i(Ew),T(ME.$$.fragment,Ew),Ew.forEach(t),FAr=i(Dl),Dr=n(Dl,"DIV",{class:!0});var Gl=s(Dr);T(rx.$$.fragment,Gl),TAr=i(Gl),T0e=n(Gl,"P",{});var p4t=s(T0e);MAr=r(p4t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),p4t.forEach(t),EAr=i(Gl),hn=n(Gl,"P",{});var Cw=s(hn);CAr=r(Cw,"The model class to instantiate is selected based on the "),M0e=n(Cw,"CODE",{});var u4t=s(M0e);wAr=r(u4t,"model_type"),u4t.forEach(t),AAr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),E0e=n(Cw,"CODE",{});var _4t=s(E0e);yAr=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),LAr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C0e=n(Cw,"CODE",{});var b4t=s(C0e);xAr=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),$Ar=r(Cw,":"),Cw.forEach(t),kAr=i(Gl),Le=n(Gl,"UL",{});var Pe=s(Le);EE=n(Pe,"LI",{});var dPe=s(EE);w0e=n(dPe,"STRONG",{});var v4t=s(w0e);SAr=r(v4t,"bart"),v4t.forEach(t),RAr=r(dPe," \u2014 "),tJ=n(dPe,"A",{href:!0});var F4t=s(tJ);PAr=r(F4t,"FlaxBartForCausalLM"),F4t.forEach(t),BAr=r(dPe," (BART model)"),dPe.forEach(t),IAr=i(Pe),CE=n(Pe,"LI",{});var cPe=s(CE);A0e=n(cPe,"STRONG",{});var T4t=s(A0e);qAr=r(T4t,"bert"),T4t.forEach(t),NAr=r(cPe," \u2014 "),aJ=n(cPe,"A",{href:!0});var M4t=s(aJ);jAr=r(M4t,"FlaxBertForCausalLM"),M4t.forEach(t),DAr=r(cPe," (BERT model)"),cPe.forEach(t),GAr=i(Pe),wE=n(Pe,"LI",{});var fPe=s(wE);y0e=n(fPe,"STRONG",{});var E4t=s(y0e);OAr=r(E4t,"big_bird"),E4t.forEach(t),VAr=r(fPe," \u2014 "),nJ=n(fPe,"A",{href:!0});var C4t=s(nJ);XAr=r(C4t,"FlaxBigBirdForCausalLM"),C4t.forEach(t),zAr=r(fPe," (BigBird model)"),fPe.forEach(t),QAr=i(Pe),AE=n(Pe,"LI",{});var mPe=s(AE);L0e=n(mPe,"STRONG",{});var w4t=s(L0e);WAr=r(w4t,"electra"),w4t.forEach(t),HAr=r(mPe," \u2014 "),sJ=n(mPe,"A",{href:!0});var A4t=s(sJ);UAr=r(A4t,"FlaxElectraForCausalLM"),A4t.forEach(t),JAr=r(mPe," (ELECTRA model)"),mPe.forEach(t),YAr=i(Pe),yE=n(Pe,"LI",{});var gPe=s(yE);x0e=n(gPe,"STRONG",{});var y4t=s(x0e);KAr=r(y4t,"gpt2"),y4t.forEach(t),ZAr=r(gPe," \u2014 "),lJ=n(gPe,"A",{href:!0});var L4t=s(lJ);e6r=r(L4t,"FlaxGPT2LMHeadModel"),L4t.forEach(t),o6r=r(gPe," (OpenAI GPT-2 model)"),gPe.forEach(t),r6r=i(Pe),LE=n(Pe,"LI",{});var hPe=s(LE);$0e=n(hPe,"STRONG",{});var x4t=s($0e);t6r=r(x4t,"gpt_neo"),x4t.forEach(t),a6r=r(hPe," \u2014 "),iJ=n(hPe,"A",{href:!0});var $4t=s(iJ);n6r=r($4t,"FlaxGPTNeoForCausalLM"),$4t.forEach(t),s6r=r(hPe," (GPT Neo model)"),hPe.forEach(t),l6r=i(Pe),xE=n(Pe,"LI",{});var pPe=s(xE);k0e=n(pPe,"STRONG",{});var k4t=s(k0e);i6r=r(k4t,"gptj"),k4t.forEach(t),d6r=r(pPe," \u2014 "),dJ=n(pPe,"A",{href:!0});var S4t=s(dJ);c6r=r(S4t,"FlaxGPTJForCausalLM"),S4t.forEach(t),f6r=r(pPe," (GPT-J model)"),pPe.forEach(t),m6r=i(Pe),$E=n(Pe,"LI",{});var uPe=s($E);S0e=n(uPe,"STRONG",{});var R4t=s(S0e);g6r=r(R4t,"opt"),R4t.forEach(t),h6r=r(uPe," \u2014 "),cJ=n(uPe,"A",{href:!0});var P4t=s(cJ);p6r=r(P4t,"FlaxOPTForCausalLM"),P4t.forEach(t),u6r=r(uPe," (OPT model)"),uPe.forEach(t),_6r=i(Pe),kE=n(Pe,"LI",{});var _Pe=s(kE);R0e=n(_Pe,"STRONG",{});var B4t=s(R0e);b6r=r(B4t,"roberta"),B4t.forEach(t),v6r=r(_Pe," \u2014 "),fJ=n(_Pe,"A",{href:!0});var I4t=s(fJ);F6r=r(I4t,"FlaxRobertaForCausalLM"),I4t.forEach(t),T6r=r(_Pe," (RoBERTa model)"),_Pe.forEach(t),M6r=i(Pe),SE=n(Pe,"LI",{});var bPe=s(SE);P0e=n(bPe,"STRONG",{});var q4t=s(P0e);E6r=r(q4t,"xglm"),q4t.forEach(t),C6r=r(bPe," \u2014 "),mJ=n(bPe,"A",{href:!0});var N4t=s(mJ);w6r=r(N4t,"FlaxXGLMForCausalLM"),N4t.forEach(t),A6r=r(bPe," (XGLM model)"),bPe.forEach(t),Pe.forEach(t),y6r=i(Gl),T(RE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),vqe=i(f),Rc=n(f,"H2",{class:!0});var Aje=s(Rc);PE=n(Aje,"A",{id:!0,class:!0,href:!0});var j4t=s(PE);B0e=n(j4t,"SPAN",{});var D4t=s(B0e);T(tx.$$.fragment,D4t),D4t.forEach(t),j4t.forEach(t),L6r=i(Aje),I0e=n(Aje,"SPAN",{});var G4t=s(I0e);x6r=r(G4t,"FlaxAutoModelForPreTraining"),G4t.forEach(t),Aje.forEach(t),Fqe=i(f),gr=n(f,"DIV",{class:!0});var Ol=s(gr);T(ax.$$.fragment,Ol),$6r=i(Ol),Pc=n(Ol,"P",{});var RZ=s(Pc);k6r=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gJ=n(RZ,"A",{href:!0});var O4t=s(gJ);S6r=r(O4t,"from_pretrained()"),O4t.forEach(t),R6r=r(RZ," class method or the "),hJ=n(RZ,"A",{href:!0});var V4t=s(hJ);P6r=r(V4t,"from_config()"),V4t.forEach(t),B6r=r(RZ,` class
method.`),RZ.forEach(t),I6r=i(Ol),nx=n(Ol,"P",{});var yje=s(nx);q6r=r(yje,"This class cannot be instantiated directly using "),q0e=n(yje,"CODE",{});var X4t=s(q0e);N6r=r(X4t,"__init__()"),X4t.forEach(t),j6r=r(yje," (throws an error)."),yje.forEach(t),D6r=i(Ol),Gt=n(Ol,"DIV",{class:!0});var ww=s(Gt);T(sx.$$.fragment,ww),G6r=i(ww),N0e=n(ww,"P",{});var z4t=s(N0e);O6r=r(z4t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),z4t.forEach(t),V6r=i(ww),Bc=n(ww,"P",{});var PZ=s(Bc);X6r=r(PZ,`Note:
Loading a model from its configuration file does `),j0e=n(PZ,"STRONG",{});var Q4t=s(j0e);z6r=r(Q4t,"not"),Q4t.forEach(t),Q6r=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=n(PZ,"A",{href:!0});var W4t=s(pJ);W6r=r(W4t,"from_pretrained()"),W4t.forEach(t),H6r=r(PZ," to load the model weights."),PZ.forEach(t),U6r=i(ww),T(BE.$$.fragment,ww),ww.forEach(t),J6r=i(Ol),Gr=n(Ol,"DIV",{class:!0});var Vl=s(Gr);T(lx.$$.fragment,Vl),Y6r=i(Vl),D0e=n(Vl,"P",{});var H4t=s(D0e);K6r=r(H4t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),H4t.forEach(t),Z6r=i(Vl),pn=n(Vl,"P",{});var Aw=s(pn);eyr=r(Aw,"The model class to instantiate is selected based on the "),G0e=n(Aw,"CODE",{});var U4t=s(G0e);oyr=r(U4t,"model_type"),U4t.forEach(t),ryr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),O0e=n(Aw,"CODE",{});var J4t=s(O0e);tyr=r(J4t,"pretrained_model_name_or_path"),J4t.forEach(t),ayr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V0e=n(Aw,"CODE",{});var Y4t=s(V0e);nyr=r(Y4t,"pretrained_model_name_or_path"),Y4t.forEach(t),syr=r(Aw,":"),Aw.forEach(t),lyr=i(Vl),Me=n(Vl,"UL",{});var we=s(Me);IE=n(we,"LI",{});var vPe=s(IE);X0e=n(vPe,"STRONG",{});var K4t=s(X0e);iyr=r(K4t,"albert"),K4t.forEach(t),dyr=r(vPe," \u2014 "),uJ=n(vPe,"A",{href:!0});var Z4t=s(uJ);cyr=r(Z4t,"FlaxAlbertForPreTraining"),Z4t.forEach(t),fyr=r(vPe," (ALBERT model)"),vPe.forEach(t),myr=i(we),qE=n(we,"LI",{});var FPe=s(qE);z0e=n(FPe,"STRONG",{});var eEt=s(z0e);gyr=r(eEt,"bart"),eEt.forEach(t),hyr=r(FPe," \u2014 "),_J=n(FPe,"A",{href:!0});var oEt=s(_J);pyr=r(oEt,"FlaxBartForConditionalGeneration"),oEt.forEach(t),uyr=r(FPe," (BART model)"),FPe.forEach(t),_yr=i(we),NE=n(we,"LI",{});var TPe=s(NE);Q0e=n(TPe,"STRONG",{});var rEt=s(Q0e);byr=r(rEt,"bert"),rEt.forEach(t),vyr=r(TPe," \u2014 "),bJ=n(TPe,"A",{href:!0});var tEt=s(bJ);Fyr=r(tEt,"FlaxBertForPreTraining"),tEt.forEach(t),Tyr=r(TPe," (BERT model)"),TPe.forEach(t),Myr=i(we),jE=n(we,"LI",{});var MPe=s(jE);W0e=n(MPe,"STRONG",{});var aEt=s(W0e);Eyr=r(aEt,"big_bird"),aEt.forEach(t),Cyr=r(MPe," \u2014 "),vJ=n(MPe,"A",{href:!0});var nEt=s(vJ);wyr=r(nEt,"FlaxBigBirdForPreTraining"),nEt.forEach(t),Ayr=r(MPe," (BigBird model)"),MPe.forEach(t),yyr=i(we),DE=n(we,"LI",{});var EPe=s(DE);H0e=n(EPe,"STRONG",{});var sEt=s(H0e);Lyr=r(sEt,"electra"),sEt.forEach(t),xyr=r(EPe," \u2014 "),FJ=n(EPe,"A",{href:!0});var lEt=s(FJ);$yr=r(lEt,"FlaxElectraForPreTraining"),lEt.forEach(t),kyr=r(EPe," (ELECTRA model)"),EPe.forEach(t),Syr=i(we),GE=n(we,"LI",{});var CPe=s(GE);U0e=n(CPe,"STRONG",{});var iEt=s(U0e);Ryr=r(iEt,"mbart"),iEt.forEach(t),Pyr=r(CPe," \u2014 "),TJ=n(CPe,"A",{href:!0});var dEt=s(TJ);Byr=r(dEt,"FlaxMBartForConditionalGeneration"),dEt.forEach(t),Iyr=r(CPe," (mBART model)"),CPe.forEach(t),qyr=i(we),OE=n(we,"LI",{});var wPe=s(OE);J0e=n(wPe,"STRONG",{});var cEt=s(J0e);Nyr=r(cEt,"mt5"),cEt.forEach(t),jyr=r(wPe," \u2014 "),MJ=n(wPe,"A",{href:!0});var fEt=s(MJ);Dyr=r(fEt,"FlaxMT5ForConditionalGeneration"),fEt.forEach(t),Gyr=r(wPe," (mT5 model)"),wPe.forEach(t),Oyr=i(we),VE=n(we,"LI",{});var APe=s(VE);Y0e=n(APe,"STRONG",{});var mEt=s(Y0e);Vyr=r(mEt,"roberta"),mEt.forEach(t),Xyr=r(APe," \u2014 "),EJ=n(APe,"A",{href:!0});var gEt=s(EJ);zyr=r(gEt,"FlaxRobertaForMaskedLM"),gEt.forEach(t),Qyr=r(APe," (RoBERTa model)"),APe.forEach(t),Wyr=i(we),XE=n(we,"LI",{});var yPe=s(XE);K0e=n(yPe,"STRONG",{});var hEt=s(K0e);Hyr=r(hEt,"roformer"),hEt.forEach(t),Uyr=r(yPe," \u2014 "),CJ=n(yPe,"A",{href:!0});var pEt=s(CJ);Jyr=r(pEt,"FlaxRoFormerForMaskedLM"),pEt.forEach(t),Yyr=r(yPe," (RoFormer model)"),yPe.forEach(t),Kyr=i(we),zE=n(we,"LI",{});var LPe=s(zE);Z0e=n(LPe,"STRONG",{});var uEt=s(Z0e);Zyr=r(uEt,"t5"),uEt.forEach(t),eLr=r(LPe," \u2014 "),wJ=n(LPe,"A",{href:!0});var _Et=s(wJ);oLr=r(_Et,"FlaxT5ForConditionalGeneration"),_Et.forEach(t),rLr=r(LPe," (T5 model)"),LPe.forEach(t),tLr=i(we),QE=n(we,"LI",{});var xPe=s(QE);eTe=n(xPe,"STRONG",{});var bEt=s(eTe);aLr=r(bEt,"wav2vec2"),bEt.forEach(t),nLr=r(xPe," \u2014 "),AJ=n(xPe,"A",{href:!0});var vEt=s(AJ);sLr=r(vEt,"FlaxWav2Vec2ForPreTraining"),vEt.forEach(t),lLr=r(xPe," (Wav2Vec2 model)"),xPe.forEach(t),iLr=i(we),WE=n(we,"LI",{});var $Pe=s(WE);oTe=n($Pe,"STRONG",{});var FEt=s(oTe);dLr=r(FEt,"xlm-roberta"),FEt.forEach(t),cLr=r($Pe," \u2014 "),yJ=n($Pe,"A",{href:!0});var TEt=s(yJ);fLr=r(TEt,"FlaxXLMRobertaForMaskedLM"),TEt.forEach(t),mLr=r($Pe," (XLM-RoBERTa model)"),$Pe.forEach(t),we.forEach(t),gLr=i(Vl),T(HE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),Tqe=i(f),Ic=n(f,"H2",{class:!0});var Lje=s(Ic);UE=n(Lje,"A",{id:!0,class:!0,href:!0});var MEt=s(UE);rTe=n(MEt,"SPAN",{});var EEt=s(rTe);T(ix.$$.fragment,EEt),EEt.forEach(t),MEt.forEach(t),hLr=i(Lje),tTe=n(Lje,"SPAN",{});var CEt=s(tTe);pLr=r(CEt,"FlaxAutoModelForMaskedLM"),CEt.forEach(t),Lje.forEach(t),Mqe=i(f),hr=n(f,"DIV",{class:!0});var Xl=s(hr);T(dx.$$.fragment,Xl),uLr=i(Xl),qc=n(Xl,"P",{});var BZ=s(qc);_Lr=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LJ=n(BZ,"A",{href:!0});var wEt=s(LJ);bLr=r(wEt,"from_pretrained()"),wEt.forEach(t),vLr=r(BZ," class method or the "),xJ=n(BZ,"A",{href:!0});var AEt=s(xJ);FLr=r(AEt,"from_config()"),AEt.forEach(t),TLr=r(BZ,` class
method.`),BZ.forEach(t),MLr=i(Xl),cx=n(Xl,"P",{});var xje=s(cx);ELr=r(xje,"This class cannot be instantiated directly using "),aTe=n(xje,"CODE",{});var yEt=s(aTe);CLr=r(yEt,"__init__()"),yEt.forEach(t),wLr=r(xje," (throws an error)."),xje.forEach(t),ALr=i(Xl),Ot=n(Xl,"DIV",{class:!0});var yw=s(Ot);T(fx.$$.fragment,yw),yLr=i(yw),nTe=n(yw,"P",{});var LEt=s(nTe);LLr=r(LEt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),LEt.forEach(t),xLr=i(yw),Nc=n(yw,"P",{});var IZ=s(Nc);$Lr=r(IZ,`Note:
Loading a model from its configuration file does `),sTe=n(IZ,"STRONG",{});var xEt=s(sTe);kLr=r(xEt,"not"),xEt.forEach(t),SLr=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=n(IZ,"A",{href:!0});var $Et=s($J);RLr=r($Et,"from_pretrained()"),$Et.forEach(t),PLr=r(IZ," to load the model weights."),IZ.forEach(t),BLr=i(yw),T(JE.$$.fragment,yw),yw.forEach(t),ILr=i(Xl),Or=n(Xl,"DIV",{class:!0});var zl=s(Or);T(mx.$$.fragment,zl),qLr=i(zl),lTe=n(zl,"P",{});var kEt=s(lTe);NLr=r(kEt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kEt.forEach(t),jLr=i(zl),un=n(zl,"P",{});var Lw=s(un);DLr=r(Lw,"The model class to instantiate is selected based on the "),iTe=n(Lw,"CODE",{});var SEt=s(iTe);GLr=r(SEt,"model_type"),SEt.forEach(t),OLr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),dTe=n(Lw,"CODE",{});var REt=s(dTe);VLr=r(REt,"pretrained_model_name_or_path"),REt.forEach(t),XLr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=n(Lw,"CODE",{});var PEt=s(cTe);zLr=r(PEt,"pretrained_model_name_or_path"),PEt.forEach(t),QLr=r(Lw,":"),Lw.forEach(t),WLr=i(zl),xe=n(zl,"UL",{});var Be=s(xe);YE=n(Be,"LI",{});var kPe=s(YE);fTe=n(kPe,"STRONG",{});var BEt=s(fTe);HLr=r(BEt,"albert"),BEt.forEach(t),ULr=r(kPe," \u2014 "),kJ=n(kPe,"A",{href:!0});var IEt=s(kJ);JLr=r(IEt,"FlaxAlbertForMaskedLM"),IEt.forEach(t),YLr=r(kPe," (ALBERT model)"),kPe.forEach(t),KLr=i(Be),KE=n(Be,"LI",{});var SPe=s(KE);mTe=n(SPe,"STRONG",{});var qEt=s(mTe);ZLr=r(qEt,"bart"),qEt.forEach(t),exr=r(SPe," \u2014 "),SJ=n(SPe,"A",{href:!0});var NEt=s(SJ);oxr=r(NEt,"FlaxBartForConditionalGeneration"),NEt.forEach(t),rxr=r(SPe," (BART model)"),SPe.forEach(t),txr=i(Be),ZE=n(Be,"LI",{});var RPe=s(ZE);gTe=n(RPe,"STRONG",{});var jEt=s(gTe);axr=r(jEt,"bert"),jEt.forEach(t),nxr=r(RPe," \u2014 "),RJ=n(RPe,"A",{href:!0});var DEt=s(RJ);sxr=r(DEt,"FlaxBertForMaskedLM"),DEt.forEach(t),lxr=r(RPe," (BERT model)"),RPe.forEach(t),ixr=i(Be),e5=n(Be,"LI",{});var PPe=s(e5);hTe=n(PPe,"STRONG",{});var GEt=s(hTe);dxr=r(GEt,"big_bird"),GEt.forEach(t),cxr=r(PPe," \u2014 "),PJ=n(PPe,"A",{href:!0});var OEt=s(PJ);fxr=r(OEt,"FlaxBigBirdForMaskedLM"),OEt.forEach(t),mxr=r(PPe," (BigBird model)"),PPe.forEach(t),gxr=i(Be),o5=n(Be,"LI",{});var BPe=s(o5);pTe=n(BPe,"STRONG",{});var VEt=s(pTe);hxr=r(VEt,"distilbert"),VEt.forEach(t),pxr=r(BPe," \u2014 "),BJ=n(BPe,"A",{href:!0});var XEt=s(BJ);uxr=r(XEt,"FlaxDistilBertForMaskedLM"),XEt.forEach(t),_xr=r(BPe," (DistilBERT model)"),BPe.forEach(t),bxr=i(Be),r5=n(Be,"LI",{});var IPe=s(r5);uTe=n(IPe,"STRONG",{});var zEt=s(uTe);vxr=r(zEt,"electra"),zEt.forEach(t),Fxr=r(IPe," \u2014 "),IJ=n(IPe,"A",{href:!0});var QEt=s(IJ);Txr=r(QEt,"FlaxElectraForMaskedLM"),QEt.forEach(t),Mxr=r(IPe," (ELECTRA model)"),IPe.forEach(t),Exr=i(Be),t5=n(Be,"LI",{});var qPe=s(t5);_Te=n(qPe,"STRONG",{});var WEt=s(_Te);Cxr=r(WEt,"mbart"),WEt.forEach(t),wxr=r(qPe," \u2014 "),qJ=n(qPe,"A",{href:!0});var HEt=s(qJ);Axr=r(HEt,"FlaxMBartForConditionalGeneration"),HEt.forEach(t),yxr=r(qPe," (mBART model)"),qPe.forEach(t),Lxr=i(Be),a5=n(Be,"LI",{});var NPe=s(a5);bTe=n(NPe,"STRONG",{});var UEt=s(bTe);xxr=r(UEt,"roberta"),UEt.forEach(t),$xr=r(NPe," \u2014 "),NJ=n(NPe,"A",{href:!0});var JEt=s(NJ);kxr=r(JEt,"FlaxRobertaForMaskedLM"),JEt.forEach(t),Sxr=r(NPe," (RoBERTa model)"),NPe.forEach(t),Rxr=i(Be),n5=n(Be,"LI",{});var jPe=s(n5);vTe=n(jPe,"STRONG",{});var YEt=s(vTe);Pxr=r(YEt,"roformer"),YEt.forEach(t),Bxr=r(jPe," \u2014 "),jJ=n(jPe,"A",{href:!0});var KEt=s(jJ);Ixr=r(KEt,"FlaxRoFormerForMaskedLM"),KEt.forEach(t),qxr=r(jPe," (RoFormer model)"),jPe.forEach(t),Nxr=i(Be),s5=n(Be,"LI",{});var DPe=s(s5);FTe=n(DPe,"STRONG",{});var ZEt=s(FTe);jxr=r(ZEt,"xlm-roberta"),ZEt.forEach(t),Dxr=r(DPe," \u2014 "),DJ=n(DPe,"A",{href:!0});var e5t=s(DJ);Gxr=r(e5t,"FlaxXLMRobertaForMaskedLM"),e5t.forEach(t),Oxr=r(DPe," (XLM-RoBERTa model)"),DPe.forEach(t),Be.forEach(t),Vxr=i(zl),T(l5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),Eqe=i(f),jc=n(f,"H2",{class:!0});var $je=s(jc);i5=n($je,"A",{id:!0,class:!0,href:!0});var o5t=s(i5);TTe=n(o5t,"SPAN",{});var r5t=s(TTe);T(gx.$$.fragment,r5t),r5t.forEach(t),o5t.forEach(t),Xxr=i($je),MTe=n($je,"SPAN",{});var t5t=s(MTe);zxr=r(t5t,"FlaxAutoModelForSeq2SeqLM"),t5t.forEach(t),$je.forEach(t),Cqe=i(f),pr=n(f,"DIV",{class:!0});var Ql=s(pr);T(hx.$$.fragment,Ql),Qxr=i(Ql),Dc=n(Ql,"P",{});var qZ=s(Dc);Wxr=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GJ=n(qZ,"A",{href:!0});var a5t=s(GJ);Hxr=r(a5t,"from_pretrained()"),a5t.forEach(t),Uxr=r(qZ," class method or the "),OJ=n(qZ,"A",{href:!0});var n5t=s(OJ);Jxr=r(n5t,"from_config()"),n5t.forEach(t),Yxr=r(qZ,` class
method.`),qZ.forEach(t),Kxr=i(Ql),px=n(Ql,"P",{});var kje=s(px);Zxr=r(kje,"This class cannot be instantiated directly using "),ETe=n(kje,"CODE",{});var s5t=s(ETe);e9r=r(s5t,"__init__()"),s5t.forEach(t),o9r=r(kje," (throws an error)."),kje.forEach(t),r9r=i(Ql),Vt=n(Ql,"DIV",{class:!0});var xw=s(Vt);T(ux.$$.fragment,xw),t9r=i(xw),CTe=n(xw,"P",{});var l5t=s(CTe);a9r=r(l5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),l5t.forEach(t),n9r=i(xw),Gc=n(xw,"P",{});var NZ=s(Gc);s9r=r(NZ,`Note:
Loading a model from its configuration file does `),wTe=n(NZ,"STRONG",{});var i5t=s(wTe);l9r=r(i5t,"not"),i5t.forEach(t),i9r=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(NZ,"A",{href:!0});var d5t=s(VJ);d9r=r(d5t,"from_pretrained()"),d5t.forEach(t),c9r=r(NZ," to load the model weights."),NZ.forEach(t),f9r=i(xw),T(d5.$$.fragment,xw),xw.forEach(t),m9r=i(Ql),Vr=n(Ql,"DIV",{class:!0});var Wl=s(Vr);T(_x.$$.fragment,Wl),g9r=i(Wl),ATe=n(Wl,"P",{});var c5t=s(ATe);h9r=r(c5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),c5t.forEach(t),p9r=i(Wl),_n=n(Wl,"P",{});var $w=s(_n);u9r=r($w,"The model class to instantiate is selected based on the "),yTe=n($w,"CODE",{});var f5t=s(yTe);_9r=r(f5t,"model_type"),f5t.forEach(t),b9r=r($w,` property of the config object (either
passed as an argument or loaded from `),LTe=n($w,"CODE",{});var m5t=s(LTe);v9r=r(m5t,"pretrained_model_name_or_path"),m5t.forEach(t),F9r=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=n($w,"CODE",{});var g5t=s(xTe);T9r=r(g5t,"pretrained_model_name_or_path"),g5t.forEach(t),M9r=r($w,":"),$w.forEach(t),E9r=i(Wl),Se=n(Wl,"UL",{});var Ve=s(Se);c5=n(Ve,"LI",{});var GPe=s(c5);$Te=n(GPe,"STRONG",{});var h5t=s($Te);C9r=r(h5t,"bart"),h5t.forEach(t),w9r=r(GPe," \u2014 "),XJ=n(GPe,"A",{href:!0});var p5t=s(XJ);A9r=r(p5t,"FlaxBartForConditionalGeneration"),p5t.forEach(t),y9r=r(GPe," (BART model)"),GPe.forEach(t),L9r=i(Ve),f5=n(Ve,"LI",{});var OPe=s(f5);kTe=n(OPe,"STRONG",{});var u5t=s(kTe);x9r=r(u5t,"blenderbot"),u5t.forEach(t),$9r=r(OPe," \u2014 "),zJ=n(OPe,"A",{href:!0});var _5t=s(zJ);k9r=r(_5t,"FlaxBlenderbotForConditionalGeneration"),_5t.forEach(t),S9r=r(OPe," (Blenderbot model)"),OPe.forEach(t),R9r=i(Ve),m5=n(Ve,"LI",{});var VPe=s(m5);STe=n(VPe,"STRONG",{});var b5t=s(STe);P9r=r(b5t,"blenderbot-small"),b5t.forEach(t),B9r=r(VPe," \u2014 "),QJ=n(VPe,"A",{href:!0});var v5t=s(QJ);I9r=r(v5t,"FlaxBlenderbotSmallForConditionalGeneration"),v5t.forEach(t),q9r=r(VPe," (BlenderbotSmall model)"),VPe.forEach(t),N9r=i(Ve),g5=n(Ve,"LI",{});var XPe=s(g5);RTe=n(XPe,"STRONG",{});var F5t=s(RTe);j9r=r(F5t,"encoder-decoder"),F5t.forEach(t),D9r=r(XPe," \u2014 "),WJ=n(XPe,"A",{href:!0});var T5t=s(WJ);G9r=r(T5t,"FlaxEncoderDecoderModel"),T5t.forEach(t),O9r=r(XPe," (Encoder decoder model)"),XPe.forEach(t),V9r=i(Ve),h5=n(Ve,"LI",{});var zPe=s(h5);PTe=n(zPe,"STRONG",{});var M5t=s(PTe);X9r=r(M5t,"marian"),M5t.forEach(t),z9r=r(zPe," \u2014 "),HJ=n(zPe,"A",{href:!0});var E5t=s(HJ);Q9r=r(E5t,"FlaxMarianMTModel"),E5t.forEach(t),W9r=r(zPe," (Marian model)"),zPe.forEach(t),H9r=i(Ve),p5=n(Ve,"LI",{});var QPe=s(p5);BTe=n(QPe,"STRONG",{});var C5t=s(BTe);U9r=r(C5t,"mbart"),C5t.forEach(t),J9r=r(QPe," \u2014 "),UJ=n(QPe,"A",{href:!0});var w5t=s(UJ);Y9r=r(w5t,"FlaxMBartForConditionalGeneration"),w5t.forEach(t),K9r=r(QPe," (mBART model)"),QPe.forEach(t),Z9r=i(Ve),u5=n(Ve,"LI",{});var WPe=s(u5);ITe=n(WPe,"STRONG",{});var A5t=s(ITe);e$r=r(A5t,"mt5"),A5t.forEach(t),o$r=r(WPe," \u2014 "),JJ=n(WPe,"A",{href:!0});var y5t=s(JJ);r$r=r(y5t,"FlaxMT5ForConditionalGeneration"),y5t.forEach(t),t$r=r(WPe," (mT5 model)"),WPe.forEach(t),a$r=i(Ve),_5=n(Ve,"LI",{});var HPe=s(_5);qTe=n(HPe,"STRONG",{});var L5t=s(qTe);n$r=r(L5t,"pegasus"),L5t.forEach(t),s$r=r(HPe," \u2014 "),YJ=n(HPe,"A",{href:!0});var x5t=s(YJ);l$r=r(x5t,"FlaxPegasusForConditionalGeneration"),x5t.forEach(t),i$r=r(HPe," (Pegasus model)"),HPe.forEach(t),d$r=i(Ve),b5=n(Ve,"LI",{});var UPe=s(b5);NTe=n(UPe,"STRONG",{});var $5t=s(NTe);c$r=r($5t,"t5"),$5t.forEach(t),f$r=r(UPe," \u2014 "),KJ=n(UPe,"A",{href:!0});var k5t=s(KJ);m$r=r(k5t,"FlaxT5ForConditionalGeneration"),k5t.forEach(t),g$r=r(UPe," (T5 model)"),UPe.forEach(t),Ve.forEach(t),h$r=i(Wl),T(v5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),wqe=i(f),Oc=n(f,"H2",{class:!0});var Sje=s(Oc);F5=n(Sje,"A",{id:!0,class:!0,href:!0});var S5t=s(F5);jTe=n(S5t,"SPAN",{});var R5t=s(jTe);T(bx.$$.fragment,R5t),R5t.forEach(t),S5t.forEach(t),p$r=i(Sje),DTe=n(Sje,"SPAN",{});var P5t=s(DTe);u$r=r(P5t,"FlaxAutoModelForSequenceClassification"),P5t.forEach(t),Sje.forEach(t),Aqe=i(f),ur=n(f,"DIV",{class:!0});var Hl=s(ur);T(vx.$$.fragment,Hl),_$r=i(Hl),Vc=n(Hl,"P",{});var jZ=s(Vc);b$r=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZJ=n(jZ,"A",{href:!0});var B5t=s(ZJ);v$r=r(B5t,"from_pretrained()"),B5t.forEach(t),F$r=r(jZ," class method or the "),eY=n(jZ,"A",{href:!0});var I5t=s(eY);T$r=r(I5t,"from_config()"),I5t.forEach(t),M$r=r(jZ,` class
method.`),jZ.forEach(t),E$r=i(Hl),Fx=n(Hl,"P",{});var Rje=s(Fx);C$r=r(Rje,"This class cannot be instantiated directly using "),GTe=n(Rje,"CODE",{});var q5t=s(GTe);w$r=r(q5t,"__init__()"),q5t.forEach(t),A$r=r(Rje," (throws an error)."),Rje.forEach(t),y$r=i(Hl),Xt=n(Hl,"DIV",{class:!0});var kw=s(Xt);T(Tx.$$.fragment,kw),L$r=i(kw),OTe=n(kw,"P",{});var N5t=s(OTe);x$r=r(N5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),N5t.forEach(t),$$r=i(kw),Xc=n(kw,"P",{});var DZ=s(Xc);k$r=r(DZ,`Note:
Loading a model from its configuration file does `),VTe=n(DZ,"STRONG",{});var j5t=s(VTe);S$r=r(j5t,"not"),j5t.forEach(t),R$r=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(DZ,"A",{href:!0});var D5t=s(oY);P$r=r(D5t,"from_pretrained()"),D5t.forEach(t),B$r=r(DZ," to load the model weights."),DZ.forEach(t),I$r=i(kw),T(T5.$$.fragment,kw),kw.forEach(t),q$r=i(Hl),Xr=n(Hl,"DIV",{class:!0});var Ul=s(Xr);T(Mx.$$.fragment,Ul),N$r=i(Ul),XTe=n(Ul,"P",{});var G5t=s(XTe);j$r=r(G5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),G5t.forEach(t),D$r=i(Ul),bn=n(Ul,"P",{});var Sw=s(bn);G$r=r(Sw,"The model class to instantiate is selected based on the "),zTe=n(Sw,"CODE",{});var O5t=s(zTe);O$r=r(O5t,"model_type"),O5t.forEach(t),V$r=r(Sw,` property of the config object (either
passed as an argument or loaded from `),QTe=n(Sw,"CODE",{});var V5t=s(QTe);X$r=r(V5t,"pretrained_model_name_or_path"),V5t.forEach(t),z$r=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=n(Sw,"CODE",{});var X5t=s(WTe);Q$r=r(X5t,"pretrained_model_name_or_path"),X5t.forEach(t),W$r=r(Sw,":"),Sw.forEach(t),H$r=i(Ul),$e=n(Ul,"UL",{});var Ie=s($e);M5=n(Ie,"LI",{});var JPe=s(M5);HTe=n(JPe,"STRONG",{});var z5t=s(HTe);U$r=r(z5t,"albert"),z5t.forEach(t),J$r=r(JPe," \u2014 "),rY=n(JPe,"A",{href:!0});var Q5t=s(rY);Y$r=r(Q5t,"FlaxAlbertForSequenceClassification"),Q5t.forEach(t),K$r=r(JPe," (ALBERT model)"),JPe.forEach(t),Z$r=i(Ie),E5=n(Ie,"LI",{});var YPe=s(E5);UTe=n(YPe,"STRONG",{});var W5t=s(UTe);ekr=r(W5t,"bart"),W5t.forEach(t),okr=r(YPe," \u2014 "),tY=n(YPe,"A",{href:!0});var H5t=s(tY);rkr=r(H5t,"FlaxBartForSequenceClassification"),H5t.forEach(t),tkr=r(YPe," (BART model)"),YPe.forEach(t),akr=i(Ie),C5=n(Ie,"LI",{});var KPe=s(C5);JTe=n(KPe,"STRONG",{});var U5t=s(JTe);nkr=r(U5t,"bert"),U5t.forEach(t),skr=r(KPe," \u2014 "),aY=n(KPe,"A",{href:!0});var J5t=s(aY);lkr=r(J5t,"FlaxBertForSequenceClassification"),J5t.forEach(t),ikr=r(KPe," (BERT model)"),KPe.forEach(t),dkr=i(Ie),w5=n(Ie,"LI",{});var ZPe=s(w5);YTe=n(ZPe,"STRONG",{});var Y5t=s(YTe);ckr=r(Y5t,"big_bird"),Y5t.forEach(t),fkr=r(ZPe," \u2014 "),nY=n(ZPe,"A",{href:!0});var K5t=s(nY);mkr=r(K5t,"FlaxBigBirdForSequenceClassification"),K5t.forEach(t),gkr=r(ZPe," (BigBird model)"),ZPe.forEach(t),hkr=i(Ie),A5=n(Ie,"LI",{});var eBe=s(A5);KTe=n(eBe,"STRONG",{});var Z5t=s(KTe);pkr=r(Z5t,"distilbert"),Z5t.forEach(t),ukr=r(eBe," \u2014 "),sY=n(eBe,"A",{href:!0});var eCt=s(sY);_kr=r(eCt,"FlaxDistilBertForSequenceClassification"),eCt.forEach(t),bkr=r(eBe," (DistilBERT model)"),eBe.forEach(t),vkr=i(Ie),y5=n(Ie,"LI",{});var oBe=s(y5);ZTe=n(oBe,"STRONG",{});var oCt=s(ZTe);Fkr=r(oCt,"electra"),oCt.forEach(t),Tkr=r(oBe," \u2014 "),lY=n(oBe,"A",{href:!0});var rCt=s(lY);Mkr=r(rCt,"FlaxElectraForSequenceClassification"),rCt.forEach(t),Ekr=r(oBe," (ELECTRA model)"),oBe.forEach(t),Ckr=i(Ie),L5=n(Ie,"LI",{});var rBe=s(L5);e7e=n(rBe,"STRONG",{});var tCt=s(e7e);wkr=r(tCt,"mbart"),tCt.forEach(t),Akr=r(rBe," \u2014 "),iY=n(rBe,"A",{href:!0});var aCt=s(iY);ykr=r(aCt,"FlaxMBartForSequenceClassification"),aCt.forEach(t),Lkr=r(rBe," (mBART model)"),rBe.forEach(t),xkr=i(Ie),x5=n(Ie,"LI",{});var tBe=s(x5);o7e=n(tBe,"STRONG",{});var nCt=s(o7e);$kr=r(nCt,"roberta"),nCt.forEach(t),kkr=r(tBe," \u2014 "),dY=n(tBe,"A",{href:!0});var sCt=s(dY);Skr=r(sCt,"FlaxRobertaForSequenceClassification"),sCt.forEach(t),Rkr=r(tBe," (RoBERTa model)"),tBe.forEach(t),Pkr=i(Ie),$5=n(Ie,"LI",{});var aBe=s($5);r7e=n(aBe,"STRONG",{});var lCt=s(r7e);Bkr=r(lCt,"roformer"),lCt.forEach(t),Ikr=r(aBe," \u2014 "),cY=n(aBe,"A",{href:!0});var iCt=s(cY);qkr=r(iCt,"FlaxRoFormerForSequenceClassification"),iCt.forEach(t),Nkr=r(aBe," (RoFormer model)"),aBe.forEach(t),jkr=i(Ie),k5=n(Ie,"LI",{});var nBe=s(k5);t7e=n(nBe,"STRONG",{});var dCt=s(t7e);Dkr=r(dCt,"xlm-roberta"),dCt.forEach(t),Gkr=r(nBe," \u2014 "),fY=n(nBe,"A",{href:!0});var cCt=s(fY);Okr=r(cCt,"FlaxXLMRobertaForSequenceClassification"),cCt.forEach(t),Vkr=r(nBe," (XLM-RoBERTa model)"),nBe.forEach(t),Ie.forEach(t),Xkr=i(Ul),T(S5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),yqe=i(f),zc=n(f,"H2",{class:!0});var Pje=s(zc);R5=n(Pje,"A",{id:!0,class:!0,href:!0});var fCt=s(R5);a7e=n(fCt,"SPAN",{});var mCt=s(a7e);T(Ex.$$.fragment,mCt),mCt.forEach(t),fCt.forEach(t),zkr=i(Pje),n7e=n(Pje,"SPAN",{});var gCt=s(n7e);Qkr=r(gCt,"FlaxAutoModelForQuestionAnswering"),gCt.forEach(t),Pje.forEach(t),Lqe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(Cx.$$.fragment,Jl),Wkr=i(Jl),Qc=n(Jl,"P",{});var GZ=s(Qc);Hkr=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mY=n(GZ,"A",{href:!0});var hCt=s(mY);Ukr=r(hCt,"from_pretrained()"),hCt.forEach(t),Jkr=r(GZ," class method or the "),gY=n(GZ,"A",{href:!0});var pCt=s(gY);Ykr=r(pCt,"from_config()"),pCt.forEach(t),Kkr=r(GZ,` class
method.`),GZ.forEach(t),Zkr=i(Jl),wx=n(Jl,"P",{});var Bje=s(wx);eSr=r(Bje,"This class cannot be instantiated directly using "),s7e=n(Bje,"CODE",{});var uCt=s(s7e);oSr=r(uCt,"__init__()"),uCt.forEach(t),rSr=r(Bje," (throws an error)."),Bje.forEach(t),tSr=i(Jl),zt=n(Jl,"DIV",{class:!0});var Rw=s(zt);T(Ax.$$.fragment,Rw),aSr=i(Rw),l7e=n(Rw,"P",{});var _Ct=s(l7e);nSr=r(_Ct,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_Ct.forEach(t),sSr=i(Rw),Wc=n(Rw,"P",{});var OZ=s(Wc);lSr=r(OZ,`Note:
Loading a model from its configuration file does `),i7e=n(OZ,"STRONG",{});var bCt=s(i7e);iSr=r(bCt,"not"),bCt.forEach(t),dSr=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=n(OZ,"A",{href:!0});var vCt=s(hY);cSr=r(vCt,"from_pretrained()"),vCt.forEach(t),fSr=r(OZ," to load the model weights."),OZ.forEach(t),mSr=i(Rw),T(P5.$$.fragment,Rw),Rw.forEach(t),gSr=i(Jl),zr=n(Jl,"DIV",{class:!0});var Yl=s(zr);T(yx.$$.fragment,Yl),hSr=i(Yl),d7e=n(Yl,"P",{});var FCt=s(d7e);pSr=r(FCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FCt.forEach(t),uSr=i(Yl),vn=n(Yl,"P",{});var Pw=s(vn);_Sr=r(Pw,"The model class to instantiate is selected based on the "),c7e=n(Pw,"CODE",{});var TCt=s(c7e);bSr=r(TCt,"model_type"),TCt.forEach(t),vSr=r(Pw,` property of the config object (either
passed as an argument or loaded from `),f7e=n(Pw,"CODE",{});var MCt=s(f7e);FSr=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),TSr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m7e=n(Pw,"CODE",{});var ECt=s(m7e);MSr=r(ECt,"pretrained_model_name_or_path"),ECt.forEach(t),ESr=r(Pw,":"),Pw.forEach(t),CSr=i(Yl),ke=n(Yl,"UL",{});var qe=s(ke);B5=n(qe,"LI",{});var sBe=s(B5);g7e=n(sBe,"STRONG",{});var CCt=s(g7e);wSr=r(CCt,"albert"),CCt.forEach(t),ASr=r(sBe," \u2014 "),pY=n(sBe,"A",{href:!0});var wCt=s(pY);ySr=r(wCt,"FlaxAlbertForQuestionAnswering"),wCt.forEach(t),LSr=r(sBe," (ALBERT model)"),sBe.forEach(t),xSr=i(qe),I5=n(qe,"LI",{});var lBe=s(I5);h7e=n(lBe,"STRONG",{});var ACt=s(h7e);$Sr=r(ACt,"bart"),ACt.forEach(t),kSr=r(lBe," \u2014 "),uY=n(lBe,"A",{href:!0});var yCt=s(uY);SSr=r(yCt,"FlaxBartForQuestionAnswering"),yCt.forEach(t),RSr=r(lBe," (BART model)"),lBe.forEach(t),PSr=i(qe),q5=n(qe,"LI",{});var iBe=s(q5);p7e=n(iBe,"STRONG",{});var LCt=s(p7e);BSr=r(LCt,"bert"),LCt.forEach(t),ISr=r(iBe," \u2014 "),_Y=n(iBe,"A",{href:!0});var xCt=s(_Y);qSr=r(xCt,"FlaxBertForQuestionAnswering"),xCt.forEach(t),NSr=r(iBe," (BERT model)"),iBe.forEach(t),jSr=i(qe),N5=n(qe,"LI",{});var dBe=s(N5);u7e=n(dBe,"STRONG",{});var $Ct=s(u7e);DSr=r($Ct,"big_bird"),$Ct.forEach(t),GSr=r(dBe," \u2014 "),bY=n(dBe,"A",{href:!0});var kCt=s(bY);OSr=r(kCt,"FlaxBigBirdForQuestionAnswering"),kCt.forEach(t),VSr=r(dBe," (BigBird model)"),dBe.forEach(t),XSr=i(qe),j5=n(qe,"LI",{});var cBe=s(j5);_7e=n(cBe,"STRONG",{});var SCt=s(_7e);zSr=r(SCt,"distilbert"),SCt.forEach(t),QSr=r(cBe," \u2014 "),vY=n(cBe,"A",{href:!0});var RCt=s(vY);WSr=r(RCt,"FlaxDistilBertForQuestionAnswering"),RCt.forEach(t),HSr=r(cBe," (DistilBERT model)"),cBe.forEach(t),USr=i(qe),D5=n(qe,"LI",{});var fBe=s(D5);b7e=n(fBe,"STRONG",{});var PCt=s(b7e);JSr=r(PCt,"electra"),PCt.forEach(t),YSr=r(fBe," \u2014 "),FY=n(fBe,"A",{href:!0});var BCt=s(FY);KSr=r(BCt,"FlaxElectraForQuestionAnswering"),BCt.forEach(t),ZSr=r(fBe," (ELECTRA model)"),fBe.forEach(t),eRr=i(qe),G5=n(qe,"LI",{});var mBe=s(G5);v7e=n(mBe,"STRONG",{});var ICt=s(v7e);oRr=r(ICt,"mbart"),ICt.forEach(t),rRr=r(mBe," \u2014 "),TY=n(mBe,"A",{href:!0});var qCt=s(TY);tRr=r(qCt,"FlaxMBartForQuestionAnswering"),qCt.forEach(t),aRr=r(mBe," (mBART model)"),mBe.forEach(t),nRr=i(qe),O5=n(qe,"LI",{});var gBe=s(O5);F7e=n(gBe,"STRONG",{});var NCt=s(F7e);sRr=r(NCt,"roberta"),NCt.forEach(t),lRr=r(gBe," \u2014 "),MY=n(gBe,"A",{href:!0});var jCt=s(MY);iRr=r(jCt,"FlaxRobertaForQuestionAnswering"),jCt.forEach(t),dRr=r(gBe," (RoBERTa model)"),gBe.forEach(t),cRr=i(qe),V5=n(qe,"LI",{});var hBe=s(V5);T7e=n(hBe,"STRONG",{});var DCt=s(T7e);fRr=r(DCt,"roformer"),DCt.forEach(t),mRr=r(hBe," \u2014 "),EY=n(hBe,"A",{href:!0});var GCt=s(EY);gRr=r(GCt,"FlaxRoFormerForQuestionAnswering"),GCt.forEach(t),hRr=r(hBe," (RoFormer model)"),hBe.forEach(t),pRr=i(qe),X5=n(qe,"LI",{});var pBe=s(X5);M7e=n(pBe,"STRONG",{});var OCt=s(M7e);uRr=r(OCt,"xlm-roberta"),OCt.forEach(t),_Rr=r(pBe," \u2014 "),CY=n(pBe,"A",{href:!0});var VCt=s(CY);bRr=r(VCt,"FlaxXLMRobertaForQuestionAnswering"),VCt.forEach(t),vRr=r(pBe," (XLM-RoBERTa model)"),pBe.forEach(t),qe.forEach(t),FRr=i(Yl),T(z5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),xqe=i(f),Hc=n(f,"H2",{class:!0});var Ije=s(Hc);Q5=n(Ije,"A",{id:!0,class:!0,href:!0});var XCt=s(Q5);E7e=n(XCt,"SPAN",{});var zCt=s(E7e);T(Lx.$$.fragment,zCt),zCt.forEach(t),XCt.forEach(t),TRr=i(Ije),C7e=n(Ije,"SPAN",{});var QCt=s(C7e);MRr=r(QCt,"FlaxAutoModelForTokenClassification"),QCt.forEach(t),Ije.forEach(t),$qe=i(f),br=n(f,"DIV",{class:!0});var Kl=s(br);T(xx.$$.fragment,Kl),ERr=i(Kl),Uc=n(Kl,"P",{});var VZ=s(Uc);CRr=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wY=n(VZ,"A",{href:!0});var WCt=s(wY);wRr=r(WCt,"from_pretrained()"),WCt.forEach(t),ARr=r(VZ," class method or the "),AY=n(VZ,"A",{href:!0});var HCt=s(AY);yRr=r(HCt,"from_config()"),HCt.forEach(t),LRr=r(VZ,` class
method.`),VZ.forEach(t),xRr=i(Kl),$x=n(Kl,"P",{});var qje=s($x);$Rr=r(qje,"This class cannot be instantiated directly using "),w7e=n(qje,"CODE",{});var UCt=s(w7e);kRr=r(UCt,"__init__()"),UCt.forEach(t),SRr=r(qje," (throws an error)."),qje.forEach(t),RRr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var Bw=s(Qt);T(kx.$$.fragment,Bw),PRr=i(Bw),A7e=n(Bw,"P",{});var JCt=s(A7e);BRr=r(JCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JCt.forEach(t),IRr=i(Bw),Jc=n(Bw,"P",{});var XZ=s(Jc);qRr=r(XZ,`Note:
Loading a model from its configuration file does `),y7e=n(XZ,"STRONG",{});var YCt=s(y7e);NRr=r(YCt,"not"),YCt.forEach(t),jRr=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(XZ,"A",{href:!0});var KCt=s(yY);DRr=r(KCt,"from_pretrained()"),KCt.forEach(t),GRr=r(XZ," to load the model weights."),XZ.forEach(t),ORr=i(Bw),T(W5.$$.fragment,Bw),Bw.forEach(t),VRr=i(Kl),Qr=n(Kl,"DIV",{class:!0});var Zl=s(Qr);T(Sx.$$.fragment,Zl),XRr=i(Zl),L7e=n(Zl,"P",{});var ZCt=s(L7e);zRr=r(ZCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZCt.forEach(t),QRr=i(Zl),Fn=n(Zl,"P",{});var Iw=s(Fn);WRr=r(Iw,"The model class to instantiate is selected based on the "),x7e=n(Iw,"CODE",{});var e3t=s(x7e);HRr=r(e3t,"model_type"),e3t.forEach(t),URr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),$7e=n(Iw,"CODE",{});var o3t=s($7e);JRr=r(o3t,"pretrained_model_name_or_path"),o3t.forEach(t),YRr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k7e=n(Iw,"CODE",{});var r3t=s(k7e);KRr=r(r3t,"pretrained_model_name_or_path"),r3t.forEach(t),ZRr=r(Iw,":"),Iw.forEach(t),ePr=i(Zl),Ge=n(Zl,"UL",{});var Fo=s(Ge);H5=n(Fo,"LI",{});var uBe=s(H5);S7e=n(uBe,"STRONG",{});var t3t=s(S7e);oPr=r(t3t,"albert"),t3t.forEach(t),rPr=r(uBe," \u2014 "),LY=n(uBe,"A",{href:!0});var a3t=s(LY);tPr=r(a3t,"FlaxAlbertForTokenClassification"),a3t.forEach(t),aPr=r(uBe," (ALBERT model)"),uBe.forEach(t),nPr=i(Fo),U5=n(Fo,"LI",{});var _Be=s(U5);R7e=n(_Be,"STRONG",{});var n3t=s(R7e);sPr=r(n3t,"bert"),n3t.forEach(t),lPr=r(_Be," \u2014 "),xY=n(_Be,"A",{href:!0});var s3t=s(xY);iPr=r(s3t,"FlaxBertForTokenClassification"),s3t.forEach(t),dPr=r(_Be," (BERT model)"),_Be.forEach(t),cPr=i(Fo),J5=n(Fo,"LI",{});var bBe=s(J5);P7e=n(bBe,"STRONG",{});var l3t=s(P7e);fPr=r(l3t,"big_bird"),l3t.forEach(t),mPr=r(bBe," \u2014 "),$Y=n(bBe,"A",{href:!0});var i3t=s($Y);gPr=r(i3t,"FlaxBigBirdForTokenClassification"),i3t.forEach(t),hPr=r(bBe," (BigBird model)"),bBe.forEach(t),pPr=i(Fo),Y5=n(Fo,"LI",{});var vBe=s(Y5);B7e=n(vBe,"STRONG",{});var d3t=s(B7e);uPr=r(d3t,"distilbert"),d3t.forEach(t),_Pr=r(vBe," \u2014 "),kY=n(vBe,"A",{href:!0});var c3t=s(kY);bPr=r(c3t,"FlaxDistilBertForTokenClassification"),c3t.forEach(t),vPr=r(vBe," (DistilBERT model)"),vBe.forEach(t),FPr=i(Fo),K5=n(Fo,"LI",{});var FBe=s(K5);I7e=n(FBe,"STRONG",{});var f3t=s(I7e);TPr=r(f3t,"electra"),f3t.forEach(t),MPr=r(FBe," \u2014 "),SY=n(FBe,"A",{href:!0});var m3t=s(SY);EPr=r(m3t,"FlaxElectraForTokenClassification"),m3t.forEach(t),CPr=r(FBe," (ELECTRA model)"),FBe.forEach(t),wPr=i(Fo),Z5=n(Fo,"LI",{});var TBe=s(Z5);q7e=n(TBe,"STRONG",{});var g3t=s(q7e);APr=r(g3t,"roberta"),g3t.forEach(t),yPr=r(TBe," \u2014 "),RY=n(TBe,"A",{href:!0});var h3t=s(RY);LPr=r(h3t,"FlaxRobertaForTokenClassification"),h3t.forEach(t),xPr=r(TBe," (RoBERTa model)"),TBe.forEach(t),$Pr=i(Fo),eC=n(Fo,"LI",{});var MBe=s(eC);N7e=n(MBe,"STRONG",{});var p3t=s(N7e);kPr=r(p3t,"roformer"),p3t.forEach(t),SPr=r(MBe," \u2014 "),PY=n(MBe,"A",{href:!0});var u3t=s(PY);RPr=r(u3t,"FlaxRoFormerForTokenClassification"),u3t.forEach(t),PPr=r(MBe," (RoFormer model)"),MBe.forEach(t),BPr=i(Fo),oC=n(Fo,"LI",{});var EBe=s(oC);j7e=n(EBe,"STRONG",{});var _3t=s(j7e);IPr=r(_3t,"xlm-roberta"),_3t.forEach(t),qPr=r(EBe," \u2014 "),BY=n(EBe,"A",{href:!0});var b3t=s(BY);NPr=r(b3t,"FlaxXLMRobertaForTokenClassification"),b3t.forEach(t),jPr=r(EBe," (XLM-RoBERTa model)"),EBe.forEach(t),Fo.forEach(t),DPr=i(Zl),T(rC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),kqe=i(f),Yc=n(f,"H2",{class:!0});var Nje=s(Yc);tC=n(Nje,"A",{id:!0,class:!0,href:!0});var v3t=s(tC);D7e=n(v3t,"SPAN",{});var F3t=s(D7e);T(Rx.$$.fragment,F3t),F3t.forEach(t),v3t.forEach(t),GPr=i(Nje),G7e=n(Nje,"SPAN",{});var T3t=s(G7e);OPr=r(T3t,"FlaxAutoModelForMultipleChoice"),T3t.forEach(t),Nje.forEach(t),Sqe=i(f),vr=n(f,"DIV",{class:!0});var ei=s(vr);T(Px.$$.fragment,ei),VPr=i(ei),Kc=n(ei,"P",{});var zZ=s(Kc);XPr=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IY=n(zZ,"A",{href:!0});var M3t=s(IY);zPr=r(M3t,"from_pretrained()"),M3t.forEach(t),QPr=r(zZ," class method or the "),qY=n(zZ,"A",{href:!0});var E3t=s(qY);WPr=r(E3t,"from_config()"),E3t.forEach(t),HPr=r(zZ,` class
method.`),zZ.forEach(t),UPr=i(ei),Bx=n(ei,"P",{});var jje=s(Bx);JPr=r(jje,"This class cannot be instantiated directly using "),O7e=n(jje,"CODE",{});var C3t=s(O7e);YPr=r(C3t,"__init__()"),C3t.forEach(t),KPr=r(jje," (throws an error)."),jje.forEach(t),ZPr=i(ei),Wt=n(ei,"DIV",{class:!0});var qw=s(Wt);T(Ix.$$.fragment,qw),eBr=i(qw),V7e=n(qw,"P",{});var w3t=s(V7e);oBr=r(w3t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),w3t.forEach(t),rBr=i(qw),Zc=n(qw,"P",{});var QZ=s(Zc);tBr=r(QZ,`Note:
Loading a model from its configuration file does `),X7e=n(QZ,"STRONG",{});var A3t=s(X7e);aBr=r(A3t,"not"),A3t.forEach(t),nBr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=n(QZ,"A",{href:!0});var y3t=s(NY);sBr=r(y3t,"from_pretrained()"),y3t.forEach(t),lBr=r(QZ," to load the model weights."),QZ.forEach(t),iBr=i(qw),T(aC.$$.fragment,qw),qw.forEach(t),dBr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(qx.$$.fragment,oi),cBr=i(oi),z7e=n(oi,"P",{});var L3t=s(z7e);fBr=r(L3t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),L3t.forEach(t),mBr=i(oi),Tn=n(oi,"P",{});var Nw=s(Tn);gBr=r(Nw,"The model class to instantiate is selected based on the "),Q7e=n(Nw,"CODE",{});var x3t=s(Q7e);hBr=r(x3t,"model_type"),x3t.forEach(t),pBr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),W7e=n(Nw,"CODE",{});var $3t=s(W7e);uBr=r($3t,"pretrained_model_name_or_path"),$3t.forEach(t),_Br=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H7e=n(Nw,"CODE",{});var k3t=s(H7e);bBr=r(k3t,"pretrained_model_name_or_path"),k3t.forEach(t),vBr=r(Nw,":"),Nw.forEach(t),FBr=i(oi),Oe=n(oi,"UL",{});var To=s(Oe);nC=n(To,"LI",{});var CBe=s(nC);U7e=n(CBe,"STRONG",{});var S3t=s(U7e);TBr=r(S3t,"albert"),S3t.forEach(t),MBr=r(CBe," \u2014 "),jY=n(CBe,"A",{href:!0});var R3t=s(jY);EBr=r(R3t,"FlaxAlbertForMultipleChoice"),R3t.forEach(t),CBr=r(CBe," (ALBERT model)"),CBe.forEach(t),wBr=i(To),sC=n(To,"LI",{});var wBe=s(sC);J7e=n(wBe,"STRONG",{});var P3t=s(J7e);ABr=r(P3t,"bert"),P3t.forEach(t),yBr=r(wBe," \u2014 "),DY=n(wBe,"A",{href:!0});var B3t=s(DY);LBr=r(B3t,"FlaxBertForMultipleChoice"),B3t.forEach(t),xBr=r(wBe," (BERT model)"),wBe.forEach(t),$Br=i(To),lC=n(To,"LI",{});var ABe=s(lC);Y7e=n(ABe,"STRONG",{});var I3t=s(Y7e);kBr=r(I3t,"big_bird"),I3t.forEach(t),SBr=r(ABe," \u2014 "),GY=n(ABe,"A",{href:!0});var q3t=s(GY);RBr=r(q3t,"FlaxBigBirdForMultipleChoice"),q3t.forEach(t),PBr=r(ABe," (BigBird model)"),ABe.forEach(t),BBr=i(To),iC=n(To,"LI",{});var yBe=s(iC);K7e=n(yBe,"STRONG",{});var N3t=s(K7e);IBr=r(N3t,"distilbert"),N3t.forEach(t),qBr=r(yBe," \u2014 "),OY=n(yBe,"A",{href:!0});var j3t=s(OY);NBr=r(j3t,"FlaxDistilBertForMultipleChoice"),j3t.forEach(t),jBr=r(yBe," (DistilBERT model)"),yBe.forEach(t),DBr=i(To),dC=n(To,"LI",{});var LBe=s(dC);Z7e=n(LBe,"STRONG",{});var D3t=s(Z7e);GBr=r(D3t,"electra"),D3t.forEach(t),OBr=r(LBe," \u2014 "),VY=n(LBe,"A",{href:!0});var G3t=s(VY);VBr=r(G3t,"FlaxElectraForMultipleChoice"),G3t.forEach(t),XBr=r(LBe," (ELECTRA model)"),LBe.forEach(t),zBr=i(To),cC=n(To,"LI",{});var xBe=s(cC);eMe=n(xBe,"STRONG",{});var O3t=s(eMe);QBr=r(O3t,"roberta"),O3t.forEach(t),WBr=r(xBe," \u2014 "),XY=n(xBe,"A",{href:!0});var V3t=s(XY);HBr=r(V3t,"FlaxRobertaForMultipleChoice"),V3t.forEach(t),UBr=r(xBe," (RoBERTa model)"),xBe.forEach(t),JBr=i(To),fC=n(To,"LI",{});var $Be=s(fC);oMe=n($Be,"STRONG",{});var X3t=s(oMe);YBr=r(X3t,"roformer"),X3t.forEach(t),KBr=r($Be," \u2014 "),zY=n($Be,"A",{href:!0});var z3t=s(zY);ZBr=r(z3t,"FlaxRoFormerForMultipleChoice"),z3t.forEach(t),eIr=r($Be," (RoFormer model)"),$Be.forEach(t),oIr=i(To),mC=n(To,"LI",{});var kBe=s(mC);rMe=n(kBe,"STRONG",{});var Q3t=s(rMe);rIr=r(Q3t,"xlm-roberta"),Q3t.forEach(t),tIr=r(kBe," \u2014 "),QY=n(kBe,"A",{href:!0});var W3t=s(QY);aIr=r(W3t,"FlaxXLMRobertaForMultipleChoice"),W3t.forEach(t),nIr=r(kBe," (XLM-RoBERTa model)"),kBe.forEach(t),To.forEach(t),sIr=i(oi),T(gC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Rqe=i(f),ef=n(f,"H2",{class:!0});var Dje=s(ef);hC=n(Dje,"A",{id:!0,class:!0,href:!0});var H3t=s(hC);tMe=n(H3t,"SPAN",{});var U3t=s(tMe);T(Nx.$$.fragment,U3t),U3t.forEach(t),H3t.forEach(t),lIr=i(Dje),aMe=n(Dje,"SPAN",{});var J3t=s(aMe);iIr=r(J3t,"FlaxAutoModelForNextSentencePrediction"),J3t.forEach(t),Dje.forEach(t),Pqe=i(f),Fr=n(f,"DIV",{class:!0});var ri=s(Fr);T(jx.$$.fragment,ri),dIr=i(ri),of=n(ri,"P",{});var WZ=s(of);cIr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WY=n(WZ,"A",{href:!0});var Y3t=s(WY);fIr=r(Y3t,"from_pretrained()"),Y3t.forEach(t),mIr=r(WZ," class method or the "),HY=n(WZ,"A",{href:!0});var K3t=s(HY);gIr=r(K3t,"from_config()"),K3t.forEach(t),hIr=r(WZ,` class
method.`),WZ.forEach(t),pIr=i(ri),Dx=n(ri,"P",{});var Gje=s(Dx);uIr=r(Gje,"This class cannot be instantiated directly using "),nMe=n(Gje,"CODE",{});var Z3t=s(nMe);_Ir=r(Z3t,"__init__()"),Z3t.forEach(t),bIr=r(Gje," (throws an error)."),Gje.forEach(t),vIr=i(ri),Ht=n(ri,"DIV",{class:!0});var jw=s(Ht);T(Gx.$$.fragment,jw),FIr=i(jw),sMe=n(jw,"P",{});var ewt=s(sMe);TIr=r(ewt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ewt.forEach(t),MIr=i(jw),rf=n(jw,"P",{});var HZ=s(rf);EIr=r(HZ,`Note:
Loading a model from its configuration file does `),lMe=n(HZ,"STRONG",{});var owt=s(lMe);CIr=r(owt,"not"),owt.forEach(t),wIr=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=n(HZ,"A",{href:!0});var rwt=s(UY);AIr=r(rwt,"from_pretrained()"),rwt.forEach(t),yIr=r(HZ," to load the model weights."),HZ.forEach(t),LIr=i(jw),T(pC.$$.fragment,jw),jw.forEach(t),xIr=i(ri),Hr=n(ri,"DIV",{class:!0});var ti=s(Hr);T(Ox.$$.fragment,ti),$Ir=i(ti),iMe=n(ti,"P",{});var twt=s(iMe);kIr=r(twt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),twt.forEach(t),SIr=i(ti),Mn=n(ti,"P",{});var Dw=s(Mn);RIr=r(Dw,"The model class to instantiate is selected based on the "),dMe=n(Dw,"CODE",{});var awt=s(dMe);PIr=r(awt,"model_type"),awt.forEach(t),BIr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),cMe=n(Dw,"CODE",{});var nwt=s(cMe);IIr=r(nwt,"pretrained_model_name_or_path"),nwt.forEach(t),qIr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fMe=n(Dw,"CODE",{});var swt=s(fMe);NIr=r(swt,"pretrained_model_name_or_path"),swt.forEach(t),jIr=r(Dw,":"),Dw.forEach(t),DIr=i(ti),mMe=n(ti,"UL",{});var lwt=s(mMe);uC=n(lwt,"LI",{});var SBe=s(uC);gMe=n(SBe,"STRONG",{});var iwt=s(gMe);GIr=r(iwt,"bert"),iwt.forEach(t),OIr=r(SBe," \u2014 "),JY=n(SBe,"A",{href:!0});var dwt=s(JY);VIr=r(dwt,"FlaxBertForNextSentencePrediction"),dwt.forEach(t),XIr=r(SBe," (BERT model)"),SBe.forEach(t),lwt.forEach(t),zIr=i(ti),T(_C.$$.fragment,ti),ti.forEach(t),ri.forEach(t),Bqe=i(f),tf=n(f,"H2",{class:!0});var Oje=s(tf);bC=n(Oje,"A",{id:!0,class:!0,href:!0});var cwt=s(bC);hMe=n(cwt,"SPAN",{});var fwt=s(hMe);T(Vx.$$.fragment,fwt),fwt.forEach(t),cwt.forEach(t),QIr=i(Oje),pMe=n(Oje,"SPAN",{});var mwt=s(pMe);WIr=r(mwt,"FlaxAutoModelForImageClassification"),mwt.forEach(t),Oje.forEach(t),Iqe=i(f),Tr=n(f,"DIV",{class:!0});var ai=s(Tr);T(Xx.$$.fragment,ai),HIr=i(ai),af=n(ai,"P",{});var UZ=s(af);UIr=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YY=n(UZ,"A",{href:!0});var gwt=s(YY);JIr=r(gwt,"from_pretrained()"),gwt.forEach(t),YIr=r(UZ," class method or the "),KY=n(UZ,"A",{href:!0});var hwt=s(KY);KIr=r(hwt,"from_config()"),hwt.forEach(t),ZIr=r(UZ,` class
method.`),UZ.forEach(t),eqr=i(ai),zx=n(ai,"P",{});var Vje=s(zx);oqr=r(Vje,"This class cannot be instantiated directly using "),uMe=n(Vje,"CODE",{});var pwt=s(uMe);rqr=r(pwt,"__init__()"),pwt.forEach(t),tqr=r(Vje," (throws an error)."),Vje.forEach(t),aqr=i(ai),Ut=n(ai,"DIV",{class:!0});var Gw=s(Ut);T(Qx.$$.fragment,Gw),nqr=i(Gw),_Me=n(Gw,"P",{});var uwt=s(_Me);sqr=r(uwt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uwt.forEach(t),lqr=i(Gw),nf=n(Gw,"P",{});var JZ=s(nf);iqr=r(JZ,`Note:
Loading a model from its configuration file does `),bMe=n(JZ,"STRONG",{});var _wt=s(bMe);dqr=r(_wt,"not"),_wt.forEach(t),cqr=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(JZ,"A",{href:!0});var bwt=s(ZY);fqr=r(bwt,"from_pretrained()"),bwt.forEach(t),mqr=r(JZ," to load the model weights."),JZ.forEach(t),gqr=i(Gw),T(vC.$$.fragment,Gw),Gw.forEach(t),hqr=i(ai),Ur=n(ai,"DIV",{class:!0});var ni=s(Ur);T(Wx.$$.fragment,ni),pqr=i(ni),vMe=n(ni,"P",{});var vwt=s(vMe);uqr=r(vwt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vwt.forEach(t),_qr=i(ni),En=n(ni,"P",{});var Ow=s(En);bqr=r(Ow,"The model class to instantiate is selected based on the "),FMe=n(Ow,"CODE",{});var Fwt=s(FMe);vqr=r(Fwt,"model_type"),Fwt.forEach(t),Fqr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),TMe=n(Ow,"CODE",{});var Twt=s(TMe);Tqr=r(Twt,"pretrained_model_name_or_path"),Twt.forEach(t),Mqr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=n(Ow,"CODE",{});var Mwt=s(MMe);Eqr=r(Mwt,"pretrained_model_name_or_path"),Mwt.forEach(t),Cqr=r(Ow,":"),Ow.forEach(t),wqr=i(ni),Hx=n(ni,"UL",{});var Xje=s(Hx);FC=n(Xje,"LI",{});var RBe=s(FC);EMe=n(RBe,"STRONG",{});var Ewt=s(EMe);Aqr=r(Ewt,"beit"),Ewt.forEach(t),yqr=r(RBe," \u2014 "),eK=n(RBe,"A",{href:!0});var Cwt=s(eK);Lqr=r(Cwt,"FlaxBeitForImageClassification"),Cwt.forEach(t),xqr=r(RBe," (BEiT model)"),RBe.forEach(t),$qr=i(Xje),TC=n(Xje,"LI",{});var PBe=s(TC);CMe=n(PBe,"STRONG",{});var wwt=s(CMe);kqr=r(wwt,"vit"),wwt.forEach(t),Sqr=r(PBe," \u2014 "),oK=n(PBe,"A",{href:!0});var Awt=s(oK);Rqr=r(Awt,"FlaxViTForImageClassification"),Awt.forEach(t),Pqr=r(PBe," (ViT model)"),PBe.forEach(t),Xje.forEach(t),Bqr=i(ni),T(MC.$$.fragment,ni),ni.forEach(t),ai.forEach(t),qqe=i(f),sf=n(f,"H2",{class:!0});var zje=s(sf);EC=n(zje,"A",{id:!0,class:!0,href:!0});var ywt=s(EC);wMe=n(ywt,"SPAN",{});var Lwt=s(wMe);T(Ux.$$.fragment,Lwt),Lwt.forEach(t),ywt.forEach(t),Iqr=i(zje),AMe=n(zje,"SPAN",{});var xwt=s(AMe);qqr=r(xwt,"FlaxAutoModelForVision2Seq"),xwt.forEach(t),zje.forEach(t),Nqe=i(f),Mr=n(f,"DIV",{class:!0});var si=s(Mr);T(Jx.$$.fragment,si),Nqr=i(si),lf=n(si,"P",{});var YZ=s(lf);jqr=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rK=n(YZ,"A",{href:!0});var $wt=s(rK);Dqr=r($wt,"from_pretrained()"),$wt.forEach(t),Gqr=r(YZ," class method or the "),tK=n(YZ,"A",{href:!0});var kwt=s(tK);Oqr=r(kwt,"from_config()"),kwt.forEach(t),Vqr=r(YZ,` class
method.`),YZ.forEach(t),Xqr=i(si),Yx=n(si,"P",{});var Qje=s(Yx);zqr=r(Qje,"This class cannot be instantiated directly using "),yMe=n(Qje,"CODE",{});var Swt=s(yMe);Qqr=r(Swt,"__init__()"),Swt.forEach(t),Wqr=r(Qje," (throws an error)."),Qje.forEach(t),Hqr=i(si),Jt=n(si,"DIV",{class:!0});var Vw=s(Jt);T(Kx.$$.fragment,Vw),Uqr=i(Vw),LMe=n(Vw,"P",{});var Rwt=s(LMe);Jqr=r(Rwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Rwt.forEach(t),Yqr=i(Vw),df=n(Vw,"P",{});var KZ=s(df);Kqr=r(KZ,`Note:
Loading a model from its configuration file does `),xMe=n(KZ,"STRONG",{});var Pwt=s(xMe);Zqr=r(Pwt,"not"),Pwt.forEach(t),eNr=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(KZ,"A",{href:!0});var Bwt=s(aK);oNr=r(Bwt,"from_pretrained()"),Bwt.forEach(t),rNr=r(KZ," to load the model weights."),KZ.forEach(t),tNr=i(Vw),T(CC.$$.fragment,Vw),Vw.forEach(t),aNr=i(si),Jr=n(si,"DIV",{class:!0});var li=s(Jr);T(Zx.$$.fragment,li),nNr=i(li),$Me=n(li,"P",{});var Iwt=s($Me);sNr=r(Iwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Iwt.forEach(t),lNr=i(li),Cn=n(li,"P",{});var Xw=s(Cn);iNr=r(Xw,"The model class to instantiate is selected based on the "),kMe=n(Xw,"CODE",{});var qwt=s(kMe);dNr=r(qwt,"model_type"),qwt.forEach(t),cNr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),SMe=n(Xw,"CODE",{});var Nwt=s(SMe);fNr=r(Nwt,"pretrained_model_name_or_path"),Nwt.forEach(t),mNr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RMe=n(Xw,"CODE",{});var jwt=s(RMe);gNr=r(jwt,"pretrained_model_name_or_path"),jwt.forEach(t),hNr=r(Xw,":"),Xw.forEach(t),pNr=i(li),PMe=n(li,"UL",{});var Dwt=s(PMe);wC=n(Dwt,"LI",{});var BBe=s(wC);BMe=n(BBe,"STRONG",{});var Gwt=s(BMe);uNr=r(Gwt,"vision-encoder-decoder"),Gwt.forEach(t),_Nr=r(BBe," \u2014 "),nK=n(BBe,"A",{href:!0});var Owt=s(nK);bNr=r(Owt,"FlaxVisionEncoderDecoderModel"),Owt.forEach(t),vNr=r(BBe," (Vision Encoder decoder model)"),BBe.forEach(t),Dwt.forEach(t),FNr=i(li),T(AC.$$.fragment,li),li.forEach(t),si.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Q6t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoTokenizer"),c(hi,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertModel"),c(_f,"id","extending-the-auto-classes"),c(_f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_f,"href","#extending-the-auto-classes"),c(pi,"class","relative group"),c(vf,"id","transformers.AutoConfig"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#transformers.AutoConfig"),c(ui,"class","relative group"),c(v$,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(F$,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig"),c(T$,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig"),c(M$,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig"),c(E$,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig"),c(C$,"href","/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(w$,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig"),c(A$,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(y$,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(L$,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(x$,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig"),c($$,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig"),c(k$,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPConfig"),c(S$,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig"),c(R$,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig"),c(P$,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig"),c(B$,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(I$,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(q$,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(N$,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig"),c(j$,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(D$,"href","/docs/transformers/pr_17088/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(G$,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTConfig"),c(O$,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrConfig"),c(V$,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig"),c(X$,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRConfig"),c(z$,"href","/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTConfig"),c(Q$,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig"),c(W$,"href","/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(H$,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig"),c(U$,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig"),c(J$,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTConfig"),c(Y$,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig"),c(K$,"href","/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNConfig"),c(Z$,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config"),c(ek,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(ok,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig"),c(rk,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig"),c(tk,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig"),c(ak,"href","/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(nk,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(sk,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(lk,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig"),c(ik,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig"),c(dk,"href","/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeConfig"),c(ck,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig"),c(fk,"href","/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Config"),c(mk,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig"),c(gk,"href","/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(hk,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig"),c(pk,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(uk,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(_k,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig"),c(bk,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config"),c(vk,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Fk,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Tk,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig"),c(Mk,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig"),c(Ek,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Ck,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig"),c(wk,"href","/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Ak,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(yk,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Lk,"href","/docs/transformers/pr_17088/en/model_doc/rag#transformers.RagConfig"),c(xk,"href","/docs/transformers/pr_17088/en/model_doc/realm#transformers.RealmConfig"),c($k,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig"),c(kk,"href","/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetConfig"),c(Sk,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig"),c(Rk,"href","/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetConfig"),c(Pk,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertConfig"),c(Bk,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig"),c(Ik,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig"),c(qk,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerConfig"),c(Nk,"href","/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWConfig"),c(jk,"href","/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDConfig"),c(Dk,"href","/docs/transformers/pr_17088/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Gk,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Ok,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Vk,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterConfig"),c(Xk,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(zk,"href","/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinConfig"),c(Qk,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config"),c(Wk,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig"),c(Hk,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig"),c(Uk,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Jk,"href","/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRConfig"),c(Yk,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Kk,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Zk,"href","/docs/transformers/pr_17088/en/model_doc/van#transformers.VanConfig"),c(eS,"href","/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltConfig"),c(oS,"href","/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(rS,"href","/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(tS,"href","/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(aS,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig"),c(nS,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(sS,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(lS,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig"),c(iS,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig"),c(dS,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig"),c(cS,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(fS,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(mS,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(gS,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig"),c(hS,"href","/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosConfig"),c(pS,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bg,"id","transformers.AutoTokenizer"),c(bg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bg,"href","#transformers.AutoTokenizer"),c(bi,"class","relative group"),c(uS,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(_S,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizer"),c(bS,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(vS,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartTokenizer"),c(FS,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartTokenizerFast"),c(TS,"href","/docs/transformers/pr_17088/en/model_doc/barthez#transformers.BarthezTokenizer"),c(MS,"href","/docs/transformers/pr_17088/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(ES,"href","/docs/transformers/pr_17088/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(CS,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizer"),c(wS,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizerFast"),c(AS,"href","/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(yS,"href","/docs/transformers/pr_17088/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(LS,"href","/docs/transformers/pr_17088/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(xS,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c($S,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(kS,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(SS,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(RS,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(PS,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(BS,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(IS,"href","/docs/transformers/pr_17088/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(qS,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertTokenizer"),c(NS,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(jS,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineTokenizer"),c(DS,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPTokenizer"),c(GS,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(OS,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(VS,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(XS,"href","/docs/transformers/pr_17088/en/model_doc/cpm#transformers.CpmTokenizer"),c(zS,"href","/docs/transformers/pr_17088/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(QS,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(WS,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizer"),c(HS,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(US,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaTokenizer"),c(JS,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(YS,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(KS,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(ZS,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(eR,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(oR,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(rR,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(tR,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraTokenizer"),c(aR,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(nR,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(sR,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetTokenizer"),c(lR,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(iR,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(dR,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelTokenizer"),c(cR,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(fR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(mR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(gR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(hR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(pR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(uR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(_R,"href","/docs/transformers/pr_17088/en/model_doc/herbert#transformers.HerbertTokenizer"),c(bR,"href","/docs/transformers/pr_17088/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(vR,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(FR,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizer"),c(TR,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(MR,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(ER,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(CR,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(wR,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(AR,"href","/docs/transformers/pr_17088/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(yR,"href","/docs/transformers/pr_17088/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(LR,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDTokenizer"),c(xR,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDTokenizerFast"),c($R,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerTokenizer"),c(kR,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(SR,"href","/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeTokenizer"),c(RR,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(PR,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(BR,"href","/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(IR,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianTokenizer"),c(qR,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartTokenizer"),c(NR,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(jR,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(DR,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(GR,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizer"),c(OR,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizerFast"),c(VR,"href","/docs/transformers/pr_17088/en/model_doc/mluke#transformers.MLukeTokenizer"),c(XR,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(zR,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(QR,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(WR,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(HR,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.T5Tokenizer"),c(UR,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.T5TokenizerFast"),c(JR,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizer"),c(YR,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(KR,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(ZR,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(eP,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(oP,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(rP,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(tP,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(aP,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(nP,"href","/docs/transformers/pr_17088/en/model_doc/phobert#transformers.PhobertTokenizer"),c(sP,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartTokenizer"),c(lP,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(iP,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizer"),c(dP,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizerFast"),c(cP,"href","/docs/transformers/pr_17088/en/model_doc/rag#transformers.RagTokenizer"),c(fP,"href","/docs/transformers/pr_17088/en/model_doc/realm#transformers.RealmTokenizer"),c(mP,"href","/docs/transformers/pr_17088/en/model_doc/realm#transformers.RealmTokenizerFast"),c(gP,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerTokenizer"),c(hP,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(pP,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertTokenizer"),c(uP,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(_P,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(bP,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(vP,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizer"),c(FP,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(TP,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(MP,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(EP,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(CP,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(wP,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterTokenizer"),c(AP,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(yP,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(LP,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(xP,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.T5Tokenizer"),c($P,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.T5TokenizerFast"),c(kP,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasTokenizer"),c(SP,"href","/docs/transformers/pr_17088/en/model_doc/tapex#transformers.TapexTokenizer"),c(RP,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(PP,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizer"),c(BP,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizerFast"),c(IP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(qP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(NP,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMTokenizer"),c(jP,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(DP,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMTokenizer"),c(GP,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(OP,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(VP,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(XP,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zP,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QP,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(WP,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(HP,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizer"),c(UP,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jg,"id","transformers.AutoFeatureExtractor"),c(Jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jg,"href","#transformers.AutoFeatureExtractor"),c(vi,"class","relative group"),c(JP,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(YP,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(KP,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(ZP,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(oB,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(rB,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(tB,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(aB,"href","/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(nB,"href","/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(sB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(lB,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(iB,"href","/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(dB,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(cB,"href","/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(fB,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mB,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gB,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(hB,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(pB,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(uB,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(_B,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(bB,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(vB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(FB,"href","/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"id","transformers.AutoProcessor"),c(Ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ch,"href","#transformers.AutoProcessor"),c(Fi,"class","relative group"),c(TB,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(MB,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPProcessor"),c(EB,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(CB,"href","/docs/transformers/pr_17088/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(wB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yB,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(LB,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(xB,"href","/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRProcessor"),c($B,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SB,"href","/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltProcessor"),c(RB,"href","/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(PB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oh,"id","transformers.AutoModel"),c(Oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Oh,"href","#transformers.AutoModel"),c(Mi,"class","relative group"),c(IB,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qB,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NB,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jB,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertModel"),c(DB,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartModel"),c(GB,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitModel"),c(OB,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertModel"),c(VB,"href","/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(XB,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdModel"),c(zB,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(QB,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(WB,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(HB,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertModel"),c(UB,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineModel"),c(JB,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPModel"),c(YB,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertModel"),c(KB,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextModel"),c(ZB,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLModel"),c(eI,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(oI,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(rI,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(tI,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaModel"),c(aI,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(nI,"href","/docs/transformers/pr_17088/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(sI,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTModel"),c(lI,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrModel"),c(iI,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertModel"),c(dI,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(cI,"href","/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTModel"),c(fI,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraModel"),c(mI,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertModel"),c(gI,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetModel"),c(hI,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTModel"),c(pI,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelModel"),c(uI,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelBaseModel"),c(_I,"href","/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNModel"),c(bI,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Model"),c(vI,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(FI,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJModel"),c(TI,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertModel"),c(MI,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertModel"),c(EI,"href","/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(CI,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(wI,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(AI,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDModel"),c(yI,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerModel"),c(LI,"href","/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeModel"),c(xI,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertModel"),c($I,"href","/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Model"),c(kI,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianModel"),c(SI,"href","/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerModel"),c(RI,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartModel"),c(PI,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(BI,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertModel"),c(II,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetModel"),c(qI,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Model"),c(NI,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerModel"),c(jI,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(DI,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTModel"),c(GI,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusModel"),c(OI,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverModel"),c(VI,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartModel"),c(XI,"href","/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerModel"),c(zI,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(QI,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertModel"),c(WI,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerModel"),c(HI,"href","/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetModel"),c(UI,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertModel"),c(JI,"href","/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetModel"),c(YI,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertModel"),c(KI,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaModel"),c(ZI,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerModel"),c(eq,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerModel"),c(oq,"href","/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWModel"),c(rq,"href","/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDModel"),c(tq,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(aq,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterModel"),c(nq,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(sq,"href","/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinModel"),c(lq,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Model"),c(iq,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasModel"),c(dq,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(cq,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechModel"),c(fq,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(mq,"href","/docs/transformers/pr_17088/en/model_doc/van#transformers.VanModel"),c(gq,"href","/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltModel"),c(hq,"href","/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(pq,"href","/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertModel"),c(uq,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTModel"),c(_q,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(bq,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(vq,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMModel"),c(Fq,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMModel"),c(Tq,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMModel"),c(Mq,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Eq,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Cq,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(wq,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetModel"),c(Aq,"href","/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosModel"),c(yq,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ru,"id","transformers.AutoModelForPreTraining"),c(Ru,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ru,"href","#transformers.AutoModelForPreTraining"),c(wi,"class","relative group"),c(Lq,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xq,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($q,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kq,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Sq,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Rq,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForPreTraining"),c(Pq,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Bq,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Iq,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(qq,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Nq,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(jq,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Dq,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Gq,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Oq,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Vq,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Xq,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(zq,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Qq,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Wq,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Hq,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Uq,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Jq,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Yq,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Kq,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Zq,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(eN,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(oN,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertModel"),c(rN,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(tN,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(aN,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(nN,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(sN,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(lN,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(iN,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(dN,"href","/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(cN,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(fN,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(mN,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(gN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(hN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(pN,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M_,"id","transformers.AutoModelForCausalLM"),c(M_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M_,"href","#transformers.AutoModelForCausalLM"),c(Li,"class","relative group"),c(uN,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_N,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bN,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vN,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForCausalLM"),c(FN,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertLMHeadModel"),c(TN,"href","/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(MN,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(EN,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(CN,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(wN,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(AN,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(yN,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(LN,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(xN,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForCausalLM"),c($N,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(kN,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(SN,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(RN,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianForCausalLM"),c(PN,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForCausalLM"),c(BN,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(IN,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(qN,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTForCausalLM"),c(NN,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(jN,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(DN,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(GN,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(ON,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(VN,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(XN,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(zN,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(QN,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(WN,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(HN,"href","/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(UN,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(JN,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(YN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(KN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(ZN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(ej,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i1,"id","transformers.AutoModelForMaskedLM"),c(i1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i1,"href","#transformers.AutoModelForMaskedLM"),c(ki,"class","relative group"),c(oj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aj,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(nj,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(sj,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForMaskedLM"),c(lj,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(ij,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(dj,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(cj,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(fj,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(mj,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(gj,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(hj,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(pj,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(uj,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(_j,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(bj,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(vj,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Mj,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(wj,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(yj,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(xj,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c($j,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(kj,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Bj,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(qj,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W1,"id","transformers.AutoModelForSeq2SeqLM"),c(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Pi,"class","relative group"),c(Nj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gj,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Oj,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Vj,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Xj,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(zj,"href","/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Qj,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Wj,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Uj,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianMTModel"),c(Jj,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Yj,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Kj,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Zj,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(eD,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(oD,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(tD,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h8,"id","transformers.AutoModelForSequenceClassification"),c(h8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h8,"href","#transformers.AutoModelForSequenceClassification"),c(qi,"class","relative group"),c(aD,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nD,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sD,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lD,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(iD,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForSequenceClassification"),c(dD,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForSequenceClassification"),c(cD,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(fD,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(mD,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(gD,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(hD,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(pD,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(uD,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(bD,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c($D,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fb,"id","transformers.AutoModelForMultipleChoice"),c(fb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fb,"href","#transformers.AutoModelForMultipleChoice"),c(Di,"class","relative group"),c(eG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tG,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(aG,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForMultipleChoice"),c(nG,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(sG,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(lG,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(iG,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(dG,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(cG,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(fG,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(mG,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(gG,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(hG,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(pG,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(uG,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(_G,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(bG,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(vG,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(FG,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(TG,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(MG,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c($G,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xb,"id","transformers.AutoModelForNextSentencePrediction"),c(Xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Vi,"class","relative group"),c(SG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BG,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(IG,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(qG,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(NG,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(jG,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zb,"id","transformers.AutoModelForTokenClassification"),c(Zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zb,"href","#transformers.AutoModelForTokenClassification"),c(Qi,"class","relative group"),c(DG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VG,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(XG,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForTokenClassification"),c(zG,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(QG,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(WG,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForTokenClassification"),c(HG,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(UG,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(JG,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(YG,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(KG,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(ZG,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(eO,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(oO,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(rO,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(tO,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(aO,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(nO,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(sO,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(lO,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(iO,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(dO,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(cO,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(fO,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(mO,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(gO,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(hO,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(pO,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(uO,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(_O,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(bO,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(vO,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(FO,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(TO,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I2,"id","transformers.AutoModelForQuestionAnswering"),c(I2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I2,"href","#transformers.AutoModelForQuestionAnswering"),c(Ui,"class","relative group"),c(MO,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EO,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CO,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wO,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c($O,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(jO,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(sV,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(dV,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wv,"id","transformers.AutoModelForTableQuestionAnswering"),c(wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ki,"class","relative group"),c(cV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gV,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($v,"id","transformers.AutoModelForImageClassification"),c($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($v,"href","#transformers.AutoModelForImageClassification"),c(od,"class","relative group"),c(hV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_V,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitForImageClassification"),c(bV,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(vV,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(FV,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForImageClassification"),c(TV,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(MV,"href","/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(EV,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(CV,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(wV,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(AV,"href","/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(yV,"href","/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(LV,"href","/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(xV,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerForImageClassification"),c($V,"href","/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinForImageClassification"),c(kV,"href","/docs/transformers/pr_17088/en/model_doc/van#transformers.VanForImageClassification"),c(SV,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForVision2Seq"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForVision2Seq"),c(ad,"class","relative group"),c(RV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jv,"id","transformers.AutoModelForAudioClassification"),c(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jv,"href","#transformers.AutoModelForAudioClassification"),c(ld,"class","relative group"),c(qV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DV,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iF,"id","transformers.AutoModelForAudioFrameClassification"),c(iF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iF,"href","#transformers.AutoModelForAudioFrameClassification"),c(cd,"class","relative group"),c(HV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YV,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(KV,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(ZV,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(eX,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uF,"id","transformers.AutoModelForCTC"),c(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uF,"href","#transformers.AutoModelForCTC"),c(gd,"class","relative group"),c(oX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aX,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(nX,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertForCTC"),c(sX,"href","/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWForCTC"),c(lX,"href","/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDForCTC"),c(iX,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(dX,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(cX,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(fX,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(ud,"class","relative group"),c(mX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pX,"href","/docs/transformers/pr_17088/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(uX,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PF,"id","transformers.AutoModelForAudioXVector"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.AutoModelForAudioXVector"),c(vd,"class","relative group"),c(_X,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FX,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(TX,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(MX,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(EX,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OF,"id","transformers.AutoModelForMaskedImageModeling"),c(OF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Md,"class","relative group"),c(CX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yX,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(LX,"href","/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(xX,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForObjectDetection"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForObjectDetection"),c(Ad,"class","relative group"),c($X,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrForObjectDetection"),c(PX,"href","/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o0,"id","transformers.AutoModelForImageSegmentation"),c(o0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o0,"href","#transformers.AutoModelForImageSegmentation"),c(xd,"class","relative group"),c(BX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NX,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s0,"id","transformers.AutoModelForSemanticSegmentation"),c(s0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s0,"href","#transformers.AutoModelForSemanticSegmentation"),c(Sd,"class","relative group"),c(jX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OX,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(VX,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(XX,"href","/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(zX,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h0,"id","transformers.AutoModelForInstanceSegmentation"),c(h0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h0,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(QX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UX,"href","/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v0,"id","transformers.TFAutoModel"),c(v0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v0,"href","#transformers.TFAutoModel"),c(Nd,"class","relative group"),c(JX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZX,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertModel"),c(ez,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartModel"),c(oz,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertModel"),c(rz,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(tz,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(az,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertModel"),c(nz,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.TFCLIPModel"),c(sz,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertModel"),c(lz,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.TFConvNextModel"),c(iz,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLModel"),c(dz,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(cz,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaModel"),c(fz,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(mz,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(gz,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(hz,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraModel"),c(pz,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(uz,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelModel"),c(_z,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(bz,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2Model"),c(vz,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJModel"),c(Fz,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.TFHubertModel"),c(Tz,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Mz,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.TFLEDModel"),c(Ez,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerModel"),c(Cz,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.TFLxmertModel"),c(wz,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.TFMarianModel"),c(Az,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.TFMBartModel"),c(yz,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Lz,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetModel"),c(xz,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.TFMT5Model"),c($z,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(kz,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.TFOPTModel"),c(Sz,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Rz,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertModel"),c(Pz,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaModel"),c(Bz,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Iz,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(qz,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5Model"),c(Nz,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasModel"),c(jz,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Dz,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.TFViTModel"),c(Gz,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Oz,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Vz,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMModel"),c(Xz,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(zz,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.TFAutoModelForPreTraining"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.TFAutoModelForPreTraining"),c(Gd,"class","relative group"),c(Qz,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wz,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hz,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uz,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Jz,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Yz,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Kz,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Zz,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(eQ,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(oQ,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(rQ,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(tQ,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(aQ,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(nQ,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(sQ,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(lQ,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(iQ,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(dQ,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(cQ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(fQ,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(mQ,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(gQ,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(hQ,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(pQ,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(uQ,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(_Q,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jT,"id","transformers.TFAutoModelForCausalLM"),c(jT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jT,"href","#transformers.TFAutoModelForCausalLM"),c(Xd,"class","relative group"),c(bQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(MQ,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(EQ,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(CQ,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(wQ,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(AQ,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(yQ,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(LQ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(xQ,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c($Q,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(kQ,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(SQ,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e7,"id","transformers.TFAutoModelForImageClassification"),c(e7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e7,"href","#transformers.TFAutoModelForImageClassification"),c(Wd,"class","relative group"),c(RQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IQ,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(qQ,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(NQ,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s7,"id","transformers.TFAutoModelForMaskedLM"),c(s7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s7,"href","#transformers.TFAutoModelForMaskedLM"),c(Yd,"class","relative group"),c(jQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OQ,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(VQ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(YQ,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(eW,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(oW,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(rW,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(tW,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(aW,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(nW,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(sW,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(lW,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(x7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ec,"class","relative group"),c(iW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fW,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(mW,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(gW,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(hW,"href","/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(pW,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(uW,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.TFMarianMTModel"),c(_W,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(bW,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(vW,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(FW,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O7,"id","transformers.TFAutoModelForSequenceClassification"),c(O7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O7,"href","#transformers.TFAutoModelForSequenceClassification"),c(tc,"class","relative group"),c(TW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(wW,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(AW,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(yW,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(LW,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(xW,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c($W,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(kW,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(qW,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(DW,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(GW,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(OW,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(VW,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(XW,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(zW,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(QW,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(WW,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(HW,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(UW,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_M,"id","transformers.TFAutoModelForMultipleChoice"),c(_M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_M,"href","#transformers.TFAutoModelForMultipleChoice"),c(sc,"class","relative group"),c(JW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZW,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(eH,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(oH,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(rH,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(tH,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(aH,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(nH,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(sH,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(lH,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(iH,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(dH,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(cH,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(fH,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(mH,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(gH,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(hH,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(pH,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(qM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(dc,"class","relative group"),c(uH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_H,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vH,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(FH,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(OM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(mc,"class","relative group"),c(TH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CH,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QM,"id","transformers.TFAutoModelForTokenClassification"),c(QM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QM,"href","#transformers.TFAutoModelForTokenClassification"),c(pc,"class","relative group"),c(wH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LH,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(xH,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForTokenClassification"),c($H,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(kH,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(SH,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(RH,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(PH,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(BH,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(IH,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(qH,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(NH,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(jH,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(DH,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(GH,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(OH,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(VH,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(XH,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(zH,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(QH,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(WH,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.TFAutoModelForQuestionAnswering"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(bc,"class","relative group"),c(HH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YH,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(KH,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(ZH,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(eU,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(oU,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(rU,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(tU,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(aU,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(nU,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(sU,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(lU,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(iU,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(dU,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(cU,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(fU,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(mU,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(gU,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(hU,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(pU,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N4,"id","transformers.TFAutoModelForVision2Seq"),c(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N4,"href","#transformers.TFAutoModelForVision2Seq"),c(Tc,"class","relative group"),c(_U,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Cc,"class","relative group"),c(TU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CU,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q4,"id","transformers.FlaxAutoModel"),c(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q4,"href","#transformers.FlaxAutoModel"),c(yc,"class","relative group"),c(wU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LU,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertModel"),c(xU,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartModel"),c($U,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.FlaxBeitModel"),c(kU,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertModel"),c(SU,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(RU,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(PU,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(BU,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.FlaxCLIPModel"),c(IU,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(qU,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraModel"),c(NU,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(jU,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(DU,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(GU,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.FlaxMarianModel"),c(OU,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartModel"),c(VU,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5Model"),c(XU,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.FlaxOPTModel"),c(zU,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(QU,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(WU,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(HU,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5Model"),c(UU,"href","/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(JU,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.FlaxViTModel"),c(YU,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(KU,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(ZU,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TE,"id","transformers.FlaxAutoModelForCausalLM"),c(TE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TE,"href","#transformers.FlaxAutoModelForCausalLM"),c($c,"class","relative group"),c(eJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tJ,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(aJ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(nJ,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(sJ,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(lJ,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(iJ,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(dJ,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(cJ,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(fJ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(mJ,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PE,"id","transformers.FlaxAutoModelForPreTraining"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Rc,"class","relative group"),c(gJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uJ,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(_J,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(bJ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(vJ,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(FJ,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(TJ,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MJ,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(EJ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(CJ,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(wJ,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(AJ,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(yJ,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UE,"id","transformers.FlaxAutoModelForMaskedLM"),c(UE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Ic,"class","relative group"),c(LJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($J,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kJ,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(SJ,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(RJ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(PJ,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(BJ,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(IJ,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(qJ,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(NJ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(jJ,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(DJ,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(i5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(jc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(zJ,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(QJ,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(WJ,"href","/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(HJ,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(UJ,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(JJ,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(YJ,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(KJ,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(F5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Oc,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(tY,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(aY,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(nY,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(sY,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(lY,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(iY,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(dY,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(cY,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(fY,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(zc,"class","relative group"),c(mY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(uY,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(_Y,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(bY,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(vY,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(FY,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(TY,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(MY,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(EY,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(CY,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q5,"id","transformers.FlaxAutoModelForTokenClassification"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Hc,"class","relative group"),c(wY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LY,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(xY,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c($Y,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(kY,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(SY,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(RY,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(PY,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(BY,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Yc,"class","relative group"),c(IY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(DY,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(GY,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(OY,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(VY,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(XY,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(zY,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(QY,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(hC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(ef,"class","relative group"),c(WY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JY,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bC,"id","transformers.FlaxAutoModelForImageClassification"),c(bC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bC,"href","#transformers.FlaxAutoModelForImageClassification"),c(tf,"class","relative group"),c(YY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(oK,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.FlaxAutoModelForVision2Seq"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(sf,"class","relative group"),c(rK,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ii),b(f,gf,_),b(f,et,_),e(et,di),e(et,ci),e(ci,zw),e(et,hf),b(f,Ne,_),b(f,Xe,_),e(Xe,fi),e(Xe,An),e(An,Qw),e(Xe,yn),e(Xe,Ln),e(Ln,Ww),e(Xe,mi),e(Xe,xn),e(xn,Hw),e(Xe,gi),b(f,pf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,g$),e(Ae,hi),e(hi,h$),e(Ae,p$),b(f,Eo,_),b(f,Ea,_),e(Ea,u$),e(Ea,uf),e(uf,_$),e(Ea,Wje),b(f,IBe,_),b(f,pi,_),e(pi,_f),e(_f,ZZ),M(Uw,ZZ,null),e(pi,Hje),e(pi,eee),e(eee,Uje),b(f,qBe,_),b(f,$n,_),e($n,Jje),e($n,oee),e(oee,Yje),e($n,Kje),e($n,ree),e(ree,Zje),e($n,eDe),b(f,NBe,_),M(Jw,f,_),b(f,jBe,_),b(f,b$,_),e(b$,oDe),b(f,DBe,_),M(bf,f,_),b(f,GBe,_),b(f,ui,_),e(ui,vf),e(vf,tee),M(Yw,tee,null),e(ui,rDe),e(ui,aee),e(aee,tDe),b(f,OBe,_),b(f,Co,_),M(Kw,Co,null),e(Co,aDe),e(Co,Zw),e(Zw,nDe),e(Zw,v$),e(v$,sDe),e(Zw,lDe),e(Co,iDe),e(Co,eA),e(eA,dDe),e(eA,nee),e(nee,cDe),e(eA,fDe),e(Co,mDe),e(Co,Er),M(oA,Er,null),e(Er,gDe),e(Er,see),e(see,hDe),e(Er,pDe),e(Er,_i),e(_i,uDe),e(_i,lee),e(lee,_De),e(_i,bDe),e(_i,iee),e(iee,vDe),e(_i,FDe),e(Er,TDe),e(Er,y),e(y,Ff),e(Ff,dee),e(dee,MDe),e(Ff,EDe),e(Ff,F$),e(F$,CDe),e(Ff,wDe),e(y,ADe),e(y,Tf),e(Tf,cee),e(cee,yDe),e(Tf,LDe),e(Tf,T$),e(T$,xDe),e(Tf,$De),e(y,kDe),e(y,Mf),e(Mf,fee),e(fee,SDe),e(Mf,RDe),e(Mf,M$),e(M$,PDe),e(Mf,BDe),e(y,IDe),e(y,Ef),e(Ef,mee),e(mee,qDe),e(Ef,NDe),e(Ef,E$),e(E$,jDe),e(Ef,DDe),e(y,GDe),e(y,Cf),e(Cf,gee),e(gee,ODe),e(Cf,VDe),e(Cf,C$),e(C$,XDe),e(Cf,zDe),e(y,QDe),e(y,wf),e(wf,hee),e(hee,WDe),e(wf,HDe),e(wf,w$),e(w$,UDe),e(wf,JDe),e(y,YDe),e(y,Af),e(Af,pee),e(pee,KDe),e(Af,ZDe),e(Af,A$),e(A$,eGe),e(Af,oGe),e(y,rGe),e(y,yf),e(yf,uee),e(uee,tGe),e(yf,aGe),e(yf,y$),e(y$,nGe),e(yf,sGe),e(y,lGe),e(y,Lf),e(Lf,_ee),e(_ee,iGe),e(Lf,dGe),e(Lf,L$),e(L$,cGe),e(Lf,fGe),e(y,mGe),e(y,xf),e(xf,bee),e(bee,gGe),e(xf,hGe),e(xf,x$),e(x$,pGe),e(xf,uGe),e(y,_Ge),e(y,$f),e($f,vee),e(vee,bGe),e($f,vGe),e($f,$$),e($$,FGe),e($f,TGe),e(y,MGe),e(y,kf),e(kf,Fee),e(Fee,EGe),e(kf,CGe),e(kf,k$),e(k$,wGe),e(kf,AGe),e(y,yGe),e(y,Sf),e(Sf,Tee),e(Tee,LGe),e(Sf,xGe),e(Sf,S$),e(S$,$Ge),e(Sf,kGe),e(y,SGe),e(y,Rf),e(Rf,Mee),e(Mee,RGe),e(Rf,PGe),e(Rf,R$),e(R$,BGe),e(Rf,IGe),e(y,qGe),e(y,Pf),e(Pf,Eee),e(Eee,NGe),e(Pf,jGe),e(Pf,P$),e(P$,DGe),e(Pf,GGe),e(y,OGe),e(y,Bf),e(Bf,Cee),e(Cee,VGe),e(Bf,XGe),e(Bf,B$),e(B$,zGe),e(Bf,QGe),e(y,WGe),e(y,If),e(If,wee),e(wee,HGe),e(If,UGe),e(If,I$),e(I$,JGe),e(If,YGe),e(y,KGe),e(y,qf),e(qf,Aee),e(Aee,ZGe),e(qf,eOe),e(qf,q$),e(q$,oOe),e(qf,rOe),e(y,tOe),e(y,Nf),e(Nf,yee),e(yee,aOe),e(Nf,nOe),e(Nf,N$),e(N$,sOe),e(Nf,lOe),e(y,iOe),e(y,jf),e(jf,Lee),e(Lee,dOe),e(jf,cOe),e(jf,j$),e(j$,fOe),e(jf,mOe),e(y,gOe),e(y,Df),e(Df,xee),e(xee,hOe),e(Df,pOe),e(Df,D$),e(D$,uOe),e(Df,_Oe),e(y,bOe),e(y,Gf),e(Gf,$ee),e($ee,vOe),e(Gf,FOe),e(Gf,G$),e(G$,TOe),e(Gf,MOe),e(y,EOe),e(y,Of),e(Of,kee),e(kee,COe),e(Of,wOe),e(Of,O$),e(O$,AOe),e(Of,yOe),e(y,LOe),e(y,Vf),e(Vf,See),e(See,xOe),e(Vf,$Oe),e(Vf,V$),e(V$,kOe),e(Vf,SOe),e(y,ROe),e(y,Xf),e(Xf,Ree),e(Ree,POe),e(Xf,BOe),e(Xf,X$),e(X$,IOe),e(Xf,qOe),e(y,NOe),e(y,zf),e(zf,Pee),e(Pee,jOe),e(zf,DOe),e(zf,z$),e(z$,GOe),e(zf,OOe),e(y,VOe),e(y,Qf),e(Qf,Bee),e(Bee,XOe),e(Qf,zOe),e(Qf,Q$),e(Q$,QOe),e(Qf,WOe),e(y,HOe),e(y,Wf),e(Wf,Iee),e(Iee,UOe),e(Wf,JOe),e(Wf,W$),e(W$,YOe),e(Wf,KOe),e(y,ZOe),e(y,Hf),e(Hf,qee),e(qee,eVe),e(Hf,oVe),e(Hf,H$),e(H$,rVe),e(Hf,tVe),e(y,aVe),e(y,Uf),e(Uf,Nee),e(Nee,nVe),e(Uf,sVe),e(Uf,U$),e(U$,lVe),e(Uf,iVe),e(y,dVe),e(y,Jf),e(Jf,jee),e(jee,cVe),e(Jf,fVe),e(Jf,J$),e(J$,mVe),e(Jf,gVe),e(y,hVe),e(y,Yf),e(Yf,Dee),e(Dee,pVe),e(Yf,uVe),e(Yf,Y$),e(Y$,_Ve),e(Yf,bVe),e(y,vVe),e(y,Kf),e(Kf,Gee),e(Gee,FVe),e(Kf,TVe),e(Kf,K$),e(K$,MVe),e(Kf,EVe),e(y,CVe),e(y,Zf),e(Zf,Oee),e(Oee,wVe),e(Zf,AVe),e(Zf,Z$),e(Z$,yVe),e(Zf,LVe),e(y,xVe),e(y,em),e(em,Vee),e(Vee,$Ve),e(em,kVe),e(em,ek),e(ek,SVe),e(em,RVe),e(y,PVe),e(y,om),e(om,Xee),e(Xee,BVe),e(om,IVe),e(om,ok),e(ok,qVe),e(om,NVe),e(y,jVe),e(y,rm),e(rm,zee),e(zee,DVe),e(rm,GVe),e(rm,rk),e(rk,OVe),e(rm,VVe),e(y,XVe),e(y,tm),e(tm,Qee),e(Qee,zVe),e(tm,QVe),e(tm,tk),e(tk,WVe),e(tm,HVe),e(y,UVe),e(y,am),e(am,Wee),e(Wee,JVe),e(am,YVe),e(am,ak),e(ak,KVe),e(am,ZVe),e(y,eXe),e(y,nm),e(nm,Hee),e(Hee,oXe),e(nm,rXe),e(nm,nk),e(nk,tXe),e(nm,aXe),e(y,nXe),e(y,sm),e(sm,Uee),e(Uee,sXe),e(sm,lXe),e(sm,sk),e(sk,iXe),e(sm,dXe),e(y,cXe),e(y,lm),e(lm,Jee),e(Jee,fXe),e(lm,mXe),e(lm,lk),e(lk,gXe),e(lm,hXe),e(y,pXe),e(y,im),e(im,Yee),e(Yee,uXe),e(im,_Xe),e(im,ik),e(ik,bXe),e(im,vXe),e(y,FXe),e(y,dm),e(dm,Kee),e(Kee,TXe),e(dm,MXe),e(dm,dk),e(dk,EXe),e(dm,CXe),e(y,wXe),e(y,cm),e(cm,Zee),e(Zee,AXe),e(cm,yXe),e(cm,ck),e(ck,LXe),e(cm,xXe),e(y,$Xe),e(y,fm),e(fm,eoe),e(eoe,kXe),e(fm,SXe),e(fm,fk),e(fk,RXe),e(fm,PXe),e(y,BXe),e(y,mm),e(mm,ooe),e(ooe,IXe),e(mm,qXe),e(mm,mk),e(mk,NXe),e(mm,jXe),e(y,DXe),e(y,gm),e(gm,roe),e(roe,GXe),e(gm,OXe),e(gm,gk),e(gk,VXe),e(gm,XXe),e(y,zXe),e(y,hm),e(hm,toe),e(toe,QXe),e(hm,WXe),e(hm,hk),e(hk,HXe),e(hm,UXe),e(y,JXe),e(y,pm),e(pm,aoe),e(aoe,YXe),e(pm,KXe),e(pm,pk),e(pk,ZXe),e(pm,eze),e(y,oze),e(y,um),e(um,noe),e(noe,rze),e(um,tze),e(um,uk),e(uk,aze),e(um,nze),e(y,sze),e(y,_m),e(_m,soe),e(soe,lze),e(_m,ize),e(_m,_k),e(_k,dze),e(_m,cze),e(y,fze),e(y,bm),e(bm,loe),e(loe,mze),e(bm,gze),e(bm,bk),e(bk,hze),e(bm,pze),e(y,uze),e(y,vm),e(vm,ioe),e(ioe,_ze),e(vm,bze),e(vm,vk),e(vk,vze),e(vm,Fze),e(y,Tze),e(y,Fm),e(Fm,doe),e(doe,Mze),e(Fm,Eze),e(Fm,Fk),e(Fk,Cze),e(Fm,wze),e(y,Aze),e(y,Tm),e(Tm,coe),e(coe,yze),e(Tm,Lze),e(Tm,Tk),e(Tk,xze),e(Tm,$ze),e(y,kze),e(y,Mm),e(Mm,foe),e(foe,Sze),e(Mm,Rze),e(Mm,Mk),e(Mk,Pze),e(Mm,Bze),e(y,Ize),e(y,Em),e(Em,moe),e(moe,qze),e(Em,Nze),e(Em,Ek),e(Ek,jze),e(Em,Dze),e(y,Gze),e(y,Cm),e(Cm,goe),e(goe,Oze),e(Cm,Vze),e(Cm,Ck),e(Ck,Xze),e(Cm,zze),e(y,Qze),e(y,wm),e(wm,hoe),e(hoe,Wze),e(wm,Hze),e(wm,wk),e(wk,Uze),e(wm,Jze),e(y,Yze),e(y,Am),e(Am,poe),e(poe,Kze),e(Am,Zze),e(Am,Ak),e(Ak,eQe),e(Am,oQe),e(y,rQe),e(y,ym),e(ym,uoe),e(uoe,tQe),e(ym,aQe),e(ym,yk),e(yk,nQe),e(ym,sQe),e(y,lQe),e(y,Lm),e(Lm,_oe),e(_oe,iQe),e(Lm,dQe),e(Lm,Lk),e(Lk,cQe),e(Lm,fQe),e(y,mQe),e(y,xm),e(xm,boe),e(boe,gQe),e(xm,hQe),e(xm,xk),e(xk,pQe),e(xm,uQe),e(y,_Qe),e(y,$m),e($m,voe),e(voe,bQe),e($m,vQe),e($m,$k),e($k,FQe),e($m,TQe),e(y,MQe),e(y,km),e(km,Foe),e(Foe,EQe),e(km,CQe),e(km,kk),e(kk,wQe),e(km,AQe),e(y,yQe),e(y,Sm),e(Sm,Toe),e(Toe,LQe),e(Sm,xQe),e(Sm,Sk),e(Sk,$Qe),e(Sm,kQe),e(y,SQe),e(y,Rm),e(Rm,Moe),e(Moe,RQe),e(Rm,PQe),e(Rm,Rk),e(Rk,BQe),e(Rm,IQe),e(y,qQe),e(y,Pm),e(Pm,Eoe),e(Eoe,NQe),e(Pm,jQe),e(Pm,Pk),e(Pk,DQe),e(Pm,GQe),e(y,OQe),e(y,Bm),e(Bm,Coe),e(Coe,VQe),e(Bm,XQe),e(Bm,Bk),e(Bk,zQe),e(Bm,QQe),e(y,WQe),e(y,Im),e(Im,woe),e(woe,HQe),e(Im,UQe),e(Im,Ik),e(Ik,JQe),e(Im,YQe),e(y,KQe),e(y,qm),e(qm,Aoe),e(Aoe,ZQe),e(qm,eWe),e(qm,qk),e(qk,oWe),e(qm,rWe),e(y,tWe),e(y,Nm),e(Nm,yoe),e(yoe,aWe),e(Nm,nWe),e(Nm,Nk),e(Nk,sWe),e(Nm,lWe),e(y,iWe),e(y,jm),e(jm,Loe),e(Loe,dWe),e(jm,cWe),e(jm,jk),e(jk,fWe),e(jm,mWe),e(y,gWe),e(y,Dm),e(Dm,xoe),e(xoe,hWe),e(Dm,pWe),e(Dm,Dk),e(Dk,uWe),e(Dm,_We),e(y,bWe),e(y,Gm),e(Gm,$oe),e($oe,vWe),e(Gm,FWe),e(Gm,Gk),e(Gk,TWe),e(Gm,MWe),e(y,EWe),e(y,Om),e(Om,koe),e(koe,CWe),e(Om,wWe),e(Om,Ok),e(Ok,AWe),e(Om,yWe),e(y,LWe),e(y,Vm),e(Vm,Soe),e(Soe,xWe),e(Vm,$We),e(Vm,Vk),e(Vk,kWe),e(Vm,SWe),e(y,RWe),e(y,Xm),e(Xm,Roe),e(Roe,PWe),e(Xm,BWe),e(Xm,Xk),e(Xk,IWe),e(Xm,qWe),e(y,NWe),e(y,zm),e(zm,Poe),e(Poe,jWe),e(zm,DWe),e(zm,zk),e(zk,GWe),e(zm,OWe),e(y,VWe),e(y,Qm),e(Qm,Boe),e(Boe,XWe),e(Qm,zWe),e(Qm,Qk),e(Qk,QWe),e(Qm,WWe),e(y,HWe),e(y,Wm),e(Wm,Ioe),e(Ioe,UWe),e(Wm,JWe),e(Wm,Wk),e(Wk,YWe),e(Wm,KWe),e(y,ZWe),e(y,Hm),e(Hm,qoe),e(qoe,eHe),e(Hm,oHe),e(Hm,Hk),e(Hk,rHe),e(Hm,tHe),e(y,aHe),e(y,Um),e(Um,Noe),e(Noe,nHe),e(Um,sHe),e(Um,Uk),e(Uk,lHe),e(Um,iHe),e(y,dHe),e(y,Jm),e(Jm,joe),e(joe,cHe),e(Jm,fHe),e(Jm,Jk),e(Jk,mHe),e(Jm,gHe),e(y,hHe),e(y,Ym),e(Ym,Doe),e(Doe,pHe),e(Ym,uHe),e(Ym,Yk),e(Yk,_He),e(Ym,bHe),e(y,vHe),e(y,Km),e(Km,Goe),e(Goe,FHe),e(Km,THe),e(Km,Kk),e(Kk,MHe),e(Km,EHe),e(y,CHe),e(y,Zm),e(Zm,Ooe),e(Ooe,wHe),e(Zm,AHe),e(Zm,Zk),e(Zk,yHe),e(Zm,LHe),e(y,xHe),e(y,eg),e(eg,Voe),e(Voe,$He),e(eg,kHe),e(eg,eS),e(eS,SHe),e(eg,RHe),e(y,PHe),e(y,og),e(og,Xoe),e(Xoe,BHe),e(og,IHe),e(og,oS),e(oS,qHe),e(og,NHe),e(y,jHe),e(y,rg),e(rg,zoe),e(zoe,DHe),e(rg,GHe),e(rg,rS),e(rS,OHe),e(rg,VHe),e(y,XHe),e(y,tg),e(tg,Qoe),e(Qoe,zHe),e(tg,QHe),e(tg,tS),e(tS,WHe),e(tg,HHe),e(y,UHe),e(y,ag),e(ag,Woe),e(Woe,JHe),e(ag,YHe),e(ag,aS),e(aS,KHe),e(ag,ZHe),e(y,eUe),e(y,ng),e(ng,Hoe),e(Hoe,oUe),e(ng,rUe),e(ng,nS),e(nS,tUe),e(ng,aUe),e(y,nUe),e(y,sg),e(sg,Uoe),e(Uoe,sUe),e(sg,lUe),e(sg,sS),e(sS,iUe),e(sg,dUe),e(y,cUe),e(y,lg),e(lg,Joe),e(Joe,fUe),e(lg,mUe),e(lg,lS),e(lS,gUe),e(lg,hUe),e(y,pUe),e(y,ig),e(ig,Yoe),e(Yoe,uUe),e(ig,_Ue),e(ig,iS),e(iS,bUe),e(ig,vUe),e(y,FUe),e(y,dg),e(dg,Koe),e(Koe,TUe),e(dg,MUe),e(dg,dS),e(dS,EUe),e(dg,CUe),e(y,wUe),e(y,cg),e(cg,Zoe),e(Zoe,AUe),e(cg,yUe),e(cg,cS),e(cS,LUe),e(cg,xUe),e(y,$Ue),e(y,fg),e(fg,ere),e(ere,kUe),e(fg,SUe),e(fg,fS),e(fS,RUe),e(fg,PUe),e(y,BUe),e(y,mg),e(mg,ore),e(ore,IUe),e(mg,qUe),e(mg,mS),e(mS,NUe),e(mg,jUe),e(y,DUe),e(y,gg),e(gg,rre),e(rre,GUe),e(gg,OUe),e(gg,gS),e(gS,VUe),e(gg,XUe),e(y,zUe),e(y,hg),e(hg,tre),e(tre,QUe),e(hg,WUe),e(hg,hS),e(hS,HUe),e(hg,UUe),e(y,JUe),e(y,pg),e(pg,are),e(are,YUe),e(pg,KUe),e(pg,pS),e(pS,ZUe),e(pg,eJe),e(Er,oJe),M(ug,Er,null),e(Co,rJe),e(Co,_g),M(rA,_g,null),e(_g,tJe),e(_g,nre),e(nre,aJe),b(f,VBe,_),b(f,bi,_),e(bi,bg),e(bg,sre),M(tA,sre,null),e(bi,nJe),e(bi,lre),e(lre,sJe),b(f,XBe,_),b(f,wo,_),M(aA,wo,null),e(wo,lJe),e(wo,nA),e(nA,iJe),e(nA,uS),e(uS,dJe),e(nA,cJe),e(wo,fJe),e(wo,sA),e(sA,mJe),e(sA,ire),e(ire,gJe),e(sA,hJe),e(wo,pJe),e(wo,Cr),M(lA,Cr,null),e(Cr,uJe),e(Cr,dre),e(dre,_Je),e(Cr,bJe),e(Cr,Ca),e(Ca,vJe),e(Ca,cre),e(cre,FJe),e(Ca,TJe),e(Ca,fre),e(fre,MJe),e(Ca,EJe),e(Ca,mre),e(mre,CJe),e(Ca,wJe),e(Cr,AJe),e(Cr,k),e(k,kn),e(kn,gre),e(gre,yJe),e(kn,LJe),e(kn,_S),e(_S,xJe),e(kn,$Je),e(kn,bS),e(bS,kJe),e(kn,SJe),e(k,RJe),e(k,Sn),e(Sn,hre),e(hre,PJe),e(Sn,BJe),e(Sn,vS),e(vS,IJe),e(Sn,qJe),e(Sn,FS),e(FS,NJe),e(Sn,jJe),e(k,DJe),e(k,Rn),e(Rn,pre),e(pre,GJe),e(Rn,OJe),e(Rn,TS),e(TS,VJe),e(Rn,XJe),e(Rn,MS),e(MS,zJe),e(Rn,QJe),e(k,WJe),e(k,vg),e(vg,ure),e(ure,HJe),e(vg,UJe),e(vg,ES),e(ES,JJe),e(vg,YJe),e(k,KJe),e(k,Pn),e(Pn,_re),e(_re,ZJe),e(Pn,eYe),e(Pn,CS),e(CS,oYe),e(Pn,rYe),e(Pn,wS),e(wS,tYe),e(Pn,aYe),e(k,nYe),e(k,Fg),e(Fg,bre),e(bre,sYe),e(Fg,lYe),e(Fg,AS),e(AS,iYe),e(Fg,dYe),e(k,cYe),e(k,Tg),e(Tg,vre),e(vre,fYe),e(Tg,mYe),e(Tg,yS),e(yS,gYe),e(Tg,hYe),e(k,pYe),e(k,Mg),e(Mg,Fre),e(Fre,uYe),e(Mg,_Ye),e(Mg,LS),e(LS,bYe),e(Mg,vYe),e(k,FYe),e(k,Bn),e(Bn,Tre),e(Tre,TYe),e(Bn,MYe),e(Bn,xS),e(xS,EYe),e(Bn,CYe),e(Bn,$S),e($S,wYe),e(Bn,AYe),e(k,yYe),e(k,In),e(In,Mre),e(Mre,LYe),e(In,xYe),e(In,kS),e(kS,$Ye),e(In,kYe),e(In,SS),e(SS,SYe),e(In,RYe),e(k,PYe),e(k,qn),e(qn,Ere),e(Ere,BYe),e(qn,IYe),e(qn,RS),e(RS,qYe),e(qn,NYe),e(qn,PS),e(PS,jYe),e(qn,DYe),e(k,GYe),e(k,Eg),e(Eg,Cre),e(Cre,OYe),e(Eg,VYe),e(Eg,BS),e(BS,XYe),e(Eg,zYe),e(k,QYe),e(k,Cg),e(Cg,wre),e(wre,WYe),e(Cg,HYe),e(Cg,IS),e(IS,UYe),e(Cg,JYe),e(k,YYe),e(k,Nn),e(Nn,Are),e(Are,KYe),e(Nn,ZYe),e(Nn,qS),e(qS,eKe),e(Nn,oKe),e(Nn,NS),e(NS,rKe),e(Nn,tKe),e(k,aKe),e(k,wg),e(wg,yre),e(yre,nKe),e(wg,sKe),e(wg,jS),e(jS,lKe),e(wg,iKe),e(k,dKe),e(k,jn),e(jn,Lre),e(Lre,cKe),e(jn,fKe),e(jn,DS),e(DS,mKe),e(jn,gKe),e(jn,GS),e(GS,hKe),e(jn,pKe),e(k,uKe),e(k,Dn),e(Dn,xre),e(xre,_Ke),e(Dn,bKe),e(Dn,OS),e(OS,vKe),e(Dn,FKe),e(Dn,VS),e(VS,TKe),e(Dn,MKe),e(k,EKe),e(k,Gn),e(Gn,$re),e($re,CKe),e(Gn,wKe),e(Gn,XS),e(XS,AKe),e(Gn,yKe),e(Gn,zS),e(zS,LKe),e(Gn,xKe),e(k,$Ke),e(k,Ag),e(Ag,kre),e(kre,kKe),e(Ag,SKe),e(Ag,QS),e(QS,RKe),e(Ag,PKe),e(k,BKe),e(k,On),e(On,Sre),e(Sre,IKe),e(On,qKe),e(On,WS),e(WS,NKe),e(On,jKe),e(On,HS),e(HS,DKe),e(On,GKe),e(k,OKe),e(k,Vn),e(Vn,Rre),e(Rre,VKe),e(Vn,XKe),e(Vn,US),e(US,zKe),e(Vn,QKe),e(Vn,JS),e(JS,WKe),e(Vn,HKe),e(k,UKe),e(k,Xn),e(Xn,Pre),e(Pre,JKe),e(Xn,YKe),e(Xn,YS),e(YS,KKe),e(Xn,ZKe),e(Xn,KS),e(KS,eZe),e(Xn,oZe),e(k,rZe),e(k,zn),e(zn,Bre),e(Bre,tZe),e(zn,aZe),e(zn,ZS),e(ZS,nZe),e(zn,sZe),e(zn,eR),e(eR,lZe),e(zn,iZe),e(k,dZe),e(k,Qn),e(Qn,Ire),e(Ire,cZe),e(Qn,fZe),e(Qn,oR),e(oR,mZe),e(Qn,gZe),e(Qn,rR),e(rR,hZe),e(Qn,pZe),e(k,uZe),e(k,Wn),e(Wn,qre),e(qre,_Ze),e(Wn,bZe),e(Wn,tR),e(tR,vZe),e(Wn,FZe),e(Wn,aR),e(aR,TZe),e(Wn,MZe),e(k,EZe),e(k,yg),e(yg,Nre),e(Nre,CZe),e(yg,wZe),e(yg,nR),e(nR,AZe),e(yg,yZe),e(k,LZe),e(k,Hn),e(Hn,jre),e(jre,xZe),e(Hn,$Ze),e(Hn,sR),e(sR,kZe),e(Hn,SZe),e(Hn,lR),e(lR,RZe),e(Hn,PZe),e(k,BZe),e(k,Lg),e(Lg,Dre),e(Dre,IZe),e(Lg,qZe),e(Lg,iR),e(iR,NZe),e(Lg,jZe),e(k,DZe),e(k,Un),e(Un,Gre),e(Gre,GZe),e(Un,OZe),e(Un,dR),e(dR,VZe),e(Un,XZe),e(Un,cR),e(cR,zZe),e(Un,QZe),e(k,WZe),e(k,Jn),e(Jn,Ore),e(Ore,HZe),e(Jn,UZe),e(Jn,fR),e(fR,JZe),e(Jn,YZe),e(Jn,mR),e(mR,KZe),e(Jn,ZZe),e(k,eeo),e(k,Yn),e(Yn,Vre),e(Vre,oeo),e(Yn,reo),e(Yn,gR),e(gR,teo),e(Yn,aeo),e(Yn,hR),e(hR,neo),e(Yn,seo),e(k,leo),e(k,Kn),e(Kn,Xre),e(Xre,ieo),e(Kn,deo),e(Kn,pR),e(pR,ceo),e(Kn,feo),e(Kn,uR),e(uR,meo),e(Kn,geo),e(k,heo),e(k,Zn),e(Zn,zre),e(zre,peo),e(Zn,ueo),e(Zn,_R),e(_R,_eo),e(Zn,beo),e(Zn,bR),e(bR,veo),e(Zn,Feo),e(k,Teo),e(k,xg),e(xg,Qre),e(Qre,Meo),e(xg,Eeo),e(xg,vR),e(vR,Ceo),e(xg,weo),e(k,Aeo),e(k,es),e(es,Wre),e(Wre,yeo),e(es,Leo),e(es,FR),e(FR,xeo),e(es,$eo),e(es,TR),e(TR,keo),e(es,Seo),e(k,Reo),e(k,os),e(os,Hre),e(Hre,Peo),e(os,Beo),e(os,MR),e(MR,Ieo),e(os,qeo),e(os,ER),e(ER,Neo),e(os,jeo),e(k,Deo),e(k,rs),e(rs,Ure),e(Ure,Geo),e(rs,Oeo),e(rs,CR),e(CR,Veo),e(rs,Xeo),e(rs,wR),e(wR,zeo),e(rs,Qeo),e(k,Weo),e(k,ts),e(ts,Jre),e(Jre,Heo),e(ts,Ueo),e(ts,AR),e(AR,Jeo),e(ts,Yeo),e(ts,yR),e(yR,Keo),e(ts,Zeo),e(k,eoo),e(k,as),e(as,Yre),e(Yre,ooo),e(as,roo),e(as,LR),e(LR,too),e(as,aoo),e(as,xR),e(xR,noo),e(as,soo),e(k,loo),e(k,ns),e(ns,Kre),e(Kre,ioo),e(ns,doo),e(ns,$R),e($R,coo),e(ns,foo),e(ns,kR),e(kR,moo),e(ns,goo),e(k,hoo),e(k,$g),e($g,Zre),e(Zre,poo),e($g,uoo),e($g,SR),e(SR,_oo),e($g,boo),e(k,voo),e(k,ss),e(ss,ete),e(ete,Foo),e(ss,Too),e(ss,RR),e(RR,Moo),e(ss,Eoo),e(ss,PR),e(PR,Coo),e(ss,woo),e(k,Aoo),e(k,kg),e(kg,ote),e(ote,yoo),e(kg,Loo),e(kg,BR),e(BR,xoo),e(kg,$oo),e(k,koo),e(k,Sg),e(Sg,rte),e(rte,Soo),e(Sg,Roo),e(Sg,IR),e(IR,Poo),e(Sg,Boo),e(k,Ioo),e(k,ls),e(ls,tte),e(tte,qoo),e(ls,Noo),e(ls,qR),e(qR,joo),e(ls,Doo),e(ls,NR),e(NR,Goo),e(ls,Ooo),e(k,Voo),e(k,is),e(is,ate),e(ate,Xoo),e(is,zoo),e(is,jR),e(jR,Qoo),e(is,Woo),e(is,DR),e(DR,Hoo),e(is,Uoo),e(k,Joo),e(k,ds),e(ds,nte),e(nte,Yoo),e(ds,Koo),e(ds,GR),e(GR,Zoo),e(ds,ero),e(ds,OR),e(OR,oro),e(ds,rro),e(k,tro),e(k,Rg),e(Rg,ste),e(ste,aro),e(Rg,nro),e(Rg,VR),e(VR,sro),e(Rg,lro),e(k,iro),e(k,cs),e(cs,lte),e(lte,dro),e(cs,cro),e(cs,XR),e(XR,fro),e(cs,mro),e(cs,zR),e(zR,gro),e(cs,hro),e(k,pro),e(k,fs),e(fs,ite),e(ite,uro),e(fs,_ro),e(fs,QR),e(QR,bro),e(fs,vro),e(fs,WR),e(WR,Fro),e(fs,Tro),e(k,Mro),e(k,ms),e(ms,dte),e(dte,Ero),e(ms,Cro),e(ms,HR),e(HR,wro),e(ms,Aro),e(ms,UR),e(UR,yro),e(ms,Lro),e(k,xro),e(k,gs),e(gs,cte),e(cte,$ro),e(gs,kro),e(gs,JR),e(JR,Sro),e(gs,Rro),e(gs,YR),e(YR,Pro),e(gs,Bro),e(k,Iro),e(k,hs),e(hs,fte),e(fte,qro),e(hs,Nro),e(hs,KR),e(KR,jro),e(hs,Dro),e(hs,ZR),e(ZR,Gro),e(hs,Oro),e(k,Vro),e(k,ps),e(ps,mte),e(mte,Xro),e(ps,zro),e(ps,eP),e(eP,Qro),e(ps,Wro),e(ps,oP),e(oP,Hro),e(ps,Uro),e(k,Jro),e(k,us),e(us,gte),e(gte,Yro),e(us,Kro),e(us,rP),e(rP,Zro),e(us,eto),e(us,tP),e(tP,oto),e(us,rto),e(k,tto),e(k,Pg),e(Pg,hte),e(hte,ato),e(Pg,nto),e(Pg,aP),e(aP,sto),e(Pg,lto),e(k,ito),e(k,Bg),e(Bg,pte),e(pte,dto),e(Bg,cto),e(Bg,nP),e(nP,fto),e(Bg,mto),e(k,gto),e(k,Ig),e(Ig,ute),e(ute,hto),e(Ig,pto),e(Ig,sP),e(sP,uto),e(Ig,_to),e(k,bto),e(k,qg),e(qg,_te),e(_te,vto),e(qg,Fto),e(qg,lP),e(lP,Tto),e(qg,Mto),e(k,Eto),e(k,_s),e(_s,bte),e(bte,Cto),e(_s,wto),e(_s,iP),e(iP,Ato),e(_s,yto),e(_s,dP),e(dP,Lto),e(_s,xto),e(k,$to),e(k,Ng),e(Ng,vte),e(vte,kto),e(Ng,Sto),e(Ng,cP),e(cP,Rto),e(Ng,Pto),e(k,Bto),e(k,bs),e(bs,Fte),e(Fte,Ito),e(bs,qto),e(bs,fP),e(fP,Nto),e(bs,jto),e(bs,mP),e(mP,Dto),e(bs,Gto),e(k,Oto),e(k,vs),e(vs,Tte),e(Tte,Vto),e(vs,Xto),e(vs,gP),e(gP,zto),e(vs,Qto),e(vs,hP),e(hP,Wto),e(vs,Hto),e(k,Uto),e(k,Fs),e(Fs,Mte),e(Mte,Jto),e(Fs,Yto),e(Fs,pP),e(pP,Kto),e(Fs,Zto),e(Fs,uP),e(uP,eao),e(Fs,oao),e(k,rao),e(k,Ts),e(Ts,Ete),e(Ete,tao),e(Ts,aao),e(Ts,_P),e(_P,nao),e(Ts,sao),e(Ts,bP),e(bP,lao),e(Ts,iao),e(k,dao),e(k,Ms),e(Ms,Cte),e(Cte,cao),e(Ms,fao),e(Ms,vP),e(vP,mao),e(Ms,gao),e(Ms,FP),e(FP,hao),e(Ms,pao),e(k,uao),e(k,Es),e(Es,wte),e(wte,_ao),e(Es,bao),e(Es,TP),e(TP,vao),e(Es,Fao),e(Es,MP),e(MP,Tao),e(Es,Mao),e(k,Eao),e(k,jg),e(jg,Ate),e(Ate,Cao),e(jg,wao),e(jg,EP),e(EP,Aao),e(jg,yao),e(k,Lao),e(k,Dg),e(Dg,yte),e(yte,xao),e(Dg,$ao),e(Dg,CP),e(CP,kao),e(Dg,Sao),e(k,Rao),e(k,Cs),e(Cs,Lte),e(Lte,Pao),e(Cs,Bao),e(Cs,wP),e(wP,Iao),e(Cs,qao),e(Cs,AP),e(AP,Nao),e(Cs,jao),e(k,Dao),e(k,ws),e(ws,xte),e(xte,Gao),e(ws,Oao),e(ws,yP),e(yP,Vao),e(ws,Xao),e(ws,LP),e(LP,zao),e(ws,Qao),e(k,Wao),e(k,As),e(As,$te),e($te,Hao),e(As,Uao),e(As,xP),e(xP,Jao),e(As,Yao),e(As,$P),e($P,Kao),e(As,Zao),e(k,eno),e(k,Gg),e(Gg,kte),e(kte,ono),e(Gg,rno),e(Gg,kP),e(kP,tno),e(Gg,ano),e(k,nno),e(k,Og),e(Og,Ste),e(Ste,sno),e(Og,lno),e(Og,SP),e(SP,ino),e(Og,dno),e(k,cno),e(k,Vg),e(Vg,Rte),e(Rte,fno),e(Vg,mno),e(Vg,RP),e(RP,gno),e(Vg,hno),e(k,pno),e(k,ys),e(ys,Pte),e(Pte,uno),e(ys,_no),e(ys,PP),e(PP,bno),e(ys,vno),e(ys,BP),e(BP,Fno),e(ys,Tno),e(k,Mno),e(k,Xg),e(Xg,Bte),e(Bte,Eno),e(Xg,Cno),e(Xg,IP),e(IP,wno),e(Xg,Ano),e(k,yno),e(k,zg),e(zg,Ite),e(Ite,Lno),e(zg,xno),e(zg,qP),e(qP,$no),e(zg,kno),e(k,Sno),e(k,Ls),e(Ls,qte),e(qte,Rno),e(Ls,Pno),e(Ls,NP),e(NP,Bno),e(Ls,Ino),e(Ls,jP),e(jP,qno),e(Ls,Nno),e(k,jno),e(k,Qg),e(Qg,Nte),e(Nte,Dno),e(Qg,Gno),e(Qg,DP),e(DP,Ono),e(Qg,Vno),e(k,Xno),e(k,Wg),e(Wg,jte),e(jte,zno),e(Wg,Qno),e(Wg,GP),e(GP,Wno),e(Wg,Hno),e(k,Uno),e(k,xs),e(xs,Dte),e(Dte,Jno),e(xs,Yno),e(xs,OP),e(OP,Kno),e(xs,Zno),e(xs,VP),e(VP,eso),e(xs,oso),e(k,rso),e(k,$s),e($s,Gte),e(Gte,tso),e($s,aso),e($s,XP),e(XP,nso),e($s,sso),e($s,zP),e(zP,lso),e($s,iso),e(k,dso),e(k,ks),e(ks,Ote),e(Ote,cso),e(ks,fso),e(ks,QP),e(QP,mso),e(ks,gso),e(ks,WP),e(WP,hso),e(ks,pso),e(k,uso),e(k,Ss),e(Ss,Vte),e(Vte,_so),e(Ss,bso),e(Ss,HP),e(HP,vso),e(Ss,Fso),e(Ss,UP),e(UP,Tso),e(Ss,Mso),e(Cr,Eso),M(Hg,Cr,null),e(wo,Cso),e(wo,Ug),M(iA,Ug,null),e(Ug,wso),e(Ug,Xte),e(Xte,Aso),b(f,zBe,_),b(f,vi,_),e(vi,Jg),e(Jg,zte),M(dA,zte,null),e(vi,yso),e(vi,Qte),e(Qte,Lso),b(f,QBe,_),b(f,Ao,_),M(cA,Ao,null),e(Ao,xso),e(Ao,fA),e(fA,$so),e(fA,JP),e(JP,kso),e(fA,Sso),e(Ao,Rso),e(Ao,mA),e(mA,Pso),e(mA,Wte),e(Wte,Bso),e(mA,Iso),e(Ao,qso),e(Ao,Qe),M(gA,Qe,null),e(Qe,Nso),e(Qe,Hte),e(Hte,jso),e(Qe,Dso),e(Qe,wa),e(wa,Gso),e(wa,Ute),e(Ute,Oso),e(wa,Vso),e(wa,Jte),e(Jte,Xso),e(wa,zso),e(wa,Yte),e(Yte,Qso),e(wa,Wso),e(Qe,Hso),e(Qe,ae),e(ae,Yg),e(Yg,Kte),e(Kte,Uso),e(Yg,Jso),e(Yg,YP),e(YP,Yso),e(Yg,Kso),e(ae,Zso),e(ae,Kg),e(Kg,Zte),e(Zte,elo),e(Kg,olo),e(Kg,KP),e(KP,rlo),e(Kg,tlo),e(ae,alo),e(ae,Zg),e(Zg,eae),e(eae,nlo),e(Zg,slo),e(Zg,ZP),e(ZP,llo),e(Zg,ilo),e(ae,dlo),e(ae,eh),e(eh,oae),e(oae,clo),e(eh,flo),e(eh,eB),e(eB,mlo),e(eh,glo),e(ae,hlo),e(ae,oh),e(oh,rae),e(rae,plo),e(oh,ulo),e(oh,oB),e(oB,_lo),e(oh,blo),e(ae,vlo),e(ae,rh),e(rh,tae),e(tae,Flo),e(rh,Tlo),e(rh,rB),e(rB,Mlo),e(rh,Elo),e(ae,Clo),e(ae,th),e(th,aae),e(aae,wlo),e(th,Alo),e(th,tB),e(tB,ylo),e(th,Llo),e(ae,xlo),e(ae,ah),e(ah,nae),e(nae,$lo),e(ah,klo),e(ah,aB),e(aB,Slo),e(ah,Rlo),e(ae,Plo),e(ae,nh),e(nh,sae),e(sae,Blo),e(nh,Ilo),e(nh,nB),e(nB,qlo),e(nh,Nlo),e(ae,jlo),e(ae,sh),e(sh,lae),e(lae,Dlo),e(sh,Glo),e(sh,sB),e(sB,Olo),e(sh,Vlo),e(ae,Xlo),e(ae,lh),e(lh,iae),e(iae,zlo),e(lh,Qlo),e(lh,lB),e(lB,Wlo),e(lh,Hlo),e(ae,Ulo),e(ae,ih),e(ih,dae),e(dae,Jlo),e(ih,Ylo),e(ih,iB),e(iB,Klo),e(ih,Zlo),e(ae,eio),e(ae,dh),e(dh,cae),e(cae,oio),e(dh,rio),e(dh,dB),e(dB,tio),e(dh,aio),e(ae,nio),e(ae,ch),e(ch,fae),e(fae,sio),e(ch,lio),e(ch,cB),e(cB,iio),e(ch,dio),e(ae,cio),e(ae,fh),e(fh,mae),e(mae,fio),e(fh,mio),e(fh,fB),e(fB,gio),e(fh,hio),e(ae,pio),e(ae,mh),e(mh,gae),e(gae,uio),e(mh,_io),e(mh,mB),e(mB,bio),e(mh,vio),e(ae,Fio),e(ae,gh),e(gh,hae),e(hae,Tio),e(gh,Mio),e(gh,gB),e(gB,Eio),e(gh,Cio),e(ae,wio),e(ae,hh),e(hh,pae),e(pae,Aio),e(hh,yio),e(hh,hB),e(hB,Lio),e(hh,xio),e(ae,$io),e(ae,ph),e(ph,uae),e(uae,kio),e(ph,Sio),e(ph,pB),e(pB,Rio),e(ph,Pio),e(ae,Bio),e(ae,uh),e(uh,_ae),e(_ae,Iio),e(uh,qio),e(uh,uB),e(uB,Nio),e(uh,jio),e(ae,Dio),e(ae,_h),e(_h,bae),e(bae,Gio),e(_h,Oio),e(_h,_B),e(_B,Vio),e(_h,Xio),e(ae,zio),e(ae,bh),e(bh,vae),e(vae,Qio),e(bh,Wio),e(bh,bB),e(bB,Hio),e(bh,Uio),e(ae,Jio),e(ae,vh),e(vh,Fae),e(Fae,Yio),e(vh,Kio),e(vh,vB),e(vB,Zio),e(vh,edo),e(ae,odo),e(ae,Fh),e(Fh,Tae),e(Tae,rdo),e(Fh,tdo),e(Fh,FB),e(FB,ado),e(Fh,ndo),e(Qe,sdo),M(Th,Qe,null),e(Qe,ldo),M(Mh,Qe,null),e(Ao,ido),e(Ao,Eh),M(hA,Eh,null),e(Eh,ddo),e(Eh,Mae),e(Mae,cdo),b(f,WBe,_),b(f,Fi,_),e(Fi,Ch),e(Ch,Eae),M(pA,Eae,null),e(Fi,fdo),e(Fi,Cae),e(Cae,mdo),b(f,HBe,_),b(f,yo,_),M(uA,yo,null),e(yo,gdo),e(yo,_A),e(_A,hdo),e(_A,TB),e(TB,pdo),e(_A,udo),e(yo,_do),e(yo,bA),e(bA,bdo),e(bA,wae),e(wae,vdo),e(bA,Fdo),e(yo,Tdo),e(yo,We),M(vA,We,null),e(We,Mdo),e(We,Aae),e(Aae,Edo),e(We,Cdo),e(We,Ti),e(Ti,wdo),e(Ti,yae),e(yae,Ado),e(Ti,ydo),e(Ti,Lae),e(Lae,Ldo),e(Ti,xdo),e(We,$do),e(We,be),e(be,wh),e(wh,xae),e(xae,kdo),e(wh,Sdo),e(wh,MB),e(MB,Rdo),e(wh,Pdo),e(be,Bdo),e(be,Ah),e(Ah,$ae),e($ae,Ido),e(Ah,qdo),e(Ah,EB),e(EB,Ndo),e(Ah,jdo),e(be,Ddo),e(be,yh),e(yh,kae),e(kae,Gdo),e(yh,Odo),e(yh,CB),e(CB,Vdo),e(yh,Xdo),e(be,zdo),e(be,Lh),e(Lh,Sae),e(Sae,Qdo),e(Lh,Wdo),e(Lh,wB),e(wB,Hdo),e(Lh,Udo),e(be,Jdo),e(be,xh),e(xh,Rae),e(Rae,Ydo),e(xh,Kdo),e(xh,AB),e(AB,Zdo),e(xh,eco),e(be,oco),e(be,$h),e($h,Pae),e(Pae,rco),e($h,tco),e($h,yB),e(yB,aco),e($h,nco),e(be,sco),e(be,kh),e(kh,Bae),e(Bae,lco),e(kh,ico),e(kh,LB),e(LB,dco),e(kh,cco),e(be,fco),e(be,Sh),e(Sh,Iae),e(Iae,mco),e(Sh,gco),e(Sh,xB),e(xB,hco),e(Sh,pco),e(be,uco),e(be,Rh),e(Rh,qae),e(qae,_co),e(Rh,bco),e(Rh,$B),e($B,vco),e(Rh,Fco),e(be,Tco),e(be,Ph),e(Ph,Nae),e(Nae,Mco),e(Ph,Eco),e(Ph,kB),e(kB,Cco),e(Ph,wco),e(be,Aco),e(be,Bh),e(Bh,jae),e(jae,yco),e(Bh,Lco),e(Bh,SB),e(SB,xco),e(Bh,$co),e(be,kco),e(be,Ih),e(Ih,Dae),e(Dae,Sco),e(Ih,Rco),e(Ih,RB),e(RB,Pco),e(Ih,Bco),e(be,Ico),e(be,qh),e(qh,Gae),e(Gae,qco),e(qh,Nco),e(qh,PB),e(PB,jco),e(qh,Dco),e(be,Gco),e(be,Nh),e(Nh,Oae),e(Oae,Oco),e(Nh,Vco),e(Nh,BB),e(BB,Xco),e(Nh,zco),e(We,Qco),M(jh,We,null),e(We,Wco),M(Dh,We,null),e(yo,Hco),e(yo,Gh),M(FA,Gh,null),e(Gh,Uco),e(Gh,Vae),e(Vae,Jco),b(f,UBe,_),b(f,Mi,_),e(Mi,Oh),e(Oh,Xae),M(TA,Xae,null),e(Mi,Yco),e(Mi,zae),e(zae,Kco),b(f,JBe,_),b(f,Lo,_),M(MA,Lo,null),e(Lo,Zco),e(Lo,Ei),e(Ei,efo),e(Ei,IB),e(IB,ofo),e(Ei,rfo),e(Ei,qB),e(qB,tfo),e(Ei,afo),e(Lo,nfo),e(Lo,EA),e(EA,sfo),e(EA,Qae),e(Qae,lfo),e(EA,ifo),e(Lo,dfo),e(Lo,ot),M(CA,ot,null),e(ot,cfo),e(ot,Wae),e(Wae,ffo),e(ot,mfo),e(ot,Ci),e(Ci,gfo),e(Ci,Hae),e(Hae,hfo),e(Ci,pfo),e(Ci,NB),e(NB,ufo),e(Ci,_fo),e(ot,bfo),M(Vh,ot,null),e(Lo,vfo),e(Lo,He),M(wA,He,null),e(He,Ffo),e(He,Uae),e(Uae,Tfo),e(He,Mfo),e(He,Aa),e(Aa,Efo),e(Aa,Jae),e(Jae,Cfo),e(Aa,wfo),e(Aa,Yae),e(Yae,Afo),e(Aa,yfo),e(Aa,Kae),e(Kae,Lfo),e(Aa,xfo),e(He,$fo),e(He,x),e(x,Xh),e(Xh,Zae),e(Zae,kfo),e(Xh,Sfo),e(Xh,jB),e(jB,Rfo),e(Xh,Pfo),e(x,Bfo),e(x,zh),e(zh,ene),e(ene,Ifo),e(zh,qfo),e(zh,DB),e(DB,Nfo),e(zh,jfo),e(x,Dfo),e(x,Qh),e(Qh,one),e(one,Gfo),e(Qh,Ofo),e(Qh,GB),e(GB,Vfo),e(Qh,Xfo),e(x,zfo),e(x,Wh),e(Wh,rne),e(rne,Qfo),e(Wh,Wfo),e(Wh,OB),e(OB,Hfo),e(Wh,Ufo),e(x,Jfo),e(x,Hh),e(Hh,tne),e(tne,Yfo),e(Hh,Kfo),e(Hh,VB),e(VB,Zfo),e(Hh,emo),e(x,omo),e(x,Uh),e(Uh,ane),e(ane,rmo),e(Uh,tmo),e(Uh,XB),e(XB,amo),e(Uh,nmo),e(x,smo),e(x,Jh),e(Jh,nne),e(nne,lmo),e(Jh,imo),e(Jh,zB),e(zB,dmo),e(Jh,cmo),e(x,fmo),e(x,Yh),e(Yh,sne),e(sne,mmo),e(Yh,gmo),e(Yh,QB),e(QB,hmo),e(Yh,pmo),e(x,umo),e(x,Kh),e(Kh,lne),e(lne,_mo),e(Kh,bmo),e(Kh,WB),e(WB,vmo),e(Kh,Fmo),e(x,Tmo),e(x,Zh),e(Zh,ine),e(ine,Mmo),e(Zh,Emo),e(Zh,HB),e(HB,Cmo),e(Zh,wmo),e(x,Amo),e(x,ep),e(ep,dne),e(dne,ymo),e(ep,Lmo),e(ep,UB),e(UB,xmo),e(ep,$mo),e(x,kmo),e(x,op),e(op,cne),e(cne,Smo),e(op,Rmo),e(op,JB),e(JB,Pmo),e(op,Bmo),e(x,Imo),e(x,rp),e(rp,fne),e(fne,qmo),e(rp,Nmo),e(rp,YB),e(YB,jmo),e(rp,Dmo),e(x,Gmo),e(x,tp),e(tp,mne),e(mne,Omo),e(tp,Vmo),e(tp,KB),e(KB,Xmo),e(tp,zmo),e(x,Qmo),e(x,ap),e(ap,gne),e(gne,Wmo),e(ap,Hmo),e(ap,ZB),e(ZB,Umo),e(ap,Jmo),e(x,Ymo),e(x,np),e(np,hne),e(hne,Kmo),e(np,Zmo),e(np,eI),e(eI,ego),e(np,ogo),e(x,rgo),e(x,sp),e(sp,pne),e(pne,tgo),e(sp,ago),e(sp,oI),e(oI,ngo),e(sp,sgo),e(x,lgo),e(x,lp),e(lp,une),e(une,igo),e(lp,dgo),e(lp,rI),e(rI,cgo),e(lp,fgo),e(x,mgo),e(x,ip),e(ip,_ne),e(_ne,ggo),e(ip,hgo),e(ip,tI),e(tI,pgo),e(ip,ugo),e(x,_go),e(x,dp),e(dp,bne),e(bne,bgo),e(dp,vgo),e(dp,aI),e(aI,Fgo),e(dp,Tgo),e(x,Mgo),e(x,cp),e(cp,vne),e(vne,Ego),e(cp,Cgo),e(cp,nI),e(nI,wgo),e(cp,Ago),e(x,ygo),e(x,fp),e(fp,Fne),e(Fne,Lgo),e(fp,xgo),e(fp,sI),e(sI,$go),e(fp,kgo),e(x,Sgo),e(x,mp),e(mp,Tne),e(Tne,Rgo),e(mp,Pgo),e(mp,lI),e(lI,Bgo),e(mp,Igo),e(x,qgo),e(x,gp),e(gp,Mne),e(Mne,Ngo),e(gp,jgo),e(gp,iI),e(iI,Dgo),e(gp,Ggo),e(x,Ogo),e(x,hp),e(hp,Ene),e(Ene,Vgo),e(hp,Xgo),e(hp,dI),e(dI,zgo),e(hp,Qgo),e(x,Wgo),e(x,pp),e(pp,Cne),e(Cne,Hgo),e(pp,Ugo),e(pp,cI),e(cI,Jgo),e(pp,Ygo),e(x,Kgo),e(x,up),e(up,wne),e(wne,Zgo),e(up,eho),e(up,fI),e(fI,oho),e(up,rho),e(x,tho),e(x,_p),e(_p,Ane),e(Ane,aho),e(_p,nho),e(_p,mI),e(mI,sho),e(_p,lho),e(x,iho),e(x,bp),e(bp,yne),e(yne,dho),e(bp,cho),e(bp,gI),e(gI,fho),e(bp,mho),e(x,gho),e(x,vp),e(vp,Lne),e(Lne,hho),e(vp,pho),e(vp,hI),e(hI,uho),e(vp,_ho),e(x,bho),e(x,Rs),e(Rs,xne),e(xne,vho),e(Rs,Fho),e(Rs,pI),e(pI,Tho),e(Rs,Mho),e(Rs,uI),e(uI,Eho),e(Rs,Cho),e(x,who),e(x,Fp),e(Fp,$ne),e($ne,Aho),e(Fp,yho),e(Fp,_I),e(_I,Lho),e(Fp,xho),e(x,$ho),e(x,Tp),e(Tp,kne),e(kne,kho),e(Tp,Sho),e(Tp,bI),e(bI,Rho),e(Tp,Pho),e(x,Bho),e(x,Mp),e(Mp,Sne),e(Sne,Iho),e(Mp,qho),e(Mp,vI),e(vI,Nho),e(Mp,jho),e(x,Dho),e(x,Ep),e(Ep,Rne),e(Rne,Gho),e(Ep,Oho),e(Ep,FI),e(FI,Vho),e(Ep,Xho),e(x,zho),e(x,Cp),e(Cp,Pne),e(Pne,Qho),e(Cp,Who),e(Cp,TI),e(TI,Hho),e(Cp,Uho),e(x,Jho),e(x,wp),e(wp,Bne),e(Bne,Yho),e(wp,Kho),e(wp,MI),e(MI,Zho),e(wp,epo),e(x,opo),e(x,Ap),e(Ap,Ine),e(Ine,rpo),e(Ap,tpo),e(Ap,EI),e(EI,apo),e(Ap,npo),e(x,spo),e(x,yp),e(yp,qne),e(qne,lpo),e(yp,ipo),e(yp,CI),e(CI,dpo),e(yp,cpo),e(x,fpo),e(x,Lp),e(Lp,Nne),e(Nne,mpo),e(Lp,gpo),e(Lp,wI),e(wI,hpo),e(Lp,ppo),e(x,upo),e(x,xp),e(xp,jne),e(jne,_po),e(xp,bpo),e(xp,AI),e(AI,vpo),e(xp,Fpo),e(x,Tpo),e(x,$p),e($p,Dne),e(Dne,Mpo),e($p,Epo),e($p,yI),e(yI,Cpo),e($p,wpo),e(x,Apo),e(x,kp),e(kp,Gne),e(Gne,ypo),e(kp,Lpo),e(kp,LI),e(LI,xpo),e(kp,$po),e(x,kpo),e(x,Sp),e(Sp,One),e(One,Spo),e(Sp,Rpo),e(Sp,xI),e(xI,Ppo),e(Sp,Bpo),e(x,Ipo),e(x,Rp),e(Rp,Vne),e(Vne,qpo),e(Rp,Npo),e(Rp,$I),e($I,jpo),e(Rp,Dpo),e(x,Gpo),e(x,Pp),e(Pp,Xne),e(Xne,Opo),e(Pp,Vpo),e(Pp,kI),e(kI,Xpo),e(Pp,zpo),e(x,Qpo),e(x,Bp),e(Bp,zne),e(zne,Wpo),e(Bp,Hpo),e(Bp,SI),e(SI,Upo),e(Bp,Jpo),e(x,Ypo),e(x,Ip),e(Ip,Qne),e(Qne,Kpo),e(Ip,Zpo),e(Ip,RI),e(RI,euo),e(Ip,ouo),e(x,ruo),e(x,qp),e(qp,Wne),e(Wne,tuo),e(qp,auo),e(qp,PI),e(PI,nuo),e(qp,suo),e(x,luo),e(x,Np),e(Np,Hne),e(Hne,iuo),e(Np,duo),e(Np,BI),e(BI,cuo),e(Np,fuo),e(x,muo),e(x,jp),e(jp,Une),e(Une,guo),e(jp,huo),e(jp,II),e(II,puo),e(jp,uuo),e(x,_uo),e(x,Dp),e(Dp,Jne),e(Jne,buo),e(Dp,vuo),e(Dp,qI),e(qI,Fuo),e(Dp,Tuo),e(x,Muo),e(x,Gp),e(Gp,Yne),e(Yne,Euo),e(Gp,Cuo),e(Gp,NI),e(NI,wuo),e(Gp,Auo),e(x,yuo),e(x,Op),e(Op,Kne),e(Kne,Luo),e(Op,xuo),e(Op,jI),e(jI,$uo),e(Op,kuo),e(x,Suo),e(x,Vp),e(Vp,Zne),e(Zne,Ruo),e(Vp,Puo),e(Vp,DI),e(DI,Buo),e(Vp,Iuo),e(x,quo),e(x,Xp),e(Xp,ese),e(ese,Nuo),e(Xp,juo),e(Xp,GI),e(GI,Duo),e(Xp,Guo),e(x,Ouo),e(x,zp),e(zp,ose),e(ose,Vuo),e(zp,Xuo),e(zp,OI),e(OI,zuo),e(zp,Quo),e(x,Wuo),e(x,Qp),e(Qp,rse),e(rse,Huo),e(Qp,Uuo),e(Qp,VI),e(VI,Juo),e(Qp,Yuo),e(x,Kuo),e(x,Wp),e(Wp,tse),e(tse,Zuo),e(Wp,e_o),e(Wp,XI),e(XI,o_o),e(Wp,r_o),e(x,t_o),e(x,Hp),e(Hp,ase),e(ase,a_o),e(Hp,n_o),e(Hp,zI),e(zI,s_o),e(Hp,l_o),e(x,i_o),e(x,Up),e(Up,nse),e(nse,d_o),e(Up,c_o),e(Up,QI),e(QI,f_o),e(Up,m_o),e(x,g_o),e(x,Jp),e(Jp,sse),e(sse,h_o),e(Jp,p_o),e(Jp,WI),e(WI,u_o),e(Jp,__o),e(x,b_o),e(x,Yp),e(Yp,lse),e(lse,v_o),e(Yp,F_o),e(Yp,HI),e(HI,T_o),e(Yp,M_o),e(x,E_o),e(x,Kp),e(Kp,ise),e(ise,C_o),e(Kp,w_o),e(Kp,UI),e(UI,A_o),e(Kp,y_o),e(x,L_o),e(x,Zp),e(Zp,dse),e(dse,x_o),e(Zp,$_o),e(Zp,JI),e(JI,k_o),e(Zp,S_o),e(x,R_o),e(x,eu),e(eu,cse),e(cse,P_o),e(eu,B_o),e(eu,YI),e(YI,I_o),e(eu,q_o),e(x,N_o),e(x,ou),e(ou,fse),e(fse,j_o),e(ou,D_o),e(ou,KI),e(KI,G_o),e(ou,O_o),e(x,V_o),e(x,ru),e(ru,mse),e(mse,X_o),e(ru,z_o),e(ru,ZI),e(ZI,Q_o),e(ru,W_o),e(x,H_o),e(x,tu),e(tu,gse),e(gse,U_o),e(tu,J_o),e(tu,eq),e(eq,Y_o),e(tu,K_o),e(x,Z_o),e(x,au),e(au,hse),e(hse,e1o),e(au,o1o),e(au,oq),e(oq,r1o),e(au,t1o),e(x,a1o),e(x,nu),e(nu,pse),e(pse,n1o),e(nu,s1o),e(nu,rq),e(rq,l1o),e(nu,i1o),e(x,d1o),e(x,su),e(su,use),e(use,c1o),e(su,f1o),e(su,tq),e(tq,m1o),e(su,g1o),e(x,h1o),e(x,lu),e(lu,_se),e(_se,p1o),e(lu,u1o),e(lu,aq),e(aq,_1o),e(lu,b1o),e(x,v1o),e(x,iu),e(iu,bse),e(bse,F1o),e(iu,T1o),e(iu,nq),e(nq,M1o),e(iu,E1o),e(x,C1o),e(x,du),e(du,vse),e(vse,w1o),e(du,A1o),e(du,sq),e(sq,y1o),e(du,L1o),e(x,x1o),e(x,cu),e(cu,Fse),e(Fse,$1o),e(cu,k1o),e(cu,lq),e(lq,S1o),e(cu,R1o),e(x,P1o),e(x,fu),e(fu,Tse),e(Tse,B1o),e(fu,I1o),e(fu,iq),e(iq,q1o),e(fu,N1o),e(x,j1o),e(x,mu),e(mu,Mse),e(Mse,D1o),e(mu,G1o),e(mu,dq),e(dq,O1o),e(mu,V1o),e(x,X1o),e(x,gu),e(gu,Ese),e(Ese,z1o),e(gu,Q1o),e(gu,cq),e(cq,W1o),e(gu,H1o),e(x,U1o),e(x,hu),e(hu,Cse),e(Cse,J1o),e(hu,Y1o),e(hu,fq),e(fq,K1o),e(hu,Z1o),e(x,e8o),e(x,pu),e(pu,wse),e(wse,o8o),e(pu,r8o),e(pu,mq),e(mq,t8o),e(pu,a8o),e(x,n8o),e(x,uu),e(uu,Ase),e(Ase,s8o),e(uu,l8o),e(uu,gq),e(gq,i8o),e(uu,d8o),e(x,c8o),e(x,_u),e(_u,yse),e(yse,f8o),e(_u,m8o),e(_u,hq),e(hq,g8o),e(_u,h8o),e(x,p8o),e(x,bu),e(bu,Lse),e(Lse,u8o),e(bu,_8o),e(bu,pq),e(pq,b8o),e(bu,v8o),e(x,F8o),e(x,vu),e(vu,xse),e(xse,T8o),e(vu,M8o),e(vu,uq),e(uq,E8o),e(vu,C8o),e(x,w8o),e(x,Fu),e(Fu,$se),e($se,A8o),e(Fu,y8o),e(Fu,_q),e(_q,L8o),e(Fu,x8o),e(x,$8o),e(x,Tu),e(Tu,kse),e(kse,k8o),e(Tu,S8o),e(Tu,bq),e(bq,R8o),e(Tu,P8o),e(x,B8o),e(x,Mu),e(Mu,Sse),e(Sse,I8o),e(Mu,q8o),e(Mu,vq),e(vq,N8o),e(Mu,j8o),e(x,D8o),e(x,Eu),e(Eu,Rse),e(Rse,G8o),e(Eu,O8o),e(Eu,Fq),e(Fq,V8o),e(Eu,X8o),e(x,z8o),e(x,Cu),e(Cu,Pse),e(Pse,Q8o),e(Cu,W8o),e(Cu,Tq),e(Tq,H8o),e(Cu,U8o),e(x,J8o),e(x,wu),e(wu,Bse),e(Bse,Y8o),e(wu,K8o),e(wu,Mq),e(Mq,Z8o),e(wu,ebo),e(x,obo),e(x,Au),e(Au,Ise),e(Ise,rbo),e(Au,tbo),e(Au,Eq),e(Eq,abo),e(Au,nbo),e(x,sbo),e(x,yu),e(yu,qse),e(qse,lbo),e(yu,ibo),e(yu,Cq),e(Cq,dbo),e(yu,cbo),e(x,fbo),e(x,Lu),e(Lu,Nse),e(Nse,mbo),e(Lu,gbo),e(Lu,wq),e(wq,hbo),e(Lu,pbo),e(x,ubo),e(x,xu),e(xu,jse),e(jse,_bo),e(xu,bbo),e(xu,Aq),e(Aq,vbo),e(xu,Fbo),e(x,Tbo),e(x,$u),e($u,Dse),e(Dse,Mbo),e($u,Ebo),e($u,yq),e(yq,Cbo),e($u,wbo),e(He,Abo),e(He,ku),e(ku,ybo),e(ku,Gse),e(Gse,Lbo),e(ku,xbo),e(ku,Ose),e(Ose,$bo),e(He,kbo),M(Su,He,null),b(f,YBe,_),b(f,wi,_),e(wi,Ru),e(Ru,Vse),M(AA,Vse,null),e(wi,Sbo),e(wi,Xse),e(Xse,Rbo),b(f,KBe,_),b(f,xo,_),M(yA,xo,null),e(xo,Pbo),e(xo,Ai),e(Ai,Bbo),e(Ai,Lq),e(Lq,Ibo),e(Ai,qbo),e(Ai,xq),e(xq,Nbo),e(Ai,jbo),e(xo,Dbo),e(xo,LA),e(LA,Gbo),e(LA,zse),e(zse,Obo),e(LA,Vbo),e(xo,Xbo),e(xo,rt),M(xA,rt,null),e(rt,zbo),e(rt,Qse),e(Qse,Qbo),e(rt,Wbo),e(rt,yi),e(yi,Hbo),e(yi,Wse),e(Wse,Ubo),e(yi,Jbo),e(yi,$q),e($q,Ybo),e(yi,Kbo),e(rt,Zbo),M(Pu,rt,null),e(xo,e2o),e(xo,Ue),M($A,Ue,null),e(Ue,o2o),e(Ue,Hse),e(Hse,r2o),e(Ue,t2o),e(Ue,ya),e(ya,a2o),e(ya,Use),e(Use,n2o),e(ya,s2o),e(ya,Jse),e(Jse,l2o),e(ya,i2o),e(ya,Yse),e(Yse,d2o),e(ya,c2o),e(Ue,f2o),e(Ue,G),e(G,Bu),e(Bu,Kse),e(Kse,m2o),e(Bu,g2o),e(Bu,kq),e(kq,h2o),e(Bu,p2o),e(G,u2o),e(G,Iu),e(Iu,Zse),e(Zse,_2o),e(Iu,b2o),e(Iu,Sq),e(Sq,v2o),e(Iu,F2o),e(G,T2o),e(G,qu),e(qu,ele),e(ele,M2o),e(qu,E2o),e(qu,Rq),e(Rq,C2o),e(qu,w2o),e(G,A2o),e(G,Nu),e(Nu,ole),e(ole,y2o),e(Nu,L2o),e(Nu,Pq),e(Pq,x2o),e(Nu,$2o),e(G,k2o),e(G,ju),e(ju,rle),e(rle,S2o),e(ju,R2o),e(ju,Bq),e(Bq,P2o),e(ju,B2o),e(G,I2o),e(G,Du),e(Du,tle),e(tle,q2o),e(Du,N2o),e(Du,Iq),e(Iq,j2o),e(Du,D2o),e(G,G2o),e(G,Gu),e(Gu,ale),e(ale,O2o),e(Gu,V2o),e(Gu,qq),e(qq,X2o),e(Gu,z2o),e(G,Q2o),e(G,Ou),e(Ou,nle),e(nle,W2o),e(Ou,H2o),e(Ou,Nq),e(Nq,U2o),e(Ou,J2o),e(G,Y2o),e(G,Vu),e(Vu,sle),e(sle,K2o),e(Vu,Z2o),e(Vu,jq),e(jq,evo),e(Vu,ovo),e(G,rvo),e(G,Xu),e(Xu,lle),e(lle,tvo),e(Xu,avo),e(Xu,Dq),e(Dq,nvo),e(Xu,svo),e(G,lvo),e(G,zu),e(zu,ile),e(ile,ivo),e(zu,dvo),e(zu,Gq),e(Gq,cvo),e(zu,fvo),e(G,mvo),e(G,Qu),e(Qu,dle),e(dle,gvo),e(Qu,hvo),e(Qu,Oq),e(Oq,pvo),e(Qu,uvo),e(G,_vo),e(G,Wu),e(Wu,cle),e(cle,bvo),e(Wu,vvo),e(Wu,Vq),e(Vq,Fvo),e(Wu,Tvo),e(G,Mvo),e(G,Hu),e(Hu,fle),e(fle,Evo),e(Hu,Cvo),e(Hu,Xq),e(Xq,wvo),e(Hu,Avo),e(G,yvo),e(G,Uu),e(Uu,mle),e(mle,Lvo),e(Uu,xvo),e(Uu,zq),e(zq,$vo),e(Uu,kvo),e(G,Svo),e(G,Ju),e(Ju,gle),e(gle,Rvo),e(Ju,Pvo),e(Ju,Qq),e(Qq,Bvo),e(Ju,Ivo),e(G,qvo),e(G,Yu),e(Yu,hle),e(hle,Nvo),e(Yu,jvo),e(Yu,Wq),e(Wq,Dvo),e(Yu,Gvo),e(G,Ovo),e(G,Ku),e(Ku,ple),e(ple,Vvo),e(Ku,Xvo),e(Ku,Hq),e(Hq,zvo),e(Ku,Qvo),e(G,Wvo),e(G,Zu),e(Zu,ule),e(ule,Hvo),e(Zu,Uvo),e(Zu,Uq),e(Uq,Jvo),e(Zu,Yvo),e(G,Kvo),e(G,e_),e(e_,_le),e(_le,Zvo),e(e_,eFo),e(e_,Jq),e(Jq,oFo),e(e_,rFo),e(G,tFo),e(G,o_),e(o_,ble),e(ble,aFo),e(o_,nFo),e(o_,Yq),e(Yq,sFo),e(o_,lFo),e(G,iFo),e(G,r_),e(r_,vle),e(vle,dFo),e(r_,cFo),e(r_,Kq),e(Kq,fFo),e(r_,mFo),e(G,gFo),e(G,t_),e(t_,Fle),e(Fle,hFo),e(t_,pFo),e(t_,Zq),e(Zq,uFo),e(t_,_Fo),e(G,bFo),e(G,a_),e(a_,Tle),e(Tle,vFo),e(a_,FFo),e(a_,eN),e(eN,TFo),e(a_,MFo),e(G,EFo),e(G,n_),e(n_,Mle),e(Mle,CFo),e(n_,wFo),e(n_,oN),e(oN,AFo),e(n_,yFo),e(G,LFo),e(G,s_),e(s_,Ele),e(Ele,xFo),e(s_,$Fo),e(s_,rN),e(rN,kFo),e(s_,SFo),e(G,RFo),e(G,l_),e(l_,Cle),e(Cle,PFo),e(l_,BFo),e(l_,tN),e(tN,IFo),e(l_,qFo),e(G,NFo),e(G,i_),e(i_,wle),e(wle,jFo),e(i_,DFo),e(i_,aN),e(aN,GFo),e(i_,OFo),e(G,VFo),e(G,d_),e(d_,Ale),e(Ale,XFo),e(d_,zFo),e(d_,nN),e(nN,QFo),e(d_,WFo),e(G,HFo),e(G,c_),e(c_,yle),e(yle,UFo),e(c_,JFo),e(c_,sN),e(sN,YFo),e(c_,KFo),e(G,ZFo),e(G,f_),e(f_,Lle),e(Lle,e0o),e(f_,o0o),e(f_,lN),e(lN,r0o),e(f_,t0o),e(G,a0o),e(G,m_),e(m_,xle),e(xle,n0o),e(m_,s0o),e(m_,iN),e(iN,l0o),e(m_,i0o),e(G,d0o),e(G,g_),e(g_,$le),e($le,c0o),e(g_,f0o),e(g_,dN),e(dN,m0o),e(g_,g0o),e(G,h0o),e(G,h_),e(h_,kle),e(kle,p0o),e(h_,u0o),e(h_,cN),e(cN,_0o),e(h_,b0o),e(G,v0o),e(G,p_),e(p_,Sle),e(Sle,F0o),e(p_,T0o),e(p_,fN),e(fN,M0o),e(p_,E0o),e(G,C0o),e(G,u_),e(u_,Rle),e(Rle,w0o),e(u_,A0o),e(u_,mN),e(mN,y0o),e(u_,L0o),e(G,x0o),e(G,__),e(__,Ple),e(Ple,$0o),e(__,k0o),e(__,gN),e(gN,S0o),e(__,R0o),e(G,P0o),e(G,b_),e(b_,Ble),e(Ble,B0o),e(b_,I0o),e(b_,hN),e(hN,q0o),e(b_,N0o),e(G,j0o),e(G,v_),e(v_,Ile),e(Ile,D0o),e(v_,G0o),e(v_,pN),e(pN,O0o),e(v_,V0o),e(Ue,X0o),e(Ue,F_),e(F_,z0o),e(F_,qle),e(qle,Q0o),e(F_,W0o),e(F_,Nle),e(Nle,H0o),e(Ue,U0o),M(T_,Ue,null),b(f,ZBe,_),b(f,Li,_),e(Li,M_),e(M_,jle),M(kA,jle,null),e(Li,J0o),e(Li,Dle),e(Dle,Y0o),b(f,eIe,_),b(f,$o,_),M(SA,$o,null),e($o,K0o),e($o,xi),e(xi,Z0o),e(xi,uN),e(uN,eTo),e(xi,oTo),e(xi,_N),e(_N,rTo),e(xi,tTo),e($o,aTo),e($o,RA),e(RA,nTo),e(RA,Gle),e(Gle,sTo),e(RA,lTo),e($o,iTo),e($o,tt),M(PA,tt,null),e(tt,dTo),e(tt,Ole),e(Ole,cTo),e(tt,fTo),e(tt,$i),e($i,mTo),e($i,Vle),e(Vle,gTo),e($i,hTo),e($i,bN),e(bN,pTo),e($i,uTo),e(tt,_To),M(E_,tt,null),e($o,bTo),e($o,Je),M(BA,Je,null),e(Je,vTo),e(Je,Xle),e(Xle,FTo),e(Je,TTo),e(Je,La),e(La,MTo),e(La,zle),e(zle,ETo),e(La,CTo),e(La,Qle),e(Qle,wTo),e(La,ATo),e(La,Wle),e(Wle,yTo),e(La,LTo),e(Je,xTo),e(Je,z),e(z,C_),e(C_,Hle),e(Hle,$To),e(C_,kTo),e(C_,vN),e(vN,STo),e(C_,RTo),e(z,PTo),e(z,w_),e(w_,Ule),e(Ule,BTo),e(w_,ITo),e(w_,FN),e(FN,qTo),e(w_,NTo),e(z,jTo),e(z,A_),e(A_,Jle),e(Jle,DTo),e(A_,GTo),e(A_,TN),e(TN,OTo),e(A_,VTo),e(z,XTo),e(z,y_),e(y_,Yle),e(Yle,zTo),e(y_,QTo),e(y_,MN),e(MN,WTo),e(y_,HTo),e(z,UTo),e(z,L_),e(L_,Kle),e(Kle,JTo),e(L_,YTo),e(L_,EN),e(EN,KTo),e(L_,ZTo),e(z,e7o),e(z,x_),e(x_,Zle),e(Zle,o7o),e(x_,r7o),e(x_,CN),e(CN,t7o),e(x_,a7o),e(z,n7o),e(z,$_),e($_,eie),e(eie,s7o),e($_,l7o),e($_,wN),e(wN,i7o),e($_,d7o),e(z,c7o),e(z,k_),e(k_,oie),e(oie,f7o),e(k_,m7o),e(k_,AN),e(AN,g7o),e(k_,h7o),e(z,p7o),e(z,S_),e(S_,rie),e(rie,u7o),e(S_,_7o),e(S_,yN),e(yN,b7o),e(S_,v7o),e(z,F7o),e(z,R_),e(R_,tie),e(tie,T7o),e(R_,M7o),e(R_,LN),e(LN,E7o),e(R_,C7o),e(z,w7o),e(z,P_),e(P_,aie),e(aie,A7o),e(P_,y7o),e(P_,xN),e(xN,L7o),e(P_,x7o),e(z,$7o),e(z,B_),e(B_,nie),e(nie,k7o),e(B_,S7o),e(B_,$N),e($N,R7o),e(B_,P7o),e(z,B7o),e(z,I_),e(I_,sie),e(sie,I7o),e(I_,q7o),e(I_,kN),e(kN,N7o),e(I_,j7o),e(z,D7o),e(z,q_),e(q_,lie),e(lie,G7o),e(q_,O7o),e(q_,SN),e(SN,V7o),e(q_,X7o),e(z,z7o),e(z,N_),e(N_,iie),e(iie,Q7o),e(N_,W7o),e(N_,RN),e(RN,H7o),e(N_,U7o),e(z,J7o),e(z,j_),e(j_,die),e(die,Y7o),e(j_,K7o),e(j_,PN),e(PN,Z7o),e(j_,eMo),e(z,oMo),e(z,D_),e(D_,cie),e(cie,rMo),e(D_,tMo),e(D_,BN),e(BN,aMo),e(D_,nMo),e(z,sMo),e(z,G_),e(G_,fie),e(fie,lMo),e(G_,iMo),e(G_,IN),e(IN,dMo),e(G_,cMo),e(z,fMo),e(z,O_),e(O_,mie),e(mie,mMo),e(O_,gMo),e(O_,qN),e(qN,hMo),e(O_,pMo),e(z,uMo),e(z,V_),e(V_,gie),e(gie,_Mo),e(V_,bMo),e(V_,NN),e(NN,vMo),e(V_,FMo),e(z,TMo),e(z,X_),e(X_,hie),e(hie,MMo),e(X_,EMo),e(X_,jN),e(jN,CMo),e(X_,wMo),e(z,AMo),e(z,z_),e(z_,pie),e(pie,yMo),e(z_,LMo),e(z_,DN),e(DN,xMo),e(z_,$Mo),e(z,kMo),e(z,Q_),e(Q_,uie),e(uie,SMo),e(Q_,RMo),e(Q_,GN),e(GN,PMo),e(Q_,BMo),e(z,IMo),e(z,W_),e(W_,_ie),e(_ie,qMo),e(W_,NMo),e(W_,ON),e(ON,jMo),e(W_,DMo),e(z,GMo),e(z,H_),e(H_,bie),e(bie,OMo),e(H_,VMo),e(H_,VN),e(VN,XMo),e(H_,zMo),e(z,QMo),e(z,U_),e(U_,vie),e(vie,WMo),e(U_,HMo),e(U_,XN),e(XN,UMo),e(U_,JMo),e(z,YMo),e(z,J_),e(J_,Fie),e(Fie,KMo),e(J_,ZMo),e(J_,zN),e(zN,e4o),e(J_,o4o),e(z,r4o),e(z,Y_),e(Y_,Tie),e(Tie,t4o),e(Y_,a4o),e(Y_,QN),e(QN,n4o),e(Y_,s4o),e(z,l4o),e(z,K_),e(K_,Mie),e(Mie,i4o),e(K_,d4o),e(K_,WN),e(WN,c4o),e(K_,f4o),e(z,m4o),e(z,Z_),e(Z_,Eie),e(Eie,g4o),e(Z_,h4o),e(Z_,HN),e(HN,p4o),e(Z_,u4o),e(z,_4o),e(z,e1),e(e1,Cie),e(Cie,b4o),e(e1,v4o),e(e1,UN),e(UN,F4o),e(e1,T4o),e(z,M4o),e(z,o1),e(o1,wie),e(wie,E4o),e(o1,C4o),e(o1,JN),e(JN,w4o),e(o1,A4o),e(z,y4o),e(z,r1),e(r1,Aie),e(Aie,L4o),e(r1,x4o),e(r1,YN),e(YN,$4o),e(r1,k4o),e(z,S4o),e(z,t1),e(t1,yie),e(yie,R4o),e(t1,P4o),e(t1,KN),e(KN,B4o),e(t1,I4o),e(z,q4o),e(z,a1),e(a1,Lie),e(Lie,N4o),e(a1,j4o),e(a1,ZN),e(ZN,D4o),e(a1,G4o),e(z,O4o),e(z,n1),e(n1,xie),e(xie,V4o),e(n1,X4o),e(n1,ej),e(ej,z4o),e(n1,Q4o),e(Je,W4o),e(Je,s1),e(s1,H4o),e(s1,$ie),e($ie,U4o),e(s1,J4o),e(s1,kie),e(kie,Y4o),e(Je,K4o),M(l1,Je,null),b(f,oIe,_),b(f,ki,_),e(ki,i1),e(i1,Sie),M(IA,Sie,null),e(ki,Z4o),e(ki,Rie),e(Rie,eEo),b(f,rIe,_),b(f,ko,_),M(qA,ko,null),e(ko,oEo),e(ko,Si),e(Si,rEo),e(Si,oj),e(oj,tEo),e(Si,aEo),e(Si,rj),e(rj,nEo),e(Si,sEo),e(ko,lEo),e(ko,NA),e(NA,iEo),e(NA,Pie),e(Pie,dEo),e(NA,cEo),e(ko,fEo),e(ko,at),M(jA,at,null),e(at,mEo),e(at,Bie),e(Bie,gEo),e(at,hEo),e(at,Ri),e(Ri,pEo),e(Ri,Iie),e(Iie,uEo),e(Ri,_Eo),e(Ri,tj),e(tj,bEo),e(Ri,vEo),e(at,FEo),M(d1,at,null),e(ko,TEo),e(ko,Ye),M(DA,Ye,null),e(Ye,MEo),e(Ye,qie),e(qie,EEo),e(Ye,CEo),e(Ye,xa),e(xa,wEo),e(xa,Nie),e(Nie,AEo),e(xa,yEo),e(xa,jie),e(jie,LEo),e(xa,xEo),e(xa,Die),e(Die,$Eo),e(xa,kEo),e(Ye,SEo),e(Ye,Q),e(Q,c1),e(c1,Gie),e(Gie,REo),e(c1,PEo),e(c1,aj),e(aj,BEo),e(c1,IEo),e(Q,qEo),e(Q,f1),e(f1,Oie),e(Oie,NEo),e(f1,jEo),e(f1,nj),e(nj,DEo),e(f1,GEo),e(Q,OEo),e(Q,m1),e(m1,Vie),e(Vie,VEo),e(m1,XEo),e(m1,sj),e(sj,zEo),e(m1,QEo),e(Q,WEo),e(Q,g1),e(g1,Xie),e(Xie,HEo),e(g1,UEo),e(g1,lj),e(lj,JEo),e(g1,YEo),e(Q,KEo),e(Q,h1),e(h1,zie),e(zie,ZEo),e(h1,e5o),e(h1,ij),e(ij,o5o),e(h1,r5o),e(Q,t5o),e(Q,p1),e(p1,Qie),e(Qie,a5o),e(p1,n5o),e(p1,dj),e(dj,s5o),e(p1,l5o),e(Q,i5o),e(Q,u1),e(u1,Wie),e(Wie,d5o),e(u1,c5o),e(u1,cj),e(cj,f5o),e(u1,m5o),e(Q,g5o),e(Q,_1),e(_1,Hie),e(Hie,h5o),e(_1,p5o),e(_1,fj),e(fj,u5o),e(_1,_5o),e(Q,b5o),e(Q,b1),e(b1,Uie),e(Uie,v5o),e(b1,F5o),e(b1,mj),e(mj,T5o),e(b1,M5o),e(Q,E5o),e(Q,v1),e(v1,Jie),e(Jie,C5o),e(v1,w5o),e(v1,gj),e(gj,A5o),e(v1,y5o),e(Q,L5o),e(Q,F1),e(F1,Yie),e(Yie,x5o),e(F1,$5o),e(F1,hj),e(hj,k5o),e(F1,S5o),e(Q,R5o),e(Q,T1),e(T1,Kie),e(Kie,P5o),e(T1,B5o),e(T1,pj),e(pj,I5o),e(T1,q5o),e(Q,N5o),e(Q,M1),e(M1,Zie),e(Zie,j5o),e(M1,D5o),e(M1,uj),e(uj,G5o),e(M1,O5o),e(Q,V5o),e(Q,E1),e(E1,ede),e(ede,X5o),e(E1,z5o),e(E1,_j),e(_j,Q5o),e(E1,W5o),e(Q,H5o),e(Q,C1),e(C1,ode),e(ode,U5o),e(C1,J5o),e(C1,bj),e(bj,Y5o),e(C1,K5o),e(Q,Z5o),e(Q,w1),e(w1,rde),e(rde,eCo),e(w1,oCo),e(w1,vj),e(vj,rCo),e(w1,tCo),e(Q,aCo),e(Q,A1),e(A1,tde),e(tde,nCo),e(A1,sCo),e(A1,Fj),e(Fj,lCo),e(A1,iCo),e(Q,dCo),e(Q,y1),e(y1,ade),e(ade,cCo),e(y1,fCo),e(y1,Tj),e(Tj,mCo),e(y1,gCo),e(Q,hCo),e(Q,L1),e(L1,nde),e(nde,pCo),e(L1,uCo),e(L1,Mj),e(Mj,_Co),e(L1,bCo),e(Q,vCo),e(Q,x1),e(x1,sde),e(sde,FCo),e(x1,TCo),e(x1,Ej),e(Ej,MCo),e(x1,ECo),e(Q,CCo),e(Q,$1),e($1,lde),e(lde,wCo),e($1,ACo),e($1,Cj),e(Cj,yCo),e($1,LCo),e(Q,xCo),e(Q,k1),e(k1,ide),e(ide,$Co),e(k1,kCo),e(k1,wj),e(wj,SCo),e(k1,RCo),e(Q,PCo),e(Q,S1),e(S1,dde),e(dde,BCo),e(S1,ICo),e(S1,Aj),e(Aj,qCo),e(S1,NCo),e(Q,jCo),e(Q,R1),e(R1,cde),e(cde,DCo),e(R1,GCo),e(R1,yj),e(yj,OCo),e(R1,VCo),e(Q,XCo),e(Q,P1),e(P1,fde),e(fde,zCo),e(P1,QCo),e(P1,Lj),e(Lj,WCo),e(P1,HCo),e(Q,UCo),e(Q,B1),e(B1,mde),e(mde,JCo),e(B1,YCo),e(B1,xj),e(xj,KCo),e(B1,ZCo),e(Q,e3o),e(Q,I1),e(I1,gde),e(gde,o3o),e(I1,r3o),e(I1,$j),e($j,t3o),e(I1,a3o),e(Q,n3o),e(Q,q1),e(q1,hde),e(hde,s3o),e(q1,l3o),e(q1,kj),e(kj,i3o),e(q1,d3o),e(Q,c3o),e(Q,N1),e(N1,pde),e(pde,f3o),e(N1,m3o),e(N1,Sj),e(Sj,g3o),e(N1,h3o),e(Q,p3o),e(Q,j1),e(j1,ude),e(ude,u3o),e(j1,_3o),e(j1,Rj),e(Rj,b3o),e(j1,v3o),e(Q,F3o),e(Q,D1),e(D1,_de),e(_de,T3o),e(D1,M3o),e(D1,bde),e(bde,E3o),e(D1,C3o),e(Q,w3o),e(Q,G1),e(G1,vde),e(vde,A3o),e(G1,y3o),e(G1,Pj),e(Pj,L3o),e(G1,x3o),e(Q,$3o),e(Q,O1),e(O1,Fde),e(Fde,k3o),e(O1,S3o),e(O1,Bj),e(Bj,R3o),e(O1,P3o),e(Q,B3o),e(Q,V1),e(V1,Tde),e(Tde,I3o),e(V1,q3o),e(V1,Ij),e(Ij,N3o),e(V1,j3o),e(Q,D3o),e(Q,X1),e(X1,Mde),e(Mde,G3o),e(X1,O3o),e(X1,qj),e(qj,V3o),e(X1,X3o),e(Ye,z3o),e(Ye,z1),e(z1,Q3o),e(z1,Ede),e(Ede,W3o),e(z1,H3o),e(z1,Cde),e(Cde,U3o),e(Ye,J3o),M(Q1,Ye,null),b(f,tIe,_),b(f,Pi,_),e(Pi,W1),e(W1,wde),M(GA,wde,null),e(Pi,Y3o),e(Pi,Ade),e(Ade,K3o),b(f,aIe,_),b(f,So,_),M(OA,So,null),e(So,Z3o),e(So,Bi),e(Bi,ewo),e(Bi,Nj),e(Nj,owo),e(Bi,rwo),e(Bi,jj),e(jj,two),e(Bi,awo),e(So,nwo),e(So,VA),e(VA,swo),e(VA,yde),e(yde,lwo),e(VA,iwo),e(So,dwo),e(So,nt),M(XA,nt,null),e(nt,cwo),e(nt,Lde),e(Lde,fwo),e(nt,mwo),e(nt,Ii),e(Ii,gwo),e(Ii,xde),e(xde,hwo),e(Ii,pwo),e(Ii,Dj),e(Dj,uwo),e(Ii,_wo),e(nt,bwo),M(H1,nt,null),e(So,vwo),e(So,Ke),M(zA,Ke,null),e(Ke,Fwo),e(Ke,$de),e($de,Two),e(Ke,Mwo),e(Ke,$a),e($a,Ewo),e($a,kde),e(kde,Cwo),e($a,wwo),e($a,Sde),e(Sde,Awo),e($a,ywo),e($a,Rde),e(Rde,Lwo),e($a,xwo),e(Ke,$wo),e(Ke,he),e(he,U1),e(U1,Pde),e(Pde,kwo),e(U1,Swo),e(U1,Gj),e(Gj,Rwo),e(U1,Pwo),e(he,Bwo),e(he,J1),e(J1,Bde),e(Bde,Iwo),e(J1,qwo),e(J1,Oj),e(Oj,Nwo),e(J1,jwo),e(he,Dwo),e(he,Y1),e(Y1,Ide),e(Ide,Gwo),e(Y1,Owo),e(Y1,Vj),e(Vj,Vwo),e(Y1,Xwo),e(he,zwo),e(he,K1),e(K1,qde),e(qde,Qwo),e(K1,Wwo),e(K1,Xj),e(Xj,Hwo),e(K1,Uwo),e(he,Jwo),e(he,Z1),e(Z1,Nde),e(Nde,Ywo),e(Z1,Kwo),e(Z1,zj),e(zj,Zwo),e(Z1,eAo),e(he,oAo),e(he,e8),e(e8,jde),e(jde,rAo),e(e8,tAo),e(e8,Qj),e(Qj,aAo),e(e8,nAo),e(he,sAo),e(he,o8),e(o8,Dde),e(Dde,lAo),e(o8,iAo),e(o8,Wj),e(Wj,dAo),e(o8,cAo),e(he,fAo),e(he,r8),e(r8,Gde),e(Gde,mAo),e(r8,gAo),e(r8,Hj),e(Hj,hAo),e(r8,pAo),e(he,uAo),e(he,t8),e(t8,Ode),e(Ode,_Ao),e(t8,bAo),e(t8,Uj),e(Uj,vAo),e(t8,FAo),e(he,TAo),e(he,a8),e(a8,Vde),e(Vde,MAo),e(a8,EAo),e(a8,Jj),e(Jj,CAo),e(a8,wAo),e(he,AAo),e(he,n8),e(n8,Xde),e(Xde,yAo),e(n8,LAo),e(n8,Yj),e(Yj,xAo),e(n8,$Ao),e(he,kAo),e(he,s8),e(s8,zde),e(zde,SAo),e(s8,RAo),e(s8,Kj),e(Kj,PAo),e(s8,BAo),e(he,IAo),e(he,l8),e(l8,Qde),e(Qde,qAo),e(l8,NAo),e(l8,Zj),e(Zj,jAo),e(l8,DAo),e(he,GAo),e(he,i8),e(i8,Wde),e(Wde,OAo),e(i8,VAo),e(i8,eD),e(eD,XAo),e(i8,zAo),e(he,QAo),e(he,d8),e(d8,Hde),e(Hde,WAo),e(d8,HAo),e(d8,oD),e(oD,UAo),e(d8,JAo),e(he,YAo),e(he,c8),e(c8,Ude),e(Ude,KAo),e(c8,ZAo),e(c8,rD),e(rD,e6o),e(c8,o6o),e(he,r6o),e(he,f8),e(f8,Jde),e(Jde,t6o),e(f8,a6o),e(f8,tD),e(tD,n6o),e(f8,s6o),e(Ke,l6o),e(Ke,m8),e(m8,i6o),e(m8,Yde),e(Yde,d6o),e(m8,c6o),e(m8,Kde),e(Kde,f6o),e(Ke,m6o),M(g8,Ke,null),b(f,nIe,_),b(f,qi,_),e(qi,h8),e(h8,Zde),M(QA,Zde,null),e(qi,g6o),e(qi,ece),e(ece,h6o),b(f,sIe,_),b(f,Ro,_),M(WA,Ro,null),e(Ro,p6o),e(Ro,Ni),e(Ni,u6o),e(Ni,aD),e(aD,_6o),e(Ni,b6o),e(Ni,nD),e(nD,v6o),e(Ni,F6o),e(Ro,T6o),e(Ro,HA),e(HA,M6o),e(HA,oce),e(oce,E6o),e(HA,C6o),e(Ro,w6o),e(Ro,st),M(UA,st,null),e(st,A6o),e(st,rce),e(rce,y6o),e(st,L6o),e(st,ji),e(ji,x6o),e(ji,tce),e(tce,$6o),e(ji,k6o),e(ji,sD),e(sD,S6o),e(ji,R6o),e(st,P6o),M(p8,st,null),e(Ro,B6o),e(Ro,Ze),M(JA,Ze,null),e(Ze,I6o),e(Ze,ace),e(ace,q6o),e(Ze,N6o),e(Ze,ka),e(ka,j6o),e(ka,nce),e(nce,D6o),e(ka,G6o),e(ka,sce),e(sce,O6o),e(ka,V6o),e(ka,lce),e(lce,X6o),e(ka,z6o),e(Ze,Q6o),e(Ze,q),e(q,u8),e(u8,ice),e(ice,W6o),e(u8,H6o),e(u8,lD),e(lD,U6o),e(u8,J6o),e(q,Y6o),e(q,_8),e(_8,dce),e(dce,K6o),e(_8,Z6o),e(_8,iD),e(iD,eyo),e(_8,oyo),e(q,ryo),e(q,b8),e(b8,cce),e(cce,tyo),e(b8,ayo),e(b8,dD),e(dD,nyo),e(b8,syo),e(q,lyo),e(q,v8),e(v8,fce),e(fce,iyo),e(v8,dyo),e(v8,cD),e(cD,cyo),e(v8,fyo),e(q,myo),e(q,F8),e(F8,mce),e(mce,gyo),e(F8,hyo),e(F8,fD),e(fD,pyo),e(F8,uyo),e(q,_yo),e(q,T8),e(T8,gce),e(gce,byo),e(T8,vyo),e(T8,mD),e(mD,Fyo),e(T8,Tyo),e(q,Myo),e(q,M8),e(M8,hce),e(hce,Eyo),e(M8,Cyo),e(M8,gD),e(gD,wyo),e(M8,Ayo),e(q,yyo),e(q,E8),e(E8,pce),e(pce,Lyo),e(E8,xyo),e(E8,hD),e(hD,$yo),e(E8,kyo),e(q,Syo),e(q,C8),e(C8,uce),e(uce,Ryo),e(C8,Pyo),e(C8,pD),e(pD,Byo),e(C8,Iyo),e(q,qyo),e(q,w8),e(w8,_ce),e(_ce,Nyo),e(w8,jyo),e(w8,uD),e(uD,Dyo),e(w8,Gyo),e(q,Oyo),e(q,A8),e(A8,bce),e(bce,Vyo),e(A8,Xyo),e(A8,_D),e(_D,zyo),e(A8,Qyo),e(q,Wyo),e(q,y8),e(y8,vce),e(vce,Hyo),e(y8,Uyo),e(y8,bD),e(bD,Jyo),e(y8,Yyo),e(q,Kyo),e(q,L8),e(L8,Fce),e(Fce,Zyo),e(L8,eLo),e(L8,vD),e(vD,oLo),e(L8,rLo),e(q,tLo),e(q,x8),e(x8,Tce),e(Tce,aLo),e(x8,nLo),e(x8,FD),e(FD,sLo),e(x8,lLo),e(q,iLo),e(q,$8),e($8,Mce),e(Mce,dLo),e($8,cLo),e($8,TD),e(TD,fLo),e($8,mLo),e(q,gLo),e(q,k8),e(k8,Ece),e(Ece,hLo),e(k8,pLo),e(k8,MD),e(MD,uLo),e(k8,_Lo),e(q,bLo),e(q,S8),e(S8,Cce),e(Cce,vLo),e(S8,FLo),e(S8,ED),e(ED,TLo),e(S8,MLo),e(q,ELo),e(q,R8),e(R8,wce),e(wce,CLo),e(R8,wLo),e(R8,CD),e(CD,ALo),e(R8,yLo),e(q,LLo),e(q,P8),e(P8,Ace),e(Ace,xLo),e(P8,$Lo),e(P8,wD),e(wD,kLo),e(P8,SLo),e(q,RLo),e(q,B8),e(B8,yce),e(yce,PLo),e(B8,BLo),e(B8,AD),e(AD,ILo),e(B8,qLo),e(q,NLo),e(q,I8),e(I8,Lce),e(Lce,jLo),e(I8,DLo),e(I8,yD),e(yD,GLo),e(I8,OLo),e(q,VLo),e(q,q8),e(q8,xce),e(xce,XLo),e(q8,zLo),e(q8,LD),e(LD,QLo),e(q8,WLo),e(q,HLo),e(q,N8),e(N8,$ce),e($ce,ULo),e(N8,JLo),e(N8,xD),e(xD,YLo),e(N8,KLo),e(q,ZLo),e(q,j8),e(j8,kce),e(kce,exo),e(j8,oxo),e(j8,$D),e($D,rxo),e(j8,txo),e(q,axo),e(q,D8),e(D8,Sce),e(Sce,nxo),e(D8,sxo),e(D8,kD),e(kD,lxo),e(D8,ixo),e(q,dxo),e(q,G8),e(G8,Rce),e(Rce,cxo),e(G8,fxo),e(G8,SD),e(SD,mxo),e(G8,gxo),e(q,hxo),e(q,O8),e(O8,Pce),e(Pce,pxo),e(O8,uxo),e(O8,RD),e(RD,_xo),e(O8,bxo),e(q,vxo),e(q,V8),e(V8,Bce),e(Bce,Fxo),e(V8,Txo),e(V8,PD),e(PD,Mxo),e(V8,Exo),e(q,Cxo),e(q,X8),e(X8,Ice),e(Ice,wxo),e(X8,Axo),e(X8,BD),e(BD,yxo),e(X8,Lxo),e(q,xxo),e(q,z8),e(z8,qce),e(qce,$xo),e(z8,kxo),e(z8,ID),e(ID,Sxo),e(z8,Rxo),e(q,Pxo),e(q,Q8),e(Q8,Nce),e(Nce,Bxo),e(Q8,Ixo),e(Q8,qD),e(qD,qxo),e(Q8,Nxo),e(q,jxo),e(q,W8),e(W8,jce),e(jce,Dxo),e(W8,Gxo),e(W8,ND),e(ND,Oxo),e(W8,Vxo),e(q,Xxo),e(q,H8),e(H8,Dce),e(Dce,zxo),e(H8,Qxo),e(H8,jD),e(jD,Wxo),e(H8,Hxo),e(q,Uxo),e(q,U8),e(U8,Gce),e(Gce,Jxo),e(U8,Yxo),e(U8,DD),e(DD,Kxo),e(U8,Zxo),e(q,e9o),e(q,J8),e(J8,Oce),e(Oce,o9o),e(J8,r9o),e(J8,GD),e(GD,t9o),e(J8,a9o),e(q,n9o),e(q,Y8),e(Y8,Vce),e(Vce,s9o),e(Y8,l9o),e(Y8,OD),e(OD,i9o),e(Y8,d9o),e(q,c9o),e(q,K8),e(K8,Xce),e(Xce,f9o),e(K8,m9o),e(K8,VD),e(VD,g9o),e(K8,h9o),e(q,p9o),e(q,Z8),e(Z8,zce),e(zce,u9o),e(Z8,_9o),e(Z8,XD),e(XD,b9o),e(Z8,v9o),e(q,F9o),e(q,eb),e(eb,Qce),e(Qce,T9o),e(eb,M9o),e(eb,zD),e(zD,E9o),e(eb,C9o),e(q,w9o),e(q,ob),e(ob,Wce),e(Wce,A9o),e(ob,y9o),e(ob,QD),e(QD,L9o),e(ob,x9o),e(q,$9o),e(q,rb),e(rb,Hce),e(Hce,k9o),e(rb,S9o),e(rb,WD),e(WD,R9o),e(rb,P9o),e(q,B9o),e(q,tb),e(tb,Uce),e(Uce,I9o),e(tb,q9o),e(tb,HD),e(HD,N9o),e(tb,j9o),e(q,D9o),e(q,ab),e(ab,Jce),e(Jce,G9o),e(ab,O9o),e(ab,UD),e(UD,V9o),e(ab,X9o),e(q,z9o),e(q,nb),e(nb,Yce),e(Yce,Q9o),e(nb,W9o),e(nb,JD),e(JD,H9o),e(nb,U9o),e(q,J9o),e(q,sb),e(sb,Kce),e(Kce,Y9o),e(sb,K9o),e(sb,YD),e(YD,Z9o),e(sb,e$o),e(q,o$o),e(q,lb),e(lb,Zce),e(Zce,r$o),e(lb,t$o),e(lb,KD),e(KD,a$o),e(lb,n$o),e(q,s$o),e(q,ib),e(ib,efe),e(efe,l$o),e(ib,i$o),e(ib,ZD),e(ZD,d$o),e(ib,c$o),e(Ze,f$o),e(Ze,db),e(db,m$o),e(db,ofe),e(ofe,g$o),e(db,h$o),e(db,rfe),e(rfe,p$o),e(Ze,u$o),M(cb,Ze,null),b(f,lIe,_),b(f,Di,_),e(Di,fb),e(fb,tfe),M(YA,tfe,null),e(Di,_$o),e(Di,afe),e(afe,b$o),b(f,iIe,_),b(f,Po,_),M(KA,Po,null),e(Po,v$o),e(Po,Gi),e(Gi,F$o),e(Gi,eG),e(eG,T$o),e(Gi,M$o),e(Gi,oG),e(oG,E$o),e(Gi,C$o),e(Po,w$o),e(Po,ZA),e(ZA,A$o),e(ZA,nfe),e(nfe,y$o),e(ZA,L$o),e(Po,x$o),e(Po,lt),M(e6,lt,null),e(lt,$$o),e(lt,sfe),e(sfe,k$o),e(lt,S$o),e(lt,Oi),e(Oi,R$o),e(Oi,lfe),e(lfe,P$o),e(Oi,B$o),e(Oi,rG),e(rG,I$o),e(Oi,q$o),e(lt,N$o),M(mb,lt,null),e(Po,j$o),e(Po,eo),M(o6,eo,null),e(eo,D$o),e(eo,ife),e(ife,G$o),e(eo,O$o),e(eo,Sa),e(Sa,V$o),e(Sa,dfe),e(dfe,X$o),e(Sa,z$o),e(Sa,cfe),e(cfe,Q$o),e(Sa,W$o),e(Sa,ffe),e(ffe,H$o),e(Sa,U$o),e(eo,J$o),e(eo,Y),e(Y,gb),e(gb,mfe),e(mfe,Y$o),e(gb,K$o),e(gb,tG),e(tG,Z$o),e(gb,eko),e(Y,oko),e(Y,hb),e(hb,gfe),e(gfe,rko),e(hb,tko),e(hb,aG),e(aG,ako),e(hb,nko),e(Y,sko),e(Y,pb),e(pb,hfe),e(hfe,lko),e(pb,iko),e(pb,nG),e(nG,dko),e(pb,cko),e(Y,fko),e(Y,ub),e(ub,pfe),e(pfe,mko),e(ub,gko),e(ub,sG),e(sG,hko),e(ub,pko),e(Y,uko),e(Y,_b),e(_b,ufe),e(ufe,_ko),e(_b,bko),e(_b,lG),e(lG,vko),e(_b,Fko),e(Y,Tko),e(Y,bb),e(bb,_fe),e(_fe,Mko),e(bb,Eko),e(bb,iG),e(iG,Cko),e(bb,wko),e(Y,Ako),e(Y,vb),e(vb,bfe),e(bfe,yko),e(vb,Lko),e(vb,dG),e(dG,xko),e(vb,$ko),e(Y,kko),e(Y,Fb),e(Fb,vfe),e(vfe,Sko),e(Fb,Rko),e(Fb,cG),e(cG,Pko),e(Fb,Bko),e(Y,Iko),e(Y,Tb),e(Tb,Ffe),e(Ffe,qko),e(Tb,Nko),e(Tb,fG),e(fG,jko),e(Tb,Dko),e(Y,Gko),e(Y,Mb),e(Mb,Tfe),e(Tfe,Oko),e(Mb,Vko),e(Mb,mG),e(mG,Xko),e(Mb,zko),e(Y,Qko),e(Y,Eb),e(Eb,Mfe),e(Mfe,Wko),e(Eb,Hko),e(Eb,gG),e(gG,Uko),e(Eb,Jko),e(Y,Yko),e(Y,Cb),e(Cb,Efe),e(Efe,Kko),e(Cb,Zko),e(Cb,hG),e(hG,eSo),e(Cb,oSo),e(Y,rSo),e(Y,wb),e(wb,Cfe),e(Cfe,tSo),e(wb,aSo),e(wb,pG),e(pG,nSo),e(wb,sSo),e(Y,lSo),e(Y,Ab),e(Ab,wfe),e(wfe,iSo),e(Ab,dSo),e(Ab,uG),e(uG,cSo),e(Ab,fSo),e(Y,mSo),e(Y,yb),e(yb,Afe),e(Afe,gSo),e(yb,hSo),e(yb,_G),e(_G,pSo),e(yb,uSo),e(Y,_So),e(Y,Lb),e(Lb,yfe),e(yfe,bSo),e(Lb,vSo),e(Lb,bG),e(bG,FSo),e(Lb,TSo),e(Y,MSo),e(Y,xb),e(xb,Lfe),e(Lfe,ESo),e(xb,CSo),e(xb,vG),e(vG,wSo),e(xb,ASo),e(Y,ySo),e(Y,$b),e($b,xfe),e(xfe,LSo),e($b,xSo),e($b,FG),e(FG,$So),e($b,kSo),e(Y,SSo),e(Y,kb),e(kb,$fe),e($fe,RSo),e(kb,PSo),e(kb,TG),e(TG,BSo),e(kb,ISo),e(Y,qSo),e(Y,Sb),e(Sb,kfe),e(kfe,NSo),e(Sb,jSo),e(Sb,MG),e(MG,DSo),e(Sb,GSo),e(Y,OSo),e(Y,Rb),e(Rb,Sfe),e(Sfe,VSo),e(Rb,XSo),e(Rb,EG),e(EG,zSo),e(Rb,QSo),e(Y,WSo),e(Y,Pb),e(Pb,Rfe),e(Rfe,HSo),e(Pb,USo),e(Pb,CG),e(CG,JSo),e(Pb,YSo),e(Y,KSo),e(Y,Bb),e(Bb,Pfe),e(Pfe,ZSo),e(Bb,eRo),e(Bb,wG),e(wG,oRo),e(Bb,rRo),e(Y,tRo),e(Y,Ib),e(Ib,Bfe),e(Bfe,aRo),e(Ib,nRo),e(Ib,AG),e(AG,sRo),e(Ib,lRo),e(Y,iRo),e(Y,qb),e(qb,Ife),e(Ife,dRo),e(qb,cRo),e(qb,yG),e(yG,fRo),e(qb,mRo),e(Y,gRo),e(Y,Nb),e(Nb,qfe),e(qfe,hRo),e(Nb,pRo),e(Nb,LG),e(LG,uRo),e(Nb,_Ro),e(Y,bRo),e(Y,jb),e(jb,Nfe),e(Nfe,vRo),e(jb,FRo),e(jb,xG),e(xG,TRo),e(jb,MRo),e(Y,ERo),e(Y,Db),e(Db,jfe),e(jfe,CRo),e(Db,wRo),e(Db,$G),e($G,ARo),e(Db,yRo),e(Y,LRo),e(Y,Gb),e(Gb,Dfe),e(Dfe,xRo),e(Gb,$Ro),e(Gb,kG),e(kG,kRo),e(Gb,SRo),e(eo,RRo),e(eo,Ob),e(Ob,PRo),e(Ob,Gfe),e(Gfe,BRo),e(Ob,IRo),e(Ob,Ofe),e(Ofe,qRo),e(eo,NRo),M(Vb,eo,null),b(f,dIe,_),b(f,Vi,_),e(Vi,Xb),e(Xb,Vfe),M(r6,Vfe,null),e(Vi,jRo),e(Vi,Xfe),e(Xfe,DRo),b(f,cIe,_),b(f,Bo,_),M(t6,Bo,null),e(Bo,GRo),e(Bo,Xi),e(Xi,ORo),e(Xi,SG),e(SG,VRo),e(Xi,XRo),e(Xi,RG),e(RG,zRo),e(Xi,QRo),e(Bo,WRo),e(Bo,a6),e(a6,HRo),e(a6,zfe),e(zfe,URo),e(a6,JRo),e(Bo,YRo),e(Bo,it),M(n6,it,null),e(it,KRo),e(it,Qfe),e(Qfe,ZRo),e(it,ePo),e(it,zi),e(zi,oPo),e(zi,Wfe),e(Wfe,rPo),e(zi,tPo),e(zi,PG),e(PG,aPo),e(zi,nPo),e(it,sPo),M(zb,it,null),e(Bo,lPo),e(Bo,oo),M(s6,oo,null),e(oo,iPo),e(oo,Hfe),e(Hfe,dPo),e(oo,cPo),e(oo,Ra),e(Ra,fPo),e(Ra,Ufe),e(Ufe,mPo),e(Ra,gPo),e(Ra,Jfe),e(Jfe,hPo),e(Ra,pPo),e(Ra,Yfe),e(Yfe,uPo),e(Ra,_Po),e(oo,bPo),e(oo,Yr),e(Yr,Qb),e(Qb,Kfe),e(Kfe,vPo),e(Qb,FPo),e(Qb,BG),e(BG,TPo),e(Qb,MPo),e(Yr,EPo),e(Yr,Wb),e(Wb,Zfe),e(Zfe,CPo),e(Wb,wPo),e(Wb,IG),e(IG,APo),e(Wb,yPo),e(Yr,LPo),e(Yr,Hb),e(Hb,eme),e(eme,xPo),e(Hb,$Po),e(Hb,qG),e(qG,kPo),e(Hb,SPo),e(Yr,RPo),e(Yr,Ub),e(Ub,ome),e(ome,PPo),e(Ub,BPo),e(Ub,NG),e(NG,IPo),e(Ub,qPo),e(Yr,NPo),e(Yr,Jb),e(Jb,rme),e(rme,jPo),e(Jb,DPo),e(Jb,jG),e(jG,GPo),e(Jb,OPo),e(oo,VPo),e(oo,Yb),e(Yb,XPo),e(Yb,tme),e(tme,zPo),e(Yb,QPo),e(Yb,ame),e(ame,WPo),e(oo,HPo),M(Kb,oo,null),b(f,fIe,_),b(f,Qi,_),e(Qi,Zb),e(Zb,nme),M(l6,nme,null),e(Qi,UPo),e(Qi,sme),e(sme,JPo),b(f,mIe,_),b(f,Io,_),M(i6,Io,null),e(Io,YPo),e(Io,Wi),e(Wi,KPo),e(Wi,DG),e(DG,ZPo),e(Wi,eBo),e(Wi,GG),e(GG,oBo),e(Wi,rBo),e(Io,tBo),e(Io,d6),e(d6,aBo),e(d6,lme),e(lme,nBo),e(d6,sBo),e(Io,lBo),e(Io,dt),M(c6,dt,null),e(dt,iBo),e(dt,ime),e(ime,dBo),e(dt,cBo),e(dt,Hi),e(Hi,fBo),e(Hi,dme),e(dme,mBo),e(Hi,gBo),e(Hi,OG),e(OG,hBo),e(Hi,pBo),e(dt,uBo),M(e2,dt,null),e(Io,_Bo),e(Io,ro),M(f6,ro,null),e(ro,bBo),e(ro,cme),e(cme,vBo),e(ro,FBo),e(ro,Pa),e(Pa,TBo),e(Pa,fme),e(fme,MBo),e(Pa,EBo),e(Pa,mme),e(mme,CBo),e(Pa,wBo),e(Pa,gme),e(gme,ABo),e(Pa,yBo),e(ro,LBo),e(ro,U),e(U,o2),e(o2,hme),e(hme,xBo),e(o2,$Bo),e(o2,VG),e(VG,kBo),e(o2,SBo),e(U,RBo),e(U,r2),e(r2,pme),e(pme,PBo),e(r2,BBo),e(r2,XG),e(XG,IBo),e(r2,qBo),e(U,NBo),e(U,t2),e(t2,ume),e(ume,jBo),e(t2,DBo),e(t2,zG),e(zG,GBo),e(t2,OBo),e(U,VBo),e(U,a2),e(a2,_me),e(_me,XBo),e(a2,zBo),e(a2,QG),e(QG,QBo),e(a2,WBo),e(U,HBo),e(U,n2),e(n2,bme),e(bme,UBo),e(n2,JBo),e(n2,WG),e(WG,YBo),e(n2,KBo),e(U,ZBo),e(U,s2),e(s2,vme),e(vme,eIo),e(s2,oIo),e(s2,HG),e(HG,rIo),e(s2,tIo),e(U,aIo),e(U,l2),e(l2,Fme),e(Fme,nIo),e(l2,sIo),e(l2,UG),e(UG,lIo),e(l2,iIo),e(U,dIo),e(U,i2),e(i2,Tme),e(Tme,cIo),e(i2,fIo),e(i2,JG),e(JG,mIo),e(i2,gIo),e(U,hIo),e(U,d2),e(d2,Mme),e(Mme,pIo),e(d2,uIo),e(d2,YG),e(YG,_Io),e(d2,bIo),e(U,vIo),e(U,c2),e(c2,Eme),e(Eme,FIo),e(c2,TIo),e(c2,KG),e(KG,MIo),e(c2,EIo),e(U,CIo),e(U,f2),e(f2,Cme),e(Cme,wIo),e(f2,AIo),e(f2,ZG),e(ZG,yIo),e(f2,LIo),e(U,xIo),e(U,m2),e(m2,wme),e(wme,$Io),e(m2,kIo),e(m2,eO),e(eO,SIo),e(m2,RIo),e(U,PIo),e(U,g2),e(g2,Ame),e(Ame,BIo),e(g2,IIo),e(g2,oO),e(oO,qIo),e(g2,NIo),e(U,jIo),e(U,h2),e(h2,yme),e(yme,DIo),e(h2,GIo),e(h2,rO),e(rO,OIo),e(h2,VIo),e(U,XIo),e(U,p2),e(p2,Lme),e(Lme,zIo),e(p2,QIo),e(p2,tO),e(tO,WIo),e(p2,HIo),e(U,UIo),e(U,u2),e(u2,xme),e(xme,JIo),e(u2,YIo),e(u2,aO),e(aO,KIo),e(u2,ZIo),e(U,eqo),e(U,_2),e(_2,$me),e($me,oqo),e(_2,rqo),e(_2,nO),e(nO,tqo),e(_2,aqo),e(U,nqo),e(U,b2),e(b2,kme),e(kme,sqo),e(b2,lqo),e(b2,sO),e(sO,iqo),e(b2,dqo),e(U,cqo),e(U,v2),e(v2,Sme),e(Sme,fqo),e(v2,mqo),e(v2,lO),e(lO,gqo),e(v2,hqo),e(U,pqo),e(U,F2),e(F2,Rme),e(Rme,uqo),e(F2,_qo),e(F2,iO),e(iO,bqo),e(F2,vqo),e(U,Fqo),e(U,T2),e(T2,Pme),e(Pme,Tqo),e(T2,Mqo),e(T2,dO),e(dO,Eqo),e(T2,Cqo),e(U,wqo),e(U,M2),e(M2,Bme),e(Bme,Aqo),e(M2,yqo),e(M2,cO),e(cO,Lqo),e(M2,xqo),e(U,$qo),e(U,E2),e(E2,Ime),e(Ime,kqo),e(E2,Sqo),e(E2,fO),e(fO,Rqo),e(E2,Pqo),e(U,Bqo),e(U,C2),e(C2,qme),e(qme,Iqo),e(C2,qqo),e(C2,mO),e(mO,Nqo),e(C2,jqo),e(U,Dqo),e(U,w2),e(w2,Nme),e(Nme,Gqo),e(w2,Oqo),e(w2,gO),e(gO,Vqo),e(w2,Xqo),e(U,zqo),e(U,A2),e(A2,jme),e(jme,Qqo),e(A2,Wqo),e(A2,hO),e(hO,Hqo),e(A2,Uqo),e(U,Jqo),e(U,y2),e(y2,Dme),e(Dme,Yqo),e(y2,Kqo),e(y2,pO),e(pO,Zqo),e(y2,eNo),e(U,oNo),e(U,L2),e(L2,Gme),e(Gme,rNo),e(L2,tNo),e(L2,uO),e(uO,aNo),e(L2,nNo),e(U,sNo),e(U,x2),e(x2,Ome),e(Ome,lNo),e(x2,iNo),e(x2,_O),e(_O,dNo),e(x2,cNo),e(U,fNo),e(U,$2),e($2,Vme),e(Vme,mNo),e($2,gNo),e($2,bO),e(bO,hNo),e($2,pNo),e(U,uNo),e(U,k2),e(k2,Xme),e(Xme,_No),e(k2,bNo),e(k2,vO),e(vO,vNo),e(k2,FNo),e(U,TNo),e(U,S2),e(S2,zme),e(zme,MNo),e(S2,ENo),e(S2,FO),e(FO,CNo),e(S2,wNo),e(U,ANo),e(U,R2),e(R2,Qme),e(Qme,yNo),e(R2,LNo),e(R2,TO),e(TO,xNo),e(R2,$No),e(ro,kNo),e(ro,P2),e(P2,SNo),e(P2,Wme),e(Wme,RNo),e(P2,PNo),e(P2,Hme),e(Hme,BNo),e(ro,INo),M(B2,ro,null),b(f,gIe,_),b(f,Ui,_),e(Ui,I2),e(I2,Ume),M(m6,Ume,null),e(Ui,qNo),e(Ui,Jme),e(Jme,NNo),b(f,hIe,_),b(f,qo,_),M(g6,qo,null),e(qo,jNo),e(qo,Ji),e(Ji,DNo),e(Ji,MO),e(MO,GNo),e(Ji,ONo),e(Ji,EO),e(EO,VNo),e(Ji,XNo),e(qo,zNo),e(qo,h6),e(h6,QNo),e(h6,Yme),e(Yme,WNo),e(h6,HNo),e(qo,UNo),e(qo,ct),M(p6,ct,null),e(ct,JNo),e(ct,Kme),e(Kme,YNo),e(ct,KNo),e(ct,Yi),e(Yi,ZNo),e(Yi,Zme),e(Zme,ejo),e(Yi,ojo),e(Yi,CO),e(CO,rjo),e(Yi,tjo),e(ct,ajo),M(q2,ct,null),e(qo,njo),e(qo,to),M(u6,to,null),e(to,sjo),e(to,ege),e(ege,ljo),e(to,ijo),e(to,Ba),e(Ba,djo),e(Ba,oge),e(oge,cjo),e(Ba,fjo),e(Ba,rge),e(rge,mjo),e(Ba,gjo),e(Ba,tge),e(tge,hjo),e(Ba,pjo),e(to,ujo),e(to,O),e(O,N2),e(N2,age),e(age,_jo),e(N2,bjo),e(N2,wO),e(wO,vjo),e(N2,Fjo),e(O,Tjo),e(O,j2),e(j2,nge),e(nge,Mjo),e(j2,Ejo),e(j2,AO),e(AO,Cjo),e(j2,wjo),e(O,Ajo),e(O,D2),e(D2,sge),e(sge,yjo),e(D2,Ljo),e(D2,yO),e(yO,xjo),e(D2,$jo),e(O,kjo),e(O,G2),e(G2,lge),e(lge,Sjo),e(G2,Rjo),e(G2,LO),e(LO,Pjo),e(G2,Bjo),e(O,Ijo),e(O,O2),e(O2,ige),e(ige,qjo),e(O2,Njo),e(O2,xO),e(xO,jjo),e(O2,Djo),e(O,Gjo),e(O,V2),e(V2,dge),e(dge,Ojo),e(V2,Vjo),e(V2,$O),e($O,Xjo),e(V2,zjo),e(O,Qjo),e(O,X2),e(X2,cge),e(cge,Wjo),e(X2,Hjo),e(X2,kO),e(kO,Ujo),e(X2,Jjo),e(O,Yjo),e(O,z2),e(z2,fge),e(fge,Kjo),e(z2,Zjo),e(z2,SO),e(SO,eDo),e(z2,oDo),e(O,rDo),e(O,Q2),e(Q2,mge),e(mge,tDo),e(Q2,aDo),e(Q2,RO),e(RO,nDo),e(Q2,sDo),e(O,lDo),e(O,W2),e(W2,gge),e(gge,iDo),e(W2,dDo),e(W2,PO),e(PO,cDo),e(W2,fDo),e(O,mDo),e(O,H2),e(H2,hge),e(hge,gDo),e(H2,hDo),e(H2,BO),e(BO,pDo),e(H2,uDo),e(O,_Do),e(O,U2),e(U2,pge),e(pge,bDo),e(U2,vDo),e(U2,IO),e(IO,FDo),e(U2,TDo),e(O,MDo),e(O,J2),e(J2,uge),e(uge,EDo),e(J2,CDo),e(J2,qO),e(qO,wDo),e(J2,ADo),e(O,yDo),e(O,Y2),e(Y2,_ge),e(_ge,LDo),e(Y2,xDo),e(Y2,NO),e(NO,$Do),e(Y2,kDo),e(O,SDo),e(O,K2),e(K2,bge),e(bge,RDo),e(K2,PDo),e(K2,jO),e(jO,BDo),e(K2,IDo),e(O,qDo),e(O,Z2),e(Z2,vge),e(vge,NDo),e(Z2,jDo),e(Z2,DO),e(DO,DDo),e(Z2,GDo),e(O,ODo),e(O,ev),e(ev,Fge),e(Fge,VDo),e(ev,XDo),e(ev,GO),e(GO,zDo),e(ev,QDo),e(O,WDo),e(O,ov),e(ov,Tge),e(Tge,HDo),e(ov,UDo),e(ov,OO),e(OO,JDo),e(ov,YDo),e(O,KDo),e(O,rv),e(rv,Mge),e(Mge,ZDo),e(rv,eGo),e(rv,VO),e(VO,oGo),e(rv,rGo),e(O,tGo),e(O,tv),e(tv,Ege),e(Ege,aGo),e(tv,nGo),e(tv,XO),e(XO,sGo),e(tv,lGo),e(O,iGo),e(O,av),e(av,Cge),e(Cge,dGo),e(av,cGo),e(av,zO),e(zO,fGo),e(av,mGo),e(O,gGo),e(O,nv),e(nv,wge),e(wge,hGo),e(nv,pGo),e(nv,QO),e(QO,uGo),e(nv,_Go),e(O,bGo),e(O,sv),e(sv,Age),e(Age,vGo),e(sv,FGo),e(sv,WO),e(WO,TGo),e(sv,MGo),e(O,EGo),e(O,lv),e(lv,yge),e(yge,CGo),e(lv,wGo),e(lv,HO),e(HO,AGo),e(lv,yGo),e(O,LGo),e(O,iv),e(iv,Lge),e(Lge,xGo),e(iv,$Go),e(iv,UO),e(UO,kGo),e(iv,SGo),e(O,RGo),e(O,dv),e(dv,xge),e(xge,PGo),e(dv,BGo),e(dv,JO),e(JO,IGo),e(dv,qGo),e(O,NGo),e(O,cv),e(cv,$ge),e($ge,jGo),e(cv,DGo),e(cv,YO),e(YO,GGo),e(cv,OGo),e(O,VGo),e(O,fv),e(fv,kge),e(kge,XGo),e(fv,zGo),e(fv,KO),e(KO,QGo),e(fv,WGo),e(O,HGo),e(O,mv),e(mv,Sge),e(Sge,UGo),e(mv,JGo),e(mv,ZO),e(ZO,YGo),e(mv,KGo),e(O,ZGo),e(O,gv),e(gv,Rge),e(Rge,eOo),e(gv,oOo),e(gv,eV),e(eV,rOo),e(gv,tOo),e(O,aOo),e(O,hv),e(hv,Pge),e(Pge,nOo),e(hv,sOo),e(hv,oV),e(oV,lOo),e(hv,iOo),e(O,dOo),e(O,pv),e(pv,Bge),e(Bge,cOo),e(pv,fOo),e(pv,rV),e(rV,mOo),e(pv,gOo),e(O,hOo),e(O,uv),e(uv,Ige),e(Ige,pOo),e(uv,uOo),e(uv,tV),e(tV,_Oo),e(uv,bOo),e(O,vOo),e(O,_v),e(_v,qge),e(qge,FOo),e(_v,TOo),e(_v,aV),e(aV,MOo),e(_v,EOo),e(O,COo),e(O,bv),e(bv,Nge),e(Nge,wOo),e(bv,AOo),e(bv,nV),e(nV,yOo),e(bv,LOo),e(O,xOo),e(O,vv),e(vv,jge),e(jge,$Oo),e(vv,kOo),e(vv,sV),e(sV,SOo),e(vv,ROo),e(O,POo),e(O,Fv),e(Fv,Dge),e(Dge,BOo),e(Fv,IOo),e(Fv,lV),e(lV,qOo),e(Fv,NOo),e(O,jOo),e(O,Tv),e(Tv,Gge),e(Gge,DOo),e(Tv,GOo),e(Tv,iV),e(iV,OOo),e(Tv,VOo),e(O,XOo),e(O,Mv),e(Mv,Oge),e(Oge,zOo),e(Mv,QOo),e(Mv,dV),e(dV,WOo),e(Mv,HOo),e(to,UOo),e(to,Ev),e(Ev,JOo),e(Ev,Vge),e(Vge,YOo),e(Ev,KOo),e(Ev,Xge),e(Xge,ZOo),e(to,eVo),M(Cv,to,null),b(f,pIe,_),b(f,Ki,_),e(Ki,wv),e(wv,zge),M(_6,zge,null),e(Ki,oVo),e(Ki,Qge),e(Qge,rVo),b(f,uIe,_),b(f,No,_),M(b6,No,null),e(No,tVo),e(No,Zi),e(Zi,aVo),e(Zi,cV),e(cV,nVo),e(Zi,sVo),e(Zi,fV),e(fV,lVo),e(Zi,iVo),e(No,dVo),e(No,v6),e(v6,cVo),e(v6,Wge),e(Wge,fVo),e(v6,mVo),e(No,gVo),e(No,ft),M(F6,ft,null),e(ft,hVo),e(ft,Hge),e(Hge,pVo),e(ft,uVo),e(ft,ed),e(ed,_Vo),e(ed,Uge),e(Uge,bVo),e(ed,vVo),e(ed,mV),e(mV,FVo),e(ed,TVo),e(ft,MVo),M(Av,ft,null),e(No,EVo),e(No,ao),M(T6,ao,null),e(ao,CVo),e(ao,Jge),e(Jge,wVo),e(ao,AVo),e(ao,Ia),e(Ia,yVo),e(Ia,Yge),e(Yge,LVo),e(Ia,xVo),e(Ia,Kge),e(Kge,$Vo),e(Ia,kVo),e(Ia,Zge),e(Zge,SVo),e(Ia,RVo),e(ao,PVo),e(ao,ehe),e(ehe,yv),e(yv,ohe),e(ohe,BVo),e(yv,IVo),e(yv,gV),e(gV,qVo),e(yv,NVo),e(ao,jVo),e(ao,Lv),e(Lv,DVo),e(Lv,rhe),e(rhe,GVo),e(Lv,OVo),e(Lv,the),e(the,VVo),e(ao,XVo),M(xv,ao,null),b(f,_Ie,_),b(f,od,_),e(od,$v),e($v,ahe),M(M6,ahe,null),e(od,zVo),e(od,nhe),e(nhe,QVo),b(f,bIe,_),b(f,jo,_),M(E6,jo,null),e(jo,WVo),e(jo,rd),e(rd,HVo),e(rd,hV),e(hV,UVo),e(rd,JVo),e(rd,pV),e(pV,YVo),e(rd,KVo),e(jo,ZVo),e(jo,C6),e(C6,eXo),e(C6,she),e(she,oXo),e(C6,rXo),e(jo,tXo),e(jo,mt),M(w6,mt,null),e(mt,aXo),e(mt,lhe),e(lhe,nXo),e(mt,sXo),e(mt,td),e(td,lXo),e(td,ihe),e(ihe,iXo),e(td,dXo),e(td,uV),e(uV,cXo),e(td,fXo),e(mt,mXo),M(kv,mt,null),e(jo,gXo),e(jo,no),M(A6,no,null),e(no,hXo),e(no,dhe),e(dhe,pXo),e(no,uXo),e(no,qa),e(qa,_Xo),e(qa,che),e(che,bXo),e(qa,vXo),e(qa,fhe),e(fhe,FXo),e(qa,TXo),e(qa,mhe),e(mhe,MXo),e(qa,EXo),e(no,CXo),e(no,ve),e(ve,Sv),e(Sv,ghe),e(ghe,wXo),e(Sv,AXo),e(Sv,_V),e(_V,yXo),e(Sv,LXo),e(ve,xXo),e(ve,Rv),e(Rv,hhe),e(hhe,$Xo),e(Rv,kXo),e(Rv,bV),e(bV,SXo),e(Rv,RXo),e(ve,PXo),e(ve,Pv),e(Pv,phe),e(phe,BXo),e(Pv,IXo),e(Pv,vV),e(vV,qXo),e(Pv,NXo),e(ve,jXo),e(ve,Ps),e(Ps,uhe),e(uhe,DXo),e(Ps,GXo),e(Ps,FV),e(FV,OXo),e(Ps,VXo),e(Ps,TV),e(TV,XXo),e(Ps,zXo),e(ve,QXo),e(ve,Bv),e(Bv,_he),e(_he,WXo),e(Bv,HXo),e(Bv,MV),e(MV,UXo),e(Bv,JXo),e(ve,YXo),e(ve,gt),e(gt,bhe),e(bhe,KXo),e(gt,ZXo),e(gt,EV),e(EV,ezo),e(gt,ozo),e(gt,CV),e(CV,rzo),e(gt,tzo),e(gt,wV),e(wV,azo),e(gt,nzo),e(ve,szo),e(ve,Iv),e(Iv,vhe),e(vhe,lzo),e(Iv,izo),e(Iv,AV),e(AV,dzo),e(Iv,czo),e(ve,fzo),e(ve,qv),e(qv,Fhe),e(Fhe,mzo),e(qv,gzo),e(qv,yV),e(yV,hzo),e(qv,pzo),e(ve,uzo),e(ve,Nv),e(Nv,The),e(The,_zo),e(Nv,bzo),e(Nv,LV),e(LV,vzo),e(Nv,Fzo),e(ve,Tzo),e(ve,jv),e(jv,Mhe),e(Mhe,Mzo),e(jv,Ezo),e(jv,xV),e(xV,Czo),e(jv,wzo),e(ve,Azo),e(ve,Dv),e(Dv,Ehe),e(Ehe,yzo),e(Dv,Lzo),e(Dv,$V),e($V,xzo),e(Dv,$zo),e(ve,kzo),e(ve,Gv),e(Gv,Che),e(Che,Szo),e(Gv,Rzo),e(Gv,kV),e(kV,Pzo),e(Gv,Bzo),e(ve,Izo),e(ve,Ov),e(Ov,whe),e(whe,qzo),e(Ov,Nzo),e(Ov,SV),e(SV,jzo),e(Ov,Dzo),e(no,Gzo),e(no,Vv),e(Vv,Ozo),e(Vv,Ahe),e(Ahe,Vzo),e(Vv,Xzo),e(Vv,yhe),e(yhe,zzo),e(no,Qzo),M(Xv,no,null),b(f,vIe,_),b(f,ad,_),e(ad,zv),e(zv,Lhe),M(y6,Lhe,null),e(ad,Wzo),e(ad,xhe),e(xhe,Hzo),b(f,FIe,_),b(f,Do,_),M(L6,Do,null),e(Do,Uzo),e(Do,nd),e(nd,Jzo),e(nd,RV),e(RV,Yzo),e(nd,Kzo),e(nd,PV),e(PV,Zzo),e(nd,eQo),e(Do,oQo),e(Do,x6),e(x6,rQo),e(x6,$he),e($he,tQo),e(x6,aQo),e(Do,nQo),e(Do,ht),M($6,ht,null),e(ht,sQo),e(ht,khe),e(khe,lQo),e(ht,iQo),e(ht,sd),e(sd,dQo),e(sd,She),e(She,cQo),e(sd,fQo),e(sd,BV),e(BV,mQo),e(sd,gQo),e(ht,hQo),M(Qv,ht,null),e(Do,pQo),e(Do,so),M(k6,so,null),e(so,uQo),e(so,Rhe),e(Rhe,_Qo),e(so,bQo),e(so,Na),e(Na,vQo),e(Na,Phe),e(Phe,FQo),e(Na,TQo),e(Na,Bhe),e(Bhe,MQo),e(Na,EQo),e(Na,Ihe),e(Ihe,CQo),e(Na,wQo),e(so,AQo),e(so,qhe),e(qhe,Wv),e(Wv,Nhe),e(Nhe,yQo),e(Wv,LQo),e(Wv,IV),e(IV,xQo),e(Wv,$Qo),e(so,kQo),e(so,Hv),e(Hv,SQo),e(Hv,jhe),e(jhe,RQo),e(Hv,PQo),e(Hv,Dhe),e(Dhe,BQo),e(so,IQo),M(Uv,so,null),b(f,TIe,_),b(f,ld,_),e(ld,Jv),e(Jv,Ghe),M(S6,Ghe,null),e(ld,qQo),e(ld,Ohe),e(Ohe,NQo),b(f,MIe,_),b(f,Go,_),M(R6,Go,null),e(Go,jQo),e(Go,id),e(id,DQo),e(id,qV),e(qV,GQo),e(id,OQo),e(id,NV),e(NV,VQo),e(id,XQo),e(Go,zQo),e(Go,P6),e(P6,QQo),e(P6,Vhe),e(Vhe,WQo),e(P6,HQo),e(Go,UQo),e(Go,pt),M(B6,pt,null),e(pt,JQo),e(pt,Xhe),e(Xhe,YQo),e(pt,KQo),e(pt,dd),e(dd,ZQo),e(dd,zhe),e(zhe,eWo),e(dd,oWo),e(dd,jV),e(jV,rWo),e(dd,tWo),e(pt,aWo),M(Yv,pt,null),e(Go,nWo),e(Go,lo),M(I6,lo,null),e(lo,sWo),e(lo,Qhe),e(Qhe,lWo),e(lo,iWo),e(lo,ja),e(ja,dWo),e(ja,Whe),e(Whe,cWo),e(ja,fWo),e(ja,Hhe),e(Hhe,mWo),e(ja,gWo),e(ja,Uhe),e(Uhe,hWo),e(ja,pWo),e(lo,uWo),e(lo,je),e(je,Kv),e(Kv,Jhe),e(Jhe,_Wo),e(Kv,bWo),e(Kv,DV),e(DV,vWo),e(Kv,FWo),e(je,TWo),e(je,Zv),e(Zv,Yhe),e(Yhe,MWo),e(Zv,EWo),e(Zv,GV),e(GV,CWo),e(Zv,wWo),e(je,AWo),e(je,eF),e(eF,Khe),e(Khe,yWo),e(eF,LWo),e(eF,OV),e(OV,xWo),e(eF,$Wo),e(je,kWo),e(je,oF),e(oF,Zhe),e(Zhe,SWo),e(oF,RWo),e(oF,VV),e(VV,PWo),e(oF,BWo),e(je,IWo),e(je,rF),e(rF,epe),e(epe,qWo),e(rF,NWo),e(rF,XV),e(XV,jWo),e(rF,DWo),e(je,GWo),e(je,tF),e(tF,ope),e(ope,OWo),e(tF,VWo),e(tF,zV),e(zV,XWo),e(tF,zWo),e(je,QWo),e(je,aF),e(aF,rpe),e(rpe,WWo),e(aF,HWo),e(aF,QV),e(QV,UWo),e(aF,JWo),e(je,YWo),e(je,nF),e(nF,tpe),e(tpe,KWo),e(nF,ZWo),e(nF,WV),e(WV,eHo),e(nF,oHo),e(lo,rHo),e(lo,sF),e(sF,tHo),e(sF,ape),e(ape,aHo),e(sF,nHo),e(sF,npe),e(npe,sHo),e(lo,lHo),M(lF,lo,null),b(f,EIe,_),b(f,cd,_),e(cd,iF),e(iF,spe),M(q6,spe,null),e(cd,iHo),e(cd,lpe),e(lpe,dHo),b(f,CIe,_),b(f,Oo,_),M(N6,Oo,null),e(Oo,cHo),e(Oo,fd),e(fd,fHo),e(fd,HV),e(HV,mHo),e(fd,gHo),e(fd,UV),e(UV,hHo),e(fd,pHo),e(Oo,uHo),e(Oo,j6),e(j6,_Ho),e(j6,ipe),e(ipe,bHo),e(j6,vHo),e(Oo,FHo),e(Oo,ut),M(D6,ut,null),e(ut,THo),e(ut,dpe),e(dpe,MHo),e(ut,EHo),e(ut,md),e(md,CHo),e(md,cpe),e(cpe,wHo),e(md,AHo),e(md,JV),e(JV,yHo),e(md,LHo),e(ut,xHo),M(dF,ut,null),e(Oo,$Ho),e(Oo,io),M(G6,io,null),e(io,kHo),e(io,fpe),e(fpe,SHo),e(io,RHo),e(io,Da),e(Da,PHo),e(Da,mpe),e(mpe,BHo),e(Da,IHo),e(Da,gpe),e(gpe,qHo),e(Da,NHo),e(Da,hpe),e(hpe,jHo),e(Da,DHo),e(io,GHo),e(io,Ga),e(Ga,cF),e(cF,ppe),e(ppe,OHo),e(cF,VHo),e(cF,YV),e(YV,XHo),e(cF,zHo),e(Ga,QHo),e(Ga,fF),e(fF,upe),e(upe,WHo),e(fF,HHo),e(fF,KV),e(KV,UHo),e(fF,JHo),e(Ga,YHo),e(Ga,mF),e(mF,_pe),e(_pe,KHo),e(mF,ZHo),e(mF,ZV),e(ZV,eUo),e(mF,oUo),e(Ga,rUo),e(Ga,gF),e(gF,bpe),e(bpe,tUo),e(gF,aUo),e(gF,eX),e(eX,nUo),e(gF,sUo),e(io,lUo),e(io,hF),e(hF,iUo),e(hF,vpe),e(vpe,dUo),e(hF,cUo),e(hF,Fpe),e(Fpe,fUo),e(io,mUo),M(pF,io,null),b(f,wIe,_),b(f,gd,_),e(gd,uF),e(uF,Tpe),M(O6,Tpe,null),e(gd,gUo),e(gd,Mpe),e(Mpe,hUo),b(f,AIe,_),b(f,Vo,_),M(V6,Vo,null),e(Vo,pUo),e(Vo,hd),e(hd,uUo),e(hd,oX),e(oX,_Uo),e(hd,bUo),e(hd,rX),e(rX,vUo),e(hd,FUo),e(Vo,TUo),e(Vo,X6),e(X6,MUo),e(X6,Epe),e(Epe,EUo),e(X6,CUo),e(Vo,wUo),e(Vo,_t),M(z6,_t,null),e(_t,AUo),e(_t,Cpe),e(Cpe,yUo),e(_t,LUo),e(_t,pd),e(pd,xUo),e(pd,wpe),e(wpe,$Uo),e(pd,kUo),e(pd,tX),e(tX,SUo),e(pd,RUo),e(_t,PUo),M(_F,_t,null),e(Vo,BUo),e(Vo,co),M(Q6,co,null),e(co,IUo),e(co,Ape),e(Ape,qUo),e(co,NUo),e(co,Oa),e(Oa,jUo),e(Oa,ype),e(ype,DUo),e(Oa,GUo),e(Oa,Lpe),e(Lpe,OUo),e(Oa,VUo),e(Oa,xpe),e(xpe,XUo),e(Oa,zUo),e(co,QUo),e(co,De),e(De,bF),e(bF,$pe),e($pe,WUo),e(bF,HUo),e(bF,aX),e(aX,UUo),e(bF,JUo),e(De,YUo),e(De,vF),e(vF,kpe),e(kpe,KUo),e(vF,ZUo),e(vF,nX),e(nX,eJo),e(vF,oJo),e(De,rJo),e(De,FF),e(FF,Spe),e(Spe,tJo),e(FF,aJo),e(FF,sX),e(sX,nJo),e(FF,sJo),e(De,lJo),e(De,TF),e(TF,Rpe),e(Rpe,iJo),e(TF,dJo),e(TF,lX),e(lX,cJo),e(TF,fJo),e(De,mJo),e(De,MF),e(MF,Ppe),e(Ppe,gJo),e(MF,hJo),e(MF,iX),e(iX,pJo),e(MF,uJo),e(De,_Jo),e(De,EF),e(EF,Bpe),e(Bpe,bJo),e(EF,vJo),e(EF,dX),e(dX,FJo),e(EF,TJo),e(De,MJo),e(De,CF),e(CF,Ipe),e(Ipe,EJo),e(CF,CJo),e(CF,cX),e(cX,wJo),e(CF,AJo),e(De,yJo),e(De,wF),e(wF,qpe),e(qpe,LJo),e(wF,xJo),e(wF,fX),e(fX,$Jo),e(wF,kJo),e(co,SJo),e(co,AF),e(AF,RJo),e(AF,Npe),e(Npe,PJo),e(AF,BJo),e(AF,jpe),e(jpe,IJo),e(co,qJo),M(yF,co,null),b(f,yIe,_),b(f,ud,_),e(ud,LF),e(LF,Dpe),M(W6,Dpe,null),e(ud,NJo),e(ud,Gpe),e(Gpe,jJo),b(f,LIe,_),b(f,Xo,_),M(H6,Xo,null),e(Xo,DJo),e(Xo,_d),e(_d,GJo),e(_d,mX),e(mX,OJo),e(_d,VJo),e(_d,gX),e(gX,XJo),e(_d,zJo),e(Xo,QJo),e(Xo,U6),e(U6,WJo),e(U6,Ope),e(Ope,HJo),e(U6,UJo),e(Xo,JJo),e(Xo,bt),M(J6,bt,null),e(bt,YJo),e(bt,Vpe),e(Vpe,KJo),e(bt,ZJo),e(bt,bd),e(bd,eYo),e(bd,Xpe),e(Xpe,oYo),e(bd,rYo),e(bd,hX),e(hX,tYo),e(bd,aYo),e(bt,nYo),M(xF,bt,null),e(Xo,sYo),e(Xo,fo),M(Y6,fo,null),e(fo,lYo),e(fo,zpe),e(zpe,iYo),e(fo,dYo),e(fo,Va),e(Va,cYo),e(Va,Qpe),e(Qpe,fYo),e(Va,mYo),e(Va,Wpe),e(Wpe,gYo),e(Va,hYo),e(Va,Hpe),e(Hpe,pYo),e(Va,uYo),e(fo,_Yo),e(fo,K6),e(K6,$F),e($F,Upe),e(Upe,bYo),e($F,vYo),e($F,pX),e(pX,FYo),e($F,TYo),e(K6,MYo),e(K6,kF),e(kF,Jpe),e(Jpe,EYo),e(kF,CYo),e(kF,uX),e(uX,wYo),e(kF,AYo),e(fo,yYo),e(fo,SF),e(SF,LYo),e(SF,Ype),e(Ype,xYo),e(SF,$Yo),e(SF,Kpe),e(Kpe,kYo),e(fo,SYo),M(RF,fo,null),b(f,xIe,_),b(f,vd,_),e(vd,PF),e(PF,Zpe),M(Z6,Zpe,null),e(vd,RYo),e(vd,eue),e(eue,PYo),b(f,$Ie,_),b(f,zo,_),M(ey,zo,null),e(zo,BYo),e(zo,Fd),e(Fd,IYo),e(Fd,_X),e(_X,qYo),e(Fd,NYo),e(Fd,bX),e(bX,jYo),e(Fd,DYo),e(zo,GYo),e(zo,oy),e(oy,OYo),e(oy,oue),e(oue,VYo),e(oy,XYo),e(zo,zYo),e(zo,vt),M(ry,vt,null),e(vt,QYo),e(vt,rue),e(rue,WYo),e(vt,HYo),e(vt,Td),e(Td,UYo),e(Td,tue),e(tue,JYo),e(Td,YYo),e(Td,vX),e(vX,KYo),e(Td,ZYo),e(vt,eKo),M(BF,vt,null),e(zo,oKo),e(zo,mo),M(ty,mo,null),e(mo,rKo),e(mo,aue),e(aue,tKo),e(mo,aKo),e(mo,Xa),e(Xa,nKo),e(Xa,nue),e(nue,sKo),e(Xa,lKo),e(Xa,sue),e(sue,iKo),e(Xa,dKo),e(Xa,lue),e(lue,cKo),e(Xa,fKo),e(mo,mKo),e(mo,za),e(za,IF),e(IF,iue),e(iue,gKo),e(IF,hKo),e(IF,FX),e(FX,pKo),e(IF,uKo),e(za,_Ko),e(za,qF),e(qF,due),e(due,bKo),e(qF,vKo),e(qF,TX),e(TX,FKo),e(qF,TKo),e(za,MKo),e(za,NF),e(NF,cue),e(cue,EKo),e(NF,CKo),e(NF,MX),e(MX,wKo),e(NF,AKo),e(za,yKo),e(za,jF),e(jF,fue),e(fue,LKo),e(jF,xKo),e(jF,EX),e(EX,$Ko),e(jF,kKo),e(mo,SKo),e(mo,DF),e(DF,RKo),e(DF,mue),e(mue,PKo),e(DF,BKo),e(DF,gue),e(gue,IKo),e(mo,qKo),M(GF,mo,null),b(f,kIe,_),b(f,Md,_),e(Md,OF),e(OF,hue),M(ay,hue,null),e(Md,NKo),e(Md,pue),e(pue,jKo),b(f,SIe,_),b(f,Qo,_),M(ny,Qo,null),e(Qo,DKo),e(Qo,Ed),e(Ed,GKo),e(Ed,CX),e(CX,OKo),e(Ed,VKo),e(Ed,wX),e(wX,XKo),e(Ed,zKo),e(Qo,QKo),e(Qo,sy),e(sy,WKo),e(sy,uue),e(uue,HKo),e(sy,UKo),e(Qo,JKo),e(Qo,Ft),M(ly,Ft,null),e(Ft,YKo),e(Ft,_ue),e(_ue,KKo),e(Ft,ZKo),e(Ft,Cd),e(Cd,eZo),e(Cd,bue),e(bue,oZo),e(Cd,rZo),e(Cd,AX),e(AX,tZo),e(Cd,aZo),e(Ft,nZo),M(VF,Ft,null),e(Qo,sZo),e(Qo,go),M(iy,go,null),e(go,lZo),e(go,vue),e(vue,iZo),e(go,dZo),e(go,Qa),e(Qa,cZo),e(Qa,Fue),e(Fue,fZo),e(Qa,mZo),e(Qa,Tue),e(Tue,gZo),e(Qa,hZo),e(Qa,Mue),e(Mue,pZo),e(Qa,uZo),e(go,_Zo),e(go,wd),e(wd,XF),e(XF,Eue),e(Eue,bZo),e(XF,vZo),e(XF,yX),e(yX,FZo),e(XF,TZo),e(wd,MZo),e(wd,zF),e(zF,Cue),e(Cue,EZo),e(zF,CZo),e(zF,LX),e(LX,wZo),e(zF,AZo),e(wd,yZo),e(wd,QF),e(QF,wue),e(wue,LZo),e(QF,xZo),e(QF,xX),e(xX,$Zo),e(QF,kZo),e(go,SZo),e(go,WF),e(WF,RZo),e(WF,Aue),e(Aue,PZo),e(WF,BZo),e(WF,yue),e(yue,IZo),e(go,qZo),M(HF,go,null),b(f,RIe,_),b(f,Ad,_),e(Ad,UF),e(UF,Lue),M(dy,Lue,null),e(Ad,NZo),e(Ad,xue),e(xue,jZo),b(f,PIe,_),b(f,Wo,_),M(cy,Wo,null),e(Wo,DZo),e(Wo,yd),e(yd,GZo),e(yd,$X),e($X,OZo),e(yd,VZo),e(yd,kX),e(kX,XZo),e(yd,zZo),e(Wo,QZo),e(Wo,fy),e(fy,WZo),e(fy,$ue),e($ue,HZo),e(fy,UZo),e(Wo,JZo),e(Wo,Tt),M(my,Tt,null),e(Tt,YZo),e(Tt,kue),e(kue,KZo),e(Tt,ZZo),e(Tt,Ld),e(Ld,eer),e(Ld,Sue),e(Sue,oer),e(Ld,rer),e(Ld,SX),e(SX,ter),e(Ld,aer),e(Tt,ner),M(JF,Tt,null),e(Wo,ser),e(Wo,ho),M(gy,ho,null),e(ho,ler),e(ho,Rue),e(Rue,ier),e(ho,der),e(ho,Wa),e(Wa,cer),e(Wa,Pue),e(Pue,fer),e(Wa,mer),e(Wa,Bue),e(Bue,ger),e(Wa,her),e(Wa,Iue),e(Iue,per),e(Wa,uer),e(ho,_er),e(ho,hy),e(hy,YF),e(YF,que),e(que,ber),e(YF,ver),e(YF,RX),e(RX,Fer),e(YF,Ter),e(hy,Mer),e(hy,KF),e(KF,Nue),e(Nue,Eer),e(KF,Cer),e(KF,PX),e(PX,wer),e(KF,Aer),e(ho,yer),e(ho,ZF),e(ZF,Ler),e(ZF,jue),e(jue,xer),e(ZF,$er),e(ZF,Due),e(Due,ker),e(ho,Ser),M(e0,ho,null),b(f,BIe,_),b(f,xd,_),e(xd,o0),e(o0,Gue),M(py,Gue,null),e(xd,Rer),e(xd,Oue),e(Oue,Per),b(f,IIe,_),b(f,Ho,_),M(uy,Ho,null),e(Ho,Ber),e(Ho,$d),e($d,Ier),e($d,BX),e(BX,qer),e($d,Ner),e($d,IX),e(IX,jer),e($d,Der),e(Ho,Ger),e(Ho,_y),e(_y,Oer),e(_y,Vue),e(Vue,Ver),e(_y,Xer),e(Ho,zer),e(Ho,Mt),M(by,Mt,null),e(Mt,Qer),e(Mt,Xue),e(Xue,Wer),e(Mt,Her),e(Mt,kd),e(kd,Uer),e(kd,zue),e(zue,Jer),e(kd,Yer),e(kd,qX),e(qX,Ker),e(kd,Zer),e(Mt,eor),M(r0,Mt,null),e(Ho,oor),e(Ho,po),M(vy,po,null),e(po,ror),e(po,Que),e(Que,tor),e(po,aor),e(po,Ha),e(Ha,nor),e(Ha,Wue),e(Wue,sor),e(Ha,lor),e(Ha,Hue),e(Hue,ior),e(Ha,dor),e(Ha,Uue),e(Uue,cor),e(Ha,mor),e(po,gor),e(po,Jue),e(Jue,t0),e(t0,Yue),e(Yue,hor),e(t0,por),e(t0,NX),e(NX,uor),e(t0,_or),e(po,bor),e(po,a0),e(a0,vor),e(a0,Kue),e(Kue,For),e(a0,Tor),e(a0,Zue),e(Zue,Mor),e(po,Eor),M(n0,po,null),b(f,qIe,_),b(f,Sd,_),e(Sd,s0),e(s0,e_e),M(Fy,e_e,null),e(Sd,Cor),e(Sd,o_e),e(o_e,wor),b(f,NIe,_),b(f,Uo,_),M(Ty,Uo,null),e(Uo,Aor),e(Uo,Rd),e(Rd,yor),e(Rd,jX),e(jX,Lor),e(Rd,xor),e(Rd,DX),e(DX,$or),e(Rd,kor),e(Uo,Sor),e(Uo,My),e(My,Ror),e(My,r_e),e(r_e,Por),e(My,Bor),e(Uo,Ior),e(Uo,Et),M(Ey,Et,null),e(Et,qor),e(Et,t_e),e(t_e,Nor),e(Et,jor),e(Et,Pd),e(Pd,Dor),e(Pd,a_e),e(a_e,Gor),e(Pd,Oor),e(Pd,GX),e(GX,Vor),e(Pd,Xor),e(Et,zor),M(l0,Et,null),e(Uo,Qor),e(Uo,uo),M(Cy,uo,null),e(uo,Wor),e(uo,n_e),e(n_e,Hor),e(uo,Uor),e(uo,Ua),e(Ua,Jor),e(Ua,s_e),e(s_e,Yor),e(Ua,Kor),e(Ua,l_e),e(l_e,Zor),e(Ua,err),e(Ua,i_e),e(i_e,orr),e(Ua,rrr),e(uo,trr),e(uo,Ja),e(Ja,i0),e(i0,d_e),e(d_e,arr),e(i0,nrr),e(i0,OX),e(OX,srr),e(i0,lrr),e(Ja,irr),e(Ja,d0),e(d0,c_e),e(c_e,drr),e(d0,crr),e(d0,VX),e(VX,frr),e(d0,mrr),e(Ja,grr),e(Ja,c0),e(c0,f_e),e(f_e,hrr),e(c0,prr),e(c0,XX),e(XX,urr),e(c0,_rr),e(Ja,brr),e(Ja,f0),e(f0,m_e),e(m_e,vrr),e(f0,Frr),e(f0,zX),e(zX,Trr),e(f0,Mrr),e(uo,Err),e(uo,m0),e(m0,Crr),e(m0,g_e),e(g_e,wrr),e(m0,Arr),e(m0,h_e),e(h_e,yrr),e(uo,Lrr),M(g0,uo,null),b(f,jIe,_),b(f,Bd,_),e(Bd,h0),e(h0,p_e),M(wy,p_e,null),e(Bd,xrr),e(Bd,u_e),e(u_e,$rr),b(f,DIe,_),b(f,Jo,_),M(Ay,Jo,null),e(Jo,krr),e(Jo,Id),e(Id,Srr),e(Id,QX),e(QX,Rrr),e(Id,Prr),e(Id,WX),e(WX,Brr),e(Id,Irr),e(Jo,qrr),e(Jo,yy),e(yy,Nrr),e(yy,__e),e(__e,jrr),e(yy,Drr),e(Jo,Grr),e(Jo,Ct),M(Ly,Ct,null),e(Ct,Orr),e(Ct,b_e),e(b_e,Vrr),e(Ct,Xrr),e(Ct,qd),e(qd,zrr),e(qd,v_e),e(v_e,Qrr),e(qd,Wrr),e(qd,HX),e(HX,Hrr),e(qd,Urr),e(Ct,Jrr),M(p0,Ct,null),e(Jo,Yrr),e(Jo,_o),M(xy,_o,null),e(_o,Krr),e(_o,F_e),e(F_e,Zrr),e(_o,etr),e(_o,Ya),e(Ya,otr),e(Ya,T_e),e(T_e,rtr),e(Ya,ttr),e(Ya,M_e),e(M_e,atr),e(Ya,ntr),e(Ya,E_e),e(E_e,str),e(Ya,ltr),e(_o,itr),e(_o,C_e),e(C_e,u0),e(u0,w_e),e(w_e,dtr),e(u0,ctr),e(u0,UX),e(UX,ftr),e(u0,mtr),e(_o,gtr),e(_o,_0),e(_0,htr),e(_0,A_e),e(A_e,ptr),e(_0,utr),e(_0,y_e),e(y_e,_tr),e(_o,btr),M(b0,_o,null),b(f,GIe,_),b(f,Nd,_),e(Nd,v0),e(v0,L_e),M($y,L_e,null),e(Nd,vtr),e(Nd,x_e),e(x_e,Ftr),b(f,OIe,_),b(f,Yo,_),M(ky,Yo,null),e(Yo,Ttr),e(Yo,jd),e(jd,Mtr),e(jd,JX),e(JX,Etr),e(jd,Ctr),e(jd,YX),e(YX,wtr),e(jd,Atr),e(Yo,ytr),e(Yo,Sy),e(Sy,Ltr),e(Sy,$_e),e($_e,xtr),e(Sy,$tr),e(Yo,ktr),e(Yo,wt),M(Ry,wt,null),e(wt,Str),e(wt,k_e),e(k_e,Rtr),e(wt,Ptr),e(wt,Dd),e(Dd,Btr),e(Dd,S_e),e(S_e,Itr),e(Dd,qtr),e(Dd,KX),e(KX,Ntr),e(Dd,jtr),e(wt,Dtr),M(F0,wt,null),e(Yo,Gtr),e(Yo,wr),M(Py,wr,null),e(wr,Otr),e(wr,R_e),e(R_e,Vtr),e(wr,Xtr),e(wr,Ka),e(Ka,ztr),e(Ka,P_e),e(P_e,Qtr),e(Ka,Wtr),e(Ka,B_e),e(B_e,Htr),e(Ka,Utr),e(Ka,I_e),e(I_e,Jtr),e(Ka,Ytr),e(wr,Ktr),e(wr,N),e(N,T0),e(T0,q_e),e(q_e,Ztr),e(T0,ear),e(T0,ZX),e(ZX,oar),e(T0,rar),e(N,tar),e(N,M0),e(M0,N_e),e(N_e,aar),e(M0,nar),e(M0,ez),e(ez,sar),e(M0,lar),e(N,iar),e(N,E0),e(E0,j_e),e(j_e,dar),e(E0,car),e(E0,oz),e(oz,far),e(E0,mar),e(N,gar),e(N,C0),e(C0,D_e),e(D_e,har),e(C0,par),e(C0,rz),e(rz,uar),e(C0,_ar),e(N,bar),e(N,w0),e(w0,G_e),e(G_e,Far),e(w0,Tar),e(w0,tz),e(tz,Mar),e(w0,Ear),e(N,Car),e(N,A0),e(A0,O_e),e(O_e,war),e(A0,Aar),e(A0,az),e(az,yar),e(A0,Lar),e(N,xar),e(N,y0),e(y0,V_e),e(V_e,$ar),e(y0,kar),e(y0,nz),e(nz,Sar),e(y0,Rar),e(N,Par),e(N,L0),e(L0,X_e),e(X_e,Bar),e(L0,Iar),e(L0,sz),e(sz,qar),e(L0,Nar),e(N,jar),e(N,x0),e(x0,z_e),e(z_e,Dar),e(x0,Gar),e(x0,lz),e(lz,Oar),e(x0,Var),e(N,Xar),e(N,$0),e($0,Q_e),e(Q_e,zar),e($0,Qar),e($0,iz),e(iz,War),e($0,Har),e(N,Uar),e(N,k0),e(k0,W_e),e(W_e,Jar),e(k0,Yar),e(k0,dz),e(dz,Kar),e(k0,Zar),e(N,enr),e(N,S0),e(S0,H_e),e(H_e,onr),e(S0,rnr),e(S0,cz),e(cz,tnr),e(S0,anr),e(N,nnr),e(N,R0),e(R0,U_e),e(U_e,snr),e(R0,lnr),e(R0,fz),e(fz,inr),e(R0,dnr),e(N,cnr),e(N,P0),e(P0,J_e),e(J_e,fnr),e(P0,mnr),e(P0,mz),e(mz,gnr),e(P0,hnr),e(N,pnr),e(N,B0),e(B0,Y_e),e(Y_e,unr),e(B0,_nr),e(B0,gz),e(gz,bnr),e(B0,vnr),e(N,Fnr),e(N,I0),e(I0,K_e),e(K_e,Tnr),e(I0,Mnr),e(I0,hz),e(hz,Enr),e(I0,Cnr),e(N,wnr),e(N,q0),e(q0,Z_e),e(Z_e,Anr),e(q0,ynr),e(q0,pz),e(pz,Lnr),e(q0,xnr),e(N,$nr),e(N,Bs),e(Bs,e1e),e(e1e,knr),e(Bs,Snr),e(Bs,uz),e(uz,Rnr),e(Bs,Pnr),e(Bs,_z),e(_z,Bnr),e(Bs,Inr),e(N,qnr),e(N,N0),e(N0,o1e),e(o1e,Nnr),e(N0,jnr),e(N0,bz),e(bz,Dnr),e(N0,Gnr),e(N,Onr),e(N,j0),e(j0,r1e),e(r1e,Vnr),e(j0,Xnr),e(j0,vz),e(vz,znr),e(j0,Qnr),e(N,Wnr),e(N,D0),e(D0,t1e),e(t1e,Hnr),e(D0,Unr),e(D0,Fz),e(Fz,Jnr),e(D0,Ynr),e(N,Knr),e(N,G0),e(G0,a1e),e(a1e,Znr),e(G0,esr),e(G0,Tz),e(Tz,osr),e(G0,rsr),e(N,tsr),e(N,O0),e(O0,n1e),e(n1e,asr),e(O0,nsr),e(O0,Mz),e(Mz,ssr),e(O0,lsr),e(N,isr),e(N,V0),e(V0,s1e),e(s1e,dsr),e(V0,csr),e(V0,Ez),e(Ez,fsr),e(V0,msr),e(N,gsr),e(N,X0),e(X0,l1e),e(l1e,hsr),e(X0,psr),e(X0,Cz),e(Cz,usr),e(X0,_sr),e(N,bsr),e(N,z0),e(z0,i1e),e(i1e,vsr),e(z0,Fsr),e(z0,wz),e(wz,Tsr),e(z0,Msr),e(N,Esr),e(N,Q0),e(Q0,d1e),e(d1e,Csr),e(Q0,wsr),e(Q0,Az),e(Az,Asr),e(Q0,ysr),e(N,Lsr),e(N,W0),e(W0,c1e),e(c1e,xsr),e(W0,$sr),e(W0,yz),e(yz,ksr),e(W0,Ssr),e(N,Rsr),e(N,H0),e(H0,f1e),e(f1e,Psr),e(H0,Bsr),e(H0,Lz),e(Lz,Isr),e(H0,qsr),e(N,Nsr),e(N,U0),e(U0,m1e),e(m1e,jsr),e(U0,Dsr),e(U0,xz),e(xz,Gsr),e(U0,Osr),e(N,Vsr),e(N,J0),e(J0,g1e),e(g1e,Xsr),e(J0,zsr),e(J0,$z),e($z,Qsr),e(J0,Wsr),e(N,Hsr),e(N,Y0),e(Y0,h1e),e(h1e,Usr),e(Y0,Jsr),e(Y0,kz),e(kz,Ysr),e(Y0,Ksr),e(N,Zsr),e(N,K0),e(K0,p1e),e(p1e,elr),e(K0,olr),e(K0,Sz),e(Sz,rlr),e(K0,tlr),e(N,alr),e(N,Z0),e(Z0,u1e),e(u1e,nlr),e(Z0,slr),e(Z0,Rz),e(Rz,llr),e(Z0,ilr),e(N,dlr),e(N,eT),e(eT,_1e),e(_1e,clr),e(eT,flr),e(eT,Pz),e(Pz,mlr),e(eT,glr),e(N,hlr),e(N,oT),e(oT,b1e),e(b1e,plr),e(oT,ulr),e(oT,Bz),e(Bz,_lr),e(oT,blr),e(N,vlr),e(N,rT),e(rT,v1e),e(v1e,Flr),e(rT,Tlr),e(rT,Iz),e(Iz,Mlr),e(rT,Elr),e(N,Clr),e(N,tT),e(tT,F1e),e(F1e,wlr),e(tT,Alr),e(tT,qz),e(qz,ylr),e(tT,Llr),e(N,xlr),e(N,aT),e(aT,T1e),e(T1e,$lr),e(aT,klr),e(aT,Nz),e(Nz,Slr),e(aT,Rlr),e(N,Plr),e(N,nT),e(nT,M1e),e(M1e,Blr),e(nT,Ilr),e(nT,jz),e(jz,qlr),e(nT,Nlr),e(N,jlr),e(N,sT),e(sT,E1e),e(E1e,Dlr),e(sT,Glr),e(sT,Dz),e(Dz,Olr),e(sT,Vlr),e(N,Xlr),e(N,lT),e(lT,C1e),e(C1e,zlr),e(lT,Qlr),e(lT,Gz),e(Gz,Wlr),e(lT,Hlr),e(N,Ulr),e(N,iT),e(iT,w1e),e(w1e,Jlr),e(iT,Ylr),e(iT,Oz),e(Oz,Klr),e(iT,Zlr),e(N,eir),e(N,dT),e(dT,A1e),e(A1e,oir),e(dT,rir),e(dT,Vz),e(Vz,tir),e(dT,air),e(N,nir),e(N,cT),e(cT,y1e),e(y1e,sir),e(cT,lir),e(cT,Xz),e(Xz,iir),e(cT,dir),e(N,cir),e(N,fT),e(fT,L1e),e(L1e,fir),e(fT,mir),e(fT,zz),e(zz,gir),e(fT,hir),e(wr,pir),M(mT,wr,null),b(f,VIe,_),b(f,Gd,_),e(Gd,gT),e(gT,x1e),M(By,x1e,null),e(Gd,uir),e(Gd,$1e),e($1e,_ir),b(f,XIe,_),b(f,Ko,_),M(Iy,Ko,null),e(Ko,bir),e(Ko,Od),e(Od,vir),e(Od,Qz),e(Qz,Fir),e(Od,Tir),e(Od,Wz),e(Wz,Mir),e(Od,Eir),e(Ko,Cir),e(Ko,qy),e(qy,wir),e(qy,k1e),e(k1e,Air),e(qy,yir),e(Ko,Lir),e(Ko,At),M(Ny,At,null),e(At,xir),e(At,S1e),e(S1e,$ir),e(At,kir),e(At,Vd),e(Vd,Sir),e(Vd,R1e),e(R1e,Rir),e(Vd,Pir),e(Vd,Hz),e(Hz,Bir),e(Vd,Iir),e(At,qir),M(hT,At,null),e(Ko,Nir),e(Ko,Ar),M(jy,Ar,null),e(Ar,jir),e(Ar,P1e),e(P1e,Dir),e(Ar,Gir),e(Ar,Za),e(Za,Oir),e(Za,B1e),e(B1e,Vir),e(Za,Xir),e(Za,I1e),e(I1e,zir),e(Za,Qir),e(Za,q1e),e(q1e,Wir),e(Za,Hir),e(Ar,Uir),e(Ar,ne),e(ne,pT),e(pT,N1e),e(N1e,Jir),e(pT,Yir),e(pT,Uz),e(Uz,Kir),e(pT,Zir),e(ne,edr),e(ne,uT),e(uT,j1e),e(j1e,odr),e(uT,rdr),e(uT,Jz),e(Jz,tdr),e(uT,adr),e(ne,ndr),e(ne,_T),e(_T,D1e),e(D1e,sdr),e(_T,ldr),e(_T,Yz),e(Yz,idr),e(_T,ddr),e(ne,cdr),e(ne,bT),e(bT,G1e),e(G1e,fdr),e(bT,mdr),e(bT,Kz),e(Kz,gdr),e(bT,hdr),e(ne,pdr),e(ne,vT),e(vT,O1e),e(O1e,udr),e(vT,_dr),e(vT,Zz),e(Zz,bdr),e(vT,vdr),e(ne,Fdr),e(ne,FT),e(FT,V1e),e(V1e,Tdr),e(FT,Mdr),e(FT,eQ),e(eQ,Edr),e(FT,Cdr),e(ne,wdr),e(ne,TT),e(TT,X1e),e(X1e,Adr),e(TT,ydr),e(TT,oQ),e(oQ,Ldr),e(TT,xdr),e(ne,$dr),e(ne,MT),e(MT,z1e),e(z1e,kdr),e(MT,Sdr),e(MT,rQ),e(rQ,Rdr),e(MT,Pdr),e(ne,Bdr),e(ne,ET),e(ET,Q1e),e(Q1e,Idr),e(ET,qdr),e(ET,tQ),e(tQ,Ndr),e(ET,jdr),e(ne,Ddr),e(ne,CT),e(CT,W1e),e(W1e,Gdr),e(CT,Odr),e(CT,aQ),e(aQ,Vdr),e(CT,Xdr),e(ne,zdr),e(ne,wT),e(wT,H1e),e(H1e,Qdr),e(wT,Wdr),e(wT,nQ),e(nQ,Hdr),e(wT,Udr),e(ne,Jdr),e(ne,AT),e(AT,U1e),e(U1e,Ydr),e(AT,Kdr),e(AT,sQ),e(sQ,Zdr),e(AT,ecr),e(ne,ocr),e(ne,yT),e(yT,J1e),e(J1e,rcr),e(yT,tcr),e(yT,lQ),e(lQ,acr),e(yT,ncr),e(ne,scr),e(ne,LT),e(LT,Y1e),e(Y1e,lcr),e(LT,icr),e(LT,iQ),e(iQ,dcr),e(LT,ccr),e(ne,fcr),e(ne,xT),e(xT,K1e),e(K1e,mcr),e(xT,gcr),e(xT,dQ),e(dQ,hcr),e(xT,pcr),e(ne,ucr),e(ne,$T),e($T,Z1e),e(Z1e,_cr),e($T,bcr),e($T,cQ),e(cQ,vcr),e($T,Fcr),e(ne,Tcr),e(ne,kT),e(kT,e8e),e(e8e,Mcr),e(kT,Ecr),e(kT,fQ),e(fQ,Ccr),e(kT,wcr),e(ne,Acr),e(ne,ST),e(ST,o8e),e(o8e,ycr),e(ST,Lcr),e(ST,mQ),e(mQ,xcr),e(ST,$cr),e(ne,kcr),e(ne,RT),e(RT,r8e),e(r8e,Scr),e(RT,Rcr),e(RT,gQ),e(gQ,Pcr),e(RT,Bcr),e(ne,Icr),e(ne,PT),e(PT,t8e),e(t8e,qcr),e(PT,Ncr),e(PT,hQ),e(hQ,jcr),e(PT,Dcr),e(ne,Gcr),e(ne,BT),e(BT,a8e),e(a8e,Ocr),e(BT,Vcr),e(BT,pQ),e(pQ,Xcr),e(BT,zcr),e(ne,Qcr),e(ne,IT),e(IT,n8e),e(n8e,Wcr),e(IT,Hcr),e(IT,uQ),e(uQ,Ucr),e(IT,Jcr),e(ne,Ycr),e(ne,qT),e(qT,s8e),e(s8e,Kcr),e(qT,Zcr),e(qT,_Q),e(_Q,efr),e(qT,ofr),e(Ar,rfr),M(NT,Ar,null),b(f,zIe,_),b(f,Xd,_),e(Xd,jT),e(jT,l8e),M(Dy,l8e,null),e(Xd,tfr),e(Xd,i8e),e(i8e,afr),b(f,QIe,_),b(f,Zo,_),M(Gy,Zo,null),e(Zo,nfr),e(Zo,zd),e(zd,sfr),e(zd,bQ),e(bQ,lfr),e(zd,ifr),e(zd,vQ),e(vQ,dfr),e(zd,cfr),e(Zo,ffr),e(Zo,Oy),e(Oy,mfr),e(Oy,d8e),e(d8e,gfr),e(Oy,hfr),e(Zo,pfr),e(Zo,yt),M(Vy,yt,null),e(yt,ufr),e(yt,c8e),e(c8e,_fr),e(yt,bfr),e(yt,Qd),e(Qd,vfr),e(Qd,f8e),e(f8e,Ffr),e(Qd,Tfr),e(Qd,FQ),e(FQ,Mfr),e(Qd,Efr),e(yt,Cfr),M(DT,yt,null),e(Zo,wfr),e(Zo,yr),M(Xy,yr,null),e(yr,Afr),e(yr,m8e),e(m8e,yfr),e(yr,Lfr),e(yr,en),e(en,xfr),e(en,g8e),e(g8e,$fr),e(en,kfr),e(en,h8e),e(h8e,Sfr),e(en,Rfr),e(en,p8e),e(p8e,Pfr),e(en,Bfr),e(yr,Ifr),e(yr,Te),e(Te,GT),e(GT,u8e),e(u8e,qfr),e(GT,Nfr),e(GT,TQ),e(TQ,jfr),e(GT,Dfr),e(Te,Gfr),e(Te,OT),e(OT,_8e),e(_8e,Ofr),e(OT,Vfr),e(OT,MQ),e(MQ,Xfr),e(OT,zfr),e(Te,Qfr),e(Te,VT),e(VT,b8e),e(b8e,Wfr),e(VT,Hfr),e(VT,EQ),e(EQ,Ufr),e(VT,Jfr),e(Te,Yfr),e(Te,XT),e(XT,v8e),e(v8e,Kfr),e(XT,Zfr),e(XT,CQ),e(CQ,emr),e(XT,omr),e(Te,rmr),e(Te,zT),e(zT,F8e),e(F8e,tmr),e(zT,amr),e(zT,wQ),e(wQ,nmr),e(zT,smr),e(Te,lmr),e(Te,QT),e(QT,T8e),e(T8e,imr),e(QT,dmr),e(QT,AQ),e(AQ,cmr),e(QT,fmr),e(Te,mmr),e(Te,WT),e(WT,M8e),e(M8e,gmr),e(WT,hmr),e(WT,yQ),e(yQ,pmr),e(WT,umr),e(Te,_mr),e(Te,HT),e(HT,E8e),e(E8e,bmr),e(HT,vmr),e(HT,LQ),e(LQ,Fmr),e(HT,Tmr),e(Te,Mmr),e(Te,UT),e(UT,C8e),e(C8e,Emr),e(UT,Cmr),e(UT,xQ),e(xQ,wmr),e(UT,Amr),e(Te,ymr),e(Te,JT),e(JT,w8e),e(w8e,Lmr),e(JT,xmr),e(JT,$Q),e($Q,$mr),e(JT,kmr),e(Te,Smr),e(Te,YT),e(YT,A8e),e(A8e,Rmr),e(YT,Pmr),e(YT,kQ),e(kQ,Bmr),e(YT,Imr),e(Te,qmr),e(Te,KT),e(KT,y8e),e(y8e,Nmr),e(KT,jmr),e(KT,SQ),e(SQ,Dmr),e(KT,Gmr),e(yr,Omr),M(ZT,yr,null),b(f,WIe,_),b(f,Wd,_),e(Wd,e7),e(e7,L8e),M(zy,L8e,null),e(Wd,Vmr),e(Wd,x8e),e(x8e,Xmr),b(f,HIe,_),b(f,er,_),M(Qy,er,null),e(er,zmr),e(er,Hd),e(Hd,Qmr),e(Hd,RQ),e(RQ,Wmr),e(Hd,Hmr),e(Hd,PQ),e(PQ,Umr),e(Hd,Jmr),e(er,Ymr),e(er,Wy),e(Wy,Kmr),e(Wy,$8e),e($8e,Zmr),e(Wy,egr),e(er,ogr),e(er,Lt),M(Hy,Lt,null),e(Lt,rgr),e(Lt,k8e),e(k8e,tgr),e(Lt,agr),e(Lt,Ud),e(Ud,ngr),e(Ud,S8e),e(S8e,sgr),e(Ud,lgr),e(Ud,BQ),e(BQ,igr),e(Ud,dgr),e(Lt,cgr),M(o7,Lt,null),e(er,fgr),e(er,Lr),M(Uy,Lr,null),e(Lr,mgr),e(Lr,R8e),e(R8e,ggr),e(Lr,hgr),e(Lr,on),e(on,pgr),e(on,P8e),e(P8e,ugr),e(on,_gr),e(on,B8e),e(B8e,bgr),e(on,vgr),e(on,I8e),e(I8e,Fgr),e(on,Tgr),e(Lr,Mgr),e(Lr,Jd),e(Jd,r7),e(r7,q8e),e(q8e,Egr),e(r7,Cgr),e(r7,IQ),e(IQ,wgr),e(r7,Agr),e(Jd,ygr),e(Jd,t7),e(t7,N8e),e(N8e,Lgr),e(t7,xgr),e(t7,qQ),e(qQ,$gr),e(t7,kgr),e(Jd,Sgr),e(Jd,a7),e(a7,j8e),e(j8e,Rgr),e(a7,Pgr),e(a7,NQ),e(NQ,Bgr),e(a7,Igr),e(Lr,qgr),M(n7,Lr,null),b(f,UIe,_),b(f,Yd,_),e(Yd,s7),e(s7,D8e),M(Jy,D8e,null),e(Yd,Ngr),e(Yd,G8e),e(G8e,jgr),b(f,JIe,_),b(f,or,_),M(Yy,or,null),e(or,Dgr),e(or,Kd),e(Kd,Ggr),e(Kd,jQ),e(jQ,Ogr),e(Kd,Vgr),e(Kd,DQ),e(DQ,Xgr),e(Kd,zgr),e(or,Qgr),e(or,Ky),e(Ky,Wgr),e(Ky,O8e),e(O8e,Hgr),e(Ky,Ugr),e(or,Jgr),e(or,xt),M(Zy,xt,null),e(xt,Ygr),e(xt,V8e),e(V8e,Kgr),e(xt,Zgr),e(xt,Zd),e(Zd,ehr),e(Zd,X8e),e(X8e,ohr),e(Zd,rhr),e(Zd,GQ),e(GQ,thr),e(Zd,ahr),e(xt,nhr),M(l7,xt,null),e(or,shr),e(or,xr),M(eL,xr,null),e(xr,lhr),e(xr,z8e),e(z8e,ihr),e(xr,dhr),e(xr,rn),e(rn,chr),e(rn,Q8e),e(Q8e,fhr),e(rn,mhr),e(rn,W8e),e(W8e,ghr),e(rn,hhr),e(rn,H8e),e(H8e,phr),e(rn,uhr),e(xr,_hr),e(xr,ie),e(ie,i7),e(i7,U8e),e(U8e,bhr),e(i7,vhr),e(i7,OQ),e(OQ,Fhr),e(i7,Thr),e(ie,Mhr),e(ie,d7),e(d7,J8e),e(J8e,Ehr),e(d7,Chr),e(d7,VQ),e(VQ,whr),e(d7,Ahr),e(ie,yhr),e(ie,c7),e(c7,Y8e),e(Y8e,Lhr),e(c7,xhr),e(c7,XQ),e(XQ,$hr),e(c7,khr),e(ie,Shr),e(ie,f7),e(f7,K8e),e(K8e,Rhr),e(f7,Phr),e(f7,zQ),e(zQ,Bhr),e(f7,Ihr),e(ie,qhr),e(ie,m7),e(m7,Z8e),e(Z8e,Nhr),e(m7,jhr),e(m7,QQ),e(QQ,Dhr),e(m7,Ghr),e(ie,Ohr),e(ie,g7),e(g7,ebe),e(ebe,Vhr),e(g7,Xhr),e(g7,WQ),e(WQ,zhr),e(g7,Qhr),e(ie,Whr),e(ie,h7),e(h7,obe),e(obe,Hhr),e(h7,Uhr),e(h7,HQ),e(HQ,Jhr),e(h7,Yhr),e(ie,Khr),e(ie,p7),e(p7,rbe),e(rbe,Zhr),e(p7,epr),e(p7,UQ),e(UQ,opr),e(p7,rpr),e(ie,tpr),e(ie,u7),e(u7,tbe),e(tbe,apr),e(u7,npr),e(u7,JQ),e(JQ,spr),e(u7,lpr),e(ie,ipr),e(ie,_7),e(_7,abe),e(abe,dpr),e(_7,cpr),e(_7,YQ),e(YQ,fpr),e(_7,mpr),e(ie,gpr),e(ie,b7),e(b7,nbe),e(nbe,hpr),e(b7,ppr),e(b7,KQ),e(KQ,upr),e(b7,_pr),e(ie,bpr),e(ie,v7),e(v7,sbe),e(sbe,vpr),e(v7,Fpr),e(v7,ZQ),e(ZQ,Tpr),e(v7,Mpr),e(ie,Epr),e(ie,F7),e(F7,lbe),e(lbe,Cpr),e(F7,wpr),e(F7,eW),e(eW,Apr),e(F7,ypr),e(ie,Lpr),e(ie,T7),e(T7,ibe),e(ibe,xpr),e(T7,$pr),e(T7,oW),e(oW,kpr),e(T7,Spr),e(ie,Rpr),e(ie,M7),e(M7,dbe),e(dbe,Ppr),e(M7,Bpr),e(M7,rW),e(rW,Ipr),e(M7,qpr),e(ie,Npr),e(ie,E7),e(E7,cbe),e(cbe,jpr),e(E7,Dpr),e(E7,tW),e(tW,Gpr),e(E7,Opr),e(ie,Vpr),e(ie,C7),e(C7,fbe),e(fbe,Xpr),e(C7,zpr),e(C7,aW),e(aW,Qpr),e(C7,Wpr),e(ie,Hpr),e(ie,w7),e(w7,mbe),e(mbe,Upr),e(w7,Jpr),e(w7,nW),e(nW,Ypr),e(w7,Kpr),e(ie,Zpr),e(ie,A7),e(A7,gbe),e(gbe,eur),e(A7,our),e(A7,sW),e(sW,rur),e(A7,tur),e(ie,aur),e(ie,y7),e(y7,hbe),e(hbe,nur),e(y7,sur),e(y7,lW),e(lW,lur),e(y7,iur),e(xr,dur),M(L7,xr,null),b(f,YIe,_),b(f,ec,_),e(ec,x7),e(x7,pbe),M(oL,pbe,null),e(ec,cur),e(ec,ube),e(ube,fur),b(f,KIe,_),b(f,rr,_),M(rL,rr,null),e(rr,mur),e(rr,oc),e(oc,gur),e(oc,iW),e(iW,hur),e(oc,pur),e(oc,dW),e(dW,uur),e(oc,_ur),e(rr,bur),e(rr,tL),e(tL,vur),e(tL,_be),e(_be,Fur),e(tL,Tur),e(rr,Mur),e(rr,$t),M(aL,$t,null),e($t,Eur),e($t,bbe),e(bbe,Cur),e($t,wur),e($t,rc),e(rc,Aur),e(rc,vbe),e(vbe,yur),e(rc,Lur),e(rc,cW),e(cW,xur),e(rc,$ur),e($t,kur),M($7,$t,null),e(rr,Sur),e(rr,$r),M(nL,$r,null),e($r,Rur),e($r,Fbe),e(Fbe,Pur),e($r,Bur),e($r,tn),e(tn,Iur),e(tn,Tbe),e(Tbe,qur),e(tn,Nur),e(tn,Mbe),e(Mbe,jur),e(tn,Dur),e(tn,Ebe),e(Ebe,Gur),e(tn,Our),e($r,Vur),e($r,ye),e(ye,k7),e(k7,Cbe),e(Cbe,Xur),e(k7,zur),e(k7,fW),e(fW,Qur),e(k7,Wur),e(ye,Hur),e(ye,S7),e(S7,wbe),e(wbe,Uur),e(S7,Jur),e(S7,mW),e(mW,Yur),e(S7,Kur),e(ye,Zur),e(ye,R7),e(R7,Abe),e(Abe,e_r),e(R7,o_r),e(R7,gW),e(gW,r_r),e(R7,t_r),e(ye,a_r),e(ye,P7),e(P7,ybe),e(ybe,n_r),e(P7,s_r),e(P7,hW),e(hW,l_r),e(P7,i_r),e(ye,d_r),e(ye,B7),e(B7,Lbe),e(Lbe,c_r),e(B7,f_r),e(B7,pW),e(pW,m_r),e(B7,g_r),e(ye,h_r),e(ye,I7),e(I7,xbe),e(xbe,p_r),e(I7,u_r),e(I7,uW),e(uW,__r),e(I7,b_r),e(ye,v_r),e(ye,q7),e(q7,$be),e($be,F_r),e(q7,T_r),e(q7,_W),e(_W,M_r),e(q7,E_r),e(ye,C_r),e(ye,N7),e(N7,kbe),e(kbe,w_r),e(N7,A_r),e(N7,bW),e(bW,y_r),e(N7,L_r),e(ye,x_r),e(ye,j7),e(j7,Sbe),e(Sbe,$_r),e(j7,k_r),e(j7,vW),e(vW,S_r),e(j7,R_r),e(ye,P_r),e(ye,D7),e(D7,Rbe),e(Rbe,B_r),e(D7,I_r),e(D7,FW),e(FW,q_r),e(D7,N_r),e($r,j_r),M(G7,$r,null),b(f,ZIe,_),b(f,tc,_),e(tc,O7),e(O7,Pbe),M(sL,Pbe,null),e(tc,D_r),e(tc,Bbe),e(Bbe,G_r),b(f,eqe,_),b(f,tr,_),M(lL,tr,null),e(tr,O_r),e(tr,ac),e(ac,V_r),e(ac,TW),e(TW,X_r),e(ac,z_r),e(ac,MW),e(MW,Q_r),e(ac,W_r),e(tr,H_r),e(tr,iL),e(iL,U_r),e(iL,Ibe),e(Ibe,J_r),e(iL,Y_r),e(tr,K_r),e(tr,kt),M(dL,kt,null),e(kt,Z_r),e(kt,qbe),e(qbe,e1r),e(kt,o1r),e(kt,nc),e(nc,r1r),e(nc,Nbe),e(Nbe,t1r),e(nc,a1r),e(nc,EW),e(EW,n1r),e(nc,s1r),e(kt,l1r),M(V7,kt,null),e(tr,i1r),e(tr,kr),M(cL,kr,null),e(kr,d1r),e(kr,jbe),e(jbe,c1r),e(kr,f1r),e(kr,an),e(an,m1r),e(an,Dbe),e(Dbe,g1r),e(an,h1r),e(an,Gbe),e(Gbe,p1r),e(an,u1r),e(an,Obe),e(Obe,_1r),e(an,b1r),e(kr,v1r),e(kr,Z),e(Z,X7),e(X7,Vbe),e(Vbe,F1r),e(X7,T1r),e(X7,CW),e(CW,M1r),e(X7,E1r),e(Z,C1r),e(Z,z7),e(z7,Xbe),e(Xbe,w1r),e(z7,A1r),e(z7,wW),e(wW,y1r),e(z7,L1r),e(Z,x1r),e(Z,Q7),e(Q7,zbe),e(zbe,$1r),e(Q7,k1r),e(Q7,AW),e(AW,S1r),e(Q7,R1r),e(Z,P1r),e(Z,W7),e(W7,Qbe),e(Qbe,B1r),e(W7,I1r),e(W7,yW),e(yW,q1r),e(W7,N1r),e(Z,j1r),e(Z,H7),e(H7,Wbe),e(Wbe,D1r),e(H7,G1r),e(H7,LW),e(LW,O1r),e(H7,V1r),e(Z,X1r),e(Z,U7),e(U7,Hbe),e(Hbe,z1r),e(U7,Q1r),e(U7,xW),e(xW,W1r),e(U7,H1r),e(Z,U1r),e(Z,J7),e(J7,Ube),e(Ube,J1r),e(J7,Y1r),e(J7,$W),e($W,K1r),e(J7,Z1r),e(Z,e8r),e(Z,Y7),e(Y7,Jbe),e(Jbe,o8r),e(Y7,r8r),e(Y7,kW),e(kW,t8r),e(Y7,a8r),e(Z,n8r),e(Z,K7),e(K7,Ybe),e(Ybe,s8r),e(K7,l8r),e(K7,SW),e(SW,i8r),e(K7,d8r),e(Z,c8r),e(Z,Z7),e(Z7,Kbe),e(Kbe,f8r),e(Z7,m8r),e(Z7,RW),e(RW,g8r),e(Z7,h8r),e(Z,p8r),e(Z,eM),e(eM,Zbe),e(Zbe,u8r),e(eM,_8r),e(eM,PW),e(PW,b8r),e(eM,v8r),e(Z,F8r),e(Z,oM),e(oM,e2e),e(e2e,T8r),e(oM,M8r),e(oM,BW),e(BW,E8r),e(oM,C8r),e(Z,w8r),e(Z,rM),e(rM,o2e),e(o2e,A8r),e(rM,y8r),e(rM,IW),e(IW,L8r),e(rM,x8r),e(Z,$8r),e(Z,tM),e(tM,r2e),e(r2e,k8r),e(tM,S8r),e(tM,qW),e(qW,R8r),e(tM,P8r),e(Z,B8r),e(Z,aM),e(aM,t2e),e(t2e,I8r),e(aM,q8r),e(aM,NW),e(NW,N8r),e(aM,j8r),e(Z,D8r),e(Z,nM),e(nM,a2e),e(a2e,G8r),e(nM,O8r),e(nM,jW),e(jW,V8r),e(nM,X8r),e(Z,z8r),e(Z,sM),e(sM,n2e),e(n2e,Q8r),e(sM,W8r),e(sM,DW),e(DW,H8r),e(sM,U8r),e(Z,J8r),e(Z,lM),e(lM,s2e),e(s2e,Y8r),e(lM,K8r),e(lM,GW),e(GW,Z8r),e(lM,ebr),e(Z,obr),e(Z,iM),e(iM,l2e),e(l2e,rbr),e(iM,tbr),e(iM,OW),e(OW,abr),e(iM,nbr),e(Z,sbr),e(Z,dM),e(dM,i2e),e(i2e,lbr),e(dM,ibr),e(dM,VW),e(VW,dbr),e(dM,cbr),e(Z,fbr),e(Z,cM),e(cM,d2e),e(d2e,mbr),e(cM,gbr),e(cM,XW),e(XW,hbr),e(cM,pbr),e(Z,ubr),e(Z,fM),e(fM,c2e),e(c2e,_br),e(fM,bbr),e(fM,zW),e(zW,vbr),e(fM,Fbr),e(Z,Tbr),e(Z,mM),e(mM,f2e),e(f2e,Mbr),e(mM,Ebr),e(mM,QW),e(QW,Cbr),e(mM,wbr),e(Z,Abr),e(Z,gM),e(gM,m2e),e(m2e,ybr),e(gM,Lbr),e(gM,WW),e(WW,xbr),e(gM,$br),e(Z,kbr),e(Z,hM),e(hM,g2e),e(g2e,Sbr),e(hM,Rbr),e(hM,HW),e(HW,Pbr),e(hM,Bbr),e(Z,Ibr),e(Z,pM),e(pM,h2e),e(h2e,qbr),e(pM,Nbr),e(pM,UW),e(UW,jbr),e(pM,Dbr),e(kr,Gbr),M(uM,kr,null),b(f,oqe,_),b(f,sc,_),e(sc,_M),e(_M,p2e),M(fL,p2e,null),e(sc,Obr),e(sc,u2e),e(u2e,Vbr),b(f,rqe,_),b(f,ar,_),M(mL,ar,null),e(ar,Xbr),e(ar,lc),e(lc,zbr),e(lc,JW),e(JW,Qbr),e(lc,Wbr),e(lc,YW),e(YW,Hbr),e(lc,Ubr),e(ar,Jbr),e(ar,gL),e(gL,Ybr),e(gL,_2e),e(_2e,Kbr),e(gL,Zbr),e(ar,e2r),e(ar,St),M(hL,St,null),e(St,o2r),e(St,b2e),e(b2e,r2r),e(St,t2r),e(St,ic),e(ic,a2r),e(ic,v2e),e(v2e,n2r),e(ic,s2r),e(ic,KW),e(KW,l2r),e(ic,i2r),e(St,d2r),M(bM,St,null),e(ar,c2r),e(ar,Sr),M(pL,Sr,null),e(Sr,f2r),e(Sr,F2e),e(F2e,m2r),e(Sr,g2r),e(Sr,nn),e(nn,h2r),e(nn,T2e),e(T2e,p2r),e(nn,u2r),e(nn,M2e),e(M2e,_2r),e(nn,b2r),e(nn,E2e),e(E2e,v2r),e(nn,F2r),e(Sr,T2r),e(Sr,pe),e(pe,vM),e(vM,C2e),e(C2e,M2r),e(vM,E2r),e(vM,ZW),e(ZW,C2r),e(vM,w2r),e(pe,A2r),e(pe,FM),e(FM,w2e),e(w2e,y2r),e(FM,L2r),e(FM,eH),e(eH,x2r),e(FM,$2r),e(pe,k2r),e(pe,TM),e(TM,A2e),e(A2e,S2r),e(TM,R2r),e(TM,oH),e(oH,P2r),e(TM,B2r),e(pe,I2r),e(pe,MM),e(MM,y2e),e(y2e,q2r),e(MM,N2r),e(MM,rH),e(rH,j2r),e(MM,D2r),e(pe,G2r),e(pe,EM),e(EM,L2e),e(L2e,O2r),e(EM,V2r),e(EM,tH),e(tH,X2r),e(EM,z2r),e(pe,Q2r),e(pe,CM),e(CM,x2e),e(x2e,W2r),e(CM,H2r),e(CM,aH),e(aH,U2r),e(CM,J2r),e(pe,Y2r),e(pe,wM),e(wM,$2e),e($2e,K2r),e(wM,Z2r),e(wM,nH),e(nH,evr),e(wM,ovr),e(pe,rvr),e(pe,AM),e(AM,k2e),e(k2e,tvr),e(AM,avr),e(AM,sH),e(sH,nvr),e(AM,svr),e(pe,lvr),e(pe,yM),e(yM,S2e),e(S2e,ivr),e(yM,dvr),e(yM,lH),e(lH,cvr),e(yM,fvr),e(pe,mvr),e(pe,LM),e(LM,R2e),e(R2e,gvr),e(LM,hvr),e(LM,iH),e(iH,pvr),e(LM,uvr),e(pe,_vr),e(pe,xM),e(xM,P2e),e(P2e,bvr),e(xM,vvr),e(xM,dH),e(dH,Fvr),e(xM,Tvr),e(pe,Mvr),e(pe,$M),e($M,B2e),e(B2e,Evr),e($M,Cvr),e($M,cH),e(cH,wvr),e($M,Avr),e(pe,yvr),e(pe,kM),e(kM,I2e),e(I2e,Lvr),e(kM,xvr),e(kM,fH),e(fH,$vr),e(kM,kvr),e(pe,Svr),e(pe,SM),e(SM,q2e),e(q2e,Rvr),e(SM,Pvr),e(SM,mH),e(mH,Bvr),e(SM,Ivr),e(pe,qvr),e(pe,RM),e(RM,N2e),e(N2e,Nvr),e(RM,jvr),e(RM,gH),e(gH,Dvr),e(RM,Gvr),e(pe,Ovr),e(pe,PM),e(PM,j2e),e(j2e,Vvr),e(PM,Xvr),e(PM,hH),e(hH,zvr),e(PM,Qvr),e(pe,Wvr),e(pe,BM),e(BM,D2e),e(D2e,Hvr),e(BM,Uvr),e(BM,pH),e(pH,Jvr),e(BM,Yvr),e(Sr,Kvr),M(IM,Sr,null),b(f,tqe,_),b(f,dc,_),e(dc,qM),e(qM,G2e),M(uL,G2e,null),e(dc,Zvr),e(dc,O2e),e(O2e,eFr),b(f,aqe,_),b(f,nr,_),M(_L,nr,null),e(nr,oFr),e(nr,cc),e(cc,rFr),e(cc,uH),e(uH,tFr),e(cc,aFr),e(cc,_H),e(_H,nFr),e(cc,sFr),e(nr,lFr),e(nr,bL),e(bL,iFr),e(bL,V2e),e(V2e,dFr),e(bL,cFr),e(nr,fFr),e(nr,Rt),M(vL,Rt,null),e(Rt,mFr),e(Rt,X2e),e(X2e,gFr),e(Rt,hFr),e(Rt,fc),e(fc,pFr),e(fc,z2e),e(z2e,uFr),e(fc,_Fr),e(fc,bH),e(bH,bFr),e(fc,vFr),e(Rt,FFr),M(NM,Rt,null),e(nr,TFr),e(nr,Rr),M(FL,Rr,null),e(Rr,MFr),e(Rr,Q2e),e(Q2e,EFr),e(Rr,CFr),e(Rr,sn),e(sn,wFr),e(sn,W2e),e(W2e,AFr),e(sn,yFr),e(sn,H2e),e(H2e,LFr),e(sn,xFr),e(sn,U2e),e(U2e,$Fr),e(sn,kFr),e(Rr,SFr),e(Rr,TL),e(TL,jM),e(jM,J2e),e(J2e,RFr),e(jM,PFr),e(jM,vH),e(vH,BFr),e(jM,IFr),e(TL,qFr),e(TL,DM),e(DM,Y2e),e(Y2e,NFr),e(DM,jFr),e(DM,FH),e(FH,DFr),e(DM,GFr),e(Rr,OFr),M(GM,Rr,null),b(f,nqe,_),b(f,mc,_),e(mc,OM),e(OM,K2e),M(ML,K2e,null),e(mc,VFr),e(mc,Z2e),e(Z2e,XFr),b(f,sqe,_),b(f,sr,_),M(EL,sr,null),e(sr,zFr),e(sr,gc),e(gc,QFr),e(gc,TH),e(TH,WFr),e(gc,HFr),e(gc,MH),e(MH,UFr),e(gc,JFr),e(sr,YFr),e(sr,CL),e(CL,KFr),e(CL,eve),e(eve,ZFr),e(CL,e0r),e(sr,o0r),e(sr,Pt),M(wL,Pt,null),e(Pt,r0r),e(Pt,ove),e(ove,t0r),e(Pt,a0r),e(Pt,hc),e(hc,n0r),e(hc,rve),e(rve,s0r),e(hc,l0r),e(hc,EH),e(EH,i0r),e(hc,d0r),e(Pt,c0r),M(VM,Pt,null),e(sr,f0r),e(sr,Pr),M(AL,Pr,null),e(Pr,m0r),e(Pr,tve),e(tve,g0r),e(Pr,h0r),e(Pr,ln),e(ln,p0r),e(ln,ave),e(ave,u0r),e(ln,_0r),e(ln,nve),e(nve,b0r),e(ln,v0r),e(ln,sve),e(sve,F0r),e(ln,T0r),e(Pr,M0r),e(Pr,lve),e(lve,XM),e(XM,ive),e(ive,E0r),e(XM,C0r),e(XM,CH),e(CH,w0r),e(XM,A0r),e(Pr,y0r),M(zM,Pr,null),b(f,lqe,_),b(f,pc,_),e(pc,QM),e(QM,dve),M(yL,dve,null),e(pc,L0r),e(pc,cve),e(cve,x0r),b(f,iqe,_),b(f,lr,_),M(LL,lr,null),e(lr,$0r),e(lr,uc),e(uc,k0r),e(uc,wH),e(wH,S0r),e(uc,R0r),e(uc,AH),e(AH,P0r),e(uc,B0r),e(lr,I0r),e(lr,xL),e(xL,q0r),e(xL,fve),e(fve,N0r),e(xL,j0r),e(lr,D0r),e(lr,Bt),M($L,Bt,null),e(Bt,G0r),e(Bt,mve),e(mve,O0r),e(Bt,V0r),e(Bt,_c),e(_c,X0r),e(_c,gve),e(gve,z0r),e(_c,Q0r),e(_c,yH),e(yH,W0r),e(_c,H0r),e(Bt,U0r),M(WM,Bt,null),e(lr,J0r),e(lr,Br),M(kL,Br,null),e(Br,Y0r),e(Br,hve),e(hve,K0r),e(Br,Z0r),e(Br,dn),e(dn,eTr),e(dn,pve),e(pve,oTr),e(dn,rTr),e(dn,uve),e(uve,tTr),e(dn,aTr),e(dn,_ve),e(_ve,nTr),e(dn,sTr),e(Br,lTr),e(Br,de),e(de,HM),e(HM,bve),e(bve,iTr),e(HM,dTr),e(HM,LH),e(LH,cTr),e(HM,fTr),e(de,mTr),e(de,UM),e(UM,vve),e(vve,gTr),e(UM,hTr),e(UM,xH),e(xH,pTr),e(UM,uTr),e(de,_Tr),e(de,JM),e(JM,Fve),e(Fve,bTr),e(JM,vTr),e(JM,$H),e($H,FTr),e(JM,TTr),e(de,MTr),e(de,YM),e(YM,Tve),e(Tve,ETr),e(YM,CTr),e(YM,kH),e(kH,wTr),e(YM,ATr),e(de,yTr),e(de,KM),e(KM,Mve),e(Mve,LTr),e(KM,xTr),e(KM,SH),e(SH,$Tr),e(KM,kTr),e(de,STr),e(de,ZM),e(ZM,Eve),e(Eve,RTr),e(ZM,PTr),e(ZM,RH),e(RH,BTr),e(ZM,ITr),e(de,qTr),e(de,e4),e(e4,Cve),e(Cve,NTr),e(e4,jTr),e(e4,PH),e(PH,DTr),e(e4,GTr),e(de,OTr),e(de,o4),e(o4,wve),e(wve,VTr),e(o4,XTr),e(o4,BH),e(BH,zTr),e(o4,QTr),e(de,WTr),e(de,r4),e(r4,Ave),e(Ave,HTr),e(r4,UTr),e(r4,IH),e(IH,JTr),e(r4,YTr),e(de,KTr),e(de,t4),e(t4,yve),e(yve,ZTr),e(t4,e7r),e(t4,qH),e(qH,o7r),e(t4,r7r),e(de,t7r),e(de,a4),e(a4,Lve),e(Lve,a7r),e(a4,n7r),e(a4,NH),e(NH,s7r),e(a4,l7r),e(de,i7r),e(de,n4),e(n4,xve),e(xve,d7r),e(n4,c7r),e(n4,jH),e(jH,f7r),e(n4,m7r),e(de,g7r),e(de,s4),e(s4,$ve),e($ve,h7r),e(s4,p7r),e(s4,DH),e(DH,u7r),e(s4,_7r),e(de,b7r),e(de,l4),e(l4,kve),e(kve,v7r),e(l4,F7r),e(l4,GH),e(GH,T7r),e(l4,M7r),e(de,E7r),e(de,i4),e(i4,Sve),e(Sve,C7r),e(i4,w7r),e(i4,OH),e(OH,A7r),e(i4,y7r),e(de,L7r),e(de,d4),e(d4,Rve),e(Rve,x7r),e(d4,$7r),e(d4,VH),e(VH,k7r),e(d4,S7r),e(de,R7r),e(de,c4),e(c4,Pve),e(Pve,P7r),e(c4,B7r),e(c4,XH),e(XH,I7r),e(c4,q7r),e(de,N7r),e(de,f4),e(f4,Bve),e(Bve,j7r),e(f4,D7r),e(f4,zH),e(zH,G7r),e(f4,O7r),e(de,V7r),e(de,m4),e(m4,Ive),e(Ive,X7r),e(m4,z7r),e(m4,QH),e(QH,Q7r),e(m4,W7r),e(de,H7r),e(de,g4),e(g4,qve),e(qve,U7r),e(g4,J7r),e(g4,WH),e(WH,Y7r),e(g4,K7r),e(Br,Z7r),M(h4,Br,null),b(f,dqe,_),b(f,bc,_),e(bc,p4),e(p4,Nve),M(SL,Nve,null),e(bc,eMr),e(bc,jve),e(jve,oMr),b(f,cqe,_),b(f,ir,_),M(RL,ir,null),e(ir,rMr),e(ir,vc),e(vc,tMr),e(vc,HH),e(HH,aMr),e(vc,nMr),e(vc,UH),e(UH,sMr),e(vc,lMr),e(ir,iMr),e(ir,PL),e(PL,dMr),e(PL,Dve),e(Dve,cMr),e(PL,fMr),e(ir,mMr),e(ir,It),M(BL,It,null),e(It,gMr),e(It,Gve),e(Gve,hMr),e(It,pMr),e(It,Fc),e(Fc,uMr),e(Fc,Ove),e(Ove,_Mr),e(Fc,bMr),e(Fc,JH),e(JH,vMr),e(Fc,FMr),e(It,TMr),M(u4,It,null),e(ir,MMr),e(ir,Ir),M(IL,Ir,null),e(Ir,EMr),e(Ir,Vve),e(Vve,CMr),e(Ir,wMr),e(Ir,cn),e(cn,AMr),e(cn,Xve),e(Xve,yMr),e(cn,LMr),e(cn,zve),e(zve,xMr),e(cn,$Mr),e(cn,Qve),e(Qve,kMr),e(cn,SMr),e(Ir,RMr),e(Ir,ce),e(ce,_4),e(_4,Wve),e(Wve,PMr),e(_4,BMr),e(_4,YH),e(YH,IMr),e(_4,qMr),e(ce,NMr),e(ce,b4),e(b4,Hve),e(Hve,jMr),e(b4,DMr),e(b4,KH),e(KH,GMr),e(b4,OMr),e(ce,VMr),e(ce,v4),e(v4,Uve),e(Uve,XMr),e(v4,zMr),e(v4,ZH),e(ZH,QMr),e(v4,WMr),e(ce,HMr),e(ce,F4),e(F4,Jve),e(Jve,UMr),e(F4,JMr),e(F4,eU),e(eU,YMr),e(F4,KMr),e(ce,ZMr),e(ce,T4),e(T4,Yve),e(Yve,e4r),e(T4,o4r),e(T4,oU),e(oU,r4r),e(T4,t4r),e(ce,a4r),e(ce,M4),e(M4,Kve),e(Kve,n4r),e(M4,s4r),e(M4,rU),e(rU,l4r),e(M4,i4r),e(ce,d4r),e(ce,E4),e(E4,Zve),e(Zve,c4r),e(E4,f4r),e(E4,tU),e(tU,m4r),e(E4,g4r),e(ce,h4r),e(ce,C4),e(C4,eFe),e(eFe,p4r),e(C4,u4r),e(C4,aU),e(aU,_4r),e(C4,b4r),e(ce,v4r),e(ce,w4),e(w4,oFe),e(oFe,F4r),e(w4,T4r),e(w4,nU),e(nU,M4r),e(w4,E4r),e(ce,C4r),e(ce,A4),e(A4,rFe),e(rFe,w4r),e(A4,A4r),e(A4,sU),e(sU,y4r),e(A4,L4r),e(ce,x4r),e(ce,y4),e(y4,tFe),e(tFe,$4r),e(y4,k4r),e(y4,lU),e(lU,S4r),e(y4,R4r),e(ce,P4r),e(ce,L4),e(L4,aFe),e(aFe,B4r),e(L4,I4r),e(L4,iU),e(iU,q4r),e(L4,N4r),e(ce,j4r),e(ce,x4),e(x4,nFe),e(nFe,D4r),e(x4,G4r),e(x4,dU),e(dU,O4r),e(x4,V4r),e(ce,X4r),e(ce,$4),e($4,sFe),e(sFe,z4r),e($4,Q4r),e($4,cU),e(cU,W4r),e($4,H4r),e(ce,U4r),e(ce,k4),e(k4,lFe),e(lFe,J4r),e(k4,Y4r),e(k4,fU),e(fU,K4r),e(k4,Z4r),e(ce,eEr),e(ce,S4),e(S4,iFe),e(iFe,oEr),e(S4,rEr),e(S4,mU),e(mU,tEr),e(S4,aEr),e(ce,nEr),e(ce,R4),e(R4,dFe),e(dFe,sEr),e(R4,lEr),e(R4,gU),e(gU,iEr),e(R4,dEr),e(ce,cEr),e(ce,P4),e(P4,cFe),e(cFe,fEr),e(P4,mEr),e(P4,hU),e(hU,gEr),e(P4,hEr),e(ce,pEr),e(ce,B4),e(B4,fFe),e(fFe,uEr),e(B4,_Er),e(B4,pU),e(pU,bEr),e(B4,vEr),e(ce,FEr),e(ce,I4),e(I4,mFe),e(mFe,TEr),e(I4,MEr),e(I4,uU),e(uU,EEr),e(I4,CEr),e(Ir,wEr),M(q4,Ir,null),b(f,fqe,_),b(f,Tc,_),e(Tc,N4),e(N4,gFe),M(qL,gFe,null),e(Tc,AEr),e(Tc,hFe),e(hFe,yEr),b(f,mqe,_),b(f,dr,_),M(NL,dr,null),e(dr,LEr),e(dr,Mc),e(Mc,xEr),e(Mc,_U),e(_U,$Er),e(Mc,kEr),e(Mc,bU),e(bU,SEr),e(Mc,REr),e(dr,PEr),e(dr,jL),e(jL,BEr),e(jL,pFe),e(pFe,IEr),e(jL,qEr),e(dr,NEr),e(dr,qt),M(DL,qt,null),e(qt,jEr),e(qt,uFe),e(uFe,DEr),e(qt,GEr),e(qt,Ec),e(Ec,OEr),e(Ec,_Fe),e(_Fe,VEr),e(Ec,XEr),e(Ec,vU),e(vU,zEr),e(Ec,QEr),e(qt,WEr),M(j4,qt,null),e(dr,HEr),e(dr,qr),M(GL,qr,null),e(qr,UEr),e(qr,bFe),e(bFe,JEr),e(qr,YEr),e(qr,fn),e(fn,KEr),e(fn,vFe),e(vFe,ZEr),e(fn,e5r),e(fn,FFe),e(FFe,o5r),e(fn,r5r),e(fn,TFe),e(TFe,t5r),e(fn,a5r),e(qr,n5r),e(qr,MFe),e(MFe,D4),e(D4,EFe),e(EFe,s5r),e(D4,l5r),e(D4,FU),e(FU,i5r),e(D4,d5r),e(qr,c5r),M(G4,qr,null),b(f,gqe,_),b(f,Cc,_),e(Cc,O4),e(O4,CFe),M(OL,CFe,null),e(Cc,f5r),e(Cc,wFe),e(wFe,m5r),b(f,hqe,_),b(f,cr,_),M(VL,cr,null),e(cr,g5r),e(cr,wc),e(wc,h5r),e(wc,TU),e(TU,p5r),e(wc,u5r),e(wc,MU),e(MU,_5r),e(wc,b5r),e(cr,v5r),e(cr,XL),e(XL,F5r),e(XL,AFe),e(AFe,T5r),e(XL,M5r),e(cr,E5r),e(cr,Nt),M(zL,Nt,null),e(Nt,C5r),e(Nt,yFe),e(yFe,w5r),e(Nt,A5r),e(Nt,Ac),e(Ac,y5r),e(Ac,LFe),e(LFe,L5r),e(Ac,x5r),e(Ac,EU),e(EU,$5r),e(Ac,k5r),e(Nt,S5r),M(V4,Nt,null),e(cr,R5r),e(cr,Nr),M(QL,Nr,null),e(Nr,P5r),e(Nr,xFe),e(xFe,B5r),e(Nr,I5r),e(Nr,mn),e(mn,q5r),e(mn,$Fe),e($Fe,N5r),e(mn,j5r),e(mn,kFe),e(kFe,D5r),e(mn,G5r),e(mn,SFe),e(SFe,O5r),e(mn,V5r),e(Nr,X5r),e(Nr,RFe),e(RFe,X4),e(X4,PFe),e(PFe,z5r),e(X4,Q5r),e(X4,CU),e(CU,W5r),e(X4,H5r),e(Nr,U5r),M(z4,Nr,null),b(f,pqe,_),b(f,yc,_),e(yc,Q4),e(Q4,BFe),M(WL,BFe,null),e(yc,J5r),e(yc,IFe),e(IFe,Y5r),b(f,uqe,_),b(f,fr,_),M(HL,fr,null),e(fr,K5r),e(fr,Lc),e(Lc,Z5r),e(Lc,wU),e(wU,eCr),e(Lc,oCr),e(Lc,AU),e(AU,rCr),e(Lc,tCr),e(fr,aCr),e(fr,UL),e(UL,nCr),e(UL,qFe),e(qFe,sCr),e(UL,lCr),e(fr,iCr),e(fr,jt),M(JL,jt,null),e(jt,dCr),e(jt,NFe),e(NFe,cCr),e(jt,fCr),e(jt,xc),e(xc,mCr),e(xc,jFe),e(jFe,gCr),e(xc,hCr),e(xc,yU),e(yU,pCr),e(xc,uCr),e(jt,_Cr),M(W4,jt,null),e(fr,bCr),e(fr,jr),M(YL,jr,null),e(jr,vCr),e(jr,DFe),e(DFe,FCr),e(jr,TCr),e(jr,gn),e(gn,MCr),e(gn,GFe),e(GFe,ECr),e(gn,CCr),e(gn,OFe),e(OFe,wCr),e(gn,ACr),e(gn,VFe),e(VFe,yCr),e(gn,LCr),e(jr,xCr),e(jr,ee),e(ee,H4),e(H4,XFe),e(XFe,$Cr),e(H4,kCr),e(H4,LU),e(LU,SCr),e(H4,RCr),e(ee,PCr),e(ee,U4),e(U4,zFe),e(zFe,BCr),e(U4,ICr),e(U4,xU),e(xU,qCr),e(U4,NCr),e(ee,jCr),e(ee,J4),e(J4,QFe),e(QFe,DCr),e(J4,GCr),e(J4,$U),e($U,OCr),e(J4,VCr),e(ee,XCr),e(ee,Y4),e(Y4,WFe),e(WFe,zCr),e(Y4,QCr),e(Y4,kU),e(kU,WCr),e(Y4,HCr),e(ee,UCr),e(ee,K4),e(K4,HFe),e(HFe,JCr),e(K4,YCr),e(K4,SU),e(SU,KCr),e(K4,ZCr),e(ee,e3r),e(ee,Z4),e(Z4,UFe),e(UFe,o3r),e(Z4,r3r),e(Z4,RU),e(RU,t3r),e(Z4,a3r),e(ee,n3r),e(ee,eE),e(eE,JFe),e(JFe,s3r),e(eE,l3r),e(eE,PU),e(PU,i3r),e(eE,d3r),e(ee,c3r),e(ee,oE),e(oE,YFe),e(YFe,f3r),e(oE,m3r),e(oE,BU),e(BU,g3r),e(oE,h3r),e(ee,p3r),e(ee,rE),e(rE,KFe),e(KFe,u3r),e(rE,_3r),e(rE,IU),e(IU,b3r),e(rE,v3r),e(ee,F3r),e(ee,tE),e(tE,ZFe),e(ZFe,T3r),e(tE,M3r),e(tE,qU),e(qU,E3r),e(tE,C3r),e(ee,w3r),e(ee,aE),e(aE,e0e),e(e0e,A3r),e(aE,y3r),e(aE,NU),e(NU,L3r),e(aE,x3r),e(ee,$3r),e(ee,nE),e(nE,o0e),e(o0e,k3r),e(nE,S3r),e(nE,jU),e(jU,R3r),e(nE,P3r),e(ee,B3r),e(ee,sE),e(sE,r0e),e(r0e,I3r),e(sE,q3r),e(sE,DU),e(DU,N3r),e(sE,j3r),e(ee,D3r),e(ee,lE),e(lE,t0e),e(t0e,G3r),e(lE,O3r),e(lE,GU),e(GU,V3r),e(lE,X3r),e(ee,z3r),e(ee,iE),e(iE,a0e),e(a0e,Q3r),e(iE,W3r),e(iE,OU),e(OU,H3r),e(iE,U3r),e(ee,J3r),e(ee,dE),e(dE,n0e),e(n0e,Y3r),e(dE,K3r),e(dE,VU),e(VU,Z3r),e(dE,ewr),e(ee,owr),e(ee,cE),e(cE,s0e),e(s0e,rwr),e(cE,twr),e(cE,XU),e(XU,awr),e(cE,nwr),e(ee,swr),e(ee,fE),e(fE,l0e),e(l0e,lwr),e(fE,iwr),e(fE,zU),e(zU,dwr),e(fE,cwr),e(ee,fwr),e(ee,mE),e(mE,i0e),e(i0e,mwr),e(mE,gwr),e(mE,QU),e(QU,hwr),e(mE,pwr),e(ee,uwr),e(ee,gE),e(gE,d0e),e(d0e,_wr),e(gE,bwr),e(gE,WU),e(WU,vwr),e(gE,Fwr),e(ee,Twr),e(ee,hE),e(hE,c0e),e(c0e,Mwr),e(hE,Ewr),e(hE,HU),e(HU,Cwr),e(hE,wwr),e(ee,Awr),e(ee,pE),e(pE,f0e),e(f0e,ywr),e(pE,Lwr),e(pE,UU),e(UU,xwr),e(pE,$wr),e(ee,kwr),e(ee,uE),e(uE,m0e),e(m0e,Swr),e(uE,Rwr),e(uE,JU),e(JU,Pwr),e(uE,Bwr),e(ee,Iwr),e(ee,_E),e(_E,g0e),e(g0e,qwr),e(_E,Nwr),e(_E,YU),e(YU,jwr),e(_E,Dwr),e(ee,Gwr),e(ee,bE),e(bE,h0e),e(h0e,Owr),e(bE,Vwr),e(bE,KU),e(KU,Xwr),e(bE,zwr),e(ee,Qwr),e(ee,vE),e(vE,p0e),e(p0e,Wwr),e(vE,Hwr),e(vE,ZU),e(ZU,Uwr),e(vE,Jwr),e(jr,Ywr),M(FE,jr,null),b(f,_qe,_),b(f,$c,_),e($c,TE),e(TE,u0e),M(KL,u0e,null),e($c,Kwr),e($c,_0e),e(_0e,Zwr),b(f,bqe,_),b(f,mr,_),M(ZL,mr,null),e(mr,eAr),e(mr,kc),e(kc,oAr),e(kc,eJ),e(eJ,rAr),e(kc,tAr),e(kc,oJ),e(oJ,aAr),e(kc,nAr),e(mr,sAr),e(mr,ex),e(ex,lAr),e(ex,b0e),e(b0e,iAr),e(ex,dAr),e(mr,cAr),e(mr,Dt),M(ox,Dt,null),e(Dt,fAr),e(Dt,v0e),e(v0e,mAr),e(Dt,gAr),e(Dt,Sc),e(Sc,hAr),e(Sc,F0e),e(F0e,pAr),e(Sc,uAr),e(Sc,rJ),e(rJ,_Ar),e(Sc,bAr),e(Dt,vAr),M(ME,Dt,null),e(mr,FAr),e(mr,Dr),M(rx,Dr,null),e(Dr,TAr),e(Dr,T0e),e(T0e,MAr),e(Dr,EAr),e(Dr,hn),e(hn,CAr),e(hn,M0e),e(M0e,wAr),e(hn,AAr),e(hn,E0e),e(E0e,yAr),e(hn,LAr),e(hn,C0e),e(C0e,xAr),e(hn,$Ar),e(Dr,kAr),e(Dr,Le),e(Le,EE),e(EE,w0e),e(w0e,SAr),e(EE,RAr),e(EE,tJ),e(tJ,PAr),e(EE,BAr),e(Le,IAr),e(Le,CE),e(CE,A0e),e(A0e,qAr),e(CE,NAr),e(CE,aJ),e(aJ,jAr),e(CE,DAr),e(Le,GAr),e(Le,wE),e(wE,y0e),e(y0e,OAr),e(wE,VAr),e(wE,nJ),e(nJ,XAr),e(wE,zAr),e(Le,QAr),e(Le,AE),e(AE,L0e),e(L0e,WAr),e(AE,HAr),e(AE,sJ),e(sJ,UAr),e(AE,JAr),e(Le,YAr),e(Le,yE),e(yE,x0e),e(x0e,KAr),e(yE,ZAr),e(yE,lJ),e(lJ,e6r),e(yE,o6r),e(Le,r6r),e(Le,LE),e(LE,$0e),e($0e,t6r),e(LE,a6r),e(LE,iJ),e(iJ,n6r),e(LE,s6r),e(Le,l6r),e(Le,xE),e(xE,k0e),e(k0e,i6r),e(xE,d6r),e(xE,dJ),e(dJ,c6r),e(xE,f6r),e(Le,m6r),e(Le,$E),e($E,S0e),e(S0e,g6r),e($E,h6r),e($E,cJ),e(cJ,p6r),e($E,u6r),e(Le,_6r),e(Le,kE),e(kE,R0e),e(R0e,b6r),e(kE,v6r),e(kE,fJ),e(fJ,F6r),e(kE,T6r),e(Le,M6r),e(Le,SE),e(SE,P0e),e(P0e,E6r),e(SE,C6r),e(SE,mJ),e(mJ,w6r),e(SE,A6r),e(Dr,y6r),M(RE,Dr,null),b(f,vqe,_),b(f,Rc,_),e(Rc,PE),e(PE,B0e),M(tx,B0e,null),e(Rc,L6r),e(Rc,I0e),e(I0e,x6r),b(f,Fqe,_),b(f,gr,_),M(ax,gr,null),e(gr,$6r),e(gr,Pc),e(Pc,k6r),e(Pc,gJ),e(gJ,S6r),e(Pc,R6r),e(Pc,hJ),e(hJ,P6r),e(Pc,B6r),e(gr,I6r),e(gr,nx),e(nx,q6r),e(nx,q0e),e(q0e,N6r),e(nx,j6r),e(gr,D6r),e(gr,Gt),M(sx,Gt,null),e(Gt,G6r),e(Gt,N0e),e(N0e,O6r),e(Gt,V6r),e(Gt,Bc),e(Bc,X6r),e(Bc,j0e),e(j0e,z6r),e(Bc,Q6r),e(Bc,pJ),e(pJ,W6r),e(Bc,H6r),e(Gt,U6r),M(BE,Gt,null),e(gr,J6r),e(gr,Gr),M(lx,Gr,null),e(Gr,Y6r),e(Gr,D0e),e(D0e,K6r),e(Gr,Z6r),e(Gr,pn),e(pn,eyr),e(pn,G0e),e(G0e,oyr),e(pn,ryr),e(pn,O0e),e(O0e,tyr),e(pn,ayr),e(pn,V0e),e(V0e,nyr),e(pn,syr),e(Gr,lyr),e(Gr,Me),e(Me,IE),e(IE,X0e),e(X0e,iyr),e(IE,dyr),e(IE,uJ),e(uJ,cyr),e(IE,fyr),e(Me,myr),e(Me,qE),e(qE,z0e),e(z0e,gyr),e(qE,hyr),e(qE,_J),e(_J,pyr),e(qE,uyr),e(Me,_yr),e(Me,NE),e(NE,Q0e),e(Q0e,byr),e(NE,vyr),e(NE,bJ),e(bJ,Fyr),e(NE,Tyr),e(Me,Myr),e(Me,jE),e(jE,W0e),e(W0e,Eyr),e(jE,Cyr),e(jE,vJ),e(vJ,wyr),e(jE,Ayr),e(Me,yyr),e(Me,DE),e(DE,H0e),e(H0e,Lyr),e(DE,xyr),e(DE,FJ),e(FJ,$yr),e(DE,kyr),e(Me,Syr),e(Me,GE),e(GE,U0e),e(U0e,Ryr),e(GE,Pyr),e(GE,TJ),e(TJ,Byr),e(GE,Iyr),e(Me,qyr),e(Me,OE),e(OE,J0e),e(J0e,Nyr),e(OE,jyr),e(OE,MJ),e(MJ,Dyr),e(OE,Gyr),e(Me,Oyr),e(Me,VE),e(VE,Y0e),e(Y0e,Vyr),e(VE,Xyr),e(VE,EJ),e(EJ,zyr),e(VE,Qyr),e(Me,Wyr),e(Me,XE),e(XE,K0e),e(K0e,Hyr),e(XE,Uyr),e(XE,CJ),e(CJ,Jyr),e(XE,Yyr),e(Me,Kyr),e(Me,zE),e(zE,Z0e),e(Z0e,Zyr),e(zE,eLr),e(zE,wJ),e(wJ,oLr),e(zE,rLr),e(Me,tLr),e(Me,QE),e(QE,eTe),e(eTe,aLr),e(QE,nLr),e(QE,AJ),e(AJ,sLr),e(QE,lLr),e(Me,iLr),e(Me,WE),e(WE,oTe),e(oTe,dLr),e(WE,cLr),e(WE,yJ),e(yJ,fLr),e(WE,mLr),e(Gr,gLr),M(HE,Gr,null),b(f,Tqe,_),b(f,Ic,_),e(Ic,UE),e(UE,rTe),M(ix,rTe,null),e(Ic,hLr),e(Ic,tTe),e(tTe,pLr),b(f,Mqe,_),b(f,hr,_),M(dx,hr,null),e(hr,uLr),e(hr,qc),e(qc,_Lr),e(qc,LJ),e(LJ,bLr),e(qc,vLr),e(qc,xJ),e(xJ,FLr),e(qc,TLr),e(hr,MLr),e(hr,cx),e(cx,ELr),e(cx,aTe),e(aTe,CLr),e(cx,wLr),e(hr,ALr),e(hr,Ot),M(fx,Ot,null),e(Ot,yLr),e(Ot,nTe),e(nTe,LLr),e(Ot,xLr),e(Ot,Nc),e(Nc,$Lr),e(Nc,sTe),e(sTe,kLr),e(Nc,SLr),e(Nc,$J),e($J,RLr),e(Nc,PLr),e(Ot,BLr),M(JE,Ot,null),e(hr,ILr),e(hr,Or),M(mx,Or,null),e(Or,qLr),e(Or,lTe),e(lTe,NLr),e(Or,jLr),e(Or,un),e(un,DLr),e(un,iTe),e(iTe,GLr),e(un,OLr),e(un,dTe),e(dTe,VLr),e(un,XLr),e(un,cTe),e(cTe,zLr),e(un,QLr),e(Or,WLr),e(Or,xe),e(xe,YE),e(YE,fTe),e(fTe,HLr),e(YE,ULr),e(YE,kJ),e(kJ,JLr),e(YE,YLr),e(xe,KLr),e(xe,KE),e(KE,mTe),e(mTe,ZLr),e(KE,exr),e(KE,SJ),e(SJ,oxr),e(KE,rxr),e(xe,txr),e(xe,ZE),e(ZE,gTe),e(gTe,axr),e(ZE,nxr),e(ZE,RJ),e(RJ,sxr),e(ZE,lxr),e(xe,ixr),e(xe,e5),e(e5,hTe),e(hTe,dxr),e(e5,cxr),e(e5,PJ),e(PJ,fxr),e(e5,mxr),e(xe,gxr),e(xe,o5),e(o5,pTe),e(pTe,hxr),e(o5,pxr),e(o5,BJ),e(BJ,uxr),e(o5,_xr),e(xe,bxr),e(xe,r5),e(r5,uTe),e(uTe,vxr),e(r5,Fxr),e(r5,IJ),e(IJ,Txr),e(r5,Mxr),e(xe,Exr),e(xe,t5),e(t5,_Te),e(_Te,Cxr),e(t5,wxr),e(t5,qJ),e(qJ,Axr),e(t5,yxr),e(xe,Lxr),e(xe,a5),e(a5,bTe),e(bTe,xxr),e(a5,$xr),e(a5,NJ),e(NJ,kxr),e(a5,Sxr),e(xe,Rxr),e(xe,n5),e(n5,vTe),e(vTe,Pxr),e(n5,Bxr),e(n5,jJ),e(jJ,Ixr),e(n5,qxr),e(xe,Nxr),e(xe,s5),e(s5,FTe),e(FTe,jxr),e(s5,Dxr),e(s5,DJ),e(DJ,Gxr),e(s5,Oxr),e(Or,Vxr),M(l5,Or,null),b(f,Eqe,_),b(f,jc,_),e(jc,i5),e(i5,TTe),M(gx,TTe,null),e(jc,Xxr),e(jc,MTe),e(MTe,zxr),b(f,Cqe,_),b(f,pr,_),M(hx,pr,null),e(pr,Qxr),e(pr,Dc),e(Dc,Wxr),e(Dc,GJ),e(GJ,Hxr),e(Dc,Uxr),e(Dc,OJ),e(OJ,Jxr),e(Dc,Yxr),e(pr,Kxr),e(pr,px),e(px,Zxr),e(px,ETe),e(ETe,e9r),e(px,o9r),e(pr,r9r),e(pr,Vt),M(ux,Vt,null),e(Vt,t9r),e(Vt,CTe),e(CTe,a9r),e(Vt,n9r),e(Vt,Gc),e(Gc,s9r),e(Gc,wTe),e(wTe,l9r),e(Gc,i9r),e(Gc,VJ),e(VJ,d9r),e(Gc,c9r),e(Vt,f9r),M(d5,Vt,null),e(pr,m9r),e(pr,Vr),M(_x,Vr,null),e(Vr,g9r),e(Vr,ATe),e(ATe,h9r),e(Vr,p9r),e(Vr,_n),e(_n,u9r),e(_n,yTe),e(yTe,_9r),e(_n,b9r),e(_n,LTe),e(LTe,v9r),e(_n,F9r),e(_n,xTe),e(xTe,T9r),e(_n,M9r),e(Vr,E9r),e(Vr,Se),e(Se,c5),e(c5,$Te),e($Te,C9r),e(c5,w9r),e(c5,XJ),e(XJ,A9r),e(c5,y9r),e(Se,L9r),e(Se,f5),e(f5,kTe),e(kTe,x9r),e(f5,$9r),e(f5,zJ),e(zJ,k9r),e(f5,S9r),e(Se,R9r),e(Se,m5),e(m5,STe),e(STe,P9r),e(m5,B9r),e(m5,QJ),e(QJ,I9r),e(m5,q9r),e(Se,N9r),e(Se,g5),e(g5,RTe),e(RTe,j9r),e(g5,D9r),e(g5,WJ),e(WJ,G9r),e(g5,O9r),e(Se,V9r),e(Se,h5),e(h5,PTe),e(PTe,X9r),e(h5,z9r),e(h5,HJ),e(HJ,Q9r),e(h5,W9r),e(Se,H9r),e(Se,p5),e(p5,BTe),e(BTe,U9r),e(p5,J9r),e(p5,UJ),e(UJ,Y9r),e(p5,K9r),e(Se,Z9r),e(Se,u5),e(u5,ITe),e(ITe,e$r),e(u5,o$r),e(u5,JJ),e(JJ,r$r),e(u5,t$r),e(Se,a$r),e(Se,_5),e(_5,qTe),e(qTe,n$r),e(_5,s$r),e(_5,YJ),e(YJ,l$r),e(_5,i$r),e(Se,d$r),e(Se,b5),e(b5,NTe),e(NTe,c$r),e(b5,f$r),e(b5,KJ),e(KJ,m$r),e(b5,g$r),e(Vr,h$r),M(v5,Vr,null),b(f,wqe,_),b(f,Oc,_),e(Oc,F5),e(F5,jTe),M(bx,jTe,null),e(Oc,p$r),e(Oc,DTe),e(DTe,u$r),b(f,Aqe,_),b(f,ur,_),M(vx,ur,null),e(ur,_$r),e(ur,Vc),e(Vc,b$r),e(Vc,ZJ),e(ZJ,v$r),e(Vc,F$r),e(Vc,eY),e(eY,T$r),e(Vc,M$r),e(ur,E$r),e(ur,Fx),e(Fx,C$r),e(Fx,GTe),e(GTe,w$r),e(Fx,A$r),e(ur,y$r),e(ur,Xt),M(Tx,Xt,null),e(Xt,L$r),e(Xt,OTe),e(OTe,x$r),e(Xt,$$r),e(Xt,Xc),e(Xc,k$r),e(Xc,VTe),e(VTe,S$r),e(Xc,R$r),e(Xc,oY),e(oY,P$r),e(Xc,B$r),e(Xt,I$r),M(T5,Xt,null),e(ur,q$r),e(ur,Xr),M(Mx,Xr,null),e(Xr,N$r),e(Xr,XTe),e(XTe,j$r),e(Xr,D$r),e(Xr,bn),e(bn,G$r),e(bn,zTe),e(zTe,O$r),e(bn,V$r),e(bn,QTe),e(QTe,X$r),e(bn,z$r),e(bn,WTe),e(WTe,Q$r),e(bn,W$r),e(Xr,H$r),e(Xr,$e),e($e,M5),e(M5,HTe),e(HTe,U$r),e(M5,J$r),e(M5,rY),e(rY,Y$r),e(M5,K$r),e($e,Z$r),e($e,E5),e(E5,UTe),e(UTe,ekr),e(E5,okr),e(E5,tY),e(tY,rkr),e(E5,tkr),e($e,akr),e($e,C5),e(C5,JTe),e(JTe,nkr),e(C5,skr),e(C5,aY),e(aY,lkr),e(C5,ikr),e($e,dkr),e($e,w5),e(w5,YTe),e(YTe,ckr),e(w5,fkr),e(w5,nY),e(nY,mkr),e(w5,gkr),e($e,hkr),e($e,A5),e(A5,KTe),e(KTe,pkr),e(A5,ukr),e(A5,sY),e(sY,_kr),e(A5,bkr),e($e,vkr),e($e,y5),e(y5,ZTe),e(ZTe,Fkr),e(y5,Tkr),e(y5,lY),e(lY,Mkr),e(y5,Ekr),e($e,Ckr),e($e,L5),e(L5,e7e),e(e7e,wkr),e(L5,Akr),e(L5,iY),e(iY,ykr),e(L5,Lkr),e($e,xkr),e($e,x5),e(x5,o7e),e(o7e,$kr),e(x5,kkr),e(x5,dY),e(dY,Skr),e(x5,Rkr),e($e,Pkr),e($e,$5),e($5,r7e),e(r7e,Bkr),e($5,Ikr),e($5,cY),e(cY,qkr),e($5,Nkr),e($e,jkr),e($e,k5),e(k5,t7e),e(t7e,Dkr),e(k5,Gkr),e(k5,fY),e(fY,Okr),e(k5,Vkr),e(Xr,Xkr),M(S5,Xr,null),b(f,yqe,_),b(f,zc,_),e(zc,R5),e(R5,a7e),M(Ex,a7e,null),e(zc,zkr),e(zc,n7e),e(n7e,Qkr),b(f,Lqe,_),b(f,_r,_),M(Cx,_r,null),e(_r,Wkr),e(_r,Qc),e(Qc,Hkr),e(Qc,mY),e(mY,Ukr),e(Qc,Jkr),e(Qc,gY),e(gY,Ykr),e(Qc,Kkr),e(_r,Zkr),e(_r,wx),e(wx,eSr),e(wx,s7e),e(s7e,oSr),e(wx,rSr),e(_r,tSr),e(_r,zt),M(Ax,zt,null),e(zt,aSr),e(zt,l7e),e(l7e,nSr),e(zt,sSr),e(zt,Wc),e(Wc,lSr),e(Wc,i7e),e(i7e,iSr),e(Wc,dSr),e(Wc,hY),e(hY,cSr),e(Wc,fSr),e(zt,mSr),M(P5,zt,null),e(_r,gSr),e(_r,zr),M(yx,zr,null),e(zr,hSr),e(zr,d7e),e(d7e,pSr),e(zr,uSr),e(zr,vn),e(vn,_Sr),e(vn,c7e),e(c7e,bSr),e(vn,vSr),e(vn,f7e),e(f7e,FSr),e(vn,TSr),e(vn,m7e),e(m7e,MSr),e(vn,ESr),e(zr,CSr),e(zr,ke),e(ke,B5),e(B5,g7e),e(g7e,wSr),e(B5,ASr),e(B5,pY),e(pY,ySr),e(B5,LSr),e(ke,xSr),e(ke,I5),e(I5,h7e),e(h7e,$Sr),e(I5,kSr),e(I5,uY),e(uY,SSr),e(I5,RSr),e(ke,PSr),e(ke,q5),e(q5,p7e),e(p7e,BSr),e(q5,ISr),e(q5,_Y),e(_Y,qSr),e(q5,NSr),e(ke,jSr),e(ke,N5),e(N5,u7e),e(u7e,DSr),e(N5,GSr),e(N5,bY),e(bY,OSr),e(N5,VSr),e(ke,XSr),e(ke,j5),e(j5,_7e),e(_7e,zSr),e(j5,QSr),e(j5,vY),e(vY,WSr),e(j5,HSr),e(ke,USr),e(ke,D5),e(D5,b7e),e(b7e,JSr),e(D5,YSr),e(D5,FY),e(FY,KSr),e(D5,ZSr),e(ke,eRr),e(ke,G5),e(G5,v7e),e(v7e,oRr),e(G5,rRr),e(G5,TY),e(TY,tRr),e(G5,aRr),e(ke,nRr),e(ke,O5),e(O5,F7e),e(F7e,sRr),e(O5,lRr),e(O5,MY),e(MY,iRr),e(O5,dRr),e(ke,cRr),e(ke,V5),e(V5,T7e),e(T7e,fRr),e(V5,mRr),e(V5,EY),e(EY,gRr),e(V5,hRr),e(ke,pRr),e(ke,X5),e(X5,M7e),e(M7e,uRr),e(X5,_Rr),e(X5,CY),e(CY,bRr),e(X5,vRr),e(zr,FRr),M(z5,zr,null),b(f,xqe,_),b(f,Hc,_),e(Hc,Q5),e(Q5,E7e),M(Lx,E7e,null),e(Hc,TRr),e(Hc,C7e),e(C7e,MRr),b(f,$qe,_),b(f,br,_),M(xx,br,null),e(br,ERr),e(br,Uc),e(Uc,CRr),e(Uc,wY),e(wY,wRr),e(Uc,ARr),e(Uc,AY),e(AY,yRr),e(Uc,LRr),e(br,xRr),e(br,$x),e($x,$Rr),e($x,w7e),e(w7e,kRr),e($x,SRr),e(br,RRr),e(br,Qt),M(kx,Qt,null),e(Qt,PRr),e(Qt,A7e),e(A7e,BRr),e(Qt,IRr),e(Qt,Jc),e(Jc,qRr),e(Jc,y7e),e(y7e,NRr),e(Jc,jRr),e(Jc,yY),e(yY,DRr),e(Jc,GRr),e(Qt,ORr),M(W5,Qt,null),e(br,VRr),e(br,Qr),M(Sx,Qr,null),e(Qr,XRr),e(Qr,L7e),e(L7e,zRr),e(Qr,QRr),e(Qr,Fn),e(Fn,WRr),e(Fn,x7e),e(x7e,HRr),e(Fn,URr),e(Fn,$7e),e($7e,JRr),e(Fn,YRr),e(Fn,k7e),e(k7e,KRr),e(Fn,ZRr),e(Qr,ePr),e(Qr,Ge),e(Ge,H5),e(H5,S7e),e(S7e,oPr),e(H5,rPr),e(H5,LY),e(LY,tPr),e(H5,aPr),e(Ge,nPr),e(Ge,U5),e(U5,R7e),e(R7e,sPr),e(U5,lPr),e(U5,xY),e(xY,iPr),e(U5,dPr),e(Ge,cPr),e(Ge,J5),e(J5,P7e),e(P7e,fPr),e(J5,mPr),e(J5,$Y),e($Y,gPr),e(J5,hPr),e(Ge,pPr),e(Ge,Y5),e(Y5,B7e),e(B7e,uPr),e(Y5,_Pr),e(Y5,kY),e(kY,bPr),e(Y5,vPr),e(Ge,FPr),e(Ge,K5),e(K5,I7e),e(I7e,TPr),e(K5,MPr),e(K5,SY),e(SY,EPr),e(K5,CPr),e(Ge,wPr),e(Ge,Z5),e(Z5,q7e),e(q7e,APr),e(Z5,yPr),e(Z5,RY),e(RY,LPr),e(Z5,xPr),e(Ge,$Pr),e(Ge,eC),e(eC,N7e),e(N7e,kPr),e(eC,SPr),e(eC,PY),e(PY,RPr),e(eC,PPr),e(Ge,BPr),e(Ge,oC),e(oC,j7e),e(j7e,IPr),e(oC,qPr),e(oC,BY),e(BY,NPr),e(oC,jPr),e(Qr,DPr),M(rC,Qr,null),b(f,kqe,_),b(f,Yc,_),e(Yc,tC),e(tC,D7e),M(Rx,D7e,null),e(Yc,GPr),e(Yc,G7e),e(G7e,OPr),b(f,Sqe,_),b(f,vr,_),M(Px,vr,null),e(vr,VPr),e(vr,Kc),e(Kc,XPr),e(Kc,IY),e(IY,zPr),e(Kc,QPr),e(Kc,qY),e(qY,WPr),e(Kc,HPr),e(vr,UPr),e(vr,Bx),e(Bx,JPr),e(Bx,O7e),e(O7e,YPr),e(Bx,KPr),e(vr,ZPr),e(vr,Wt),M(Ix,Wt,null),e(Wt,eBr),e(Wt,V7e),e(V7e,oBr),e(Wt,rBr),e(Wt,Zc),e(Zc,tBr),e(Zc,X7e),e(X7e,aBr),e(Zc,nBr),e(Zc,NY),e(NY,sBr),e(Zc,lBr),e(Wt,iBr),M(aC,Wt,null),e(vr,dBr),e(vr,Wr),M(qx,Wr,null),e(Wr,cBr),e(Wr,z7e),e(z7e,fBr),e(Wr,mBr),e(Wr,Tn),e(Tn,gBr),e(Tn,Q7e),e(Q7e,hBr),e(Tn,pBr),e(Tn,W7e),e(W7e,uBr),e(Tn,_Br),e(Tn,H7e),e(H7e,bBr),e(Tn,vBr),e(Wr,FBr),e(Wr,Oe),e(Oe,nC),e(nC,U7e),e(U7e,TBr),e(nC,MBr),e(nC,jY),e(jY,EBr),e(nC,CBr),e(Oe,wBr),e(Oe,sC),e(sC,J7e),e(J7e,ABr),e(sC,yBr),e(sC,DY),e(DY,LBr),e(sC,xBr),e(Oe,$Br),e(Oe,lC),e(lC,Y7e),e(Y7e,kBr),e(lC,SBr),e(lC,GY),e(GY,RBr),e(lC,PBr),e(Oe,BBr),e(Oe,iC),e(iC,K7e),e(K7e,IBr),e(iC,qBr),e(iC,OY),e(OY,NBr),e(iC,jBr),e(Oe,DBr),e(Oe,dC),e(dC,Z7e),e(Z7e,GBr),e(dC,OBr),e(dC,VY),e(VY,VBr),e(dC,XBr),e(Oe,zBr),e(Oe,cC),e(cC,eMe),e(eMe,QBr),e(cC,WBr),e(cC,XY),e(XY,HBr),e(cC,UBr),e(Oe,JBr),e(Oe,fC),e(fC,oMe),e(oMe,YBr),e(fC,KBr),e(fC,zY),e(zY,ZBr),e(fC,eIr),e(Oe,oIr),e(Oe,mC),e(mC,rMe),e(rMe,rIr),e(mC,tIr),e(mC,QY),e(QY,aIr),e(mC,nIr),e(Wr,sIr),M(gC,Wr,null),b(f,Rqe,_),b(f,ef,_),e(ef,hC),e(hC,tMe),M(Nx,tMe,null),e(ef,lIr),e(ef,aMe),e(aMe,iIr),b(f,Pqe,_),b(f,Fr,_),M(jx,Fr,null),e(Fr,dIr),e(Fr,of),e(of,cIr),e(of,WY),e(WY,fIr),e(of,mIr),e(of,HY),e(HY,gIr),e(of,hIr),e(Fr,pIr),e(Fr,Dx),e(Dx,uIr),e(Dx,nMe),e(nMe,_Ir),e(Dx,bIr),e(Fr,vIr),e(Fr,Ht),M(Gx,Ht,null),e(Ht,FIr),e(Ht,sMe),e(sMe,TIr),e(Ht,MIr),e(Ht,rf),e(rf,EIr),e(rf,lMe),e(lMe,CIr),e(rf,wIr),e(rf,UY),e(UY,AIr),e(rf,yIr),e(Ht,LIr),M(pC,Ht,null),e(Fr,xIr),e(Fr,Hr),M(Ox,Hr,null),e(Hr,$Ir),e(Hr,iMe),e(iMe,kIr),e(Hr,SIr),e(Hr,Mn),e(Mn,RIr),e(Mn,dMe),e(dMe,PIr),e(Mn,BIr),e(Mn,cMe),e(cMe,IIr),e(Mn,qIr),e(Mn,fMe),e(fMe,NIr),e(Mn,jIr),e(Hr,DIr),e(Hr,mMe),e(mMe,uC),e(uC,gMe),e(gMe,GIr),e(uC,OIr),e(uC,JY),e(JY,VIr),e(uC,XIr),e(Hr,zIr),M(_C,Hr,null),b(f,Bqe,_),b(f,tf,_),e(tf,bC),e(bC,hMe),M(Vx,hMe,null),e(tf,QIr),e(tf,pMe),e(pMe,WIr),b(f,Iqe,_),b(f,Tr,_),M(Xx,Tr,null),e(Tr,HIr),e(Tr,af),e(af,UIr),e(af,YY),e(YY,JIr),e(af,YIr),e(af,KY),e(KY,KIr),e(af,ZIr),e(Tr,eqr),e(Tr,zx),e(zx,oqr),e(zx,uMe),e(uMe,rqr),e(zx,tqr),e(Tr,aqr),e(Tr,Ut),M(Qx,Ut,null),e(Ut,nqr),e(Ut,_Me),e(_Me,sqr),e(Ut,lqr),e(Ut,nf),e(nf,iqr),e(nf,bMe),e(bMe,dqr),e(nf,cqr),e(nf,ZY),e(ZY,fqr),e(nf,mqr),e(Ut,gqr),M(vC,Ut,null),e(Tr,hqr),e(Tr,Ur),M(Wx,Ur,null),e(Ur,pqr),e(Ur,vMe),e(vMe,uqr),e(Ur,_qr),e(Ur,En),e(En,bqr),e(En,FMe),e(FMe,vqr),e(En,Fqr),e(En,TMe),e(TMe,Tqr),e(En,Mqr),e(En,MMe),e(MMe,Eqr),e(En,Cqr),e(Ur,wqr),e(Ur,Hx),e(Hx,FC),e(FC,EMe),e(EMe,Aqr),e(FC,yqr),e(FC,eK),e(eK,Lqr),e(FC,xqr),e(Hx,$qr),e(Hx,TC),e(TC,CMe),e(CMe,kqr),e(TC,Sqr),e(TC,oK),e(oK,Rqr),e(TC,Pqr),e(Ur,Bqr),M(MC,Ur,null),b(f,qqe,_),b(f,sf,_),e(sf,EC),e(EC,wMe),M(Ux,wMe,null),e(sf,Iqr),e(sf,AMe),e(AMe,qqr),b(f,Nqe,_),b(f,Mr,_),M(Jx,Mr,null),e(Mr,Nqr),e(Mr,lf),e(lf,jqr),e(lf,rK),e(rK,Dqr),e(lf,Gqr),e(lf,tK),e(tK,Oqr),e(lf,Vqr),e(Mr,Xqr),e(Mr,Yx),e(Yx,zqr),e(Yx,yMe),e(yMe,Qqr),e(Yx,Wqr),e(Mr,Hqr),e(Mr,Jt),M(Kx,Jt,null),e(Jt,Uqr),e(Jt,LMe),e(LMe,Jqr),e(Jt,Yqr),e(Jt,df),e(df,Kqr),e(df,xMe),e(xMe,Zqr),e(df,eNr),e(df,aK),e(aK,oNr),e(df,rNr),e(Jt,tNr),M(CC,Jt,null),e(Mr,aNr),e(Mr,Jr),M(Zx,Jr,null),e(Jr,nNr),e(Jr,$Me),e($Me,sNr),e(Jr,lNr),e(Jr,Cn),e(Cn,iNr),e(Cn,kMe),e(kMe,dNr),e(Cn,cNr),e(Cn,SMe),e(SMe,fNr),e(Cn,mNr),e(Cn,RMe),e(RMe,gNr),e(Cn,hNr),e(Jr,pNr),e(Jr,PMe),e(PMe,wC),e(wC,BMe),e(BMe,uNr),e(wC,_Nr),e(wC,nK),e(nK,bNr),e(wC,vNr),e(Jr,FNr),M(AC,Jr,null),jqe=!0},p(f,[_]){const e9={};_&2&&(e9.$$scope={dirty:_,ctx:f}),bf.$set(e9);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),ug.$set(IMe);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),Hg.$set(qMe);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),Th.$set(NMe);const o9={};_&2&&(o9.$$scope={dirty:_,ctx:f}),Mh.$set(o9);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),jh.$set(jMe);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),Dh.$set(wn);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),Vh.$set(DMe);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),Su.$set(GMe);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),Pu.$set(OMe);const r9={};_&2&&(r9.$$scope={dirty:_,ctx:f}),T_.$set(r9);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),E_.$set(VMe);const t9={};_&2&&(t9.$$scope={dirty:_,ctx:f}),l1.$set(t9);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),d1.$set(XMe);const a9={};_&2&&(a9.$$scope={dirty:_,ctx:f}),Q1.$set(a9);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),H1.$set(zMe);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),g8.$set(QMe);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),p8.$set(WMe);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),cb.$set(cf);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),mb.$set(HMe);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),Vb.$set(UMe);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),zb.$set(JMe);const n9={};_&2&&(n9.$$scope={dirty:_,ctx:f}),Kb.$set(n9);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),e2.$set(YMe);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),B2.$set(KMe);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),q2.$set(ZMe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),Cv.$set(Kr);const s9={};_&2&&(s9.$$scope={dirty:_,ctx:f}),Av.$set(s9);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),xv.$set(e4e);const l9={};_&2&&(l9.$$scope={dirty:_,ctx:f}),kv.$set(l9);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),Xv.$set(o4e);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),Qv.$set(Zr);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),Uv.$set(r4e);const ff={};_&2&&(ff.$$scope={dirty:_,ctx:f}),Yv.$set(ff);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),lF.$set(t4e);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),dF.$set(a4e);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),pF.$set(L);const yC={};_&2&&(yC.$$scope={dirty:_,ctx:f}),_F.$set(yC);const n4e={};_&2&&(n4e.$$scope={dirty:_,ctx:f}),yF.$set(n4e);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:f}),xF.$set(s4e);const LC={};_&2&&(LC.$$scope={dirty:_,ctx:f}),RF.$set(LC);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:f}),BF.$set(l4e);const i4e={};_&2&&(i4e.$$scope={dirty:_,ctx:f}),GF.$set(i4e);const xC={};_&2&&(xC.$$scope={dirty:_,ctx:f}),VF.$set(xC);const d4e={};_&2&&(d4e.$$scope={dirty:_,ctx:f}),HF.$set(d4e);const c4e={};_&2&&(c4e.$$scope={dirty:_,ctx:f}),JF.$set(c4e);const $C={};_&2&&($C.$$scope={dirty:_,ctx:f}),e0.$set($C);const f4e={};_&2&&(f4e.$$scope={dirty:_,ctx:f}),r0.$set(f4e);const m4e={};_&2&&(m4e.$$scope={dirty:_,ctx:f}),n0.$set(m4e);const kC={};_&2&&(kC.$$scope={dirty:_,ctx:f}),l0.$set(kC);const g4e={};_&2&&(g4e.$$scope={dirty:_,ctx:f}),g0.$set(g4e);const h4e={};_&2&&(h4e.$$scope={dirty:_,ctx:f}),p0.$set(h4e);const SC={};_&2&&(SC.$$scope={dirty:_,ctx:f}),b0.$set(SC);const p4e={};_&2&&(p4e.$$scope={dirty:_,ctx:f}),F0.$set(p4e);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),mT.$set(u4e);const RC={};_&2&&(RC.$$scope={dirty:_,ctx:f}),hT.$set(RC);const _4e={};_&2&&(_4e.$$scope={dirty:_,ctx:f}),NT.$set(_4e);const b4e={};_&2&&(b4e.$$scope={dirty:_,ctx:f}),DT.$set(b4e);const PC={};_&2&&(PC.$$scope={dirty:_,ctx:f}),ZT.$set(PC);const v4e={};_&2&&(v4e.$$scope={dirty:_,ctx:f}),o7.$set(v4e);const F4e={};_&2&&(F4e.$$scope={dirty:_,ctx:f}),n7.$set(F4e);const BC={};_&2&&(BC.$$scope={dirty:_,ctx:f}),l7.$set(BC);const T4e={};_&2&&(T4e.$$scope={dirty:_,ctx:f}),L7.$set(T4e);const M4e={};_&2&&(M4e.$$scope={dirty:_,ctx:f}),$7.$set(M4e);const IC={};_&2&&(IC.$$scope={dirty:_,ctx:f}),G7.$set(IC);const E4e={};_&2&&(E4e.$$scope={dirty:_,ctx:f}),V7.$set(E4e);const C4e={};_&2&&(C4e.$$scope={dirty:_,ctx:f}),uM.$set(C4e);const qC={};_&2&&(qC.$$scope={dirty:_,ctx:f}),bM.$set(qC);const w4e={};_&2&&(w4e.$$scope={dirty:_,ctx:f}),IM.$set(w4e);const A4e={};_&2&&(A4e.$$scope={dirty:_,ctx:f}),NM.$set(A4e);const NC={};_&2&&(NC.$$scope={dirty:_,ctx:f}),GM.$set(NC);const y4e={};_&2&&(y4e.$$scope={dirty:_,ctx:f}),VM.$set(y4e);const L4e={};_&2&&(L4e.$$scope={dirty:_,ctx:f}),zM.$set(L4e);const jC={};_&2&&(jC.$$scope={dirty:_,ctx:f}),WM.$set(jC);const x4e={};_&2&&(x4e.$$scope={dirty:_,ctx:f}),h4.$set(x4e);const $4e={};_&2&&($4e.$$scope={dirty:_,ctx:f}),u4.$set($4e);const DC={};_&2&&(DC.$$scope={dirty:_,ctx:f}),q4.$set(DC);const k4e={};_&2&&(k4e.$$scope={dirty:_,ctx:f}),j4.$set(k4e);const S4e={};_&2&&(S4e.$$scope={dirty:_,ctx:f}),G4.$set(S4e);const GC={};_&2&&(GC.$$scope={dirty:_,ctx:f}),V4.$set(GC);const R4e={};_&2&&(R4e.$$scope={dirty:_,ctx:f}),z4.$set(R4e);const P4e={};_&2&&(P4e.$$scope={dirty:_,ctx:f}),W4.$set(P4e);const OC={};_&2&&(OC.$$scope={dirty:_,ctx:f}),FE.$set(OC);const B4e={};_&2&&(B4e.$$scope={dirty:_,ctx:f}),ME.$set(B4e);const I4e={};_&2&&(I4e.$$scope={dirty:_,ctx:f}),RE.$set(I4e);const VC={};_&2&&(VC.$$scope={dirty:_,ctx:f}),BE.$set(VC);const q4e={};_&2&&(q4e.$$scope={dirty:_,ctx:f}),HE.$set(q4e);const N4e={};_&2&&(N4e.$$scope={dirty:_,ctx:f}),JE.$set(N4e);const XC={};_&2&&(XC.$$scope={dirty:_,ctx:f}),l5.$set(XC);const j4e={};_&2&&(j4e.$$scope={dirty:_,ctx:f}),d5.$set(j4e);const D4e={};_&2&&(D4e.$$scope={dirty:_,ctx:f}),v5.$set(D4e);const zC={};_&2&&(zC.$$scope={dirty:_,ctx:f}),T5.$set(zC);const G4e={};_&2&&(G4e.$$scope={dirty:_,ctx:f}),S5.$set(G4e);const O4e={};_&2&&(O4e.$$scope={dirty:_,ctx:f}),P5.$set(O4e);const QC={};_&2&&(QC.$$scope={dirty:_,ctx:f}),z5.$set(QC);const V4e={};_&2&&(V4e.$$scope={dirty:_,ctx:f}),W5.$set(V4e);const X4e={};_&2&&(X4e.$$scope={dirty:_,ctx:f}),rC.$set(X4e);const WC={};_&2&&(WC.$$scope={dirty:_,ctx:f}),aC.$set(WC);const z4e={};_&2&&(z4e.$$scope={dirty:_,ctx:f}),gC.$set(z4e);const Q4e={};_&2&&(Q4e.$$scope={dirty:_,ctx:f}),pC.$set(Q4e);const HC={};_&2&&(HC.$$scope={dirty:_,ctx:f}),_C.$set(HC);const W4e={};_&2&&(W4e.$$scope={dirty:_,ctx:f}),vC.$set(W4e);const H4e={};_&2&&(H4e.$$scope={dirty:_,ctx:f}),MC.$set(H4e);const UC={};_&2&&(UC.$$scope={dirty:_,ctx:f}),CC.$set(UC);const U4e={};_&2&&(U4e.$$scope={dirty:_,ctx:f}),AC.$set(U4e)},i(f){jqe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(Uw.$$.fragment,f),E(Jw.$$.fragment,f),E(bf.$$.fragment,f),E(Yw.$$.fragment,f),E(Kw.$$.fragment,f),E(oA.$$.fragment,f),E(ug.$$.fragment,f),E(rA.$$.fragment,f),E(tA.$$.fragment,f),E(aA.$$.fragment,f),E(lA.$$.fragment,f),E(Hg.$$.fragment,f),E(iA.$$.fragment,f),E(dA.$$.fragment,f),E(cA.$$.fragment,f),E(gA.$$.fragment,f),E(Th.$$.fragment,f),E(Mh.$$.fragment,f),E(hA.$$.fragment,f),E(pA.$$.fragment,f),E(uA.$$.fragment,f),E(vA.$$.fragment,f),E(jh.$$.fragment,f),E(Dh.$$.fragment,f),E(FA.$$.fragment,f),E(TA.$$.fragment,f),E(MA.$$.fragment,f),E(CA.$$.fragment,f),E(Vh.$$.fragment,f),E(wA.$$.fragment,f),E(Su.$$.fragment,f),E(AA.$$.fragment,f),E(yA.$$.fragment,f),E(xA.$$.fragment,f),E(Pu.$$.fragment,f),E($A.$$.fragment,f),E(T_.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(PA.$$.fragment,f),E(E_.$$.fragment,f),E(BA.$$.fragment,f),E(l1.$$.fragment,f),E(IA.$$.fragment,f),E(qA.$$.fragment,f),E(jA.$$.fragment,f),E(d1.$$.fragment,f),E(DA.$$.fragment,f),E(Q1.$$.fragment,f),E(GA.$$.fragment,f),E(OA.$$.fragment,f),E(XA.$$.fragment,f),E(H1.$$.fragment,f),E(zA.$$.fragment,f),E(g8.$$.fragment,f),E(QA.$$.fragment,f),E(WA.$$.fragment,f),E(UA.$$.fragment,f),E(p8.$$.fragment,f),E(JA.$$.fragment,f),E(cb.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(e6.$$.fragment,f),E(mb.$$.fragment,f),E(o6.$$.fragment,f),E(Vb.$$.fragment,f),E(r6.$$.fragment,f),E(t6.$$.fragment,f),E(n6.$$.fragment,f),E(zb.$$.fragment,f),E(s6.$$.fragment,f),E(Kb.$$.fragment,f),E(l6.$$.fragment,f),E(i6.$$.fragment,f),E(c6.$$.fragment,f),E(e2.$$.fragment,f),E(f6.$$.fragment,f),E(B2.$$.fragment,f),E(m6.$$.fragment,f),E(g6.$$.fragment,f),E(p6.$$.fragment,f),E(q2.$$.fragment,f),E(u6.$$.fragment,f),E(Cv.$$.fragment,f),E(_6.$$.fragment,f),E(b6.$$.fragment,f),E(F6.$$.fragment,f),E(Av.$$.fragment,f),E(T6.$$.fragment,f),E(xv.$$.fragment,f),E(M6.$$.fragment,f),E(E6.$$.fragment,f),E(w6.$$.fragment,f),E(kv.$$.fragment,f),E(A6.$$.fragment,f),E(Xv.$$.fragment,f),E(y6.$$.fragment,f),E(L6.$$.fragment,f),E($6.$$.fragment,f),E(Qv.$$.fragment,f),E(k6.$$.fragment,f),E(Uv.$$.fragment,f),E(S6.$$.fragment,f),E(R6.$$.fragment,f),E(B6.$$.fragment,f),E(Yv.$$.fragment,f),E(I6.$$.fragment,f),E(lF.$$.fragment,f),E(q6.$$.fragment,f),E(N6.$$.fragment,f),E(D6.$$.fragment,f),E(dF.$$.fragment,f),E(G6.$$.fragment,f),E(pF.$$.fragment,f),E(O6.$$.fragment,f),E(V6.$$.fragment,f),E(z6.$$.fragment,f),E(_F.$$.fragment,f),E(Q6.$$.fragment,f),E(yF.$$.fragment,f),E(W6.$$.fragment,f),E(H6.$$.fragment,f),E(J6.$$.fragment,f),E(xF.$$.fragment,f),E(Y6.$$.fragment,f),E(RF.$$.fragment,f),E(Z6.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(BF.$$.fragment,f),E(ty.$$.fragment,f),E(GF.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(VF.$$.fragment,f),E(iy.$$.fragment,f),E(HF.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(JF.$$.fragment,f),E(gy.$$.fragment,f),E(e0.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(r0.$$.fragment,f),E(vy.$$.fragment,f),E(n0.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(l0.$$.fragment,f),E(Cy.$$.fragment,f),E(g0.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(p0.$$.fragment,f),E(xy.$$.fragment,f),E(b0.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(F0.$$.fragment,f),E(Py.$$.fragment,f),E(mT.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(hT.$$.fragment,f),E(jy.$$.fragment,f),E(NT.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(DT.$$.fragment,f),E(Xy.$$.fragment,f),E(ZT.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(o7.$$.fragment,f),E(Uy.$$.fragment,f),E(n7.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(l7.$$.fragment,f),E(eL.$$.fragment,f),E(L7.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E($7.$$.fragment,f),E(nL.$$.fragment,f),E(G7.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(V7.$$.fragment,f),E(cL.$$.fragment,f),E(uM.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(bM.$$.fragment,f),E(pL.$$.fragment,f),E(IM.$$.fragment,f),E(uL.$$.fragment,f),E(_L.$$.fragment,f),E(vL.$$.fragment,f),E(NM.$$.fragment,f),E(FL.$$.fragment,f),E(GM.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(VM.$$.fragment,f),E(AL.$$.fragment,f),E(zM.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(WM.$$.fragment,f),E(kL.$$.fragment,f),E(h4.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(u4.$$.fragment,f),E(IL.$$.fragment,f),E(q4.$$.fragment,f),E(qL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E(j4.$$.fragment,f),E(GL.$$.fragment,f),E(G4.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(V4.$$.fragment,f),E(QL.$$.fragment,f),E(z4.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(W4.$$.fragment,f),E(YL.$$.fragment,f),E(FE.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(ox.$$.fragment,f),E(ME.$$.fragment,f),E(rx.$$.fragment,f),E(RE.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(BE.$$.fragment,f),E(lx.$$.fragment,f),E(HE.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(JE.$$.fragment,f),E(mx.$$.fragment,f),E(l5.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(ux.$$.fragment,f),E(d5.$$.fragment,f),E(_x.$$.fragment,f),E(v5.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(T5.$$.fragment,f),E(Mx.$$.fragment,f),E(S5.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(P5.$$.fragment,f),E(yx.$$.fragment,f),E(z5.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(W5.$$.fragment,f),E(Sx.$$.fragment,f),E(rC.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(aC.$$.fragment,f),E(qx.$$.fragment,f),E(gC.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(pC.$$.fragment,f),E(Ox.$$.fragment,f),E(_C.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Qx.$$.fragment,f),E(vC.$$.fragment,f),E(Wx.$$.fragment,f),E(MC.$$.fragment,f),E(Ux.$$.fragment,f),E(Jx.$$.fragment,f),E(Kx.$$.fragment,f),E(CC.$$.fragment,f),E(Zx.$$.fragment,f),E(AC.$$.fragment,f),jqe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(Uw.$$.fragment,f),C(Jw.$$.fragment,f),C(bf.$$.fragment,f),C(Yw.$$.fragment,f),C(Kw.$$.fragment,f),C(oA.$$.fragment,f),C(ug.$$.fragment,f),C(rA.$$.fragment,f),C(tA.$$.fragment,f),C(aA.$$.fragment,f),C(lA.$$.fragment,f),C(Hg.$$.fragment,f),C(iA.$$.fragment,f),C(dA.$$.fragment,f),C(cA.$$.fragment,f),C(gA.$$.fragment,f),C(Th.$$.fragment,f),C(Mh.$$.fragment,f),C(hA.$$.fragment,f),C(pA.$$.fragment,f),C(uA.$$.fragment,f),C(vA.$$.fragment,f),C(jh.$$.fragment,f),C(Dh.$$.fragment,f),C(FA.$$.fragment,f),C(TA.$$.fragment,f),C(MA.$$.fragment,f),C(CA.$$.fragment,f),C(Vh.$$.fragment,f),C(wA.$$.fragment,f),C(Su.$$.fragment,f),C(AA.$$.fragment,f),C(yA.$$.fragment,f),C(xA.$$.fragment,f),C(Pu.$$.fragment,f),C($A.$$.fragment,f),C(T_.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(PA.$$.fragment,f),C(E_.$$.fragment,f),C(BA.$$.fragment,f),C(l1.$$.fragment,f),C(IA.$$.fragment,f),C(qA.$$.fragment,f),C(jA.$$.fragment,f),C(d1.$$.fragment,f),C(DA.$$.fragment,f),C(Q1.$$.fragment,f),C(GA.$$.fragment,f),C(OA.$$.fragment,f),C(XA.$$.fragment,f),C(H1.$$.fragment,f),C(zA.$$.fragment,f),C(g8.$$.fragment,f),C(QA.$$.fragment,f),C(WA.$$.fragment,f),C(UA.$$.fragment,f),C(p8.$$.fragment,f),C(JA.$$.fragment,f),C(cb.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(e6.$$.fragment,f),C(mb.$$.fragment,f),C(o6.$$.fragment,f),C(Vb.$$.fragment,f),C(r6.$$.fragment,f),C(t6.$$.fragment,f),C(n6.$$.fragment,f),C(zb.$$.fragment,f),C(s6.$$.fragment,f),C(Kb.$$.fragment,f),C(l6.$$.fragment,f),C(i6.$$.fragment,f),C(c6.$$.fragment,f),C(e2.$$.fragment,f),C(f6.$$.fragment,f),C(B2.$$.fragment,f),C(m6.$$.fragment,f),C(g6.$$.fragment,f),C(p6.$$.fragment,f),C(q2.$$.fragment,f),C(u6.$$.fragment,f),C(Cv.$$.fragment,f),C(_6.$$.fragment,f),C(b6.$$.fragment,f),C(F6.$$.fragment,f),C(Av.$$.fragment,f),C(T6.$$.fragment,f),C(xv.$$.fragment,f),C(M6.$$.fragment,f),C(E6.$$.fragment,f),C(w6.$$.fragment,f),C(kv.$$.fragment,f),C(A6.$$.fragment,f),C(Xv.$$.fragment,f),C(y6.$$.fragment,f),C(L6.$$.fragment,f),C($6.$$.fragment,f),C(Qv.$$.fragment,f),C(k6.$$.fragment,f),C(Uv.$$.fragment,f),C(S6.$$.fragment,f),C(R6.$$.fragment,f),C(B6.$$.fragment,f),C(Yv.$$.fragment,f),C(I6.$$.fragment,f),C(lF.$$.fragment,f),C(q6.$$.fragment,f),C(N6.$$.fragment,f),C(D6.$$.fragment,f),C(dF.$$.fragment,f),C(G6.$$.fragment,f),C(pF.$$.fragment,f),C(O6.$$.fragment,f),C(V6.$$.fragment,f),C(z6.$$.fragment,f),C(_F.$$.fragment,f),C(Q6.$$.fragment,f),C(yF.$$.fragment,f),C(W6.$$.fragment,f),C(H6.$$.fragment,f),C(J6.$$.fragment,f),C(xF.$$.fragment,f),C(Y6.$$.fragment,f),C(RF.$$.fragment,f),C(Z6.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(BF.$$.fragment,f),C(ty.$$.fragment,f),C(GF.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(VF.$$.fragment,f),C(iy.$$.fragment,f),C(HF.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(JF.$$.fragment,f),C(gy.$$.fragment,f),C(e0.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(r0.$$.fragment,f),C(vy.$$.fragment,f),C(n0.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(l0.$$.fragment,f),C(Cy.$$.fragment,f),C(g0.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(p0.$$.fragment,f),C(xy.$$.fragment,f),C(b0.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(F0.$$.fragment,f),C(Py.$$.fragment,f),C(mT.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(hT.$$.fragment,f),C(jy.$$.fragment,f),C(NT.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(DT.$$.fragment,f),C(Xy.$$.fragment,f),C(ZT.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(o7.$$.fragment,f),C(Uy.$$.fragment,f),C(n7.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(l7.$$.fragment,f),C(eL.$$.fragment,f),C(L7.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C($7.$$.fragment,f),C(nL.$$.fragment,f),C(G7.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(V7.$$.fragment,f),C(cL.$$.fragment,f),C(uM.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(bM.$$.fragment,f),C(pL.$$.fragment,f),C(IM.$$.fragment,f),C(uL.$$.fragment,f),C(_L.$$.fragment,f),C(vL.$$.fragment,f),C(NM.$$.fragment,f),C(FL.$$.fragment,f),C(GM.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(VM.$$.fragment,f),C(AL.$$.fragment,f),C(zM.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(WM.$$.fragment,f),C(kL.$$.fragment,f),C(h4.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(u4.$$.fragment,f),C(IL.$$.fragment,f),C(q4.$$.fragment,f),C(qL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C(j4.$$.fragment,f),C(GL.$$.fragment,f),C(G4.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(V4.$$.fragment,f),C(QL.$$.fragment,f),C(z4.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(W4.$$.fragment,f),C(YL.$$.fragment,f),C(FE.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(ox.$$.fragment,f),C(ME.$$.fragment,f),C(rx.$$.fragment,f),C(RE.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(BE.$$.fragment,f),C(lx.$$.fragment,f),C(HE.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(JE.$$.fragment,f),C(mx.$$.fragment,f),C(l5.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(ux.$$.fragment,f),C(d5.$$.fragment,f),C(_x.$$.fragment,f),C(v5.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(T5.$$.fragment,f),C(Mx.$$.fragment,f),C(S5.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(P5.$$.fragment,f),C(yx.$$.fragment,f),C(z5.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(W5.$$.fragment,f),C(Sx.$$.fragment,f),C(rC.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(aC.$$.fragment,f),C(qx.$$.fragment,f),C(gC.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(pC.$$.fragment,f),C(Ox.$$.fragment,f),C(_C.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Qx.$$.fragment,f),C(vC.$$.fragment,f),C(Wx.$$.fragment,f),C(MC.$$.fragment,f),C(Ux.$$.fragment,f),C(Jx.$$.fragment,f),C(Kx.$$.fragment,f),C(CC.$$.fragment,f),C(Zx.$$.fragment,f),C(AC.$$.fragment,f),jqe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(gf),f&&t(et),f&&t(Ne),f&&t(Xe),f&&t(pf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(IBe),f&&t(pi),w(Uw),f&&t(qBe),f&&t($n),f&&t(NBe),w(Jw,f),f&&t(jBe),f&&t(b$),f&&t(DBe),w(bf,f),f&&t(GBe),f&&t(ui),w(Yw),f&&t(OBe),f&&t(Co),w(Kw),w(oA),w(ug),w(rA),f&&t(VBe),f&&t(bi),w(tA),f&&t(XBe),f&&t(wo),w(aA),w(lA),w(Hg),w(iA),f&&t(zBe),f&&t(vi),w(dA),f&&t(QBe),f&&t(Ao),w(cA),w(gA),w(Th),w(Mh),w(hA),f&&t(WBe),f&&t(Fi),w(pA),f&&t(HBe),f&&t(yo),w(uA),w(vA),w(jh),w(Dh),w(FA),f&&t(UBe),f&&t(Mi),w(TA),f&&t(JBe),f&&t(Lo),w(MA),w(CA),w(Vh),w(wA),w(Su),f&&t(YBe),f&&t(wi),w(AA),f&&t(KBe),f&&t(xo),w(yA),w(xA),w(Pu),w($A),w(T_),f&&t(ZBe),f&&t(Li),w(kA),f&&t(eIe),f&&t($o),w(SA),w(PA),w(E_),w(BA),w(l1),f&&t(oIe),f&&t(ki),w(IA),f&&t(rIe),f&&t(ko),w(qA),w(jA),w(d1),w(DA),w(Q1),f&&t(tIe),f&&t(Pi),w(GA),f&&t(aIe),f&&t(So),w(OA),w(XA),w(H1),w(zA),w(g8),f&&t(nIe),f&&t(qi),w(QA),f&&t(sIe),f&&t(Ro),w(WA),w(UA),w(p8),w(JA),w(cb),f&&t(lIe),f&&t(Di),w(YA),f&&t(iIe),f&&t(Po),w(KA),w(e6),w(mb),w(o6),w(Vb),f&&t(dIe),f&&t(Vi),w(r6),f&&t(cIe),f&&t(Bo),w(t6),w(n6),w(zb),w(s6),w(Kb),f&&t(fIe),f&&t(Qi),w(l6),f&&t(mIe),f&&t(Io),w(i6),w(c6),w(e2),w(f6),w(B2),f&&t(gIe),f&&t(Ui),w(m6),f&&t(hIe),f&&t(qo),w(g6),w(p6),w(q2),w(u6),w(Cv),f&&t(pIe),f&&t(Ki),w(_6),f&&t(uIe),f&&t(No),w(b6),w(F6),w(Av),w(T6),w(xv),f&&t(_Ie),f&&t(od),w(M6),f&&t(bIe),f&&t(jo),w(E6),w(w6),w(kv),w(A6),w(Xv),f&&t(vIe),f&&t(ad),w(y6),f&&t(FIe),f&&t(Do),w(L6),w($6),w(Qv),w(k6),w(Uv),f&&t(TIe),f&&t(ld),w(S6),f&&t(MIe),f&&t(Go),w(R6),w(B6),w(Yv),w(I6),w(lF),f&&t(EIe),f&&t(cd),w(q6),f&&t(CIe),f&&t(Oo),w(N6),w(D6),w(dF),w(G6),w(pF),f&&t(wIe),f&&t(gd),w(O6),f&&t(AIe),f&&t(Vo),w(V6),w(z6),w(_F),w(Q6),w(yF),f&&t(yIe),f&&t(ud),w(W6),f&&t(LIe),f&&t(Xo),w(H6),w(J6),w(xF),w(Y6),w(RF),f&&t(xIe),f&&t(vd),w(Z6),f&&t($Ie),f&&t(zo),w(ey),w(ry),w(BF),w(ty),w(GF),f&&t(kIe),f&&t(Md),w(ay),f&&t(SIe),f&&t(Qo),w(ny),w(ly),w(VF),w(iy),w(HF),f&&t(RIe),f&&t(Ad),w(dy),f&&t(PIe),f&&t(Wo),w(cy),w(my),w(JF),w(gy),w(e0),f&&t(BIe),f&&t(xd),w(py),f&&t(IIe),f&&t(Ho),w(uy),w(by),w(r0),w(vy),w(n0),f&&t(qIe),f&&t(Sd),w(Fy),f&&t(NIe),f&&t(Uo),w(Ty),w(Ey),w(l0),w(Cy),w(g0),f&&t(jIe),f&&t(Bd),w(wy),f&&t(DIe),f&&t(Jo),w(Ay),w(Ly),w(p0),w(xy),w(b0),f&&t(GIe),f&&t(Nd),w($y),f&&t(OIe),f&&t(Yo),w(ky),w(Ry),w(F0),w(Py),w(mT),f&&t(VIe),f&&t(Gd),w(By),f&&t(XIe),f&&t(Ko),w(Iy),w(Ny),w(hT),w(jy),w(NT),f&&t(zIe),f&&t(Xd),w(Dy),f&&t(QIe),f&&t(Zo),w(Gy),w(Vy),w(DT),w(Xy),w(ZT),f&&t(WIe),f&&t(Wd),w(zy),f&&t(HIe),f&&t(er),w(Qy),w(Hy),w(o7),w(Uy),w(n7),f&&t(UIe),f&&t(Yd),w(Jy),f&&t(JIe),f&&t(or),w(Yy),w(Zy),w(l7),w(eL),w(L7),f&&t(YIe),f&&t(ec),w(oL),f&&t(KIe),f&&t(rr),w(rL),w(aL),w($7),w(nL),w(G7),f&&t(ZIe),f&&t(tc),w(sL),f&&t(eqe),f&&t(tr),w(lL),w(dL),w(V7),w(cL),w(uM),f&&t(oqe),f&&t(sc),w(fL),f&&t(rqe),f&&t(ar),w(mL),w(hL),w(bM),w(pL),w(IM),f&&t(tqe),f&&t(dc),w(uL),f&&t(aqe),f&&t(nr),w(_L),w(vL),w(NM),w(FL),w(GM),f&&t(nqe),f&&t(mc),w(ML),f&&t(sqe),f&&t(sr),w(EL),w(wL),w(VM),w(AL),w(zM),f&&t(lqe),f&&t(pc),w(yL),f&&t(iqe),f&&t(lr),w(LL),w($L),w(WM),w(kL),w(h4),f&&t(dqe),f&&t(bc),w(SL),f&&t(cqe),f&&t(ir),w(RL),w(BL),w(u4),w(IL),w(q4),f&&t(fqe),f&&t(Tc),w(qL),f&&t(mqe),f&&t(dr),w(NL),w(DL),w(j4),w(GL),w(G4),f&&t(gqe),f&&t(Cc),w(OL),f&&t(hqe),f&&t(cr),w(VL),w(zL),w(V4),w(QL),w(z4),f&&t(pqe),f&&t(yc),w(WL),f&&t(uqe),f&&t(fr),w(HL),w(JL),w(W4),w(YL),w(FE),f&&t(_qe),f&&t($c),w(KL),f&&t(bqe),f&&t(mr),w(ZL),w(ox),w(ME),w(rx),w(RE),f&&t(vqe),f&&t(Rc),w(tx),f&&t(Fqe),f&&t(gr),w(ax),w(sx),w(BE),w(lx),w(HE),f&&t(Tqe),f&&t(Ic),w(ix),f&&t(Mqe),f&&t(hr),w(dx),w(fx),w(JE),w(mx),w(l5),f&&t(Eqe),f&&t(jc),w(gx),f&&t(Cqe),f&&t(pr),w(hx),w(ux),w(d5),w(_x),w(v5),f&&t(wqe),f&&t(Oc),w(bx),f&&t(Aqe),f&&t(ur),w(vx),w(Tx),w(T5),w(Mx),w(S5),f&&t(yqe),f&&t(zc),w(Ex),f&&t(Lqe),f&&t(_r),w(Cx),w(Ax),w(P5),w(yx),w(z5),f&&t(xqe),f&&t(Hc),w(Lx),f&&t($qe),f&&t(br),w(xx),w(kx),w(W5),w(Sx),w(rC),f&&t(kqe),f&&t(Yc),w(Rx),f&&t(Sqe),f&&t(vr),w(Px),w(Ix),w(aC),w(qx),w(gC),f&&t(Rqe),f&&t(ef),w(Nx),f&&t(Pqe),f&&t(Fr),w(jx),w(Gx),w(pC),w(Ox),w(_C),f&&t(Bqe),f&&t(tf),w(Vx),f&&t(Iqe),f&&t(Tr),w(Xx),w(Qx),w(vC),w(Wx),w(MC),f&&t(qqe),f&&t(sf),w(Ux),f&&t(Nqe),f&&t(Mr),w(Jx),w(Kx),w(CC),w(Zx),w(AC)}}}const Q6t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function W6t(A){return Wwt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class eyt extends Vwt{constructor(g){super();Xwt(this,g,W6t,z6t,zwt,{})}}export{eyt as default,Q6t as metadata};
