import{S as Swt,i as Rwt,s as Pwt,e as a,k as l,w as F,t as o,M as Bwt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as Iwt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as mNr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function qwt(A){let g,v,p,m,u,d,h,Mo,ii,gf,et,di,ci,Xw,hf,Ne,Xe,fi,An,zw,yn,Ln,Qw,mi,xn,Ww,gi,pf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ii=a("code"),gf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),di=a("code"),ci=o('"new-model"'),Xw=o(")."),hf=l(),Ne=a("p"),Xe=o("Likewise, if your "),fi=a("code"),An=o("NewModel"),zw=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),Qw=o(`, make sure its
`),mi=a("code"),xn=o("config_class"),Ww=o(` attribute is set to the same class you use when registering the model (here
`),gi=a("code"),pf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var m$=s(p);m=r(m$,"NewModelConfig"),m$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var hi=s(d);h=r(hi,"PretrainedConfig"),hi.forEach(t),Mo=r(Ae,`, make sure its
`),ii=n(Ae,"CODE",{});var g$=s(ii);gf=r(g$,"model_type"),g$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),di=n(Ae,"CODE",{});var h$=s(di);ci=r(h$,'"new-model"'),h$.forEach(t),Xw=r(Ae,")."),Ae.forEach(t),hf=i(ze),Ne=n(ze,"P",{});var Eo=s(Ne);Xe=r(Eo,"Likewise, if your "),fi=n(Eo,"CODE",{});var Ea=s(fi);An=r(Ea,"NewModel"),Ea.forEach(t),zw=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var p$=s(yn);Ln=r(p$,"PreTrainedModel"),p$.forEach(t),Qw=r(Eo,`, make sure its
`),mi=n(Eo,"CODE",{});var uf=s(mi);xn=r(uf,"config_class"),uf.forEach(t),Ww=r(Eo,` attribute is set to the same class you use when registering the model (here
`),gi=n(Eo,"CODE",{});var u$=s(gi);pf=r(u$,"NewModelConfig"),u$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ii),e(ii,gf),e(g,et),e(g,di),e(di,ci),e(g,Xw),b(ze,hf,Ae),b(ze,Ne,Ae),e(Ne,Xe),e(Ne,fi),e(fi,An),e(Ne,zw),e(Ne,yn),e(yn,Ln),e(Ne,Qw),e(Ne,mi),e(mi,xn),e(Ne,Ww),e(Ne,gi),e(gi,pf),e(Ne,Ma)},d(ze){ze&&t(g),ze&&t(hf),ze&&t(Ne)}}}function Nwt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jwt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dwt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Gwt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Owt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Vwt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xwt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zwt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qwt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wwt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hwt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uwt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jwt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ywt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kwt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zwt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _At(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $At(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZAt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R6t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P6t(A){let g,v,p,m,u,d,h,Mo,ii,gf,et,di,ci,Xw,hf,Ne,Xe,fi,An,zw,yn,Ln,Qw,mi,xn,Ww,gi,pf,Ma,ze,Ae,m$,hi,g$,h$,Eo,Ea,p$,uf,u$,Vje,SBe,pi,_f,YZ,Hw,Xje,KZ,zje,RBe,$n,Qje,ZZ,Wje,Hje,eee,Uje,Jje,PBe,Uw,BBe,_$,Yje,IBe,bf,qBe,ui,vf,oee,Jw,Kje,ree,Zje,NBe,Co,Yw,eDe,Kw,oDe,b$,rDe,tDe,aDe,Zw,nDe,tee,sDe,lDe,iDe,Er,eA,dDe,aee,cDe,fDe,_i,mDe,nee,gDe,hDe,see,pDe,uDe,_De,y,Ff,lee,bDe,vDe,v$,FDe,TDe,MDe,Tf,iee,EDe,CDe,F$,wDe,ADe,yDe,Mf,dee,LDe,xDe,T$,$De,kDe,SDe,Ef,cee,RDe,PDe,M$,BDe,IDe,qDe,Cf,fee,NDe,jDe,E$,DDe,GDe,ODe,wf,mee,VDe,XDe,C$,zDe,QDe,WDe,Af,gee,HDe,UDe,w$,JDe,YDe,KDe,yf,hee,ZDe,eGe,A$,oGe,rGe,tGe,Lf,pee,aGe,nGe,y$,sGe,lGe,iGe,xf,uee,dGe,cGe,L$,fGe,mGe,gGe,$f,_ee,hGe,pGe,x$,uGe,_Ge,bGe,kf,bee,vGe,FGe,$$,TGe,MGe,EGe,Sf,vee,CGe,wGe,k$,AGe,yGe,LGe,Rf,Fee,xGe,$Ge,S$,kGe,SGe,RGe,Pf,Tee,PGe,BGe,R$,IGe,qGe,NGe,Bf,Mee,jGe,DGe,P$,GGe,OGe,VGe,If,Eee,XGe,zGe,B$,QGe,WGe,HGe,qf,Cee,UGe,JGe,I$,YGe,KGe,ZGe,Nf,wee,eOe,oOe,q$,rOe,tOe,aOe,jf,Aee,nOe,sOe,N$,lOe,iOe,dOe,Df,yee,cOe,fOe,j$,mOe,gOe,hOe,Gf,Lee,pOe,uOe,D$,_Oe,bOe,vOe,Of,xee,FOe,TOe,G$,MOe,EOe,COe,Vf,$ee,wOe,AOe,O$,yOe,LOe,xOe,Xf,kee,$Oe,kOe,V$,SOe,ROe,POe,zf,See,BOe,IOe,X$,qOe,NOe,jOe,Qf,Ree,DOe,GOe,z$,OOe,VOe,XOe,Wf,Pee,zOe,QOe,Q$,WOe,HOe,UOe,Hf,Bee,JOe,YOe,W$,KOe,ZOe,eVe,Uf,Iee,oVe,rVe,H$,tVe,aVe,nVe,Jf,qee,sVe,lVe,U$,iVe,dVe,cVe,Yf,Nee,fVe,mVe,J$,gVe,hVe,pVe,Kf,jee,uVe,_Ve,Y$,bVe,vVe,FVe,Zf,Dee,TVe,MVe,K$,EVe,CVe,wVe,em,Gee,AVe,yVe,Z$,LVe,xVe,$Ve,om,Oee,kVe,SVe,ek,RVe,PVe,BVe,rm,Vee,IVe,qVe,ok,NVe,jVe,DVe,tm,Xee,GVe,OVe,rk,VVe,XVe,zVe,am,zee,QVe,WVe,tk,HVe,UVe,JVe,nm,Qee,YVe,KVe,ak,ZVe,eXe,oXe,sm,Wee,rXe,tXe,nk,aXe,nXe,sXe,lm,Hee,lXe,iXe,sk,dXe,cXe,fXe,im,Uee,mXe,gXe,lk,hXe,pXe,uXe,dm,Jee,_Xe,bXe,ik,vXe,FXe,TXe,cm,Yee,MXe,EXe,dk,CXe,wXe,AXe,fm,Kee,yXe,LXe,ck,xXe,$Xe,kXe,mm,Zee,SXe,RXe,fk,PXe,BXe,IXe,gm,eoe,qXe,NXe,mk,jXe,DXe,GXe,hm,ooe,OXe,VXe,gk,XXe,zXe,QXe,pm,roe,WXe,HXe,hk,UXe,JXe,YXe,um,toe,KXe,ZXe,pk,eze,oze,rze,_m,aoe,tze,aze,uk,nze,sze,lze,bm,noe,ize,dze,_k,cze,fze,mze,vm,soe,gze,hze,bk,pze,uze,_ze,Fm,loe,bze,vze,vk,Fze,Tze,Mze,Tm,ioe,Eze,Cze,Fk,wze,Aze,yze,Mm,doe,Lze,xze,Tk,$ze,kze,Sze,Em,coe,Rze,Pze,Mk,Bze,Ize,qze,Cm,foe,Nze,jze,Ek,Dze,Gze,Oze,wm,moe,Vze,Xze,Ck,zze,Qze,Wze,Am,goe,Hze,Uze,wk,Jze,Yze,Kze,ym,hoe,Zze,eQe,Ak,oQe,rQe,tQe,Lm,poe,aQe,nQe,yk,sQe,lQe,iQe,xm,uoe,dQe,cQe,Lk,fQe,mQe,gQe,$m,_oe,hQe,pQe,xk,uQe,_Qe,bQe,km,boe,vQe,FQe,$k,TQe,MQe,EQe,Sm,voe,CQe,wQe,kk,AQe,yQe,LQe,Rm,Foe,xQe,$Qe,Sk,kQe,SQe,RQe,Pm,Toe,PQe,BQe,Rk,IQe,qQe,NQe,Bm,Moe,jQe,DQe,Pk,GQe,OQe,VQe,Im,Eoe,XQe,zQe,Bk,QQe,WQe,HQe,qm,Coe,UQe,JQe,Ik,YQe,KQe,ZQe,Nm,woe,eWe,oWe,qk,rWe,tWe,aWe,jm,Aoe,nWe,sWe,Nk,lWe,iWe,dWe,Dm,yoe,cWe,fWe,jk,mWe,gWe,hWe,Gm,Loe,pWe,uWe,Dk,_We,bWe,vWe,Om,xoe,FWe,TWe,Gk,MWe,EWe,CWe,Vm,$oe,wWe,AWe,Ok,yWe,LWe,xWe,Xm,koe,$We,kWe,Vk,SWe,RWe,PWe,zm,Soe,BWe,IWe,Xk,qWe,NWe,jWe,Qm,Roe,DWe,GWe,zk,OWe,VWe,XWe,Wm,Poe,zWe,QWe,Qk,WWe,HWe,UWe,Hm,Boe,JWe,YWe,Wk,KWe,ZWe,eHe,Um,Ioe,oHe,rHe,Hk,tHe,aHe,nHe,Jm,qoe,sHe,lHe,Uk,iHe,dHe,cHe,Ym,Noe,fHe,mHe,Jk,gHe,hHe,pHe,Km,joe,uHe,_He,Yk,bHe,vHe,FHe,Zm,Doe,THe,MHe,Kk,EHe,CHe,wHe,eg,Goe,AHe,yHe,Zk,LHe,xHe,$He,og,Ooe,kHe,SHe,eS,RHe,PHe,BHe,rg,Voe,IHe,qHe,oS,NHe,jHe,DHe,tg,Xoe,GHe,OHe,rS,VHe,XHe,zHe,ag,zoe,QHe,WHe,tS,HHe,UHe,JHe,ng,Qoe,YHe,KHe,aS,ZHe,eUe,oUe,sg,Woe,rUe,tUe,nS,aUe,nUe,sUe,lg,Hoe,lUe,iUe,sS,dUe,cUe,fUe,ig,Uoe,mUe,gUe,lS,hUe,pUe,uUe,dg,Joe,_Ue,bUe,iS,vUe,FUe,TUe,cg,Yoe,MUe,EUe,dS,CUe,wUe,AUe,fg,Koe,yUe,LUe,cS,xUe,$Ue,kUe,mg,Zoe,SUe,RUe,fS,PUe,BUe,IUe,gg,ere,qUe,NUe,mS,jUe,DUe,GUe,hg,ore,OUe,VUe,gS,XUe,zUe,QUe,pg,rre,WUe,HUe,hS,UUe,JUe,YUe,ug,KUe,_g,oA,ZUe,tre,eJe,jBe,bi,bg,are,rA,oJe,nre,rJe,DBe,wo,tA,tJe,aA,aJe,pS,nJe,sJe,lJe,nA,iJe,sre,dJe,cJe,fJe,Cr,sA,mJe,lre,gJe,hJe,Ca,pJe,ire,uJe,_Je,dre,bJe,vJe,cre,FJe,TJe,MJe,k,kn,fre,EJe,CJe,uS,wJe,AJe,_S,yJe,LJe,xJe,Sn,mre,$Je,kJe,bS,SJe,RJe,vS,PJe,BJe,IJe,Rn,gre,qJe,NJe,FS,jJe,DJe,TS,GJe,OJe,VJe,vg,hre,XJe,zJe,MS,QJe,WJe,HJe,Pn,pre,UJe,JJe,ES,YJe,KJe,CS,ZJe,eYe,oYe,Fg,ure,rYe,tYe,wS,aYe,nYe,sYe,Tg,_re,lYe,iYe,AS,dYe,cYe,fYe,Mg,bre,mYe,gYe,yS,hYe,pYe,uYe,Bn,vre,_Ye,bYe,LS,vYe,FYe,xS,TYe,MYe,EYe,In,Fre,CYe,wYe,$S,AYe,yYe,kS,LYe,xYe,$Ye,qn,Tre,kYe,SYe,SS,RYe,PYe,RS,BYe,IYe,qYe,Eg,Mre,NYe,jYe,PS,DYe,GYe,OYe,Cg,Ere,VYe,XYe,BS,zYe,QYe,WYe,Nn,Cre,HYe,UYe,IS,JYe,YYe,qS,KYe,ZYe,eKe,wg,wre,oKe,rKe,NS,tKe,aKe,nKe,jn,Are,sKe,lKe,jS,iKe,dKe,DS,cKe,fKe,mKe,Dn,yre,gKe,hKe,GS,pKe,uKe,OS,_Ke,bKe,vKe,Gn,Lre,FKe,TKe,VS,MKe,EKe,XS,CKe,wKe,AKe,Ag,xre,yKe,LKe,zS,xKe,$Ke,kKe,On,$re,SKe,RKe,QS,PKe,BKe,WS,IKe,qKe,NKe,Vn,kre,jKe,DKe,HS,GKe,OKe,US,VKe,XKe,zKe,Xn,Sre,QKe,WKe,JS,HKe,UKe,YS,JKe,YKe,KKe,zn,Rre,ZKe,eZe,KS,oZe,rZe,ZS,tZe,aZe,nZe,Qn,Pre,sZe,lZe,eR,iZe,dZe,oR,cZe,fZe,mZe,Wn,Bre,gZe,hZe,rR,pZe,uZe,tR,_Ze,bZe,vZe,yg,Ire,FZe,TZe,aR,MZe,EZe,CZe,Hn,qre,wZe,AZe,nR,yZe,LZe,sR,xZe,$Ze,kZe,Lg,Nre,SZe,RZe,lR,PZe,BZe,IZe,Un,jre,qZe,NZe,iR,jZe,DZe,dR,GZe,OZe,VZe,Jn,Dre,XZe,zZe,cR,QZe,WZe,fR,HZe,UZe,JZe,Yn,Gre,YZe,KZe,mR,ZZe,eeo,gR,oeo,reo,teo,Kn,Ore,aeo,neo,hR,seo,leo,pR,ieo,deo,ceo,Zn,Vre,feo,meo,uR,geo,heo,_R,peo,ueo,_eo,xg,Xre,beo,veo,bR,Feo,Teo,Meo,es,zre,Eeo,Ceo,vR,weo,Aeo,FR,yeo,Leo,xeo,os,Qre,$eo,keo,TR,Seo,Reo,MR,Peo,Beo,Ieo,rs,Wre,qeo,Neo,ER,jeo,Deo,CR,Geo,Oeo,Veo,ts,Hre,Xeo,zeo,wR,Qeo,Weo,AR,Heo,Ueo,Jeo,as,Ure,Yeo,Keo,yR,Zeo,eoo,LR,ooo,roo,too,ns,Jre,aoo,noo,xR,soo,loo,$R,ioo,doo,coo,$g,Yre,foo,moo,kR,goo,hoo,poo,ss,Kre,uoo,_oo,SR,boo,voo,RR,Foo,Too,Moo,kg,Zre,Eoo,Coo,PR,woo,Aoo,yoo,Sg,ete,Loo,xoo,BR,$oo,koo,Soo,ls,ote,Roo,Poo,IR,Boo,Ioo,qR,qoo,Noo,joo,is,rte,Doo,Goo,NR,Ooo,Voo,jR,Xoo,zoo,Qoo,ds,tte,Woo,Hoo,DR,Uoo,Joo,GR,Yoo,Koo,Zoo,Rg,ate,ero,oro,OR,rro,tro,aro,cs,nte,nro,sro,VR,lro,iro,XR,dro,cro,fro,fs,ste,mro,gro,zR,hro,pro,QR,uro,_ro,bro,ms,lte,vro,Fro,WR,Tro,Mro,HR,Ero,Cro,wro,gs,ite,Aro,yro,UR,Lro,xro,JR,$ro,kro,Sro,hs,dte,Rro,Pro,YR,Bro,Iro,KR,qro,Nro,jro,ps,cte,Dro,Gro,ZR,Oro,Vro,eP,Xro,zro,Qro,us,fte,Wro,Hro,oP,Uro,Jro,rP,Yro,Kro,Zro,Pg,mte,eto,oto,tP,rto,tto,ato,Bg,gte,nto,sto,aP,lto,ito,dto,Ig,hte,cto,fto,nP,mto,gto,hto,qg,pte,pto,uto,sP,_to,bto,vto,_s,ute,Fto,Tto,lP,Mto,Eto,iP,Cto,wto,Ato,Ng,_te,yto,Lto,dP,xto,$to,kto,bs,bte,Sto,Rto,cP,Pto,Bto,fP,Ito,qto,Nto,vs,vte,jto,Dto,mP,Gto,Oto,gP,Vto,Xto,zto,Fs,Fte,Qto,Wto,hP,Hto,Uto,pP,Jto,Yto,Kto,Ts,Tte,Zto,eao,uP,oao,rao,_P,tao,aao,nao,Ms,Mte,sao,lao,bP,iao,dao,vP,cao,fao,mao,Es,Ete,gao,hao,FP,pao,uao,TP,_ao,bao,vao,jg,Cte,Fao,Tao,MP,Mao,Eao,Cao,Dg,wte,wao,Aao,EP,yao,Lao,xao,Cs,Ate,$ao,kao,CP,Sao,Rao,wP,Pao,Bao,Iao,ws,yte,qao,Nao,AP,jao,Dao,yP,Gao,Oao,Vao,As,Lte,Xao,zao,LP,Qao,Wao,xP,Hao,Uao,Jao,Gg,xte,Yao,Kao,$P,Zao,eno,ono,Og,$te,rno,tno,kP,ano,nno,sno,Vg,kte,lno,ino,SP,dno,cno,fno,ys,Ste,mno,gno,RP,hno,pno,PP,uno,_no,bno,Xg,Rte,vno,Fno,BP,Tno,Mno,Eno,zg,Pte,Cno,wno,IP,Ano,yno,Lno,Ls,Bte,xno,$no,qP,kno,Sno,NP,Rno,Pno,Bno,Qg,Ite,Ino,qno,jP,Nno,jno,Dno,Wg,qte,Gno,Ono,DP,Vno,Xno,zno,xs,Nte,Qno,Wno,GP,Hno,Uno,OP,Jno,Yno,Kno,$s,jte,Zno,eso,VP,oso,rso,XP,tso,aso,nso,ks,Dte,sso,lso,zP,iso,dso,QP,cso,fso,mso,Ss,Gte,gso,hso,WP,pso,uso,HP,_so,bso,vso,Hg,Fso,Ug,lA,Tso,Ote,Mso,GBe,vi,Jg,Vte,iA,Eso,Xte,Cso,OBe,Ao,dA,wso,cA,Aso,UP,yso,Lso,xso,fA,$so,zte,kso,Sso,Rso,Qe,mA,Pso,Qte,Bso,Iso,wa,qso,Wte,Nso,jso,Hte,Dso,Gso,Ute,Oso,Vso,Xso,ae,Yg,Jte,zso,Qso,JP,Wso,Hso,Uso,Kg,Yte,Jso,Yso,YP,Kso,Zso,elo,Zg,Kte,olo,rlo,KP,tlo,alo,nlo,eh,Zte,slo,llo,ZP,ilo,dlo,clo,oh,eae,flo,mlo,eB,glo,hlo,plo,rh,oae,ulo,_lo,oB,blo,vlo,Flo,th,rae,Tlo,Mlo,rB,Elo,Clo,wlo,ah,tae,Alo,ylo,tB,Llo,xlo,$lo,nh,aae,klo,Slo,aB,Rlo,Plo,Blo,sh,nae,Ilo,qlo,nB,Nlo,jlo,Dlo,lh,sae,Glo,Olo,sB,Vlo,Xlo,zlo,ih,lae,Qlo,Wlo,lB,Hlo,Ulo,Jlo,dh,iae,Ylo,Klo,iB,Zlo,eio,oio,ch,dae,rio,tio,dB,aio,nio,sio,fh,cae,lio,iio,cB,dio,cio,fio,mh,fae,mio,gio,fB,hio,pio,uio,gh,mae,_io,bio,mB,vio,Fio,Tio,hh,gae,Mio,Eio,gB,Cio,wio,Aio,ph,hae,yio,Lio,hB,xio,$io,kio,uh,pae,Sio,Rio,pB,Pio,Bio,Iio,_h,uae,qio,Nio,uB,jio,Dio,Gio,bh,_ae,Oio,Vio,_B,Xio,zio,Qio,vh,bae,Wio,Hio,bB,Uio,Jio,Yio,Fh,vae,Kio,Zio,vB,edo,odo,rdo,Th,tdo,Mh,ado,Eh,gA,ndo,Fae,sdo,VBe,Fi,Ch,Tae,hA,ldo,Mae,ido,XBe,yo,pA,ddo,uA,cdo,FB,fdo,mdo,gdo,_A,hdo,Eae,pdo,udo,_do,We,bA,bdo,Cae,vdo,Fdo,Ti,Tdo,wae,Mdo,Edo,Aae,Cdo,wdo,Ado,be,wh,yae,ydo,Ldo,TB,xdo,$do,kdo,Ah,Lae,Sdo,Rdo,MB,Pdo,Bdo,Ido,yh,xae,qdo,Ndo,EB,jdo,Ddo,Gdo,Lh,$ae,Odo,Vdo,CB,Xdo,zdo,Qdo,xh,kae,Wdo,Hdo,wB,Udo,Jdo,Ydo,$h,Sae,Kdo,Zdo,AB,eco,oco,rco,kh,Rae,tco,aco,yB,nco,sco,lco,Sh,Pae,ico,dco,LB,cco,fco,mco,Rh,Bae,gco,hco,xB,pco,uco,_co,Ph,Iae,bco,vco,$B,Fco,Tco,Mco,Bh,qae,Eco,Cco,kB,wco,Aco,yco,Ih,Nae,Lco,xco,SB,$co,kco,Sco,qh,jae,Rco,Pco,RB,Bco,Ico,qco,Nh,Dae,Nco,jco,PB,Dco,Gco,Oco,jh,Vco,Dh,Xco,Gh,vA,zco,Gae,Qco,zBe,Mi,Oh,Oae,FA,Wco,Vae,Hco,QBe,Lo,TA,Uco,Ei,Jco,BB,Yco,Kco,IB,Zco,efo,ofo,MA,rfo,Xae,tfo,afo,nfo,ot,EA,sfo,zae,lfo,ifo,Ci,dfo,Qae,cfo,ffo,qB,mfo,gfo,hfo,Vh,pfo,He,CA,ufo,Wae,_fo,bfo,Aa,vfo,Hae,Ffo,Tfo,Uae,Mfo,Efo,Jae,Cfo,wfo,Afo,x,Xh,Yae,yfo,Lfo,NB,xfo,$fo,kfo,zh,Kae,Sfo,Rfo,jB,Pfo,Bfo,Ifo,Qh,Zae,qfo,Nfo,DB,jfo,Dfo,Gfo,Wh,ene,Ofo,Vfo,GB,Xfo,zfo,Qfo,Hh,one,Wfo,Hfo,OB,Ufo,Jfo,Yfo,Uh,rne,Kfo,Zfo,VB,emo,omo,rmo,Jh,tne,tmo,amo,XB,nmo,smo,lmo,Yh,ane,imo,dmo,zB,cmo,fmo,mmo,Kh,nne,gmo,hmo,QB,pmo,umo,_mo,Zh,sne,bmo,vmo,WB,Fmo,Tmo,Mmo,ep,lne,Emo,Cmo,HB,wmo,Amo,ymo,op,ine,Lmo,xmo,UB,$mo,kmo,Smo,rp,dne,Rmo,Pmo,JB,Bmo,Imo,qmo,tp,cne,Nmo,jmo,YB,Dmo,Gmo,Omo,ap,fne,Vmo,Xmo,KB,zmo,Qmo,Wmo,np,mne,Hmo,Umo,ZB,Jmo,Ymo,Kmo,sp,gne,Zmo,ego,eI,ogo,rgo,tgo,lp,hne,ago,ngo,oI,sgo,lgo,igo,ip,pne,dgo,cgo,rI,fgo,mgo,ggo,dp,une,hgo,pgo,tI,ugo,_go,bgo,cp,_ne,vgo,Fgo,aI,Tgo,Mgo,Ego,fp,bne,Cgo,wgo,nI,Ago,ygo,Lgo,mp,vne,xgo,$go,sI,kgo,Sgo,Rgo,gp,Fne,Pgo,Bgo,lI,Igo,qgo,Ngo,hp,Tne,jgo,Dgo,iI,Ggo,Ogo,Vgo,pp,Mne,Xgo,zgo,dI,Qgo,Wgo,Hgo,up,Ene,Ugo,Jgo,cI,Ygo,Kgo,Zgo,_p,Cne,eho,oho,fI,rho,tho,aho,bp,wne,nho,sho,mI,lho,iho,dho,vp,Ane,cho,fho,gI,mho,gho,hho,Rs,yne,pho,uho,hI,_ho,bho,pI,vho,Fho,Tho,Fp,Lne,Mho,Eho,uI,Cho,who,Aho,Tp,xne,yho,Lho,_I,xho,$ho,kho,Mp,$ne,Sho,Rho,bI,Pho,Bho,Iho,Ep,kne,qho,Nho,vI,jho,Dho,Gho,Cp,Sne,Oho,Vho,FI,Xho,zho,Qho,wp,Rne,Who,Hho,TI,Uho,Jho,Yho,Ap,Pne,Kho,Zho,MI,epo,opo,rpo,yp,Bne,tpo,apo,EI,npo,spo,lpo,Lp,Ine,ipo,dpo,CI,cpo,fpo,mpo,xp,qne,gpo,hpo,wI,ppo,upo,_po,$p,Nne,bpo,vpo,AI,Fpo,Tpo,Mpo,kp,jne,Epo,Cpo,yI,wpo,Apo,ypo,Sp,Dne,Lpo,xpo,LI,$po,kpo,Spo,Rp,Gne,Rpo,Ppo,xI,Bpo,Ipo,qpo,Pp,One,Npo,jpo,$I,Dpo,Gpo,Opo,Bp,Vne,Vpo,Xpo,kI,zpo,Qpo,Wpo,Ip,Xne,Hpo,Upo,SI,Jpo,Ypo,Kpo,qp,zne,Zpo,euo,RI,ouo,ruo,tuo,Np,Qne,auo,nuo,PI,suo,luo,iuo,jp,Wne,duo,cuo,BI,fuo,muo,guo,Dp,Hne,huo,puo,II,uuo,_uo,buo,Gp,Une,vuo,Fuo,qI,Tuo,Muo,Euo,Op,Jne,Cuo,wuo,NI,Auo,yuo,Luo,Vp,Yne,xuo,$uo,jI,kuo,Suo,Ruo,Xp,Kne,Puo,Buo,DI,Iuo,quo,Nuo,zp,Zne,juo,Duo,GI,Guo,Ouo,Vuo,Qp,ese,Xuo,zuo,OI,Quo,Wuo,Huo,Wp,ose,Uuo,Juo,VI,Yuo,Kuo,Zuo,Hp,rse,e_o,o_o,XI,r_o,t_o,a_o,Up,tse,n_o,s_o,zI,l_o,i_o,d_o,Jp,ase,c_o,f_o,QI,m_o,g_o,h_o,Yp,nse,p_o,u_o,WI,__o,b_o,v_o,Kp,sse,F_o,T_o,HI,M_o,E_o,C_o,Zp,lse,w_o,A_o,UI,y_o,L_o,x_o,eu,ise,$_o,k_o,JI,S_o,R_o,P_o,ou,dse,B_o,I_o,YI,q_o,N_o,j_o,ru,cse,D_o,G_o,KI,O_o,V_o,X_o,tu,fse,z_o,Q_o,ZI,W_o,H_o,U_o,au,mse,J_o,Y_o,eq,K_o,Z_o,e1o,nu,gse,o1o,r1o,oq,t1o,a1o,n1o,su,hse,s1o,l1o,rq,i1o,d1o,c1o,lu,pse,f1o,m1o,tq,g1o,h1o,p1o,iu,use,u1o,_1o,aq,b1o,v1o,F1o,du,_se,T1o,M1o,nq,E1o,C1o,w1o,cu,bse,A1o,y1o,sq,L1o,x1o,$1o,fu,vse,k1o,S1o,lq,R1o,P1o,B1o,mu,Fse,I1o,q1o,iq,N1o,j1o,D1o,gu,Tse,G1o,O1o,dq,V1o,X1o,z1o,hu,Mse,Q1o,W1o,cq,H1o,U1o,J1o,pu,Ese,Y1o,K1o,fq,Z1o,e8o,o8o,uu,Cse,r8o,t8o,mq,a8o,n8o,s8o,_u,wse,l8o,i8o,gq,d8o,c8o,f8o,bu,Ase,m8o,g8o,hq,h8o,p8o,u8o,vu,yse,_8o,b8o,pq,v8o,F8o,T8o,Fu,Lse,M8o,E8o,uq,C8o,w8o,A8o,Tu,xse,y8o,L8o,_q,x8o,$8o,k8o,Mu,$se,S8o,R8o,bq,P8o,B8o,I8o,Eu,kse,q8o,N8o,vq,j8o,D8o,G8o,Cu,Sse,O8o,V8o,Fq,X8o,z8o,Q8o,wu,Rse,W8o,H8o,Tq,U8o,J8o,Y8o,Au,Pse,K8o,Z8o,Mq,ebo,obo,rbo,yu,Bse,tbo,abo,Eq,nbo,sbo,lbo,Lu,Ise,ibo,dbo,Cq,cbo,fbo,mbo,xu,qse,gbo,hbo,wq,pbo,ubo,_bo,$u,Nse,bbo,vbo,Aq,Fbo,Tbo,Mbo,ku,Ebo,jse,Cbo,wbo,Dse,Abo,ybo,Su,WBe,wi,Ru,Gse,wA,Lbo,Ose,xbo,HBe,xo,AA,$bo,Ai,kbo,yq,Sbo,Rbo,Lq,Pbo,Bbo,Ibo,yA,qbo,Vse,Nbo,jbo,Dbo,rt,LA,Gbo,Xse,Obo,Vbo,yi,Xbo,zse,zbo,Qbo,xq,Wbo,Hbo,Ubo,Pu,Jbo,Ue,xA,Ybo,Qse,Kbo,Zbo,ya,e2o,Wse,o2o,r2o,Hse,t2o,a2o,Use,n2o,s2o,l2o,G,Bu,Jse,i2o,d2o,$q,c2o,f2o,m2o,Iu,Yse,g2o,h2o,kq,p2o,u2o,_2o,qu,Kse,b2o,v2o,Sq,F2o,T2o,M2o,Nu,Zse,E2o,C2o,Rq,w2o,A2o,y2o,ju,ele,L2o,x2o,Pq,$2o,k2o,S2o,Du,ole,R2o,P2o,Bq,B2o,I2o,q2o,Gu,rle,N2o,j2o,Iq,D2o,G2o,O2o,Ou,tle,V2o,X2o,qq,z2o,Q2o,W2o,Vu,ale,H2o,U2o,Nq,J2o,Y2o,K2o,Xu,nle,Z2o,evo,jq,ovo,rvo,tvo,zu,sle,avo,nvo,Dq,svo,lvo,ivo,Qu,lle,dvo,cvo,Gq,fvo,mvo,gvo,Wu,ile,hvo,pvo,Oq,uvo,_vo,bvo,Hu,dle,vvo,Fvo,Vq,Tvo,Mvo,Evo,Uu,cle,Cvo,wvo,Xq,Avo,yvo,Lvo,Ju,fle,xvo,$vo,zq,kvo,Svo,Rvo,Yu,mle,Pvo,Bvo,Qq,Ivo,qvo,Nvo,Ku,gle,jvo,Dvo,Wq,Gvo,Ovo,Vvo,Zu,hle,Xvo,zvo,Hq,Qvo,Wvo,Hvo,e_,ple,Uvo,Jvo,Uq,Yvo,Kvo,Zvo,o_,ule,eFo,oFo,Jq,rFo,tFo,aFo,r_,_le,nFo,sFo,Yq,lFo,iFo,dFo,t_,ble,cFo,fFo,Kq,mFo,gFo,hFo,a_,vle,pFo,uFo,Zq,_Fo,bFo,vFo,n_,Fle,FFo,TFo,eN,MFo,EFo,CFo,s_,Tle,wFo,AFo,oN,yFo,LFo,xFo,l_,Mle,$Fo,kFo,rN,SFo,RFo,PFo,i_,Ele,BFo,IFo,tN,qFo,NFo,jFo,d_,Cle,DFo,GFo,aN,OFo,VFo,XFo,c_,wle,zFo,QFo,nN,WFo,HFo,UFo,f_,Ale,JFo,YFo,sN,KFo,ZFo,e0o,m_,yle,o0o,r0o,lN,t0o,a0o,n0o,g_,Lle,s0o,l0o,iN,i0o,d0o,c0o,h_,xle,f0o,m0o,dN,g0o,h0o,p0o,p_,$le,u0o,_0o,cN,b0o,v0o,F0o,u_,kle,T0o,M0o,fN,E0o,C0o,w0o,__,Sle,A0o,y0o,mN,L0o,x0o,$0o,b_,Rle,k0o,S0o,gN,R0o,P0o,B0o,v_,Ple,I0o,q0o,hN,N0o,j0o,D0o,F_,G0o,Ble,O0o,V0o,Ile,X0o,z0o,T_,UBe,Li,M_,qle,$A,Q0o,Nle,W0o,JBe,$o,kA,H0o,xi,U0o,pN,J0o,Y0o,uN,K0o,Z0o,eTo,SA,oTo,jle,rTo,tTo,aTo,tt,RA,nTo,Dle,sTo,lTo,$i,iTo,Gle,dTo,cTo,_N,fTo,mTo,gTo,E_,hTo,Je,PA,pTo,Ole,uTo,_To,La,bTo,Vle,vTo,FTo,Xle,TTo,MTo,zle,ETo,CTo,wTo,z,C_,Qle,ATo,yTo,bN,LTo,xTo,$To,w_,Wle,kTo,STo,vN,RTo,PTo,BTo,A_,Hle,ITo,qTo,FN,NTo,jTo,DTo,y_,Ule,GTo,OTo,TN,VTo,XTo,zTo,L_,Jle,QTo,WTo,MN,HTo,UTo,JTo,x_,Yle,YTo,KTo,EN,ZTo,e7o,o7o,$_,Kle,r7o,t7o,CN,a7o,n7o,s7o,k_,Zle,l7o,i7o,wN,d7o,c7o,f7o,S_,eie,m7o,g7o,AN,h7o,p7o,u7o,R_,oie,_7o,b7o,yN,v7o,F7o,T7o,P_,rie,M7o,E7o,LN,C7o,w7o,A7o,B_,tie,y7o,L7o,xN,x7o,$7o,k7o,I_,aie,S7o,R7o,$N,P7o,B7o,I7o,q_,nie,q7o,N7o,kN,j7o,D7o,G7o,N_,sie,O7o,V7o,SN,X7o,z7o,Q7o,j_,lie,W7o,H7o,RN,U7o,J7o,Y7o,D_,iie,K7o,Z7o,PN,eMo,oMo,rMo,G_,die,tMo,aMo,BN,nMo,sMo,lMo,O_,cie,iMo,dMo,IN,cMo,fMo,mMo,V_,fie,gMo,hMo,qN,pMo,uMo,_Mo,X_,mie,bMo,vMo,NN,FMo,TMo,MMo,z_,gie,EMo,CMo,jN,wMo,AMo,yMo,Q_,hie,LMo,xMo,DN,$Mo,kMo,SMo,W_,pie,RMo,PMo,GN,BMo,IMo,qMo,H_,uie,NMo,jMo,ON,DMo,GMo,OMo,U_,_ie,VMo,XMo,VN,zMo,QMo,WMo,J_,bie,HMo,UMo,XN,JMo,YMo,KMo,Y_,vie,ZMo,e4o,zN,o4o,r4o,t4o,K_,Fie,a4o,n4o,QN,s4o,l4o,i4o,Z_,Tie,d4o,c4o,WN,f4o,m4o,g4o,e1,Mie,h4o,p4o,HN,u4o,_4o,b4o,o1,Eie,v4o,F4o,UN,T4o,M4o,E4o,r1,Cie,C4o,w4o,JN,A4o,y4o,L4o,t1,wie,x4o,$4o,YN,k4o,S4o,R4o,a1,Aie,P4o,B4o,KN,I4o,q4o,N4o,n1,yie,j4o,D4o,ZN,G4o,O4o,V4o,s1,X4o,Lie,z4o,Q4o,xie,W4o,H4o,l1,YBe,ki,i1,$ie,BA,U4o,kie,J4o,KBe,ko,IA,Y4o,Si,K4o,ej,Z4o,eEo,oj,oEo,rEo,tEo,qA,aEo,Sie,nEo,sEo,lEo,at,NA,iEo,Rie,dEo,cEo,Ri,fEo,Pie,mEo,gEo,rj,hEo,pEo,uEo,d1,_Eo,Ye,jA,bEo,Bie,vEo,FEo,xa,TEo,Iie,MEo,EEo,qie,CEo,wEo,Nie,AEo,yEo,LEo,Q,c1,jie,xEo,$Eo,tj,kEo,SEo,REo,f1,Die,PEo,BEo,aj,IEo,qEo,NEo,m1,Gie,jEo,DEo,nj,GEo,OEo,VEo,g1,Oie,XEo,zEo,sj,QEo,WEo,HEo,h1,Vie,UEo,JEo,lj,YEo,KEo,ZEo,p1,Xie,e5o,o5o,ij,r5o,t5o,a5o,u1,zie,n5o,s5o,dj,l5o,i5o,d5o,_1,Qie,c5o,f5o,cj,m5o,g5o,h5o,b1,Wie,p5o,u5o,fj,_5o,b5o,v5o,v1,Hie,F5o,T5o,mj,M5o,E5o,C5o,F1,Uie,w5o,A5o,gj,y5o,L5o,x5o,T1,Jie,$5o,k5o,hj,S5o,R5o,P5o,M1,Yie,B5o,I5o,pj,q5o,N5o,j5o,E1,Kie,D5o,G5o,uj,O5o,V5o,X5o,C1,Zie,z5o,Q5o,_j,W5o,H5o,U5o,w1,ede,J5o,Y5o,bj,K5o,Z5o,eCo,A1,ode,oCo,rCo,vj,tCo,aCo,nCo,y1,rde,sCo,lCo,Fj,iCo,dCo,cCo,L1,tde,fCo,mCo,Tj,gCo,hCo,pCo,x1,ade,uCo,_Co,Mj,bCo,vCo,FCo,$1,nde,TCo,MCo,Ej,ECo,CCo,wCo,k1,sde,ACo,yCo,Cj,LCo,xCo,$Co,S1,lde,kCo,SCo,wj,RCo,PCo,BCo,R1,ide,ICo,qCo,Aj,NCo,jCo,DCo,P1,dde,GCo,OCo,yj,VCo,XCo,zCo,B1,cde,QCo,WCo,Lj,HCo,UCo,JCo,I1,fde,YCo,KCo,xj,ZCo,e3o,o3o,q1,mde,r3o,t3o,$j,a3o,n3o,s3o,N1,gde,l3o,i3o,kj,d3o,c3o,f3o,j1,hde,m3o,g3o,Sj,h3o,p3o,u3o,D1,pde,_3o,b3o,ude,v3o,F3o,T3o,G1,_de,M3o,E3o,Rj,C3o,w3o,A3o,O1,bde,y3o,L3o,Pj,x3o,$3o,k3o,V1,vde,S3o,R3o,Bj,P3o,B3o,I3o,X1,Fde,q3o,N3o,Ij,j3o,D3o,G3o,z1,O3o,Tde,V3o,X3o,Mde,z3o,Q3o,Q1,ZBe,Pi,W1,Ede,DA,W3o,Cde,H3o,eIe,So,GA,U3o,Bi,J3o,qj,Y3o,K3o,Nj,Z3o,ewo,owo,OA,rwo,wde,two,awo,nwo,nt,VA,swo,Ade,lwo,iwo,Ii,dwo,yde,cwo,fwo,jj,mwo,gwo,hwo,H1,pwo,Ke,XA,uwo,Lde,_wo,bwo,$a,vwo,xde,Fwo,Two,$de,Mwo,Ewo,kde,Cwo,wwo,Awo,he,U1,Sde,ywo,Lwo,Dj,xwo,$wo,kwo,J1,Rde,Swo,Rwo,Gj,Pwo,Bwo,Iwo,Y1,Pde,qwo,Nwo,Oj,jwo,Dwo,Gwo,K1,Bde,Owo,Vwo,Vj,Xwo,zwo,Qwo,Z1,Ide,Wwo,Hwo,Xj,Uwo,Jwo,Ywo,e8,qde,Kwo,Zwo,zj,eAo,oAo,rAo,o8,Nde,tAo,aAo,Qj,nAo,sAo,lAo,r8,jde,iAo,dAo,Wj,cAo,fAo,mAo,t8,Dde,gAo,hAo,Hj,pAo,uAo,_Ao,a8,Gde,bAo,vAo,Uj,FAo,TAo,MAo,n8,Ode,EAo,CAo,Jj,wAo,AAo,yAo,s8,Vde,LAo,xAo,Yj,$Ao,kAo,SAo,l8,Xde,RAo,PAo,Kj,BAo,IAo,qAo,i8,zde,NAo,jAo,Zj,DAo,GAo,OAo,d8,Qde,VAo,XAo,eD,zAo,QAo,WAo,c8,Wde,HAo,UAo,oD,JAo,YAo,KAo,f8,Hde,ZAo,e6o,rD,o6o,r6o,t6o,m8,a6o,Ude,n6o,s6o,Jde,l6o,i6o,g8,oIe,qi,h8,Yde,zA,d6o,Kde,c6o,rIe,Ro,QA,f6o,Ni,m6o,tD,g6o,h6o,aD,p6o,u6o,_6o,WA,b6o,Zde,v6o,F6o,T6o,st,HA,M6o,ece,E6o,C6o,ji,w6o,oce,A6o,y6o,nD,L6o,x6o,$6o,p8,k6o,Ze,UA,S6o,rce,R6o,P6o,ka,B6o,tce,I6o,q6o,ace,N6o,j6o,nce,D6o,G6o,O6o,q,u8,sce,V6o,X6o,sD,z6o,Q6o,W6o,_8,lce,H6o,U6o,lD,J6o,Y6o,K6o,b8,ice,Z6o,eyo,iD,oyo,ryo,tyo,v8,dce,ayo,nyo,dD,syo,lyo,iyo,F8,cce,dyo,cyo,cD,fyo,myo,gyo,T8,fce,hyo,pyo,fD,uyo,_yo,byo,M8,mce,vyo,Fyo,mD,Tyo,Myo,Eyo,E8,gce,Cyo,wyo,gD,Ayo,yyo,Lyo,C8,hce,xyo,$yo,hD,kyo,Syo,Ryo,w8,pce,Pyo,Byo,pD,Iyo,qyo,Nyo,A8,uce,jyo,Dyo,uD,Gyo,Oyo,Vyo,y8,_ce,Xyo,zyo,_D,Qyo,Wyo,Hyo,L8,bce,Uyo,Jyo,bD,Yyo,Kyo,Zyo,x8,vce,eLo,oLo,vD,rLo,tLo,aLo,$8,Fce,nLo,sLo,FD,lLo,iLo,dLo,k8,Tce,cLo,fLo,TD,mLo,gLo,hLo,S8,Mce,pLo,uLo,MD,_Lo,bLo,vLo,R8,Ece,FLo,TLo,ED,MLo,ELo,CLo,P8,Cce,wLo,ALo,CD,yLo,LLo,xLo,B8,wce,$Lo,kLo,wD,SLo,RLo,PLo,I8,Ace,BLo,ILo,AD,qLo,NLo,jLo,q8,yce,DLo,GLo,yD,OLo,VLo,XLo,N8,Lce,zLo,QLo,LD,WLo,HLo,ULo,j8,xce,JLo,YLo,xD,KLo,ZLo,exo,D8,$ce,oxo,rxo,$D,txo,axo,nxo,G8,kce,sxo,lxo,kD,ixo,dxo,cxo,O8,Sce,fxo,mxo,SD,gxo,hxo,pxo,V8,Rce,uxo,_xo,RD,bxo,vxo,Fxo,X8,Pce,Txo,Mxo,PD,Exo,Cxo,wxo,z8,Bce,Axo,yxo,BD,Lxo,xxo,$xo,Q8,Ice,kxo,Sxo,ID,Rxo,Pxo,Bxo,W8,qce,Ixo,qxo,qD,Nxo,jxo,Dxo,H8,Nce,Gxo,Oxo,ND,Vxo,Xxo,zxo,U8,jce,Qxo,Wxo,jD,Hxo,Uxo,Jxo,J8,Dce,Yxo,Kxo,DD,Zxo,e9o,o9o,Y8,Gce,r9o,t9o,GD,a9o,n9o,s9o,K8,Oce,l9o,i9o,OD,d9o,c9o,f9o,Z8,Vce,m9o,g9o,VD,h9o,p9o,u9o,eb,Xce,_9o,b9o,XD,v9o,F9o,T9o,ob,zce,M9o,E9o,zD,C9o,w9o,A9o,rb,Qce,y9o,L9o,QD,x9o,$9o,k9o,tb,Wce,S9o,R9o,WD,P9o,B9o,I9o,ab,Hce,q9o,N9o,HD,j9o,D9o,G9o,nb,Uce,O9o,V9o,UD,X9o,z9o,Q9o,sb,Jce,W9o,H9o,JD,U9o,J9o,Y9o,lb,Yce,K9o,Z9o,YD,e$o,o$o,r$o,ib,Kce,t$o,a$o,KD,n$o,s$o,l$o,db,i$o,Zce,d$o,c$o,efe,f$o,m$o,cb,tIe,Di,fb,ofe,JA,g$o,rfe,h$o,aIe,Po,YA,p$o,Gi,u$o,ZD,_$o,b$o,eG,v$o,F$o,T$o,KA,M$o,tfe,E$o,C$o,w$o,lt,ZA,A$o,afe,y$o,L$o,Oi,x$o,nfe,$$o,k$o,oG,S$o,R$o,P$o,mb,B$o,eo,e6,I$o,sfe,q$o,N$o,Sa,j$o,lfe,D$o,G$o,ife,O$o,V$o,dfe,X$o,z$o,Q$o,Y,gb,cfe,W$o,H$o,rG,U$o,J$o,Y$o,hb,ffe,K$o,Z$o,tG,eko,oko,rko,pb,mfe,tko,ako,aG,nko,sko,lko,ub,gfe,iko,dko,nG,cko,fko,mko,_b,hfe,gko,hko,sG,pko,uko,_ko,bb,pfe,bko,vko,lG,Fko,Tko,Mko,vb,ufe,Eko,Cko,iG,wko,Ako,yko,Fb,_fe,Lko,xko,dG,$ko,kko,Sko,Tb,bfe,Rko,Pko,cG,Bko,Iko,qko,Mb,vfe,Nko,jko,fG,Dko,Gko,Oko,Eb,Ffe,Vko,Xko,mG,zko,Qko,Wko,Cb,Tfe,Hko,Uko,gG,Jko,Yko,Kko,wb,Mfe,Zko,eSo,hG,oSo,rSo,tSo,Ab,Efe,aSo,nSo,pG,sSo,lSo,iSo,yb,Cfe,dSo,cSo,uG,fSo,mSo,gSo,Lb,wfe,hSo,pSo,_G,uSo,_So,bSo,xb,Afe,vSo,FSo,bG,TSo,MSo,ESo,$b,yfe,CSo,wSo,vG,ASo,ySo,LSo,kb,Lfe,xSo,$So,FG,kSo,SSo,RSo,Sb,xfe,PSo,BSo,TG,ISo,qSo,NSo,Rb,$fe,jSo,DSo,MG,GSo,OSo,VSo,Pb,kfe,XSo,zSo,EG,QSo,WSo,HSo,Bb,Sfe,USo,JSo,CG,YSo,KSo,ZSo,Ib,Rfe,eRo,oRo,wG,rRo,tRo,aRo,qb,Pfe,nRo,sRo,AG,lRo,iRo,dRo,Nb,Bfe,cRo,fRo,yG,mRo,gRo,hRo,jb,Ife,pRo,uRo,LG,_Ro,bRo,vRo,Db,qfe,FRo,TRo,xG,MRo,ERo,CRo,Gb,wRo,Nfe,ARo,yRo,jfe,LRo,xRo,Ob,nIe,Vi,Vb,Dfe,o6,$Ro,Gfe,kRo,sIe,Bo,r6,SRo,Xi,RRo,$G,PRo,BRo,kG,IRo,qRo,NRo,t6,jRo,Ofe,DRo,GRo,ORo,it,a6,VRo,Vfe,XRo,zRo,zi,QRo,Xfe,WRo,HRo,SG,URo,JRo,YRo,Xb,KRo,oo,n6,ZRo,zfe,ePo,oPo,Ra,rPo,Qfe,tPo,aPo,Wfe,nPo,sPo,Hfe,lPo,iPo,dPo,Yr,zb,Ufe,cPo,fPo,RG,mPo,gPo,hPo,Qb,Jfe,pPo,uPo,PG,_Po,bPo,vPo,Wb,Yfe,FPo,TPo,BG,MPo,EPo,CPo,Hb,Kfe,wPo,APo,IG,yPo,LPo,xPo,Ub,Zfe,$Po,kPo,qG,SPo,RPo,PPo,Jb,BPo,eme,IPo,qPo,ome,NPo,jPo,Yb,lIe,Qi,Kb,rme,s6,DPo,tme,GPo,iIe,Io,l6,OPo,Wi,VPo,NG,XPo,zPo,jG,QPo,WPo,HPo,i6,UPo,ame,JPo,YPo,KPo,dt,d6,ZPo,nme,eBo,oBo,Hi,rBo,sme,tBo,aBo,DG,nBo,sBo,lBo,Zb,iBo,ro,c6,dBo,lme,cBo,fBo,Pa,mBo,ime,gBo,hBo,dme,pBo,uBo,cme,_Bo,bBo,vBo,U,e2,fme,FBo,TBo,GG,MBo,EBo,CBo,o2,mme,wBo,ABo,OG,yBo,LBo,xBo,r2,gme,$Bo,kBo,VG,SBo,RBo,PBo,t2,hme,BBo,IBo,XG,qBo,NBo,jBo,a2,pme,DBo,GBo,zG,OBo,VBo,XBo,n2,ume,zBo,QBo,QG,WBo,HBo,UBo,s2,_me,JBo,YBo,WG,KBo,ZBo,eIo,l2,bme,oIo,rIo,HG,tIo,aIo,nIo,i2,vme,sIo,lIo,UG,iIo,dIo,cIo,d2,Fme,fIo,mIo,JG,gIo,hIo,pIo,c2,Tme,uIo,_Io,YG,bIo,vIo,FIo,f2,Mme,TIo,MIo,KG,EIo,CIo,wIo,m2,Eme,AIo,yIo,ZG,LIo,xIo,$Io,g2,Cme,kIo,SIo,eO,RIo,PIo,BIo,h2,wme,IIo,qIo,oO,NIo,jIo,DIo,p2,Ame,GIo,OIo,rO,VIo,XIo,zIo,u2,yme,QIo,WIo,tO,HIo,UIo,JIo,_2,Lme,YIo,KIo,aO,ZIo,eqo,oqo,b2,xme,rqo,tqo,nO,aqo,nqo,sqo,v2,$me,lqo,iqo,sO,dqo,cqo,fqo,F2,kme,mqo,gqo,lO,hqo,pqo,uqo,T2,Sme,_qo,bqo,iO,vqo,Fqo,Tqo,M2,Rme,Mqo,Eqo,dO,Cqo,wqo,Aqo,E2,Pme,yqo,Lqo,cO,xqo,$qo,kqo,C2,Bme,Sqo,Rqo,fO,Pqo,Bqo,Iqo,w2,Ime,qqo,Nqo,mO,jqo,Dqo,Gqo,A2,qme,Oqo,Vqo,gO,Xqo,zqo,Qqo,y2,Nme,Wqo,Hqo,hO,Uqo,Jqo,Yqo,L2,jme,Kqo,Zqo,pO,eNo,oNo,rNo,x2,Dme,tNo,aNo,uO,nNo,sNo,lNo,$2,Gme,iNo,dNo,_O,cNo,fNo,mNo,k2,Ome,gNo,hNo,bO,pNo,uNo,_No,S2,Vme,bNo,vNo,vO,FNo,TNo,MNo,R2,ENo,Xme,CNo,wNo,zme,ANo,yNo,P2,dIe,Ui,B2,Qme,f6,LNo,Wme,xNo,cIe,qo,m6,$No,Ji,kNo,FO,SNo,RNo,TO,PNo,BNo,INo,g6,qNo,Hme,NNo,jNo,DNo,ct,h6,GNo,Ume,ONo,VNo,Yi,XNo,Jme,zNo,QNo,MO,WNo,HNo,UNo,I2,JNo,to,p6,YNo,Yme,KNo,ZNo,Ba,ejo,Kme,ojo,rjo,Zme,tjo,ajo,ege,njo,sjo,ljo,O,q2,oge,ijo,djo,EO,cjo,fjo,mjo,N2,rge,gjo,hjo,CO,pjo,ujo,_jo,j2,tge,bjo,vjo,wO,Fjo,Tjo,Mjo,D2,age,Ejo,Cjo,AO,wjo,Ajo,yjo,G2,nge,Ljo,xjo,yO,$jo,kjo,Sjo,O2,sge,Rjo,Pjo,LO,Bjo,Ijo,qjo,V2,lge,Njo,jjo,xO,Djo,Gjo,Ojo,X2,ige,Vjo,Xjo,$O,zjo,Qjo,Wjo,z2,dge,Hjo,Ujo,kO,Jjo,Yjo,Kjo,Q2,cge,Zjo,eDo,SO,oDo,rDo,tDo,W2,fge,aDo,nDo,RO,sDo,lDo,iDo,H2,mge,dDo,cDo,PO,fDo,mDo,gDo,U2,gge,hDo,pDo,BO,uDo,_Do,bDo,J2,hge,vDo,FDo,IO,TDo,MDo,EDo,Y2,pge,CDo,wDo,qO,ADo,yDo,LDo,K2,uge,xDo,$Do,NO,kDo,SDo,RDo,Z2,_ge,PDo,BDo,jO,IDo,qDo,NDo,ev,bge,jDo,DDo,DO,GDo,ODo,VDo,ov,vge,XDo,zDo,GO,QDo,WDo,HDo,rv,Fge,UDo,JDo,OO,YDo,KDo,ZDo,tv,Tge,eGo,oGo,VO,rGo,tGo,aGo,av,Mge,nGo,sGo,XO,lGo,iGo,dGo,nv,Ege,cGo,fGo,zO,mGo,gGo,hGo,sv,Cge,pGo,uGo,QO,_Go,bGo,vGo,lv,wge,FGo,TGo,WO,MGo,EGo,CGo,iv,Age,wGo,AGo,HO,yGo,LGo,xGo,dv,yge,$Go,kGo,UO,SGo,RGo,PGo,cv,Lge,BGo,IGo,JO,qGo,NGo,jGo,fv,xge,DGo,GGo,YO,OGo,VGo,XGo,mv,$ge,zGo,QGo,KO,WGo,HGo,UGo,gv,kge,JGo,YGo,ZO,KGo,ZGo,eOo,hv,Sge,oOo,rOo,eV,tOo,aOo,nOo,pv,Rge,sOo,lOo,oV,iOo,dOo,cOo,uv,Pge,fOo,mOo,rV,gOo,hOo,pOo,_v,Bge,uOo,_Oo,tV,bOo,vOo,FOo,bv,Ige,TOo,MOo,aV,EOo,COo,wOo,vv,qge,AOo,yOo,nV,LOo,xOo,$Oo,Fv,Nge,kOo,SOo,sV,ROo,POo,BOo,Tv,jge,IOo,qOo,lV,NOo,jOo,DOo,Mv,GOo,Dge,OOo,VOo,Gge,XOo,zOo,Ev,fIe,Ki,Cv,Oge,u6,QOo,Vge,WOo,mIe,No,_6,HOo,Zi,UOo,iV,JOo,YOo,dV,KOo,ZOo,eVo,b6,oVo,Xge,rVo,tVo,aVo,ft,v6,nVo,zge,sVo,lVo,ed,iVo,Qge,dVo,cVo,cV,fVo,mVo,gVo,wv,hVo,ao,F6,pVo,Wge,uVo,_Vo,Ia,bVo,Hge,vVo,FVo,Uge,TVo,MVo,Jge,EVo,CVo,wVo,Yge,Av,Kge,AVo,yVo,fV,LVo,xVo,$Vo,yv,kVo,Zge,SVo,RVo,ehe,PVo,BVo,Lv,gIe,od,xv,ohe,T6,IVo,rhe,qVo,hIe,jo,M6,NVo,rd,jVo,mV,DVo,GVo,gV,OVo,VVo,XVo,E6,zVo,the,QVo,WVo,HVo,mt,C6,UVo,ahe,JVo,YVo,td,KVo,nhe,ZVo,eXo,hV,oXo,rXo,tXo,$v,aXo,no,w6,nXo,she,sXo,lXo,qa,iXo,lhe,dXo,cXo,ihe,fXo,mXo,dhe,gXo,hXo,pXo,ve,kv,che,uXo,_Xo,pV,bXo,vXo,FXo,Sv,fhe,TXo,MXo,uV,EXo,CXo,wXo,Rv,mhe,AXo,yXo,_V,LXo,xXo,$Xo,Ps,ghe,kXo,SXo,bV,RXo,PXo,vV,BXo,IXo,qXo,Pv,hhe,NXo,jXo,FV,DXo,GXo,OXo,gt,phe,VXo,XXo,TV,zXo,QXo,MV,WXo,HXo,EV,UXo,JXo,YXo,Bv,uhe,KXo,ZXo,CV,ezo,ozo,rzo,Iv,_he,tzo,azo,wV,nzo,szo,lzo,qv,bhe,izo,dzo,AV,czo,fzo,mzo,Nv,vhe,gzo,hzo,yV,pzo,uzo,_zo,jv,Fhe,bzo,vzo,LV,Fzo,Tzo,Mzo,Dv,The,Ezo,Czo,xV,wzo,Azo,yzo,Gv,Mhe,Lzo,xzo,$V,$zo,kzo,Szo,Ov,Rzo,Ehe,Pzo,Bzo,Che,Izo,qzo,Vv,pIe,ad,Xv,whe,A6,Nzo,Ahe,jzo,uIe,Do,y6,Dzo,nd,Gzo,kV,Ozo,Vzo,SV,Xzo,zzo,Qzo,L6,Wzo,yhe,Hzo,Uzo,Jzo,ht,x6,Yzo,Lhe,Kzo,Zzo,sd,eQo,xhe,oQo,rQo,RV,tQo,aQo,nQo,zv,sQo,so,$6,lQo,$he,iQo,dQo,Na,cQo,khe,fQo,mQo,She,gQo,hQo,Rhe,pQo,uQo,_Qo,Phe,Qv,Bhe,bQo,vQo,PV,FQo,TQo,MQo,Wv,EQo,Ihe,CQo,wQo,qhe,AQo,yQo,Hv,_Ie,ld,Uv,Nhe,k6,LQo,jhe,xQo,bIe,Go,S6,$Qo,id,kQo,BV,SQo,RQo,IV,PQo,BQo,IQo,R6,qQo,Dhe,NQo,jQo,DQo,pt,P6,GQo,Ghe,OQo,VQo,dd,XQo,Ohe,zQo,QQo,qV,WQo,HQo,UQo,Jv,JQo,lo,B6,YQo,Vhe,KQo,ZQo,ja,eWo,Xhe,oWo,rWo,zhe,tWo,aWo,Qhe,nWo,sWo,lWo,je,Yv,Whe,iWo,dWo,NV,cWo,fWo,mWo,Kv,Hhe,gWo,hWo,jV,pWo,uWo,_Wo,Zv,Uhe,bWo,vWo,DV,FWo,TWo,MWo,eF,Jhe,EWo,CWo,GV,wWo,AWo,yWo,oF,Yhe,LWo,xWo,OV,$Wo,kWo,SWo,rF,Khe,RWo,PWo,VV,BWo,IWo,qWo,tF,Zhe,NWo,jWo,XV,DWo,GWo,OWo,aF,epe,VWo,XWo,zV,zWo,QWo,WWo,nF,HWo,ope,UWo,JWo,rpe,YWo,KWo,sF,vIe,cd,lF,tpe,I6,ZWo,ape,eHo,FIe,Oo,q6,oHo,fd,rHo,QV,tHo,aHo,WV,nHo,sHo,lHo,N6,iHo,npe,dHo,cHo,fHo,ut,j6,mHo,spe,gHo,hHo,md,pHo,lpe,uHo,_Ho,HV,bHo,vHo,FHo,iF,THo,io,D6,MHo,ipe,EHo,CHo,Da,wHo,dpe,AHo,yHo,cpe,LHo,xHo,fpe,$Ho,kHo,SHo,Ga,dF,mpe,RHo,PHo,UV,BHo,IHo,qHo,cF,gpe,NHo,jHo,JV,DHo,GHo,OHo,fF,hpe,VHo,XHo,YV,zHo,QHo,WHo,mF,ppe,HHo,UHo,KV,JHo,YHo,KHo,gF,ZHo,upe,eUo,oUo,_pe,rUo,tUo,hF,TIe,gd,pF,bpe,G6,aUo,vpe,nUo,MIe,Vo,O6,sUo,hd,lUo,ZV,iUo,dUo,eX,cUo,fUo,mUo,V6,gUo,Fpe,hUo,pUo,uUo,_t,X6,_Uo,Tpe,bUo,vUo,pd,FUo,Mpe,TUo,MUo,oX,EUo,CUo,wUo,uF,AUo,co,z6,yUo,Epe,LUo,xUo,Oa,$Uo,Cpe,kUo,SUo,wpe,RUo,PUo,Ape,BUo,IUo,qUo,De,_F,ype,NUo,jUo,rX,DUo,GUo,OUo,bF,Lpe,VUo,XUo,tX,zUo,QUo,WUo,vF,xpe,HUo,UUo,aX,JUo,YUo,KUo,FF,$pe,ZUo,eJo,nX,oJo,rJo,tJo,TF,kpe,aJo,nJo,sX,sJo,lJo,iJo,MF,Spe,dJo,cJo,lX,fJo,mJo,gJo,EF,Rpe,hJo,pJo,iX,uJo,_Jo,bJo,CF,Ppe,vJo,FJo,dX,TJo,MJo,EJo,wF,CJo,Bpe,wJo,AJo,Ipe,yJo,LJo,AF,EIe,ud,yF,qpe,Q6,xJo,Npe,$Jo,CIe,Xo,W6,kJo,_d,SJo,cX,RJo,PJo,fX,BJo,IJo,qJo,H6,NJo,jpe,jJo,DJo,GJo,bt,U6,OJo,Dpe,VJo,XJo,bd,zJo,Gpe,QJo,WJo,mX,HJo,UJo,JJo,LF,YJo,fo,J6,KJo,Ope,ZJo,eYo,Va,oYo,Vpe,rYo,tYo,Xpe,aYo,nYo,zpe,sYo,lYo,iYo,Y6,xF,Qpe,dYo,cYo,gX,fYo,mYo,gYo,$F,Wpe,hYo,pYo,hX,uYo,_Yo,bYo,kF,vYo,Hpe,FYo,TYo,Upe,MYo,EYo,SF,wIe,vd,RF,Jpe,K6,CYo,Ype,wYo,AIe,zo,Z6,AYo,Fd,yYo,pX,LYo,xYo,uX,$Yo,kYo,SYo,ey,RYo,Kpe,PYo,BYo,IYo,vt,oy,qYo,Zpe,NYo,jYo,Td,DYo,eue,GYo,OYo,_X,VYo,XYo,zYo,PF,QYo,mo,ry,WYo,oue,HYo,UYo,Xa,JYo,rue,YYo,KYo,tue,ZYo,eKo,aue,oKo,rKo,tKo,za,BF,nue,aKo,nKo,bX,sKo,lKo,iKo,IF,sue,dKo,cKo,vX,fKo,mKo,gKo,qF,lue,hKo,pKo,FX,uKo,_Ko,bKo,NF,iue,vKo,FKo,TX,TKo,MKo,EKo,jF,CKo,due,wKo,AKo,cue,yKo,LKo,DF,yIe,Md,GF,fue,ty,xKo,mue,$Ko,LIe,Qo,ay,kKo,Ed,SKo,MX,RKo,PKo,EX,BKo,IKo,qKo,ny,NKo,gue,jKo,DKo,GKo,Ft,sy,OKo,hue,VKo,XKo,Cd,zKo,pue,QKo,WKo,CX,HKo,UKo,JKo,OF,YKo,go,ly,KKo,uue,ZKo,eZo,Qa,oZo,_ue,rZo,tZo,bue,aZo,nZo,vue,sZo,lZo,iZo,wd,VF,Fue,dZo,cZo,wX,fZo,mZo,gZo,XF,Tue,hZo,pZo,AX,uZo,_Zo,bZo,zF,Mue,vZo,FZo,yX,TZo,MZo,EZo,QF,CZo,Eue,wZo,AZo,Cue,yZo,LZo,WF,xIe,Ad,HF,wue,iy,xZo,Aue,$Zo,$Ie,Wo,dy,kZo,yd,SZo,LX,RZo,PZo,xX,BZo,IZo,qZo,cy,NZo,yue,jZo,DZo,GZo,Tt,fy,OZo,Lue,VZo,XZo,Ld,zZo,xue,QZo,WZo,$X,HZo,UZo,JZo,UF,YZo,ho,my,KZo,$ue,ZZo,eer,Wa,oer,kue,rer,ter,Sue,aer,ner,Rue,ser,ler,ier,gy,JF,Pue,der,cer,kX,fer,mer,ger,YF,Bue,her,per,SX,uer,_er,ber,KF,ver,Iue,Fer,Ter,que,Mer,Eer,ZF,kIe,xd,e0,Nue,hy,Cer,jue,wer,SIe,Ho,py,Aer,$d,yer,RX,Ler,xer,PX,$er,ker,Ser,uy,Rer,Due,Per,Ber,Ier,Mt,_y,qer,Gue,Ner,jer,kd,Der,Oue,Ger,Oer,BX,Ver,Xer,zer,o0,Qer,po,by,Wer,Vue,Her,Uer,Ha,Jer,Xue,Yer,Ker,zue,Zer,eor,Que,oor,ror,tor,Wue,r0,Hue,aor,nor,IX,sor,lor,ior,t0,dor,Uue,cor,mor,Jue,gor,hor,a0,RIe,Sd,n0,Yue,vy,por,Kue,uor,PIe,Uo,Fy,_or,Rd,bor,qX,vor,For,NX,Tor,Mor,Eor,Ty,Cor,Zue,wor,Aor,yor,Et,My,Lor,e_e,xor,$or,Pd,kor,o_e,Sor,Ror,jX,Por,Bor,Ior,s0,qor,uo,Ey,Nor,r_e,jor,Dor,Ua,Gor,t_e,Oor,Vor,a_e,Xor,zor,n_e,Qor,Wor,Hor,Ja,l0,s_e,Uor,Jor,DX,Yor,Kor,Zor,i0,l_e,err,orr,GX,rrr,trr,arr,d0,i_e,nrr,srr,OX,lrr,irr,drr,c0,d_e,crr,frr,VX,mrr,grr,hrr,f0,prr,c_e,urr,_rr,f_e,brr,vrr,m0,BIe,Bd,g0,m_e,Cy,Frr,g_e,Trr,IIe,Jo,wy,Mrr,Id,Err,XX,Crr,wrr,zX,Arr,yrr,Lrr,Ay,xrr,h_e,$rr,krr,Srr,Ct,yy,Rrr,p_e,Prr,Brr,qd,Irr,u_e,qrr,Nrr,QX,jrr,Drr,Grr,h0,Orr,_o,Ly,Vrr,__e,Xrr,zrr,Ya,Qrr,b_e,Wrr,Hrr,v_e,Urr,Jrr,F_e,Yrr,Krr,Zrr,T_e,p0,M_e,etr,otr,WX,rtr,ttr,atr,u0,ntr,E_e,str,ltr,C_e,itr,dtr,_0,qIe,Nd,b0,w_e,xy,ctr,A_e,ftr,NIe,Yo,$y,mtr,jd,gtr,HX,htr,ptr,UX,utr,_tr,btr,ky,vtr,y_e,Ftr,Ttr,Mtr,wt,Sy,Etr,L_e,Ctr,wtr,Dd,Atr,x_e,ytr,Ltr,JX,xtr,$tr,ktr,v0,Str,wr,Ry,Rtr,$_e,Ptr,Btr,Ka,Itr,k_e,qtr,Ntr,S_e,jtr,Dtr,R_e,Gtr,Otr,Vtr,N,F0,P_e,Xtr,ztr,YX,Qtr,Wtr,Htr,T0,B_e,Utr,Jtr,KX,Ytr,Ktr,Ztr,M0,I_e,ear,oar,ZX,rar,tar,aar,E0,q_e,nar,sar,ez,lar,iar,dar,C0,N_e,car,far,oz,mar,gar,har,w0,j_e,par,uar,rz,_ar,bar,Far,A0,D_e,Tar,Mar,tz,Ear,Car,war,y0,G_e,Aar,yar,az,Lar,xar,$ar,L0,O_e,kar,Sar,nz,Rar,Par,Bar,x0,V_e,Iar,qar,sz,Nar,jar,Dar,$0,X_e,Gar,Oar,lz,Var,Xar,zar,k0,z_e,Qar,War,iz,Har,Uar,Jar,S0,Q_e,Yar,Kar,dz,Zar,enr,onr,R0,W_e,rnr,tnr,cz,anr,nnr,snr,P0,H_e,lnr,inr,fz,dnr,cnr,fnr,B0,U_e,mnr,gnr,mz,hnr,pnr,unr,I0,J_e,_nr,bnr,gz,vnr,Fnr,Tnr,Bs,Y_e,Mnr,Enr,hz,Cnr,wnr,pz,Anr,ynr,Lnr,q0,K_e,xnr,$nr,uz,knr,Snr,Rnr,N0,Z_e,Pnr,Bnr,_z,Inr,qnr,Nnr,j0,e1e,jnr,Dnr,bz,Gnr,Onr,Vnr,D0,o1e,Xnr,znr,vz,Qnr,Wnr,Hnr,G0,r1e,Unr,Jnr,Fz,Ynr,Knr,Znr,O0,t1e,esr,osr,Tz,rsr,tsr,asr,V0,a1e,nsr,ssr,Mz,lsr,isr,dsr,X0,n1e,csr,fsr,Ez,msr,gsr,hsr,z0,s1e,psr,usr,Cz,_sr,bsr,vsr,Q0,l1e,Fsr,Tsr,wz,Msr,Esr,Csr,W0,i1e,wsr,Asr,Az,ysr,Lsr,xsr,H0,d1e,$sr,ksr,yz,Ssr,Rsr,Psr,U0,c1e,Bsr,Isr,Lz,qsr,Nsr,jsr,J0,f1e,Dsr,Gsr,xz,Osr,Vsr,Xsr,Y0,m1e,zsr,Qsr,$z,Wsr,Hsr,Usr,K0,g1e,Jsr,Ysr,kz,Ksr,Zsr,elr,Z0,h1e,olr,rlr,Sz,tlr,alr,nlr,eT,p1e,slr,llr,Rz,ilr,dlr,clr,oT,u1e,flr,mlr,Pz,glr,hlr,plr,rT,_1e,ulr,_lr,Bz,blr,vlr,Flr,tT,b1e,Tlr,Mlr,Iz,Elr,Clr,wlr,aT,v1e,Alr,ylr,qz,Llr,xlr,$lr,nT,F1e,klr,Slr,Nz,Rlr,Plr,Blr,sT,T1e,Ilr,qlr,jz,Nlr,jlr,Dlr,lT,M1e,Glr,Olr,Dz,Vlr,Xlr,zlr,iT,E1e,Qlr,Wlr,Gz,Hlr,Ulr,Jlr,dT,C1e,Ylr,Klr,Oz,Zlr,eir,oir,cT,w1e,rir,tir,Vz,air,nir,sir,fT,jIe,Gd,mT,A1e,Py,lir,y1e,iir,DIe,Ko,By,dir,Od,cir,Xz,fir,mir,zz,gir,hir,pir,Iy,uir,L1e,_ir,bir,vir,At,qy,Fir,x1e,Tir,Mir,Vd,Eir,$1e,Cir,wir,Qz,Air,yir,Lir,gT,xir,Ar,Ny,$ir,k1e,kir,Sir,Za,Rir,S1e,Pir,Bir,R1e,Iir,qir,P1e,Nir,jir,Dir,ne,hT,B1e,Gir,Oir,Wz,Vir,Xir,zir,pT,I1e,Qir,Wir,Hz,Hir,Uir,Jir,uT,q1e,Yir,Kir,Uz,Zir,edr,odr,_T,N1e,rdr,tdr,Jz,adr,ndr,sdr,bT,j1e,ldr,idr,Yz,ddr,cdr,fdr,vT,D1e,mdr,gdr,Kz,hdr,pdr,udr,FT,G1e,_dr,bdr,Zz,vdr,Fdr,Tdr,TT,O1e,Mdr,Edr,eQ,Cdr,wdr,Adr,MT,V1e,ydr,Ldr,oQ,xdr,$dr,kdr,ET,X1e,Sdr,Rdr,rQ,Pdr,Bdr,Idr,CT,z1e,qdr,Ndr,tQ,jdr,Ddr,Gdr,wT,Q1e,Odr,Vdr,aQ,Xdr,zdr,Qdr,AT,W1e,Wdr,Hdr,nQ,Udr,Jdr,Ydr,yT,H1e,Kdr,Zdr,sQ,ecr,ocr,rcr,LT,U1e,tcr,acr,lQ,ncr,scr,lcr,xT,J1e,icr,dcr,iQ,ccr,fcr,mcr,$T,Y1e,gcr,hcr,dQ,pcr,ucr,_cr,kT,K1e,bcr,vcr,cQ,Fcr,Tcr,Mcr,ST,Z1e,Ecr,Ccr,fQ,wcr,Acr,ycr,RT,e8e,Lcr,xcr,mQ,$cr,kcr,Scr,PT,o8e,Rcr,Pcr,gQ,Bcr,Icr,qcr,BT,r8e,Ncr,jcr,hQ,Dcr,Gcr,Ocr,IT,t8e,Vcr,Xcr,pQ,zcr,Qcr,Wcr,qT,GIe,Xd,NT,a8e,jy,Hcr,n8e,Ucr,OIe,Zo,Dy,Jcr,zd,Ycr,uQ,Kcr,Zcr,_Q,efr,ofr,rfr,Gy,tfr,s8e,afr,nfr,sfr,yt,Oy,lfr,l8e,ifr,dfr,Qd,cfr,i8e,ffr,mfr,bQ,gfr,hfr,pfr,jT,ufr,yr,Vy,_fr,d8e,bfr,vfr,en,Ffr,c8e,Tfr,Mfr,f8e,Efr,Cfr,m8e,wfr,Afr,yfr,Te,DT,g8e,Lfr,xfr,vQ,$fr,kfr,Sfr,GT,h8e,Rfr,Pfr,FQ,Bfr,Ifr,qfr,OT,p8e,Nfr,jfr,TQ,Dfr,Gfr,Ofr,VT,u8e,Vfr,Xfr,MQ,zfr,Qfr,Wfr,XT,_8e,Hfr,Ufr,EQ,Jfr,Yfr,Kfr,zT,b8e,Zfr,emr,CQ,omr,rmr,tmr,QT,v8e,amr,nmr,wQ,smr,lmr,imr,WT,F8e,dmr,cmr,AQ,fmr,mmr,gmr,HT,T8e,hmr,pmr,yQ,umr,_mr,bmr,UT,M8e,vmr,Fmr,LQ,Tmr,Mmr,Emr,JT,E8e,Cmr,wmr,xQ,Amr,ymr,Lmr,YT,C8e,xmr,$mr,$Q,kmr,Smr,Rmr,KT,VIe,Wd,ZT,w8e,Xy,Pmr,A8e,Bmr,XIe,er,zy,Imr,Hd,qmr,kQ,Nmr,jmr,SQ,Dmr,Gmr,Omr,Qy,Vmr,y8e,Xmr,zmr,Qmr,Lt,Wy,Wmr,L8e,Hmr,Umr,Ud,Jmr,x8e,Ymr,Kmr,RQ,Zmr,egr,ogr,e7,rgr,Lr,Hy,tgr,$8e,agr,ngr,on,sgr,k8e,lgr,igr,S8e,dgr,cgr,R8e,fgr,mgr,ggr,Jd,o7,P8e,hgr,pgr,PQ,ugr,_gr,bgr,r7,B8e,vgr,Fgr,BQ,Tgr,Mgr,Egr,t7,I8e,Cgr,wgr,IQ,Agr,ygr,Lgr,a7,zIe,Yd,n7,q8e,Uy,xgr,N8e,$gr,QIe,or,Jy,kgr,Kd,Sgr,qQ,Rgr,Pgr,NQ,Bgr,Igr,qgr,Yy,Ngr,j8e,jgr,Dgr,Ggr,xt,Ky,Ogr,D8e,Vgr,Xgr,Zd,zgr,G8e,Qgr,Wgr,jQ,Hgr,Ugr,Jgr,s7,Ygr,xr,Zy,Kgr,O8e,Zgr,ehr,rn,ohr,V8e,rhr,thr,X8e,ahr,nhr,z8e,shr,lhr,ihr,ie,l7,Q8e,dhr,chr,DQ,fhr,mhr,ghr,i7,W8e,hhr,phr,GQ,uhr,_hr,bhr,d7,H8e,vhr,Fhr,OQ,Thr,Mhr,Ehr,c7,U8e,Chr,whr,VQ,Ahr,yhr,Lhr,f7,J8e,xhr,$hr,XQ,khr,Shr,Rhr,m7,Y8e,Phr,Bhr,zQ,Ihr,qhr,Nhr,g7,K8e,jhr,Dhr,QQ,Ghr,Ohr,Vhr,h7,Z8e,Xhr,zhr,WQ,Qhr,Whr,Hhr,p7,ebe,Uhr,Jhr,HQ,Yhr,Khr,Zhr,u7,obe,epr,opr,UQ,rpr,tpr,apr,_7,rbe,npr,spr,JQ,lpr,ipr,dpr,b7,tbe,cpr,fpr,YQ,mpr,gpr,hpr,v7,abe,ppr,upr,KQ,_pr,bpr,vpr,F7,nbe,Fpr,Tpr,ZQ,Mpr,Epr,Cpr,T7,sbe,wpr,Apr,eW,ypr,Lpr,xpr,M7,lbe,$pr,kpr,oW,Spr,Rpr,Ppr,E7,ibe,Bpr,Ipr,rW,qpr,Npr,jpr,C7,dbe,Dpr,Gpr,tW,Opr,Vpr,Xpr,w7,cbe,zpr,Qpr,aW,Wpr,Hpr,Upr,A7,fbe,Jpr,Ypr,nW,Kpr,Zpr,eur,y7,WIe,ec,L7,mbe,eL,our,gbe,rur,HIe,rr,oL,tur,oc,aur,sW,nur,sur,lW,lur,iur,dur,rL,cur,hbe,fur,mur,gur,$t,tL,hur,pbe,pur,uur,rc,_ur,ube,bur,vur,iW,Fur,Tur,Mur,x7,Eur,$r,aL,Cur,_be,wur,Aur,tn,yur,bbe,Lur,xur,vbe,$ur,kur,Fbe,Sur,Rur,Pur,ye,$7,Tbe,Bur,Iur,dW,qur,Nur,jur,k7,Mbe,Dur,Gur,cW,Our,Vur,Xur,S7,Ebe,zur,Qur,fW,Wur,Hur,Uur,R7,Cbe,Jur,Yur,mW,Kur,Zur,e_r,P7,wbe,o_r,r_r,gW,t_r,a_r,n_r,B7,Abe,s_r,l_r,hW,i_r,d_r,c_r,I7,ybe,f_r,m_r,pW,g_r,h_r,p_r,q7,Lbe,u_r,__r,uW,b_r,v_r,F_r,N7,xbe,T_r,M_r,_W,E_r,C_r,w_r,j7,$be,A_r,y_r,bW,L_r,x_r,$_r,D7,UIe,tc,G7,kbe,nL,k_r,Sbe,S_r,JIe,tr,sL,R_r,ac,P_r,vW,B_r,I_r,FW,q_r,N_r,j_r,lL,D_r,Rbe,G_r,O_r,V_r,kt,iL,X_r,Pbe,z_r,Q_r,nc,W_r,Bbe,H_r,U_r,TW,J_r,Y_r,K_r,O7,Z_r,kr,dL,e1r,Ibe,o1r,r1r,an,t1r,qbe,a1r,n1r,Nbe,s1r,l1r,jbe,i1r,d1r,c1r,Z,V7,Dbe,f1r,m1r,MW,g1r,h1r,p1r,X7,Gbe,u1r,_1r,EW,b1r,v1r,F1r,z7,Obe,T1r,M1r,CW,E1r,C1r,w1r,Q7,Vbe,A1r,y1r,wW,L1r,x1r,$1r,W7,Xbe,k1r,S1r,AW,R1r,P1r,B1r,H7,zbe,I1r,q1r,yW,N1r,j1r,D1r,U7,Qbe,G1r,O1r,LW,V1r,X1r,z1r,J7,Wbe,Q1r,W1r,xW,H1r,U1r,J1r,Y7,Hbe,Y1r,K1r,$W,Z1r,e8r,o8r,K7,Ube,r8r,t8r,kW,a8r,n8r,s8r,Z7,Jbe,l8r,i8r,SW,d8r,c8r,f8r,eM,Ybe,m8r,g8r,RW,h8r,p8r,u8r,oM,Kbe,_8r,b8r,PW,v8r,F8r,T8r,rM,Zbe,M8r,E8r,BW,C8r,w8r,A8r,tM,e2e,y8r,L8r,IW,x8r,$8r,k8r,aM,o2e,S8r,R8r,qW,P8r,B8r,I8r,nM,r2e,q8r,N8r,NW,j8r,D8r,G8r,sM,t2e,O8r,V8r,jW,X8r,z8r,Q8r,lM,a2e,W8r,H8r,DW,U8r,J8r,Y8r,iM,n2e,K8r,Z8r,GW,ebr,obr,rbr,dM,s2e,tbr,abr,OW,nbr,sbr,lbr,cM,l2e,ibr,dbr,VW,cbr,fbr,mbr,fM,i2e,gbr,hbr,XW,pbr,ubr,_br,mM,d2e,bbr,vbr,zW,Fbr,Tbr,Mbr,gM,c2e,Ebr,Cbr,QW,wbr,Abr,ybr,hM,f2e,Lbr,xbr,WW,$br,kbr,Sbr,pM,YIe,sc,uM,m2e,cL,Rbr,g2e,Pbr,KIe,ar,fL,Bbr,lc,Ibr,HW,qbr,Nbr,UW,jbr,Dbr,Gbr,mL,Obr,h2e,Vbr,Xbr,zbr,St,gL,Qbr,p2e,Wbr,Hbr,ic,Ubr,u2e,Jbr,Ybr,JW,Kbr,Zbr,e2r,_M,o2r,Sr,hL,r2r,_2e,t2r,a2r,nn,n2r,b2e,s2r,l2r,v2e,i2r,d2r,F2e,c2r,f2r,m2r,pe,bM,T2e,g2r,h2r,YW,p2r,u2r,_2r,vM,M2e,b2r,v2r,KW,F2r,T2r,M2r,FM,E2e,E2r,C2r,ZW,w2r,A2r,y2r,TM,C2e,L2r,x2r,eH,$2r,k2r,S2r,MM,w2e,R2r,P2r,oH,B2r,I2r,q2r,EM,A2e,N2r,j2r,rH,D2r,G2r,O2r,CM,y2e,V2r,X2r,tH,z2r,Q2r,W2r,wM,L2e,H2r,U2r,aH,J2r,Y2r,K2r,AM,x2e,Z2r,evr,nH,ovr,rvr,tvr,yM,$2e,avr,nvr,sH,svr,lvr,ivr,LM,k2e,dvr,cvr,lH,fvr,mvr,gvr,xM,S2e,hvr,pvr,iH,uvr,_vr,bvr,$M,R2e,vvr,Fvr,dH,Tvr,Mvr,Evr,kM,P2e,Cvr,wvr,cH,Avr,yvr,Lvr,SM,B2e,xvr,$vr,fH,kvr,Svr,Rvr,RM,I2e,Pvr,Bvr,mH,Ivr,qvr,Nvr,PM,q2e,jvr,Dvr,gH,Gvr,Ovr,Vvr,BM,ZIe,dc,IM,N2e,pL,Xvr,j2e,zvr,eqe,nr,uL,Qvr,cc,Wvr,hH,Hvr,Uvr,pH,Jvr,Yvr,Kvr,_L,Zvr,D2e,eFr,oFr,rFr,Rt,bL,tFr,G2e,aFr,nFr,fc,sFr,O2e,lFr,iFr,uH,dFr,cFr,fFr,qM,mFr,Rr,vL,gFr,V2e,hFr,pFr,sn,uFr,X2e,_Fr,bFr,z2e,vFr,FFr,Q2e,TFr,MFr,EFr,FL,NM,W2e,CFr,wFr,_H,AFr,yFr,LFr,jM,H2e,xFr,$Fr,bH,kFr,SFr,RFr,DM,oqe,mc,GM,U2e,TL,PFr,J2e,BFr,rqe,sr,ML,IFr,gc,qFr,vH,NFr,jFr,FH,DFr,GFr,OFr,EL,VFr,Y2e,XFr,zFr,QFr,Pt,CL,WFr,K2e,HFr,UFr,hc,JFr,Z2e,YFr,KFr,TH,ZFr,e0r,o0r,OM,r0r,Pr,wL,t0r,eve,a0r,n0r,ln,s0r,ove,l0r,i0r,rve,d0r,c0r,tve,f0r,m0r,g0r,ave,VM,nve,h0r,p0r,MH,u0r,_0r,b0r,XM,tqe,pc,zM,sve,AL,v0r,lve,F0r,aqe,lr,yL,T0r,uc,M0r,EH,E0r,C0r,CH,w0r,A0r,y0r,LL,L0r,ive,x0r,$0r,k0r,Bt,xL,S0r,dve,R0r,P0r,_c,B0r,cve,I0r,q0r,wH,N0r,j0r,D0r,QM,G0r,Br,$L,O0r,fve,V0r,X0r,dn,z0r,mve,Q0r,W0r,gve,H0r,U0r,hve,J0r,Y0r,K0r,de,WM,pve,Z0r,eTr,AH,oTr,rTr,tTr,HM,uve,aTr,nTr,yH,sTr,lTr,iTr,UM,_ve,dTr,cTr,LH,fTr,mTr,gTr,JM,bve,hTr,pTr,xH,uTr,_Tr,bTr,YM,vve,vTr,FTr,$H,TTr,MTr,ETr,KM,Fve,CTr,wTr,kH,ATr,yTr,LTr,ZM,Tve,xTr,$Tr,SH,kTr,STr,RTr,e4,Mve,PTr,BTr,RH,ITr,qTr,NTr,o4,Eve,jTr,DTr,PH,GTr,OTr,VTr,r4,Cve,XTr,zTr,BH,QTr,WTr,HTr,t4,wve,UTr,JTr,IH,YTr,KTr,ZTr,a4,Ave,e7r,o7r,qH,r7r,t7r,a7r,n4,yve,n7r,s7r,NH,l7r,i7r,d7r,s4,Lve,c7r,f7r,jH,m7r,g7r,h7r,l4,xve,p7r,u7r,DH,_7r,b7r,v7r,i4,$ve,F7r,T7r,GH,M7r,E7r,C7r,d4,kve,w7r,A7r,OH,y7r,L7r,x7r,c4,Sve,$7r,k7r,VH,S7r,R7r,P7r,f4,Rve,B7r,I7r,XH,q7r,N7r,j7r,m4,Pve,D7r,G7r,zH,O7r,V7r,X7r,g4,nqe,bc,h4,Bve,kL,z7r,Ive,Q7r,sqe,ir,SL,W7r,vc,H7r,QH,U7r,J7r,WH,Y7r,K7r,Z7r,RL,eMr,qve,oMr,rMr,tMr,It,PL,aMr,Nve,nMr,sMr,Fc,lMr,jve,iMr,dMr,HH,cMr,fMr,mMr,p4,gMr,Ir,BL,hMr,Dve,pMr,uMr,cn,_Mr,Gve,bMr,vMr,Ove,FMr,TMr,Vve,MMr,EMr,CMr,ce,u4,Xve,wMr,AMr,UH,yMr,LMr,xMr,_4,zve,$Mr,kMr,JH,SMr,RMr,PMr,b4,Qve,BMr,IMr,YH,qMr,NMr,jMr,v4,Wve,DMr,GMr,KH,OMr,VMr,XMr,F4,Hve,zMr,QMr,ZH,WMr,HMr,UMr,T4,Uve,JMr,YMr,eU,KMr,ZMr,e4r,M4,Jve,o4r,r4r,oU,t4r,a4r,n4r,E4,Yve,s4r,l4r,rU,i4r,d4r,c4r,C4,Kve,f4r,m4r,tU,g4r,h4r,p4r,w4,Zve,u4r,_4r,aU,b4r,v4r,F4r,A4,eFe,T4r,M4r,nU,E4r,C4r,w4r,y4,oFe,A4r,y4r,sU,L4r,x4r,$4r,L4,rFe,k4r,S4r,lU,R4r,P4r,B4r,x4,tFe,I4r,q4r,iU,N4r,j4r,D4r,$4,aFe,G4r,O4r,dU,V4r,X4r,z4r,k4,nFe,Q4r,W4r,cU,H4r,U4r,J4r,S4,sFe,Y4r,K4r,fU,Z4r,eEr,oEr,R4,lFe,rEr,tEr,mU,aEr,nEr,sEr,P4,iFe,lEr,iEr,gU,dEr,cEr,fEr,B4,dFe,mEr,gEr,hU,hEr,pEr,uEr,I4,lqe,Tc,q4,cFe,IL,_Er,fFe,bEr,iqe,dr,qL,vEr,Mc,FEr,pU,TEr,MEr,uU,EEr,CEr,wEr,NL,AEr,mFe,yEr,LEr,xEr,qt,jL,$Er,gFe,kEr,SEr,Ec,REr,hFe,PEr,BEr,_U,IEr,qEr,NEr,N4,jEr,qr,DL,DEr,pFe,GEr,OEr,fn,VEr,uFe,XEr,zEr,_Fe,QEr,WEr,bFe,HEr,UEr,JEr,vFe,j4,FFe,YEr,KEr,bU,ZEr,e5r,o5r,D4,dqe,Cc,G4,TFe,GL,r5r,MFe,t5r,cqe,cr,OL,a5r,wc,n5r,vU,s5r,l5r,FU,i5r,d5r,c5r,VL,f5r,EFe,m5r,g5r,h5r,Nt,XL,p5r,CFe,u5r,_5r,Ac,b5r,wFe,v5r,F5r,TU,T5r,M5r,E5r,O4,C5r,Nr,zL,w5r,AFe,A5r,y5r,mn,L5r,yFe,x5r,$5r,LFe,k5r,S5r,xFe,R5r,P5r,B5r,$Fe,V4,kFe,I5r,q5r,MU,N5r,j5r,D5r,X4,fqe,yc,z4,SFe,QL,G5r,RFe,O5r,mqe,fr,WL,V5r,Lc,X5r,EU,z5r,Q5r,CU,W5r,H5r,U5r,HL,J5r,PFe,Y5r,K5r,Z5r,jt,UL,eCr,BFe,oCr,rCr,xc,tCr,IFe,aCr,nCr,wU,sCr,lCr,iCr,Q4,dCr,jr,JL,cCr,qFe,fCr,mCr,gn,gCr,NFe,hCr,pCr,jFe,uCr,_Cr,DFe,bCr,vCr,FCr,ee,W4,GFe,TCr,MCr,AU,ECr,CCr,wCr,H4,OFe,ACr,yCr,yU,LCr,xCr,$Cr,U4,VFe,kCr,SCr,LU,RCr,PCr,BCr,J4,XFe,ICr,qCr,xU,NCr,jCr,DCr,Y4,zFe,GCr,OCr,$U,VCr,XCr,zCr,K4,QFe,QCr,WCr,kU,HCr,UCr,JCr,Z4,WFe,YCr,KCr,SU,ZCr,e3r,o3r,eE,HFe,r3r,t3r,RU,a3r,n3r,s3r,oE,UFe,l3r,i3r,PU,d3r,c3r,f3r,rE,JFe,m3r,g3r,BU,h3r,p3r,u3r,tE,YFe,_3r,b3r,IU,v3r,F3r,T3r,aE,KFe,M3r,E3r,qU,C3r,w3r,A3r,nE,ZFe,y3r,L3r,NU,x3r,$3r,k3r,sE,e0e,S3r,R3r,jU,P3r,B3r,I3r,lE,o0e,q3r,N3r,DU,j3r,D3r,G3r,iE,r0e,O3r,V3r,GU,X3r,z3r,Q3r,dE,t0e,W3r,H3r,OU,U3r,J3r,Y3r,cE,a0e,K3r,Z3r,VU,ewr,owr,rwr,fE,n0e,twr,awr,XU,nwr,swr,lwr,mE,s0e,iwr,dwr,zU,cwr,fwr,mwr,gE,l0e,gwr,hwr,QU,pwr,uwr,_wr,hE,i0e,bwr,vwr,WU,Fwr,Twr,Mwr,pE,d0e,Ewr,Cwr,HU,wwr,Awr,ywr,uE,c0e,Lwr,xwr,UU,$wr,kwr,Swr,_E,f0e,Rwr,Pwr,JU,Bwr,Iwr,qwr,bE,m0e,Nwr,jwr,YU,Dwr,Gwr,Owr,vE,gqe,$c,FE,g0e,YL,Vwr,h0e,Xwr,hqe,mr,KL,zwr,kc,Qwr,KU,Wwr,Hwr,ZU,Uwr,Jwr,Ywr,ZL,Kwr,p0e,Zwr,eAr,oAr,Dt,ex,rAr,u0e,tAr,aAr,Sc,nAr,_0e,sAr,lAr,eJ,iAr,dAr,cAr,TE,fAr,Dr,ox,mAr,b0e,gAr,hAr,hn,pAr,v0e,uAr,_Ar,F0e,bAr,vAr,T0e,FAr,TAr,MAr,Le,ME,M0e,EAr,CAr,oJ,wAr,AAr,yAr,EE,E0e,LAr,xAr,rJ,$Ar,kAr,SAr,CE,C0e,RAr,PAr,tJ,BAr,IAr,qAr,wE,w0e,NAr,jAr,aJ,DAr,GAr,OAr,AE,A0e,VAr,XAr,nJ,zAr,QAr,WAr,yE,y0e,HAr,UAr,sJ,JAr,YAr,KAr,LE,L0e,ZAr,e6r,lJ,o6r,r6r,t6r,xE,x0e,a6r,n6r,iJ,s6r,l6r,i6r,$E,$0e,d6r,c6r,dJ,f6r,m6r,g6r,kE,k0e,h6r,p6r,cJ,u6r,_6r,b6r,SE,pqe,Rc,RE,S0e,rx,v6r,R0e,F6r,uqe,gr,tx,T6r,Pc,M6r,fJ,E6r,C6r,mJ,w6r,A6r,y6r,ax,L6r,P0e,x6r,$6r,k6r,Gt,nx,S6r,B0e,R6r,P6r,Bc,B6r,I0e,I6r,q6r,gJ,N6r,j6r,D6r,PE,G6r,Gr,sx,O6r,q0e,V6r,X6r,pn,z6r,N0e,Q6r,W6r,j0e,H6r,U6r,D0e,J6r,Y6r,K6r,Me,BE,G0e,Z6r,eyr,hJ,oyr,ryr,tyr,IE,O0e,ayr,nyr,pJ,syr,lyr,iyr,qE,V0e,dyr,cyr,uJ,fyr,myr,gyr,NE,X0e,hyr,pyr,_J,uyr,_yr,byr,jE,z0e,vyr,Fyr,bJ,Tyr,Myr,Eyr,DE,Q0e,Cyr,wyr,vJ,Ayr,yyr,Lyr,GE,W0e,xyr,$yr,FJ,kyr,Syr,Ryr,OE,H0e,Pyr,Byr,TJ,Iyr,qyr,Nyr,VE,U0e,jyr,Dyr,MJ,Gyr,Oyr,Vyr,XE,J0e,Xyr,zyr,EJ,Qyr,Wyr,Hyr,zE,Y0e,Uyr,Jyr,CJ,Yyr,Kyr,Zyr,QE,K0e,eLr,oLr,wJ,rLr,tLr,aLr,WE,_qe,Ic,HE,Z0e,lx,nLr,eTe,sLr,bqe,hr,ix,lLr,qc,iLr,AJ,dLr,cLr,yJ,fLr,mLr,gLr,dx,hLr,oTe,pLr,uLr,_Lr,Ot,cx,bLr,rTe,vLr,FLr,Nc,TLr,tTe,MLr,ELr,LJ,CLr,wLr,ALr,UE,yLr,Or,fx,LLr,aTe,xLr,$Lr,un,kLr,nTe,SLr,RLr,sTe,PLr,BLr,lTe,ILr,qLr,NLr,xe,JE,iTe,jLr,DLr,xJ,GLr,OLr,VLr,YE,dTe,XLr,zLr,$J,QLr,WLr,HLr,KE,cTe,ULr,JLr,kJ,YLr,KLr,ZLr,ZE,fTe,exr,oxr,SJ,rxr,txr,axr,e5,mTe,nxr,sxr,RJ,lxr,ixr,dxr,o5,gTe,cxr,fxr,PJ,mxr,gxr,hxr,r5,hTe,pxr,uxr,BJ,_xr,bxr,vxr,t5,pTe,Fxr,Txr,IJ,Mxr,Exr,Cxr,a5,uTe,wxr,Axr,qJ,yxr,Lxr,xxr,n5,_Te,$xr,kxr,NJ,Sxr,Rxr,Pxr,s5,vqe,jc,l5,bTe,mx,Bxr,vTe,Ixr,Fqe,pr,gx,qxr,Dc,Nxr,jJ,jxr,Dxr,DJ,Gxr,Oxr,Vxr,hx,Xxr,FTe,zxr,Qxr,Wxr,Vt,px,Hxr,TTe,Uxr,Jxr,Gc,Yxr,MTe,Kxr,Zxr,GJ,e9r,o9r,r9r,i5,t9r,Vr,ux,a9r,ETe,n9r,s9r,_n,l9r,CTe,i9r,d9r,wTe,c9r,f9r,ATe,m9r,g9r,h9r,Se,d5,yTe,p9r,u9r,OJ,_9r,b9r,v9r,c5,LTe,F9r,T9r,VJ,M9r,E9r,C9r,f5,xTe,w9r,A9r,XJ,y9r,L9r,x9r,m5,$Te,$9r,k9r,zJ,S9r,R9r,P9r,g5,kTe,B9r,I9r,QJ,q9r,N9r,j9r,h5,STe,D9r,G9r,WJ,O9r,V9r,X9r,p5,RTe,z9r,Q9r,HJ,W9r,H9r,U9r,u5,PTe,J9r,Y9r,UJ,K9r,Z9r,e$r,_5,BTe,o$r,r$r,JJ,t$r,a$r,n$r,b5,Tqe,Oc,v5,ITe,_x,s$r,qTe,l$r,Mqe,ur,bx,i$r,Vc,d$r,YJ,c$r,f$r,KJ,m$r,g$r,h$r,vx,p$r,NTe,u$r,_$r,b$r,Xt,Fx,v$r,jTe,F$r,T$r,Xc,M$r,DTe,E$r,C$r,ZJ,w$r,A$r,y$r,F5,L$r,Xr,Tx,x$r,GTe,$$r,k$r,bn,S$r,OTe,R$r,P$r,VTe,B$r,I$r,XTe,q$r,N$r,j$r,$e,T5,zTe,D$r,G$r,eY,O$r,V$r,X$r,M5,QTe,z$r,Q$r,oY,W$r,H$r,U$r,E5,WTe,J$r,Y$r,rY,K$r,Z$r,ekr,C5,HTe,okr,rkr,tY,tkr,akr,nkr,w5,UTe,skr,lkr,aY,ikr,dkr,ckr,A5,JTe,fkr,mkr,nY,gkr,hkr,pkr,y5,YTe,ukr,_kr,sY,bkr,vkr,Fkr,L5,KTe,Tkr,Mkr,lY,Ekr,Ckr,wkr,x5,ZTe,Akr,ykr,iY,Lkr,xkr,$kr,$5,e7e,kkr,Skr,dY,Rkr,Pkr,Bkr,k5,Eqe,zc,S5,o7e,Mx,Ikr,r7e,qkr,Cqe,_r,Ex,Nkr,Qc,jkr,cY,Dkr,Gkr,fY,Okr,Vkr,Xkr,Cx,zkr,t7e,Qkr,Wkr,Hkr,zt,wx,Ukr,a7e,Jkr,Ykr,Wc,Kkr,n7e,Zkr,eSr,mY,oSr,rSr,tSr,R5,aSr,zr,Ax,nSr,s7e,sSr,lSr,vn,iSr,l7e,dSr,cSr,i7e,fSr,mSr,d7e,gSr,hSr,pSr,ke,P5,c7e,uSr,_Sr,gY,bSr,vSr,FSr,B5,f7e,TSr,MSr,hY,ESr,CSr,wSr,I5,m7e,ASr,ySr,pY,LSr,xSr,$Sr,q5,g7e,kSr,SSr,uY,RSr,PSr,BSr,N5,h7e,ISr,qSr,_Y,NSr,jSr,DSr,j5,p7e,GSr,OSr,bY,VSr,XSr,zSr,D5,u7e,QSr,WSr,vY,HSr,USr,JSr,G5,_7e,YSr,KSr,FY,ZSr,eRr,oRr,O5,b7e,rRr,tRr,TY,aRr,nRr,sRr,V5,v7e,lRr,iRr,MY,dRr,cRr,fRr,X5,wqe,Hc,z5,F7e,yx,mRr,T7e,gRr,Aqe,br,Lx,hRr,Uc,pRr,EY,uRr,_Rr,CY,bRr,vRr,FRr,xx,TRr,M7e,MRr,ERr,CRr,Qt,$x,wRr,E7e,ARr,yRr,Jc,LRr,C7e,xRr,$Rr,wY,kRr,SRr,RRr,Q5,PRr,Qr,kx,BRr,w7e,IRr,qRr,Fn,NRr,A7e,jRr,DRr,y7e,GRr,ORr,L7e,VRr,XRr,zRr,Ge,W5,x7e,QRr,WRr,AY,HRr,URr,JRr,H5,$7e,YRr,KRr,yY,ZRr,ePr,oPr,U5,k7e,rPr,tPr,LY,aPr,nPr,sPr,J5,S7e,lPr,iPr,xY,dPr,cPr,fPr,Y5,R7e,mPr,gPr,$Y,hPr,pPr,uPr,K5,P7e,_Pr,bPr,kY,vPr,FPr,TPr,Z5,B7e,MPr,EPr,SY,CPr,wPr,APr,eC,I7e,yPr,LPr,RY,xPr,$Pr,kPr,oC,yqe,Yc,rC,q7e,Sx,SPr,N7e,RPr,Lqe,vr,Rx,PPr,Kc,BPr,PY,IPr,qPr,BY,NPr,jPr,DPr,Px,GPr,j7e,OPr,VPr,XPr,Wt,Bx,zPr,D7e,QPr,WPr,Zc,HPr,G7e,UPr,JPr,IY,YPr,KPr,ZPr,tC,eBr,Wr,Ix,oBr,O7e,rBr,tBr,Tn,aBr,V7e,nBr,sBr,X7e,lBr,iBr,z7e,dBr,cBr,fBr,Oe,aC,Q7e,mBr,gBr,qY,hBr,pBr,uBr,nC,W7e,_Br,bBr,NY,vBr,FBr,TBr,sC,H7e,MBr,EBr,jY,CBr,wBr,ABr,lC,U7e,yBr,LBr,DY,xBr,$Br,kBr,iC,J7e,SBr,RBr,GY,PBr,BBr,IBr,dC,Y7e,qBr,NBr,OY,jBr,DBr,GBr,cC,K7e,OBr,VBr,VY,XBr,zBr,QBr,fC,Z7e,WBr,HBr,XY,UBr,JBr,YBr,mC,xqe,ef,gC,eMe,qx,KBr,oMe,ZBr,$qe,Fr,Nx,eIr,of,oIr,zY,rIr,tIr,QY,aIr,nIr,sIr,jx,lIr,rMe,iIr,dIr,cIr,Ht,Dx,fIr,tMe,mIr,gIr,rf,hIr,aMe,pIr,uIr,WY,_Ir,bIr,vIr,hC,FIr,Hr,Gx,TIr,nMe,MIr,EIr,Mn,CIr,sMe,wIr,AIr,lMe,yIr,LIr,iMe,xIr,$Ir,kIr,dMe,pC,cMe,SIr,RIr,HY,PIr,BIr,IIr,uC,kqe,tf,_C,fMe,Ox,qIr,mMe,NIr,Sqe,Tr,Vx,jIr,af,DIr,UY,GIr,OIr,JY,VIr,XIr,zIr,Xx,QIr,gMe,WIr,HIr,UIr,Ut,zx,JIr,hMe,YIr,KIr,nf,ZIr,pMe,eqr,oqr,YY,rqr,tqr,aqr,bC,nqr,Ur,Qx,sqr,uMe,lqr,iqr,En,dqr,_Me,cqr,fqr,bMe,mqr,gqr,vMe,hqr,pqr,uqr,Wx,vC,FMe,_qr,bqr,KY,vqr,Fqr,Tqr,FC,TMe,Mqr,Eqr,ZY,Cqr,wqr,Aqr,TC,Rqe,sf,MC,MMe,Hx,yqr,EMe,Lqr,Pqe,Mr,Ux,xqr,lf,$qr,eK,kqr,Sqr,oK,Rqr,Pqr,Bqr,Jx,Iqr,CMe,qqr,Nqr,jqr,Jt,Yx,Dqr,wMe,Gqr,Oqr,df,Vqr,AMe,Xqr,zqr,rK,Qqr,Wqr,Hqr,EC,Uqr,Jr,Kx,Jqr,yMe,Yqr,Kqr,Cn,Zqr,LMe,eNr,oNr,xMe,rNr,tNr,$Me,aNr,nNr,sNr,kMe,CC,SMe,lNr,iNr,tK,dNr,cNr,fNr,wC,Bqe;return d=new oe({}),Ma=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Hw=new oe({}),Uw=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),bf=new mNr({props:{warning:!0,$$slots:{default:[qwt]},$$scope:{ctx:A}}}),Jw=new oe({}),Yw=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/configuration_auto.py#L566"}}),eA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/configuration_auto.py#L589"}}),ug=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Nwt]},$$scope:{ctx:A}}}),oA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/configuration_auto.py#L711"}}),rA=new oe({}),tA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/tokenization_auto.py#L378"}}),sA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17088/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/tokenization_auto.py#L392"}}),Hg=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[jwt]},$$scope:{ctx:A}}}),lA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/tokenization_auto.py#L588"}}),iA=new oe({}),dA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),mA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17088/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),Th=new mNr({props:{$$slots:{default:[Dwt]},$$scope:{ctx:A}}}),Mh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Gwt]},$$scope:{ctx:A}}}),gA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),hA=new oe({}),pA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/processing_auto.py#L76"}}),bA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/processing_auto.py#L90"}}),jh=new mNr({props:{$$slots:{default:[Owt]},$$scope:{ctx:A}}}),Dh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Vwt]},$$scope:{ctx:A}}}),vA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/processing_auto.py#L243"}}),FA=new oe({}),TA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L718"}}),EA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Vh=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Xwt]},$$scope:{ctx:A}}}),CA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Su=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[zwt]},$$scope:{ctx:A}}}),wA=new oe({}),AA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L725"}}),LA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Pu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Qwt]},$$scope:{ctx:A}}}),xA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),T_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Wwt]},$$scope:{ctx:A}}}),$A=new oe({}),kA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L740"}}),RA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),E_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Hwt]},$$scope:{ctx:A}}}),PA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),l1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Uwt]},$$scope:{ctx:A}}}),BA=new oe({}),IA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L747"}}),NA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),d1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Jwt]},$$scope:{ctx:A}}}),jA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Q1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Ywt]},$$scope:{ctx:A}}}),DA=new oe({}),GA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L754"}}),VA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),H1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Kwt]},$$scope:{ctx:A}}}),XA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),g8=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Zwt]},$$scope:{ctx:A}}}),zA=new oe({}),QA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L763"}}),HA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),p8=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[eAt]},$$scope:{ctx:A}}}),UA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),cb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[oAt]},$$scope:{ctx:A}}}),JA=new oe({}),YA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L797"}}),ZA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),mb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[rAt]},$$scope:{ctx:A}}}),e6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Ob=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[tAt]},$$scope:{ctx:A}}}),o6=new oe({}),r6=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L804"}}),a6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Xb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[aAt]},$$scope:{ctx:A}}}),n6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Yb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[nAt]},$$scope:{ctx:A}}}),s6=new oe({}),l6=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L790"}}),d6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Zb=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[sAt]},$$scope:{ctx:A}}}),c6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),P2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[lAt]},$$scope:{ctx:A}}}),f6=new oe({}),m6=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L772"}}),h6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),I2=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[iAt]},$$scope:{ctx:A}}}),p6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Ev=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[dAt]},$$scope:{ctx:A}}}),u6=new oe({}),_6=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L779"}}),v6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),wv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[cAt]},$$scope:{ctx:A}}}),F6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Lv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[fAt]},$$scope:{ctx:A}}}),T6=new oe({}),M6=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L813"}}),C6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),$v=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[mAt]},$$scope:{ctx:A}}}),w6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Vv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[gAt]},$$scope:{ctx:A}}}),A6=new oe({}),y6=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L852"}}),x6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),zv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[hAt]},$$scope:{ctx:A}}}),$6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Hv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[pAt]},$$scope:{ctx:A}}}),k6=new oe({}),S6=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L859"}}),P6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Jv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[uAt]},$$scope:{ctx:A}}}),B6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),sF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[_At]},$$scope:{ctx:A}}}),I6=new oe({}),q6=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L882"}}),j6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),iF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[bAt]},$$scope:{ctx:A}}}),D6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),hF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[vAt]},$$scope:{ctx:A}}}),G6=new oe({}),O6=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L866"}}),X6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),uF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[FAt]},$$scope:{ctx:A}}}),z6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[TAt]},$$scope:{ctx:A}}}),Q6=new oe({}),W6=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L873"}}),U6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[MAt]},$$scope:{ctx:A}}}),J6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),SF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[EAt]},$$scope:{ctx:A}}}),K6=new oe({}),Z6=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L891"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),PF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[CAt]},$$scope:{ctx:A}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),DF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[wAt]},$$scope:{ctx:A}}}),ty=new oe({}),ay=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L898"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),OF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[AAt]},$$scope:{ctx:A}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),WF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[yAt]},$$scope:{ctx:A}}}),iy=new oe({}),dy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L845"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),UF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[LAt]},$$scope:{ctx:A}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[xAt]},$$scope:{ctx:A}}}),hy=new oe({}),py=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L820"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),o0=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[$At]},$$scope:{ctx:A}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[kAt]},$$scope:{ctx:A}}}),vy=new oe({}),Fy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L827"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),s0=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[SAt]},$$scope:{ctx:A}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),m0=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[RAt]},$$scope:{ctx:A}}}),Cy=new oe({}),wy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L836"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),h0=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[PAt]},$$scope:{ctx:A}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),_0=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[BAt]},$$scope:{ctx:A}}}),xy=new oe({}),$y=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L384"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),v0=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[IAt]},$$scope:{ctx:A}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[qAt]},$$scope:{ctx:A}}}),Py=new oe({}),By=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L391"}}),qy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),gT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[NAt]},$$scope:{ctx:A}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[jAt]},$$scope:{ctx:A}}}),jy=new oe({}),Dy=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[DAt]},$$scope:{ctx:A}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[GAt]},$$scope:{ctx:A}}}),Xy=new oe({}),zy=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),e7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[OAt]},$$scope:{ctx:A}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),a7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[VAt]},$$scope:{ctx:A}}}),Uy=new oe({}),Jy=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L429"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),s7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[XAt]},$$scope:{ctx:A}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),y7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[zAt]},$$scope:{ctx:A}}}),eL=new oe({}),oL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L436"}}),tL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),x7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[QAt]},$$scope:{ctx:A}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),D7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[WAt]},$$scope:{ctx:A}}}),nL=new oe({}),sL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L445"}}),iL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),O7=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[HAt]},$$scope:{ctx:A}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),pM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[UAt]},$$scope:{ctx:A}}}),cL=new oe({}),fL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L481"}}),gL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[JAt]},$$scope:{ctx:A}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),BM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[YAt]},$$scope:{ctx:A}}}),pL=new oe({}),uL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L488"}}),bL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),qM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[KAt]},$$scope:{ctx:A}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),DM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ZAt]},$$scope:{ctx:A}}}),TL=new oe({}),ML=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L461"}}),CL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),OM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[e6t]},$$scope:{ctx:A}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[o6t]},$$scope:{ctx:A}}}),AL=new oe({}),yL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),xL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[r6t]},$$scope:{ctx:A}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[t6t]},$$scope:{ctx:A}}}),kL=new oe({}),SL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),PL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[a6t]},$$scope:{ctx:A}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[n6t]},$$scope:{ctx:A}}}),IL=new oe({}),qL=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L422"}}),jL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),N4=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[s6t]},$$scope:{ctx:A}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),D4=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[l6t]},$$scope:{ctx:A}}}),GL=new oe({}),OL=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L497"}}),XL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),O4=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[i6t]},$$scope:{ctx:A}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),X4=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[d6t]},$$scope:{ctx:A}}}),QL=new oe({}),WL=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),UL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[c6t]},$$scope:{ctx:A}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),vE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[f6t]},$$scope:{ctx:A}}}),YL=new oe({}),KL=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),TE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[m6t]},$$scope:{ctx:A}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),SE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[g6t]},$$scope:{ctx:A}}}),rx=new oe({}),tx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),PE=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[h6t]},$$scope:{ctx:A}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),WE=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[p6t]},$$scope:{ctx:A}}}),lx=new oe({}),ix=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),UE=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[u6t]},$$scope:{ctx:A}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[_6t]},$$scope:{ctx:A}}}),mx=new oe({}),gx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[b6t]},$$scope:{ctx:A}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[v6t]},$$scope:{ctx:A}}}),_x=new oe({}),bx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[F6t]},$$scope:{ctx:A}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[T6t]},$$scope:{ctx:A}}}),Mx=new oe({}),Ex=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[M6t]},$$scope:{ctx:A}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[E6t]},$$scope:{ctx:A}}}),yx=new oe({}),Lx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),$x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Q5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[C6t]},$$scope:{ctx:A}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),oC=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[w6t]},$$scope:{ctx:A}}}),Sx=new oe({}),Rx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),tC=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[A6t]},$$scope:{ctx:A}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[y6t]},$$scope:{ctx:A}}}),qx=new oe({}),Nx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),hC=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[L6t]},$$scope:{ctx:A}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[x6t]},$$scope:{ctx:A}}}),Ox=new oe({}),Vx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),bC=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[$6t]},$$scope:{ctx:A}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),TC=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[k6t]},$$scope:{ctx:A}}}),Hx=new oe({}),Ux=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),EC=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[S6t]},$$scope:{ctx:A}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[R6t]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ii=o("Auto Classes"),gf=l(),et=a("p"),di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=a("code"),Xw=o("from_pretrained()"),hf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ne=l(),Xe=a("p"),fi=o("Instantiating one of "),An=a("a"),zw=o("AutoConfig"),yn=o(", "),Ln=a("a"),Qw=o("AutoModel"),mi=o(`, and
`),xn=a("a"),Ww=o("AutoTokenizer"),gi=o(" will directly create a class of the relevant architecture. For instance"),pf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),m$=o("will create a model that is an instance of "),hi=a("a"),g$=o("BertModel"),h$=o("."),Eo=l(),Ea=a("p"),p$=o("There is one class of "),uf=a("code"),u$=o("AutoModel"),Vje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),SBe=l(),pi=a("h2"),_f=a("a"),YZ=a("span"),F(Hw.$$.fragment),Xje=l(),KZ=a("span"),zje=o("Extending the Auto Classes"),RBe=l(),$n=a("p"),Qje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ZZ=a("code"),Wje=o("NewModel"),Hje=o(", make sure you have a "),eee=a("code"),Uje=o("NewModelConfig"),Jje=o(` then you can add those to the auto
classes like this:`),PBe=l(),F(Uw.$$.fragment),BBe=l(),_$=a("p"),Yje=o("You will then be able to use the auto classes like you would usually do!"),IBe=l(),F(bf.$$.fragment),qBe=l(),ui=a("h2"),vf=a("a"),oee=a("span"),F(Jw.$$.fragment),Kje=l(),ree=a("span"),Zje=o("AutoConfig"),NBe=l(),Co=a("div"),F(Yw.$$.fragment),eDe=l(),Kw=a("p"),oDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),b$=a("a"),rDe=o("from_pretrained()"),tDe=o(" class method."),aDe=l(),Zw=a("p"),nDe=o("This class cannot be instantiated directly using "),tee=a("code"),sDe=o("__init__()"),lDe=o(" (throws an error)."),iDe=l(),Er=a("div"),F(eA.$$.fragment),dDe=l(),aee=a("p"),cDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),fDe=l(),_i=a("p"),mDe=o("The configuration class to instantiate is selected based on the "),nee=a("code"),gDe=o("model_type"),hDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),see=a("code"),pDe=o("pretrained_model_name_or_path"),uDe=o(":"),_De=l(),y=a("ul"),Ff=a("li"),lee=a("strong"),bDe=o("albert"),vDe=o(" \u2014 "),v$=a("a"),FDe=o("AlbertConfig"),TDe=o(" (ALBERT model)"),MDe=l(),Tf=a("li"),iee=a("strong"),EDe=o("bart"),CDe=o(" \u2014 "),F$=a("a"),wDe=o("BartConfig"),ADe=o(" (BART model)"),yDe=l(),Mf=a("li"),dee=a("strong"),LDe=o("beit"),xDe=o(" \u2014 "),T$=a("a"),$De=o("BeitConfig"),kDe=o(" (BEiT model)"),SDe=l(),Ef=a("li"),cee=a("strong"),RDe=o("bert"),PDe=o(" \u2014 "),M$=a("a"),BDe=o("BertConfig"),IDe=o(" (BERT model)"),qDe=l(),Cf=a("li"),fee=a("strong"),NDe=o("bert-generation"),jDe=o(" \u2014 "),E$=a("a"),DDe=o("BertGenerationConfig"),GDe=o(" (Bert Generation model)"),ODe=l(),wf=a("li"),mee=a("strong"),VDe=o("big_bird"),XDe=o(" \u2014 "),C$=a("a"),zDe=o("BigBirdConfig"),QDe=o(" (BigBird model)"),WDe=l(),Af=a("li"),gee=a("strong"),HDe=o("bigbird_pegasus"),UDe=o(" \u2014 "),w$=a("a"),JDe=o("BigBirdPegasusConfig"),YDe=o(" (BigBirdPegasus model)"),KDe=l(),yf=a("li"),hee=a("strong"),ZDe=o("blenderbot"),eGe=o(" \u2014 "),A$=a("a"),oGe=o("BlenderbotConfig"),rGe=o(" (Blenderbot model)"),tGe=l(),Lf=a("li"),pee=a("strong"),aGe=o("blenderbot-small"),nGe=o(" \u2014 "),y$=a("a"),sGe=o("BlenderbotSmallConfig"),lGe=o(" (BlenderbotSmall model)"),iGe=l(),xf=a("li"),uee=a("strong"),dGe=o("camembert"),cGe=o(" \u2014 "),L$=a("a"),fGe=o("CamembertConfig"),mGe=o(" (CamemBERT model)"),gGe=l(),$f=a("li"),_ee=a("strong"),hGe=o("canine"),pGe=o(" \u2014 "),x$=a("a"),uGe=o("CanineConfig"),_Ge=o(" (Canine model)"),bGe=l(),kf=a("li"),bee=a("strong"),vGe=o("clip"),FGe=o(" \u2014 "),$$=a("a"),TGe=o("CLIPConfig"),MGe=o(" (CLIP model)"),EGe=l(),Sf=a("li"),vee=a("strong"),CGe=o("convbert"),wGe=o(" \u2014 "),k$=a("a"),AGe=o("ConvBertConfig"),yGe=o(" (ConvBERT model)"),LGe=l(),Rf=a("li"),Fee=a("strong"),xGe=o("convnext"),$Ge=o(" \u2014 "),S$=a("a"),kGe=o("ConvNextConfig"),SGe=o(" (ConvNext model)"),RGe=l(),Pf=a("li"),Tee=a("strong"),PGe=o("ctrl"),BGe=o(" \u2014 "),R$=a("a"),IGe=o("CTRLConfig"),qGe=o(" (CTRL model)"),NGe=l(),Bf=a("li"),Mee=a("strong"),jGe=o("data2vec-audio"),DGe=o(" \u2014 "),P$=a("a"),GGe=o("Data2VecAudioConfig"),OGe=o(" (Data2VecAudio model)"),VGe=l(),If=a("li"),Eee=a("strong"),XGe=o("data2vec-text"),zGe=o(" \u2014 "),B$=a("a"),QGe=o("Data2VecTextConfig"),WGe=o(" (Data2VecText model)"),HGe=l(),qf=a("li"),Cee=a("strong"),UGe=o("data2vec-vision"),JGe=o(" \u2014 "),I$=a("a"),YGe=o("Data2VecVisionConfig"),KGe=o(" (Data2VecVision model)"),ZGe=l(),Nf=a("li"),wee=a("strong"),eOe=o("deberta"),oOe=o(" \u2014 "),q$=a("a"),rOe=o("DebertaConfig"),tOe=o(" (DeBERTa model)"),aOe=l(),jf=a("li"),Aee=a("strong"),nOe=o("deberta-v2"),sOe=o(" \u2014 "),N$=a("a"),lOe=o("DebertaV2Config"),iOe=o(" (DeBERTa-v2 model)"),dOe=l(),Df=a("li"),yee=a("strong"),cOe=o("decision_transformer"),fOe=o(" \u2014 "),j$=a("a"),mOe=o("DecisionTransformerConfig"),gOe=o(" (Decision Transformer model)"),hOe=l(),Gf=a("li"),Lee=a("strong"),pOe=o("deit"),uOe=o(" \u2014 "),D$=a("a"),_Oe=o("DeiTConfig"),bOe=o(" (DeiT model)"),vOe=l(),Of=a("li"),xee=a("strong"),FOe=o("detr"),TOe=o(" \u2014 "),G$=a("a"),MOe=o("DetrConfig"),EOe=o(" (DETR model)"),COe=l(),Vf=a("li"),$ee=a("strong"),wOe=o("distilbert"),AOe=o(" \u2014 "),O$=a("a"),yOe=o("DistilBertConfig"),LOe=o(" (DistilBERT model)"),xOe=l(),Xf=a("li"),kee=a("strong"),$Oe=o("dpr"),kOe=o(" \u2014 "),V$=a("a"),SOe=o("DPRConfig"),ROe=o(" (DPR model)"),POe=l(),zf=a("li"),See=a("strong"),BOe=o("dpt"),IOe=o(" \u2014 "),X$=a("a"),qOe=o("DPTConfig"),NOe=o(" (DPT model)"),jOe=l(),Qf=a("li"),Ree=a("strong"),DOe=o("electra"),GOe=o(" \u2014 "),z$=a("a"),OOe=o("ElectraConfig"),VOe=o(" (ELECTRA model)"),XOe=l(),Wf=a("li"),Pee=a("strong"),zOe=o("encoder-decoder"),QOe=o(" \u2014 "),Q$=a("a"),WOe=o("EncoderDecoderConfig"),HOe=o(" (Encoder decoder model)"),UOe=l(),Hf=a("li"),Bee=a("strong"),JOe=o("flaubert"),YOe=o(" \u2014 "),W$=a("a"),KOe=o("FlaubertConfig"),ZOe=o(" (FlauBERT model)"),eVe=l(),Uf=a("li"),Iee=a("strong"),oVe=o("fnet"),rVe=o(" \u2014 "),H$=a("a"),tVe=o("FNetConfig"),aVe=o(" (FNet model)"),nVe=l(),Jf=a("li"),qee=a("strong"),sVe=o("fsmt"),lVe=o(" \u2014 "),U$=a("a"),iVe=o("FSMTConfig"),dVe=o(" (FairSeq Machine-Translation model)"),cVe=l(),Yf=a("li"),Nee=a("strong"),fVe=o("funnel"),mVe=o(" \u2014 "),J$=a("a"),gVe=o("FunnelConfig"),hVe=o(" (Funnel Transformer model)"),pVe=l(),Kf=a("li"),jee=a("strong"),uVe=o("glpn"),_Ve=o(" \u2014 "),Y$=a("a"),bVe=o("GLPNConfig"),vVe=o(" (GLPN model)"),FVe=l(),Zf=a("li"),Dee=a("strong"),TVe=o("gpt2"),MVe=o(" \u2014 "),K$=a("a"),EVe=o("GPT2Config"),CVe=o(" (OpenAI GPT-2 model)"),wVe=l(),em=a("li"),Gee=a("strong"),AVe=o("gpt_neo"),yVe=o(" \u2014 "),Z$=a("a"),LVe=o("GPTNeoConfig"),xVe=o(" (GPT Neo model)"),$Ve=l(),om=a("li"),Oee=a("strong"),kVe=o("gptj"),SVe=o(" \u2014 "),ek=a("a"),RVe=o("GPTJConfig"),PVe=o(" (GPT-J model)"),BVe=l(),rm=a("li"),Vee=a("strong"),IVe=o("hubert"),qVe=o(" \u2014 "),ok=a("a"),NVe=o("HubertConfig"),jVe=o(" (Hubert model)"),DVe=l(),tm=a("li"),Xee=a("strong"),GVe=o("ibert"),OVe=o(" \u2014 "),rk=a("a"),VVe=o("IBertConfig"),XVe=o(" (I-BERT model)"),zVe=l(),am=a("li"),zee=a("strong"),QVe=o("imagegpt"),WVe=o(" \u2014 "),tk=a("a"),HVe=o("ImageGPTConfig"),UVe=o(" (ImageGPT model)"),JVe=l(),nm=a("li"),Qee=a("strong"),YVe=o("layoutlm"),KVe=o(" \u2014 "),ak=a("a"),ZVe=o("LayoutLMConfig"),eXe=o(" (LayoutLM model)"),oXe=l(),sm=a("li"),Wee=a("strong"),rXe=o("layoutlmv2"),tXe=o(" \u2014 "),nk=a("a"),aXe=o("LayoutLMv2Config"),nXe=o(" (LayoutLMv2 model)"),sXe=l(),lm=a("li"),Hee=a("strong"),lXe=o("led"),iXe=o(" \u2014 "),sk=a("a"),dXe=o("LEDConfig"),cXe=o(" (LED model)"),fXe=l(),im=a("li"),Uee=a("strong"),mXe=o("longformer"),gXe=o(" \u2014 "),lk=a("a"),hXe=o("LongformerConfig"),pXe=o(" (Longformer model)"),uXe=l(),dm=a("li"),Jee=a("strong"),_Xe=o("luke"),bXe=o(" \u2014 "),ik=a("a"),vXe=o("LukeConfig"),FXe=o(" (LUKE model)"),TXe=l(),cm=a("li"),Yee=a("strong"),MXe=o("lxmert"),EXe=o(" \u2014 "),dk=a("a"),CXe=o("LxmertConfig"),wXe=o(" (LXMERT model)"),AXe=l(),fm=a("li"),Kee=a("strong"),yXe=o("m2m_100"),LXe=o(" \u2014 "),ck=a("a"),xXe=o("M2M100Config"),$Xe=o(" (M2M100 model)"),kXe=l(),mm=a("li"),Zee=a("strong"),SXe=o("marian"),RXe=o(" \u2014 "),fk=a("a"),PXe=o("MarianConfig"),BXe=o(" (Marian model)"),IXe=l(),gm=a("li"),eoe=a("strong"),qXe=o("maskformer"),NXe=o(" \u2014 "),mk=a("a"),jXe=o("MaskFormerConfig"),DXe=o(" (MaskFormer model)"),GXe=l(),hm=a("li"),ooe=a("strong"),OXe=o("mbart"),VXe=o(" \u2014 "),gk=a("a"),XXe=o("MBartConfig"),zXe=o(" (mBART model)"),QXe=l(),pm=a("li"),roe=a("strong"),WXe=o("megatron-bert"),HXe=o(" \u2014 "),hk=a("a"),UXe=o("MegatronBertConfig"),JXe=o(" (MegatronBert model)"),YXe=l(),um=a("li"),toe=a("strong"),KXe=o("mobilebert"),ZXe=o(" \u2014 "),pk=a("a"),eze=o("MobileBertConfig"),oze=o(" (MobileBERT model)"),rze=l(),_m=a("li"),aoe=a("strong"),tze=o("mpnet"),aze=o(" \u2014 "),uk=a("a"),nze=o("MPNetConfig"),sze=o(" (MPNet model)"),lze=l(),bm=a("li"),noe=a("strong"),ize=o("mt5"),dze=o(" \u2014 "),_k=a("a"),cze=o("MT5Config"),fze=o(" (mT5 model)"),mze=l(),vm=a("li"),soe=a("strong"),gze=o("nystromformer"),hze=o(" \u2014 "),bk=a("a"),pze=o("NystromformerConfig"),uze=o(" (Nystromformer model)"),_ze=l(),Fm=a("li"),loe=a("strong"),bze=o("openai-gpt"),vze=o(" \u2014 "),vk=a("a"),Fze=o("OpenAIGPTConfig"),Tze=o(" (OpenAI GPT model)"),Mze=l(),Tm=a("li"),ioe=a("strong"),Eze=o("opt"),Cze=o(" \u2014 "),Fk=a("a"),wze=o("OPTConfig"),Aze=o(" (OPT model)"),yze=l(),Mm=a("li"),doe=a("strong"),Lze=o("pegasus"),xze=o(" \u2014 "),Tk=a("a"),$ze=o("PegasusConfig"),kze=o(" (Pegasus model)"),Sze=l(),Em=a("li"),coe=a("strong"),Rze=o("perceiver"),Pze=o(" \u2014 "),Mk=a("a"),Bze=o("PerceiverConfig"),Ize=o(" (Perceiver model)"),qze=l(),Cm=a("li"),foe=a("strong"),Nze=o("plbart"),jze=o(" \u2014 "),Ek=a("a"),Dze=o("PLBartConfig"),Gze=o(" (PLBart model)"),Oze=l(),wm=a("li"),moe=a("strong"),Vze=o("poolformer"),Xze=o(" \u2014 "),Ck=a("a"),zze=o("PoolFormerConfig"),Qze=o(" (PoolFormer model)"),Wze=l(),Am=a("li"),goe=a("strong"),Hze=o("prophetnet"),Uze=o(" \u2014 "),wk=a("a"),Jze=o("ProphetNetConfig"),Yze=o(" (ProphetNet model)"),Kze=l(),ym=a("li"),hoe=a("strong"),Zze=o("qdqbert"),eQe=o(" \u2014 "),Ak=a("a"),oQe=o("QDQBertConfig"),rQe=o(" (QDQBert model)"),tQe=l(),Lm=a("li"),poe=a("strong"),aQe=o("rag"),nQe=o(" \u2014 "),yk=a("a"),sQe=o("RagConfig"),lQe=o(" (RAG model)"),iQe=l(),xm=a("li"),uoe=a("strong"),dQe=o("realm"),cQe=o(" \u2014 "),Lk=a("a"),fQe=o("RealmConfig"),mQe=o(" (Realm model)"),gQe=l(),$m=a("li"),_oe=a("strong"),hQe=o("reformer"),pQe=o(" \u2014 "),xk=a("a"),uQe=o("ReformerConfig"),_Qe=o(" (Reformer model)"),bQe=l(),km=a("li"),boe=a("strong"),vQe=o("regnet"),FQe=o(" \u2014 "),$k=a("a"),TQe=o("RegNetConfig"),MQe=o(" (RegNet model)"),EQe=l(),Sm=a("li"),voe=a("strong"),CQe=o("rembert"),wQe=o(" \u2014 "),kk=a("a"),AQe=o("RemBertConfig"),yQe=o(" (RemBERT model)"),LQe=l(),Rm=a("li"),Foe=a("strong"),xQe=o("resnet"),$Qe=o(" \u2014 "),Sk=a("a"),kQe=o("ResNetConfig"),SQe=o(" (ResNet model)"),RQe=l(),Pm=a("li"),Toe=a("strong"),PQe=o("retribert"),BQe=o(" \u2014 "),Rk=a("a"),IQe=o("RetriBertConfig"),qQe=o(" (RetriBERT model)"),NQe=l(),Bm=a("li"),Moe=a("strong"),jQe=o("roberta"),DQe=o(" \u2014 "),Pk=a("a"),GQe=o("RobertaConfig"),OQe=o(" (RoBERTa model)"),VQe=l(),Im=a("li"),Eoe=a("strong"),XQe=o("roformer"),zQe=o(" \u2014 "),Bk=a("a"),QQe=o("RoFormerConfig"),WQe=o(" (RoFormer model)"),HQe=l(),qm=a("li"),Coe=a("strong"),UQe=o("segformer"),JQe=o(" \u2014 "),Ik=a("a"),YQe=o("SegformerConfig"),KQe=o(" (SegFormer model)"),ZQe=l(),Nm=a("li"),woe=a("strong"),eWe=o("sew"),oWe=o(" \u2014 "),qk=a("a"),rWe=o("SEWConfig"),tWe=o(" (SEW model)"),aWe=l(),jm=a("li"),Aoe=a("strong"),nWe=o("sew-d"),sWe=o(" \u2014 "),Nk=a("a"),lWe=o("SEWDConfig"),iWe=o(" (SEW-D model)"),dWe=l(),Dm=a("li"),yoe=a("strong"),cWe=o("speech-encoder-decoder"),fWe=o(" \u2014 "),jk=a("a"),mWe=o("SpeechEncoderDecoderConfig"),gWe=o(" (Speech Encoder decoder model)"),hWe=l(),Gm=a("li"),Loe=a("strong"),pWe=o("speech_to_text"),uWe=o(" \u2014 "),Dk=a("a"),_We=o("Speech2TextConfig"),bWe=o(" (Speech2Text model)"),vWe=l(),Om=a("li"),xoe=a("strong"),FWe=o("speech_to_text_2"),TWe=o(" \u2014 "),Gk=a("a"),MWe=o("Speech2Text2Config"),EWe=o(" (Speech2Text2 model)"),CWe=l(),Vm=a("li"),$oe=a("strong"),wWe=o("splinter"),AWe=o(" \u2014 "),Ok=a("a"),yWe=o("SplinterConfig"),LWe=o(" (Splinter model)"),xWe=l(),Xm=a("li"),koe=a("strong"),$We=o("squeezebert"),kWe=o(" \u2014 "),Vk=a("a"),SWe=o("SqueezeBertConfig"),RWe=o(" (SqueezeBERT model)"),PWe=l(),zm=a("li"),Soe=a("strong"),BWe=o("swin"),IWe=o(" \u2014 "),Xk=a("a"),qWe=o("SwinConfig"),NWe=o(" (Swin model)"),jWe=l(),Qm=a("li"),Roe=a("strong"),DWe=o("t5"),GWe=o(" \u2014 "),zk=a("a"),OWe=o("T5Config"),VWe=o(" (T5 model)"),XWe=l(),Wm=a("li"),Poe=a("strong"),zWe=o("tapas"),QWe=o(" \u2014 "),Qk=a("a"),WWe=o("TapasConfig"),HWe=o(" (TAPAS model)"),UWe=l(),Hm=a("li"),Boe=a("strong"),JWe=o("tapex"),YWe=o(" \u2014 "),Wk=a("a"),KWe=o("BartConfig"),ZWe=o(" (TAPEX model)"),eHe=l(),Um=a("li"),Ioe=a("strong"),oHe=o("transfo-xl"),rHe=o(" \u2014 "),Hk=a("a"),tHe=o("TransfoXLConfig"),aHe=o(" (Transformer-XL model)"),nHe=l(),Jm=a("li"),qoe=a("strong"),sHe=o("trocr"),lHe=o(" \u2014 "),Uk=a("a"),iHe=o("TrOCRConfig"),dHe=o(" (TrOCR model)"),cHe=l(),Ym=a("li"),Noe=a("strong"),fHe=o("unispeech"),mHe=o(" \u2014 "),Jk=a("a"),gHe=o("UniSpeechConfig"),hHe=o(" (UniSpeech model)"),pHe=l(),Km=a("li"),joe=a("strong"),uHe=o("unispeech-sat"),_He=o(" \u2014 "),Yk=a("a"),bHe=o("UniSpeechSatConfig"),vHe=o(" (UniSpeechSat model)"),FHe=l(),Zm=a("li"),Doe=a("strong"),THe=o("van"),MHe=o(" \u2014 "),Kk=a("a"),EHe=o("VanConfig"),CHe=o(" (VAN model)"),wHe=l(),eg=a("li"),Goe=a("strong"),AHe=o("vilt"),yHe=o(" \u2014 "),Zk=a("a"),LHe=o("ViltConfig"),xHe=o(" (ViLT model)"),$He=l(),og=a("li"),Ooe=a("strong"),kHe=o("vision-encoder-decoder"),SHe=o(" \u2014 "),eS=a("a"),RHe=o("VisionEncoderDecoderConfig"),PHe=o(" (Vision Encoder decoder model)"),BHe=l(),rg=a("li"),Voe=a("strong"),IHe=o("vision-text-dual-encoder"),qHe=o(" \u2014 "),oS=a("a"),NHe=o("VisionTextDualEncoderConfig"),jHe=o(" (VisionTextDualEncoder model)"),DHe=l(),tg=a("li"),Xoe=a("strong"),GHe=o("visual_bert"),OHe=o(" \u2014 "),rS=a("a"),VHe=o("VisualBertConfig"),XHe=o(" (VisualBert model)"),zHe=l(),ag=a("li"),zoe=a("strong"),QHe=o("vit"),WHe=o(" \u2014 "),tS=a("a"),HHe=o("ViTConfig"),UHe=o(" (ViT model)"),JHe=l(),ng=a("li"),Qoe=a("strong"),YHe=o("vit_mae"),KHe=o(" \u2014 "),aS=a("a"),ZHe=o("ViTMAEConfig"),eUe=o(" (ViTMAE model)"),oUe=l(),sg=a("li"),Woe=a("strong"),rUe=o("wav2vec2"),tUe=o(" \u2014 "),nS=a("a"),aUe=o("Wav2Vec2Config"),nUe=o(" (Wav2Vec2 model)"),sUe=l(),lg=a("li"),Hoe=a("strong"),lUe=o("wavlm"),iUe=o(" \u2014 "),sS=a("a"),dUe=o("WavLMConfig"),cUe=o(" (WavLM model)"),fUe=l(),ig=a("li"),Uoe=a("strong"),mUe=o("xglm"),gUe=o(" \u2014 "),lS=a("a"),hUe=o("XGLMConfig"),pUe=o(" (XGLM model)"),uUe=l(),dg=a("li"),Joe=a("strong"),_Ue=o("xlm"),bUe=o(" \u2014 "),iS=a("a"),vUe=o("XLMConfig"),FUe=o(" (XLM model)"),TUe=l(),cg=a("li"),Yoe=a("strong"),MUe=o("xlm-prophetnet"),EUe=o(" \u2014 "),dS=a("a"),CUe=o("XLMProphetNetConfig"),wUe=o(" (XLMProphetNet model)"),AUe=l(),fg=a("li"),Koe=a("strong"),yUe=o("xlm-roberta"),LUe=o(" \u2014 "),cS=a("a"),xUe=o("XLMRobertaConfig"),$Ue=o(" (XLM-RoBERTa model)"),kUe=l(),mg=a("li"),Zoe=a("strong"),SUe=o("xlm-roberta-xl"),RUe=o(" \u2014 "),fS=a("a"),PUe=o("XLMRobertaXLConfig"),BUe=o(" (XLM-RoBERTa-XL model)"),IUe=l(),gg=a("li"),ere=a("strong"),qUe=o("xlnet"),NUe=o(" \u2014 "),mS=a("a"),jUe=o("XLNetConfig"),DUe=o(" (XLNet model)"),GUe=l(),hg=a("li"),ore=a("strong"),OUe=o("yolos"),VUe=o(" \u2014 "),gS=a("a"),XUe=o("YolosConfig"),zUe=o(" (YOLOS model)"),QUe=l(),pg=a("li"),rre=a("strong"),WUe=o("yoso"),HUe=o(" \u2014 "),hS=a("a"),UUe=o("YosoConfig"),JUe=o(" (YOSO model)"),YUe=l(),F(ug.$$.fragment),KUe=l(),_g=a("div"),F(oA.$$.fragment),ZUe=l(),tre=a("p"),eJe=o("Register a new configuration for this class."),jBe=l(),bi=a("h2"),bg=a("a"),are=a("span"),F(rA.$$.fragment),oJe=l(),nre=a("span"),rJe=o("AutoTokenizer"),DBe=l(),wo=a("div"),F(tA.$$.fragment),tJe=l(),aA=a("p"),aJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),pS=a("a"),nJe=o("AutoTokenizer.from_pretrained()"),sJe=o(" class method."),lJe=l(),nA=a("p"),iJe=o("This class cannot be instantiated directly using "),sre=a("code"),dJe=o("__init__()"),cJe=o(" (throws an error)."),fJe=l(),Cr=a("div"),F(sA.$$.fragment),mJe=l(),lre=a("p"),gJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),hJe=l(),Ca=a("p"),pJe=o("The tokenizer class to instantiate is selected based on the "),ire=a("code"),uJe=o("model_type"),_Je=o(` property of the config object (either
passed as an argument or loaded from `),dre=a("code"),bJe=o("pretrained_model_name_or_path"),vJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cre=a("code"),FJe=o("pretrained_model_name_or_path"),TJe=o(":"),MJe=l(),k=a("ul"),kn=a("li"),fre=a("strong"),EJe=o("albert"),CJe=o(" \u2014 "),uS=a("a"),wJe=o("AlbertTokenizer"),AJe=o(" or "),_S=a("a"),yJe=o("AlbertTokenizerFast"),LJe=o(" (ALBERT model)"),xJe=l(),Sn=a("li"),mre=a("strong"),$Je=o("bart"),kJe=o(" \u2014 "),bS=a("a"),SJe=o("BartTokenizer"),RJe=o(" or "),vS=a("a"),PJe=o("BartTokenizerFast"),BJe=o(" (BART model)"),IJe=l(),Rn=a("li"),gre=a("strong"),qJe=o("barthez"),NJe=o(" \u2014 "),FS=a("a"),jJe=o("BarthezTokenizer"),DJe=o(" or "),TS=a("a"),GJe=o("BarthezTokenizerFast"),OJe=o(" (BARThez model)"),VJe=l(),vg=a("li"),hre=a("strong"),XJe=o("bartpho"),zJe=o(" \u2014 "),MS=a("a"),QJe=o("BartphoTokenizer"),WJe=o(" (BARTpho model)"),HJe=l(),Pn=a("li"),pre=a("strong"),UJe=o("bert"),JJe=o(" \u2014 "),ES=a("a"),YJe=o("BertTokenizer"),KJe=o(" or "),CS=a("a"),ZJe=o("BertTokenizerFast"),eYe=o(" (BERT model)"),oYe=l(),Fg=a("li"),ure=a("strong"),rYe=o("bert-generation"),tYe=o(" \u2014 "),wS=a("a"),aYe=o("BertGenerationTokenizer"),nYe=o(" (Bert Generation model)"),sYe=l(),Tg=a("li"),_re=a("strong"),lYe=o("bert-japanese"),iYe=o(" \u2014 "),AS=a("a"),dYe=o("BertJapaneseTokenizer"),cYe=o(" (BertJapanese model)"),fYe=l(),Mg=a("li"),bre=a("strong"),mYe=o("bertweet"),gYe=o(" \u2014 "),yS=a("a"),hYe=o("BertweetTokenizer"),pYe=o(" (Bertweet model)"),uYe=l(),Bn=a("li"),vre=a("strong"),_Ye=o("big_bird"),bYe=o(" \u2014 "),LS=a("a"),vYe=o("BigBirdTokenizer"),FYe=o(" or "),xS=a("a"),TYe=o("BigBirdTokenizerFast"),MYe=o(" (BigBird model)"),EYe=l(),In=a("li"),Fre=a("strong"),CYe=o("bigbird_pegasus"),wYe=o(" \u2014 "),$S=a("a"),AYe=o("PegasusTokenizer"),yYe=o(" or "),kS=a("a"),LYe=o("PegasusTokenizerFast"),xYe=o(" (BigBirdPegasus model)"),$Ye=l(),qn=a("li"),Tre=a("strong"),kYe=o("blenderbot"),SYe=o(" \u2014 "),SS=a("a"),RYe=o("BlenderbotTokenizer"),PYe=o(" or "),RS=a("a"),BYe=o("BlenderbotTokenizerFast"),IYe=o(" (Blenderbot model)"),qYe=l(),Eg=a("li"),Mre=a("strong"),NYe=o("blenderbot-small"),jYe=o(" \u2014 "),PS=a("a"),DYe=o("BlenderbotSmallTokenizer"),GYe=o(" (BlenderbotSmall model)"),OYe=l(),Cg=a("li"),Ere=a("strong"),VYe=o("byt5"),XYe=o(" \u2014 "),BS=a("a"),zYe=o("ByT5Tokenizer"),QYe=o(" (ByT5 model)"),WYe=l(),Nn=a("li"),Cre=a("strong"),HYe=o("camembert"),UYe=o(" \u2014 "),IS=a("a"),JYe=o("CamembertTokenizer"),YYe=o(" or "),qS=a("a"),KYe=o("CamembertTokenizerFast"),ZYe=o(" (CamemBERT model)"),eKe=l(),wg=a("li"),wre=a("strong"),oKe=o("canine"),rKe=o(" \u2014 "),NS=a("a"),tKe=o("CanineTokenizer"),aKe=o(" (Canine model)"),nKe=l(),jn=a("li"),Are=a("strong"),sKe=o("clip"),lKe=o(" \u2014 "),jS=a("a"),iKe=o("CLIPTokenizer"),dKe=o(" or "),DS=a("a"),cKe=o("CLIPTokenizerFast"),fKe=o(" (CLIP model)"),mKe=l(),Dn=a("li"),yre=a("strong"),gKe=o("convbert"),hKe=o(" \u2014 "),GS=a("a"),pKe=o("ConvBertTokenizer"),uKe=o(" or "),OS=a("a"),_Ke=o("ConvBertTokenizerFast"),bKe=o(" (ConvBERT model)"),vKe=l(),Gn=a("li"),Lre=a("strong"),FKe=o("cpm"),TKe=o(" \u2014 "),VS=a("a"),MKe=o("CpmTokenizer"),EKe=o(" or "),XS=a("a"),CKe=o("CpmTokenizerFast"),wKe=o(" (CPM model)"),AKe=l(),Ag=a("li"),xre=a("strong"),yKe=o("ctrl"),LKe=o(" \u2014 "),zS=a("a"),xKe=o("CTRLTokenizer"),$Ke=o(" (CTRL model)"),kKe=l(),On=a("li"),$re=a("strong"),SKe=o("data2vec-text"),RKe=o(" \u2014 "),QS=a("a"),PKe=o("RobertaTokenizer"),BKe=o(" or "),WS=a("a"),IKe=o("RobertaTokenizerFast"),qKe=o(" (Data2VecText model)"),NKe=l(),Vn=a("li"),kre=a("strong"),jKe=o("deberta"),DKe=o(" \u2014 "),HS=a("a"),GKe=o("DebertaTokenizer"),OKe=o(" or "),US=a("a"),VKe=o("DebertaTokenizerFast"),XKe=o(" (DeBERTa model)"),zKe=l(),Xn=a("li"),Sre=a("strong"),QKe=o("deberta-v2"),WKe=o(" \u2014 "),JS=a("a"),HKe=o("DebertaV2Tokenizer"),UKe=o(" or "),YS=a("a"),JKe=o("DebertaV2TokenizerFast"),YKe=o(" (DeBERTa-v2 model)"),KKe=l(),zn=a("li"),Rre=a("strong"),ZKe=o("distilbert"),eZe=o(" \u2014 "),KS=a("a"),oZe=o("DistilBertTokenizer"),rZe=o(" or "),ZS=a("a"),tZe=o("DistilBertTokenizerFast"),aZe=o(" (DistilBERT model)"),nZe=l(),Qn=a("li"),Pre=a("strong"),sZe=o("dpr"),lZe=o(" \u2014 "),eR=a("a"),iZe=o("DPRQuestionEncoderTokenizer"),dZe=o(" or "),oR=a("a"),cZe=o("DPRQuestionEncoderTokenizerFast"),fZe=o(" (DPR model)"),mZe=l(),Wn=a("li"),Bre=a("strong"),gZe=o("electra"),hZe=o(" \u2014 "),rR=a("a"),pZe=o("ElectraTokenizer"),uZe=o(" or "),tR=a("a"),_Ze=o("ElectraTokenizerFast"),bZe=o(" (ELECTRA model)"),vZe=l(),yg=a("li"),Ire=a("strong"),FZe=o("flaubert"),TZe=o(" \u2014 "),aR=a("a"),MZe=o("FlaubertTokenizer"),EZe=o(" (FlauBERT model)"),CZe=l(),Hn=a("li"),qre=a("strong"),wZe=o("fnet"),AZe=o(" \u2014 "),nR=a("a"),yZe=o("FNetTokenizer"),LZe=o(" or "),sR=a("a"),xZe=o("FNetTokenizerFast"),$Ze=o(" (FNet model)"),kZe=l(),Lg=a("li"),Nre=a("strong"),SZe=o("fsmt"),RZe=o(" \u2014 "),lR=a("a"),PZe=o("FSMTTokenizer"),BZe=o(" (FairSeq Machine-Translation model)"),IZe=l(),Un=a("li"),jre=a("strong"),qZe=o("funnel"),NZe=o(" \u2014 "),iR=a("a"),jZe=o("FunnelTokenizer"),DZe=o(" or "),dR=a("a"),GZe=o("FunnelTokenizerFast"),OZe=o(" (Funnel Transformer model)"),VZe=l(),Jn=a("li"),Dre=a("strong"),XZe=o("gpt2"),zZe=o(" \u2014 "),cR=a("a"),QZe=o("GPT2Tokenizer"),WZe=o(" or "),fR=a("a"),HZe=o("GPT2TokenizerFast"),UZe=o(" (OpenAI GPT-2 model)"),JZe=l(),Yn=a("li"),Gre=a("strong"),YZe=o("gpt_neo"),KZe=o(" \u2014 "),mR=a("a"),ZZe=o("GPT2Tokenizer"),eeo=o(" or "),gR=a("a"),oeo=o("GPT2TokenizerFast"),reo=o(" (GPT Neo model)"),teo=l(),Kn=a("li"),Ore=a("strong"),aeo=o("gptj"),neo=o(" \u2014 "),hR=a("a"),seo=o("GPT2Tokenizer"),leo=o(" or "),pR=a("a"),ieo=o("GPT2TokenizerFast"),deo=o(" (GPT-J model)"),ceo=l(),Zn=a("li"),Vre=a("strong"),feo=o("herbert"),meo=o(" \u2014 "),uR=a("a"),geo=o("HerbertTokenizer"),heo=o(" or "),_R=a("a"),peo=o("HerbertTokenizerFast"),ueo=o(" (HerBERT model)"),_eo=l(),xg=a("li"),Xre=a("strong"),beo=o("hubert"),veo=o(" \u2014 "),bR=a("a"),Feo=o("Wav2Vec2CTCTokenizer"),Teo=o(" (Hubert model)"),Meo=l(),es=a("li"),zre=a("strong"),Eeo=o("ibert"),Ceo=o(" \u2014 "),vR=a("a"),weo=o("RobertaTokenizer"),Aeo=o(" or "),FR=a("a"),yeo=o("RobertaTokenizerFast"),Leo=o(" (I-BERT model)"),xeo=l(),os=a("li"),Qre=a("strong"),$eo=o("layoutlm"),keo=o(" \u2014 "),TR=a("a"),Seo=o("LayoutLMTokenizer"),Reo=o(" or "),MR=a("a"),Peo=o("LayoutLMTokenizerFast"),Beo=o(" (LayoutLM model)"),Ieo=l(),rs=a("li"),Wre=a("strong"),qeo=o("layoutlmv2"),Neo=o(" \u2014 "),ER=a("a"),jeo=o("LayoutLMv2Tokenizer"),Deo=o(" or "),CR=a("a"),Geo=o("LayoutLMv2TokenizerFast"),Oeo=o(" (LayoutLMv2 model)"),Veo=l(),ts=a("li"),Hre=a("strong"),Xeo=o("layoutxlm"),zeo=o(" \u2014 "),wR=a("a"),Qeo=o("LayoutXLMTokenizer"),Weo=o(" or "),AR=a("a"),Heo=o("LayoutXLMTokenizerFast"),Ueo=o(" (LayoutXLM model)"),Jeo=l(),as=a("li"),Ure=a("strong"),Yeo=o("led"),Keo=o(" \u2014 "),yR=a("a"),Zeo=o("LEDTokenizer"),eoo=o(" or "),LR=a("a"),ooo=o("LEDTokenizerFast"),roo=o(" (LED model)"),too=l(),ns=a("li"),Jre=a("strong"),aoo=o("longformer"),noo=o(" \u2014 "),xR=a("a"),soo=o("LongformerTokenizer"),loo=o(" or "),$R=a("a"),ioo=o("LongformerTokenizerFast"),doo=o(" (Longformer model)"),coo=l(),$g=a("li"),Yre=a("strong"),foo=o("luke"),moo=o(" \u2014 "),kR=a("a"),goo=o("LukeTokenizer"),hoo=o(" (LUKE model)"),poo=l(),ss=a("li"),Kre=a("strong"),uoo=o("lxmert"),_oo=o(" \u2014 "),SR=a("a"),boo=o("LxmertTokenizer"),voo=o(" or "),RR=a("a"),Foo=o("LxmertTokenizerFast"),Too=o(" (LXMERT model)"),Moo=l(),kg=a("li"),Zre=a("strong"),Eoo=o("m2m_100"),Coo=o(" \u2014 "),PR=a("a"),woo=o("M2M100Tokenizer"),Aoo=o(" (M2M100 model)"),yoo=l(),Sg=a("li"),ete=a("strong"),Loo=o("marian"),xoo=o(" \u2014 "),BR=a("a"),$oo=o("MarianTokenizer"),koo=o(" (Marian model)"),Soo=l(),ls=a("li"),ote=a("strong"),Roo=o("mbart"),Poo=o(" \u2014 "),IR=a("a"),Boo=o("MBartTokenizer"),Ioo=o(" or "),qR=a("a"),qoo=o("MBartTokenizerFast"),Noo=o(" (mBART model)"),joo=l(),is=a("li"),rte=a("strong"),Doo=o("mbart50"),Goo=o(" \u2014 "),NR=a("a"),Ooo=o("MBart50Tokenizer"),Voo=o(" or "),jR=a("a"),Xoo=o("MBart50TokenizerFast"),zoo=o(" (mBART-50 model)"),Qoo=l(),ds=a("li"),tte=a("strong"),Woo=o("megatron-bert"),Hoo=o(" \u2014 "),DR=a("a"),Uoo=o("BertTokenizer"),Joo=o(" or "),GR=a("a"),Yoo=o("BertTokenizerFast"),Koo=o(" (MegatronBert model)"),Zoo=l(),Rg=a("li"),ate=a("strong"),ero=o("mluke"),oro=o(" \u2014 "),OR=a("a"),rro=o("MLukeTokenizer"),tro=o(" (mLUKE model)"),aro=l(),cs=a("li"),nte=a("strong"),nro=o("mobilebert"),sro=o(" \u2014 "),VR=a("a"),lro=o("MobileBertTokenizer"),iro=o(" or "),XR=a("a"),dro=o("MobileBertTokenizerFast"),cro=o(" (MobileBERT model)"),fro=l(),fs=a("li"),ste=a("strong"),mro=o("mpnet"),gro=o(" \u2014 "),zR=a("a"),hro=o("MPNetTokenizer"),pro=o(" or "),QR=a("a"),uro=o("MPNetTokenizerFast"),_ro=o(" (MPNet model)"),bro=l(),ms=a("li"),lte=a("strong"),vro=o("mt5"),Fro=o(" \u2014 "),WR=a("a"),Tro=o("MT5Tokenizer"),Mro=o(" or "),HR=a("a"),Ero=o("MT5TokenizerFast"),Cro=o(" (mT5 model)"),wro=l(),gs=a("li"),ite=a("strong"),Aro=o("nystromformer"),yro=o(" \u2014 "),UR=a("a"),Lro=o("AlbertTokenizer"),xro=o(" or "),JR=a("a"),$ro=o("AlbertTokenizerFast"),kro=o(" (Nystromformer model)"),Sro=l(),hs=a("li"),dte=a("strong"),Rro=o("openai-gpt"),Pro=o(" \u2014 "),YR=a("a"),Bro=o("OpenAIGPTTokenizer"),Iro=o(" or "),KR=a("a"),qro=o("OpenAIGPTTokenizerFast"),Nro=o(" (OpenAI GPT model)"),jro=l(),ps=a("li"),cte=a("strong"),Dro=o("opt"),Gro=o(" \u2014 "),ZR=a("a"),Oro=o("GPT2Tokenizer"),Vro=o(" or "),eP=a("a"),Xro=o("GPT2TokenizerFast"),zro=o(" (OPT model)"),Qro=l(),us=a("li"),fte=a("strong"),Wro=o("pegasus"),Hro=o(" \u2014 "),oP=a("a"),Uro=o("PegasusTokenizer"),Jro=o(" or "),rP=a("a"),Yro=o("PegasusTokenizerFast"),Kro=o(" (Pegasus model)"),Zro=l(),Pg=a("li"),mte=a("strong"),eto=o("perceiver"),oto=o(" \u2014 "),tP=a("a"),rto=o("PerceiverTokenizer"),tto=o(" (Perceiver model)"),ato=l(),Bg=a("li"),gte=a("strong"),nto=o("phobert"),sto=o(" \u2014 "),aP=a("a"),lto=o("PhobertTokenizer"),ito=o(" (PhoBERT model)"),dto=l(),Ig=a("li"),hte=a("strong"),cto=o("plbart"),fto=o(" \u2014 "),nP=a("a"),mto=o("PLBartTokenizer"),gto=o(" (PLBart model)"),hto=l(),qg=a("li"),pte=a("strong"),pto=o("prophetnet"),uto=o(" \u2014 "),sP=a("a"),_to=o("ProphetNetTokenizer"),bto=o(" (ProphetNet model)"),vto=l(),_s=a("li"),ute=a("strong"),Fto=o("qdqbert"),Tto=o(" \u2014 "),lP=a("a"),Mto=o("BertTokenizer"),Eto=o(" or "),iP=a("a"),Cto=o("BertTokenizerFast"),wto=o(" (QDQBert model)"),Ato=l(),Ng=a("li"),_te=a("strong"),yto=o("rag"),Lto=o(" \u2014 "),dP=a("a"),xto=o("RagTokenizer"),$to=o(" (RAG model)"),kto=l(),bs=a("li"),bte=a("strong"),Sto=o("realm"),Rto=o(" \u2014 "),cP=a("a"),Pto=o("RealmTokenizer"),Bto=o(" or "),fP=a("a"),Ito=o("RealmTokenizerFast"),qto=o(" (Realm model)"),Nto=l(),vs=a("li"),vte=a("strong"),jto=o("reformer"),Dto=o(" \u2014 "),mP=a("a"),Gto=o("ReformerTokenizer"),Oto=o(" or "),gP=a("a"),Vto=o("ReformerTokenizerFast"),Xto=o(" (Reformer model)"),zto=l(),Fs=a("li"),Fte=a("strong"),Qto=o("rembert"),Wto=o(" \u2014 "),hP=a("a"),Hto=o("RemBertTokenizer"),Uto=o(" or "),pP=a("a"),Jto=o("RemBertTokenizerFast"),Yto=o(" (RemBERT model)"),Kto=l(),Ts=a("li"),Tte=a("strong"),Zto=o("retribert"),eao=o(" \u2014 "),uP=a("a"),oao=o("RetriBertTokenizer"),rao=o(" or "),_P=a("a"),tao=o("RetriBertTokenizerFast"),aao=o(" (RetriBERT model)"),nao=l(),Ms=a("li"),Mte=a("strong"),sao=o("roberta"),lao=o(" \u2014 "),bP=a("a"),iao=o("RobertaTokenizer"),dao=o(" or "),vP=a("a"),cao=o("RobertaTokenizerFast"),fao=o(" (RoBERTa model)"),mao=l(),Es=a("li"),Ete=a("strong"),gao=o("roformer"),hao=o(" \u2014 "),FP=a("a"),pao=o("RoFormerTokenizer"),uao=o(" or "),TP=a("a"),_ao=o("RoFormerTokenizerFast"),bao=o(" (RoFormer model)"),vao=l(),jg=a("li"),Cte=a("strong"),Fao=o("speech_to_text"),Tao=o(" \u2014 "),MP=a("a"),Mao=o("Speech2TextTokenizer"),Eao=o(" (Speech2Text model)"),Cao=l(),Dg=a("li"),wte=a("strong"),wao=o("speech_to_text_2"),Aao=o(" \u2014 "),EP=a("a"),yao=o("Speech2Text2Tokenizer"),Lao=o(" (Speech2Text2 model)"),xao=l(),Cs=a("li"),Ate=a("strong"),$ao=o("splinter"),kao=o(" \u2014 "),CP=a("a"),Sao=o("SplinterTokenizer"),Rao=o(" or "),wP=a("a"),Pao=o("SplinterTokenizerFast"),Bao=o(" (Splinter model)"),Iao=l(),ws=a("li"),yte=a("strong"),qao=o("squeezebert"),Nao=o(" \u2014 "),AP=a("a"),jao=o("SqueezeBertTokenizer"),Dao=o(" or "),yP=a("a"),Gao=o("SqueezeBertTokenizerFast"),Oao=o(" (SqueezeBERT model)"),Vao=l(),As=a("li"),Lte=a("strong"),Xao=o("t5"),zao=o(" \u2014 "),LP=a("a"),Qao=o("T5Tokenizer"),Wao=o(" or "),xP=a("a"),Hao=o("T5TokenizerFast"),Uao=o(" (T5 model)"),Jao=l(),Gg=a("li"),xte=a("strong"),Yao=o("tapas"),Kao=o(" \u2014 "),$P=a("a"),Zao=o("TapasTokenizer"),eno=o(" (TAPAS model)"),ono=l(),Og=a("li"),$te=a("strong"),rno=o("tapex"),tno=o(" \u2014 "),kP=a("a"),ano=o("TapexTokenizer"),nno=o(" (TAPEX model)"),sno=l(),Vg=a("li"),kte=a("strong"),lno=o("transfo-xl"),ino=o(" \u2014 "),SP=a("a"),dno=o("TransfoXLTokenizer"),cno=o(" (Transformer-XL model)"),fno=l(),ys=a("li"),Ste=a("strong"),mno=o("visual_bert"),gno=o(" \u2014 "),RP=a("a"),hno=o("BertTokenizer"),pno=o(" or "),PP=a("a"),uno=o("BertTokenizerFast"),_no=o(" (VisualBert model)"),bno=l(),Xg=a("li"),Rte=a("strong"),vno=o("wav2vec2"),Fno=o(" \u2014 "),BP=a("a"),Tno=o("Wav2Vec2CTCTokenizer"),Mno=o(" (Wav2Vec2 model)"),Eno=l(),zg=a("li"),Pte=a("strong"),Cno=o("wav2vec2_phoneme"),wno=o(" \u2014 "),IP=a("a"),Ano=o("Wav2Vec2PhonemeCTCTokenizer"),yno=o(" (Wav2Vec2Phoneme model)"),Lno=l(),Ls=a("li"),Bte=a("strong"),xno=o("xglm"),$no=o(" \u2014 "),qP=a("a"),kno=o("XGLMTokenizer"),Sno=o(" or "),NP=a("a"),Rno=o("XGLMTokenizerFast"),Pno=o(" (XGLM model)"),Bno=l(),Qg=a("li"),Ite=a("strong"),Ino=o("xlm"),qno=o(" \u2014 "),jP=a("a"),Nno=o("XLMTokenizer"),jno=o(" (XLM model)"),Dno=l(),Wg=a("li"),qte=a("strong"),Gno=o("xlm-prophetnet"),Ono=o(" \u2014 "),DP=a("a"),Vno=o("XLMProphetNetTokenizer"),Xno=o(" (XLMProphetNet model)"),zno=l(),xs=a("li"),Nte=a("strong"),Qno=o("xlm-roberta"),Wno=o(" \u2014 "),GP=a("a"),Hno=o("XLMRobertaTokenizer"),Uno=o(" or "),OP=a("a"),Jno=o("XLMRobertaTokenizerFast"),Yno=o(" (XLM-RoBERTa model)"),Kno=l(),$s=a("li"),jte=a("strong"),Zno=o("xlm-roberta-xl"),eso=o(" \u2014 "),VP=a("a"),oso=o("RobertaTokenizer"),rso=o(" or "),XP=a("a"),tso=o("RobertaTokenizerFast"),aso=o(" (XLM-RoBERTa-XL model)"),nso=l(),ks=a("li"),Dte=a("strong"),sso=o("xlnet"),lso=o(" \u2014 "),zP=a("a"),iso=o("XLNetTokenizer"),dso=o(" or "),QP=a("a"),cso=o("XLNetTokenizerFast"),fso=o(" (XLNet model)"),mso=l(),Ss=a("li"),Gte=a("strong"),gso=o("yoso"),hso=o(" \u2014 "),WP=a("a"),pso=o("AlbertTokenizer"),uso=o(" or "),HP=a("a"),_so=o("AlbertTokenizerFast"),bso=o(" (YOSO model)"),vso=l(),F(Hg.$$.fragment),Fso=l(),Ug=a("div"),F(lA.$$.fragment),Tso=l(),Ote=a("p"),Mso=o("Register a new tokenizer in this mapping."),GBe=l(),vi=a("h2"),Jg=a("a"),Vte=a("span"),F(iA.$$.fragment),Eso=l(),Xte=a("span"),Cso=o("AutoFeatureExtractor"),OBe=l(),Ao=a("div"),F(dA.$$.fragment),wso=l(),cA=a("p"),Aso=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),UP=a("a"),yso=o("AutoFeatureExtractor.from_pretrained()"),Lso=o(" class method."),xso=l(),fA=a("p"),$so=o("This class cannot be instantiated directly using "),zte=a("code"),kso=o("__init__()"),Sso=o(" (throws an error)."),Rso=l(),Qe=a("div"),F(mA.$$.fragment),Pso=l(),Qte=a("p"),Bso=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Iso=l(),wa=a("p"),qso=o("The feature extractor class to instantiate is selected based on the "),Wte=a("code"),Nso=o("model_type"),jso=o(` property of the config object
(either passed as an argument or loaded from `),Hte=a("code"),Dso=o("pretrained_model_name_or_path"),Gso=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ute=a("code"),Oso=o("pretrained_model_name_or_path"),Vso=o(":"),Xso=l(),ae=a("ul"),Yg=a("li"),Jte=a("strong"),zso=o("beit"),Qso=o(" \u2014 "),JP=a("a"),Wso=o("BeitFeatureExtractor"),Hso=o(" (BEiT model)"),Uso=l(),Kg=a("li"),Yte=a("strong"),Jso=o("clip"),Yso=o(" \u2014 "),YP=a("a"),Kso=o("CLIPFeatureExtractor"),Zso=o(" (CLIP model)"),elo=l(),Zg=a("li"),Kte=a("strong"),olo=o("convnext"),rlo=o(" \u2014 "),KP=a("a"),tlo=o("ConvNextFeatureExtractor"),alo=o(" (ConvNext model)"),nlo=l(),eh=a("li"),Zte=a("strong"),slo=o("data2vec-audio"),llo=o(" \u2014 "),ZP=a("a"),ilo=o("Wav2Vec2FeatureExtractor"),dlo=o(" (Data2VecAudio model)"),clo=l(),oh=a("li"),eae=a("strong"),flo=o("data2vec-vision"),mlo=o(" \u2014 "),eB=a("a"),glo=o("BeitFeatureExtractor"),hlo=o(" (Data2VecVision model)"),plo=l(),rh=a("li"),oae=a("strong"),ulo=o("deit"),_lo=o(" \u2014 "),oB=a("a"),blo=o("DeiTFeatureExtractor"),vlo=o(" (DeiT model)"),Flo=l(),th=a("li"),rae=a("strong"),Tlo=o("detr"),Mlo=o(" \u2014 "),rB=a("a"),Elo=o("DetrFeatureExtractor"),Clo=o(" (DETR model)"),wlo=l(),ah=a("li"),tae=a("strong"),Alo=o("dpt"),ylo=o(" \u2014 "),tB=a("a"),Llo=o("DPTFeatureExtractor"),xlo=o(" (DPT model)"),$lo=l(),nh=a("li"),aae=a("strong"),klo=o("glpn"),Slo=o(" \u2014 "),aB=a("a"),Rlo=o("GLPNFeatureExtractor"),Plo=o(" (GLPN model)"),Blo=l(),sh=a("li"),nae=a("strong"),Ilo=o("hubert"),qlo=o(" \u2014 "),nB=a("a"),Nlo=o("Wav2Vec2FeatureExtractor"),jlo=o(" (Hubert model)"),Dlo=l(),lh=a("li"),sae=a("strong"),Glo=o("layoutlmv2"),Olo=o(" \u2014 "),sB=a("a"),Vlo=o("LayoutLMv2FeatureExtractor"),Xlo=o(" (LayoutLMv2 model)"),zlo=l(),ih=a("li"),lae=a("strong"),Qlo=o("maskformer"),Wlo=o(" \u2014 "),lB=a("a"),Hlo=o("MaskFormerFeatureExtractor"),Ulo=o(" (MaskFormer model)"),Jlo=l(),dh=a("li"),iae=a("strong"),Ylo=o("perceiver"),Klo=o(" \u2014 "),iB=a("a"),Zlo=o("PerceiverFeatureExtractor"),eio=o(" (Perceiver model)"),oio=l(),ch=a("li"),dae=a("strong"),rio=o("poolformer"),tio=o(" \u2014 "),dB=a("a"),aio=o("PoolFormerFeatureExtractor"),nio=o(" (PoolFormer model)"),sio=l(),fh=a("li"),cae=a("strong"),lio=o("regnet"),iio=o(" \u2014 "),cB=a("a"),dio=o("ConvNextFeatureExtractor"),cio=o(" (RegNet model)"),fio=l(),mh=a("li"),fae=a("strong"),mio=o("resnet"),gio=o(" \u2014 "),fB=a("a"),hio=o("ConvNextFeatureExtractor"),pio=o(" (ResNet model)"),uio=l(),gh=a("li"),mae=a("strong"),_io=o("segformer"),bio=o(" \u2014 "),mB=a("a"),vio=o("SegformerFeatureExtractor"),Fio=o(" (SegFormer model)"),Tio=l(),hh=a("li"),gae=a("strong"),Mio=o("speech_to_text"),Eio=o(" \u2014 "),gB=a("a"),Cio=o("Speech2TextFeatureExtractor"),wio=o(" (Speech2Text model)"),Aio=l(),ph=a("li"),hae=a("strong"),yio=o("swin"),Lio=o(" \u2014 "),hB=a("a"),xio=o("ViTFeatureExtractor"),$io=o(" (Swin model)"),kio=l(),uh=a("li"),pae=a("strong"),Sio=o("van"),Rio=o(" \u2014 "),pB=a("a"),Pio=o("ConvNextFeatureExtractor"),Bio=o(" (VAN model)"),Iio=l(),_h=a("li"),uae=a("strong"),qio=o("vit"),Nio=o(" \u2014 "),uB=a("a"),jio=o("ViTFeatureExtractor"),Dio=o(" (ViT model)"),Gio=l(),bh=a("li"),_ae=a("strong"),Oio=o("vit_mae"),Vio=o(" \u2014 "),_B=a("a"),Xio=o("ViTFeatureExtractor"),zio=o(" (ViTMAE model)"),Qio=l(),vh=a("li"),bae=a("strong"),Wio=o("wav2vec2"),Hio=o(" \u2014 "),bB=a("a"),Uio=o("Wav2Vec2FeatureExtractor"),Jio=o(" (Wav2Vec2 model)"),Yio=l(),Fh=a("li"),vae=a("strong"),Kio=o("yolos"),Zio=o(" \u2014 "),vB=a("a"),edo=o("YolosFeatureExtractor"),odo=o(" (YOLOS model)"),rdo=l(),F(Th.$$.fragment),tdo=l(),F(Mh.$$.fragment),ado=l(),Eh=a("div"),F(gA.$$.fragment),ndo=l(),Fae=a("p"),sdo=o("Register a new feature extractor for this class."),VBe=l(),Fi=a("h2"),Ch=a("a"),Tae=a("span"),F(hA.$$.fragment),ldo=l(),Mae=a("span"),ido=o("AutoProcessor"),XBe=l(),yo=a("div"),F(pA.$$.fragment),ddo=l(),uA=a("p"),cdo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),FB=a("a"),fdo=o("AutoProcessor.from_pretrained()"),mdo=o(" class method."),gdo=l(),_A=a("p"),hdo=o("This class cannot be instantiated directly using "),Eae=a("code"),pdo=o("__init__()"),udo=o(" (throws an error)."),_do=l(),We=a("div"),F(bA.$$.fragment),bdo=l(),Cae=a("p"),vdo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Fdo=l(),Ti=a("p"),Tdo=o("The processor class to instantiate is selected based on the "),wae=a("code"),Mdo=o("model_type"),Edo=o(` property of the config object (either
passed as an argument or loaded from `),Aae=a("code"),Cdo=o("pretrained_model_name_or_path"),wdo=o(" if possible):"),Ado=l(),be=a("ul"),wh=a("li"),yae=a("strong"),ydo=o("clip"),Ldo=o(" \u2014 "),TB=a("a"),xdo=o("CLIPProcessor"),$do=o(" (CLIP model)"),kdo=l(),Ah=a("li"),Lae=a("strong"),Sdo=o("layoutlmv2"),Rdo=o(" \u2014 "),MB=a("a"),Pdo=o("LayoutLMv2Processor"),Bdo=o(" (LayoutLMv2 model)"),Ido=l(),yh=a("li"),xae=a("strong"),qdo=o("layoutxlm"),Ndo=o(" \u2014 "),EB=a("a"),jdo=o("LayoutXLMProcessor"),Ddo=o(" (LayoutXLM model)"),Gdo=l(),Lh=a("li"),$ae=a("strong"),Odo=o("sew"),Vdo=o(" \u2014 "),CB=a("a"),Xdo=o("Wav2Vec2Processor"),zdo=o(" (SEW model)"),Qdo=l(),xh=a("li"),kae=a("strong"),Wdo=o("sew-d"),Hdo=o(" \u2014 "),wB=a("a"),Udo=o("Wav2Vec2Processor"),Jdo=o(" (SEW-D model)"),Ydo=l(),$h=a("li"),Sae=a("strong"),Kdo=o("speech_to_text"),Zdo=o(" \u2014 "),AB=a("a"),eco=o("Speech2TextProcessor"),oco=o(" (Speech2Text model)"),rco=l(),kh=a("li"),Rae=a("strong"),tco=o("speech_to_text_2"),aco=o(" \u2014 "),yB=a("a"),nco=o("Speech2Text2Processor"),sco=o(" (Speech2Text2 model)"),lco=l(),Sh=a("li"),Pae=a("strong"),ico=o("trocr"),dco=o(" \u2014 "),LB=a("a"),cco=o("TrOCRProcessor"),fco=o(" (TrOCR model)"),mco=l(),Rh=a("li"),Bae=a("strong"),gco=o("unispeech"),hco=o(" \u2014 "),xB=a("a"),pco=o("Wav2Vec2Processor"),uco=o(" (UniSpeech model)"),_co=l(),Ph=a("li"),Iae=a("strong"),bco=o("unispeech-sat"),vco=o(" \u2014 "),$B=a("a"),Fco=o("Wav2Vec2Processor"),Tco=o(" (UniSpeechSat model)"),Mco=l(),Bh=a("li"),qae=a("strong"),Eco=o("vilt"),Cco=o(" \u2014 "),kB=a("a"),wco=o("ViltProcessor"),Aco=o(" (ViLT model)"),yco=l(),Ih=a("li"),Nae=a("strong"),Lco=o("vision-text-dual-encoder"),xco=o(" \u2014 "),SB=a("a"),$co=o("VisionTextDualEncoderProcessor"),kco=o(" (VisionTextDualEncoder model)"),Sco=l(),qh=a("li"),jae=a("strong"),Rco=o("wav2vec2"),Pco=o(" \u2014 "),RB=a("a"),Bco=o("Wav2Vec2Processor"),Ico=o(" (Wav2Vec2 model)"),qco=l(),Nh=a("li"),Dae=a("strong"),Nco=o("wavlm"),jco=o(" \u2014 "),PB=a("a"),Dco=o("Wav2Vec2Processor"),Gco=o(" (WavLM model)"),Oco=l(),F(jh.$$.fragment),Vco=l(),F(Dh.$$.fragment),Xco=l(),Gh=a("div"),F(vA.$$.fragment),zco=l(),Gae=a("p"),Qco=o("Register a new processor for this class."),zBe=l(),Mi=a("h2"),Oh=a("a"),Oae=a("span"),F(FA.$$.fragment),Wco=l(),Vae=a("span"),Hco=o("AutoModel"),QBe=l(),Lo=a("div"),F(TA.$$.fragment),Uco=l(),Ei=a("p"),Jco=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BB=a("a"),Yco=o("from_pretrained()"),Kco=o(" class method or the "),IB=a("a"),Zco=o("from_config()"),efo=o(` class
method.`),ofo=l(),MA=a("p"),rfo=o("This class cannot be instantiated directly using "),Xae=a("code"),tfo=o("__init__()"),afo=o(" (throws an error)."),nfo=l(),ot=a("div"),F(EA.$$.fragment),sfo=l(),zae=a("p"),lfo=o("Instantiates one of the base model classes of the library from a configuration."),ifo=l(),Ci=a("p"),dfo=o(`Note:
Loading a model from its configuration file does `),Qae=a("strong"),cfo=o("not"),ffo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qB=a("a"),mfo=o("from_pretrained()"),gfo=o(" to load the model weights."),hfo=l(),F(Vh.$$.fragment),pfo=l(),He=a("div"),F(CA.$$.fragment),ufo=l(),Wae=a("p"),_fo=o("Instantiate one of the base model classes of the library from a pretrained model."),bfo=l(),Aa=a("p"),vfo=o("The model class to instantiate is selected based on the "),Hae=a("code"),Ffo=o("model_type"),Tfo=o(` property of the config object (either
passed as an argument or loaded from `),Uae=a("code"),Mfo=o("pretrained_model_name_or_path"),Efo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jae=a("code"),Cfo=o("pretrained_model_name_or_path"),wfo=o(":"),Afo=l(),x=a("ul"),Xh=a("li"),Yae=a("strong"),yfo=o("albert"),Lfo=o(" \u2014 "),NB=a("a"),xfo=o("AlbertModel"),$fo=o(" (ALBERT model)"),kfo=l(),zh=a("li"),Kae=a("strong"),Sfo=o("bart"),Rfo=o(" \u2014 "),jB=a("a"),Pfo=o("BartModel"),Bfo=o(" (BART model)"),Ifo=l(),Qh=a("li"),Zae=a("strong"),qfo=o("beit"),Nfo=o(" \u2014 "),DB=a("a"),jfo=o("BeitModel"),Dfo=o(" (BEiT model)"),Gfo=l(),Wh=a("li"),ene=a("strong"),Ofo=o("bert"),Vfo=o(" \u2014 "),GB=a("a"),Xfo=o("BertModel"),zfo=o(" (BERT model)"),Qfo=l(),Hh=a("li"),one=a("strong"),Wfo=o("bert-generation"),Hfo=o(" \u2014 "),OB=a("a"),Ufo=o("BertGenerationEncoder"),Jfo=o(" (Bert Generation model)"),Yfo=l(),Uh=a("li"),rne=a("strong"),Kfo=o("big_bird"),Zfo=o(" \u2014 "),VB=a("a"),emo=o("BigBirdModel"),omo=o(" (BigBird model)"),rmo=l(),Jh=a("li"),tne=a("strong"),tmo=o("bigbird_pegasus"),amo=o(" \u2014 "),XB=a("a"),nmo=o("BigBirdPegasusModel"),smo=o(" (BigBirdPegasus model)"),lmo=l(),Yh=a("li"),ane=a("strong"),imo=o("blenderbot"),dmo=o(" \u2014 "),zB=a("a"),cmo=o("BlenderbotModel"),fmo=o(" (Blenderbot model)"),mmo=l(),Kh=a("li"),nne=a("strong"),gmo=o("blenderbot-small"),hmo=o(" \u2014 "),QB=a("a"),pmo=o("BlenderbotSmallModel"),umo=o(" (BlenderbotSmall model)"),_mo=l(),Zh=a("li"),sne=a("strong"),bmo=o("camembert"),vmo=o(" \u2014 "),WB=a("a"),Fmo=o("CamembertModel"),Tmo=o(" (CamemBERT model)"),Mmo=l(),ep=a("li"),lne=a("strong"),Emo=o("canine"),Cmo=o(" \u2014 "),HB=a("a"),wmo=o("CanineModel"),Amo=o(" (Canine model)"),ymo=l(),op=a("li"),ine=a("strong"),Lmo=o("clip"),xmo=o(" \u2014 "),UB=a("a"),$mo=o("CLIPModel"),kmo=o(" (CLIP model)"),Smo=l(),rp=a("li"),dne=a("strong"),Rmo=o("convbert"),Pmo=o(" \u2014 "),JB=a("a"),Bmo=o("ConvBertModel"),Imo=o(" (ConvBERT model)"),qmo=l(),tp=a("li"),cne=a("strong"),Nmo=o("convnext"),jmo=o(" \u2014 "),YB=a("a"),Dmo=o("ConvNextModel"),Gmo=o(" (ConvNext model)"),Omo=l(),ap=a("li"),fne=a("strong"),Vmo=o("ctrl"),Xmo=o(" \u2014 "),KB=a("a"),zmo=o("CTRLModel"),Qmo=o(" (CTRL model)"),Wmo=l(),np=a("li"),mne=a("strong"),Hmo=o("data2vec-audio"),Umo=o(" \u2014 "),ZB=a("a"),Jmo=o("Data2VecAudioModel"),Ymo=o(" (Data2VecAudio model)"),Kmo=l(),sp=a("li"),gne=a("strong"),Zmo=o("data2vec-text"),ego=o(" \u2014 "),eI=a("a"),ogo=o("Data2VecTextModel"),rgo=o(" (Data2VecText model)"),tgo=l(),lp=a("li"),hne=a("strong"),ago=o("data2vec-vision"),ngo=o(" \u2014 "),oI=a("a"),sgo=o("Data2VecVisionModel"),lgo=o(" (Data2VecVision model)"),igo=l(),ip=a("li"),pne=a("strong"),dgo=o("deberta"),cgo=o(" \u2014 "),rI=a("a"),fgo=o("DebertaModel"),mgo=o(" (DeBERTa model)"),ggo=l(),dp=a("li"),une=a("strong"),hgo=o("deberta-v2"),pgo=o(" \u2014 "),tI=a("a"),ugo=o("DebertaV2Model"),_go=o(" (DeBERTa-v2 model)"),bgo=l(),cp=a("li"),_ne=a("strong"),vgo=o("decision_transformer"),Fgo=o(" \u2014 "),aI=a("a"),Tgo=o("DecisionTransformerModel"),Mgo=o(" (Decision Transformer model)"),Ego=l(),fp=a("li"),bne=a("strong"),Cgo=o("deit"),wgo=o(" \u2014 "),nI=a("a"),Ago=o("DeiTModel"),ygo=o(" (DeiT model)"),Lgo=l(),mp=a("li"),vne=a("strong"),xgo=o("detr"),$go=o(" \u2014 "),sI=a("a"),kgo=o("DetrModel"),Sgo=o(" (DETR model)"),Rgo=l(),gp=a("li"),Fne=a("strong"),Pgo=o("distilbert"),Bgo=o(" \u2014 "),lI=a("a"),Igo=o("DistilBertModel"),qgo=o(" (DistilBERT model)"),Ngo=l(),hp=a("li"),Tne=a("strong"),jgo=o("dpr"),Dgo=o(" \u2014 "),iI=a("a"),Ggo=o("DPRQuestionEncoder"),Ogo=o(" (DPR model)"),Vgo=l(),pp=a("li"),Mne=a("strong"),Xgo=o("dpt"),zgo=o(" \u2014 "),dI=a("a"),Qgo=o("DPTModel"),Wgo=o(" (DPT model)"),Hgo=l(),up=a("li"),Ene=a("strong"),Ugo=o("electra"),Jgo=o(" \u2014 "),cI=a("a"),Ygo=o("ElectraModel"),Kgo=o(" (ELECTRA model)"),Zgo=l(),_p=a("li"),Cne=a("strong"),eho=o("flaubert"),oho=o(" \u2014 "),fI=a("a"),rho=o("FlaubertModel"),tho=o(" (FlauBERT model)"),aho=l(),bp=a("li"),wne=a("strong"),nho=o("fnet"),sho=o(" \u2014 "),mI=a("a"),lho=o("FNetModel"),iho=o(" (FNet model)"),dho=l(),vp=a("li"),Ane=a("strong"),cho=o("fsmt"),fho=o(" \u2014 "),gI=a("a"),mho=o("FSMTModel"),gho=o(" (FairSeq Machine-Translation model)"),hho=l(),Rs=a("li"),yne=a("strong"),pho=o("funnel"),uho=o(" \u2014 "),hI=a("a"),_ho=o("FunnelModel"),bho=o(" or "),pI=a("a"),vho=o("FunnelBaseModel"),Fho=o(" (Funnel Transformer model)"),Tho=l(),Fp=a("li"),Lne=a("strong"),Mho=o("glpn"),Eho=o(" \u2014 "),uI=a("a"),Cho=o("GLPNModel"),who=o(" (GLPN model)"),Aho=l(),Tp=a("li"),xne=a("strong"),yho=o("gpt2"),Lho=o(" \u2014 "),_I=a("a"),xho=o("GPT2Model"),$ho=o(" (OpenAI GPT-2 model)"),kho=l(),Mp=a("li"),$ne=a("strong"),Sho=o("gpt_neo"),Rho=o(" \u2014 "),bI=a("a"),Pho=o("GPTNeoModel"),Bho=o(" (GPT Neo model)"),Iho=l(),Ep=a("li"),kne=a("strong"),qho=o("gptj"),Nho=o(" \u2014 "),vI=a("a"),jho=o("GPTJModel"),Dho=o(" (GPT-J model)"),Gho=l(),Cp=a("li"),Sne=a("strong"),Oho=o("hubert"),Vho=o(" \u2014 "),FI=a("a"),Xho=o("HubertModel"),zho=o(" (Hubert model)"),Qho=l(),wp=a("li"),Rne=a("strong"),Who=o("ibert"),Hho=o(" \u2014 "),TI=a("a"),Uho=o("IBertModel"),Jho=o(" (I-BERT model)"),Yho=l(),Ap=a("li"),Pne=a("strong"),Kho=o("imagegpt"),Zho=o(" \u2014 "),MI=a("a"),epo=o("ImageGPTModel"),opo=o(" (ImageGPT model)"),rpo=l(),yp=a("li"),Bne=a("strong"),tpo=o("layoutlm"),apo=o(" \u2014 "),EI=a("a"),npo=o("LayoutLMModel"),spo=o(" (LayoutLM model)"),lpo=l(),Lp=a("li"),Ine=a("strong"),ipo=o("layoutlmv2"),dpo=o(" \u2014 "),CI=a("a"),cpo=o("LayoutLMv2Model"),fpo=o(" (LayoutLMv2 model)"),mpo=l(),xp=a("li"),qne=a("strong"),gpo=o("led"),hpo=o(" \u2014 "),wI=a("a"),ppo=o("LEDModel"),upo=o(" (LED model)"),_po=l(),$p=a("li"),Nne=a("strong"),bpo=o("longformer"),vpo=o(" \u2014 "),AI=a("a"),Fpo=o("LongformerModel"),Tpo=o(" (Longformer model)"),Mpo=l(),kp=a("li"),jne=a("strong"),Epo=o("luke"),Cpo=o(" \u2014 "),yI=a("a"),wpo=o("LukeModel"),Apo=o(" (LUKE model)"),ypo=l(),Sp=a("li"),Dne=a("strong"),Lpo=o("lxmert"),xpo=o(" \u2014 "),LI=a("a"),$po=o("LxmertModel"),kpo=o(" (LXMERT model)"),Spo=l(),Rp=a("li"),Gne=a("strong"),Rpo=o("m2m_100"),Ppo=o(" \u2014 "),xI=a("a"),Bpo=o("M2M100Model"),Ipo=o(" (M2M100 model)"),qpo=l(),Pp=a("li"),One=a("strong"),Npo=o("marian"),jpo=o(" \u2014 "),$I=a("a"),Dpo=o("MarianModel"),Gpo=o(" (Marian model)"),Opo=l(),Bp=a("li"),Vne=a("strong"),Vpo=o("maskformer"),Xpo=o(" \u2014 "),kI=a("a"),zpo=o("MaskFormerModel"),Qpo=o(" (MaskFormer model)"),Wpo=l(),Ip=a("li"),Xne=a("strong"),Hpo=o("mbart"),Upo=o(" \u2014 "),SI=a("a"),Jpo=o("MBartModel"),Ypo=o(" (mBART model)"),Kpo=l(),qp=a("li"),zne=a("strong"),Zpo=o("megatron-bert"),euo=o(" \u2014 "),RI=a("a"),ouo=o("MegatronBertModel"),ruo=o(" (MegatronBert model)"),tuo=l(),Np=a("li"),Qne=a("strong"),auo=o("mobilebert"),nuo=o(" \u2014 "),PI=a("a"),suo=o("MobileBertModel"),luo=o(" (MobileBERT model)"),iuo=l(),jp=a("li"),Wne=a("strong"),duo=o("mpnet"),cuo=o(" \u2014 "),BI=a("a"),fuo=o("MPNetModel"),muo=o(" (MPNet model)"),guo=l(),Dp=a("li"),Hne=a("strong"),huo=o("mt5"),puo=o(" \u2014 "),II=a("a"),uuo=o("MT5Model"),_uo=o(" (mT5 model)"),buo=l(),Gp=a("li"),Une=a("strong"),vuo=o("nystromformer"),Fuo=o(" \u2014 "),qI=a("a"),Tuo=o("NystromformerModel"),Muo=o(" (Nystromformer model)"),Euo=l(),Op=a("li"),Jne=a("strong"),Cuo=o("openai-gpt"),wuo=o(" \u2014 "),NI=a("a"),Auo=o("OpenAIGPTModel"),yuo=o(" (OpenAI GPT model)"),Luo=l(),Vp=a("li"),Yne=a("strong"),xuo=o("opt"),$uo=o(" \u2014 "),jI=a("a"),kuo=o("OPTModel"),Suo=o(" (OPT model)"),Ruo=l(),Xp=a("li"),Kne=a("strong"),Puo=o("pegasus"),Buo=o(" \u2014 "),DI=a("a"),Iuo=o("PegasusModel"),quo=o(" (Pegasus model)"),Nuo=l(),zp=a("li"),Zne=a("strong"),juo=o("perceiver"),Duo=o(" \u2014 "),GI=a("a"),Guo=o("PerceiverModel"),Ouo=o(" (Perceiver model)"),Vuo=l(),Qp=a("li"),ese=a("strong"),Xuo=o("plbart"),zuo=o(" \u2014 "),OI=a("a"),Quo=o("PLBartModel"),Wuo=o(" (PLBart model)"),Huo=l(),Wp=a("li"),ose=a("strong"),Uuo=o("poolformer"),Juo=o(" \u2014 "),VI=a("a"),Yuo=o("PoolFormerModel"),Kuo=o(" (PoolFormer model)"),Zuo=l(),Hp=a("li"),rse=a("strong"),e_o=o("prophetnet"),o_o=o(" \u2014 "),XI=a("a"),r_o=o("ProphetNetModel"),t_o=o(" (ProphetNet model)"),a_o=l(),Up=a("li"),tse=a("strong"),n_o=o("qdqbert"),s_o=o(" \u2014 "),zI=a("a"),l_o=o("QDQBertModel"),i_o=o(" (QDQBert model)"),d_o=l(),Jp=a("li"),ase=a("strong"),c_o=o("reformer"),f_o=o(" \u2014 "),QI=a("a"),m_o=o("ReformerModel"),g_o=o(" (Reformer model)"),h_o=l(),Yp=a("li"),nse=a("strong"),p_o=o("regnet"),u_o=o(" \u2014 "),WI=a("a"),__o=o("RegNetModel"),b_o=o(" (RegNet model)"),v_o=l(),Kp=a("li"),sse=a("strong"),F_o=o("rembert"),T_o=o(" \u2014 "),HI=a("a"),M_o=o("RemBertModel"),E_o=o(" (RemBERT model)"),C_o=l(),Zp=a("li"),lse=a("strong"),w_o=o("resnet"),A_o=o(" \u2014 "),UI=a("a"),y_o=o("ResNetModel"),L_o=o(" (ResNet model)"),x_o=l(),eu=a("li"),ise=a("strong"),$_o=o("retribert"),k_o=o(" \u2014 "),JI=a("a"),S_o=o("RetriBertModel"),R_o=o(" (RetriBERT model)"),P_o=l(),ou=a("li"),dse=a("strong"),B_o=o("roberta"),I_o=o(" \u2014 "),YI=a("a"),q_o=o("RobertaModel"),N_o=o(" (RoBERTa model)"),j_o=l(),ru=a("li"),cse=a("strong"),D_o=o("roformer"),G_o=o(" \u2014 "),KI=a("a"),O_o=o("RoFormerModel"),V_o=o(" (RoFormer model)"),X_o=l(),tu=a("li"),fse=a("strong"),z_o=o("segformer"),Q_o=o(" \u2014 "),ZI=a("a"),W_o=o("SegformerModel"),H_o=o(" (SegFormer model)"),U_o=l(),au=a("li"),mse=a("strong"),J_o=o("sew"),Y_o=o(" \u2014 "),eq=a("a"),K_o=o("SEWModel"),Z_o=o(" (SEW model)"),e1o=l(),nu=a("li"),gse=a("strong"),o1o=o("sew-d"),r1o=o(" \u2014 "),oq=a("a"),t1o=o("SEWDModel"),a1o=o(" (SEW-D model)"),n1o=l(),su=a("li"),hse=a("strong"),s1o=o("speech_to_text"),l1o=o(" \u2014 "),rq=a("a"),i1o=o("Speech2TextModel"),d1o=o(" (Speech2Text model)"),c1o=l(),lu=a("li"),pse=a("strong"),f1o=o("splinter"),m1o=o(" \u2014 "),tq=a("a"),g1o=o("SplinterModel"),h1o=o(" (Splinter model)"),p1o=l(),iu=a("li"),use=a("strong"),u1o=o("squeezebert"),_1o=o(" \u2014 "),aq=a("a"),b1o=o("SqueezeBertModel"),v1o=o(" (SqueezeBERT model)"),F1o=l(),du=a("li"),_se=a("strong"),T1o=o("swin"),M1o=o(" \u2014 "),nq=a("a"),E1o=o("SwinModel"),C1o=o(" (Swin model)"),w1o=l(),cu=a("li"),bse=a("strong"),A1o=o("t5"),y1o=o(" \u2014 "),sq=a("a"),L1o=o("T5Model"),x1o=o(" (T5 model)"),$1o=l(),fu=a("li"),vse=a("strong"),k1o=o("tapas"),S1o=o(" \u2014 "),lq=a("a"),R1o=o("TapasModel"),P1o=o(" (TAPAS model)"),B1o=l(),mu=a("li"),Fse=a("strong"),I1o=o("transfo-xl"),q1o=o(" \u2014 "),iq=a("a"),N1o=o("TransfoXLModel"),j1o=o(" (Transformer-XL model)"),D1o=l(),gu=a("li"),Tse=a("strong"),G1o=o("unispeech"),O1o=o(" \u2014 "),dq=a("a"),V1o=o("UniSpeechModel"),X1o=o(" (UniSpeech model)"),z1o=l(),hu=a("li"),Mse=a("strong"),Q1o=o("unispeech-sat"),W1o=o(" \u2014 "),cq=a("a"),H1o=o("UniSpeechSatModel"),U1o=o(" (UniSpeechSat model)"),J1o=l(),pu=a("li"),Ese=a("strong"),Y1o=o("van"),K1o=o(" \u2014 "),fq=a("a"),Z1o=o("VanModel"),e8o=o(" (VAN model)"),o8o=l(),uu=a("li"),Cse=a("strong"),r8o=o("vilt"),t8o=o(" \u2014 "),mq=a("a"),a8o=o("ViltModel"),n8o=o(" (ViLT model)"),s8o=l(),_u=a("li"),wse=a("strong"),l8o=o("vision-text-dual-encoder"),i8o=o(" \u2014 "),gq=a("a"),d8o=o("VisionTextDualEncoderModel"),c8o=o(" (VisionTextDualEncoder model)"),f8o=l(),bu=a("li"),Ase=a("strong"),m8o=o("visual_bert"),g8o=o(" \u2014 "),hq=a("a"),h8o=o("VisualBertModel"),p8o=o(" (VisualBert model)"),u8o=l(),vu=a("li"),yse=a("strong"),_8o=o("vit"),b8o=o(" \u2014 "),pq=a("a"),v8o=o("ViTModel"),F8o=o(" (ViT model)"),T8o=l(),Fu=a("li"),Lse=a("strong"),M8o=o("vit_mae"),E8o=o(" \u2014 "),uq=a("a"),C8o=o("ViTMAEModel"),w8o=o(" (ViTMAE model)"),A8o=l(),Tu=a("li"),xse=a("strong"),y8o=o("wav2vec2"),L8o=o(" \u2014 "),_q=a("a"),x8o=o("Wav2Vec2Model"),$8o=o(" (Wav2Vec2 model)"),k8o=l(),Mu=a("li"),$se=a("strong"),S8o=o("wavlm"),R8o=o(" \u2014 "),bq=a("a"),P8o=o("WavLMModel"),B8o=o(" (WavLM model)"),I8o=l(),Eu=a("li"),kse=a("strong"),q8o=o("xglm"),N8o=o(" \u2014 "),vq=a("a"),j8o=o("XGLMModel"),D8o=o(" (XGLM model)"),G8o=l(),Cu=a("li"),Sse=a("strong"),O8o=o("xlm"),V8o=o(" \u2014 "),Fq=a("a"),X8o=o("XLMModel"),z8o=o(" (XLM model)"),Q8o=l(),wu=a("li"),Rse=a("strong"),W8o=o("xlm-prophetnet"),H8o=o(" \u2014 "),Tq=a("a"),U8o=o("XLMProphetNetModel"),J8o=o(" (XLMProphetNet model)"),Y8o=l(),Au=a("li"),Pse=a("strong"),K8o=o("xlm-roberta"),Z8o=o(" \u2014 "),Mq=a("a"),ebo=o("XLMRobertaModel"),obo=o(" (XLM-RoBERTa model)"),rbo=l(),yu=a("li"),Bse=a("strong"),tbo=o("xlm-roberta-xl"),abo=o(" \u2014 "),Eq=a("a"),nbo=o("XLMRobertaXLModel"),sbo=o(" (XLM-RoBERTa-XL model)"),lbo=l(),Lu=a("li"),Ise=a("strong"),ibo=o("xlnet"),dbo=o(" \u2014 "),Cq=a("a"),cbo=o("XLNetModel"),fbo=o(" (XLNet model)"),mbo=l(),xu=a("li"),qse=a("strong"),gbo=o("yolos"),hbo=o(" \u2014 "),wq=a("a"),pbo=o("YolosModel"),ubo=o(" (YOLOS model)"),_bo=l(),$u=a("li"),Nse=a("strong"),bbo=o("yoso"),vbo=o(" \u2014 "),Aq=a("a"),Fbo=o("YosoModel"),Tbo=o(" (YOSO model)"),Mbo=l(),ku=a("p"),Ebo=o("The model is set in evaluation mode by default using "),jse=a("code"),Cbo=o("model.eval()"),wbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dse=a("code"),Abo=o("model.train()"),ybo=l(),F(Su.$$.fragment),WBe=l(),wi=a("h2"),Ru=a("a"),Gse=a("span"),F(wA.$$.fragment),Lbo=l(),Ose=a("span"),xbo=o("AutoModelForPreTraining"),HBe=l(),xo=a("div"),F(AA.$$.fragment),$bo=l(),Ai=a("p"),kbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yq=a("a"),Sbo=o("from_pretrained()"),Rbo=o(" class method or the "),Lq=a("a"),Pbo=o("from_config()"),Bbo=o(` class
method.`),Ibo=l(),yA=a("p"),qbo=o("This class cannot be instantiated directly using "),Vse=a("code"),Nbo=o("__init__()"),jbo=o(" (throws an error)."),Dbo=l(),rt=a("div"),F(LA.$$.fragment),Gbo=l(),Xse=a("p"),Obo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Vbo=l(),yi=a("p"),Xbo=o(`Note:
Loading a model from its configuration file does `),zse=a("strong"),zbo=o("not"),Qbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xq=a("a"),Wbo=o("from_pretrained()"),Hbo=o(" to load the model weights."),Ubo=l(),F(Pu.$$.fragment),Jbo=l(),Ue=a("div"),F(xA.$$.fragment),Ybo=l(),Qse=a("p"),Kbo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Zbo=l(),ya=a("p"),e2o=o("The model class to instantiate is selected based on the "),Wse=a("code"),o2o=o("model_type"),r2o=o(` property of the config object (either
passed as an argument or loaded from `),Hse=a("code"),t2o=o("pretrained_model_name_or_path"),a2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Use=a("code"),n2o=o("pretrained_model_name_or_path"),s2o=o(":"),l2o=l(),G=a("ul"),Bu=a("li"),Jse=a("strong"),i2o=o("albert"),d2o=o(" \u2014 "),$q=a("a"),c2o=o("AlbertForPreTraining"),f2o=o(" (ALBERT model)"),m2o=l(),Iu=a("li"),Yse=a("strong"),g2o=o("bart"),h2o=o(" \u2014 "),kq=a("a"),p2o=o("BartForConditionalGeneration"),u2o=o(" (BART model)"),_2o=l(),qu=a("li"),Kse=a("strong"),b2o=o("bert"),v2o=o(" \u2014 "),Sq=a("a"),F2o=o("BertForPreTraining"),T2o=o(" (BERT model)"),M2o=l(),Nu=a("li"),Zse=a("strong"),E2o=o("big_bird"),C2o=o(" \u2014 "),Rq=a("a"),w2o=o("BigBirdForPreTraining"),A2o=o(" (BigBird model)"),y2o=l(),ju=a("li"),ele=a("strong"),L2o=o("camembert"),x2o=o(" \u2014 "),Pq=a("a"),$2o=o("CamembertForMaskedLM"),k2o=o(" (CamemBERT model)"),S2o=l(),Du=a("li"),ole=a("strong"),R2o=o("ctrl"),P2o=o(" \u2014 "),Bq=a("a"),B2o=o("CTRLLMHeadModel"),I2o=o(" (CTRL model)"),q2o=l(),Gu=a("li"),rle=a("strong"),N2o=o("data2vec-text"),j2o=o(" \u2014 "),Iq=a("a"),D2o=o("Data2VecTextForMaskedLM"),G2o=o(" (Data2VecText model)"),O2o=l(),Ou=a("li"),tle=a("strong"),V2o=o("deberta"),X2o=o(" \u2014 "),qq=a("a"),z2o=o("DebertaForMaskedLM"),Q2o=o(" (DeBERTa model)"),W2o=l(),Vu=a("li"),ale=a("strong"),H2o=o("deberta-v2"),U2o=o(" \u2014 "),Nq=a("a"),J2o=o("DebertaV2ForMaskedLM"),Y2o=o(" (DeBERTa-v2 model)"),K2o=l(),Xu=a("li"),nle=a("strong"),Z2o=o("distilbert"),evo=o(" \u2014 "),jq=a("a"),ovo=o("DistilBertForMaskedLM"),rvo=o(" (DistilBERT model)"),tvo=l(),zu=a("li"),sle=a("strong"),avo=o("electra"),nvo=o(" \u2014 "),Dq=a("a"),svo=o("ElectraForPreTraining"),lvo=o(" (ELECTRA model)"),ivo=l(),Qu=a("li"),lle=a("strong"),dvo=o("flaubert"),cvo=o(" \u2014 "),Gq=a("a"),fvo=o("FlaubertWithLMHeadModel"),mvo=o(" (FlauBERT model)"),gvo=l(),Wu=a("li"),ile=a("strong"),hvo=o("fnet"),pvo=o(" \u2014 "),Oq=a("a"),uvo=o("FNetForPreTraining"),_vo=o(" (FNet model)"),bvo=l(),Hu=a("li"),dle=a("strong"),vvo=o("fsmt"),Fvo=o(" \u2014 "),Vq=a("a"),Tvo=o("FSMTForConditionalGeneration"),Mvo=o(" (FairSeq Machine-Translation model)"),Evo=l(),Uu=a("li"),cle=a("strong"),Cvo=o("funnel"),wvo=o(" \u2014 "),Xq=a("a"),Avo=o("FunnelForPreTraining"),yvo=o(" (Funnel Transformer model)"),Lvo=l(),Ju=a("li"),fle=a("strong"),xvo=o("gpt2"),$vo=o(" \u2014 "),zq=a("a"),kvo=o("GPT2LMHeadModel"),Svo=o(" (OpenAI GPT-2 model)"),Rvo=l(),Yu=a("li"),mle=a("strong"),Pvo=o("ibert"),Bvo=o(" \u2014 "),Qq=a("a"),Ivo=o("IBertForMaskedLM"),qvo=o(" (I-BERT model)"),Nvo=l(),Ku=a("li"),gle=a("strong"),jvo=o("layoutlm"),Dvo=o(" \u2014 "),Wq=a("a"),Gvo=o("LayoutLMForMaskedLM"),Ovo=o(" (LayoutLM model)"),Vvo=l(),Zu=a("li"),hle=a("strong"),Xvo=o("longformer"),zvo=o(" \u2014 "),Hq=a("a"),Qvo=o("LongformerForMaskedLM"),Wvo=o(" (Longformer model)"),Hvo=l(),e_=a("li"),ple=a("strong"),Uvo=o("lxmert"),Jvo=o(" \u2014 "),Uq=a("a"),Yvo=o("LxmertForPreTraining"),Kvo=o(" (LXMERT model)"),Zvo=l(),o_=a("li"),ule=a("strong"),eFo=o("megatron-bert"),oFo=o(" \u2014 "),Jq=a("a"),rFo=o("MegatronBertForPreTraining"),tFo=o(" (MegatronBert model)"),aFo=l(),r_=a("li"),_le=a("strong"),nFo=o("mobilebert"),sFo=o(" \u2014 "),Yq=a("a"),lFo=o("MobileBertForPreTraining"),iFo=o(" (MobileBERT model)"),dFo=l(),t_=a("li"),ble=a("strong"),cFo=o("mpnet"),fFo=o(" \u2014 "),Kq=a("a"),mFo=o("MPNetForMaskedLM"),gFo=o(" (MPNet model)"),hFo=l(),a_=a("li"),vle=a("strong"),pFo=o("openai-gpt"),uFo=o(" \u2014 "),Zq=a("a"),_Fo=o("OpenAIGPTLMHeadModel"),bFo=o(" (OpenAI GPT model)"),vFo=l(),n_=a("li"),Fle=a("strong"),FFo=o("retribert"),TFo=o(" \u2014 "),eN=a("a"),MFo=o("RetriBertModel"),EFo=o(" (RetriBERT model)"),CFo=l(),s_=a("li"),Tle=a("strong"),wFo=o("roberta"),AFo=o(" \u2014 "),oN=a("a"),yFo=o("RobertaForMaskedLM"),LFo=o(" (RoBERTa model)"),xFo=l(),l_=a("li"),Mle=a("strong"),$Fo=o("squeezebert"),kFo=o(" \u2014 "),rN=a("a"),SFo=o("SqueezeBertForMaskedLM"),RFo=o(" (SqueezeBERT model)"),PFo=l(),i_=a("li"),Ele=a("strong"),BFo=o("t5"),IFo=o(" \u2014 "),tN=a("a"),qFo=o("T5ForConditionalGeneration"),NFo=o(" (T5 model)"),jFo=l(),d_=a("li"),Cle=a("strong"),DFo=o("tapas"),GFo=o(" \u2014 "),aN=a("a"),OFo=o("TapasForMaskedLM"),VFo=o(" (TAPAS model)"),XFo=l(),c_=a("li"),wle=a("strong"),zFo=o("transfo-xl"),QFo=o(" \u2014 "),nN=a("a"),WFo=o("TransfoXLLMHeadModel"),HFo=o(" (Transformer-XL model)"),UFo=l(),f_=a("li"),Ale=a("strong"),JFo=o("unispeech"),YFo=o(" \u2014 "),sN=a("a"),KFo=o("UniSpeechForPreTraining"),ZFo=o(" (UniSpeech model)"),e0o=l(),m_=a("li"),yle=a("strong"),o0o=o("unispeech-sat"),r0o=o(" \u2014 "),lN=a("a"),t0o=o("UniSpeechSatForPreTraining"),a0o=o(" (UniSpeechSat model)"),n0o=l(),g_=a("li"),Lle=a("strong"),s0o=o("visual_bert"),l0o=o(" \u2014 "),iN=a("a"),i0o=o("VisualBertForPreTraining"),d0o=o(" (VisualBert model)"),c0o=l(),h_=a("li"),xle=a("strong"),f0o=o("vit_mae"),m0o=o(" \u2014 "),dN=a("a"),g0o=o("ViTMAEForPreTraining"),h0o=o(" (ViTMAE model)"),p0o=l(),p_=a("li"),$le=a("strong"),u0o=o("wav2vec2"),_0o=o(" \u2014 "),cN=a("a"),b0o=o("Wav2Vec2ForPreTraining"),v0o=o(" (Wav2Vec2 model)"),F0o=l(),u_=a("li"),kle=a("strong"),T0o=o("xlm"),M0o=o(" \u2014 "),fN=a("a"),E0o=o("XLMWithLMHeadModel"),C0o=o(" (XLM model)"),w0o=l(),__=a("li"),Sle=a("strong"),A0o=o("xlm-roberta"),y0o=o(" \u2014 "),mN=a("a"),L0o=o("XLMRobertaForMaskedLM"),x0o=o(" (XLM-RoBERTa model)"),$0o=l(),b_=a("li"),Rle=a("strong"),k0o=o("xlm-roberta-xl"),S0o=o(" \u2014 "),gN=a("a"),R0o=o("XLMRobertaXLForMaskedLM"),P0o=o(" (XLM-RoBERTa-XL model)"),B0o=l(),v_=a("li"),Ple=a("strong"),I0o=o("xlnet"),q0o=o(" \u2014 "),hN=a("a"),N0o=o("XLNetLMHeadModel"),j0o=o(" (XLNet model)"),D0o=l(),F_=a("p"),G0o=o("The model is set in evaluation mode by default using "),Ble=a("code"),O0o=o("model.eval()"),V0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ile=a("code"),X0o=o("model.train()"),z0o=l(),F(T_.$$.fragment),UBe=l(),Li=a("h2"),M_=a("a"),qle=a("span"),F($A.$$.fragment),Q0o=l(),Nle=a("span"),W0o=o("AutoModelForCausalLM"),JBe=l(),$o=a("div"),F(kA.$$.fragment),H0o=l(),xi=a("p"),U0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),pN=a("a"),J0o=o("from_pretrained()"),Y0o=o(" class method or the "),uN=a("a"),K0o=o("from_config()"),Z0o=o(` class
method.`),eTo=l(),SA=a("p"),oTo=o("This class cannot be instantiated directly using "),jle=a("code"),rTo=o("__init__()"),tTo=o(" (throws an error)."),aTo=l(),tt=a("div"),F(RA.$$.fragment),nTo=l(),Dle=a("p"),sTo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lTo=l(),$i=a("p"),iTo=o(`Note:
Loading a model from its configuration file does `),Gle=a("strong"),dTo=o("not"),cTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_N=a("a"),fTo=o("from_pretrained()"),mTo=o(" to load the model weights."),gTo=l(),F(E_.$$.fragment),hTo=l(),Je=a("div"),F(PA.$$.fragment),pTo=l(),Ole=a("p"),uTo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_To=l(),La=a("p"),bTo=o("The model class to instantiate is selected based on the "),Vle=a("code"),vTo=o("model_type"),FTo=o(` property of the config object (either
passed as an argument or loaded from `),Xle=a("code"),TTo=o("pretrained_model_name_or_path"),MTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zle=a("code"),ETo=o("pretrained_model_name_or_path"),CTo=o(":"),wTo=l(),z=a("ul"),C_=a("li"),Qle=a("strong"),ATo=o("bart"),yTo=o(" \u2014 "),bN=a("a"),LTo=o("BartForCausalLM"),xTo=o(" (BART model)"),$To=l(),w_=a("li"),Wle=a("strong"),kTo=o("bert"),STo=o(" \u2014 "),vN=a("a"),RTo=o("BertLMHeadModel"),PTo=o(" (BERT model)"),BTo=l(),A_=a("li"),Hle=a("strong"),ITo=o("bert-generation"),qTo=o(" \u2014 "),FN=a("a"),NTo=o("BertGenerationDecoder"),jTo=o(" (Bert Generation model)"),DTo=l(),y_=a("li"),Ule=a("strong"),GTo=o("big_bird"),OTo=o(" \u2014 "),TN=a("a"),VTo=o("BigBirdForCausalLM"),XTo=o(" (BigBird model)"),zTo=l(),L_=a("li"),Jle=a("strong"),QTo=o("bigbird_pegasus"),WTo=o(" \u2014 "),MN=a("a"),HTo=o("BigBirdPegasusForCausalLM"),UTo=o(" (BigBirdPegasus model)"),JTo=l(),x_=a("li"),Yle=a("strong"),YTo=o("blenderbot"),KTo=o(" \u2014 "),EN=a("a"),ZTo=o("BlenderbotForCausalLM"),e7o=o(" (Blenderbot model)"),o7o=l(),$_=a("li"),Kle=a("strong"),r7o=o("blenderbot-small"),t7o=o(" \u2014 "),CN=a("a"),a7o=o("BlenderbotSmallForCausalLM"),n7o=o(" (BlenderbotSmall model)"),s7o=l(),k_=a("li"),Zle=a("strong"),l7o=o("camembert"),i7o=o(" \u2014 "),wN=a("a"),d7o=o("CamembertForCausalLM"),c7o=o(" (CamemBERT model)"),f7o=l(),S_=a("li"),eie=a("strong"),m7o=o("ctrl"),g7o=o(" \u2014 "),AN=a("a"),h7o=o("CTRLLMHeadModel"),p7o=o(" (CTRL model)"),u7o=l(),R_=a("li"),oie=a("strong"),_7o=o("data2vec-text"),b7o=o(" \u2014 "),yN=a("a"),v7o=o("Data2VecTextForCausalLM"),F7o=o(" (Data2VecText model)"),T7o=l(),P_=a("li"),rie=a("strong"),M7o=o("electra"),E7o=o(" \u2014 "),LN=a("a"),C7o=o("ElectraForCausalLM"),w7o=o(" (ELECTRA model)"),A7o=l(),B_=a("li"),tie=a("strong"),y7o=o("gpt2"),L7o=o(" \u2014 "),xN=a("a"),x7o=o("GPT2LMHeadModel"),$7o=o(" (OpenAI GPT-2 model)"),k7o=l(),I_=a("li"),aie=a("strong"),S7o=o("gpt_neo"),R7o=o(" \u2014 "),$N=a("a"),P7o=o("GPTNeoForCausalLM"),B7o=o(" (GPT Neo model)"),I7o=l(),q_=a("li"),nie=a("strong"),q7o=o("gptj"),N7o=o(" \u2014 "),kN=a("a"),j7o=o("GPTJForCausalLM"),D7o=o(" (GPT-J model)"),G7o=l(),N_=a("li"),sie=a("strong"),O7o=o("marian"),V7o=o(" \u2014 "),SN=a("a"),X7o=o("MarianForCausalLM"),z7o=o(" (Marian model)"),Q7o=l(),j_=a("li"),lie=a("strong"),W7o=o("mbart"),H7o=o(" \u2014 "),RN=a("a"),U7o=o("MBartForCausalLM"),J7o=o(" (mBART model)"),Y7o=l(),D_=a("li"),iie=a("strong"),K7o=o("megatron-bert"),Z7o=o(" \u2014 "),PN=a("a"),eMo=o("MegatronBertForCausalLM"),oMo=o(" (MegatronBert model)"),rMo=l(),G_=a("li"),die=a("strong"),tMo=o("openai-gpt"),aMo=o(" \u2014 "),BN=a("a"),nMo=o("OpenAIGPTLMHeadModel"),sMo=o(" (OpenAI GPT model)"),lMo=l(),O_=a("li"),cie=a("strong"),iMo=o("opt"),dMo=o(" \u2014 "),IN=a("a"),cMo=o("OPTForCausalLM"),fMo=o(" (OPT model)"),mMo=l(),V_=a("li"),fie=a("strong"),gMo=o("pegasus"),hMo=o(" \u2014 "),qN=a("a"),pMo=o("PegasusForCausalLM"),uMo=o(" (Pegasus model)"),_Mo=l(),X_=a("li"),mie=a("strong"),bMo=o("plbart"),vMo=o(" \u2014 "),NN=a("a"),FMo=o("PLBartForCausalLM"),TMo=o(" (PLBart model)"),MMo=l(),z_=a("li"),gie=a("strong"),EMo=o("prophetnet"),CMo=o(" \u2014 "),jN=a("a"),wMo=o("ProphetNetForCausalLM"),AMo=o(" (ProphetNet model)"),yMo=l(),Q_=a("li"),hie=a("strong"),LMo=o("qdqbert"),xMo=o(" \u2014 "),DN=a("a"),$Mo=o("QDQBertLMHeadModel"),kMo=o(" (QDQBert model)"),SMo=l(),W_=a("li"),pie=a("strong"),RMo=o("reformer"),PMo=o(" \u2014 "),GN=a("a"),BMo=o("ReformerModelWithLMHead"),IMo=o(" (Reformer model)"),qMo=l(),H_=a("li"),uie=a("strong"),NMo=o("rembert"),jMo=o(" \u2014 "),ON=a("a"),DMo=o("RemBertForCausalLM"),GMo=o(" (RemBERT model)"),OMo=l(),U_=a("li"),_ie=a("strong"),VMo=o("roberta"),XMo=o(" \u2014 "),VN=a("a"),zMo=o("RobertaForCausalLM"),QMo=o(" (RoBERTa model)"),WMo=l(),J_=a("li"),bie=a("strong"),HMo=o("roformer"),UMo=o(" \u2014 "),XN=a("a"),JMo=o("RoFormerForCausalLM"),YMo=o(" (RoFormer model)"),KMo=l(),Y_=a("li"),vie=a("strong"),ZMo=o("speech_to_text_2"),e4o=o(" \u2014 "),zN=a("a"),o4o=o("Speech2Text2ForCausalLM"),r4o=o(" (Speech2Text2 model)"),t4o=l(),K_=a("li"),Fie=a("strong"),a4o=o("transfo-xl"),n4o=o(" \u2014 "),QN=a("a"),s4o=o("TransfoXLLMHeadModel"),l4o=o(" (Transformer-XL model)"),i4o=l(),Z_=a("li"),Tie=a("strong"),d4o=o("trocr"),c4o=o(" \u2014 "),WN=a("a"),f4o=o("TrOCRForCausalLM"),m4o=o(" (TrOCR model)"),g4o=l(),e1=a("li"),Mie=a("strong"),h4o=o("xglm"),p4o=o(" \u2014 "),HN=a("a"),u4o=o("XGLMForCausalLM"),_4o=o(" (XGLM model)"),b4o=l(),o1=a("li"),Eie=a("strong"),v4o=o("xlm"),F4o=o(" \u2014 "),UN=a("a"),T4o=o("XLMWithLMHeadModel"),M4o=o(" (XLM model)"),E4o=l(),r1=a("li"),Cie=a("strong"),C4o=o("xlm-prophetnet"),w4o=o(" \u2014 "),JN=a("a"),A4o=o("XLMProphetNetForCausalLM"),y4o=o(" (XLMProphetNet model)"),L4o=l(),t1=a("li"),wie=a("strong"),x4o=o("xlm-roberta"),$4o=o(" \u2014 "),YN=a("a"),k4o=o("XLMRobertaForCausalLM"),S4o=o(" (XLM-RoBERTa model)"),R4o=l(),a1=a("li"),Aie=a("strong"),P4o=o("xlm-roberta-xl"),B4o=o(" \u2014 "),KN=a("a"),I4o=o("XLMRobertaXLForCausalLM"),q4o=o(" (XLM-RoBERTa-XL model)"),N4o=l(),n1=a("li"),yie=a("strong"),j4o=o("xlnet"),D4o=o(" \u2014 "),ZN=a("a"),G4o=o("XLNetLMHeadModel"),O4o=o(" (XLNet model)"),V4o=l(),s1=a("p"),X4o=o("The model is set in evaluation mode by default using "),Lie=a("code"),z4o=o("model.eval()"),Q4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xie=a("code"),W4o=o("model.train()"),H4o=l(),F(l1.$$.fragment),YBe=l(),ki=a("h2"),i1=a("a"),$ie=a("span"),F(BA.$$.fragment),U4o=l(),kie=a("span"),J4o=o("AutoModelForMaskedLM"),KBe=l(),ko=a("div"),F(IA.$$.fragment),Y4o=l(),Si=a("p"),K4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ej=a("a"),Z4o=o("from_pretrained()"),eEo=o(" class method or the "),oj=a("a"),oEo=o("from_config()"),rEo=o(` class
method.`),tEo=l(),qA=a("p"),aEo=o("This class cannot be instantiated directly using "),Sie=a("code"),nEo=o("__init__()"),sEo=o(" (throws an error)."),lEo=l(),at=a("div"),F(NA.$$.fragment),iEo=l(),Rie=a("p"),dEo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),cEo=l(),Ri=a("p"),fEo=o(`Note:
Loading a model from its configuration file does `),Pie=a("strong"),mEo=o("not"),gEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rj=a("a"),hEo=o("from_pretrained()"),pEo=o(" to load the model weights."),uEo=l(),F(d1.$$.fragment),_Eo=l(),Ye=a("div"),F(jA.$$.fragment),bEo=l(),Bie=a("p"),vEo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),FEo=l(),xa=a("p"),TEo=o("The model class to instantiate is selected based on the "),Iie=a("code"),MEo=o("model_type"),EEo=o(` property of the config object (either
passed as an argument or loaded from `),qie=a("code"),CEo=o("pretrained_model_name_or_path"),wEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nie=a("code"),AEo=o("pretrained_model_name_or_path"),yEo=o(":"),LEo=l(),Q=a("ul"),c1=a("li"),jie=a("strong"),xEo=o("albert"),$Eo=o(" \u2014 "),tj=a("a"),kEo=o("AlbertForMaskedLM"),SEo=o(" (ALBERT model)"),REo=l(),f1=a("li"),Die=a("strong"),PEo=o("bart"),BEo=o(" \u2014 "),aj=a("a"),IEo=o("BartForConditionalGeneration"),qEo=o(" (BART model)"),NEo=l(),m1=a("li"),Gie=a("strong"),jEo=o("bert"),DEo=o(" \u2014 "),nj=a("a"),GEo=o("BertForMaskedLM"),OEo=o(" (BERT model)"),VEo=l(),g1=a("li"),Oie=a("strong"),XEo=o("big_bird"),zEo=o(" \u2014 "),sj=a("a"),QEo=o("BigBirdForMaskedLM"),WEo=o(" (BigBird model)"),HEo=l(),h1=a("li"),Vie=a("strong"),UEo=o("camembert"),JEo=o(" \u2014 "),lj=a("a"),YEo=o("CamembertForMaskedLM"),KEo=o(" (CamemBERT model)"),ZEo=l(),p1=a("li"),Xie=a("strong"),e5o=o("convbert"),o5o=o(" \u2014 "),ij=a("a"),r5o=o("ConvBertForMaskedLM"),t5o=o(" (ConvBERT model)"),a5o=l(),u1=a("li"),zie=a("strong"),n5o=o("data2vec-text"),s5o=o(" \u2014 "),dj=a("a"),l5o=o("Data2VecTextForMaskedLM"),i5o=o(" (Data2VecText model)"),d5o=l(),_1=a("li"),Qie=a("strong"),c5o=o("deberta"),f5o=o(" \u2014 "),cj=a("a"),m5o=o("DebertaForMaskedLM"),g5o=o(" (DeBERTa model)"),h5o=l(),b1=a("li"),Wie=a("strong"),p5o=o("deberta-v2"),u5o=o(" \u2014 "),fj=a("a"),_5o=o("DebertaV2ForMaskedLM"),b5o=o(" (DeBERTa-v2 model)"),v5o=l(),v1=a("li"),Hie=a("strong"),F5o=o("distilbert"),T5o=o(" \u2014 "),mj=a("a"),M5o=o("DistilBertForMaskedLM"),E5o=o(" (DistilBERT model)"),C5o=l(),F1=a("li"),Uie=a("strong"),w5o=o("electra"),A5o=o(" \u2014 "),gj=a("a"),y5o=o("ElectraForMaskedLM"),L5o=o(" (ELECTRA model)"),x5o=l(),T1=a("li"),Jie=a("strong"),$5o=o("flaubert"),k5o=o(" \u2014 "),hj=a("a"),S5o=o("FlaubertWithLMHeadModel"),R5o=o(" (FlauBERT model)"),P5o=l(),M1=a("li"),Yie=a("strong"),B5o=o("fnet"),I5o=o(" \u2014 "),pj=a("a"),q5o=o("FNetForMaskedLM"),N5o=o(" (FNet model)"),j5o=l(),E1=a("li"),Kie=a("strong"),D5o=o("funnel"),G5o=o(" \u2014 "),uj=a("a"),O5o=o("FunnelForMaskedLM"),V5o=o(" (Funnel Transformer model)"),X5o=l(),C1=a("li"),Zie=a("strong"),z5o=o("ibert"),Q5o=o(" \u2014 "),_j=a("a"),W5o=o("IBertForMaskedLM"),H5o=o(" (I-BERT model)"),U5o=l(),w1=a("li"),ede=a("strong"),J5o=o("layoutlm"),Y5o=o(" \u2014 "),bj=a("a"),K5o=o("LayoutLMForMaskedLM"),Z5o=o(" (LayoutLM model)"),eCo=l(),A1=a("li"),ode=a("strong"),oCo=o("longformer"),rCo=o(" \u2014 "),vj=a("a"),tCo=o("LongformerForMaskedLM"),aCo=o(" (Longformer model)"),nCo=l(),y1=a("li"),rde=a("strong"),sCo=o("mbart"),lCo=o(" \u2014 "),Fj=a("a"),iCo=o("MBartForConditionalGeneration"),dCo=o(" (mBART model)"),cCo=l(),L1=a("li"),tde=a("strong"),fCo=o("megatron-bert"),mCo=o(" \u2014 "),Tj=a("a"),gCo=o("MegatronBertForMaskedLM"),hCo=o(" (MegatronBert model)"),pCo=l(),x1=a("li"),ade=a("strong"),uCo=o("mobilebert"),_Co=o(" \u2014 "),Mj=a("a"),bCo=o("MobileBertForMaskedLM"),vCo=o(" (MobileBERT model)"),FCo=l(),$1=a("li"),nde=a("strong"),TCo=o("mpnet"),MCo=o(" \u2014 "),Ej=a("a"),ECo=o("MPNetForMaskedLM"),CCo=o(" (MPNet model)"),wCo=l(),k1=a("li"),sde=a("strong"),ACo=o("nystromformer"),yCo=o(" \u2014 "),Cj=a("a"),LCo=o("NystromformerForMaskedLM"),xCo=o(" (Nystromformer model)"),$Co=l(),S1=a("li"),lde=a("strong"),kCo=o("perceiver"),SCo=o(" \u2014 "),wj=a("a"),RCo=o("PerceiverForMaskedLM"),PCo=o(" (Perceiver model)"),BCo=l(),R1=a("li"),ide=a("strong"),ICo=o("qdqbert"),qCo=o(" \u2014 "),Aj=a("a"),NCo=o("QDQBertForMaskedLM"),jCo=o(" (QDQBert model)"),DCo=l(),P1=a("li"),dde=a("strong"),GCo=o("reformer"),OCo=o(" \u2014 "),yj=a("a"),VCo=o("ReformerForMaskedLM"),XCo=o(" (Reformer model)"),zCo=l(),B1=a("li"),cde=a("strong"),QCo=o("rembert"),WCo=o(" \u2014 "),Lj=a("a"),HCo=o("RemBertForMaskedLM"),UCo=o(" (RemBERT model)"),JCo=l(),I1=a("li"),fde=a("strong"),YCo=o("roberta"),KCo=o(" \u2014 "),xj=a("a"),ZCo=o("RobertaForMaskedLM"),e3o=o(" (RoBERTa model)"),o3o=l(),q1=a("li"),mde=a("strong"),r3o=o("roformer"),t3o=o(" \u2014 "),$j=a("a"),a3o=o("RoFormerForMaskedLM"),n3o=o(" (RoFormer model)"),s3o=l(),N1=a("li"),gde=a("strong"),l3o=o("squeezebert"),i3o=o(" \u2014 "),kj=a("a"),d3o=o("SqueezeBertForMaskedLM"),c3o=o(" (SqueezeBERT model)"),f3o=l(),j1=a("li"),hde=a("strong"),m3o=o("tapas"),g3o=o(" \u2014 "),Sj=a("a"),h3o=o("TapasForMaskedLM"),p3o=o(" (TAPAS model)"),u3o=l(),D1=a("li"),pde=a("strong"),_3o=o("wav2vec2"),b3o=o(" \u2014 "),ude=a("code"),v3o=o("Wav2Vec2ForMaskedLM"),F3o=o(" (Wav2Vec2 model)"),T3o=l(),G1=a("li"),_de=a("strong"),M3o=o("xlm"),E3o=o(" \u2014 "),Rj=a("a"),C3o=o("XLMWithLMHeadModel"),w3o=o(" (XLM model)"),A3o=l(),O1=a("li"),bde=a("strong"),y3o=o("xlm-roberta"),L3o=o(" \u2014 "),Pj=a("a"),x3o=o("XLMRobertaForMaskedLM"),$3o=o(" (XLM-RoBERTa model)"),k3o=l(),V1=a("li"),vde=a("strong"),S3o=o("xlm-roberta-xl"),R3o=o(" \u2014 "),Bj=a("a"),P3o=o("XLMRobertaXLForMaskedLM"),B3o=o(" (XLM-RoBERTa-XL model)"),I3o=l(),X1=a("li"),Fde=a("strong"),q3o=o("yoso"),N3o=o(" \u2014 "),Ij=a("a"),j3o=o("YosoForMaskedLM"),D3o=o(" (YOSO model)"),G3o=l(),z1=a("p"),O3o=o("The model is set in evaluation mode by default using "),Tde=a("code"),V3o=o("model.eval()"),X3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mde=a("code"),z3o=o("model.train()"),Q3o=l(),F(Q1.$$.fragment),ZBe=l(),Pi=a("h2"),W1=a("a"),Ede=a("span"),F(DA.$$.fragment),W3o=l(),Cde=a("span"),H3o=o("AutoModelForSeq2SeqLM"),eIe=l(),So=a("div"),F(GA.$$.fragment),U3o=l(),Bi=a("p"),J3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qj=a("a"),Y3o=o("from_pretrained()"),K3o=o(" class method or the "),Nj=a("a"),Z3o=o("from_config()"),ewo=o(` class
method.`),owo=l(),OA=a("p"),rwo=o("This class cannot be instantiated directly using "),wde=a("code"),two=o("__init__()"),awo=o(" (throws an error)."),nwo=l(),nt=a("div"),F(VA.$$.fragment),swo=l(),Ade=a("p"),lwo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iwo=l(),Ii=a("p"),dwo=o(`Note:
Loading a model from its configuration file does `),yde=a("strong"),cwo=o("not"),fwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jj=a("a"),mwo=o("from_pretrained()"),gwo=o(" to load the model weights."),hwo=l(),F(H1.$$.fragment),pwo=l(),Ke=a("div"),F(XA.$$.fragment),uwo=l(),Lde=a("p"),_wo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bwo=l(),$a=a("p"),vwo=o("The model class to instantiate is selected based on the "),xde=a("code"),Fwo=o("model_type"),Two=o(` property of the config object (either
passed as an argument or loaded from `),$de=a("code"),Mwo=o("pretrained_model_name_or_path"),Ewo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kde=a("code"),Cwo=o("pretrained_model_name_or_path"),wwo=o(":"),Awo=l(),he=a("ul"),U1=a("li"),Sde=a("strong"),ywo=o("bart"),Lwo=o(" \u2014 "),Dj=a("a"),xwo=o("BartForConditionalGeneration"),$wo=o(" (BART model)"),kwo=l(),J1=a("li"),Rde=a("strong"),Swo=o("bigbird_pegasus"),Rwo=o(" \u2014 "),Gj=a("a"),Pwo=o("BigBirdPegasusForConditionalGeneration"),Bwo=o(" (BigBirdPegasus model)"),Iwo=l(),Y1=a("li"),Pde=a("strong"),qwo=o("blenderbot"),Nwo=o(" \u2014 "),Oj=a("a"),jwo=o("BlenderbotForConditionalGeneration"),Dwo=o(" (Blenderbot model)"),Gwo=l(),K1=a("li"),Bde=a("strong"),Owo=o("blenderbot-small"),Vwo=o(" \u2014 "),Vj=a("a"),Xwo=o("BlenderbotSmallForConditionalGeneration"),zwo=o(" (BlenderbotSmall model)"),Qwo=l(),Z1=a("li"),Ide=a("strong"),Wwo=o("encoder-decoder"),Hwo=o(" \u2014 "),Xj=a("a"),Uwo=o("EncoderDecoderModel"),Jwo=o(" (Encoder decoder model)"),Ywo=l(),e8=a("li"),qde=a("strong"),Kwo=o("fsmt"),Zwo=o(" \u2014 "),zj=a("a"),eAo=o("FSMTForConditionalGeneration"),oAo=o(" (FairSeq Machine-Translation model)"),rAo=l(),o8=a("li"),Nde=a("strong"),tAo=o("led"),aAo=o(" \u2014 "),Qj=a("a"),nAo=o("LEDForConditionalGeneration"),sAo=o(" (LED model)"),lAo=l(),r8=a("li"),jde=a("strong"),iAo=o("m2m_100"),dAo=o(" \u2014 "),Wj=a("a"),cAo=o("M2M100ForConditionalGeneration"),fAo=o(" (M2M100 model)"),mAo=l(),t8=a("li"),Dde=a("strong"),gAo=o("marian"),hAo=o(" \u2014 "),Hj=a("a"),pAo=o("MarianMTModel"),uAo=o(" (Marian model)"),_Ao=l(),a8=a("li"),Gde=a("strong"),bAo=o("mbart"),vAo=o(" \u2014 "),Uj=a("a"),FAo=o("MBartForConditionalGeneration"),TAo=o(" (mBART model)"),MAo=l(),n8=a("li"),Ode=a("strong"),EAo=o("mt5"),CAo=o(" \u2014 "),Jj=a("a"),wAo=o("MT5ForConditionalGeneration"),AAo=o(" (mT5 model)"),yAo=l(),s8=a("li"),Vde=a("strong"),LAo=o("pegasus"),xAo=o(" \u2014 "),Yj=a("a"),$Ao=o("PegasusForConditionalGeneration"),kAo=o(" (Pegasus model)"),SAo=l(),l8=a("li"),Xde=a("strong"),RAo=o("plbart"),PAo=o(" \u2014 "),Kj=a("a"),BAo=o("PLBartForConditionalGeneration"),IAo=o(" (PLBart model)"),qAo=l(),i8=a("li"),zde=a("strong"),NAo=o("prophetnet"),jAo=o(" \u2014 "),Zj=a("a"),DAo=o("ProphetNetForConditionalGeneration"),GAo=o(" (ProphetNet model)"),OAo=l(),d8=a("li"),Qde=a("strong"),VAo=o("t5"),XAo=o(" \u2014 "),eD=a("a"),zAo=o("T5ForConditionalGeneration"),QAo=o(" (T5 model)"),WAo=l(),c8=a("li"),Wde=a("strong"),HAo=o("tapex"),UAo=o(" \u2014 "),oD=a("a"),JAo=o("BartForConditionalGeneration"),YAo=o(" (TAPEX model)"),KAo=l(),f8=a("li"),Hde=a("strong"),ZAo=o("xlm-prophetnet"),e6o=o(" \u2014 "),rD=a("a"),o6o=o("XLMProphetNetForConditionalGeneration"),r6o=o(" (XLMProphetNet model)"),t6o=l(),m8=a("p"),a6o=o("The model is set in evaluation mode by default using "),Ude=a("code"),n6o=o("model.eval()"),s6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jde=a("code"),l6o=o("model.train()"),i6o=l(),F(g8.$$.fragment),oIe=l(),qi=a("h2"),h8=a("a"),Yde=a("span"),F(zA.$$.fragment),d6o=l(),Kde=a("span"),c6o=o("AutoModelForSequenceClassification"),rIe=l(),Ro=a("div"),F(QA.$$.fragment),f6o=l(),Ni=a("p"),m6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tD=a("a"),g6o=o("from_pretrained()"),h6o=o(" class method or the "),aD=a("a"),p6o=o("from_config()"),u6o=o(` class
method.`),_6o=l(),WA=a("p"),b6o=o("This class cannot be instantiated directly using "),Zde=a("code"),v6o=o("__init__()"),F6o=o(" (throws an error)."),T6o=l(),st=a("div"),F(HA.$$.fragment),M6o=l(),ece=a("p"),E6o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),C6o=l(),ji=a("p"),w6o=o(`Note:
Loading a model from its configuration file does `),oce=a("strong"),A6o=o("not"),y6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nD=a("a"),L6o=o("from_pretrained()"),x6o=o(" to load the model weights."),$6o=l(),F(p8.$$.fragment),k6o=l(),Ze=a("div"),F(UA.$$.fragment),S6o=l(),rce=a("p"),R6o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),P6o=l(),ka=a("p"),B6o=o("The model class to instantiate is selected based on the "),tce=a("code"),I6o=o("model_type"),q6o=o(` property of the config object (either
passed as an argument or loaded from `),ace=a("code"),N6o=o("pretrained_model_name_or_path"),j6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nce=a("code"),D6o=o("pretrained_model_name_or_path"),G6o=o(":"),O6o=l(),q=a("ul"),u8=a("li"),sce=a("strong"),V6o=o("albert"),X6o=o(" \u2014 "),sD=a("a"),z6o=o("AlbertForSequenceClassification"),Q6o=o(" (ALBERT model)"),W6o=l(),_8=a("li"),lce=a("strong"),H6o=o("bart"),U6o=o(" \u2014 "),lD=a("a"),J6o=o("BartForSequenceClassification"),Y6o=o(" (BART model)"),K6o=l(),b8=a("li"),ice=a("strong"),Z6o=o("bert"),eyo=o(" \u2014 "),iD=a("a"),oyo=o("BertForSequenceClassification"),ryo=o(" (BERT model)"),tyo=l(),v8=a("li"),dce=a("strong"),ayo=o("big_bird"),nyo=o(" \u2014 "),dD=a("a"),syo=o("BigBirdForSequenceClassification"),lyo=o(" (BigBird model)"),iyo=l(),F8=a("li"),cce=a("strong"),dyo=o("bigbird_pegasus"),cyo=o(" \u2014 "),cD=a("a"),fyo=o("BigBirdPegasusForSequenceClassification"),myo=o(" (BigBirdPegasus model)"),gyo=l(),T8=a("li"),fce=a("strong"),hyo=o("camembert"),pyo=o(" \u2014 "),fD=a("a"),uyo=o("CamembertForSequenceClassification"),_yo=o(" (CamemBERT model)"),byo=l(),M8=a("li"),mce=a("strong"),vyo=o("canine"),Fyo=o(" \u2014 "),mD=a("a"),Tyo=o("CanineForSequenceClassification"),Myo=o(" (Canine model)"),Eyo=l(),E8=a("li"),gce=a("strong"),Cyo=o("convbert"),wyo=o(" \u2014 "),gD=a("a"),Ayo=o("ConvBertForSequenceClassification"),yyo=o(" (ConvBERT model)"),Lyo=l(),C8=a("li"),hce=a("strong"),xyo=o("ctrl"),$yo=o(" \u2014 "),hD=a("a"),kyo=o("CTRLForSequenceClassification"),Syo=o(" (CTRL model)"),Ryo=l(),w8=a("li"),pce=a("strong"),Pyo=o("data2vec-text"),Byo=o(" \u2014 "),pD=a("a"),Iyo=o("Data2VecTextForSequenceClassification"),qyo=o(" (Data2VecText model)"),Nyo=l(),A8=a("li"),uce=a("strong"),jyo=o("deberta"),Dyo=o(" \u2014 "),uD=a("a"),Gyo=o("DebertaForSequenceClassification"),Oyo=o(" (DeBERTa model)"),Vyo=l(),y8=a("li"),_ce=a("strong"),Xyo=o("deberta-v2"),zyo=o(" \u2014 "),_D=a("a"),Qyo=o("DebertaV2ForSequenceClassification"),Wyo=o(" (DeBERTa-v2 model)"),Hyo=l(),L8=a("li"),bce=a("strong"),Uyo=o("distilbert"),Jyo=o(" \u2014 "),bD=a("a"),Yyo=o("DistilBertForSequenceClassification"),Kyo=o(" (DistilBERT model)"),Zyo=l(),x8=a("li"),vce=a("strong"),eLo=o("electra"),oLo=o(" \u2014 "),vD=a("a"),rLo=o("ElectraForSequenceClassification"),tLo=o(" (ELECTRA model)"),aLo=l(),$8=a("li"),Fce=a("strong"),nLo=o("flaubert"),sLo=o(" \u2014 "),FD=a("a"),lLo=o("FlaubertForSequenceClassification"),iLo=o(" (FlauBERT model)"),dLo=l(),k8=a("li"),Tce=a("strong"),cLo=o("fnet"),fLo=o(" \u2014 "),TD=a("a"),mLo=o("FNetForSequenceClassification"),gLo=o(" (FNet model)"),hLo=l(),S8=a("li"),Mce=a("strong"),pLo=o("funnel"),uLo=o(" \u2014 "),MD=a("a"),_Lo=o("FunnelForSequenceClassification"),bLo=o(" (Funnel Transformer model)"),vLo=l(),R8=a("li"),Ece=a("strong"),FLo=o("gpt2"),TLo=o(" \u2014 "),ED=a("a"),MLo=o("GPT2ForSequenceClassification"),ELo=o(" (OpenAI GPT-2 model)"),CLo=l(),P8=a("li"),Cce=a("strong"),wLo=o("gpt_neo"),ALo=o(" \u2014 "),CD=a("a"),yLo=o("GPTNeoForSequenceClassification"),LLo=o(" (GPT Neo model)"),xLo=l(),B8=a("li"),wce=a("strong"),$Lo=o("gptj"),kLo=o(" \u2014 "),wD=a("a"),SLo=o("GPTJForSequenceClassification"),RLo=o(" (GPT-J model)"),PLo=l(),I8=a("li"),Ace=a("strong"),BLo=o("ibert"),ILo=o(" \u2014 "),AD=a("a"),qLo=o("IBertForSequenceClassification"),NLo=o(" (I-BERT model)"),jLo=l(),q8=a("li"),yce=a("strong"),DLo=o("layoutlm"),GLo=o(" \u2014 "),yD=a("a"),OLo=o("LayoutLMForSequenceClassification"),VLo=o(" (LayoutLM model)"),XLo=l(),N8=a("li"),Lce=a("strong"),zLo=o("layoutlmv2"),QLo=o(" \u2014 "),LD=a("a"),WLo=o("LayoutLMv2ForSequenceClassification"),HLo=o(" (LayoutLMv2 model)"),ULo=l(),j8=a("li"),xce=a("strong"),JLo=o("led"),YLo=o(" \u2014 "),xD=a("a"),KLo=o("LEDForSequenceClassification"),ZLo=o(" (LED model)"),exo=l(),D8=a("li"),$ce=a("strong"),oxo=o("longformer"),rxo=o(" \u2014 "),$D=a("a"),txo=o("LongformerForSequenceClassification"),axo=o(" (Longformer model)"),nxo=l(),G8=a("li"),kce=a("strong"),sxo=o("mbart"),lxo=o(" \u2014 "),kD=a("a"),ixo=o("MBartForSequenceClassification"),dxo=o(" (mBART model)"),cxo=l(),O8=a("li"),Sce=a("strong"),fxo=o("megatron-bert"),mxo=o(" \u2014 "),SD=a("a"),gxo=o("MegatronBertForSequenceClassification"),hxo=o(" (MegatronBert model)"),pxo=l(),V8=a("li"),Rce=a("strong"),uxo=o("mobilebert"),_xo=o(" \u2014 "),RD=a("a"),bxo=o("MobileBertForSequenceClassification"),vxo=o(" (MobileBERT model)"),Fxo=l(),X8=a("li"),Pce=a("strong"),Txo=o("mpnet"),Mxo=o(" \u2014 "),PD=a("a"),Exo=o("MPNetForSequenceClassification"),Cxo=o(" (MPNet model)"),wxo=l(),z8=a("li"),Bce=a("strong"),Axo=o("nystromformer"),yxo=o(" \u2014 "),BD=a("a"),Lxo=o("NystromformerForSequenceClassification"),xxo=o(" (Nystromformer model)"),$xo=l(),Q8=a("li"),Ice=a("strong"),kxo=o("openai-gpt"),Sxo=o(" \u2014 "),ID=a("a"),Rxo=o("OpenAIGPTForSequenceClassification"),Pxo=o(" (OpenAI GPT model)"),Bxo=l(),W8=a("li"),qce=a("strong"),Ixo=o("perceiver"),qxo=o(" \u2014 "),qD=a("a"),Nxo=o("PerceiverForSequenceClassification"),jxo=o(" (Perceiver model)"),Dxo=l(),H8=a("li"),Nce=a("strong"),Gxo=o("plbart"),Oxo=o(" \u2014 "),ND=a("a"),Vxo=o("PLBartForSequenceClassification"),Xxo=o(" (PLBart model)"),zxo=l(),U8=a("li"),jce=a("strong"),Qxo=o("qdqbert"),Wxo=o(" \u2014 "),jD=a("a"),Hxo=o("QDQBertForSequenceClassification"),Uxo=o(" (QDQBert model)"),Jxo=l(),J8=a("li"),Dce=a("strong"),Yxo=o("reformer"),Kxo=o(" \u2014 "),DD=a("a"),Zxo=o("ReformerForSequenceClassification"),e9o=o(" (Reformer model)"),o9o=l(),Y8=a("li"),Gce=a("strong"),r9o=o("rembert"),t9o=o(" \u2014 "),GD=a("a"),a9o=o("RemBertForSequenceClassification"),n9o=o(" (RemBERT model)"),s9o=l(),K8=a("li"),Oce=a("strong"),l9o=o("roberta"),i9o=o(" \u2014 "),OD=a("a"),d9o=o("RobertaForSequenceClassification"),c9o=o(" (RoBERTa model)"),f9o=l(),Z8=a("li"),Vce=a("strong"),m9o=o("roformer"),g9o=o(" \u2014 "),VD=a("a"),h9o=o("RoFormerForSequenceClassification"),p9o=o(" (RoFormer model)"),u9o=l(),eb=a("li"),Xce=a("strong"),_9o=o("squeezebert"),b9o=o(" \u2014 "),XD=a("a"),v9o=o("SqueezeBertForSequenceClassification"),F9o=o(" (SqueezeBERT model)"),T9o=l(),ob=a("li"),zce=a("strong"),M9o=o("tapas"),E9o=o(" \u2014 "),zD=a("a"),C9o=o("TapasForSequenceClassification"),w9o=o(" (TAPAS model)"),A9o=l(),rb=a("li"),Qce=a("strong"),y9o=o("tapex"),L9o=o(" \u2014 "),QD=a("a"),x9o=o("BartForSequenceClassification"),$9o=o(" (TAPEX model)"),k9o=l(),tb=a("li"),Wce=a("strong"),S9o=o("transfo-xl"),R9o=o(" \u2014 "),WD=a("a"),P9o=o("TransfoXLForSequenceClassification"),B9o=o(" (Transformer-XL model)"),I9o=l(),ab=a("li"),Hce=a("strong"),q9o=o("xlm"),N9o=o(" \u2014 "),HD=a("a"),j9o=o("XLMForSequenceClassification"),D9o=o(" (XLM model)"),G9o=l(),nb=a("li"),Uce=a("strong"),O9o=o("xlm-roberta"),V9o=o(" \u2014 "),UD=a("a"),X9o=o("XLMRobertaForSequenceClassification"),z9o=o(" (XLM-RoBERTa model)"),Q9o=l(),sb=a("li"),Jce=a("strong"),W9o=o("xlm-roberta-xl"),H9o=o(" \u2014 "),JD=a("a"),U9o=o("XLMRobertaXLForSequenceClassification"),J9o=o(" (XLM-RoBERTa-XL model)"),Y9o=l(),lb=a("li"),Yce=a("strong"),K9o=o("xlnet"),Z9o=o(" \u2014 "),YD=a("a"),e$o=o("XLNetForSequenceClassification"),o$o=o(" (XLNet model)"),r$o=l(),ib=a("li"),Kce=a("strong"),t$o=o("yoso"),a$o=o(" \u2014 "),KD=a("a"),n$o=o("YosoForSequenceClassification"),s$o=o(" (YOSO model)"),l$o=l(),db=a("p"),i$o=o("The model is set in evaluation mode by default using "),Zce=a("code"),d$o=o("model.eval()"),c$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),efe=a("code"),f$o=o("model.train()"),m$o=l(),F(cb.$$.fragment),tIe=l(),Di=a("h2"),fb=a("a"),ofe=a("span"),F(JA.$$.fragment),g$o=l(),rfe=a("span"),h$o=o("AutoModelForMultipleChoice"),aIe=l(),Po=a("div"),F(YA.$$.fragment),p$o=l(),Gi=a("p"),u$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZD=a("a"),_$o=o("from_pretrained()"),b$o=o(" class method or the "),eG=a("a"),v$o=o("from_config()"),F$o=o(` class
method.`),T$o=l(),KA=a("p"),M$o=o("This class cannot be instantiated directly using "),tfe=a("code"),E$o=o("__init__()"),C$o=o(" (throws an error)."),w$o=l(),lt=a("div"),F(ZA.$$.fragment),A$o=l(),afe=a("p"),y$o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),L$o=l(),Oi=a("p"),x$o=o(`Note:
Loading a model from its configuration file does `),nfe=a("strong"),$$o=o("not"),k$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=a("a"),S$o=o("from_pretrained()"),R$o=o(" to load the model weights."),P$o=l(),F(mb.$$.fragment),B$o=l(),eo=a("div"),F(e6.$$.fragment),I$o=l(),sfe=a("p"),q$o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),N$o=l(),Sa=a("p"),j$o=o("The model class to instantiate is selected based on the "),lfe=a("code"),D$o=o("model_type"),G$o=o(` property of the config object (either
passed as an argument or loaded from `),ife=a("code"),O$o=o("pretrained_model_name_or_path"),V$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=a("code"),X$o=o("pretrained_model_name_or_path"),z$o=o(":"),Q$o=l(),Y=a("ul"),gb=a("li"),cfe=a("strong"),W$o=o("albert"),H$o=o(" \u2014 "),rG=a("a"),U$o=o("AlbertForMultipleChoice"),J$o=o(" (ALBERT model)"),Y$o=l(),hb=a("li"),ffe=a("strong"),K$o=o("bert"),Z$o=o(" \u2014 "),tG=a("a"),eko=o("BertForMultipleChoice"),oko=o(" (BERT model)"),rko=l(),pb=a("li"),mfe=a("strong"),tko=o("big_bird"),ako=o(" \u2014 "),aG=a("a"),nko=o("BigBirdForMultipleChoice"),sko=o(" (BigBird model)"),lko=l(),ub=a("li"),gfe=a("strong"),iko=o("camembert"),dko=o(" \u2014 "),nG=a("a"),cko=o("CamembertForMultipleChoice"),fko=o(" (CamemBERT model)"),mko=l(),_b=a("li"),hfe=a("strong"),gko=o("canine"),hko=o(" \u2014 "),sG=a("a"),pko=o("CanineForMultipleChoice"),uko=o(" (Canine model)"),_ko=l(),bb=a("li"),pfe=a("strong"),bko=o("convbert"),vko=o(" \u2014 "),lG=a("a"),Fko=o("ConvBertForMultipleChoice"),Tko=o(" (ConvBERT model)"),Mko=l(),vb=a("li"),ufe=a("strong"),Eko=o("data2vec-text"),Cko=o(" \u2014 "),iG=a("a"),wko=o("Data2VecTextForMultipleChoice"),Ako=o(" (Data2VecText model)"),yko=l(),Fb=a("li"),_fe=a("strong"),Lko=o("distilbert"),xko=o(" \u2014 "),dG=a("a"),$ko=o("DistilBertForMultipleChoice"),kko=o(" (DistilBERT model)"),Sko=l(),Tb=a("li"),bfe=a("strong"),Rko=o("electra"),Pko=o(" \u2014 "),cG=a("a"),Bko=o("ElectraForMultipleChoice"),Iko=o(" (ELECTRA model)"),qko=l(),Mb=a("li"),vfe=a("strong"),Nko=o("flaubert"),jko=o(" \u2014 "),fG=a("a"),Dko=o("FlaubertForMultipleChoice"),Gko=o(" (FlauBERT model)"),Oko=l(),Eb=a("li"),Ffe=a("strong"),Vko=o("fnet"),Xko=o(" \u2014 "),mG=a("a"),zko=o("FNetForMultipleChoice"),Qko=o(" (FNet model)"),Wko=l(),Cb=a("li"),Tfe=a("strong"),Hko=o("funnel"),Uko=o(" \u2014 "),gG=a("a"),Jko=o("FunnelForMultipleChoice"),Yko=o(" (Funnel Transformer model)"),Kko=l(),wb=a("li"),Mfe=a("strong"),Zko=o("ibert"),eSo=o(" \u2014 "),hG=a("a"),oSo=o("IBertForMultipleChoice"),rSo=o(" (I-BERT model)"),tSo=l(),Ab=a("li"),Efe=a("strong"),aSo=o("longformer"),nSo=o(" \u2014 "),pG=a("a"),sSo=o("LongformerForMultipleChoice"),lSo=o(" (Longformer model)"),iSo=l(),yb=a("li"),Cfe=a("strong"),dSo=o("megatron-bert"),cSo=o(" \u2014 "),uG=a("a"),fSo=o("MegatronBertForMultipleChoice"),mSo=o(" (MegatronBert model)"),gSo=l(),Lb=a("li"),wfe=a("strong"),hSo=o("mobilebert"),pSo=o(" \u2014 "),_G=a("a"),uSo=o("MobileBertForMultipleChoice"),_So=o(" (MobileBERT model)"),bSo=l(),xb=a("li"),Afe=a("strong"),vSo=o("mpnet"),FSo=o(" \u2014 "),bG=a("a"),TSo=o("MPNetForMultipleChoice"),MSo=o(" (MPNet model)"),ESo=l(),$b=a("li"),yfe=a("strong"),CSo=o("nystromformer"),wSo=o(" \u2014 "),vG=a("a"),ASo=o("NystromformerForMultipleChoice"),ySo=o(" (Nystromformer model)"),LSo=l(),kb=a("li"),Lfe=a("strong"),xSo=o("qdqbert"),$So=o(" \u2014 "),FG=a("a"),kSo=o("QDQBertForMultipleChoice"),SSo=o(" (QDQBert model)"),RSo=l(),Sb=a("li"),xfe=a("strong"),PSo=o("rembert"),BSo=o(" \u2014 "),TG=a("a"),ISo=o("RemBertForMultipleChoice"),qSo=o(" (RemBERT model)"),NSo=l(),Rb=a("li"),$fe=a("strong"),jSo=o("roberta"),DSo=o(" \u2014 "),MG=a("a"),GSo=o("RobertaForMultipleChoice"),OSo=o(" (RoBERTa model)"),VSo=l(),Pb=a("li"),kfe=a("strong"),XSo=o("roformer"),zSo=o(" \u2014 "),EG=a("a"),QSo=o("RoFormerForMultipleChoice"),WSo=o(" (RoFormer model)"),HSo=l(),Bb=a("li"),Sfe=a("strong"),USo=o("squeezebert"),JSo=o(" \u2014 "),CG=a("a"),YSo=o("SqueezeBertForMultipleChoice"),KSo=o(" (SqueezeBERT model)"),ZSo=l(),Ib=a("li"),Rfe=a("strong"),eRo=o("xlm"),oRo=o(" \u2014 "),wG=a("a"),rRo=o("XLMForMultipleChoice"),tRo=o(" (XLM model)"),aRo=l(),qb=a("li"),Pfe=a("strong"),nRo=o("xlm-roberta"),sRo=o(" \u2014 "),AG=a("a"),lRo=o("XLMRobertaForMultipleChoice"),iRo=o(" (XLM-RoBERTa model)"),dRo=l(),Nb=a("li"),Bfe=a("strong"),cRo=o("xlm-roberta-xl"),fRo=o(" \u2014 "),yG=a("a"),mRo=o("XLMRobertaXLForMultipleChoice"),gRo=o(" (XLM-RoBERTa-XL model)"),hRo=l(),jb=a("li"),Ife=a("strong"),pRo=o("xlnet"),uRo=o(" \u2014 "),LG=a("a"),_Ro=o("XLNetForMultipleChoice"),bRo=o(" (XLNet model)"),vRo=l(),Db=a("li"),qfe=a("strong"),FRo=o("yoso"),TRo=o(" \u2014 "),xG=a("a"),MRo=o("YosoForMultipleChoice"),ERo=o(" (YOSO model)"),CRo=l(),Gb=a("p"),wRo=o("The model is set in evaluation mode by default using "),Nfe=a("code"),ARo=o("model.eval()"),yRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jfe=a("code"),LRo=o("model.train()"),xRo=l(),F(Ob.$$.fragment),nIe=l(),Vi=a("h2"),Vb=a("a"),Dfe=a("span"),F(o6.$$.fragment),$Ro=l(),Gfe=a("span"),kRo=o("AutoModelForNextSentencePrediction"),sIe=l(),Bo=a("div"),F(r6.$$.fragment),SRo=l(),Xi=a("p"),RRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$G=a("a"),PRo=o("from_pretrained()"),BRo=o(" class method or the "),kG=a("a"),IRo=o("from_config()"),qRo=o(` class
method.`),NRo=l(),t6=a("p"),jRo=o("This class cannot be instantiated directly using "),Ofe=a("code"),DRo=o("__init__()"),GRo=o(" (throws an error)."),ORo=l(),it=a("div"),F(a6.$$.fragment),VRo=l(),Vfe=a("p"),XRo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zRo=l(),zi=a("p"),QRo=o(`Note:
Loading a model from its configuration file does `),Xfe=a("strong"),WRo=o("not"),HRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=a("a"),URo=o("from_pretrained()"),JRo=o(" to load the model weights."),YRo=l(),F(Xb.$$.fragment),KRo=l(),oo=a("div"),F(n6.$$.fragment),ZRo=l(),zfe=a("p"),ePo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oPo=l(),Ra=a("p"),rPo=o("The model class to instantiate is selected based on the "),Qfe=a("code"),tPo=o("model_type"),aPo=o(` property of the config object (either
passed as an argument or loaded from `),Wfe=a("code"),nPo=o("pretrained_model_name_or_path"),sPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hfe=a("code"),lPo=o("pretrained_model_name_or_path"),iPo=o(":"),dPo=l(),Yr=a("ul"),zb=a("li"),Ufe=a("strong"),cPo=o("bert"),fPo=o(" \u2014 "),RG=a("a"),mPo=o("BertForNextSentencePrediction"),gPo=o(" (BERT model)"),hPo=l(),Qb=a("li"),Jfe=a("strong"),pPo=o("fnet"),uPo=o(" \u2014 "),PG=a("a"),_Po=o("FNetForNextSentencePrediction"),bPo=o(" (FNet model)"),vPo=l(),Wb=a("li"),Yfe=a("strong"),FPo=o("megatron-bert"),TPo=o(" \u2014 "),BG=a("a"),MPo=o("MegatronBertForNextSentencePrediction"),EPo=o(" (MegatronBert model)"),CPo=l(),Hb=a("li"),Kfe=a("strong"),wPo=o("mobilebert"),APo=o(" \u2014 "),IG=a("a"),yPo=o("MobileBertForNextSentencePrediction"),LPo=o(" (MobileBERT model)"),xPo=l(),Ub=a("li"),Zfe=a("strong"),$Po=o("qdqbert"),kPo=o(" \u2014 "),qG=a("a"),SPo=o("QDQBertForNextSentencePrediction"),RPo=o(" (QDQBert model)"),PPo=l(),Jb=a("p"),BPo=o("The model is set in evaluation mode by default using "),eme=a("code"),IPo=o("model.eval()"),qPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=a("code"),NPo=o("model.train()"),jPo=l(),F(Yb.$$.fragment),lIe=l(),Qi=a("h2"),Kb=a("a"),rme=a("span"),F(s6.$$.fragment),DPo=l(),tme=a("span"),GPo=o("AutoModelForTokenClassification"),iIe=l(),Io=a("div"),F(l6.$$.fragment),OPo=l(),Wi=a("p"),VPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NG=a("a"),XPo=o("from_pretrained()"),zPo=o(" class method or the "),jG=a("a"),QPo=o("from_config()"),WPo=o(` class
method.`),HPo=l(),i6=a("p"),UPo=o("This class cannot be instantiated directly using "),ame=a("code"),JPo=o("__init__()"),YPo=o(" (throws an error)."),KPo=l(),dt=a("div"),F(d6.$$.fragment),ZPo=l(),nme=a("p"),eBo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),oBo=l(),Hi=a("p"),rBo=o(`Note:
Loading a model from its configuration file does `),sme=a("strong"),tBo=o("not"),aBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=a("a"),nBo=o("from_pretrained()"),sBo=o(" to load the model weights."),lBo=l(),F(Zb.$$.fragment),iBo=l(),ro=a("div"),F(c6.$$.fragment),dBo=l(),lme=a("p"),cBo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fBo=l(),Pa=a("p"),mBo=o("The model class to instantiate is selected based on the "),ime=a("code"),gBo=o("model_type"),hBo=o(` property of the config object (either
passed as an argument or loaded from `),dme=a("code"),pBo=o("pretrained_model_name_or_path"),uBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cme=a("code"),_Bo=o("pretrained_model_name_or_path"),bBo=o(":"),vBo=l(),U=a("ul"),e2=a("li"),fme=a("strong"),FBo=o("albert"),TBo=o(" \u2014 "),GG=a("a"),MBo=o("AlbertForTokenClassification"),EBo=o(" (ALBERT model)"),CBo=l(),o2=a("li"),mme=a("strong"),wBo=o("bert"),ABo=o(" \u2014 "),OG=a("a"),yBo=o("BertForTokenClassification"),LBo=o(" (BERT model)"),xBo=l(),r2=a("li"),gme=a("strong"),$Bo=o("big_bird"),kBo=o(" \u2014 "),VG=a("a"),SBo=o("BigBirdForTokenClassification"),RBo=o(" (BigBird model)"),PBo=l(),t2=a("li"),hme=a("strong"),BBo=o("camembert"),IBo=o(" \u2014 "),XG=a("a"),qBo=o("CamembertForTokenClassification"),NBo=o(" (CamemBERT model)"),jBo=l(),a2=a("li"),pme=a("strong"),DBo=o("canine"),GBo=o(" \u2014 "),zG=a("a"),OBo=o("CanineForTokenClassification"),VBo=o(" (Canine model)"),XBo=l(),n2=a("li"),ume=a("strong"),zBo=o("convbert"),QBo=o(" \u2014 "),QG=a("a"),WBo=o("ConvBertForTokenClassification"),HBo=o(" (ConvBERT model)"),UBo=l(),s2=a("li"),_me=a("strong"),JBo=o("data2vec-text"),YBo=o(" \u2014 "),WG=a("a"),KBo=o("Data2VecTextForTokenClassification"),ZBo=o(" (Data2VecText model)"),eIo=l(),l2=a("li"),bme=a("strong"),oIo=o("deberta"),rIo=o(" \u2014 "),HG=a("a"),tIo=o("DebertaForTokenClassification"),aIo=o(" (DeBERTa model)"),nIo=l(),i2=a("li"),vme=a("strong"),sIo=o("deberta-v2"),lIo=o(" \u2014 "),UG=a("a"),iIo=o("DebertaV2ForTokenClassification"),dIo=o(" (DeBERTa-v2 model)"),cIo=l(),d2=a("li"),Fme=a("strong"),fIo=o("distilbert"),mIo=o(" \u2014 "),JG=a("a"),gIo=o("DistilBertForTokenClassification"),hIo=o(" (DistilBERT model)"),pIo=l(),c2=a("li"),Tme=a("strong"),uIo=o("electra"),_Io=o(" \u2014 "),YG=a("a"),bIo=o("ElectraForTokenClassification"),vIo=o(" (ELECTRA model)"),FIo=l(),f2=a("li"),Mme=a("strong"),TIo=o("flaubert"),MIo=o(" \u2014 "),KG=a("a"),EIo=o("FlaubertForTokenClassification"),CIo=o(" (FlauBERT model)"),wIo=l(),m2=a("li"),Eme=a("strong"),AIo=o("fnet"),yIo=o(" \u2014 "),ZG=a("a"),LIo=o("FNetForTokenClassification"),xIo=o(" (FNet model)"),$Io=l(),g2=a("li"),Cme=a("strong"),kIo=o("funnel"),SIo=o(" \u2014 "),eO=a("a"),RIo=o("FunnelForTokenClassification"),PIo=o(" (Funnel Transformer model)"),BIo=l(),h2=a("li"),wme=a("strong"),IIo=o("gpt2"),qIo=o(" \u2014 "),oO=a("a"),NIo=o("GPT2ForTokenClassification"),jIo=o(" (OpenAI GPT-2 model)"),DIo=l(),p2=a("li"),Ame=a("strong"),GIo=o("ibert"),OIo=o(" \u2014 "),rO=a("a"),VIo=o("IBertForTokenClassification"),XIo=o(" (I-BERT model)"),zIo=l(),u2=a("li"),yme=a("strong"),QIo=o("layoutlm"),WIo=o(" \u2014 "),tO=a("a"),HIo=o("LayoutLMForTokenClassification"),UIo=o(" (LayoutLM model)"),JIo=l(),_2=a("li"),Lme=a("strong"),YIo=o("layoutlmv2"),KIo=o(" \u2014 "),aO=a("a"),ZIo=o("LayoutLMv2ForTokenClassification"),eqo=o(" (LayoutLMv2 model)"),oqo=l(),b2=a("li"),xme=a("strong"),rqo=o("longformer"),tqo=o(" \u2014 "),nO=a("a"),aqo=o("LongformerForTokenClassification"),nqo=o(" (Longformer model)"),sqo=l(),v2=a("li"),$me=a("strong"),lqo=o("megatron-bert"),iqo=o(" \u2014 "),sO=a("a"),dqo=o("MegatronBertForTokenClassification"),cqo=o(" (MegatronBert model)"),fqo=l(),F2=a("li"),kme=a("strong"),mqo=o("mobilebert"),gqo=o(" \u2014 "),lO=a("a"),hqo=o("MobileBertForTokenClassification"),pqo=o(" (MobileBERT model)"),uqo=l(),T2=a("li"),Sme=a("strong"),_qo=o("mpnet"),bqo=o(" \u2014 "),iO=a("a"),vqo=o("MPNetForTokenClassification"),Fqo=o(" (MPNet model)"),Tqo=l(),M2=a("li"),Rme=a("strong"),Mqo=o("nystromformer"),Eqo=o(" \u2014 "),dO=a("a"),Cqo=o("NystromformerForTokenClassification"),wqo=o(" (Nystromformer model)"),Aqo=l(),E2=a("li"),Pme=a("strong"),yqo=o("qdqbert"),Lqo=o(" \u2014 "),cO=a("a"),xqo=o("QDQBertForTokenClassification"),$qo=o(" (QDQBert model)"),kqo=l(),C2=a("li"),Bme=a("strong"),Sqo=o("rembert"),Rqo=o(" \u2014 "),fO=a("a"),Pqo=o("RemBertForTokenClassification"),Bqo=o(" (RemBERT model)"),Iqo=l(),w2=a("li"),Ime=a("strong"),qqo=o("roberta"),Nqo=o(" \u2014 "),mO=a("a"),jqo=o("RobertaForTokenClassification"),Dqo=o(" (RoBERTa model)"),Gqo=l(),A2=a("li"),qme=a("strong"),Oqo=o("roformer"),Vqo=o(" \u2014 "),gO=a("a"),Xqo=o("RoFormerForTokenClassification"),zqo=o(" (RoFormer model)"),Qqo=l(),y2=a("li"),Nme=a("strong"),Wqo=o("squeezebert"),Hqo=o(" \u2014 "),hO=a("a"),Uqo=o("SqueezeBertForTokenClassification"),Jqo=o(" (SqueezeBERT model)"),Yqo=l(),L2=a("li"),jme=a("strong"),Kqo=o("xlm"),Zqo=o(" \u2014 "),pO=a("a"),eNo=o("XLMForTokenClassification"),oNo=o(" (XLM model)"),rNo=l(),x2=a("li"),Dme=a("strong"),tNo=o("xlm-roberta"),aNo=o(" \u2014 "),uO=a("a"),nNo=o("XLMRobertaForTokenClassification"),sNo=o(" (XLM-RoBERTa model)"),lNo=l(),$2=a("li"),Gme=a("strong"),iNo=o("xlm-roberta-xl"),dNo=o(" \u2014 "),_O=a("a"),cNo=o("XLMRobertaXLForTokenClassification"),fNo=o(" (XLM-RoBERTa-XL model)"),mNo=l(),k2=a("li"),Ome=a("strong"),gNo=o("xlnet"),hNo=o(" \u2014 "),bO=a("a"),pNo=o("XLNetForTokenClassification"),uNo=o(" (XLNet model)"),_No=l(),S2=a("li"),Vme=a("strong"),bNo=o("yoso"),vNo=o(" \u2014 "),vO=a("a"),FNo=o("YosoForTokenClassification"),TNo=o(" (YOSO model)"),MNo=l(),R2=a("p"),ENo=o("The model is set in evaluation mode by default using "),Xme=a("code"),CNo=o("model.eval()"),wNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zme=a("code"),ANo=o("model.train()"),yNo=l(),F(P2.$$.fragment),dIe=l(),Ui=a("h2"),B2=a("a"),Qme=a("span"),F(f6.$$.fragment),LNo=l(),Wme=a("span"),xNo=o("AutoModelForQuestionAnswering"),cIe=l(),qo=a("div"),F(m6.$$.fragment),$No=l(),Ji=a("p"),kNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FO=a("a"),SNo=o("from_pretrained()"),RNo=o(" class method or the "),TO=a("a"),PNo=o("from_config()"),BNo=o(` class
method.`),INo=l(),g6=a("p"),qNo=o("This class cannot be instantiated directly using "),Hme=a("code"),NNo=o("__init__()"),jNo=o(" (throws an error)."),DNo=l(),ct=a("div"),F(h6.$$.fragment),GNo=l(),Ume=a("p"),ONo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),VNo=l(),Yi=a("p"),XNo=o(`Note:
Loading a model from its configuration file does `),Jme=a("strong"),zNo=o("not"),QNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MO=a("a"),WNo=o("from_pretrained()"),HNo=o(" to load the model weights."),UNo=l(),F(I2.$$.fragment),JNo=l(),to=a("div"),F(p6.$$.fragment),YNo=l(),Yme=a("p"),KNo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ZNo=l(),Ba=a("p"),ejo=o("The model class to instantiate is selected based on the "),Kme=a("code"),ojo=o("model_type"),rjo=o(` property of the config object (either
passed as an argument or loaded from `),Zme=a("code"),tjo=o("pretrained_model_name_or_path"),ajo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ege=a("code"),njo=o("pretrained_model_name_or_path"),sjo=o(":"),ljo=l(),O=a("ul"),q2=a("li"),oge=a("strong"),ijo=o("albert"),djo=o(" \u2014 "),EO=a("a"),cjo=o("AlbertForQuestionAnswering"),fjo=o(" (ALBERT model)"),mjo=l(),N2=a("li"),rge=a("strong"),gjo=o("bart"),hjo=o(" \u2014 "),CO=a("a"),pjo=o("BartForQuestionAnswering"),ujo=o(" (BART model)"),_jo=l(),j2=a("li"),tge=a("strong"),bjo=o("bert"),vjo=o(" \u2014 "),wO=a("a"),Fjo=o("BertForQuestionAnswering"),Tjo=o(" (BERT model)"),Mjo=l(),D2=a("li"),age=a("strong"),Ejo=o("big_bird"),Cjo=o(" \u2014 "),AO=a("a"),wjo=o("BigBirdForQuestionAnswering"),Ajo=o(" (BigBird model)"),yjo=l(),G2=a("li"),nge=a("strong"),Ljo=o("bigbird_pegasus"),xjo=o(" \u2014 "),yO=a("a"),$jo=o("BigBirdPegasusForQuestionAnswering"),kjo=o(" (BigBirdPegasus model)"),Sjo=l(),O2=a("li"),sge=a("strong"),Rjo=o("camembert"),Pjo=o(" \u2014 "),LO=a("a"),Bjo=o("CamembertForQuestionAnswering"),Ijo=o(" (CamemBERT model)"),qjo=l(),V2=a("li"),lge=a("strong"),Njo=o("canine"),jjo=o(" \u2014 "),xO=a("a"),Djo=o("CanineForQuestionAnswering"),Gjo=o(" (Canine model)"),Ojo=l(),X2=a("li"),ige=a("strong"),Vjo=o("convbert"),Xjo=o(" \u2014 "),$O=a("a"),zjo=o("ConvBertForQuestionAnswering"),Qjo=o(" (ConvBERT model)"),Wjo=l(),z2=a("li"),dge=a("strong"),Hjo=o("data2vec-text"),Ujo=o(" \u2014 "),kO=a("a"),Jjo=o("Data2VecTextForQuestionAnswering"),Yjo=o(" (Data2VecText model)"),Kjo=l(),Q2=a("li"),cge=a("strong"),Zjo=o("deberta"),eDo=o(" \u2014 "),SO=a("a"),oDo=o("DebertaForQuestionAnswering"),rDo=o(" (DeBERTa model)"),tDo=l(),W2=a("li"),fge=a("strong"),aDo=o("deberta-v2"),nDo=o(" \u2014 "),RO=a("a"),sDo=o("DebertaV2ForQuestionAnswering"),lDo=o(" (DeBERTa-v2 model)"),iDo=l(),H2=a("li"),mge=a("strong"),dDo=o("distilbert"),cDo=o(" \u2014 "),PO=a("a"),fDo=o("DistilBertForQuestionAnswering"),mDo=o(" (DistilBERT model)"),gDo=l(),U2=a("li"),gge=a("strong"),hDo=o("electra"),pDo=o(" \u2014 "),BO=a("a"),uDo=o("ElectraForQuestionAnswering"),_Do=o(" (ELECTRA model)"),bDo=l(),J2=a("li"),hge=a("strong"),vDo=o("flaubert"),FDo=o(" \u2014 "),IO=a("a"),TDo=o("FlaubertForQuestionAnsweringSimple"),MDo=o(" (FlauBERT model)"),EDo=l(),Y2=a("li"),pge=a("strong"),CDo=o("fnet"),wDo=o(" \u2014 "),qO=a("a"),ADo=o("FNetForQuestionAnswering"),yDo=o(" (FNet model)"),LDo=l(),K2=a("li"),uge=a("strong"),xDo=o("funnel"),$Do=o(" \u2014 "),NO=a("a"),kDo=o("FunnelForQuestionAnswering"),SDo=o(" (Funnel Transformer model)"),RDo=l(),Z2=a("li"),_ge=a("strong"),PDo=o("gptj"),BDo=o(" \u2014 "),jO=a("a"),IDo=o("GPTJForQuestionAnswering"),qDo=o(" (GPT-J model)"),NDo=l(),ev=a("li"),bge=a("strong"),jDo=o("ibert"),DDo=o(" \u2014 "),DO=a("a"),GDo=o("IBertForQuestionAnswering"),ODo=o(" (I-BERT model)"),VDo=l(),ov=a("li"),vge=a("strong"),XDo=o("layoutlmv2"),zDo=o(" \u2014 "),GO=a("a"),QDo=o("LayoutLMv2ForQuestionAnswering"),WDo=o(" (LayoutLMv2 model)"),HDo=l(),rv=a("li"),Fge=a("strong"),UDo=o("led"),JDo=o(" \u2014 "),OO=a("a"),YDo=o("LEDForQuestionAnswering"),KDo=o(" (LED model)"),ZDo=l(),tv=a("li"),Tge=a("strong"),eGo=o("longformer"),oGo=o(" \u2014 "),VO=a("a"),rGo=o("LongformerForQuestionAnswering"),tGo=o(" (Longformer model)"),aGo=l(),av=a("li"),Mge=a("strong"),nGo=o("lxmert"),sGo=o(" \u2014 "),XO=a("a"),lGo=o("LxmertForQuestionAnswering"),iGo=o(" (LXMERT model)"),dGo=l(),nv=a("li"),Ege=a("strong"),cGo=o("mbart"),fGo=o(" \u2014 "),zO=a("a"),mGo=o("MBartForQuestionAnswering"),gGo=o(" (mBART model)"),hGo=l(),sv=a("li"),Cge=a("strong"),pGo=o("megatron-bert"),uGo=o(" \u2014 "),QO=a("a"),_Go=o("MegatronBertForQuestionAnswering"),bGo=o(" (MegatronBert model)"),vGo=l(),lv=a("li"),wge=a("strong"),FGo=o("mobilebert"),TGo=o(" \u2014 "),WO=a("a"),MGo=o("MobileBertForQuestionAnswering"),EGo=o(" (MobileBERT model)"),CGo=l(),iv=a("li"),Age=a("strong"),wGo=o("mpnet"),AGo=o(" \u2014 "),HO=a("a"),yGo=o("MPNetForQuestionAnswering"),LGo=o(" (MPNet model)"),xGo=l(),dv=a("li"),yge=a("strong"),$Go=o("nystromformer"),kGo=o(" \u2014 "),UO=a("a"),SGo=o("NystromformerForQuestionAnswering"),RGo=o(" (Nystromformer model)"),PGo=l(),cv=a("li"),Lge=a("strong"),BGo=o("qdqbert"),IGo=o(" \u2014 "),JO=a("a"),qGo=o("QDQBertForQuestionAnswering"),NGo=o(" (QDQBert model)"),jGo=l(),fv=a("li"),xge=a("strong"),DGo=o("reformer"),GGo=o(" \u2014 "),YO=a("a"),OGo=o("ReformerForQuestionAnswering"),VGo=o(" (Reformer model)"),XGo=l(),mv=a("li"),$ge=a("strong"),zGo=o("rembert"),QGo=o(" \u2014 "),KO=a("a"),WGo=o("RemBertForQuestionAnswering"),HGo=o(" (RemBERT model)"),UGo=l(),gv=a("li"),kge=a("strong"),JGo=o("roberta"),YGo=o(" \u2014 "),ZO=a("a"),KGo=o("RobertaForQuestionAnswering"),ZGo=o(" (RoBERTa model)"),eOo=l(),hv=a("li"),Sge=a("strong"),oOo=o("roformer"),rOo=o(" \u2014 "),eV=a("a"),tOo=o("RoFormerForQuestionAnswering"),aOo=o(" (RoFormer model)"),nOo=l(),pv=a("li"),Rge=a("strong"),sOo=o("splinter"),lOo=o(" \u2014 "),oV=a("a"),iOo=o("SplinterForQuestionAnswering"),dOo=o(" (Splinter model)"),cOo=l(),uv=a("li"),Pge=a("strong"),fOo=o("squeezebert"),mOo=o(" \u2014 "),rV=a("a"),gOo=o("SqueezeBertForQuestionAnswering"),hOo=o(" (SqueezeBERT model)"),pOo=l(),_v=a("li"),Bge=a("strong"),uOo=o("xlm"),_Oo=o(" \u2014 "),tV=a("a"),bOo=o("XLMForQuestionAnsweringSimple"),vOo=o(" (XLM model)"),FOo=l(),bv=a("li"),Ige=a("strong"),TOo=o("xlm-roberta"),MOo=o(" \u2014 "),aV=a("a"),EOo=o("XLMRobertaForQuestionAnswering"),COo=o(" (XLM-RoBERTa model)"),wOo=l(),vv=a("li"),qge=a("strong"),AOo=o("xlm-roberta-xl"),yOo=o(" \u2014 "),nV=a("a"),LOo=o("XLMRobertaXLForQuestionAnswering"),xOo=o(" (XLM-RoBERTa-XL model)"),$Oo=l(),Fv=a("li"),Nge=a("strong"),kOo=o("xlnet"),SOo=o(" \u2014 "),sV=a("a"),ROo=o("XLNetForQuestionAnsweringSimple"),POo=o(" (XLNet model)"),BOo=l(),Tv=a("li"),jge=a("strong"),IOo=o("yoso"),qOo=o(" \u2014 "),lV=a("a"),NOo=o("YosoForQuestionAnswering"),jOo=o(" (YOSO model)"),DOo=l(),Mv=a("p"),GOo=o("The model is set in evaluation mode by default using "),Dge=a("code"),OOo=o("model.eval()"),VOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gge=a("code"),XOo=o("model.train()"),zOo=l(),F(Ev.$$.fragment),fIe=l(),Ki=a("h2"),Cv=a("a"),Oge=a("span"),F(u6.$$.fragment),QOo=l(),Vge=a("span"),WOo=o("AutoModelForTableQuestionAnswering"),mIe=l(),No=a("div"),F(_6.$$.fragment),HOo=l(),Zi=a("p"),UOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iV=a("a"),JOo=o("from_pretrained()"),YOo=o(" class method or the "),dV=a("a"),KOo=o("from_config()"),ZOo=o(` class
method.`),eVo=l(),b6=a("p"),oVo=o("This class cannot be instantiated directly using "),Xge=a("code"),rVo=o("__init__()"),tVo=o(" (throws an error)."),aVo=l(),ft=a("div"),F(v6.$$.fragment),nVo=l(),zge=a("p"),sVo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),lVo=l(),ed=a("p"),iVo=o(`Note:
Loading a model from its configuration file does `),Qge=a("strong"),dVo=o("not"),cVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=a("a"),fVo=o("from_pretrained()"),mVo=o(" to load the model weights."),gVo=l(),F(wv.$$.fragment),hVo=l(),ao=a("div"),F(F6.$$.fragment),pVo=l(),Wge=a("p"),uVo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_Vo=l(),Ia=a("p"),bVo=o("The model class to instantiate is selected based on the "),Hge=a("code"),vVo=o("model_type"),FVo=o(` property of the config object (either
passed as an argument or loaded from `),Uge=a("code"),TVo=o("pretrained_model_name_or_path"),MVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jge=a("code"),EVo=o("pretrained_model_name_or_path"),CVo=o(":"),wVo=l(),Yge=a("ul"),Av=a("li"),Kge=a("strong"),AVo=o("tapas"),yVo=o(" \u2014 "),fV=a("a"),LVo=o("TapasForQuestionAnswering"),xVo=o(" (TAPAS model)"),$Vo=l(),yv=a("p"),kVo=o("The model is set in evaluation mode by default using "),Zge=a("code"),SVo=o("model.eval()"),RVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ehe=a("code"),PVo=o("model.train()"),BVo=l(),F(Lv.$$.fragment),gIe=l(),od=a("h2"),xv=a("a"),ohe=a("span"),F(T6.$$.fragment),IVo=l(),rhe=a("span"),qVo=o("AutoModelForImageClassification"),hIe=l(),jo=a("div"),F(M6.$$.fragment),NVo=l(),rd=a("p"),jVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mV=a("a"),DVo=o("from_pretrained()"),GVo=o(" class method or the "),gV=a("a"),OVo=o("from_config()"),VVo=o(` class
method.`),XVo=l(),E6=a("p"),zVo=o("This class cannot be instantiated directly using "),the=a("code"),QVo=o("__init__()"),WVo=o(" (throws an error)."),HVo=l(),mt=a("div"),F(C6.$$.fragment),UVo=l(),ahe=a("p"),JVo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),YVo=l(),td=a("p"),KVo=o(`Note:
Loading a model from its configuration file does `),nhe=a("strong"),ZVo=o("not"),eXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=a("a"),oXo=o("from_pretrained()"),rXo=o(" to load the model weights."),tXo=l(),F($v.$$.fragment),aXo=l(),no=a("div"),F(w6.$$.fragment),nXo=l(),she=a("p"),sXo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lXo=l(),qa=a("p"),iXo=o("The model class to instantiate is selected based on the "),lhe=a("code"),dXo=o("model_type"),cXo=o(` property of the config object (either
passed as an argument or loaded from `),ihe=a("code"),fXo=o("pretrained_model_name_or_path"),mXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=a("code"),gXo=o("pretrained_model_name_or_path"),hXo=o(":"),pXo=l(),ve=a("ul"),kv=a("li"),che=a("strong"),uXo=o("beit"),_Xo=o(" \u2014 "),pV=a("a"),bXo=o("BeitForImageClassification"),vXo=o(" (BEiT model)"),FXo=l(),Sv=a("li"),fhe=a("strong"),TXo=o("convnext"),MXo=o(" \u2014 "),uV=a("a"),EXo=o("ConvNextForImageClassification"),CXo=o(" (ConvNext model)"),wXo=l(),Rv=a("li"),mhe=a("strong"),AXo=o("data2vec-vision"),yXo=o(" \u2014 "),_V=a("a"),LXo=o("Data2VecVisionForImageClassification"),xXo=o(" (Data2VecVision model)"),$Xo=l(),Ps=a("li"),ghe=a("strong"),kXo=o("deit"),SXo=o(" \u2014 "),bV=a("a"),RXo=o("DeiTForImageClassification"),PXo=o(" or "),vV=a("a"),BXo=o("DeiTForImageClassificationWithTeacher"),IXo=o(" (DeiT model)"),qXo=l(),Pv=a("li"),hhe=a("strong"),NXo=o("imagegpt"),jXo=o(" \u2014 "),FV=a("a"),DXo=o("ImageGPTForImageClassification"),GXo=o(" (ImageGPT model)"),OXo=l(),gt=a("li"),phe=a("strong"),VXo=o("perceiver"),XXo=o(" \u2014 "),TV=a("a"),zXo=o("PerceiverForImageClassificationLearned"),QXo=o(" or "),MV=a("a"),WXo=o("PerceiverForImageClassificationFourier"),HXo=o(" or "),EV=a("a"),UXo=o("PerceiverForImageClassificationConvProcessing"),JXo=o(" (Perceiver model)"),YXo=l(),Bv=a("li"),uhe=a("strong"),KXo=o("poolformer"),ZXo=o(" \u2014 "),CV=a("a"),ezo=o("PoolFormerForImageClassification"),ozo=o(" (PoolFormer model)"),rzo=l(),Iv=a("li"),_he=a("strong"),tzo=o("regnet"),azo=o(" \u2014 "),wV=a("a"),nzo=o("RegNetForImageClassification"),szo=o(" (RegNet model)"),lzo=l(),qv=a("li"),bhe=a("strong"),izo=o("resnet"),dzo=o(" \u2014 "),AV=a("a"),czo=o("ResNetForImageClassification"),fzo=o(" (ResNet model)"),mzo=l(),Nv=a("li"),vhe=a("strong"),gzo=o("segformer"),hzo=o(" \u2014 "),yV=a("a"),pzo=o("SegformerForImageClassification"),uzo=o(" (SegFormer model)"),_zo=l(),jv=a("li"),Fhe=a("strong"),bzo=o("swin"),vzo=o(" \u2014 "),LV=a("a"),Fzo=o("SwinForImageClassification"),Tzo=o(" (Swin model)"),Mzo=l(),Dv=a("li"),The=a("strong"),Ezo=o("van"),Czo=o(" \u2014 "),xV=a("a"),wzo=o("VanForImageClassification"),Azo=o(" (VAN model)"),yzo=l(),Gv=a("li"),Mhe=a("strong"),Lzo=o("vit"),xzo=o(" \u2014 "),$V=a("a"),$zo=o("ViTForImageClassification"),kzo=o(" (ViT model)"),Szo=l(),Ov=a("p"),Rzo=o("The model is set in evaluation mode by default using "),Ehe=a("code"),Pzo=o("model.eval()"),Bzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=a("code"),Izo=o("model.train()"),qzo=l(),F(Vv.$$.fragment),pIe=l(),ad=a("h2"),Xv=a("a"),whe=a("span"),F(A6.$$.fragment),Nzo=l(),Ahe=a("span"),jzo=o("AutoModelForVision2Seq"),uIe=l(),Do=a("div"),F(y6.$$.fragment),Dzo=l(),nd=a("p"),Gzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kV=a("a"),Ozo=o("from_pretrained()"),Vzo=o(" class method or the "),SV=a("a"),Xzo=o("from_config()"),zzo=o(` class
method.`),Qzo=l(),L6=a("p"),Wzo=o("This class cannot be instantiated directly using "),yhe=a("code"),Hzo=o("__init__()"),Uzo=o(" (throws an error)."),Jzo=l(),ht=a("div"),F(x6.$$.fragment),Yzo=l(),Lhe=a("p"),Kzo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Zzo=l(),sd=a("p"),eQo=o(`Note:
Loading a model from its configuration file does `),xhe=a("strong"),oQo=o("not"),rQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),tQo=o("from_pretrained()"),aQo=o(" to load the model weights."),nQo=l(),F(zv.$$.fragment),sQo=l(),so=a("div"),F($6.$$.fragment),lQo=l(),$he=a("p"),iQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dQo=l(),Na=a("p"),cQo=o("The model class to instantiate is selected based on the "),khe=a("code"),fQo=o("model_type"),mQo=o(` property of the config object (either
passed as an argument or loaded from `),She=a("code"),gQo=o("pretrained_model_name_or_path"),hQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=a("code"),pQo=o("pretrained_model_name_or_path"),uQo=o(":"),_Qo=l(),Phe=a("ul"),Qv=a("li"),Bhe=a("strong"),bQo=o("vision-encoder-decoder"),vQo=o(" \u2014 "),PV=a("a"),FQo=o("VisionEncoderDecoderModel"),TQo=o(" (Vision Encoder decoder model)"),MQo=l(),Wv=a("p"),EQo=o("The model is set in evaluation mode by default using "),Ihe=a("code"),CQo=o("model.eval()"),wQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qhe=a("code"),AQo=o("model.train()"),yQo=l(),F(Hv.$$.fragment),_Ie=l(),ld=a("h2"),Uv=a("a"),Nhe=a("span"),F(k6.$$.fragment),LQo=l(),jhe=a("span"),xQo=o("AutoModelForAudioClassification"),bIe=l(),Go=a("div"),F(S6.$$.fragment),$Qo=l(),id=a("p"),kQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),BV=a("a"),SQo=o("from_pretrained()"),RQo=o(" class method or the "),IV=a("a"),PQo=o("from_config()"),BQo=o(` class
method.`),IQo=l(),R6=a("p"),qQo=o("This class cannot be instantiated directly using "),Dhe=a("code"),NQo=o("__init__()"),jQo=o(" (throws an error)."),DQo=l(),pt=a("div"),F(P6.$$.fragment),GQo=l(),Ghe=a("p"),OQo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),VQo=l(),dd=a("p"),XQo=o(`Note:
Loading a model from its configuration file does `),Ohe=a("strong"),zQo=o("not"),QQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=a("a"),WQo=o("from_pretrained()"),HQo=o(" to load the model weights."),UQo=l(),F(Jv.$$.fragment),JQo=l(),lo=a("div"),F(B6.$$.fragment),YQo=l(),Vhe=a("p"),KQo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ZQo=l(),ja=a("p"),eWo=o("The model class to instantiate is selected based on the "),Xhe=a("code"),oWo=o("model_type"),rWo=o(` property of the config object (either
passed as an argument or loaded from `),zhe=a("code"),tWo=o("pretrained_model_name_or_path"),aWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=a("code"),nWo=o("pretrained_model_name_or_path"),sWo=o(":"),lWo=l(),je=a("ul"),Yv=a("li"),Whe=a("strong"),iWo=o("data2vec-audio"),dWo=o(" \u2014 "),NV=a("a"),cWo=o("Data2VecAudioForSequenceClassification"),fWo=o(" (Data2VecAudio model)"),mWo=l(),Kv=a("li"),Hhe=a("strong"),gWo=o("hubert"),hWo=o(" \u2014 "),jV=a("a"),pWo=o("HubertForSequenceClassification"),uWo=o(" (Hubert model)"),_Wo=l(),Zv=a("li"),Uhe=a("strong"),bWo=o("sew"),vWo=o(" \u2014 "),DV=a("a"),FWo=o("SEWForSequenceClassification"),TWo=o(" (SEW model)"),MWo=l(),eF=a("li"),Jhe=a("strong"),EWo=o("sew-d"),CWo=o(" \u2014 "),GV=a("a"),wWo=o("SEWDForSequenceClassification"),AWo=o(" (SEW-D model)"),yWo=l(),oF=a("li"),Yhe=a("strong"),LWo=o("unispeech"),xWo=o(" \u2014 "),OV=a("a"),$Wo=o("UniSpeechForSequenceClassification"),kWo=o(" (UniSpeech model)"),SWo=l(),rF=a("li"),Khe=a("strong"),RWo=o("unispeech-sat"),PWo=o(" \u2014 "),VV=a("a"),BWo=o("UniSpeechSatForSequenceClassification"),IWo=o(" (UniSpeechSat model)"),qWo=l(),tF=a("li"),Zhe=a("strong"),NWo=o("wav2vec2"),jWo=o(" \u2014 "),XV=a("a"),DWo=o("Wav2Vec2ForSequenceClassification"),GWo=o(" (Wav2Vec2 model)"),OWo=l(),aF=a("li"),epe=a("strong"),VWo=o("wavlm"),XWo=o(" \u2014 "),zV=a("a"),zWo=o("WavLMForSequenceClassification"),QWo=o(" (WavLM model)"),WWo=l(),nF=a("p"),HWo=o("The model is set in evaluation mode by default using "),ope=a("code"),UWo=o("model.eval()"),JWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rpe=a("code"),YWo=o("model.train()"),KWo=l(),F(sF.$$.fragment),vIe=l(),cd=a("h2"),lF=a("a"),tpe=a("span"),F(I6.$$.fragment),ZWo=l(),ape=a("span"),eHo=o("AutoModelForAudioFrameClassification"),FIe=l(),Oo=a("div"),F(q6.$$.fragment),oHo=l(),fd=a("p"),rHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),QV=a("a"),tHo=o("from_pretrained()"),aHo=o(" class method or the "),WV=a("a"),nHo=o("from_config()"),sHo=o(` class
method.`),lHo=l(),N6=a("p"),iHo=o("This class cannot be instantiated directly using "),npe=a("code"),dHo=o("__init__()"),cHo=o(" (throws an error)."),fHo=l(),ut=a("div"),F(j6.$$.fragment),mHo=l(),spe=a("p"),gHo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),hHo=l(),md=a("p"),pHo=o(`Note:
Loading a model from its configuration file does `),lpe=a("strong"),uHo=o("not"),_Ho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=a("a"),bHo=o("from_pretrained()"),vHo=o(" to load the model weights."),FHo=l(),F(iF.$$.fragment),THo=l(),io=a("div"),F(D6.$$.fragment),MHo=l(),ipe=a("p"),EHo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),CHo=l(),Da=a("p"),wHo=o("The model class to instantiate is selected based on the "),dpe=a("code"),AHo=o("model_type"),yHo=o(` property of the config object (either
passed as an argument or loaded from `),cpe=a("code"),LHo=o("pretrained_model_name_or_path"),xHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=a("code"),$Ho=o("pretrained_model_name_or_path"),kHo=o(":"),SHo=l(),Ga=a("ul"),dF=a("li"),mpe=a("strong"),RHo=o("data2vec-audio"),PHo=o(" \u2014 "),UV=a("a"),BHo=o("Data2VecAudioForAudioFrameClassification"),IHo=o(" (Data2VecAudio model)"),qHo=l(),cF=a("li"),gpe=a("strong"),NHo=o("unispeech-sat"),jHo=o(" \u2014 "),JV=a("a"),DHo=o("UniSpeechSatForAudioFrameClassification"),GHo=o(" (UniSpeechSat model)"),OHo=l(),fF=a("li"),hpe=a("strong"),VHo=o("wav2vec2"),XHo=o(" \u2014 "),YV=a("a"),zHo=o("Wav2Vec2ForAudioFrameClassification"),QHo=o(" (Wav2Vec2 model)"),WHo=l(),mF=a("li"),ppe=a("strong"),HHo=o("wavlm"),UHo=o(" \u2014 "),KV=a("a"),JHo=o("WavLMForAudioFrameClassification"),YHo=o(" (WavLM model)"),KHo=l(),gF=a("p"),ZHo=o("The model is set in evaluation mode by default using "),upe=a("code"),eUo=o("model.eval()"),oUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=a("code"),rUo=o("model.train()"),tUo=l(),F(hF.$$.fragment),TIe=l(),gd=a("h2"),pF=a("a"),bpe=a("span"),F(G6.$$.fragment),aUo=l(),vpe=a("span"),nUo=o("AutoModelForCTC"),MIe=l(),Vo=a("div"),F(O6.$$.fragment),sUo=l(),hd=a("p"),lUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ZV=a("a"),iUo=o("from_pretrained()"),dUo=o(" class method or the "),eX=a("a"),cUo=o("from_config()"),fUo=o(` class
method.`),mUo=l(),V6=a("p"),gUo=o("This class cannot be instantiated directly using "),Fpe=a("code"),hUo=o("__init__()"),pUo=o(" (throws an error)."),uUo=l(),_t=a("div"),F(X6.$$.fragment),_Uo=l(),Tpe=a("p"),bUo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),vUo=l(),pd=a("p"),FUo=o(`Note:
Loading a model from its configuration file does `),Mpe=a("strong"),TUo=o("not"),MUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),EUo=o("from_pretrained()"),CUo=o(" to load the model weights."),wUo=l(),F(uF.$$.fragment),AUo=l(),co=a("div"),F(z6.$$.fragment),yUo=l(),Epe=a("p"),LUo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),xUo=l(),Oa=a("p"),$Uo=o("The model class to instantiate is selected based on the "),Cpe=a("code"),kUo=o("model_type"),SUo=o(` property of the config object (either
passed as an argument or loaded from `),wpe=a("code"),RUo=o("pretrained_model_name_or_path"),PUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=a("code"),BUo=o("pretrained_model_name_or_path"),IUo=o(":"),qUo=l(),De=a("ul"),_F=a("li"),ype=a("strong"),NUo=o("data2vec-audio"),jUo=o(" \u2014 "),rX=a("a"),DUo=o("Data2VecAudioForCTC"),GUo=o(" (Data2VecAudio model)"),OUo=l(),bF=a("li"),Lpe=a("strong"),VUo=o("hubert"),XUo=o(" \u2014 "),tX=a("a"),zUo=o("HubertForCTC"),QUo=o(" (Hubert model)"),WUo=l(),vF=a("li"),xpe=a("strong"),HUo=o("sew"),UUo=o(" \u2014 "),aX=a("a"),JUo=o("SEWForCTC"),YUo=o(" (SEW model)"),KUo=l(),FF=a("li"),$pe=a("strong"),ZUo=o("sew-d"),eJo=o(" \u2014 "),nX=a("a"),oJo=o("SEWDForCTC"),rJo=o(" (SEW-D model)"),tJo=l(),TF=a("li"),kpe=a("strong"),aJo=o("unispeech"),nJo=o(" \u2014 "),sX=a("a"),sJo=o("UniSpeechForCTC"),lJo=o(" (UniSpeech model)"),iJo=l(),MF=a("li"),Spe=a("strong"),dJo=o("unispeech-sat"),cJo=o(" \u2014 "),lX=a("a"),fJo=o("UniSpeechSatForCTC"),mJo=o(" (UniSpeechSat model)"),gJo=l(),EF=a("li"),Rpe=a("strong"),hJo=o("wav2vec2"),pJo=o(" \u2014 "),iX=a("a"),uJo=o("Wav2Vec2ForCTC"),_Jo=o(" (Wav2Vec2 model)"),bJo=l(),CF=a("li"),Ppe=a("strong"),vJo=o("wavlm"),FJo=o(" \u2014 "),dX=a("a"),TJo=o("WavLMForCTC"),MJo=o(" (WavLM model)"),EJo=l(),wF=a("p"),CJo=o("The model is set in evaluation mode by default using "),Bpe=a("code"),wJo=o("model.eval()"),AJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ipe=a("code"),yJo=o("model.train()"),LJo=l(),F(AF.$$.fragment),EIe=l(),ud=a("h2"),yF=a("a"),qpe=a("span"),F(Q6.$$.fragment),xJo=l(),Npe=a("span"),$Jo=o("AutoModelForSpeechSeq2Seq"),CIe=l(),Xo=a("div"),F(W6.$$.fragment),kJo=l(),_d=a("p"),SJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),cX=a("a"),RJo=o("from_pretrained()"),PJo=o(" class method or the "),fX=a("a"),BJo=o("from_config()"),IJo=o(` class
method.`),qJo=l(),H6=a("p"),NJo=o("This class cannot be instantiated directly using "),jpe=a("code"),jJo=o("__init__()"),DJo=o(" (throws an error)."),GJo=l(),bt=a("div"),F(U6.$$.fragment),OJo=l(),Dpe=a("p"),VJo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),XJo=l(),bd=a("p"),zJo=o(`Note:
Loading a model from its configuration file does `),Gpe=a("strong"),QJo=o("not"),WJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=a("a"),HJo=o("from_pretrained()"),UJo=o(" to load the model weights."),JJo=l(),F(LF.$$.fragment),YJo=l(),fo=a("div"),F(J6.$$.fragment),KJo=l(),Ope=a("p"),ZJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),eYo=l(),Va=a("p"),oYo=o("The model class to instantiate is selected based on the "),Vpe=a("code"),rYo=o("model_type"),tYo=o(` property of the config object (either
passed as an argument or loaded from `),Xpe=a("code"),aYo=o("pretrained_model_name_or_path"),nYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=a("code"),sYo=o("pretrained_model_name_or_path"),lYo=o(":"),iYo=l(),Y6=a("ul"),xF=a("li"),Qpe=a("strong"),dYo=o("speech-encoder-decoder"),cYo=o(" \u2014 "),gX=a("a"),fYo=o("SpeechEncoderDecoderModel"),mYo=o(" (Speech Encoder decoder model)"),gYo=l(),$F=a("li"),Wpe=a("strong"),hYo=o("speech_to_text"),pYo=o(" \u2014 "),hX=a("a"),uYo=o("Speech2TextForConditionalGeneration"),_Yo=o(" (Speech2Text model)"),bYo=l(),kF=a("p"),vYo=o("The model is set in evaluation mode by default using "),Hpe=a("code"),FYo=o("model.eval()"),TYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=a("code"),MYo=o("model.train()"),EYo=l(),F(SF.$$.fragment),wIe=l(),vd=a("h2"),RF=a("a"),Jpe=a("span"),F(K6.$$.fragment),CYo=l(),Ype=a("span"),wYo=o("AutoModelForAudioXVector"),AIe=l(),zo=a("div"),F(Z6.$$.fragment),AYo=l(),Fd=a("p"),yYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),pX=a("a"),LYo=o("from_pretrained()"),xYo=o(" class method or the "),uX=a("a"),$Yo=o("from_config()"),kYo=o(` class
method.`),SYo=l(),ey=a("p"),RYo=o("This class cannot be instantiated directly using "),Kpe=a("code"),PYo=o("__init__()"),BYo=o(" (throws an error)."),IYo=l(),vt=a("div"),F(oy.$$.fragment),qYo=l(),Zpe=a("p"),NYo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),jYo=l(),Td=a("p"),DYo=o(`Note:
Loading a model from its configuration file does `),eue=a("strong"),GYo=o("not"),OYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=a("a"),VYo=o("from_pretrained()"),XYo=o(" to load the model weights."),zYo=l(),F(PF.$$.fragment),QYo=l(),mo=a("div"),F(ry.$$.fragment),WYo=l(),oue=a("p"),HYo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),UYo=l(),Xa=a("p"),JYo=o("The model class to instantiate is selected based on the "),rue=a("code"),YYo=o("model_type"),KYo=o(` property of the config object (either
passed as an argument or loaded from `),tue=a("code"),ZYo=o("pretrained_model_name_or_path"),eKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=a("code"),oKo=o("pretrained_model_name_or_path"),rKo=o(":"),tKo=l(),za=a("ul"),BF=a("li"),nue=a("strong"),aKo=o("data2vec-audio"),nKo=o(" \u2014 "),bX=a("a"),sKo=o("Data2VecAudioForXVector"),lKo=o(" (Data2VecAudio model)"),iKo=l(),IF=a("li"),sue=a("strong"),dKo=o("unispeech-sat"),cKo=o(" \u2014 "),vX=a("a"),fKo=o("UniSpeechSatForXVector"),mKo=o(" (UniSpeechSat model)"),gKo=l(),qF=a("li"),lue=a("strong"),hKo=o("wav2vec2"),pKo=o(" \u2014 "),FX=a("a"),uKo=o("Wav2Vec2ForXVector"),_Ko=o(" (Wav2Vec2 model)"),bKo=l(),NF=a("li"),iue=a("strong"),vKo=o("wavlm"),FKo=o(" \u2014 "),TX=a("a"),TKo=o("WavLMForXVector"),MKo=o(" (WavLM model)"),EKo=l(),jF=a("p"),CKo=o("The model is set in evaluation mode by default using "),due=a("code"),wKo=o("model.eval()"),AKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=a("code"),yKo=o("model.train()"),LKo=l(),F(DF.$$.fragment),yIe=l(),Md=a("h2"),GF=a("a"),fue=a("span"),F(ty.$$.fragment),xKo=l(),mue=a("span"),$Ko=o("AutoModelForMaskedImageModeling"),LIe=l(),Qo=a("div"),F(ay.$$.fragment),kKo=l(),Ed=a("p"),SKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),MX=a("a"),RKo=o("from_pretrained()"),PKo=o(" class method or the "),EX=a("a"),BKo=o("from_config()"),IKo=o(` class
method.`),qKo=l(),ny=a("p"),NKo=o("This class cannot be instantiated directly using "),gue=a("code"),jKo=o("__init__()"),DKo=o(" (throws an error)."),GKo=l(),Ft=a("div"),F(sy.$$.fragment),OKo=l(),hue=a("p"),VKo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),XKo=l(),Cd=a("p"),zKo=o(`Note:
Loading a model from its configuration file does `),pue=a("strong"),QKo=o("not"),WKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),HKo=o("from_pretrained()"),UKo=o(" to load the model weights."),JKo=l(),F(OF.$$.fragment),YKo=l(),go=a("div"),F(ly.$$.fragment),KKo=l(),uue=a("p"),ZKo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),eZo=l(),Qa=a("p"),oZo=o("The model class to instantiate is selected based on the "),_ue=a("code"),rZo=o("model_type"),tZo=o(` property of the config object (either
passed as an argument or loaded from `),bue=a("code"),aZo=o("pretrained_model_name_or_path"),nZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=a("code"),sZo=o("pretrained_model_name_or_path"),lZo=o(":"),iZo=l(),wd=a("ul"),VF=a("li"),Fue=a("strong"),dZo=o("deit"),cZo=o(" \u2014 "),wX=a("a"),fZo=o("DeiTForMaskedImageModeling"),mZo=o(" (DeiT model)"),gZo=l(),XF=a("li"),Tue=a("strong"),hZo=o("swin"),pZo=o(" \u2014 "),AX=a("a"),uZo=o("SwinForMaskedImageModeling"),_Zo=o(" (Swin model)"),bZo=l(),zF=a("li"),Mue=a("strong"),vZo=o("vit"),FZo=o(" \u2014 "),yX=a("a"),TZo=o("ViTForMaskedImageModeling"),MZo=o(" (ViT model)"),EZo=l(),QF=a("p"),CZo=o("The model is set in evaluation mode by default using "),Eue=a("code"),wZo=o("model.eval()"),AZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cue=a("code"),yZo=o("model.train()"),LZo=l(),F(WF.$$.fragment),xIe=l(),Ad=a("h2"),HF=a("a"),wue=a("span"),F(iy.$$.fragment),xZo=l(),Aue=a("span"),$Zo=o("AutoModelForObjectDetection"),$Ie=l(),Wo=a("div"),F(dy.$$.fragment),kZo=l(),yd=a("p"),SZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),LX=a("a"),RZo=o("from_pretrained()"),PZo=o(" class method or the "),xX=a("a"),BZo=o("from_config()"),IZo=o(` class
method.`),qZo=l(),cy=a("p"),NZo=o("This class cannot be instantiated directly using "),yue=a("code"),jZo=o("__init__()"),DZo=o(" (throws an error)."),GZo=l(),Tt=a("div"),F(fy.$$.fragment),OZo=l(),Lue=a("p"),VZo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),XZo=l(),Ld=a("p"),zZo=o(`Note:
Loading a model from its configuration file does `),xue=a("strong"),QZo=o("not"),WZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),HZo=o("from_pretrained()"),UZo=o(" to load the model weights."),JZo=l(),F(UF.$$.fragment),YZo=l(),ho=a("div"),F(my.$$.fragment),KZo=l(),$ue=a("p"),ZZo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),eer=l(),Wa=a("p"),oer=o("The model class to instantiate is selected based on the "),kue=a("code"),rer=o("model_type"),ter=o(` property of the config object (either
passed as an argument or loaded from `),Sue=a("code"),aer=o("pretrained_model_name_or_path"),ner=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=a("code"),ser=o("pretrained_model_name_or_path"),ler=o(":"),ier=l(),gy=a("ul"),JF=a("li"),Pue=a("strong"),der=o("detr"),cer=o(" \u2014 "),kX=a("a"),fer=o("DetrForObjectDetection"),mer=o(" (DETR model)"),ger=l(),YF=a("li"),Bue=a("strong"),her=o("yolos"),per=o(" \u2014 "),SX=a("a"),uer=o("YolosForObjectDetection"),_er=o(" (YOLOS model)"),ber=l(),KF=a("p"),ver=o("The model is set in evaluation mode by default using "),Iue=a("code"),Fer=o("model.eval()"),Ter=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=a("code"),Mer=o("model.train()"),Eer=l(),F(ZF.$$.fragment),kIe=l(),xd=a("h2"),e0=a("a"),Nue=a("span"),F(hy.$$.fragment),Cer=l(),jue=a("span"),wer=o("AutoModelForImageSegmentation"),SIe=l(),Ho=a("div"),F(py.$$.fragment),Aer=l(),$d=a("p"),yer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),RX=a("a"),Ler=o("from_pretrained()"),xer=o(" class method or the "),PX=a("a"),$er=o("from_config()"),ker=o(` class
method.`),Ser=l(),uy=a("p"),Rer=o("This class cannot be instantiated directly using "),Due=a("code"),Per=o("__init__()"),Ber=o(" (throws an error)."),Ier=l(),Mt=a("div"),F(_y.$$.fragment),qer=l(),Gue=a("p"),Ner=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),jer=l(),kd=a("p"),Der=o(`Note:
Loading a model from its configuration file does `),Oue=a("strong"),Ger=o("not"),Oer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BX=a("a"),Ver=o("from_pretrained()"),Xer=o(" to load the model weights."),zer=l(),F(o0.$$.fragment),Qer=l(),po=a("div"),F(by.$$.fragment),Wer=l(),Vue=a("p"),Her=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Uer=l(),Ha=a("p"),Jer=o("The model class to instantiate is selected based on the "),Xue=a("code"),Yer=o("model_type"),Ker=o(` property of the config object (either
passed as an argument or loaded from `),zue=a("code"),Zer=o("pretrained_model_name_or_path"),eor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=a("code"),oor=o("pretrained_model_name_or_path"),ror=o(":"),tor=l(),Wue=a("ul"),r0=a("li"),Hue=a("strong"),aor=o("detr"),nor=o(" \u2014 "),IX=a("a"),sor=o("DetrForSegmentation"),lor=o(" (DETR model)"),ior=l(),t0=a("p"),dor=o("The model is set in evaluation mode by default using "),Uue=a("code"),cor=o("model.eval()"),mor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jue=a("code"),gor=o("model.train()"),hor=l(),F(a0.$$.fragment),RIe=l(),Sd=a("h2"),n0=a("a"),Yue=a("span"),F(vy.$$.fragment),por=l(),Kue=a("span"),uor=o("AutoModelForSemanticSegmentation"),PIe=l(),Uo=a("div"),F(Fy.$$.fragment),_or=l(),Rd=a("p"),bor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),qX=a("a"),vor=o("from_pretrained()"),For=o(" class method or the "),NX=a("a"),Tor=o("from_config()"),Mor=o(` class
method.`),Eor=l(),Ty=a("p"),Cor=o("This class cannot be instantiated directly using "),Zue=a("code"),wor=o("__init__()"),Aor=o(" (throws an error)."),yor=l(),Et=a("div"),F(My.$$.fragment),Lor=l(),e_e=a("p"),xor=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),$or=l(),Pd=a("p"),kor=o(`Note:
Loading a model from its configuration file does `),o_e=a("strong"),Sor=o("not"),Ror=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=a("a"),Por=o("from_pretrained()"),Bor=o(" to load the model weights."),Ior=l(),F(s0.$$.fragment),qor=l(),uo=a("div"),F(Ey.$$.fragment),Nor=l(),r_e=a("p"),jor=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Dor=l(),Ua=a("p"),Gor=o("The model class to instantiate is selected based on the "),t_e=a("code"),Oor=o("model_type"),Vor=o(` property of the config object (either
passed as an argument or loaded from `),a_e=a("code"),Xor=o("pretrained_model_name_or_path"),zor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=a("code"),Qor=o("pretrained_model_name_or_path"),Wor=o(":"),Hor=l(),Ja=a("ul"),l0=a("li"),s_e=a("strong"),Uor=o("beit"),Jor=o(" \u2014 "),DX=a("a"),Yor=o("BeitForSemanticSegmentation"),Kor=o(" (BEiT model)"),Zor=l(),i0=a("li"),l_e=a("strong"),err=o("data2vec-vision"),orr=o(" \u2014 "),GX=a("a"),rrr=o("Data2VecVisionForSemanticSegmentation"),trr=o(" (Data2VecVision model)"),arr=l(),d0=a("li"),i_e=a("strong"),nrr=o("dpt"),srr=o(" \u2014 "),OX=a("a"),lrr=o("DPTForSemanticSegmentation"),irr=o(" (DPT model)"),drr=l(),c0=a("li"),d_e=a("strong"),crr=o("segformer"),frr=o(" \u2014 "),VX=a("a"),mrr=o("SegformerForSemanticSegmentation"),grr=o(" (SegFormer model)"),hrr=l(),f0=a("p"),prr=o("The model is set in evaluation mode by default using "),c_e=a("code"),urr=o("model.eval()"),_rr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=a("code"),brr=o("model.train()"),vrr=l(),F(m0.$$.fragment),BIe=l(),Bd=a("h2"),g0=a("a"),m_e=a("span"),F(Cy.$$.fragment),Frr=l(),g_e=a("span"),Trr=o("AutoModelForInstanceSegmentation"),IIe=l(),Jo=a("div"),F(wy.$$.fragment),Mrr=l(),Id=a("p"),Err=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),XX=a("a"),Crr=o("from_pretrained()"),wrr=o(" class method or the "),zX=a("a"),Arr=o("from_config()"),yrr=o(` class
method.`),Lrr=l(),Ay=a("p"),xrr=o("This class cannot be instantiated directly using "),h_e=a("code"),$rr=o("__init__()"),krr=o(" (throws an error)."),Srr=l(),Ct=a("div"),F(yy.$$.fragment),Rrr=l(),p_e=a("p"),Prr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Brr=l(),qd=a("p"),Irr=o(`Note:
Loading a model from its configuration file does `),u_e=a("strong"),qrr=o("not"),Nrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),jrr=o("from_pretrained()"),Drr=o(" to load the model weights."),Grr=l(),F(h0.$$.fragment),Orr=l(),_o=a("div"),F(Ly.$$.fragment),Vrr=l(),__e=a("p"),Xrr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),zrr=l(),Ya=a("p"),Qrr=o("The model class to instantiate is selected based on the "),b_e=a("code"),Wrr=o("model_type"),Hrr=o(` property of the config object (either
passed as an argument or loaded from `),v_e=a("code"),Urr=o("pretrained_model_name_or_path"),Jrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=a("code"),Yrr=o("pretrained_model_name_or_path"),Krr=o(":"),Zrr=l(),T_e=a("ul"),p0=a("li"),M_e=a("strong"),etr=o("maskformer"),otr=o(" \u2014 "),WX=a("a"),rtr=o("MaskFormerForInstanceSegmentation"),ttr=o(" (MaskFormer model)"),atr=l(),u0=a("p"),ntr=o("The model is set in evaluation mode by default using "),E_e=a("code"),str=o("model.eval()"),ltr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=a("code"),itr=o("model.train()"),dtr=l(),F(_0.$$.fragment),qIe=l(),Nd=a("h2"),b0=a("a"),w_e=a("span"),F(xy.$$.fragment),ctr=l(),A_e=a("span"),ftr=o("TFAutoModel"),NIe=l(),Yo=a("div"),F($y.$$.fragment),mtr=l(),jd=a("p"),gtr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HX=a("a"),htr=o("from_pretrained()"),ptr=o(" class method or the "),UX=a("a"),utr=o("from_config()"),_tr=o(` class
method.`),btr=l(),ky=a("p"),vtr=o("This class cannot be instantiated directly using "),y_e=a("code"),Ftr=o("__init__()"),Ttr=o(" (throws an error)."),Mtr=l(),wt=a("div"),F(Sy.$$.fragment),Etr=l(),L_e=a("p"),Ctr=o("Instantiates one of the base model classes of the library from a configuration."),wtr=l(),Dd=a("p"),Atr=o(`Note:
Loading a model from its configuration file does `),x_e=a("strong"),ytr=o("not"),Ltr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=a("a"),xtr=o("from_pretrained()"),$tr=o(" to load the model weights."),ktr=l(),F(v0.$$.fragment),Str=l(),wr=a("div"),F(Ry.$$.fragment),Rtr=l(),$_e=a("p"),Ptr=o("Instantiate one of the base model classes of the library from a pretrained model."),Btr=l(),Ka=a("p"),Itr=o("The model class to instantiate is selected based on the "),k_e=a("code"),qtr=o("model_type"),Ntr=o(` property of the config object (either
passed as an argument or loaded from `),S_e=a("code"),jtr=o("pretrained_model_name_or_path"),Dtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=a("code"),Gtr=o("pretrained_model_name_or_path"),Otr=o(":"),Vtr=l(),N=a("ul"),F0=a("li"),P_e=a("strong"),Xtr=o("albert"),ztr=o(" \u2014 "),YX=a("a"),Qtr=o("TFAlbertModel"),Wtr=o(" (ALBERT model)"),Htr=l(),T0=a("li"),B_e=a("strong"),Utr=o("bart"),Jtr=o(" \u2014 "),KX=a("a"),Ytr=o("TFBartModel"),Ktr=o(" (BART model)"),Ztr=l(),M0=a("li"),I_e=a("strong"),ear=o("bert"),oar=o(" \u2014 "),ZX=a("a"),rar=o("TFBertModel"),tar=o(" (BERT model)"),aar=l(),E0=a("li"),q_e=a("strong"),nar=o("blenderbot"),sar=o(" \u2014 "),ez=a("a"),lar=o("TFBlenderbotModel"),iar=o(" (Blenderbot model)"),dar=l(),C0=a("li"),N_e=a("strong"),car=o("blenderbot-small"),far=o(" \u2014 "),oz=a("a"),mar=o("TFBlenderbotSmallModel"),gar=o(" (BlenderbotSmall model)"),har=l(),w0=a("li"),j_e=a("strong"),par=o("camembert"),uar=o(" \u2014 "),rz=a("a"),_ar=o("TFCamembertModel"),bar=o(" (CamemBERT model)"),Far=l(),A0=a("li"),D_e=a("strong"),Tar=o("clip"),Mar=o(" \u2014 "),tz=a("a"),Ear=o("TFCLIPModel"),Car=o(" (CLIP model)"),war=l(),y0=a("li"),G_e=a("strong"),Aar=o("convbert"),yar=o(" \u2014 "),az=a("a"),Lar=o("TFConvBertModel"),xar=o(" (ConvBERT model)"),$ar=l(),L0=a("li"),O_e=a("strong"),kar=o("convnext"),Sar=o(" \u2014 "),nz=a("a"),Rar=o("TFConvNextModel"),Par=o(" (ConvNext model)"),Bar=l(),x0=a("li"),V_e=a("strong"),Iar=o("ctrl"),qar=o(" \u2014 "),sz=a("a"),Nar=o("TFCTRLModel"),jar=o(" (CTRL model)"),Dar=l(),$0=a("li"),X_e=a("strong"),Gar=o("data2vec-vision"),Oar=o(" \u2014 "),lz=a("a"),Var=o("TFData2VecVisionModel"),Xar=o(" (Data2VecVision model)"),zar=l(),k0=a("li"),z_e=a("strong"),Qar=o("deberta"),War=o(" \u2014 "),iz=a("a"),Har=o("TFDebertaModel"),Uar=o(" (DeBERTa model)"),Jar=l(),S0=a("li"),Q_e=a("strong"),Yar=o("deberta-v2"),Kar=o(" \u2014 "),dz=a("a"),Zar=o("TFDebertaV2Model"),enr=o(" (DeBERTa-v2 model)"),onr=l(),R0=a("li"),W_e=a("strong"),rnr=o("distilbert"),tnr=o(" \u2014 "),cz=a("a"),anr=o("TFDistilBertModel"),nnr=o(" (DistilBERT model)"),snr=l(),P0=a("li"),H_e=a("strong"),lnr=o("dpr"),inr=o(" \u2014 "),fz=a("a"),dnr=o("TFDPRQuestionEncoder"),cnr=o(" (DPR model)"),fnr=l(),B0=a("li"),U_e=a("strong"),mnr=o("electra"),gnr=o(" \u2014 "),mz=a("a"),hnr=o("TFElectraModel"),pnr=o(" (ELECTRA model)"),unr=l(),I0=a("li"),J_e=a("strong"),_nr=o("flaubert"),bnr=o(" \u2014 "),gz=a("a"),vnr=o("TFFlaubertModel"),Fnr=o(" (FlauBERT model)"),Tnr=l(),Bs=a("li"),Y_e=a("strong"),Mnr=o("funnel"),Enr=o(" \u2014 "),hz=a("a"),Cnr=o("TFFunnelModel"),wnr=o(" or "),pz=a("a"),Anr=o("TFFunnelBaseModel"),ynr=o(" (Funnel Transformer model)"),Lnr=l(),q0=a("li"),K_e=a("strong"),xnr=o("gpt2"),$nr=o(" \u2014 "),uz=a("a"),knr=o("TFGPT2Model"),Snr=o(" (OpenAI GPT-2 model)"),Rnr=l(),N0=a("li"),Z_e=a("strong"),Pnr=o("gptj"),Bnr=o(" \u2014 "),_z=a("a"),Inr=o("TFGPTJModel"),qnr=o(" (GPT-J model)"),Nnr=l(),j0=a("li"),e1e=a("strong"),jnr=o("hubert"),Dnr=o(" \u2014 "),bz=a("a"),Gnr=o("TFHubertModel"),Onr=o(" (Hubert model)"),Vnr=l(),D0=a("li"),o1e=a("strong"),Xnr=o("layoutlm"),znr=o(" \u2014 "),vz=a("a"),Qnr=o("TFLayoutLMModel"),Wnr=o(" (LayoutLM model)"),Hnr=l(),G0=a("li"),r1e=a("strong"),Unr=o("led"),Jnr=o(" \u2014 "),Fz=a("a"),Ynr=o("TFLEDModel"),Knr=o(" (LED model)"),Znr=l(),O0=a("li"),t1e=a("strong"),esr=o("longformer"),osr=o(" \u2014 "),Tz=a("a"),rsr=o("TFLongformerModel"),tsr=o(" (Longformer model)"),asr=l(),V0=a("li"),a1e=a("strong"),nsr=o("lxmert"),ssr=o(" \u2014 "),Mz=a("a"),lsr=o("TFLxmertModel"),isr=o(" (LXMERT model)"),dsr=l(),X0=a("li"),n1e=a("strong"),csr=o("marian"),fsr=o(" \u2014 "),Ez=a("a"),msr=o("TFMarianModel"),gsr=o(" (Marian model)"),hsr=l(),z0=a("li"),s1e=a("strong"),psr=o("mbart"),usr=o(" \u2014 "),Cz=a("a"),_sr=o("TFMBartModel"),bsr=o(" (mBART model)"),vsr=l(),Q0=a("li"),l1e=a("strong"),Fsr=o("mobilebert"),Tsr=o(" \u2014 "),wz=a("a"),Msr=o("TFMobileBertModel"),Esr=o(" (MobileBERT model)"),Csr=l(),W0=a("li"),i1e=a("strong"),wsr=o("mpnet"),Asr=o(" \u2014 "),Az=a("a"),ysr=o("TFMPNetModel"),Lsr=o(" (MPNet model)"),xsr=l(),H0=a("li"),d1e=a("strong"),$sr=o("mt5"),ksr=o(" \u2014 "),yz=a("a"),Ssr=o("TFMT5Model"),Rsr=o(" (mT5 model)"),Psr=l(),U0=a("li"),c1e=a("strong"),Bsr=o("openai-gpt"),Isr=o(" \u2014 "),Lz=a("a"),qsr=o("TFOpenAIGPTModel"),Nsr=o(" (OpenAI GPT model)"),jsr=l(),J0=a("li"),f1e=a("strong"),Dsr=o("opt"),Gsr=o(" \u2014 "),xz=a("a"),Osr=o("TFOPTModel"),Vsr=o(" (OPT model)"),Xsr=l(),Y0=a("li"),m1e=a("strong"),zsr=o("pegasus"),Qsr=o(" \u2014 "),$z=a("a"),Wsr=o("TFPegasusModel"),Hsr=o(" (Pegasus model)"),Usr=l(),K0=a("li"),g1e=a("strong"),Jsr=o("rembert"),Ysr=o(" \u2014 "),kz=a("a"),Ksr=o("TFRemBertModel"),Zsr=o(" (RemBERT model)"),elr=l(),Z0=a("li"),h1e=a("strong"),olr=o("roberta"),rlr=o(" \u2014 "),Sz=a("a"),tlr=o("TFRobertaModel"),alr=o(" (RoBERTa model)"),nlr=l(),eT=a("li"),p1e=a("strong"),slr=o("roformer"),llr=o(" \u2014 "),Rz=a("a"),ilr=o("TFRoFormerModel"),dlr=o(" (RoFormer model)"),clr=l(),oT=a("li"),u1e=a("strong"),flr=o("speech_to_text"),mlr=o(" \u2014 "),Pz=a("a"),glr=o("TFSpeech2TextModel"),hlr=o(" (Speech2Text model)"),plr=l(),rT=a("li"),_1e=a("strong"),ulr=o("t5"),_lr=o(" \u2014 "),Bz=a("a"),blr=o("TFT5Model"),vlr=o(" (T5 model)"),Flr=l(),tT=a("li"),b1e=a("strong"),Tlr=o("tapas"),Mlr=o(" \u2014 "),Iz=a("a"),Elr=o("TFTapasModel"),Clr=o(" (TAPAS model)"),wlr=l(),aT=a("li"),v1e=a("strong"),Alr=o("transfo-xl"),ylr=o(" \u2014 "),qz=a("a"),Llr=o("TFTransfoXLModel"),xlr=o(" (Transformer-XL model)"),$lr=l(),nT=a("li"),F1e=a("strong"),klr=o("vit"),Slr=o(" \u2014 "),Nz=a("a"),Rlr=o("TFViTModel"),Plr=o(" (ViT model)"),Blr=l(),sT=a("li"),T1e=a("strong"),Ilr=o("vit_mae"),qlr=o(" \u2014 "),jz=a("a"),Nlr=o("TFViTMAEModel"),jlr=o(" (ViTMAE model)"),Dlr=l(),lT=a("li"),M1e=a("strong"),Glr=o("wav2vec2"),Olr=o(" \u2014 "),Dz=a("a"),Vlr=o("TFWav2Vec2Model"),Xlr=o(" (Wav2Vec2 model)"),zlr=l(),iT=a("li"),E1e=a("strong"),Qlr=o("xlm"),Wlr=o(" \u2014 "),Gz=a("a"),Hlr=o("TFXLMModel"),Ulr=o(" (XLM model)"),Jlr=l(),dT=a("li"),C1e=a("strong"),Ylr=o("xlm-roberta"),Klr=o(" \u2014 "),Oz=a("a"),Zlr=o("TFXLMRobertaModel"),eir=o(" (XLM-RoBERTa model)"),oir=l(),cT=a("li"),w1e=a("strong"),rir=o("xlnet"),tir=o(" \u2014 "),Vz=a("a"),air=o("TFXLNetModel"),nir=o(" (XLNet model)"),sir=l(),F(fT.$$.fragment),jIe=l(),Gd=a("h2"),mT=a("a"),A1e=a("span"),F(Py.$$.fragment),lir=l(),y1e=a("span"),iir=o("TFAutoModelForPreTraining"),DIe=l(),Ko=a("div"),F(By.$$.fragment),dir=l(),Od=a("p"),cir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Xz=a("a"),fir=o("from_pretrained()"),mir=o(" class method or the "),zz=a("a"),gir=o("from_config()"),hir=o(` class
method.`),pir=l(),Iy=a("p"),uir=o("This class cannot be instantiated directly using "),L1e=a("code"),_ir=o("__init__()"),bir=o(" (throws an error)."),vir=l(),At=a("div"),F(qy.$$.fragment),Fir=l(),x1e=a("p"),Tir=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Mir=l(),Vd=a("p"),Eir=o(`Note:
Loading a model from its configuration file does `),$1e=a("strong"),Cir=o("not"),wir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),Air=o("from_pretrained()"),yir=o(" to load the model weights."),Lir=l(),F(gT.$$.fragment),xir=l(),Ar=a("div"),F(Ny.$$.fragment),$ir=l(),k1e=a("p"),kir=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Sir=l(),Za=a("p"),Rir=o("The model class to instantiate is selected based on the "),S1e=a("code"),Pir=o("model_type"),Bir=o(` property of the config object (either
passed as an argument or loaded from `),R1e=a("code"),Iir=o("pretrained_model_name_or_path"),qir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=a("code"),Nir=o("pretrained_model_name_or_path"),jir=o(":"),Dir=l(),ne=a("ul"),hT=a("li"),B1e=a("strong"),Gir=o("albert"),Oir=o(" \u2014 "),Wz=a("a"),Vir=o("TFAlbertForPreTraining"),Xir=o(" (ALBERT model)"),zir=l(),pT=a("li"),I1e=a("strong"),Qir=o("bart"),Wir=o(" \u2014 "),Hz=a("a"),Hir=o("TFBartForConditionalGeneration"),Uir=o(" (BART model)"),Jir=l(),uT=a("li"),q1e=a("strong"),Yir=o("bert"),Kir=o(" \u2014 "),Uz=a("a"),Zir=o("TFBertForPreTraining"),edr=o(" (BERT model)"),odr=l(),_T=a("li"),N1e=a("strong"),rdr=o("camembert"),tdr=o(" \u2014 "),Jz=a("a"),adr=o("TFCamembertForMaskedLM"),ndr=o(" (CamemBERT model)"),sdr=l(),bT=a("li"),j1e=a("strong"),ldr=o("ctrl"),idr=o(" \u2014 "),Yz=a("a"),ddr=o("TFCTRLLMHeadModel"),cdr=o(" (CTRL model)"),fdr=l(),vT=a("li"),D1e=a("strong"),mdr=o("distilbert"),gdr=o(" \u2014 "),Kz=a("a"),hdr=o("TFDistilBertForMaskedLM"),pdr=o(" (DistilBERT model)"),udr=l(),FT=a("li"),G1e=a("strong"),_dr=o("electra"),bdr=o(" \u2014 "),Zz=a("a"),vdr=o("TFElectraForPreTraining"),Fdr=o(" (ELECTRA model)"),Tdr=l(),TT=a("li"),O1e=a("strong"),Mdr=o("flaubert"),Edr=o(" \u2014 "),eQ=a("a"),Cdr=o("TFFlaubertWithLMHeadModel"),wdr=o(" (FlauBERT model)"),Adr=l(),MT=a("li"),V1e=a("strong"),ydr=o("funnel"),Ldr=o(" \u2014 "),oQ=a("a"),xdr=o("TFFunnelForPreTraining"),$dr=o(" (Funnel Transformer model)"),kdr=l(),ET=a("li"),X1e=a("strong"),Sdr=o("gpt2"),Rdr=o(" \u2014 "),rQ=a("a"),Pdr=o("TFGPT2LMHeadModel"),Bdr=o(" (OpenAI GPT-2 model)"),Idr=l(),CT=a("li"),z1e=a("strong"),qdr=o("layoutlm"),Ndr=o(" \u2014 "),tQ=a("a"),jdr=o("TFLayoutLMForMaskedLM"),Ddr=o(" (LayoutLM model)"),Gdr=l(),wT=a("li"),Q1e=a("strong"),Odr=o("lxmert"),Vdr=o(" \u2014 "),aQ=a("a"),Xdr=o("TFLxmertForPreTraining"),zdr=o(" (LXMERT model)"),Qdr=l(),AT=a("li"),W1e=a("strong"),Wdr=o("mobilebert"),Hdr=o(" \u2014 "),nQ=a("a"),Udr=o("TFMobileBertForPreTraining"),Jdr=o(" (MobileBERT model)"),Ydr=l(),yT=a("li"),H1e=a("strong"),Kdr=o("mpnet"),Zdr=o(" \u2014 "),sQ=a("a"),ecr=o("TFMPNetForMaskedLM"),ocr=o(" (MPNet model)"),rcr=l(),LT=a("li"),U1e=a("strong"),tcr=o("openai-gpt"),acr=o(" \u2014 "),lQ=a("a"),ncr=o("TFOpenAIGPTLMHeadModel"),scr=o(" (OpenAI GPT model)"),lcr=l(),xT=a("li"),J1e=a("strong"),icr=o("roberta"),dcr=o(" \u2014 "),iQ=a("a"),ccr=o("TFRobertaForMaskedLM"),fcr=o(" (RoBERTa model)"),mcr=l(),$T=a("li"),Y1e=a("strong"),gcr=o("t5"),hcr=o(" \u2014 "),dQ=a("a"),pcr=o("TFT5ForConditionalGeneration"),ucr=o(" (T5 model)"),_cr=l(),kT=a("li"),K1e=a("strong"),bcr=o("tapas"),vcr=o(" \u2014 "),cQ=a("a"),Fcr=o("TFTapasForMaskedLM"),Tcr=o(" (TAPAS model)"),Mcr=l(),ST=a("li"),Z1e=a("strong"),Ecr=o("transfo-xl"),Ccr=o(" \u2014 "),fQ=a("a"),wcr=o("TFTransfoXLLMHeadModel"),Acr=o(" (Transformer-XL model)"),ycr=l(),RT=a("li"),e8e=a("strong"),Lcr=o("vit_mae"),xcr=o(" \u2014 "),mQ=a("a"),$cr=o("TFViTMAEForPreTraining"),kcr=o(" (ViTMAE model)"),Scr=l(),PT=a("li"),o8e=a("strong"),Rcr=o("xlm"),Pcr=o(" \u2014 "),gQ=a("a"),Bcr=o("TFXLMWithLMHeadModel"),Icr=o(" (XLM model)"),qcr=l(),BT=a("li"),r8e=a("strong"),Ncr=o("xlm-roberta"),jcr=o(" \u2014 "),hQ=a("a"),Dcr=o("TFXLMRobertaForMaskedLM"),Gcr=o(" (XLM-RoBERTa model)"),Ocr=l(),IT=a("li"),t8e=a("strong"),Vcr=o("xlnet"),Xcr=o(" \u2014 "),pQ=a("a"),zcr=o("TFXLNetLMHeadModel"),Qcr=o(" (XLNet model)"),Wcr=l(),F(qT.$$.fragment),GIe=l(),Xd=a("h2"),NT=a("a"),a8e=a("span"),F(jy.$$.fragment),Hcr=l(),n8e=a("span"),Ucr=o("TFAutoModelForCausalLM"),OIe=l(),Zo=a("div"),F(Dy.$$.fragment),Jcr=l(),zd=a("p"),Ycr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uQ=a("a"),Kcr=o("from_pretrained()"),Zcr=o(" class method or the "),_Q=a("a"),efr=o("from_config()"),ofr=o(` class
method.`),rfr=l(),Gy=a("p"),tfr=o("This class cannot be instantiated directly using "),s8e=a("code"),afr=o("__init__()"),nfr=o(" (throws an error)."),sfr=l(),yt=a("div"),F(Oy.$$.fragment),lfr=l(),l8e=a("p"),ifr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dfr=l(),Qd=a("p"),cfr=o(`Note:
Loading a model from its configuration file does `),i8e=a("strong"),ffr=o("not"),mfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),gfr=o("from_pretrained()"),hfr=o(" to load the model weights."),pfr=l(),F(jT.$$.fragment),ufr=l(),yr=a("div"),F(Vy.$$.fragment),_fr=l(),d8e=a("p"),bfr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vfr=l(),en=a("p"),Ffr=o("The model class to instantiate is selected based on the "),c8e=a("code"),Tfr=o("model_type"),Mfr=o(` property of the config object (either
passed as an argument or loaded from `),f8e=a("code"),Efr=o("pretrained_model_name_or_path"),Cfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m8e=a("code"),wfr=o("pretrained_model_name_or_path"),Afr=o(":"),yfr=l(),Te=a("ul"),DT=a("li"),g8e=a("strong"),Lfr=o("bert"),xfr=o(" \u2014 "),vQ=a("a"),$fr=o("TFBertLMHeadModel"),kfr=o(" (BERT model)"),Sfr=l(),GT=a("li"),h8e=a("strong"),Rfr=o("camembert"),Pfr=o(" \u2014 "),FQ=a("a"),Bfr=o("TFCamembertForCausalLM"),Ifr=o(" (CamemBERT model)"),qfr=l(),OT=a("li"),p8e=a("strong"),Nfr=o("ctrl"),jfr=o(" \u2014 "),TQ=a("a"),Dfr=o("TFCTRLLMHeadModel"),Gfr=o(" (CTRL model)"),Ofr=l(),VT=a("li"),u8e=a("strong"),Vfr=o("gpt2"),Xfr=o(" \u2014 "),MQ=a("a"),zfr=o("TFGPT2LMHeadModel"),Qfr=o(" (OpenAI GPT-2 model)"),Wfr=l(),XT=a("li"),_8e=a("strong"),Hfr=o("gptj"),Ufr=o(" \u2014 "),EQ=a("a"),Jfr=o("TFGPTJForCausalLM"),Yfr=o(" (GPT-J model)"),Kfr=l(),zT=a("li"),b8e=a("strong"),Zfr=o("openai-gpt"),emr=o(" \u2014 "),CQ=a("a"),omr=o("TFOpenAIGPTLMHeadModel"),rmr=o(" (OpenAI GPT model)"),tmr=l(),QT=a("li"),v8e=a("strong"),amr=o("rembert"),nmr=o(" \u2014 "),wQ=a("a"),smr=o("TFRemBertForCausalLM"),lmr=o(" (RemBERT model)"),imr=l(),WT=a("li"),F8e=a("strong"),dmr=o("roberta"),cmr=o(" \u2014 "),AQ=a("a"),fmr=o("TFRobertaForCausalLM"),mmr=o(" (RoBERTa model)"),gmr=l(),HT=a("li"),T8e=a("strong"),hmr=o("roformer"),pmr=o(" \u2014 "),yQ=a("a"),umr=o("TFRoFormerForCausalLM"),_mr=o(" (RoFormer model)"),bmr=l(),UT=a("li"),M8e=a("strong"),vmr=o("transfo-xl"),Fmr=o(" \u2014 "),LQ=a("a"),Tmr=o("TFTransfoXLLMHeadModel"),Mmr=o(" (Transformer-XL model)"),Emr=l(),JT=a("li"),E8e=a("strong"),Cmr=o("xlm"),wmr=o(" \u2014 "),xQ=a("a"),Amr=o("TFXLMWithLMHeadModel"),ymr=o(" (XLM model)"),Lmr=l(),YT=a("li"),C8e=a("strong"),xmr=o("xlnet"),$mr=o(" \u2014 "),$Q=a("a"),kmr=o("TFXLNetLMHeadModel"),Smr=o(" (XLNet model)"),Rmr=l(),F(KT.$$.fragment),VIe=l(),Wd=a("h2"),ZT=a("a"),w8e=a("span"),F(Xy.$$.fragment),Pmr=l(),A8e=a("span"),Bmr=o("TFAutoModelForImageClassification"),XIe=l(),er=a("div"),F(zy.$$.fragment),Imr=l(),Hd=a("p"),qmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kQ=a("a"),Nmr=o("from_pretrained()"),jmr=o(" class method or the "),SQ=a("a"),Dmr=o("from_config()"),Gmr=o(` class
method.`),Omr=l(),Qy=a("p"),Vmr=o("This class cannot be instantiated directly using "),y8e=a("code"),Xmr=o("__init__()"),zmr=o(" (throws an error)."),Qmr=l(),Lt=a("div"),F(Wy.$$.fragment),Wmr=l(),L8e=a("p"),Hmr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Umr=l(),Ud=a("p"),Jmr=o(`Note:
Loading a model from its configuration file does `),x8e=a("strong"),Ymr=o("not"),Kmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),Zmr=o("from_pretrained()"),egr=o(" to load the model weights."),ogr=l(),F(e7.$$.fragment),rgr=l(),Lr=a("div"),F(Hy.$$.fragment),tgr=l(),$8e=a("p"),agr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ngr=l(),on=a("p"),sgr=o("The model class to instantiate is selected based on the "),k8e=a("code"),lgr=o("model_type"),igr=o(` property of the config object (either
passed as an argument or loaded from `),S8e=a("code"),dgr=o("pretrained_model_name_or_path"),cgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R8e=a("code"),fgr=o("pretrained_model_name_or_path"),mgr=o(":"),ggr=l(),Jd=a("ul"),o7=a("li"),P8e=a("strong"),hgr=o("convnext"),pgr=o(" \u2014 "),PQ=a("a"),ugr=o("TFConvNextForImageClassification"),_gr=o(" (ConvNext model)"),bgr=l(),r7=a("li"),B8e=a("strong"),vgr=o("data2vec-vision"),Fgr=o(" \u2014 "),BQ=a("a"),Tgr=o("TFData2VecVisionForImageClassification"),Mgr=o(" (Data2VecVision model)"),Egr=l(),t7=a("li"),I8e=a("strong"),Cgr=o("vit"),wgr=o(" \u2014 "),IQ=a("a"),Agr=o("TFViTForImageClassification"),ygr=o(" (ViT model)"),Lgr=l(),F(a7.$$.fragment),zIe=l(),Yd=a("h2"),n7=a("a"),q8e=a("span"),F(Uy.$$.fragment),xgr=l(),N8e=a("span"),$gr=o("TFAutoModelForMaskedLM"),QIe=l(),or=a("div"),F(Jy.$$.fragment),kgr=l(),Kd=a("p"),Sgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qQ=a("a"),Rgr=o("from_pretrained()"),Pgr=o(" class method or the "),NQ=a("a"),Bgr=o("from_config()"),Igr=o(` class
method.`),qgr=l(),Yy=a("p"),Ngr=o("This class cannot be instantiated directly using "),j8e=a("code"),jgr=o("__init__()"),Dgr=o(" (throws an error)."),Ggr=l(),xt=a("div"),F(Ky.$$.fragment),Ogr=l(),D8e=a("p"),Vgr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Xgr=l(),Zd=a("p"),zgr=o(`Note:
Loading a model from its configuration file does `),G8e=a("strong"),Qgr=o("not"),Wgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=a("a"),Hgr=o("from_pretrained()"),Ugr=o(" to load the model weights."),Jgr=l(),F(s7.$$.fragment),Ygr=l(),xr=a("div"),F(Zy.$$.fragment),Kgr=l(),O8e=a("p"),Zgr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ehr=l(),rn=a("p"),ohr=o("The model class to instantiate is selected based on the "),V8e=a("code"),rhr=o("model_type"),thr=o(` property of the config object (either
passed as an argument or loaded from `),X8e=a("code"),ahr=o("pretrained_model_name_or_path"),nhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z8e=a("code"),shr=o("pretrained_model_name_or_path"),lhr=o(":"),ihr=l(),ie=a("ul"),l7=a("li"),Q8e=a("strong"),dhr=o("albert"),chr=o(" \u2014 "),DQ=a("a"),fhr=o("TFAlbertForMaskedLM"),mhr=o(" (ALBERT model)"),ghr=l(),i7=a("li"),W8e=a("strong"),hhr=o("bert"),phr=o(" \u2014 "),GQ=a("a"),uhr=o("TFBertForMaskedLM"),_hr=o(" (BERT model)"),bhr=l(),d7=a("li"),H8e=a("strong"),vhr=o("camembert"),Fhr=o(" \u2014 "),OQ=a("a"),Thr=o("TFCamembertForMaskedLM"),Mhr=o(" (CamemBERT model)"),Ehr=l(),c7=a("li"),U8e=a("strong"),Chr=o("convbert"),whr=o(" \u2014 "),VQ=a("a"),Ahr=o("TFConvBertForMaskedLM"),yhr=o(" (ConvBERT model)"),Lhr=l(),f7=a("li"),J8e=a("strong"),xhr=o("deberta"),$hr=o(" \u2014 "),XQ=a("a"),khr=o("TFDebertaForMaskedLM"),Shr=o(" (DeBERTa model)"),Rhr=l(),m7=a("li"),Y8e=a("strong"),Phr=o("deberta-v2"),Bhr=o(" \u2014 "),zQ=a("a"),Ihr=o("TFDebertaV2ForMaskedLM"),qhr=o(" (DeBERTa-v2 model)"),Nhr=l(),g7=a("li"),K8e=a("strong"),jhr=o("distilbert"),Dhr=o(" \u2014 "),QQ=a("a"),Ghr=o("TFDistilBertForMaskedLM"),Ohr=o(" (DistilBERT model)"),Vhr=l(),h7=a("li"),Z8e=a("strong"),Xhr=o("electra"),zhr=o(" \u2014 "),WQ=a("a"),Qhr=o("TFElectraForMaskedLM"),Whr=o(" (ELECTRA model)"),Hhr=l(),p7=a("li"),ebe=a("strong"),Uhr=o("flaubert"),Jhr=o(" \u2014 "),HQ=a("a"),Yhr=o("TFFlaubertWithLMHeadModel"),Khr=o(" (FlauBERT model)"),Zhr=l(),u7=a("li"),obe=a("strong"),epr=o("funnel"),opr=o(" \u2014 "),UQ=a("a"),rpr=o("TFFunnelForMaskedLM"),tpr=o(" (Funnel Transformer model)"),apr=l(),_7=a("li"),rbe=a("strong"),npr=o("layoutlm"),spr=o(" \u2014 "),JQ=a("a"),lpr=o("TFLayoutLMForMaskedLM"),ipr=o(" (LayoutLM model)"),dpr=l(),b7=a("li"),tbe=a("strong"),cpr=o("longformer"),fpr=o(" \u2014 "),YQ=a("a"),mpr=o("TFLongformerForMaskedLM"),gpr=o(" (Longformer model)"),hpr=l(),v7=a("li"),abe=a("strong"),ppr=o("mobilebert"),upr=o(" \u2014 "),KQ=a("a"),_pr=o("TFMobileBertForMaskedLM"),bpr=o(" (MobileBERT model)"),vpr=l(),F7=a("li"),nbe=a("strong"),Fpr=o("mpnet"),Tpr=o(" \u2014 "),ZQ=a("a"),Mpr=o("TFMPNetForMaskedLM"),Epr=o(" (MPNet model)"),Cpr=l(),T7=a("li"),sbe=a("strong"),wpr=o("rembert"),Apr=o(" \u2014 "),eW=a("a"),ypr=o("TFRemBertForMaskedLM"),Lpr=o(" (RemBERT model)"),xpr=l(),M7=a("li"),lbe=a("strong"),$pr=o("roberta"),kpr=o(" \u2014 "),oW=a("a"),Spr=o("TFRobertaForMaskedLM"),Rpr=o(" (RoBERTa model)"),Ppr=l(),E7=a("li"),ibe=a("strong"),Bpr=o("roformer"),Ipr=o(" \u2014 "),rW=a("a"),qpr=o("TFRoFormerForMaskedLM"),Npr=o(" (RoFormer model)"),jpr=l(),C7=a("li"),dbe=a("strong"),Dpr=o("tapas"),Gpr=o(" \u2014 "),tW=a("a"),Opr=o("TFTapasForMaskedLM"),Vpr=o(" (TAPAS model)"),Xpr=l(),w7=a("li"),cbe=a("strong"),zpr=o("xlm"),Qpr=o(" \u2014 "),aW=a("a"),Wpr=o("TFXLMWithLMHeadModel"),Hpr=o(" (XLM model)"),Upr=l(),A7=a("li"),fbe=a("strong"),Jpr=o("xlm-roberta"),Ypr=o(" \u2014 "),nW=a("a"),Kpr=o("TFXLMRobertaForMaskedLM"),Zpr=o(" (XLM-RoBERTa model)"),eur=l(),F(y7.$$.fragment),WIe=l(),ec=a("h2"),L7=a("a"),mbe=a("span"),F(eL.$$.fragment),our=l(),gbe=a("span"),rur=o("TFAutoModelForSeq2SeqLM"),HIe=l(),rr=a("div"),F(oL.$$.fragment),tur=l(),oc=a("p"),aur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sW=a("a"),nur=o("from_pretrained()"),sur=o(" class method or the "),lW=a("a"),lur=o("from_config()"),iur=o(` class
method.`),dur=l(),rL=a("p"),cur=o("This class cannot be instantiated directly using "),hbe=a("code"),fur=o("__init__()"),mur=o(" (throws an error)."),gur=l(),$t=a("div"),F(tL.$$.fragment),hur=l(),pbe=a("p"),pur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uur=l(),rc=a("p"),_ur=o(`Note:
Loading a model from its configuration file does `),ube=a("strong"),bur=o("not"),vur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=a("a"),Fur=o("from_pretrained()"),Tur=o(" to load the model weights."),Mur=l(),F(x7.$$.fragment),Eur=l(),$r=a("div"),F(aL.$$.fragment),Cur=l(),_be=a("p"),wur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Aur=l(),tn=a("p"),yur=o("The model class to instantiate is selected based on the "),bbe=a("code"),Lur=o("model_type"),xur=o(` property of the config object (either
passed as an argument or loaded from `),vbe=a("code"),$ur=o("pretrained_model_name_or_path"),kur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=a("code"),Sur=o("pretrained_model_name_or_path"),Rur=o(":"),Pur=l(),ye=a("ul"),$7=a("li"),Tbe=a("strong"),Bur=o("bart"),Iur=o(" \u2014 "),dW=a("a"),qur=o("TFBartForConditionalGeneration"),Nur=o(" (BART model)"),jur=l(),k7=a("li"),Mbe=a("strong"),Dur=o("blenderbot"),Gur=o(" \u2014 "),cW=a("a"),Our=o("TFBlenderbotForConditionalGeneration"),Vur=o(" (Blenderbot model)"),Xur=l(),S7=a("li"),Ebe=a("strong"),zur=o("blenderbot-small"),Qur=o(" \u2014 "),fW=a("a"),Wur=o("TFBlenderbotSmallForConditionalGeneration"),Hur=o(" (BlenderbotSmall model)"),Uur=l(),R7=a("li"),Cbe=a("strong"),Jur=o("encoder-decoder"),Yur=o(" \u2014 "),mW=a("a"),Kur=o("TFEncoderDecoderModel"),Zur=o(" (Encoder decoder model)"),e_r=l(),P7=a("li"),wbe=a("strong"),o_r=o("led"),r_r=o(" \u2014 "),gW=a("a"),t_r=o("TFLEDForConditionalGeneration"),a_r=o(" (LED model)"),n_r=l(),B7=a("li"),Abe=a("strong"),s_r=o("marian"),l_r=o(" \u2014 "),hW=a("a"),i_r=o("TFMarianMTModel"),d_r=o(" (Marian model)"),c_r=l(),I7=a("li"),ybe=a("strong"),f_r=o("mbart"),m_r=o(" \u2014 "),pW=a("a"),g_r=o("TFMBartForConditionalGeneration"),h_r=o(" (mBART model)"),p_r=l(),q7=a("li"),Lbe=a("strong"),u_r=o("mt5"),__r=o(" \u2014 "),uW=a("a"),b_r=o("TFMT5ForConditionalGeneration"),v_r=o(" (mT5 model)"),F_r=l(),N7=a("li"),xbe=a("strong"),T_r=o("pegasus"),M_r=o(" \u2014 "),_W=a("a"),E_r=o("TFPegasusForConditionalGeneration"),C_r=o(" (Pegasus model)"),w_r=l(),j7=a("li"),$be=a("strong"),A_r=o("t5"),y_r=o(" \u2014 "),bW=a("a"),L_r=o("TFT5ForConditionalGeneration"),x_r=o(" (T5 model)"),$_r=l(),F(D7.$$.fragment),UIe=l(),tc=a("h2"),G7=a("a"),kbe=a("span"),F(nL.$$.fragment),k_r=l(),Sbe=a("span"),S_r=o("TFAutoModelForSequenceClassification"),JIe=l(),tr=a("div"),F(sL.$$.fragment),R_r=l(),ac=a("p"),P_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vW=a("a"),B_r=o("from_pretrained()"),I_r=o(" class method or the "),FW=a("a"),q_r=o("from_config()"),N_r=o(` class
method.`),j_r=l(),lL=a("p"),D_r=o("This class cannot be instantiated directly using "),Rbe=a("code"),G_r=o("__init__()"),O_r=o(" (throws an error)."),V_r=l(),kt=a("div"),F(iL.$$.fragment),X_r=l(),Pbe=a("p"),z_r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Q_r=l(),nc=a("p"),W_r=o(`Note:
Loading a model from its configuration file does `),Bbe=a("strong"),H_r=o("not"),U_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),J_r=o("from_pretrained()"),Y_r=o(" to load the model weights."),K_r=l(),F(O7.$$.fragment),Z_r=l(),kr=a("div"),F(dL.$$.fragment),e1r=l(),Ibe=a("p"),o1r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),r1r=l(),an=a("p"),t1r=o("The model class to instantiate is selected based on the "),qbe=a("code"),a1r=o("model_type"),n1r=o(` property of the config object (either
passed as an argument or loaded from `),Nbe=a("code"),s1r=o("pretrained_model_name_or_path"),l1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=a("code"),i1r=o("pretrained_model_name_or_path"),d1r=o(":"),c1r=l(),Z=a("ul"),V7=a("li"),Dbe=a("strong"),f1r=o("albert"),m1r=o(" \u2014 "),MW=a("a"),g1r=o("TFAlbertForSequenceClassification"),h1r=o(" (ALBERT model)"),p1r=l(),X7=a("li"),Gbe=a("strong"),u1r=o("bert"),_1r=o(" \u2014 "),EW=a("a"),b1r=o("TFBertForSequenceClassification"),v1r=o(" (BERT model)"),F1r=l(),z7=a("li"),Obe=a("strong"),T1r=o("camembert"),M1r=o(" \u2014 "),CW=a("a"),E1r=o("TFCamembertForSequenceClassification"),C1r=o(" (CamemBERT model)"),w1r=l(),Q7=a("li"),Vbe=a("strong"),A1r=o("convbert"),y1r=o(" \u2014 "),wW=a("a"),L1r=o("TFConvBertForSequenceClassification"),x1r=o(" (ConvBERT model)"),$1r=l(),W7=a("li"),Xbe=a("strong"),k1r=o("ctrl"),S1r=o(" \u2014 "),AW=a("a"),R1r=o("TFCTRLForSequenceClassification"),P1r=o(" (CTRL model)"),B1r=l(),H7=a("li"),zbe=a("strong"),I1r=o("deberta"),q1r=o(" \u2014 "),yW=a("a"),N1r=o("TFDebertaForSequenceClassification"),j1r=o(" (DeBERTa model)"),D1r=l(),U7=a("li"),Qbe=a("strong"),G1r=o("deberta-v2"),O1r=o(" \u2014 "),LW=a("a"),V1r=o("TFDebertaV2ForSequenceClassification"),X1r=o(" (DeBERTa-v2 model)"),z1r=l(),J7=a("li"),Wbe=a("strong"),Q1r=o("distilbert"),W1r=o(" \u2014 "),xW=a("a"),H1r=o("TFDistilBertForSequenceClassification"),U1r=o(" (DistilBERT model)"),J1r=l(),Y7=a("li"),Hbe=a("strong"),Y1r=o("electra"),K1r=o(" \u2014 "),$W=a("a"),Z1r=o("TFElectraForSequenceClassification"),e8r=o(" (ELECTRA model)"),o8r=l(),K7=a("li"),Ube=a("strong"),r8r=o("flaubert"),t8r=o(" \u2014 "),kW=a("a"),a8r=o("TFFlaubertForSequenceClassification"),n8r=o(" (FlauBERT model)"),s8r=l(),Z7=a("li"),Jbe=a("strong"),l8r=o("funnel"),i8r=o(" \u2014 "),SW=a("a"),d8r=o("TFFunnelForSequenceClassification"),c8r=o(" (Funnel Transformer model)"),f8r=l(),eM=a("li"),Ybe=a("strong"),m8r=o("gpt2"),g8r=o(" \u2014 "),RW=a("a"),h8r=o("TFGPT2ForSequenceClassification"),p8r=o(" (OpenAI GPT-2 model)"),u8r=l(),oM=a("li"),Kbe=a("strong"),_8r=o("gptj"),b8r=o(" \u2014 "),PW=a("a"),v8r=o("TFGPTJForSequenceClassification"),F8r=o(" (GPT-J model)"),T8r=l(),rM=a("li"),Zbe=a("strong"),M8r=o("layoutlm"),E8r=o(" \u2014 "),BW=a("a"),C8r=o("TFLayoutLMForSequenceClassification"),w8r=o(" (LayoutLM model)"),A8r=l(),tM=a("li"),e2e=a("strong"),y8r=o("longformer"),L8r=o(" \u2014 "),IW=a("a"),x8r=o("TFLongformerForSequenceClassification"),$8r=o(" (Longformer model)"),k8r=l(),aM=a("li"),o2e=a("strong"),S8r=o("mobilebert"),R8r=o(" \u2014 "),qW=a("a"),P8r=o("TFMobileBertForSequenceClassification"),B8r=o(" (MobileBERT model)"),I8r=l(),nM=a("li"),r2e=a("strong"),q8r=o("mpnet"),N8r=o(" \u2014 "),NW=a("a"),j8r=o("TFMPNetForSequenceClassification"),D8r=o(" (MPNet model)"),G8r=l(),sM=a("li"),t2e=a("strong"),O8r=o("openai-gpt"),V8r=o(" \u2014 "),jW=a("a"),X8r=o("TFOpenAIGPTForSequenceClassification"),z8r=o(" (OpenAI GPT model)"),Q8r=l(),lM=a("li"),a2e=a("strong"),W8r=o("rembert"),H8r=o(" \u2014 "),DW=a("a"),U8r=o("TFRemBertForSequenceClassification"),J8r=o(" (RemBERT model)"),Y8r=l(),iM=a("li"),n2e=a("strong"),K8r=o("roberta"),Z8r=o(" \u2014 "),GW=a("a"),ebr=o("TFRobertaForSequenceClassification"),obr=o(" (RoBERTa model)"),rbr=l(),dM=a("li"),s2e=a("strong"),tbr=o("roformer"),abr=o(" \u2014 "),OW=a("a"),nbr=o("TFRoFormerForSequenceClassification"),sbr=o(" (RoFormer model)"),lbr=l(),cM=a("li"),l2e=a("strong"),ibr=o("tapas"),dbr=o(" \u2014 "),VW=a("a"),cbr=o("TFTapasForSequenceClassification"),fbr=o(" (TAPAS model)"),mbr=l(),fM=a("li"),i2e=a("strong"),gbr=o("transfo-xl"),hbr=o(" \u2014 "),XW=a("a"),pbr=o("TFTransfoXLForSequenceClassification"),ubr=o(" (Transformer-XL model)"),_br=l(),mM=a("li"),d2e=a("strong"),bbr=o("xlm"),vbr=o(" \u2014 "),zW=a("a"),Fbr=o("TFXLMForSequenceClassification"),Tbr=o(" (XLM model)"),Mbr=l(),gM=a("li"),c2e=a("strong"),Ebr=o("xlm-roberta"),Cbr=o(" \u2014 "),QW=a("a"),wbr=o("TFXLMRobertaForSequenceClassification"),Abr=o(" (XLM-RoBERTa model)"),ybr=l(),hM=a("li"),f2e=a("strong"),Lbr=o("xlnet"),xbr=o(" \u2014 "),WW=a("a"),$br=o("TFXLNetForSequenceClassification"),kbr=o(" (XLNet model)"),Sbr=l(),F(pM.$$.fragment),YIe=l(),sc=a("h2"),uM=a("a"),m2e=a("span"),F(cL.$$.fragment),Rbr=l(),g2e=a("span"),Pbr=o("TFAutoModelForMultipleChoice"),KIe=l(),ar=a("div"),F(fL.$$.fragment),Bbr=l(),lc=a("p"),Ibr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HW=a("a"),qbr=o("from_pretrained()"),Nbr=o(" class method or the "),UW=a("a"),jbr=o("from_config()"),Dbr=o(` class
method.`),Gbr=l(),mL=a("p"),Obr=o("This class cannot be instantiated directly using "),h2e=a("code"),Vbr=o("__init__()"),Xbr=o(" (throws an error)."),zbr=l(),St=a("div"),F(gL.$$.fragment),Qbr=l(),p2e=a("p"),Wbr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Hbr=l(),ic=a("p"),Ubr=o(`Note:
Loading a model from its configuration file does `),u2e=a("strong"),Jbr=o("not"),Ybr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),Kbr=o("from_pretrained()"),Zbr=o(" to load the model weights."),e2r=l(),F(_M.$$.fragment),o2r=l(),Sr=a("div"),F(hL.$$.fragment),r2r=l(),_2e=a("p"),t2r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),a2r=l(),nn=a("p"),n2r=o("The model class to instantiate is selected based on the "),b2e=a("code"),s2r=o("model_type"),l2r=o(` property of the config object (either
passed as an argument or loaded from `),v2e=a("code"),i2r=o("pretrained_model_name_or_path"),d2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=a("code"),c2r=o("pretrained_model_name_or_path"),f2r=o(":"),m2r=l(),pe=a("ul"),bM=a("li"),T2e=a("strong"),g2r=o("albert"),h2r=o(" \u2014 "),YW=a("a"),p2r=o("TFAlbertForMultipleChoice"),u2r=o(" (ALBERT model)"),_2r=l(),vM=a("li"),M2e=a("strong"),b2r=o("bert"),v2r=o(" \u2014 "),KW=a("a"),F2r=o("TFBertForMultipleChoice"),T2r=o(" (BERT model)"),M2r=l(),FM=a("li"),E2e=a("strong"),E2r=o("camembert"),C2r=o(" \u2014 "),ZW=a("a"),w2r=o("TFCamembertForMultipleChoice"),A2r=o(" (CamemBERT model)"),y2r=l(),TM=a("li"),C2e=a("strong"),L2r=o("convbert"),x2r=o(" \u2014 "),eH=a("a"),$2r=o("TFConvBertForMultipleChoice"),k2r=o(" (ConvBERT model)"),S2r=l(),MM=a("li"),w2e=a("strong"),R2r=o("distilbert"),P2r=o(" \u2014 "),oH=a("a"),B2r=o("TFDistilBertForMultipleChoice"),I2r=o(" (DistilBERT model)"),q2r=l(),EM=a("li"),A2e=a("strong"),N2r=o("electra"),j2r=o(" \u2014 "),rH=a("a"),D2r=o("TFElectraForMultipleChoice"),G2r=o(" (ELECTRA model)"),O2r=l(),CM=a("li"),y2e=a("strong"),V2r=o("flaubert"),X2r=o(" \u2014 "),tH=a("a"),z2r=o("TFFlaubertForMultipleChoice"),Q2r=o(" (FlauBERT model)"),W2r=l(),wM=a("li"),L2e=a("strong"),H2r=o("funnel"),U2r=o(" \u2014 "),aH=a("a"),J2r=o("TFFunnelForMultipleChoice"),Y2r=o(" (Funnel Transformer model)"),K2r=l(),AM=a("li"),x2e=a("strong"),Z2r=o("longformer"),evr=o(" \u2014 "),nH=a("a"),ovr=o("TFLongformerForMultipleChoice"),rvr=o(" (Longformer model)"),tvr=l(),yM=a("li"),$2e=a("strong"),avr=o("mobilebert"),nvr=o(" \u2014 "),sH=a("a"),svr=o("TFMobileBertForMultipleChoice"),lvr=o(" (MobileBERT model)"),ivr=l(),LM=a("li"),k2e=a("strong"),dvr=o("mpnet"),cvr=o(" \u2014 "),lH=a("a"),fvr=o("TFMPNetForMultipleChoice"),mvr=o(" (MPNet model)"),gvr=l(),xM=a("li"),S2e=a("strong"),hvr=o("rembert"),pvr=o(" \u2014 "),iH=a("a"),uvr=o("TFRemBertForMultipleChoice"),_vr=o(" (RemBERT model)"),bvr=l(),$M=a("li"),R2e=a("strong"),vvr=o("roberta"),Fvr=o(" \u2014 "),dH=a("a"),Tvr=o("TFRobertaForMultipleChoice"),Mvr=o(" (RoBERTa model)"),Evr=l(),kM=a("li"),P2e=a("strong"),Cvr=o("roformer"),wvr=o(" \u2014 "),cH=a("a"),Avr=o("TFRoFormerForMultipleChoice"),yvr=o(" (RoFormer model)"),Lvr=l(),SM=a("li"),B2e=a("strong"),xvr=o("xlm"),$vr=o(" \u2014 "),fH=a("a"),kvr=o("TFXLMForMultipleChoice"),Svr=o(" (XLM model)"),Rvr=l(),RM=a("li"),I2e=a("strong"),Pvr=o("xlm-roberta"),Bvr=o(" \u2014 "),mH=a("a"),Ivr=o("TFXLMRobertaForMultipleChoice"),qvr=o(" (XLM-RoBERTa model)"),Nvr=l(),PM=a("li"),q2e=a("strong"),jvr=o("xlnet"),Dvr=o(" \u2014 "),gH=a("a"),Gvr=o("TFXLNetForMultipleChoice"),Ovr=o(" (XLNet model)"),Vvr=l(),F(BM.$$.fragment),ZIe=l(),dc=a("h2"),IM=a("a"),N2e=a("span"),F(pL.$$.fragment),Xvr=l(),j2e=a("span"),zvr=o("TFAutoModelForNextSentencePrediction"),eqe=l(),nr=a("div"),F(uL.$$.fragment),Qvr=l(),cc=a("p"),Wvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),hH=a("a"),Hvr=o("from_pretrained()"),Uvr=o(" class method or the "),pH=a("a"),Jvr=o("from_config()"),Yvr=o(` class
method.`),Kvr=l(),_L=a("p"),Zvr=o("This class cannot be instantiated directly using "),D2e=a("code"),eFr=o("__init__()"),oFr=o(" (throws an error)."),rFr=l(),Rt=a("div"),F(bL.$$.fragment),tFr=l(),G2e=a("p"),aFr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),nFr=l(),fc=a("p"),sFr=o(`Note:
Loading a model from its configuration file does `),O2e=a("strong"),lFr=o("not"),iFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=a("a"),dFr=o("from_pretrained()"),cFr=o(" to load the model weights."),fFr=l(),F(qM.$$.fragment),mFr=l(),Rr=a("div"),F(vL.$$.fragment),gFr=l(),V2e=a("p"),hFr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pFr=l(),sn=a("p"),uFr=o("The model class to instantiate is selected based on the "),X2e=a("code"),_Fr=o("model_type"),bFr=o(` property of the config object (either
passed as an argument or loaded from `),z2e=a("code"),vFr=o("pretrained_model_name_or_path"),FFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),TFr=o("pretrained_model_name_or_path"),MFr=o(":"),EFr=l(),FL=a("ul"),NM=a("li"),W2e=a("strong"),CFr=o("bert"),wFr=o(" \u2014 "),_H=a("a"),AFr=o("TFBertForNextSentencePrediction"),yFr=o(" (BERT model)"),LFr=l(),jM=a("li"),H2e=a("strong"),xFr=o("mobilebert"),$Fr=o(" \u2014 "),bH=a("a"),kFr=o("TFMobileBertForNextSentencePrediction"),SFr=o(" (MobileBERT model)"),RFr=l(),F(DM.$$.fragment),oqe=l(),mc=a("h2"),GM=a("a"),U2e=a("span"),F(TL.$$.fragment),PFr=l(),J2e=a("span"),BFr=o("TFAutoModelForTableQuestionAnswering"),rqe=l(),sr=a("div"),F(ML.$$.fragment),IFr=l(),gc=a("p"),qFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vH=a("a"),NFr=o("from_pretrained()"),jFr=o(" class method or the "),FH=a("a"),DFr=o("from_config()"),GFr=o(` class
method.`),OFr=l(),EL=a("p"),VFr=o("This class cannot be instantiated directly using "),Y2e=a("code"),XFr=o("__init__()"),zFr=o(" (throws an error)."),QFr=l(),Pt=a("div"),F(CL.$$.fragment),WFr=l(),K2e=a("p"),HFr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),UFr=l(),hc=a("p"),JFr=o(`Note:
Loading a model from its configuration file does `),Z2e=a("strong"),YFr=o("not"),KFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=a("a"),ZFr=o("from_pretrained()"),e0r=o(" to load the model weights."),o0r=l(),F(OM.$$.fragment),r0r=l(),Pr=a("div"),F(wL.$$.fragment),t0r=l(),eve=a("p"),a0r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),n0r=l(),ln=a("p"),s0r=o("The model class to instantiate is selected based on the "),ove=a("code"),l0r=o("model_type"),i0r=o(` property of the config object (either
passed as an argument or loaded from `),rve=a("code"),d0r=o("pretrained_model_name_or_path"),c0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=a("code"),f0r=o("pretrained_model_name_or_path"),m0r=o(":"),g0r=l(),ave=a("ul"),VM=a("li"),nve=a("strong"),h0r=o("tapas"),p0r=o(" \u2014 "),MH=a("a"),u0r=o("TFTapasForQuestionAnswering"),_0r=o(" (TAPAS model)"),b0r=l(),F(XM.$$.fragment),tqe=l(),pc=a("h2"),zM=a("a"),sve=a("span"),F(AL.$$.fragment),v0r=l(),lve=a("span"),F0r=o("TFAutoModelForTokenClassification"),aqe=l(),lr=a("div"),F(yL.$$.fragment),T0r=l(),uc=a("p"),M0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),EH=a("a"),E0r=o("from_pretrained()"),C0r=o(" class method or the "),CH=a("a"),w0r=o("from_config()"),A0r=o(` class
method.`),y0r=l(),LL=a("p"),L0r=o("This class cannot be instantiated directly using "),ive=a("code"),x0r=o("__init__()"),$0r=o(" (throws an error)."),k0r=l(),Bt=a("div"),F(xL.$$.fragment),S0r=l(),dve=a("p"),R0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),P0r=l(),_c=a("p"),B0r=o(`Note:
Loading a model from its configuration file does `),cve=a("strong"),I0r=o("not"),q0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),N0r=o("from_pretrained()"),j0r=o(" to load the model weights."),D0r=l(),F(QM.$$.fragment),G0r=l(),Br=a("div"),F($L.$$.fragment),O0r=l(),fve=a("p"),V0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),X0r=l(),dn=a("p"),z0r=o("The model class to instantiate is selected based on the "),mve=a("code"),Q0r=o("model_type"),W0r=o(` property of the config object (either
passed as an argument or loaded from `),gve=a("code"),H0r=o("pretrained_model_name_or_path"),U0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=a("code"),J0r=o("pretrained_model_name_or_path"),Y0r=o(":"),K0r=l(),de=a("ul"),WM=a("li"),pve=a("strong"),Z0r=o("albert"),eTr=o(" \u2014 "),AH=a("a"),oTr=o("TFAlbertForTokenClassification"),rTr=o(" (ALBERT model)"),tTr=l(),HM=a("li"),uve=a("strong"),aTr=o("bert"),nTr=o(" \u2014 "),yH=a("a"),sTr=o("TFBertForTokenClassification"),lTr=o(" (BERT model)"),iTr=l(),UM=a("li"),_ve=a("strong"),dTr=o("camembert"),cTr=o(" \u2014 "),LH=a("a"),fTr=o("TFCamembertForTokenClassification"),mTr=o(" (CamemBERT model)"),gTr=l(),JM=a("li"),bve=a("strong"),hTr=o("convbert"),pTr=o(" \u2014 "),xH=a("a"),uTr=o("TFConvBertForTokenClassification"),_Tr=o(" (ConvBERT model)"),bTr=l(),YM=a("li"),vve=a("strong"),vTr=o("deberta"),FTr=o(" \u2014 "),$H=a("a"),TTr=o("TFDebertaForTokenClassification"),MTr=o(" (DeBERTa model)"),ETr=l(),KM=a("li"),Fve=a("strong"),CTr=o("deberta-v2"),wTr=o(" \u2014 "),kH=a("a"),ATr=o("TFDebertaV2ForTokenClassification"),yTr=o(" (DeBERTa-v2 model)"),LTr=l(),ZM=a("li"),Tve=a("strong"),xTr=o("distilbert"),$Tr=o(" \u2014 "),SH=a("a"),kTr=o("TFDistilBertForTokenClassification"),STr=o(" (DistilBERT model)"),RTr=l(),e4=a("li"),Mve=a("strong"),PTr=o("electra"),BTr=o(" \u2014 "),RH=a("a"),ITr=o("TFElectraForTokenClassification"),qTr=o(" (ELECTRA model)"),NTr=l(),o4=a("li"),Eve=a("strong"),jTr=o("flaubert"),DTr=o(" \u2014 "),PH=a("a"),GTr=o("TFFlaubertForTokenClassification"),OTr=o(" (FlauBERT model)"),VTr=l(),r4=a("li"),Cve=a("strong"),XTr=o("funnel"),zTr=o(" \u2014 "),BH=a("a"),QTr=o("TFFunnelForTokenClassification"),WTr=o(" (Funnel Transformer model)"),HTr=l(),t4=a("li"),wve=a("strong"),UTr=o("layoutlm"),JTr=o(" \u2014 "),IH=a("a"),YTr=o("TFLayoutLMForTokenClassification"),KTr=o(" (LayoutLM model)"),ZTr=l(),a4=a("li"),Ave=a("strong"),e7r=o("longformer"),o7r=o(" \u2014 "),qH=a("a"),r7r=o("TFLongformerForTokenClassification"),t7r=o(" (Longformer model)"),a7r=l(),n4=a("li"),yve=a("strong"),n7r=o("mobilebert"),s7r=o(" \u2014 "),NH=a("a"),l7r=o("TFMobileBertForTokenClassification"),i7r=o(" (MobileBERT model)"),d7r=l(),s4=a("li"),Lve=a("strong"),c7r=o("mpnet"),f7r=o(" \u2014 "),jH=a("a"),m7r=o("TFMPNetForTokenClassification"),g7r=o(" (MPNet model)"),h7r=l(),l4=a("li"),xve=a("strong"),p7r=o("rembert"),u7r=o(" \u2014 "),DH=a("a"),_7r=o("TFRemBertForTokenClassification"),b7r=o(" (RemBERT model)"),v7r=l(),i4=a("li"),$ve=a("strong"),F7r=o("roberta"),T7r=o(" \u2014 "),GH=a("a"),M7r=o("TFRobertaForTokenClassification"),E7r=o(" (RoBERTa model)"),C7r=l(),d4=a("li"),kve=a("strong"),w7r=o("roformer"),A7r=o(" \u2014 "),OH=a("a"),y7r=o("TFRoFormerForTokenClassification"),L7r=o(" (RoFormer model)"),x7r=l(),c4=a("li"),Sve=a("strong"),$7r=o("xlm"),k7r=o(" \u2014 "),VH=a("a"),S7r=o("TFXLMForTokenClassification"),R7r=o(" (XLM model)"),P7r=l(),f4=a("li"),Rve=a("strong"),B7r=o("xlm-roberta"),I7r=o(" \u2014 "),XH=a("a"),q7r=o("TFXLMRobertaForTokenClassification"),N7r=o(" (XLM-RoBERTa model)"),j7r=l(),m4=a("li"),Pve=a("strong"),D7r=o("xlnet"),G7r=o(" \u2014 "),zH=a("a"),O7r=o("TFXLNetForTokenClassification"),V7r=o(" (XLNet model)"),X7r=l(),F(g4.$$.fragment),nqe=l(),bc=a("h2"),h4=a("a"),Bve=a("span"),F(kL.$$.fragment),z7r=l(),Ive=a("span"),Q7r=o("TFAutoModelForQuestionAnswering"),sqe=l(),ir=a("div"),F(SL.$$.fragment),W7r=l(),vc=a("p"),H7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QH=a("a"),U7r=o("from_pretrained()"),J7r=o(" class method or the "),WH=a("a"),Y7r=o("from_config()"),K7r=o(` class
method.`),Z7r=l(),RL=a("p"),eMr=o("This class cannot be instantiated directly using "),qve=a("code"),oMr=o("__init__()"),rMr=o(" (throws an error)."),tMr=l(),It=a("div"),F(PL.$$.fragment),aMr=l(),Nve=a("p"),nMr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sMr=l(),Fc=a("p"),lMr=o(`Note:
Loading a model from its configuration file does `),jve=a("strong"),iMr=o("not"),dMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),cMr=o("from_pretrained()"),fMr=o(" to load the model weights."),mMr=l(),F(p4.$$.fragment),gMr=l(),Ir=a("div"),F(BL.$$.fragment),hMr=l(),Dve=a("p"),pMr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uMr=l(),cn=a("p"),_Mr=o("The model class to instantiate is selected based on the "),Gve=a("code"),bMr=o("model_type"),vMr=o(` property of the config object (either
passed as an argument or loaded from `),Ove=a("code"),FMr=o("pretrained_model_name_or_path"),TMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=a("code"),MMr=o("pretrained_model_name_or_path"),EMr=o(":"),CMr=l(),ce=a("ul"),u4=a("li"),Xve=a("strong"),wMr=o("albert"),AMr=o(" \u2014 "),UH=a("a"),yMr=o("TFAlbertForQuestionAnswering"),LMr=o(" (ALBERT model)"),xMr=l(),_4=a("li"),zve=a("strong"),$Mr=o("bert"),kMr=o(" \u2014 "),JH=a("a"),SMr=o("TFBertForQuestionAnswering"),RMr=o(" (BERT model)"),PMr=l(),b4=a("li"),Qve=a("strong"),BMr=o("camembert"),IMr=o(" \u2014 "),YH=a("a"),qMr=o("TFCamembertForQuestionAnswering"),NMr=o(" (CamemBERT model)"),jMr=l(),v4=a("li"),Wve=a("strong"),DMr=o("convbert"),GMr=o(" \u2014 "),KH=a("a"),OMr=o("TFConvBertForQuestionAnswering"),VMr=o(" (ConvBERT model)"),XMr=l(),F4=a("li"),Hve=a("strong"),zMr=o("deberta"),QMr=o(" \u2014 "),ZH=a("a"),WMr=o("TFDebertaForQuestionAnswering"),HMr=o(" (DeBERTa model)"),UMr=l(),T4=a("li"),Uve=a("strong"),JMr=o("deberta-v2"),YMr=o(" \u2014 "),eU=a("a"),KMr=o("TFDebertaV2ForQuestionAnswering"),ZMr=o(" (DeBERTa-v2 model)"),e4r=l(),M4=a("li"),Jve=a("strong"),o4r=o("distilbert"),r4r=o(" \u2014 "),oU=a("a"),t4r=o("TFDistilBertForQuestionAnswering"),a4r=o(" (DistilBERT model)"),n4r=l(),E4=a("li"),Yve=a("strong"),s4r=o("electra"),l4r=o(" \u2014 "),rU=a("a"),i4r=o("TFElectraForQuestionAnswering"),d4r=o(" (ELECTRA model)"),c4r=l(),C4=a("li"),Kve=a("strong"),f4r=o("flaubert"),m4r=o(" \u2014 "),tU=a("a"),g4r=o("TFFlaubertForQuestionAnsweringSimple"),h4r=o(" (FlauBERT model)"),p4r=l(),w4=a("li"),Zve=a("strong"),u4r=o("funnel"),_4r=o(" \u2014 "),aU=a("a"),b4r=o("TFFunnelForQuestionAnswering"),v4r=o(" (Funnel Transformer model)"),F4r=l(),A4=a("li"),eFe=a("strong"),T4r=o("gptj"),M4r=o(" \u2014 "),nU=a("a"),E4r=o("TFGPTJForQuestionAnswering"),C4r=o(" (GPT-J model)"),w4r=l(),y4=a("li"),oFe=a("strong"),A4r=o("longformer"),y4r=o(" \u2014 "),sU=a("a"),L4r=o("TFLongformerForQuestionAnswering"),x4r=o(" (Longformer model)"),$4r=l(),L4=a("li"),rFe=a("strong"),k4r=o("mobilebert"),S4r=o(" \u2014 "),lU=a("a"),R4r=o("TFMobileBertForQuestionAnswering"),P4r=o(" (MobileBERT model)"),B4r=l(),x4=a("li"),tFe=a("strong"),I4r=o("mpnet"),q4r=o(" \u2014 "),iU=a("a"),N4r=o("TFMPNetForQuestionAnswering"),j4r=o(" (MPNet model)"),D4r=l(),$4=a("li"),aFe=a("strong"),G4r=o("rembert"),O4r=o(" \u2014 "),dU=a("a"),V4r=o("TFRemBertForQuestionAnswering"),X4r=o(" (RemBERT model)"),z4r=l(),k4=a("li"),nFe=a("strong"),Q4r=o("roberta"),W4r=o(" \u2014 "),cU=a("a"),H4r=o("TFRobertaForQuestionAnswering"),U4r=o(" (RoBERTa model)"),J4r=l(),S4=a("li"),sFe=a("strong"),Y4r=o("roformer"),K4r=o(" \u2014 "),fU=a("a"),Z4r=o("TFRoFormerForQuestionAnswering"),eEr=o(" (RoFormer model)"),oEr=l(),R4=a("li"),lFe=a("strong"),rEr=o("xlm"),tEr=o(" \u2014 "),mU=a("a"),aEr=o("TFXLMForQuestionAnsweringSimple"),nEr=o(" (XLM model)"),sEr=l(),P4=a("li"),iFe=a("strong"),lEr=o("xlm-roberta"),iEr=o(" \u2014 "),gU=a("a"),dEr=o("TFXLMRobertaForQuestionAnswering"),cEr=o(" (XLM-RoBERTa model)"),fEr=l(),B4=a("li"),dFe=a("strong"),mEr=o("xlnet"),gEr=o(" \u2014 "),hU=a("a"),hEr=o("TFXLNetForQuestionAnsweringSimple"),pEr=o(" (XLNet model)"),uEr=l(),F(I4.$$.fragment),lqe=l(),Tc=a("h2"),q4=a("a"),cFe=a("span"),F(IL.$$.fragment),_Er=l(),fFe=a("span"),bEr=o("TFAutoModelForVision2Seq"),iqe=l(),dr=a("div"),F(qL.$$.fragment),vEr=l(),Mc=a("p"),FEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pU=a("a"),TEr=o("from_pretrained()"),MEr=o(" class method or the "),uU=a("a"),EEr=o("from_config()"),CEr=o(` class
method.`),wEr=l(),NL=a("p"),AEr=o("This class cannot be instantiated directly using "),mFe=a("code"),yEr=o("__init__()"),LEr=o(" (throws an error)."),xEr=l(),qt=a("div"),F(jL.$$.fragment),$Er=l(),gFe=a("p"),kEr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),SEr=l(),Ec=a("p"),REr=o(`Note:
Loading a model from its configuration file does `),hFe=a("strong"),PEr=o("not"),BEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=a("a"),IEr=o("from_pretrained()"),qEr=o(" to load the model weights."),NEr=l(),F(N4.$$.fragment),jEr=l(),qr=a("div"),F(DL.$$.fragment),DEr=l(),pFe=a("p"),GEr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),OEr=l(),fn=a("p"),VEr=o("The model class to instantiate is selected based on the "),uFe=a("code"),XEr=o("model_type"),zEr=o(` property of the config object (either
passed as an argument or loaded from `),_Fe=a("code"),QEr=o("pretrained_model_name_or_path"),WEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=a("code"),HEr=o("pretrained_model_name_or_path"),UEr=o(":"),JEr=l(),vFe=a("ul"),j4=a("li"),FFe=a("strong"),YEr=o("vision-encoder-decoder"),KEr=o(" \u2014 "),bU=a("a"),ZEr=o("TFVisionEncoderDecoderModel"),e5r=o(" (Vision Encoder decoder model)"),o5r=l(),F(D4.$$.fragment),dqe=l(),Cc=a("h2"),G4=a("a"),TFe=a("span"),F(GL.$$.fragment),r5r=l(),MFe=a("span"),t5r=o("TFAutoModelForSpeechSeq2Seq"),cqe=l(),cr=a("div"),F(OL.$$.fragment),a5r=l(),wc=a("p"),n5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),vU=a("a"),s5r=o("from_pretrained()"),l5r=o(" class method or the "),FU=a("a"),i5r=o("from_config()"),d5r=o(` class
method.`),c5r=l(),VL=a("p"),f5r=o("This class cannot be instantiated directly using "),EFe=a("code"),m5r=o("__init__()"),g5r=o(" (throws an error)."),h5r=l(),Nt=a("div"),F(XL.$$.fragment),p5r=l(),CFe=a("p"),u5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_5r=l(),Ac=a("p"),b5r=o(`Note:
Loading a model from its configuration file does `),wFe=a("strong"),v5r=o("not"),F5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=a("a"),T5r=o("from_pretrained()"),M5r=o(" to load the model weights."),E5r=l(),F(O4.$$.fragment),C5r=l(),Nr=a("div"),F(zL.$$.fragment),w5r=l(),AFe=a("p"),A5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),y5r=l(),mn=a("p"),L5r=o("The model class to instantiate is selected based on the "),yFe=a("code"),x5r=o("model_type"),$5r=o(` property of the config object (either
passed as an argument or loaded from `),LFe=a("code"),k5r=o("pretrained_model_name_or_path"),S5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=a("code"),R5r=o("pretrained_model_name_or_path"),P5r=o(":"),B5r=l(),$Fe=a("ul"),V4=a("li"),kFe=a("strong"),I5r=o("speech_to_text"),q5r=o(" \u2014 "),MU=a("a"),N5r=o("TFSpeech2TextForConditionalGeneration"),j5r=o(" (Speech2Text model)"),D5r=l(),F(X4.$$.fragment),fqe=l(),yc=a("h2"),z4=a("a"),SFe=a("span"),F(QL.$$.fragment),G5r=l(),RFe=a("span"),O5r=o("FlaxAutoModel"),mqe=l(),fr=a("div"),F(WL.$$.fragment),V5r=l(),Lc=a("p"),X5r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),EU=a("a"),z5r=o("from_pretrained()"),Q5r=o(" class method or the "),CU=a("a"),W5r=o("from_config()"),H5r=o(` class
method.`),U5r=l(),HL=a("p"),J5r=o("This class cannot be instantiated directly using "),PFe=a("code"),Y5r=o("__init__()"),K5r=o(" (throws an error)."),Z5r=l(),jt=a("div"),F(UL.$$.fragment),eCr=l(),BFe=a("p"),oCr=o("Instantiates one of the base model classes of the library from a configuration."),rCr=l(),xc=a("p"),tCr=o(`Note:
Loading a model from its configuration file does `),IFe=a("strong"),aCr=o("not"),nCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=a("a"),sCr=o("from_pretrained()"),lCr=o(" to load the model weights."),iCr=l(),F(Q4.$$.fragment),dCr=l(),jr=a("div"),F(JL.$$.fragment),cCr=l(),qFe=a("p"),fCr=o("Instantiate one of the base model classes of the library from a pretrained model."),mCr=l(),gn=a("p"),gCr=o("The model class to instantiate is selected based on the "),NFe=a("code"),hCr=o("model_type"),pCr=o(` property of the config object (either
passed as an argument or loaded from `),jFe=a("code"),uCr=o("pretrained_model_name_or_path"),_Cr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DFe=a("code"),bCr=o("pretrained_model_name_or_path"),vCr=o(":"),FCr=l(),ee=a("ul"),W4=a("li"),GFe=a("strong"),TCr=o("albert"),MCr=o(" \u2014 "),AU=a("a"),ECr=o("FlaxAlbertModel"),CCr=o(" (ALBERT model)"),wCr=l(),H4=a("li"),OFe=a("strong"),ACr=o("bart"),yCr=o(" \u2014 "),yU=a("a"),LCr=o("FlaxBartModel"),xCr=o(" (BART model)"),$Cr=l(),U4=a("li"),VFe=a("strong"),kCr=o("beit"),SCr=o(" \u2014 "),LU=a("a"),RCr=o("FlaxBeitModel"),PCr=o(" (BEiT model)"),BCr=l(),J4=a("li"),XFe=a("strong"),ICr=o("bert"),qCr=o(" \u2014 "),xU=a("a"),NCr=o("FlaxBertModel"),jCr=o(" (BERT model)"),DCr=l(),Y4=a("li"),zFe=a("strong"),GCr=o("big_bird"),OCr=o(" \u2014 "),$U=a("a"),VCr=o("FlaxBigBirdModel"),XCr=o(" (BigBird model)"),zCr=l(),K4=a("li"),QFe=a("strong"),QCr=o("blenderbot"),WCr=o(" \u2014 "),kU=a("a"),HCr=o("FlaxBlenderbotModel"),UCr=o(" (Blenderbot model)"),JCr=l(),Z4=a("li"),WFe=a("strong"),YCr=o("blenderbot-small"),KCr=o(" \u2014 "),SU=a("a"),ZCr=o("FlaxBlenderbotSmallModel"),e3r=o(" (BlenderbotSmall model)"),o3r=l(),eE=a("li"),HFe=a("strong"),r3r=o("clip"),t3r=o(" \u2014 "),RU=a("a"),a3r=o("FlaxCLIPModel"),n3r=o(" (CLIP model)"),s3r=l(),oE=a("li"),UFe=a("strong"),l3r=o("distilbert"),i3r=o(" \u2014 "),PU=a("a"),d3r=o("FlaxDistilBertModel"),c3r=o(" (DistilBERT model)"),f3r=l(),rE=a("li"),JFe=a("strong"),m3r=o("electra"),g3r=o(" \u2014 "),BU=a("a"),h3r=o("FlaxElectraModel"),p3r=o(" (ELECTRA model)"),u3r=l(),tE=a("li"),YFe=a("strong"),_3r=o("gpt2"),b3r=o(" \u2014 "),IU=a("a"),v3r=o("FlaxGPT2Model"),F3r=o(" (OpenAI GPT-2 model)"),T3r=l(),aE=a("li"),KFe=a("strong"),M3r=o("gpt_neo"),E3r=o(" \u2014 "),qU=a("a"),C3r=o("FlaxGPTNeoModel"),w3r=o(" (GPT Neo model)"),A3r=l(),nE=a("li"),ZFe=a("strong"),y3r=o("gptj"),L3r=o(" \u2014 "),NU=a("a"),x3r=o("FlaxGPTJModel"),$3r=o(" (GPT-J model)"),k3r=l(),sE=a("li"),e0e=a("strong"),S3r=o("marian"),R3r=o(" \u2014 "),jU=a("a"),P3r=o("FlaxMarianModel"),B3r=o(" (Marian model)"),I3r=l(),lE=a("li"),o0e=a("strong"),q3r=o("mbart"),N3r=o(" \u2014 "),DU=a("a"),j3r=o("FlaxMBartModel"),D3r=o(" (mBART model)"),G3r=l(),iE=a("li"),r0e=a("strong"),O3r=o("mt5"),V3r=o(" \u2014 "),GU=a("a"),X3r=o("FlaxMT5Model"),z3r=o(" (mT5 model)"),Q3r=l(),dE=a("li"),t0e=a("strong"),W3r=o("opt"),H3r=o(" \u2014 "),OU=a("a"),U3r=o("FlaxOPTModel"),J3r=o(" (OPT model)"),Y3r=l(),cE=a("li"),a0e=a("strong"),K3r=o("pegasus"),Z3r=o(" \u2014 "),VU=a("a"),ewr=o("FlaxPegasusModel"),owr=o(" (Pegasus model)"),rwr=l(),fE=a("li"),n0e=a("strong"),twr=o("roberta"),awr=o(" \u2014 "),XU=a("a"),nwr=o("FlaxRobertaModel"),swr=o(" (RoBERTa model)"),lwr=l(),mE=a("li"),s0e=a("strong"),iwr=o("roformer"),dwr=o(" \u2014 "),zU=a("a"),cwr=o("FlaxRoFormerModel"),fwr=o(" (RoFormer model)"),mwr=l(),gE=a("li"),l0e=a("strong"),gwr=o("t5"),hwr=o(" \u2014 "),QU=a("a"),pwr=o("FlaxT5Model"),uwr=o(" (T5 model)"),_wr=l(),hE=a("li"),i0e=a("strong"),bwr=o("vision-text-dual-encoder"),vwr=o(" \u2014 "),WU=a("a"),Fwr=o("FlaxVisionTextDualEncoderModel"),Twr=o(" (VisionTextDualEncoder model)"),Mwr=l(),pE=a("li"),d0e=a("strong"),Ewr=o("vit"),Cwr=o(" \u2014 "),HU=a("a"),wwr=o("FlaxViTModel"),Awr=o(" (ViT model)"),ywr=l(),uE=a("li"),c0e=a("strong"),Lwr=o("wav2vec2"),xwr=o(" \u2014 "),UU=a("a"),$wr=o("FlaxWav2Vec2Model"),kwr=o(" (Wav2Vec2 model)"),Swr=l(),_E=a("li"),f0e=a("strong"),Rwr=o("xglm"),Pwr=o(" \u2014 "),JU=a("a"),Bwr=o("FlaxXGLMModel"),Iwr=o(" (XGLM model)"),qwr=l(),bE=a("li"),m0e=a("strong"),Nwr=o("xlm-roberta"),jwr=o(" \u2014 "),YU=a("a"),Dwr=o("FlaxXLMRobertaModel"),Gwr=o(" (XLM-RoBERTa model)"),Owr=l(),F(vE.$$.fragment),gqe=l(),$c=a("h2"),FE=a("a"),g0e=a("span"),F(YL.$$.fragment),Vwr=l(),h0e=a("span"),Xwr=o("FlaxAutoModelForCausalLM"),hqe=l(),mr=a("div"),F(KL.$$.fragment),zwr=l(),kc=a("p"),Qwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),KU=a("a"),Wwr=o("from_pretrained()"),Hwr=o(" class method or the "),ZU=a("a"),Uwr=o("from_config()"),Jwr=o(` class
method.`),Ywr=l(),ZL=a("p"),Kwr=o("This class cannot be instantiated directly using "),p0e=a("code"),Zwr=o("__init__()"),eAr=o(" (throws an error)."),oAr=l(),Dt=a("div"),F(ex.$$.fragment),rAr=l(),u0e=a("p"),tAr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aAr=l(),Sc=a("p"),nAr=o(`Note:
Loading a model from its configuration file does `),_0e=a("strong"),sAr=o("not"),lAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=a("a"),iAr=o("from_pretrained()"),dAr=o(" to load the model weights."),cAr=l(),F(TE.$$.fragment),fAr=l(),Dr=a("div"),F(ox.$$.fragment),mAr=l(),b0e=a("p"),gAr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hAr=l(),hn=a("p"),pAr=o("The model class to instantiate is selected based on the "),v0e=a("code"),uAr=o("model_type"),_Ar=o(` property of the config object (either
passed as an argument or loaded from `),F0e=a("code"),bAr=o("pretrained_model_name_or_path"),vAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T0e=a("code"),FAr=o("pretrained_model_name_or_path"),TAr=o(":"),MAr=l(),Le=a("ul"),ME=a("li"),M0e=a("strong"),EAr=o("bart"),CAr=o(" \u2014 "),oJ=a("a"),wAr=o("FlaxBartForCausalLM"),AAr=o(" (BART model)"),yAr=l(),EE=a("li"),E0e=a("strong"),LAr=o("bert"),xAr=o(" \u2014 "),rJ=a("a"),$Ar=o("FlaxBertForCausalLM"),kAr=o(" (BERT model)"),SAr=l(),CE=a("li"),C0e=a("strong"),RAr=o("big_bird"),PAr=o(" \u2014 "),tJ=a("a"),BAr=o("FlaxBigBirdForCausalLM"),IAr=o(" (BigBird model)"),qAr=l(),wE=a("li"),w0e=a("strong"),NAr=o("electra"),jAr=o(" \u2014 "),aJ=a("a"),DAr=o("FlaxElectraForCausalLM"),GAr=o(" (ELECTRA model)"),OAr=l(),AE=a("li"),A0e=a("strong"),VAr=o("gpt2"),XAr=o(" \u2014 "),nJ=a("a"),zAr=o("FlaxGPT2LMHeadModel"),QAr=o(" (OpenAI GPT-2 model)"),WAr=l(),yE=a("li"),y0e=a("strong"),HAr=o("gpt_neo"),UAr=o(" \u2014 "),sJ=a("a"),JAr=o("FlaxGPTNeoForCausalLM"),YAr=o(" (GPT Neo model)"),KAr=l(),LE=a("li"),L0e=a("strong"),ZAr=o("gptj"),e6r=o(" \u2014 "),lJ=a("a"),o6r=o("FlaxGPTJForCausalLM"),r6r=o(" (GPT-J model)"),t6r=l(),xE=a("li"),x0e=a("strong"),a6r=o("opt"),n6r=o(" \u2014 "),iJ=a("a"),s6r=o("FlaxOPTForCausalLM"),l6r=o(" (OPT model)"),i6r=l(),$E=a("li"),$0e=a("strong"),d6r=o("roberta"),c6r=o(" \u2014 "),dJ=a("a"),f6r=o("FlaxRobertaForCausalLM"),m6r=o(" (RoBERTa model)"),g6r=l(),kE=a("li"),k0e=a("strong"),h6r=o("xglm"),p6r=o(" \u2014 "),cJ=a("a"),u6r=o("FlaxXGLMForCausalLM"),_6r=o(" (XGLM model)"),b6r=l(),F(SE.$$.fragment),pqe=l(),Rc=a("h2"),RE=a("a"),S0e=a("span"),F(rx.$$.fragment),v6r=l(),R0e=a("span"),F6r=o("FlaxAutoModelForPreTraining"),uqe=l(),gr=a("div"),F(tx.$$.fragment),T6r=l(),Pc=a("p"),M6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fJ=a("a"),E6r=o("from_pretrained()"),C6r=o(" class method or the "),mJ=a("a"),w6r=o("from_config()"),A6r=o(` class
method.`),y6r=l(),ax=a("p"),L6r=o("This class cannot be instantiated directly using "),P0e=a("code"),x6r=o("__init__()"),$6r=o(" (throws an error)."),k6r=l(),Gt=a("div"),F(nx.$$.fragment),S6r=l(),B0e=a("p"),R6r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),P6r=l(),Bc=a("p"),B6r=o(`Note:
Loading a model from its configuration file does `),I0e=a("strong"),I6r=o("not"),q6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=a("a"),N6r=o("from_pretrained()"),j6r=o(" to load the model weights."),D6r=l(),F(PE.$$.fragment),G6r=l(),Gr=a("div"),F(sx.$$.fragment),O6r=l(),q0e=a("p"),V6r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),X6r=l(),pn=a("p"),z6r=o("The model class to instantiate is selected based on the "),N0e=a("code"),Q6r=o("model_type"),W6r=o(` property of the config object (either
passed as an argument or loaded from `),j0e=a("code"),H6r=o("pretrained_model_name_or_path"),U6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D0e=a("code"),J6r=o("pretrained_model_name_or_path"),Y6r=o(":"),K6r=l(),Me=a("ul"),BE=a("li"),G0e=a("strong"),Z6r=o("albert"),eyr=o(" \u2014 "),hJ=a("a"),oyr=o("FlaxAlbertForPreTraining"),ryr=o(" (ALBERT model)"),tyr=l(),IE=a("li"),O0e=a("strong"),ayr=o("bart"),nyr=o(" \u2014 "),pJ=a("a"),syr=o("FlaxBartForConditionalGeneration"),lyr=o(" (BART model)"),iyr=l(),qE=a("li"),V0e=a("strong"),dyr=o("bert"),cyr=o(" \u2014 "),uJ=a("a"),fyr=o("FlaxBertForPreTraining"),myr=o(" (BERT model)"),gyr=l(),NE=a("li"),X0e=a("strong"),hyr=o("big_bird"),pyr=o(" \u2014 "),_J=a("a"),uyr=o("FlaxBigBirdForPreTraining"),_yr=o(" (BigBird model)"),byr=l(),jE=a("li"),z0e=a("strong"),vyr=o("electra"),Fyr=o(" \u2014 "),bJ=a("a"),Tyr=o("FlaxElectraForPreTraining"),Myr=o(" (ELECTRA model)"),Eyr=l(),DE=a("li"),Q0e=a("strong"),Cyr=o("mbart"),wyr=o(" \u2014 "),vJ=a("a"),Ayr=o("FlaxMBartForConditionalGeneration"),yyr=o(" (mBART model)"),Lyr=l(),GE=a("li"),W0e=a("strong"),xyr=o("mt5"),$yr=o(" \u2014 "),FJ=a("a"),kyr=o("FlaxMT5ForConditionalGeneration"),Syr=o(" (mT5 model)"),Ryr=l(),OE=a("li"),H0e=a("strong"),Pyr=o("roberta"),Byr=o(" \u2014 "),TJ=a("a"),Iyr=o("FlaxRobertaForMaskedLM"),qyr=o(" (RoBERTa model)"),Nyr=l(),VE=a("li"),U0e=a("strong"),jyr=o("roformer"),Dyr=o(" \u2014 "),MJ=a("a"),Gyr=o("FlaxRoFormerForMaskedLM"),Oyr=o(" (RoFormer model)"),Vyr=l(),XE=a("li"),J0e=a("strong"),Xyr=o("t5"),zyr=o(" \u2014 "),EJ=a("a"),Qyr=o("FlaxT5ForConditionalGeneration"),Wyr=o(" (T5 model)"),Hyr=l(),zE=a("li"),Y0e=a("strong"),Uyr=o("wav2vec2"),Jyr=o(" \u2014 "),CJ=a("a"),Yyr=o("FlaxWav2Vec2ForPreTraining"),Kyr=o(" (Wav2Vec2 model)"),Zyr=l(),QE=a("li"),K0e=a("strong"),eLr=o("xlm-roberta"),oLr=o(" \u2014 "),wJ=a("a"),rLr=o("FlaxXLMRobertaForMaskedLM"),tLr=o(" (XLM-RoBERTa model)"),aLr=l(),F(WE.$$.fragment),_qe=l(),Ic=a("h2"),HE=a("a"),Z0e=a("span"),F(lx.$$.fragment),nLr=l(),eTe=a("span"),sLr=o("FlaxAutoModelForMaskedLM"),bqe=l(),hr=a("div"),F(ix.$$.fragment),lLr=l(),qc=a("p"),iLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AJ=a("a"),dLr=o("from_pretrained()"),cLr=o(" class method or the "),yJ=a("a"),fLr=o("from_config()"),mLr=o(` class
method.`),gLr=l(),dx=a("p"),hLr=o("This class cannot be instantiated directly using "),oTe=a("code"),pLr=o("__init__()"),uLr=o(" (throws an error)."),_Lr=l(),Ot=a("div"),F(cx.$$.fragment),bLr=l(),rTe=a("p"),vLr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),FLr=l(),Nc=a("p"),TLr=o(`Note:
Loading a model from its configuration file does `),tTe=a("strong"),MLr=o("not"),ELr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LJ=a("a"),CLr=o("from_pretrained()"),wLr=o(" to load the model weights."),ALr=l(),F(UE.$$.fragment),yLr=l(),Or=a("div"),F(fx.$$.fragment),LLr=l(),aTe=a("p"),xLr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$Lr=l(),un=a("p"),kLr=o("The model class to instantiate is selected based on the "),nTe=a("code"),SLr=o("model_type"),RLr=o(` property of the config object (either
passed as an argument or loaded from `),sTe=a("code"),PLr=o("pretrained_model_name_or_path"),BLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=a("code"),ILr=o("pretrained_model_name_or_path"),qLr=o(":"),NLr=l(),xe=a("ul"),JE=a("li"),iTe=a("strong"),jLr=o("albert"),DLr=o(" \u2014 "),xJ=a("a"),GLr=o("FlaxAlbertForMaskedLM"),OLr=o(" (ALBERT model)"),VLr=l(),YE=a("li"),dTe=a("strong"),XLr=o("bart"),zLr=o(" \u2014 "),$J=a("a"),QLr=o("FlaxBartForConditionalGeneration"),WLr=o(" (BART model)"),HLr=l(),KE=a("li"),cTe=a("strong"),ULr=o("bert"),JLr=o(" \u2014 "),kJ=a("a"),YLr=o("FlaxBertForMaskedLM"),KLr=o(" (BERT model)"),ZLr=l(),ZE=a("li"),fTe=a("strong"),exr=o("big_bird"),oxr=o(" \u2014 "),SJ=a("a"),rxr=o("FlaxBigBirdForMaskedLM"),txr=o(" (BigBird model)"),axr=l(),e5=a("li"),mTe=a("strong"),nxr=o("distilbert"),sxr=o(" \u2014 "),RJ=a("a"),lxr=o("FlaxDistilBertForMaskedLM"),ixr=o(" (DistilBERT model)"),dxr=l(),o5=a("li"),gTe=a("strong"),cxr=o("electra"),fxr=o(" \u2014 "),PJ=a("a"),mxr=o("FlaxElectraForMaskedLM"),gxr=o(" (ELECTRA model)"),hxr=l(),r5=a("li"),hTe=a("strong"),pxr=o("mbart"),uxr=o(" \u2014 "),BJ=a("a"),_xr=o("FlaxMBartForConditionalGeneration"),bxr=o(" (mBART model)"),vxr=l(),t5=a("li"),pTe=a("strong"),Fxr=o("roberta"),Txr=o(" \u2014 "),IJ=a("a"),Mxr=o("FlaxRobertaForMaskedLM"),Exr=o(" (RoBERTa model)"),Cxr=l(),a5=a("li"),uTe=a("strong"),wxr=o("roformer"),Axr=o(" \u2014 "),qJ=a("a"),yxr=o("FlaxRoFormerForMaskedLM"),Lxr=o(" (RoFormer model)"),xxr=l(),n5=a("li"),_Te=a("strong"),$xr=o("xlm-roberta"),kxr=o(" \u2014 "),NJ=a("a"),Sxr=o("FlaxXLMRobertaForMaskedLM"),Rxr=o(" (XLM-RoBERTa model)"),Pxr=l(),F(s5.$$.fragment),vqe=l(),jc=a("h2"),l5=a("a"),bTe=a("span"),F(mx.$$.fragment),Bxr=l(),vTe=a("span"),Ixr=o("FlaxAutoModelForSeq2SeqLM"),Fqe=l(),pr=a("div"),F(gx.$$.fragment),qxr=l(),Dc=a("p"),Nxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jJ=a("a"),jxr=o("from_pretrained()"),Dxr=o(" class method or the "),DJ=a("a"),Gxr=o("from_config()"),Oxr=o(` class
method.`),Vxr=l(),hx=a("p"),Xxr=o("This class cannot be instantiated directly using "),FTe=a("code"),zxr=o("__init__()"),Qxr=o(" (throws an error)."),Wxr=l(),Vt=a("div"),F(px.$$.fragment),Hxr=l(),TTe=a("p"),Uxr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jxr=l(),Gc=a("p"),Yxr=o(`Note:
Loading a model from its configuration file does `),MTe=a("strong"),Kxr=o("not"),Zxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),e9r=o("from_pretrained()"),o9r=o(" to load the model weights."),r9r=l(),F(i5.$$.fragment),t9r=l(),Vr=a("div"),F(ux.$$.fragment),a9r=l(),ETe=a("p"),n9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),s9r=l(),_n=a("p"),l9r=o("The model class to instantiate is selected based on the "),CTe=a("code"),i9r=o("model_type"),d9r=o(` property of the config object (either
passed as an argument or loaded from `),wTe=a("code"),c9r=o("pretrained_model_name_or_path"),f9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ATe=a("code"),m9r=o("pretrained_model_name_or_path"),g9r=o(":"),h9r=l(),Se=a("ul"),d5=a("li"),yTe=a("strong"),p9r=o("bart"),u9r=o(" \u2014 "),OJ=a("a"),_9r=o("FlaxBartForConditionalGeneration"),b9r=o(" (BART model)"),v9r=l(),c5=a("li"),LTe=a("strong"),F9r=o("blenderbot"),T9r=o(" \u2014 "),VJ=a("a"),M9r=o("FlaxBlenderbotForConditionalGeneration"),E9r=o(" (Blenderbot model)"),C9r=l(),f5=a("li"),xTe=a("strong"),w9r=o("blenderbot-small"),A9r=o(" \u2014 "),XJ=a("a"),y9r=o("FlaxBlenderbotSmallForConditionalGeneration"),L9r=o(" (BlenderbotSmall model)"),x9r=l(),m5=a("li"),$Te=a("strong"),$9r=o("encoder-decoder"),k9r=o(" \u2014 "),zJ=a("a"),S9r=o("FlaxEncoderDecoderModel"),R9r=o(" (Encoder decoder model)"),P9r=l(),g5=a("li"),kTe=a("strong"),B9r=o("marian"),I9r=o(" \u2014 "),QJ=a("a"),q9r=o("FlaxMarianMTModel"),N9r=o(" (Marian model)"),j9r=l(),h5=a("li"),STe=a("strong"),D9r=o("mbart"),G9r=o(" \u2014 "),WJ=a("a"),O9r=o("FlaxMBartForConditionalGeneration"),V9r=o(" (mBART model)"),X9r=l(),p5=a("li"),RTe=a("strong"),z9r=o("mt5"),Q9r=o(" \u2014 "),HJ=a("a"),W9r=o("FlaxMT5ForConditionalGeneration"),H9r=o(" (mT5 model)"),U9r=l(),u5=a("li"),PTe=a("strong"),J9r=o("pegasus"),Y9r=o(" \u2014 "),UJ=a("a"),K9r=o("FlaxPegasusForConditionalGeneration"),Z9r=o(" (Pegasus model)"),e$r=l(),_5=a("li"),BTe=a("strong"),o$r=o("t5"),r$r=o(" \u2014 "),JJ=a("a"),t$r=o("FlaxT5ForConditionalGeneration"),a$r=o(" (T5 model)"),n$r=l(),F(b5.$$.fragment),Tqe=l(),Oc=a("h2"),v5=a("a"),ITe=a("span"),F(_x.$$.fragment),s$r=l(),qTe=a("span"),l$r=o("FlaxAutoModelForSequenceClassification"),Mqe=l(),ur=a("div"),F(bx.$$.fragment),i$r=l(),Vc=a("p"),d$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YJ=a("a"),c$r=o("from_pretrained()"),f$r=o(" class method or the "),KJ=a("a"),m$r=o("from_config()"),g$r=o(` class
method.`),h$r=l(),vx=a("p"),p$r=o("This class cannot be instantiated directly using "),NTe=a("code"),u$r=o("__init__()"),_$r=o(" (throws an error)."),b$r=l(),Xt=a("div"),F(Fx.$$.fragment),v$r=l(),jTe=a("p"),F$r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),T$r=l(),Xc=a("p"),M$r=o(`Note:
Loading a model from its configuration file does `),DTe=a("strong"),E$r=o("not"),C$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=a("a"),w$r=o("from_pretrained()"),A$r=o(" to load the model weights."),y$r=l(),F(F5.$$.fragment),L$r=l(),Xr=a("div"),F(Tx.$$.fragment),x$r=l(),GTe=a("p"),$$r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),k$r=l(),bn=a("p"),S$r=o("The model class to instantiate is selected based on the "),OTe=a("code"),R$r=o("model_type"),P$r=o(` property of the config object (either
passed as an argument or loaded from `),VTe=a("code"),B$r=o("pretrained_model_name_or_path"),I$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=a("code"),q$r=o("pretrained_model_name_or_path"),N$r=o(":"),j$r=l(),$e=a("ul"),T5=a("li"),zTe=a("strong"),D$r=o("albert"),G$r=o(" \u2014 "),eY=a("a"),O$r=o("FlaxAlbertForSequenceClassification"),V$r=o(" (ALBERT model)"),X$r=l(),M5=a("li"),QTe=a("strong"),z$r=o("bart"),Q$r=o(" \u2014 "),oY=a("a"),W$r=o("FlaxBartForSequenceClassification"),H$r=o(" (BART model)"),U$r=l(),E5=a("li"),WTe=a("strong"),J$r=o("bert"),Y$r=o(" \u2014 "),rY=a("a"),K$r=o("FlaxBertForSequenceClassification"),Z$r=o(" (BERT model)"),ekr=l(),C5=a("li"),HTe=a("strong"),okr=o("big_bird"),rkr=o(" \u2014 "),tY=a("a"),tkr=o("FlaxBigBirdForSequenceClassification"),akr=o(" (BigBird model)"),nkr=l(),w5=a("li"),UTe=a("strong"),skr=o("distilbert"),lkr=o(" \u2014 "),aY=a("a"),ikr=o("FlaxDistilBertForSequenceClassification"),dkr=o(" (DistilBERT model)"),ckr=l(),A5=a("li"),JTe=a("strong"),fkr=o("electra"),mkr=o(" \u2014 "),nY=a("a"),gkr=o("FlaxElectraForSequenceClassification"),hkr=o(" (ELECTRA model)"),pkr=l(),y5=a("li"),YTe=a("strong"),ukr=o("mbart"),_kr=o(" \u2014 "),sY=a("a"),bkr=o("FlaxMBartForSequenceClassification"),vkr=o(" (mBART model)"),Fkr=l(),L5=a("li"),KTe=a("strong"),Tkr=o("roberta"),Mkr=o(" \u2014 "),lY=a("a"),Ekr=o("FlaxRobertaForSequenceClassification"),Ckr=o(" (RoBERTa model)"),wkr=l(),x5=a("li"),ZTe=a("strong"),Akr=o("roformer"),ykr=o(" \u2014 "),iY=a("a"),Lkr=o("FlaxRoFormerForSequenceClassification"),xkr=o(" (RoFormer model)"),$kr=l(),$5=a("li"),e7e=a("strong"),kkr=o("xlm-roberta"),Skr=o(" \u2014 "),dY=a("a"),Rkr=o("FlaxXLMRobertaForSequenceClassification"),Pkr=o(" (XLM-RoBERTa model)"),Bkr=l(),F(k5.$$.fragment),Eqe=l(),zc=a("h2"),S5=a("a"),o7e=a("span"),F(Mx.$$.fragment),Ikr=l(),r7e=a("span"),qkr=o("FlaxAutoModelForQuestionAnswering"),Cqe=l(),_r=a("div"),F(Ex.$$.fragment),Nkr=l(),Qc=a("p"),jkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cY=a("a"),Dkr=o("from_pretrained()"),Gkr=o(" class method or the "),fY=a("a"),Okr=o("from_config()"),Vkr=o(` class
method.`),Xkr=l(),Cx=a("p"),zkr=o("This class cannot be instantiated directly using "),t7e=a("code"),Qkr=o("__init__()"),Wkr=o(" (throws an error)."),Hkr=l(),zt=a("div"),F(wx.$$.fragment),Ukr=l(),a7e=a("p"),Jkr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ykr=l(),Wc=a("p"),Kkr=o(`Note:
Loading a model from its configuration file does `),n7e=a("strong"),Zkr=o("not"),eSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=a("a"),oSr=o("from_pretrained()"),rSr=o(" to load the model weights."),tSr=l(),F(R5.$$.fragment),aSr=l(),zr=a("div"),F(Ax.$$.fragment),nSr=l(),s7e=a("p"),sSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lSr=l(),vn=a("p"),iSr=o("The model class to instantiate is selected based on the "),l7e=a("code"),dSr=o("model_type"),cSr=o(` property of the config object (either
passed as an argument or loaded from `),i7e=a("code"),fSr=o("pretrained_model_name_or_path"),mSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d7e=a("code"),gSr=o("pretrained_model_name_or_path"),hSr=o(":"),pSr=l(),ke=a("ul"),P5=a("li"),c7e=a("strong"),uSr=o("albert"),_Sr=o(" \u2014 "),gY=a("a"),bSr=o("FlaxAlbertForQuestionAnswering"),vSr=o(" (ALBERT model)"),FSr=l(),B5=a("li"),f7e=a("strong"),TSr=o("bart"),MSr=o(" \u2014 "),hY=a("a"),ESr=o("FlaxBartForQuestionAnswering"),CSr=o(" (BART model)"),wSr=l(),I5=a("li"),m7e=a("strong"),ASr=o("bert"),ySr=o(" \u2014 "),pY=a("a"),LSr=o("FlaxBertForQuestionAnswering"),xSr=o(" (BERT model)"),$Sr=l(),q5=a("li"),g7e=a("strong"),kSr=o("big_bird"),SSr=o(" \u2014 "),uY=a("a"),RSr=o("FlaxBigBirdForQuestionAnswering"),PSr=o(" (BigBird model)"),BSr=l(),N5=a("li"),h7e=a("strong"),ISr=o("distilbert"),qSr=o(" \u2014 "),_Y=a("a"),NSr=o("FlaxDistilBertForQuestionAnswering"),jSr=o(" (DistilBERT model)"),DSr=l(),j5=a("li"),p7e=a("strong"),GSr=o("electra"),OSr=o(" \u2014 "),bY=a("a"),VSr=o("FlaxElectraForQuestionAnswering"),XSr=o(" (ELECTRA model)"),zSr=l(),D5=a("li"),u7e=a("strong"),QSr=o("mbart"),WSr=o(" \u2014 "),vY=a("a"),HSr=o("FlaxMBartForQuestionAnswering"),USr=o(" (mBART model)"),JSr=l(),G5=a("li"),_7e=a("strong"),YSr=o("roberta"),KSr=o(" \u2014 "),FY=a("a"),ZSr=o("FlaxRobertaForQuestionAnswering"),eRr=o(" (RoBERTa model)"),oRr=l(),O5=a("li"),b7e=a("strong"),rRr=o("roformer"),tRr=o(" \u2014 "),TY=a("a"),aRr=o("FlaxRoFormerForQuestionAnswering"),nRr=o(" (RoFormer model)"),sRr=l(),V5=a("li"),v7e=a("strong"),lRr=o("xlm-roberta"),iRr=o(" \u2014 "),MY=a("a"),dRr=o("FlaxXLMRobertaForQuestionAnswering"),cRr=o(" (XLM-RoBERTa model)"),fRr=l(),F(X5.$$.fragment),wqe=l(),Hc=a("h2"),z5=a("a"),F7e=a("span"),F(yx.$$.fragment),mRr=l(),T7e=a("span"),gRr=o("FlaxAutoModelForTokenClassification"),Aqe=l(),br=a("div"),F(Lx.$$.fragment),hRr=l(),Uc=a("p"),pRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),EY=a("a"),uRr=o("from_pretrained()"),_Rr=o(" class method or the "),CY=a("a"),bRr=o("from_config()"),vRr=o(` class
method.`),FRr=l(),xx=a("p"),TRr=o("This class cannot be instantiated directly using "),M7e=a("code"),MRr=o("__init__()"),ERr=o(" (throws an error)."),CRr=l(),Qt=a("div"),F($x.$$.fragment),wRr=l(),E7e=a("p"),ARr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yRr=l(),Jc=a("p"),LRr=o(`Note:
Loading a model from its configuration file does `),C7e=a("strong"),xRr=o("not"),$Rr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),kRr=o("from_pretrained()"),SRr=o(" to load the model weights."),RRr=l(),F(Q5.$$.fragment),PRr=l(),Qr=a("div"),F(kx.$$.fragment),BRr=l(),w7e=a("p"),IRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qRr=l(),Fn=a("p"),NRr=o("The model class to instantiate is selected based on the "),A7e=a("code"),jRr=o("model_type"),DRr=o(` property of the config object (either
passed as an argument or loaded from `),y7e=a("code"),GRr=o("pretrained_model_name_or_path"),ORr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L7e=a("code"),VRr=o("pretrained_model_name_or_path"),XRr=o(":"),zRr=l(),Ge=a("ul"),W5=a("li"),x7e=a("strong"),QRr=o("albert"),WRr=o(" \u2014 "),AY=a("a"),HRr=o("FlaxAlbertForTokenClassification"),URr=o(" (ALBERT model)"),JRr=l(),H5=a("li"),$7e=a("strong"),YRr=o("bert"),KRr=o(" \u2014 "),yY=a("a"),ZRr=o("FlaxBertForTokenClassification"),ePr=o(" (BERT model)"),oPr=l(),U5=a("li"),k7e=a("strong"),rPr=o("big_bird"),tPr=o(" \u2014 "),LY=a("a"),aPr=o("FlaxBigBirdForTokenClassification"),nPr=o(" (BigBird model)"),sPr=l(),J5=a("li"),S7e=a("strong"),lPr=o("distilbert"),iPr=o(" \u2014 "),xY=a("a"),dPr=o("FlaxDistilBertForTokenClassification"),cPr=o(" (DistilBERT model)"),fPr=l(),Y5=a("li"),R7e=a("strong"),mPr=o("electra"),gPr=o(" \u2014 "),$Y=a("a"),hPr=o("FlaxElectraForTokenClassification"),pPr=o(" (ELECTRA model)"),uPr=l(),K5=a("li"),P7e=a("strong"),_Pr=o("roberta"),bPr=o(" \u2014 "),kY=a("a"),vPr=o("FlaxRobertaForTokenClassification"),FPr=o(" (RoBERTa model)"),TPr=l(),Z5=a("li"),B7e=a("strong"),MPr=o("roformer"),EPr=o(" \u2014 "),SY=a("a"),CPr=o("FlaxRoFormerForTokenClassification"),wPr=o(" (RoFormer model)"),APr=l(),eC=a("li"),I7e=a("strong"),yPr=o("xlm-roberta"),LPr=o(" \u2014 "),RY=a("a"),xPr=o("FlaxXLMRobertaForTokenClassification"),$Pr=o(" (XLM-RoBERTa model)"),kPr=l(),F(oC.$$.fragment),yqe=l(),Yc=a("h2"),rC=a("a"),q7e=a("span"),F(Sx.$$.fragment),SPr=l(),N7e=a("span"),RPr=o("FlaxAutoModelForMultipleChoice"),Lqe=l(),vr=a("div"),F(Rx.$$.fragment),PPr=l(),Kc=a("p"),BPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PY=a("a"),IPr=o("from_pretrained()"),qPr=o(" class method or the "),BY=a("a"),NPr=o("from_config()"),jPr=o(` class
method.`),DPr=l(),Px=a("p"),GPr=o("This class cannot be instantiated directly using "),j7e=a("code"),OPr=o("__init__()"),VPr=o(" (throws an error)."),XPr=l(),Wt=a("div"),F(Bx.$$.fragment),zPr=l(),D7e=a("p"),QPr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),WPr=l(),Zc=a("p"),HPr=o(`Note:
Loading a model from its configuration file does `),G7e=a("strong"),UPr=o("not"),JPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=a("a"),YPr=o("from_pretrained()"),KPr=o(" to load the model weights."),ZPr=l(),F(tC.$$.fragment),eBr=l(),Wr=a("div"),F(Ix.$$.fragment),oBr=l(),O7e=a("p"),rBr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tBr=l(),Tn=a("p"),aBr=o("The model class to instantiate is selected based on the "),V7e=a("code"),nBr=o("model_type"),sBr=o(` property of the config object (either
passed as an argument or loaded from `),X7e=a("code"),lBr=o("pretrained_model_name_or_path"),iBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=a("code"),dBr=o("pretrained_model_name_or_path"),cBr=o(":"),fBr=l(),Oe=a("ul"),aC=a("li"),Q7e=a("strong"),mBr=o("albert"),gBr=o(" \u2014 "),qY=a("a"),hBr=o("FlaxAlbertForMultipleChoice"),pBr=o(" (ALBERT model)"),uBr=l(),nC=a("li"),W7e=a("strong"),_Br=o("bert"),bBr=o(" \u2014 "),NY=a("a"),vBr=o("FlaxBertForMultipleChoice"),FBr=o(" (BERT model)"),TBr=l(),sC=a("li"),H7e=a("strong"),MBr=o("big_bird"),EBr=o(" \u2014 "),jY=a("a"),CBr=o("FlaxBigBirdForMultipleChoice"),wBr=o(" (BigBird model)"),ABr=l(),lC=a("li"),U7e=a("strong"),yBr=o("distilbert"),LBr=o(" \u2014 "),DY=a("a"),xBr=o("FlaxDistilBertForMultipleChoice"),$Br=o(" (DistilBERT model)"),kBr=l(),iC=a("li"),J7e=a("strong"),SBr=o("electra"),RBr=o(" \u2014 "),GY=a("a"),PBr=o("FlaxElectraForMultipleChoice"),BBr=o(" (ELECTRA model)"),IBr=l(),dC=a("li"),Y7e=a("strong"),qBr=o("roberta"),NBr=o(" \u2014 "),OY=a("a"),jBr=o("FlaxRobertaForMultipleChoice"),DBr=o(" (RoBERTa model)"),GBr=l(),cC=a("li"),K7e=a("strong"),OBr=o("roformer"),VBr=o(" \u2014 "),VY=a("a"),XBr=o("FlaxRoFormerForMultipleChoice"),zBr=o(" (RoFormer model)"),QBr=l(),fC=a("li"),Z7e=a("strong"),WBr=o("xlm-roberta"),HBr=o(" \u2014 "),XY=a("a"),UBr=o("FlaxXLMRobertaForMultipleChoice"),JBr=o(" (XLM-RoBERTa model)"),YBr=l(),F(mC.$$.fragment),xqe=l(),ef=a("h2"),gC=a("a"),eMe=a("span"),F(qx.$$.fragment),KBr=l(),oMe=a("span"),ZBr=o("FlaxAutoModelForNextSentencePrediction"),$qe=l(),Fr=a("div"),F(Nx.$$.fragment),eIr=l(),of=a("p"),oIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zY=a("a"),rIr=o("from_pretrained()"),tIr=o(" class method or the "),QY=a("a"),aIr=o("from_config()"),nIr=o(` class
method.`),sIr=l(),jx=a("p"),lIr=o("This class cannot be instantiated directly using "),rMe=a("code"),iIr=o("__init__()"),dIr=o(" (throws an error)."),cIr=l(),Ht=a("div"),F(Dx.$$.fragment),fIr=l(),tMe=a("p"),mIr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gIr=l(),rf=a("p"),hIr=o(`Note:
Loading a model from its configuration file does `),aMe=a("strong"),pIr=o("not"),uIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=a("a"),_Ir=o("from_pretrained()"),bIr=o(" to load the model weights."),vIr=l(),F(hC.$$.fragment),FIr=l(),Hr=a("div"),F(Gx.$$.fragment),TIr=l(),nMe=a("p"),MIr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),EIr=l(),Mn=a("p"),CIr=o("The model class to instantiate is selected based on the "),sMe=a("code"),wIr=o("model_type"),AIr=o(` property of the config object (either
passed as an argument or loaded from `),lMe=a("code"),yIr=o("pretrained_model_name_or_path"),LIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=a("code"),xIr=o("pretrained_model_name_or_path"),$Ir=o(":"),kIr=l(),dMe=a("ul"),pC=a("li"),cMe=a("strong"),SIr=o("bert"),RIr=o(" \u2014 "),HY=a("a"),PIr=o("FlaxBertForNextSentencePrediction"),BIr=o(" (BERT model)"),IIr=l(),F(uC.$$.fragment),kqe=l(),tf=a("h2"),_C=a("a"),fMe=a("span"),F(Ox.$$.fragment),qIr=l(),mMe=a("span"),NIr=o("FlaxAutoModelForImageClassification"),Sqe=l(),Tr=a("div"),F(Vx.$$.fragment),jIr=l(),af=a("p"),DIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UY=a("a"),GIr=o("from_pretrained()"),OIr=o(" class method or the "),JY=a("a"),VIr=o("from_config()"),XIr=o(` class
method.`),zIr=l(),Xx=a("p"),QIr=o("This class cannot be instantiated directly using "),gMe=a("code"),WIr=o("__init__()"),HIr=o(" (throws an error)."),UIr=l(),Ut=a("div"),F(zx.$$.fragment),JIr=l(),hMe=a("p"),YIr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KIr=l(),nf=a("p"),ZIr=o(`Note:
Loading a model from its configuration file does `),pMe=a("strong"),eqr=o("not"),oqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=a("a"),rqr=o("from_pretrained()"),tqr=o(" to load the model weights."),aqr=l(),F(bC.$$.fragment),nqr=l(),Ur=a("div"),F(Qx.$$.fragment),sqr=l(),uMe=a("p"),lqr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iqr=l(),En=a("p"),dqr=o("The model class to instantiate is selected based on the "),_Me=a("code"),cqr=o("model_type"),fqr=o(` property of the config object (either
passed as an argument or loaded from `),bMe=a("code"),mqr=o("pretrained_model_name_or_path"),gqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=a("code"),hqr=o("pretrained_model_name_or_path"),pqr=o(":"),uqr=l(),Wx=a("ul"),vC=a("li"),FMe=a("strong"),_qr=o("beit"),bqr=o(" \u2014 "),KY=a("a"),vqr=o("FlaxBeitForImageClassification"),Fqr=o(" (BEiT model)"),Tqr=l(),FC=a("li"),TMe=a("strong"),Mqr=o("vit"),Eqr=o(" \u2014 "),ZY=a("a"),Cqr=o("FlaxViTForImageClassification"),wqr=o(" (ViT model)"),Aqr=l(),F(TC.$$.fragment),Rqe=l(),sf=a("h2"),MC=a("a"),MMe=a("span"),F(Hx.$$.fragment),yqr=l(),EMe=a("span"),Lqr=o("FlaxAutoModelForVision2Seq"),Pqe=l(),Mr=a("div"),F(Ux.$$.fragment),xqr=l(),lf=a("p"),$qr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eK=a("a"),kqr=o("from_pretrained()"),Sqr=o(" class method or the "),oK=a("a"),Rqr=o("from_config()"),Pqr=o(` class
method.`),Bqr=l(),Jx=a("p"),Iqr=o("This class cannot be instantiated directly using "),CMe=a("code"),qqr=o("__init__()"),Nqr=o(" (throws an error)."),jqr=l(),Jt=a("div"),F(Yx.$$.fragment),Dqr=l(),wMe=a("p"),Gqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Oqr=l(),df=a("p"),Vqr=o(`Note:
Loading a model from its configuration file does `),AMe=a("strong"),Xqr=o("not"),zqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=a("a"),Qqr=o("from_pretrained()"),Wqr=o(" to load the model weights."),Hqr=l(),F(EC.$$.fragment),Uqr=l(),Jr=a("div"),F(Kx.$$.fragment),Jqr=l(),yMe=a("p"),Yqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Kqr=l(),Cn=a("p"),Zqr=o("The model class to instantiate is selected based on the "),LMe=a("code"),eNr=o("model_type"),oNr=o(` property of the config object (either
passed as an argument or loaded from `),xMe=a("code"),rNr=o("pretrained_model_name_or_path"),tNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Me=a("code"),aNr=o("pretrained_model_name_or_path"),nNr=o(":"),sNr=l(),kMe=a("ul"),CC=a("li"),SMe=a("strong"),lNr=o("vision-encoder-decoder"),iNr=o(" \u2014 "),tK=a("a"),dNr=o("FlaxVisionEncoderDecoderModel"),cNr=o(" (Vision Encoder decoder model)"),fNr=l(),F(wC.$$.fragment),this.h()},l(f){const _=Bwt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Zx=s(p);m=n(Zx,"A",{id:!0,class:!0,href:!0});var RMe=s(m);u=n(RMe,"SPAN",{});var PMe=s(u);T(d.$$.fragment,PMe),PMe.forEach(t),RMe.forEach(t),h=i(Zx),Mo=n(Zx,"SPAN",{});var BMe=s(Mo);ii=r(BMe,"Auto Classes"),BMe.forEach(t),Zx.forEach(t),gf=i(f),et=n(f,"P",{});var e9=s(et);di=r(e9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=n(e9,"CODE",{});var IMe=s(ci);Xw=r(IMe,"from_pretrained()"),IMe.forEach(t),hf=r(e9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),e9.forEach(t),Ne=i(f),Xe=n(f,"P",{});var wn=s(Xe);fi=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var qMe=s(An);zw=r(qMe,"AutoConfig"),qMe.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var NMe=s(Ln);Qw=r(NMe,"AutoModel"),NMe.forEach(t),mi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var jMe=s(xn);Ww=r(jMe,"AutoTokenizer"),jMe.forEach(t),gi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),pf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var o9=s(Ae);m$=r(o9,"will create a model that is an instance of "),hi=n(o9,"A",{href:!0});var DMe=s(hi);g$=r(DMe,"BertModel"),DMe.forEach(t),h$=r(o9,"."),o9.forEach(t),Eo=i(f),Ea=n(f,"P",{});var r9=s(Ea);p$=r(r9,"There is one class of "),uf=n(r9,"CODE",{});var GMe=s(uf);u$=r(GMe,"AutoModel"),GMe.forEach(t),Vje=r(r9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),r9.forEach(t),SBe=i(f),pi=n(f,"H2",{class:!0});var t9=s(pi);_f=n(t9,"A",{id:!0,class:!0,href:!0});var OMe=s(_f);YZ=n(OMe,"SPAN",{});var VMe=s(YZ);T(Hw.$$.fragment,VMe),VMe.forEach(t),OMe.forEach(t),Xje=i(t9),KZ=n(t9,"SPAN",{});var XMe=s(KZ);zje=r(XMe,"Extending the Auto Classes"),XMe.forEach(t),t9.forEach(t),RBe=i(f),$n=n(f,"P",{});var cf=s($n);Qje=r(cf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ZZ=n(cf,"CODE",{});var zMe=s(ZZ);Wje=r(zMe,"NewModel"),zMe.forEach(t),Hje=r(cf,", make sure you have a "),eee=n(cf,"CODE",{});var QMe=s(eee);Uje=r(QMe,"NewModelConfig"),QMe.forEach(t),Jje=r(cf,` then you can add those to the auto
classes like this:`),cf.forEach(t),PBe=i(f),T(Uw.$$.fragment,f),BBe=i(f),_$=n(f,"P",{});var WMe=s(_$);Yje=r(WMe,"You will then be able to use the auto classes like you would usually do!"),WMe.forEach(t),IBe=i(f),T(bf.$$.fragment,f),qBe=i(f),ui=n(f,"H2",{class:!0});var a9=s(ui);vf=n(a9,"A",{id:!0,class:!0,href:!0});var HMe=s(vf);oee=n(HMe,"SPAN",{});var UMe=s(oee);T(Jw.$$.fragment,UMe),UMe.forEach(t),HMe.forEach(t),Kje=i(a9),ree=n(a9,"SPAN",{});var JMe=s(ree);Zje=r(JMe,"AutoConfig"),JMe.forEach(t),a9.forEach(t),NBe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(Yw.$$.fragment,Kr),eDe=i(Kr),Kw=n(Kr,"P",{});var n9=s(Kw);oDe=r(n9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),b$=n(n9,"A",{href:!0});var YMe=s(b$);rDe=r(YMe,"from_pretrained()"),YMe.forEach(t),tDe=r(n9," class method."),n9.forEach(t),aDe=i(Kr),Zw=n(Kr,"P",{});var s9=s(Zw);nDe=r(s9,"This class cannot be instantiated directly using "),tee=n(s9,"CODE",{});var KMe=s(tee);sDe=r(KMe,"__init__()"),KMe.forEach(t),lDe=r(s9," (throws an error)."),s9.forEach(t),iDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(eA.$$.fragment,Zr),dDe=i(Zr),aee=n(Zr,"P",{});var ZMe=s(aee);cDe=r(ZMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),ZMe.forEach(t),fDe=i(Zr),_i=n(Zr,"P",{});var ff=s(_i);mDe=r(ff,"The configuration class to instantiate is selected based on the "),nee=n(ff,"CODE",{});var e4e=s(nee);gDe=r(e4e,"model_type"),e4e.forEach(t),hDe=r(ff,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),see=n(ff,"CODE",{});var o4e=s(see);pDe=r(o4e,"pretrained_model_name_or_path"),o4e.forEach(t),uDe=r(ff,":"),ff.forEach(t),_De=i(Zr),y=n(Zr,"UL",{});var L=s(y);Ff=n(L,"LI",{});var AC=s(Ff);lee=n(AC,"STRONG",{});var r4e=s(lee);bDe=r(r4e,"albert"),r4e.forEach(t),vDe=r(AC," \u2014 "),v$=n(AC,"A",{href:!0});var t4e=s(v$);FDe=r(t4e,"AlbertConfig"),t4e.forEach(t),TDe=r(AC," (ALBERT model)"),AC.forEach(t),MDe=i(L),Tf=n(L,"LI",{});var yC=s(Tf);iee=n(yC,"STRONG",{});var a4e=s(iee);EDe=r(a4e,"bart"),a4e.forEach(t),CDe=r(yC," \u2014 "),F$=n(yC,"A",{href:!0});var n4e=s(F$);wDe=r(n4e,"BartConfig"),n4e.forEach(t),ADe=r(yC," (BART model)"),yC.forEach(t),yDe=i(L),Mf=n(L,"LI",{});var LC=s(Mf);dee=n(LC,"STRONG",{});var s4e=s(dee);LDe=r(s4e,"beit"),s4e.forEach(t),xDe=r(LC," \u2014 "),T$=n(LC,"A",{href:!0});var l4e=s(T$);$De=r(l4e,"BeitConfig"),l4e.forEach(t),kDe=r(LC," (BEiT model)"),LC.forEach(t),SDe=i(L),Ef=n(L,"LI",{});var xC=s(Ef);cee=n(xC,"STRONG",{});var i4e=s(cee);RDe=r(i4e,"bert"),i4e.forEach(t),PDe=r(xC," \u2014 "),M$=n(xC,"A",{href:!0});var d4e=s(M$);BDe=r(d4e,"BertConfig"),d4e.forEach(t),IDe=r(xC," (BERT model)"),xC.forEach(t),qDe=i(L),Cf=n(L,"LI",{});var $C=s(Cf);fee=n($C,"STRONG",{});var c4e=s(fee);NDe=r(c4e,"bert-generation"),c4e.forEach(t),jDe=r($C," \u2014 "),E$=n($C,"A",{href:!0});var f4e=s(E$);DDe=r(f4e,"BertGenerationConfig"),f4e.forEach(t),GDe=r($C," (Bert Generation model)"),$C.forEach(t),ODe=i(L),wf=n(L,"LI",{});var kC=s(wf);mee=n(kC,"STRONG",{});var m4e=s(mee);VDe=r(m4e,"big_bird"),m4e.forEach(t),XDe=r(kC," \u2014 "),C$=n(kC,"A",{href:!0});var g4e=s(C$);zDe=r(g4e,"BigBirdConfig"),g4e.forEach(t),QDe=r(kC," (BigBird model)"),kC.forEach(t),WDe=i(L),Af=n(L,"LI",{});var SC=s(Af);gee=n(SC,"STRONG",{});var h4e=s(gee);HDe=r(h4e,"bigbird_pegasus"),h4e.forEach(t),UDe=r(SC," \u2014 "),w$=n(SC,"A",{href:!0});var p4e=s(w$);JDe=r(p4e,"BigBirdPegasusConfig"),p4e.forEach(t),YDe=r(SC," (BigBirdPegasus model)"),SC.forEach(t),KDe=i(L),yf=n(L,"LI",{});var RC=s(yf);hee=n(RC,"STRONG",{});var u4e=s(hee);ZDe=r(u4e,"blenderbot"),u4e.forEach(t),eGe=r(RC," \u2014 "),A$=n(RC,"A",{href:!0});var _4e=s(A$);oGe=r(_4e,"BlenderbotConfig"),_4e.forEach(t),rGe=r(RC," (Blenderbot model)"),RC.forEach(t),tGe=i(L),Lf=n(L,"LI",{});var PC=s(Lf);pee=n(PC,"STRONG",{});var b4e=s(pee);aGe=r(b4e,"blenderbot-small"),b4e.forEach(t),nGe=r(PC," \u2014 "),y$=n(PC,"A",{href:!0});var v4e=s(y$);sGe=r(v4e,"BlenderbotSmallConfig"),v4e.forEach(t),lGe=r(PC," (BlenderbotSmall model)"),PC.forEach(t),iGe=i(L),xf=n(L,"LI",{});var BC=s(xf);uee=n(BC,"STRONG",{});var F4e=s(uee);dGe=r(F4e,"camembert"),F4e.forEach(t),cGe=r(BC," \u2014 "),L$=n(BC,"A",{href:!0});var T4e=s(L$);fGe=r(T4e,"CamembertConfig"),T4e.forEach(t),mGe=r(BC," (CamemBERT model)"),BC.forEach(t),gGe=i(L),$f=n(L,"LI",{});var IC=s($f);_ee=n(IC,"STRONG",{});var M4e=s(_ee);hGe=r(M4e,"canine"),M4e.forEach(t),pGe=r(IC," \u2014 "),x$=n(IC,"A",{href:!0});var E4e=s(x$);uGe=r(E4e,"CanineConfig"),E4e.forEach(t),_Ge=r(IC," (Canine model)"),IC.forEach(t),bGe=i(L),kf=n(L,"LI",{});var qC=s(kf);bee=n(qC,"STRONG",{});var C4e=s(bee);vGe=r(C4e,"clip"),C4e.forEach(t),FGe=r(qC," \u2014 "),$$=n(qC,"A",{href:!0});var w4e=s($$);TGe=r(w4e,"CLIPConfig"),w4e.forEach(t),MGe=r(qC," (CLIP model)"),qC.forEach(t),EGe=i(L),Sf=n(L,"LI",{});var NC=s(Sf);vee=n(NC,"STRONG",{});var A4e=s(vee);CGe=r(A4e,"convbert"),A4e.forEach(t),wGe=r(NC," \u2014 "),k$=n(NC,"A",{href:!0});var y4e=s(k$);AGe=r(y4e,"ConvBertConfig"),y4e.forEach(t),yGe=r(NC," (ConvBERT model)"),NC.forEach(t),LGe=i(L),Rf=n(L,"LI",{});var jC=s(Rf);Fee=n(jC,"STRONG",{});var L4e=s(Fee);xGe=r(L4e,"convnext"),L4e.forEach(t),$Ge=r(jC," \u2014 "),S$=n(jC,"A",{href:!0});var x4e=s(S$);kGe=r(x4e,"ConvNextConfig"),x4e.forEach(t),SGe=r(jC," (ConvNext model)"),jC.forEach(t),RGe=i(L),Pf=n(L,"LI",{});var DC=s(Pf);Tee=n(DC,"STRONG",{});var $4e=s(Tee);PGe=r($4e,"ctrl"),$4e.forEach(t),BGe=r(DC," \u2014 "),R$=n(DC,"A",{href:!0});var k4e=s(R$);IGe=r(k4e,"CTRLConfig"),k4e.forEach(t),qGe=r(DC," (CTRL model)"),DC.forEach(t),NGe=i(L),Bf=n(L,"LI",{});var GC=s(Bf);Mee=n(GC,"STRONG",{});var S4e=s(Mee);jGe=r(S4e,"data2vec-audio"),S4e.forEach(t),DGe=r(GC," \u2014 "),P$=n(GC,"A",{href:!0});var R4e=s(P$);GGe=r(R4e,"Data2VecAudioConfig"),R4e.forEach(t),OGe=r(GC," (Data2VecAudio model)"),GC.forEach(t),VGe=i(L),If=n(L,"LI",{});var OC=s(If);Eee=n(OC,"STRONG",{});var P4e=s(Eee);XGe=r(P4e,"data2vec-text"),P4e.forEach(t),zGe=r(OC," \u2014 "),B$=n(OC,"A",{href:!0});var B4e=s(B$);QGe=r(B4e,"Data2VecTextConfig"),B4e.forEach(t),WGe=r(OC," (Data2VecText model)"),OC.forEach(t),HGe=i(L),qf=n(L,"LI",{});var VC=s(qf);Cee=n(VC,"STRONG",{});var I4e=s(Cee);UGe=r(I4e,"data2vec-vision"),I4e.forEach(t),JGe=r(VC," \u2014 "),I$=n(VC,"A",{href:!0});var q4e=s(I$);YGe=r(q4e,"Data2VecVisionConfig"),q4e.forEach(t),KGe=r(VC," (Data2VecVision model)"),VC.forEach(t),ZGe=i(L),Nf=n(L,"LI",{});var XC=s(Nf);wee=n(XC,"STRONG",{});var N4e=s(wee);eOe=r(N4e,"deberta"),N4e.forEach(t),oOe=r(XC," \u2014 "),q$=n(XC,"A",{href:!0});var j4e=s(q$);rOe=r(j4e,"DebertaConfig"),j4e.forEach(t),tOe=r(XC," (DeBERTa model)"),XC.forEach(t),aOe=i(L),jf=n(L,"LI",{});var zC=s(jf);Aee=n(zC,"STRONG",{});var D4e=s(Aee);nOe=r(D4e,"deberta-v2"),D4e.forEach(t),sOe=r(zC," \u2014 "),N$=n(zC,"A",{href:!0});var G4e=s(N$);lOe=r(G4e,"DebertaV2Config"),G4e.forEach(t),iOe=r(zC," (DeBERTa-v2 model)"),zC.forEach(t),dOe=i(L),Df=n(L,"LI",{});var QC=s(Df);yee=n(QC,"STRONG",{});var O4e=s(yee);cOe=r(O4e,"decision_transformer"),O4e.forEach(t),fOe=r(QC," \u2014 "),j$=n(QC,"A",{href:!0});var V4e=s(j$);mOe=r(V4e,"DecisionTransformerConfig"),V4e.forEach(t),gOe=r(QC," (Decision Transformer model)"),QC.forEach(t),hOe=i(L),Gf=n(L,"LI",{});var WC=s(Gf);Lee=n(WC,"STRONG",{});var X4e=s(Lee);pOe=r(X4e,"deit"),X4e.forEach(t),uOe=r(WC," \u2014 "),D$=n(WC,"A",{href:!0});var z4e=s(D$);_Oe=r(z4e,"DeiTConfig"),z4e.forEach(t),bOe=r(WC," (DeiT model)"),WC.forEach(t),vOe=i(L),Of=n(L,"LI",{});var HC=s(Of);xee=n(HC,"STRONG",{});var Q4e=s(xee);FOe=r(Q4e,"detr"),Q4e.forEach(t),TOe=r(HC," \u2014 "),G$=n(HC,"A",{href:!0});var gNr=s(G$);MOe=r(gNr,"DetrConfig"),gNr.forEach(t),EOe=r(HC," (DETR model)"),HC.forEach(t),COe=i(L),Vf=n(L,"LI",{});var W4e=s(Vf);$ee=n(W4e,"STRONG",{});var hNr=s($ee);wOe=r(hNr,"distilbert"),hNr.forEach(t),AOe=r(W4e," \u2014 "),O$=n(W4e,"A",{href:!0});var pNr=s(O$);yOe=r(pNr,"DistilBertConfig"),pNr.forEach(t),LOe=r(W4e," (DistilBERT model)"),W4e.forEach(t),xOe=i(L),Xf=n(L,"LI",{});var H4e=s(Xf);kee=n(H4e,"STRONG",{});var uNr=s(kee);$Oe=r(uNr,"dpr"),uNr.forEach(t),kOe=r(H4e," \u2014 "),V$=n(H4e,"A",{href:!0});var _Nr=s(V$);SOe=r(_Nr,"DPRConfig"),_Nr.forEach(t),ROe=r(H4e," (DPR model)"),H4e.forEach(t),POe=i(L),zf=n(L,"LI",{});var U4e=s(zf);See=n(U4e,"STRONG",{});var bNr=s(See);BOe=r(bNr,"dpt"),bNr.forEach(t),IOe=r(U4e," \u2014 "),X$=n(U4e,"A",{href:!0});var vNr=s(X$);qOe=r(vNr,"DPTConfig"),vNr.forEach(t),NOe=r(U4e," (DPT model)"),U4e.forEach(t),jOe=i(L),Qf=n(L,"LI",{});var J4e=s(Qf);Ree=n(J4e,"STRONG",{});var FNr=s(Ree);DOe=r(FNr,"electra"),FNr.forEach(t),GOe=r(J4e," \u2014 "),z$=n(J4e,"A",{href:!0});var TNr=s(z$);OOe=r(TNr,"ElectraConfig"),TNr.forEach(t),VOe=r(J4e," (ELECTRA model)"),J4e.forEach(t),XOe=i(L),Wf=n(L,"LI",{});var Y4e=s(Wf);Pee=n(Y4e,"STRONG",{});var MNr=s(Pee);zOe=r(MNr,"encoder-decoder"),MNr.forEach(t),QOe=r(Y4e," \u2014 "),Q$=n(Y4e,"A",{href:!0});var ENr=s(Q$);WOe=r(ENr,"EncoderDecoderConfig"),ENr.forEach(t),HOe=r(Y4e," (Encoder decoder model)"),Y4e.forEach(t),UOe=i(L),Hf=n(L,"LI",{});var K4e=s(Hf);Bee=n(K4e,"STRONG",{});var CNr=s(Bee);JOe=r(CNr,"flaubert"),CNr.forEach(t),YOe=r(K4e," \u2014 "),W$=n(K4e,"A",{href:!0});var wNr=s(W$);KOe=r(wNr,"FlaubertConfig"),wNr.forEach(t),ZOe=r(K4e," (FlauBERT model)"),K4e.forEach(t),eVe=i(L),Uf=n(L,"LI",{});var Z4e=s(Uf);Iee=n(Z4e,"STRONG",{});var ANr=s(Iee);oVe=r(ANr,"fnet"),ANr.forEach(t),rVe=r(Z4e," \u2014 "),H$=n(Z4e,"A",{href:!0});var yNr=s(H$);tVe=r(yNr,"FNetConfig"),yNr.forEach(t),aVe=r(Z4e," (FNet model)"),Z4e.forEach(t),nVe=i(L),Jf=n(L,"LI",{});var eEe=s(Jf);qee=n(eEe,"STRONG",{});var LNr=s(qee);sVe=r(LNr,"fsmt"),LNr.forEach(t),lVe=r(eEe," \u2014 "),U$=n(eEe,"A",{href:!0});var xNr=s(U$);iVe=r(xNr,"FSMTConfig"),xNr.forEach(t),dVe=r(eEe," (FairSeq Machine-Translation model)"),eEe.forEach(t),cVe=i(L),Yf=n(L,"LI",{});var oEe=s(Yf);Nee=n(oEe,"STRONG",{});var $Nr=s(Nee);fVe=r($Nr,"funnel"),$Nr.forEach(t),mVe=r(oEe," \u2014 "),J$=n(oEe,"A",{href:!0});var kNr=s(J$);gVe=r(kNr,"FunnelConfig"),kNr.forEach(t),hVe=r(oEe," (Funnel Transformer model)"),oEe.forEach(t),pVe=i(L),Kf=n(L,"LI",{});var rEe=s(Kf);jee=n(rEe,"STRONG",{});var SNr=s(jee);uVe=r(SNr,"glpn"),SNr.forEach(t),_Ve=r(rEe," \u2014 "),Y$=n(rEe,"A",{href:!0});var RNr=s(Y$);bVe=r(RNr,"GLPNConfig"),RNr.forEach(t),vVe=r(rEe," (GLPN model)"),rEe.forEach(t),FVe=i(L),Zf=n(L,"LI",{});var tEe=s(Zf);Dee=n(tEe,"STRONG",{});var PNr=s(Dee);TVe=r(PNr,"gpt2"),PNr.forEach(t),MVe=r(tEe," \u2014 "),K$=n(tEe,"A",{href:!0});var BNr=s(K$);EVe=r(BNr,"GPT2Config"),BNr.forEach(t),CVe=r(tEe," (OpenAI GPT-2 model)"),tEe.forEach(t),wVe=i(L),em=n(L,"LI",{});var aEe=s(em);Gee=n(aEe,"STRONG",{});var INr=s(Gee);AVe=r(INr,"gpt_neo"),INr.forEach(t),yVe=r(aEe," \u2014 "),Z$=n(aEe,"A",{href:!0});var qNr=s(Z$);LVe=r(qNr,"GPTNeoConfig"),qNr.forEach(t),xVe=r(aEe," (GPT Neo model)"),aEe.forEach(t),$Ve=i(L),om=n(L,"LI",{});var nEe=s(om);Oee=n(nEe,"STRONG",{});var NNr=s(Oee);kVe=r(NNr,"gptj"),NNr.forEach(t),SVe=r(nEe," \u2014 "),ek=n(nEe,"A",{href:!0});var jNr=s(ek);RVe=r(jNr,"GPTJConfig"),jNr.forEach(t),PVe=r(nEe," (GPT-J model)"),nEe.forEach(t),BVe=i(L),rm=n(L,"LI",{});var sEe=s(rm);Vee=n(sEe,"STRONG",{});var DNr=s(Vee);IVe=r(DNr,"hubert"),DNr.forEach(t),qVe=r(sEe," \u2014 "),ok=n(sEe,"A",{href:!0});var GNr=s(ok);NVe=r(GNr,"HubertConfig"),GNr.forEach(t),jVe=r(sEe," (Hubert model)"),sEe.forEach(t),DVe=i(L),tm=n(L,"LI",{});var lEe=s(tm);Xee=n(lEe,"STRONG",{});var ONr=s(Xee);GVe=r(ONr,"ibert"),ONr.forEach(t),OVe=r(lEe," \u2014 "),rk=n(lEe,"A",{href:!0});var VNr=s(rk);VVe=r(VNr,"IBertConfig"),VNr.forEach(t),XVe=r(lEe," (I-BERT model)"),lEe.forEach(t),zVe=i(L),am=n(L,"LI",{});var iEe=s(am);zee=n(iEe,"STRONG",{});var XNr=s(zee);QVe=r(XNr,"imagegpt"),XNr.forEach(t),WVe=r(iEe," \u2014 "),tk=n(iEe,"A",{href:!0});var zNr=s(tk);HVe=r(zNr,"ImageGPTConfig"),zNr.forEach(t),UVe=r(iEe," (ImageGPT model)"),iEe.forEach(t),JVe=i(L),nm=n(L,"LI",{});var dEe=s(nm);Qee=n(dEe,"STRONG",{});var QNr=s(Qee);YVe=r(QNr,"layoutlm"),QNr.forEach(t),KVe=r(dEe," \u2014 "),ak=n(dEe,"A",{href:!0});var WNr=s(ak);ZVe=r(WNr,"LayoutLMConfig"),WNr.forEach(t),eXe=r(dEe," (LayoutLM model)"),dEe.forEach(t),oXe=i(L),sm=n(L,"LI",{});var cEe=s(sm);Wee=n(cEe,"STRONG",{});var HNr=s(Wee);rXe=r(HNr,"layoutlmv2"),HNr.forEach(t),tXe=r(cEe," \u2014 "),nk=n(cEe,"A",{href:!0});var UNr=s(nk);aXe=r(UNr,"LayoutLMv2Config"),UNr.forEach(t),nXe=r(cEe," (LayoutLMv2 model)"),cEe.forEach(t),sXe=i(L),lm=n(L,"LI",{});var fEe=s(lm);Hee=n(fEe,"STRONG",{});var JNr=s(Hee);lXe=r(JNr,"led"),JNr.forEach(t),iXe=r(fEe," \u2014 "),sk=n(fEe,"A",{href:!0});var YNr=s(sk);dXe=r(YNr,"LEDConfig"),YNr.forEach(t),cXe=r(fEe," (LED model)"),fEe.forEach(t),fXe=i(L),im=n(L,"LI",{});var mEe=s(im);Uee=n(mEe,"STRONG",{});var KNr=s(Uee);mXe=r(KNr,"longformer"),KNr.forEach(t),gXe=r(mEe," \u2014 "),lk=n(mEe,"A",{href:!0});var ZNr=s(lk);hXe=r(ZNr,"LongformerConfig"),ZNr.forEach(t),pXe=r(mEe," (Longformer model)"),mEe.forEach(t),uXe=i(L),dm=n(L,"LI",{});var gEe=s(dm);Jee=n(gEe,"STRONG",{});var ejr=s(Jee);_Xe=r(ejr,"luke"),ejr.forEach(t),bXe=r(gEe," \u2014 "),ik=n(gEe,"A",{href:!0});var ojr=s(ik);vXe=r(ojr,"LukeConfig"),ojr.forEach(t),FXe=r(gEe," (LUKE model)"),gEe.forEach(t),TXe=i(L),cm=n(L,"LI",{});var hEe=s(cm);Yee=n(hEe,"STRONG",{});var rjr=s(Yee);MXe=r(rjr,"lxmert"),rjr.forEach(t),EXe=r(hEe," \u2014 "),dk=n(hEe,"A",{href:!0});var tjr=s(dk);CXe=r(tjr,"LxmertConfig"),tjr.forEach(t),wXe=r(hEe," (LXMERT model)"),hEe.forEach(t),AXe=i(L),fm=n(L,"LI",{});var pEe=s(fm);Kee=n(pEe,"STRONG",{});var ajr=s(Kee);yXe=r(ajr,"m2m_100"),ajr.forEach(t),LXe=r(pEe," \u2014 "),ck=n(pEe,"A",{href:!0});var njr=s(ck);xXe=r(njr,"M2M100Config"),njr.forEach(t),$Xe=r(pEe," (M2M100 model)"),pEe.forEach(t),kXe=i(L),mm=n(L,"LI",{});var uEe=s(mm);Zee=n(uEe,"STRONG",{});var sjr=s(Zee);SXe=r(sjr,"marian"),sjr.forEach(t),RXe=r(uEe," \u2014 "),fk=n(uEe,"A",{href:!0});var ljr=s(fk);PXe=r(ljr,"MarianConfig"),ljr.forEach(t),BXe=r(uEe," (Marian model)"),uEe.forEach(t),IXe=i(L),gm=n(L,"LI",{});var _Ee=s(gm);eoe=n(_Ee,"STRONG",{});var ijr=s(eoe);qXe=r(ijr,"maskformer"),ijr.forEach(t),NXe=r(_Ee," \u2014 "),mk=n(_Ee,"A",{href:!0});var djr=s(mk);jXe=r(djr,"MaskFormerConfig"),djr.forEach(t),DXe=r(_Ee," (MaskFormer model)"),_Ee.forEach(t),GXe=i(L),hm=n(L,"LI",{});var bEe=s(hm);ooe=n(bEe,"STRONG",{});var cjr=s(ooe);OXe=r(cjr,"mbart"),cjr.forEach(t),VXe=r(bEe," \u2014 "),gk=n(bEe,"A",{href:!0});var fjr=s(gk);XXe=r(fjr,"MBartConfig"),fjr.forEach(t),zXe=r(bEe," (mBART model)"),bEe.forEach(t),QXe=i(L),pm=n(L,"LI",{});var vEe=s(pm);roe=n(vEe,"STRONG",{});var mjr=s(roe);WXe=r(mjr,"megatron-bert"),mjr.forEach(t),HXe=r(vEe," \u2014 "),hk=n(vEe,"A",{href:!0});var gjr=s(hk);UXe=r(gjr,"MegatronBertConfig"),gjr.forEach(t),JXe=r(vEe," (MegatronBert model)"),vEe.forEach(t),YXe=i(L),um=n(L,"LI",{});var FEe=s(um);toe=n(FEe,"STRONG",{});var hjr=s(toe);KXe=r(hjr,"mobilebert"),hjr.forEach(t),ZXe=r(FEe," \u2014 "),pk=n(FEe,"A",{href:!0});var pjr=s(pk);eze=r(pjr,"MobileBertConfig"),pjr.forEach(t),oze=r(FEe," (MobileBERT model)"),FEe.forEach(t),rze=i(L),_m=n(L,"LI",{});var TEe=s(_m);aoe=n(TEe,"STRONG",{});var ujr=s(aoe);tze=r(ujr,"mpnet"),ujr.forEach(t),aze=r(TEe," \u2014 "),uk=n(TEe,"A",{href:!0});var _jr=s(uk);nze=r(_jr,"MPNetConfig"),_jr.forEach(t),sze=r(TEe," (MPNet model)"),TEe.forEach(t),lze=i(L),bm=n(L,"LI",{});var MEe=s(bm);noe=n(MEe,"STRONG",{});var bjr=s(noe);ize=r(bjr,"mt5"),bjr.forEach(t),dze=r(MEe," \u2014 "),_k=n(MEe,"A",{href:!0});var vjr=s(_k);cze=r(vjr,"MT5Config"),vjr.forEach(t),fze=r(MEe," (mT5 model)"),MEe.forEach(t),mze=i(L),vm=n(L,"LI",{});var EEe=s(vm);soe=n(EEe,"STRONG",{});var Fjr=s(soe);gze=r(Fjr,"nystromformer"),Fjr.forEach(t),hze=r(EEe," \u2014 "),bk=n(EEe,"A",{href:!0});var Tjr=s(bk);pze=r(Tjr,"NystromformerConfig"),Tjr.forEach(t),uze=r(EEe," (Nystromformer model)"),EEe.forEach(t),_ze=i(L),Fm=n(L,"LI",{});var CEe=s(Fm);loe=n(CEe,"STRONG",{});var Mjr=s(loe);bze=r(Mjr,"openai-gpt"),Mjr.forEach(t),vze=r(CEe," \u2014 "),vk=n(CEe,"A",{href:!0});var Ejr=s(vk);Fze=r(Ejr,"OpenAIGPTConfig"),Ejr.forEach(t),Tze=r(CEe," (OpenAI GPT model)"),CEe.forEach(t),Mze=i(L),Tm=n(L,"LI",{});var wEe=s(Tm);ioe=n(wEe,"STRONG",{});var Cjr=s(ioe);Eze=r(Cjr,"opt"),Cjr.forEach(t),Cze=r(wEe," \u2014 "),Fk=n(wEe,"A",{href:!0});var wjr=s(Fk);wze=r(wjr,"OPTConfig"),wjr.forEach(t),Aze=r(wEe," (OPT model)"),wEe.forEach(t),yze=i(L),Mm=n(L,"LI",{});var AEe=s(Mm);doe=n(AEe,"STRONG",{});var Ajr=s(doe);Lze=r(Ajr,"pegasus"),Ajr.forEach(t),xze=r(AEe," \u2014 "),Tk=n(AEe,"A",{href:!0});var yjr=s(Tk);$ze=r(yjr,"PegasusConfig"),yjr.forEach(t),kze=r(AEe," (Pegasus model)"),AEe.forEach(t),Sze=i(L),Em=n(L,"LI",{});var yEe=s(Em);coe=n(yEe,"STRONG",{});var Ljr=s(coe);Rze=r(Ljr,"perceiver"),Ljr.forEach(t),Pze=r(yEe," \u2014 "),Mk=n(yEe,"A",{href:!0});var xjr=s(Mk);Bze=r(xjr,"PerceiverConfig"),xjr.forEach(t),Ize=r(yEe," (Perceiver model)"),yEe.forEach(t),qze=i(L),Cm=n(L,"LI",{});var LEe=s(Cm);foe=n(LEe,"STRONG",{});var $jr=s(foe);Nze=r($jr,"plbart"),$jr.forEach(t),jze=r(LEe," \u2014 "),Ek=n(LEe,"A",{href:!0});var kjr=s(Ek);Dze=r(kjr,"PLBartConfig"),kjr.forEach(t),Gze=r(LEe," (PLBart model)"),LEe.forEach(t),Oze=i(L),wm=n(L,"LI",{});var xEe=s(wm);moe=n(xEe,"STRONG",{});var Sjr=s(moe);Vze=r(Sjr,"poolformer"),Sjr.forEach(t),Xze=r(xEe," \u2014 "),Ck=n(xEe,"A",{href:!0});var Rjr=s(Ck);zze=r(Rjr,"PoolFormerConfig"),Rjr.forEach(t),Qze=r(xEe," (PoolFormer model)"),xEe.forEach(t),Wze=i(L),Am=n(L,"LI",{});var $Ee=s(Am);goe=n($Ee,"STRONG",{});var Pjr=s(goe);Hze=r(Pjr,"prophetnet"),Pjr.forEach(t),Uze=r($Ee," \u2014 "),wk=n($Ee,"A",{href:!0});var Bjr=s(wk);Jze=r(Bjr,"ProphetNetConfig"),Bjr.forEach(t),Yze=r($Ee," (ProphetNet model)"),$Ee.forEach(t),Kze=i(L),ym=n(L,"LI",{});var kEe=s(ym);hoe=n(kEe,"STRONG",{});var Ijr=s(hoe);Zze=r(Ijr,"qdqbert"),Ijr.forEach(t),eQe=r(kEe," \u2014 "),Ak=n(kEe,"A",{href:!0});var qjr=s(Ak);oQe=r(qjr,"QDQBertConfig"),qjr.forEach(t),rQe=r(kEe," (QDQBert model)"),kEe.forEach(t),tQe=i(L),Lm=n(L,"LI",{});var SEe=s(Lm);poe=n(SEe,"STRONG",{});var Njr=s(poe);aQe=r(Njr,"rag"),Njr.forEach(t),nQe=r(SEe," \u2014 "),yk=n(SEe,"A",{href:!0});var jjr=s(yk);sQe=r(jjr,"RagConfig"),jjr.forEach(t),lQe=r(SEe," (RAG model)"),SEe.forEach(t),iQe=i(L),xm=n(L,"LI",{});var REe=s(xm);uoe=n(REe,"STRONG",{});var Djr=s(uoe);dQe=r(Djr,"realm"),Djr.forEach(t),cQe=r(REe," \u2014 "),Lk=n(REe,"A",{href:!0});var Gjr=s(Lk);fQe=r(Gjr,"RealmConfig"),Gjr.forEach(t),mQe=r(REe," (Realm model)"),REe.forEach(t),gQe=i(L),$m=n(L,"LI",{});var PEe=s($m);_oe=n(PEe,"STRONG",{});var Ojr=s(_oe);hQe=r(Ojr,"reformer"),Ojr.forEach(t),pQe=r(PEe," \u2014 "),xk=n(PEe,"A",{href:!0});var Vjr=s(xk);uQe=r(Vjr,"ReformerConfig"),Vjr.forEach(t),_Qe=r(PEe," (Reformer model)"),PEe.forEach(t),bQe=i(L),km=n(L,"LI",{});var BEe=s(km);boe=n(BEe,"STRONG",{});var Xjr=s(boe);vQe=r(Xjr,"regnet"),Xjr.forEach(t),FQe=r(BEe," \u2014 "),$k=n(BEe,"A",{href:!0});var zjr=s($k);TQe=r(zjr,"RegNetConfig"),zjr.forEach(t),MQe=r(BEe," (RegNet model)"),BEe.forEach(t),EQe=i(L),Sm=n(L,"LI",{});var IEe=s(Sm);voe=n(IEe,"STRONG",{});var Qjr=s(voe);CQe=r(Qjr,"rembert"),Qjr.forEach(t),wQe=r(IEe," \u2014 "),kk=n(IEe,"A",{href:!0});var Wjr=s(kk);AQe=r(Wjr,"RemBertConfig"),Wjr.forEach(t),yQe=r(IEe," (RemBERT model)"),IEe.forEach(t),LQe=i(L),Rm=n(L,"LI",{});var qEe=s(Rm);Foe=n(qEe,"STRONG",{});var Hjr=s(Foe);xQe=r(Hjr,"resnet"),Hjr.forEach(t),$Qe=r(qEe," \u2014 "),Sk=n(qEe,"A",{href:!0});var Ujr=s(Sk);kQe=r(Ujr,"ResNetConfig"),Ujr.forEach(t),SQe=r(qEe," (ResNet model)"),qEe.forEach(t),RQe=i(L),Pm=n(L,"LI",{});var NEe=s(Pm);Toe=n(NEe,"STRONG",{});var Jjr=s(Toe);PQe=r(Jjr,"retribert"),Jjr.forEach(t),BQe=r(NEe," \u2014 "),Rk=n(NEe,"A",{href:!0});var Yjr=s(Rk);IQe=r(Yjr,"RetriBertConfig"),Yjr.forEach(t),qQe=r(NEe," (RetriBERT model)"),NEe.forEach(t),NQe=i(L),Bm=n(L,"LI",{});var jEe=s(Bm);Moe=n(jEe,"STRONG",{});var Kjr=s(Moe);jQe=r(Kjr,"roberta"),Kjr.forEach(t),DQe=r(jEe," \u2014 "),Pk=n(jEe,"A",{href:!0});var Zjr=s(Pk);GQe=r(Zjr,"RobertaConfig"),Zjr.forEach(t),OQe=r(jEe," (RoBERTa model)"),jEe.forEach(t),VQe=i(L),Im=n(L,"LI",{});var DEe=s(Im);Eoe=n(DEe,"STRONG",{});var eDr=s(Eoe);XQe=r(eDr,"roformer"),eDr.forEach(t),zQe=r(DEe," \u2014 "),Bk=n(DEe,"A",{href:!0});var oDr=s(Bk);QQe=r(oDr,"RoFormerConfig"),oDr.forEach(t),WQe=r(DEe," (RoFormer model)"),DEe.forEach(t),HQe=i(L),qm=n(L,"LI",{});var GEe=s(qm);Coe=n(GEe,"STRONG",{});var rDr=s(Coe);UQe=r(rDr,"segformer"),rDr.forEach(t),JQe=r(GEe," \u2014 "),Ik=n(GEe,"A",{href:!0});var tDr=s(Ik);YQe=r(tDr,"SegformerConfig"),tDr.forEach(t),KQe=r(GEe," (SegFormer model)"),GEe.forEach(t),ZQe=i(L),Nm=n(L,"LI",{});var OEe=s(Nm);woe=n(OEe,"STRONG",{});var aDr=s(woe);eWe=r(aDr,"sew"),aDr.forEach(t),oWe=r(OEe," \u2014 "),qk=n(OEe,"A",{href:!0});var nDr=s(qk);rWe=r(nDr,"SEWConfig"),nDr.forEach(t),tWe=r(OEe," (SEW model)"),OEe.forEach(t),aWe=i(L),jm=n(L,"LI",{});var VEe=s(jm);Aoe=n(VEe,"STRONG",{});var sDr=s(Aoe);nWe=r(sDr,"sew-d"),sDr.forEach(t),sWe=r(VEe," \u2014 "),Nk=n(VEe,"A",{href:!0});var lDr=s(Nk);lWe=r(lDr,"SEWDConfig"),lDr.forEach(t),iWe=r(VEe," (SEW-D model)"),VEe.forEach(t),dWe=i(L),Dm=n(L,"LI",{});var XEe=s(Dm);yoe=n(XEe,"STRONG",{});var iDr=s(yoe);cWe=r(iDr,"speech-encoder-decoder"),iDr.forEach(t),fWe=r(XEe," \u2014 "),jk=n(XEe,"A",{href:!0});var dDr=s(jk);mWe=r(dDr,"SpeechEncoderDecoderConfig"),dDr.forEach(t),gWe=r(XEe," (Speech Encoder decoder model)"),XEe.forEach(t),hWe=i(L),Gm=n(L,"LI",{});var zEe=s(Gm);Loe=n(zEe,"STRONG",{});var cDr=s(Loe);pWe=r(cDr,"speech_to_text"),cDr.forEach(t),uWe=r(zEe," \u2014 "),Dk=n(zEe,"A",{href:!0});var fDr=s(Dk);_We=r(fDr,"Speech2TextConfig"),fDr.forEach(t),bWe=r(zEe," (Speech2Text model)"),zEe.forEach(t),vWe=i(L),Om=n(L,"LI",{});var QEe=s(Om);xoe=n(QEe,"STRONG",{});var mDr=s(xoe);FWe=r(mDr,"speech_to_text_2"),mDr.forEach(t),TWe=r(QEe," \u2014 "),Gk=n(QEe,"A",{href:!0});var gDr=s(Gk);MWe=r(gDr,"Speech2Text2Config"),gDr.forEach(t),EWe=r(QEe," (Speech2Text2 model)"),QEe.forEach(t),CWe=i(L),Vm=n(L,"LI",{});var WEe=s(Vm);$oe=n(WEe,"STRONG",{});var hDr=s($oe);wWe=r(hDr,"splinter"),hDr.forEach(t),AWe=r(WEe," \u2014 "),Ok=n(WEe,"A",{href:!0});var pDr=s(Ok);yWe=r(pDr,"SplinterConfig"),pDr.forEach(t),LWe=r(WEe," (Splinter model)"),WEe.forEach(t),xWe=i(L),Xm=n(L,"LI",{});var HEe=s(Xm);koe=n(HEe,"STRONG",{});var uDr=s(koe);$We=r(uDr,"squeezebert"),uDr.forEach(t),kWe=r(HEe," \u2014 "),Vk=n(HEe,"A",{href:!0});var _Dr=s(Vk);SWe=r(_Dr,"SqueezeBertConfig"),_Dr.forEach(t),RWe=r(HEe," (SqueezeBERT model)"),HEe.forEach(t),PWe=i(L),zm=n(L,"LI",{});var UEe=s(zm);Soe=n(UEe,"STRONG",{});var bDr=s(Soe);BWe=r(bDr,"swin"),bDr.forEach(t),IWe=r(UEe," \u2014 "),Xk=n(UEe,"A",{href:!0});var vDr=s(Xk);qWe=r(vDr,"SwinConfig"),vDr.forEach(t),NWe=r(UEe," (Swin model)"),UEe.forEach(t),jWe=i(L),Qm=n(L,"LI",{});var JEe=s(Qm);Roe=n(JEe,"STRONG",{});var FDr=s(Roe);DWe=r(FDr,"t5"),FDr.forEach(t),GWe=r(JEe," \u2014 "),zk=n(JEe,"A",{href:!0});var TDr=s(zk);OWe=r(TDr,"T5Config"),TDr.forEach(t),VWe=r(JEe," (T5 model)"),JEe.forEach(t),XWe=i(L),Wm=n(L,"LI",{});var YEe=s(Wm);Poe=n(YEe,"STRONG",{});var MDr=s(Poe);zWe=r(MDr,"tapas"),MDr.forEach(t),QWe=r(YEe," \u2014 "),Qk=n(YEe,"A",{href:!0});var EDr=s(Qk);WWe=r(EDr,"TapasConfig"),EDr.forEach(t),HWe=r(YEe," (TAPAS model)"),YEe.forEach(t),UWe=i(L),Hm=n(L,"LI",{});var KEe=s(Hm);Boe=n(KEe,"STRONG",{});var CDr=s(Boe);JWe=r(CDr,"tapex"),CDr.forEach(t),YWe=r(KEe," \u2014 "),Wk=n(KEe,"A",{href:!0});var wDr=s(Wk);KWe=r(wDr,"BartConfig"),wDr.forEach(t),ZWe=r(KEe," (TAPEX model)"),KEe.forEach(t),eHe=i(L),Um=n(L,"LI",{});var ZEe=s(Um);Ioe=n(ZEe,"STRONG",{});var ADr=s(Ioe);oHe=r(ADr,"transfo-xl"),ADr.forEach(t),rHe=r(ZEe," \u2014 "),Hk=n(ZEe,"A",{href:!0});var yDr=s(Hk);tHe=r(yDr,"TransfoXLConfig"),yDr.forEach(t),aHe=r(ZEe," (Transformer-XL model)"),ZEe.forEach(t),nHe=i(L),Jm=n(L,"LI",{});var e5e=s(Jm);qoe=n(e5e,"STRONG",{});var LDr=s(qoe);sHe=r(LDr,"trocr"),LDr.forEach(t),lHe=r(e5e," \u2014 "),Uk=n(e5e,"A",{href:!0});var xDr=s(Uk);iHe=r(xDr,"TrOCRConfig"),xDr.forEach(t),dHe=r(e5e," (TrOCR model)"),e5e.forEach(t),cHe=i(L),Ym=n(L,"LI",{});var o5e=s(Ym);Noe=n(o5e,"STRONG",{});var $Dr=s(Noe);fHe=r($Dr,"unispeech"),$Dr.forEach(t),mHe=r(o5e," \u2014 "),Jk=n(o5e,"A",{href:!0});var kDr=s(Jk);gHe=r(kDr,"UniSpeechConfig"),kDr.forEach(t),hHe=r(o5e," (UniSpeech model)"),o5e.forEach(t),pHe=i(L),Km=n(L,"LI",{});var r5e=s(Km);joe=n(r5e,"STRONG",{});var SDr=s(joe);uHe=r(SDr,"unispeech-sat"),SDr.forEach(t),_He=r(r5e," \u2014 "),Yk=n(r5e,"A",{href:!0});var RDr=s(Yk);bHe=r(RDr,"UniSpeechSatConfig"),RDr.forEach(t),vHe=r(r5e," (UniSpeechSat model)"),r5e.forEach(t),FHe=i(L),Zm=n(L,"LI",{});var t5e=s(Zm);Doe=n(t5e,"STRONG",{});var PDr=s(Doe);THe=r(PDr,"van"),PDr.forEach(t),MHe=r(t5e," \u2014 "),Kk=n(t5e,"A",{href:!0});var BDr=s(Kk);EHe=r(BDr,"VanConfig"),BDr.forEach(t),CHe=r(t5e," (VAN model)"),t5e.forEach(t),wHe=i(L),eg=n(L,"LI",{});var a5e=s(eg);Goe=n(a5e,"STRONG",{});var IDr=s(Goe);AHe=r(IDr,"vilt"),IDr.forEach(t),yHe=r(a5e," \u2014 "),Zk=n(a5e,"A",{href:!0});var qDr=s(Zk);LHe=r(qDr,"ViltConfig"),qDr.forEach(t),xHe=r(a5e," (ViLT model)"),a5e.forEach(t),$He=i(L),og=n(L,"LI",{});var n5e=s(og);Ooe=n(n5e,"STRONG",{});var NDr=s(Ooe);kHe=r(NDr,"vision-encoder-decoder"),NDr.forEach(t),SHe=r(n5e," \u2014 "),eS=n(n5e,"A",{href:!0});var jDr=s(eS);RHe=r(jDr,"VisionEncoderDecoderConfig"),jDr.forEach(t),PHe=r(n5e," (Vision Encoder decoder model)"),n5e.forEach(t),BHe=i(L),rg=n(L,"LI",{});var s5e=s(rg);Voe=n(s5e,"STRONG",{});var DDr=s(Voe);IHe=r(DDr,"vision-text-dual-encoder"),DDr.forEach(t),qHe=r(s5e," \u2014 "),oS=n(s5e,"A",{href:!0});var GDr=s(oS);NHe=r(GDr,"VisionTextDualEncoderConfig"),GDr.forEach(t),jHe=r(s5e," (VisionTextDualEncoder model)"),s5e.forEach(t),DHe=i(L),tg=n(L,"LI",{});var l5e=s(tg);Xoe=n(l5e,"STRONG",{});var ODr=s(Xoe);GHe=r(ODr,"visual_bert"),ODr.forEach(t),OHe=r(l5e," \u2014 "),rS=n(l5e,"A",{href:!0});var VDr=s(rS);VHe=r(VDr,"VisualBertConfig"),VDr.forEach(t),XHe=r(l5e," (VisualBert model)"),l5e.forEach(t),zHe=i(L),ag=n(L,"LI",{});var i5e=s(ag);zoe=n(i5e,"STRONG",{});var XDr=s(zoe);QHe=r(XDr,"vit"),XDr.forEach(t),WHe=r(i5e," \u2014 "),tS=n(i5e,"A",{href:!0});var zDr=s(tS);HHe=r(zDr,"ViTConfig"),zDr.forEach(t),UHe=r(i5e," (ViT model)"),i5e.forEach(t),JHe=i(L),ng=n(L,"LI",{});var d5e=s(ng);Qoe=n(d5e,"STRONG",{});var QDr=s(Qoe);YHe=r(QDr,"vit_mae"),QDr.forEach(t),KHe=r(d5e," \u2014 "),aS=n(d5e,"A",{href:!0});var WDr=s(aS);ZHe=r(WDr,"ViTMAEConfig"),WDr.forEach(t),eUe=r(d5e," (ViTMAE model)"),d5e.forEach(t),oUe=i(L),sg=n(L,"LI",{});var c5e=s(sg);Woe=n(c5e,"STRONG",{});var HDr=s(Woe);rUe=r(HDr,"wav2vec2"),HDr.forEach(t),tUe=r(c5e," \u2014 "),nS=n(c5e,"A",{href:!0});var UDr=s(nS);aUe=r(UDr,"Wav2Vec2Config"),UDr.forEach(t),nUe=r(c5e," (Wav2Vec2 model)"),c5e.forEach(t),sUe=i(L),lg=n(L,"LI",{});var f5e=s(lg);Hoe=n(f5e,"STRONG",{});var JDr=s(Hoe);lUe=r(JDr,"wavlm"),JDr.forEach(t),iUe=r(f5e," \u2014 "),sS=n(f5e,"A",{href:!0});var YDr=s(sS);dUe=r(YDr,"WavLMConfig"),YDr.forEach(t),cUe=r(f5e," (WavLM model)"),f5e.forEach(t),fUe=i(L),ig=n(L,"LI",{});var m5e=s(ig);Uoe=n(m5e,"STRONG",{});var KDr=s(Uoe);mUe=r(KDr,"xglm"),KDr.forEach(t),gUe=r(m5e," \u2014 "),lS=n(m5e,"A",{href:!0});var ZDr=s(lS);hUe=r(ZDr,"XGLMConfig"),ZDr.forEach(t),pUe=r(m5e," (XGLM model)"),m5e.forEach(t),uUe=i(L),dg=n(L,"LI",{});var g5e=s(dg);Joe=n(g5e,"STRONG",{});var eGr=s(Joe);_Ue=r(eGr,"xlm"),eGr.forEach(t),bUe=r(g5e," \u2014 "),iS=n(g5e,"A",{href:!0});var oGr=s(iS);vUe=r(oGr,"XLMConfig"),oGr.forEach(t),FUe=r(g5e," (XLM model)"),g5e.forEach(t),TUe=i(L),cg=n(L,"LI",{});var h5e=s(cg);Yoe=n(h5e,"STRONG",{});var rGr=s(Yoe);MUe=r(rGr,"xlm-prophetnet"),rGr.forEach(t),EUe=r(h5e," \u2014 "),dS=n(h5e,"A",{href:!0});var tGr=s(dS);CUe=r(tGr,"XLMProphetNetConfig"),tGr.forEach(t),wUe=r(h5e," (XLMProphetNet model)"),h5e.forEach(t),AUe=i(L),fg=n(L,"LI",{});var p5e=s(fg);Koe=n(p5e,"STRONG",{});var aGr=s(Koe);yUe=r(aGr,"xlm-roberta"),aGr.forEach(t),LUe=r(p5e," \u2014 "),cS=n(p5e,"A",{href:!0});var nGr=s(cS);xUe=r(nGr,"XLMRobertaConfig"),nGr.forEach(t),$Ue=r(p5e," (XLM-RoBERTa model)"),p5e.forEach(t),kUe=i(L),mg=n(L,"LI",{});var u5e=s(mg);Zoe=n(u5e,"STRONG",{});var sGr=s(Zoe);SUe=r(sGr,"xlm-roberta-xl"),sGr.forEach(t),RUe=r(u5e," \u2014 "),fS=n(u5e,"A",{href:!0});var lGr=s(fS);PUe=r(lGr,"XLMRobertaXLConfig"),lGr.forEach(t),BUe=r(u5e," (XLM-RoBERTa-XL model)"),u5e.forEach(t),IUe=i(L),gg=n(L,"LI",{});var _5e=s(gg);ere=n(_5e,"STRONG",{});var iGr=s(ere);qUe=r(iGr,"xlnet"),iGr.forEach(t),NUe=r(_5e," \u2014 "),mS=n(_5e,"A",{href:!0});var dGr=s(mS);jUe=r(dGr,"XLNetConfig"),dGr.forEach(t),DUe=r(_5e," (XLNet model)"),_5e.forEach(t),GUe=i(L),hg=n(L,"LI",{});var b5e=s(hg);ore=n(b5e,"STRONG",{});var cGr=s(ore);OUe=r(cGr,"yolos"),cGr.forEach(t),VUe=r(b5e," \u2014 "),gS=n(b5e,"A",{href:!0});var fGr=s(gS);XUe=r(fGr,"YolosConfig"),fGr.forEach(t),zUe=r(b5e," (YOLOS model)"),b5e.forEach(t),QUe=i(L),pg=n(L,"LI",{});var v5e=s(pg);rre=n(v5e,"STRONG",{});var mGr=s(rre);WUe=r(mGr,"yoso"),mGr.forEach(t),HUe=r(v5e," \u2014 "),hS=n(v5e,"A",{href:!0});var gGr=s(hS);UUe=r(gGr,"YosoConfig"),gGr.forEach(t),JUe=r(v5e," (YOSO model)"),v5e.forEach(t),L.forEach(t),YUe=i(Zr),T(ug.$$.fragment,Zr),Zr.forEach(t),KUe=i(Kr),_g=n(Kr,"DIV",{class:!0});var Iqe=s(_g);T(oA.$$.fragment,Iqe),ZUe=i(Iqe),tre=n(Iqe,"P",{});var hGr=s(tre);eJe=r(hGr,"Register a new configuration for this class."),hGr.forEach(t),Iqe.forEach(t),Kr.forEach(t),jBe=i(f),bi=n(f,"H2",{class:!0});var qqe=s(bi);bg=n(qqe,"A",{id:!0,class:!0,href:!0});var pGr=s(bg);are=n(pGr,"SPAN",{});var uGr=s(are);T(rA.$$.fragment,uGr),uGr.forEach(t),pGr.forEach(t),oJe=i(qqe),nre=n(qqe,"SPAN",{});var _Gr=s(nre);rJe=r(_Gr,"AutoTokenizer"),_Gr.forEach(t),qqe.forEach(t),DBe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(tA.$$.fragment,Is),tJe=i(Is),aA=n(Is,"P",{});var Nqe=s(aA);aJe=r(Nqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),pS=n(Nqe,"A",{href:!0});var bGr=s(pS);nJe=r(bGr,"AutoTokenizer.from_pretrained()"),bGr.forEach(t),sJe=r(Nqe," class method."),Nqe.forEach(t),lJe=i(Is),nA=n(Is,"P",{});var jqe=s(nA);iJe=r(jqe,"This class cannot be instantiated directly using "),sre=n(jqe,"CODE",{});var vGr=s(sre);dJe=r(vGr,"__init__()"),vGr.forEach(t),cJe=r(jqe," (throws an error)."),jqe.forEach(t),fJe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(sA.$$.fragment,qs),mJe=i(qs),lre=n(qs,"P",{});var FGr=s(lre);gJe=r(FGr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),FGr.forEach(t),hJe=i(qs),Ca=n(qs,"P",{});var UC=s(Ca);pJe=r(UC,"The tokenizer class to instantiate is selected based on the "),ire=n(UC,"CODE",{});var TGr=s(ire);uJe=r(TGr,"model_type"),TGr.forEach(t),_Je=r(UC,` property of the config object (either
passed as an argument or loaded from `),dre=n(UC,"CODE",{});var MGr=s(dre);bJe=r(MGr,"pretrained_model_name_or_path"),MGr.forEach(t),vJe=r(UC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cre=n(UC,"CODE",{});var EGr=s(cre);FJe=r(EGr,"pretrained_model_name_or_path"),EGr.forEach(t),TJe=r(UC,":"),UC.forEach(t),MJe=i(qs),k=n(qs,"UL",{});var S=s(k);kn=n(S,"LI",{});var l9=s(kn);fre=n(l9,"STRONG",{});var CGr=s(fre);EJe=r(CGr,"albert"),CGr.forEach(t),CJe=r(l9," \u2014 "),uS=n(l9,"A",{href:!0});var wGr=s(uS);wJe=r(wGr,"AlbertTokenizer"),wGr.forEach(t),AJe=r(l9," or "),_S=n(l9,"A",{href:!0});var AGr=s(_S);yJe=r(AGr,"AlbertTokenizerFast"),AGr.forEach(t),LJe=r(l9," (ALBERT model)"),l9.forEach(t),xJe=i(S),Sn=n(S,"LI",{});var i9=s(Sn);mre=n(i9,"STRONG",{});var yGr=s(mre);$Je=r(yGr,"bart"),yGr.forEach(t),kJe=r(i9," \u2014 "),bS=n(i9,"A",{href:!0});var LGr=s(bS);SJe=r(LGr,"BartTokenizer"),LGr.forEach(t),RJe=r(i9," or "),vS=n(i9,"A",{href:!0});var xGr=s(vS);PJe=r(xGr,"BartTokenizerFast"),xGr.forEach(t),BJe=r(i9," (BART model)"),i9.forEach(t),IJe=i(S),Rn=n(S,"LI",{});var d9=s(Rn);gre=n(d9,"STRONG",{});var $Gr=s(gre);qJe=r($Gr,"barthez"),$Gr.forEach(t),NJe=r(d9," \u2014 "),FS=n(d9,"A",{href:!0});var kGr=s(FS);jJe=r(kGr,"BarthezTokenizer"),kGr.forEach(t),DJe=r(d9," or "),TS=n(d9,"A",{href:!0});var SGr=s(TS);GJe=r(SGr,"BarthezTokenizerFast"),SGr.forEach(t),OJe=r(d9," (BARThez model)"),d9.forEach(t),VJe=i(S),vg=n(S,"LI",{});var F5e=s(vg);hre=n(F5e,"STRONG",{});var RGr=s(hre);XJe=r(RGr,"bartpho"),RGr.forEach(t),zJe=r(F5e," \u2014 "),MS=n(F5e,"A",{href:!0});var PGr=s(MS);QJe=r(PGr,"BartphoTokenizer"),PGr.forEach(t),WJe=r(F5e," (BARTpho model)"),F5e.forEach(t),HJe=i(S),Pn=n(S,"LI",{});var c9=s(Pn);pre=n(c9,"STRONG",{});var BGr=s(pre);UJe=r(BGr,"bert"),BGr.forEach(t),JJe=r(c9," \u2014 "),ES=n(c9,"A",{href:!0});var IGr=s(ES);YJe=r(IGr,"BertTokenizer"),IGr.forEach(t),KJe=r(c9," or "),CS=n(c9,"A",{href:!0});var qGr=s(CS);ZJe=r(qGr,"BertTokenizerFast"),qGr.forEach(t),eYe=r(c9," (BERT model)"),c9.forEach(t),oYe=i(S),Fg=n(S,"LI",{});var T5e=s(Fg);ure=n(T5e,"STRONG",{});var NGr=s(ure);rYe=r(NGr,"bert-generation"),NGr.forEach(t),tYe=r(T5e," \u2014 "),wS=n(T5e,"A",{href:!0});var jGr=s(wS);aYe=r(jGr,"BertGenerationTokenizer"),jGr.forEach(t),nYe=r(T5e," (Bert Generation model)"),T5e.forEach(t),sYe=i(S),Tg=n(S,"LI",{});var M5e=s(Tg);_re=n(M5e,"STRONG",{});var DGr=s(_re);lYe=r(DGr,"bert-japanese"),DGr.forEach(t),iYe=r(M5e," \u2014 "),AS=n(M5e,"A",{href:!0});var GGr=s(AS);dYe=r(GGr,"BertJapaneseTokenizer"),GGr.forEach(t),cYe=r(M5e," (BertJapanese model)"),M5e.forEach(t),fYe=i(S),Mg=n(S,"LI",{});var E5e=s(Mg);bre=n(E5e,"STRONG",{});var OGr=s(bre);mYe=r(OGr,"bertweet"),OGr.forEach(t),gYe=r(E5e," \u2014 "),yS=n(E5e,"A",{href:!0});var VGr=s(yS);hYe=r(VGr,"BertweetTokenizer"),VGr.forEach(t),pYe=r(E5e," (Bertweet model)"),E5e.forEach(t),uYe=i(S),Bn=n(S,"LI",{});var f9=s(Bn);vre=n(f9,"STRONG",{});var XGr=s(vre);_Ye=r(XGr,"big_bird"),XGr.forEach(t),bYe=r(f9," \u2014 "),LS=n(f9,"A",{href:!0});var zGr=s(LS);vYe=r(zGr,"BigBirdTokenizer"),zGr.forEach(t),FYe=r(f9," or "),xS=n(f9,"A",{href:!0});var QGr=s(xS);TYe=r(QGr,"BigBirdTokenizerFast"),QGr.forEach(t),MYe=r(f9," (BigBird model)"),f9.forEach(t),EYe=i(S),In=n(S,"LI",{});var m9=s(In);Fre=n(m9,"STRONG",{});var WGr=s(Fre);CYe=r(WGr,"bigbird_pegasus"),WGr.forEach(t),wYe=r(m9," \u2014 "),$S=n(m9,"A",{href:!0});var HGr=s($S);AYe=r(HGr,"PegasusTokenizer"),HGr.forEach(t),yYe=r(m9," or "),kS=n(m9,"A",{href:!0});var UGr=s(kS);LYe=r(UGr,"PegasusTokenizerFast"),UGr.forEach(t),xYe=r(m9," (BigBirdPegasus model)"),m9.forEach(t),$Ye=i(S),qn=n(S,"LI",{});var g9=s(qn);Tre=n(g9,"STRONG",{});var JGr=s(Tre);kYe=r(JGr,"blenderbot"),JGr.forEach(t),SYe=r(g9," \u2014 "),SS=n(g9,"A",{href:!0});var YGr=s(SS);RYe=r(YGr,"BlenderbotTokenizer"),YGr.forEach(t),PYe=r(g9," or "),RS=n(g9,"A",{href:!0});var KGr=s(RS);BYe=r(KGr,"BlenderbotTokenizerFast"),KGr.forEach(t),IYe=r(g9," (Blenderbot model)"),g9.forEach(t),qYe=i(S),Eg=n(S,"LI",{});var C5e=s(Eg);Mre=n(C5e,"STRONG",{});var ZGr=s(Mre);NYe=r(ZGr,"blenderbot-small"),ZGr.forEach(t),jYe=r(C5e," \u2014 "),PS=n(C5e,"A",{href:!0});var eOr=s(PS);DYe=r(eOr,"BlenderbotSmallTokenizer"),eOr.forEach(t),GYe=r(C5e," (BlenderbotSmall model)"),C5e.forEach(t),OYe=i(S),Cg=n(S,"LI",{});var w5e=s(Cg);Ere=n(w5e,"STRONG",{});var oOr=s(Ere);VYe=r(oOr,"byt5"),oOr.forEach(t),XYe=r(w5e," \u2014 "),BS=n(w5e,"A",{href:!0});var rOr=s(BS);zYe=r(rOr,"ByT5Tokenizer"),rOr.forEach(t),QYe=r(w5e," (ByT5 model)"),w5e.forEach(t),WYe=i(S),Nn=n(S,"LI",{});var h9=s(Nn);Cre=n(h9,"STRONG",{});var tOr=s(Cre);HYe=r(tOr,"camembert"),tOr.forEach(t),UYe=r(h9," \u2014 "),IS=n(h9,"A",{href:!0});var aOr=s(IS);JYe=r(aOr,"CamembertTokenizer"),aOr.forEach(t),YYe=r(h9," or "),qS=n(h9,"A",{href:!0});var nOr=s(qS);KYe=r(nOr,"CamembertTokenizerFast"),nOr.forEach(t),ZYe=r(h9," (CamemBERT model)"),h9.forEach(t),eKe=i(S),wg=n(S,"LI",{});var A5e=s(wg);wre=n(A5e,"STRONG",{});var sOr=s(wre);oKe=r(sOr,"canine"),sOr.forEach(t),rKe=r(A5e," \u2014 "),NS=n(A5e,"A",{href:!0});var lOr=s(NS);tKe=r(lOr,"CanineTokenizer"),lOr.forEach(t),aKe=r(A5e," (Canine model)"),A5e.forEach(t),nKe=i(S),jn=n(S,"LI",{});var p9=s(jn);Are=n(p9,"STRONG",{});var iOr=s(Are);sKe=r(iOr,"clip"),iOr.forEach(t),lKe=r(p9," \u2014 "),jS=n(p9,"A",{href:!0});var dOr=s(jS);iKe=r(dOr,"CLIPTokenizer"),dOr.forEach(t),dKe=r(p9," or "),DS=n(p9,"A",{href:!0});var cOr=s(DS);cKe=r(cOr,"CLIPTokenizerFast"),cOr.forEach(t),fKe=r(p9," (CLIP model)"),p9.forEach(t),mKe=i(S),Dn=n(S,"LI",{});var u9=s(Dn);yre=n(u9,"STRONG",{});var fOr=s(yre);gKe=r(fOr,"convbert"),fOr.forEach(t),hKe=r(u9," \u2014 "),GS=n(u9,"A",{href:!0});var mOr=s(GS);pKe=r(mOr,"ConvBertTokenizer"),mOr.forEach(t),uKe=r(u9," or "),OS=n(u9,"A",{href:!0});var gOr=s(OS);_Ke=r(gOr,"ConvBertTokenizerFast"),gOr.forEach(t),bKe=r(u9," (ConvBERT model)"),u9.forEach(t),vKe=i(S),Gn=n(S,"LI",{});var _9=s(Gn);Lre=n(_9,"STRONG",{});var hOr=s(Lre);FKe=r(hOr,"cpm"),hOr.forEach(t),TKe=r(_9," \u2014 "),VS=n(_9,"A",{href:!0});var pOr=s(VS);MKe=r(pOr,"CpmTokenizer"),pOr.forEach(t),EKe=r(_9," or "),XS=n(_9,"A",{href:!0});var uOr=s(XS);CKe=r(uOr,"CpmTokenizerFast"),uOr.forEach(t),wKe=r(_9," (CPM model)"),_9.forEach(t),AKe=i(S),Ag=n(S,"LI",{});var y5e=s(Ag);xre=n(y5e,"STRONG",{});var _Or=s(xre);yKe=r(_Or,"ctrl"),_Or.forEach(t),LKe=r(y5e," \u2014 "),zS=n(y5e,"A",{href:!0});var bOr=s(zS);xKe=r(bOr,"CTRLTokenizer"),bOr.forEach(t),$Ke=r(y5e," (CTRL model)"),y5e.forEach(t),kKe=i(S),On=n(S,"LI",{});var b9=s(On);$re=n(b9,"STRONG",{});var vOr=s($re);SKe=r(vOr,"data2vec-text"),vOr.forEach(t),RKe=r(b9," \u2014 "),QS=n(b9,"A",{href:!0});var FOr=s(QS);PKe=r(FOr,"RobertaTokenizer"),FOr.forEach(t),BKe=r(b9," or "),WS=n(b9,"A",{href:!0});var TOr=s(WS);IKe=r(TOr,"RobertaTokenizerFast"),TOr.forEach(t),qKe=r(b9," (Data2VecText model)"),b9.forEach(t),NKe=i(S),Vn=n(S,"LI",{});var v9=s(Vn);kre=n(v9,"STRONG",{});var MOr=s(kre);jKe=r(MOr,"deberta"),MOr.forEach(t),DKe=r(v9," \u2014 "),HS=n(v9,"A",{href:!0});var EOr=s(HS);GKe=r(EOr,"DebertaTokenizer"),EOr.forEach(t),OKe=r(v9," or "),US=n(v9,"A",{href:!0});var COr=s(US);VKe=r(COr,"DebertaTokenizerFast"),COr.forEach(t),XKe=r(v9," (DeBERTa model)"),v9.forEach(t),zKe=i(S),Xn=n(S,"LI",{});var F9=s(Xn);Sre=n(F9,"STRONG",{});var wOr=s(Sre);QKe=r(wOr,"deberta-v2"),wOr.forEach(t),WKe=r(F9," \u2014 "),JS=n(F9,"A",{href:!0});var AOr=s(JS);HKe=r(AOr,"DebertaV2Tokenizer"),AOr.forEach(t),UKe=r(F9," or "),YS=n(F9,"A",{href:!0});var yOr=s(YS);JKe=r(yOr,"DebertaV2TokenizerFast"),yOr.forEach(t),YKe=r(F9," (DeBERTa-v2 model)"),F9.forEach(t),KKe=i(S),zn=n(S,"LI",{});var T9=s(zn);Rre=n(T9,"STRONG",{});var LOr=s(Rre);ZKe=r(LOr,"distilbert"),LOr.forEach(t),eZe=r(T9," \u2014 "),KS=n(T9,"A",{href:!0});var xOr=s(KS);oZe=r(xOr,"DistilBertTokenizer"),xOr.forEach(t),rZe=r(T9," or "),ZS=n(T9,"A",{href:!0});var $Or=s(ZS);tZe=r($Or,"DistilBertTokenizerFast"),$Or.forEach(t),aZe=r(T9," (DistilBERT model)"),T9.forEach(t),nZe=i(S),Qn=n(S,"LI",{});var M9=s(Qn);Pre=n(M9,"STRONG",{});var kOr=s(Pre);sZe=r(kOr,"dpr"),kOr.forEach(t),lZe=r(M9," \u2014 "),eR=n(M9,"A",{href:!0});var SOr=s(eR);iZe=r(SOr,"DPRQuestionEncoderTokenizer"),SOr.forEach(t),dZe=r(M9," or "),oR=n(M9,"A",{href:!0});var ROr=s(oR);cZe=r(ROr,"DPRQuestionEncoderTokenizerFast"),ROr.forEach(t),fZe=r(M9," (DPR model)"),M9.forEach(t),mZe=i(S),Wn=n(S,"LI",{});var E9=s(Wn);Bre=n(E9,"STRONG",{});var POr=s(Bre);gZe=r(POr,"electra"),POr.forEach(t),hZe=r(E9," \u2014 "),rR=n(E9,"A",{href:!0});var BOr=s(rR);pZe=r(BOr,"ElectraTokenizer"),BOr.forEach(t),uZe=r(E9," or "),tR=n(E9,"A",{href:!0});var IOr=s(tR);_Ze=r(IOr,"ElectraTokenizerFast"),IOr.forEach(t),bZe=r(E9," (ELECTRA model)"),E9.forEach(t),vZe=i(S),yg=n(S,"LI",{});var L5e=s(yg);Ire=n(L5e,"STRONG",{});var qOr=s(Ire);FZe=r(qOr,"flaubert"),qOr.forEach(t),TZe=r(L5e," \u2014 "),aR=n(L5e,"A",{href:!0});var NOr=s(aR);MZe=r(NOr,"FlaubertTokenizer"),NOr.forEach(t),EZe=r(L5e," (FlauBERT model)"),L5e.forEach(t),CZe=i(S),Hn=n(S,"LI",{});var C9=s(Hn);qre=n(C9,"STRONG",{});var jOr=s(qre);wZe=r(jOr,"fnet"),jOr.forEach(t),AZe=r(C9," \u2014 "),nR=n(C9,"A",{href:!0});var DOr=s(nR);yZe=r(DOr,"FNetTokenizer"),DOr.forEach(t),LZe=r(C9," or "),sR=n(C9,"A",{href:!0});var GOr=s(sR);xZe=r(GOr,"FNetTokenizerFast"),GOr.forEach(t),$Ze=r(C9," (FNet model)"),C9.forEach(t),kZe=i(S),Lg=n(S,"LI",{});var x5e=s(Lg);Nre=n(x5e,"STRONG",{});var OOr=s(Nre);SZe=r(OOr,"fsmt"),OOr.forEach(t),RZe=r(x5e," \u2014 "),lR=n(x5e,"A",{href:!0});var VOr=s(lR);PZe=r(VOr,"FSMTTokenizer"),VOr.forEach(t),BZe=r(x5e," (FairSeq Machine-Translation model)"),x5e.forEach(t),IZe=i(S),Un=n(S,"LI",{});var w9=s(Un);jre=n(w9,"STRONG",{});var XOr=s(jre);qZe=r(XOr,"funnel"),XOr.forEach(t),NZe=r(w9," \u2014 "),iR=n(w9,"A",{href:!0});var zOr=s(iR);jZe=r(zOr,"FunnelTokenizer"),zOr.forEach(t),DZe=r(w9," or "),dR=n(w9,"A",{href:!0});var QOr=s(dR);GZe=r(QOr,"FunnelTokenizerFast"),QOr.forEach(t),OZe=r(w9," (Funnel Transformer model)"),w9.forEach(t),VZe=i(S),Jn=n(S,"LI",{});var A9=s(Jn);Dre=n(A9,"STRONG",{});var WOr=s(Dre);XZe=r(WOr,"gpt2"),WOr.forEach(t),zZe=r(A9," \u2014 "),cR=n(A9,"A",{href:!0});var HOr=s(cR);QZe=r(HOr,"GPT2Tokenizer"),HOr.forEach(t),WZe=r(A9," or "),fR=n(A9,"A",{href:!0});var UOr=s(fR);HZe=r(UOr,"GPT2TokenizerFast"),UOr.forEach(t),UZe=r(A9," (OpenAI GPT-2 model)"),A9.forEach(t),JZe=i(S),Yn=n(S,"LI",{});var y9=s(Yn);Gre=n(y9,"STRONG",{});var JOr=s(Gre);YZe=r(JOr,"gpt_neo"),JOr.forEach(t),KZe=r(y9," \u2014 "),mR=n(y9,"A",{href:!0});var YOr=s(mR);ZZe=r(YOr,"GPT2Tokenizer"),YOr.forEach(t),eeo=r(y9," or "),gR=n(y9,"A",{href:!0});var KOr=s(gR);oeo=r(KOr,"GPT2TokenizerFast"),KOr.forEach(t),reo=r(y9," (GPT Neo model)"),y9.forEach(t),teo=i(S),Kn=n(S,"LI",{});var L9=s(Kn);Ore=n(L9,"STRONG",{});var ZOr=s(Ore);aeo=r(ZOr,"gptj"),ZOr.forEach(t),neo=r(L9," \u2014 "),hR=n(L9,"A",{href:!0});var eVr=s(hR);seo=r(eVr,"GPT2Tokenizer"),eVr.forEach(t),leo=r(L9," or "),pR=n(L9,"A",{href:!0});var oVr=s(pR);ieo=r(oVr,"GPT2TokenizerFast"),oVr.forEach(t),deo=r(L9," (GPT-J model)"),L9.forEach(t),ceo=i(S),Zn=n(S,"LI",{});var x9=s(Zn);Vre=n(x9,"STRONG",{});var rVr=s(Vre);feo=r(rVr,"herbert"),rVr.forEach(t),meo=r(x9," \u2014 "),uR=n(x9,"A",{href:!0});var tVr=s(uR);geo=r(tVr,"HerbertTokenizer"),tVr.forEach(t),heo=r(x9," or "),_R=n(x9,"A",{href:!0});var aVr=s(_R);peo=r(aVr,"HerbertTokenizerFast"),aVr.forEach(t),ueo=r(x9," (HerBERT model)"),x9.forEach(t),_eo=i(S),xg=n(S,"LI",{});var $5e=s(xg);Xre=n($5e,"STRONG",{});var nVr=s(Xre);beo=r(nVr,"hubert"),nVr.forEach(t),veo=r($5e," \u2014 "),bR=n($5e,"A",{href:!0});var sVr=s(bR);Feo=r(sVr,"Wav2Vec2CTCTokenizer"),sVr.forEach(t),Teo=r($5e," (Hubert model)"),$5e.forEach(t),Meo=i(S),es=n(S,"LI",{});var $9=s(es);zre=n($9,"STRONG",{});var lVr=s(zre);Eeo=r(lVr,"ibert"),lVr.forEach(t),Ceo=r($9," \u2014 "),vR=n($9,"A",{href:!0});var iVr=s(vR);weo=r(iVr,"RobertaTokenizer"),iVr.forEach(t),Aeo=r($9," or "),FR=n($9,"A",{href:!0});var dVr=s(FR);yeo=r(dVr,"RobertaTokenizerFast"),dVr.forEach(t),Leo=r($9," (I-BERT model)"),$9.forEach(t),xeo=i(S),os=n(S,"LI",{});var k9=s(os);Qre=n(k9,"STRONG",{});var cVr=s(Qre);$eo=r(cVr,"layoutlm"),cVr.forEach(t),keo=r(k9," \u2014 "),TR=n(k9,"A",{href:!0});var fVr=s(TR);Seo=r(fVr,"LayoutLMTokenizer"),fVr.forEach(t),Reo=r(k9," or "),MR=n(k9,"A",{href:!0});var mVr=s(MR);Peo=r(mVr,"LayoutLMTokenizerFast"),mVr.forEach(t),Beo=r(k9," (LayoutLM model)"),k9.forEach(t),Ieo=i(S),rs=n(S,"LI",{});var S9=s(rs);Wre=n(S9,"STRONG",{});var gVr=s(Wre);qeo=r(gVr,"layoutlmv2"),gVr.forEach(t),Neo=r(S9," \u2014 "),ER=n(S9,"A",{href:!0});var hVr=s(ER);jeo=r(hVr,"LayoutLMv2Tokenizer"),hVr.forEach(t),Deo=r(S9," or "),CR=n(S9,"A",{href:!0});var pVr=s(CR);Geo=r(pVr,"LayoutLMv2TokenizerFast"),pVr.forEach(t),Oeo=r(S9," (LayoutLMv2 model)"),S9.forEach(t),Veo=i(S),ts=n(S,"LI",{});var R9=s(ts);Hre=n(R9,"STRONG",{});var uVr=s(Hre);Xeo=r(uVr,"layoutxlm"),uVr.forEach(t),zeo=r(R9," \u2014 "),wR=n(R9,"A",{href:!0});var _Vr=s(wR);Qeo=r(_Vr,"LayoutXLMTokenizer"),_Vr.forEach(t),Weo=r(R9," or "),AR=n(R9,"A",{href:!0});var bVr=s(AR);Heo=r(bVr,"LayoutXLMTokenizerFast"),bVr.forEach(t),Ueo=r(R9," (LayoutXLM model)"),R9.forEach(t),Jeo=i(S),as=n(S,"LI",{});var P9=s(as);Ure=n(P9,"STRONG",{});var vVr=s(Ure);Yeo=r(vVr,"led"),vVr.forEach(t),Keo=r(P9," \u2014 "),yR=n(P9,"A",{href:!0});var FVr=s(yR);Zeo=r(FVr,"LEDTokenizer"),FVr.forEach(t),eoo=r(P9," or "),LR=n(P9,"A",{href:!0});var TVr=s(LR);ooo=r(TVr,"LEDTokenizerFast"),TVr.forEach(t),roo=r(P9," (LED model)"),P9.forEach(t),too=i(S),ns=n(S,"LI",{});var B9=s(ns);Jre=n(B9,"STRONG",{});var MVr=s(Jre);aoo=r(MVr,"longformer"),MVr.forEach(t),noo=r(B9," \u2014 "),xR=n(B9,"A",{href:!0});var EVr=s(xR);soo=r(EVr,"LongformerTokenizer"),EVr.forEach(t),loo=r(B9," or "),$R=n(B9,"A",{href:!0});var CVr=s($R);ioo=r(CVr,"LongformerTokenizerFast"),CVr.forEach(t),doo=r(B9," (Longformer model)"),B9.forEach(t),coo=i(S),$g=n(S,"LI",{});var k5e=s($g);Yre=n(k5e,"STRONG",{});var wVr=s(Yre);foo=r(wVr,"luke"),wVr.forEach(t),moo=r(k5e," \u2014 "),kR=n(k5e,"A",{href:!0});var AVr=s(kR);goo=r(AVr,"LukeTokenizer"),AVr.forEach(t),hoo=r(k5e," (LUKE model)"),k5e.forEach(t),poo=i(S),ss=n(S,"LI",{});var I9=s(ss);Kre=n(I9,"STRONG",{});var yVr=s(Kre);uoo=r(yVr,"lxmert"),yVr.forEach(t),_oo=r(I9," \u2014 "),SR=n(I9,"A",{href:!0});var LVr=s(SR);boo=r(LVr,"LxmertTokenizer"),LVr.forEach(t),voo=r(I9," or "),RR=n(I9,"A",{href:!0});var xVr=s(RR);Foo=r(xVr,"LxmertTokenizerFast"),xVr.forEach(t),Too=r(I9," (LXMERT model)"),I9.forEach(t),Moo=i(S),kg=n(S,"LI",{});var S5e=s(kg);Zre=n(S5e,"STRONG",{});var $Vr=s(Zre);Eoo=r($Vr,"m2m_100"),$Vr.forEach(t),Coo=r(S5e," \u2014 "),PR=n(S5e,"A",{href:!0});var kVr=s(PR);woo=r(kVr,"M2M100Tokenizer"),kVr.forEach(t),Aoo=r(S5e," (M2M100 model)"),S5e.forEach(t),yoo=i(S),Sg=n(S,"LI",{});var R5e=s(Sg);ete=n(R5e,"STRONG",{});var SVr=s(ete);Loo=r(SVr,"marian"),SVr.forEach(t),xoo=r(R5e," \u2014 "),BR=n(R5e,"A",{href:!0});var RVr=s(BR);$oo=r(RVr,"MarianTokenizer"),RVr.forEach(t),koo=r(R5e," (Marian model)"),R5e.forEach(t),Soo=i(S),ls=n(S,"LI",{});var q9=s(ls);ote=n(q9,"STRONG",{});var PVr=s(ote);Roo=r(PVr,"mbart"),PVr.forEach(t),Poo=r(q9," \u2014 "),IR=n(q9,"A",{href:!0});var BVr=s(IR);Boo=r(BVr,"MBartTokenizer"),BVr.forEach(t),Ioo=r(q9," or "),qR=n(q9,"A",{href:!0});var IVr=s(qR);qoo=r(IVr,"MBartTokenizerFast"),IVr.forEach(t),Noo=r(q9," (mBART model)"),q9.forEach(t),joo=i(S),is=n(S,"LI",{});var N9=s(is);rte=n(N9,"STRONG",{});var qVr=s(rte);Doo=r(qVr,"mbart50"),qVr.forEach(t),Goo=r(N9," \u2014 "),NR=n(N9,"A",{href:!0});var NVr=s(NR);Ooo=r(NVr,"MBart50Tokenizer"),NVr.forEach(t),Voo=r(N9," or "),jR=n(N9,"A",{href:!0});var jVr=s(jR);Xoo=r(jVr,"MBart50TokenizerFast"),jVr.forEach(t),zoo=r(N9," (mBART-50 model)"),N9.forEach(t),Qoo=i(S),ds=n(S,"LI",{});var j9=s(ds);tte=n(j9,"STRONG",{});var DVr=s(tte);Woo=r(DVr,"megatron-bert"),DVr.forEach(t),Hoo=r(j9," \u2014 "),DR=n(j9,"A",{href:!0});var GVr=s(DR);Uoo=r(GVr,"BertTokenizer"),GVr.forEach(t),Joo=r(j9," or "),GR=n(j9,"A",{href:!0});var OVr=s(GR);Yoo=r(OVr,"BertTokenizerFast"),OVr.forEach(t),Koo=r(j9," (MegatronBert model)"),j9.forEach(t),Zoo=i(S),Rg=n(S,"LI",{});var P5e=s(Rg);ate=n(P5e,"STRONG",{});var VVr=s(ate);ero=r(VVr,"mluke"),VVr.forEach(t),oro=r(P5e," \u2014 "),OR=n(P5e,"A",{href:!0});var XVr=s(OR);rro=r(XVr,"MLukeTokenizer"),XVr.forEach(t),tro=r(P5e," (mLUKE model)"),P5e.forEach(t),aro=i(S),cs=n(S,"LI",{});var D9=s(cs);nte=n(D9,"STRONG",{});var zVr=s(nte);nro=r(zVr,"mobilebert"),zVr.forEach(t),sro=r(D9," \u2014 "),VR=n(D9,"A",{href:!0});var QVr=s(VR);lro=r(QVr,"MobileBertTokenizer"),QVr.forEach(t),iro=r(D9," or "),XR=n(D9,"A",{href:!0});var WVr=s(XR);dro=r(WVr,"MobileBertTokenizerFast"),WVr.forEach(t),cro=r(D9," (MobileBERT model)"),D9.forEach(t),fro=i(S),fs=n(S,"LI",{});var G9=s(fs);ste=n(G9,"STRONG",{});var HVr=s(ste);mro=r(HVr,"mpnet"),HVr.forEach(t),gro=r(G9," \u2014 "),zR=n(G9,"A",{href:!0});var UVr=s(zR);hro=r(UVr,"MPNetTokenizer"),UVr.forEach(t),pro=r(G9," or "),QR=n(G9,"A",{href:!0});var JVr=s(QR);uro=r(JVr,"MPNetTokenizerFast"),JVr.forEach(t),_ro=r(G9," (MPNet model)"),G9.forEach(t),bro=i(S),ms=n(S,"LI",{});var O9=s(ms);lte=n(O9,"STRONG",{});var YVr=s(lte);vro=r(YVr,"mt5"),YVr.forEach(t),Fro=r(O9," \u2014 "),WR=n(O9,"A",{href:!0});var KVr=s(WR);Tro=r(KVr,"MT5Tokenizer"),KVr.forEach(t),Mro=r(O9," or "),HR=n(O9,"A",{href:!0});var ZVr=s(HR);Ero=r(ZVr,"MT5TokenizerFast"),ZVr.forEach(t),Cro=r(O9," (mT5 model)"),O9.forEach(t),wro=i(S),gs=n(S,"LI",{});var V9=s(gs);ite=n(V9,"STRONG",{});var eXr=s(ite);Aro=r(eXr,"nystromformer"),eXr.forEach(t),yro=r(V9," \u2014 "),UR=n(V9,"A",{href:!0});var oXr=s(UR);Lro=r(oXr,"AlbertTokenizer"),oXr.forEach(t),xro=r(V9," or "),JR=n(V9,"A",{href:!0});var rXr=s(JR);$ro=r(rXr,"AlbertTokenizerFast"),rXr.forEach(t),kro=r(V9," (Nystromformer model)"),V9.forEach(t),Sro=i(S),hs=n(S,"LI",{});var X9=s(hs);dte=n(X9,"STRONG",{});var tXr=s(dte);Rro=r(tXr,"openai-gpt"),tXr.forEach(t),Pro=r(X9," \u2014 "),YR=n(X9,"A",{href:!0});var aXr=s(YR);Bro=r(aXr,"OpenAIGPTTokenizer"),aXr.forEach(t),Iro=r(X9," or "),KR=n(X9,"A",{href:!0});var nXr=s(KR);qro=r(nXr,"OpenAIGPTTokenizerFast"),nXr.forEach(t),Nro=r(X9," (OpenAI GPT model)"),X9.forEach(t),jro=i(S),ps=n(S,"LI",{});var z9=s(ps);cte=n(z9,"STRONG",{});var sXr=s(cte);Dro=r(sXr,"opt"),sXr.forEach(t),Gro=r(z9," \u2014 "),ZR=n(z9,"A",{href:!0});var lXr=s(ZR);Oro=r(lXr,"GPT2Tokenizer"),lXr.forEach(t),Vro=r(z9," or "),eP=n(z9,"A",{href:!0});var iXr=s(eP);Xro=r(iXr,"GPT2TokenizerFast"),iXr.forEach(t),zro=r(z9," (OPT model)"),z9.forEach(t),Qro=i(S),us=n(S,"LI",{});var Q9=s(us);fte=n(Q9,"STRONG",{});var dXr=s(fte);Wro=r(dXr,"pegasus"),dXr.forEach(t),Hro=r(Q9," \u2014 "),oP=n(Q9,"A",{href:!0});var cXr=s(oP);Uro=r(cXr,"PegasusTokenizer"),cXr.forEach(t),Jro=r(Q9," or "),rP=n(Q9,"A",{href:!0});var fXr=s(rP);Yro=r(fXr,"PegasusTokenizerFast"),fXr.forEach(t),Kro=r(Q9," (Pegasus model)"),Q9.forEach(t),Zro=i(S),Pg=n(S,"LI",{});var B5e=s(Pg);mte=n(B5e,"STRONG",{});var mXr=s(mte);eto=r(mXr,"perceiver"),mXr.forEach(t),oto=r(B5e," \u2014 "),tP=n(B5e,"A",{href:!0});var gXr=s(tP);rto=r(gXr,"PerceiverTokenizer"),gXr.forEach(t),tto=r(B5e," (Perceiver model)"),B5e.forEach(t),ato=i(S),Bg=n(S,"LI",{});var I5e=s(Bg);gte=n(I5e,"STRONG",{});var hXr=s(gte);nto=r(hXr,"phobert"),hXr.forEach(t),sto=r(I5e," \u2014 "),aP=n(I5e,"A",{href:!0});var pXr=s(aP);lto=r(pXr,"PhobertTokenizer"),pXr.forEach(t),ito=r(I5e," (PhoBERT model)"),I5e.forEach(t),dto=i(S),Ig=n(S,"LI",{});var q5e=s(Ig);hte=n(q5e,"STRONG",{});var uXr=s(hte);cto=r(uXr,"plbart"),uXr.forEach(t),fto=r(q5e," \u2014 "),nP=n(q5e,"A",{href:!0});var _Xr=s(nP);mto=r(_Xr,"PLBartTokenizer"),_Xr.forEach(t),gto=r(q5e," (PLBart model)"),q5e.forEach(t),hto=i(S),qg=n(S,"LI",{});var N5e=s(qg);pte=n(N5e,"STRONG",{});var bXr=s(pte);pto=r(bXr,"prophetnet"),bXr.forEach(t),uto=r(N5e," \u2014 "),sP=n(N5e,"A",{href:!0});var vXr=s(sP);_to=r(vXr,"ProphetNetTokenizer"),vXr.forEach(t),bto=r(N5e," (ProphetNet model)"),N5e.forEach(t),vto=i(S),_s=n(S,"LI",{});var W9=s(_s);ute=n(W9,"STRONG",{});var FXr=s(ute);Fto=r(FXr,"qdqbert"),FXr.forEach(t),Tto=r(W9," \u2014 "),lP=n(W9,"A",{href:!0});var TXr=s(lP);Mto=r(TXr,"BertTokenizer"),TXr.forEach(t),Eto=r(W9," or "),iP=n(W9,"A",{href:!0});var MXr=s(iP);Cto=r(MXr,"BertTokenizerFast"),MXr.forEach(t),wto=r(W9," (QDQBert model)"),W9.forEach(t),Ato=i(S),Ng=n(S,"LI",{});var j5e=s(Ng);_te=n(j5e,"STRONG",{});var EXr=s(_te);yto=r(EXr,"rag"),EXr.forEach(t),Lto=r(j5e," \u2014 "),dP=n(j5e,"A",{href:!0});var CXr=s(dP);xto=r(CXr,"RagTokenizer"),CXr.forEach(t),$to=r(j5e," (RAG model)"),j5e.forEach(t),kto=i(S),bs=n(S,"LI",{});var H9=s(bs);bte=n(H9,"STRONG",{});var wXr=s(bte);Sto=r(wXr,"realm"),wXr.forEach(t),Rto=r(H9," \u2014 "),cP=n(H9,"A",{href:!0});var AXr=s(cP);Pto=r(AXr,"RealmTokenizer"),AXr.forEach(t),Bto=r(H9," or "),fP=n(H9,"A",{href:!0});var yXr=s(fP);Ito=r(yXr,"RealmTokenizerFast"),yXr.forEach(t),qto=r(H9," (Realm model)"),H9.forEach(t),Nto=i(S),vs=n(S,"LI",{});var U9=s(vs);vte=n(U9,"STRONG",{});var LXr=s(vte);jto=r(LXr,"reformer"),LXr.forEach(t),Dto=r(U9," \u2014 "),mP=n(U9,"A",{href:!0});var xXr=s(mP);Gto=r(xXr,"ReformerTokenizer"),xXr.forEach(t),Oto=r(U9," or "),gP=n(U9,"A",{href:!0});var $Xr=s(gP);Vto=r($Xr,"ReformerTokenizerFast"),$Xr.forEach(t),Xto=r(U9," (Reformer model)"),U9.forEach(t),zto=i(S),Fs=n(S,"LI",{});var J9=s(Fs);Fte=n(J9,"STRONG",{});var kXr=s(Fte);Qto=r(kXr,"rembert"),kXr.forEach(t),Wto=r(J9," \u2014 "),hP=n(J9,"A",{href:!0});var SXr=s(hP);Hto=r(SXr,"RemBertTokenizer"),SXr.forEach(t),Uto=r(J9," or "),pP=n(J9,"A",{href:!0});var RXr=s(pP);Jto=r(RXr,"RemBertTokenizerFast"),RXr.forEach(t),Yto=r(J9," (RemBERT model)"),J9.forEach(t),Kto=i(S),Ts=n(S,"LI",{});var Y9=s(Ts);Tte=n(Y9,"STRONG",{});var PXr=s(Tte);Zto=r(PXr,"retribert"),PXr.forEach(t),eao=r(Y9," \u2014 "),uP=n(Y9,"A",{href:!0});var BXr=s(uP);oao=r(BXr,"RetriBertTokenizer"),BXr.forEach(t),rao=r(Y9," or "),_P=n(Y9,"A",{href:!0});var IXr=s(_P);tao=r(IXr,"RetriBertTokenizerFast"),IXr.forEach(t),aao=r(Y9," (RetriBERT model)"),Y9.forEach(t),nao=i(S),Ms=n(S,"LI",{});var K9=s(Ms);Mte=n(K9,"STRONG",{});var qXr=s(Mte);sao=r(qXr,"roberta"),qXr.forEach(t),lao=r(K9," \u2014 "),bP=n(K9,"A",{href:!0});var NXr=s(bP);iao=r(NXr,"RobertaTokenizer"),NXr.forEach(t),dao=r(K9," or "),vP=n(K9,"A",{href:!0});var jXr=s(vP);cao=r(jXr,"RobertaTokenizerFast"),jXr.forEach(t),fao=r(K9," (RoBERTa model)"),K9.forEach(t),mao=i(S),Es=n(S,"LI",{});var Z9=s(Es);Ete=n(Z9,"STRONG",{});var DXr=s(Ete);gao=r(DXr,"roformer"),DXr.forEach(t),hao=r(Z9," \u2014 "),FP=n(Z9,"A",{href:!0});var GXr=s(FP);pao=r(GXr,"RoFormerTokenizer"),GXr.forEach(t),uao=r(Z9," or "),TP=n(Z9,"A",{href:!0});var OXr=s(TP);_ao=r(OXr,"RoFormerTokenizerFast"),OXr.forEach(t),bao=r(Z9," (RoFormer model)"),Z9.forEach(t),vao=i(S),jg=n(S,"LI",{});var D5e=s(jg);Cte=n(D5e,"STRONG",{});var VXr=s(Cte);Fao=r(VXr,"speech_to_text"),VXr.forEach(t),Tao=r(D5e," \u2014 "),MP=n(D5e,"A",{href:!0});var XXr=s(MP);Mao=r(XXr,"Speech2TextTokenizer"),XXr.forEach(t),Eao=r(D5e," (Speech2Text model)"),D5e.forEach(t),Cao=i(S),Dg=n(S,"LI",{});var G5e=s(Dg);wte=n(G5e,"STRONG",{});var zXr=s(wte);wao=r(zXr,"speech_to_text_2"),zXr.forEach(t),Aao=r(G5e," \u2014 "),EP=n(G5e,"A",{href:!0});var QXr=s(EP);yao=r(QXr,"Speech2Text2Tokenizer"),QXr.forEach(t),Lao=r(G5e," (Speech2Text2 model)"),G5e.forEach(t),xao=i(S),Cs=n(S,"LI",{});var e$=s(Cs);Ate=n(e$,"STRONG",{});var WXr=s(Ate);$ao=r(WXr,"splinter"),WXr.forEach(t),kao=r(e$," \u2014 "),CP=n(e$,"A",{href:!0});var HXr=s(CP);Sao=r(HXr,"SplinterTokenizer"),HXr.forEach(t),Rao=r(e$," or "),wP=n(e$,"A",{href:!0});var UXr=s(wP);Pao=r(UXr,"SplinterTokenizerFast"),UXr.forEach(t),Bao=r(e$," (Splinter model)"),e$.forEach(t),Iao=i(S),ws=n(S,"LI",{});var o$=s(ws);yte=n(o$,"STRONG",{});var JXr=s(yte);qao=r(JXr,"squeezebert"),JXr.forEach(t),Nao=r(o$," \u2014 "),AP=n(o$,"A",{href:!0});var YXr=s(AP);jao=r(YXr,"SqueezeBertTokenizer"),YXr.forEach(t),Dao=r(o$," or "),yP=n(o$,"A",{href:!0});var KXr=s(yP);Gao=r(KXr,"SqueezeBertTokenizerFast"),KXr.forEach(t),Oao=r(o$," (SqueezeBERT model)"),o$.forEach(t),Vao=i(S),As=n(S,"LI",{});var r$=s(As);Lte=n(r$,"STRONG",{});var ZXr=s(Lte);Xao=r(ZXr,"t5"),ZXr.forEach(t),zao=r(r$," \u2014 "),LP=n(r$,"A",{href:!0});var ezr=s(LP);Qao=r(ezr,"T5Tokenizer"),ezr.forEach(t),Wao=r(r$," or "),xP=n(r$,"A",{href:!0});var ozr=s(xP);Hao=r(ozr,"T5TokenizerFast"),ozr.forEach(t),Uao=r(r$," (T5 model)"),r$.forEach(t),Jao=i(S),Gg=n(S,"LI",{});var O5e=s(Gg);xte=n(O5e,"STRONG",{});var rzr=s(xte);Yao=r(rzr,"tapas"),rzr.forEach(t),Kao=r(O5e," \u2014 "),$P=n(O5e,"A",{href:!0});var tzr=s($P);Zao=r(tzr,"TapasTokenizer"),tzr.forEach(t),eno=r(O5e," (TAPAS model)"),O5e.forEach(t),ono=i(S),Og=n(S,"LI",{});var V5e=s(Og);$te=n(V5e,"STRONG",{});var azr=s($te);rno=r(azr,"tapex"),azr.forEach(t),tno=r(V5e," \u2014 "),kP=n(V5e,"A",{href:!0});var nzr=s(kP);ano=r(nzr,"TapexTokenizer"),nzr.forEach(t),nno=r(V5e," (TAPEX model)"),V5e.forEach(t),sno=i(S),Vg=n(S,"LI",{});var X5e=s(Vg);kte=n(X5e,"STRONG",{});var szr=s(kte);lno=r(szr,"transfo-xl"),szr.forEach(t),ino=r(X5e," \u2014 "),SP=n(X5e,"A",{href:!0});var lzr=s(SP);dno=r(lzr,"TransfoXLTokenizer"),lzr.forEach(t),cno=r(X5e," (Transformer-XL model)"),X5e.forEach(t),fno=i(S),ys=n(S,"LI",{});var t$=s(ys);Ste=n(t$,"STRONG",{});var izr=s(Ste);mno=r(izr,"visual_bert"),izr.forEach(t),gno=r(t$," \u2014 "),RP=n(t$,"A",{href:!0});var dzr=s(RP);hno=r(dzr,"BertTokenizer"),dzr.forEach(t),pno=r(t$," or "),PP=n(t$,"A",{href:!0});var czr=s(PP);uno=r(czr,"BertTokenizerFast"),czr.forEach(t),_no=r(t$," (VisualBert model)"),t$.forEach(t),bno=i(S),Xg=n(S,"LI",{});var z5e=s(Xg);Rte=n(z5e,"STRONG",{});var fzr=s(Rte);vno=r(fzr,"wav2vec2"),fzr.forEach(t),Fno=r(z5e," \u2014 "),BP=n(z5e,"A",{href:!0});var mzr=s(BP);Tno=r(mzr,"Wav2Vec2CTCTokenizer"),mzr.forEach(t),Mno=r(z5e," (Wav2Vec2 model)"),z5e.forEach(t),Eno=i(S),zg=n(S,"LI",{});var Q5e=s(zg);Pte=n(Q5e,"STRONG",{});var gzr=s(Pte);Cno=r(gzr,"wav2vec2_phoneme"),gzr.forEach(t),wno=r(Q5e," \u2014 "),IP=n(Q5e,"A",{href:!0});var hzr=s(IP);Ano=r(hzr,"Wav2Vec2PhonemeCTCTokenizer"),hzr.forEach(t),yno=r(Q5e," (Wav2Vec2Phoneme model)"),Q5e.forEach(t),Lno=i(S),Ls=n(S,"LI",{});var a$=s(Ls);Bte=n(a$,"STRONG",{});var pzr=s(Bte);xno=r(pzr,"xglm"),pzr.forEach(t),$no=r(a$," \u2014 "),qP=n(a$,"A",{href:!0});var uzr=s(qP);kno=r(uzr,"XGLMTokenizer"),uzr.forEach(t),Sno=r(a$," or "),NP=n(a$,"A",{href:!0});var _zr=s(NP);Rno=r(_zr,"XGLMTokenizerFast"),_zr.forEach(t),Pno=r(a$," (XGLM model)"),a$.forEach(t),Bno=i(S),Qg=n(S,"LI",{});var W5e=s(Qg);Ite=n(W5e,"STRONG",{});var bzr=s(Ite);Ino=r(bzr,"xlm"),bzr.forEach(t),qno=r(W5e," \u2014 "),jP=n(W5e,"A",{href:!0});var vzr=s(jP);Nno=r(vzr,"XLMTokenizer"),vzr.forEach(t),jno=r(W5e," (XLM model)"),W5e.forEach(t),Dno=i(S),Wg=n(S,"LI",{});var H5e=s(Wg);qte=n(H5e,"STRONG",{});var Fzr=s(qte);Gno=r(Fzr,"xlm-prophetnet"),Fzr.forEach(t),Ono=r(H5e," \u2014 "),DP=n(H5e,"A",{href:!0});var Tzr=s(DP);Vno=r(Tzr,"XLMProphetNetTokenizer"),Tzr.forEach(t),Xno=r(H5e," (XLMProphetNet model)"),H5e.forEach(t),zno=i(S),xs=n(S,"LI",{});var n$=s(xs);Nte=n(n$,"STRONG",{});var Mzr=s(Nte);Qno=r(Mzr,"xlm-roberta"),Mzr.forEach(t),Wno=r(n$," \u2014 "),GP=n(n$,"A",{href:!0});var Ezr=s(GP);Hno=r(Ezr,"XLMRobertaTokenizer"),Ezr.forEach(t),Uno=r(n$," or "),OP=n(n$,"A",{href:!0});var Czr=s(OP);Jno=r(Czr,"XLMRobertaTokenizerFast"),Czr.forEach(t),Yno=r(n$," (XLM-RoBERTa model)"),n$.forEach(t),Kno=i(S),$s=n(S,"LI",{});var s$=s($s);jte=n(s$,"STRONG",{});var wzr=s(jte);Zno=r(wzr,"xlm-roberta-xl"),wzr.forEach(t),eso=r(s$," \u2014 "),VP=n(s$,"A",{href:!0});var Azr=s(VP);oso=r(Azr,"RobertaTokenizer"),Azr.forEach(t),rso=r(s$," or "),XP=n(s$,"A",{href:!0});var yzr=s(XP);tso=r(yzr,"RobertaTokenizerFast"),yzr.forEach(t),aso=r(s$," (XLM-RoBERTa-XL model)"),s$.forEach(t),nso=i(S),ks=n(S,"LI",{});var l$=s(ks);Dte=n(l$,"STRONG",{});var Lzr=s(Dte);sso=r(Lzr,"xlnet"),Lzr.forEach(t),lso=r(l$," \u2014 "),zP=n(l$,"A",{href:!0});var xzr=s(zP);iso=r(xzr,"XLNetTokenizer"),xzr.forEach(t),dso=r(l$," or "),QP=n(l$,"A",{href:!0});var $zr=s(QP);cso=r($zr,"XLNetTokenizerFast"),$zr.forEach(t),fso=r(l$," (XLNet model)"),l$.forEach(t),mso=i(S),Ss=n(S,"LI",{});var i$=s(Ss);Gte=n(i$,"STRONG",{});var kzr=s(Gte);gso=r(kzr,"yoso"),kzr.forEach(t),hso=r(i$," \u2014 "),WP=n(i$,"A",{href:!0});var Szr=s(WP);pso=r(Szr,"AlbertTokenizer"),Szr.forEach(t),uso=r(i$," or "),HP=n(i$,"A",{href:!0});var Rzr=s(HP);_so=r(Rzr,"AlbertTokenizerFast"),Rzr.forEach(t),bso=r(i$," (YOSO model)"),i$.forEach(t),S.forEach(t),vso=i(qs),T(Hg.$$.fragment,qs),qs.forEach(t),Fso=i(Is),Ug=n(Is,"DIV",{class:!0});var Dqe=s(Ug);T(lA.$$.fragment,Dqe),Tso=i(Dqe),Ote=n(Dqe,"P",{});var Pzr=s(Ote);Mso=r(Pzr,"Register a new tokenizer in this mapping."),Pzr.forEach(t),Dqe.forEach(t),Is.forEach(t),GBe=i(f),vi=n(f,"H2",{class:!0});var Gqe=s(vi);Jg=n(Gqe,"A",{id:!0,class:!0,href:!0});var Bzr=s(Jg);Vte=n(Bzr,"SPAN",{});var Izr=s(Vte);T(iA.$$.fragment,Izr),Izr.forEach(t),Bzr.forEach(t),Eso=i(Gqe),Xte=n(Gqe,"SPAN",{});var qzr=s(Xte);Cso=r(qzr,"AutoFeatureExtractor"),qzr.forEach(t),Gqe.forEach(t),OBe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(dA.$$.fragment,Ns),wso=i(Ns),cA=n(Ns,"P",{});var Oqe=s(cA);Aso=r(Oqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),UP=n(Oqe,"A",{href:!0});var Nzr=s(UP);yso=r(Nzr,"AutoFeatureExtractor.from_pretrained()"),Nzr.forEach(t),Lso=r(Oqe," class method."),Oqe.forEach(t),xso=i(Ns),fA=n(Ns,"P",{});var Vqe=s(fA);$so=r(Vqe,"This class cannot be instantiated directly using "),zte=n(Vqe,"CODE",{});var jzr=s(zte);kso=r(jzr,"__init__()"),jzr.forEach(t),Sso=r(Vqe," (throws an error)."),Vqe.forEach(t),Rso=i(Ns),Qe=n(Ns,"DIV",{class:!0});var Yt=s(Qe);T(mA.$$.fragment,Yt),Pso=i(Yt),Qte=n(Yt,"P",{});var Dzr=s(Qte);Bso=r(Dzr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Dzr.forEach(t),Iso=i(Yt),wa=n(Yt,"P",{});var JC=s(wa);qso=r(JC,"The feature extractor class to instantiate is selected based on the "),Wte=n(JC,"CODE",{});var Gzr=s(Wte);Nso=r(Gzr,"model_type"),Gzr.forEach(t),jso=r(JC,` property of the config object
(either passed as an argument or loaded from `),Hte=n(JC,"CODE",{});var Ozr=s(Hte);Dso=r(Ozr,"pretrained_model_name_or_path"),Ozr.forEach(t),Gso=r(JC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ute=n(JC,"CODE",{});var Vzr=s(Ute);Oso=r(Vzr,"pretrained_model_name_or_path"),Vzr.forEach(t),Vso=r(JC,":"),JC.forEach(t),Xso=i(Yt),ae=n(Yt,"UL",{});var se=s(ae);Yg=n(se,"LI",{});var U5e=s(Yg);Jte=n(U5e,"STRONG",{});var Xzr=s(Jte);zso=r(Xzr,"beit"),Xzr.forEach(t),Qso=r(U5e," \u2014 "),JP=n(U5e,"A",{href:!0});var zzr=s(JP);Wso=r(zzr,"BeitFeatureExtractor"),zzr.forEach(t),Hso=r(U5e," (BEiT model)"),U5e.forEach(t),Uso=i(se),Kg=n(se,"LI",{});var J5e=s(Kg);Yte=n(J5e,"STRONG",{});var Qzr=s(Yte);Jso=r(Qzr,"clip"),Qzr.forEach(t),Yso=r(J5e," \u2014 "),YP=n(J5e,"A",{href:!0});var Wzr=s(YP);Kso=r(Wzr,"CLIPFeatureExtractor"),Wzr.forEach(t),Zso=r(J5e," (CLIP model)"),J5e.forEach(t),elo=i(se),Zg=n(se,"LI",{});var Y5e=s(Zg);Kte=n(Y5e,"STRONG",{});var Hzr=s(Kte);olo=r(Hzr,"convnext"),Hzr.forEach(t),rlo=r(Y5e," \u2014 "),KP=n(Y5e,"A",{href:!0});var Uzr=s(KP);tlo=r(Uzr,"ConvNextFeatureExtractor"),Uzr.forEach(t),alo=r(Y5e," (ConvNext model)"),Y5e.forEach(t),nlo=i(se),eh=n(se,"LI",{});var K5e=s(eh);Zte=n(K5e,"STRONG",{});var Jzr=s(Zte);slo=r(Jzr,"data2vec-audio"),Jzr.forEach(t),llo=r(K5e," \u2014 "),ZP=n(K5e,"A",{href:!0});var Yzr=s(ZP);ilo=r(Yzr,"Wav2Vec2FeatureExtractor"),Yzr.forEach(t),dlo=r(K5e," (Data2VecAudio model)"),K5e.forEach(t),clo=i(se),oh=n(se,"LI",{});var Z5e=s(oh);eae=n(Z5e,"STRONG",{});var Kzr=s(eae);flo=r(Kzr,"data2vec-vision"),Kzr.forEach(t),mlo=r(Z5e," \u2014 "),eB=n(Z5e,"A",{href:!0});var Zzr=s(eB);glo=r(Zzr,"BeitFeatureExtractor"),Zzr.forEach(t),hlo=r(Z5e," (Data2VecVision model)"),Z5e.forEach(t),plo=i(se),rh=n(se,"LI",{});var eCe=s(rh);oae=n(eCe,"STRONG",{});var eQr=s(oae);ulo=r(eQr,"deit"),eQr.forEach(t),_lo=r(eCe," \u2014 "),oB=n(eCe,"A",{href:!0});var oQr=s(oB);blo=r(oQr,"DeiTFeatureExtractor"),oQr.forEach(t),vlo=r(eCe," (DeiT model)"),eCe.forEach(t),Flo=i(se),th=n(se,"LI",{});var oCe=s(th);rae=n(oCe,"STRONG",{});var rQr=s(rae);Tlo=r(rQr,"detr"),rQr.forEach(t),Mlo=r(oCe," \u2014 "),rB=n(oCe,"A",{href:!0});var tQr=s(rB);Elo=r(tQr,"DetrFeatureExtractor"),tQr.forEach(t),Clo=r(oCe," (DETR model)"),oCe.forEach(t),wlo=i(se),ah=n(se,"LI",{});var rCe=s(ah);tae=n(rCe,"STRONG",{});var aQr=s(tae);Alo=r(aQr,"dpt"),aQr.forEach(t),ylo=r(rCe," \u2014 "),tB=n(rCe,"A",{href:!0});var nQr=s(tB);Llo=r(nQr,"DPTFeatureExtractor"),nQr.forEach(t),xlo=r(rCe," (DPT model)"),rCe.forEach(t),$lo=i(se),nh=n(se,"LI",{});var tCe=s(nh);aae=n(tCe,"STRONG",{});var sQr=s(aae);klo=r(sQr,"glpn"),sQr.forEach(t),Slo=r(tCe," \u2014 "),aB=n(tCe,"A",{href:!0});var lQr=s(aB);Rlo=r(lQr,"GLPNFeatureExtractor"),lQr.forEach(t),Plo=r(tCe," (GLPN model)"),tCe.forEach(t),Blo=i(se),sh=n(se,"LI",{});var aCe=s(sh);nae=n(aCe,"STRONG",{});var iQr=s(nae);Ilo=r(iQr,"hubert"),iQr.forEach(t),qlo=r(aCe," \u2014 "),nB=n(aCe,"A",{href:!0});var dQr=s(nB);Nlo=r(dQr,"Wav2Vec2FeatureExtractor"),dQr.forEach(t),jlo=r(aCe," (Hubert model)"),aCe.forEach(t),Dlo=i(se),lh=n(se,"LI",{});var nCe=s(lh);sae=n(nCe,"STRONG",{});var cQr=s(sae);Glo=r(cQr,"layoutlmv2"),cQr.forEach(t),Olo=r(nCe," \u2014 "),sB=n(nCe,"A",{href:!0});var fQr=s(sB);Vlo=r(fQr,"LayoutLMv2FeatureExtractor"),fQr.forEach(t),Xlo=r(nCe," (LayoutLMv2 model)"),nCe.forEach(t),zlo=i(se),ih=n(se,"LI",{});var sCe=s(ih);lae=n(sCe,"STRONG",{});var mQr=s(lae);Qlo=r(mQr,"maskformer"),mQr.forEach(t),Wlo=r(sCe," \u2014 "),lB=n(sCe,"A",{href:!0});var gQr=s(lB);Hlo=r(gQr,"MaskFormerFeatureExtractor"),gQr.forEach(t),Ulo=r(sCe," (MaskFormer model)"),sCe.forEach(t),Jlo=i(se),dh=n(se,"LI",{});var lCe=s(dh);iae=n(lCe,"STRONG",{});var hQr=s(iae);Ylo=r(hQr,"perceiver"),hQr.forEach(t),Klo=r(lCe," \u2014 "),iB=n(lCe,"A",{href:!0});var pQr=s(iB);Zlo=r(pQr,"PerceiverFeatureExtractor"),pQr.forEach(t),eio=r(lCe," (Perceiver model)"),lCe.forEach(t),oio=i(se),ch=n(se,"LI",{});var iCe=s(ch);dae=n(iCe,"STRONG",{});var uQr=s(dae);rio=r(uQr,"poolformer"),uQr.forEach(t),tio=r(iCe," \u2014 "),dB=n(iCe,"A",{href:!0});var _Qr=s(dB);aio=r(_Qr,"PoolFormerFeatureExtractor"),_Qr.forEach(t),nio=r(iCe," (PoolFormer model)"),iCe.forEach(t),sio=i(se),fh=n(se,"LI",{});var dCe=s(fh);cae=n(dCe,"STRONG",{});var bQr=s(cae);lio=r(bQr,"regnet"),bQr.forEach(t),iio=r(dCe," \u2014 "),cB=n(dCe,"A",{href:!0});var vQr=s(cB);dio=r(vQr,"ConvNextFeatureExtractor"),vQr.forEach(t),cio=r(dCe," (RegNet model)"),dCe.forEach(t),fio=i(se),mh=n(se,"LI",{});var cCe=s(mh);fae=n(cCe,"STRONG",{});var FQr=s(fae);mio=r(FQr,"resnet"),FQr.forEach(t),gio=r(cCe," \u2014 "),fB=n(cCe,"A",{href:!0});var TQr=s(fB);hio=r(TQr,"ConvNextFeatureExtractor"),TQr.forEach(t),pio=r(cCe," (ResNet model)"),cCe.forEach(t),uio=i(se),gh=n(se,"LI",{});var fCe=s(gh);mae=n(fCe,"STRONG",{});var MQr=s(mae);_io=r(MQr,"segformer"),MQr.forEach(t),bio=r(fCe," \u2014 "),mB=n(fCe,"A",{href:!0});var EQr=s(mB);vio=r(EQr,"SegformerFeatureExtractor"),EQr.forEach(t),Fio=r(fCe," (SegFormer model)"),fCe.forEach(t),Tio=i(se),hh=n(se,"LI",{});var mCe=s(hh);gae=n(mCe,"STRONG",{});var CQr=s(gae);Mio=r(CQr,"speech_to_text"),CQr.forEach(t),Eio=r(mCe," \u2014 "),gB=n(mCe,"A",{href:!0});var wQr=s(gB);Cio=r(wQr,"Speech2TextFeatureExtractor"),wQr.forEach(t),wio=r(mCe," (Speech2Text model)"),mCe.forEach(t),Aio=i(se),ph=n(se,"LI",{});var gCe=s(ph);hae=n(gCe,"STRONG",{});var AQr=s(hae);yio=r(AQr,"swin"),AQr.forEach(t),Lio=r(gCe," \u2014 "),hB=n(gCe,"A",{href:!0});var yQr=s(hB);xio=r(yQr,"ViTFeatureExtractor"),yQr.forEach(t),$io=r(gCe," (Swin model)"),gCe.forEach(t),kio=i(se),uh=n(se,"LI",{});var hCe=s(uh);pae=n(hCe,"STRONG",{});var LQr=s(pae);Sio=r(LQr,"van"),LQr.forEach(t),Rio=r(hCe," \u2014 "),pB=n(hCe,"A",{href:!0});var xQr=s(pB);Pio=r(xQr,"ConvNextFeatureExtractor"),xQr.forEach(t),Bio=r(hCe," (VAN model)"),hCe.forEach(t),Iio=i(se),_h=n(se,"LI",{});var pCe=s(_h);uae=n(pCe,"STRONG",{});var $Qr=s(uae);qio=r($Qr,"vit"),$Qr.forEach(t),Nio=r(pCe," \u2014 "),uB=n(pCe,"A",{href:!0});var kQr=s(uB);jio=r(kQr,"ViTFeatureExtractor"),kQr.forEach(t),Dio=r(pCe," (ViT model)"),pCe.forEach(t),Gio=i(se),bh=n(se,"LI",{});var uCe=s(bh);_ae=n(uCe,"STRONG",{});var SQr=s(_ae);Oio=r(SQr,"vit_mae"),SQr.forEach(t),Vio=r(uCe," \u2014 "),_B=n(uCe,"A",{href:!0});var RQr=s(_B);Xio=r(RQr,"ViTFeatureExtractor"),RQr.forEach(t),zio=r(uCe," (ViTMAE model)"),uCe.forEach(t),Qio=i(se),vh=n(se,"LI",{});var _Ce=s(vh);bae=n(_Ce,"STRONG",{});var PQr=s(bae);Wio=r(PQr,"wav2vec2"),PQr.forEach(t),Hio=r(_Ce," \u2014 "),bB=n(_Ce,"A",{href:!0});var BQr=s(bB);Uio=r(BQr,"Wav2Vec2FeatureExtractor"),BQr.forEach(t),Jio=r(_Ce," (Wav2Vec2 model)"),_Ce.forEach(t),Yio=i(se),Fh=n(se,"LI",{});var bCe=s(Fh);vae=n(bCe,"STRONG",{});var IQr=s(vae);Kio=r(IQr,"yolos"),IQr.forEach(t),Zio=r(bCe," \u2014 "),vB=n(bCe,"A",{href:!0});var qQr=s(vB);edo=r(qQr,"YolosFeatureExtractor"),qQr.forEach(t),odo=r(bCe," (YOLOS model)"),bCe.forEach(t),se.forEach(t),rdo=i(Yt),T(Th.$$.fragment,Yt),tdo=i(Yt),T(Mh.$$.fragment,Yt),Yt.forEach(t),ado=i(Ns),Eh=n(Ns,"DIV",{class:!0});var Xqe=s(Eh);T(gA.$$.fragment,Xqe),ndo=i(Xqe),Fae=n(Xqe,"P",{});var NQr=s(Fae);sdo=r(NQr,"Register a new feature extractor for this class."),NQr.forEach(t),Xqe.forEach(t),Ns.forEach(t),VBe=i(f),Fi=n(f,"H2",{class:!0});var zqe=s(Fi);Ch=n(zqe,"A",{id:!0,class:!0,href:!0});var jQr=s(Ch);Tae=n(jQr,"SPAN",{});var DQr=s(Tae);T(hA.$$.fragment,DQr),DQr.forEach(t),jQr.forEach(t),ldo=i(zqe),Mae=n(zqe,"SPAN",{});var GQr=s(Mae);ido=r(GQr,"AutoProcessor"),GQr.forEach(t),zqe.forEach(t),XBe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(pA.$$.fragment,js),ddo=i(js),uA=n(js,"P",{});var Qqe=s(uA);cdo=r(Qqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),FB=n(Qqe,"A",{href:!0});var OQr=s(FB);fdo=r(OQr,"AutoProcessor.from_pretrained()"),OQr.forEach(t),mdo=r(Qqe," class method."),Qqe.forEach(t),gdo=i(js),_A=n(js,"P",{});var Wqe=s(_A);hdo=r(Wqe,"This class cannot be instantiated directly using "),Eae=n(Wqe,"CODE",{});var VQr=s(Eae);pdo=r(VQr,"__init__()"),VQr.forEach(t),udo=r(Wqe," (throws an error)."),Wqe.forEach(t),_do=i(js),We=n(js,"DIV",{class:!0});var Kt=s(We);T(bA.$$.fragment,Kt),bdo=i(Kt),Cae=n(Kt,"P",{});var XQr=s(Cae);vdo=r(XQr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),XQr.forEach(t),Fdo=i(Kt),Ti=n(Kt,"P",{});var aK=s(Ti);Tdo=r(aK,"The processor class to instantiate is selected based on the "),wae=n(aK,"CODE",{});var zQr=s(wae);Mdo=r(zQr,"model_type"),zQr.forEach(t),Edo=r(aK,` property of the config object (either
passed as an argument or loaded from `),Aae=n(aK,"CODE",{});var QQr=s(Aae);Cdo=r(QQr,"pretrained_model_name_or_path"),QQr.forEach(t),wdo=r(aK," if possible):"),aK.forEach(t),Ado=i(Kt),be=n(Kt,"UL",{});var Fe=s(be);wh=n(Fe,"LI",{});var vCe=s(wh);yae=n(vCe,"STRONG",{});var WQr=s(yae);ydo=r(WQr,"clip"),WQr.forEach(t),Ldo=r(vCe," \u2014 "),TB=n(vCe,"A",{href:!0});var HQr=s(TB);xdo=r(HQr,"CLIPProcessor"),HQr.forEach(t),$do=r(vCe," (CLIP model)"),vCe.forEach(t),kdo=i(Fe),Ah=n(Fe,"LI",{});var FCe=s(Ah);Lae=n(FCe,"STRONG",{});var UQr=s(Lae);Sdo=r(UQr,"layoutlmv2"),UQr.forEach(t),Rdo=r(FCe," \u2014 "),MB=n(FCe,"A",{href:!0});var JQr=s(MB);Pdo=r(JQr,"LayoutLMv2Processor"),JQr.forEach(t),Bdo=r(FCe," (LayoutLMv2 model)"),FCe.forEach(t),Ido=i(Fe),yh=n(Fe,"LI",{});var TCe=s(yh);xae=n(TCe,"STRONG",{});var YQr=s(xae);qdo=r(YQr,"layoutxlm"),YQr.forEach(t),Ndo=r(TCe," \u2014 "),EB=n(TCe,"A",{href:!0});var KQr=s(EB);jdo=r(KQr,"LayoutXLMProcessor"),KQr.forEach(t),Ddo=r(TCe," (LayoutXLM model)"),TCe.forEach(t),Gdo=i(Fe),Lh=n(Fe,"LI",{});var MCe=s(Lh);$ae=n(MCe,"STRONG",{});var ZQr=s($ae);Odo=r(ZQr,"sew"),ZQr.forEach(t),Vdo=r(MCe," \u2014 "),CB=n(MCe,"A",{href:!0});var eWr=s(CB);Xdo=r(eWr,"Wav2Vec2Processor"),eWr.forEach(t),zdo=r(MCe," (SEW model)"),MCe.forEach(t),Qdo=i(Fe),xh=n(Fe,"LI",{});var ECe=s(xh);kae=n(ECe,"STRONG",{});var oWr=s(kae);Wdo=r(oWr,"sew-d"),oWr.forEach(t),Hdo=r(ECe," \u2014 "),wB=n(ECe,"A",{href:!0});var rWr=s(wB);Udo=r(rWr,"Wav2Vec2Processor"),rWr.forEach(t),Jdo=r(ECe," (SEW-D model)"),ECe.forEach(t),Ydo=i(Fe),$h=n(Fe,"LI",{});var CCe=s($h);Sae=n(CCe,"STRONG",{});var tWr=s(Sae);Kdo=r(tWr,"speech_to_text"),tWr.forEach(t),Zdo=r(CCe," \u2014 "),AB=n(CCe,"A",{href:!0});var aWr=s(AB);eco=r(aWr,"Speech2TextProcessor"),aWr.forEach(t),oco=r(CCe," (Speech2Text model)"),CCe.forEach(t),rco=i(Fe),kh=n(Fe,"LI",{});var wCe=s(kh);Rae=n(wCe,"STRONG",{});var nWr=s(Rae);tco=r(nWr,"speech_to_text_2"),nWr.forEach(t),aco=r(wCe," \u2014 "),yB=n(wCe,"A",{href:!0});var sWr=s(yB);nco=r(sWr,"Speech2Text2Processor"),sWr.forEach(t),sco=r(wCe," (Speech2Text2 model)"),wCe.forEach(t),lco=i(Fe),Sh=n(Fe,"LI",{});var ACe=s(Sh);Pae=n(ACe,"STRONG",{});var lWr=s(Pae);ico=r(lWr,"trocr"),lWr.forEach(t),dco=r(ACe," \u2014 "),LB=n(ACe,"A",{href:!0});var iWr=s(LB);cco=r(iWr,"TrOCRProcessor"),iWr.forEach(t),fco=r(ACe," (TrOCR model)"),ACe.forEach(t),mco=i(Fe),Rh=n(Fe,"LI",{});var yCe=s(Rh);Bae=n(yCe,"STRONG",{});var dWr=s(Bae);gco=r(dWr,"unispeech"),dWr.forEach(t),hco=r(yCe," \u2014 "),xB=n(yCe,"A",{href:!0});var cWr=s(xB);pco=r(cWr,"Wav2Vec2Processor"),cWr.forEach(t),uco=r(yCe," (UniSpeech model)"),yCe.forEach(t),_co=i(Fe),Ph=n(Fe,"LI",{});var LCe=s(Ph);Iae=n(LCe,"STRONG",{});var fWr=s(Iae);bco=r(fWr,"unispeech-sat"),fWr.forEach(t),vco=r(LCe," \u2014 "),$B=n(LCe,"A",{href:!0});var mWr=s($B);Fco=r(mWr,"Wav2Vec2Processor"),mWr.forEach(t),Tco=r(LCe," (UniSpeechSat model)"),LCe.forEach(t),Mco=i(Fe),Bh=n(Fe,"LI",{});var xCe=s(Bh);qae=n(xCe,"STRONG",{});var gWr=s(qae);Eco=r(gWr,"vilt"),gWr.forEach(t),Cco=r(xCe," \u2014 "),kB=n(xCe,"A",{href:!0});var hWr=s(kB);wco=r(hWr,"ViltProcessor"),hWr.forEach(t),Aco=r(xCe," (ViLT model)"),xCe.forEach(t),yco=i(Fe),Ih=n(Fe,"LI",{});var $Ce=s(Ih);Nae=n($Ce,"STRONG",{});var pWr=s(Nae);Lco=r(pWr,"vision-text-dual-encoder"),pWr.forEach(t),xco=r($Ce," \u2014 "),SB=n($Ce,"A",{href:!0});var uWr=s(SB);$co=r(uWr,"VisionTextDualEncoderProcessor"),uWr.forEach(t),kco=r($Ce," (VisionTextDualEncoder model)"),$Ce.forEach(t),Sco=i(Fe),qh=n(Fe,"LI",{});var kCe=s(qh);jae=n(kCe,"STRONG",{});var _Wr=s(jae);Rco=r(_Wr,"wav2vec2"),_Wr.forEach(t),Pco=r(kCe," \u2014 "),RB=n(kCe,"A",{href:!0});var bWr=s(RB);Bco=r(bWr,"Wav2Vec2Processor"),bWr.forEach(t),Ico=r(kCe," (Wav2Vec2 model)"),kCe.forEach(t),qco=i(Fe),Nh=n(Fe,"LI",{});var SCe=s(Nh);Dae=n(SCe,"STRONG",{});var vWr=s(Dae);Nco=r(vWr,"wavlm"),vWr.forEach(t),jco=r(SCe," \u2014 "),PB=n(SCe,"A",{href:!0});var FWr=s(PB);Dco=r(FWr,"Wav2Vec2Processor"),FWr.forEach(t),Gco=r(SCe," (WavLM model)"),SCe.forEach(t),Fe.forEach(t),Oco=i(Kt),T(jh.$$.fragment,Kt),Vco=i(Kt),T(Dh.$$.fragment,Kt),Kt.forEach(t),Xco=i(js),Gh=n(js,"DIV",{class:!0});var Hqe=s(Gh);T(vA.$$.fragment,Hqe),zco=i(Hqe),Gae=n(Hqe,"P",{});var TWr=s(Gae);Qco=r(TWr,"Register a new processor for this class."),TWr.forEach(t),Hqe.forEach(t),js.forEach(t),zBe=i(f),Mi=n(f,"H2",{class:!0});var Uqe=s(Mi);Oh=n(Uqe,"A",{id:!0,class:!0,href:!0});var MWr=s(Oh);Oae=n(MWr,"SPAN",{});var EWr=s(Oae);T(FA.$$.fragment,EWr),EWr.forEach(t),MWr.forEach(t),Wco=i(Uqe),Vae=n(Uqe,"SPAN",{});var CWr=s(Vae);Hco=r(CWr,"AutoModel"),CWr.forEach(t),Uqe.forEach(t),QBe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(TA.$$.fragment,Ds),Uco=i(Ds),Ei=n(Ds,"P",{});var nK=s(Ei);Jco=r(nK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BB=n(nK,"A",{href:!0});var wWr=s(BB);Yco=r(wWr,"from_pretrained()"),wWr.forEach(t),Kco=r(nK," class method or the "),IB=n(nK,"A",{href:!0});var AWr=s(IB);Zco=r(AWr,"from_config()"),AWr.forEach(t),efo=r(nK,` class
method.`),nK.forEach(t),ofo=i(Ds),MA=n(Ds,"P",{});var Jqe=s(MA);rfo=r(Jqe,"This class cannot be instantiated directly using "),Xae=n(Jqe,"CODE",{});var yWr=s(Xae);tfo=r(yWr,"__init__()"),yWr.forEach(t),afo=r(Jqe," (throws an error)."),Jqe.forEach(t),nfo=i(Ds),ot=n(Ds,"DIV",{class:!0});var YC=s(ot);T(EA.$$.fragment,YC),sfo=i(YC),zae=n(YC,"P",{});var LWr=s(zae);lfo=r(LWr,"Instantiates one of the base model classes of the library from a configuration."),LWr.forEach(t),ifo=i(YC),Ci=n(YC,"P",{});var sK=s(Ci);dfo=r(sK,`Note:
Loading a model from its configuration file does `),Qae=n(sK,"STRONG",{});var xWr=s(Qae);cfo=r(xWr,"not"),xWr.forEach(t),ffo=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qB=n(sK,"A",{href:!0});var $Wr=s(qB);mfo=r($Wr,"from_pretrained()"),$Wr.forEach(t),gfo=r(sK," to load the model weights."),sK.forEach(t),hfo=i(YC),T(Vh.$$.fragment,YC),YC.forEach(t),pfo=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(CA.$$.fragment,Zt),ufo=i(Zt),Wae=n(Zt,"P",{});var kWr=s(Wae);_fo=r(kWr,"Instantiate one of the base model classes of the library from a pretrained model."),kWr.forEach(t),bfo=i(Zt),Aa=n(Zt,"P",{});var KC=s(Aa);vfo=r(KC,"The model class to instantiate is selected based on the "),Hae=n(KC,"CODE",{});var SWr=s(Hae);Ffo=r(SWr,"model_type"),SWr.forEach(t),Tfo=r(KC,` property of the config object (either
passed as an argument or loaded from `),Uae=n(KC,"CODE",{});var RWr=s(Uae);Mfo=r(RWr,"pretrained_model_name_or_path"),RWr.forEach(t),Efo=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jae=n(KC,"CODE",{});var PWr=s(Jae);Cfo=r(PWr,"pretrained_model_name_or_path"),PWr.forEach(t),wfo=r(KC,":"),KC.forEach(t),Afo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Xh=n($,"LI",{});var RCe=s(Xh);Yae=n(RCe,"STRONG",{});var BWr=s(Yae);yfo=r(BWr,"albert"),BWr.forEach(t),Lfo=r(RCe," \u2014 "),NB=n(RCe,"A",{href:!0});var IWr=s(NB);xfo=r(IWr,"AlbertModel"),IWr.forEach(t),$fo=r(RCe," (ALBERT model)"),RCe.forEach(t),kfo=i($),zh=n($,"LI",{});var PCe=s(zh);Kae=n(PCe,"STRONG",{});var qWr=s(Kae);Sfo=r(qWr,"bart"),qWr.forEach(t),Rfo=r(PCe," \u2014 "),jB=n(PCe,"A",{href:!0});var NWr=s(jB);Pfo=r(NWr,"BartModel"),NWr.forEach(t),Bfo=r(PCe," (BART model)"),PCe.forEach(t),Ifo=i($),Qh=n($,"LI",{});var BCe=s(Qh);Zae=n(BCe,"STRONG",{});var jWr=s(Zae);qfo=r(jWr,"beit"),jWr.forEach(t),Nfo=r(BCe," \u2014 "),DB=n(BCe,"A",{href:!0});var DWr=s(DB);jfo=r(DWr,"BeitModel"),DWr.forEach(t),Dfo=r(BCe," (BEiT model)"),BCe.forEach(t),Gfo=i($),Wh=n($,"LI",{});var ICe=s(Wh);ene=n(ICe,"STRONG",{});var GWr=s(ene);Ofo=r(GWr,"bert"),GWr.forEach(t),Vfo=r(ICe," \u2014 "),GB=n(ICe,"A",{href:!0});var OWr=s(GB);Xfo=r(OWr,"BertModel"),OWr.forEach(t),zfo=r(ICe," (BERT model)"),ICe.forEach(t),Qfo=i($),Hh=n($,"LI",{});var qCe=s(Hh);one=n(qCe,"STRONG",{});var VWr=s(one);Wfo=r(VWr,"bert-generation"),VWr.forEach(t),Hfo=r(qCe," \u2014 "),OB=n(qCe,"A",{href:!0});var XWr=s(OB);Ufo=r(XWr,"BertGenerationEncoder"),XWr.forEach(t),Jfo=r(qCe," (Bert Generation model)"),qCe.forEach(t),Yfo=i($),Uh=n($,"LI",{});var NCe=s(Uh);rne=n(NCe,"STRONG",{});var zWr=s(rne);Kfo=r(zWr,"big_bird"),zWr.forEach(t),Zfo=r(NCe," \u2014 "),VB=n(NCe,"A",{href:!0});var QWr=s(VB);emo=r(QWr,"BigBirdModel"),QWr.forEach(t),omo=r(NCe," (BigBird model)"),NCe.forEach(t),rmo=i($),Jh=n($,"LI",{});var jCe=s(Jh);tne=n(jCe,"STRONG",{});var WWr=s(tne);tmo=r(WWr,"bigbird_pegasus"),WWr.forEach(t),amo=r(jCe," \u2014 "),XB=n(jCe,"A",{href:!0});var HWr=s(XB);nmo=r(HWr,"BigBirdPegasusModel"),HWr.forEach(t),smo=r(jCe," (BigBirdPegasus model)"),jCe.forEach(t),lmo=i($),Yh=n($,"LI",{});var DCe=s(Yh);ane=n(DCe,"STRONG",{});var UWr=s(ane);imo=r(UWr,"blenderbot"),UWr.forEach(t),dmo=r(DCe," \u2014 "),zB=n(DCe,"A",{href:!0});var JWr=s(zB);cmo=r(JWr,"BlenderbotModel"),JWr.forEach(t),fmo=r(DCe," (Blenderbot model)"),DCe.forEach(t),mmo=i($),Kh=n($,"LI",{});var GCe=s(Kh);nne=n(GCe,"STRONG",{});var YWr=s(nne);gmo=r(YWr,"blenderbot-small"),YWr.forEach(t),hmo=r(GCe," \u2014 "),QB=n(GCe,"A",{href:!0});var KWr=s(QB);pmo=r(KWr,"BlenderbotSmallModel"),KWr.forEach(t),umo=r(GCe," (BlenderbotSmall model)"),GCe.forEach(t),_mo=i($),Zh=n($,"LI",{});var OCe=s(Zh);sne=n(OCe,"STRONG",{});var ZWr=s(sne);bmo=r(ZWr,"camembert"),ZWr.forEach(t),vmo=r(OCe," \u2014 "),WB=n(OCe,"A",{href:!0});var eHr=s(WB);Fmo=r(eHr,"CamembertModel"),eHr.forEach(t),Tmo=r(OCe," (CamemBERT model)"),OCe.forEach(t),Mmo=i($),ep=n($,"LI",{});var VCe=s(ep);lne=n(VCe,"STRONG",{});var oHr=s(lne);Emo=r(oHr,"canine"),oHr.forEach(t),Cmo=r(VCe," \u2014 "),HB=n(VCe,"A",{href:!0});var rHr=s(HB);wmo=r(rHr,"CanineModel"),rHr.forEach(t),Amo=r(VCe," (Canine model)"),VCe.forEach(t),ymo=i($),op=n($,"LI",{});var XCe=s(op);ine=n(XCe,"STRONG",{});var tHr=s(ine);Lmo=r(tHr,"clip"),tHr.forEach(t),xmo=r(XCe," \u2014 "),UB=n(XCe,"A",{href:!0});var aHr=s(UB);$mo=r(aHr,"CLIPModel"),aHr.forEach(t),kmo=r(XCe," (CLIP model)"),XCe.forEach(t),Smo=i($),rp=n($,"LI",{});var zCe=s(rp);dne=n(zCe,"STRONG",{});var nHr=s(dne);Rmo=r(nHr,"convbert"),nHr.forEach(t),Pmo=r(zCe," \u2014 "),JB=n(zCe,"A",{href:!0});var sHr=s(JB);Bmo=r(sHr,"ConvBertModel"),sHr.forEach(t),Imo=r(zCe," (ConvBERT model)"),zCe.forEach(t),qmo=i($),tp=n($,"LI",{});var QCe=s(tp);cne=n(QCe,"STRONG",{});var lHr=s(cne);Nmo=r(lHr,"convnext"),lHr.forEach(t),jmo=r(QCe," \u2014 "),YB=n(QCe,"A",{href:!0});var iHr=s(YB);Dmo=r(iHr,"ConvNextModel"),iHr.forEach(t),Gmo=r(QCe," (ConvNext model)"),QCe.forEach(t),Omo=i($),ap=n($,"LI",{});var WCe=s(ap);fne=n(WCe,"STRONG",{});var dHr=s(fne);Vmo=r(dHr,"ctrl"),dHr.forEach(t),Xmo=r(WCe," \u2014 "),KB=n(WCe,"A",{href:!0});var cHr=s(KB);zmo=r(cHr,"CTRLModel"),cHr.forEach(t),Qmo=r(WCe," (CTRL model)"),WCe.forEach(t),Wmo=i($),np=n($,"LI",{});var HCe=s(np);mne=n(HCe,"STRONG",{});var fHr=s(mne);Hmo=r(fHr,"data2vec-audio"),fHr.forEach(t),Umo=r(HCe," \u2014 "),ZB=n(HCe,"A",{href:!0});var mHr=s(ZB);Jmo=r(mHr,"Data2VecAudioModel"),mHr.forEach(t),Ymo=r(HCe," (Data2VecAudio model)"),HCe.forEach(t),Kmo=i($),sp=n($,"LI",{});var UCe=s(sp);gne=n(UCe,"STRONG",{});var gHr=s(gne);Zmo=r(gHr,"data2vec-text"),gHr.forEach(t),ego=r(UCe," \u2014 "),eI=n(UCe,"A",{href:!0});var hHr=s(eI);ogo=r(hHr,"Data2VecTextModel"),hHr.forEach(t),rgo=r(UCe," (Data2VecText model)"),UCe.forEach(t),tgo=i($),lp=n($,"LI",{});var JCe=s(lp);hne=n(JCe,"STRONG",{});var pHr=s(hne);ago=r(pHr,"data2vec-vision"),pHr.forEach(t),ngo=r(JCe," \u2014 "),oI=n(JCe,"A",{href:!0});var uHr=s(oI);sgo=r(uHr,"Data2VecVisionModel"),uHr.forEach(t),lgo=r(JCe," (Data2VecVision model)"),JCe.forEach(t),igo=i($),ip=n($,"LI",{});var YCe=s(ip);pne=n(YCe,"STRONG",{});var _Hr=s(pne);dgo=r(_Hr,"deberta"),_Hr.forEach(t),cgo=r(YCe," \u2014 "),rI=n(YCe,"A",{href:!0});var bHr=s(rI);fgo=r(bHr,"DebertaModel"),bHr.forEach(t),mgo=r(YCe," (DeBERTa model)"),YCe.forEach(t),ggo=i($),dp=n($,"LI",{});var KCe=s(dp);une=n(KCe,"STRONG",{});var vHr=s(une);hgo=r(vHr,"deberta-v2"),vHr.forEach(t),pgo=r(KCe," \u2014 "),tI=n(KCe,"A",{href:!0});var FHr=s(tI);ugo=r(FHr,"DebertaV2Model"),FHr.forEach(t),_go=r(KCe," (DeBERTa-v2 model)"),KCe.forEach(t),bgo=i($),cp=n($,"LI",{});var ZCe=s(cp);_ne=n(ZCe,"STRONG",{});var THr=s(_ne);vgo=r(THr,"decision_transformer"),THr.forEach(t),Fgo=r(ZCe," \u2014 "),aI=n(ZCe,"A",{href:!0});var MHr=s(aI);Tgo=r(MHr,"DecisionTransformerModel"),MHr.forEach(t),Mgo=r(ZCe," (Decision Transformer model)"),ZCe.forEach(t),Ego=i($),fp=n($,"LI",{});var e3e=s(fp);bne=n(e3e,"STRONG",{});var EHr=s(bne);Cgo=r(EHr,"deit"),EHr.forEach(t),wgo=r(e3e," \u2014 "),nI=n(e3e,"A",{href:!0});var CHr=s(nI);Ago=r(CHr,"DeiTModel"),CHr.forEach(t),ygo=r(e3e," (DeiT model)"),e3e.forEach(t),Lgo=i($),mp=n($,"LI",{});var o3e=s(mp);vne=n(o3e,"STRONG",{});var wHr=s(vne);xgo=r(wHr,"detr"),wHr.forEach(t),$go=r(o3e," \u2014 "),sI=n(o3e,"A",{href:!0});var AHr=s(sI);kgo=r(AHr,"DetrModel"),AHr.forEach(t),Sgo=r(o3e," (DETR model)"),o3e.forEach(t),Rgo=i($),gp=n($,"LI",{});var r3e=s(gp);Fne=n(r3e,"STRONG",{});var yHr=s(Fne);Pgo=r(yHr,"distilbert"),yHr.forEach(t),Bgo=r(r3e," \u2014 "),lI=n(r3e,"A",{href:!0});var LHr=s(lI);Igo=r(LHr,"DistilBertModel"),LHr.forEach(t),qgo=r(r3e," (DistilBERT model)"),r3e.forEach(t),Ngo=i($),hp=n($,"LI",{});var t3e=s(hp);Tne=n(t3e,"STRONG",{});var xHr=s(Tne);jgo=r(xHr,"dpr"),xHr.forEach(t),Dgo=r(t3e," \u2014 "),iI=n(t3e,"A",{href:!0});var $Hr=s(iI);Ggo=r($Hr,"DPRQuestionEncoder"),$Hr.forEach(t),Ogo=r(t3e," (DPR model)"),t3e.forEach(t),Vgo=i($),pp=n($,"LI",{});var a3e=s(pp);Mne=n(a3e,"STRONG",{});var kHr=s(Mne);Xgo=r(kHr,"dpt"),kHr.forEach(t),zgo=r(a3e," \u2014 "),dI=n(a3e,"A",{href:!0});var SHr=s(dI);Qgo=r(SHr,"DPTModel"),SHr.forEach(t),Wgo=r(a3e," (DPT model)"),a3e.forEach(t),Hgo=i($),up=n($,"LI",{});var n3e=s(up);Ene=n(n3e,"STRONG",{});var RHr=s(Ene);Ugo=r(RHr,"electra"),RHr.forEach(t),Jgo=r(n3e," \u2014 "),cI=n(n3e,"A",{href:!0});var PHr=s(cI);Ygo=r(PHr,"ElectraModel"),PHr.forEach(t),Kgo=r(n3e," (ELECTRA model)"),n3e.forEach(t),Zgo=i($),_p=n($,"LI",{});var s3e=s(_p);Cne=n(s3e,"STRONG",{});var BHr=s(Cne);eho=r(BHr,"flaubert"),BHr.forEach(t),oho=r(s3e," \u2014 "),fI=n(s3e,"A",{href:!0});var IHr=s(fI);rho=r(IHr,"FlaubertModel"),IHr.forEach(t),tho=r(s3e," (FlauBERT model)"),s3e.forEach(t),aho=i($),bp=n($,"LI",{});var l3e=s(bp);wne=n(l3e,"STRONG",{});var qHr=s(wne);nho=r(qHr,"fnet"),qHr.forEach(t),sho=r(l3e," \u2014 "),mI=n(l3e,"A",{href:!0});var NHr=s(mI);lho=r(NHr,"FNetModel"),NHr.forEach(t),iho=r(l3e," (FNet model)"),l3e.forEach(t),dho=i($),vp=n($,"LI",{});var i3e=s(vp);Ane=n(i3e,"STRONG",{});var jHr=s(Ane);cho=r(jHr,"fsmt"),jHr.forEach(t),fho=r(i3e," \u2014 "),gI=n(i3e,"A",{href:!0});var DHr=s(gI);mho=r(DHr,"FSMTModel"),DHr.forEach(t),gho=r(i3e," (FairSeq Machine-Translation model)"),i3e.forEach(t),hho=i($),Rs=n($,"LI",{});var d$=s(Rs);yne=n(d$,"STRONG",{});var GHr=s(yne);pho=r(GHr,"funnel"),GHr.forEach(t),uho=r(d$," \u2014 "),hI=n(d$,"A",{href:!0});var OHr=s(hI);_ho=r(OHr,"FunnelModel"),OHr.forEach(t),bho=r(d$," or "),pI=n(d$,"A",{href:!0});var VHr=s(pI);vho=r(VHr,"FunnelBaseModel"),VHr.forEach(t),Fho=r(d$," (Funnel Transformer model)"),d$.forEach(t),Tho=i($),Fp=n($,"LI",{});var d3e=s(Fp);Lne=n(d3e,"STRONG",{});var XHr=s(Lne);Mho=r(XHr,"glpn"),XHr.forEach(t),Eho=r(d3e," \u2014 "),uI=n(d3e,"A",{href:!0});var zHr=s(uI);Cho=r(zHr,"GLPNModel"),zHr.forEach(t),who=r(d3e," (GLPN model)"),d3e.forEach(t),Aho=i($),Tp=n($,"LI",{});var c3e=s(Tp);xne=n(c3e,"STRONG",{});var QHr=s(xne);yho=r(QHr,"gpt2"),QHr.forEach(t),Lho=r(c3e," \u2014 "),_I=n(c3e,"A",{href:!0});var WHr=s(_I);xho=r(WHr,"GPT2Model"),WHr.forEach(t),$ho=r(c3e," (OpenAI GPT-2 model)"),c3e.forEach(t),kho=i($),Mp=n($,"LI",{});var f3e=s(Mp);$ne=n(f3e,"STRONG",{});var HHr=s($ne);Sho=r(HHr,"gpt_neo"),HHr.forEach(t),Rho=r(f3e," \u2014 "),bI=n(f3e,"A",{href:!0});var UHr=s(bI);Pho=r(UHr,"GPTNeoModel"),UHr.forEach(t),Bho=r(f3e," (GPT Neo model)"),f3e.forEach(t),Iho=i($),Ep=n($,"LI",{});var m3e=s(Ep);kne=n(m3e,"STRONG",{});var JHr=s(kne);qho=r(JHr,"gptj"),JHr.forEach(t),Nho=r(m3e," \u2014 "),vI=n(m3e,"A",{href:!0});var YHr=s(vI);jho=r(YHr,"GPTJModel"),YHr.forEach(t),Dho=r(m3e," (GPT-J model)"),m3e.forEach(t),Gho=i($),Cp=n($,"LI",{});var g3e=s(Cp);Sne=n(g3e,"STRONG",{});var KHr=s(Sne);Oho=r(KHr,"hubert"),KHr.forEach(t),Vho=r(g3e," \u2014 "),FI=n(g3e,"A",{href:!0});var ZHr=s(FI);Xho=r(ZHr,"HubertModel"),ZHr.forEach(t),zho=r(g3e," (Hubert model)"),g3e.forEach(t),Qho=i($),wp=n($,"LI",{});var h3e=s(wp);Rne=n(h3e,"STRONG",{});var eUr=s(Rne);Who=r(eUr,"ibert"),eUr.forEach(t),Hho=r(h3e," \u2014 "),TI=n(h3e,"A",{href:!0});var oUr=s(TI);Uho=r(oUr,"IBertModel"),oUr.forEach(t),Jho=r(h3e," (I-BERT model)"),h3e.forEach(t),Yho=i($),Ap=n($,"LI",{});var p3e=s(Ap);Pne=n(p3e,"STRONG",{});var rUr=s(Pne);Kho=r(rUr,"imagegpt"),rUr.forEach(t),Zho=r(p3e," \u2014 "),MI=n(p3e,"A",{href:!0});var tUr=s(MI);epo=r(tUr,"ImageGPTModel"),tUr.forEach(t),opo=r(p3e," (ImageGPT model)"),p3e.forEach(t),rpo=i($),yp=n($,"LI",{});var u3e=s(yp);Bne=n(u3e,"STRONG",{});var aUr=s(Bne);tpo=r(aUr,"layoutlm"),aUr.forEach(t),apo=r(u3e," \u2014 "),EI=n(u3e,"A",{href:!0});var nUr=s(EI);npo=r(nUr,"LayoutLMModel"),nUr.forEach(t),spo=r(u3e," (LayoutLM model)"),u3e.forEach(t),lpo=i($),Lp=n($,"LI",{});var _3e=s(Lp);Ine=n(_3e,"STRONG",{});var sUr=s(Ine);ipo=r(sUr,"layoutlmv2"),sUr.forEach(t),dpo=r(_3e," \u2014 "),CI=n(_3e,"A",{href:!0});var lUr=s(CI);cpo=r(lUr,"LayoutLMv2Model"),lUr.forEach(t),fpo=r(_3e," (LayoutLMv2 model)"),_3e.forEach(t),mpo=i($),xp=n($,"LI",{});var b3e=s(xp);qne=n(b3e,"STRONG",{});var iUr=s(qne);gpo=r(iUr,"led"),iUr.forEach(t),hpo=r(b3e," \u2014 "),wI=n(b3e,"A",{href:!0});var dUr=s(wI);ppo=r(dUr,"LEDModel"),dUr.forEach(t),upo=r(b3e," (LED model)"),b3e.forEach(t),_po=i($),$p=n($,"LI",{});var v3e=s($p);Nne=n(v3e,"STRONG",{});var cUr=s(Nne);bpo=r(cUr,"longformer"),cUr.forEach(t),vpo=r(v3e," \u2014 "),AI=n(v3e,"A",{href:!0});var fUr=s(AI);Fpo=r(fUr,"LongformerModel"),fUr.forEach(t),Tpo=r(v3e," (Longformer model)"),v3e.forEach(t),Mpo=i($),kp=n($,"LI",{});var F3e=s(kp);jne=n(F3e,"STRONG",{});var mUr=s(jne);Epo=r(mUr,"luke"),mUr.forEach(t),Cpo=r(F3e," \u2014 "),yI=n(F3e,"A",{href:!0});var gUr=s(yI);wpo=r(gUr,"LukeModel"),gUr.forEach(t),Apo=r(F3e," (LUKE model)"),F3e.forEach(t),ypo=i($),Sp=n($,"LI",{});var T3e=s(Sp);Dne=n(T3e,"STRONG",{});var hUr=s(Dne);Lpo=r(hUr,"lxmert"),hUr.forEach(t),xpo=r(T3e," \u2014 "),LI=n(T3e,"A",{href:!0});var pUr=s(LI);$po=r(pUr,"LxmertModel"),pUr.forEach(t),kpo=r(T3e," (LXMERT model)"),T3e.forEach(t),Spo=i($),Rp=n($,"LI",{});var M3e=s(Rp);Gne=n(M3e,"STRONG",{});var uUr=s(Gne);Rpo=r(uUr,"m2m_100"),uUr.forEach(t),Ppo=r(M3e," \u2014 "),xI=n(M3e,"A",{href:!0});var _Ur=s(xI);Bpo=r(_Ur,"M2M100Model"),_Ur.forEach(t),Ipo=r(M3e," (M2M100 model)"),M3e.forEach(t),qpo=i($),Pp=n($,"LI",{});var E3e=s(Pp);One=n(E3e,"STRONG",{});var bUr=s(One);Npo=r(bUr,"marian"),bUr.forEach(t),jpo=r(E3e," \u2014 "),$I=n(E3e,"A",{href:!0});var vUr=s($I);Dpo=r(vUr,"MarianModel"),vUr.forEach(t),Gpo=r(E3e," (Marian model)"),E3e.forEach(t),Opo=i($),Bp=n($,"LI",{});var C3e=s(Bp);Vne=n(C3e,"STRONG",{});var FUr=s(Vne);Vpo=r(FUr,"maskformer"),FUr.forEach(t),Xpo=r(C3e," \u2014 "),kI=n(C3e,"A",{href:!0});var TUr=s(kI);zpo=r(TUr,"MaskFormerModel"),TUr.forEach(t),Qpo=r(C3e," (MaskFormer model)"),C3e.forEach(t),Wpo=i($),Ip=n($,"LI",{});var w3e=s(Ip);Xne=n(w3e,"STRONG",{});var MUr=s(Xne);Hpo=r(MUr,"mbart"),MUr.forEach(t),Upo=r(w3e," \u2014 "),SI=n(w3e,"A",{href:!0});var EUr=s(SI);Jpo=r(EUr,"MBartModel"),EUr.forEach(t),Ypo=r(w3e," (mBART model)"),w3e.forEach(t),Kpo=i($),qp=n($,"LI",{});var A3e=s(qp);zne=n(A3e,"STRONG",{});var CUr=s(zne);Zpo=r(CUr,"megatron-bert"),CUr.forEach(t),euo=r(A3e," \u2014 "),RI=n(A3e,"A",{href:!0});var wUr=s(RI);ouo=r(wUr,"MegatronBertModel"),wUr.forEach(t),ruo=r(A3e," (MegatronBert model)"),A3e.forEach(t),tuo=i($),Np=n($,"LI",{});var y3e=s(Np);Qne=n(y3e,"STRONG",{});var AUr=s(Qne);auo=r(AUr,"mobilebert"),AUr.forEach(t),nuo=r(y3e," \u2014 "),PI=n(y3e,"A",{href:!0});var yUr=s(PI);suo=r(yUr,"MobileBertModel"),yUr.forEach(t),luo=r(y3e," (MobileBERT model)"),y3e.forEach(t),iuo=i($),jp=n($,"LI",{});var L3e=s(jp);Wne=n(L3e,"STRONG",{});var LUr=s(Wne);duo=r(LUr,"mpnet"),LUr.forEach(t),cuo=r(L3e," \u2014 "),BI=n(L3e,"A",{href:!0});var xUr=s(BI);fuo=r(xUr,"MPNetModel"),xUr.forEach(t),muo=r(L3e," (MPNet model)"),L3e.forEach(t),guo=i($),Dp=n($,"LI",{});var x3e=s(Dp);Hne=n(x3e,"STRONG",{});var $Ur=s(Hne);huo=r($Ur,"mt5"),$Ur.forEach(t),puo=r(x3e," \u2014 "),II=n(x3e,"A",{href:!0});var kUr=s(II);uuo=r(kUr,"MT5Model"),kUr.forEach(t),_uo=r(x3e," (mT5 model)"),x3e.forEach(t),buo=i($),Gp=n($,"LI",{});var $3e=s(Gp);Une=n($3e,"STRONG",{});var SUr=s(Une);vuo=r(SUr,"nystromformer"),SUr.forEach(t),Fuo=r($3e," \u2014 "),qI=n($3e,"A",{href:!0});var RUr=s(qI);Tuo=r(RUr,"NystromformerModel"),RUr.forEach(t),Muo=r($3e," (Nystromformer model)"),$3e.forEach(t),Euo=i($),Op=n($,"LI",{});var k3e=s(Op);Jne=n(k3e,"STRONG",{});var PUr=s(Jne);Cuo=r(PUr,"openai-gpt"),PUr.forEach(t),wuo=r(k3e," \u2014 "),NI=n(k3e,"A",{href:!0});var BUr=s(NI);Auo=r(BUr,"OpenAIGPTModel"),BUr.forEach(t),yuo=r(k3e," (OpenAI GPT model)"),k3e.forEach(t),Luo=i($),Vp=n($,"LI",{});var S3e=s(Vp);Yne=n(S3e,"STRONG",{});var IUr=s(Yne);xuo=r(IUr,"opt"),IUr.forEach(t),$uo=r(S3e," \u2014 "),jI=n(S3e,"A",{href:!0});var qUr=s(jI);kuo=r(qUr,"OPTModel"),qUr.forEach(t),Suo=r(S3e," (OPT model)"),S3e.forEach(t),Ruo=i($),Xp=n($,"LI",{});var R3e=s(Xp);Kne=n(R3e,"STRONG",{});var NUr=s(Kne);Puo=r(NUr,"pegasus"),NUr.forEach(t),Buo=r(R3e," \u2014 "),DI=n(R3e,"A",{href:!0});var jUr=s(DI);Iuo=r(jUr,"PegasusModel"),jUr.forEach(t),quo=r(R3e," (Pegasus model)"),R3e.forEach(t),Nuo=i($),zp=n($,"LI",{});var P3e=s(zp);Zne=n(P3e,"STRONG",{});var DUr=s(Zne);juo=r(DUr,"perceiver"),DUr.forEach(t),Duo=r(P3e," \u2014 "),GI=n(P3e,"A",{href:!0});var GUr=s(GI);Guo=r(GUr,"PerceiverModel"),GUr.forEach(t),Ouo=r(P3e," (Perceiver model)"),P3e.forEach(t),Vuo=i($),Qp=n($,"LI",{});var B3e=s(Qp);ese=n(B3e,"STRONG",{});var OUr=s(ese);Xuo=r(OUr,"plbart"),OUr.forEach(t),zuo=r(B3e," \u2014 "),OI=n(B3e,"A",{href:!0});var VUr=s(OI);Quo=r(VUr,"PLBartModel"),VUr.forEach(t),Wuo=r(B3e," (PLBart model)"),B3e.forEach(t),Huo=i($),Wp=n($,"LI",{});var I3e=s(Wp);ose=n(I3e,"STRONG",{});var XUr=s(ose);Uuo=r(XUr,"poolformer"),XUr.forEach(t),Juo=r(I3e," \u2014 "),VI=n(I3e,"A",{href:!0});var zUr=s(VI);Yuo=r(zUr,"PoolFormerModel"),zUr.forEach(t),Kuo=r(I3e," (PoolFormer model)"),I3e.forEach(t),Zuo=i($),Hp=n($,"LI",{});var q3e=s(Hp);rse=n(q3e,"STRONG",{});var QUr=s(rse);e_o=r(QUr,"prophetnet"),QUr.forEach(t),o_o=r(q3e," \u2014 "),XI=n(q3e,"A",{href:!0});var WUr=s(XI);r_o=r(WUr,"ProphetNetModel"),WUr.forEach(t),t_o=r(q3e," (ProphetNet model)"),q3e.forEach(t),a_o=i($),Up=n($,"LI",{});var N3e=s(Up);tse=n(N3e,"STRONG",{});var HUr=s(tse);n_o=r(HUr,"qdqbert"),HUr.forEach(t),s_o=r(N3e," \u2014 "),zI=n(N3e,"A",{href:!0});var UUr=s(zI);l_o=r(UUr,"QDQBertModel"),UUr.forEach(t),i_o=r(N3e," (QDQBert model)"),N3e.forEach(t),d_o=i($),Jp=n($,"LI",{});var j3e=s(Jp);ase=n(j3e,"STRONG",{});var JUr=s(ase);c_o=r(JUr,"reformer"),JUr.forEach(t),f_o=r(j3e," \u2014 "),QI=n(j3e,"A",{href:!0});var YUr=s(QI);m_o=r(YUr,"ReformerModel"),YUr.forEach(t),g_o=r(j3e," (Reformer model)"),j3e.forEach(t),h_o=i($),Yp=n($,"LI",{});var D3e=s(Yp);nse=n(D3e,"STRONG",{});var KUr=s(nse);p_o=r(KUr,"regnet"),KUr.forEach(t),u_o=r(D3e," \u2014 "),WI=n(D3e,"A",{href:!0});var ZUr=s(WI);__o=r(ZUr,"RegNetModel"),ZUr.forEach(t),b_o=r(D3e," (RegNet model)"),D3e.forEach(t),v_o=i($),Kp=n($,"LI",{});var G3e=s(Kp);sse=n(G3e,"STRONG",{});var eJr=s(sse);F_o=r(eJr,"rembert"),eJr.forEach(t),T_o=r(G3e," \u2014 "),HI=n(G3e,"A",{href:!0});var oJr=s(HI);M_o=r(oJr,"RemBertModel"),oJr.forEach(t),E_o=r(G3e," (RemBERT model)"),G3e.forEach(t),C_o=i($),Zp=n($,"LI",{});var O3e=s(Zp);lse=n(O3e,"STRONG",{});var rJr=s(lse);w_o=r(rJr,"resnet"),rJr.forEach(t),A_o=r(O3e," \u2014 "),UI=n(O3e,"A",{href:!0});var tJr=s(UI);y_o=r(tJr,"ResNetModel"),tJr.forEach(t),L_o=r(O3e," (ResNet model)"),O3e.forEach(t),x_o=i($),eu=n($,"LI",{});var V3e=s(eu);ise=n(V3e,"STRONG",{});var aJr=s(ise);$_o=r(aJr,"retribert"),aJr.forEach(t),k_o=r(V3e," \u2014 "),JI=n(V3e,"A",{href:!0});var nJr=s(JI);S_o=r(nJr,"RetriBertModel"),nJr.forEach(t),R_o=r(V3e," (RetriBERT model)"),V3e.forEach(t),P_o=i($),ou=n($,"LI",{});var X3e=s(ou);dse=n(X3e,"STRONG",{});var sJr=s(dse);B_o=r(sJr,"roberta"),sJr.forEach(t),I_o=r(X3e," \u2014 "),YI=n(X3e,"A",{href:!0});var lJr=s(YI);q_o=r(lJr,"RobertaModel"),lJr.forEach(t),N_o=r(X3e," (RoBERTa model)"),X3e.forEach(t),j_o=i($),ru=n($,"LI",{});var z3e=s(ru);cse=n(z3e,"STRONG",{});var iJr=s(cse);D_o=r(iJr,"roformer"),iJr.forEach(t),G_o=r(z3e," \u2014 "),KI=n(z3e,"A",{href:!0});var dJr=s(KI);O_o=r(dJr,"RoFormerModel"),dJr.forEach(t),V_o=r(z3e," (RoFormer model)"),z3e.forEach(t),X_o=i($),tu=n($,"LI",{});var Q3e=s(tu);fse=n(Q3e,"STRONG",{});var cJr=s(fse);z_o=r(cJr,"segformer"),cJr.forEach(t),Q_o=r(Q3e," \u2014 "),ZI=n(Q3e,"A",{href:!0});var fJr=s(ZI);W_o=r(fJr,"SegformerModel"),fJr.forEach(t),H_o=r(Q3e," (SegFormer model)"),Q3e.forEach(t),U_o=i($),au=n($,"LI",{});var W3e=s(au);mse=n(W3e,"STRONG",{});var mJr=s(mse);J_o=r(mJr,"sew"),mJr.forEach(t),Y_o=r(W3e," \u2014 "),eq=n(W3e,"A",{href:!0});var gJr=s(eq);K_o=r(gJr,"SEWModel"),gJr.forEach(t),Z_o=r(W3e," (SEW model)"),W3e.forEach(t),e1o=i($),nu=n($,"LI",{});var H3e=s(nu);gse=n(H3e,"STRONG",{});var hJr=s(gse);o1o=r(hJr,"sew-d"),hJr.forEach(t),r1o=r(H3e," \u2014 "),oq=n(H3e,"A",{href:!0});var pJr=s(oq);t1o=r(pJr,"SEWDModel"),pJr.forEach(t),a1o=r(H3e," (SEW-D model)"),H3e.forEach(t),n1o=i($),su=n($,"LI",{});var U3e=s(su);hse=n(U3e,"STRONG",{});var uJr=s(hse);s1o=r(uJr,"speech_to_text"),uJr.forEach(t),l1o=r(U3e," \u2014 "),rq=n(U3e,"A",{href:!0});var _Jr=s(rq);i1o=r(_Jr,"Speech2TextModel"),_Jr.forEach(t),d1o=r(U3e," (Speech2Text model)"),U3e.forEach(t),c1o=i($),lu=n($,"LI",{});var J3e=s(lu);pse=n(J3e,"STRONG",{});var bJr=s(pse);f1o=r(bJr,"splinter"),bJr.forEach(t),m1o=r(J3e," \u2014 "),tq=n(J3e,"A",{href:!0});var vJr=s(tq);g1o=r(vJr,"SplinterModel"),vJr.forEach(t),h1o=r(J3e," (Splinter model)"),J3e.forEach(t),p1o=i($),iu=n($,"LI",{});var Y3e=s(iu);use=n(Y3e,"STRONG",{});var FJr=s(use);u1o=r(FJr,"squeezebert"),FJr.forEach(t),_1o=r(Y3e," \u2014 "),aq=n(Y3e,"A",{href:!0});var TJr=s(aq);b1o=r(TJr,"SqueezeBertModel"),TJr.forEach(t),v1o=r(Y3e," (SqueezeBERT model)"),Y3e.forEach(t),F1o=i($),du=n($,"LI",{});var K3e=s(du);_se=n(K3e,"STRONG",{});var MJr=s(_se);T1o=r(MJr,"swin"),MJr.forEach(t),M1o=r(K3e," \u2014 "),nq=n(K3e,"A",{href:!0});var EJr=s(nq);E1o=r(EJr,"SwinModel"),EJr.forEach(t),C1o=r(K3e," (Swin model)"),K3e.forEach(t),w1o=i($),cu=n($,"LI",{});var Z3e=s(cu);bse=n(Z3e,"STRONG",{});var CJr=s(bse);A1o=r(CJr,"t5"),CJr.forEach(t),y1o=r(Z3e," \u2014 "),sq=n(Z3e,"A",{href:!0});var wJr=s(sq);L1o=r(wJr,"T5Model"),wJr.forEach(t),x1o=r(Z3e," (T5 model)"),Z3e.forEach(t),$1o=i($),fu=n($,"LI",{});var ewe=s(fu);vse=n(ewe,"STRONG",{});var AJr=s(vse);k1o=r(AJr,"tapas"),AJr.forEach(t),S1o=r(ewe," \u2014 "),lq=n(ewe,"A",{href:!0});var yJr=s(lq);R1o=r(yJr,"TapasModel"),yJr.forEach(t),P1o=r(ewe," (TAPAS model)"),ewe.forEach(t),B1o=i($),mu=n($,"LI",{});var owe=s(mu);Fse=n(owe,"STRONG",{});var LJr=s(Fse);I1o=r(LJr,"transfo-xl"),LJr.forEach(t),q1o=r(owe," \u2014 "),iq=n(owe,"A",{href:!0});var xJr=s(iq);N1o=r(xJr,"TransfoXLModel"),xJr.forEach(t),j1o=r(owe," (Transformer-XL model)"),owe.forEach(t),D1o=i($),gu=n($,"LI",{});var rwe=s(gu);Tse=n(rwe,"STRONG",{});var $Jr=s(Tse);G1o=r($Jr,"unispeech"),$Jr.forEach(t),O1o=r(rwe," \u2014 "),dq=n(rwe,"A",{href:!0});var kJr=s(dq);V1o=r(kJr,"UniSpeechModel"),kJr.forEach(t),X1o=r(rwe," (UniSpeech model)"),rwe.forEach(t),z1o=i($),hu=n($,"LI",{});var twe=s(hu);Mse=n(twe,"STRONG",{});var SJr=s(Mse);Q1o=r(SJr,"unispeech-sat"),SJr.forEach(t),W1o=r(twe," \u2014 "),cq=n(twe,"A",{href:!0});var RJr=s(cq);H1o=r(RJr,"UniSpeechSatModel"),RJr.forEach(t),U1o=r(twe," (UniSpeechSat model)"),twe.forEach(t),J1o=i($),pu=n($,"LI",{});var awe=s(pu);Ese=n(awe,"STRONG",{});var PJr=s(Ese);Y1o=r(PJr,"van"),PJr.forEach(t),K1o=r(awe," \u2014 "),fq=n(awe,"A",{href:!0});var BJr=s(fq);Z1o=r(BJr,"VanModel"),BJr.forEach(t),e8o=r(awe," (VAN model)"),awe.forEach(t),o8o=i($),uu=n($,"LI",{});var nwe=s(uu);Cse=n(nwe,"STRONG",{});var IJr=s(Cse);r8o=r(IJr,"vilt"),IJr.forEach(t),t8o=r(nwe," \u2014 "),mq=n(nwe,"A",{href:!0});var qJr=s(mq);a8o=r(qJr,"ViltModel"),qJr.forEach(t),n8o=r(nwe," (ViLT model)"),nwe.forEach(t),s8o=i($),_u=n($,"LI",{});var swe=s(_u);wse=n(swe,"STRONG",{});var NJr=s(wse);l8o=r(NJr,"vision-text-dual-encoder"),NJr.forEach(t),i8o=r(swe," \u2014 "),gq=n(swe,"A",{href:!0});var jJr=s(gq);d8o=r(jJr,"VisionTextDualEncoderModel"),jJr.forEach(t),c8o=r(swe," (VisionTextDualEncoder model)"),swe.forEach(t),f8o=i($),bu=n($,"LI",{});var lwe=s(bu);Ase=n(lwe,"STRONG",{});var DJr=s(Ase);m8o=r(DJr,"visual_bert"),DJr.forEach(t),g8o=r(lwe," \u2014 "),hq=n(lwe,"A",{href:!0});var GJr=s(hq);h8o=r(GJr,"VisualBertModel"),GJr.forEach(t),p8o=r(lwe," (VisualBert model)"),lwe.forEach(t),u8o=i($),vu=n($,"LI",{});var iwe=s(vu);yse=n(iwe,"STRONG",{});var OJr=s(yse);_8o=r(OJr,"vit"),OJr.forEach(t),b8o=r(iwe," \u2014 "),pq=n(iwe,"A",{href:!0});var VJr=s(pq);v8o=r(VJr,"ViTModel"),VJr.forEach(t),F8o=r(iwe," (ViT model)"),iwe.forEach(t),T8o=i($),Fu=n($,"LI",{});var dwe=s(Fu);Lse=n(dwe,"STRONG",{});var XJr=s(Lse);M8o=r(XJr,"vit_mae"),XJr.forEach(t),E8o=r(dwe," \u2014 "),uq=n(dwe,"A",{href:!0});var zJr=s(uq);C8o=r(zJr,"ViTMAEModel"),zJr.forEach(t),w8o=r(dwe," (ViTMAE model)"),dwe.forEach(t),A8o=i($),Tu=n($,"LI",{});var cwe=s(Tu);xse=n(cwe,"STRONG",{});var QJr=s(xse);y8o=r(QJr,"wav2vec2"),QJr.forEach(t),L8o=r(cwe," \u2014 "),_q=n(cwe,"A",{href:!0});var WJr=s(_q);x8o=r(WJr,"Wav2Vec2Model"),WJr.forEach(t),$8o=r(cwe," (Wav2Vec2 model)"),cwe.forEach(t),k8o=i($),Mu=n($,"LI",{});var fwe=s(Mu);$se=n(fwe,"STRONG",{});var HJr=s($se);S8o=r(HJr,"wavlm"),HJr.forEach(t),R8o=r(fwe," \u2014 "),bq=n(fwe,"A",{href:!0});var UJr=s(bq);P8o=r(UJr,"WavLMModel"),UJr.forEach(t),B8o=r(fwe," (WavLM model)"),fwe.forEach(t),I8o=i($),Eu=n($,"LI",{});var mwe=s(Eu);kse=n(mwe,"STRONG",{});var JJr=s(kse);q8o=r(JJr,"xglm"),JJr.forEach(t),N8o=r(mwe," \u2014 "),vq=n(mwe,"A",{href:!0});var YJr=s(vq);j8o=r(YJr,"XGLMModel"),YJr.forEach(t),D8o=r(mwe," (XGLM model)"),mwe.forEach(t),G8o=i($),Cu=n($,"LI",{});var gwe=s(Cu);Sse=n(gwe,"STRONG",{});var KJr=s(Sse);O8o=r(KJr,"xlm"),KJr.forEach(t),V8o=r(gwe," \u2014 "),Fq=n(gwe,"A",{href:!0});var ZJr=s(Fq);X8o=r(ZJr,"XLMModel"),ZJr.forEach(t),z8o=r(gwe," (XLM model)"),gwe.forEach(t),Q8o=i($),wu=n($,"LI",{});var hwe=s(wu);Rse=n(hwe,"STRONG",{});var eYr=s(Rse);W8o=r(eYr,"xlm-prophetnet"),eYr.forEach(t),H8o=r(hwe," \u2014 "),Tq=n(hwe,"A",{href:!0});var oYr=s(Tq);U8o=r(oYr,"XLMProphetNetModel"),oYr.forEach(t),J8o=r(hwe," (XLMProphetNet model)"),hwe.forEach(t),Y8o=i($),Au=n($,"LI",{});var pwe=s(Au);Pse=n(pwe,"STRONG",{});var rYr=s(Pse);K8o=r(rYr,"xlm-roberta"),rYr.forEach(t),Z8o=r(pwe," \u2014 "),Mq=n(pwe,"A",{href:!0});var tYr=s(Mq);ebo=r(tYr,"XLMRobertaModel"),tYr.forEach(t),obo=r(pwe," (XLM-RoBERTa model)"),pwe.forEach(t),rbo=i($),yu=n($,"LI",{});var uwe=s(yu);Bse=n(uwe,"STRONG",{});var aYr=s(Bse);tbo=r(aYr,"xlm-roberta-xl"),aYr.forEach(t),abo=r(uwe," \u2014 "),Eq=n(uwe,"A",{href:!0});var nYr=s(Eq);nbo=r(nYr,"XLMRobertaXLModel"),nYr.forEach(t),sbo=r(uwe," (XLM-RoBERTa-XL model)"),uwe.forEach(t),lbo=i($),Lu=n($,"LI",{});var _we=s(Lu);Ise=n(_we,"STRONG",{});var sYr=s(Ise);ibo=r(sYr,"xlnet"),sYr.forEach(t),dbo=r(_we," \u2014 "),Cq=n(_we,"A",{href:!0});var lYr=s(Cq);cbo=r(lYr,"XLNetModel"),lYr.forEach(t),fbo=r(_we," (XLNet model)"),_we.forEach(t),mbo=i($),xu=n($,"LI",{});var bwe=s(xu);qse=n(bwe,"STRONG",{});var iYr=s(qse);gbo=r(iYr,"yolos"),iYr.forEach(t),hbo=r(bwe," \u2014 "),wq=n(bwe,"A",{href:!0});var dYr=s(wq);pbo=r(dYr,"YolosModel"),dYr.forEach(t),ubo=r(bwe," (YOLOS model)"),bwe.forEach(t),_bo=i($),$u=n($,"LI",{});var vwe=s($u);Nse=n(vwe,"STRONG",{});var cYr=s(Nse);bbo=r(cYr,"yoso"),cYr.forEach(t),vbo=r(vwe," \u2014 "),Aq=n(vwe,"A",{href:!0});var fYr=s(Aq);Fbo=r(fYr,"YosoModel"),fYr.forEach(t),Tbo=r(vwe," (YOSO model)"),vwe.forEach(t),$.forEach(t),Mbo=i(Zt),ku=n(Zt,"P",{});var Fwe=s(ku);Ebo=r(Fwe,"The model is set in evaluation mode by default using "),jse=n(Fwe,"CODE",{});var mYr=s(jse);Cbo=r(mYr,"model.eval()"),mYr.forEach(t),wbo=r(Fwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dse=n(Fwe,"CODE",{});var gYr=s(Dse);Abo=r(gYr,"model.train()"),gYr.forEach(t),Fwe.forEach(t),ybo=i(Zt),T(Su.$$.fragment,Zt),Zt.forEach(t),Ds.forEach(t),WBe=i(f),wi=n(f,"H2",{class:!0});var Yqe=s(wi);Ru=n(Yqe,"A",{id:!0,class:!0,href:!0});var hYr=s(Ru);Gse=n(hYr,"SPAN",{});var pYr=s(Gse);T(wA.$$.fragment,pYr),pYr.forEach(t),hYr.forEach(t),Lbo=i(Yqe),Ose=n(Yqe,"SPAN",{});var uYr=s(Ose);xbo=r(uYr,"AutoModelForPreTraining"),uYr.forEach(t),Yqe.forEach(t),HBe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(AA.$$.fragment,Gs),$bo=i(Gs),Ai=n(Gs,"P",{});var lK=s(Ai);kbo=r(lK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yq=n(lK,"A",{href:!0});var _Yr=s(yq);Sbo=r(_Yr,"from_pretrained()"),_Yr.forEach(t),Rbo=r(lK," class method or the "),Lq=n(lK,"A",{href:!0});var bYr=s(Lq);Pbo=r(bYr,"from_config()"),bYr.forEach(t),Bbo=r(lK,` class
method.`),lK.forEach(t),Ibo=i(Gs),yA=n(Gs,"P",{});var Kqe=s(yA);qbo=r(Kqe,"This class cannot be instantiated directly using "),Vse=n(Kqe,"CODE",{});var vYr=s(Vse);Nbo=r(vYr,"__init__()"),vYr.forEach(t),jbo=r(Kqe," (throws an error)."),Kqe.forEach(t),Dbo=i(Gs),rt=n(Gs,"DIV",{class:!0});var ZC=s(rt);T(LA.$$.fragment,ZC),Gbo=i(ZC),Xse=n(ZC,"P",{});var FYr=s(Xse);Obo=r(FYr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),FYr.forEach(t),Vbo=i(ZC),yi=n(ZC,"P",{});var iK=s(yi);Xbo=r(iK,`Note:
Loading a model from its configuration file does `),zse=n(iK,"STRONG",{});var TYr=s(zse);zbo=r(TYr,"not"),TYr.forEach(t),Qbo=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xq=n(iK,"A",{href:!0});var MYr=s(xq);Wbo=r(MYr,"from_pretrained()"),MYr.forEach(t),Hbo=r(iK," to load the model weights."),iK.forEach(t),Ubo=i(ZC),T(Pu.$$.fragment,ZC),ZC.forEach(t),Jbo=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(xA.$$.fragment,ea),Ybo=i(ea),Qse=n(ea,"P",{});var EYr=s(Qse);Kbo=r(EYr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),EYr.forEach(t),Zbo=i(ea),ya=n(ea,"P",{});var e3=s(ya);e2o=r(e3,"The model class to instantiate is selected based on the "),Wse=n(e3,"CODE",{});var CYr=s(Wse);o2o=r(CYr,"model_type"),CYr.forEach(t),r2o=r(e3,` property of the config object (either
passed as an argument or loaded from `),Hse=n(e3,"CODE",{});var wYr=s(Hse);t2o=r(wYr,"pretrained_model_name_or_path"),wYr.forEach(t),a2o=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Use=n(e3,"CODE",{});var AYr=s(Use);n2o=r(AYr,"pretrained_model_name_or_path"),AYr.forEach(t),s2o=r(e3,":"),e3.forEach(t),l2o=i(ea),G=n(ea,"UL",{});var V=s(G);Bu=n(V,"LI",{});var Twe=s(Bu);Jse=n(Twe,"STRONG",{});var yYr=s(Jse);i2o=r(yYr,"albert"),yYr.forEach(t),d2o=r(Twe," \u2014 "),$q=n(Twe,"A",{href:!0});var LYr=s($q);c2o=r(LYr,"AlbertForPreTraining"),LYr.forEach(t),f2o=r(Twe," (ALBERT model)"),Twe.forEach(t),m2o=i(V),Iu=n(V,"LI",{});var Mwe=s(Iu);Yse=n(Mwe,"STRONG",{});var xYr=s(Yse);g2o=r(xYr,"bart"),xYr.forEach(t),h2o=r(Mwe," \u2014 "),kq=n(Mwe,"A",{href:!0});var $Yr=s(kq);p2o=r($Yr,"BartForConditionalGeneration"),$Yr.forEach(t),u2o=r(Mwe," (BART model)"),Mwe.forEach(t),_2o=i(V),qu=n(V,"LI",{});var Ewe=s(qu);Kse=n(Ewe,"STRONG",{});var kYr=s(Kse);b2o=r(kYr,"bert"),kYr.forEach(t),v2o=r(Ewe," \u2014 "),Sq=n(Ewe,"A",{href:!0});var SYr=s(Sq);F2o=r(SYr,"BertForPreTraining"),SYr.forEach(t),T2o=r(Ewe," (BERT model)"),Ewe.forEach(t),M2o=i(V),Nu=n(V,"LI",{});var Cwe=s(Nu);Zse=n(Cwe,"STRONG",{});var RYr=s(Zse);E2o=r(RYr,"big_bird"),RYr.forEach(t),C2o=r(Cwe," \u2014 "),Rq=n(Cwe,"A",{href:!0});var PYr=s(Rq);w2o=r(PYr,"BigBirdForPreTraining"),PYr.forEach(t),A2o=r(Cwe," (BigBird model)"),Cwe.forEach(t),y2o=i(V),ju=n(V,"LI",{});var wwe=s(ju);ele=n(wwe,"STRONG",{});var BYr=s(ele);L2o=r(BYr,"camembert"),BYr.forEach(t),x2o=r(wwe," \u2014 "),Pq=n(wwe,"A",{href:!0});var IYr=s(Pq);$2o=r(IYr,"CamembertForMaskedLM"),IYr.forEach(t),k2o=r(wwe," (CamemBERT model)"),wwe.forEach(t),S2o=i(V),Du=n(V,"LI",{});var Awe=s(Du);ole=n(Awe,"STRONG",{});var qYr=s(ole);R2o=r(qYr,"ctrl"),qYr.forEach(t),P2o=r(Awe," \u2014 "),Bq=n(Awe,"A",{href:!0});var NYr=s(Bq);B2o=r(NYr,"CTRLLMHeadModel"),NYr.forEach(t),I2o=r(Awe," (CTRL model)"),Awe.forEach(t),q2o=i(V),Gu=n(V,"LI",{});var ywe=s(Gu);rle=n(ywe,"STRONG",{});var jYr=s(rle);N2o=r(jYr,"data2vec-text"),jYr.forEach(t),j2o=r(ywe," \u2014 "),Iq=n(ywe,"A",{href:!0});var DYr=s(Iq);D2o=r(DYr,"Data2VecTextForMaskedLM"),DYr.forEach(t),G2o=r(ywe," (Data2VecText model)"),ywe.forEach(t),O2o=i(V),Ou=n(V,"LI",{});var Lwe=s(Ou);tle=n(Lwe,"STRONG",{});var GYr=s(tle);V2o=r(GYr,"deberta"),GYr.forEach(t),X2o=r(Lwe," \u2014 "),qq=n(Lwe,"A",{href:!0});var OYr=s(qq);z2o=r(OYr,"DebertaForMaskedLM"),OYr.forEach(t),Q2o=r(Lwe," (DeBERTa model)"),Lwe.forEach(t),W2o=i(V),Vu=n(V,"LI",{});var xwe=s(Vu);ale=n(xwe,"STRONG",{});var VYr=s(ale);H2o=r(VYr,"deberta-v2"),VYr.forEach(t),U2o=r(xwe," \u2014 "),Nq=n(xwe,"A",{href:!0});var XYr=s(Nq);J2o=r(XYr,"DebertaV2ForMaskedLM"),XYr.forEach(t),Y2o=r(xwe," (DeBERTa-v2 model)"),xwe.forEach(t),K2o=i(V),Xu=n(V,"LI",{});var $we=s(Xu);nle=n($we,"STRONG",{});var zYr=s(nle);Z2o=r(zYr,"distilbert"),zYr.forEach(t),evo=r($we," \u2014 "),jq=n($we,"A",{href:!0});var QYr=s(jq);ovo=r(QYr,"DistilBertForMaskedLM"),QYr.forEach(t),rvo=r($we," (DistilBERT model)"),$we.forEach(t),tvo=i(V),zu=n(V,"LI",{});var kwe=s(zu);sle=n(kwe,"STRONG",{});var WYr=s(sle);avo=r(WYr,"electra"),WYr.forEach(t),nvo=r(kwe," \u2014 "),Dq=n(kwe,"A",{href:!0});var HYr=s(Dq);svo=r(HYr,"ElectraForPreTraining"),HYr.forEach(t),lvo=r(kwe," (ELECTRA model)"),kwe.forEach(t),ivo=i(V),Qu=n(V,"LI",{});var Swe=s(Qu);lle=n(Swe,"STRONG",{});var UYr=s(lle);dvo=r(UYr,"flaubert"),UYr.forEach(t),cvo=r(Swe," \u2014 "),Gq=n(Swe,"A",{href:!0});var JYr=s(Gq);fvo=r(JYr,"FlaubertWithLMHeadModel"),JYr.forEach(t),mvo=r(Swe," (FlauBERT model)"),Swe.forEach(t),gvo=i(V),Wu=n(V,"LI",{});var Rwe=s(Wu);ile=n(Rwe,"STRONG",{});var YYr=s(ile);hvo=r(YYr,"fnet"),YYr.forEach(t),pvo=r(Rwe," \u2014 "),Oq=n(Rwe,"A",{href:!0});var KYr=s(Oq);uvo=r(KYr,"FNetForPreTraining"),KYr.forEach(t),_vo=r(Rwe," (FNet model)"),Rwe.forEach(t),bvo=i(V),Hu=n(V,"LI",{});var Pwe=s(Hu);dle=n(Pwe,"STRONG",{});var ZYr=s(dle);vvo=r(ZYr,"fsmt"),ZYr.forEach(t),Fvo=r(Pwe," \u2014 "),Vq=n(Pwe,"A",{href:!0});var eKr=s(Vq);Tvo=r(eKr,"FSMTForConditionalGeneration"),eKr.forEach(t),Mvo=r(Pwe," (FairSeq Machine-Translation model)"),Pwe.forEach(t),Evo=i(V),Uu=n(V,"LI",{});var Bwe=s(Uu);cle=n(Bwe,"STRONG",{});var oKr=s(cle);Cvo=r(oKr,"funnel"),oKr.forEach(t),wvo=r(Bwe," \u2014 "),Xq=n(Bwe,"A",{href:!0});var rKr=s(Xq);Avo=r(rKr,"FunnelForPreTraining"),rKr.forEach(t),yvo=r(Bwe," (Funnel Transformer model)"),Bwe.forEach(t),Lvo=i(V),Ju=n(V,"LI",{});var Iwe=s(Ju);fle=n(Iwe,"STRONG",{});var tKr=s(fle);xvo=r(tKr,"gpt2"),tKr.forEach(t),$vo=r(Iwe," \u2014 "),zq=n(Iwe,"A",{href:!0});var aKr=s(zq);kvo=r(aKr,"GPT2LMHeadModel"),aKr.forEach(t),Svo=r(Iwe," (OpenAI GPT-2 model)"),Iwe.forEach(t),Rvo=i(V),Yu=n(V,"LI",{});var qwe=s(Yu);mle=n(qwe,"STRONG",{});var nKr=s(mle);Pvo=r(nKr,"ibert"),nKr.forEach(t),Bvo=r(qwe," \u2014 "),Qq=n(qwe,"A",{href:!0});var sKr=s(Qq);Ivo=r(sKr,"IBertForMaskedLM"),sKr.forEach(t),qvo=r(qwe," (I-BERT model)"),qwe.forEach(t),Nvo=i(V),Ku=n(V,"LI",{});var Nwe=s(Ku);gle=n(Nwe,"STRONG",{});var lKr=s(gle);jvo=r(lKr,"layoutlm"),lKr.forEach(t),Dvo=r(Nwe," \u2014 "),Wq=n(Nwe,"A",{href:!0});var iKr=s(Wq);Gvo=r(iKr,"LayoutLMForMaskedLM"),iKr.forEach(t),Ovo=r(Nwe," (LayoutLM model)"),Nwe.forEach(t),Vvo=i(V),Zu=n(V,"LI",{});var jwe=s(Zu);hle=n(jwe,"STRONG",{});var dKr=s(hle);Xvo=r(dKr,"longformer"),dKr.forEach(t),zvo=r(jwe," \u2014 "),Hq=n(jwe,"A",{href:!0});var cKr=s(Hq);Qvo=r(cKr,"LongformerForMaskedLM"),cKr.forEach(t),Wvo=r(jwe," (Longformer model)"),jwe.forEach(t),Hvo=i(V),e_=n(V,"LI",{});var Dwe=s(e_);ple=n(Dwe,"STRONG",{});var fKr=s(ple);Uvo=r(fKr,"lxmert"),fKr.forEach(t),Jvo=r(Dwe," \u2014 "),Uq=n(Dwe,"A",{href:!0});var mKr=s(Uq);Yvo=r(mKr,"LxmertForPreTraining"),mKr.forEach(t),Kvo=r(Dwe," (LXMERT model)"),Dwe.forEach(t),Zvo=i(V),o_=n(V,"LI",{});var Gwe=s(o_);ule=n(Gwe,"STRONG",{});var gKr=s(ule);eFo=r(gKr,"megatron-bert"),gKr.forEach(t),oFo=r(Gwe," \u2014 "),Jq=n(Gwe,"A",{href:!0});var hKr=s(Jq);rFo=r(hKr,"MegatronBertForPreTraining"),hKr.forEach(t),tFo=r(Gwe," (MegatronBert model)"),Gwe.forEach(t),aFo=i(V),r_=n(V,"LI",{});var Owe=s(r_);_le=n(Owe,"STRONG",{});var pKr=s(_le);nFo=r(pKr,"mobilebert"),pKr.forEach(t),sFo=r(Owe," \u2014 "),Yq=n(Owe,"A",{href:!0});var uKr=s(Yq);lFo=r(uKr,"MobileBertForPreTraining"),uKr.forEach(t),iFo=r(Owe," (MobileBERT model)"),Owe.forEach(t),dFo=i(V),t_=n(V,"LI",{});var Vwe=s(t_);ble=n(Vwe,"STRONG",{});var _Kr=s(ble);cFo=r(_Kr,"mpnet"),_Kr.forEach(t),fFo=r(Vwe," \u2014 "),Kq=n(Vwe,"A",{href:!0});var bKr=s(Kq);mFo=r(bKr,"MPNetForMaskedLM"),bKr.forEach(t),gFo=r(Vwe," (MPNet model)"),Vwe.forEach(t),hFo=i(V),a_=n(V,"LI",{});var Xwe=s(a_);vle=n(Xwe,"STRONG",{});var vKr=s(vle);pFo=r(vKr,"openai-gpt"),vKr.forEach(t),uFo=r(Xwe," \u2014 "),Zq=n(Xwe,"A",{href:!0});var FKr=s(Zq);_Fo=r(FKr,"OpenAIGPTLMHeadModel"),FKr.forEach(t),bFo=r(Xwe," (OpenAI GPT model)"),Xwe.forEach(t),vFo=i(V),n_=n(V,"LI",{});var zwe=s(n_);Fle=n(zwe,"STRONG",{});var TKr=s(Fle);FFo=r(TKr,"retribert"),TKr.forEach(t),TFo=r(zwe," \u2014 "),eN=n(zwe,"A",{href:!0});var MKr=s(eN);MFo=r(MKr,"RetriBertModel"),MKr.forEach(t),EFo=r(zwe," (RetriBERT model)"),zwe.forEach(t),CFo=i(V),s_=n(V,"LI",{});var Qwe=s(s_);Tle=n(Qwe,"STRONG",{});var EKr=s(Tle);wFo=r(EKr,"roberta"),EKr.forEach(t),AFo=r(Qwe," \u2014 "),oN=n(Qwe,"A",{href:!0});var CKr=s(oN);yFo=r(CKr,"RobertaForMaskedLM"),CKr.forEach(t),LFo=r(Qwe," (RoBERTa model)"),Qwe.forEach(t),xFo=i(V),l_=n(V,"LI",{});var Wwe=s(l_);Mle=n(Wwe,"STRONG",{});var wKr=s(Mle);$Fo=r(wKr,"squeezebert"),wKr.forEach(t),kFo=r(Wwe," \u2014 "),rN=n(Wwe,"A",{href:!0});var AKr=s(rN);SFo=r(AKr,"SqueezeBertForMaskedLM"),AKr.forEach(t),RFo=r(Wwe," (SqueezeBERT model)"),Wwe.forEach(t),PFo=i(V),i_=n(V,"LI",{});var Hwe=s(i_);Ele=n(Hwe,"STRONG",{});var yKr=s(Ele);BFo=r(yKr,"t5"),yKr.forEach(t),IFo=r(Hwe," \u2014 "),tN=n(Hwe,"A",{href:!0});var LKr=s(tN);qFo=r(LKr,"T5ForConditionalGeneration"),LKr.forEach(t),NFo=r(Hwe," (T5 model)"),Hwe.forEach(t),jFo=i(V),d_=n(V,"LI",{});var Uwe=s(d_);Cle=n(Uwe,"STRONG",{});var xKr=s(Cle);DFo=r(xKr,"tapas"),xKr.forEach(t),GFo=r(Uwe," \u2014 "),aN=n(Uwe,"A",{href:!0});var $Kr=s(aN);OFo=r($Kr,"TapasForMaskedLM"),$Kr.forEach(t),VFo=r(Uwe," (TAPAS model)"),Uwe.forEach(t),XFo=i(V),c_=n(V,"LI",{});var Jwe=s(c_);wle=n(Jwe,"STRONG",{});var kKr=s(wle);zFo=r(kKr,"transfo-xl"),kKr.forEach(t),QFo=r(Jwe," \u2014 "),nN=n(Jwe,"A",{href:!0});var SKr=s(nN);WFo=r(SKr,"TransfoXLLMHeadModel"),SKr.forEach(t),HFo=r(Jwe," (Transformer-XL model)"),Jwe.forEach(t),UFo=i(V),f_=n(V,"LI",{});var Ywe=s(f_);Ale=n(Ywe,"STRONG",{});var RKr=s(Ale);JFo=r(RKr,"unispeech"),RKr.forEach(t),YFo=r(Ywe," \u2014 "),sN=n(Ywe,"A",{href:!0});var PKr=s(sN);KFo=r(PKr,"UniSpeechForPreTraining"),PKr.forEach(t),ZFo=r(Ywe," (UniSpeech model)"),Ywe.forEach(t),e0o=i(V),m_=n(V,"LI",{});var Kwe=s(m_);yle=n(Kwe,"STRONG",{});var BKr=s(yle);o0o=r(BKr,"unispeech-sat"),BKr.forEach(t),r0o=r(Kwe," \u2014 "),lN=n(Kwe,"A",{href:!0});var IKr=s(lN);t0o=r(IKr,"UniSpeechSatForPreTraining"),IKr.forEach(t),a0o=r(Kwe," (UniSpeechSat model)"),Kwe.forEach(t),n0o=i(V),g_=n(V,"LI",{});var Zwe=s(g_);Lle=n(Zwe,"STRONG",{});var qKr=s(Lle);s0o=r(qKr,"visual_bert"),qKr.forEach(t),l0o=r(Zwe," \u2014 "),iN=n(Zwe,"A",{href:!0});var NKr=s(iN);i0o=r(NKr,"VisualBertForPreTraining"),NKr.forEach(t),d0o=r(Zwe," (VisualBert model)"),Zwe.forEach(t),c0o=i(V),h_=n(V,"LI",{});var eAe=s(h_);xle=n(eAe,"STRONG",{});var jKr=s(xle);f0o=r(jKr,"vit_mae"),jKr.forEach(t),m0o=r(eAe," \u2014 "),dN=n(eAe,"A",{href:!0});var DKr=s(dN);g0o=r(DKr,"ViTMAEForPreTraining"),DKr.forEach(t),h0o=r(eAe," (ViTMAE model)"),eAe.forEach(t),p0o=i(V),p_=n(V,"LI",{});var oAe=s(p_);$le=n(oAe,"STRONG",{});var GKr=s($le);u0o=r(GKr,"wav2vec2"),GKr.forEach(t),_0o=r(oAe," \u2014 "),cN=n(oAe,"A",{href:!0});var OKr=s(cN);b0o=r(OKr,"Wav2Vec2ForPreTraining"),OKr.forEach(t),v0o=r(oAe," (Wav2Vec2 model)"),oAe.forEach(t),F0o=i(V),u_=n(V,"LI",{});var rAe=s(u_);kle=n(rAe,"STRONG",{});var VKr=s(kle);T0o=r(VKr,"xlm"),VKr.forEach(t),M0o=r(rAe," \u2014 "),fN=n(rAe,"A",{href:!0});var XKr=s(fN);E0o=r(XKr,"XLMWithLMHeadModel"),XKr.forEach(t),C0o=r(rAe," (XLM model)"),rAe.forEach(t),w0o=i(V),__=n(V,"LI",{});var tAe=s(__);Sle=n(tAe,"STRONG",{});var zKr=s(Sle);A0o=r(zKr,"xlm-roberta"),zKr.forEach(t),y0o=r(tAe," \u2014 "),mN=n(tAe,"A",{href:!0});var QKr=s(mN);L0o=r(QKr,"XLMRobertaForMaskedLM"),QKr.forEach(t),x0o=r(tAe," (XLM-RoBERTa model)"),tAe.forEach(t),$0o=i(V),b_=n(V,"LI",{});var aAe=s(b_);Rle=n(aAe,"STRONG",{});var WKr=s(Rle);k0o=r(WKr,"xlm-roberta-xl"),WKr.forEach(t),S0o=r(aAe," \u2014 "),gN=n(aAe,"A",{href:!0});var HKr=s(gN);R0o=r(HKr,"XLMRobertaXLForMaskedLM"),HKr.forEach(t),P0o=r(aAe," (XLM-RoBERTa-XL model)"),aAe.forEach(t),B0o=i(V),v_=n(V,"LI",{});var nAe=s(v_);Ple=n(nAe,"STRONG",{});var UKr=s(Ple);I0o=r(UKr,"xlnet"),UKr.forEach(t),q0o=r(nAe," \u2014 "),hN=n(nAe,"A",{href:!0});var JKr=s(hN);N0o=r(JKr,"XLNetLMHeadModel"),JKr.forEach(t),j0o=r(nAe," (XLNet model)"),nAe.forEach(t),V.forEach(t),D0o=i(ea),F_=n(ea,"P",{});var sAe=s(F_);G0o=r(sAe,"The model is set in evaluation mode by default using "),Ble=n(sAe,"CODE",{});var YKr=s(Ble);O0o=r(YKr,"model.eval()"),YKr.forEach(t),V0o=r(sAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ile=n(sAe,"CODE",{});var KKr=s(Ile);X0o=r(KKr,"model.train()"),KKr.forEach(t),sAe.forEach(t),z0o=i(ea),T(T_.$$.fragment,ea),ea.forEach(t),Gs.forEach(t),UBe=i(f),Li=n(f,"H2",{class:!0});var Zqe=s(Li);M_=n(Zqe,"A",{id:!0,class:!0,href:!0});var ZKr=s(M_);qle=n(ZKr,"SPAN",{});var eZr=s(qle);T($A.$$.fragment,eZr),eZr.forEach(t),ZKr.forEach(t),Q0o=i(Zqe),Nle=n(Zqe,"SPAN",{});var oZr=s(Nle);W0o=r(oZr,"AutoModelForCausalLM"),oZr.forEach(t),Zqe.forEach(t),JBe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(kA.$$.fragment,Os),H0o=i(Os),xi=n(Os,"P",{});var dK=s(xi);U0o=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),pN=n(dK,"A",{href:!0});var rZr=s(pN);J0o=r(rZr,"from_pretrained()"),rZr.forEach(t),Y0o=r(dK," class method or the "),uN=n(dK,"A",{href:!0});var tZr=s(uN);K0o=r(tZr,"from_config()"),tZr.forEach(t),Z0o=r(dK,` class
method.`),dK.forEach(t),eTo=i(Os),SA=n(Os,"P",{});var eNe=s(SA);oTo=r(eNe,"This class cannot be instantiated directly using "),jle=n(eNe,"CODE",{});var aZr=s(jle);rTo=r(aZr,"__init__()"),aZr.forEach(t),tTo=r(eNe," (throws an error)."),eNe.forEach(t),aTo=i(Os),tt=n(Os,"DIV",{class:!0});var o3=s(tt);T(RA.$$.fragment,o3),nTo=i(o3),Dle=n(o3,"P",{});var nZr=s(Dle);sTo=r(nZr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nZr.forEach(t),lTo=i(o3),$i=n(o3,"P",{});var cK=s($i);iTo=r(cK,`Note:
Loading a model from its configuration file does `),Gle=n(cK,"STRONG",{});var sZr=s(Gle);dTo=r(sZr,"not"),sZr.forEach(t),cTo=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_N=n(cK,"A",{href:!0});var lZr=s(_N);fTo=r(lZr,"from_pretrained()"),lZr.forEach(t),mTo=r(cK," to load the model weights."),cK.forEach(t),gTo=i(o3),T(E_.$$.fragment,o3),o3.forEach(t),hTo=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(PA.$$.fragment,oa),pTo=i(oa),Ole=n(oa,"P",{});var iZr=s(Ole);uTo=r(iZr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iZr.forEach(t),_To=i(oa),La=n(oa,"P",{});var r3=s(La);bTo=r(r3,"The model class to instantiate is selected based on the "),Vle=n(r3,"CODE",{});var dZr=s(Vle);vTo=r(dZr,"model_type"),dZr.forEach(t),FTo=r(r3,` property of the config object (either
passed as an argument or loaded from `),Xle=n(r3,"CODE",{});var cZr=s(Xle);TTo=r(cZr,"pretrained_model_name_or_path"),cZr.forEach(t),MTo=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zle=n(r3,"CODE",{});var fZr=s(zle);ETo=r(fZr,"pretrained_model_name_or_path"),fZr.forEach(t),CTo=r(r3,":"),r3.forEach(t),wTo=i(oa),z=n(oa,"UL",{});var W=s(z);C_=n(W,"LI",{});var lAe=s(C_);Qle=n(lAe,"STRONG",{});var mZr=s(Qle);ATo=r(mZr,"bart"),mZr.forEach(t),yTo=r(lAe," \u2014 "),bN=n(lAe,"A",{href:!0});var gZr=s(bN);LTo=r(gZr,"BartForCausalLM"),gZr.forEach(t),xTo=r(lAe," (BART model)"),lAe.forEach(t),$To=i(W),w_=n(W,"LI",{});var iAe=s(w_);Wle=n(iAe,"STRONG",{});var hZr=s(Wle);kTo=r(hZr,"bert"),hZr.forEach(t),STo=r(iAe," \u2014 "),vN=n(iAe,"A",{href:!0});var pZr=s(vN);RTo=r(pZr,"BertLMHeadModel"),pZr.forEach(t),PTo=r(iAe," (BERT model)"),iAe.forEach(t),BTo=i(W),A_=n(W,"LI",{});var dAe=s(A_);Hle=n(dAe,"STRONG",{});var uZr=s(Hle);ITo=r(uZr,"bert-generation"),uZr.forEach(t),qTo=r(dAe," \u2014 "),FN=n(dAe,"A",{href:!0});var _Zr=s(FN);NTo=r(_Zr,"BertGenerationDecoder"),_Zr.forEach(t),jTo=r(dAe," (Bert Generation model)"),dAe.forEach(t),DTo=i(W),y_=n(W,"LI",{});var cAe=s(y_);Ule=n(cAe,"STRONG",{});var bZr=s(Ule);GTo=r(bZr,"big_bird"),bZr.forEach(t),OTo=r(cAe," \u2014 "),TN=n(cAe,"A",{href:!0});var vZr=s(TN);VTo=r(vZr,"BigBirdForCausalLM"),vZr.forEach(t),XTo=r(cAe," (BigBird model)"),cAe.forEach(t),zTo=i(W),L_=n(W,"LI",{});var fAe=s(L_);Jle=n(fAe,"STRONG",{});var FZr=s(Jle);QTo=r(FZr,"bigbird_pegasus"),FZr.forEach(t),WTo=r(fAe," \u2014 "),MN=n(fAe,"A",{href:!0});var TZr=s(MN);HTo=r(TZr,"BigBirdPegasusForCausalLM"),TZr.forEach(t),UTo=r(fAe," (BigBirdPegasus model)"),fAe.forEach(t),JTo=i(W),x_=n(W,"LI",{});var mAe=s(x_);Yle=n(mAe,"STRONG",{});var MZr=s(Yle);YTo=r(MZr,"blenderbot"),MZr.forEach(t),KTo=r(mAe," \u2014 "),EN=n(mAe,"A",{href:!0});var EZr=s(EN);ZTo=r(EZr,"BlenderbotForCausalLM"),EZr.forEach(t),e7o=r(mAe," (Blenderbot model)"),mAe.forEach(t),o7o=i(W),$_=n(W,"LI",{});var gAe=s($_);Kle=n(gAe,"STRONG",{});var CZr=s(Kle);r7o=r(CZr,"blenderbot-small"),CZr.forEach(t),t7o=r(gAe," \u2014 "),CN=n(gAe,"A",{href:!0});var wZr=s(CN);a7o=r(wZr,"BlenderbotSmallForCausalLM"),wZr.forEach(t),n7o=r(gAe," (BlenderbotSmall model)"),gAe.forEach(t),s7o=i(W),k_=n(W,"LI",{});var hAe=s(k_);Zle=n(hAe,"STRONG",{});var AZr=s(Zle);l7o=r(AZr,"camembert"),AZr.forEach(t),i7o=r(hAe," \u2014 "),wN=n(hAe,"A",{href:!0});var yZr=s(wN);d7o=r(yZr,"CamembertForCausalLM"),yZr.forEach(t),c7o=r(hAe," (CamemBERT model)"),hAe.forEach(t),f7o=i(W),S_=n(W,"LI",{});var pAe=s(S_);eie=n(pAe,"STRONG",{});var LZr=s(eie);m7o=r(LZr,"ctrl"),LZr.forEach(t),g7o=r(pAe," \u2014 "),AN=n(pAe,"A",{href:!0});var xZr=s(AN);h7o=r(xZr,"CTRLLMHeadModel"),xZr.forEach(t),p7o=r(pAe," (CTRL model)"),pAe.forEach(t),u7o=i(W),R_=n(W,"LI",{});var uAe=s(R_);oie=n(uAe,"STRONG",{});var $Zr=s(oie);_7o=r($Zr,"data2vec-text"),$Zr.forEach(t),b7o=r(uAe," \u2014 "),yN=n(uAe,"A",{href:!0});var kZr=s(yN);v7o=r(kZr,"Data2VecTextForCausalLM"),kZr.forEach(t),F7o=r(uAe," (Data2VecText model)"),uAe.forEach(t),T7o=i(W),P_=n(W,"LI",{});var _Ae=s(P_);rie=n(_Ae,"STRONG",{});var SZr=s(rie);M7o=r(SZr,"electra"),SZr.forEach(t),E7o=r(_Ae," \u2014 "),LN=n(_Ae,"A",{href:!0});var RZr=s(LN);C7o=r(RZr,"ElectraForCausalLM"),RZr.forEach(t),w7o=r(_Ae," (ELECTRA model)"),_Ae.forEach(t),A7o=i(W),B_=n(W,"LI",{});var bAe=s(B_);tie=n(bAe,"STRONG",{});var PZr=s(tie);y7o=r(PZr,"gpt2"),PZr.forEach(t),L7o=r(bAe," \u2014 "),xN=n(bAe,"A",{href:!0});var BZr=s(xN);x7o=r(BZr,"GPT2LMHeadModel"),BZr.forEach(t),$7o=r(bAe," (OpenAI GPT-2 model)"),bAe.forEach(t),k7o=i(W),I_=n(W,"LI",{});var vAe=s(I_);aie=n(vAe,"STRONG",{});var IZr=s(aie);S7o=r(IZr,"gpt_neo"),IZr.forEach(t),R7o=r(vAe," \u2014 "),$N=n(vAe,"A",{href:!0});var qZr=s($N);P7o=r(qZr,"GPTNeoForCausalLM"),qZr.forEach(t),B7o=r(vAe," (GPT Neo model)"),vAe.forEach(t),I7o=i(W),q_=n(W,"LI",{});var FAe=s(q_);nie=n(FAe,"STRONG",{});var NZr=s(nie);q7o=r(NZr,"gptj"),NZr.forEach(t),N7o=r(FAe," \u2014 "),kN=n(FAe,"A",{href:!0});var jZr=s(kN);j7o=r(jZr,"GPTJForCausalLM"),jZr.forEach(t),D7o=r(FAe," (GPT-J model)"),FAe.forEach(t),G7o=i(W),N_=n(W,"LI",{});var TAe=s(N_);sie=n(TAe,"STRONG",{});var DZr=s(sie);O7o=r(DZr,"marian"),DZr.forEach(t),V7o=r(TAe," \u2014 "),SN=n(TAe,"A",{href:!0});var GZr=s(SN);X7o=r(GZr,"MarianForCausalLM"),GZr.forEach(t),z7o=r(TAe," (Marian model)"),TAe.forEach(t),Q7o=i(W),j_=n(W,"LI",{});var MAe=s(j_);lie=n(MAe,"STRONG",{});var OZr=s(lie);W7o=r(OZr,"mbart"),OZr.forEach(t),H7o=r(MAe," \u2014 "),RN=n(MAe,"A",{href:!0});var VZr=s(RN);U7o=r(VZr,"MBartForCausalLM"),VZr.forEach(t),J7o=r(MAe," (mBART model)"),MAe.forEach(t),Y7o=i(W),D_=n(W,"LI",{});var EAe=s(D_);iie=n(EAe,"STRONG",{});var XZr=s(iie);K7o=r(XZr,"megatron-bert"),XZr.forEach(t),Z7o=r(EAe," \u2014 "),PN=n(EAe,"A",{href:!0});var zZr=s(PN);eMo=r(zZr,"MegatronBertForCausalLM"),zZr.forEach(t),oMo=r(EAe," (MegatronBert model)"),EAe.forEach(t),rMo=i(W),G_=n(W,"LI",{});var CAe=s(G_);die=n(CAe,"STRONG",{});var QZr=s(die);tMo=r(QZr,"openai-gpt"),QZr.forEach(t),aMo=r(CAe," \u2014 "),BN=n(CAe,"A",{href:!0});var WZr=s(BN);nMo=r(WZr,"OpenAIGPTLMHeadModel"),WZr.forEach(t),sMo=r(CAe," (OpenAI GPT model)"),CAe.forEach(t),lMo=i(W),O_=n(W,"LI",{});var wAe=s(O_);cie=n(wAe,"STRONG",{});var HZr=s(cie);iMo=r(HZr,"opt"),HZr.forEach(t),dMo=r(wAe," \u2014 "),IN=n(wAe,"A",{href:!0});var UZr=s(IN);cMo=r(UZr,"OPTForCausalLM"),UZr.forEach(t),fMo=r(wAe," (OPT model)"),wAe.forEach(t),mMo=i(W),V_=n(W,"LI",{});var AAe=s(V_);fie=n(AAe,"STRONG",{});var JZr=s(fie);gMo=r(JZr,"pegasus"),JZr.forEach(t),hMo=r(AAe," \u2014 "),qN=n(AAe,"A",{href:!0});var YZr=s(qN);pMo=r(YZr,"PegasusForCausalLM"),YZr.forEach(t),uMo=r(AAe," (Pegasus model)"),AAe.forEach(t),_Mo=i(W),X_=n(W,"LI",{});var yAe=s(X_);mie=n(yAe,"STRONG",{});var KZr=s(mie);bMo=r(KZr,"plbart"),KZr.forEach(t),vMo=r(yAe," \u2014 "),NN=n(yAe,"A",{href:!0});var ZZr=s(NN);FMo=r(ZZr,"PLBartForCausalLM"),ZZr.forEach(t),TMo=r(yAe," (PLBart model)"),yAe.forEach(t),MMo=i(W),z_=n(W,"LI",{});var LAe=s(z_);gie=n(LAe,"STRONG",{});var eet=s(gie);EMo=r(eet,"prophetnet"),eet.forEach(t),CMo=r(LAe," \u2014 "),jN=n(LAe,"A",{href:!0});var oet=s(jN);wMo=r(oet,"ProphetNetForCausalLM"),oet.forEach(t),AMo=r(LAe," (ProphetNet model)"),LAe.forEach(t),yMo=i(W),Q_=n(W,"LI",{});var xAe=s(Q_);hie=n(xAe,"STRONG",{});var ret=s(hie);LMo=r(ret,"qdqbert"),ret.forEach(t),xMo=r(xAe," \u2014 "),DN=n(xAe,"A",{href:!0});var tet=s(DN);$Mo=r(tet,"QDQBertLMHeadModel"),tet.forEach(t),kMo=r(xAe," (QDQBert model)"),xAe.forEach(t),SMo=i(W),W_=n(W,"LI",{});var $Ae=s(W_);pie=n($Ae,"STRONG",{});var aet=s(pie);RMo=r(aet,"reformer"),aet.forEach(t),PMo=r($Ae," \u2014 "),GN=n($Ae,"A",{href:!0});var net=s(GN);BMo=r(net,"ReformerModelWithLMHead"),net.forEach(t),IMo=r($Ae," (Reformer model)"),$Ae.forEach(t),qMo=i(W),H_=n(W,"LI",{});var kAe=s(H_);uie=n(kAe,"STRONG",{});var set=s(uie);NMo=r(set,"rembert"),set.forEach(t),jMo=r(kAe," \u2014 "),ON=n(kAe,"A",{href:!0});var iet=s(ON);DMo=r(iet,"RemBertForCausalLM"),iet.forEach(t),GMo=r(kAe," (RemBERT model)"),kAe.forEach(t),OMo=i(W),U_=n(W,"LI",{});var SAe=s(U_);_ie=n(SAe,"STRONG",{});var det=s(_ie);VMo=r(det,"roberta"),det.forEach(t),XMo=r(SAe," \u2014 "),VN=n(SAe,"A",{href:!0});var cet=s(VN);zMo=r(cet,"RobertaForCausalLM"),cet.forEach(t),QMo=r(SAe," (RoBERTa model)"),SAe.forEach(t),WMo=i(W),J_=n(W,"LI",{});var RAe=s(J_);bie=n(RAe,"STRONG",{});var fet=s(bie);HMo=r(fet,"roformer"),fet.forEach(t),UMo=r(RAe," \u2014 "),XN=n(RAe,"A",{href:!0});var met=s(XN);JMo=r(met,"RoFormerForCausalLM"),met.forEach(t),YMo=r(RAe," (RoFormer model)"),RAe.forEach(t),KMo=i(W),Y_=n(W,"LI",{});var PAe=s(Y_);vie=n(PAe,"STRONG",{});var get=s(vie);ZMo=r(get,"speech_to_text_2"),get.forEach(t),e4o=r(PAe," \u2014 "),zN=n(PAe,"A",{href:!0});var het=s(zN);o4o=r(het,"Speech2Text2ForCausalLM"),het.forEach(t),r4o=r(PAe," (Speech2Text2 model)"),PAe.forEach(t),t4o=i(W),K_=n(W,"LI",{});var BAe=s(K_);Fie=n(BAe,"STRONG",{});var pet=s(Fie);a4o=r(pet,"transfo-xl"),pet.forEach(t),n4o=r(BAe," \u2014 "),QN=n(BAe,"A",{href:!0});var uet=s(QN);s4o=r(uet,"TransfoXLLMHeadModel"),uet.forEach(t),l4o=r(BAe," (Transformer-XL model)"),BAe.forEach(t),i4o=i(W),Z_=n(W,"LI",{});var IAe=s(Z_);Tie=n(IAe,"STRONG",{});var _et=s(Tie);d4o=r(_et,"trocr"),_et.forEach(t),c4o=r(IAe," \u2014 "),WN=n(IAe,"A",{href:!0});var bet=s(WN);f4o=r(bet,"TrOCRForCausalLM"),bet.forEach(t),m4o=r(IAe," (TrOCR model)"),IAe.forEach(t),g4o=i(W),e1=n(W,"LI",{});var qAe=s(e1);Mie=n(qAe,"STRONG",{});var vet=s(Mie);h4o=r(vet,"xglm"),vet.forEach(t),p4o=r(qAe," \u2014 "),HN=n(qAe,"A",{href:!0});var Fet=s(HN);u4o=r(Fet,"XGLMForCausalLM"),Fet.forEach(t),_4o=r(qAe," (XGLM model)"),qAe.forEach(t),b4o=i(W),o1=n(W,"LI",{});var NAe=s(o1);Eie=n(NAe,"STRONG",{});var Tet=s(Eie);v4o=r(Tet,"xlm"),Tet.forEach(t),F4o=r(NAe," \u2014 "),UN=n(NAe,"A",{href:!0});var Met=s(UN);T4o=r(Met,"XLMWithLMHeadModel"),Met.forEach(t),M4o=r(NAe," (XLM model)"),NAe.forEach(t),E4o=i(W),r1=n(W,"LI",{});var jAe=s(r1);Cie=n(jAe,"STRONG",{});var Eet=s(Cie);C4o=r(Eet,"xlm-prophetnet"),Eet.forEach(t),w4o=r(jAe," \u2014 "),JN=n(jAe,"A",{href:!0});var Cet=s(JN);A4o=r(Cet,"XLMProphetNetForCausalLM"),Cet.forEach(t),y4o=r(jAe," (XLMProphetNet model)"),jAe.forEach(t),L4o=i(W),t1=n(W,"LI",{});var DAe=s(t1);wie=n(DAe,"STRONG",{});var wet=s(wie);x4o=r(wet,"xlm-roberta"),wet.forEach(t),$4o=r(DAe," \u2014 "),YN=n(DAe,"A",{href:!0});var Aet=s(YN);k4o=r(Aet,"XLMRobertaForCausalLM"),Aet.forEach(t),S4o=r(DAe," (XLM-RoBERTa model)"),DAe.forEach(t),R4o=i(W),a1=n(W,"LI",{});var GAe=s(a1);Aie=n(GAe,"STRONG",{});var yet=s(Aie);P4o=r(yet,"xlm-roberta-xl"),yet.forEach(t),B4o=r(GAe," \u2014 "),KN=n(GAe,"A",{href:!0});var Let=s(KN);I4o=r(Let,"XLMRobertaXLForCausalLM"),Let.forEach(t),q4o=r(GAe," (XLM-RoBERTa-XL model)"),GAe.forEach(t),N4o=i(W),n1=n(W,"LI",{});var OAe=s(n1);yie=n(OAe,"STRONG",{});var xet=s(yie);j4o=r(xet,"xlnet"),xet.forEach(t),D4o=r(OAe," \u2014 "),ZN=n(OAe,"A",{href:!0});var $et=s(ZN);G4o=r($et,"XLNetLMHeadModel"),$et.forEach(t),O4o=r(OAe," (XLNet model)"),OAe.forEach(t),W.forEach(t),V4o=i(oa),s1=n(oa,"P",{});var VAe=s(s1);X4o=r(VAe,"The model is set in evaluation mode by default using "),Lie=n(VAe,"CODE",{});var ket=s(Lie);z4o=r(ket,"model.eval()"),ket.forEach(t),Q4o=r(VAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xie=n(VAe,"CODE",{});var Set=s(xie);W4o=r(Set,"model.train()"),Set.forEach(t),VAe.forEach(t),H4o=i(oa),T(l1.$$.fragment,oa),oa.forEach(t),Os.forEach(t),YBe=i(f),ki=n(f,"H2",{class:!0});var oNe=s(ki);i1=n(oNe,"A",{id:!0,class:!0,href:!0});var Ret=s(i1);$ie=n(Ret,"SPAN",{});var Pet=s($ie);T(BA.$$.fragment,Pet),Pet.forEach(t),Ret.forEach(t),U4o=i(oNe),kie=n(oNe,"SPAN",{});var Bet=s(kie);J4o=r(Bet,"AutoModelForMaskedLM"),Bet.forEach(t),oNe.forEach(t),KBe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(IA.$$.fragment,Vs),Y4o=i(Vs),Si=n(Vs,"P",{});var fK=s(Si);K4o=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ej=n(fK,"A",{href:!0});var Iet=s(ej);Z4o=r(Iet,"from_pretrained()"),Iet.forEach(t),eEo=r(fK," class method or the "),oj=n(fK,"A",{href:!0});var qet=s(oj);oEo=r(qet,"from_config()"),qet.forEach(t),rEo=r(fK,` class
method.`),fK.forEach(t),tEo=i(Vs),qA=n(Vs,"P",{});var rNe=s(qA);aEo=r(rNe,"This class cannot be instantiated directly using "),Sie=n(rNe,"CODE",{});var Net=s(Sie);nEo=r(Net,"__init__()"),Net.forEach(t),sEo=r(rNe," (throws an error)."),rNe.forEach(t),lEo=i(Vs),at=n(Vs,"DIV",{class:!0});var t3=s(at);T(NA.$$.fragment,t3),iEo=i(t3),Rie=n(t3,"P",{});var jet=s(Rie);dEo=r(jet,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jet.forEach(t),cEo=i(t3),Ri=n(t3,"P",{});var mK=s(Ri);fEo=r(mK,`Note:
Loading a model from its configuration file does `),Pie=n(mK,"STRONG",{});var Det=s(Pie);mEo=r(Det,"not"),Det.forEach(t),gEo=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rj=n(mK,"A",{href:!0});var Get=s(rj);hEo=r(Get,"from_pretrained()"),Get.forEach(t),pEo=r(mK," to load the model weights."),mK.forEach(t),uEo=i(t3),T(d1.$$.fragment,t3),t3.forEach(t),_Eo=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(jA.$$.fragment,ra),bEo=i(ra),Bie=n(ra,"P",{});var Oet=s(Bie);vEo=r(Oet,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Oet.forEach(t),FEo=i(ra),xa=n(ra,"P",{});var a3=s(xa);TEo=r(a3,"The model class to instantiate is selected based on the "),Iie=n(a3,"CODE",{});var Vet=s(Iie);MEo=r(Vet,"model_type"),Vet.forEach(t),EEo=r(a3,` property of the config object (either
passed as an argument or loaded from `),qie=n(a3,"CODE",{});var Xet=s(qie);CEo=r(Xet,"pretrained_model_name_or_path"),Xet.forEach(t),wEo=r(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nie=n(a3,"CODE",{});var zet=s(Nie);AEo=r(zet,"pretrained_model_name_or_path"),zet.forEach(t),yEo=r(a3,":"),a3.forEach(t),LEo=i(ra),Q=n(ra,"UL",{});var H=s(Q);c1=n(H,"LI",{});var XAe=s(c1);jie=n(XAe,"STRONG",{});var Qet=s(jie);xEo=r(Qet,"albert"),Qet.forEach(t),$Eo=r(XAe," \u2014 "),tj=n(XAe,"A",{href:!0});var Wet=s(tj);kEo=r(Wet,"AlbertForMaskedLM"),Wet.forEach(t),SEo=r(XAe," (ALBERT model)"),XAe.forEach(t),REo=i(H),f1=n(H,"LI",{});var zAe=s(f1);Die=n(zAe,"STRONG",{});var Het=s(Die);PEo=r(Het,"bart"),Het.forEach(t),BEo=r(zAe," \u2014 "),aj=n(zAe,"A",{href:!0});var Uet=s(aj);IEo=r(Uet,"BartForConditionalGeneration"),Uet.forEach(t),qEo=r(zAe," (BART model)"),zAe.forEach(t),NEo=i(H),m1=n(H,"LI",{});var QAe=s(m1);Gie=n(QAe,"STRONG",{});var Jet=s(Gie);jEo=r(Jet,"bert"),Jet.forEach(t),DEo=r(QAe," \u2014 "),nj=n(QAe,"A",{href:!0});var Yet=s(nj);GEo=r(Yet,"BertForMaskedLM"),Yet.forEach(t),OEo=r(QAe," (BERT model)"),QAe.forEach(t),VEo=i(H),g1=n(H,"LI",{});var WAe=s(g1);Oie=n(WAe,"STRONG",{});var Ket=s(Oie);XEo=r(Ket,"big_bird"),Ket.forEach(t),zEo=r(WAe," \u2014 "),sj=n(WAe,"A",{href:!0});var Zet=s(sj);QEo=r(Zet,"BigBirdForMaskedLM"),Zet.forEach(t),WEo=r(WAe," (BigBird model)"),WAe.forEach(t),HEo=i(H),h1=n(H,"LI",{});var HAe=s(h1);Vie=n(HAe,"STRONG",{});var eot=s(Vie);UEo=r(eot,"camembert"),eot.forEach(t),JEo=r(HAe," \u2014 "),lj=n(HAe,"A",{href:!0});var oot=s(lj);YEo=r(oot,"CamembertForMaskedLM"),oot.forEach(t),KEo=r(HAe," (CamemBERT model)"),HAe.forEach(t),ZEo=i(H),p1=n(H,"LI",{});var UAe=s(p1);Xie=n(UAe,"STRONG",{});var rot=s(Xie);e5o=r(rot,"convbert"),rot.forEach(t),o5o=r(UAe," \u2014 "),ij=n(UAe,"A",{href:!0});var tot=s(ij);r5o=r(tot,"ConvBertForMaskedLM"),tot.forEach(t),t5o=r(UAe," (ConvBERT model)"),UAe.forEach(t),a5o=i(H),u1=n(H,"LI",{});var JAe=s(u1);zie=n(JAe,"STRONG",{});var aot=s(zie);n5o=r(aot,"data2vec-text"),aot.forEach(t),s5o=r(JAe," \u2014 "),dj=n(JAe,"A",{href:!0});var not=s(dj);l5o=r(not,"Data2VecTextForMaskedLM"),not.forEach(t),i5o=r(JAe," (Data2VecText model)"),JAe.forEach(t),d5o=i(H),_1=n(H,"LI",{});var YAe=s(_1);Qie=n(YAe,"STRONG",{});var sot=s(Qie);c5o=r(sot,"deberta"),sot.forEach(t),f5o=r(YAe," \u2014 "),cj=n(YAe,"A",{href:!0});var lot=s(cj);m5o=r(lot,"DebertaForMaskedLM"),lot.forEach(t),g5o=r(YAe," (DeBERTa model)"),YAe.forEach(t),h5o=i(H),b1=n(H,"LI",{});var KAe=s(b1);Wie=n(KAe,"STRONG",{});var iot=s(Wie);p5o=r(iot,"deberta-v2"),iot.forEach(t),u5o=r(KAe," \u2014 "),fj=n(KAe,"A",{href:!0});var dot=s(fj);_5o=r(dot,"DebertaV2ForMaskedLM"),dot.forEach(t),b5o=r(KAe," (DeBERTa-v2 model)"),KAe.forEach(t),v5o=i(H),v1=n(H,"LI",{});var ZAe=s(v1);Hie=n(ZAe,"STRONG",{});var cot=s(Hie);F5o=r(cot,"distilbert"),cot.forEach(t),T5o=r(ZAe," \u2014 "),mj=n(ZAe,"A",{href:!0});var fot=s(mj);M5o=r(fot,"DistilBertForMaskedLM"),fot.forEach(t),E5o=r(ZAe," (DistilBERT model)"),ZAe.forEach(t),C5o=i(H),F1=n(H,"LI",{});var e6e=s(F1);Uie=n(e6e,"STRONG",{});var mot=s(Uie);w5o=r(mot,"electra"),mot.forEach(t),A5o=r(e6e," \u2014 "),gj=n(e6e,"A",{href:!0});var got=s(gj);y5o=r(got,"ElectraForMaskedLM"),got.forEach(t),L5o=r(e6e," (ELECTRA model)"),e6e.forEach(t),x5o=i(H),T1=n(H,"LI",{});var o6e=s(T1);Jie=n(o6e,"STRONG",{});var hot=s(Jie);$5o=r(hot,"flaubert"),hot.forEach(t),k5o=r(o6e," \u2014 "),hj=n(o6e,"A",{href:!0});var pot=s(hj);S5o=r(pot,"FlaubertWithLMHeadModel"),pot.forEach(t),R5o=r(o6e," (FlauBERT model)"),o6e.forEach(t),P5o=i(H),M1=n(H,"LI",{});var r6e=s(M1);Yie=n(r6e,"STRONG",{});var uot=s(Yie);B5o=r(uot,"fnet"),uot.forEach(t),I5o=r(r6e," \u2014 "),pj=n(r6e,"A",{href:!0});var _ot=s(pj);q5o=r(_ot,"FNetForMaskedLM"),_ot.forEach(t),N5o=r(r6e," (FNet model)"),r6e.forEach(t),j5o=i(H),E1=n(H,"LI",{});var t6e=s(E1);Kie=n(t6e,"STRONG",{});var bot=s(Kie);D5o=r(bot,"funnel"),bot.forEach(t),G5o=r(t6e," \u2014 "),uj=n(t6e,"A",{href:!0});var vot=s(uj);O5o=r(vot,"FunnelForMaskedLM"),vot.forEach(t),V5o=r(t6e," (Funnel Transformer model)"),t6e.forEach(t),X5o=i(H),C1=n(H,"LI",{});var a6e=s(C1);Zie=n(a6e,"STRONG",{});var Fot=s(Zie);z5o=r(Fot,"ibert"),Fot.forEach(t),Q5o=r(a6e," \u2014 "),_j=n(a6e,"A",{href:!0});var Tot=s(_j);W5o=r(Tot,"IBertForMaskedLM"),Tot.forEach(t),H5o=r(a6e," (I-BERT model)"),a6e.forEach(t),U5o=i(H),w1=n(H,"LI",{});var n6e=s(w1);ede=n(n6e,"STRONG",{});var Mot=s(ede);J5o=r(Mot,"layoutlm"),Mot.forEach(t),Y5o=r(n6e," \u2014 "),bj=n(n6e,"A",{href:!0});var Eot=s(bj);K5o=r(Eot,"LayoutLMForMaskedLM"),Eot.forEach(t),Z5o=r(n6e," (LayoutLM model)"),n6e.forEach(t),eCo=i(H),A1=n(H,"LI",{});var s6e=s(A1);ode=n(s6e,"STRONG",{});var Cot=s(ode);oCo=r(Cot,"longformer"),Cot.forEach(t),rCo=r(s6e," \u2014 "),vj=n(s6e,"A",{href:!0});var wot=s(vj);tCo=r(wot,"LongformerForMaskedLM"),wot.forEach(t),aCo=r(s6e," (Longformer model)"),s6e.forEach(t),nCo=i(H),y1=n(H,"LI",{});var l6e=s(y1);rde=n(l6e,"STRONG",{});var Aot=s(rde);sCo=r(Aot,"mbart"),Aot.forEach(t),lCo=r(l6e," \u2014 "),Fj=n(l6e,"A",{href:!0});var yot=s(Fj);iCo=r(yot,"MBartForConditionalGeneration"),yot.forEach(t),dCo=r(l6e," (mBART model)"),l6e.forEach(t),cCo=i(H),L1=n(H,"LI",{});var i6e=s(L1);tde=n(i6e,"STRONG",{});var Lot=s(tde);fCo=r(Lot,"megatron-bert"),Lot.forEach(t),mCo=r(i6e," \u2014 "),Tj=n(i6e,"A",{href:!0});var xot=s(Tj);gCo=r(xot,"MegatronBertForMaskedLM"),xot.forEach(t),hCo=r(i6e," (MegatronBert model)"),i6e.forEach(t),pCo=i(H),x1=n(H,"LI",{});var d6e=s(x1);ade=n(d6e,"STRONG",{});var $ot=s(ade);uCo=r($ot,"mobilebert"),$ot.forEach(t),_Co=r(d6e," \u2014 "),Mj=n(d6e,"A",{href:!0});var kot=s(Mj);bCo=r(kot,"MobileBertForMaskedLM"),kot.forEach(t),vCo=r(d6e," (MobileBERT model)"),d6e.forEach(t),FCo=i(H),$1=n(H,"LI",{});var c6e=s($1);nde=n(c6e,"STRONG",{});var Sot=s(nde);TCo=r(Sot,"mpnet"),Sot.forEach(t),MCo=r(c6e," \u2014 "),Ej=n(c6e,"A",{href:!0});var Rot=s(Ej);ECo=r(Rot,"MPNetForMaskedLM"),Rot.forEach(t),CCo=r(c6e," (MPNet model)"),c6e.forEach(t),wCo=i(H),k1=n(H,"LI",{});var f6e=s(k1);sde=n(f6e,"STRONG",{});var Pot=s(sde);ACo=r(Pot,"nystromformer"),Pot.forEach(t),yCo=r(f6e," \u2014 "),Cj=n(f6e,"A",{href:!0});var Bot=s(Cj);LCo=r(Bot,"NystromformerForMaskedLM"),Bot.forEach(t),xCo=r(f6e," (Nystromformer model)"),f6e.forEach(t),$Co=i(H),S1=n(H,"LI",{});var m6e=s(S1);lde=n(m6e,"STRONG",{});var Iot=s(lde);kCo=r(Iot,"perceiver"),Iot.forEach(t),SCo=r(m6e," \u2014 "),wj=n(m6e,"A",{href:!0});var qot=s(wj);RCo=r(qot,"PerceiverForMaskedLM"),qot.forEach(t),PCo=r(m6e," (Perceiver model)"),m6e.forEach(t),BCo=i(H),R1=n(H,"LI",{});var g6e=s(R1);ide=n(g6e,"STRONG",{});var Not=s(ide);ICo=r(Not,"qdqbert"),Not.forEach(t),qCo=r(g6e," \u2014 "),Aj=n(g6e,"A",{href:!0});var jot=s(Aj);NCo=r(jot,"QDQBertForMaskedLM"),jot.forEach(t),jCo=r(g6e," (QDQBert model)"),g6e.forEach(t),DCo=i(H),P1=n(H,"LI",{});var h6e=s(P1);dde=n(h6e,"STRONG",{});var Dot=s(dde);GCo=r(Dot,"reformer"),Dot.forEach(t),OCo=r(h6e," \u2014 "),yj=n(h6e,"A",{href:!0});var Got=s(yj);VCo=r(Got,"ReformerForMaskedLM"),Got.forEach(t),XCo=r(h6e," (Reformer model)"),h6e.forEach(t),zCo=i(H),B1=n(H,"LI",{});var p6e=s(B1);cde=n(p6e,"STRONG",{});var Oot=s(cde);QCo=r(Oot,"rembert"),Oot.forEach(t),WCo=r(p6e," \u2014 "),Lj=n(p6e,"A",{href:!0});var Vot=s(Lj);HCo=r(Vot,"RemBertForMaskedLM"),Vot.forEach(t),UCo=r(p6e," (RemBERT model)"),p6e.forEach(t),JCo=i(H),I1=n(H,"LI",{});var u6e=s(I1);fde=n(u6e,"STRONG",{});var Xot=s(fde);YCo=r(Xot,"roberta"),Xot.forEach(t),KCo=r(u6e," \u2014 "),xj=n(u6e,"A",{href:!0});var zot=s(xj);ZCo=r(zot,"RobertaForMaskedLM"),zot.forEach(t),e3o=r(u6e," (RoBERTa model)"),u6e.forEach(t),o3o=i(H),q1=n(H,"LI",{});var _6e=s(q1);mde=n(_6e,"STRONG",{});var Qot=s(mde);r3o=r(Qot,"roformer"),Qot.forEach(t),t3o=r(_6e," \u2014 "),$j=n(_6e,"A",{href:!0});var Wot=s($j);a3o=r(Wot,"RoFormerForMaskedLM"),Wot.forEach(t),n3o=r(_6e," (RoFormer model)"),_6e.forEach(t),s3o=i(H),N1=n(H,"LI",{});var b6e=s(N1);gde=n(b6e,"STRONG",{});var Hot=s(gde);l3o=r(Hot,"squeezebert"),Hot.forEach(t),i3o=r(b6e," \u2014 "),kj=n(b6e,"A",{href:!0});var Uot=s(kj);d3o=r(Uot,"SqueezeBertForMaskedLM"),Uot.forEach(t),c3o=r(b6e," (SqueezeBERT model)"),b6e.forEach(t),f3o=i(H),j1=n(H,"LI",{});var v6e=s(j1);hde=n(v6e,"STRONG",{});var Jot=s(hde);m3o=r(Jot,"tapas"),Jot.forEach(t),g3o=r(v6e," \u2014 "),Sj=n(v6e,"A",{href:!0});var Yot=s(Sj);h3o=r(Yot,"TapasForMaskedLM"),Yot.forEach(t),p3o=r(v6e," (TAPAS model)"),v6e.forEach(t),u3o=i(H),D1=n(H,"LI",{});var F6e=s(D1);pde=n(F6e,"STRONG",{});var Kot=s(pde);_3o=r(Kot,"wav2vec2"),Kot.forEach(t),b3o=r(F6e," \u2014 "),ude=n(F6e,"CODE",{});var Zot=s(ude);v3o=r(Zot,"Wav2Vec2ForMaskedLM"),Zot.forEach(t),F3o=r(F6e," (Wav2Vec2 model)"),F6e.forEach(t),T3o=i(H),G1=n(H,"LI",{});var T6e=s(G1);_de=n(T6e,"STRONG",{});var ert=s(_de);M3o=r(ert,"xlm"),ert.forEach(t),E3o=r(T6e," \u2014 "),Rj=n(T6e,"A",{href:!0});var ort=s(Rj);C3o=r(ort,"XLMWithLMHeadModel"),ort.forEach(t),w3o=r(T6e," (XLM model)"),T6e.forEach(t),A3o=i(H),O1=n(H,"LI",{});var M6e=s(O1);bde=n(M6e,"STRONG",{});var rrt=s(bde);y3o=r(rrt,"xlm-roberta"),rrt.forEach(t),L3o=r(M6e," \u2014 "),Pj=n(M6e,"A",{href:!0});var trt=s(Pj);x3o=r(trt,"XLMRobertaForMaskedLM"),trt.forEach(t),$3o=r(M6e," (XLM-RoBERTa model)"),M6e.forEach(t),k3o=i(H),V1=n(H,"LI",{});var E6e=s(V1);vde=n(E6e,"STRONG",{});var art=s(vde);S3o=r(art,"xlm-roberta-xl"),art.forEach(t),R3o=r(E6e," \u2014 "),Bj=n(E6e,"A",{href:!0});var nrt=s(Bj);P3o=r(nrt,"XLMRobertaXLForMaskedLM"),nrt.forEach(t),B3o=r(E6e," (XLM-RoBERTa-XL model)"),E6e.forEach(t),I3o=i(H),X1=n(H,"LI",{});var C6e=s(X1);Fde=n(C6e,"STRONG",{});var srt=s(Fde);q3o=r(srt,"yoso"),srt.forEach(t),N3o=r(C6e," \u2014 "),Ij=n(C6e,"A",{href:!0});var lrt=s(Ij);j3o=r(lrt,"YosoForMaskedLM"),lrt.forEach(t),D3o=r(C6e," (YOSO model)"),C6e.forEach(t),H.forEach(t),G3o=i(ra),z1=n(ra,"P",{});var w6e=s(z1);O3o=r(w6e,"The model is set in evaluation mode by default using "),Tde=n(w6e,"CODE",{});var irt=s(Tde);V3o=r(irt,"model.eval()"),irt.forEach(t),X3o=r(w6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mde=n(w6e,"CODE",{});var drt=s(Mde);z3o=r(drt,"model.train()"),drt.forEach(t),w6e.forEach(t),Q3o=i(ra),T(Q1.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),ZBe=i(f),Pi=n(f,"H2",{class:!0});var tNe=s(Pi);W1=n(tNe,"A",{id:!0,class:!0,href:!0});var crt=s(W1);Ede=n(crt,"SPAN",{});var frt=s(Ede);T(DA.$$.fragment,frt),frt.forEach(t),crt.forEach(t),W3o=i(tNe),Cde=n(tNe,"SPAN",{});var mrt=s(Cde);H3o=r(mrt,"AutoModelForSeq2SeqLM"),mrt.forEach(t),tNe.forEach(t),eIe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(GA.$$.fragment,Xs),U3o=i(Xs),Bi=n(Xs,"P",{});var gK=s(Bi);J3o=r(gK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qj=n(gK,"A",{href:!0});var grt=s(qj);Y3o=r(grt,"from_pretrained()"),grt.forEach(t),K3o=r(gK," class method or the "),Nj=n(gK,"A",{href:!0});var hrt=s(Nj);Z3o=r(hrt,"from_config()"),hrt.forEach(t),ewo=r(gK,` class
method.`),gK.forEach(t),owo=i(Xs),OA=n(Xs,"P",{});var aNe=s(OA);rwo=r(aNe,"This class cannot be instantiated directly using "),wde=n(aNe,"CODE",{});var prt=s(wde);two=r(prt,"__init__()"),prt.forEach(t),awo=r(aNe," (throws an error)."),aNe.forEach(t),nwo=i(Xs),nt=n(Xs,"DIV",{class:!0});var n3=s(nt);T(VA.$$.fragment,n3),swo=i(n3),Ade=n(n3,"P",{});var urt=s(Ade);lwo=r(urt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),urt.forEach(t),iwo=i(n3),Ii=n(n3,"P",{});var hK=s(Ii);dwo=r(hK,`Note:
Loading a model from its configuration file does `),yde=n(hK,"STRONG",{});var _rt=s(yde);cwo=r(_rt,"not"),_rt.forEach(t),fwo=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jj=n(hK,"A",{href:!0});var brt=s(jj);mwo=r(brt,"from_pretrained()"),brt.forEach(t),gwo=r(hK," to load the model weights."),hK.forEach(t),hwo=i(n3),T(H1.$$.fragment,n3),n3.forEach(t),pwo=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(XA.$$.fragment,ta),uwo=i(ta),Lde=n(ta,"P",{});var vrt=s(Lde);_wo=r(vrt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vrt.forEach(t),bwo=i(ta),$a=n(ta,"P",{});var s3=s($a);vwo=r(s3,"The model class to instantiate is selected based on the "),xde=n(s3,"CODE",{});var Frt=s(xde);Fwo=r(Frt,"model_type"),Frt.forEach(t),Two=r(s3,` property of the config object (either
passed as an argument or loaded from `),$de=n(s3,"CODE",{});var Trt=s($de);Mwo=r(Trt,"pretrained_model_name_or_path"),Trt.forEach(t),Ewo=r(s3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kde=n(s3,"CODE",{});var Mrt=s(kde);Cwo=r(Mrt,"pretrained_model_name_or_path"),Mrt.forEach(t),wwo=r(s3,":"),s3.forEach(t),Awo=i(ta),he=n(ta,"UL",{});var ue=s(he);U1=n(ue,"LI",{});var A6e=s(U1);Sde=n(A6e,"STRONG",{});var Ert=s(Sde);ywo=r(Ert,"bart"),Ert.forEach(t),Lwo=r(A6e," \u2014 "),Dj=n(A6e,"A",{href:!0});var Crt=s(Dj);xwo=r(Crt,"BartForConditionalGeneration"),Crt.forEach(t),$wo=r(A6e," (BART model)"),A6e.forEach(t),kwo=i(ue),J1=n(ue,"LI",{});var y6e=s(J1);Rde=n(y6e,"STRONG",{});var wrt=s(Rde);Swo=r(wrt,"bigbird_pegasus"),wrt.forEach(t),Rwo=r(y6e," \u2014 "),Gj=n(y6e,"A",{href:!0});var Art=s(Gj);Pwo=r(Art,"BigBirdPegasusForConditionalGeneration"),Art.forEach(t),Bwo=r(y6e," (BigBirdPegasus model)"),y6e.forEach(t),Iwo=i(ue),Y1=n(ue,"LI",{});var L6e=s(Y1);Pde=n(L6e,"STRONG",{});var yrt=s(Pde);qwo=r(yrt,"blenderbot"),yrt.forEach(t),Nwo=r(L6e," \u2014 "),Oj=n(L6e,"A",{href:!0});var Lrt=s(Oj);jwo=r(Lrt,"BlenderbotForConditionalGeneration"),Lrt.forEach(t),Dwo=r(L6e," (Blenderbot model)"),L6e.forEach(t),Gwo=i(ue),K1=n(ue,"LI",{});var x6e=s(K1);Bde=n(x6e,"STRONG",{});var xrt=s(Bde);Owo=r(xrt,"blenderbot-small"),xrt.forEach(t),Vwo=r(x6e," \u2014 "),Vj=n(x6e,"A",{href:!0});var $rt=s(Vj);Xwo=r($rt,"BlenderbotSmallForConditionalGeneration"),$rt.forEach(t),zwo=r(x6e," (BlenderbotSmall model)"),x6e.forEach(t),Qwo=i(ue),Z1=n(ue,"LI",{});var $6e=s(Z1);Ide=n($6e,"STRONG",{});var krt=s(Ide);Wwo=r(krt,"encoder-decoder"),krt.forEach(t),Hwo=r($6e," \u2014 "),Xj=n($6e,"A",{href:!0});var Srt=s(Xj);Uwo=r(Srt,"EncoderDecoderModel"),Srt.forEach(t),Jwo=r($6e," (Encoder decoder model)"),$6e.forEach(t),Ywo=i(ue),e8=n(ue,"LI",{});var k6e=s(e8);qde=n(k6e,"STRONG",{});var Rrt=s(qde);Kwo=r(Rrt,"fsmt"),Rrt.forEach(t),Zwo=r(k6e," \u2014 "),zj=n(k6e,"A",{href:!0});var Prt=s(zj);eAo=r(Prt,"FSMTForConditionalGeneration"),Prt.forEach(t),oAo=r(k6e," (FairSeq Machine-Translation model)"),k6e.forEach(t),rAo=i(ue),o8=n(ue,"LI",{});var S6e=s(o8);Nde=n(S6e,"STRONG",{});var Brt=s(Nde);tAo=r(Brt,"led"),Brt.forEach(t),aAo=r(S6e," \u2014 "),Qj=n(S6e,"A",{href:!0});var Irt=s(Qj);nAo=r(Irt,"LEDForConditionalGeneration"),Irt.forEach(t),sAo=r(S6e," (LED model)"),S6e.forEach(t),lAo=i(ue),r8=n(ue,"LI",{});var R6e=s(r8);jde=n(R6e,"STRONG",{});var qrt=s(jde);iAo=r(qrt,"m2m_100"),qrt.forEach(t),dAo=r(R6e," \u2014 "),Wj=n(R6e,"A",{href:!0});var Nrt=s(Wj);cAo=r(Nrt,"M2M100ForConditionalGeneration"),Nrt.forEach(t),fAo=r(R6e," (M2M100 model)"),R6e.forEach(t),mAo=i(ue),t8=n(ue,"LI",{});var P6e=s(t8);Dde=n(P6e,"STRONG",{});var jrt=s(Dde);gAo=r(jrt,"marian"),jrt.forEach(t),hAo=r(P6e," \u2014 "),Hj=n(P6e,"A",{href:!0});var Drt=s(Hj);pAo=r(Drt,"MarianMTModel"),Drt.forEach(t),uAo=r(P6e," (Marian model)"),P6e.forEach(t),_Ao=i(ue),a8=n(ue,"LI",{});var B6e=s(a8);Gde=n(B6e,"STRONG",{});var Grt=s(Gde);bAo=r(Grt,"mbart"),Grt.forEach(t),vAo=r(B6e," \u2014 "),Uj=n(B6e,"A",{href:!0});var Ort=s(Uj);FAo=r(Ort,"MBartForConditionalGeneration"),Ort.forEach(t),TAo=r(B6e," (mBART model)"),B6e.forEach(t),MAo=i(ue),n8=n(ue,"LI",{});var I6e=s(n8);Ode=n(I6e,"STRONG",{});var Vrt=s(Ode);EAo=r(Vrt,"mt5"),Vrt.forEach(t),CAo=r(I6e," \u2014 "),Jj=n(I6e,"A",{href:!0});var Xrt=s(Jj);wAo=r(Xrt,"MT5ForConditionalGeneration"),Xrt.forEach(t),AAo=r(I6e," (mT5 model)"),I6e.forEach(t),yAo=i(ue),s8=n(ue,"LI",{});var q6e=s(s8);Vde=n(q6e,"STRONG",{});var zrt=s(Vde);LAo=r(zrt,"pegasus"),zrt.forEach(t),xAo=r(q6e," \u2014 "),Yj=n(q6e,"A",{href:!0});var Qrt=s(Yj);$Ao=r(Qrt,"PegasusForConditionalGeneration"),Qrt.forEach(t),kAo=r(q6e," (Pegasus model)"),q6e.forEach(t),SAo=i(ue),l8=n(ue,"LI",{});var N6e=s(l8);Xde=n(N6e,"STRONG",{});var Wrt=s(Xde);RAo=r(Wrt,"plbart"),Wrt.forEach(t),PAo=r(N6e," \u2014 "),Kj=n(N6e,"A",{href:!0});var Hrt=s(Kj);BAo=r(Hrt,"PLBartForConditionalGeneration"),Hrt.forEach(t),IAo=r(N6e," (PLBart model)"),N6e.forEach(t),qAo=i(ue),i8=n(ue,"LI",{});var j6e=s(i8);zde=n(j6e,"STRONG",{});var Urt=s(zde);NAo=r(Urt,"prophetnet"),Urt.forEach(t),jAo=r(j6e," \u2014 "),Zj=n(j6e,"A",{href:!0});var Jrt=s(Zj);DAo=r(Jrt,"ProphetNetForConditionalGeneration"),Jrt.forEach(t),GAo=r(j6e," (ProphetNet model)"),j6e.forEach(t),OAo=i(ue),d8=n(ue,"LI",{});var D6e=s(d8);Qde=n(D6e,"STRONG",{});var Yrt=s(Qde);VAo=r(Yrt,"t5"),Yrt.forEach(t),XAo=r(D6e," \u2014 "),eD=n(D6e,"A",{href:!0});var Krt=s(eD);zAo=r(Krt,"T5ForConditionalGeneration"),Krt.forEach(t),QAo=r(D6e," (T5 model)"),D6e.forEach(t),WAo=i(ue),c8=n(ue,"LI",{});var G6e=s(c8);Wde=n(G6e,"STRONG",{});var Zrt=s(Wde);HAo=r(Zrt,"tapex"),Zrt.forEach(t),UAo=r(G6e," \u2014 "),oD=n(G6e,"A",{href:!0});var ett=s(oD);JAo=r(ett,"BartForConditionalGeneration"),ett.forEach(t),YAo=r(G6e," (TAPEX model)"),G6e.forEach(t),KAo=i(ue),f8=n(ue,"LI",{});var O6e=s(f8);Hde=n(O6e,"STRONG",{});var ott=s(Hde);ZAo=r(ott,"xlm-prophetnet"),ott.forEach(t),e6o=r(O6e," \u2014 "),rD=n(O6e,"A",{href:!0});var rtt=s(rD);o6o=r(rtt,"XLMProphetNetForConditionalGeneration"),rtt.forEach(t),r6o=r(O6e," (XLMProphetNet model)"),O6e.forEach(t),ue.forEach(t),t6o=i(ta),m8=n(ta,"P",{});var V6e=s(m8);a6o=r(V6e,"The model is set in evaluation mode by default using "),Ude=n(V6e,"CODE",{});var ttt=s(Ude);n6o=r(ttt,"model.eval()"),ttt.forEach(t),s6o=r(V6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jde=n(V6e,"CODE",{});var att=s(Jde);l6o=r(att,"model.train()"),att.forEach(t),V6e.forEach(t),i6o=i(ta),T(g8.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),oIe=i(f),qi=n(f,"H2",{class:!0});var nNe=s(qi);h8=n(nNe,"A",{id:!0,class:!0,href:!0});var ntt=s(h8);Yde=n(ntt,"SPAN",{});var stt=s(Yde);T(zA.$$.fragment,stt),stt.forEach(t),ntt.forEach(t),d6o=i(nNe),Kde=n(nNe,"SPAN",{});var ltt=s(Kde);c6o=r(ltt,"AutoModelForSequenceClassification"),ltt.forEach(t),nNe.forEach(t),rIe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(QA.$$.fragment,zs),f6o=i(zs),Ni=n(zs,"P",{});var pK=s(Ni);m6o=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tD=n(pK,"A",{href:!0});var itt=s(tD);g6o=r(itt,"from_pretrained()"),itt.forEach(t),h6o=r(pK," class method or the "),aD=n(pK,"A",{href:!0});var dtt=s(aD);p6o=r(dtt,"from_config()"),dtt.forEach(t),u6o=r(pK,` class
method.`),pK.forEach(t),_6o=i(zs),WA=n(zs,"P",{});var sNe=s(WA);b6o=r(sNe,"This class cannot be instantiated directly using "),Zde=n(sNe,"CODE",{});var ctt=s(Zde);v6o=r(ctt,"__init__()"),ctt.forEach(t),F6o=r(sNe," (throws an error)."),sNe.forEach(t),T6o=i(zs),st=n(zs,"DIV",{class:!0});var l3=s(st);T(HA.$$.fragment,l3),M6o=i(l3),ece=n(l3,"P",{});var ftt=s(ece);E6o=r(ftt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ftt.forEach(t),C6o=i(l3),ji=n(l3,"P",{});var uK=s(ji);w6o=r(uK,`Note:
Loading a model from its configuration file does `),oce=n(uK,"STRONG",{});var mtt=s(oce);A6o=r(mtt,"not"),mtt.forEach(t),y6o=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nD=n(uK,"A",{href:!0});var gtt=s(nD);L6o=r(gtt,"from_pretrained()"),gtt.forEach(t),x6o=r(uK," to load the model weights."),uK.forEach(t),$6o=i(l3),T(p8.$$.fragment,l3),l3.forEach(t),k6o=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(UA.$$.fragment,aa),S6o=i(aa),rce=n(aa,"P",{});var htt=s(rce);R6o=r(htt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),htt.forEach(t),P6o=i(aa),ka=n(aa,"P",{});var i3=s(ka);B6o=r(i3,"The model class to instantiate is selected based on the "),tce=n(i3,"CODE",{});var ptt=s(tce);I6o=r(ptt,"model_type"),ptt.forEach(t),q6o=r(i3,` property of the config object (either
passed as an argument or loaded from `),ace=n(i3,"CODE",{});var utt=s(ace);N6o=r(utt,"pretrained_model_name_or_path"),utt.forEach(t),j6o=r(i3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nce=n(i3,"CODE",{});var _tt=s(nce);D6o=r(_tt,"pretrained_model_name_or_path"),_tt.forEach(t),G6o=r(i3,":"),i3.forEach(t),O6o=i(aa),q=n(aa,"UL",{});var j=s(q);u8=n(j,"LI",{});var X6e=s(u8);sce=n(X6e,"STRONG",{});var btt=s(sce);V6o=r(btt,"albert"),btt.forEach(t),X6o=r(X6e," \u2014 "),sD=n(X6e,"A",{href:!0});var vtt=s(sD);z6o=r(vtt,"AlbertForSequenceClassification"),vtt.forEach(t),Q6o=r(X6e," (ALBERT model)"),X6e.forEach(t),W6o=i(j),_8=n(j,"LI",{});var z6e=s(_8);lce=n(z6e,"STRONG",{});var Ftt=s(lce);H6o=r(Ftt,"bart"),Ftt.forEach(t),U6o=r(z6e," \u2014 "),lD=n(z6e,"A",{href:!0});var Ttt=s(lD);J6o=r(Ttt,"BartForSequenceClassification"),Ttt.forEach(t),Y6o=r(z6e," (BART model)"),z6e.forEach(t),K6o=i(j),b8=n(j,"LI",{});var Q6e=s(b8);ice=n(Q6e,"STRONG",{});var Mtt=s(ice);Z6o=r(Mtt,"bert"),Mtt.forEach(t),eyo=r(Q6e," \u2014 "),iD=n(Q6e,"A",{href:!0});var Ett=s(iD);oyo=r(Ett,"BertForSequenceClassification"),Ett.forEach(t),ryo=r(Q6e," (BERT model)"),Q6e.forEach(t),tyo=i(j),v8=n(j,"LI",{});var W6e=s(v8);dce=n(W6e,"STRONG",{});var Ctt=s(dce);ayo=r(Ctt,"big_bird"),Ctt.forEach(t),nyo=r(W6e," \u2014 "),dD=n(W6e,"A",{href:!0});var wtt=s(dD);syo=r(wtt,"BigBirdForSequenceClassification"),wtt.forEach(t),lyo=r(W6e," (BigBird model)"),W6e.forEach(t),iyo=i(j),F8=n(j,"LI",{});var H6e=s(F8);cce=n(H6e,"STRONG",{});var Att=s(cce);dyo=r(Att,"bigbird_pegasus"),Att.forEach(t),cyo=r(H6e," \u2014 "),cD=n(H6e,"A",{href:!0});var ytt=s(cD);fyo=r(ytt,"BigBirdPegasusForSequenceClassification"),ytt.forEach(t),myo=r(H6e," (BigBirdPegasus model)"),H6e.forEach(t),gyo=i(j),T8=n(j,"LI",{});var U6e=s(T8);fce=n(U6e,"STRONG",{});var Ltt=s(fce);hyo=r(Ltt,"camembert"),Ltt.forEach(t),pyo=r(U6e," \u2014 "),fD=n(U6e,"A",{href:!0});var xtt=s(fD);uyo=r(xtt,"CamembertForSequenceClassification"),xtt.forEach(t),_yo=r(U6e," (CamemBERT model)"),U6e.forEach(t),byo=i(j),M8=n(j,"LI",{});var J6e=s(M8);mce=n(J6e,"STRONG",{});var $tt=s(mce);vyo=r($tt,"canine"),$tt.forEach(t),Fyo=r(J6e," \u2014 "),mD=n(J6e,"A",{href:!0});var ktt=s(mD);Tyo=r(ktt,"CanineForSequenceClassification"),ktt.forEach(t),Myo=r(J6e," (Canine model)"),J6e.forEach(t),Eyo=i(j),E8=n(j,"LI",{});var Y6e=s(E8);gce=n(Y6e,"STRONG",{});var Stt=s(gce);Cyo=r(Stt,"convbert"),Stt.forEach(t),wyo=r(Y6e," \u2014 "),gD=n(Y6e,"A",{href:!0});var Rtt=s(gD);Ayo=r(Rtt,"ConvBertForSequenceClassification"),Rtt.forEach(t),yyo=r(Y6e," (ConvBERT model)"),Y6e.forEach(t),Lyo=i(j),C8=n(j,"LI",{});var K6e=s(C8);hce=n(K6e,"STRONG",{});var Ptt=s(hce);xyo=r(Ptt,"ctrl"),Ptt.forEach(t),$yo=r(K6e," \u2014 "),hD=n(K6e,"A",{href:!0});var Btt=s(hD);kyo=r(Btt,"CTRLForSequenceClassification"),Btt.forEach(t),Syo=r(K6e," (CTRL model)"),K6e.forEach(t),Ryo=i(j),w8=n(j,"LI",{});var Z6e=s(w8);pce=n(Z6e,"STRONG",{});var Itt=s(pce);Pyo=r(Itt,"data2vec-text"),Itt.forEach(t),Byo=r(Z6e," \u2014 "),pD=n(Z6e,"A",{href:!0});var qtt=s(pD);Iyo=r(qtt,"Data2VecTextForSequenceClassification"),qtt.forEach(t),qyo=r(Z6e," (Data2VecText model)"),Z6e.forEach(t),Nyo=i(j),A8=n(j,"LI",{});var eye=s(A8);uce=n(eye,"STRONG",{});var Ntt=s(uce);jyo=r(Ntt,"deberta"),Ntt.forEach(t),Dyo=r(eye," \u2014 "),uD=n(eye,"A",{href:!0});var jtt=s(uD);Gyo=r(jtt,"DebertaForSequenceClassification"),jtt.forEach(t),Oyo=r(eye," (DeBERTa model)"),eye.forEach(t),Vyo=i(j),y8=n(j,"LI",{});var oye=s(y8);_ce=n(oye,"STRONG",{});var Dtt=s(_ce);Xyo=r(Dtt,"deberta-v2"),Dtt.forEach(t),zyo=r(oye," \u2014 "),_D=n(oye,"A",{href:!0});var Gtt=s(_D);Qyo=r(Gtt,"DebertaV2ForSequenceClassification"),Gtt.forEach(t),Wyo=r(oye," (DeBERTa-v2 model)"),oye.forEach(t),Hyo=i(j),L8=n(j,"LI",{});var rye=s(L8);bce=n(rye,"STRONG",{});var Ott=s(bce);Uyo=r(Ott,"distilbert"),Ott.forEach(t),Jyo=r(rye," \u2014 "),bD=n(rye,"A",{href:!0});var Vtt=s(bD);Yyo=r(Vtt,"DistilBertForSequenceClassification"),Vtt.forEach(t),Kyo=r(rye," (DistilBERT model)"),rye.forEach(t),Zyo=i(j),x8=n(j,"LI",{});var tye=s(x8);vce=n(tye,"STRONG",{});var Xtt=s(vce);eLo=r(Xtt,"electra"),Xtt.forEach(t),oLo=r(tye," \u2014 "),vD=n(tye,"A",{href:!0});var ztt=s(vD);rLo=r(ztt,"ElectraForSequenceClassification"),ztt.forEach(t),tLo=r(tye," (ELECTRA model)"),tye.forEach(t),aLo=i(j),$8=n(j,"LI",{});var aye=s($8);Fce=n(aye,"STRONG",{});var Qtt=s(Fce);nLo=r(Qtt,"flaubert"),Qtt.forEach(t),sLo=r(aye," \u2014 "),FD=n(aye,"A",{href:!0});var Wtt=s(FD);lLo=r(Wtt,"FlaubertForSequenceClassification"),Wtt.forEach(t),iLo=r(aye," (FlauBERT model)"),aye.forEach(t),dLo=i(j),k8=n(j,"LI",{});var nye=s(k8);Tce=n(nye,"STRONG",{});var Htt=s(Tce);cLo=r(Htt,"fnet"),Htt.forEach(t),fLo=r(nye," \u2014 "),TD=n(nye,"A",{href:!0});var Utt=s(TD);mLo=r(Utt,"FNetForSequenceClassification"),Utt.forEach(t),gLo=r(nye," (FNet model)"),nye.forEach(t),hLo=i(j),S8=n(j,"LI",{});var sye=s(S8);Mce=n(sye,"STRONG",{});var Jtt=s(Mce);pLo=r(Jtt,"funnel"),Jtt.forEach(t),uLo=r(sye," \u2014 "),MD=n(sye,"A",{href:!0});var Ytt=s(MD);_Lo=r(Ytt,"FunnelForSequenceClassification"),Ytt.forEach(t),bLo=r(sye," (Funnel Transformer model)"),sye.forEach(t),vLo=i(j),R8=n(j,"LI",{});var lye=s(R8);Ece=n(lye,"STRONG",{});var Ktt=s(Ece);FLo=r(Ktt,"gpt2"),Ktt.forEach(t),TLo=r(lye," \u2014 "),ED=n(lye,"A",{href:!0});var Ztt=s(ED);MLo=r(Ztt,"GPT2ForSequenceClassification"),Ztt.forEach(t),ELo=r(lye," (OpenAI GPT-2 model)"),lye.forEach(t),CLo=i(j),P8=n(j,"LI",{});var iye=s(P8);Cce=n(iye,"STRONG",{});var eat=s(Cce);wLo=r(eat,"gpt_neo"),eat.forEach(t),ALo=r(iye," \u2014 "),CD=n(iye,"A",{href:!0});var oat=s(CD);yLo=r(oat,"GPTNeoForSequenceClassification"),oat.forEach(t),LLo=r(iye," (GPT Neo model)"),iye.forEach(t),xLo=i(j),B8=n(j,"LI",{});var dye=s(B8);wce=n(dye,"STRONG",{});var rat=s(wce);$Lo=r(rat,"gptj"),rat.forEach(t),kLo=r(dye," \u2014 "),wD=n(dye,"A",{href:!0});var tat=s(wD);SLo=r(tat,"GPTJForSequenceClassification"),tat.forEach(t),RLo=r(dye," (GPT-J model)"),dye.forEach(t),PLo=i(j),I8=n(j,"LI",{});var cye=s(I8);Ace=n(cye,"STRONG",{});var aat=s(Ace);BLo=r(aat,"ibert"),aat.forEach(t),ILo=r(cye," \u2014 "),AD=n(cye,"A",{href:!0});var nat=s(AD);qLo=r(nat,"IBertForSequenceClassification"),nat.forEach(t),NLo=r(cye," (I-BERT model)"),cye.forEach(t),jLo=i(j),q8=n(j,"LI",{});var fye=s(q8);yce=n(fye,"STRONG",{});var sat=s(yce);DLo=r(sat,"layoutlm"),sat.forEach(t),GLo=r(fye," \u2014 "),yD=n(fye,"A",{href:!0});var lat=s(yD);OLo=r(lat,"LayoutLMForSequenceClassification"),lat.forEach(t),VLo=r(fye," (LayoutLM model)"),fye.forEach(t),XLo=i(j),N8=n(j,"LI",{});var mye=s(N8);Lce=n(mye,"STRONG",{});var iat=s(Lce);zLo=r(iat,"layoutlmv2"),iat.forEach(t),QLo=r(mye," \u2014 "),LD=n(mye,"A",{href:!0});var dat=s(LD);WLo=r(dat,"LayoutLMv2ForSequenceClassification"),dat.forEach(t),HLo=r(mye," (LayoutLMv2 model)"),mye.forEach(t),ULo=i(j),j8=n(j,"LI",{});var gye=s(j8);xce=n(gye,"STRONG",{});var cat=s(xce);JLo=r(cat,"led"),cat.forEach(t),YLo=r(gye," \u2014 "),xD=n(gye,"A",{href:!0});var fat=s(xD);KLo=r(fat,"LEDForSequenceClassification"),fat.forEach(t),ZLo=r(gye," (LED model)"),gye.forEach(t),exo=i(j),D8=n(j,"LI",{});var hye=s(D8);$ce=n(hye,"STRONG",{});var mat=s($ce);oxo=r(mat,"longformer"),mat.forEach(t),rxo=r(hye," \u2014 "),$D=n(hye,"A",{href:!0});var gat=s($D);txo=r(gat,"LongformerForSequenceClassification"),gat.forEach(t),axo=r(hye," (Longformer model)"),hye.forEach(t),nxo=i(j),G8=n(j,"LI",{});var pye=s(G8);kce=n(pye,"STRONG",{});var hat=s(kce);sxo=r(hat,"mbart"),hat.forEach(t),lxo=r(pye," \u2014 "),kD=n(pye,"A",{href:!0});var pat=s(kD);ixo=r(pat,"MBartForSequenceClassification"),pat.forEach(t),dxo=r(pye," (mBART model)"),pye.forEach(t),cxo=i(j),O8=n(j,"LI",{});var uye=s(O8);Sce=n(uye,"STRONG",{});var uat=s(Sce);fxo=r(uat,"megatron-bert"),uat.forEach(t),mxo=r(uye," \u2014 "),SD=n(uye,"A",{href:!0});var _at=s(SD);gxo=r(_at,"MegatronBertForSequenceClassification"),_at.forEach(t),hxo=r(uye," (MegatronBert model)"),uye.forEach(t),pxo=i(j),V8=n(j,"LI",{});var _ye=s(V8);Rce=n(_ye,"STRONG",{});var bat=s(Rce);uxo=r(bat,"mobilebert"),bat.forEach(t),_xo=r(_ye," \u2014 "),RD=n(_ye,"A",{href:!0});var vat=s(RD);bxo=r(vat,"MobileBertForSequenceClassification"),vat.forEach(t),vxo=r(_ye," (MobileBERT model)"),_ye.forEach(t),Fxo=i(j),X8=n(j,"LI",{});var bye=s(X8);Pce=n(bye,"STRONG",{});var Fat=s(Pce);Txo=r(Fat,"mpnet"),Fat.forEach(t),Mxo=r(bye," \u2014 "),PD=n(bye,"A",{href:!0});var Tat=s(PD);Exo=r(Tat,"MPNetForSequenceClassification"),Tat.forEach(t),Cxo=r(bye," (MPNet model)"),bye.forEach(t),wxo=i(j),z8=n(j,"LI",{});var vye=s(z8);Bce=n(vye,"STRONG",{});var Mat=s(Bce);Axo=r(Mat,"nystromformer"),Mat.forEach(t),yxo=r(vye," \u2014 "),BD=n(vye,"A",{href:!0});var Eat=s(BD);Lxo=r(Eat,"NystromformerForSequenceClassification"),Eat.forEach(t),xxo=r(vye," (Nystromformer model)"),vye.forEach(t),$xo=i(j),Q8=n(j,"LI",{});var Fye=s(Q8);Ice=n(Fye,"STRONG",{});var Cat=s(Ice);kxo=r(Cat,"openai-gpt"),Cat.forEach(t),Sxo=r(Fye," \u2014 "),ID=n(Fye,"A",{href:!0});var wat=s(ID);Rxo=r(wat,"OpenAIGPTForSequenceClassification"),wat.forEach(t),Pxo=r(Fye," (OpenAI GPT model)"),Fye.forEach(t),Bxo=i(j),W8=n(j,"LI",{});var Tye=s(W8);qce=n(Tye,"STRONG",{});var Aat=s(qce);Ixo=r(Aat,"perceiver"),Aat.forEach(t),qxo=r(Tye," \u2014 "),qD=n(Tye,"A",{href:!0});var yat=s(qD);Nxo=r(yat,"PerceiverForSequenceClassification"),yat.forEach(t),jxo=r(Tye," (Perceiver model)"),Tye.forEach(t),Dxo=i(j),H8=n(j,"LI",{});var Mye=s(H8);Nce=n(Mye,"STRONG",{});var Lat=s(Nce);Gxo=r(Lat,"plbart"),Lat.forEach(t),Oxo=r(Mye," \u2014 "),ND=n(Mye,"A",{href:!0});var xat=s(ND);Vxo=r(xat,"PLBartForSequenceClassification"),xat.forEach(t),Xxo=r(Mye," (PLBart model)"),Mye.forEach(t),zxo=i(j),U8=n(j,"LI",{});var Eye=s(U8);jce=n(Eye,"STRONG",{});var $at=s(jce);Qxo=r($at,"qdqbert"),$at.forEach(t),Wxo=r(Eye," \u2014 "),jD=n(Eye,"A",{href:!0});var kat=s(jD);Hxo=r(kat,"QDQBertForSequenceClassification"),kat.forEach(t),Uxo=r(Eye," (QDQBert model)"),Eye.forEach(t),Jxo=i(j),J8=n(j,"LI",{});var Cye=s(J8);Dce=n(Cye,"STRONG",{});var Sat=s(Dce);Yxo=r(Sat,"reformer"),Sat.forEach(t),Kxo=r(Cye," \u2014 "),DD=n(Cye,"A",{href:!0});var Rat=s(DD);Zxo=r(Rat,"ReformerForSequenceClassification"),Rat.forEach(t),e9o=r(Cye," (Reformer model)"),Cye.forEach(t),o9o=i(j),Y8=n(j,"LI",{});var wye=s(Y8);Gce=n(wye,"STRONG",{});var Pat=s(Gce);r9o=r(Pat,"rembert"),Pat.forEach(t),t9o=r(wye," \u2014 "),GD=n(wye,"A",{href:!0});var Bat=s(GD);a9o=r(Bat,"RemBertForSequenceClassification"),Bat.forEach(t),n9o=r(wye," (RemBERT model)"),wye.forEach(t),s9o=i(j),K8=n(j,"LI",{});var Aye=s(K8);Oce=n(Aye,"STRONG",{});var Iat=s(Oce);l9o=r(Iat,"roberta"),Iat.forEach(t),i9o=r(Aye," \u2014 "),OD=n(Aye,"A",{href:!0});var qat=s(OD);d9o=r(qat,"RobertaForSequenceClassification"),qat.forEach(t),c9o=r(Aye," (RoBERTa model)"),Aye.forEach(t),f9o=i(j),Z8=n(j,"LI",{});var yye=s(Z8);Vce=n(yye,"STRONG",{});var Nat=s(Vce);m9o=r(Nat,"roformer"),Nat.forEach(t),g9o=r(yye," \u2014 "),VD=n(yye,"A",{href:!0});var jat=s(VD);h9o=r(jat,"RoFormerForSequenceClassification"),jat.forEach(t),p9o=r(yye," (RoFormer model)"),yye.forEach(t),u9o=i(j),eb=n(j,"LI",{});var Lye=s(eb);Xce=n(Lye,"STRONG",{});var Dat=s(Xce);_9o=r(Dat,"squeezebert"),Dat.forEach(t),b9o=r(Lye," \u2014 "),XD=n(Lye,"A",{href:!0});var Gat=s(XD);v9o=r(Gat,"SqueezeBertForSequenceClassification"),Gat.forEach(t),F9o=r(Lye," (SqueezeBERT model)"),Lye.forEach(t),T9o=i(j),ob=n(j,"LI",{});var xye=s(ob);zce=n(xye,"STRONG",{});var Oat=s(zce);M9o=r(Oat,"tapas"),Oat.forEach(t),E9o=r(xye," \u2014 "),zD=n(xye,"A",{href:!0});var Vat=s(zD);C9o=r(Vat,"TapasForSequenceClassification"),Vat.forEach(t),w9o=r(xye," (TAPAS model)"),xye.forEach(t),A9o=i(j),rb=n(j,"LI",{});var $ye=s(rb);Qce=n($ye,"STRONG",{});var Xat=s(Qce);y9o=r(Xat,"tapex"),Xat.forEach(t),L9o=r($ye," \u2014 "),QD=n($ye,"A",{href:!0});var zat=s(QD);x9o=r(zat,"BartForSequenceClassification"),zat.forEach(t),$9o=r($ye," (TAPEX model)"),$ye.forEach(t),k9o=i(j),tb=n(j,"LI",{});var kye=s(tb);Wce=n(kye,"STRONG",{});var Qat=s(Wce);S9o=r(Qat,"transfo-xl"),Qat.forEach(t),R9o=r(kye," \u2014 "),WD=n(kye,"A",{href:!0});var Wat=s(WD);P9o=r(Wat,"TransfoXLForSequenceClassification"),Wat.forEach(t),B9o=r(kye," (Transformer-XL model)"),kye.forEach(t),I9o=i(j),ab=n(j,"LI",{});var Sye=s(ab);Hce=n(Sye,"STRONG",{});var Hat=s(Hce);q9o=r(Hat,"xlm"),Hat.forEach(t),N9o=r(Sye," \u2014 "),HD=n(Sye,"A",{href:!0});var Uat=s(HD);j9o=r(Uat,"XLMForSequenceClassification"),Uat.forEach(t),D9o=r(Sye," (XLM model)"),Sye.forEach(t),G9o=i(j),nb=n(j,"LI",{});var Rye=s(nb);Uce=n(Rye,"STRONG",{});var Jat=s(Uce);O9o=r(Jat,"xlm-roberta"),Jat.forEach(t),V9o=r(Rye," \u2014 "),UD=n(Rye,"A",{href:!0});var Yat=s(UD);X9o=r(Yat,"XLMRobertaForSequenceClassification"),Yat.forEach(t),z9o=r(Rye," (XLM-RoBERTa model)"),Rye.forEach(t),Q9o=i(j),sb=n(j,"LI",{});var Pye=s(sb);Jce=n(Pye,"STRONG",{});var Kat=s(Jce);W9o=r(Kat,"xlm-roberta-xl"),Kat.forEach(t),H9o=r(Pye," \u2014 "),JD=n(Pye,"A",{href:!0});var Zat=s(JD);U9o=r(Zat,"XLMRobertaXLForSequenceClassification"),Zat.forEach(t),J9o=r(Pye," (XLM-RoBERTa-XL model)"),Pye.forEach(t),Y9o=i(j),lb=n(j,"LI",{});var Bye=s(lb);Yce=n(Bye,"STRONG",{});var ent=s(Yce);K9o=r(ent,"xlnet"),ent.forEach(t),Z9o=r(Bye," \u2014 "),YD=n(Bye,"A",{href:!0});var ont=s(YD);e$o=r(ont,"XLNetForSequenceClassification"),ont.forEach(t),o$o=r(Bye," (XLNet model)"),Bye.forEach(t),r$o=i(j),ib=n(j,"LI",{});var Iye=s(ib);Kce=n(Iye,"STRONG",{});var rnt=s(Kce);t$o=r(rnt,"yoso"),rnt.forEach(t),a$o=r(Iye," \u2014 "),KD=n(Iye,"A",{href:!0});var tnt=s(KD);n$o=r(tnt,"YosoForSequenceClassification"),tnt.forEach(t),s$o=r(Iye," (YOSO model)"),Iye.forEach(t),j.forEach(t),l$o=i(aa),db=n(aa,"P",{});var qye=s(db);i$o=r(qye,"The model is set in evaluation mode by default using "),Zce=n(qye,"CODE",{});var ant=s(Zce);d$o=r(ant,"model.eval()"),ant.forEach(t),c$o=r(qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),efe=n(qye,"CODE",{});var nnt=s(efe);f$o=r(nnt,"model.train()"),nnt.forEach(t),qye.forEach(t),m$o=i(aa),T(cb.$$.fragment,aa),aa.forEach(t),zs.forEach(t),tIe=i(f),Di=n(f,"H2",{class:!0});var lNe=s(Di);fb=n(lNe,"A",{id:!0,class:!0,href:!0});var snt=s(fb);ofe=n(snt,"SPAN",{});var lnt=s(ofe);T(JA.$$.fragment,lnt),lnt.forEach(t),snt.forEach(t),g$o=i(lNe),rfe=n(lNe,"SPAN",{});var int=s(rfe);h$o=r(int,"AutoModelForMultipleChoice"),int.forEach(t),lNe.forEach(t),aIe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(YA.$$.fragment,Qs),p$o=i(Qs),Gi=n(Qs,"P",{});var _K=s(Gi);u$o=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZD=n(_K,"A",{href:!0});var dnt=s(ZD);_$o=r(dnt,"from_pretrained()"),dnt.forEach(t),b$o=r(_K," class method or the "),eG=n(_K,"A",{href:!0});var cnt=s(eG);v$o=r(cnt,"from_config()"),cnt.forEach(t),F$o=r(_K,` class
method.`),_K.forEach(t),T$o=i(Qs),KA=n(Qs,"P",{});var iNe=s(KA);M$o=r(iNe,"This class cannot be instantiated directly using "),tfe=n(iNe,"CODE",{});var fnt=s(tfe);E$o=r(fnt,"__init__()"),fnt.forEach(t),C$o=r(iNe," (throws an error)."),iNe.forEach(t),w$o=i(Qs),lt=n(Qs,"DIV",{class:!0});var d3=s(lt);T(ZA.$$.fragment,d3),A$o=i(d3),afe=n(d3,"P",{});var mnt=s(afe);y$o=r(mnt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mnt.forEach(t),L$o=i(d3),Oi=n(d3,"P",{});var bK=s(Oi);x$o=r(bK,`Note:
Loading a model from its configuration file does `),nfe=n(bK,"STRONG",{});var gnt=s(nfe);$$o=r(gnt,"not"),gnt.forEach(t),k$o=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=n(bK,"A",{href:!0});var hnt=s(oG);S$o=r(hnt,"from_pretrained()"),hnt.forEach(t),R$o=r(bK," to load the model weights."),bK.forEach(t),P$o=i(d3),T(mb.$$.fragment,d3),d3.forEach(t),B$o=i(Qs),eo=n(Qs,"DIV",{class:!0});var na=s(eo);T(e6.$$.fragment,na),I$o=i(na),sfe=n(na,"P",{});var pnt=s(sfe);q$o=r(pnt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pnt.forEach(t),N$o=i(na),Sa=n(na,"P",{});var c3=s(Sa);j$o=r(c3,"The model class to instantiate is selected based on the "),lfe=n(c3,"CODE",{});var unt=s(lfe);D$o=r(unt,"model_type"),unt.forEach(t),G$o=r(c3,` property of the config object (either
passed as an argument or loaded from `),ife=n(c3,"CODE",{});var _nt=s(ife);O$o=r(_nt,"pretrained_model_name_or_path"),_nt.forEach(t),V$o=r(c3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=n(c3,"CODE",{});var bnt=s(dfe);X$o=r(bnt,"pretrained_model_name_or_path"),bnt.forEach(t),z$o=r(c3,":"),c3.forEach(t),Q$o=i(na),Y=n(na,"UL",{});var K=s(Y);gb=n(K,"LI",{});var Nye=s(gb);cfe=n(Nye,"STRONG",{});var vnt=s(cfe);W$o=r(vnt,"albert"),vnt.forEach(t),H$o=r(Nye," \u2014 "),rG=n(Nye,"A",{href:!0});var Fnt=s(rG);U$o=r(Fnt,"AlbertForMultipleChoice"),Fnt.forEach(t),J$o=r(Nye," (ALBERT model)"),Nye.forEach(t),Y$o=i(K),hb=n(K,"LI",{});var jye=s(hb);ffe=n(jye,"STRONG",{});var Tnt=s(ffe);K$o=r(Tnt,"bert"),Tnt.forEach(t),Z$o=r(jye," \u2014 "),tG=n(jye,"A",{href:!0});var Mnt=s(tG);eko=r(Mnt,"BertForMultipleChoice"),Mnt.forEach(t),oko=r(jye," (BERT model)"),jye.forEach(t),rko=i(K),pb=n(K,"LI",{});var Dye=s(pb);mfe=n(Dye,"STRONG",{});var Ent=s(mfe);tko=r(Ent,"big_bird"),Ent.forEach(t),ako=r(Dye," \u2014 "),aG=n(Dye,"A",{href:!0});var Cnt=s(aG);nko=r(Cnt,"BigBirdForMultipleChoice"),Cnt.forEach(t),sko=r(Dye," (BigBird model)"),Dye.forEach(t),lko=i(K),ub=n(K,"LI",{});var Gye=s(ub);gfe=n(Gye,"STRONG",{});var wnt=s(gfe);iko=r(wnt,"camembert"),wnt.forEach(t),dko=r(Gye," \u2014 "),nG=n(Gye,"A",{href:!0});var Ant=s(nG);cko=r(Ant,"CamembertForMultipleChoice"),Ant.forEach(t),fko=r(Gye," (CamemBERT model)"),Gye.forEach(t),mko=i(K),_b=n(K,"LI",{});var Oye=s(_b);hfe=n(Oye,"STRONG",{});var ynt=s(hfe);gko=r(ynt,"canine"),ynt.forEach(t),hko=r(Oye," \u2014 "),sG=n(Oye,"A",{href:!0});var Lnt=s(sG);pko=r(Lnt,"CanineForMultipleChoice"),Lnt.forEach(t),uko=r(Oye," (Canine model)"),Oye.forEach(t),_ko=i(K),bb=n(K,"LI",{});var Vye=s(bb);pfe=n(Vye,"STRONG",{});var xnt=s(pfe);bko=r(xnt,"convbert"),xnt.forEach(t),vko=r(Vye," \u2014 "),lG=n(Vye,"A",{href:!0});var $nt=s(lG);Fko=r($nt,"ConvBertForMultipleChoice"),$nt.forEach(t),Tko=r(Vye," (ConvBERT model)"),Vye.forEach(t),Mko=i(K),vb=n(K,"LI",{});var Xye=s(vb);ufe=n(Xye,"STRONG",{});var knt=s(ufe);Eko=r(knt,"data2vec-text"),knt.forEach(t),Cko=r(Xye," \u2014 "),iG=n(Xye,"A",{href:!0});var Snt=s(iG);wko=r(Snt,"Data2VecTextForMultipleChoice"),Snt.forEach(t),Ako=r(Xye," (Data2VecText model)"),Xye.forEach(t),yko=i(K),Fb=n(K,"LI",{});var zye=s(Fb);_fe=n(zye,"STRONG",{});var Rnt=s(_fe);Lko=r(Rnt,"distilbert"),Rnt.forEach(t),xko=r(zye," \u2014 "),dG=n(zye,"A",{href:!0});var Pnt=s(dG);$ko=r(Pnt,"DistilBertForMultipleChoice"),Pnt.forEach(t),kko=r(zye," (DistilBERT model)"),zye.forEach(t),Sko=i(K),Tb=n(K,"LI",{});var Qye=s(Tb);bfe=n(Qye,"STRONG",{});var Bnt=s(bfe);Rko=r(Bnt,"electra"),Bnt.forEach(t),Pko=r(Qye," \u2014 "),cG=n(Qye,"A",{href:!0});var Int=s(cG);Bko=r(Int,"ElectraForMultipleChoice"),Int.forEach(t),Iko=r(Qye," (ELECTRA model)"),Qye.forEach(t),qko=i(K),Mb=n(K,"LI",{});var Wye=s(Mb);vfe=n(Wye,"STRONG",{});var qnt=s(vfe);Nko=r(qnt,"flaubert"),qnt.forEach(t),jko=r(Wye," \u2014 "),fG=n(Wye,"A",{href:!0});var Nnt=s(fG);Dko=r(Nnt,"FlaubertForMultipleChoice"),Nnt.forEach(t),Gko=r(Wye," (FlauBERT model)"),Wye.forEach(t),Oko=i(K),Eb=n(K,"LI",{});var Hye=s(Eb);Ffe=n(Hye,"STRONG",{});var jnt=s(Ffe);Vko=r(jnt,"fnet"),jnt.forEach(t),Xko=r(Hye," \u2014 "),mG=n(Hye,"A",{href:!0});var Dnt=s(mG);zko=r(Dnt,"FNetForMultipleChoice"),Dnt.forEach(t),Qko=r(Hye," (FNet model)"),Hye.forEach(t),Wko=i(K),Cb=n(K,"LI",{});var Uye=s(Cb);Tfe=n(Uye,"STRONG",{});var Gnt=s(Tfe);Hko=r(Gnt,"funnel"),Gnt.forEach(t),Uko=r(Uye," \u2014 "),gG=n(Uye,"A",{href:!0});var Ont=s(gG);Jko=r(Ont,"FunnelForMultipleChoice"),Ont.forEach(t),Yko=r(Uye," (Funnel Transformer model)"),Uye.forEach(t),Kko=i(K),wb=n(K,"LI",{});var Jye=s(wb);Mfe=n(Jye,"STRONG",{});var Vnt=s(Mfe);Zko=r(Vnt,"ibert"),Vnt.forEach(t),eSo=r(Jye," \u2014 "),hG=n(Jye,"A",{href:!0});var Xnt=s(hG);oSo=r(Xnt,"IBertForMultipleChoice"),Xnt.forEach(t),rSo=r(Jye," (I-BERT model)"),Jye.forEach(t),tSo=i(K),Ab=n(K,"LI",{});var Yye=s(Ab);Efe=n(Yye,"STRONG",{});var znt=s(Efe);aSo=r(znt,"longformer"),znt.forEach(t),nSo=r(Yye," \u2014 "),pG=n(Yye,"A",{href:!0});var Qnt=s(pG);sSo=r(Qnt,"LongformerForMultipleChoice"),Qnt.forEach(t),lSo=r(Yye," (Longformer model)"),Yye.forEach(t),iSo=i(K),yb=n(K,"LI",{});var Kye=s(yb);Cfe=n(Kye,"STRONG",{});var Wnt=s(Cfe);dSo=r(Wnt,"megatron-bert"),Wnt.forEach(t),cSo=r(Kye," \u2014 "),uG=n(Kye,"A",{href:!0});var Hnt=s(uG);fSo=r(Hnt,"MegatronBertForMultipleChoice"),Hnt.forEach(t),mSo=r(Kye," (MegatronBert model)"),Kye.forEach(t),gSo=i(K),Lb=n(K,"LI",{});var Zye=s(Lb);wfe=n(Zye,"STRONG",{});var Unt=s(wfe);hSo=r(Unt,"mobilebert"),Unt.forEach(t),pSo=r(Zye," \u2014 "),_G=n(Zye,"A",{href:!0});var Jnt=s(_G);uSo=r(Jnt,"MobileBertForMultipleChoice"),Jnt.forEach(t),_So=r(Zye," (MobileBERT model)"),Zye.forEach(t),bSo=i(K),xb=n(K,"LI",{});var eLe=s(xb);Afe=n(eLe,"STRONG",{});var Ynt=s(Afe);vSo=r(Ynt,"mpnet"),Ynt.forEach(t),FSo=r(eLe," \u2014 "),bG=n(eLe,"A",{href:!0});var Knt=s(bG);TSo=r(Knt,"MPNetForMultipleChoice"),Knt.forEach(t),MSo=r(eLe," (MPNet model)"),eLe.forEach(t),ESo=i(K),$b=n(K,"LI",{});var oLe=s($b);yfe=n(oLe,"STRONG",{});var Znt=s(yfe);CSo=r(Znt,"nystromformer"),Znt.forEach(t),wSo=r(oLe," \u2014 "),vG=n(oLe,"A",{href:!0});var est=s(vG);ASo=r(est,"NystromformerForMultipleChoice"),est.forEach(t),ySo=r(oLe," (Nystromformer model)"),oLe.forEach(t),LSo=i(K),kb=n(K,"LI",{});var rLe=s(kb);Lfe=n(rLe,"STRONG",{});var ost=s(Lfe);xSo=r(ost,"qdqbert"),ost.forEach(t),$So=r(rLe," \u2014 "),FG=n(rLe,"A",{href:!0});var rst=s(FG);kSo=r(rst,"QDQBertForMultipleChoice"),rst.forEach(t),SSo=r(rLe," (QDQBert model)"),rLe.forEach(t),RSo=i(K),Sb=n(K,"LI",{});var tLe=s(Sb);xfe=n(tLe,"STRONG",{});var tst=s(xfe);PSo=r(tst,"rembert"),tst.forEach(t),BSo=r(tLe," \u2014 "),TG=n(tLe,"A",{href:!0});var ast=s(TG);ISo=r(ast,"RemBertForMultipleChoice"),ast.forEach(t),qSo=r(tLe," (RemBERT model)"),tLe.forEach(t),NSo=i(K),Rb=n(K,"LI",{});var aLe=s(Rb);$fe=n(aLe,"STRONG",{});var nst=s($fe);jSo=r(nst,"roberta"),nst.forEach(t),DSo=r(aLe," \u2014 "),MG=n(aLe,"A",{href:!0});var sst=s(MG);GSo=r(sst,"RobertaForMultipleChoice"),sst.forEach(t),OSo=r(aLe," (RoBERTa model)"),aLe.forEach(t),VSo=i(K),Pb=n(K,"LI",{});var nLe=s(Pb);kfe=n(nLe,"STRONG",{});var lst=s(kfe);XSo=r(lst,"roformer"),lst.forEach(t),zSo=r(nLe," \u2014 "),EG=n(nLe,"A",{href:!0});var ist=s(EG);QSo=r(ist,"RoFormerForMultipleChoice"),ist.forEach(t),WSo=r(nLe," (RoFormer model)"),nLe.forEach(t),HSo=i(K),Bb=n(K,"LI",{});var sLe=s(Bb);Sfe=n(sLe,"STRONG",{});var dst=s(Sfe);USo=r(dst,"squeezebert"),dst.forEach(t),JSo=r(sLe," \u2014 "),CG=n(sLe,"A",{href:!0});var cst=s(CG);YSo=r(cst,"SqueezeBertForMultipleChoice"),cst.forEach(t),KSo=r(sLe," (SqueezeBERT model)"),sLe.forEach(t),ZSo=i(K),Ib=n(K,"LI",{});var lLe=s(Ib);Rfe=n(lLe,"STRONG",{});var fst=s(Rfe);eRo=r(fst,"xlm"),fst.forEach(t),oRo=r(lLe," \u2014 "),wG=n(lLe,"A",{href:!0});var mst=s(wG);rRo=r(mst,"XLMForMultipleChoice"),mst.forEach(t),tRo=r(lLe," (XLM model)"),lLe.forEach(t),aRo=i(K),qb=n(K,"LI",{});var iLe=s(qb);Pfe=n(iLe,"STRONG",{});var gst=s(Pfe);nRo=r(gst,"xlm-roberta"),gst.forEach(t),sRo=r(iLe," \u2014 "),AG=n(iLe,"A",{href:!0});var hst=s(AG);lRo=r(hst,"XLMRobertaForMultipleChoice"),hst.forEach(t),iRo=r(iLe," (XLM-RoBERTa model)"),iLe.forEach(t),dRo=i(K),Nb=n(K,"LI",{});var dLe=s(Nb);Bfe=n(dLe,"STRONG",{});var pst=s(Bfe);cRo=r(pst,"xlm-roberta-xl"),pst.forEach(t),fRo=r(dLe," \u2014 "),yG=n(dLe,"A",{href:!0});var ust=s(yG);mRo=r(ust,"XLMRobertaXLForMultipleChoice"),ust.forEach(t),gRo=r(dLe," (XLM-RoBERTa-XL model)"),dLe.forEach(t),hRo=i(K),jb=n(K,"LI",{});var cLe=s(jb);Ife=n(cLe,"STRONG",{});var _st=s(Ife);pRo=r(_st,"xlnet"),_st.forEach(t),uRo=r(cLe," \u2014 "),LG=n(cLe,"A",{href:!0});var bst=s(LG);_Ro=r(bst,"XLNetForMultipleChoice"),bst.forEach(t),bRo=r(cLe," (XLNet model)"),cLe.forEach(t),vRo=i(K),Db=n(K,"LI",{});var fLe=s(Db);qfe=n(fLe,"STRONG",{});var vst=s(qfe);FRo=r(vst,"yoso"),vst.forEach(t),TRo=r(fLe," \u2014 "),xG=n(fLe,"A",{href:!0});var Fst=s(xG);MRo=r(Fst,"YosoForMultipleChoice"),Fst.forEach(t),ERo=r(fLe," (YOSO model)"),fLe.forEach(t),K.forEach(t),CRo=i(na),Gb=n(na,"P",{});var mLe=s(Gb);wRo=r(mLe,"The model is set in evaluation mode by default using "),Nfe=n(mLe,"CODE",{});var Tst=s(Nfe);ARo=r(Tst,"model.eval()"),Tst.forEach(t),yRo=r(mLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jfe=n(mLe,"CODE",{});var Mst=s(jfe);LRo=r(Mst,"model.train()"),Mst.forEach(t),mLe.forEach(t),xRo=i(na),T(Ob.$$.fragment,na),na.forEach(t),Qs.forEach(t),nIe=i(f),Vi=n(f,"H2",{class:!0});var dNe=s(Vi);Vb=n(dNe,"A",{id:!0,class:!0,href:!0});var Est=s(Vb);Dfe=n(Est,"SPAN",{});var Cst=s(Dfe);T(o6.$$.fragment,Cst),Cst.forEach(t),Est.forEach(t),$Ro=i(dNe),Gfe=n(dNe,"SPAN",{});var wst=s(Gfe);kRo=r(wst,"AutoModelForNextSentencePrediction"),wst.forEach(t),dNe.forEach(t),sIe=i(f),Bo=n(f,"DIV",{class:!0});var Ws=s(Bo);T(r6.$$.fragment,Ws),SRo=i(Ws),Xi=n(Ws,"P",{});var vK=s(Xi);RRo=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$G=n(vK,"A",{href:!0});var Ast=s($G);PRo=r(Ast,"from_pretrained()"),Ast.forEach(t),BRo=r(vK," class method or the "),kG=n(vK,"A",{href:!0});var yst=s(kG);IRo=r(yst,"from_config()"),yst.forEach(t),qRo=r(vK,` class
method.`),vK.forEach(t),NRo=i(Ws),t6=n(Ws,"P",{});var cNe=s(t6);jRo=r(cNe,"This class cannot be instantiated directly using "),Ofe=n(cNe,"CODE",{});var Lst=s(Ofe);DRo=r(Lst,"__init__()"),Lst.forEach(t),GRo=r(cNe," (throws an error)."),cNe.forEach(t),ORo=i(Ws),it=n(Ws,"DIV",{class:!0});var f3=s(it);T(a6.$$.fragment,f3),VRo=i(f3),Vfe=n(f3,"P",{});var xst=s(Vfe);XRo=r(xst,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xst.forEach(t),zRo=i(f3),zi=n(f3,"P",{});var FK=s(zi);QRo=r(FK,`Note:
Loading a model from its configuration file does `),Xfe=n(FK,"STRONG",{});var $st=s(Xfe);WRo=r($st,"not"),$st.forEach(t),HRo=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=n(FK,"A",{href:!0});var kst=s(SG);URo=r(kst,"from_pretrained()"),kst.forEach(t),JRo=r(FK," to load the model weights."),FK.forEach(t),YRo=i(f3),T(Xb.$$.fragment,f3),f3.forEach(t),KRo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(n6.$$.fragment,sa),ZRo=i(sa),zfe=n(sa,"P",{});var Sst=s(zfe);ePo=r(Sst,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Sst.forEach(t),oPo=i(sa),Ra=n(sa,"P",{});var m3=s(Ra);rPo=r(m3,"The model class to instantiate is selected based on the "),Qfe=n(m3,"CODE",{});var Rst=s(Qfe);tPo=r(Rst,"model_type"),Rst.forEach(t),aPo=r(m3,` property of the config object (either
passed as an argument or loaded from `),Wfe=n(m3,"CODE",{});var Pst=s(Wfe);nPo=r(Pst,"pretrained_model_name_or_path"),Pst.forEach(t),sPo=r(m3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hfe=n(m3,"CODE",{});var Bst=s(Hfe);lPo=r(Bst,"pretrained_model_name_or_path"),Bst.forEach(t),iPo=r(m3,":"),m3.forEach(t),dPo=i(sa),Yr=n(sa,"UL",{});var Hs=s(Yr);zb=n(Hs,"LI",{});var gLe=s(zb);Ufe=n(gLe,"STRONG",{});var Ist=s(Ufe);cPo=r(Ist,"bert"),Ist.forEach(t),fPo=r(gLe," \u2014 "),RG=n(gLe,"A",{href:!0});var qst=s(RG);mPo=r(qst,"BertForNextSentencePrediction"),qst.forEach(t),gPo=r(gLe," (BERT model)"),gLe.forEach(t),hPo=i(Hs),Qb=n(Hs,"LI",{});var hLe=s(Qb);Jfe=n(hLe,"STRONG",{});var Nst=s(Jfe);pPo=r(Nst,"fnet"),Nst.forEach(t),uPo=r(hLe," \u2014 "),PG=n(hLe,"A",{href:!0});var jst=s(PG);_Po=r(jst,"FNetForNextSentencePrediction"),jst.forEach(t),bPo=r(hLe," (FNet model)"),hLe.forEach(t),vPo=i(Hs),Wb=n(Hs,"LI",{});var pLe=s(Wb);Yfe=n(pLe,"STRONG",{});var Dst=s(Yfe);FPo=r(Dst,"megatron-bert"),Dst.forEach(t),TPo=r(pLe," \u2014 "),BG=n(pLe,"A",{href:!0});var Gst=s(BG);MPo=r(Gst,"MegatronBertForNextSentencePrediction"),Gst.forEach(t),EPo=r(pLe," (MegatronBert model)"),pLe.forEach(t),CPo=i(Hs),Hb=n(Hs,"LI",{});var uLe=s(Hb);Kfe=n(uLe,"STRONG",{});var Ost=s(Kfe);wPo=r(Ost,"mobilebert"),Ost.forEach(t),APo=r(uLe," \u2014 "),IG=n(uLe,"A",{href:!0});var Vst=s(IG);yPo=r(Vst,"MobileBertForNextSentencePrediction"),Vst.forEach(t),LPo=r(uLe," (MobileBERT model)"),uLe.forEach(t),xPo=i(Hs),Ub=n(Hs,"LI",{});var _Le=s(Ub);Zfe=n(_Le,"STRONG",{});var Xst=s(Zfe);$Po=r(Xst,"qdqbert"),Xst.forEach(t),kPo=r(_Le," \u2014 "),qG=n(_Le,"A",{href:!0});var zst=s(qG);SPo=r(zst,"QDQBertForNextSentencePrediction"),zst.forEach(t),RPo=r(_Le," (QDQBert model)"),_Le.forEach(t),Hs.forEach(t),PPo=i(sa),Jb=n(sa,"P",{});var bLe=s(Jb);BPo=r(bLe,"The model is set in evaluation mode by default using "),eme=n(bLe,"CODE",{});var Qst=s(eme);IPo=r(Qst,"model.eval()"),Qst.forEach(t),qPo=r(bLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=n(bLe,"CODE",{});var Wst=s(ome);NPo=r(Wst,"model.train()"),Wst.forEach(t),bLe.forEach(t),jPo=i(sa),T(Yb.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),lIe=i(f),Qi=n(f,"H2",{class:!0});var fNe=s(Qi);Kb=n(fNe,"A",{id:!0,class:!0,href:!0});var Hst=s(Kb);rme=n(Hst,"SPAN",{});var Ust=s(rme);T(s6.$$.fragment,Ust),Ust.forEach(t),Hst.forEach(t),DPo=i(fNe),tme=n(fNe,"SPAN",{});var Jst=s(tme);GPo=r(Jst,"AutoModelForTokenClassification"),Jst.forEach(t),fNe.forEach(t),iIe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(l6.$$.fragment,Us),OPo=i(Us),Wi=n(Us,"P",{});var TK=s(Wi);VPo=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NG=n(TK,"A",{href:!0});var Yst=s(NG);XPo=r(Yst,"from_pretrained()"),Yst.forEach(t),zPo=r(TK," class method or the "),jG=n(TK,"A",{href:!0});var Kst=s(jG);QPo=r(Kst,"from_config()"),Kst.forEach(t),WPo=r(TK,` class
method.`),TK.forEach(t),HPo=i(Us),i6=n(Us,"P",{});var mNe=s(i6);UPo=r(mNe,"This class cannot be instantiated directly using "),ame=n(mNe,"CODE",{});var Zst=s(ame);JPo=r(Zst,"__init__()"),Zst.forEach(t),YPo=r(mNe," (throws an error)."),mNe.forEach(t),KPo=i(Us),dt=n(Us,"DIV",{class:!0});var g3=s(dt);T(d6.$$.fragment,g3),ZPo=i(g3),nme=n(g3,"P",{});var elt=s(nme);eBo=r(elt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),elt.forEach(t),oBo=i(g3),Hi=n(g3,"P",{});var MK=s(Hi);rBo=r(MK,`Note:
Loading a model from its configuration file does `),sme=n(MK,"STRONG",{});var olt=s(sme);tBo=r(olt,"not"),olt.forEach(t),aBo=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=n(MK,"A",{href:!0});var rlt=s(DG);nBo=r(rlt,"from_pretrained()"),rlt.forEach(t),sBo=r(MK," to load the model weights."),MK.forEach(t),lBo=i(g3),T(Zb.$$.fragment,g3),g3.forEach(t),iBo=i(Us),ro=n(Us,"DIV",{class:!0});var la=s(ro);T(c6.$$.fragment,la),dBo=i(la),lme=n(la,"P",{});var tlt=s(lme);cBo=r(tlt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tlt.forEach(t),fBo=i(la),Pa=n(la,"P",{});var h3=s(Pa);mBo=r(h3,"The model class to instantiate is selected based on the "),ime=n(h3,"CODE",{});var alt=s(ime);gBo=r(alt,"model_type"),alt.forEach(t),hBo=r(h3,` property of the config object (either
passed as an argument or loaded from `),dme=n(h3,"CODE",{});var nlt=s(dme);pBo=r(nlt,"pretrained_model_name_or_path"),nlt.forEach(t),uBo=r(h3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cme=n(h3,"CODE",{});var slt=s(cme);_Bo=r(slt,"pretrained_model_name_or_path"),slt.forEach(t),bBo=r(h3,":"),h3.forEach(t),vBo=i(la),U=n(la,"UL",{});var J=s(U);e2=n(J,"LI",{});var vLe=s(e2);fme=n(vLe,"STRONG",{});var llt=s(fme);FBo=r(llt,"albert"),llt.forEach(t),TBo=r(vLe," \u2014 "),GG=n(vLe,"A",{href:!0});var ilt=s(GG);MBo=r(ilt,"AlbertForTokenClassification"),ilt.forEach(t),EBo=r(vLe," (ALBERT model)"),vLe.forEach(t),CBo=i(J),o2=n(J,"LI",{});var FLe=s(o2);mme=n(FLe,"STRONG",{});var dlt=s(mme);wBo=r(dlt,"bert"),dlt.forEach(t),ABo=r(FLe," \u2014 "),OG=n(FLe,"A",{href:!0});var clt=s(OG);yBo=r(clt,"BertForTokenClassification"),clt.forEach(t),LBo=r(FLe," (BERT model)"),FLe.forEach(t),xBo=i(J),r2=n(J,"LI",{});var TLe=s(r2);gme=n(TLe,"STRONG",{});var flt=s(gme);$Bo=r(flt,"big_bird"),flt.forEach(t),kBo=r(TLe," \u2014 "),VG=n(TLe,"A",{href:!0});var mlt=s(VG);SBo=r(mlt,"BigBirdForTokenClassification"),mlt.forEach(t),RBo=r(TLe," (BigBird model)"),TLe.forEach(t),PBo=i(J),t2=n(J,"LI",{});var MLe=s(t2);hme=n(MLe,"STRONG",{});var glt=s(hme);BBo=r(glt,"camembert"),glt.forEach(t),IBo=r(MLe," \u2014 "),XG=n(MLe,"A",{href:!0});var hlt=s(XG);qBo=r(hlt,"CamembertForTokenClassification"),hlt.forEach(t),NBo=r(MLe," (CamemBERT model)"),MLe.forEach(t),jBo=i(J),a2=n(J,"LI",{});var ELe=s(a2);pme=n(ELe,"STRONG",{});var plt=s(pme);DBo=r(plt,"canine"),plt.forEach(t),GBo=r(ELe," \u2014 "),zG=n(ELe,"A",{href:!0});var ult=s(zG);OBo=r(ult,"CanineForTokenClassification"),ult.forEach(t),VBo=r(ELe," (Canine model)"),ELe.forEach(t),XBo=i(J),n2=n(J,"LI",{});var CLe=s(n2);ume=n(CLe,"STRONG",{});var _lt=s(ume);zBo=r(_lt,"convbert"),_lt.forEach(t),QBo=r(CLe," \u2014 "),QG=n(CLe,"A",{href:!0});var blt=s(QG);WBo=r(blt,"ConvBertForTokenClassification"),blt.forEach(t),HBo=r(CLe," (ConvBERT model)"),CLe.forEach(t),UBo=i(J),s2=n(J,"LI",{});var wLe=s(s2);_me=n(wLe,"STRONG",{});var vlt=s(_me);JBo=r(vlt,"data2vec-text"),vlt.forEach(t),YBo=r(wLe," \u2014 "),WG=n(wLe,"A",{href:!0});var Flt=s(WG);KBo=r(Flt,"Data2VecTextForTokenClassification"),Flt.forEach(t),ZBo=r(wLe," (Data2VecText model)"),wLe.forEach(t),eIo=i(J),l2=n(J,"LI",{});var ALe=s(l2);bme=n(ALe,"STRONG",{});var Tlt=s(bme);oIo=r(Tlt,"deberta"),Tlt.forEach(t),rIo=r(ALe," \u2014 "),HG=n(ALe,"A",{href:!0});var Mlt=s(HG);tIo=r(Mlt,"DebertaForTokenClassification"),Mlt.forEach(t),aIo=r(ALe," (DeBERTa model)"),ALe.forEach(t),nIo=i(J),i2=n(J,"LI",{});var yLe=s(i2);vme=n(yLe,"STRONG",{});var Elt=s(vme);sIo=r(Elt,"deberta-v2"),Elt.forEach(t),lIo=r(yLe," \u2014 "),UG=n(yLe,"A",{href:!0});var Clt=s(UG);iIo=r(Clt,"DebertaV2ForTokenClassification"),Clt.forEach(t),dIo=r(yLe," (DeBERTa-v2 model)"),yLe.forEach(t),cIo=i(J),d2=n(J,"LI",{});var LLe=s(d2);Fme=n(LLe,"STRONG",{});var wlt=s(Fme);fIo=r(wlt,"distilbert"),wlt.forEach(t),mIo=r(LLe," \u2014 "),JG=n(LLe,"A",{href:!0});var Alt=s(JG);gIo=r(Alt,"DistilBertForTokenClassification"),Alt.forEach(t),hIo=r(LLe," (DistilBERT model)"),LLe.forEach(t),pIo=i(J),c2=n(J,"LI",{});var xLe=s(c2);Tme=n(xLe,"STRONG",{});var ylt=s(Tme);uIo=r(ylt,"electra"),ylt.forEach(t),_Io=r(xLe," \u2014 "),YG=n(xLe,"A",{href:!0});var Llt=s(YG);bIo=r(Llt,"ElectraForTokenClassification"),Llt.forEach(t),vIo=r(xLe," (ELECTRA model)"),xLe.forEach(t),FIo=i(J),f2=n(J,"LI",{});var $Le=s(f2);Mme=n($Le,"STRONG",{});var xlt=s(Mme);TIo=r(xlt,"flaubert"),xlt.forEach(t),MIo=r($Le," \u2014 "),KG=n($Le,"A",{href:!0});var $lt=s(KG);EIo=r($lt,"FlaubertForTokenClassification"),$lt.forEach(t),CIo=r($Le," (FlauBERT model)"),$Le.forEach(t),wIo=i(J),m2=n(J,"LI",{});var kLe=s(m2);Eme=n(kLe,"STRONG",{});var klt=s(Eme);AIo=r(klt,"fnet"),klt.forEach(t),yIo=r(kLe," \u2014 "),ZG=n(kLe,"A",{href:!0});var Slt=s(ZG);LIo=r(Slt,"FNetForTokenClassification"),Slt.forEach(t),xIo=r(kLe," (FNet model)"),kLe.forEach(t),$Io=i(J),g2=n(J,"LI",{});var SLe=s(g2);Cme=n(SLe,"STRONG",{});var Rlt=s(Cme);kIo=r(Rlt,"funnel"),Rlt.forEach(t),SIo=r(SLe," \u2014 "),eO=n(SLe,"A",{href:!0});var Plt=s(eO);RIo=r(Plt,"FunnelForTokenClassification"),Plt.forEach(t),PIo=r(SLe," (Funnel Transformer model)"),SLe.forEach(t),BIo=i(J),h2=n(J,"LI",{});var RLe=s(h2);wme=n(RLe,"STRONG",{});var Blt=s(wme);IIo=r(Blt,"gpt2"),Blt.forEach(t),qIo=r(RLe," \u2014 "),oO=n(RLe,"A",{href:!0});var Ilt=s(oO);NIo=r(Ilt,"GPT2ForTokenClassification"),Ilt.forEach(t),jIo=r(RLe," (OpenAI GPT-2 model)"),RLe.forEach(t),DIo=i(J),p2=n(J,"LI",{});var PLe=s(p2);Ame=n(PLe,"STRONG",{});var qlt=s(Ame);GIo=r(qlt,"ibert"),qlt.forEach(t),OIo=r(PLe," \u2014 "),rO=n(PLe,"A",{href:!0});var Nlt=s(rO);VIo=r(Nlt,"IBertForTokenClassification"),Nlt.forEach(t),XIo=r(PLe," (I-BERT model)"),PLe.forEach(t),zIo=i(J),u2=n(J,"LI",{});var BLe=s(u2);yme=n(BLe,"STRONG",{});var jlt=s(yme);QIo=r(jlt,"layoutlm"),jlt.forEach(t),WIo=r(BLe," \u2014 "),tO=n(BLe,"A",{href:!0});var Dlt=s(tO);HIo=r(Dlt,"LayoutLMForTokenClassification"),Dlt.forEach(t),UIo=r(BLe," (LayoutLM model)"),BLe.forEach(t),JIo=i(J),_2=n(J,"LI",{});var ILe=s(_2);Lme=n(ILe,"STRONG",{});var Glt=s(Lme);YIo=r(Glt,"layoutlmv2"),Glt.forEach(t),KIo=r(ILe," \u2014 "),aO=n(ILe,"A",{href:!0});var Olt=s(aO);ZIo=r(Olt,"LayoutLMv2ForTokenClassification"),Olt.forEach(t),eqo=r(ILe," (LayoutLMv2 model)"),ILe.forEach(t),oqo=i(J),b2=n(J,"LI",{});var qLe=s(b2);xme=n(qLe,"STRONG",{});var Vlt=s(xme);rqo=r(Vlt,"longformer"),Vlt.forEach(t),tqo=r(qLe," \u2014 "),nO=n(qLe,"A",{href:!0});var Xlt=s(nO);aqo=r(Xlt,"LongformerForTokenClassification"),Xlt.forEach(t),nqo=r(qLe," (Longformer model)"),qLe.forEach(t),sqo=i(J),v2=n(J,"LI",{});var NLe=s(v2);$me=n(NLe,"STRONG",{});var zlt=s($me);lqo=r(zlt,"megatron-bert"),zlt.forEach(t),iqo=r(NLe," \u2014 "),sO=n(NLe,"A",{href:!0});var Qlt=s(sO);dqo=r(Qlt,"MegatronBertForTokenClassification"),Qlt.forEach(t),cqo=r(NLe," (MegatronBert model)"),NLe.forEach(t),fqo=i(J),F2=n(J,"LI",{});var jLe=s(F2);kme=n(jLe,"STRONG",{});var Wlt=s(kme);mqo=r(Wlt,"mobilebert"),Wlt.forEach(t),gqo=r(jLe," \u2014 "),lO=n(jLe,"A",{href:!0});var Hlt=s(lO);hqo=r(Hlt,"MobileBertForTokenClassification"),Hlt.forEach(t),pqo=r(jLe," (MobileBERT model)"),jLe.forEach(t),uqo=i(J),T2=n(J,"LI",{});var DLe=s(T2);Sme=n(DLe,"STRONG",{});var Ult=s(Sme);_qo=r(Ult,"mpnet"),Ult.forEach(t),bqo=r(DLe," \u2014 "),iO=n(DLe,"A",{href:!0});var Jlt=s(iO);vqo=r(Jlt,"MPNetForTokenClassification"),Jlt.forEach(t),Fqo=r(DLe," (MPNet model)"),DLe.forEach(t),Tqo=i(J),M2=n(J,"LI",{});var GLe=s(M2);Rme=n(GLe,"STRONG",{});var Ylt=s(Rme);Mqo=r(Ylt,"nystromformer"),Ylt.forEach(t),Eqo=r(GLe," \u2014 "),dO=n(GLe,"A",{href:!0});var Klt=s(dO);Cqo=r(Klt,"NystromformerForTokenClassification"),Klt.forEach(t),wqo=r(GLe," (Nystromformer model)"),GLe.forEach(t),Aqo=i(J),E2=n(J,"LI",{});var OLe=s(E2);Pme=n(OLe,"STRONG",{});var Zlt=s(Pme);yqo=r(Zlt,"qdqbert"),Zlt.forEach(t),Lqo=r(OLe," \u2014 "),cO=n(OLe,"A",{href:!0});var eit=s(cO);xqo=r(eit,"QDQBertForTokenClassification"),eit.forEach(t),$qo=r(OLe," (QDQBert model)"),OLe.forEach(t),kqo=i(J),C2=n(J,"LI",{});var VLe=s(C2);Bme=n(VLe,"STRONG",{});var oit=s(Bme);Sqo=r(oit,"rembert"),oit.forEach(t),Rqo=r(VLe," \u2014 "),fO=n(VLe,"A",{href:!0});var rit=s(fO);Pqo=r(rit,"RemBertForTokenClassification"),rit.forEach(t),Bqo=r(VLe," (RemBERT model)"),VLe.forEach(t),Iqo=i(J),w2=n(J,"LI",{});var XLe=s(w2);Ime=n(XLe,"STRONG",{});var tit=s(Ime);qqo=r(tit,"roberta"),tit.forEach(t),Nqo=r(XLe," \u2014 "),mO=n(XLe,"A",{href:!0});var ait=s(mO);jqo=r(ait,"RobertaForTokenClassification"),ait.forEach(t),Dqo=r(XLe," (RoBERTa model)"),XLe.forEach(t),Gqo=i(J),A2=n(J,"LI",{});var zLe=s(A2);qme=n(zLe,"STRONG",{});var nit=s(qme);Oqo=r(nit,"roformer"),nit.forEach(t),Vqo=r(zLe," \u2014 "),gO=n(zLe,"A",{href:!0});var sit=s(gO);Xqo=r(sit,"RoFormerForTokenClassification"),sit.forEach(t),zqo=r(zLe," (RoFormer model)"),zLe.forEach(t),Qqo=i(J),y2=n(J,"LI",{});var QLe=s(y2);Nme=n(QLe,"STRONG",{});var lit=s(Nme);Wqo=r(lit,"squeezebert"),lit.forEach(t),Hqo=r(QLe," \u2014 "),hO=n(QLe,"A",{href:!0});var iit=s(hO);Uqo=r(iit,"SqueezeBertForTokenClassification"),iit.forEach(t),Jqo=r(QLe," (SqueezeBERT model)"),QLe.forEach(t),Yqo=i(J),L2=n(J,"LI",{});var WLe=s(L2);jme=n(WLe,"STRONG",{});var dit=s(jme);Kqo=r(dit,"xlm"),dit.forEach(t),Zqo=r(WLe," \u2014 "),pO=n(WLe,"A",{href:!0});var cit=s(pO);eNo=r(cit,"XLMForTokenClassification"),cit.forEach(t),oNo=r(WLe," (XLM model)"),WLe.forEach(t),rNo=i(J),x2=n(J,"LI",{});var HLe=s(x2);Dme=n(HLe,"STRONG",{});var fit=s(Dme);tNo=r(fit,"xlm-roberta"),fit.forEach(t),aNo=r(HLe," \u2014 "),uO=n(HLe,"A",{href:!0});var mit=s(uO);nNo=r(mit,"XLMRobertaForTokenClassification"),mit.forEach(t),sNo=r(HLe," (XLM-RoBERTa model)"),HLe.forEach(t),lNo=i(J),$2=n(J,"LI",{});var ULe=s($2);Gme=n(ULe,"STRONG",{});var git=s(Gme);iNo=r(git,"xlm-roberta-xl"),git.forEach(t),dNo=r(ULe," \u2014 "),_O=n(ULe,"A",{href:!0});var hit=s(_O);cNo=r(hit,"XLMRobertaXLForTokenClassification"),hit.forEach(t),fNo=r(ULe," (XLM-RoBERTa-XL model)"),ULe.forEach(t),mNo=i(J),k2=n(J,"LI",{});var JLe=s(k2);Ome=n(JLe,"STRONG",{});var pit=s(Ome);gNo=r(pit,"xlnet"),pit.forEach(t),hNo=r(JLe," \u2014 "),bO=n(JLe,"A",{href:!0});var uit=s(bO);pNo=r(uit,"XLNetForTokenClassification"),uit.forEach(t),uNo=r(JLe," (XLNet model)"),JLe.forEach(t),_No=i(J),S2=n(J,"LI",{});var YLe=s(S2);Vme=n(YLe,"STRONG",{});var _it=s(Vme);bNo=r(_it,"yoso"),_it.forEach(t),vNo=r(YLe," \u2014 "),vO=n(YLe,"A",{href:!0});var bit=s(vO);FNo=r(bit,"YosoForTokenClassification"),bit.forEach(t),TNo=r(YLe," (YOSO model)"),YLe.forEach(t),J.forEach(t),MNo=i(la),R2=n(la,"P",{});var KLe=s(R2);ENo=r(KLe,"The model is set in evaluation mode by default using "),Xme=n(KLe,"CODE",{});var vit=s(Xme);CNo=r(vit,"model.eval()"),vit.forEach(t),wNo=r(KLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zme=n(KLe,"CODE",{});var Fit=s(zme);ANo=r(Fit,"model.train()"),Fit.forEach(t),KLe.forEach(t),yNo=i(la),T(P2.$$.fragment,la),la.forEach(t),Us.forEach(t),dIe=i(f),Ui=n(f,"H2",{class:!0});var gNe=s(Ui);B2=n(gNe,"A",{id:!0,class:!0,href:!0});var Tit=s(B2);Qme=n(Tit,"SPAN",{});var Mit=s(Qme);T(f6.$$.fragment,Mit),Mit.forEach(t),Tit.forEach(t),LNo=i(gNe),Wme=n(gNe,"SPAN",{});var Eit=s(Wme);xNo=r(Eit,"AutoModelForQuestionAnswering"),Eit.forEach(t),gNe.forEach(t),cIe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(m6.$$.fragment,Js),$No=i(Js),Ji=n(Js,"P",{});var EK=s(Ji);kNo=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FO=n(EK,"A",{href:!0});var Cit=s(FO);SNo=r(Cit,"from_pretrained()"),Cit.forEach(t),RNo=r(EK," class method or the "),TO=n(EK,"A",{href:!0});var wit=s(TO);PNo=r(wit,"from_config()"),wit.forEach(t),BNo=r(EK,` class
method.`),EK.forEach(t),INo=i(Js),g6=n(Js,"P",{});var hNe=s(g6);qNo=r(hNe,"This class cannot be instantiated directly using "),Hme=n(hNe,"CODE",{});var Ait=s(Hme);NNo=r(Ait,"__init__()"),Ait.forEach(t),jNo=r(hNe," (throws an error)."),hNe.forEach(t),DNo=i(Js),ct=n(Js,"DIV",{class:!0});var p3=s(ct);T(h6.$$.fragment,p3),GNo=i(p3),Ume=n(p3,"P",{});var yit=s(Ume);ONo=r(yit,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yit.forEach(t),VNo=i(p3),Yi=n(p3,"P",{});var CK=s(Yi);XNo=r(CK,`Note:
Loading a model from its configuration file does `),Jme=n(CK,"STRONG",{});var Lit=s(Jme);zNo=r(Lit,"not"),Lit.forEach(t),QNo=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MO=n(CK,"A",{href:!0});var xit=s(MO);WNo=r(xit,"from_pretrained()"),xit.forEach(t),HNo=r(CK," to load the model weights."),CK.forEach(t),UNo=i(p3),T(I2.$$.fragment,p3),p3.forEach(t),JNo=i(Js),to=n(Js,"DIV",{class:!0});var ia=s(to);T(p6.$$.fragment,ia),YNo=i(ia),Yme=n(ia,"P",{});var $it=s(Yme);KNo=r($it,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$it.forEach(t),ZNo=i(ia),Ba=n(ia,"P",{});var u3=s(Ba);ejo=r(u3,"The model class to instantiate is selected based on the "),Kme=n(u3,"CODE",{});var kit=s(Kme);ojo=r(kit,"model_type"),kit.forEach(t),rjo=r(u3,` property of the config object (either
passed as an argument or loaded from `),Zme=n(u3,"CODE",{});var Sit=s(Zme);tjo=r(Sit,"pretrained_model_name_or_path"),Sit.forEach(t),ajo=r(u3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ege=n(u3,"CODE",{});var Rit=s(ege);njo=r(Rit,"pretrained_model_name_or_path"),Rit.forEach(t),sjo=r(u3,":"),u3.forEach(t),ljo=i(ia),O=n(ia,"UL",{});var X=s(O);q2=n(X,"LI",{});var ZLe=s(q2);oge=n(ZLe,"STRONG",{});var Pit=s(oge);ijo=r(Pit,"albert"),Pit.forEach(t),djo=r(ZLe," \u2014 "),EO=n(ZLe,"A",{href:!0});var Bit=s(EO);cjo=r(Bit,"AlbertForQuestionAnswering"),Bit.forEach(t),fjo=r(ZLe," (ALBERT model)"),ZLe.forEach(t),mjo=i(X),N2=n(X,"LI",{});var exe=s(N2);rge=n(exe,"STRONG",{});var Iit=s(rge);gjo=r(Iit,"bart"),Iit.forEach(t),hjo=r(exe," \u2014 "),CO=n(exe,"A",{href:!0});var qit=s(CO);pjo=r(qit,"BartForQuestionAnswering"),qit.forEach(t),ujo=r(exe," (BART model)"),exe.forEach(t),_jo=i(X),j2=n(X,"LI",{});var oxe=s(j2);tge=n(oxe,"STRONG",{});var Nit=s(tge);bjo=r(Nit,"bert"),Nit.forEach(t),vjo=r(oxe," \u2014 "),wO=n(oxe,"A",{href:!0});var jit=s(wO);Fjo=r(jit,"BertForQuestionAnswering"),jit.forEach(t),Tjo=r(oxe," (BERT model)"),oxe.forEach(t),Mjo=i(X),D2=n(X,"LI",{});var rxe=s(D2);age=n(rxe,"STRONG",{});var Dit=s(age);Ejo=r(Dit,"big_bird"),Dit.forEach(t),Cjo=r(rxe," \u2014 "),AO=n(rxe,"A",{href:!0});var Git=s(AO);wjo=r(Git,"BigBirdForQuestionAnswering"),Git.forEach(t),Ajo=r(rxe," (BigBird model)"),rxe.forEach(t),yjo=i(X),G2=n(X,"LI",{});var txe=s(G2);nge=n(txe,"STRONG",{});var Oit=s(nge);Ljo=r(Oit,"bigbird_pegasus"),Oit.forEach(t),xjo=r(txe," \u2014 "),yO=n(txe,"A",{href:!0});var Vit=s(yO);$jo=r(Vit,"BigBirdPegasusForQuestionAnswering"),Vit.forEach(t),kjo=r(txe," (BigBirdPegasus model)"),txe.forEach(t),Sjo=i(X),O2=n(X,"LI",{});var axe=s(O2);sge=n(axe,"STRONG",{});var Xit=s(sge);Rjo=r(Xit,"camembert"),Xit.forEach(t),Pjo=r(axe," \u2014 "),LO=n(axe,"A",{href:!0});var zit=s(LO);Bjo=r(zit,"CamembertForQuestionAnswering"),zit.forEach(t),Ijo=r(axe," (CamemBERT model)"),axe.forEach(t),qjo=i(X),V2=n(X,"LI",{});var nxe=s(V2);lge=n(nxe,"STRONG",{});var Qit=s(lge);Njo=r(Qit,"canine"),Qit.forEach(t),jjo=r(nxe," \u2014 "),xO=n(nxe,"A",{href:!0});var Wit=s(xO);Djo=r(Wit,"CanineForQuestionAnswering"),Wit.forEach(t),Gjo=r(nxe," (Canine model)"),nxe.forEach(t),Ojo=i(X),X2=n(X,"LI",{});var sxe=s(X2);ige=n(sxe,"STRONG",{});var Hit=s(ige);Vjo=r(Hit,"convbert"),Hit.forEach(t),Xjo=r(sxe," \u2014 "),$O=n(sxe,"A",{href:!0});var Uit=s($O);zjo=r(Uit,"ConvBertForQuestionAnswering"),Uit.forEach(t),Qjo=r(sxe," (ConvBERT model)"),sxe.forEach(t),Wjo=i(X),z2=n(X,"LI",{});var lxe=s(z2);dge=n(lxe,"STRONG",{});var Jit=s(dge);Hjo=r(Jit,"data2vec-text"),Jit.forEach(t),Ujo=r(lxe," \u2014 "),kO=n(lxe,"A",{href:!0});var Yit=s(kO);Jjo=r(Yit,"Data2VecTextForQuestionAnswering"),Yit.forEach(t),Yjo=r(lxe," (Data2VecText model)"),lxe.forEach(t),Kjo=i(X),Q2=n(X,"LI",{});var ixe=s(Q2);cge=n(ixe,"STRONG",{});var Kit=s(cge);Zjo=r(Kit,"deberta"),Kit.forEach(t),eDo=r(ixe," \u2014 "),SO=n(ixe,"A",{href:!0});var Zit=s(SO);oDo=r(Zit,"DebertaForQuestionAnswering"),Zit.forEach(t),rDo=r(ixe," (DeBERTa model)"),ixe.forEach(t),tDo=i(X),W2=n(X,"LI",{});var dxe=s(W2);fge=n(dxe,"STRONG",{});var edt=s(fge);aDo=r(edt,"deberta-v2"),edt.forEach(t),nDo=r(dxe," \u2014 "),RO=n(dxe,"A",{href:!0});var odt=s(RO);sDo=r(odt,"DebertaV2ForQuestionAnswering"),odt.forEach(t),lDo=r(dxe," (DeBERTa-v2 model)"),dxe.forEach(t),iDo=i(X),H2=n(X,"LI",{});var cxe=s(H2);mge=n(cxe,"STRONG",{});var rdt=s(mge);dDo=r(rdt,"distilbert"),rdt.forEach(t),cDo=r(cxe," \u2014 "),PO=n(cxe,"A",{href:!0});var tdt=s(PO);fDo=r(tdt,"DistilBertForQuestionAnswering"),tdt.forEach(t),mDo=r(cxe," (DistilBERT model)"),cxe.forEach(t),gDo=i(X),U2=n(X,"LI",{});var fxe=s(U2);gge=n(fxe,"STRONG",{});var adt=s(gge);hDo=r(adt,"electra"),adt.forEach(t),pDo=r(fxe," \u2014 "),BO=n(fxe,"A",{href:!0});var ndt=s(BO);uDo=r(ndt,"ElectraForQuestionAnswering"),ndt.forEach(t),_Do=r(fxe," (ELECTRA model)"),fxe.forEach(t),bDo=i(X),J2=n(X,"LI",{});var mxe=s(J2);hge=n(mxe,"STRONG",{});var sdt=s(hge);vDo=r(sdt,"flaubert"),sdt.forEach(t),FDo=r(mxe," \u2014 "),IO=n(mxe,"A",{href:!0});var ldt=s(IO);TDo=r(ldt,"FlaubertForQuestionAnsweringSimple"),ldt.forEach(t),MDo=r(mxe," (FlauBERT model)"),mxe.forEach(t),EDo=i(X),Y2=n(X,"LI",{});var gxe=s(Y2);pge=n(gxe,"STRONG",{});var idt=s(pge);CDo=r(idt,"fnet"),idt.forEach(t),wDo=r(gxe," \u2014 "),qO=n(gxe,"A",{href:!0});var ddt=s(qO);ADo=r(ddt,"FNetForQuestionAnswering"),ddt.forEach(t),yDo=r(gxe," (FNet model)"),gxe.forEach(t),LDo=i(X),K2=n(X,"LI",{});var hxe=s(K2);uge=n(hxe,"STRONG",{});var cdt=s(uge);xDo=r(cdt,"funnel"),cdt.forEach(t),$Do=r(hxe," \u2014 "),NO=n(hxe,"A",{href:!0});var fdt=s(NO);kDo=r(fdt,"FunnelForQuestionAnswering"),fdt.forEach(t),SDo=r(hxe," (Funnel Transformer model)"),hxe.forEach(t),RDo=i(X),Z2=n(X,"LI",{});var pxe=s(Z2);_ge=n(pxe,"STRONG",{});var mdt=s(_ge);PDo=r(mdt,"gptj"),mdt.forEach(t),BDo=r(pxe," \u2014 "),jO=n(pxe,"A",{href:!0});var gdt=s(jO);IDo=r(gdt,"GPTJForQuestionAnswering"),gdt.forEach(t),qDo=r(pxe," (GPT-J model)"),pxe.forEach(t),NDo=i(X),ev=n(X,"LI",{});var uxe=s(ev);bge=n(uxe,"STRONG",{});var hdt=s(bge);jDo=r(hdt,"ibert"),hdt.forEach(t),DDo=r(uxe," \u2014 "),DO=n(uxe,"A",{href:!0});var pdt=s(DO);GDo=r(pdt,"IBertForQuestionAnswering"),pdt.forEach(t),ODo=r(uxe," (I-BERT model)"),uxe.forEach(t),VDo=i(X),ov=n(X,"LI",{});var _xe=s(ov);vge=n(_xe,"STRONG",{});var udt=s(vge);XDo=r(udt,"layoutlmv2"),udt.forEach(t),zDo=r(_xe," \u2014 "),GO=n(_xe,"A",{href:!0});var _dt=s(GO);QDo=r(_dt,"LayoutLMv2ForQuestionAnswering"),_dt.forEach(t),WDo=r(_xe," (LayoutLMv2 model)"),_xe.forEach(t),HDo=i(X),rv=n(X,"LI",{});var bxe=s(rv);Fge=n(bxe,"STRONG",{});var bdt=s(Fge);UDo=r(bdt,"led"),bdt.forEach(t),JDo=r(bxe," \u2014 "),OO=n(bxe,"A",{href:!0});var vdt=s(OO);YDo=r(vdt,"LEDForQuestionAnswering"),vdt.forEach(t),KDo=r(bxe," (LED model)"),bxe.forEach(t),ZDo=i(X),tv=n(X,"LI",{});var vxe=s(tv);Tge=n(vxe,"STRONG",{});var Fdt=s(Tge);eGo=r(Fdt,"longformer"),Fdt.forEach(t),oGo=r(vxe," \u2014 "),VO=n(vxe,"A",{href:!0});var Tdt=s(VO);rGo=r(Tdt,"LongformerForQuestionAnswering"),Tdt.forEach(t),tGo=r(vxe," (Longformer model)"),vxe.forEach(t),aGo=i(X),av=n(X,"LI",{});var Fxe=s(av);Mge=n(Fxe,"STRONG",{});var Mdt=s(Mge);nGo=r(Mdt,"lxmert"),Mdt.forEach(t),sGo=r(Fxe," \u2014 "),XO=n(Fxe,"A",{href:!0});var Edt=s(XO);lGo=r(Edt,"LxmertForQuestionAnswering"),Edt.forEach(t),iGo=r(Fxe," (LXMERT model)"),Fxe.forEach(t),dGo=i(X),nv=n(X,"LI",{});var Txe=s(nv);Ege=n(Txe,"STRONG",{});var Cdt=s(Ege);cGo=r(Cdt,"mbart"),Cdt.forEach(t),fGo=r(Txe," \u2014 "),zO=n(Txe,"A",{href:!0});var wdt=s(zO);mGo=r(wdt,"MBartForQuestionAnswering"),wdt.forEach(t),gGo=r(Txe," (mBART model)"),Txe.forEach(t),hGo=i(X),sv=n(X,"LI",{});var Mxe=s(sv);Cge=n(Mxe,"STRONG",{});var Adt=s(Cge);pGo=r(Adt,"megatron-bert"),Adt.forEach(t),uGo=r(Mxe," \u2014 "),QO=n(Mxe,"A",{href:!0});var ydt=s(QO);_Go=r(ydt,"MegatronBertForQuestionAnswering"),ydt.forEach(t),bGo=r(Mxe," (MegatronBert model)"),Mxe.forEach(t),vGo=i(X),lv=n(X,"LI",{});var Exe=s(lv);wge=n(Exe,"STRONG",{});var Ldt=s(wge);FGo=r(Ldt,"mobilebert"),Ldt.forEach(t),TGo=r(Exe," \u2014 "),WO=n(Exe,"A",{href:!0});var xdt=s(WO);MGo=r(xdt,"MobileBertForQuestionAnswering"),xdt.forEach(t),EGo=r(Exe," (MobileBERT model)"),Exe.forEach(t),CGo=i(X),iv=n(X,"LI",{});var Cxe=s(iv);Age=n(Cxe,"STRONG",{});var $dt=s(Age);wGo=r($dt,"mpnet"),$dt.forEach(t),AGo=r(Cxe," \u2014 "),HO=n(Cxe,"A",{href:!0});var kdt=s(HO);yGo=r(kdt,"MPNetForQuestionAnswering"),kdt.forEach(t),LGo=r(Cxe," (MPNet model)"),Cxe.forEach(t),xGo=i(X),dv=n(X,"LI",{});var wxe=s(dv);yge=n(wxe,"STRONG",{});var Sdt=s(yge);$Go=r(Sdt,"nystromformer"),Sdt.forEach(t),kGo=r(wxe," \u2014 "),UO=n(wxe,"A",{href:!0});var Rdt=s(UO);SGo=r(Rdt,"NystromformerForQuestionAnswering"),Rdt.forEach(t),RGo=r(wxe," (Nystromformer model)"),wxe.forEach(t),PGo=i(X),cv=n(X,"LI",{});var Axe=s(cv);Lge=n(Axe,"STRONG",{});var Pdt=s(Lge);BGo=r(Pdt,"qdqbert"),Pdt.forEach(t),IGo=r(Axe," \u2014 "),JO=n(Axe,"A",{href:!0});var Bdt=s(JO);qGo=r(Bdt,"QDQBertForQuestionAnswering"),Bdt.forEach(t),NGo=r(Axe," (QDQBert model)"),Axe.forEach(t),jGo=i(X),fv=n(X,"LI",{});var yxe=s(fv);xge=n(yxe,"STRONG",{});var Idt=s(xge);DGo=r(Idt,"reformer"),Idt.forEach(t),GGo=r(yxe," \u2014 "),YO=n(yxe,"A",{href:!0});var qdt=s(YO);OGo=r(qdt,"ReformerForQuestionAnswering"),qdt.forEach(t),VGo=r(yxe," (Reformer model)"),yxe.forEach(t),XGo=i(X),mv=n(X,"LI",{});var Lxe=s(mv);$ge=n(Lxe,"STRONG",{});var Ndt=s($ge);zGo=r(Ndt,"rembert"),Ndt.forEach(t),QGo=r(Lxe," \u2014 "),KO=n(Lxe,"A",{href:!0});var jdt=s(KO);WGo=r(jdt,"RemBertForQuestionAnswering"),jdt.forEach(t),HGo=r(Lxe," (RemBERT model)"),Lxe.forEach(t),UGo=i(X),gv=n(X,"LI",{});var xxe=s(gv);kge=n(xxe,"STRONG",{});var Ddt=s(kge);JGo=r(Ddt,"roberta"),Ddt.forEach(t),YGo=r(xxe," \u2014 "),ZO=n(xxe,"A",{href:!0});var Gdt=s(ZO);KGo=r(Gdt,"RobertaForQuestionAnswering"),Gdt.forEach(t),ZGo=r(xxe," (RoBERTa model)"),xxe.forEach(t),eOo=i(X),hv=n(X,"LI",{});var $xe=s(hv);Sge=n($xe,"STRONG",{});var Odt=s(Sge);oOo=r(Odt,"roformer"),Odt.forEach(t),rOo=r($xe," \u2014 "),eV=n($xe,"A",{href:!0});var Vdt=s(eV);tOo=r(Vdt,"RoFormerForQuestionAnswering"),Vdt.forEach(t),aOo=r($xe," (RoFormer model)"),$xe.forEach(t),nOo=i(X),pv=n(X,"LI",{});var kxe=s(pv);Rge=n(kxe,"STRONG",{});var Xdt=s(Rge);sOo=r(Xdt,"splinter"),Xdt.forEach(t),lOo=r(kxe," \u2014 "),oV=n(kxe,"A",{href:!0});var zdt=s(oV);iOo=r(zdt,"SplinterForQuestionAnswering"),zdt.forEach(t),dOo=r(kxe," (Splinter model)"),kxe.forEach(t),cOo=i(X),uv=n(X,"LI",{});var Sxe=s(uv);Pge=n(Sxe,"STRONG",{});var Qdt=s(Pge);fOo=r(Qdt,"squeezebert"),Qdt.forEach(t),mOo=r(Sxe," \u2014 "),rV=n(Sxe,"A",{href:!0});var Wdt=s(rV);gOo=r(Wdt,"SqueezeBertForQuestionAnswering"),Wdt.forEach(t),hOo=r(Sxe," (SqueezeBERT model)"),Sxe.forEach(t),pOo=i(X),_v=n(X,"LI",{});var Rxe=s(_v);Bge=n(Rxe,"STRONG",{});var Hdt=s(Bge);uOo=r(Hdt,"xlm"),Hdt.forEach(t),_Oo=r(Rxe," \u2014 "),tV=n(Rxe,"A",{href:!0});var Udt=s(tV);bOo=r(Udt,"XLMForQuestionAnsweringSimple"),Udt.forEach(t),vOo=r(Rxe," (XLM model)"),Rxe.forEach(t),FOo=i(X),bv=n(X,"LI",{});var Pxe=s(bv);Ige=n(Pxe,"STRONG",{});var Jdt=s(Ige);TOo=r(Jdt,"xlm-roberta"),Jdt.forEach(t),MOo=r(Pxe," \u2014 "),aV=n(Pxe,"A",{href:!0});var Ydt=s(aV);EOo=r(Ydt,"XLMRobertaForQuestionAnswering"),Ydt.forEach(t),COo=r(Pxe," (XLM-RoBERTa model)"),Pxe.forEach(t),wOo=i(X),vv=n(X,"LI",{});var Bxe=s(vv);qge=n(Bxe,"STRONG",{});var Kdt=s(qge);AOo=r(Kdt,"xlm-roberta-xl"),Kdt.forEach(t),yOo=r(Bxe," \u2014 "),nV=n(Bxe,"A",{href:!0});var Zdt=s(nV);LOo=r(Zdt,"XLMRobertaXLForQuestionAnswering"),Zdt.forEach(t),xOo=r(Bxe," (XLM-RoBERTa-XL model)"),Bxe.forEach(t),$Oo=i(X),Fv=n(X,"LI",{});var Ixe=s(Fv);Nge=n(Ixe,"STRONG",{});var ect=s(Nge);kOo=r(ect,"xlnet"),ect.forEach(t),SOo=r(Ixe," \u2014 "),sV=n(Ixe,"A",{href:!0});var oct=s(sV);ROo=r(oct,"XLNetForQuestionAnsweringSimple"),oct.forEach(t),POo=r(Ixe," (XLNet model)"),Ixe.forEach(t),BOo=i(X),Tv=n(X,"LI",{});var qxe=s(Tv);jge=n(qxe,"STRONG",{});var rct=s(jge);IOo=r(rct,"yoso"),rct.forEach(t),qOo=r(qxe," \u2014 "),lV=n(qxe,"A",{href:!0});var tct=s(lV);NOo=r(tct,"YosoForQuestionAnswering"),tct.forEach(t),jOo=r(qxe," (YOSO model)"),qxe.forEach(t),X.forEach(t),DOo=i(ia),Mv=n(ia,"P",{});var Nxe=s(Mv);GOo=r(Nxe,"The model is set in evaluation mode by default using "),Dge=n(Nxe,"CODE",{});var act=s(Dge);OOo=r(act,"model.eval()"),act.forEach(t),VOo=r(Nxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gge=n(Nxe,"CODE",{});var nct=s(Gge);XOo=r(nct,"model.train()"),nct.forEach(t),Nxe.forEach(t),zOo=i(ia),T(Ev.$$.fragment,ia),ia.forEach(t),Js.forEach(t),fIe=i(f),Ki=n(f,"H2",{class:!0});var pNe=s(Ki);Cv=n(pNe,"A",{id:!0,class:!0,href:!0});var sct=s(Cv);Oge=n(sct,"SPAN",{});var lct=s(Oge);T(u6.$$.fragment,lct),lct.forEach(t),sct.forEach(t),QOo=i(pNe),Vge=n(pNe,"SPAN",{});var ict=s(Vge);WOo=r(ict,"AutoModelForTableQuestionAnswering"),ict.forEach(t),pNe.forEach(t),mIe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(_6.$$.fragment,Ys),HOo=i(Ys),Zi=n(Ys,"P",{});var wK=s(Zi);UOo=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iV=n(wK,"A",{href:!0});var dct=s(iV);JOo=r(dct,"from_pretrained()"),dct.forEach(t),YOo=r(wK," class method or the "),dV=n(wK,"A",{href:!0});var cct=s(dV);KOo=r(cct,"from_config()"),cct.forEach(t),ZOo=r(wK,` class
method.`),wK.forEach(t),eVo=i(Ys),b6=n(Ys,"P",{});var uNe=s(b6);oVo=r(uNe,"This class cannot be instantiated directly using "),Xge=n(uNe,"CODE",{});var fct=s(Xge);rVo=r(fct,"__init__()"),fct.forEach(t),tVo=r(uNe," (throws an error)."),uNe.forEach(t),aVo=i(Ys),ft=n(Ys,"DIV",{class:!0});var _3=s(ft);T(v6.$$.fragment,_3),nVo=i(_3),zge=n(_3,"P",{});var mct=s(zge);sVo=r(mct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),mct.forEach(t),lVo=i(_3),ed=n(_3,"P",{});var AK=s(ed);iVo=r(AK,`Note:
Loading a model from its configuration file does `),Qge=n(AK,"STRONG",{});var gct=s(Qge);dVo=r(gct,"not"),gct.forEach(t),cVo=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=n(AK,"A",{href:!0});var hct=s(cV);fVo=r(hct,"from_pretrained()"),hct.forEach(t),mVo=r(AK," to load the model weights."),AK.forEach(t),gVo=i(_3),T(wv.$$.fragment,_3),_3.forEach(t),hVo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(F6.$$.fragment,da),pVo=i(da),Wge=n(da,"P",{});var pct=s(Wge);uVo=r(pct,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pct.forEach(t),_Vo=i(da),Ia=n(da,"P",{});var b3=s(Ia);bVo=r(b3,"The model class to instantiate is selected based on the "),Hge=n(b3,"CODE",{});var uct=s(Hge);vVo=r(uct,"model_type"),uct.forEach(t),FVo=r(b3,` property of the config object (either
passed as an argument or loaded from `),Uge=n(b3,"CODE",{});var _ct=s(Uge);TVo=r(_ct,"pretrained_model_name_or_path"),_ct.forEach(t),MVo=r(b3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jge=n(b3,"CODE",{});var bct=s(Jge);EVo=r(bct,"pretrained_model_name_or_path"),bct.forEach(t),CVo=r(b3,":"),b3.forEach(t),wVo=i(da),Yge=n(da,"UL",{});var vct=s(Yge);Av=n(vct,"LI",{});var jxe=s(Av);Kge=n(jxe,"STRONG",{});var Fct=s(Kge);AVo=r(Fct,"tapas"),Fct.forEach(t),yVo=r(jxe," \u2014 "),fV=n(jxe,"A",{href:!0});var Tct=s(fV);LVo=r(Tct,"TapasForQuestionAnswering"),Tct.forEach(t),xVo=r(jxe," (TAPAS model)"),jxe.forEach(t),vct.forEach(t),$Vo=i(da),yv=n(da,"P",{});var Dxe=s(yv);kVo=r(Dxe,"The model is set in evaluation mode by default using "),Zge=n(Dxe,"CODE",{});var Mct=s(Zge);SVo=r(Mct,"model.eval()"),Mct.forEach(t),RVo=r(Dxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ehe=n(Dxe,"CODE",{});var Ect=s(ehe);PVo=r(Ect,"model.train()"),Ect.forEach(t),Dxe.forEach(t),BVo=i(da),T(Lv.$$.fragment,da),da.forEach(t),Ys.forEach(t),gIe=i(f),od=n(f,"H2",{class:!0});var _Ne=s(od);xv=n(_Ne,"A",{id:!0,class:!0,href:!0});var Cct=s(xv);ohe=n(Cct,"SPAN",{});var wct=s(ohe);T(T6.$$.fragment,wct),wct.forEach(t),Cct.forEach(t),IVo=i(_Ne),rhe=n(_Ne,"SPAN",{});var Act=s(rhe);qVo=r(Act,"AutoModelForImageClassification"),Act.forEach(t),_Ne.forEach(t),hIe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(M6.$$.fragment,Ks),NVo=i(Ks),rd=n(Ks,"P",{});var yK=s(rd);jVo=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mV=n(yK,"A",{href:!0});var yct=s(mV);DVo=r(yct,"from_pretrained()"),yct.forEach(t),GVo=r(yK," class method or the "),gV=n(yK,"A",{href:!0});var Lct=s(gV);OVo=r(Lct,"from_config()"),Lct.forEach(t),VVo=r(yK,` class
method.`),yK.forEach(t),XVo=i(Ks),E6=n(Ks,"P",{});var bNe=s(E6);zVo=r(bNe,"This class cannot be instantiated directly using "),the=n(bNe,"CODE",{});var xct=s(the);QVo=r(xct,"__init__()"),xct.forEach(t),WVo=r(bNe," (throws an error)."),bNe.forEach(t),HVo=i(Ks),mt=n(Ks,"DIV",{class:!0});var v3=s(mt);T(C6.$$.fragment,v3),UVo=i(v3),ahe=n(v3,"P",{});var $ct=s(ahe);JVo=r($ct,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$ct.forEach(t),YVo=i(v3),td=n(v3,"P",{});var LK=s(td);KVo=r(LK,`Note:
Loading a model from its configuration file does `),nhe=n(LK,"STRONG",{});var kct=s(nhe);ZVo=r(kct,"not"),kct.forEach(t),eXo=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=n(LK,"A",{href:!0});var Sct=s(hV);oXo=r(Sct,"from_pretrained()"),Sct.forEach(t),rXo=r(LK," to load the model weights."),LK.forEach(t),tXo=i(v3),T($v.$$.fragment,v3),v3.forEach(t),aXo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(w6.$$.fragment,ca),nXo=i(ca),she=n(ca,"P",{});var Rct=s(she);sXo=r(Rct,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rct.forEach(t),lXo=i(ca),qa=n(ca,"P",{});var F3=s(qa);iXo=r(F3,"The model class to instantiate is selected based on the "),lhe=n(F3,"CODE",{});var Pct=s(lhe);dXo=r(Pct,"model_type"),Pct.forEach(t),cXo=r(F3,` property of the config object (either
passed as an argument or loaded from `),ihe=n(F3,"CODE",{});var Bct=s(ihe);fXo=r(Bct,"pretrained_model_name_or_path"),Bct.forEach(t),mXo=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=n(F3,"CODE",{});var Ict=s(dhe);gXo=r(Ict,"pretrained_model_name_or_path"),Ict.forEach(t),hXo=r(F3,":"),F3.forEach(t),pXo=i(ca),ve=n(ca,"UL",{});var Ee=s(ve);kv=n(Ee,"LI",{});var Gxe=s(kv);che=n(Gxe,"STRONG",{});var qct=s(che);uXo=r(qct,"beit"),qct.forEach(t),_Xo=r(Gxe," \u2014 "),pV=n(Gxe,"A",{href:!0});var Nct=s(pV);bXo=r(Nct,"BeitForImageClassification"),Nct.forEach(t),vXo=r(Gxe," (BEiT model)"),Gxe.forEach(t),FXo=i(Ee),Sv=n(Ee,"LI",{});var Oxe=s(Sv);fhe=n(Oxe,"STRONG",{});var jct=s(fhe);TXo=r(jct,"convnext"),jct.forEach(t),MXo=r(Oxe," \u2014 "),uV=n(Oxe,"A",{href:!0});var Dct=s(uV);EXo=r(Dct,"ConvNextForImageClassification"),Dct.forEach(t),CXo=r(Oxe," (ConvNext model)"),Oxe.forEach(t),wXo=i(Ee),Rv=n(Ee,"LI",{});var Vxe=s(Rv);mhe=n(Vxe,"STRONG",{});var Gct=s(mhe);AXo=r(Gct,"data2vec-vision"),Gct.forEach(t),yXo=r(Vxe," \u2014 "),_V=n(Vxe,"A",{href:!0});var Oct=s(_V);LXo=r(Oct,"Data2VecVisionForImageClassification"),Oct.forEach(t),xXo=r(Vxe," (Data2VecVision model)"),Vxe.forEach(t),$Xo=i(Ee),Ps=n(Ee,"LI",{});var c$=s(Ps);ghe=n(c$,"STRONG",{});var Vct=s(ghe);kXo=r(Vct,"deit"),Vct.forEach(t),SXo=r(c$," \u2014 "),bV=n(c$,"A",{href:!0});var Xct=s(bV);RXo=r(Xct,"DeiTForImageClassification"),Xct.forEach(t),PXo=r(c$," or "),vV=n(c$,"A",{href:!0});var zct=s(vV);BXo=r(zct,"DeiTForImageClassificationWithTeacher"),zct.forEach(t),IXo=r(c$," (DeiT model)"),c$.forEach(t),qXo=i(Ee),Pv=n(Ee,"LI",{});var Xxe=s(Pv);hhe=n(Xxe,"STRONG",{});var Qct=s(hhe);NXo=r(Qct,"imagegpt"),Qct.forEach(t),jXo=r(Xxe," \u2014 "),FV=n(Xxe,"A",{href:!0});var Wct=s(FV);DXo=r(Wct,"ImageGPTForImageClassification"),Wct.forEach(t),GXo=r(Xxe," (ImageGPT model)"),Xxe.forEach(t),OXo=i(Ee),gt=n(Ee,"LI",{});var mf=s(gt);phe=n(mf,"STRONG",{});var Hct=s(phe);VXo=r(Hct,"perceiver"),Hct.forEach(t),XXo=r(mf," \u2014 "),TV=n(mf,"A",{href:!0});var Uct=s(TV);zXo=r(Uct,"PerceiverForImageClassificationLearned"),Uct.forEach(t),QXo=r(mf," or "),MV=n(mf,"A",{href:!0});var Jct=s(MV);WXo=r(Jct,"PerceiverForImageClassificationFourier"),Jct.forEach(t),HXo=r(mf," or "),EV=n(mf,"A",{href:!0});var Yct=s(EV);UXo=r(Yct,"PerceiverForImageClassificationConvProcessing"),Yct.forEach(t),JXo=r(mf," (Perceiver model)"),mf.forEach(t),YXo=i(Ee),Bv=n(Ee,"LI",{});var zxe=s(Bv);uhe=n(zxe,"STRONG",{});var Kct=s(uhe);KXo=r(Kct,"poolformer"),Kct.forEach(t),ZXo=r(zxe," \u2014 "),CV=n(zxe,"A",{href:!0});var Zct=s(CV);ezo=r(Zct,"PoolFormerForImageClassification"),Zct.forEach(t),ozo=r(zxe," (PoolFormer model)"),zxe.forEach(t),rzo=i(Ee),Iv=n(Ee,"LI",{});var Qxe=s(Iv);_he=n(Qxe,"STRONG",{});var eft=s(_he);tzo=r(eft,"regnet"),eft.forEach(t),azo=r(Qxe," \u2014 "),wV=n(Qxe,"A",{href:!0});var oft=s(wV);nzo=r(oft,"RegNetForImageClassification"),oft.forEach(t),szo=r(Qxe," (RegNet model)"),Qxe.forEach(t),lzo=i(Ee),qv=n(Ee,"LI",{});var Wxe=s(qv);bhe=n(Wxe,"STRONG",{});var rft=s(bhe);izo=r(rft,"resnet"),rft.forEach(t),dzo=r(Wxe," \u2014 "),AV=n(Wxe,"A",{href:!0});var tft=s(AV);czo=r(tft,"ResNetForImageClassification"),tft.forEach(t),fzo=r(Wxe," (ResNet model)"),Wxe.forEach(t),mzo=i(Ee),Nv=n(Ee,"LI",{});var Hxe=s(Nv);vhe=n(Hxe,"STRONG",{});var aft=s(vhe);gzo=r(aft,"segformer"),aft.forEach(t),hzo=r(Hxe," \u2014 "),yV=n(Hxe,"A",{href:!0});var nft=s(yV);pzo=r(nft,"SegformerForImageClassification"),nft.forEach(t),uzo=r(Hxe," (SegFormer model)"),Hxe.forEach(t),_zo=i(Ee),jv=n(Ee,"LI",{});var Uxe=s(jv);Fhe=n(Uxe,"STRONG",{});var sft=s(Fhe);bzo=r(sft,"swin"),sft.forEach(t),vzo=r(Uxe," \u2014 "),LV=n(Uxe,"A",{href:!0});var lft=s(LV);Fzo=r(lft,"SwinForImageClassification"),lft.forEach(t),Tzo=r(Uxe," (Swin model)"),Uxe.forEach(t),Mzo=i(Ee),Dv=n(Ee,"LI",{});var Jxe=s(Dv);The=n(Jxe,"STRONG",{});var ift=s(The);Ezo=r(ift,"van"),ift.forEach(t),Czo=r(Jxe," \u2014 "),xV=n(Jxe,"A",{href:!0});var dft=s(xV);wzo=r(dft,"VanForImageClassification"),dft.forEach(t),Azo=r(Jxe," (VAN model)"),Jxe.forEach(t),yzo=i(Ee),Gv=n(Ee,"LI",{});var Yxe=s(Gv);Mhe=n(Yxe,"STRONG",{});var cft=s(Mhe);Lzo=r(cft,"vit"),cft.forEach(t),xzo=r(Yxe," \u2014 "),$V=n(Yxe,"A",{href:!0});var fft=s($V);$zo=r(fft,"ViTForImageClassification"),fft.forEach(t),kzo=r(Yxe," (ViT model)"),Yxe.forEach(t),Ee.forEach(t),Szo=i(ca),Ov=n(ca,"P",{});var Kxe=s(Ov);Rzo=r(Kxe,"The model is set in evaluation mode by default using "),Ehe=n(Kxe,"CODE",{});var mft=s(Ehe);Pzo=r(mft,"model.eval()"),mft.forEach(t),Bzo=r(Kxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=n(Kxe,"CODE",{});var gft=s(Che);Izo=r(gft,"model.train()"),gft.forEach(t),Kxe.forEach(t),qzo=i(ca),T(Vv.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),pIe=i(f),ad=n(f,"H2",{class:!0});var vNe=s(ad);Xv=n(vNe,"A",{id:!0,class:!0,href:!0});var hft=s(Xv);whe=n(hft,"SPAN",{});var pft=s(whe);T(A6.$$.fragment,pft),pft.forEach(t),hft.forEach(t),Nzo=i(vNe),Ahe=n(vNe,"SPAN",{});var uft=s(Ahe);jzo=r(uft,"AutoModelForVision2Seq"),uft.forEach(t),vNe.forEach(t),uIe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(y6.$$.fragment,Zs),Dzo=i(Zs),nd=n(Zs,"P",{});var xK=s(nd);Gzo=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kV=n(xK,"A",{href:!0});var _ft=s(kV);Ozo=r(_ft,"from_pretrained()"),_ft.forEach(t),Vzo=r(xK," class method or the "),SV=n(xK,"A",{href:!0});var bft=s(SV);Xzo=r(bft,"from_config()"),bft.forEach(t),zzo=r(xK,` class
method.`),xK.forEach(t),Qzo=i(Zs),L6=n(Zs,"P",{});var FNe=s(L6);Wzo=r(FNe,"This class cannot be instantiated directly using "),yhe=n(FNe,"CODE",{});var vft=s(yhe);Hzo=r(vft,"__init__()"),vft.forEach(t),Uzo=r(FNe," (throws an error)."),FNe.forEach(t),Jzo=i(Zs),ht=n(Zs,"DIV",{class:!0});var T3=s(ht);T(x6.$$.fragment,T3),Yzo=i(T3),Lhe=n(T3,"P",{});var Fft=s(Lhe);Kzo=r(Fft,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Fft.forEach(t),Zzo=i(T3),sd=n(T3,"P",{});var $K=s(sd);eQo=r($K,`Note:
Loading a model from its configuration file does `),xhe=n($K,"STRONG",{});var Tft=s(xhe);oQo=r(Tft,"not"),Tft.forEach(t),rQo=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n($K,"A",{href:!0});var Mft=s(RV);tQo=r(Mft,"from_pretrained()"),Mft.forEach(t),aQo=r($K," to load the model weights."),$K.forEach(t),nQo=i(T3),T(zv.$$.fragment,T3),T3.forEach(t),sQo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T($6.$$.fragment,fa),lQo=i(fa),$he=n(fa,"P",{});var Eft=s($he);iQo=r(Eft,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Eft.forEach(t),dQo=i(fa),Na=n(fa,"P",{});var M3=s(Na);cQo=r(M3,"The model class to instantiate is selected based on the "),khe=n(M3,"CODE",{});var Cft=s(khe);fQo=r(Cft,"model_type"),Cft.forEach(t),mQo=r(M3,` property of the config object (either
passed as an argument or loaded from `),She=n(M3,"CODE",{});var wft=s(She);gQo=r(wft,"pretrained_model_name_or_path"),wft.forEach(t),hQo=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=n(M3,"CODE",{});var Aft=s(Rhe);pQo=r(Aft,"pretrained_model_name_or_path"),Aft.forEach(t),uQo=r(M3,":"),M3.forEach(t),_Qo=i(fa),Phe=n(fa,"UL",{});var yft=s(Phe);Qv=n(yft,"LI",{});var Zxe=s(Qv);Bhe=n(Zxe,"STRONG",{});var Lft=s(Bhe);bQo=r(Lft,"vision-encoder-decoder"),Lft.forEach(t),vQo=r(Zxe," \u2014 "),PV=n(Zxe,"A",{href:!0});var xft=s(PV);FQo=r(xft,"VisionEncoderDecoderModel"),xft.forEach(t),TQo=r(Zxe," (Vision Encoder decoder model)"),Zxe.forEach(t),yft.forEach(t),MQo=i(fa),Wv=n(fa,"P",{});var e9e=s(Wv);EQo=r(e9e,"The model is set in evaluation mode by default using "),Ihe=n(e9e,"CODE",{});var $ft=s(Ihe);CQo=r($ft,"model.eval()"),$ft.forEach(t),wQo=r(e9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qhe=n(e9e,"CODE",{});var kft=s(qhe);AQo=r(kft,"model.train()"),kft.forEach(t),e9e.forEach(t),yQo=i(fa),T(Hv.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),_Ie=i(f),ld=n(f,"H2",{class:!0});var TNe=s(ld);Uv=n(TNe,"A",{id:!0,class:!0,href:!0});var Sft=s(Uv);Nhe=n(Sft,"SPAN",{});var Rft=s(Nhe);T(k6.$$.fragment,Rft),Rft.forEach(t),Sft.forEach(t),LQo=i(TNe),jhe=n(TNe,"SPAN",{});var Pft=s(jhe);xQo=r(Pft,"AutoModelForAudioClassification"),Pft.forEach(t),TNe.forEach(t),bIe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(S6.$$.fragment,el),$Qo=i(el),id=n(el,"P",{});var kK=s(id);kQo=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),BV=n(kK,"A",{href:!0});var Bft=s(BV);SQo=r(Bft,"from_pretrained()"),Bft.forEach(t),RQo=r(kK," class method or the "),IV=n(kK,"A",{href:!0});var Ift=s(IV);PQo=r(Ift,"from_config()"),Ift.forEach(t),BQo=r(kK,` class
method.`),kK.forEach(t),IQo=i(el),R6=n(el,"P",{});var MNe=s(R6);qQo=r(MNe,"This class cannot be instantiated directly using "),Dhe=n(MNe,"CODE",{});var qft=s(Dhe);NQo=r(qft,"__init__()"),qft.forEach(t),jQo=r(MNe," (throws an error)."),MNe.forEach(t),DQo=i(el),pt=n(el,"DIV",{class:!0});var E3=s(pt);T(P6.$$.fragment,E3),GQo=i(E3),Ghe=n(E3,"P",{});var Nft=s(Ghe);OQo=r(Nft,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Nft.forEach(t),VQo=i(E3),dd=n(E3,"P",{});var SK=s(dd);XQo=r(SK,`Note:
Loading a model from its configuration file does `),Ohe=n(SK,"STRONG",{});var jft=s(Ohe);zQo=r(jft,"not"),jft.forEach(t),QQo=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=n(SK,"A",{href:!0});var Dft=s(qV);WQo=r(Dft,"from_pretrained()"),Dft.forEach(t),HQo=r(SK," to load the model weights."),SK.forEach(t),UQo=i(E3),T(Jv.$$.fragment,E3),E3.forEach(t),JQo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(B6.$$.fragment,ma),YQo=i(ma),Vhe=n(ma,"P",{});var Gft=s(Vhe);KQo=r(Gft,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Gft.forEach(t),ZQo=i(ma),ja=n(ma,"P",{});var C3=s(ja);eWo=r(C3,"The model class to instantiate is selected based on the "),Xhe=n(C3,"CODE",{});var Oft=s(Xhe);oWo=r(Oft,"model_type"),Oft.forEach(t),rWo=r(C3,` property of the config object (either
passed as an argument or loaded from `),zhe=n(C3,"CODE",{});var Vft=s(zhe);tWo=r(Vft,"pretrained_model_name_or_path"),Vft.forEach(t),aWo=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=n(C3,"CODE",{});var Xft=s(Qhe);nWo=r(Xft,"pretrained_model_name_or_path"),Xft.forEach(t),sWo=r(C3,":"),C3.forEach(t),lWo=i(ma),je=n(ma,"UL",{});var bo=s(je);Yv=n(bo,"LI",{});var o9e=s(Yv);Whe=n(o9e,"STRONG",{});var zft=s(Whe);iWo=r(zft,"data2vec-audio"),zft.forEach(t),dWo=r(o9e," \u2014 "),NV=n(o9e,"A",{href:!0});var Qft=s(NV);cWo=r(Qft,"Data2VecAudioForSequenceClassification"),Qft.forEach(t),fWo=r(o9e," (Data2VecAudio model)"),o9e.forEach(t),mWo=i(bo),Kv=n(bo,"LI",{});var r9e=s(Kv);Hhe=n(r9e,"STRONG",{});var Wft=s(Hhe);gWo=r(Wft,"hubert"),Wft.forEach(t),hWo=r(r9e," \u2014 "),jV=n(r9e,"A",{href:!0});var Hft=s(jV);pWo=r(Hft,"HubertForSequenceClassification"),Hft.forEach(t),uWo=r(r9e," (Hubert model)"),r9e.forEach(t),_Wo=i(bo),Zv=n(bo,"LI",{});var t9e=s(Zv);Uhe=n(t9e,"STRONG",{});var Uft=s(Uhe);bWo=r(Uft,"sew"),Uft.forEach(t),vWo=r(t9e," \u2014 "),DV=n(t9e,"A",{href:!0});var Jft=s(DV);FWo=r(Jft,"SEWForSequenceClassification"),Jft.forEach(t),TWo=r(t9e," (SEW model)"),t9e.forEach(t),MWo=i(bo),eF=n(bo,"LI",{});var a9e=s(eF);Jhe=n(a9e,"STRONG",{});var Yft=s(Jhe);EWo=r(Yft,"sew-d"),Yft.forEach(t),CWo=r(a9e," \u2014 "),GV=n(a9e,"A",{href:!0});var Kft=s(GV);wWo=r(Kft,"SEWDForSequenceClassification"),Kft.forEach(t),AWo=r(a9e," (SEW-D model)"),a9e.forEach(t),yWo=i(bo),oF=n(bo,"LI",{});var n9e=s(oF);Yhe=n(n9e,"STRONG",{});var Zft=s(Yhe);LWo=r(Zft,"unispeech"),Zft.forEach(t),xWo=r(n9e," \u2014 "),OV=n(n9e,"A",{href:!0});var emt=s(OV);$Wo=r(emt,"UniSpeechForSequenceClassification"),emt.forEach(t),kWo=r(n9e," (UniSpeech model)"),n9e.forEach(t),SWo=i(bo),rF=n(bo,"LI",{});var s9e=s(rF);Khe=n(s9e,"STRONG",{});var omt=s(Khe);RWo=r(omt,"unispeech-sat"),omt.forEach(t),PWo=r(s9e," \u2014 "),VV=n(s9e,"A",{href:!0});var rmt=s(VV);BWo=r(rmt,"UniSpeechSatForSequenceClassification"),rmt.forEach(t),IWo=r(s9e," (UniSpeechSat model)"),s9e.forEach(t),qWo=i(bo),tF=n(bo,"LI",{});var l9e=s(tF);Zhe=n(l9e,"STRONG",{});var tmt=s(Zhe);NWo=r(tmt,"wav2vec2"),tmt.forEach(t),jWo=r(l9e," \u2014 "),XV=n(l9e,"A",{href:!0});var amt=s(XV);DWo=r(amt,"Wav2Vec2ForSequenceClassification"),amt.forEach(t),GWo=r(l9e," (Wav2Vec2 model)"),l9e.forEach(t),OWo=i(bo),aF=n(bo,"LI",{});var i9e=s(aF);epe=n(i9e,"STRONG",{});var nmt=s(epe);VWo=r(nmt,"wavlm"),nmt.forEach(t),XWo=r(i9e," \u2014 "),zV=n(i9e,"A",{href:!0});var smt=s(zV);zWo=r(smt,"WavLMForSequenceClassification"),smt.forEach(t),QWo=r(i9e," (WavLM model)"),i9e.forEach(t),bo.forEach(t),WWo=i(ma),nF=n(ma,"P",{});var d9e=s(nF);HWo=r(d9e,"The model is set in evaluation mode by default using "),ope=n(d9e,"CODE",{});var lmt=s(ope);UWo=r(lmt,"model.eval()"),lmt.forEach(t),JWo=r(d9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rpe=n(d9e,"CODE",{});var imt=s(rpe);YWo=r(imt,"model.train()"),imt.forEach(t),d9e.forEach(t),KWo=i(ma),T(sF.$$.fragment,ma),ma.forEach(t),el.forEach(t),vIe=i(f),cd=n(f,"H2",{class:!0});var ENe=s(cd);lF=n(ENe,"A",{id:!0,class:!0,href:!0});var dmt=s(lF);tpe=n(dmt,"SPAN",{});var cmt=s(tpe);T(I6.$$.fragment,cmt),cmt.forEach(t),dmt.forEach(t),ZWo=i(ENe),ape=n(ENe,"SPAN",{});var fmt=s(ape);eHo=r(fmt,"AutoModelForAudioFrameClassification"),fmt.forEach(t),ENe.forEach(t),FIe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(q6.$$.fragment,ol),oHo=i(ol),fd=n(ol,"P",{});var RK=s(fd);rHo=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),QV=n(RK,"A",{href:!0});var mmt=s(QV);tHo=r(mmt,"from_pretrained()"),mmt.forEach(t),aHo=r(RK," class method or the "),WV=n(RK,"A",{href:!0});var gmt=s(WV);nHo=r(gmt,"from_config()"),gmt.forEach(t),sHo=r(RK,` class
method.`),RK.forEach(t),lHo=i(ol),N6=n(ol,"P",{});var CNe=s(N6);iHo=r(CNe,"This class cannot be instantiated directly using "),npe=n(CNe,"CODE",{});var hmt=s(npe);dHo=r(hmt,"__init__()"),hmt.forEach(t),cHo=r(CNe," (throws an error)."),CNe.forEach(t),fHo=i(ol),ut=n(ol,"DIV",{class:!0});var w3=s(ut);T(j6.$$.fragment,w3),mHo=i(w3),spe=n(w3,"P",{});var pmt=s(spe);gHo=r(pmt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),pmt.forEach(t),hHo=i(w3),md=n(w3,"P",{});var PK=s(md);pHo=r(PK,`Note:
Loading a model from its configuration file does `),lpe=n(PK,"STRONG",{});var umt=s(lpe);uHo=r(umt,"not"),umt.forEach(t),_Ho=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=n(PK,"A",{href:!0});var _mt=s(HV);bHo=r(_mt,"from_pretrained()"),_mt.forEach(t),vHo=r(PK," to load the model weights."),PK.forEach(t),FHo=i(w3),T(iF.$$.fragment,w3),w3.forEach(t),THo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(D6.$$.fragment,ga),MHo=i(ga),ipe=n(ga,"P",{});var bmt=s(ipe);EHo=r(bmt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),bmt.forEach(t),CHo=i(ga),Da=n(ga,"P",{});var A3=s(Da);wHo=r(A3,"The model class to instantiate is selected based on the "),dpe=n(A3,"CODE",{});var vmt=s(dpe);AHo=r(vmt,"model_type"),vmt.forEach(t),yHo=r(A3,` property of the config object (either
passed as an argument or loaded from `),cpe=n(A3,"CODE",{});var Fmt=s(cpe);LHo=r(Fmt,"pretrained_model_name_or_path"),Fmt.forEach(t),xHo=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=n(A3,"CODE",{});var Tmt=s(fpe);$Ho=r(Tmt,"pretrained_model_name_or_path"),Tmt.forEach(t),kHo=r(A3,":"),A3.forEach(t),SHo=i(ga),Ga=n(ga,"UL",{});var y3=s(Ga);dF=n(y3,"LI",{});var c9e=s(dF);mpe=n(c9e,"STRONG",{});var Mmt=s(mpe);RHo=r(Mmt,"data2vec-audio"),Mmt.forEach(t),PHo=r(c9e," \u2014 "),UV=n(c9e,"A",{href:!0});var Emt=s(UV);BHo=r(Emt,"Data2VecAudioForAudioFrameClassification"),Emt.forEach(t),IHo=r(c9e," (Data2VecAudio model)"),c9e.forEach(t),qHo=i(y3),cF=n(y3,"LI",{});var f9e=s(cF);gpe=n(f9e,"STRONG",{});var Cmt=s(gpe);NHo=r(Cmt,"unispeech-sat"),Cmt.forEach(t),jHo=r(f9e," \u2014 "),JV=n(f9e,"A",{href:!0});var wmt=s(JV);DHo=r(wmt,"UniSpeechSatForAudioFrameClassification"),wmt.forEach(t),GHo=r(f9e," (UniSpeechSat model)"),f9e.forEach(t),OHo=i(y3),fF=n(y3,"LI",{});var m9e=s(fF);hpe=n(m9e,"STRONG",{});var Amt=s(hpe);VHo=r(Amt,"wav2vec2"),Amt.forEach(t),XHo=r(m9e," \u2014 "),YV=n(m9e,"A",{href:!0});var ymt=s(YV);zHo=r(ymt,"Wav2Vec2ForAudioFrameClassification"),ymt.forEach(t),QHo=r(m9e," (Wav2Vec2 model)"),m9e.forEach(t),WHo=i(y3),mF=n(y3,"LI",{});var g9e=s(mF);ppe=n(g9e,"STRONG",{});var Lmt=s(ppe);HHo=r(Lmt,"wavlm"),Lmt.forEach(t),UHo=r(g9e," \u2014 "),KV=n(g9e,"A",{href:!0});var xmt=s(KV);JHo=r(xmt,"WavLMForAudioFrameClassification"),xmt.forEach(t),YHo=r(g9e," (WavLM model)"),g9e.forEach(t),y3.forEach(t),KHo=i(ga),gF=n(ga,"P",{});var h9e=s(gF);ZHo=r(h9e,"The model is set in evaluation mode by default using "),upe=n(h9e,"CODE",{});var $mt=s(upe);eUo=r($mt,"model.eval()"),$mt.forEach(t),oUo=r(h9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=n(h9e,"CODE",{});var kmt=s(_pe);rUo=r(kmt,"model.train()"),kmt.forEach(t),h9e.forEach(t),tUo=i(ga),T(hF.$$.fragment,ga),ga.forEach(t),ol.forEach(t),TIe=i(f),gd=n(f,"H2",{class:!0});var wNe=s(gd);pF=n(wNe,"A",{id:!0,class:!0,href:!0});var Smt=s(pF);bpe=n(Smt,"SPAN",{});var Rmt=s(bpe);T(G6.$$.fragment,Rmt),Rmt.forEach(t),Smt.forEach(t),aUo=i(wNe),vpe=n(wNe,"SPAN",{});var Pmt=s(vpe);nUo=r(Pmt,"AutoModelForCTC"),Pmt.forEach(t),wNe.forEach(t),MIe=i(f),Vo=n(f,"DIV",{class:!0});var rl=s(Vo);T(O6.$$.fragment,rl),sUo=i(rl),hd=n(rl,"P",{});var BK=s(hd);lUo=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ZV=n(BK,"A",{href:!0});var Bmt=s(ZV);iUo=r(Bmt,"from_pretrained()"),Bmt.forEach(t),dUo=r(BK," class method or the "),eX=n(BK,"A",{href:!0});var Imt=s(eX);cUo=r(Imt,"from_config()"),Imt.forEach(t),fUo=r(BK,` class
method.`),BK.forEach(t),mUo=i(rl),V6=n(rl,"P",{});var ANe=s(V6);gUo=r(ANe,"This class cannot be instantiated directly using "),Fpe=n(ANe,"CODE",{});var qmt=s(Fpe);hUo=r(qmt,"__init__()"),qmt.forEach(t),pUo=r(ANe," (throws an error)."),ANe.forEach(t),uUo=i(rl),_t=n(rl,"DIV",{class:!0});var L3=s(_t);T(X6.$$.fragment,L3),_Uo=i(L3),Tpe=n(L3,"P",{});var Nmt=s(Tpe);bUo=r(Nmt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Nmt.forEach(t),vUo=i(L3),pd=n(L3,"P",{});var IK=s(pd);FUo=r(IK,`Note:
Loading a model from its configuration file does `),Mpe=n(IK,"STRONG",{});var jmt=s(Mpe);TUo=r(jmt,"not"),jmt.forEach(t),MUo=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(IK,"A",{href:!0});var Dmt=s(oX);EUo=r(Dmt,"from_pretrained()"),Dmt.forEach(t),CUo=r(IK," to load the model weights."),IK.forEach(t),wUo=i(L3),T(uF.$$.fragment,L3),L3.forEach(t),AUo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(z6.$$.fragment,ha),yUo=i(ha),Epe=n(ha,"P",{});var Gmt=s(Epe);LUo=r(Gmt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Gmt.forEach(t),xUo=i(ha),Oa=n(ha,"P",{});var x3=s(Oa);$Uo=r(x3,"The model class to instantiate is selected based on the "),Cpe=n(x3,"CODE",{});var Omt=s(Cpe);kUo=r(Omt,"model_type"),Omt.forEach(t),SUo=r(x3,` property of the config object (either
passed as an argument or loaded from `),wpe=n(x3,"CODE",{});var Vmt=s(wpe);RUo=r(Vmt,"pretrained_model_name_or_path"),Vmt.forEach(t),PUo=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=n(x3,"CODE",{});var Xmt=s(Ape);BUo=r(Xmt,"pretrained_model_name_or_path"),Xmt.forEach(t),IUo=r(x3,":"),x3.forEach(t),qUo=i(ha),De=n(ha,"UL",{});var vo=s(De);_F=n(vo,"LI",{});var p9e=s(_F);ype=n(p9e,"STRONG",{});var zmt=s(ype);NUo=r(zmt,"data2vec-audio"),zmt.forEach(t),jUo=r(p9e," \u2014 "),rX=n(p9e,"A",{href:!0});var Qmt=s(rX);DUo=r(Qmt,"Data2VecAudioForCTC"),Qmt.forEach(t),GUo=r(p9e," (Data2VecAudio model)"),p9e.forEach(t),OUo=i(vo),bF=n(vo,"LI",{});var u9e=s(bF);Lpe=n(u9e,"STRONG",{});var Wmt=s(Lpe);VUo=r(Wmt,"hubert"),Wmt.forEach(t),XUo=r(u9e," \u2014 "),tX=n(u9e,"A",{href:!0});var Hmt=s(tX);zUo=r(Hmt,"HubertForCTC"),Hmt.forEach(t),QUo=r(u9e," (Hubert model)"),u9e.forEach(t),WUo=i(vo),vF=n(vo,"LI",{});var _9e=s(vF);xpe=n(_9e,"STRONG",{});var Umt=s(xpe);HUo=r(Umt,"sew"),Umt.forEach(t),UUo=r(_9e," \u2014 "),aX=n(_9e,"A",{href:!0});var Jmt=s(aX);JUo=r(Jmt,"SEWForCTC"),Jmt.forEach(t),YUo=r(_9e," (SEW model)"),_9e.forEach(t),KUo=i(vo),FF=n(vo,"LI",{});var b9e=s(FF);$pe=n(b9e,"STRONG",{});var Ymt=s($pe);ZUo=r(Ymt,"sew-d"),Ymt.forEach(t),eJo=r(b9e," \u2014 "),nX=n(b9e,"A",{href:!0});var Kmt=s(nX);oJo=r(Kmt,"SEWDForCTC"),Kmt.forEach(t),rJo=r(b9e," (SEW-D model)"),b9e.forEach(t),tJo=i(vo),TF=n(vo,"LI",{});var v9e=s(TF);kpe=n(v9e,"STRONG",{});var Zmt=s(kpe);aJo=r(Zmt,"unispeech"),Zmt.forEach(t),nJo=r(v9e," \u2014 "),sX=n(v9e,"A",{href:!0});var egt=s(sX);sJo=r(egt,"UniSpeechForCTC"),egt.forEach(t),lJo=r(v9e," (UniSpeech model)"),v9e.forEach(t),iJo=i(vo),MF=n(vo,"LI",{});var F9e=s(MF);Spe=n(F9e,"STRONG",{});var ogt=s(Spe);dJo=r(ogt,"unispeech-sat"),ogt.forEach(t),cJo=r(F9e," \u2014 "),lX=n(F9e,"A",{href:!0});var rgt=s(lX);fJo=r(rgt,"UniSpeechSatForCTC"),rgt.forEach(t),mJo=r(F9e," (UniSpeechSat model)"),F9e.forEach(t),gJo=i(vo),EF=n(vo,"LI",{});var T9e=s(EF);Rpe=n(T9e,"STRONG",{});var tgt=s(Rpe);hJo=r(tgt,"wav2vec2"),tgt.forEach(t),pJo=r(T9e," \u2014 "),iX=n(T9e,"A",{href:!0});var agt=s(iX);uJo=r(agt,"Wav2Vec2ForCTC"),agt.forEach(t),_Jo=r(T9e," (Wav2Vec2 model)"),T9e.forEach(t),bJo=i(vo),CF=n(vo,"LI",{});var M9e=s(CF);Ppe=n(M9e,"STRONG",{});var ngt=s(Ppe);vJo=r(ngt,"wavlm"),ngt.forEach(t),FJo=r(M9e," \u2014 "),dX=n(M9e,"A",{href:!0});var sgt=s(dX);TJo=r(sgt,"WavLMForCTC"),sgt.forEach(t),MJo=r(M9e," (WavLM model)"),M9e.forEach(t),vo.forEach(t),EJo=i(ha),wF=n(ha,"P",{});var E9e=s(wF);CJo=r(E9e,"The model is set in evaluation mode by default using "),Bpe=n(E9e,"CODE",{});var lgt=s(Bpe);wJo=r(lgt,"model.eval()"),lgt.forEach(t),AJo=r(E9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ipe=n(E9e,"CODE",{});var igt=s(Ipe);yJo=r(igt,"model.train()"),igt.forEach(t),E9e.forEach(t),LJo=i(ha),T(AF.$$.fragment,ha),ha.forEach(t),rl.forEach(t),EIe=i(f),ud=n(f,"H2",{class:!0});var yNe=s(ud);yF=n(yNe,"A",{id:!0,class:!0,href:!0});var dgt=s(yF);qpe=n(dgt,"SPAN",{});var cgt=s(qpe);T(Q6.$$.fragment,cgt),cgt.forEach(t),dgt.forEach(t),xJo=i(yNe),Npe=n(yNe,"SPAN",{});var fgt=s(Npe);$Jo=r(fgt,"AutoModelForSpeechSeq2Seq"),fgt.forEach(t),yNe.forEach(t),CIe=i(f),Xo=n(f,"DIV",{class:!0});var tl=s(Xo);T(W6.$$.fragment,tl),kJo=i(tl),_d=n(tl,"P",{});var qK=s(_d);SJo=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),cX=n(qK,"A",{href:!0});var mgt=s(cX);RJo=r(mgt,"from_pretrained()"),mgt.forEach(t),PJo=r(qK," class method or the "),fX=n(qK,"A",{href:!0});var ggt=s(fX);BJo=r(ggt,"from_config()"),ggt.forEach(t),IJo=r(qK,` class
method.`),qK.forEach(t),qJo=i(tl),H6=n(tl,"P",{});var LNe=s(H6);NJo=r(LNe,"This class cannot be instantiated directly using "),jpe=n(LNe,"CODE",{});var hgt=s(jpe);jJo=r(hgt,"__init__()"),hgt.forEach(t),DJo=r(LNe," (throws an error)."),LNe.forEach(t),GJo=i(tl),bt=n(tl,"DIV",{class:!0});var $3=s(bt);T(U6.$$.fragment,$3),OJo=i($3),Dpe=n($3,"P",{});var pgt=s(Dpe);VJo=r(pgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),pgt.forEach(t),XJo=i($3),bd=n($3,"P",{});var NK=s(bd);zJo=r(NK,`Note:
Loading a model from its configuration file does `),Gpe=n(NK,"STRONG",{});var ugt=s(Gpe);QJo=r(ugt,"not"),ugt.forEach(t),WJo=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=n(NK,"A",{href:!0});var _gt=s(mX);HJo=r(_gt,"from_pretrained()"),_gt.forEach(t),UJo=r(NK," to load the model weights."),NK.forEach(t),JJo=i($3),T(LF.$$.fragment,$3),$3.forEach(t),YJo=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(J6.$$.fragment,pa),KJo=i(pa),Ope=n(pa,"P",{});var bgt=s(Ope);ZJo=r(bgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),bgt.forEach(t),eYo=i(pa),Va=n(pa,"P",{});var k3=s(Va);oYo=r(k3,"The model class to instantiate is selected based on the "),Vpe=n(k3,"CODE",{});var vgt=s(Vpe);rYo=r(vgt,"model_type"),vgt.forEach(t),tYo=r(k3,` property of the config object (either
passed as an argument or loaded from `),Xpe=n(k3,"CODE",{});var Fgt=s(Xpe);aYo=r(Fgt,"pretrained_model_name_or_path"),Fgt.forEach(t),nYo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=n(k3,"CODE",{});var Tgt=s(zpe);sYo=r(Tgt,"pretrained_model_name_or_path"),Tgt.forEach(t),lYo=r(k3,":"),k3.forEach(t),iYo=i(pa),Y6=n(pa,"UL",{});var xNe=s(Y6);xF=n(xNe,"LI",{});var C9e=s(xF);Qpe=n(C9e,"STRONG",{});var Mgt=s(Qpe);dYo=r(Mgt,"speech-encoder-decoder"),Mgt.forEach(t),cYo=r(C9e," \u2014 "),gX=n(C9e,"A",{href:!0});var Egt=s(gX);fYo=r(Egt,"SpeechEncoderDecoderModel"),Egt.forEach(t),mYo=r(C9e," (Speech Encoder decoder model)"),C9e.forEach(t),gYo=i(xNe),$F=n(xNe,"LI",{});var w9e=s($F);Wpe=n(w9e,"STRONG",{});var Cgt=s(Wpe);hYo=r(Cgt,"speech_to_text"),Cgt.forEach(t),pYo=r(w9e," \u2014 "),hX=n(w9e,"A",{href:!0});var wgt=s(hX);uYo=r(wgt,"Speech2TextForConditionalGeneration"),wgt.forEach(t),_Yo=r(w9e," (Speech2Text model)"),w9e.forEach(t),xNe.forEach(t),bYo=i(pa),kF=n(pa,"P",{});var A9e=s(kF);vYo=r(A9e,"The model is set in evaluation mode by default using "),Hpe=n(A9e,"CODE",{});var Agt=s(Hpe);FYo=r(Agt,"model.eval()"),Agt.forEach(t),TYo=r(A9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=n(A9e,"CODE",{});var ygt=s(Upe);MYo=r(ygt,"model.train()"),ygt.forEach(t),A9e.forEach(t),EYo=i(pa),T(SF.$$.fragment,pa),pa.forEach(t),tl.forEach(t),wIe=i(f),vd=n(f,"H2",{class:!0});var $Ne=s(vd);RF=n($Ne,"A",{id:!0,class:!0,href:!0});var Lgt=s(RF);Jpe=n(Lgt,"SPAN",{});var xgt=s(Jpe);T(K6.$$.fragment,xgt),xgt.forEach(t),Lgt.forEach(t),CYo=i($Ne),Ype=n($Ne,"SPAN",{});var $gt=s(Ype);wYo=r($gt,"AutoModelForAudioXVector"),$gt.forEach(t),$Ne.forEach(t),AIe=i(f),zo=n(f,"DIV",{class:!0});var al=s(zo);T(Z6.$$.fragment,al),AYo=i(al),Fd=n(al,"P",{});var jK=s(Fd);yYo=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),pX=n(jK,"A",{href:!0});var kgt=s(pX);LYo=r(kgt,"from_pretrained()"),kgt.forEach(t),xYo=r(jK," class method or the "),uX=n(jK,"A",{href:!0});var Sgt=s(uX);$Yo=r(Sgt,"from_config()"),Sgt.forEach(t),kYo=r(jK,` class
method.`),jK.forEach(t),SYo=i(al),ey=n(al,"P",{});var kNe=s(ey);RYo=r(kNe,"This class cannot be instantiated directly using "),Kpe=n(kNe,"CODE",{});var Rgt=s(Kpe);PYo=r(Rgt,"__init__()"),Rgt.forEach(t),BYo=r(kNe," (throws an error)."),kNe.forEach(t),IYo=i(al),vt=n(al,"DIV",{class:!0});var S3=s(vt);T(oy.$$.fragment,S3),qYo=i(S3),Zpe=n(S3,"P",{});var Pgt=s(Zpe);NYo=r(Pgt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Pgt.forEach(t),jYo=i(S3),Td=n(S3,"P",{});var DK=s(Td);DYo=r(DK,`Note:
Loading a model from its configuration file does `),eue=n(DK,"STRONG",{});var Bgt=s(eue);GYo=r(Bgt,"not"),Bgt.forEach(t),OYo=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=n(DK,"A",{href:!0});var Igt=s(_X);VYo=r(Igt,"from_pretrained()"),Igt.forEach(t),XYo=r(DK," to load the model weights."),DK.forEach(t),zYo=i(S3),T(PF.$$.fragment,S3),S3.forEach(t),QYo=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(ry.$$.fragment,ua),WYo=i(ua),oue=n(ua,"P",{});var qgt=s(oue);HYo=r(qgt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),qgt.forEach(t),UYo=i(ua),Xa=n(ua,"P",{});var R3=s(Xa);JYo=r(R3,"The model class to instantiate is selected based on the "),rue=n(R3,"CODE",{});var Ngt=s(rue);YYo=r(Ngt,"model_type"),Ngt.forEach(t),KYo=r(R3,` property of the config object (either
passed as an argument or loaded from `),tue=n(R3,"CODE",{});var jgt=s(tue);ZYo=r(jgt,"pretrained_model_name_or_path"),jgt.forEach(t),eKo=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=n(R3,"CODE",{});var Dgt=s(aue);oKo=r(Dgt,"pretrained_model_name_or_path"),Dgt.forEach(t),rKo=r(R3,":"),R3.forEach(t),tKo=i(ua),za=n(ua,"UL",{});var P3=s(za);BF=n(P3,"LI",{});var y9e=s(BF);nue=n(y9e,"STRONG",{});var Ggt=s(nue);aKo=r(Ggt,"data2vec-audio"),Ggt.forEach(t),nKo=r(y9e," \u2014 "),bX=n(y9e,"A",{href:!0});var Ogt=s(bX);sKo=r(Ogt,"Data2VecAudioForXVector"),Ogt.forEach(t),lKo=r(y9e," (Data2VecAudio model)"),y9e.forEach(t),iKo=i(P3),IF=n(P3,"LI",{});var L9e=s(IF);sue=n(L9e,"STRONG",{});var Vgt=s(sue);dKo=r(Vgt,"unispeech-sat"),Vgt.forEach(t),cKo=r(L9e," \u2014 "),vX=n(L9e,"A",{href:!0});var Xgt=s(vX);fKo=r(Xgt,"UniSpeechSatForXVector"),Xgt.forEach(t),mKo=r(L9e," (UniSpeechSat model)"),L9e.forEach(t),gKo=i(P3),qF=n(P3,"LI",{});var x9e=s(qF);lue=n(x9e,"STRONG",{});var zgt=s(lue);hKo=r(zgt,"wav2vec2"),zgt.forEach(t),pKo=r(x9e," \u2014 "),FX=n(x9e,"A",{href:!0});var Qgt=s(FX);uKo=r(Qgt,"Wav2Vec2ForXVector"),Qgt.forEach(t),_Ko=r(x9e," (Wav2Vec2 model)"),x9e.forEach(t),bKo=i(P3),NF=n(P3,"LI",{});var $9e=s(NF);iue=n($9e,"STRONG",{});var Wgt=s(iue);vKo=r(Wgt,"wavlm"),Wgt.forEach(t),FKo=r($9e," \u2014 "),TX=n($9e,"A",{href:!0});var Hgt=s(TX);TKo=r(Hgt,"WavLMForXVector"),Hgt.forEach(t),MKo=r($9e," (WavLM model)"),$9e.forEach(t),P3.forEach(t),EKo=i(ua),jF=n(ua,"P",{});var k9e=s(jF);CKo=r(k9e,"The model is set in evaluation mode by default using "),due=n(k9e,"CODE",{});var Ugt=s(due);wKo=r(Ugt,"model.eval()"),Ugt.forEach(t),AKo=r(k9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=n(k9e,"CODE",{});var Jgt=s(cue);yKo=r(Jgt,"model.train()"),Jgt.forEach(t),k9e.forEach(t),LKo=i(ua),T(DF.$$.fragment,ua),ua.forEach(t),al.forEach(t),yIe=i(f),Md=n(f,"H2",{class:!0});var SNe=s(Md);GF=n(SNe,"A",{id:!0,class:!0,href:!0});var Ygt=s(GF);fue=n(Ygt,"SPAN",{});var Kgt=s(fue);T(ty.$$.fragment,Kgt),Kgt.forEach(t),Ygt.forEach(t),xKo=i(SNe),mue=n(SNe,"SPAN",{});var Zgt=s(mue);$Ko=r(Zgt,"AutoModelForMaskedImageModeling"),Zgt.forEach(t),SNe.forEach(t),LIe=i(f),Qo=n(f,"DIV",{class:!0});var nl=s(Qo);T(ay.$$.fragment,nl),kKo=i(nl),Ed=n(nl,"P",{});var GK=s(Ed);SKo=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),MX=n(GK,"A",{href:!0});var eht=s(MX);RKo=r(eht,"from_pretrained()"),eht.forEach(t),PKo=r(GK," class method or the "),EX=n(GK,"A",{href:!0});var oht=s(EX);BKo=r(oht,"from_config()"),oht.forEach(t),IKo=r(GK,` class
method.`),GK.forEach(t),qKo=i(nl),ny=n(nl,"P",{});var RNe=s(ny);NKo=r(RNe,"This class cannot be instantiated directly using "),gue=n(RNe,"CODE",{});var rht=s(gue);jKo=r(rht,"__init__()"),rht.forEach(t),DKo=r(RNe," (throws an error)."),RNe.forEach(t),GKo=i(nl),Ft=n(nl,"DIV",{class:!0});var B3=s(Ft);T(sy.$$.fragment,B3),OKo=i(B3),hue=n(B3,"P",{});var tht=s(hue);VKo=r(tht,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),tht.forEach(t),XKo=i(B3),Cd=n(B3,"P",{});var OK=s(Cd);zKo=r(OK,`Note:
Loading a model from its configuration file does `),pue=n(OK,"STRONG",{});var aht=s(pue);QKo=r(aht,"not"),aht.forEach(t),WKo=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(OK,"A",{href:!0});var nht=s(CX);HKo=r(nht,"from_pretrained()"),nht.forEach(t),UKo=r(OK," to load the model weights."),OK.forEach(t),JKo=i(B3),T(OF.$$.fragment,B3),B3.forEach(t),YKo=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(ly.$$.fragment,_a),KKo=i(_a),uue=n(_a,"P",{});var sht=s(uue);ZKo=r(sht,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),sht.forEach(t),eZo=i(_a),Qa=n(_a,"P",{});var I3=s(Qa);oZo=r(I3,"The model class to instantiate is selected based on the "),_ue=n(I3,"CODE",{});var lht=s(_ue);rZo=r(lht,"model_type"),lht.forEach(t),tZo=r(I3,` property of the config object (either
passed as an argument or loaded from `),bue=n(I3,"CODE",{});var iht=s(bue);aZo=r(iht,"pretrained_model_name_or_path"),iht.forEach(t),nZo=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=n(I3,"CODE",{});var dht=s(vue);sZo=r(dht,"pretrained_model_name_or_path"),dht.forEach(t),lZo=r(I3,":"),I3.forEach(t),iZo=i(_a),wd=n(_a,"UL",{});var VK=s(wd);VF=n(VK,"LI",{});var S9e=s(VF);Fue=n(S9e,"STRONG",{});var cht=s(Fue);dZo=r(cht,"deit"),cht.forEach(t),cZo=r(S9e," \u2014 "),wX=n(S9e,"A",{href:!0});var fht=s(wX);fZo=r(fht,"DeiTForMaskedImageModeling"),fht.forEach(t),mZo=r(S9e," (DeiT model)"),S9e.forEach(t),gZo=i(VK),XF=n(VK,"LI",{});var R9e=s(XF);Tue=n(R9e,"STRONG",{});var mht=s(Tue);hZo=r(mht,"swin"),mht.forEach(t),pZo=r(R9e," \u2014 "),AX=n(R9e,"A",{href:!0});var ght=s(AX);uZo=r(ght,"SwinForMaskedImageModeling"),ght.forEach(t),_Zo=r(R9e," (Swin model)"),R9e.forEach(t),bZo=i(VK),zF=n(VK,"LI",{});var P9e=s(zF);Mue=n(P9e,"STRONG",{});var hht=s(Mue);vZo=r(hht,"vit"),hht.forEach(t),FZo=r(P9e," \u2014 "),yX=n(P9e,"A",{href:!0});var pht=s(yX);TZo=r(pht,"ViTForMaskedImageModeling"),pht.forEach(t),MZo=r(P9e," (ViT model)"),P9e.forEach(t),VK.forEach(t),EZo=i(_a),QF=n(_a,"P",{});var B9e=s(QF);CZo=r(B9e,"The model is set in evaluation mode by default using "),Eue=n(B9e,"CODE",{});var uht=s(Eue);wZo=r(uht,"model.eval()"),uht.forEach(t),AZo=r(B9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cue=n(B9e,"CODE",{});var _ht=s(Cue);yZo=r(_ht,"model.train()"),_ht.forEach(t),B9e.forEach(t),LZo=i(_a),T(WF.$$.fragment,_a),_a.forEach(t),nl.forEach(t),xIe=i(f),Ad=n(f,"H2",{class:!0});var PNe=s(Ad);HF=n(PNe,"A",{id:!0,class:!0,href:!0});var bht=s(HF);wue=n(bht,"SPAN",{});var vht=s(wue);T(iy.$$.fragment,vht),vht.forEach(t),bht.forEach(t),xZo=i(PNe),Aue=n(PNe,"SPAN",{});var Fht=s(Aue);$Zo=r(Fht,"AutoModelForObjectDetection"),Fht.forEach(t),PNe.forEach(t),$Ie=i(f),Wo=n(f,"DIV",{class:!0});var sl=s(Wo);T(dy.$$.fragment,sl),kZo=i(sl),yd=n(sl,"P",{});var XK=s(yd);SZo=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),LX=n(XK,"A",{href:!0});var Tht=s(LX);RZo=r(Tht,"from_pretrained()"),Tht.forEach(t),PZo=r(XK," class method or the "),xX=n(XK,"A",{href:!0});var Mht=s(xX);BZo=r(Mht,"from_config()"),Mht.forEach(t),IZo=r(XK,` class
method.`),XK.forEach(t),qZo=i(sl),cy=n(sl,"P",{});var BNe=s(cy);NZo=r(BNe,"This class cannot be instantiated directly using "),yue=n(BNe,"CODE",{});var Eht=s(yue);jZo=r(Eht,"__init__()"),Eht.forEach(t),DZo=r(BNe," (throws an error)."),BNe.forEach(t),GZo=i(sl),Tt=n(sl,"DIV",{class:!0});var q3=s(Tt);T(fy.$$.fragment,q3),OZo=i(q3),Lue=n(q3,"P",{});var Cht=s(Lue);VZo=r(Cht,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Cht.forEach(t),XZo=i(q3),Ld=n(q3,"P",{});var zK=s(Ld);zZo=r(zK,`Note:
Loading a model from its configuration file does `),xue=n(zK,"STRONG",{});var wht=s(xue);QZo=r(wht,"not"),wht.forEach(t),WZo=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(zK,"A",{href:!0});var Aht=s($X);HZo=r(Aht,"from_pretrained()"),Aht.forEach(t),UZo=r(zK," to load the model weights."),zK.forEach(t),JZo=i(q3),T(UF.$$.fragment,q3),q3.forEach(t),YZo=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(my.$$.fragment,ba),KZo=i(ba),$ue=n(ba,"P",{});var yht=s($ue);ZZo=r(yht,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),yht.forEach(t),eer=i(ba),Wa=n(ba,"P",{});var N3=s(Wa);oer=r(N3,"The model class to instantiate is selected based on the "),kue=n(N3,"CODE",{});var Lht=s(kue);rer=r(Lht,"model_type"),Lht.forEach(t),ter=r(N3,` property of the config object (either
passed as an argument or loaded from `),Sue=n(N3,"CODE",{});var xht=s(Sue);aer=r(xht,"pretrained_model_name_or_path"),xht.forEach(t),ner=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=n(N3,"CODE",{});var $ht=s(Rue);ser=r($ht,"pretrained_model_name_or_path"),$ht.forEach(t),ler=r(N3,":"),N3.forEach(t),ier=i(ba),gy=n(ba,"UL",{});var INe=s(gy);JF=n(INe,"LI",{});var I9e=s(JF);Pue=n(I9e,"STRONG",{});var kht=s(Pue);der=r(kht,"detr"),kht.forEach(t),cer=r(I9e," \u2014 "),kX=n(I9e,"A",{href:!0});var Sht=s(kX);fer=r(Sht,"DetrForObjectDetection"),Sht.forEach(t),mer=r(I9e," (DETR model)"),I9e.forEach(t),ger=i(INe),YF=n(INe,"LI",{});var q9e=s(YF);Bue=n(q9e,"STRONG",{});var Rht=s(Bue);her=r(Rht,"yolos"),Rht.forEach(t),per=r(q9e," \u2014 "),SX=n(q9e,"A",{href:!0});var Pht=s(SX);uer=r(Pht,"YolosForObjectDetection"),Pht.forEach(t),_er=r(q9e," (YOLOS model)"),q9e.forEach(t),INe.forEach(t),ber=i(ba),KF=n(ba,"P",{});var N9e=s(KF);ver=r(N9e,"The model is set in evaluation mode by default using "),Iue=n(N9e,"CODE",{});var Bht=s(Iue);Fer=r(Bht,"model.eval()"),Bht.forEach(t),Ter=r(N9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=n(N9e,"CODE",{});var Iht=s(que);Mer=r(Iht,"model.train()"),Iht.forEach(t),N9e.forEach(t),Eer=i(ba),T(ZF.$$.fragment,ba),ba.forEach(t),sl.forEach(t),kIe=i(f),xd=n(f,"H2",{class:!0});var qNe=s(xd);e0=n(qNe,"A",{id:!0,class:!0,href:!0});var qht=s(e0);Nue=n(qht,"SPAN",{});var Nht=s(Nue);T(hy.$$.fragment,Nht),Nht.forEach(t),qht.forEach(t),Cer=i(qNe),jue=n(qNe,"SPAN",{});var jht=s(jue);wer=r(jht,"AutoModelForImageSegmentation"),jht.forEach(t),qNe.forEach(t),SIe=i(f),Ho=n(f,"DIV",{class:!0});var ll=s(Ho);T(py.$$.fragment,ll),Aer=i(ll),$d=n(ll,"P",{});var QK=s($d);yer=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),RX=n(QK,"A",{href:!0});var Dht=s(RX);Ler=r(Dht,"from_pretrained()"),Dht.forEach(t),xer=r(QK," class method or the "),PX=n(QK,"A",{href:!0});var Ght=s(PX);$er=r(Ght,"from_config()"),Ght.forEach(t),ker=r(QK,` class
method.`),QK.forEach(t),Ser=i(ll),uy=n(ll,"P",{});var NNe=s(uy);Rer=r(NNe,"This class cannot be instantiated directly using "),Due=n(NNe,"CODE",{});var Oht=s(Due);Per=r(Oht,"__init__()"),Oht.forEach(t),Ber=r(NNe," (throws an error)."),NNe.forEach(t),Ier=i(ll),Mt=n(ll,"DIV",{class:!0});var j3=s(Mt);T(_y.$$.fragment,j3),qer=i(j3),Gue=n(j3,"P",{});var Vht=s(Gue);Ner=r(Vht,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Vht.forEach(t),jer=i(j3),kd=n(j3,"P",{});var WK=s(kd);Der=r(WK,`Note:
Loading a model from its configuration file does `),Oue=n(WK,"STRONG",{});var Xht=s(Oue);Ger=r(Xht,"not"),Xht.forEach(t),Oer=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),BX=n(WK,"A",{href:!0});var zht=s(BX);Ver=r(zht,"from_pretrained()"),zht.forEach(t),Xer=r(WK," to load the model weights."),WK.forEach(t),zer=i(j3),T(o0.$$.fragment,j3),j3.forEach(t),Qer=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(by.$$.fragment,va),Wer=i(va),Vue=n(va,"P",{});var Qht=s(Vue);Her=r(Qht,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Qht.forEach(t),Uer=i(va),Ha=n(va,"P",{});var D3=s(Ha);Jer=r(D3,"The model class to instantiate is selected based on the "),Xue=n(D3,"CODE",{});var Wht=s(Xue);Yer=r(Wht,"model_type"),Wht.forEach(t),Ker=r(D3,` property of the config object (either
passed as an argument or loaded from `),zue=n(D3,"CODE",{});var Hht=s(zue);Zer=r(Hht,"pretrained_model_name_or_path"),Hht.forEach(t),eor=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=n(D3,"CODE",{});var Uht=s(Que);oor=r(Uht,"pretrained_model_name_or_path"),Uht.forEach(t),ror=r(D3,":"),D3.forEach(t),tor=i(va),Wue=n(va,"UL",{});var Jht=s(Wue);r0=n(Jht,"LI",{});var j9e=s(r0);Hue=n(j9e,"STRONG",{});var Yht=s(Hue);aor=r(Yht,"detr"),Yht.forEach(t),nor=r(j9e," \u2014 "),IX=n(j9e,"A",{href:!0});var Kht=s(IX);sor=r(Kht,"DetrForSegmentation"),Kht.forEach(t),lor=r(j9e," (DETR model)"),j9e.forEach(t),Jht.forEach(t),ior=i(va),t0=n(va,"P",{});var D9e=s(t0);dor=r(D9e,"The model is set in evaluation mode by default using "),Uue=n(D9e,"CODE",{});var Zht=s(Uue);cor=r(Zht,"model.eval()"),Zht.forEach(t),mor=r(D9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jue=n(D9e,"CODE",{});var ept=s(Jue);gor=r(ept,"model.train()"),ept.forEach(t),D9e.forEach(t),hor=i(va),T(a0.$$.fragment,va),va.forEach(t),ll.forEach(t),RIe=i(f),Sd=n(f,"H2",{class:!0});var jNe=s(Sd);n0=n(jNe,"A",{id:!0,class:!0,href:!0});var opt=s(n0);Yue=n(opt,"SPAN",{});var rpt=s(Yue);T(vy.$$.fragment,rpt),rpt.forEach(t),opt.forEach(t),por=i(jNe),Kue=n(jNe,"SPAN",{});var tpt=s(Kue);uor=r(tpt,"AutoModelForSemanticSegmentation"),tpt.forEach(t),jNe.forEach(t),PIe=i(f),Uo=n(f,"DIV",{class:!0});var il=s(Uo);T(Fy.$$.fragment,il),_or=i(il),Rd=n(il,"P",{});var HK=s(Rd);bor=r(HK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),qX=n(HK,"A",{href:!0});var apt=s(qX);vor=r(apt,"from_pretrained()"),apt.forEach(t),For=r(HK," class method or the "),NX=n(HK,"A",{href:!0});var npt=s(NX);Tor=r(npt,"from_config()"),npt.forEach(t),Mor=r(HK,` class
method.`),HK.forEach(t),Eor=i(il),Ty=n(il,"P",{});var DNe=s(Ty);Cor=r(DNe,"This class cannot be instantiated directly using "),Zue=n(DNe,"CODE",{});var spt=s(Zue);wor=r(spt,"__init__()"),spt.forEach(t),Aor=r(DNe," (throws an error)."),DNe.forEach(t),yor=i(il),Et=n(il,"DIV",{class:!0});var G3=s(Et);T(My.$$.fragment,G3),Lor=i(G3),e_e=n(G3,"P",{});var lpt=s(e_e);xor=r(lpt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),lpt.forEach(t),$or=i(G3),Pd=n(G3,"P",{});var UK=s(Pd);kor=r(UK,`Note:
Loading a model from its configuration file does `),o_e=n(UK,"STRONG",{});var ipt=s(o_e);Sor=r(ipt,"not"),ipt.forEach(t),Ror=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=n(UK,"A",{href:!0});var dpt=s(jX);Por=r(dpt,"from_pretrained()"),dpt.forEach(t),Bor=r(UK," to load the model weights."),UK.forEach(t),Ior=i(G3),T(s0.$$.fragment,G3),G3.forEach(t),qor=i(il),uo=n(il,"DIV",{class:!0});var Fa=s(uo);T(Ey.$$.fragment,Fa),Nor=i(Fa),r_e=n(Fa,"P",{});var cpt=s(r_e);jor=r(cpt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),cpt.forEach(t),Dor=i(Fa),Ua=n(Fa,"P",{});var O3=s(Ua);Gor=r(O3,"The model class to instantiate is selected based on the "),t_e=n(O3,"CODE",{});var fpt=s(t_e);Oor=r(fpt,"model_type"),fpt.forEach(t),Vor=r(O3,` property of the config object (either
passed as an argument or loaded from `),a_e=n(O3,"CODE",{});var mpt=s(a_e);Xor=r(mpt,"pretrained_model_name_or_path"),mpt.forEach(t),zor=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=n(O3,"CODE",{});var gpt=s(n_e);Qor=r(gpt,"pretrained_model_name_or_path"),gpt.forEach(t),Wor=r(O3,":"),O3.forEach(t),Hor=i(Fa),Ja=n(Fa,"UL",{});var V3=s(Ja);l0=n(V3,"LI",{});var G9e=s(l0);s_e=n(G9e,"STRONG",{});var hpt=s(s_e);Uor=r(hpt,"beit"),hpt.forEach(t),Jor=r(G9e," \u2014 "),DX=n(G9e,"A",{href:!0});var ppt=s(DX);Yor=r(ppt,"BeitForSemanticSegmentation"),ppt.forEach(t),Kor=r(G9e," (BEiT model)"),G9e.forEach(t),Zor=i(V3),i0=n(V3,"LI",{});var O9e=s(i0);l_e=n(O9e,"STRONG",{});var upt=s(l_e);err=r(upt,"data2vec-vision"),upt.forEach(t),orr=r(O9e," \u2014 "),GX=n(O9e,"A",{href:!0});var _pt=s(GX);rrr=r(_pt,"Data2VecVisionForSemanticSegmentation"),_pt.forEach(t),trr=r(O9e," (Data2VecVision model)"),O9e.forEach(t),arr=i(V3),d0=n(V3,"LI",{});var V9e=s(d0);i_e=n(V9e,"STRONG",{});var bpt=s(i_e);nrr=r(bpt,"dpt"),bpt.forEach(t),srr=r(V9e," \u2014 "),OX=n(V9e,"A",{href:!0});var vpt=s(OX);lrr=r(vpt,"DPTForSemanticSegmentation"),vpt.forEach(t),irr=r(V9e," (DPT model)"),V9e.forEach(t),drr=i(V3),c0=n(V3,"LI",{});var X9e=s(c0);d_e=n(X9e,"STRONG",{});var Fpt=s(d_e);crr=r(Fpt,"segformer"),Fpt.forEach(t),frr=r(X9e," \u2014 "),VX=n(X9e,"A",{href:!0});var Tpt=s(VX);mrr=r(Tpt,"SegformerForSemanticSegmentation"),Tpt.forEach(t),grr=r(X9e," (SegFormer model)"),X9e.forEach(t),V3.forEach(t),hrr=i(Fa),f0=n(Fa,"P",{});var z9e=s(f0);prr=r(z9e,"The model is set in evaluation mode by default using "),c_e=n(z9e,"CODE",{});var Mpt=s(c_e);urr=r(Mpt,"model.eval()"),Mpt.forEach(t),_rr=r(z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=n(z9e,"CODE",{});var Ept=s(f_e);brr=r(Ept,"model.train()"),Ept.forEach(t),z9e.forEach(t),vrr=i(Fa),T(m0.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),BIe=i(f),Bd=n(f,"H2",{class:!0});var GNe=s(Bd);g0=n(GNe,"A",{id:!0,class:!0,href:!0});var Cpt=s(g0);m_e=n(Cpt,"SPAN",{});var wpt=s(m_e);T(Cy.$$.fragment,wpt),wpt.forEach(t),Cpt.forEach(t),Frr=i(GNe),g_e=n(GNe,"SPAN",{});var Apt=s(g_e);Trr=r(Apt,"AutoModelForInstanceSegmentation"),Apt.forEach(t),GNe.forEach(t),IIe=i(f),Jo=n(f,"DIV",{class:!0});var dl=s(Jo);T(wy.$$.fragment,dl),Mrr=i(dl),Id=n(dl,"P",{});var JK=s(Id);Err=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),XX=n(JK,"A",{href:!0});var ypt=s(XX);Crr=r(ypt,"from_pretrained()"),ypt.forEach(t),wrr=r(JK," class method or the "),zX=n(JK,"A",{href:!0});var Lpt=s(zX);Arr=r(Lpt,"from_config()"),Lpt.forEach(t),yrr=r(JK,` class
method.`),JK.forEach(t),Lrr=i(dl),Ay=n(dl,"P",{});var ONe=s(Ay);xrr=r(ONe,"This class cannot be instantiated directly using "),h_e=n(ONe,"CODE",{});var xpt=s(h_e);$rr=r(xpt,"__init__()"),xpt.forEach(t),krr=r(ONe," (throws an error)."),ONe.forEach(t),Srr=i(dl),Ct=n(dl,"DIV",{class:!0});var X3=s(Ct);T(yy.$$.fragment,X3),Rrr=i(X3),p_e=n(X3,"P",{});var $pt=s(p_e);Prr=r($pt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),$pt.forEach(t),Brr=i(X3),qd=n(X3,"P",{});var YK=s(qd);Irr=r(YK,`Note:
Loading a model from its configuration file does `),u_e=n(YK,"STRONG",{});var kpt=s(u_e);qrr=r(kpt,"not"),kpt.forEach(t),Nrr=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(YK,"A",{href:!0});var Spt=s(QX);jrr=r(Spt,"from_pretrained()"),Spt.forEach(t),Drr=r(YK," to load the model weights."),YK.forEach(t),Grr=i(X3),T(h0.$$.fragment,X3),X3.forEach(t),Orr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(Ly.$$.fragment,Ta),Vrr=i(Ta),__e=n(Ta,"P",{});var Rpt=s(__e);Xrr=r(Rpt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Rpt.forEach(t),zrr=i(Ta),Ya=n(Ta,"P",{});var z3=s(Ya);Qrr=r(z3,"The model class to instantiate is selected based on the "),b_e=n(z3,"CODE",{});var Ppt=s(b_e);Wrr=r(Ppt,"model_type"),Ppt.forEach(t),Hrr=r(z3,` property of the config object (either
passed as an argument or loaded from `),v_e=n(z3,"CODE",{});var Bpt=s(v_e);Urr=r(Bpt,"pretrained_model_name_or_path"),Bpt.forEach(t),Jrr=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=n(z3,"CODE",{});var Ipt=s(F_e);Yrr=r(Ipt,"pretrained_model_name_or_path"),Ipt.forEach(t),Krr=r(z3,":"),z3.forEach(t),Zrr=i(Ta),T_e=n(Ta,"UL",{});var qpt=s(T_e);p0=n(qpt,"LI",{});var Q9e=s(p0);M_e=n(Q9e,"STRONG",{});var Npt=s(M_e);etr=r(Npt,"maskformer"),Npt.forEach(t),otr=r(Q9e," \u2014 "),WX=n(Q9e,"A",{href:!0});var jpt=s(WX);rtr=r(jpt,"MaskFormerForInstanceSegmentation"),jpt.forEach(t),ttr=r(Q9e," (MaskFormer model)"),Q9e.forEach(t),qpt.forEach(t),atr=i(Ta),u0=n(Ta,"P",{});var W9e=s(u0);ntr=r(W9e,"The model is set in evaluation mode by default using "),E_e=n(W9e,"CODE",{});var Dpt=s(E_e);str=r(Dpt,"model.eval()"),Dpt.forEach(t),ltr=r(W9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=n(W9e,"CODE",{});var Gpt=s(C_e);itr=r(Gpt,"model.train()"),Gpt.forEach(t),W9e.forEach(t),dtr=i(Ta),T(_0.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),qIe=i(f),Nd=n(f,"H2",{class:!0});var VNe=s(Nd);b0=n(VNe,"A",{id:!0,class:!0,href:!0});var Opt=s(b0);w_e=n(Opt,"SPAN",{});var Vpt=s(w_e);T(xy.$$.fragment,Vpt),Vpt.forEach(t),Opt.forEach(t),ctr=i(VNe),A_e=n(VNe,"SPAN",{});var Xpt=s(A_e);ftr=r(Xpt,"TFAutoModel"),Xpt.forEach(t),VNe.forEach(t),NIe=i(f),Yo=n(f,"DIV",{class:!0});var cl=s(Yo);T($y.$$.fragment,cl),mtr=i(cl),jd=n(cl,"P",{});var KK=s(jd);gtr=r(KK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HX=n(KK,"A",{href:!0});var zpt=s(HX);htr=r(zpt,"from_pretrained()"),zpt.forEach(t),ptr=r(KK," class method or the "),UX=n(KK,"A",{href:!0});var Qpt=s(UX);utr=r(Qpt,"from_config()"),Qpt.forEach(t),_tr=r(KK,` class
method.`),KK.forEach(t),btr=i(cl),ky=n(cl,"P",{});var XNe=s(ky);vtr=r(XNe,"This class cannot be instantiated directly using "),y_e=n(XNe,"CODE",{});var Wpt=s(y_e);Ftr=r(Wpt,"__init__()"),Wpt.forEach(t),Ttr=r(XNe," (throws an error)."),XNe.forEach(t),Mtr=i(cl),wt=n(cl,"DIV",{class:!0});var Q3=s(wt);T(Sy.$$.fragment,Q3),Etr=i(Q3),L_e=n(Q3,"P",{});var Hpt=s(L_e);Ctr=r(Hpt,"Instantiates one of the base model classes of the library from a configuration."),Hpt.forEach(t),wtr=i(Q3),Dd=n(Q3,"P",{});var ZK=s(Dd);Atr=r(ZK,`Note:
Loading a model from its configuration file does `),x_e=n(ZK,"STRONG",{});var Upt=s(x_e);ytr=r(Upt,"not"),Upt.forEach(t),Ltr=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=n(ZK,"A",{href:!0});var Jpt=s(JX);xtr=r(Jpt,"from_pretrained()"),Jpt.forEach(t),$tr=r(ZK," to load the model weights."),ZK.forEach(t),ktr=i(Q3),T(v0.$$.fragment,Q3),Q3.forEach(t),Str=i(cl),wr=n(cl,"DIV",{class:!0});var fl=s(wr);T(Ry.$$.fragment,fl),Rtr=i(fl),$_e=n(fl,"P",{});var Ypt=s($_e);Ptr=r(Ypt,"Instantiate one of the base model classes of the library from a pretrained model."),Ypt.forEach(t),Btr=i(fl),Ka=n(fl,"P",{});var W3=s(Ka);Itr=r(W3,"The model class to instantiate is selected based on the "),k_e=n(W3,"CODE",{});var Kpt=s(k_e);qtr=r(Kpt,"model_type"),Kpt.forEach(t),Ntr=r(W3,` property of the config object (either
passed as an argument or loaded from `),S_e=n(W3,"CODE",{});var Zpt=s(S_e);jtr=r(Zpt,"pretrained_model_name_or_path"),Zpt.forEach(t),Dtr=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=n(W3,"CODE",{});var eut=s(R_e);Gtr=r(eut,"pretrained_model_name_or_path"),eut.forEach(t),Otr=r(W3,":"),W3.forEach(t),Vtr=i(fl),N=n(fl,"UL",{});var D=s(N);F0=n(D,"LI",{});var H9e=s(F0);P_e=n(H9e,"STRONG",{});var out=s(P_e);Xtr=r(out,"albert"),out.forEach(t),ztr=r(H9e," \u2014 "),YX=n(H9e,"A",{href:!0});var rut=s(YX);Qtr=r(rut,"TFAlbertModel"),rut.forEach(t),Wtr=r(H9e," (ALBERT model)"),H9e.forEach(t),Htr=i(D),T0=n(D,"LI",{});var U9e=s(T0);B_e=n(U9e,"STRONG",{});var tut=s(B_e);Utr=r(tut,"bart"),tut.forEach(t),Jtr=r(U9e," \u2014 "),KX=n(U9e,"A",{href:!0});var aut=s(KX);Ytr=r(aut,"TFBartModel"),aut.forEach(t),Ktr=r(U9e," (BART model)"),U9e.forEach(t),Ztr=i(D),M0=n(D,"LI",{});var J9e=s(M0);I_e=n(J9e,"STRONG",{});var nut=s(I_e);ear=r(nut,"bert"),nut.forEach(t),oar=r(J9e," \u2014 "),ZX=n(J9e,"A",{href:!0});var sut=s(ZX);rar=r(sut,"TFBertModel"),sut.forEach(t),tar=r(J9e," (BERT model)"),J9e.forEach(t),aar=i(D),E0=n(D,"LI",{});var Y9e=s(E0);q_e=n(Y9e,"STRONG",{});var lut=s(q_e);nar=r(lut,"blenderbot"),lut.forEach(t),sar=r(Y9e," \u2014 "),ez=n(Y9e,"A",{href:!0});var iut=s(ez);lar=r(iut,"TFBlenderbotModel"),iut.forEach(t),iar=r(Y9e," (Blenderbot model)"),Y9e.forEach(t),dar=i(D),C0=n(D,"LI",{});var K9e=s(C0);N_e=n(K9e,"STRONG",{});var dut=s(N_e);car=r(dut,"blenderbot-small"),dut.forEach(t),far=r(K9e," \u2014 "),oz=n(K9e,"A",{href:!0});var cut=s(oz);mar=r(cut,"TFBlenderbotSmallModel"),cut.forEach(t),gar=r(K9e," (BlenderbotSmall model)"),K9e.forEach(t),har=i(D),w0=n(D,"LI",{});var Z9e=s(w0);j_e=n(Z9e,"STRONG",{});var fut=s(j_e);par=r(fut,"camembert"),fut.forEach(t),uar=r(Z9e," \u2014 "),rz=n(Z9e,"A",{href:!0});var mut=s(rz);_ar=r(mut,"TFCamembertModel"),mut.forEach(t),bar=r(Z9e," (CamemBERT model)"),Z9e.forEach(t),Far=i(D),A0=n(D,"LI",{});var e$e=s(A0);D_e=n(e$e,"STRONG",{});var gut=s(D_e);Tar=r(gut,"clip"),gut.forEach(t),Mar=r(e$e," \u2014 "),tz=n(e$e,"A",{href:!0});var hut=s(tz);Ear=r(hut,"TFCLIPModel"),hut.forEach(t),Car=r(e$e," (CLIP model)"),e$e.forEach(t),war=i(D),y0=n(D,"LI",{});var o$e=s(y0);G_e=n(o$e,"STRONG",{});var put=s(G_e);Aar=r(put,"convbert"),put.forEach(t),yar=r(o$e," \u2014 "),az=n(o$e,"A",{href:!0});var uut=s(az);Lar=r(uut,"TFConvBertModel"),uut.forEach(t),xar=r(o$e," (ConvBERT model)"),o$e.forEach(t),$ar=i(D),L0=n(D,"LI",{});var r$e=s(L0);O_e=n(r$e,"STRONG",{});var _ut=s(O_e);kar=r(_ut,"convnext"),_ut.forEach(t),Sar=r(r$e," \u2014 "),nz=n(r$e,"A",{href:!0});var but=s(nz);Rar=r(but,"TFConvNextModel"),but.forEach(t),Par=r(r$e," (ConvNext model)"),r$e.forEach(t),Bar=i(D),x0=n(D,"LI",{});var t$e=s(x0);V_e=n(t$e,"STRONG",{});var vut=s(V_e);Iar=r(vut,"ctrl"),vut.forEach(t),qar=r(t$e," \u2014 "),sz=n(t$e,"A",{href:!0});var Fut=s(sz);Nar=r(Fut,"TFCTRLModel"),Fut.forEach(t),jar=r(t$e," (CTRL model)"),t$e.forEach(t),Dar=i(D),$0=n(D,"LI",{});var a$e=s($0);X_e=n(a$e,"STRONG",{});var Tut=s(X_e);Gar=r(Tut,"data2vec-vision"),Tut.forEach(t),Oar=r(a$e," \u2014 "),lz=n(a$e,"A",{href:!0});var Mut=s(lz);Var=r(Mut,"TFData2VecVisionModel"),Mut.forEach(t),Xar=r(a$e," (Data2VecVision model)"),a$e.forEach(t),zar=i(D),k0=n(D,"LI",{});var n$e=s(k0);z_e=n(n$e,"STRONG",{});var Eut=s(z_e);Qar=r(Eut,"deberta"),Eut.forEach(t),War=r(n$e," \u2014 "),iz=n(n$e,"A",{href:!0});var Cut=s(iz);Har=r(Cut,"TFDebertaModel"),Cut.forEach(t),Uar=r(n$e," (DeBERTa model)"),n$e.forEach(t),Jar=i(D),S0=n(D,"LI",{});var s$e=s(S0);Q_e=n(s$e,"STRONG",{});var wut=s(Q_e);Yar=r(wut,"deberta-v2"),wut.forEach(t),Kar=r(s$e," \u2014 "),dz=n(s$e,"A",{href:!0});var Aut=s(dz);Zar=r(Aut,"TFDebertaV2Model"),Aut.forEach(t),enr=r(s$e," (DeBERTa-v2 model)"),s$e.forEach(t),onr=i(D),R0=n(D,"LI",{});var l$e=s(R0);W_e=n(l$e,"STRONG",{});var yut=s(W_e);rnr=r(yut,"distilbert"),yut.forEach(t),tnr=r(l$e," \u2014 "),cz=n(l$e,"A",{href:!0});var Lut=s(cz);anr=r(Lut,"TFDistilBertModel"),Lut.forEach(t),nnr=r(l$e," (DistilBERT model)"),l$e.forEach(t),snr=i(D),P0=n(D,"LI",{});var i$e=s(P0);H_e=n(i$e,"STRONG",{});var xut=s(H_e);lnr=r(xut,"dpr"),xut.forEach(t),inr=r(i$e," \u2014 "),fz=n(i$e,"A",{href:!0});var $ut=s(fz);dnr=r($ut,"TFDPRQuestionEncoder"),$ut.forEach(t),cnr=r(i$e," (DPR model)"),i$e.forEach(t),fnr=i(D),B0=n(D,"LI",{});var d$e=s(B0);U_e=n(d$e,"STRONG",{});var kut=s(U_e);mnr=r(kut,"electra"),kut.forEach(t),gnr=r(d$e," \u2014 "),mz=n(d$e,"A",{href:!0});var Sut=s(mz);hnr=r(Sut,"TFElectraModel"),Sut.forEach(t),pnr=r(d$e," (ELECTRA model)"),d$e.forEach(t),unr=i(D),I0=n(D,"LI",{});var c$e=s(I0);J_e=n(c$e,"STRONG",{});var Rut=s(J_e);_nr=r(Rut,"flaubert"),Rut.forEach(t),bnr=r(c$e," \u2014 "),gz=n(c$e,"A",{href:!0});var Put=s(gz);vnr=r(Put,"TFFlaubertModel"),Put.forEach(t),Fnr=r(c$e," (FlauBERT model)"),c$e.forEach(t),Tnr=i(D),Bs=n(D,"LI",{});var f$=s(Bs);Y_e=n(f$,"STRONG",{});var But=s(Y_e);Mnr=r(But,"funnel"),But.forEach(t),Enr=r(f$," \u2014 "),hz=n(f$,"A",{href:!0});var Iut=s(hz);Cnr=r(Iut,"TFFunnelModel"),Iut.forEach(t),wnr=r(f$," or "),pz=n(f$,"A",{href:!0});var qut=s(pz);Anr=r(qut,"TFFunnelBaseModel"),qut.forEach(t),ynr=r(f$," (Funnel Transformer model)"),f$.forEach(t),Lnr=i(D),q0=n(D,"LI",{});var f$e=s(q0);K_e=n(f$e,"STRONG",{});var Nut=s(K_e);xnr=r(Nut,"gpt2"),Nut.forEach(t),$nr=r(f$e," \u2014 "),uz=n(f$e,"A",{href:!0});var jut=s(uz);knr=r(jut,"TFGPT2Model"),jut.forEach(t),Snr=r(f$e," (OpenAI GPT-2 model)"),f$e.forEach(t),Rnr=i(D),N0=n(D,"LI",{});var m$e=s(N0);Z_e=n(m$e,"STRONG",{});var Dut=s(Z_e);Pnr=r(Dut,"gptj"),Dut.forEach(t),Bnr=r(m$e," \u2014 "),_z=n(m$e,"A",{href:!0});var Gut=s(_z);Inr=r(Gut,"TFGPTJModel"),Gut.forEach(t),qnr=r(m$e," (GPT-J model)"),m$e.forEach(t),Nnr=i(D),j0=n(D,"LI",{});var g$e=s(j0);e1e=n(g$e,"STRONG",{});var Out=s(e1e);jnr=r(Out,"hubert"),Out.forEach(t),Dnr=r(g$e," \u2014 "),bz=n(g$e,"A",{href:!0});var Vut=s(bz);Gnr=r(Vut,"TFHubertModel"),Vut.forEach(t),Onr=r(g$e," (Hubert model)"),g$e.forEach(t),Vnr=i(D),D0=n(D,"LI",{});var h$e=s(D0);o1e=n(h$e,"STRONG",{});var Xut=s(o1e);Xnr=r(Xut,"layoutlm"),Xut.forEach(t),znr=r(h$e," \u2014 "),vz=n(h$e,"A",{href:!0});var zut=s(vz);Qnr=r(zut,"TFLayoutLMModel"),zut.forEach(t),Wnr=r(h$e," (LayoutLM model)"),h$e.forEach(t),Hnr=i(D),G0=n(D,"LI",{});var p$e=s(G0);r1e=n(p$e,"STRONG",{});var Qut=s(r1e);Unr=r(Qut,"led"),Qut.forEach(t),Jnr=r(p$e," \u2014 "),Fz=n(p$e,"A",{href:!0});var Wut=s(Fz);Ynr=r(Wut,"TFLEDModel"),Wut.forEach(t),Knr=r(p$e," (LED model)"),p$e.forEach(t),Znr=i(D),O0=n(D,"LI",{});var u$e=s(O0);t1e=n(u$e,"STRONG",{});var Hut=s(t1e);esr=r(Hut,"longformer"),Hut.forEach(t),osr=r(u$e," \u2014 "),Tz=n(u$e,"A",{href:!0});var Uut=s(Tz);rsr=r(Uut,"TFLongformerModel"),Uut.forEach(t),tsr=r(u$e," (Longformer model)"),u$e.forEach(t),asr=i(D),V0=n(D,"LI",{});var _$e=s(V0);a1e=n(_$e,"STRONG",{});var Jut=s(a1e);nsr=r(Jut,"lxmert"),Jut.forEach(t),ssr=r(_$e," \u2014 "),Mz=n(_$e,"A",{href:!0});var Yut=s(Mz);lsr=r(Yut,"TFLxmertModel"),Yut.forEach(t),isr=r(_$e," (LXMERT model)"),_$e.forEach(t),dsr=i(D),X0=n(D,"LI",{});var b$e=s(X0);n1e=n(b$e,"STRONG",{});var Kut=s(n1e);csr=r(Kut,"marian"),Kut.forEach(t),fsr=r(b$e," \u2014 "),Ez=n(b$e,"A",{href:!0});var Zut=s(Ez);msr=r(Zut,"TFMarianModel"),Zut.forEach(t),gsr=r(b$e," (Marian model)"),b$e.forEach(t),hsr=i(D),z0=n(D,"LI",{});var v$e=s(z0);s1e=n(v$e,"STRONG",{});var e_t=s(s1e);psr=r(e_t,"mbart"),e_t.forEach(t),usr=r(v$e," \u2014 "),Cz=n(v$e,"A",{href:!0});var o_t=s(Cz);_sr=r(o_t,"TFMBartModel"),o_t.forEach(t),bsr=r(v$e," (mBART model)"),v$e.forEach(t),vsr=i(D),Q0=n(D,"LI",{});var F$e=s(Q0);l1e=n(F$e,"STRONG",{});var r_t=s(l1e);Fsr=r(r_t,"mobilebert"),r_t.forEach(t),Tsr=r(F$e," \u2014 "),wz=n(F$e,"A",{href:!0});var t_t=s(wz);Msr=r(t_t,"TFMobileBertModel"),t_t.forEach(t),Esr=r(F$e," (MobileBERT model)"),F$e.forEach(t),Csr=i(D),W0=n(D,"LI",{});var T$e=s(W0);i1e=n(T$e,"STRONG",{});var a_t=s(i1e);wsr=r(a_t,"mpnet"),a_t.forEach(t),Asr=r(T$e," \u2014 "),Az=n(T$e,"A",{href:!0});var n_t=s(Az);ysr=r(n_t,"TFMPNetModel"),n_t.forEach(t),Lsr=r(T$e," (MPNet model)"),T$e.forEach(t),xsr=i(D),H0=n(D,"LI",{});var M$e=s(H0);d1e=n(M$e,"STRONG",{});var s_t=s(d1e);$sr=r(s_t,"mt5"),s_t.forEach(t),ksr=r(M$e," \u2014 "),yz=n(M$e,"A",{href:!0});var l_t=s(yz);Ssr=r(l_t,"TFMT5Model"),l_t.forEach(t),Rsr=r(M$e," (mT5 model)"),M$e.forEach(t),Psr=i(D),U0=n(D,"LI",{});var E$e=s(U0);c1e=n(E$e,"STRONG",{});var i_t=s(c1e);Bsr=r(i_t,"openai-gpt"),i_t.forEach(t),Isr=r(E$e," \u2014 "),Lz=n(E$e,"A",{href:!0});var d_t=s(Lz);qsr=r(d_t,"TFOpenAIGPTModel"),d_t.forEach(t),Nsr=r(E$e," (OpenAI GPT model)"),E$e.forEach(t),jsr=i(D),J0=n(D,"LI",{});var C$e=s(J0);f1e=n(C$e,"STRONG",{});var c_t=s(f1e);Dsr=r(c_t,"opt"),c_t.forEach(t),Gsr=r(C$e," \u2014 "),xz=n(C$e,"A",{href:!0});var f_t=s(xz);Osr=r(f_t,"TFOPTModel"),f_t.forEach(t),Vsr=r(C$e," (OPT model)"),C$e.forEach(t),Xsr=i(D),Y0=n(D,"LI",{});var w$e=s(Y0);m1e=n(w$e,"STRONG",{});var m_t=s(m1e);zsr=r(m_t,"pegasus"),m_t.forEach(t),Qsr=r(w$e," \u2014 "),$z=n(w$e,"A",{href:!0});var g_t=s($z);Wsr=r(g_t,"TFPegasusModel"),g_t.forEach(t),Hsr=r(w$e," (Pegasus model)"),w$e.forEach(t),Usr=i(D),K0=n(D,"LI",{});var A$e=s(K0);g1e=n(A$e,"STRONG",{});var h_t=s(g1e);Jsr=r(h_t,"rembert"),h_t.forEach(t),Ysr=r(A$e," \u2014 "),kz=n(A$e,"A",{href:!0});var p_t=s(kz);Ksr=r(p_t,"TFRemBertModel"),p_t.forEach(t),Zsr=r(A$e," (RemBERT model)"),A$e.forEach(t),elr=i(D),Z0=n(D,"LI",{});var y$e=s(Z0);h1e=n(y$e,"STRONG",{});var u_t=s(h1e);olr=r(u_t,"roberta"),u_t.forEach(t),rlr=r(y$e," \u2014 "),Sz=n(y$e,"A",{href:!0});var __t=s(Sz);tlr=r(__t,"TFRobertaModel"),__t.forEach(t),alr=r(y$e," (RoBERTa model)"),y$e.forEach(t),nlr=i(D),eT=n(D,"LI",{});var L$e=s(eT);p1e=n(L$e,"STRONG",{});var b_t=s(p1e);slr=r(b_t,"roformer"),b_t.forEach(t),llr=r(L$e," \u2014 "),Rz=n(L$e,"A",{href:!0});var v_t=s(Rz);ilr=r(v_t,"TFRoFormerModel"),v_t.forEach(t),dlr=r(L$e," (RoFormer model)"),L$e.forEach(t),clr=i(D),oT=n(D,"LI",{});var x$e=s(oT);u1e=n(x$e,"STRONG",{});var F_t=s(u1e);flr=r(F_t,"speech_to_text"),F_t.forEach(t),mlr=r(x$e," \u2014 "),Pz=n(x$e,"A",{href:!0});var T_t=s(Pz);glr=r(T_t,"TFSpeech2TextModel"),T_t.forEach(t),hlr=r(x$e," (Speech2Text model)"),x$e.forEach(t),plr=i(D),rT=n(D,"LI",{});var $$e=s(rT);_1e=n($$e,"STRONG",{});var M_t=s(_1e);ulr=r(M_t,"t5"),M_t.forEach(t),_lr=r($$e," \u2014 "),Bz=n($$e,"A",{href:!0});var E_t=s(Bz);blr=r(E_t,"TFT5Model"),E_t.forEach(t),vlr=r($$e," (T5 model)"),$$e.forEach(t),Flr=i(D),tT=n(D,"LI",{});var k$e=s(tT);b1e=n(k$e,"STRONG",{});var C_t=s(b1e);Tlr=r(C_t,"tapas"),C_t.forEach(t),Mlr=r(k$e," \u2014 "),Iz=n(k$e,"A",{href:!0});var w_t=s(Iz);Elr=r(w_t,"TFTapasModel"),w_t.forEach(t),Clr=r(k$e," (TAPAS model)"),k$e.forEach(t),wlr=i(D),aT=n(D,"LI",{});var S$e=s(aT);v1e=n(S$e,"STRONG",{});var A_t=s(v1e);Alr=r(A_t,"transfo-xl"),A_t.forEach(t),ylr=r(S$e," \u2014 "),qz=n(S$e,"A",{href:!0});var y_t=s(qz);Llr=r(y_t,"TFTransfoXLModel"),y_t.forEach(t),xlr=r(S$e," (Transformer-XL model)"),S$e.forEach(t),$lr=i(D),nT=n(D,"LI",{});var R$e=s(nT);F1e=n(R$e,"STRONG",{});var L_t=s(F1e);klr=r(L_t,"vit"),L_t.forEach(t),Slr=r(R$e," \u2014 "),Nz=n(R$e,"A",{href:!0});var x_t=s(Nz);Rlr=r(x_t,"TFViTModel"),x_t.forEach(t),Plr=r(R$e," (ViT model)"),R$e.forEach(t),Blr=i(D),sT=n(D,"LI",{});var P$e=s(sT);T1e=n(P$e,"STRONG",{});var $_t=s(T1e);Ilr=r($_t,"vit_mae"),$_t.forEach(t),qlr=r(P$e," \u2014 "),jz=n(P$e,"A",{href:!0});var k_t=s(jz);Nlr=r(k_t,"TFViTMAEModel"),k_t.forEach(t),jlr=r(P$e," (ViTMAE model)"),P$e.forEach(t),Dlr=i(D),lT=n(D,"LI",{});var B$e=s(lT);M1e=n(B$e,"STRONG",{});var S_t=s(M1e);Glr=r(S_t,"wav2vec2"),S_t.forEach(t),Olr=r(B$e," \u2014 "),Dz=n(B$e,"A",{href:!0});var R_t=s(Dz);Vlr=r(R_t,"TFWav2Vec2Model"),R_t.forEach(t),Xlr=r(B$e," (Wav2Vec2 model)"),B$e.forEach(t),zlr=i(D),iT=n(D,"LI",{});var I$e=s(iT);E1e=n(I$e,"STRONG",{});var P_t=s(E1e);Qlr=r(P_t,"xlm"),P_t.forEach(t),Wlr=r(I$e," \u2014 "),Gz=n(I$e,"A",{href:!0});var B_t=s(Gz);Hlr=r(B_t,"TFXLMModel"),B_t.forEach(t),Ulr=r(I$e," (XLM model)"),I$e.forEach(t),Jlr=i(D),dT=n(D,"LI",{});var q$e=s(dT);C1e=n(q$e,"STRONG",{});var I_t=s(C1e);Ylr=r(I_t,"xlm-roberta"),I_t.forEach(t),Klr=r(q$e," \u2014 "),Oz=n(q$e,"A",{href:!0});var q_t=s(Oz);Zlr=r(q_t,"TFXLMRobertaModel"),q_t.forEach(t),eir=r(q$e," (XLM-RoBERTa model)"),q$e.forEach(t),oir=i(D),cT=n(D,"LI",{});var N$e=s(cT);w1e=n(N$e,"STRONG",{});var N_t=s(w1e);rir=r(N_t,"xlnet"),N_t.forEach(t),tir=r(N$e," \u2014 "),Vz=n(N$e,"A",{href:!0});var j_t=s(Vz);air=r(j_t,"TFXLNetModel"),j_t.forEach(t),nir=r(N$e," (XLNet model)"),N$e.forEach(t),D.forEach(t),sir=i(fl),T(fT.$$.fragment,fl),fl.forEach(t),cl.forEach(t),jIe=i(f),Gd=n(f,"H2",{class:!0});var zNe=s(Gd);mT=n(zNe,"A",{id:!0,class:!0,href:!0});var D_t=s(mT);A1e=n(D_t,"SPAN",{});var G_t=s(A1e);T(Py.$$.fragment,G_t),G_t.forEach(t),D_t.forEach(t),lir=i(zNe),y1e=n(zNe,"SPAN",{});var O_t=s(y1e);iir=r(O_t,"TFAutoModelForPreTraining"),O_t.forEach(t),zNe.forEach(t),DIe=i(f),Ko=n(f,"DIV",{class:!0});var ml=s(Ko);T(By.$$.fragment,ml),dir=i(ml),Od=n(ml,"P",{});var eZ=s(Od);cir=r(eZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Xz=n(eZ,"A",{href:!0});var V_t=s(Xz);fir=r(V_t,"from_pretrained()"),V_t.forEach(t),mir=r(eZ," class method or the "),zz=n(eZ,"A",{href:!0});var X_t=s(zz);gir=r(X_t,"from_config()"),X_t.forEach(t),hir=r(eZ,` class
method.`),eZ.forEach(t),pir=i(ml),Iy=n(ml,"P",{});var QNe=s(Iy);uir=r(QNe,"This class cannot be instantiated directly using "),L1e=n(QNe,"CODE",{});var z_t=s(L1e);_ir=r(z_t,"__init__()"),z_t.forEach(t),bir=r(QNe," (throws an error)."),QNe.forEach(t),vir=i(ml),At=n(ml,"DIV",{class:!0});var H3=s(At);T(qy.$$.fragment,H3),Fir=i(H3),x1e=n(H3,"P",{});var Q_t=s(x1e);Tir=r(Q_t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Q_t.forEach(t),Mir=i(H3),Vd=n(H3,"P",{});var oZ=s(Vd);Eir=r(oZ,`Note:
Loading a model from its configuration file does `),$1e=n(oZ,"STRONG",{});var W_t=s($1e);Cir=r(W_t,"not"),W_t.forEach(t),wir=r(oZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(oZ,"A",{href:!0});var H_t=s(Qz);Air=r(H_t,"from_pretrained()"),H_t.forEach(t),yir=r(oZ," to load the model weights."),oZ.forEach(t),Lir=i(H3),T(gT.$$.fragment,H3),H3.forEach(t),xir=i(ml),Ar=n(ml,"DIV",{class:!0});var gl=s(Ar);T(Ny.$$.fragment,gl),$ir=i(gl),k1e=n(gl,"P",{});var U_t=s(k1e);kir=r(U_t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),U_t.forEach(t),Sir=i(gl),Za=n(gl,"P",{});var U3=s(Za);Rir=r(U3,"The model class to instantiate is selected based on the "),S1e=n(U3,"CODE",{});var J_t=s(S1e);Pir=r(J_t,"model_type"),J_t.forEach(t),Bir=r(U3,` property of the config object (either
passed as an argument or loaded from `),R1e=n(U3,"CODE",{});var Y_t=s(R1e);Iir=r(Y_t,"pretrained_model_name_or_path"),Y_t.forEach(t),qir=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=n(U3,"CODE",{});var K_t=s(P1e);Nir=r(K_t,"pretrained_model_name_or_path"),K_t.forEach(t),jir=r(U3,":"),U3.forEach(t),Dir=i(gl),ne=n(gl,"UL",{});var le=s(ne);hT=n(le,"LI",{});var j$e=s(hT);B1e=n(j$e,"STRONG",{});var Z_t=s(B1e);Gir=r(Z_t,"albert"),Z_t.forEach(t),Oir=r(j$e," \u2014 "),Wz=n(j$e,"A",{href:!0});var e1t=s(Wz);Vir=r(e1t,"TFAlbertForPreTraining"),e1t.forEach(t),Xir=r(j$e," (ALBERT model)"),j$e.forEach(t),zir=i(le),pT=n(le,"LI",{});var D$e=s(pT);I1e=n(D$e,"STRONG",{});var o1t=s(I1e);Qir=r(o1t,"bart"),o1t.forEach(t),Wir=r(D$e," \u2014 "),Hz=n(D$e,"A",{href:!0});var r1t=s(Hz);Hir=r(r1t,"TFBartForConditionalGeneration"),r1t.forEach(t),Uir=r(D$e," (BART model)"),D$e.forEach(t),Jir=i(le),uT=n(le,"LI",{});var G$e=s(uT);q1e=n(G$e,"STRONG",{});var t1t=s(q1e);Yir=r(t1t,"bert"),t1t.forEach(t),Kir=r(G$e," \u2014 "),Uz=n(G$e,"A",{href:!0});var a1t=s(Uz);Zir=r(a1t,"TFBertForPreTraining"),a1t.forEach(t),edr=r(G$e," (BERT model)"),G$e.forEach(t),odr=i(le),_T=n(le,"LI",{});var O$e=s(_T);N1e=n(O$e,"STRONG",{});var n1t=s(N1e);rdr=r(n1t,"camembert"),n1t.forEach(t),tdr=r(O$e," \u2014 "),Jz=n(O$e,"A",{href:!0});var s1t=s(Jz);adr=r(s1t,"TFCamembertForMaskedLM"),s1t.forEach(t),ndr=r(O$e," (CamemBERT model)"),O$e.forEach(t),sdr=i(le),bT=n(le,"LI",{});var V$e=s(bT);j1e=n(V$e,"STRONG",{});var l1t=s(j1e);ldr=r(l1t,"ctrl"),l1t.forEach(t),idr=r(V$e," \u2014 "),Yz=n(V$e,"A",{href:!0});var i1t=s(Yz);ddr=r(i1t,"TFCTRLLMHeadModel"),i1t.forEach(t),cdr=r(V$e," (CTRL model)"),V$e.forEach(t),fdr=i(le),vT=n(le,"LI",{});var X$e=s(vT);D1e=n(X$e,"STRONG",{});var d1t=s(D1e);mdr=r(d1t,"distilbert"),d1t.forEach(t),gdr=r(X$e," \u2014 "),Kz=n(X$e,"A",{href:!0});var c1t=s(Kz);hdr=r(c1t,"TFDistilBertForMaskedLM"),c1t.forEach(t),pdr=r(X$e," (DistilBERT model)"),X$e.forEach(t),udr=i(le),FT=n(le,"LI",{});var z$e=s(FT);G1e=n(z$e,"STRONG",{});var f1t=s(G1e);_dr=r(f1t,"electra"),f1t.forEach(t),bdr=r(z$e," \u2014 "),Zz=n(z$e,"A",{href:!0});var m1t=s(Zz);vdr=r(m1t,"TFElectraForPreTraining"),m1t.forEach(t),Fdr=r(z$e," (ELECTRA model)"),z$e.forEach(t),Tdr=i(le),TT=n(le,"LI",{});var Q$e=s(TT);O1e=n(Q$e,"STRONG",{});var g1t=s(O1e);Mdr=r(g1t,"flaubert"),g1t.forEach(t),Edr=r(Q$e," \u2014 "),eQ=n(Q$e,"A",{href:!0});var h1t=s(eQ);Cdr=r(h1t,"TFFlaubertWithLMHeadModel"),h1t.forEach(t),wdr=r(Q$e," (FlauBERT model)"),Q$e.forEach(t),Adr=i(le),MT=n(le,"LI",{});var W$e=s(MT);V1e=n(W$e,"STRONG",{});var p1t=s(V1e);ydr=r(p1t,"funnel"),p1t.forEach(t),Ldr=r(W$e," \u2014 "),oQ=n(W$e,"A",{href:!0});var u1t=s(oQ);xdr=r(u1t,"TFFunnelForPreTraining"),u1t.forEach(t),$dr=r(W$e," (Funnel Transformer model)"),W$e.forEach(t),kdr=i(le),ET=n(le,"LI",{});var H$e=s(ET);X1e=n(H$e,"STRONG",{});var _1t=s(X1e);Sdr=r(_1t,"gpt2"),_1t.forEach(t),Rdr=r(H$e," \u2014 "),rQ=n(H$e,"A",{href:!0});var b1t=s(rQ);Pdr=r(b1t,"TFGPT2LMHeadModel"),b1t.forEach(t),Bdr=r(H$e," (OpenAI GPT-2 model)"),H$e.forEach(t),Idr=i(le),CT=n(le,"LI",{});var U$e=s(CT);z1e=n(U$e,"STRONG",{});var v1t=s(z1e);qdr=r(v1t,"layoutlm"),v1t.forEach(t),Ndr=r(U$e," \u2014 "),tQ=n(U$e,"A",{href:!0});var F1t=s(tQ);jdr=r(F1t,"TFLayoutLMForMaskedLM"),F1t.forEach(t),Ddr=r(U$e," (LayoutLM model)"),U$e.forEach(t),Gdr=i(le),wT=n(le,"LI",{});var J$e=s(wT);Q1e=n(J$e,"STRONG",{});var T1t=s(Q1e);Odr=r(T1t,"lxmert"),T1t.forEach(t),Vdr=r(J$e," \u2014 "),aQ=n(J$e,"A",{href:!0});var M1t=s(aQ);Xdr=r(M1t,"TFLxmertForPreTraining"),M1t.forEach(t),zdr=r(J$e," (LXMERT model)"),J$e.forEach(t),Qdr=i(le),AT=n(le,"LI",{});var Y$e=s(AT);W1e=n(Y$e,"STRONG",{});var E1t=s(W1e);Wdr=r(E1t,"mobilebert"),E1t.forEach(t),Hdr=r(Y$e," \u2014 "),nQ=n(Y$e,"A",{href:!0});var C1t=s(nQ);Udr=r(C1t,"TFMobileBertForPreTraining"),C1t.forEach(t),Jdr=r(Y$e," (MobileBERT model)"),Y$e.forEach(t),Ydr=i(le),yT=n(le,"LI",{});var K$e=s(yT);H1e=n(K$e,"STRONG",{});var w1t=s(H1e);Kdr=r(w1t,"mpnet"),w1t.forEach(t),Zdr=r(K$e," \u2014 "),sQ=n(K$e,"A",{href:!0});var A1t=s(sQ);ecr=r(A1t,"TFMPNetForMaskedLM"),A1t.forEach(t),ocr=r(K$e," (MPNet model)"),K$e.forEach(t),rcr=i(le),LT=n(le,"LI",{});var Z$e=s(LT);U1e=n(Z$e,"STRONG",{});var y1t=s(U1e);tcr=r(y1t,"openai-gpt"),y1t.forEach(t),acr=r(Z$e," \u2014 "),lQ=n(Z$e,"A",{href:!0});var L1t=s(lQ);ncr=r(L1t,"TFOpenAIGPTLMHeadModel"),L1t.forEach(t),scr=r(Z$e," (OpenAI GPT model)"),Z$e.forEach(t),lcr=i(le),xT=n(le,"LI",{});var eke=s(xT);J1e=n(eke,"STRONG",{});var x1t=s(J1e);icr=r(x1t,"roberta"),x1t.forEach(t),dcr=r(eke," \u2014 "),iQ=n(eke,"A",{href:!0});var $1t=s(iQ);ccr=r($1t,"TFRobertaForMaskedLM"),$1t.forEach(t),fcr=r(eke," (RoBERTa model)"),eke.forEach(t),mcr=i(le),$T=n(le,"LI",{});var oke=s($T);Y1e=n(oke,"STRONG",{});var k1t=s(Y1e);gcr=r(k1t,"t5"),k1t.forEach(t),hcr=r(oke," \u2014 "),dQ=n(oke,"A",{href:!0});var S1t=s(dQ);pcr=r(S1t,"TFT5ForConditionalGeneration"),S1t.forEach(t),ucr=r(oke," (T5 model)"),oke.forEach(t),_cr=i(le),kT=n(le,"LI",{});var rke=s(kT);K1e=n(rke,"STRONG",{});var R1t=s(K1e);bcr=r(R1t,"tapas"),R1t.forEach(t),vcr=r(rke," \u2014 "),cQ=n(rke,"A",{href:!0});var P1t=s(cQ);Fcr=r(P1t,"TFTapasForMaskedLM"),P1t.forEach(t),Tcr=r(rke," (TAPAS model)"),rke.forEach(t),Mcr=i(le),ST=n(le,"LI",{});var tke=s(ST);Z1e=n(tke,"STRONG",{});var B1t=s(Z1e);Ecr=r(B1t,"transfo-xl"),B1t.forEach(t),Ccr=r(tke," \u2014 "),fQ=n(tke,"A",{href:!0});var I1t=s(fQ);wcr=r(I1t,"TFTransfoXLLMHeadModel"),I1t.forEach(t),Acr=r(tke," (Transformer-XL model)"),tke.forEach(t),ycr=i(le),RT=n(le,"LI",{});var ake=s(RT);e8e=n(ake,"STRONG",{});var q1t=s(e8e);Lcr=r(q1t,"vit_mae"),q1t.forEach(t),xcr=r(ake," \u2014 "),mQ=n(ake,"A",{href:!0});var N1t=s(mQ);$cr=r(N1t,"TFViTMAEForPreTraining"),N1t.forEach(t),kcr=r(ake," (ViTMAE model)"),ake.forEach(t),Scr=i(le),PT=n(le,"LI",{});var nke=s(PT);o8e=n(nke,"STRONG",{});var j1t=s(o8e);Rcr=r(j1t,"xlm"),j1t.forEach(t),Pcr=r(nke," \u2014 "),gQ=n(nke,"A",{href:!0});var D1t=s(gQ);Bcr=r(D1t,"TFXLMWithLMHeadModel"),D1t.forEach(t),Icr=r(nke," (XLM model)"),nke.forEach(t),qcr=i(le),BT=n(le,"LI",{});var ske=s(BT);r8e=n(ske,"STRONG",{});var G1t=s(r8e);Ncr=r(G1t,"xlm-roberta"),G1t.forEach(t),jcr=r(ske," \u2014 "),hQ=n(ske,"A",{href:!0});var O1t=s(hQ);Dcr=r(O1t,"TFXLMRobertaForMaskedLM"),O1t.forEach(t),Gcr=r(ske," (XLM-RoBERTa model)"),ske.forEach(t),Ocr=i(le),IT=n(le,"LI",{});var lke=s(IT);t8e=n(lke,"STRONG",{});var V1t=s(t8e);Vcr=r(V1t,"xlnet"),V1t.forEach(t),Xcr=r(lke," \u2014 "),pQ=n(lke,"A",{href:!0});var X1t=s(pQ);zcr=r(X1t,"TFXLNetLMHeadModel"),X1t.forEach(t),Qcr=r(lke," (XLNet model)"),lke.forEach(t),le.forEach(t),Wcr=i(gl),T(qT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),GIe=i(f),Xd=n(f,"H2",{class:!0});var WNe=s(Xd);NT=n(WNe,"A",{id:!0,class:!0,href:!0});var z1t=s(NT);a8e=n(z1t,"SPAN",{});var Q1t=s(a8e);T(jy.$$.fragment,Q1t),Q1t.forEach(t),z1t.forEach(t),Hcr=i(WNe),n8e=n(WNe,"SPAN",{});var W1t=s(n8e);Ucr=r(W1t,"TFAutoModelForCausalLM"),W1t.forEach(t),WNe.forEach(t),OIe=i(f),Zo=n(f,"DIV",{class:!0});var hl=s(Zo);T(Dy.$$.fragment,hl),Jcr=i(hl),zd=n(hl,"P",{});var rZ=s(zd);Ycr=r(rZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uQ=n(rZ,"A",{href:!0});var H1t=s(uQ);Kcr=r(H1t,"from_pretrained()"),H1t.forEach(t),Zcr=r(rZ," class method or the "),_Q=n(rZ,"A",{href:!0});var U1t=s(_Q);efr=r(U1t,"from_config()"),U1t.forEach(t),ofr=r(rZ,` class
method.`),rZ.forEach(t),rfr=i(hl),Gy=n(hl,"P",{});var HNe=s(Gy);tfr=r(HNe,"This class cannot be instantiated directly using "),s8e=n(HNe,"CODE",{});var J1t=s(s8e);afr=r(J1t,"__init__()"),J1t.forEach(t),nfr=r(HNe," (throws an error)."),HNe.forEach(t),sfr=i(hl),yt=n(hl,"DIV",{class:!0});var J3=s(yt);T(Oy.$$.fragment,J3),lfr=i(J3),l8e=n(J3,"P",{});var Y1t=s(l8e);ifr=r(Y1t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Y1t.forEach(t),dfr=i(J3),Qd=n(J3,"P",{});var tZ=s(Qd);cfr=r(tZ,`Note:
Loading a model from its configuration file does `),i8e=n(tZ,"STRONG",{});var K1t=s(i8e);ffr=r(K1t,"not"),K1t.forEach(t),mfr=r(tZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(tZ,"A",{href:!0});var Z1t=s(bQ);gfr=r(Z1t,"from_pretrained()"),Z1t.forEach(t),hfr=r(tZ," to load the model weights."),tZ.forEach(t),pfr=i(J3),T(jT.$$.fragment,J3),J3.forEach(t),ufr=i(hl),yr=n(hl,"DIV",{class:!0});var pl=s(yr);T(Vy.$$.fragment,pl),_fr=i(pl),d8e=n(pl,"P",{});var e8t=s(d8e);bfr=r(e8t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),e8t.forEach(t),vfr=i(pl),en=n(pl,"P",{});var Y3=s(en);Ffr=r(Y3,"The model class to instantiate is selected based on the "),c8e=n(Y3,"CODE",{});var o8t=s(c8e);Tfr=r(o8t,"model_type"),o8t.forEach(t),Mfr=r(Y3,` property of the config object (either
passed as an argument or loaded from `),f8e=n(Y3,"CODE",{});var r8t=s(f8e);Efr=r(r8t,"pretrained_model_name_or_path"),r8t.forEach(t),Cfr=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m8e=n(Y3,"CODE",{});var t8t=s(m8e);wfr=r(t8t,"pretrained_model_name_or_path"),t8t.forEach(t),Afr=r(Y3,":"),Y3.forEach(t),yfr=i(pl),Te=n(pl,"UL",{});var Ce=s(Te);DT=n(Ce,"LI",{});var ike=s(DT);g8e=n(ike,"STRONG",{});var a8t=s(g8e);Lfr=r(a8t,"bert"),a8t.forEach(t),xfr=r(ike," \u2014 "),vQ=n(ike,"A",{href:!0});var n8t=s(vQ);$fr=r(n8t,"TFBertLMHeadModel"),n8t.forEach(t),kfr=r(ike," (BERT model)"),ike.forEach(t),Sfr=i(Ce),GT=n(Ce,"LI",{});var dke=s(GT);h8e=n(dke,"STRONG",{});var s8t=s(h8e);Rfr=r(s8t,"camembert"),s8t.forEach(t),Pfr=r(dke," \u2014 "),FQ=n(dke,"A",{href:!0});var l8t=s(FQ);Bfr=r(l8t,"TFCamembertForCausalLM"),l8t.forEach(t),Ifr=r(dke," (CamemBERT model)"),dke.forEach(t),qfr=i(Ce),OT=n(Ce,"LI",{});var cke=s(OT);p8e=n(cke,"STRONG",{});var i8t=s(p8e);Nfr=r(i8t,"ctrl"),i8t.forEach(t),jfr=r(cke," \u2014 "),TQ=n(cke,"A",{href:!0});var d8t=s(TQ);Dfr=r(d8t,"TFCTRLLMHeadModel"),d8t.forEach(t),Gfr=r(cke," (CTRL model)"),cke.forEach(t),Ofr=i(Ce),VT=n(Ce,"LI",{});var fke=s(VT);u8e=n(fke,"STRONG",{});var c8t=s(u8e);Vfr=r(c8t,"gpt2"),c8t.forEach(t),Xfr=r(fke," \u2014 "),MQ=n(fke,"A",{href:!0});var f8t=s(MQ);zfr=r(f8t,"TFGPT2LMHeadModel"),f8t.forEach(t),Qfr=r(fke," (OpenAI GPT-2 model)"),fke.forEach(t),Wfr=i(Ce),XT=n(Ce,"LI",{});var mke=s(XT);_8e=n(mke,"STRONG",{});var m8t=s(_8e);Hfr=r(m8t,"gptj"),m8t.forEach(t),Ufr=r(mke," \u2014 "),EQ=n(mke,"A",{href:!0});var g8t=s(EQ);Jfr=r(g8t,"TFGPTJForCausalLM"),g8t.forEach(t),Yfr=r(mke," (GPT-J model)"),mke.forEach(t),Kfr=i(Ce),zT=n(Ce,"LI",{});var gke=s(zT);b8e=n(gke,"STRONG",{});var h8t=s(b8e);Zfr=r(h8t,"openai-gpt"),h8t.forEach(t),emr=r(gke," \u2014 "),CQ=n(gke,"A",{href:!0});var p8t=s(CQ);omr=r(p8t,"TFOpenAIGPTLMHeadModel"),p8t.forEach(t),rmr=r(gke," (OpenAI GPT model)"),gke.forEach(t),tmr=i(Ce),QT=n(Ce,"LI",{});var hke=s(QT);v8e=n(hke,"STRONG",{});var u8t=s(v8e);amr=r(u8t,"rembert"),u8t.forEach(t),nmr=r(hke," \u2014 "),wQ=n(hke,"A",{href:!0});var _8t=s(wQ);smr=r(_8t,"TFRemBertForCausalLM"),_8t.forEach(t),lmr=r(hke," (RemBERT model)"),hke.forEach(t),imr=i(Ce),WT=n(Ce,"LI",{});var pke=s(WT);F8e=n(pke,"STRONG",{});var b8t=s(F8e);dmr=r(b8t,"roberta"),b8t.forEach(t),cmr=r(pke," \u2014 "),AQ=n(pke,"A",{href:!0});var v8t=s(AQ);fmr=r(v8t,"TFRobertaForCausalLM"),v8t.forEach(t),mmr=r(pke," (RoBERTa model)"),pke.forEach(t),gmr=i(Ce),HT=n(Ce,"LI",{});var uke=s(HT);T8e=n(uke,"STRONG",{});var F8t=s(T8e);hmr=r(F8t,"roformer"),F8t.forEach(t),pmr=r(uke," \u2014 "),yQ=n(uke,"A",{href:!0});var T8t=s(yQ);umr=r(T8t,"TFRoFormerForCausalLM"),T8t.forEach(t),_mr=r(uke," (RoFormer model)"),uke.forEach(t),bmr=i(Ce),UT=n(Ce,"LI",{});var _ke=s(UT);M8e=n(_ke,"STRONG",{});var M8t=s(M8e);vmr=r(M8t,"transfo-xl"),M8t.forEach(t),Fmr=r(_ke," \u2014 "),LQ=n(_ke,"A",{href:!0});var E8t=s(LQ);Tmr=r(E8t,"TFTransfoXLLMHeadModel"),E8t.forEach(t),Mmr=r(_ke," (Transformer-XL model)"),_ke.forEach(t),Emr=i(Ce),JT=n(Ce,"LI",{});var bke=s(JT);E8e=n(bke,"STRONG",{});var C8t=s(E8e);Cmr=r(C8t,"xlm"),C8t.forEach(t),wmr=r(bke," \u2014 "),xQ=n(bke,"A",{href:!0});var w8t=s(xQ);Amr=r(w8t,"TFXLMWithLMHeadModel"),w8t.forEach(t),ymr=r(bke," (XLM model)"),bke.forEach(t),Lmr=i(Ce),YT=n(Ce,"LI",{});var vke=s(YT);C8e=n(vke,"STRONG",{});var A8t=s(C8e);xmr=r(A8t,"xlnet"),A8t.forEach(t),$mr=r(vke," \u2014 "),$Q=n(vke,"A",{href:!0});var y8t=s($Q);kmr=r(y8t,"TFXLNetLMHeadModel"),y8t.forEach(t),Smr=r(vke," (XLNet model)"),vke.forEach(t),Ce.forEach(t),Rmr=i(pl),T(KT.$$.fragment,pl),pl.forEach(t),hl.forEach(t),VIe=i(f),Wd=n(f,"H2",{class:!0});var UNe=s(Wd);ZT=n(UNe,"A",{id:!0,class:!0,href:!0});var L8t=s(ZT);w8e=n(L8t,"SPAN",{});var x8t=s(w8e);T(Xy.$$.fragment,x8t),x8t.forEach(t),L8t.forEach(t),Pmr=i(UNe),A8e=n(UNe,"SPAN",{});var $8t=s(A8e);Bmr=r($8t,"TFAutoModelForImageClassification"),$8t.forEach(t),UNe.forEach(t),XIe=i(f),er=n(f,"DIV",{class:!0});var ul=s(er);T(zy.$$.fragment,ul),Imr=i(ul),Hd=n(ul,"P",{});var aZ=s(Hd);qmr=r(aZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kQ=n(aZ,"A",{href:!0});var k8t=s(kQ);Nmr=r(k8t,"from_pretrained()"),k8t.forEach(t),jmr=r(aZ," class method or the "),SQ=n(aZ,"A",{href:!0});var S8t=s(SQ);Dmr=r(S8t,"from_config()"),S8t.forEach(t),Gmr=r(aZ,` class
method.`),aZ.forEach(t),Omr=i(ul),Qy=n(ul,"P",{});var JNe=s(Qy);Vmr=r(JNe,"This class cannot be instantiated directly using "),y8e=n(JNe,"CODE",{});var R8t=s(y8e);Xmr=r(R8t,"__init__()"),R8t.forEach(t),zmr=r(JNe," (throws an error)."),JNe.forEach(t),Qmr=i(ul),Lt=n(ul,"DIV",{class:!0});var K3=s(Lt);T(Wy.$$.fragment,K3),Wmr=i(K3),L8e=n(K3,"P",{});var P8t=s(L8e);Hmr=r(P8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),P8t.forEach(t),Umr=i(K3),Ud=n(K3,"P",{});var nZ=s(Ud);Jmr=r(nZ,`Note:
Loading a model from its configuration file does `),x8e=n(nZ,"STRONG",{});var B8t=s(x8e);Ymr=r(B8t,"not"),B8t.forEach(t),Kmr=r(nZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(nZ,"A",{href:!0});var I8t=s(RQ);Zmr=r(I8t,"from_pretrained()"),I8t.forEach(t),egr=r(nZ," to load the model weights."),nZ.forEach(t),ogr=i(K3),T(e7.$$.fragment,K3),K3.forEach(t),rgr=i(ul),Lr=n(ul,"DIV",{class:!0});var _l=s(Lr);T(Hy.$$.fragment,_l),tgr=i(_l),$8e=n(_l,"P",{});var q8t=s($8e);agr=r(q8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),q8t.forEach(t),ngr=i(_l),on=n(_l,"P",{});var Z3=s(on);sgr=r(Z3,"The model class to instantiate is selected based on the "),k8e=n(Z3,"CODE",{});var N8t=s(k8e);lgr=r(N8t,"model_type"),N8t.forEach(t),igr=r(Z3,` property of the config object (either
passed as an argument or loaded from `),S8e=n(Z3,"CODE",{});var j8t=s(S8e);dgr=r(j8t,"pretrained_model_name_or_path"),j8t.forEach(t),cgr=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R8e=n(Z3,"CODE",{});var D8t=s(R8e);fgr=r(D8t,"pretrained_model_name_or_path"),D8t.forEach(t),mgr=r(Z3,":"),Z3.forEach(t),ggr=i(_l),Jd=n(_l,"UL",{});var sZ=s(Jd);o7=n(sZ,"LI",{});var Fke=s(o7);P8e=n(Fke,"STRONG",{});var G8t=s(P8e);hgr=r(G8t,"convnext"),G8t.forEach(t),pgr=r(Fke," \u2014 "),PQ=n(Fke,"A",{href:!0});var O8t=s(PQ);ugr=r(O8t,"TFConvNextForImageClassification"),O8t.forEach(t),_gr=r(Fke," (ConvNext model)"),Fke.forEach(t),bgr=i(sZ),r7=n(sZ,"LI",{});var Tke=s(r7);B8e=n(Tke,"STRONG",{});var V8t=s(B8e);vgr=r(V8t,"data2vec-vision"),V8t.forEach(t),Fgr=r(Tke," \u2014 "),BQ=n(Tke,"A",{href:!0});var X8t=s(BQ);Tgr=r(X8t,"TFData2VecVisionForImageClassification"),X8t.forEach(t),Mgr=r(Tke," (Data2VecVision model)"),Tke.forEach(t),Egr=i(sZ),t7=n(sZ,"LI",{});var Mke=s(t7);I8e=n(Mke,"STRONG",{});var z8t=s(I8e);Cgr=r(z8t,"vit"),z8t.forEach(t),wgr=r(Mke," \u2014 "),IQ=n(Mke,"A",{href:!0});var Q8t=s(IQ);Agr=r(Q8t,"TFViTForImageClassification"),Q8t.forEach(t),ygr=r(Mke," (ViT model)"),Mke.forEach(t),sZ.forEach(t),Lgr=i(_l),T(a7.$$.fragment,_l),_l.forEach(t),ul.forEach(t),zIe=i(f),Yd=n(f,"H2",{class:!0});var YNe=s(Yd);n7=n(YNe,"A",{id:!0,class:!0,href:!0});var W8t=s(n7);q8e=n(W8t,"SPAN",{});var H8t=s(q8e);T(Uy.$$.fragment,H8t),H8t.forEach(t),W8t.forEach(t),xgr=i(YNe),N8e=n(YNe,"SPAN",{});var U8t=s(N8e);$gr=r(U8t,"TFAutoModelForMaskedLM"),U8t.forEach(t),YNe.forEach(t),QIe=i(f),or=n(f,"DIV",{class:!0});var bl=s(or);T(Jy.$$.fragment,bl),kgr=i(bl),Kd=n(bl,"P",{});var lZ=s(Kd);Sgr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qQ=n(lZ,"A",{href:!0});var J8t=s(qQ);Rgr=r(J8t,"from_pretrained()"),J8t.forEach(t),Pgr=r(lZ," class method or the "),NQ=n(lZ,"A",{href:!0});var Y8t=s(NQ);Bgr=r(Y8t,"from_config()"),Y8t.forEach(t),Igr=r(lZ,` class
method.`),lZ.forEach(t),qgr=i(bl),Yy=n(bl,"P",{});var KNe=s(Yy);Ngr=r(KNe,"This class cannot be instantiated directly using "),j8e=n(KNe,"CODE",{});var K8t=s(j8e);jgr=r(K8t,"__init__()"),K8t.forEach(t),Dgr=r(KNe," (throws an error)."),KNe.forEach(t),Ggr=i(bl),xt=n(bl,"DIV",{class:!0});var ew=s(xt);T(Ky.$$.fragment,ew),Ogr=i(ew),D8e=n(ew,"P",{});var Z8t=s(D8e);Vgr=r(Z8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Z8t.forEach(t),Xgr=i(ew),Zd=n(ew,"P",{});var iZ=s(Zd);zgr=r(iZ,`Note:
Loading a model from its configuration file does `),G8e=n(iZ,"STRONG",{});var ebt=s(G8e);Qgr=r(ebt,"not"),ebt.forEach(t),Wgr=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=n(iZ,"A",{href:!0});var obt=s(jQ);Hgr=r(obt,"from_pretrained()"),obt.forEach(t),Ugr=r(iZ," to load the model weights."),iZ.forEach(t),Jgr=i(ew),T(s7.$$.fragment,ew),ew.forEach(t),Ygr=i(bl),xr=n(bl,"DIV",{class:!0});var vl=s(xr);T(Zy.$$.fragment,vl),Kgr=i(vl),O8e=n(vl,"P",{});var rbt=s(O8e);Zgr=r(rbt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rbt.forEach(t),ehr=i(vl),rn=n(vl,"P",{});var ow=s(rn);ohr=r(ow,"The model class to instantiate is selected based on the "),V8e=n(ow,"CODE",{});var tbt=s(V8e);rhr=r(tbt,"model_type"),tbt.forEach(t),thr=r(ow,` property of the config object (either
passed as an argument or loaded from `),X8e=n(ow,"CODE",{});var abt=s(X8e);ahr=r(abt,"pretrained_model_name_or_path"),abt.forEach(t),nhr=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z8e=n(ow,"CODE",{});var nbt=s(z8e);shr=r(nbt,"pretrained_model_name_or_path"),nbt.forEach(t),lhr=r(ow,":"),ow.forEach(t),ihr=i(vl),ie=n(vl,"UL",{});var fe=s(ie);l7=n(fe,"LI",{});var Eke=s(l7);Q8e=n(Eke,"STRONG",{});var sbt=s(Q8e);dhr=r(sbt,"albert"),sbt.forEach(t),chr=r(Eke," \u2014 "),DQ=n(Eke,"A",{href:!0});var lbt=s(DQ);fhr=r(lbt,"TFAlbertForMaskedLM"),lbt.forEach(t),mhr=r(Eke," (ALBERT model)"),Eke.forEach(t),ghr=i(fe),i7=n(fe,"LI",{});var Cke=s(i7);W8e=n(Cke,"STRONG",{});var ibt=s(W8e);hhr=r(ibt,"bert"),ibt.forEach(t),phr=r(Cke," \u2014 "),GQ=n(Cke,"A",{href:!0});var dbt=s(GQ);uhr=r(dbt,"TFBertForMaskedLM"),dbt.forEach(t),_hr=r(Cke," (BERT model)"),Cke.forEach(t),bhr=i(fe),d7=n(fe,"LI",{});var wke=s(d7);H8e=n(wke,"STRONG",{});var cbt=s(H8e);vhr=r(cbt,"camembert"),cbt.forEach(t),Fhr=r(wke," \u2014 "),OQ=n(wke,"A",{href:!0});var fbt=s(OQ);Thr=r(fbt,"TFCamembertForMaskedLM"),fbt.forEach(t),Mhr=r(wke," (CamemBERT model)"),wke.forEach(t),Ehr=i(fe),c7=n(fe,"LI",{});var Ake=s(c7);U8e=n(Ake,"STRONG",{});var mbt=s(U8e);Chr=r(mbt,"convbert"),mbt.forEach(t),whr=r(Ake," \u2014 "),VQ=n(Ake,"A",{href:!0});var gbt=s(VQ);Ahr=r(gbt,"TFConvBertForMaskedLM"),gbt.forEach(t),yhr=r(Ake," (ConvBERT model)"),Ake.forEach(t),Lhr=i(fe),f7=n(fe,"LI",{});var yke=s(f7);J8e=n(yke,"STRONG",{});var hbt=s(J8e);xhr=r(hbt,"deberta"),hbt.forEach(t),$hr=r(yke," \u2014 "),XQ=n(yke,"A",{href:!0});var pbt=s(XQ);khr=r(pbt,"TFDebertaForMaskedLM"),pbt.forEach(t),Shr=r(yke," (DeBERTa model)"),yke.forEach(t),Rhr=i(fe),m7=n(fe,"LI",{});var Lke=s(m7);Y8e=n(Lke,"STRONG",{});var ubt=s(Y8e);Phr=r(ubt,"deberta-v2"),ubt.forEach(t),Bhr=r(Lke," \u2014 "),zQ=n(Lke,"A",{href:!0});var _bt=s(zQ);Ihr=r(_bt,"TFDebertaV2ForMaskedLM"),_bt.forEach(t),qhr=r(Lke," (DeBERTa-v2 model)"),Lke.forEach(t),Nhr=i(fe),g7=n(fe,"LI",{});var xke=s(g7);K8e=n(xke,"STRONG",{});var bbt=s(K8e);jhr=r(bbt,"distilbert"),bbt.forEach(t),Dhr=r(xke," \u2014 "),QQ=n(xke,"A",{href:!0});var vbt=s(QQ);Ghr=r(vbt,"TFDistilBertForMaskedLM"),vbt.forEach(t),Ohr=r(xke," (DistilBERT model)"),xke.forEach(t),Vhr=i(fe),h7=n(fe,"LI",{});var $ke=s(h7);Z8e=n($ke,"STRONG",{});var Fbt=s(Z8e);Xhr=r(Fbt,"electra"),Fbt.forEach(t),zhr=r($ke," \u2014 "),WQ=n($ke,"A",{href:!0});var Tbt=s(WQ);Qhr=r(Tbt,"TFElectraForMaskedLM"),Tbt.forEach(t),Whr=r($ke," (ELECTRA model)"),$ke.forEach(t),Hhr=i(fe),p7=n(fe,"LI",{});var kke=s(p7);ebe=n(kke,"STRONG",{});var Mbt=s(ebe);Uhr=r(Mbt,"flaubert"),Mbt.forEach(t),Jhr=r(kke," \u2014 "),HQ=n(kke,"A",{href:!0});var Ebt=s(HQ);Yhr=r(Ebt,"TFFlaubertWithLMHeadModel"),Ebt.forEach(t),Khr=r(kke," (FlauBERT model)"),kke.forEach(t),Zhr=i(fe),u7=n(fe,"LI",{});var Ske=s(u7);obe=n(Ske,"STRONG",{});var Cbt=s(obe);epr=r(Cbt,"funnel"),Cbt.forEach(t),opr=r(Ske," \u2014 "),UQ=n(Ske,"A",{href:!0});var wbt=s(UQ);rpr=r(wbt,"TFFunnelForMaskedLM"),wbt.forEach(t),tpr=r(Ske," (Funnel Transformer model)"),Ske.forEach(t),apr=i(fe),_7=n(fe,"LI",{});var Rke=s(_7);rbe=n(Rke,"STRONG",{});var Abt=s(rbe);npr=r(Abt,"layoutlm"),Abt.forEach(t),spr=r(Rke," \u2014 "),JQ=n(Rke,"A",{href:!0});var ybt=s(JQ);lpr=r(ybt,"TFLayoutLMForMaskedLM"),ybt.forEach(t),ipr=r(Rke," (LayoutLM model)"),Rke.forEach(t),dpr=i(fe),b7=n(fe,"LI",{});var Pke=s(b7);tbe=n(Pke,"STRONG",{});var Lbt=s(tbe);cpr=r(Lbt,"longformer"),Lbt.forEach(t),fpr=r(Pke," \u2014 "),YQ=n(Pke,"A",{href:!0});var xbt=s(YQ);mpr=r(xbt,"TFLongformerForMaskedLM"),xbt.forEach(t),gpr=r(Pke," (Longformer model)"),Pke.forEach(t),hpr=i(fe),v7=n(fe,"LI",{});var Bke=s(v7);abe=n(Bke,"STRONG",{});var $bt=s(abe);ppr=r($bt,"mobilebert"),$bt.forEach(t),upr=r(Bke," \u2014 "),KQ=n(Bke,"A",{href:!0});var kbt=s(KQ);_pr=r(kbt,"TFMobileBertForMaskedLM"),kbt.forEach(t),bpr=r(Bke," (MobileBERT model)"),Bke.forEach(t),vpr=i(fe),F7=n(fe,"LI",{});var Ike=s(F7);nbe=n(Ike,"STRONG",{});var Sbt=s(nbe);Fpr=r(Sbt,"mpnet"),Sbt.forEach(t),Tpr=r(Ike," \u2014 "),ZQ=n(Ike,"A",{href:!0});var Rbt=s(ZQ);Mpr=r(Rbt,"TFMPNetForMaskedLM"),Rbt.forEach(t),Epr=r(Ike," (MPNet model)"),Ike.forEach(t),Cpr=i(fe),T7=n(fe,"LI",{});var qke=s(T7);sbe=n(qke,"STRONG",{});var Pbt=s(sbe);wpr=r(Pbt,"rembert"),Pbt.forEach(t),Apr=r(qke," \u2014 "),eW=n(qke,"A",{href:!0});var Bbt=s(eW);ypr=r(Bbt,"TFRemBertForMaskedLM"),Bbt.forEach(t),Lpr=r(qke," (RemBERT model)"),qke.forEach(t),xpr=i(fe),M7=n(fe,"LI",{});var Nke=s(M7);lbe=n(Nke,"STRONG",{});var Ibt=s(lbe);$pr=r(Ibt,"roberta"),Ibt.forEach(t),kpr=r(Nke," \u2014 "),oW=n(Nke,"A",{href:!0});var qbt=s(oW);Spr=r(qbt,"TFRobertaForMaskedLM"),qbt.forEach(t),Rpr=r(Nke," (RoBERTa model)"),Nke.forEach(t),Ppr=i(fe),E7=n(fe,"LI",{});var jke=s(E7);ibe=n(jke,"STRONG",{});var Nbt=s(ibe);Bpr=r(Nbt,"roformer"),Nbt.forEach(t),Ipr=r(jke," \u2014 "),rW=n(jke,"A",{href:!0});var jbt=s(rW);qpr=r(jbt,"TFRoFormerForMaskedLM"),jbt.forEach(t),Npr=r(jke," (RoFormer model)"),jke.forEach(t),jpr=i(fe),C7=n(fe,"LI",{});var Dke=s(C7);dbe=n(Dke,"STRONG",{});var Dbt=s(dbe);Dpr=r(Dbt,"tapas"),Dbt.forEach(t),Gpr=r(Dke," \u2014 "),tW=n(Dke,"A",{href:!0});var Gbt=s(tW);Opr=r(Gbt,"TFTapasForMaskedLM"),Gbt.forEach(t),Vpr=r(Dke," (TAPAS model)"),Dke.forEach(t),Xpr=i(fe),w7=n(fe,"LI",{});var Gke=s(w7);cbe=n(Gke,"STRONG",{});var Obt=s(cbe);zpr=r(Obt,"xlm"),Obt.forEach(t),Qpr=r(Gke," \u2014 "),aW=n(Gke,"A",{href:!0});var Vbt=s(aW);Wpr=r(Vbt,"TFXLMWithLMHeadModel"),Vbt.forEach(t),Hpr=r(Gke," (XLM model)"),Gke.forEach(t),Upr=i(fe),A7=n(fe,"LI",{});var Oke=s(A7);fbe=n(Oke,"STRONG",{});var Xbt=s(fbe);Jpr=r(Xbt,"xlm-roberta"),Xbt.forEach(t),Ypr=r(Oke," \u2014 "),nW=n(Oke,"A",{href:!0});var zbt=s(nW);Kpr=r(zbt,"TFXLMRobertaForMaskedLM"),zbt.forEach(t),Zpr=r(Oke," (XLM-RoBERTa model)"),Oke.forEach(t),fe.forEach(t),eur=i(vl),T(y7.$$.fragment,vl),vl.forEach(t),bl.forEach(t),WIe=i(f),ec=n(f,"H2",{class:!0});var ZNe=s(ec);L7=n(ZNe,"A",{id:!0,class:!0,href:!0});var Qbt=s(L7);mbe=n(Qbt,"SPAN",{});var Wbt=s(mbe);T(eL.$$.fragment,Wbt),Wbt.forEach(t),Qbt.forEach(t),our=i(ZNe),gbe=n(ZNe,"SPAN",{});var Hbt=s(gbe);rur=r(Hbt,"TFAutoModelForSeq2SeqLM"),Hbt.forEach(t),ZNe.forEach(t),HIe=i(f),rr=n(f,"DIV",{class:!0});var Fl=s(rr);T(oL.$$.fragment,Fl),tur=i(Fl),oc=n(Fl,"P",{});var dZ=s(oc);aur=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sW=n(dZ,"A",{href:!0});var Ubt=s(sW);nur=r(Ubt,"from_pretrained()"),Ubt.forEach(t),sur=r(dZ," class method or the "),lW=n(dZ,"A",{href:!0});var Jbt=s(lW);lur=r(Jbt,"from_config()"),Jbt.forEach(t),iur=r(dZ,` class
method.`),dZ.forEach(t),dur=i(Fl),rL=n(Fl,"P",{});var eje=s(rL);cur=r(eje,"This class cannot be instantiated directly using "),hbe=n(eje,"CODE",{});var Ybt=s(hbe);fur=r(Ybt,"__init__()"),Ybt.forEach(t),mur=r(eje," (throws an error)."),eje.forEach(t),gur=i(Fl),$t=n(Fl,"DIV",{class:!0});var rw=s($t);T(tL.$$.fragment,rw),hur=i(rw),pbe=n(rw,"P",{});var Kbt=s(pbe);pur=r(Kbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Kbt.forEach(t),uur=i(rw),rc=n(rw,"P",{});var cZ=s(rc);_ur=r(cZ,`Note:
Loading a model from its configuration file does `),ube=n(cZ,"STRONG",{});var Zbt=s(ube);bur=r(Zbt,"not"),Zbt.forEach(t),vur=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=n(cZ,"A",{href:!0});var e2t=s(iW);Fur=r(e2t,"from_pretrained()"),e2t.forEach(t),Tur=r(cZ," to load the model weights."),cZ.forEach(t),Mur=i(rw),T(x7.$$.fragment,rw),rw.forEach(t),Eur=i(Fl),$r=n(Fl,"DIV",{class:!0});var Tl=s($r);T(aL.$$.fragment,Tl),Cur=i(Tl),_be=n(Tl,"P",{});var o2t=s(_be);wur=r(o2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),o2t.forEach(t),Aur=i(Tl),tn=n(Tl,"P",{});var tw=s(tn);yur=r(tw,"The model class to instantiate is selected based on the "),bbe=n(tw,"CODE",{});var r2t=s(bbe);Lur=r(r2t,"model_type"),r2t.forEach(t),xur=r(tw,` property of the config object (either
passed as an argument or loaded from `),vbe=n(tw,"CODE",{});var t2t=s(vbe);$ur=r(t2t,"pretrained_model_name_or_path"),t2t.forEach(t),kur=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=n(tw,"CODE",{});var a2t=s(Fbe);Sur=r(a2t,"pretrained_model_name_or_path"),a2t.forEach(t),Rur=r(tw,":"),tw.forEach(t),Pur=i(Tl),ye=n(Tl,"UL",{});var Re=s(ye);$7=n(Re,"LI",{});var Vke=s($7);Tbe=n(Vke,"STRONG",{});var n2t=s(Tbe);Bur=r(n2t,"bart"),n2t.forEach(t),Iur=r(Vke," \u2014 "),dW=n(Vke,"A",{href:!0});var s2t=s(dW);qur=r(s2t,"TFBartForConditionalGeneration"),s2t.forEach(t),Nur=r(Vke," (BART model)"),Vke.forEach(t),jur=i(Re),k7=n(Re,"LI",{});var Xke=s(k7);Mbe=n(Xke,"STRONG",{});var l2t=s(Mbe);Dur=r(l2t,"blenderbot"),l2t.forEach(t),Gur=r(Xke," \u2014 "),cW=n(Xke,"A",{href:!0});var i2t=s(cW);Our=r(i2t,"TFBlenderbotForConditionalGeneration"),i2t.forEach(t),Vur=r(Xke," (Blenderbot model)"),Xke.forEach(t),Xur=i(Re),S7=n(Re,"LI",{});var zke=s(S7);Ebe=n(zke,"STRONG",{});var d2t=s(Ebe);zur=r(d2t,"blenderbot-small"),d2t.forEach(t),Qur=r(zke," \u2014 "),fW=n(zke,"A",{href:!0});var c2t=s(fW);Wur=r(c2t,"TFBlenderbotSmallForConditionalGeneration"),c2t.forEach(t),Hur=r(zke," (BlenderbotSmall model)"),zke.forEach(t),Uur=i(Re),R7=n(Re,"LI",{});var Qke=s(R7);Cbe=n(Qke,"STRONG",{});var f2t=s(Cbe);Jur=r(f2t,"encoder-decoder"),f2t.forEach(t),Yur=r(Qke," \u2014 "),mW=n(Qke,"A",{href:!0});var m2t=s(mW);Kur=r(m2t,"TFEncoderDecoderModel"),m2t.forEach(t),Zur=r(Qke," (Encoder decoder model)"),Qke.forEach(t),e_r=i(Re),P7=n(Re,"LI",{});var Wke=s(P7);wbe=n(Wke,"STRONG",{});var g2t=s(wbe);o_r=r(g2t,"led"),g2t.forEach(t),r_r=r(Wke," \u2014 "),gW=n(Wke,"A",{href:!0});var h2t=s(gW);t_r=r(h2t,"TFLEDForConditionalGeneration"),h2t.forEach(t),a_r=r(Wke," (LED model)"),Wke.forEach(t),n_r=i(Re),B7=n(Re,"LI",{});var Hke=s(B7);Abe=n(Hke,"STRONG",{});var p2t=s(Abe);s_r=r(p2t,"marian"),p2t.forEach(t),l_r=r(Hke," \u2014 "),hW=n(Hke,"A",{href:!0});var u2t=s(hW);i_r=r(u2t,"TFMarianMTModel"),u2t.forEach(t),d_r=r(Hke," (Marian model)"),Hke.forEach(t),c_r=i(Re),I7=n(Re,"LI",{});var Uke=s(I7);ybe=n(Uke,"STRONG",{});var _2t=s(ybe);f_r=r(_2t,"mbart"),_2t.forEach(t),m_r=r(Uke," \u2014 "),pW=n(Uke,"A",{href:!0});var b2t=s(pW);g_r=r(b2t,"TFMBartForConditionalGeneration"),b2t.forEach(t),h_r=r(Uke," (mBART model)"),Uke.forEach(t),p_r=i(Re),q7=n(Re,"LI",{});var Jke=s(q7);Lbe=n(Jke,"STRONG",{});var v2t=s(Lbe);u_r=r(v2t,"mt5"),v2t.forEach(t),__r=r(Jke," \u2014 "),uW=n(Jke,"A",{href:!0});var F2t=s(uW);b_r=r(F2t,"TFMT5ForConditionalGeneration"),F2t.forEach(t),v_r=r(Jke," (mT5 model)"),Jke.forEach(t),F_r=i(Re),N7=n(Re,"LI",{});var Yke=s(N7);xbe=n(Yke,"STRONG",{});var T2t=s(xbe);T_r=r(T2t,"pegasus"),T2t.forEach(t),M_r=r(Yke," \u2014 "),_W=n(Yke,"A",{href:!0});var M2t=s(_W);E_r=r(M2t,"TFPegasusForConditionalGeneration"),M2t.forEach(t),C_r=r(Yke," (Pegasus model)"),Yke.forEach(t),w_r=i(Re),j7=n(Re,"LI",{});var Kke=s(j7);$be=n(Kke,"STRONG",{});var E2t=s($be);A_r=r(E2t,"t5"),E2t.forEach(t),y_r=r(Kke," \u2014 "),bW=n(Kke,"A",{href:!0});var C2t=s(bW);L_r=r(C2t,"TFT5ForConditionalGeneration"),C2t.forEach(t),x_r=r(Kke," (T5 model)"),Kke.forEach(t),Re.forEach(t),$_r=i(Tl),T(D7.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),UIe=i(f),tc=n(f,"H2",{class:!0});var oje=s(tc);G7=n(oje,"A",{id:!0,class:!0,href:!0});var w2t=s(G7);kbe=n(w2t,"SPAN",{});var A2t=s(kbe);T(nL.$$.fragment,A2t),A2t.forEach(t),w2t.forEach(t),k_r=i(oje),Sbe=n(oje,"SPAN",{});var y2t=s(Sbe);S_r=r(y2t,"TFAutoModelForSequenceClassification"),y2t.forEach(t),oje.forEach(t),JIe=i(f),tr=n(f,"DIV",{class:!0});var Ml=s(tr);T(sL.$$.fragment,Ml),R_r=i(Ml),ac=n(Ml,"P",{});var fZ=s(ac);P_r=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vW=n(fZ,"A",{href:!0});var L2t=s(vW);B_r=r(L2t,"from_pretrained()"),L2t.forEach(t),I_r=r(fZ," class method or the "),FW=n(fZ,"A",{href:!0});var x2t=s(FW);q_r=r(x2t,"from_config()"),x2t.forEach(t),N_r=r(fZ,` class
method.`),fZ.forEach(t),j_r=i(Ml),lL=n(Ml,"P",{});var rje=s(lL);D_r=r(rje,"This class cannot be instantiated directly using "),Rbe=n(rje,"CODE",{});var $2t=s(Rbe);G_r=r($2t,"__init__()"),$2t.forEach(t),O_r=r(rje," (throws an error)."),rje.forEach(t),V_r=i(Ml),kt=n(Ml,"DIV",{class:!0});var aw=s(kt);T(iL.$$.fragment,aw),X_r=i(aw),Pbe=n(aw,"P",{});var k2t=s(Pbe);z_r=r(k2t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),k2t.forEach(t),Q_r=i(aw),nc=n(aw,"P",{});var mZ=s(nc);W_r=r(mZ,`Note:
Loading a model from its configuration file does `),Bbe=n(mZ,"STRONG",{});var S2t=s(Bbe);H_r=r(S2t,"not"),S2t.forEach(t),U_r=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(mZ,"A",{href:!0});var R2t=s(TW);J_r=r(R2t,"from_pretrained()"),R2t.forEach(t),Y_r=r(mZ," to load the model weights."),mZ.forEach(t),K_r=i(aw),T(O7.$$.fragment,aw),aw.forEach(t),Z_r=i(Ml),kr=n(Ml,"DIV",{class:!0});var El=s(kr);T(dL.$$.fragment,El),e1r=i(El),Ibe=n(El,"P",{});var P2t=s(Ibe);o1r=r(P2t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),P2t.forEach(t),r1r=i(El),an=n(El,"P",{});var nw=s(an);t1r=r(nw,"The model class to instantiate is selected based on the "),qbe=n(nw,"CODE",{});var B2t=s(qbe);a1r=r(B2t,"model_type"),B2t.forEach(t),n1r=r(nw,` property of the config object (either
passed as an argument or loaded from `),Nbe=n(nw,"CODE",{});var I2t=s(Nbe);s1r=r(I2t,"pretrained_model_name_or_path"),I2t.forEach(t),l1r=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=n(nw,"CODE",{});var q2t=s(jbe);i1r=r(q2t,"pretrained_model_name_or_path"),q2t.forEach(t),d1r=r(nw,":"),nw.forEach(t),c1r=i(El),Z=n(El,"UL",{});var re=s(Z);V7=n(re,"LI",{});var Zke=s(V7);Dbe=n(Zke,"STRONG",{});var N2t=s(Dbe);f1r=r(N2t,"albert"),N2t.forEach(t),m1r=r(Zke," \u2014 "),MW=n(Zke,"A",{href:!0});var j2t=s(MW);g1r=r(j2t,"TFAlbertForSequenceClassification"),j2t.forEach(t),h1r=r(Zke," (ALBERT model)"),Zke.forEach(t),p1r=i(re),X7=n(re,"LI",{});var eSe=s(X7);Gbe=n(eSe,"STRONG",{});var D2t=s(Gbe);u1r=r(D2t,"bert"),D2t.forEach(t),_1r=r(eSe," \u2014 "),EW=n(eSe,"A",{href:!0});var G2t=s(EW);b1r=r(G2t,"TFBertForSequenceClassification"),G2t.forEach(t),v1r=r(eSe," (BERT model)"),eSe.forEach(t),F1r=i(re),z7=n(re,"LI",{});var oSe=s(z7);Obe=n(oSe,"STRONG",{});var O2t=s(Obe);T1r=r(O2t,"camembert"),O2t.forEach(t),M1r=r(oSe," \u2014 "),CW=n(oSe,"A",{href:!0});var V2t=s(CW);E1r=r(V2t,"TFCamembertForSequenceClassification"),V2t.forEach(t),C1r=r(oSe," (CamemBERT model)"),oSe.forEach(t),w1r=i(re),Q7=n(re,"LI",{});var rSe=s(Q7);Vbe=n(rSe,"STRONG",{});var X2t=s(Vbe);A1r=r(X2t,"convbert"),X2t.forEach(t),y1r=r(rSe," \u2014 "),wW=n(rSe,"A",{href:!0});var z2t=s(wW);L1r=r(z2t,"TFConvBertForSequenceClassification"),z2t.forEach(t),x1r=r(rSe," (ConvBERT model)"),rSe.forEach(t),$1r=i(re),W7=n(re,"LI",{});var tSe=s(W7);Xbe=n(tSe,"STRONG",{});var Q2t=s(Xbe);k1r=r(Q2t,"ctrl"),Q2t.forEach(t),S1r=r(tSe," \u2014 "),AW=n(tSe,"A",{href:!0});var W2t=s(AW);R1r=r(W2t,"TFCTRLForSequenceClassification"),W2t.forEach(t),P1r=r(tSe," (CTRL model)"),tSe.forEach(t),B1r=i(re),H7=n(re,"LI",{});var aSe=s(H7);zbe=n(aSe,"STRONG",{});var H2t=s(zbe);I1r=r(H2t,"deberta"),H2t.forEach(t),q1r=r(aSe," \u2014 "),yW=n(aSe,"A",{href:!0});var U2t=s(yW);N1r=r(U2t,"TFDebertaForSequenceClassification"),U2t.forEach(t),j1r=r(aSe," (DeBERTa model)"),aSe.forEach(t),D1r=i(re),U7=n(re,"LI",{});var nSe=s(U7);Qbe=n(nSe,"STRONG",{});var J2t=s(Qbe);G1r=r(J2t,"deberta-v2"),J2t.forEach(t),O1r=r(nSe," \u2014 "),LW=n(nSe,"A",{href:!0});var Y2t=s(LW);V1r=r(Y2t,"TFDebertaV2ForSequenceClassification"),Y2t.forEach(t),X1r=r(nSe," (DeBERTa-v2 model)"),nSe.forEach(t),z1r=i(re),J7=n(re,"LI",{});var sSe=s(J7);Wbe=n(sSe,"STRONG",{});var K2t=s(Wbe);Q1r=r(K2t,"distilbert"),K2t.forEach(t),W1r=r(sSe," \u2014 "),xW=n(sSe,"A",{href:!0});var Z2t=s(xW);H1r=r(Z2t,"TFDistilBertForSequenceClassification"),Z2t.forEach(t),U1r=r(sSe," (DistilBERT model)"),sSe.forEach(t),J1r=i(re),Y7=n(re,"LI",{});var lSe=s(Y7);Hbe=n(lSe,"STRONG",{});var evt=s(Hbe);Y1r=r(evt,"electra"),evt.forEach(t),K1r=r(lSe," \u2014 "),$W=n(lSe,"A",{href:!0});var ovt=s($W);Z1r=r(ovt,"TFElectraForSequenceClassification"),ovt.forEach(t),e8r=r(lSe," (ELECTRA model)"),lSe.forEach(t),o8r=i(re),K7=n(re,"LI",{});var iSe=s(K7);Ube=n(iSe,"STRONG",{});var rvt=s(Ube);r8r=r(rvt,"flaubert"),rvt.forEach(t),t8r=r(iSe," \u2014 "),kW=n(iSe,"A",{href:!0});var tvt=s(kW);a8r=r(tvt,"TFFlaubertForSequenceClassification"),tvt.forEach(t),n8r=r(iSe," (FlauBERT model)"),iSe.forEach(t),s8r=i(re),Z7=n(re,"LI",{});var dSe=s(Z7);Jbe=n(dSe,"STRONG",{});var avt=s(Jbe);l8r=r(avt,"funnel"),avt.forEach(t),i8r=r(dSe," \u2014 "),SW=n(dSe,"A",{href:!0});var nvt=s(SW);d8r=r(nvt,"TFFunnelForSequenceClassification"),nvt.forEach(t),c8r=r(dSe," (Funnel Transformer model)"),dSe.forEach(t),f8r=i(re),eM=n(re,"LI",{});var cSe=s(eM);Ybe=n(cSe,"STRONG",{});var svt=s(Ybe);m8r=r(svt,"gpt2"),svt.forEach(t),g8r=r(cSe," \u2014 "),RW=n(cSe,"A",{href:!0});var lvt=s(RW);h8r=r(lvt,"TFGPT2ForSequenceClassification"),lvt.forEach(t),p8r=r(cSe," (OpenAI GPT-2 model)"),cSe.forEach(t),u8r=i(re),oM=n(re,"LI",{});var fSe=s(oM);Kbe=n(fSe,"STRONG",{});var ivt=s(Kbe);_8r=r(ivt,"gptj"),ivt.forEach(t),b8r=r(fSe," \u2014 "),PW=n(fSe,"A",{href:!0});var dvt=s(PW);v8r=r(dvt,"TFGPTJForSequenceClassification"),dvt.forEach(t),F8r=r(fSe," (GPT-J model)"),fSe.forEach(t),T8r=i(re),rM=n(re,"LI",{});var mSe=s(rM);Zbe=n(mSe,"STRONG",{});var cvt=s(Zbe);M8r=r(cvt,"layoutlm"),cvt.forEach(t),E8r=r(mSe," \u2014 "),BW=n(mSe,"A",{href:!0});var fvt=s(BW);C8r=r(fvt,"TFLayoutLMForSequenceClassification"),fvt.forEach(t),w8r=r(mSe," (LayoutLM model)"),mSe.forEach(t),A8r=i(re),tM=n(re,"LI",{});var gSe=s(tM);e2e=n(gSe,"STRONG",{});var mvt=s(e2e);y8r=r(mvt,"longformer"),mvt.forEach(t),L8r=r(gSe," \u2014 "),IW=n(gSe,"A",{href:!0});var gvt=s(IW);x8r=r(gvt,"TFLongformerForSequenceClassification"),gvt.forEach(t),$8r=r(gSe," (Longformer model)"),gSe.forEach(t),k8r=i(re),aM=n(re,"LI",{});var hSe=s(aM);o2e=n(hSe,"STRONG",{});var hvt=s(o2e);S8r=r(hvt,"mobilebert"),hvt.forEach(t),R8r=r(hSe," \u2014 "),qW=n(hSe,"A",{href:!0});var pvt=s(qW);P8r=r(pvt,"TFMobileBertForSequenceClassification"),pvt.forEach(t),B8r=r(hSe," (MobileBERT model)"),hSe.forEach(t),I8r=i(re),nM=n(re,"LI",{});var pSe=s(nM);r2e=n(pSe,"STRONG",{});var uvt=s(r2e);q8r=r(uvt,"mpnet"),uvt.forEach(t),N8r=r(pSe," \u2014 "),NW=n(pSe,"A",{href:!0});var _vt=s(NW);j8r=r(_vt,"TFMPNetForSequenceClassification"),_vt.forEach(t),D8r=r(pSe," (MPNet model)"),pSe.forEach(t),G8r=i(re),sM=n(re,"LI",{});var uSe=s(sM);t2e=n(uSe,"STRONG",{});var bvt=s(t2e);O8r=r(bvt,"openai-gpt"),bvt.forEach(t),V8r=r(uSe," \u2014 "),jW=n(uSe,"A",{href:!0});var vvt=s(jW);X8r=r(vvt,"TFOpenAIGPTForSequenceClassification"),vvt.forEach(t),z8r=r(uSe," (OpenAI GPT model)"),uSe.forEach(t),Q8r=i(re),lM=n(re,"LI",{});var _Se=s(lM);a2e=n(_Se,"STRONG",{});var Fvt=s(a2e);W8r=r(Fvt,"rembert"),Fvt.forEach(t),H8r=r(_Se," \u2014 "),DW=n(_Se,"A",{href:!0});var Tvt=s(DW);U8r=r(Tvt,"TFRemBertForSequenceClassification"),Tvt.forEach(t),J8r=r(_Se," (RemBERT model)"),_Se.forEach(t),Y8r=i(re),iM=n(re,"LI",{});var bSe=s(iM);n2e=n(bSe,"STRONG",{});var Mvt=s(n2e);K8r=r(Mvt,"roberta"),Mvt.forEach(t),Z8r=r(bSe," \u2014 "),GW=n(bSe,"A",{href:!0});var Evt=s(GW);ebr=r(Evt,"TFRobertaForSequenceClassification"),Evt.forEach(t),obr=r(bSe," (RoBERTa model)"),bSe.forEach(t),rbr=i(re),dM=n(re,"LI",{});var vSe=s(dM);s2e=n(vSe,"STRONG",{});var Cvt=s(s2e);tbr=r(Cvt,"roformer"),Cvt.forEach(t),abr=r(vSe," \u2014 "),OW=n(vSe,"A",{href:!0});var wvt=s(OW);nbr=r(wvt,"TFRoFormerForSequenceClassification"),wvt.forEach(t),sbr=r(vSe," (RoFormer model)"),vSe.forEach(t),lbr=i(re),cM=n(re,"LI",{});var FSe=s(cM);l2e=n(FSe,"STRONG",{});var Avt=s(l2e);ibr=r(Avt,"tapas"),Avt.forEach(t),dbr=r(FSe," \u2014 "),VW=n(FSe,"A",{href:!0});var yvt=s(VW);cbr=r(yvt,"TFTapasForSequenceClassification"),yvt.forEach(t),fbr=r(FSe," (TAPAS model)"),FSe.forEach(t),mbr=i(re),fM=n(re,"LI",{});var TSe=s(fM);i2e=n(TSe,"STRONG",{});var Lvt=s(i2e);gbr=r(Lvt,"transfo-xl"),Lvt.forEach(t),hbr=r(TSe," \u2014 "),XW=n(TSe,"A",{href:!0});var xvt=s(XW);pbr=r(xvt,"TFTransfoXLForSequenceClassification"),xvt.forEach(t),ubr=r(TSe," (Transformer-XL model)"),TSe.forEach(t),_br=i(re),mM=n(re,"LI",{});var MSe=s(mM);d2e=n(MSe,"STRONG",{});var $vt=s(d2e);bbr=r($vt,"xlm"),$vt.forEach(t),vbr=r(MSe," \u2014 "),zW=n(MSe,"A",{href:!0});var kvt=s(zW);Fbr=r(kvt,"TFXLMForSequenceClassification"),kvt.forEach(t),Tbr=r(MSe," (XLM model)"),MSe.forEach(t),Mbr=i(re),gM=n(re,"LI",{});var ESe=s(gM);c2e=n(ESe,"STRONG",{});var Svt=s(c2e);Ebr=r(Svt,"xlm-roberta"),Svt.forEach(t),Cbr=r(ESe," \u2014 "),QW=n(ESe,"A",{href:!0});var Rvt=s(QW);wbr=r(Rvt,"TFXLMRobertaForSequenceClassification"),Rvt.forEach(t),Abr=r(ESe," (XLM-RoBERTa model)"),ESe.forEach(t),ybr=i(re),hM=n(re,"LI",{});var CSe=s(hM);f2e=n(CSe,"STRONG",{});var Pvt=s(f2e);Lbr=r(Pvt,"xlnet"),Pvt.forEach(t),xbr=r(CSe," \u2014 "),WW=n(CSe,"A",{href:!0});var Bvt=s(WW);$br=r(Bvt,"TFXLNetForSequenceClassification"),Bvt.forEach(t),kbr=r(CSe," (XLNet model)"),CSe.forEach(t),re.forEach(t),Sbr=i(El),T(pM.$$.fragment,El),El.forEach(t),Ml.forEach(t),YIe=i(f),sc=n(f,"H2",{class:!0});var tje=s(sc);uM=n(tje,"A",{id:!0,class:!0,href:!0});var Ivt=s(uM);m2e=n(Ivt,"SPAN",{});var qvt=s(m2e);T(cL.$$.fragment,qvt),qvt.forEach(t),Ivt.forEach(t),Rbr=i(tje),g2e=n(tje,"SPAN",{});var Nvt=s(g2e);Pbr=r(Nvt,"TFAutoModelForMultipleChoice"),Nvt.forEach(t),tje.forEach(t),KIe=i(f),ar=n(f,"DIV",{class:!0});var Cl=s(ar);T(fL.$$.fragment,Cl),Bbr=i(Cl),lc=n(Cl,"P",{});var gZ=s(lc);Ibr=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HW=n(gZ,"A",{href:!0});var jvt=s(HW);qbr=r(jvt,"from_pretrained()"),jvt.forEach(t),Nbr=r(gZ," class method or the "),UW=n(gZ,"A",{href:!0});var Dvt=s(UW);jbr=r(Dvt,"from_config()"),Dvt.forEach(t),Dbr=r(gZ,` class
method.`),gZ.forEach(t),Gbr=i(Cl),mL=n(Cl,"P",{});var aje=s(mL);Obr=r(aje,"This class cannot be instantiated directly using "),h2e=n(aje,"CODE",{});var Gvt=s(h2e);Vbr=r(Gvt,"__init__()"),Gvt.forEach(t),Xbr=r(aje," (throws an error)."),aje.forEach(t),zbr=i(Cl),St=n(Cl,"DIV",{class:!0});var sw=s(St);T(gL.$$.fragment,sw),Qbr=i(sw),p2e=n(sw,"P",{});var Ovt=s(p2e);Wbr=r(Ovt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ovt.forEach(t),Hbr=i(sw),ic=n(sw,"P",{});var hZ=s(ic);Ubr=r(hZ,`Note:
Loading a model from its configuration file does `),u2e=n(hZ,"STRONG",{});var Vvt=s(u2e);Jbr=r(Vvt,"not"),Vvt.forEach(t),Ybr=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(hZ,"A",{href:!0});var Xvt=s(JW);Kbr=r(Xvt,"from_pretrained()"),Xvt.forEach(t),Zbr=r(hZ," to load the model weights."),hZ.forEach(t),e2r=i(sw),T(_M.$$.fragment,sw),sw.forEach(t),o2r=i(Cl),Sr=n(Cl,"DIV",{class:!0});var wl=s(Sr);T(hL.$$.fragment,wl),r2r=i(wl),_2e=n(wl,"P",{});var zvt=s(_2e);t2r=r(zvt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zvt.forEach(t),a2r=i(wl),nn=n(wl,"P",{});var lw=s(nn);n2r=r(lw,"The model class to instantiate is selected based on the "),b2e=n(lw,"CODE",{});var Qvt=s(b2e);s2r=r(Qvt,"model_type"),Qvt.forEach(t),l2r=r(lw,` property of the config object (either
passed as an argument or loaded from `),v2e=n(lw,"CODE",{});var Wvt=s(v2e);i2r=r(Wvt,"pretrained_model_name_or_path"),Wvt.forEach(t),d2r=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=n(lw,"CODE",{});var Hvt=s(F2e);c2r=r(Hvt,"pretrained_model_name_or_path"),Hvt.forEach(t),f2r=r(lw,":"),lw.forEach(t),m2r=i(wl),pe=n(wl,"UL",{});var _e=s(pe);bM=n(_e,"LI",{});var wSe=s(bM);T2e=n(wSe,"STRONG",{});var Uvt=s(T2e);g2r=r(Uvt,"albert"),Uvt.forEach(t),h2r=r(wSe," \u2014 "),YW=n(wSe,"A",{href:!0});var Jvt=s(YW);p2r=r(Jvt,"TFAlbertForMultipleChoice"),Jvt.forEach(t),u2r=r(wSe," (ALBERT model)"),wSe.forEach(t),_2r=i(_e),vM=n(_e,"LI",{});var ASe=s(vM);M2e=n(ASe,"STRONG",{});var Yvt=s(M2e);b2r=r(Yvt,"bert"),Yvt.forEach(t),v2r=r(ASe," \u2014 "),KW=n(ASe,"A",{href:!0});var Kvt=s(KW);F2r=r(Kvt,"TFBertForMultipleChoice"),Kvt.forEach(t),T2r=r(ASe," (BERT model)"),ASe.forEach(t),M2r=i(_e),FM=n(_e,"LI",{});var ySe=s(FM);E2e=n(ySe,"STRONG",{});var Zvt=s(E2e);E2r=r(Zvt,"camembert"),Zvt.forEach(t),C2r=r(ySe," \u2014 "),ZW=n(ySe,"A",{href:!0});var eFt=s(ZW);w2r=r(eFt,"TFCamembertForMultipleChoice"),eFt.forEach(t),A2r=r(ySe," (CamemBERT model)"),ySe.forEach(t),y2r=i(_e),TM=n(_e,"LI",{});var LSe=s(TM);C2e=n(LSe,"STRONG",{});var oFt=s(C2e);L2r=r(oFt,"convbert"),oFt.forEach(t),x2r=r(LSe," \u2014 "),eH=n(LSe,"A",{href:!0});var rFt=s(eH);$2r=r(rFt,"TFConvBertForMultipleChoice"),rFt.forEach(t),k2r=r(LSe," (ConvBERT model)"),LSe.forEach(t),S2r=i(_e),MM=n(_e,"LI",{});var xSe=s(MM);w2e=n(xSe,"STRONG",{});var tFt=s(w2e);R2r=r(tFt,"distilbert"),tFt.forEach(t),P2r=r(xSe," \u2014 "),oH=n(xSe,"A",{href:!0});var aFt=s(oH);B2r=r(aFt,"TFDistilBertForMultipleChoice"),aFt.forEach(t),I2r=r(xSe," (DistilBERT model)"),xSe.forEach(t),q2r=i(_e),EM=n(_e,"LI",{});var $Se=s(EM);A2e=n($Se,"STRONG",{});var nFt=s(A2e);N2r=r(nFt,"electra"),nFt.forEach(t),j2r=r($Se," \u2014 "),rH=n($Se,"A",{href:!0});var sFt=s(rH);D2r=r(sFt,"TFElectraForMultipleChoice"),sFt.forEach(t),G2r=r($Se," (ELECTRA model)"),$Se.forEach(t),O2r=i(_e),CM=n(_e,"LI",{});var kSe=s(CM);y2e=n(kSe,"STRONG",{});var lFt=s(y2e);V2r=r(lFt,"flaubert"),lFt.forEach(t),X2r=r(kSe," \u2014 "),tH=n(kSe,"A",{href:!0});var iFt=s(tH);z2r=r(iFt,"TFFlaubertForMultipleChoice"),iFt.forEach(t),Q2r=r(kSe," (FlauBERT model)"),kSe.forEach(t),W2r=i(_e),wM=n(_e,"LI",{});var SSe=s(wM);L2e=n(SSe,"STRONG",{});var dFt=s(L2e);H2r=r(dFt,"funnel"),dFt.forEach(t),U2r=r(SSe," \u2014 "),aH=n(SSe,"A",{href:!0});var cFt=s(aH);J2r=r(cFt,"TFFunnelForMultipleChoice"),cFt.forEach(t),Y2r=r(SSe," (Funnel Transformer model)"),SSe.forEach(t),K2r=i(_e),AM=n(_e,"LI",{});var RSe=s(AM);x2e=n(RSe,"STRONG",{});var fFt=s(x2e);Z2r=r(fFt,"longformer"),fFt.forEach(t),evr=r(RSe," \u2014 "),nH=n(RSe,"A",{href:!0});var mFt=s(nH);ovr=r(mFt,"TFLongformerForMultipleChoice"),mFt.forEach(t),rvr=r(RSe," (Longformer model)"),RSe.forEach(t),tvr=i(_e),yM=n(_e,"LI",{});var PSe=s(yM);$2e=n(PSe,"STRONG",{});var gFt=s($2e);avr=r(gFt,"mobilebert"),gFt.forEach(t),nvr=r(PSe," \u2014 "),sH=n(PSe,"A",{href:!0});var hFt=s(sH);svr=r(hFt,"TFMobileBertForMultipleChoice"),hFt.forEach(t),lvr=r(PSe," (MobileBERT model)"),PSe.forEach(t),ivr=i(_e),LM=n(_e,"LI",{});var BSe=s(LM);k2e=n(BSe,"STRONG",{});var pFt=s(k2e);dvr=r(pFt,"mpnet"),pFt.forEach(t),cvr=r(BSe," \u2014 "),lH=n(BSe,"A",{href:!0});var uFt=s(lH);fvr=r(uFt,"TFMPNetForMultipleChoice"),uFt.forEach(t),mvr=r(BSe," (MPNet model)"),BSe.forEach(t),gvr=i(_e),xM=n(_e,"LI",{});var ISe=s(xM);S2e=n(ISe,"STRONG",{});var _Ft=s(S2e);hvr=r(_Ft,"rembert"),_Ft.forEach(t),pvr=r(ISe," \u2014 "),iH=n(ISe,"A",{href:!0});var bFt=s(iH);uvr=r(bFt,"TFRemBertForMultipleChoice"),bFt.forEach(t),_vr=r(ISe," (RemBERT model)"),ISe.forEach(t),bvr=i(_e),$M=n(_e,"LI",{});var qSe=s($M);R2e=n(qSe,"STRONG",{});var vFt=s(R2e);vvr=r(vFt,"roberta"),vFt.forEach(t),Fvr=r(qSe," \u2014 "),dH=n(qSe,"A",{href:!0});var FFt=s(dH);Tvr=r(FFt,"TFRobertaForMultipleChoice"),FFt.forEach(t),Mvr=r(qSe," (RoBERTa model)"),qSe.forEach(t),Evr=i(_e),kM=n(_e,"LI",{});var NSe=s(kM);P2e=n(NSe,"STRONG",{});var TFt=s(P2e);Cvr=r(TFt,"roformer"),TFt.forEach(t),wvr=r(NSe," \u2014 "),cH=n(NSe,"A",{href:!0});var MFt=s(cH);Avr=r(MFt,"TFRoFormerForMultipleChoice"),MFt.forEach(t),yvr=r(NSe," (RoFormer model)"),NSe.forEach(t),Lvr=i(_e),SM=n(_e,"LI",{});var jSe=s(SM);B2e=n(jSe,"STRONG",{});var EFt=s(B2e);xvr=r(EFt,"xlm"),EFt.forEach(t),$vr=r(jSe," \u2014 "),fH=n(jSe,"A",{href:!0});var CFt=s(fH);kvr=r(CFt,"TFXLMForMultipleChoice"),CFt.forEach(t),Svr=r(jSe," (XLM model)"),jSe.forEach(t),Rvr=i(_e),RM=n(_e,"LI",{});var DSe=s(RM);I2e=n(DSe,"STRONG",{});var wFt=s(I2e);Pvr=r(wFt,"xlm-roberta"),wFt.forEach(t),Bvr=r(DSe," \u2014 "),mH=n(DSe,"A",{href:!0});var AFt=s(mH);Ivr=r(AFt,"TFXLMRobertaForMultipleChoice"),AFt.forEach(t),qvr=r(DSe," (XLM-RoBERTa model)"),DSe.forEach(t),Nvr=i(_e),PM=n(_e,"LI",{});var GSe=s(PM);q2e=n(GSe,"STRONG",{});var yFt=s(q2e);jvr=r(yFt,"xlnet"),yFt.forEach(t),Dvr=r(GSe," \u2014 "),gH=n(GSe,"A",{href:!0});var LFt=s(gH);Gvr=r(LFt,"TFXLNetForMultipleChoice"),LFt.forEach(t),Ovr=r(GSe," (XLNet model)"),GSe.forEach(t),_e.forEach(t),Vvr=i(wl),T(BM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),ZIe=i(f),dc=n(f,"H2",{class:!0});var nje=s(dc);IM=n(nje,"A",{id:!0,class:!0,href:!0});var xFt=s(IM);N2e=n(xFt,"SPAN",{});var $Ft=s(N2e);T(pL.$$.fragment,$Ft),$Ft.forEach(t),xFt.forEach(t),Xvr=i(nje),j2e=n(nje,"SPAN",{});var kFt=s(j2e);zvr=r(kFt,"TFAutoModelForNextSentencePrediction"),kFt.forEach(t),nje.forEach(t),eqe=i(f),nr=n(f,"DIV",{class:!0});var Al=s(nr);T(uL.$$.fragment,Al),Qvr=i(Al),cc=n(Al,"P",{});var pZ=s(cc);Wvr=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),hH=n(pZ,"A",{href:!0});var SFt=s(hH);Hvr=r(SFt,"from_pretrained()"),SFt.forEach(t),Uvr=r(pZ," class method or the "),pH=n(pZ,"A",{href:!0});var RFt=s(pH);Jvr=r(RFt,"from_config()"),RFt.forEach(t),Yvr=r(pZ,` class
method.`),pZ.forEach(t),Kvr=i(Al),_L=n(Al,"P",{});var sje=s(_L);Zvr=r(sje,"This class cannot be instantiated directly using "),D2e=n(sje,"CODE",{});var PFt=s(D2e);eFr=r(PFt,"__init__()"),PFt.forEach(t),oFr=r(sje," (throws an error)."),sje.forEach(t),rFr=i(Al),Rt=n(Al,"DIV",{class:!0});var iw=s(Rt);T(bL.$$.fragment,iw),tFr=i(iw),G2e=n(iw,"P",{});var BFt=s(G2e);aFr=r(BFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),BFt.forEach(t),nFr=i(iw),fc=n(iw,"P",{});var uZ=s(fc);sFr=r(uZ,`Note:
Loading a model from its configuration file does `),O2e=n(uZ,"STRONG",{});var IFt=s(O2e);lFr=r(IFt,"not"),IFt.forEach(t),iFr=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=n(uZ,"A",{href:!0});var qFt=s(uH);dFr=r(qFt,"from_pretrained()"),qFt.forEach(t),cFr=r(uZ," to load the model weights."),uZ.forEach(t),fFr=i(iw),T(qM.$$.fragment,iw),iw.forEach(t),mFr=i(Al),Rr=n(Al,"DIV",{class:!0});var yl=s(Rr);T(vL.$$.fragment,yl),gFr=i(yl),V2e=n(yl,"P",{});var NFt=s(V2e);hFr=r(NFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),NFt.forEach(t),pFr=i(yl),sn=n(yl,"P",{});var dw=s(sn);uFr=r(dw,"The model class to instantiate is selected based on the "),X2e=n(dw,"CODE",{});var jFt=s(X2e);_Fr=r(jFt,"model_type"),jFt.forEach(t),bFr=r(dw,` property of the config object (either
passed as an argument or loaded from `),z2e=n(dw,"CODE",{});var DFt=s(z2e);vFr=r(DFt,"pretrained_model_name_or_path"),DFt.forEach(t),FFr=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(dw,"CODE",{});var GFt=s(Q2e);TFr=r(GFt,"pretrained_model_name_or_path"),GFt.forEach(t),MFr=r(dw,":"),dw.forEach(t),EFr=i(yl),FL=n(yl,"UL",{});var lje=s(FL);NM=n(lje,"LI",{});var OSe=s(NM);W2e=n(OSe,"STRONG",{});var OFt=s(W2e);CFr=r(OFt,"bert"),OFt.forEach(t),wFr=r(OSe," \u2014 "),_H=n(OSe,"A",{href:!0});var VFt=s(_H);AFr=r(VFt,"TFBertForNextSentencePrediction"),VFt.forEach(t),yFr=r(OSe," (BERT model)"),OSe.forEach(t),LFr=i(lje),jM=n(lje,"LI",{});var VSe=s(jM);H2e=n(VSe,"STRONG",{});var XFt=s(H2e);xFr=r(XFt,"mobilebert"),XFt.forEach(t),$Fr=r(VSe," \u2014 "),bH=n(VSe,"A",{href:!0});var zFt=s(bH);kFr=r(zFt,"TFMobileBertForNextSentencePrediction"),zFt.forEach(t),SFr=r(VSe," (MobileBERT model)"),VSe.forEach(t),lje.forEach(t),RFr=i(yl),T(DM.$$.fragment,yl),yl.forEach(t),Al.forEach(t),oqe=i(f),mc=n(f,"H2",{class:!0});var ije=s(mc);GM=n(ije,"A",{id:!0,class:!0,href:!0});var QFt=s(GM);U2e=n(QFt,"SPAN",{});var WFt=s(U2e);T(TL.$$.fragment,WFt),WFt.forEach(t),QFt.forEach(t),PFr=i(ije),J2e=n(ije,"SPAN",{});var HFt=s(J2e);BFr=r(HFt,"TFAutoModelForTableQuestionAnswering"),HFt.forEach(t),ije.forEach(t),rqe=i(f),sr=n(f,"DIV",{class:!0});var Ll=s(sr);T(ML.$$.fragment,Ll),IFr=i(Ll),gc=n(Ll,"P",{});var _Z=s(gc);qFr=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vH=n(_Z,"A",{href:!0});var UFt=s(vH);NFr=r(UFt,"from_pretrained()"),UFt.forEach(t),jFr=r(_Z," class method or the "),FH=n(_Z,"A",{href:!0});var JFt=s(FH);DFr=r(JFt,"from_config()"),JFt.forEach(t),GFr=r(_Z,` class
method.`),_Z.forEach(t),OFr=i(Ll),EL=n(Ll,"P",{});var dje=s(EL);VFr=r(dje,"This class cannot be instantiated directly using "),Y2e=n(dje,"CODE",{});var YFt=s(Y2e);XFr=r(YFt,"__init__()"),YFt.forEach(t),zFr=r(dje," (throws an error)."),dje.forEach(t),QFr=i(Ll),Pt=n(Ll,"DIV",{class:!0});var cw=s(Pt);T(CL.$$.fragment,cw),WFr=i(cw),K2e=n(cw,"P",{});var KFt=s(K2e);HFr=r(KFt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),KFt.forEach(t),UFr=i(cw),hc=n(cw,"P",{});var bZ=s(hc);JFr=r(bZ,`Note:
Loading a model from its configuration file does `),Z2e=n(bZ,"STRONG",{});var ZFt=s(Z2e);YFr=r(ZFt,"not"),ZFt.forEach(t),KFr=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=n(bZ,"A",{href:!0});var e0t=s(TH);ZFr=r(e0t,"from_pretrained()"),e0t.forEach(t),e0r=r(bZ," to load the model weights."),bZ.forEach(t),o0r=i(cw),T(OM.$$.fragment,cw),cw.forEach(t),r0r=i(Ll),Pr=n(Ll,"DIV",{class:!0});var xl=s(Pr);T(wL.$$.fragment,xl),t0r=i(xl),eve=n(xl,"P",{});var o0t=s(eve);a0r=r(o0t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),o0t.forEach(t),n0r=i(xl),ln=n(xl,"P",{});var fw=s(ln);s0r=r(fw,"The model class to instantiate is selected based on the "),ove=n(fw,"CODE",{});var r0t=s(ove);l0r=r(r0t,"model_type"),r0t.forEach(t),i0r=r(fw,` property of the config object (either
passed as an argument or loaded from `),rve=n(fw,"CODE",{});var t0t=s(rve);d0r=r(t0t,"pretrained_model_name_or_path"),t0t.forEach(t),c0r=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=n(fw,"CODE",{});var a0t=s(tve);f0r=r(a0t,"pretrained_model_name_or_path"),a0t.forEach(t),m0r=r(fw,":"),fw.forEach(t),g0r=i(xl),ave=n(xl,"UL",{});var n0t=s(ave);VM=n(n0t,"LI",{});var XSe=s(VM);nve=n(XSe,"STRONG",{});var s0t=s(nve);h0r=r(s0t,"tapas"),s0t.forEach(t),p0r=r(XSe," \u2014 "),MH=n(XSe,"A",{href:!0});var l0t=s(MH);u0r=r(l0t,"TFTapasForQuestionAnswering"),l0t.forEach(t),_0r=r(XSe," (TAPAS model)"),XSe.forEach(t),n0t.forEach(t),b0r=i(xl),T(XM.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),tqe=i(f),pc=n(f,"H2",{class:!0});var cje=s(pc);zM=n(cje,"A",{id:!0,class:!0,href:!0});var i0t=s(zM);sve=n(i0t,"SPAN",{});var d0t=s(sve);T(AL.$$.fragment,d0t),d0t.forEach(t),i0t.forEach(t),v0r=i(cje),lve=n(cje,"SPAN",{});var c0t=s(lve);F0r=r(c0t,"TFAutoModelForTokenClassification"),c0t.forEach(t),cje.forEach(t),aqe=i(f),lr=n(f,"DIV",{class:!0});var $l=s(lr);T(yL.$$.fragment,$l),T0r=i($l),uc=n($l,"P",{});var vZ=s(uc);M0r=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),EH=n(vZ,"A",{href:!0});var f0t=s(EH);E0r=r(f0t,"from_pretrained()"),f0t.forEach(t),C0r=r(vZ," class method or the "),CH=n(vZ,"A",{href:!0});var m0t=s(CH);w0r=r(m0t,"from_config()"),m0t.forEach(t),A0r=r(vZ,` class
method.`),vZ.forEach(t),y0r=i($l),LL=n($l,"P",{});var fje=s(LL);L0r=r(fje,"This class cannot be instantiated directly using "),ive=n(fje,"CODE",{});var g0t=s(ive);x0r=r(g0t,"__init__()"),g0t.forEach(t),$0r=r(fje," (throws an error)."),fje.forEach(t),k0r=i($l),Bt=n($l,"DIV",{class:!0});var mw=s(Bt);T(xL.$$.fragment,mw),S0r=i(mw),dve=n(mw,"P",{});var h0t=s(dve);R0r=r(h0t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),h0t.forEach(t),P0r=i(mw),_c=n(mw,"P",{});var FZ=s(_c);B0r=r(FZ,`Note:
Loading a model from its configuration file does `),cve=n(FZ,"STRONG",{});var p0t=s(cve);I0r=r(p0t,"not"),p0t.forEach(t),q0r=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(FZ,"A",{href:!0});var u0t=s(wH);N0r=r(u0t,"from_pretrained()"),u0t.forEach(t),j0r=r(FZ," to load the model weights."),FZ.forEach(t),D0r=i(mw),T(QM.$$.fragment,mw),mw.forEach(t),G0r=i($l),Br=n($l,"DIV",{class:!0});var kl=s(Br);T($L.$$.fragment,kl),O0r=i(kl),fve=n(kl,"P",{});var _0t=s(fve);V0r=r(_0t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_0t.forEach(t),X0r=i(kl),dn=n(kl,"P",{});var gw=s(dn);z0r=r(gw,"The model class to instantiate is selected based on the "),mve=n(gw,"CODE",{});var b0t=s(mve);Q0r=r(b0t,"model_type"),b0t.forEach(t),W0r=r(gw,` property of the config object (either
passed as an argument or loaded from `),gve=n(gw,"CODE",{});var v0t=s(gve);H0r=r(v0t,"pretrained_model_name_or_path"),v0t.forEach(t),U0r=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=n(gw,"CODE",{});var F0t=s(hve);J0r=r(F0t,"pretrained_model_name_or_path"),F0t.forEach(t),Y0r=r(gw,":"),gw.forEach(t),K0r=i(kl),de=n(kl,"UL",{});var me=s(de);WM=n(me,"LI",{});var zSe=s(WM);pve=n(zSe,"STRONG",{});var T0t=s(pve);Z0r=r(T0t,"albert"),T0t.forEach(t),eTr=r(zSe," \u2014 "),AH=n(zSe,"A",{href:!0});var M0t=s(AH);oTr=r(M0t,"TFAlbertForTokenClassification"),M0t.forEach(t),rTr=r(zSe," (ALBERT model)"),zSe.forEach(t),tTr=i(me),HM=n(me,"LI",{});var QSe=s(HM);uve=n(QSe,"STRONG",{});var E0t=s(uve);aTr=r(E0t,"bert"),E0t.forEach(t),nTr=r(QSe," \u2014 "),yH=n(QSe,"A",{href:!0});var C0t=s(yH);sTr=r(C0t,"TFBertForTokenClassification"),C0t.forEach(t),lTr=r(QSe," (BERT model)"),QSe.forEach(t),iTr=i(me),UM=n(me,"LI",{});var WSe=s(UM);_ve=n(WSe,"STRONG",{});var w0t=s(_ve);dTr=r(w0t,"camembert"),w0t.forEach(t),cTr=r(WSe," \u2014 "),LH=n(WSe,"A",{href:!0});var A0t=s(LH);fTr=r(A0t,"TFCamembertForTokenClassification"),A0t.forEach(t),mTr=r(WSe," (CamemBERT model)"),WSe.forEach(t),gTr=i(me),JM=n(me,"LI",{});var HSe=s(JM);bve=n(HSe,"STRONG",{});var y0t=s(bve);hTr=r(y0t,"convbert"),y0t.forEach(t),pTr=r(HSe," \u2014 "),xH=n(HSe,"A",{href:!0});var L0t=s(xH);uTr=r(L0t,"TFConvBertForTokenClassification"),L0t.forEach(t),_Tr=r(HSe," (ConvBERT model)"),HSe.forEach(t),bTr=i(me),YM=n(me,"LI",{});var USe=s(YM);vve=n(USe,"STRONG",{});var x0t=s(vve);vTr=r(x0t,"deberta"),x0t.forEach(t),FTr=r(USe," \u2014 "),$H=n(USe,"A",{href:!0});var $0t=s($H);TTr=r($0t,"TFDebertaForTokenClassification"),$0t.forEach(t),MTr=r(USe," (DeBERTa model)"),USe.forEach(t),ETr=i(me),KM=n(me,"LI",{});var JSe=s(KM);Fve=n(JSe,"STRONG",{});var k0t=s(Fve);CTr=r(k0t,"deberta-v2"),k0t.forEach(t),wTr=r(JSe," \u2014 "),kH=n(JSe,"A",{href:!0});var S0t=s(kH);ATr=r(S0t,"TFDebertaV2ForTokenClassification"),S0t.forEach(t),yTr=r(JSe," (DeBERTa-v2 model)"),JSe.forEach(t),LTr=i(me),ZM=n(me,"LI",{});var YSe=s(ZM);Tve=n(YSe,"STRONG",{});var R0t=s(Tve);xTr=r(R0t,"distilbert"),R0t.forEach(t),$Tr=r(YSe," \u2014 "),SH=n(YSe,"A",{href:!0});var P0t=s(SH);kTr=r(P0t,"TFDistilBertForTokenClassification"),P0t.forEach(t),STr=r(YSe," (DistilBERT model)"),YSe.forEach(t),RTr=i(me),e4=n(me,"LI",{});var KSe=s(e4);Mve=n(KSe,"STRONG",{});var B0t=s(Mve);PTr=r(B0t,"electra"),B0t.forEach(t),BTr=r(KSe," \u2014 "),RH=n(KSe,"A",{href:!0});var I0t=s(RH);ITr=r(I0t,"TFElectraForTokenClassification"),I0t.forEach(t),qTr=r(KSe," (ELECTRA model)"),KSe.forEach(t),NTr=i(me),o4=n(me,"LI",{});var ZSe=s(o4);Eve=n(ZSe,"STRONG",{});var q0t=s(Eve);jTr=r(q0t,"flaubert"),q0t.forEach(t),DTr=r(ZSe," \u2014 "),PH=n(ZSe,"A",{href:!0});var N0t=s(PH);GTr=r(N0t,"TFFlaubertForTokenClassification"),N0t.forEach(t),OTr=r(ZSe," (FlauBERT model)"),ZSe.forEach(t),VTr=i(me),r4=n(me,"LI",{});var eRe=s(r4);Cve=n(eRe,"STRONG",{});var j0t=s(Cve);XTr=r(j0t,"funnel"),j0t.forEach(t),zTr=r(eRe," \u2014 "),BH=n(eRe,"A",{href:!0});var D0t=s(BH);QTr=r(D0t,"TFFunnelForTokenClassification"),D0t.forEach(t),WTr=r(eRe," (Funnel Transformer model)"),eRe.forEach(t),HTr=i(me),t4=n(me,"LI",{});var oRe=s(t4);wve=n(oRe,"STRONG",{});var G0t=s(wve);UTr=r(G0t,"layoutlm"),G0t.forEach(t),JTr=r(oRe," \u2014 "),IH=n(oRe,"A",{href:!0});var O0t=s(IH);YTr=r(O0t,"TFLayoutLMForTokenClassification"),O0t.forEach(t),KTr=r(oRe," (LayoutLM model)"),oRe.forEach(t),ZTr=i(me),a4=n(me,"LI",{});var rRe=s(a4);Ave=n(rRe,"STRONG",{});var V0t=s(Ave);e7r=r(V0t,"longformer"),V0t.forEach(t),o7r=r(rRe," \u2014 "),qH=n(rRe,"A",{href:!0});var X0t=s(qH);r7r=r(X0t,"TFLongformerForTokenClassification"),X0t.forEach(t),t7r=r(rRe," (Longformer model)"),rRe.forEach(t),a7r=i(me),n4=n(me,"LI",{});var tRe=s(n4);yve=n(tRe,"STRONG",{});var z0t=s(yve);n7r=r(z0t,"mobilebert"),z0t.forEach(t),s7r=r(tRe," \u2014 "),NH=n(tRe,"A",{href:!0});var Q0t=s(NH);l7r=r(Q0t,"TFMobileBertForTokenClassification"),Q0t.forEach(t),i7r=r(tRe," (MobileBERT model)"),tRe.forEach(t),d7r=i(me),s4=n(me,"LI",{});var aRe=s(s4);Lve=n(aRe,"STRONG",{});var W0t=s(Lve);c7r=r(W0t,"mpnet"),W0t.forEach(t),f7r=r(aRe," \u2014 "),jH=n(aRe,"A",{href:!0});var H0t=s(jH);m7r=r(H0t,"TFMPNetForTokenClassification"),H0t.forEach(t),g7r=r(aRe," (MPNet model)"),aRe.forEach(t),h7r=i(me),l4=n(me,"LI",{});var nRe=s(l4);xve=n(nRe,"STRONG",{});var U0t=s(xve);p7r=r(U0t,"rembert"),U0t.forEach(t),u7r=r(nRe," \u2014 "),DH=n(nRe,"A",{href:!0});var J0t=s(DH);_7r=r(J0t,"TFRemBertForTokenClassification"),J0t.forEach(t),b7r=r(nRe," (RemBERT model)"),nRe.forEach(t),v7r=i(me),i4=n(me,"LI",{});var sRe=s(i4);$ve=n(sRe,"STRONG",{});var Y0t=s($ve);F7r=r(Y0t,"roberta"),Y0t.forEach(t),T7r=r(sRe," \u2014 "),GH=n(sRe,"A",{href:!0});var K0t=s(GH);M7r=r(K0t,"TFRobertaForTokenClassification"),K0t.forEach(t),E7r=r(sRe," (RoBERTa model)"),sRe.forEach(t),C7r=i(me),d4=n(me,"LI",{});var lRe=s(d4);kve=n(lRe,"STRONG",{});var Z0t=s(kve);w7r=r(Z0t,"roformer"),Z0t.forEach(t),A7r=r(lRe," \u2014 "),OH=n(lRe,"A",{href:!0});var eTt=s(OH);y7r=r(eTt,"TFRoFormerForTokenClassification"),eTt.forEach(t),L7r=r(lRe," (RoFormer model)"),lRe.forEach(t),x7r=i(me),c4=n(me,"LI",{});var iRe=s(c4);Sve=n(iRe,"STRONG",{});var oTt=s(Sve);$7r=r(oTt,"xlm"),oTt.forEach(t),k7r=r(iRe," \u2014 "),VH=n(iRe,"A",{href:!0});var rTt=s(VH);S7r=r(rTt,"TFXLMForTokenClassification"),rTt.forEach(t),R7r=r(iRe," (XLM model)"),iRe.forEach(t),P7r=i(me),f4=n(me,"LI",{});var dRe=s(f4);Rve=n(dRe,"STRONG",{});var tTt=s(Rve);B7r=r(tTt,"xlm-roberta"),tTt.forEach(t),I7r=r(dRe," \u2014 "),XH=n(dRe,"A",{href:!0});var aTt=s(XH);q7r=r(aTt,"TFXLMRobertaForTokenClassification"),aTt.forEach(t),N7r=r(dRe," (XLM-RoBERTa model)"),dRe.forEach(t),j7r=i(me),m4=n(me,"LI",{});var cRe=s(m4);Pve=n(cRe,"STRONG",{});var nTt=s(Pve);D7r=r(nTt,"xlnet"),nTt.forEach(t),G7r=r(cRe," \u2014 "),zH=n(cRe,"A",{href:!0});var sTt=s(zH);O7r=r(sTt,"TFXLNetForTokenClassification"),sTt.forEach(t),V7r=r(cRe," (XLNet model)"),cRe.forEach(t),me.forEach(t),X7r=i(kl),T(g4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),nqe=i(f),bc=n(f,"H2",{class:!0});var mje=s(bc);h4=n(mje,"A",{id:!0,class:!0,href:!0});var lTt=s(h4);Bve=n(lTt,"SPAN",{});var iTt=s(Bve);T(kL.$$.fragment,iTt),iTt.forEach(t),lTt.forEach(t),z7r=i(mje),Ive=n(mje,"SPAN",{});var dTt=s(Ive);Q7r=r(dTt,"TFAutoModelForQuestionAnswering"),dTt.forEach(t),mje.forEach(t),sqe=i(f),ir=n(f,"DIV",{class:!0});var Sl=s(ir);T(SL.$$.fragment,Sl),W7r=i(Sl),vc=n(Sl,"P",{});var TZ=s(vc);H7r=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QH=n(TZ,"A",{href:!0});var cTt=s(QH);U7r=r(cTt,"from_pretrained()"),cTt.forEach(t),J7r=r(TZ," class method or the "),WH=n(TZ,"A",{href:!0});var fTt=s(WH);Y7r=r(fTt,"from_config()"),fTt.forEach(t),K7r=r(TZ,` class
method.`),TZ.forEach(t),Z7r=i(Sl),RL=n(Sl,"P",{});var gje=s(RL);eMr=r(gje,"This class cannot be instantiated directly using "),qve=n(gje,"CODE",{});var mTt=s(qve);oMr=r(mTt,"__init__()"),mTt.forEach(t),rMr=r(gje," (throws an error)."),gje.forEach(t),tMr=i(Sl),It=n(Sl,"DIV",{class:!0});var hw=s(It);T(PL.$$.fragment,hw),aMr=i(hw),Nve=n(hw,"P",{});var gTt=s(Nve);nMr=r(gTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gTt.forEach(t),sMr=i(hw),Fc=n(hw,"P",{});var MZ=s(Fc);lMr=r(MZ,`Note:
Loading a model from its configuration file does `),jve=n(MZ,"STRONG",{});var hTt=s(jve);iMr=r(hTt,"not"),hTt.forEach(t),dMr=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(MZ,"A",{href:!0});var pTt=s(HH);cMr=r(pTt,"from_pretrained()"),pTt.forEach(t),fMr=r(MZ," to load the model weights."),MZ.forEach(t),mMr=i(hw),T(p4.$$.fragment,hw),hw.forEach(t),gMr=i(Sl),Ir=n(Sl,"DIV",{class:!0});var Rl=s(Ir);T(BL.$$.fragment,Rl),hMr=i(Rl),Dve=n(Rl,"P",{});var uTt=s(Dve);pMr=r(uTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uTt.forEach(t),uMr=i(Rl),cn=n(Rl,"P",{});var pw=s(cn);_Mr=r(pw,"The model class to instantiate is selected based on the "),Gve=n(pw,"CODE",{});var _Tt=s(Gve);bMr=r(_Tt,"model_type"),_Tt.forEach(t),vMr=r(pw,` property of the config object (either
passed as an argument or loaded from `),Ove=n(pw,"CODE",{});var bTt=s(Ove);FMr=r(bTt,"pretrained_model_name_or_path"),bTt.forEach(t),TMr=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=n(pw,"CODE",{});var vTt=s(Vve);MMr=r(vTt,"pretrained_model_name_or_path"),vTt.forEach(t),EMr=r(pw,":"),pw.forEach(t),CMr=i(Rl),ce=n(Rl,"UL",{});var ge=s(ce);u4=n(ge,"LI",{});var fRe=s(u4);Xve=n(fRe,"STRONG",{});var FTt=s(Xve);wMr=r(FTt,"albert"),FTt.forEach(t),AMr=r(fRe," \u2014 "),UH=n(fRe,"A",{href:!0});var TTt=s(UH);yMr=r(TTt,"TFAlbertForQuestionAnswering"),TTt.forEach(t),LMr=r(fRe," (ALBERT model)"),fRe.forEach(t),xMr=i(ge),_4=n(ge,"LI",{});var mRe=s(_4);zve=n(mRe,"STRONG",{});var MTt=s(zve);$Mr=r(MTt,"bert"),MTt.forEach(t),kMr=r(mRe," \u2014 "),JH=n(mRe,"A",{href:!0});var ETt=s(JH);SMr=r(ETt,"TFBertForQuestionAnswering"),ETt.forEach(t),RMr=r(mRe," (BERT model)"),mRe.forEach(t),PMr=i(ge),b4=n(ge,"LI",{});var gRe=s(b4);Qve=n(gRe,"STRONG",{});var CTt=s(Qve);BMr=r(CTt,"camembert"),CTt.forEach(t),IMr=r(gRe," \u2014 "),YH=n(gRe,"A",{href:!0});var wTt=s(YH);qMr=r(wTt,"TFCamembertForQuestionAnswering"),wTt.forEach(t),NMr=r(gRe," (CamemBERT model)"),gRe.forEach(t),jMr=i(ge),v4=n(ge,"LI",{});var hRe=s(v4);Wve=n(hRe,"STRONG",{});var ATt=s(Wve);DMr=r(ATt,"convbert"),ATt.forEach(t),GMr=r(hRe," \u2014 "),KH=n(hRe,"A",{href:!0});var yTt=s(KH);OMr=r(yTt,"TFConvBertForQuestionAnswering"),yTt.forEach(t),VMr=r(hRe," (ConvBERT model)"),hRe.forEach(t),XMr=i(ge),F4=n(ge,"LI",{});var pRe=s(F4);Hve=n(pRe,"STRONG",{});var LTt=s(Hve);zMr=r(LTt,"deberta"),LTt.forEach(t),QMr=r(pRe," \u2014 "),ZH=n(pRe,"A",{href:!0});var xTt=s(ZH);WMr=r(xTt,"TFDebertaForQuestionAnswering"),xTt.forEach(t),HMr=r(pRe," (DeBERTa model)"),pRe.forEach(t),UMr=i(ge),T4=n(ge,"LI",{});var uRe=s(T4);Uve=n(uRe,"STRONG",{});var $Tt=s(Uve);JMr=r($Tt,"deberta-v2"),$Tt.forEach(t),YMr=r(uRe," \u2014 "),eU=n(uRe,"A",{href:!0});var kTt=s(eU);KMr=r(kTt,"TFDebertaV2ForQuestionAnswering"),kTt.forEach(t),ZMr=r(uRe," (DeBERTa-v2 model)"),uRe.forEach(t),e4r=i(ge),M4=n(ge,"LI",{});var _Re=s(M4);Jve=n(_Re,"STRONG",{});var STt=s(Jve);o4r=r(STt,"distilbert"),STt.forEach(t),r4r=r(_Re," \u2014 "),oU=n(_Re,"A",{href:!0});var RTt=s(oU);t4r=r(RTt,"TFDistilBertForQuestionAnswering"),RTt.forEach(t),a4r=r(_Re," (DistilBERT model)"),_Re.forEach(t),n4r=i(ge),E4=n(ge,"LI",{});var bRe=s(E4);Yve=n(bRe,"STRONG",{});var PTt=s(Yve);s4r=r(PTt,"electra"),PTt.forEach(t),l4r=r(bRe," \u2014 "),rU=n(bRe,"A",{href:!0});var BTt=s(rU);i4r=r(BTt,"TFElectraForQuestionAnswering"),BTt.forEach(t),d4r=r(bRe," (ELECTRA model)"),bRe.forEach(t),c4r=i(ge),C4=n(ge,"LI",{});var vRe=s(C4);Kve=n(vRe,"STRONG",{});var ITt=s(Kve);f4r=r(ITt,"flaubert"),ITt.forEach(t),m4r=r(vRe," \u2014 "),tU=n(vRe,"A",{href:!0});var qTt=s(tU);g4r=r(qTt,"TFFlaubertForQuestionAnsweringSimple"),qTt.forEach(t),h4r=r(vRe," (FlauBERT model)"),vRe.forEach(t),p4r=i(ge),w4=n(ge,"LI",{});var FRe=s(w4);Zve=n(FRe,"STRONG",{});var NTt=s(Zve);u4r=r(NTt,"funnel"),NTt.forEach(t),_4r=r(FRe," \u2014 "),aU=n(FRe,"A",{href:!0});var jTt=s(aU);b4r=r(jTt,"TFFunnelForQuestionAnswering"),jTt.forEach(t),v4r=r(FRe," (Funnel Transformer model)"),FRe.forEach(t),F4r=i(ge),A4=n(ge,"LI",{});var TRe=s(A4);eFe=n(TRe,"STRONG",{});var DTt=s(eFe);T4r=r(DTt,"gptj"),DTt.forEach(t),M4r=r(TRe," \u2014 "),nU=n(TRe,"A",{href:!0});var GTt=s(nU);E4r=r(GTt,"TFGPTJForQuestionAnswering"),GTt.forEach(t),C4r=r(TRe," (GPT-J model)"),TRe.forEach(t),w4r=i(ge),y4=n(ge,"LI",{});var MRe=s(y4);oFe=n(MRe,"STRONG",{});var OTt=s(oFe);A4r=r(OTt,"longformer"),OTt.forEach(t),y4r=r(MRe," \u2014 "),sU=n(MRe,"A",{href:!0});var VTt=s(sU);L4r=r(VTt,"TFLongformerForQuestionAnswering"),VTt.forEach(t),x4r=r(MRe," (Longformer model)"),MRe.forEach(t),$4r=i(ge),L4=n(ge,"LI",{});var ERe=s(L4);rFe=n(ERe,"STRONG",{});var XTt=s(rFe);k4r=r(XTt,"mobilebert"),XTt.forEach(t),S4r=r(ERe," \u2014 "),lU=n(ERe,"A",{href:!0});var zTt=s(lU);R4r=r(zTt,"TFMobileBertForQuestionAnswering"),zTt.forEach(t),P4r=r(ERe," (MobileBERT model)"),ERe.forEach(t),B4r=i(ge),x4=n(ge,"LI",{});var CRe=s(x4);tFe=n(CRe,"STRONG",{});var QTt=s(tFe);I4r=r(QTt,"mpnet"),QTt.forEach(t),q4r=r(CRe," \u2014 "),iU=n(CRe,"A",{href:!0});var WTt=s(iU);N4r=r(WTt,"TFMPNetForQuestionAnswering"),WTt.forEach(t),j4r=r(CRe," (MPNet model)"),CRe.forEach(t),D4r=i(ge),$4=n(ge,"LI",{});var wRe=s($4);aFe=n(wRe,"STRONG",{});var HTt=s(aFe);G4r=r(HTt,"rembert"),HTt.forEach(t),O4r=r(wRe," \u2014 "),dU=n(wRe,"A",{href:!0});var UTt=s(dU);V4r=r(UTt,"TFRemBertForQuestionAnswering"),UTt.forEach(t),X4r=r(wRe," (RemBERT model)"),wRe.forEach(t),z4r=i(ge),k4=n(ge,"LI",{});var ARe=s(k4);nFe=n(ARe,"STRONG",{});var JTt=s(nFe);Q4r=r(JTt,"roberta"),JTt.forEach(t),W4r=r(ARe," \u2014 "),cU=n(ARe,"A",{href:!0});var YTt=s(cU);H4r=r(YTt,"TFRobertaForQuestionAnswering"),YTt.forEach(t),U4r=r(ARe," (RoBERTa model)"),ARe.forEach(t),J4r=i(ge),S4=n(ge,"LI",{});var yRe=s(S4);sFe=n(yRe,"STRONG",{});var KTt=s(sFe);Y4r=r(KTt,"roformer"),KTt.forEach(t),K4r=r(yRe," \u2014 "),fU=n(yRe,"A",{href:!0});var ZTt=s(fU);Z4r=r(ZTt,"TFRoFormerForQuestionAnswering"),ZTt.forEach(t),eEr=r(yRe," (RoFormer model)"),yRe.forEach(t),oEr=i(ge),R4=n(ge,"LI",{});var LRe=s(R4);lFe=n(LRe,"STRONG",{});var e7t=s(lFe);rEr=r(e7t,"xlm"),e7t.forEach(t),tEr=r(LRe," \u2014 "),mU=n(LRe,"A",{href:!0});var o7t=s(mU);aEr=r(o7t,"TFXLMForQuestionAnsweringSimple"),o7t.forEach(t),nEr=r(LRe," (XLM model)"),LRe.forEach(t),sEr=i(ge),P4=n(ge,"LI",{});var xRe=s(P4);iFe=n(xRe,"STRONG",{});var r7t=s(iFe);lEr=r(r7t,"xlm-roberta"),r7t.forEach(t),iEr=r(xRe," \u2014 "),gU=n(xRe,"A",{href:!0});var t7t=s(gU);dEr=r(t7t,"TFXLMRobertaForQuestionAnswering"),t7t.forEach(t),cEr=r(xRe," (XLM-RoBERTa model)"),xRe.forEach(t),fEr=i(ge),B4=n(ge,"LI",{});var $Re=s(B4);dFe=n($Re,"STRONG",{});var a7t=s(dFe);mEr=r(a7t,"xlnet"),a7t.forEach(t),gEr=r($Re," \u2014 "),hU=n($Re,"A",{href:!0});var n7t=s(hU);hEr=r(n7t,"TFXLNetForQuestionAnsweringSimple"),n7t.forEach(t),pEr=r($Re," (XLNet model)"),$Re.forEach(t),ge.forEach(t),uEr=i(Rl),T(I4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),lqe=i(f),Tc=n(f,"H2",{class:!0});var hje=s(Tc);q4=n(hje,"A",{id:!0,class:!0,href:!0});var s7t=s(q4);cFe=n(s7t,"SPAN",{});var l7t=s(cFe);T(IL.$$.fragment,l7t),l7t.forEach(t),s7t.forEach(t),_Er=i(hje),fFe=n(hje,"SPAN",{});var i7t=s(fFe);bEr=r(i7t,"TFAutoModelForVision2Seq"),i7t.forEach(t),hje.forEach(t),iqe=i(f),dr=n(f,"DIV",{class:!0});var Pl=s(dr);T(qL.$$.fragment,Pl),vEr=i(Pl),Mc=n(Pl,"P",{});var EZ=s(Mc);FEr=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pU=n(EZ,"A",{href:!0});var d7t=s(pU);TEr=r(d7t,"from_pretrained()"),d7t.forEach(t),MEr=r(EZ," class method or the "),uU=n(EZ,"A",{href:!0});var c7t=s(uU);EEr=r(c7t,"from_config()"),c7t.forEach(t),CEr=r(EZ,` class
method.`),EZ.forEach(t),wEr=i(Pl),NL=n(Pl,"P",{});var pje=s(NL);AEr=r(pje,"This class cannot be instantiated directly using "),mFe=n(pje,"CODE",{});var f7t=s(mFe);yEr=r(f7t,"__init__()"),f7t.forEach(t),LEr=r(pje," (throws an error)."),pje.forEach(t),xEr=i(Pl),qt=n(Pl,"DIV",{class:!0});var uw=s(qt);T(jL.$$.fragment,uw),$Er=i(uw),gFe=n(uw,"P",{});var m7t=s(gFe);kEr=r(m7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),m7t.forEach(t),SEr=i(uw),Ec=n(uw,"P",{});var CZ=s(Ec);REr=r(CZ,`Note:
Loading a model from its configuration file does `),hFe=n(CZ,"STRONG",{});var g7t=s(hFe);PEr=r(g7t,"not"),g7t.forEach(t),BEr=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=n(CZ,"A",{href:!0});var h7t=s(_U);IEr=r(h7t,"from_pretrained()"),h7t.forEach(t),qEr=r(CZ," to load the model weights."),CZ.forEach(t),NEr=i(uw),T(N4.$$.fragment,uw),uw.forEach(t),jEr=i(Pl),qr=n(Pl,"DIV",{class:!0});var Bl=s(qr);T(DL.$$.fragment,Bl),DEr=i(Bl),pFe=n(Bl,"P",{});var p7t=s(pFe);GEr=r(p7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),p7t.forEach(t),OEr=i(Bl),fn=n(Bl,"P",{});var _w=s(fn);VEr=r(_w,"The model class to instantiate is selected based on the "),uFe=n(_w,"CODE",{});var u7t=s(uFe);XEr=r(u7t,"model_type"),u7t.forEach(t),zEr=r(_w,` property of the config object (either
passed as an argument or loaded from `),_Fe=n(_w,"CODE",{});var _7t=s(_Fe);QEr=r(_7t,"pretrained_model_name_or_path"),_7t.forEach(t),WEr=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=n(_w,"CODE",{});var b7t=s(bFe);HEr=r(b7t,"pretrained_model_name_or_path"),b7t.forEach(t),UEr=r(_w,":"),_w.forEach(t),JEr=i(Bl),vFe=n(Bl,"UL",{});var v7t=s(vFe);j4=n(v7t,"LI",{});var kRe=s(j4);FFe=n(kRe,"STRONG",{});var F7t=s(FFe);YEr=r(F7t,"vision-encoder-decoder"),F7t.forEach(t),KEr=r(kRe," \u2014 "),bU=n(kRe,"A",{href:!0});var T7t=s(bU);ZEr=r(T7t,"TFVisionEncoderDecoderModel"),T7t.forEach(t),e5r=r(kRe," (Vision Encoder decoder model)"),kRe.forEach(t),v7t.forEach(t),o5r=i(Bl),T(D4.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),dqe=i(f),Cc=n(f,"H2",{class:!0});var uje=s(Cc);G4=n(uje,"A",{id:!0,class:!0,href:!0});var M7t=s(G4);TFe=n(M7t,"SPAN",{});var E7t=s(TFe);T(GL.$$.fragment,E7t),E7t.forEach(t),M7t.forEach(t),r5r=i(uje),MFe=n(uje,"SPAN",{});var C7t=s(MFe);t5r=r(C7t,"TFAutoModelForSpeechSeq2Seq"),C7t.forEach(t),uje.forEach(t),cqe=i(f),cr=n(f,"DIV",{class:!0});var Il=s(cr);T(OL.$$.fragment,Il),a5r=i(Il),wc=n(Il,"P",{});var wZ=s(wc);n5r=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),vU=n(wZ,"A",{href:!0});var w7t=s(vU);s5r=r(w7t,"from_pretrained()"),w7t.forEach(t),l5r=r(wZ," class method or the "),FU=n(wZ,"A",{href:!0});var A7t=s(FU);i5r=r(A7t,"from_config()"),A7t.forEach(t),d5r=r(wZ,` class
method.`),wZ.forEach(t),c5r=i(Il),VL=n(Il,"P",{});var _je=s(VL);f5r=r(_je,"This class cannot be instantiated directly using "),EFe=n(_je,"CODE",{});var y7t=s(EFe);m5r=r(y7t,"__init__()"),y7t.forEach(t),g5r=r(_je," (throws an error)."),_je.forEach(t),h5r=i(Il),Nt=n(Il,"DIV",{class:!0});var bw=s(Nt);T(XL.$$.fragment,bw),p5r=i(bw),CFe=n(bw,"P",{});var L7t=s(CFe);u5r=r(L7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),L7t.forEach(t),_5r=i(bw),Ac=n(bw,"P",{});var AZ=s(Ac);b5r=r(AZ,`Note:
Loading a model from its configuration file does `),wFe=n(AZ,"STRONG",{});var x7t=s(wFe);v5r=r(x7t,"not"),x7t.forEach(t),F5r=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=n(AZ,"A",{href:!0});var $7t=s(TU);T5r=r($7t,"from_pretrained()"),$7t.forEach(t),M5r=r(AZ," to load the model weights."),AZ.forEach(t),E5r=i(bw),T(O4.$$.fragment,bw),bw.forEach(t),C5r=i(Il),Nr=n(Il,"DIV",{class:!0});var ql=s(Nr);T(zL.$$.fragment,ql),w5r=i(ql),AFe=n(ql,"P",{});var k7t=s(AFe);A5r=r(k7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),k7t.forEach(t),y5r=i(ql),mn=n(ql,"P",{});var vw=s(mn);L5r=r(vw,"The model class to instantiate is selected based on the "),yFe=n(vw,"CODE",{});var S7t=s(yFe);x5r=r(S7t,"model_type"),S7t.forEach(t),$5r=r(vw,` property of the config object (either
passed as an argument or loaded from `),LFe=n(vw,"CODE",{});var R7t=s(LFe);k5r=r(R7t,"pretrained_model_name_or_path"),R7t.forEach(t),S5r=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=n(vw,"CODE",{});var P7t=s(xFe);R5r=r(P7t,"pretrained_model_name_or_path"),P7t.forEach(t),P5r=r(vw,":"),vw.forEach(t),B5r=i(ql),$Fe=n(ql,"UL",{});var B7t=s($Fe);V4=n(B7t,"LI",{});var SRe=s(V4);kFe=n(SRe,"STRONG",{});var I7t=s(kFe);I5r=r(I7t,"speech_to_text"),I7t.forEach(t),q5r=r(SRe," \u2014 "),MU=n(SRe,"A",{href:!0});var q7t=s(MU);N5r=r(q7t,"TFSpeech2TextForConditionalGeneration"),q7t.forEach(t),j5r=r(SRe," (Speech2Text model)"),SRe.forEach(t),B7t.forEach(t),D5r=i(ql),T(X4.$$.fragment,ql),ql.forEach(t),Il.forEach(t),fqe=i(f),yc=n(f,"H2",{class:!0});var bje=s(yc);z4=n(bje,"A",{id:!0,class:!0,href:!0});var N7t=s(z4);SFe=n(N7t,"SPAN",{});var j7t=s(SFe);T(QL.$$.fragment,j7t),j7t.forEach(t),N7t.forEach(t),G5r=i(bje),RFe=n(bje,"SPAN",{});var D7t=s(RFe);O5r=r(D7t,"FlaxAutoModel"),D7t.forEach(t),bje.forEach(t),mqe=i(f),fr=n(f,"DIV",{class:!0});var Nl=s(fr);T(WL.$$.fragment,Nl),V5r=i(Nl),Lc=n(Nl,"P",{});var yZ=s(Lc);X5r=r(yZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),EU=n(yZ,"A",{href:!0});var G7t=s(EU);z5r=r(G7t,"from_pretrained()"),G7t.forEach(t),Q5r=r(yZ," class method or the "),CU=n(yZ,"A",{href:!0});var O7t=s(CU);W5r=r(O7t,"from_config()"),O7t.forEach(t),H5r=r(yZ,` class
method.`),yZ.forEach(t),U5r=i(Nl),HL=n(Nl,"P",{});var vje=s(HL);J5r=r(vje,"This class cannot be instantiated directly using "),PFe=n(vje,"CODE",{});var V7t=s(PFe);Y5r=r(V7t,"__init__()"),V7t.forEach(t),K5r=r(vje," (throws an error)."),vje.forEach(t),Z5r=i(Nl),jt=n(Nl,"DIV",{class:!0});var Fw=s(jt);T(UL.$$.fragment,Fw),eCr=i(Fw),BFe=n(Fw,"P",{});var X7t=s(BFe);oCr=r(X7t,"Instantiates one of the base model classes of the library from a configuration."),X7t.forEach(t),rCr=i(Fw),xc=n(Fw,"P",{});var LZ=s(xc);tCr=r(LZ,`Note:
Loading a model from its configuration file does `),IFe=n(LZ,"STRONG",{});var z7t=s(IFe);aCr=r(z7t,"not"),z7t.forEach(t),nCr=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=n(LZ,"A",{href:!0});var Q7t=s(wU);sCr=r(Q7t,"from_pretrained()"),Q7t.forEach(t),lCr=r(LZ," to load the model weights."),LZ.forEach(t),iCr=i(Fw),T(Q4.$$.fragment,Fw),Fw.forEach(t),dCr=i(Nl),jr=n(Nl,"DIV",{class:!0});var jl=s(jr);T(JL.$$.fragment,jl),cCr=i(jl),qFe=n(jl,"P",{});var W7t=s(qFe);fCr=r(W7t,"Instantiate one of the base model classes of the library from a pretrained model."),W7t.forEach(t),mCr=i(jl),gn=n(jl,"P",{});var Tw=s(gn);gCr=r(Tw,"The model class to instantiate is selected based on the "),NFe=n(Tw,"CODE",{});var H7t=s(NFe);hCr=r(H7t,"model_type"),H7t.forEach(t),pCr=r(Tw,` property of the config object (either
passed as an argument or loaded from `),jFe=n(Tw,"CODE",{});var U7t=s(jFe);uCr=r(U7t,"pretrained_model_name_or_path"),U7t.forEach(t),_Cr=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DFe=n(Tw,"CODE",{});var J7t=s(DFe);bCr=r(J7t,"pretrained_model_name_or_path"),J7t.forEach(t),vCr=r(Tw,":"),Tw.forEach(t),FCr=i(jl),ee=n(jl,"UL",{});var te=s(ee);W4=n(te,"LI",{});var RRe=s(W4);GFe=n(RRe,"STRONG",{});var Y7t=s(GFe);TCr=r(Y7t,"albert"),Y7t.forEach(t),MCr=r(RRe," \u2014 "),AU=n(RRe,"A",{href:!0});var K7t=s(AU);ECr=r(K7t,"FlaxAlbertModel"),K7t.forEach(t),CCr=r(RRe," (ALBERT model)"),RRe.forEach(t),wCr=i(te),H4=n(te,"LI",{});var PRe=s(H4);OFe=n(PRe,"STRONG",{});var Z7t=s(OFe);ACr=r(Z7t,"bart"),Z7t.forEach(t),yCr=r(PRe," \u2014 "),yU=n(PRe,"A",{href:!0});var eMt=s(yU);LCr=r(eMt,"FlaxBartModel"),eMt.forEach(t),xCr=r(PRe," (BART model)"),PRe.forEach(t),$Cr=i(te),U4=n(te,"LI",{});var BRe=s(U4);VFe=n(BRe,"STRONG",{});var oMt=s(VFe);kCr=r(oMt,"beit"),oMt.forEach(t),SCr=r(BRe," \u2014 "),LU=n(BRe,"A",{href:!0});var rMt=s(LU);RCr=r(rMt,"FlaxBeitModel"),rMt.forEach(t),PCr=r(BRe," (BEiT model)"),BRe.forEach(t),BCr=i(te),J4=n(te,"LI",{});var IRe=s(J4);XFe=n(IRe,"STRONG",{});var tMt=s(XFe);ICr=r(tMt,"bert"),tMt.forEach(t),qCr=r(IRe," \u2014 "),xU=n(IRe,"A",{href:!0});var aMt=s(xU);NCr=r(aMt,"FlaxBertModel"),aMt.forEach(t),jCr=r(IRe," (BERT model)"),IRe.forEach(t),DCr=i(te),Y4=n(te,"LI",{});var qRe=s(Y4);zFe=n(qRe,"STRONG",{});var nMt=s(zFe);GCr=r(nMt,"big_bird"),nMt.forEach(t),OCr=r(qRe," \u2014 "),$U=n(qRe,"A",{href:!0});var sMt=s($U);VCr=r(sMt,"FlaxBigBirdModel"),sMt.forEach(t),XCr=r(qRe," (BigBird model)"),qRe.forEach(t),zCr=i(te),K4=n(te,"LI",{});var NRe=s(K4);QFe=n(NRe,"STRONG",{});var lMt=s(QFe);QCr=r(lMt,"blenderbot"),lMt.forEach(t),WCr=r(NRe," \u2014 "),kU=n(NRe,"A",{href:!0});var iMt=s(kU);HCr=r(iMt,"FlaxBlenderbotModel"),iMt.forEach(t),UCr=r(NRe," (Blenderbot model)"),NRe.forEach(t),JCr=i(te),Z4=n(te,"LI",{});var jRe=s(Z4);WFe=n(jRe,"STRONG",{});var dMt=s(WFe);YCr=r(dMt,"blenderbot-small"),dMt.forEach(t),KCr=r(jRe," \u2014 "),SU=n(jRe,"A",{href:!0});var cMt=s(SU);ZCr=r(cMt,"FlaxBlenderbotSmallModel"),cMt.forEach(t),e3r=r(jRe," (BlenderbotSmall model)"),jRe.forEach(t),o3r=i(te),eE=n(te,"LI",{});var DRe=s(eE);HFe=n(DRe,"STRONG",{});var fMt=s(HFe);r3r=r(fMt,"clip"),fMt.forEach(t),t3r=r(DRe," \u2014 "),RU=n(DRe,"A",{href:!0});var mMt=s(RU);a3r=r(mMt,"FlaxCLIPModel"),mMt.forEach(t),n3r=r(DRe," (CLIP model)"),DRe.forEach(t),s3r=i(te),oE=n(te,"LI",{});var GRe=s(oE);UFe=n(GRe,"STRONG",{});var gMt=s(UFe);l3r=r(gMt,"distilbert"),gMt.forEach(t),i3r=r(GRe," \u2014 "),PU=n(GRe,"A",{href:!0});var hMt=s(PU);d3r=r(hMt,"FlaxDistilBertModel"),hMt.forEach(t),c3r=r(GRe," (DistilBERT model)"),GRe.forEach(t),f3r=i(te),rE=n(te,"LI",{});var ORe=s(rE);JFe=n(ORe,"STRONG",{});var pMt=s(JFe);m3r=r(pMt,"electra"),pMt.forEach(t),g3r=r(ORe," \u2014 "),BU=n(ORe,"A",{href:!0});var uMt=s(BU);h3r=r(uMt,"FlaxElectraModel"),uMt.forEach(t),p3r=r(ORe," (ELECTRA model)"),ORe.forEach(t),u3r=i(te),tE=n(te,"LI",{});var VRe=s(tE);YFe=n(VRe,"STRONG",{});var _Mt=s(YFe);_3r=r(_Mt,"gpt2"),_Mt.forEach(t),b3r=r(VRe," \u2014 "),IU=n(VRe,"A",{href:!0});var bMt=s(IU);v3r=r(bMt,"FlaxGPT2Model"),bMt.forEach(t),F3r=r(VRe," (OpenAI GPT-2 model)"),VRe.forEach(t),T3r=i(te),aE=n(te,"LI",{});var XRe=s(aE);KFe=n(XRe,"STRONG",{});var vMt=s(KFe);M3r=r(vMt,"gpt_neo"),vMt.forEach(t),E3r=r(XRe," \u2014 "),qU=n(XRe,"A",{href:!0});var FMt=s(qU);C3r=r(FMt,"FlaxGPTNeoModel"),FMt.forEach(t),w3r=r(XRe," (GPT Neo model)"),XRe.forEach(t),A3r=i(te),nE=n(te,"LI",{});var zRe=s(nE);ZFe=n(zRe,"STRONG",{});var TMt=s(ZFe);y3r=r(TMt,"gptj"),TMt.forEach(t),L3r=r(zRe," \u2014 "),NU=n(zRe,"A",{href:!0});var MMt=s(NU);x3r=r(MMt,"FlaxGPTJModel"),MMt.forEach(t),$3r=r(zRe," (GPT-J model)"),zRe.forEach(t),k3r=i(te),sE=n(te,"LI",{});var QRe=s(sE);e0e=n(QRe,"STRONG",{});var EMt=s(e0e);S3r=r(EMt,"marian"),EMt.forEach(t),R3r=r(QRe," \u2014 "),jU=n(QRe,"A",{href:!0});var CMt=s(jU);P3r=r(CMt,"FlaxMarianModel"),CMt.forEach(t),B3r=r(QRe," (Marian model)"),QRe.forEach(t),I3r=i(te),lE=n(te,"LI",{});var WRe=s(lE);o0e=n(WRe,"STRONG",{});var wMt=s(o0e);q3r=r(wMt,"mbart"),wMt.forEach(t),N3r=r(WRe," \u2014 "),DU=n(WRe,"A",{href:!0});var AMt=s(DU);j3r=r(AMt,"FlaxMBartModel"),AMt.forEach(t),D3r=r(WRe," (mBART model)"),WRe.forEach(t),G3r=i(te),iE=n(te,"LI",{});var HRe=s(iE);r0e=n(HRe,"STRONG",{});var yMt=s(r0e);O3r=r(yMt,"mt5"),yMt.forEach(t),V3r=r(HRe," \u2014 "),GU=n(HRe,"A",{href:!0});var LMt=s(GU);X3r=r(LMt,"FlaxMT5Model"),LMt.forEach(t),z3r=r(HRe," (mT5 model)"),HRe.forEach(t),Q3r=i(te),dE=n(te,"LI",{});var URe=s(dE);t0e=n(URe,"STRONG",{});var xMt=s(t0e);W3r=r(xMt,"opt"),xMt.forEach(t),H3r=r(URe," \u2014 "),OU=n(URe,"A",{href:!0});var $Mt=s(OU);U3r=r($Mt,"FlaxOPTModel"),$Mt.forEach(t),J3r=r(URe," (OPT model)"),URe.forEach(t),Y3r=i(te),cE=n(te,"LI",{});var JRe=s(cE);a0e=n(JRe,"STRONG",{});var kMt=s(a0e);K3r=r(kMt,"pegasus"),kMt.forEach(t),Z3r=r(JRe," \u2014 "),VU=n(JRe,"A",{href:!0});var SMt=s(VU);ewr=r(SMt,"FlaxPegasusModel"),SMt.forEach(t),owr=r(JRe," (Pegasus model)"),JRe.forEach(t),rwr=i(te),fE=n(te,"LI",{});var YRe=s(fE);n0e=n(YRe,"STRONG",{});var RMt=s(n0e);twr=r(RMt,"roberta"),RMt.forEach(t),awr=r(YRe," \u2014 "),XU=n(YRe,"A",{href:!0});var PMt=s(XU);nwr=r(PMt,"FlaxRobertaModel"),PMt.forEach(t),swr=r(YRe," (RoBERTa model)"),YRe.forEach(t),lwr=i(te),mE=n(te,"LI",{});var KRe=s(mE);s0e=n(KRe,"STRONG",{});var BMt=s(s0e);iwr=r(BMt,"roformer"),BMt.forEach(t),dwr=r(KRe," \u2014 "),zU=n(KRe,"A",{href:!0});var IMt=s(zU);cwr=r(IMt,"FlaxRoFormerModel"),IMt.forEach(t),fwr=r(KRe," (RoFormer model)"),KRe.forEach(t),mwr=i(te),gE=n(te,"LI",{});var ZRe=s(gE);l0e=n(ZRe,"STRONG",{});var qMt=s(l0e);gwr=r(qMt,"t5"),qMt.forEach(t),hwr=r(ZRe," \u2014 "),QU=n(ZRe,"A",{href:!0});var NMt=s(QU);pwr=r(NMt,"FlaxT5Model"),NMt.forEach(t),uwr=r(ZRe," (T5 model)"),ZRe.forEach(t),_wr=i(te),hE=n(te,"LI",{});var ePe=s(hE);i0e=n(ePe,"STRONG",{});var jMt=s(i0e);bwr=r(jMt,"vision-text-dual-encoder"),jMt.forEach(t),vwr=r(ePe," \u2014 "),WU=n(ePe,"A",{href:!0});var DMt=s(WU);Fwr=r(DMt,"FlaxVisionTextDualEncoderModel"),DMt.forEach(t),Twr=r(ePe," (VisionTextDualEncoder model)"),ePe.forEach(t),Mwr=i(te),pE=n(te,"LI",{});var oPe=s(pE);d0e=n(oPe,"STRONG",{});var GMt=s(d0e);Ewr=r(GMt,"vit"),GMt.forEach(t),Cwr=r(oPe," \u2014 "),HU=n(oPe,"A",{href:!0});var OMt=s(HU);wwr=r(OMt,"FlaxViTModel"),OMt.forEach(t),Awr=r(oPe," (ViT model)"),oPe.forEach(t),ywr=i(te),uE=n(te,"LI",{});var rPe=s(uE);c0e=n(rPe,"STRONG",{});var VMt=s(c0e);Lwr=r(VMt,"wav2vec2"),VMt.forEach(t),xwr=r(rPe," \u2014 "),UU=n(rPe,"A",{href:!0});var XMt=s(UU);$wr=r(XMt,"FlaxWav2Vec2Model"),XMt.forEach(t),kwr=r(rPe," (Wav2Vec2 model)"),rPe.forEach(t),Swr=i(te),_E=n(te,"LI",{});var tPe=s(_E);f0e=n(tPe,"STRONG",{});var zMt=s(f0e);Rwr=r(zMt,"xglm"),zMt.forEach(t),Pwr=r(tPe," \u2014 "),JU=n(tPe,"A",{href:!0});var QMt=s(JU);Bwr=r(QMt,"FlaxXGLMModel"),QMt.forEach(t),Iwr=r(tPe," (XGLM model)"),tPe.forEach(t),qwr=i(te),bE=n(te,"LI",{});var aPe=s(bE);m0e=n(aPe,"STRONG",{});var WMt=s(m0e);Nwr=r(WMt,"xlm-roberta"),WMt.forEach(t),jwr=r(aPe," \u2014 "),YU=n(aPe,"A",{href:!0});var HMt=s(YU);Dwr=r(HMt,"FlaxXLMRobertaModel"),HMt.forEach(t),Gwr=r(aPe," (XLM-RoBERTa model)"),aPe.forEach(t),te.forEach(t),Owr=i(jl),T(vE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),gqe=i(f),$c=n(f,"H2",{class:!0});var Fje=s($c);FE=n(Fje,"A",{id:!0,class:!0,href:!0});var UMt=s(FE);g0e=n(UMt,"SPAN",{});var JMt=s(g0e);T(YL.$$.fragment,JMt),JMt.forEach(t),UMt.forEach(t),Vwr=i(Fje),h0e=n(Fje,"SPAN",{});var YMt=s(h0e);Xwr=r(YMt,"FlaxAutoModelForCausalLM"),YMt.forEach(t),Fje.forEach(t),hqe=i(f),mr=n(f,"DIV",{class:!0});var Dl=s(mr);T(KL.$$.fragment,Dl),zwr=i(Dl),kc=n(Dl,"P",{});var xZ=s(kc);Qwr=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),KU=n(xZ,"A",{href:!0});var KMt=s(KU);Wwr=r(KMt,"from_pretrained()"),KMt.forEach(t),Hwr=r(xZ," class method or the "),ZU=n(xZ,"A",{href:!0});var ZMt=s(ZU);Uwr=r(ZMt,"from_config()"),ZMt.forEach(t),Jwr=r(xZ,` class
method.`),xZ.forEach(t),Ywr=i(Dl),ZL=n(Dl,"P",{});var Tje=s(ZL);Kwr=r(Tje,"This class cannot be instantiated directly using "),p0e=n(Tje,"CODE",{});var e4t=s(p0e);Zwr=r(e4t,"__init__()"),e4t.forEach(t),eAr=r(Tje," (throws an error)."),Tje.forEach(t),oAr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var Mw=s(Dt);T(ex.$$.fragment,Mw),rAr=i(Mw),u0e=n(Mw,"P",{});var o4t=s(u0e);tAr=r(o4t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),o4t.forEach(t),aAr=i(Mw),Sc=n(Mw,"P",{});var $Z=s(Sc);nAr=r($Z,`Note:
Loading a model from its configuration file does `),_0e=n($Z,"STRONG",{});var r4t=s(_0e);sAr=r(r4t,"not"),r4t.forEach(t),lAr=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=n($Z,"A",{href:!0});var t4t=s(eJ);iAr=r(t4t,"from_pretrained()"),t4t.forEach(t),dAr=r($Z," to load the model weights."),$Z.forEach(t),cAr=i(Mw),T(TE.$$.fragment,Mw),Mw.forEach(t),fAr=i(Dl),Dr=n(Dl,"DIV",{class:!0});var Gl=s(Dr);T(ox.$$.fragment,Gl),mAr=i(Gl),b0e=n(Gl,"P",{});var a4t=s(b0e);gAr=r(a4t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),a4t.forEach(t),hAr=i(Gl),hn=n(Gl,"P",{});var Ew=s(hn);pAr=r(Ew,"The model class to instantiate is selected based on the "),v0e=n(Ew,"CODE",{});var n4t=s(v0e);uAr=r(n4t,"model_type"),n4t.forEach(t),_Ar=r(Ew,` property of the config object (either
passed as an argument or loaded from `),F0e=n(Ew,"CODE",{});var s4t=s(F0e);bAr=r(s4t,"pretrained_model_name_or_path"),s4t.forEach(t),vAr=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T0e=n(Ew,"CODE",{});var l4t=s(T0e);FAr=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),TAr=r(Ew,":"),Ew.forEach(t),MAr=i(Gl),Le=n(Gl,"UL",{});var Pe=s(Le);ME=n(Pe,"LI",{});var nPe=s(ME);M0e=n(nPe,"STRONG",{});var i4t=s(M0e);EAr=r(i4t,"bart"),i4t.forEach(t),CAr=r(nPe," \u2014 "),oJ=n(nPe,"A",{href:!0});var d4t=s(oJ);wAr=r(d4t,"FlaxBartForCausalLM"),d4t.forEach(t),AAr=r(nPe," (BART model)"),nPe.forEach(t),yAr=i(Pe),EE=n(Pe,"LI",{});var sPe=s(EE);E0e=n(sPe,"STRONG",{});var c4t=s(E0e);LAr=r(c4t,"bert"),c4t.forEach(t),xAr=r(sPe," \u2014 "),rJ=n(sPe,"A",{href:!0});var f4t=s(rJ);$Ar=r(f4t,"FlaxBertForCausalLM"),f4t.forEach(t),kAr=r(sPe," (BERT model)"),sPe.forEach(t),SAr=i(Pe),CE=n(Pe,"LI",{});var lPe=s(CE);C0e=n(lPe,"STRONG",{});var m4t=s(C0e);RAr=r(m4t,"big_bird"),m4t.forEach(t),PAr=r(lPe," \u2014 "),tJ=n(lPe,"A",{href:!0});var g4t=s(tJ);BAr=r(g4t,"FlaxBigBirdForCausalLM"),g4t.forEach(t),IAr=r(lPe," (BigBird model)"),lPe.forEach(t),qAr=i(Pe),wE=n(Pe,"LI",{});var iPe=s(wE);w0e=n(iPe,"STRONG",{});var h4t=s(w0e);NAr=r(h4t,"electra"),h4t.forEach(t),jAr=r(iPe," \u2014 "),aJ=n(iPe,"A",{href:!0});var p4t=s(aJ);DAr=r(p4t,"FlaxElectraForCausalLM"),p4t.forEach(t),GAr=r(iPe," (ELECTRA model)"),iPe.forEach(t),OAr=i(Pe),AE=n(Pe,"LI",{});var dPe=s(AE);A0e=n(dPe,"STRONG",{});var u4t=s(A0e);VAr=r(u4t,"gpt2"),u4t.forEach(t),XAr=r(dPe," \u2014 "),nJ=n(dPe,"A",{href:!0});var _4t=s(nJ);zAr=r(_4t,"FlaxGPT2LMHeadModel"),_4t.forEach(t),QAr=r(dPe," (OpenAI GPT-2 model)"),dPe.forEach(t),WAr=i(Pe),yE=n(Pe,"LI",{});var cPe=s(yE);y0e=n(cPe,"STRONG",{});var b4t=s(y0e);HAr=r(b4t,"gpt_neo"),b4t.forEach(t),UAr=r(cPe," \u2014 "),sJ=n(cPe,"A",{href:!0});var v4t=s(sJ);JAr=r(v4t,"FlaxGPTNeoForCausalLM"),v4t.forEach(t),YAr=r(cPe," (GPT Neo model)"),cPe.forEach(t),KAr=i(Pe),LE=n(Pe,"LI",{});var fPe=s(LE);L0e=n(fPe,"STRONG",{});var F4t=s(L0e);ZAr=r(F4t,"gptj"),F4t.forEach(t),e6r=r(fPe," \u2014 "),lJ=n(fPe,"A",{href:!0});var T4t=s(lJ);o6r=r(T4t,"FlaxGPTJForCausalLM"),T4t.forEach(t),r6r=r(fPe," (GPT-J model)"),fPe.forEach(t),t6r=i(Pe),xE=n(Pe,"LI",{});var mPe=s(xE);x0e=n(mPe,"STRONG",{});var M4t=s(x0e);a6r=r(M4t,"opt"),M4t.forEach(t),n6r=r(mPe," \u2014 "),iJ=n(mPe,"A",{href:!0});var E4t=s(iJ);s6r=r(E4t,"FlaxOPTForCausalLM"),E4t.forEach(t),l6r=r(mPe," (OPT model)"),mPe.forEach(t),i6r=i(Pe),$E=n(Pe,"LI",{});var gPe=s($E);$0e=n(gPe,"STRONG",{});var C4t=s($0e);d6r=r(C4t,"roberta"),C4t.forEach(t),c6r=r(gPe," \u2014 "),dJ=n(gPe,"A",{href:!0});var w4t=s(dJ);f6r=r(w4t,"FlaxRobertaForCausalLM"),w4t.forEach(t),m6r=r(gPe," (RoBERTa model)"),gPe.forEach(t),g6r=i(Pe),kE=n(Pe,"LI",{});var hPe=s(kE);k0e=n(hPe,"STRONG",{});var A4t=s(k0e);h6r=r(A4t,"xglm"),A4t.forEach(t),p6r=r(hPe," \u2014 "),cJ=n(hPe,"A",{href:!0});var y4t=s(cJ);u6r=r(y4t,"FlaxXGLMForCausalLM"),y4t.forEach(t),_6r=r(hPe," (XGLM model)"),hPe.forEach(t),Pe.forEach(t),b6r=i(Gl),T(SE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),pqe=i(f),Rc=n(f,"H2",{class:!0});var Mje=s(Rc);RE=n(Mje,"A",{id:!0,class:!0,href:!0});var L4t=s(RE);S0e=n(L4t,"SPAN",{});var x4t=s(S0e);T(rx.$$.fragment,x4t),x4t.forEach(t),L4t.forEach(t),v6r=i(Mje),R0e=n(Mje,"SPAN",{});var $4t=s(R0e);F6r=r($4t,"FlaxAutoModelForPreTraining"),$4t.forEach(t),Mje.forEach(t),uqe=i(f),gr=n(f,"DIV",{class:!0});var Ol=s(gr);T(tx.$$.fragment,Ol),T6r=i(Ol),Pc=n(Ol,"P",{});var kZ=s(Pc);M6r=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fJ=n(kZ,"A",{href:!0});var k4t=s(fJ);E6r=r(k4t,"from_pretrained()"),k4t.forEach(t),C6r=r(kZ," class method or the "),mJ=n(kZ,"A",{href:!0});var S4t=s(mJ);w6r=r(S4t,"from_config()"),S4t.forEach(t),A6r=r(kZ,` class
method.`),kZ.forEach(t),y6r=i(Ol),ax=n(Ol,"P",{});var Eje=s(ax);L6r=r(Eje,"This class cannot be instantiated directly using "),P0e=n(Eje,"CODE",{});var R4t=s(P0e);x6r=r(R4t,"__init__()"),R4t.forEach(t),$6r=r(Eje," (throws an error)."),Eje.forEach(t),k6r=i(Ol),Gt=n(Ol,"DIV",{class:!0});var Cw=s(Gt);T(nx.$$.fragment,Cw),S6r=i(Cw),B0e=n(Cw,"P",{});var P4t=s(B0e);R6r=r(P4t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),P4t.forEach(t),P6r=i(Cw),Bc=n(Cw,"P",{});var SZ=s(Bc);B6r=r(SZ,`Note:
Loading a model from its configuration file does `),I0e=n(SZ,"STRONG",{});var B4t=s(I0e);I6r=r(B4t,"not"),B4t.forEach(t),q6r=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=n(SZ,"A",{href:!0});var I4t=s(gJ);N6r=r(I4t,"from_pretrained()"),I4t.forEach(t),j6r=r(SZ," to load the model weights."),SZ.forEach(t),D6r=i(Cw),T(PE.$$.fragment,Cw),Cw.forEach(t),G6r=i(Ol),Gr=n(Ol,"DIV",{class:!0});var Vl=s(Gr);T(sx.$$.fragment,Vl),O6r=i(Vl),q0e=n(Vl,"P",{});var q4t=s(q0e);V6r=r(q4t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),q4t.forEach(t),X6r=i(Vl),pn=n(Vl,"P",{});var ww=s(pn);z6r=r(ww,"The model class to instantiate is selected based on the "),N0e=n(ww,"CODE",{});var N4t=s(N0e);Q6r=r(N4t,"model_type"),N4t.forEach(t),W6r=r(ww,` property of the config object (either
passed as an argument or loaded from `),j0e=n(ww,"CODE",{});var j4t=s(j0e);H6r=r(j4t,"pretrained_model_name_or_path"),j4t.forEach(t),U6r=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D0e=n(ww,"CODE",{});var D4t=s(D0e);J6r=r(D4t,"pretrained_model_name_or_path"),D4t.forEach(t),Y6r=r(ww,":"),ww.forEach(t),K6r=i(Vl),Me=n(Vl,"UL",{});var we=s(Me);BE=n(we,"LI",{});var pPe=s(BE);G0e=n(pPe,"STRONG",{});var G4t=s(G0e);Z6r=r(G4t,"albert"),G4t.forEach(t),eyr=r(pPe," \u2014 "),hJ=n(pPe,"A",{href:!0});var O4t=s(hJ);oyr=r(O4t,"FlaxAlbertForPreTraining"),O4t.forEach(t),ryr=r(pPe," (ALBERT model)"),pPe.forEach(t),tyr=i(we),IE=n(we,"LI",{});var uPe=s(IE);O0e=n(uPe,"STRONG",{});var V4t=s(O0e);ayr=r(V4t,"bart"),V4t.forEach(t),nyr=r(uPe," \u2014 "),pJ=n(uPe,"A",{href:!0});var X4t=s(pJ);syr=r(X4t,"FlaxBartForConditionalGeneration"),X4t.forEach(t),lyr=r(uPe," (BART model)"),uPe.forEach(t),iyr=i(we),qE=n(we,"LI",{});var _Pe=s(qE);V0e=n(_Pe,"STRONG",{});var z4t=s(V0e);dyr=r(z4t,"bert"),z4t.forEach(t),cyr=r(_Pe," \u2014 "),uJ=n(_Pe,"A",{href:!0});var Q4t=s(uJ);fyr=r(Q4t,"FlaxBertForPreTraining"),Q4t.forEach(t),myr=r(_Pe," (BERT model)"),_Pe.forEach(t),gyr=i(we),NE=n(we,"LI",{});var bPe=s(NE);X0e=n(bPe,"STRONG",{});var W4t=s(X0e);hyr=r(W4t,"big_bird"),W4t.forEach(t),pyr=r(bPe," \u2014 "),_J=n(bPe,"A",{href:!0});var H4t=s(_J);uyr=r(H4t,"FlaxBigBirdForPreTraining"),H4t.forEach(t),_yr=r(bPe," (BigBird model)"),bPe.forEach(t),byr=i(we),jE=n(we,"LI",{});var vPe=s(jE);z0e=n(vPe,"STRONG",{});var U4t=s(z0e);vyr=r(U4t,"electra"),U4t.forEach(t),Fyr=r(vPe," \u2014 "),bJ=n(vPe,"A",{href:!0});var J4t=s(bJ);Tyr=r(J4t,"FlaxElectraForPreTraining"),J4t.forEach(t),Myr=r(vPe," (ELECTRA model)"),vPe.forEach(t),Eyr=i(we),DE=n(we,"LI",{});var FPe=s(DE);Q0e=n(FPe,"STRONG",{});var Y4t=s(Q0e);Cyr=r(Y4t,"mbart"),Y4t.forEach(t),wyr=r(FPe," \u2014 "),vJ=n(FPe,"A",{href:!0});var K4t=s(vJ);Ayr=r(K4t,"FlaxMBartForConditionalGeneration"),K4t.forEach(t),yyr=r(FPe," (mBART model)"),FPe.forEach(t),Lyr=i(we),GE=n(we,"LI",{});var TPe=s(GE);W0e=n(TPe,"STRONG",{});var Z4t=s(W0e);xyr=r(Z4t,"mt5"),Z4t.forEach(t),$yr=r(TPe," \u2014 "),FJ=n(TPe,"A",{href:!0});var eEt=s(FJ);kyr=r(eEt,"FlaxMT5ForConditionalGeneration"),eEt.forEach(t),Syr=r(TPe," (mT5 model)"),TPe.forEach(t),Ryr=i(we),OE=n(we,"LI",{});var MPe=s(OE);H0e=n(MPe,"STRONG",{});var oEt=s(H0e);Pyr=r(oEt,"roberta"),oEt.forEach(t),Byr=r(MPe," \u2014 "),TJ=n(MPe,"A",{href:!0});var rEt=s(TJ);Iyr=r(rEt,"FlaxRobertaForMaskedLM"),rEt.forEach(t),qyr=r(MPe," (RoBERTa model)"),MPe.forEach(t),Nyr=i(we),VE=n(we,"LI",{});var EPe=s(VE);U0e=n(EPe,"STRONG",{});var tEt=s(U0e);jyr=r(tEt,"roformer"),tEt.forEach(t),Dyr=r(EPe," \u2014 "),MJ=n(EPe,"A",{href:!0});var aEt=s(MJ);Gyr=r(aEt,"FlaxRoFormerForMaskedLM"),aEt.forEach(t),Oyr=r(EPe," (RoFormer model)"),EPe.forEach(t),Vyr=i(we),XE=n(we,"LI",{});var CPe=s(XE);J0e=n(CPe,"STRONG",{});var nEt=s(J0e);Xyr=r(nEt,"t5"),nEt.forEach(t),zyr=r(CPe," \u2014 "),EJ=n(CPe,"A",{href:!0});var sEt=s(EJ);Qyr=r(sEt,"FlaxT5ForConditionalGeneration"),sEt.forEach(t),Wyr=r(CPe," (T5 model)"),CPe.forEach(t),Hyr=i(we),zE=n(we,"LI",{});var wPe=s(zE);Y0e=n(wPe,"STRONG",{});var lEt=s(Y0e);Uyr=r(lEt,"wav2vec2"),lEt.forEach(t),Jyr=r(wPe," \u2014 "),CJ=n(wPe,"A",{href:!0});var iEt=s(CJ);Yyr=r(iEt,"FlaxWav2Vec2ForPreTraining"),iEt.forEach(t),Kyr=r(wPe," (Wav2Vec2 model)"),wPe.forEach(t),Zyr=i(we),QE=n(we,"LI",{});var APe=s(QE);K0e=n(APe,"STRONG",{});var dEt=s(K0e);eLr=r(dEt,"xlm-roberta"),dEt.forEach(t),oLr=r(APe," \u2014 "),wJ=n(APe,"A",{href:!0});var cEt=s(wJ);rLr=r(cEt,"FlaxXLMRobertaForMaskedLM"),cEt.forEach(t),tLr=r(APe," (XLM-RoBERTa model)"),APe.forEach(t),we.forEach(t),aLr=i(Vl),T(WE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),_qe=i(f),Ic=n(f,"H2",{class:!0});var Cje=s(Ic);HE=n(Cje,"A",{id:!0,class:!0,href:!0});var fEt=s(HE);Z0e=n(fEt,"SPAN",{});var mEt=s(Z0e);T(lx.$$.fragment,mEt),mEt.forEach(t),fEt.forEach(t),nLr=i(Cje),eTe=n(Cje,"SPAN",{});var gEt=s(eTe);sLr=r(gEt,"FlaxAutoModelForMaskedLM"),gEt.forEach(t),Cje.forEach(t),bqe=i(f),hr=n(f,"DIV",{class:!0});var Xl=s(hr);T(ix.$$.fragment,Xl),lLr=i(Xl),qc=n(Xl,"P",{});var RZ=s(qc);iLr=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AJ=n(RZ,"A",{href:!0});var hEt=s(AJ);dLr=r(hEt,"from_pretrained()"),hEt.forEach(t),cLr=r(RZ," class method or the "),yJ=n(RZ,"A",{href:!0});var pEt=s(yJ);fLr=r(pEt,"from_config()"),pEt.forEach(t),mLr=r(RZ,` class
method.`),RZ.forEach(t),gLr=i(Xl),dx=n(Xl,"P",{});var wje=s(dx);hLr=r(wje,"This class cannot be instantiated directly using "),oTe=n(wje,"CODE",{});var uEt=s(oTe);pLr=r(uEt,"__init__()"),uEt.forEach(t),uLr=r(wje," (throws an error)."),wje.forEach(t),_Lr=i(Xl),Ot=n(Xl,"DIV",{class:!0});var Aw=s(Ot);T(cx.$$.fragment,Aw),bLr=i(Aw),rTe=n(Aw,"P",{});var _Et=s(rTe);vLr=r(_Et,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Et.forEach(t),FLr=i(Aw),Nc=n(Aw,"P",{});var PZ=s(Nc);TLr=r(PZ,`Note:
Loading a model from its configuration file does `),tTe=n(PZ,"STRONG",{});var bEt=s(tTe);MLr=r(bEt,"not"),bEt.forEach(t),ELr=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LJ=n(PZ,"A",{href:!0});var vEt=s(LJ);CLr=r(vEt,"from_pretrained()"),vEt.forEach(t),wLr=r(PZ," to load the model weights."),PZ.forEach(t),ALr=i(Aw),T(UE.$$.fragment,Aw),Aw.forEach(t),yLr=i(Xl),Or=n(Xl,"DIV",{class:!0});var zl=s(Or);T(fx.$$.fragment,zl),LLr=i(zl),aTe=n(zl,"P",{});var FEt=s(aTe);xLr=r(FEt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),FEt.forEach(t),$Lr=i(zl),un=n(zl,"P",{});var yw=s(un);kLr=r(yw,"The model class to instantiate is selected based on the "),nTe=n(yw,"CODE",{});var TEt=s(nTe);SLr=r(TEt,"model_type"),TEt.forEach(t),RLr=r(yw,` property of the config object (either
passed as an argument or loaded from `),sTe=n(yw,"CODE",{});var MEt=s(sTe);PLr=r(MEt,"pretrained_model_name_or_path"),MEt.forEach(t),BLr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=n(yw,"CODE",{});var EEt=s(lTe);ILr=r(EEt,"pretrained_model_name_or_path"),EEt.forEach(t),qLr=r(yw,":"),yw.forEach(t),NLr=i(zl),xe=n(zl,"UL",{});var Be=s(xe);JE=n(Be,"LI",{});var yPe=s(JE);iTe=n(yPe,"STRONG",{});var CEt=s(iTe);jLr=r(CEt,"albert"),CEt.forEach(t),DLr=r(yPe," \u2014 "),xJ=n(yPe,"A",{href:!0});var wEt=s(xJ);GLr=r(wEt,"FlaxAlbertForMaskedLM"),wEt.forEach(t),OLr=r(yPe," (ALBERT model)"),yPe.forEach(t),VLr=i(Be),YE=n(Be,"LI",{});var LPe=s(YE);dTe=n(LPe,"STRONG",{});var AEt=s(dTe);XLr=r(AEt,"bart"),AEt.forEach(t),zLr=r(LPe," \u2014 "),$J=n(LPe,"A",{href:!0});var yEt=s($J);QLr=r(yEt,"FlaxBartForConditionalGeneration"),yEt.forEach(t),WLr=r(LPe," (BART model)"),LPe.forEach(t),HLr=i(Be),KE=n(Be,"LI",{});var xPe=s(KE);cTe=n(xPe,"STRONG",{});var LEt=s(cTe);ULr=r(LEt,"bert"),LEt.forEach(t),JLr=r(xPe," \u2014 "),kJ=n(xPe,"A",{href:!0});var xEt=s(kJ);YLr=r(xEt,"FlaxBertForMaskedLM"),xEt.forEach(t),KLr=r(xPe," (BERT model)"),xPe.forEach(t),ZLr=i(Be),ZE=n(Be,"LI",{});var $Pe=s(ZE);fTe=n($Pe,"STRONG",{});var $Et=s(fTe);exr=r($Et,"big_bird"),$Et.forEach(t),oxr=r($Pe," \u2014 "),SJ=n($Pe,"A",{href:!0});var kEt=s(SJ);rxr=r(kEt,"FlaxBigBirdForMaskedLM"),kEt.forEach(t),txr=r($Pe," (BigBird model)"),$Pe.forEach(t),axr=i(Be),e5=n(Be,"LI",{});var kPe=s(e5);mTe=n(kPe,"STRONG",{});var SEt=s(mTe);nxr=r(SEt,"distilbert"),SEt.forEach(t),sxr=r(kPe," \u2014 "),RJ=n(kPe,"A",{href:!0});var REt=s(RJ);lxr=r(REt,"FlaxDistilBertForMaskedLM"),REt.forEach(t),ixr=r(kPe," (DistilBERT model)"),kPe.forEach(t),dxr=i(Be),o5=n(Be,"LI",{});var SPe=s(o5);gTe=n(SPe,"STRONG",{});var PEt=s(gTe);cxr=r(PEt,"electra"),PEt.forEach(t),fxr=r(SPe," \u2014 "),PJ=n(SPe,"A",{href:!0});var BEt=s(PJ);mxr=r(BEt,"FlaxElectraForMaskedLM"),BEt.forEach(t),gxr=r(SPe," (ELECTRA model)"),SPe.forEach(t),hxr=i(Be),r5=n(Be,"LI",{});var RPe=s(r5);hTe=n(RPe,"STRONG",{});var IEt=s(hTe);pxr=r(IEt,"mbart"),IEt.forEach(t),uxr=r(RPe," \u2014 "),BJ=n(RPe,"A",{href:!0});var qEt=s(BJ);_xr=r(qEt,"FlaxMBartForConditionalGeneration"),qEt.forEach(t),bxr=r(RPe," (mBART model)"),RPe.forEach(t),vxr=i(Be),t5=n(Be,"LI",{});var PPe=s(t5);pTe=n(PPe,"STRONG",{});var NEt=s(pTe);Fxr=r(NEt,"roberta"),NEt.forEach(t),Txr=r(PPe," \u2014 "),IJ=n(PPe,"A",{href:!0});var jEt=s(IJ);Mxr=r(jEt,"FlaxRobertaForMaskedLM"),jEt.forEach(t),Exr=r(PPe," (RoBERTa model)"),PPe.forEach(t),Cxr=i(Be),a5=n(Be,"LI",{});var BPe=s(a5);uTe=n(BPe,"STRONG",{});var DEt=s(uTe);wxr=r(DEt,"roformer"),DEt.forEach(t),Axr=r(BPe," \u2014 "),qJ=n(BPe,"A",{href:!0});var GEt=s(qJ);yxr=r(GEt,"FlaxRoFormerForMaskedLM"),GEt.forEach(t),Lxr=r(BPe," (RoFormer model)"),BPe.forEach(t),xxr=i(Be),n5=n(Be,"LI",{});var IPe=s(n5);_Te=n(IPe,"STRONG",{});var OEt=s(_Te);$xr=r(OEt,"xlm-roberta"),OEt.forEach(t),kxr=r(IPe," \u2014 "),NJ=n(IPe,"A",{href:!0});var VEt=s(NJ);Sxr=r(VEt,"FlaxXLMRobertaForMaskedLM"),VEt.forEach(t),Rxr=r(IPe," (XLM-RoBERTa model)"),IPe.forEach(t),Be.forEach(t),Pxr=i(zl),T(s5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),vqe=i(f),jc=n(f,"H2",{class:!0});var Aje=s(jc);l5=n(Aje,"A",{id:!0,class:!0,href:!0});var XEt=s(l5);bTe=n(XEt,"SPAN",{});var zEt=s(bTe);T(mx.$$.fragment,zEt),zEt.forEach(t),XEt.forEach(t),Bxr=i(Aje),vTe=n(Aje,"SPAN",{});var QEt=s(vTe);Ixr=r(QEt,"FlaxAutoModelForSeq2SeqLM"),QEt.forEach(t),Aje.forEach(t),Fqe=i(f),pr=n(f,"DIV",{class:!0});var Ql=s(pr);T(gx.$$.fragment,Ql),qxr=i(Ql),Dc=n(Ql,"P",{});var BZ=s(Dc);Nxr=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jJ=n(BZ,"A",{href:!0});var WEt=s(jJ);jxr=r(WEt,"from_pretrained()"),WEt.forEach(t),Dxr=r(BZ," class method or the "),DJ=n(BZ,"A",{href:!0});var HEt=s(DJ);Gxr=r(HEt,"from_config()"),HEt.forEach(t),Oxr=r(BZ,` class
method.`),BZ.forEach(t),Vxr=i(Ql),hx=n(Ql,"P",{});var yje=s(hx);Xxr=r(yje,"This class cannot be instantiated directly using "),FTe=n(yje,"CODE",{});var UEt=s(FTe);zxr=r(UEt,"__init__()"),UEt.forEach(t),Qxr=r(yje," (throws an error)."),yje.forEach(t),Wxr=i(Ql),Vt=n(Ql,"DIV",{class:!0});var Lw=s(Vt);T(px.$$.fragment,Lw),Hxr=i(Lw),TTe=n(Lw,"P",{});var JEt=s(TTe);Uxr=r(JEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JEt.forEach(t),Jxr=i(Lw),Gc=n(Lw,"P",{});var IZ=s(Gc);Yxr=r(IZ,`Note:
Loading a model from its configuration file does `),MTe=n(IZ,"STRONG",{});var YEt=s(MTe);Kxr=r(YEt,"not"),YEt.forEach(t),Zxr=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(IZ,"A",{href:!0});var KEt=s(GJ);e9r=r(KEt,"from_pretrained()"),KEt.forEach(t),o9r=r(IZ," to load the model weights."),IZ.forEach(t),r9r=i(Lw),T(i5.$$.fragment,Lw),Lw.forEach(t),t9r=i(Ql),Vr=n(Ql,"DIV",{class:!0});var Wl=s(Vr);T(ux.$$.fragment,Wl),a9r=i(Wl),ETe=n(Wl,"P",{});var ZEt=s(ETe);n9r=r(ZEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ZEt.forEach(t),s9r=i(Wl),_n=n(Wl,"P",{});var xw=s(_n);l9r=r(xw,"The model class to instantiate is selected based on the "),CTe=n(xw,"CODE",{});var e5t=s(CTe);i9r=r(e5t,"model_type"),e5t.forEach(t),d9r=r(xw,` property of the config object (either
passed as an argument or loaded from `),wTe=n(xw,"CODE",{});var o5t=s(wTe);c9r=r(o5t,"pretrained_model_name_or_path"),o5t.forEach(t),f9r=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ATe=n(xw,"CODE",{});var r5t=s(ATe);m9r=r(r5t,"pretrained_model_name_or_path"),r5t.forEach(t),g9r=r(xw,":"),xw.forEach(t),h9r=i(Wl),Se=n(Wl,"UL",{});var Ve=s(Se);d5=n(Ve,"LI",{});var qPe=s(d5);yTe=n(qPe,"STRONG",{});var t5t=s(yTe);p9r=r(t5t,"bart"),t5t.forEach(t),u9r=r(qPe," \u2014 "),OJ=n(qPe,"A",{href:!0});var a5t=s(OJ);_9r=r(a5t,"FlaxBartForConditionalGeneration"),a5t.forEach(t),b9r=r(qPe," (BART model)"),qPe.forEach(t),v9r=i(Ve),c5=n(Ve,"LI",{});var NPe=s(c5);LTe=n(NPe,"STRONG",{});var n5t=s(LTe);F9r=r(n5t,"blenderbot"),n5t.forEach(t),T9r=r(NPe," \u2014 "),VJ=n(NPe,"A",{href:!0});var s5t=s(VJ);M9r=r(s5t,"FlaxBlenderbotForConditionalGeneration"),s5t.forEach(t),E9r=r(NPe," (Blenderbot model)"),NPe.forEach(t),C9r=i(Ve),f5=n(Ve,"LI",{});var jPe=s(f5);xTe=n(jPe,"STRONG",{});var l5t=s(xTe);w9r=r(l5t,"blenderbot-small"),l5t.forEach(t),A9r=r(jPe," \u2014 "),XJ=n(jPe,"A",{href:!0});var i5t=s(XJ);y9r=r(i5t,"FlaxBlenderbotSmallForConditionalGeneration"),i5t.forEach(t),L9r=r(jPe," (BlenderbotSmall model)"),jPe.forEach(t),x9r=i(Ve),m5=n(Ve,"LI",{});var DPe=s(m5);$Te=n(DPe,"STRONG",{});var d5t=s($Te);$9r=r(d5t,"encoder-decoder"),d5t.forEach(t),k9r=r(DPe," \u2014 "),zJ=n(DPe,"A",{href:!0});var c5t=s(zJ);S9r=r(c5t,"FlaxEncoderDecoderModel"),c5t.forEach(t),R9r=r(DPe," (Encoder decoder model)"),DPe.forEach(t),P9r=i(Ve),g5=n(Ve,"LI",{});var GPe=s(g5);kTe=n(GPe,"STRONG",{});var f5t=s(kTe);B9r=r(f5t,"marian"),f5t.forEach(t),I9r=r(GPe," \u2014 "),QJ=n(GPe,"A",{href:!0});var m5t=s(QJ);q9r=r(m5t,"FlaxMarianMTModel"),m5t.forEach(t),N9r=r(GPe," (Marian model)"),GPe.forEach(t),j9r=i(Ve),h5=n(Ve,"LI",{});var OPe=s(h5);STe=n(OPe,"STRONG",{});var g5t=s(STe);D9r=r(g5t,"mbart"),g5t.forEach(t),G9r=r(OPe," \u2014 "),WJ=n(OPe,"A",{href:!0});var h5t=s(WJ);O9r=r(h5t,"FlaxMBartForConditionalGeneration"),h5t.forEach(t),V9r=r(OPe," (mBART model)"),OPe.forEach(t),X9r=i(Ve),p5=n(Ve,"LI",{});var VPe=s(p5);RTe=n(VPe,"STRONG",{});var p5t=s(RTe);z9r=r(p5t,"mt5"),p5t.forEach(t),Q9r=r(VPe," \u2014 "),HJ=n(VPe,"A",{href:!0});var u5t=s(HJ);W9r=r(u5t,"FlaxMT5ForConditionalGeneration"),u5t.forEach(t),H9r=r(VPe," (mT5 model)"),VPe.forEach(t),U9r=i(Ve),u5=n(Ve,"LI",{});var XPe=s(u5);PTe=n(XPe,"STRONG",{});var _5t=s(PTe);J9r=r(_5t,"pegasus"),_5t.forEach(t),Y9r=r(XPe," \u2014 "),UJ=n(XPe,"A",{href:!0});var b5t=s(UJ);K9r=r(b5t,"FlaxPegasusForConditionalGeneration"),b5t.forEach(t),Z9r=r(XPe," (Pegasus model)"),XPe.forEach(t),e$r=i(Ve),_5=n(Ve,"LI",{});var zPe=s(_5);BTe=n(zPe,"STRONG",{});var v5t=s(BTe);o$r=r(v5t,"t5"),v5t.forEach(t),r$r=r(zPe," \u2014 "),JJ=n(zPe,"A",{href:!0});var F5t=s(JJ);t$r=r(F5t,"FlaxT5ForConditionalGeneration"),F5t.forEach(t),a$r=r(zPe," (T5 model)"),zPe.forEach(t),Ve.forEach(t),n$r=i(Wl),T(b5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Tqe=i(f),Oc=n(f,"H2",{class:!0});var Lje=s(Oc);v5=n(Lje,"A",{id:!0,class:!0,href:!0});var T5t=s(v5);ITe=n(T5t,"SPAN",{});var M5t=s(ITe);T(_x.$$.fragment,M5t),M5t.forEach(t),T5t.forEach(t),s$r=i(Lje),qTe=n(Lje,"SPAN",{});var E5t=s(qTe);l$r=r(E5t,"FlaxAutoModelForSequenceClassification"),E5t.forEach(t),Lje.forEach(t),Mqe=i(f),ur=n(f,"DIV",{class:!0});var Hl=s(ur);T(bx.$$.fragment,Hl),i$r=i(Hl),Vc=n(Hl,"P",{});var qZ=s(Vc);d$r=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YJ=n(qZ,"A",{href:!0});var C5t=s(YJ);c$r=r(C5t,"from_pretrained()"),C5t.forEach(t),f$r=r(qZ," class method or the "),KJ=n(qZ,"A",{href:!0});var w5t=s(KJ);m$r=r(w5t,"from_config()"),w5t.forEach(t),g$r=r(qZ,` class
method.`),qZ.forEach(t),h$r=i(Hl),vx=n(Hl,"P",{});var xje=s(vx);p$r=r(xje,"This class cannot be instantiated directly using "),NTe=n(xje,"CODE",{});var A5t=s(NTe);u$r=r(A5t,"__init__()"),A5t.forEach(t),_$r=r(xje," (throws an error)."),xje.forEach(t),b$r=i(Hl),Xt=n(Hl,"DIV",{class:!0});var $w=s(Xt);T(Fx.$$.fragment,$w),v$r=i($w),jTe=n($w,"P",{});var y5t=s(jTe);F$r=r(y5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),y5t.forEach(t),T$r=i($w),Xc=n($w,"P",{});var NZ=s(Xc);M$r=r(NZ,`Note:
Loading a model from its configuration file does `),DTe=n(NZ,"STRONG",{});var L5t=s(DTe);E$r=r(L5t,"not"),L5t.forEach(t),C$r=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=n(NZ,"A",{href:!0});var x5t=s(ZJ);w$r=r(x5t,"from_pretrained()"),x5t.forEach(t),A$r=r(NZ," to load the model weights."),NZ.forEach(t),y$r=i($w),T(F5.$$.fragment,$w),$w.forEach(t),L$r=i(Hl),Xr=n(Hl,"DIV",{class:!0});var Ul=s(Xr);T(Tx.$$.fragment,Ul),x$r=i(Ul),GTe=n(Ul,"P",{});var $5t=s(GTe);$$r=r($5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$5t.forEach(t),k$r=i(Ul),bn=n(Ul,"P",{});var kw=s(bn);S$r=r(kw,"The model class to instantiate is selected based on the "),OTe=n(kw,"CODE",{});var k5t=s(OTe);R$r=r(k5t,"model_type"),k5t.forEach(t),P$r=r(kw,` property of the config object (either
passed as an argument or loaded from `),VTe=n(kw,"CODE",{});var S5t=s(VTe);B$r=r(S5t,"pretrained_model_name_or_path"),S5t.forEach(t),I$r=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=n(kw,"CODE",{});var R5t=s(XTe);q$r=r(R5t,"pretrained_model_name_or_path"),R5t.forEach(t),N$r=r(kw,":"),kw.forEach(t),j$r=i(Ul),$e=n(Ul,"UL",{});var Ie=s($e);T5=n(Ie,"LI",{});var QPe=s(T5);zTe=n(QPe,"STRONG",{});var P5t=s(zTe);D$r=r(P5t,"albert"),P5t.forEach(t),G$r=r(QPe," \u2014 "),eY=n(QPe,"A",{href:!0});var B5t=s(eY);O$r=r(B5t,"FlaxAlbertForSequenceClassification"),B5t.forEach(t),V$r=r(QPe," (ALBERT model)"),QPe.forEach(t),X$r=i(Ie),M5=n(Ie,"LI",{});var WPe=s(M5);QTe=n(WPe,"STRONG",{});var I5t=s(QTe);z$r=r(I5t,"bart"),I5t.forEach(t),Q$r=r(WPe," \u2014 "),oY=n(WPe,"A",{href:!0});var q5t=s(oY);W$r=r(q5t,"FlaxBartForSequenceClassification"),q5t.forEach(t),H$r=r(WPe," (BART model)"),WPe.forEach(t),U$r=i(Ie),E5=n(Ie,"LI",{});var HPe=s(E5);WTe=n(HPe,"STRONG",{});var N5t=s(WTe);J$r=r(N5t,"bert"),N5t.forEach(t),Y$r=r(HPe," \u2014 "),rY=n(HPe,"A",{href:!0});var j5t=s(rY);K$r=r(j5t,"FlaxBertForSequenceClassification"),j5t.forEach(t),Z$r=r(HPe," (BERT model)"),HPe.forEach(t),ekr=i(Ie),C5=n(Ie,"LI",{});var UPe=s(C5);HTe=n(UPe,"STRONG",{});var D5t=s(HTe);okr=r(D5t,"big_bird"),D5t.forEach(t),rkr=r(UPe," \u2014 "),tY=n(UPe,"A",{href:!0});var G5t=s(tY);tkr=r(G5t,"FlaxBigBirdForSequenceClassification"),G5t.forEach(t),akr=r(UPe," (BigBird model)"),UPe.forEach(t),nkr=i(Ie),w5=n(Ie,"LI",{});var JPe=s(w5);UTe=n(JPe,"STRONG",{});var O5t=s(UTe);skr=r(O5t,"distilbert"),O5t.forEach(t),lkr=r(JPe," \u2014 "),aY=n(JPe,"A",{href:!0});var V5t=s(aY);ikr=r(V5t,"FlaxDistilBertForSequenceClassification"),V5t.forEach(t),dkr=r(JPe," (DistilBERT model)"),JPe.forEach(t),ckr=i(Ie),A5=n(Ie,"LI",{});var YPe=s(A5);JTe=n(YPe,"STRONG",{});var X5t=s(JTe);fkr=r(X5t,"electra"),X5t.forEach(t),mkr=r(YPe," \u2014 "),nY=n(YPe,"A",{href:!0});var z5t=s(nY);gkr=r(z5t,"FlaxElectraForSequenceClassification"),z5t.forEach(t),hkr=r(YPe," (ELECTRA model)"),YPe.forEach(t),pkr=i(Ie),y5=n(Ie,"LI",{});var KPe=s(y5);YTe=n(KPe,"STRONG",{});var Q5t=s(YTe);ukr=r(Q5t,"mbart"),Q5t.forEach(t),_kr=r(KPe," \u2014 "),sY=n(KPe,"A",{href:!0});var W5t=s(sY);bkr=r(W5t,"FlaxMBartForSequenceClassification"),W5t.forEach(t),vkr=r(KPe," (mBART model)"),KPe.forEach(t),Fkr=i(Ie),L5=n(Ie,"LI",{});var ZPe=s(L5);KTe=n(ZPe,"STRONG",{});var H5t=s(KTe);Tkr=r(H5t,"roberta"),H5t.forEach(t),Mkr=r(ZPe," \u2014 "),lY=n(ZPe,"A",{href:!0});var U5t=s(lY);Ekr=r(U5t,"FlaxRobertaForSequenceClassification"),U5t.forEach(t),Ckr=r(ZPe," (RoBERTa model)"),ZPe.forEach(t),wkr=i(Ie),x5=n(Ie,"LI",{});var eBe=s(x5);ZTe=n(eBe,"STRONG",{});var J5t=s(ZTe);Akr=r(J5t,"roformer"),J5t.forEach(t),ykr=r(eBe," \u2014 "),iY=n(eBe,"A",{href:!0});var Y5t=s(iY);Lkr=r(Y5t,"FlaxRoFormerForSequenceClassification"),Y5t.forEach(t),xkr=r(eBe," (RoFormer model)"),eBe.forEach(t),$kr=i(Ie),$5=n(Ie,"LI",{});var oBe=s($5);e7e=n(oBe,"STRONG",{});var K5t=s(e7e);kkr=r(K5t,"xlm-roberta"),K5t.forEach(t),Skr=r(oBe," \u2014 "),dY=n(oBe,"A",{href:!0});var Z5t=s(dY);Rkr=r(Z5t,"FlaxXLMRobertaForSequenceClassification"),Z5t.forEach(t),Pkr=r(oBe," (XLM-RoBERTa model)"),oBe.forEach(t),Ie.forEach(t),Bkr=i(Ul),T(k5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),Eqe=i(f),zc=n(f,"H2",{class:!0});var $je=s(zc);S5=n($je,"A",{id:!0,class:!0,href:!0});var eCt=s(S5);o7e=n(eCt,"SPAN",{});var oCt=s(o7e);T(Mx.$$.fragment,oCt),oCt.forEach(t),eCt.forEach(t),Ikr=i($je),r7e=n($je,"SPAN",{});var rCt=s(r7e);qkr=r(rCt,"FlaxAutoModelForQuestionAnswering"),rCt.forEach(t),$je.forEach(t),Cqe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(Ex.$$.fragment,Jl),Nkr=i(Jl),Qc=n(Jl,"P",{});var jZ=s(Qc);jkr=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cY=n(jZ,"A",{href:!0});var tCt=s(cY);Dkr=r(tCt,"from_pretrained()"),tCt.forEach(t),Gkr=r(jZ," class method or the "),fY=n(jZ,"A",{href:!0});var aCt=s(fY);Okr=r(aCt,"from_config()"),aCt.forEach(t),Vkr=r(jZ,` class
method.`),jZ.forEach(t),Xkr=i(Jl),Cx=n(Jl,"P",{});var kje=s(Cx);zkr=r(kje,"This class cannot be instantiated directly using "),t7e=n(kje,"CODE",{});var nCt=s(t7e);Qkr=r(nCt,"__init__()"),nCt.forEach(t),Wkr=r(kje," (throws an error)."),kje.forEach(t),Hkr=i(Jl),zt=n(Jl,"DIV",{class:!0});var Sw=s(zt);T(wx.$$.fragment,Sw),Ukr=i(Sw),a7e=n(Sw,"P",{});var sCt=s(a7e);Jkr=r(sCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sCt.forEach(t),Ykr=i(Sw),Wc=n(Sw,"P",{});var DZ=s(Wc);Kkr=r(DZ,`Note:
Loading a model from its configuration file does `),n7e=n(DZ,"STRONG",{});var lCt=s(n7e);Zkr=r(lCt,"not"),lCt.forEach(t),eSr=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=n(DZ,"A",{href:!0});var iCt=s(mY);oSr=r(iCt,"from_pretrained()"),iCt.forEach(t),rSr=r(DZ," to load the model weights."),DZ.forEach(t),tSr=i(Sw),T(R5.$$.fragment,Sw),Sw.forEach(t),aSr=i(Jl),zr=n(Jl,"DIV",{class:!0});var Yl=s(zr);T(Ax.$$.fragment,Yl),nSr=i(Yl),s7e=n(Yl,"P",{});var dCt=s(s7e);sSr=r(dCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),dCt.forEach(t),lSr=i(Yl),vn=n(Yl,"P",{});var Rw=s(vn);iSr=r(Rw,"The model class to instantiate is selected based on the "),l7e=n(Rw,"CODE",{});var cCt=s(l7e);dSr=r(cCt,"model_type"),cCt.forEach(t),cSr=r(Rw,` property of the config object (either
passed as an argument or loaded from `),i7e=n(Rw,"CODE",{});var fCt=s(i7e);fSr=r(fCt,"pretrained_model_name_or_path"),fCt.forEach(t),mSr=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d7e=n(Rw,"CODE",{});var mCt=s(d7e);gSr=r(mCt,"pretrained_model_name_or_path"),mCt.forEach(t),hSr=r(Rw,":"),Rw.forEach(t),pSr=i(Yl),ke=n(Yl,"UL",{});var qe=s(ke);P5=n(qe,"LI",{});var rBe=s(P5);c7e=n(rBe,"STRONG",{});var gCt=s(c7e);uSr=r(gCt,"albert"),gCt.forEach(t),_Sr=r(rBe," \u2014 "),gY=n(rBe,"A",{href:!0});var hCt=s(gY);bSr=r(hCt,"FlaxAlbertForQuestionAnswering"),hCt.forEach(t),vSr=r(rBe," (ALBERT model)"),rBe.forEach(t),FSr=i(qe),B5=n(qe,"LI",{});var tBe=s(B5);f7e=n(tBe,"STRONG",{});var pCt=s(f7e);TSr=r(pCt,"bart"),pCt.forEach(t),MSr=r(tBe," \u2014 "),hY=n(tBe,"A",{href:!0});var uCt=s(hY);ESr=r(uCt,"FlaxBartForQuestionAnswering"),uCt.forEach(t),CSr=r(tBe," (BART model)"),tBe.forEach(t),wSr=i(qe),I5=n(qe,"LI",{});var aBe=s(I5);m7e=n(aBe,"STRONG",{});var _Ct=s(m7e);ASr=r(_Ct,"bert"),_Ct.forEach(t),ySr=r(aBe," \u2014 "),pY=n(aBe,"A",{href:!0});var bCt=s(pY);LSr=r(bCt,"FlaxBertForQuestionAnswering"),bCt.forEach(t),xSr=r(aBe," (BERT model)"),aBe.forEach(t),$Sr=i(qe),q5=n(qe,"LI",{});var nBe=s(q5);g7e=n(nBe,"STRONG",{});var vCt=s(g7e);kSr=r(vCt,"big_bird"),vCt.forEach(t),SSr=r(nBe," \u2014 "),uY=n(nBe,"A",{href:!0});var FCt=s(uY);RSr=r(FCt,"FlaxBigBirdForQuestionAnswering"),FCt.forEach(t),PSr=r(nBe," (BigBird model)"),nBe.forEach(t),BSr=i(qe),N5=n(qe,"LI",{});var sBe=s(N5);h7e=n(sBe,"STRONG",{});var TCt=s(h7e);ISr=r(TCt,"distilbert"),TCt.forEach(t),qSr=r(sBe," \u2014 "),_Y=n(sBe,"A",{href:!0});var MCt=s(_Y);NSr=r(MCt,"FlaxDistilBertForQuestionAnswering"),MCt.forEach(t),jSr=r(sBe," (DistilBERT model)"),sBe.forEach(t),DSr=i(qe),j5=n(qe,"LI",{});var lBe=s(j5);p7e=n(lBe,"STRONG",{});var ECt=s(p7e);GSr=r(ECt,"electra"),ECt.forEach(t),OSr=r(lBe," \u2014 "),bY=n(lBe,"A",{href:!0});var CCt=s(bY);VSr=r(CCt,"FlaxElectraForQuestionAnswering"),CCt.forEach(t),XSr=r(lBe," (ELECTRA model)"),lBe.forEach(t),zSr=i(qe),D5=n(qe,"LI",{});var iBe=s(D5);u7e=n(iBe,"STRONG",{});var wCt=s(u7e);QSr=r(wCt,"mbart"),wCt.forEach(t),WSr=r(iBe," \u2014 "),vY=n(iBe,"A",{href:!0});var ACt=s(vY);HSr=r(ACt,"FlaxMBartForQuestionAnswering"),ACt.forEach(t),USr=r(iBe," (mBART model)"),iBe.forEach(t),JSr=i(qe),G5=n(qe,"LI",{});var dBe=s(G5);_7e=n(dBe,"STRONG",{});var yCt=s(_7e);YSr=r(yCt,"roberta"),yCt.forEach(t),KSr=r(dBe," \u2014 "),FY=n(dBe,"A",{href:!0});var LCt=s(FY);ZSr=r(LCt,"FlaxRobertaForQuestionAnswering"),LCt.forEach(t),eRr=r(dBe," (RoBERTa model)"),dBe.forEach(t),oRr=i(qe),O5=n(qe,"LI",{});var cBe=s(O5);b7e=n(cBe,"STRONG",{});var xCt=s(b7e);rRr=r(xCt,"roformer"),xCt.forEach(t),tRr=r(cBe," \u2014 "),TY=n(cBe,"A",{href:!0});var $Ct=s(TY);aRr=r($Ct,"FlaxRoFormerForQuestionAnswering"),$Ct.forEach(t),nRr=r(cBe," (RoFormer model)"),cBe.forEach(t),sRr=i(qe),V5=n(qe,"LI",{});var fBe=s(V5);v7e=n(fBe,"STRONG",{});var kCt=s(v7e);lRr=r(kCt,"xlm-roberta"),kCt.forEach(t),iRr=r(fBe," \u2014 "),MY=n(fBe,"A",{href:!0});var SCt=s(MY);dRr=r(SCt,"FlaxXLMRobertaForQuestionAnswering"),SCt.forEach(t),cRr=r(fBe," (XLM-RoBERTa model)"),fBe.forEach(t),qe.forEach(t),fRr=i(Yl),T(X5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),wqe=i(f),Hc=n(f,"H2",{class:!0});var Sje=s(Hc);z5=n(Sje,"A",{id:!0,class:!0,href:!0});var RCt=s(z5);F7e=n(RCt,"SPAN",{});var PCt=s(F7e);T(yx.$$.fragment,PCt),PCt.forEach(t),RCt.forEach(t),mRr=i(Sje),T7e=n(Sje,"SPAN",{});var BCt=s(T7e);gRr=r(BCt,"FlaxAutoModelForTokenClassification"),BCt.forEach(t),Sje.forEach(t),Aqe=i(f),br=n(f,"DIV",{class:!0});var Kl=s(br);T(Lx.$$.fragment,Kl),hRr=i(Kl),Uc=n(Kl,"P",{});var GZ=s(Uc);pRr=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),EY=n(GZ,"A",{href:!0});var ICt=s(EY);uRr=r(ICt,"from_pretrained()"),ICt.forEach(t),_Rr=r(GZ," class method or the "),CY=n(GZ,"A",{href:!0});var qCt=s(CY);bRr=r(qCt,"from_config()"),qCt.forEach(t),vRr=r(GZ,` class
method.`),GZ.forEach(t),FRr=i(Kl),xx=n(Kl,"P",{});var Rje=s(xx);TRr=r(Rje,"This class cannot be instantiated directly using "),M7e=n(Rje,"CODE",{});var NCt=s(M7e);MRr=r(NCt,"__init__()"),NCt.forEach(t),ERr=r(Rje," (throws an error)."),Rje.forEach(t),CRr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var Pw=s(Qt);T($x.$$.fragment,Pw),wRr=i(Pw),E7e=n(Pw,"P",{});var jCt=s(E7e);ARr=r(jCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jCt.forEach(t),yRr=i(Pw),Jc=n(Pw,"P",{});var OZ=s(Jc);LRr=r(OZ,`Note:
Loading a model from its configuration file does `),C7e=n(OZ,"STRONG",{});var DCt=s(C7e);xRr=r(DCt,"not"),DCt.forEach(t),$Rr=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(OZ,"A",{href:!0});var GCt=s(wY);kRr=r(GCt,"from_pretrained()"),GCt.forEach(t),SRr=r(OZ," to load the model weights."),OZ.forEach(t),RRr=i(Pw),T(Q5.$$.fragment,Pw),Pw.forEach(t),PRr=i(Kl),Qr=n(Kl,"DIV",{class:!0});var Zl=s(Qr);T(kx.$$.fragment,Zl),BRr=i(Zl),w7e=n(Zl,"P",{});var OCt=s(w7e);IRr=r(OCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),OCt.forEach(t),qRr=i(Zl),Fn=n(Zl,"P",{});var Bw=s(Fn);NRr=r(Bw,"The model class to instantiate is selected based on the "),A7e=n(Bw,"CODE",{});var VCt=s(A7e);jRr=r(VCt,"model_type"),VCt.forEach(t),DRr=r(Bw,` property of the config object (either
passed as an argument or loaded from `),y7e=n(Bw,"CODE",{});var XCt=s(y7e);GRr=r(XCt,"pretrained_model_name_or_path"),XCt.forEach(t),ORr=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L7e=n(Bw,"CODE",{});var zCt=s(L7e);VRr=r(zCt,"pretrained_model_name_or_path"),zCt.forEach(t),XRr=r(Bw,":"),Bw.forEach(t),zRr=i(Zl),Ge=n(Zl,"UL",{});var Fo=s(Ge);W5=n(Fo,"LI",{});var mBe=s(W5);x7e=n(mBe,"STRONG",{});var QCt=s(x7e);QRr=r(QCt,"albert"),QCt.forEach(t),WRr=r(mBe," \u2014 "),AY=n(mBe,"A",{href:!0});var WCt=s(AY);HRr=r(WCt,"FlaxAlbertForTokenClassification"),WCt.forEach(t),URr=r(mBe," (ALBERT model)"),mBe.forEach(t),JRr=i(Fo),H5=n(Fo,"LI",{});var gBe=s(H5);$7e=n(gBe,"STRONG",{});var HCt=s($7e);YRr=r(HCt,"bert"),HCt.forEach(t),KRr=r(gBe," \u2014 "),yY=n(gBe,"A",{href:!0});var UCt=s(yY);ZRr=r(UCt,"FlaxBertForTokenClassification"),UCt.forEach(t),ePr=r(gBe," (BERT model)"),gBe.forEach(t),oPr=i(Fo),U5=n(Fo,"LI",{});var hBe=s(U5);k7e=n(hBe,"STRONG",{});var JCt=s(k7e);rPr=r(JCt,"big_bird"),JCt.forEach(t),tPr=r(hBe," \u2014 "),LY=n(hBe,"A",{href:!0});var YCt=s(LY);aPr=r(YCt,"FlaxBigBirdForTokenClassification"),YCt.forEach(t),nPr=r(hBe," (BigBird model)"),hBe.forEach(t),sPr=i(Fo),J5=n(Fo,"LI",{});var pBe=s(J5);S7e=n(pBe,"STRONG",{});var KCt=s(S7e);lPr=r(KCt,"distilbert"),KCt.forEach(t),iPr=r(pBe," \u2014 "),xY=n(pBe,"A",{href:!0});var ZCt=s(xY);dPr=r(ZCt,"FlaxDistilBertForTokenClassification"),ZCt.forEach(t),cPr=r(pBe," (DistilBERT model)"),pBe.forEach(t),fPr=i(Fo),Y5=n(Fo,"LI",{});var uBe=s(Y5);R7e=n(uBe,"STRONG",{});var e3t=s(R7e);mPr=r(e3t,"electra"),e3t.forEach(t),gPr=r(uBe," \u2014 "),$Y=n(uBe,"A",{href:!0});var o3t=s($Y);hPr=r(o3t,"FlaxElectraForTokenClassification"),o3t.forEach(t),pPr=r(uBe," (ELECTRA model)"),uBe.forEach(t),uPr=i(Fo),K5=n(Fo,"LI",{});var _Be=s(K5);P7e=n(_Be,"STRONG",{});var r3t=s(P7e);_Pr=r(r3t,"roberta"),r3t.forEach(t),bPr=r(_Be," \u2014 "),kY=n(_Be,"A",{href:!0});var t3t=s(kY);vPr=r(t3t,"FlaxRobertaForTokenClassification"),t3t.forEach(t),FPr=r(_Be," (RoBERTa model)"),_Be.forEach(t),TPr=i(Fo),Z5=n(Fo,"LI",{});var bBe=s(Z5);B7e=n(bBe,"STRONG",{});var a3t=s(B7e);MPr=r(a3t,"roformer"),a3t.forEach(t),EPr=r(bBe," \u2014 "),SY=n(bBe,"A",{href:!0});var n3t=s(SY);CPr=r(n3t,"FlaxRoFormerForTokenClassification"),n3t.forEach(t),wPr=r(bBe," (RoFormer model)"),bBe.forEach(t),APr=i(Fo),eC=n(Fo,"LI",{});var vBe=s(eC);I7e=n(vBe,"STRONG",{});var s3t=s(I7e);yPr=r(s3t,"xlm-roberta"),s3t.forEach(t),LPr=r(vBe," \u2014 "),RY=n(vBe,"A",{href:!0});var l3t=s(RY);xPr=r(l3t,"FlaxXLMRobertaForTokenClassification"),l3t.forEach(t),$Pr=r(vBe," (XLM-RoBERTa model)"),vBe.forEach(t),Fo.forEach(t),kPr=i(Zl),T(oC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),yqe=i(f),Yc=n(f,"H2",{class:!0});var Pje=s(Yc);rC=n(Pje,"A",{id:!0,class:!0,href:!0});var i3t=s(rC);q7e=n(i3t,"SPAN",{});var d3t=s(q7e);T(Sx.$$.fragment,d3t),d3t.forEach(t),i3t.forEach(t),SPr=i(Pje),N7e=n(Pje,"SPAN",{});var c3t=s(N7e);RPr=r(c3t,"FlaxAutoModelForMultipleChoice"),c3t.forEach(t),Pje.forEach(t),Lqe=i(f),vr=n(f,"DIV",{class:!0});var ei=s(vr);T(Rx.$$.fragment,ei),PPr=i(ei),Kc=n(ei,"P",{});var VZ=s(Kc);BPr=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PY=n(VZ,"A",{href:!0});var f3t=s(PY);IPr=r(f3t,"from_pretrained()"),f3t.forEach(t),qPr=r(VZ," class method or the "),BY=n(VZ,"A",{href:!0});var m3t=s(BY);NPr=r(m3t,"from_config()"),m3t.forEach(t),jPr=r(VZ,` class
method.`),VZ.forEach(t),DPr=i(ei),Px=n(ei,"P",{});var Bje=s(Px);GPr=r(Bje,"This class cannot be instantiated directly using "),j7e=n(Bje,"CODE",{});var g3t=s(j7e);OPr=r(g3t,"__init__()"),g3t.forEach(t),VPr=r(Bje," (throws an error)."),Bje.forEach(t),XPr=i(ei),Wt=n(ei,"DIV",{class:!0});var Iw=s(Wt);T(Bx.$$.fragment,Iw),zPr=i(Iw),D7e=n(Iw,"P",{});var h3t=s(D7e);QPr=r(h3t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),h3t.forEach(t),WPr=i(Iw),Zc=n(Iw,"P",{});var XZ=s(Zc);HPr=r(XZ,`Note:
Loading a model from its configuration file does `),G7e=n(XZ,"STRONG",{});var p3t=s(G7e);UPr=r(p3t,"not"),p3t.forEach(t),JPr=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=n(XZ,"A",{href:!0});var u3t=s(IY);YPr=r(u3t,"from_pretrained()"),u3t.forEach(t),KPr=r(XZ," to load the model weights."),XZ.forEach(t),ZPr=i(Iw),T(tC.$$.fragment,Iw),Iw.forEach(t),eBr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(Ix.$$.fragment,oi),oBr=i(oi),O7e=n(oi,"P",{});var _3t=s(O7e);rBr=r(_3t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_3t.forEach(t),tBr=i(oi),Tn=n(oi,"P",{});var qw=s(Tn);aBr=r(qw,"The model class to instantiate is selected based on the "),V7e=n(qw,"CODE",{});var b3t=s(V7e);nBr=r(b3t,"model_type"),b3t.forEach(t),sBr=r(qw,` property of the config object (either
passed as an argument or loaded from `),X7e=n(qw,"CODE",{});var v3t=s(X7e);lBr=r(v3t,"pretrained_model_name_or_path"),v3t.forEach(t),iBr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=n(qw,"CODE",{});var F3t=s(z7e);dBr=r(F3t,"pretrained_model_name_or_path"),F3t.forEach(t),cBr=r(qw,":"),qw.forEach(t),fBr=i(oi),Oe=n(oi,"UL",{});var To=s(Oe);aC=n(To,"LI",{});var FBe=s(aC);Q7e=n(FBe,"STRONG",{});var T3t=s(Q7e);mBr=r(T3t,"albert"),T3t.forEach(t),gBr=r(FBe," \u2014 "),qY=n(FBe,"A",{href:!0});var M3t=s(qY);hBr=r(M3t,"FlaxAlbertForMultipleChoice"),M3t.forEach(t),pBr=r(FBe," (ALBERT model)"),FBe.forEach(t),uBr=i(To),nC=n(To,"LI",{});var TBe=s(nC);W7e=n(TBe,"STRONG",{});var E3t=s(W7e);_Br=r(E3t,"bert"),E3t.forEach(t),bBr=r(TBe," \u2014 "),NY=n(TBe,"A",{href:!0});var C3t=s(NY);vBr=r(C3t,"FlaxBertForMultipleChoice"),C3t.forEach(t),FBr=r(TBe," (BERT model)"),TBe.forEach(t),TBr=i(To),sC=n(To,"LI",{});var MBe=s(sC);H7e=n(MBe,"STRONG",{});var w3t=s(H7e);MBr=r(w3t,"big_bird"),w3t.forEach(t),EBr=r(MBe," \u2014 "),jY=n(MBe,"A",{href:!0});var A3t=s(jY);CBr=r(A3t,"FlaxBigBirdForMultipleChoice"),A3t.forEach(t),wBr=r(MBe," (BigBird model)"),MBe.forEach(t),ABr=i(To),lC=n(To,"LI",{});var EBe=s(lC);U7e=n(EBe,"STRONG",{});var y3t=s(U7e);yBr=r(y3t,"distilbert"),y3t.forEach(t),LBr=r(EBe," \u2014 "),DY=n(EBe,"A",{href:!0});var L3t=s(DY);xBr=r(L3t,"FlaxDistilBertForMultipleChoice"),L3t.forEach(t),$Br=r(EBe," (DistilBERT model)"),EBe.forEach(t),kBr=i(To),iC=n(To,"LI",{});var CBe=s(iC);J7e=n(CBe,"STRONG",{});var x3t=s(J7e);SBr=r(x3t,"electra"),x3t.forEach(t),RBr=r(CBe," \u2014 "),GY=n(CBe,"A",{href:!0});var $3t=s(GY);PBr=r($3t,"FlaxElectraForMultipleChoice"),$3t.forEach(t),BBr=r(CBe," (ELECTRA model)"),CBe.forEach(t),IBr=i(To),dC=n(To,"LI",{});var wBe=s(dC);Y7e=n(wBe,"STRONG",{});var k3t=s(Y7e);qBr=r(k3t,"roberta"),k3t.forEach(t),NBr=r(wBe," \u2014 "),OY=n(wBe,"A",{href:!0});var S3t=s(OY);jBr=r(S3t,"FlaxRobertaForMultipleChoice"),S3t.forEach(t),DBr=r(wBe," (RoBERTa model)"),wBe.forEach(t),GBr=i(To),cC=n(To,"LI",{});var ABe=s(cC);K7e=n(ABe,"STRONG",{});var R3t=s(K7e);OBr=r(R3t,"roformer"),R3t.forEach(t),VBr=r(ABe," \u2014 "),VY=n(ABe,"A",{href:!0});var P3t=s(VY);XBr=r(P3t,"FlaxRoFormerForMultipleChoice"),P3t.forEach(t),zBr=r(ABe," (RoFormer model)"),ABe.forEach(t),QBr=i(To),fC=n(To,"LI",{});var yBe=s(fC);Z7e=n(yBe,"STRONG",{});var B3t=s(Z7e);WBr=r(B3t,"xlm-roberta"),B3t.forEach(t),HBr=r(yBe," \u2014 "),XY=n(yBe,"A",{href:!0});var I3t=s(XY);UBr=r(I3t,"FlaxXLMRobertaForMultipleChoice"),I3t.forEach(t),JBr=r(yBe," (XLM-RoBERTa model)"),yBe.forEach(t),To.forEach(t),YBr=i(oi),T(mC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),xqe=i(f),ef=n(f,"H2",{class:!0});var Ije=s(ef);gC=n(Ije,"A",{id:!0,class:!0,href:!0});var q3t=s(gC);eMe=n(q3t,"SPAN",{});var N3t=s(eMe);T(qx.$$.fragment,N3t),N3t.forEach(t),q3t.forEach(t),KBr=i(Ije),oMe=n(Ije,"SPAN",{});var j3t=s(oMe);ZBr=r(j3t,"FlaxAutoModelForNextSentencePrediction"),j3t.forEach(t),Ije.forEach(t),$qe=i(f),Fr=n(f,"DIV",{class:!0});var ri=s(Fr);T(Nx.$$.fragment,ri),eIr=i(ri),of=n(ri,"P",{});var zZ=s(of);oIr=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zY=n(zZ,"A",{href:!0});var D3t=s(zY);rIr=r(D3t,"from_pretrained()"),D3t.forEach(t),tIr=r(zZ," class method or the "),QY=n(zZ,"A",{href:!0});var G3t=s(QY);aIr=r(G3t,"from_config()"),G3t.forEach(t),nIr=r(zZ,` class
method.`),zZ.forEach(t),sIr=i(ri),jx=n(ri,"P",{});var qje=s(jx);lIr=r(qje,"This class cannot be instantiated directly using "),rMe=n(qje,"CODE",{});var O3t=s(rMe);iIr=r(O3t,"__init__()"),O3t.forEach(t),dIr=r(qje," (throws an error)."),qje.forEach(t),cIr=i(ri),Ht=n(ri,"DIV",{class:!0});var Nw=s(Ht);T(Dx.$$.fragment,Nw),fIr=i(Nw),tMe=n(Nw,"P",{});var V3t=s(tMe);mIr=r(V3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),V3t.forEach(t),gIr=i(Nw),rf=n(Nw,"P",{});var QZ=s(rf);hIr=r(QZ,`Note:
Loading a model from its configuration file does `),aMe=n(QZ,"STRONG",{});var X3t=s(aMe);pIr=r(X3t,"not"),X3t.forEach(t),uIr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=n(QZ,"A",{href:!0});var z3t=s(WY);_Ir=r(z3t,"from_pretrained()"),z3t.forEach(t),bIr=r(QZ," to load the model weights."),QZ.forEach(t),vIr=i(Nw),T(hC.$$.fragment,Nw),Nw.forEach(t),FIr=i(ri),Hr=n(ri,"DIV",{class:!0});var ti=s(Hr);T(Gx.$$.fragment,ti),TIr=i(ti),nMe=n(ti,"P",{});var Q3t=s(nMe);MIr=r(Q3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Q3t.forEach(t),EIr=i(ti),Mn=n(ti,"P",{});var jw=s(Mn);CIr=r(jw,"The model class to instantiate is selected based on the "),sMe=n(jw,"CODE",{});var W3t=s(sMe);wIr=r(W3t,"model_type"),W3t.forEach(t),AIr=r(jw,` property of the config object (either
passed as an argument or loaded from `),lMe=n(jw,"CODE",{});var H3t=s(lMe);yIr=r(H3t,"pretrained_model_name_or_path"),H3t.forEach(t),LIr=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=n(jw,"CODE",{});var U3t=s(iMe);xIr=r(U3t,"pretrained_model_name_or_path"),U3t.forEach(t),$Ir=r(jw,":"),jw.forEach(t),kIr=i(ti),dMe=n(ti,"UL",{});var J3t=s(dMe);pC=n(J3t,"LI",{});var LBe=s(pC);cMe=n(LBe,"STRONG",{});var Y3t=s(cMe);SIr=r(Y3t,"bert"),Y3t.forEach(t),RIr=r(LBe," \u2014 "),HY=n(LBe,"A",{href:!0});var K3t=s(HY);PIr=r(K3t,"FlaxBertForNextSentencePrediction"),K3t.forEach(t),BIr=r(LBe," (BERT model)"),LBe.forEach(t),J3t.forEach(t),IIr=i(ti),T(uC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),kqe=i(f),tf=n(f,"H2",{class:!0});var Nje=s(tf);_C=n(Nje,"A",{id:!0,class:!0,href:!0});var Z3t=s(_C);fMe=n(Z3t,"SPAN",{});var ewt=s(fMe);T(Ox.$$.fragment,ewt),ewt.forEach(t),Z3t.forEach(t),qIr=i(Nje),mMe=n(Nje,"SPAN",{});var owt=s(mMe);NIr=r(owt,"FlaxAutoModelForImageClassification"),owt.forEach(t),Nje.forEach(t),Sqe=i(f),Tr=n(f,"DIV",{class:!0});var ai=s(Tr);T(Vx.$$.fragment,ai),jIr=i(ai),af=n(ai,"P",{});var WZ=s(af);DIr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UY=n(WZ,"A",{href:!0});var rwt=s(UY);GIr=r(rwt,"from_pretrained()"),rwt.forEach(t),OIr=r(WZ," class method or the "),JY=n(WZ,"A",{href:!0});var twt=s(JY);VIr=r(twt,"from_config()"),twt.forEach(t),XIr=r(WZ,` class
method.`),WZ.forEach(t),zIr=i(ai),Xx=n(ai,"P",{});var jje=s(Xx);QIr=r(jje,"This class cannot be instantiated directly using "),gMe=n(jje,"CODE",{});var awt=s(gMe);WIr=r(awt,"__init__()"),awt.forEach(t),HIr=r(jje," (throws an error)."),jje.forEach(t),UIr=i(ai),Ut=n(ai,"DIV",{class:!0});var Dw=s(Ut);T(zx.$$.fragment,Dw),JIr=i(Dw),hMe=n(Dw,"P",{});var nwt=s(hMe);YIr=r(nwt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),nwt.forEach(t),KIr=i(Dw),nf=n(Dw,"P",{});var HZ=s(nf);ZIr=r(HZ,`Note:
Loading a model from its configuration file does `),pMe=n(HZ,"STRONG",{});var swt=s(pMe);eqr=r(swt,"not"),swt.forEach(t),oqr=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=n(HZ,"A",{href:!0});var lwt=s(YY);rqr=r(lwt,"from_pretrained()"),lwt.forEach(t),tqr=r(HZ," to load the model weights."),HZ.forEach(t),aqr=i(Dw),T(bC.$$.fragment,Dw),Dw.forEach(t),nqr=i(ai),Ur=n(ai,"DIV",{class:!0});var ni=s(Ur);T(Qx.$$.fragment,ni),sqr=i(ni),uMe=n(ni,"P",{});var iwt=s(uMe);lqr=r(iwt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iwt.forEach(t),iqr=i(ni),En=n(ni,"P",{});var Gw=s(En);dqr=r(Gw,"The model class to instantiate is selected based on the "),_Me=n(Gw,"CODE",{});var dwt=s(_Me);cqr=r(dwt,"model_type"),dwt.forEach(t),fqr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),bMe=n(Gw,"CODE",{});var cwt=s(bMe);mqr=r(cwt,"pretrained_model_name_or_path"),cwt.forEach(t),gqr=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=n(Gw,"CODE",{});var fwt=s(vMe);hqr=r(fwt,"pretrained_model_name_or_path"),fwt.forEach(t),pqr=r(Gw,":"),Gw.forEach(t),uqr=i(ni),Wx=n(ni,"UL",{});var Dje=s(Wx);vC=n(Dje,"LI",{});var xBe=s(vC);FMe=n(xBe,"STRONG",{});var mwt=s(FMe);_qr=r(mwt,"beit"),mwt.forEach(t),bqr=r(xBe," \u2014 "),KY=n(xBe,"A",{href:!0});var gwt=s(KY);vqr=r(gwt,"FlaxBeitForImageClassification"),gwt.forEach(t),Fqr=r(xBe," (BEiT model)"),xBe.forEach(t),Tqr=i(Dje),FC=n(Dje,"LI",{});var $Be=s(FC);TMe=n($Be,"STRONG",{});var hwt=s(TMe);Mqr=r(hwt,"vit"),hwt.forEach(t),Eqr=r($Be," \u2014 "),ZY=n($Be,"A",{href:!0});var pwt=s(ZY);Cqr=r(pwt,"FlaxViTForImageClassification"),pwt.forEach(t),wqr=r($Be," (ViT model)"),$Be.forEach(t),Dje.forEach(t),Aqr=i(ni),T(TC.$$.fragment,ni),ni.forEach(t),ai.forEach(t),Rqe=i(f),sf=n(f,"H2",{class:!0});var Gje=s(sf);MC=n(Gje,"A",{id:!0,class:!0,href:!0});var uwt=s(MC);MMe=n(uwt,"SPAN",{});var _wt=s(MMe);T(Hx.$$.fragment,_wt),_wt.forEach(t),uwt.forEach(t),yqr=i(Gje),EMe=n(Gje,"SPAN",{});var bwt=s(EMe);Lqr=r(bwt,"FlaxAutoModelForVision2Seq"),bwt.forEach(t),Gje.forEach(t),Pqe=i(f),Mr=n(f,"DIV",{class:!0});var si=s(Mr);T(Ux.$$.fragment,si),xqr=i(si),lf=n(si,"P",{});var UZ=s(lf);$qr=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eK=n(UZ,"A",{href:!0});var vwt=s(eK);kqr=r(vwt,"from_pretrained()"),vwt.forEach(t),Sqr=r(UZ," class method or the "),oK=n(UZ,"A",{href:!0});var Fwt=s(oK);Rqr=r(Fwt,"from_config()"),Fwt.forEach(t),Pqr=r(UZ,` class
method.`),UZ.forEach(t),Bqr=i(si),Jx=n(si,"P",{});var Oje=s(Jx);Iqr=r(Oje,"This class cannot be instantiated directly using "),CMe=n(Oje,"CODE",{});var Twt=s(CMe);qqr=r(Twt,"__init__()"),Twt.forEach(t),Nqr=r(Oje," (throws an error)."),Oje.forEach(t),jqr=i(si),Jt=n(si,"DIV",{class:!0});var Ow=s(Jt);T(Yx.$$.fragment,Ow),Dqr=i(Ow),wMe=n(Ow,"P",{});var Mwt=s(wMe);Gqr=r(Mwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Mwt.forEach(t),Oqr=i(Ow),df=n(Ow,"P",{});var JZ=s(df);Vqr=r(JZ,`Note:
Loading a model from its configuration file does `),AMe=n(JZ,"STRONG",{});var Ewt=s(AMe);Xqr=r(Ewt,"not"),Ewt.forEach(t),zqr=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=n(JZ,"A",{href:!0});var Cwt=s(rK);Qqr=r(Cwt,"from_pretrained()"),Cwt.forEach(t),Wqr=r(JZ," to load the model weights."),JZ.forEach(t),Hqr=i(Ow),T(EC.$$.fragment,Ow),Ow.forEach(t),Uqr=i(si),Jr=n(si,"DIV",{class:!0});var li=s(Jr);T(Kx.$$.fragment,li),Jqr=i(li),yMe=n(li,"P",{});var wwt=s(yMe);Yqr=r(wwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wwt.forEach(t),Kqr=i(li),Cn=n(li,"P",{});var Vw=s(Cn);Zqr=r(Vw,"The model class to instantiate is selected based on the "),LMe=n(Vw,"CODE",{});var Awt=s(LMe);eNr=r(Awt,"model_type"),Awt.forEach(t),oNr=r(Vw,` property of the config object (either
passed as an argument or loaded from `),xMe=n(Vw,"CODE",{});var ywt=s(xMe);rNr=r(ywt,"pretrained_model_name_or_path"),ywt.forEach(t),tNr=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Me=n(Vw,"CODE",{});var Lwt=s($Me);aNr=r(Lwt,"pretrained_model_name_or_path"),Lwt.forEach(t),nNr=r(Vw,":"),Vw.forEach(t),sNr=i(li),kMe=n(li,"UL",{});var xwt=s(kMe);CC=n(xwt,"LI",{});var kBe=s(CC);SMe=n(kBe,"STRONG",{});var $wt=s(SMe);lNr=r($wt,"vision-encoder-decoder"),$wt.forEach(t),iNr=r(kBe," \u2014 "),tK=n(kBe,"A",{href:!0});var kwt=s(tK);dNr=r(kwt,"FlaxVisionEncoderDecoderModel"),kwt.forEach(t),cNr=r(kBe," (Vision Encoder decoder model)"),kBe.forEach(t),xwt.forEach(t),fNr=i(li),T(wC.$$.fragment,li),li.forEach(t),si.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(B6t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoTokenizer"),c(hi,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertModel"),c(_f,"id","extending-the-auto-classes"),c(_f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_f,"href","#extending-the-auto-classes"),c(pi,"class","relative group"),c(vf,"id","transformers.AutoConfig"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#transformers.AutoConfig"),c(ui,"class","relative group"),c(b$,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(v$,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig"),c(F$,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig"),c(T$,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig"),c(M$,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig"),c(E$,"href","/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(C$,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig"),c(w$,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(A$,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(y$,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(L$,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig"),c(x$,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig"),c($$,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPConfig"),c(k$,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig"),c(S$,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig"),c(R$,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig"),c(P$,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(B$,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(I$,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(q$,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig"),c(N$,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(j$,"href","/docs/transformers/pr_17088/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(D$,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTConfig"),c(G$,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrConfig"),c(O$,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig"),c(V$,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRConfig"),c(X$,"href","/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTConfig"),c(z$,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig"),c(Q$,"href","/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(W$,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig"),c(H$,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig"),c(U$,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTConfig"),c(J$,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig"),c(Y$,"href","/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNConfig"),c(K$,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config"),c(Z$,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(ek,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig"),c(ok,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig"),c(rk,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig"),c(tk,"href","/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(ak,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(nk,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(sk,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig"),c(lk,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig"),c(ik,"href","/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeConfig"),c(dk,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig"),c(ck,"href","/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Config"),c(fk,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig"),c(mk,"href","/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(gk,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig"),c(hk,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(pk,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(uk,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig"),c(_k,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config"),c(bk,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(vk,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Fk,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig"),c(Tk,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig"),c(Mk,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Ek,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig"),c(Ck,"href","/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(wk,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Ak,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(yk,"href","/docs/transformers/pr_17088/en/model_doc/rag#transformers.RagConfig"),c(Lk,"href","/docs/transformers/pr_17088/en/model_doc/realm#transformers.RealmConfig"),c(xk,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig"),c($k,"href","/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetConfig"),c(kk,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig"),c(Sk,"href","/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetConfig"),c(Rk,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertConfig"),c(Pk,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig"),c(Bk,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig"),c(Ik,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerConfig"),c(qk,"href","/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWConfig"),c(Nk,"href","/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDConfig"),c(jk,"href","/docs/transformers/pr_17088/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Dk,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Gk,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Ok,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterConfig"),c(Vk,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Xk,"href","/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinConfig"),c(zk,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config"),c(Qk,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig"),c(Wk,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig"),c(Hk,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Uk,"href","/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRConfig"),c(Jk,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Yk,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Kk,"href","/docs/transformers/pr_17088/en/model_doc/van#transformers.VanConfig"),c(Zk,"href","/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltConfig"),c(eS,"href","/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(oS,"href","/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(rS,"href","/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(tS,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig"),c(aS,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(nS,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(sS,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig"),c(lS,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig"),c(iS,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig"),c(dS,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(cS,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(fS,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(mS,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig"),c(gS,"href","/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosConfig"),c(hS,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bg,"id","transformers.AutoTokenizer"),c(bg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bg,"href","#transformers.AutoTokenizer"),c(bi,"class","relative group"),c(pS,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(uS,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizer"),c(_S,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(bS,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartTokenizer"),c(vS,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartTokenizerFast"),c(FS,"href","/docs/transformers/pr_17088/en/model_doc/barthez#transformers.BarthezTokenizer"),c(TS,"href","/docs/transformers/pr_17088/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(MS,"href","/docs/transformers/pr_17088/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(ES,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizer"),c(CS,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizerFast"),c(wS,"href","/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(AS,"href","/docs/transformers/pr_17088/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(yS,"href","/docs/transformers/pr_17088/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(LS,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(xS,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c($S,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(kS,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(SS,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(RS,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(PS,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(BS,"href","/docs/transformers/pr_17088/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(IS,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertTokenizer"),c(qS,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(NS,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineTokenizer"),c(jS,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPTokenizer"),c(DS,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(GS,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(OS,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(VS,"href","/docs/transformers/pr_17088/en/model_doc/cpm#transformers.CpmTokenizer"),c(XS,"href","/docs/transformers/pr_17088/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(zS,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(QS,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizer"),c(WS,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(HS,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaTokenizer"),c(US,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(JS,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(YS,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(KS,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(ZS,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(eR,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(oR,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(rR,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraTokenizer"),c(tR,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(aR,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(nR,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetTokenizer"),c(sR,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(lR,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(iR,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelTokenizer"),c(dR,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(cR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(fR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(mR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(gR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(hR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(pR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(uR,"href","/docs/transformers/pr_17088/en/model_doc/herbert#transformers.HerbertTokenizer"),c(_R,"href","/docs/transformers/pr_17088/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(bR,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(vR,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizer"),c(FR,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(TR,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(MR,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(ER,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(CR,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(wR,"href","/docs/transformers/pr_17088/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(AR,"href","/docs/transformers/pr_17088/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(yR,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDTokenizer"),c(LR,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDTokenizerFast"),c(xR,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerTokenizer"),c($R,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(kR,"href","/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeTokenizer"),c(SR,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(RR,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(PR,"href","/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(BR,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianTokenizer"),c(IR,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartTokenizer"),c(qR,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(NR,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(jR,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(DR,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizer"),c(GR,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizerFast"),c(OR,"href","/docs/transformers/pr_17088/en/model_doc/mluke#transformers.MLukeTokenizer"),c(VR,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(XR,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(zR,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(QR,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(WR,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.T5Tokenizer"),c(HR,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.T5TokenizerFast"),c(UR,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizer"),c(JR,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(YR,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(KR,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eP,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oP,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(rP,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(tP,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(aP,"href","/docs/transformers/pr_17088/en/model_doc/phobert#transformers.PhobertTokenizer"),c(nP,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartTokenizer"),c(sP,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(lP,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizer"),c(iP,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizerFast"),c(dP,"href","/docs/transformers/pr_17088/en/model_doc/rag#transformers.RagTokenizer"),c(cP,"href","/docs/transformers/pr_17088/en/model_doc/realm#transformers.RealmTokenizer"),c(fP,"href","/docs/transformers/pr_17088/en/model_doc/realm#transformers.RealmTokenizerFast"),c(mP,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerTokenizer"),c(gP,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(hP,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertTokenizer"),c(pP,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(uP,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(_P,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(bP,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizer"),c(vP,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(FP,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(TP,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(MP,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(EP,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(CP,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterTokenizer"),c(wP,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(AP,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(yP,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(LP,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.T5Tokenizer"),c(xP,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.T5TokenizerFast"),c($P,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasTokenizer"),c(kP,"href","/docs/transformers/pr_17088/en/model_doc/tapex#transformers.TapexTokenizer"),c(SP,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(RP,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizer"),c(PP,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizerFast"),c(BP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(IP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(qP,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMTokenizer"),c(NP,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(jP,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMTokenizer"),c(DP,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(GP,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(OP,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(VP,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizer"),c(XP,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(zP,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(QP,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(WP,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizer"),c(HP,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jg,"id","transformers.AutoFeatureExtractor"),c(Jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jg,"href","#transformers.AutoFeatureExtractor"),c(vi,"class","relative group"),c(UP,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(JP,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(YP,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(KP,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ZP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eB,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(oB,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(rB,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(tB,"href","/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(aB,"href","/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(nB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sB,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(lB,"href","/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(iB,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(dB,"href","/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(cB,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(fB,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mB,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(gB,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(hB,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(pB,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uB,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(_B,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(bB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(vB,"href","/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"id","transformers.AutoProcessor"),c(Ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ch,"href","#transformers.AutoProcessor"),c(Fi,"class","relative group"),c(FB,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(TB,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPProcessor"),c(MB,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(EB,"href","/docs/transformers/pr_17088/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(CB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AB,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(yB,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(LB,"href","/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRProcessor"),c(xB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($B,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kB,"href","/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltProcessor"),c(SB,"href","/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(RB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oh,"id","transformers.AutoModel"),c(Oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Oh,"href","#transformers.AutoModel"),c(Mi,"class","relative group"),c(BB,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IB,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qB,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NB,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertModel"),c(jB,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartModel"),c(DB,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitModel"),c(GB,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertModel"),c(OB,"href","/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(VB,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdModel"),c(XB,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(zB,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(QB,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(WB,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertModel"),c(HB,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineModel"),c(UB,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPModel"),c(JB,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertModel"),c(YB,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextModel"),c(KB,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLModel"),c(ZB,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(eI,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(oI,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(rI,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaModel"),c(tI,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(aI,"href","/docs/transformers/pr_17088/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(nI,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTModel"),c(sI,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrModel"),c(lI,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertModel"),c(iI,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(dI,"href","/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTModel"),c(cI,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraModel"),c(fI,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertModel"),c(mI,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetModel"),c(gI,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTModel"),c(hI,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelModel"),c(pI,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelBaseModel"),c(uI,"href","/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNModel"),c(_I,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Model"),c(bI,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(vI,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJModel"),c(FI,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertModel"),c(TI,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertModel"),c(MI,"href","/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(EI,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(CI,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(wI,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDModel"),c(AI,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerModel"),c(yI,"href","/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeModel"),c(LI,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertModel"),c(xI,"href","/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Model"),c($I,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianModel"),c(kI,"href","/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerModel"),c(SI,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartModel"),c(RI,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(PI,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertModel"),c(BI,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetModel"),c(II,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Model"),c(qI,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerModel"),c(NI,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(jI,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTModel"),c(DI,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusModel"),c(GI,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverModel"),c(OI,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartModel"),c(VI,"href","/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerModel"),c(XI,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(zI,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertModel"),c(QI,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerModel"),c(WI,"href","/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetModel"),c(HI,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertModel"),c(UI,"href","/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetModel"),c(JI,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertModel"),c(YI,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaModel"),c(KI,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerModel"),c(ZI,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerModel"),c(eq,"href","/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWModel"),c(oq,"href","/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDModel"),c(rq,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(tq,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterModel"),c(aq,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(nq,"href","/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinModel"),c(sq,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Model"),c(lq,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasModel"),c(iq,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(dq,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechModel"),c(cq,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(fq,"href","/docs/transformers/pr_17088/en/model_doc/van#transformers.VanModel"),c(mq,"href","/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltModel"),c(gq,"href","/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(hq,"href","/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertModel"),c(pq,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTModel"),c(uq,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(_q,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(bq,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMModel"),c(vq,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMModel"),c(Fq,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMModel"),c(Tq,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Mq,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Eq,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Cq,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetModel"),c(wq,"href","/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosModel"),c(Aq,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ru,"id","transformers.AutoModelForPreTraining"),c(Ru,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ru,"href","#transformers.AutoModelForPreTraining"),c(wi,"class","relative group"),c(yq,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lq,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xq,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($q,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForPreTraining"),c(kq,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Sq,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForPreTraining"),c(Rq,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Pq,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Bq,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Iq,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(qq,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Nq,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(jq,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Dq,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Gq,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Oq,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Vq,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Xq,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(zq,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Qq,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Wq,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Hq,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Uq,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Jq,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Yq,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Kq,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Zq,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(eN,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertModel"),c(oN,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(rN,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(tN,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(aN,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(nN,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(sN,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(lN,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(iN,"href","/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(dN,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(cN,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(fN,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(mN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(gN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(hN,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M_,"id","transformers.AutoModelForCausalLM"),c(M_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M_,"href","#transformers.AutoModelForCausalLM"),c(Li,"class","relative group"),c(pN,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uN,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_N,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bN,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForCausalLM"),c(vN,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertLMHeadModel"),c(FN,"href","/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(TN,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(MN,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(EN,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(CN,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(wN,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(AN,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(yN,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(LN,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForCausalLM"),c(xN,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c($N,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(kN,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(SN,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianForCausalLM"),c(RN,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForCausalLM"),c(PN,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(BN,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(IN,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTForCausalLM"),c(qN,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(NN,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(jN,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(DN,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(GN,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(ON,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(VN,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(XN,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(zN,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(QN,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(WN,"href","/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(HN,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(UN,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(JN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(YN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(KN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(ZN,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i1,"id","transformers.AutoModelForMaskedLM"),c(i1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i1,"href","#transformers.AutoModelForMaskedLM"),c(ki,"class","relative group"),c(ej,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tj,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(aj,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nj,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForMaskedLM"),c(sj,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(lj,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(ij,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(dj,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(cj,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(fj,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(mj,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(gj,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(hj,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(pj,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(uj,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(_j,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(bj,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(vj,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Tj,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Mj,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(wj,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(yj,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(xj,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c($j,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(kj,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Pj,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W1,"id","transformers.AutoModelForSeq2SeqLM"),c(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Pi,"class","relative group"),c(qj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dj,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Gj,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Oj,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Vj,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Xj,"href","/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(zj,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Qj,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Wj,"href","/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianMTModel"),c(Uj,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Jj,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Yj,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Kj,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Zj,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(eD,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(oD,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h8,"id","transformers.AutoModelForSequenceClassification"),c(h8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h8,"href","#transformers.AutoModelForSequenceClassification"),c(qi,"class","relative group"),c(tD,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aD,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nD,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sD,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(lD,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForSequenceClassification"),c(iD,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForSequenceClassification"),c(dD,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(cD,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(fD,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(mD,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(gD,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(hD,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(pD,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(uD,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(bD,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForSequenceClassification"),c($D,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fb,"id","transformers.AutoModelForMultipleChoice"),c(fb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fb,"href","#transformers.AutoModelForMultipleChoice"),c(Di,"class","relative group"),c(ZD,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rG,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(tG,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForMultipleChoice"),c(aG,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(nG,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(sG,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(lG,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(iG,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(dG,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(cG,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(fG,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(mG,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(gG,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(hG,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(pG,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(uG,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(_G,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(bG,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(vG,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(FG,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(TG,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(MG,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vb,"id","transformers.AutoModelForNextSentencePrediction"),c(Vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Vi,"class","relative group"),c($G,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RG,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(PG,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(BG,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(IG,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(qG,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kb,"id","transformers.AutoModelForTokenClassification"),c(Kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kb,"href","#transformers.AutoModelForTokenClassification"),c(Qi,"class","relative group"),c(NG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GG,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(OG,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForTokenClassification"),c(VG,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(XG,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(zG,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForTokenClassification"),c(QG,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(WG,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(HG,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(UG,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(JG,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(YG,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(KG,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(ZG,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(eO,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(oO,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(rO,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(tO,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(aO,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(nO,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(sO,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(lO,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(iO,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(dO,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(cO,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(fO,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(mO,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(gO,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(hO,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(pO,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(uO,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(_O,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(bO,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(vO,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B2,"id","transformers.AutoModelForQuestionAnswering"),c(B2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B2,"href","#transformers.AutoModelForQuestionAnswering"),c(Ui,"class","relative group"),c(FO,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TO,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MO,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EO,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c($O,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(qO,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(aV,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(lV,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ki,"class","relative group"),c(iV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fV,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xv,"id","transformers.AutoModelForImageClassification"),c(xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xv,"href","#transformers.AutoModelForImageClassification"),c(od,"class","relative group"),c(mV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pV,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitForImageClassification"),c(uV,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(_V,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(bV,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForImageClassification"),c(vV,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(FV,"href","/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(TV,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(MV,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(EV,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(CV,"href","/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(wV,"href","/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(AV,"href","/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(yV,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(LV,"href","/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinForImageClassification"),c(xV,"href","/docs/transformers/pr_17088/en/model_doc/van#transformers.VanForImageClassification"),c($V,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xv,"id","transformers.AutoModelForVision2Seq"),c(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xv,"href","#transformers.AutoModelForVision2Seq"),c(ad,"class","relative group"),c(kV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PV,"href","/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uv,"id","transformers.AutoModelForAudioClassification"),c(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uv,"href","#transformers.AutoModelForAudioClassification"),c(ld,"class","relative group"),c(BV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NV,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(jV,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(DV,"href","/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lF,"id","transformers.AutoModelForAudioFrameClassification"),c(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lF,"href","#transformers.AutoModelForAudioFrameClassification"),c(cd,"class","relative group"),c(QV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UV,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(JV,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(YV,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(KV,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pF,"id","transformers.AutoModelForCTC"),c(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pF,"href","#transformers.AutoModelForCTC"),c(gd,"class","relative group"),c(ZV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rX,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(tX,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertForCTC"),c(aX,"href","/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWForCTC"),c(nX,"href","/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDForCTC"),c(sX,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(lX,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(iX,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(dX,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(ud,"class","relative group"),c(cX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/pr_17088/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(hX,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RF,"id","transformers.AutoModelForAudioXVector"),c(RF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RF,"href","#transformers.AutoModelForAudioXVector"),c(vd,"class","relative group"),c(pX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_X,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bX,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(vX,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(FX,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(TX,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GF,"id","transformers.AutoModelForMaskedImageModeling"),c(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Md,"class","relative group"),c(MX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wX,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(AX,"href","/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(yX,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HF,"id","transformers.AutoModelForObjectDetection"),c(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HF,"href","#transformers.AutoModelForObjectDetection"),c(Ad,"class","relative group"),c(LX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrForObjectDetection"),c(SX,"href","/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e0,"id","transformers.AutoModelForImageSegmentation"),c(e0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e0,"href","#transformers.AutoModelForImageSegmentation"),c(xd,"class","relative group"),c(RX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IX,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n0,"id","transformers.AutoModelForSemanticSegmentation"),c(n0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n0,"href","#transformers.AutoModelForSemanticSegmentation"),c(Sd,"class","relative group"),c(qX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DX,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(GX,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(OX,"href","/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(VX,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g0,"id","transformers.AutoModelForInstanceSegmentation"),c(g0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g0,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(XX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WX,"href","/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b0,"id","transformers.TFAutoModel"),c(b0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b0,"href","#transformers.TFAutoModel"),c(Nd,"class","relative group"),c(HX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YX,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertModel"),c(KX,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartModel"),c(ZX,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertModel"),c(ez,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(oz,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(rz,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertModel"),c(tz,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.TFCLIPModel"),c(az,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertModel"),c(nz,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.TFConvNextModel"),c(sz,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLModel"),c(lz,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(iz,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaModel"),c(dz,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(cz,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(fz,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(mz,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraModel"),c(gz,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(hz,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelModel"),c(pz,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(uz,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2Model"),c(_z,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJModel"),c(bz,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.TFHubertModel"),c(vz,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Fz,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.TFLEDModel"),c(Tz,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerModel"),c(Mz,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Ez,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.TFMarianModel"),c(Cz,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.TFMBartModel"),c(wz,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Az,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetModel"),c(yz,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.TFMT5Model"),c(Lz,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(xz,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.TFOPTModel"),c($z,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.TFPegasusModel"),c(kz,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertModel"),c(Sz,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaModel"),c(Rz,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Pz,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Bz,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5Model"),c(Iz,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasModel"),c(qz,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Nz,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.TFViTModel"),c(jz,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Dz,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Gz,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMModel"),c(Oz,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Vz,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mT,"id","transformers.TFAutoModelForPreTraining"),c(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mT,"href","#transformers.TFAutoModelForPreTraining"),c(Gd,"class","relative group"),c(Xz,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zz,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qz,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wz,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Hz,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Uz,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Jz,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Yz,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Kz,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Zz,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(eQ,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(oQ,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(rQ,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(tQ,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(aQ,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(nQ,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(sQ,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(lQ,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(iQ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(dQ,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(cQ,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(fQ,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(mQ,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(gQ,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(hQ,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(pQ,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.TFAutoModelForCausalLM"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.TFAutoModelForCausalLM"),c(Xd,"class","relative group"),c(uQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Q,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vQ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(FQ,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(TQ,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(MQ,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(EQ,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(CQ,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(wQ,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(AQ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(yQ,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(LQ,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(xQ,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c($Q,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.TFAutoModelForImageClassification"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.TFAutoModelForImageClassification"),c(Wd,"class","relative group"),c(kQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PQ,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(BQ,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(IQ,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n7,"id","transformers.TFAutoModelForMaskedLM"),c(n7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n7,"href","#transformers.TFAutoModelForMaskedLM"),c(Yd,"class","relative group"),c(qQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DQ,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(GQ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(VQ,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(UQ,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(eW,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(oW,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(rW,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(tW,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(aW,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(nW,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(L7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ec,"class","relative group"),c(sW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dW,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(cW,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(fW,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(mW,"href","/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(gW,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(hW,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.TFMarianMTModel"),c(pW,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(uW,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(_W,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(bW,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G7,"id","transformers.TFAutoModelForSequenceClassification"),c(G7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G7,"href","#transformers.TFAutoModelForSequenceClassification"),c(tc,"class","relative group"),c(vW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(EW,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(CW,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(wW,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(AW,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(yW,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(LW,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(xW,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c($W,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(kW,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(qW,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(DW,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(GW,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(OW,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(VW,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(XW,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(zW,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(QW,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(WW,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uM,"id","transformers.TFAutoModelForMultipleChoice"),c(uM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uM,"href","#transformers.TFAutoModelForMultipleChoice"),c(sc,"class","relative group"),c(HW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YW,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(KW,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(eH,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(oH,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(rH,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(tH,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(aH,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(nH,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(sH,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(lH,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(iH,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(dH,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(cH,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(fH,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(mH,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(gH,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(dc,"class","relative group"),c(hH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_H,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(bH,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(mc,"class","relative group"),c(vH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MH,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zM,"id","transformers.TFAutoModelForTokenClassification"),c(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zM,"href","#transformers.TFAutoModelForTokenClassification"),c(pc,"class","relative group"),c(EH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(yH,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(LH,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(xH,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c($H,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(kH,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(SH,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(RH,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(PH,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(BH,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(IH,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(qH,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(NH,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(jH,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(DH,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(GH,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(OH,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(VH,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(XH,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(zH,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h4,"id","transformers.TFAutoModelForQuestionAnswering"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(bc,"class","relative group"),c(QH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(JH,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(YH,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(KH,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(ZH,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(eU,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(oU,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(rU,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(tU,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(aU,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(nU,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(sU,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(lU,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(iU,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(dU,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(cU,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(fU,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(mU,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(gU,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(hU,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q4,"id","transformers.TFAutoModelForVision2Seq"),c(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q4,"href","#transformers.TFAutoModelForVision2Seq"),c(Tc,"class","relative group"),c(pU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_U,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bU,"href","/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Cc,"class","relative group"),c(vU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MU,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z4,"id","transformers.FlaxAutoModel"),c(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z4,"href","#transformers.FlaxAutoModel"),c(yc,"class","relative group"),c(EU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AU,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertModel"),c(yU,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartModel"),c(LU,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.FlaxBeitModel"),c(xU,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertModel"),c($U,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(kU,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(SU,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(RU,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.FlaxCLIPModel"),c(PU,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(BU,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraModel"),c(IU,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(qU,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(NU,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(jU,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.FlaxMarianModel"),c(DU,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartModel"),c(GU,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5Model"),c(OU,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.FlaxOPTModel"),c(VU,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(XU,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(zU,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(QU,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5Model"),c(WU,"href","/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(HU,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.FlaxViTModel"),c(UU,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(JU,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(YU,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FE,"id","transformers.FlaxAutoModelForCausalLM"),c(FE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FE,"href","#transformers.FlaxAutoModelForCausalLM"),c($c,"class","relative group"),c(KU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oJ,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(rJ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(tJ,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(aJ,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(nJ,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(sJ,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(lJ,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(iJ,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(dJ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(cJ,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RE,"id","transformers.FlaxAutoModelForPreTraining"),c(RE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Rc,"class","relative group"),c(fJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hJ,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(pJ,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(uJ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(_J,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(bJ,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(vJ,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(FJ,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(TJ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(MJ,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(EJ,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(CJ,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(wJ,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HE,"id","transformers.FlaxAutoModelForMaskedLM"),c(HE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Ic,"class","relative group"),c(AJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xJ,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c($J,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(kJ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(SJ,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(RJ,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(PJ,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(BJ,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(IJ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(qJ,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(NJ,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(jc,"class","relative group"),c(jJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(VJ,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(XJ,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(zJ,"href","/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(QJ,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(WJ,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(HJ,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(UJ,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(JJ,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Oc,"class","relative group"),c(YJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(oY,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(rY,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(tY,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(aY,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(nY,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(sY,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(lY,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(iY,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(dY,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(zc,"class","relative group"),c(cY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gY,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(hY,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(pY,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(uY,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(_Y,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(bY,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(vY,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(FY,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(TY,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(MY,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z5,"id","transformers.FlaxAutoModelForTokenClassification"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Hc,"class","relative group"),c(EY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(yY,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(LY,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(xY,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c($Y,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(kY,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(SY,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(RY,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(rC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Yc,"class","relative group"),c(PY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qY,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(NY,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(jY,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(DY,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(GY,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(OY,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(VY,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(XY,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(ef,"class","relative group"),c(zY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HY,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_C,"id","transformers.FlaxAutoModelForImageClassification"),c(_C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_C,"href","#transformers.FlaxAutoModelForImageClassification"),c(tf,"class","relative group"),c(UY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KY,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(ZY,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MC,"id","transformers.FlaxAutoModelForVision2Seq"),c(MC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(sf,"class","relative group"),c(eK,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oK,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rK,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tK,"href","/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ii),b(f,gf,_),b(f,et,_),e(et,di),e(et,ci),e(ci,Xw),e(et,hf),b(f,Ne,_),b(f,Xe,_),e(Xe,fi),e(Xe,An),e(An,zw),e(Xe,yn),e(Xe,Ln),e(Ln,Qw),e(Xe,mi),e(Xe,xn),e(xn,Ww),e(Xe,gi),b(f,pf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,m$),e(Ae,hi),e(hi,g$),e(Ae,h$),b(f,Eo,_),b(f,Ea,_),e(Ea,p$),e(Ea,uf),e(uf,u$),e(Ea,Vje),b(f,SBe,_),b(f,pi,_),e(pi,_f),e(_f,YZ),M(Hw,YZ,null),e(pi,Xje),e(pi,KZ),e(KZ,zje),b(f,RBe,_),b(f,$n,_),e($n,Qje),e($n,ZZ),e(ZZ,Wje),e($n,Hje),e($n,eee),e(eee,Uje),e($n,Jje),b(f,PBe,_),M(Uw,f,_),b(f,BBe,_),b(f,_$,_),e(_$,Yje),b(f,IBe,_),M(bf,f,_),b(f,qBe,_),b(f,ui,_),e(ui,vf),e(vf,oee),M(Jw,oee,null),e(ui,Kje),e(ui,ree),e(ree,Zje),b(f,NBe,_),b(f,Co,_),M(Yw,Co,null),e(Co,eDe),e(Co,Kw),e(Kw,oDe),e(Kw,b$),e(b$,rDe),e(Kw,tDe),e(Co,aDe),e(Co,Zw),e(Zw,nDe),e(Zw,tee),e(tee,sDe),e(Zw,lDe),e(Co,iDe),e(Co,Er),M(eA,Er,null),e(Er,dDe),e(Er,aee),e(aee,cDe),e(Er,fDe),e(Er,_i),e(_i,mDe),e(_i,nee),e(nee,gDe),e(_i,hDe),e(_i,see),e(see,pDe),e(_i,uDe),e(Er,_De),e(Er,y),e(y,Ff),e(Ff,lee),e(lee,bDe),e(Ff,vDe),e(Ff,v$),e(v$,FDe),e(Ff,TDe),e(y,MDe),e(y,Tf),e(Tf,iee),e(iee,EDe),e(Tf,CDe),e(Tf,F$),e(F$,wDe),e(Tf,ADe),e(y,yDe),e(y,Mf),e(Mf,dee),e(dee,LDe),e(Mf,xDe),e(Mf,T$),e(T$,$De),e(Mf,kDe),e(y,SDe),e(y,Ef),e(Ef,cee),e(cee,RDe),e(Ef,PDe),e(Ef,M$),e(M$,BDe),e(Ef,IDe),e(y,qDe),e(y,Cf),e(Cf,fee),e(fee,NDe),e(Cf,jDe),e(Cf,E$),e(E$,DDe),e(Cf,GDe),e(y,ODe),e(y,wf),e(wf,mee),e(mee,VDe),e(wf,XDe),e(wf,C$),e(C$,zDe),e(wf,QDe),e(y,WDe),e(y,Af),e(Af,gee),e(gee,HDe),e(Af,UDe),e(Af,w$),e(w$,JDe),e(Af,YDe),e(y,KDe),e(y,yf),e(yf,hee),e(hee,ZDe),e(yf,eGe),e(yf,A$),e(A$,oGe),e(yf,rGe),e(y,tGe),e(y,Lf),e(Lf,pee),e(pee,aGe),e(Lf,nGe),e(Lf,y$),e(y$,sGe),e(Lf,lGe),e(y,iGe),e(y,xf),e(xf,uee),e(uee,dGe),e(xf,cGe),e(xf,L$),e(L$,fGe),e(xf,mGe),e(y,gGe),e(y,$f),e($f,_ee),e(_ee,hGe),e($f,pGe),e($f,x$),e(x$,uGe),e($f,_Ge),e(y,bGe),e(y,kf),e(kf,bee),e(bee,vGe),e(kf,FGe),e(kf,$$),e($$,TGe),e(kf,MGe),e(y,EGe),e(y,Sf),e(Sf,vee),e(vee,CGe),e(Sf,wGe),e(Sf,k$),e(k$,AGe),e(Sf,yGe),e(y,LGe),e(y,Rf),e(Rf,Fee),e(Fee,xGe),e(Rf,$Ge),e(Rf,S$),e(S$,kGe),e(Rf,SGe),e(y,RGe),e(y,Pf),e(Pf,Tee),e(Tee,PGe),e(Pf,BGe),e(Pf,R$),e(R$,IGe),e(Pf,qGe),e(y,NGe),e(y,Bf),e(Bf,Mee),e(Mee,jGe),e(Bf,DGe),e(Bf,P$),e(P$,GGe),e(Bf,OGe),e(y,VGe),e(y,If),e(If,Eee),e(Eee,XGe),e(If,zGe),e(If,B$),e(B$,QGe),e(If,WGe),e(y,HGe),e(y,qf),e(qf,Cee),e(Cee,UGe),e(qf,JGe),e(qf,I$),e(I$,YGe),e(qf,KGe),e(y,ZGe),e(y,Nf),e(Nf,wee),e(wee,eOe),e(Nf,oOe),e(Nf,q$),e(q$,rOe),e(Nf,tOe),e(y,aOe),e(y,jf),e(jf,Aee),e(Aee,nOe),e(jf,sOe),e(jf,N$),e(N$,lOe),e(jf,iOe),e(y,dOe),e(y,Df),e(Df,yee),e(yee,cOe),e(Df,fOe),e(Df,j$),e(j$,mOe),e(Df,gOe),e(y,hOe),e(y,Gf),e(Gf,Lee),e(Lee,pOe),e(Gf,uOe),e(Gf,D$),e(D$,_Oe),e(Gf,bOe),e(y,vOe),e(y,Of),e(Of,xee),e(xee,FOe),e(Of,TOe),e(Of,G$),e(G$,MOe),e(Of,EOe),e(y,COe),e(y,Vf),e(Vf,$ee),e($ee,wOe),e(Vf,AOe),e(Vf,O$),e(O$,yOe),e(Vf,LOe),e(y,xOe),e(y,Xf),e(Xf,kee),e(kee,$Oe),e(Xf,kOe),e(Xf,V$),e(V$,SOe),e(Xf,ROe),e(y,POe),e(y,zf),e(zf,See),e(See,BOe),e(zf,IOe),e(zf,X$),e(X$,qOe),e(zf,NOe),e(y,jOe),e(y,Qf),e(Qf,Ree),e(Ree,DOe),e(Qf,GOe),e(Qf,z$),e(z$,OOe),e(Qf,VOe),e(y,XOe),e(y,Wf),e(Wf,Pee),e(Pee,zOe),e(Wf,QOe),e(Wf,Q$),e(Q$,WOe),e(Wf,HOe),e(y,UOe),e(y,Hf),e(Hf,Bee),e(Bee,JOe),e(Hf,YOe),e(Hf,W$),e(W$,KOe),e(Hf,ZOe),e(y,eVe),e(y,Uf),e(Uf,Iee),e(Iee,oVe),e(Uf,rVe),e(Uf,H$),e(H$,tVe),e(Uf,aVe),e(y,nVe),e(y,Jf),e(Jf,qee),e(qee,sVe),e(Jf,lVe),e(Jf,U$),e(U$,iVe),e(Jf,dVe),e(y,cVe),e(y,Yf),e(Yf,Nee),e(Nee,fVe),e(Yf,mVe),e(Yf,J$),e(J$,gVe),e(Yf,hVe),e(y,pVe),e(y,Kf),e(Kf,jee),e(jee,uVe),e(Kf,_Ve),e(Kf,Y$),e(Y$,bVe),e(Kf,vVe),e(y,FVe),e(y,Zf),e(Zf,Dee),e(Dee,TVe),e(Zf,MVe),e(Zf,K$),e(K$,EVe),e(Zf,CVe),e(y,wVe),e(y,em),e(em,Gee),e(Gee,AVe),e(em,yVe),e(em,Z$),e(Z$,LVe),e(em,xVe),e(y,$Ve),e(y,om),e(om,Oee),e(Oee,kVe),e(om,SVe),e(om,ek),e(ek,RVe),e(om,PVe),e(y,BVe),e(y,rm),e(rm,Vee),e(Vee,IVe),e(rm,qVe),e(rm,ok),e(ok,NVe),e(rm,jVe),e(y,DVe),e(y,tm),e(tm,Xee),e(Xee,GVe),e(tm,OVe),e(tm,rk),e(rk,VVe),e(tm,XVe),e(y,zVe),e(y,am),e(am,zee),e(zee,QVe),e(am,WVe),e(am,tk),e(tk,HVe),e(am,UVe),e(y,JVe),e(y,nm),e(nm,Qee),e(Qee,YVe),e(nm,KVe),e(nm,ak),e(ak,ZVe),e(nm,eXe),e(y,oXe),e(y,sm),e(sm,Wee),e(Wee,rXe),e(sm,tXe),e(sm,nk),e(nk,aXe),e(sm,nXe),e(y,sXe),e(y,lm),e(lm,Hee),e(Hee,lXe),e(lm,iXe),e(lm,sk),e(sk,dXe),e(lm,cXe),e(y,fXe),e(y,im),e(im,Uee),e(Uee,mXe),e(im,gXe),e(im,lk),e(lk,hXe),e(im,pXe),e(y,uXe),e(y,dm),e(dm,Jee),e(Jee,_Xe),e(dm,bXe),e(dm,ik),e(ik,vXe),e(dm,FXe),e(y,TXe),e(y,cm),e(cm,Yee),e(Yee,MXe),e(cm,EXe),e(cm,dk),e(dk,CXe),e(cm,wXe),e(y,AXe),e(y,fm),e(fm,Kee),e(Kee,yXe),e(fm,LXe),e(fm,ck),e(ck,xXe),e(fm,$Xe),e(y,kXe),e(y,mm),e(mm,Zee),e(Zee,SXe),e(mm,RXe),e(mm,fk),e(fk,PXe),e(mm,BXe),e(y,IXe),e(y,gm),e(gm,eoe),e(eoe,qXe),e(gm,NXe),e(gm,mk),e(mk,jXe),e(gm,DXe),e(y,GXe),e(y,hm),e(hm,ooe),e(ooe,OXe),e(hm,VXe),e(hm,gk),e(gk,XXe),e(hm,zXe),e(y,QXe),e(y,pm),e(pm,roe),e(roe,WXe),e(pm,HXe),e(pm,hk),e(hk,UXe),e(pm,JXe),e(y,YXe),e(y,um),e(um,toe),e(toe,KXe),e(um,ZXe),e(um,pk),e(pk,eze),e(um,oze),e(y,rze),e(y,_m),e(_m,aoe),e(aoe,tze),e(_m,aze),e(_m,uk),e(uk,nze),e(_m,sze),e(y,lze),e(y,bm),e(bm,noe),e(noe,ize),e(bm,dze),e(bm,_k),e(_k,cze),e(bm,fze),e(y,mze),e(y,vm),e(vm,soe),e(soe,gze),e(vm,hze),e(vm,bk),e(bk,pze),e(vm,uze),e(y,_ze),e(y,Fm),e(Fm,loe),e(loe,bze),e(Fm,vze),e(Fm,vk),e(vk,Fze),e(Fm,Tze),e(y,Mze),e(y,Tm),e(Tm,ioe),e(ioe,Eze),e(Tm,Cze),e(Tm,Fk),e(Fk,wze),e(Tm,Aze),e(y,yze),e(y,Mm),e(Mm,doe),e(doe,Lze),e(Mm,xze),e(Mm,Tk),e(Tk,$ze),e(Mm,kze),e(y,Sze),e(y,Em),e(Em,coe),e(coe,Rze),e(Em,Pze),e(Em,Mk),e(Mk,Bze),e(Em,Ize),e(y,qze),e(y,Cm),e(Cm,foe),e(foe,Nze),e(Cm,jze),e(Cm,Ek),e(Ek,Dze),e(Cm,Gze),e(y,Oze),e(y,wm),e(wm,moe),e(moe,Vze),e(wm,Xze),e(wm,Ck),e(Ck,zze),e(wm,Qze),e(y,Wze),e(y,Am),e(Am,goe),e(goe,Hze),e(Am,Uze),e(Am,wk),e(wk,Jze),e(Am,Yze),e(y,Kze),e(y,ym),e(ym,hoe),e(hoe,Zze),e(ym,eQe),e(ym,Ak),e(Ak,oQe),e(ym,rQe),e(y,tQe),e(y,Lm),e(Lm,poe),e(poe,aQe),e(Lm,nQe),e(Lm,yk),e(yk,sQe),e(Lm,lQe),e(y,iQe),e(y,xm),e(xm,uoe),e(uoe,dQe),e(xm,cQe),e(xm,Lk),e(Lk,fQe),e(xm,mQe),e(y,gQe),e(y,$m),e($m,_oe),e(_oe,hQe),e($m,pQe),e($m,xk),e(xk,uQe),e($m,_Qe),e(y,bQe),e(y,km),e(km,boe),e(boe,vQe),e(km,FQe),e(km,$k),e($k,TQe),e(km,MQe),e(y,EQe),e(y,Sm),e(Sm,voe),e(voe,CQe),e(Sm,wQe),e(Sm,kk),e(kk,AQe),e(Sm,yQe),e(y,LQe),e(y,Rm),e(Rm,Foe),e(Foe,xQe),e(Rm,$Qe),e(Rm,Sk),e(Sk,kQe),e(Rm,SQe),e(y,RQe),e(y,Pm),e(Pm,Toe),e(Toe,PQe),e(Pm,BQe),e(Pm,Rk),e(Rk,IQe),e(Pm,qQe),e(y,NQe),e(y,Bm),e(Bm,Moe),e(Moe,jQe),e(Bm,DQe),e(Bm,Pk),e(Pk,GQe),e(Bm,OQe),e(y,VQe),e(y,Im),e(Im,Eoe),e(Eoe,XQe),e(Im,zQe),e(Im,Bk),e(Bk,QQe),e(Im,WQe),e(y,HQe),e(y,qm),e(qm,Coe),e(Coe,UQe),e(qm,JQe),e(qm,Ik),e(Ik,YQe),e(qm,KQe),e(y,ZQe),e(y,Nm),e(Nm,woe),e(woe,eWe),e(Nm,oWe),e(Nm,qk),e(qk,rWe),e(Nm,tWe),e(y,aWe),e(y,jm),e(jm,Aoe),e(Aoe,nWe),e(jm,sWe),e(jm,Nk),e(Nk,lWe),e(jm,iWe),e(y,dWe),e(y,Dm),e(Dm,yoe),e(yoe,cWe),e(Dm,fWe),e(Dm,jk),e(jk,mWe),e(Dm,gWe),e(y,hWe),e(y,Gm),e(Gm,Loe),e(Loe,pWe),e(Gm,uWe),e(Gm,Dk),e(Dk,_We),e(Gm,bWe),e(y,vWe),e(y,Om),e(Om,xoe),e(xoe,FWe),e(Om,TWe),e(Om,Gk),e(Gk,MWe),e(Om,EWe),e(y,CWe),e(y,Vm),e(Vm,$oe),e($oe,wWe),e(Vm,AWe),e(Vm,Ok),e(Ok,yWe),e(Vm,LWe),e(y,xWe),e(y,Xm),e(Xm,koe),e(koe,$We),e(Xm,kWe),e(Xm,Vk),e(Vk,SWe),e(Xm,RWe),e(y,PWe),e(y,zm),e(zm,Soe),e(Soe,BWe),e(zm,IWe),e(zm,Xk),e(Xk,qWe),e(zm,NWe),e(y,jWe),e(y,Qm),e(Qm,Roe),e(Roe,DWe),e(Qm,GWe),e(Qm,zk),e(zk,OWe),e(Qm,VWe),e(y,XWe),e(y,Wm),e(Wm,Poe),e(Poe,zWe),e(Wm,QWe),e(Wm,Qk),e(Qk,WWe),e(Wm,HWe),e(y,UWe),e(y,Hm),e(Hm,Boe),e(Boe,JWe),e(Hm,YWe),e(Hm,Wk),e(Wk,KWe),e(Hm,ZWe),e(y,eHe),e(y,Um),e(Um,Ioe),e(Ioe,oHe),e(Um,rHe),e(Um,Hk),e(Hk,tHe),e(Um,aHe),e(y,nHe),e(y,Jm),e(Jm,qoe),e(qoe,sHe),e(Jm,lHe),e(Jm,Uk),e(Uk,iHe),e(Jm,dHe),e(y,cHe),e(y,Ym),e(Ym,Noe),e(Noe,fHe),e(Ym,mHe),e(Ym,Jk),e(Jk,gHe),e(Ym,hHe),e(y,pHe),e(y,Km),e(Km,joe),e(joe,uHe),e(Km,_He),e(Km,Yk),e(Yk,bHe),e(Km,vHe),e(y,FHe),e(y,Zm),e(Zm,Doe),e(Doe,THe),e(Zm,MHe),e(Zm,Kk),e(Kk,EHe),e(Zm,CHe),e(y,wHe),e(y,eg),e(eg,Goe),e(Goe,AHe),e(eg,yHe),e(eg,Zk),e(Zk,LHe),e(eg,xHe),e(y,$He),e(y,og),e(og,Ooe),e(Ooe,kHe),e(og,SHe),e(og,eS),e(eS,RHe),e(og,PHe),e(y,BHe),e(y,rg),e(rg,Voe),e(Voe,IHe),e(rg,qHe),e(rg,oS),e(oS,NHe),e(rg,jHe),e(y,DHe),e(y,tg),e(tg,Xoe),e(Xoe,GHe),e(tg,OHe),e(tg,rS),e(rS,VHe),e(tg,XHe),e(y,zHe),e(y,ag),e(ag,zoe),e(zoe,QHe),e(ag,WHe),e(ag,tS),e(tS,HHe),e(ag,UHe),e(y,JHe),e(y,ng),e(ng,Qoe),e(Qoe,YHe),e(ng,KHe),e(ng,aS),e(aS,ZHe),e(ng,eUe),e(y,oUe),e(y,sg),e(sg,Woe),e(Woe,rUe),e(sg,tUe),e(sg,nS),e(nS,aUe),e(sg,nUe),e(y,sUe),e(y,lg),e(lg,Hoe),e(Hoe,lUe),e(lg,iUe),e(lg,sS),e(sS,dUe),e(lg,cUe),e(y,fUe),e(y,ig),e(ig,Uoe),e(Uoe,mUe),e(ig,gUe),e(ig,lS),e(lS,hUe),e(ig,pUe),e(y,uUe),e(y,dg),e(dg,Joe),e(Joe,_Ue),e(dg,bUe),e(dg,iS),e(iS,vUe),e(dg,FUe),e(y,TUe),e(y,cg),e(cg,Yoe),e(Yoe,MUe),e(cg,EUe),e(cg,dS),e(dS,CUe),e(cg,wUe),e(y,AUe),e(y,fg),e(fg,Koe),e(Koe,yUe),e(fg,LUe),e(fg,cS),e(cS,xUe),e(fg,$Ue),e(y,kUe),e(y,mg),e(mg,Zoe),e(Zoe,SUe),e(mg,RUe),e(mg,fS),e(fS,PUe),e(mg,BUe),e(y,IUe),e(y,gg),e(gg,ere),e(ere,qUe),e(gg,NUe),e(gg,mS),e(mS,jUe),e(gg,DUe),e(y,GUe),e(y,hg),e(hg,ore),e(ore,OUe),e(hg,VUe),e(hg,gS),e(gS,XUe),e(hg,zUe),e(y,QUe),e(y,pg),e(pg,rre),e(rre,WUe),e(pg,HUe),e(pg,hS),e(hS,UUe),e(pg,JUe),e(Er,YUe),M(ug,Er,null),e(Co,KUe),e(Co,_g),M(oA,_g,null),e(_g,ZUe),e(_g,tre),e(tre,eJe),b(f,jBe,_),b(f,bi,_),e(bi,bg),e(bg,are),M(rA,are,null),e(bi,oJe),e(bi,nre),e(nre,rJe),b(f,DBe,_),b(f,wo,_),M(tA,wo,null),e(wo,tJe),e(wo,aA),e(aA,aJe),e(aA,pS),e(pS,nJe),e(aA,sJe),e(wo,lJe),e(wo,nA),e(nA,iJe),e(nA,sre),e(sre,dJe),e(nA,cJe),e(wo,fJe),e(wo,Cr),M(sA,Cr,null),e(Cr,mJe),e(Cr,lre),e(lre,gJe),e(Cr,hJe),e(Cr,Ca),e(Ca,pJe),e(Ca,ire),e(ire,uJe),e(Ca,_Je),e(Ca,dre),e(dre,bJe),e(Ca,vJe),e(Ca,cre),e(cre,FJe),e(Ca,TJe),e(Cr,MJe),e(Cr,k),e(k,kn),e(kn,fre),e(fre,EJe),e(kn,CJe),e(kn,uS),e(uS,wJe),e(kn,AJe),e(kn,_S),e(_S,yJe),e(kn,LJe),e(k,xJe),e(k,Sn),e(Sn,mre),e(mre,$Je),e(Sn,kJe),e(Sn,bS),e(bS,SJe),e(Sn,RJe),e(Sn,vS),e(vS,PJe),e(Sn,BJe),e(k,IJe),e(k,Rn),e(Rn,gre),e(gre,qJe),e(Rn,NJe),e(Rn,FS),e(FS,jJe),e(Rn,DJe),e(Rn,TS),e(TS,GJe),e(Rn,OJe),e(k,VJe),e(k,vg),e(vg,hre),e(hre,XJe),e(vg,zJe),e(vg,MS),e(MS,QJe),e(vg,WJe),e(k,HJe),e(k,Pn),e(Pn,pre),e(pre,UJe),e(Pn,JJe),e(Pn,ES),e(ES,YJe),e(Pn,KJe),e(Pn,CS),e(CS,ZJe),e(Pn,eYe),e(k,oYe),e(k,Fg),e(Fg,ure),e(ure,rYe),e(Fg,tYe),e(Fg,wS),e(wS,aYe),e(Fg,nYe),e(k,sYe),e(k,Tg),e(Tg,_re),e(_re,lYe),e(Tg,iYe),e(Tg,AS),e(AS,dYe),e(Tg,cYe),e(k,fYe),e(k,Mg),e(Mg,bre),e(bre,mYe),e(Mg,gYe),e(Mg,yS),e(yS,hYe),e(Mg,pYe),e(k,uYe),e(k,Bn),e(Bn,vre),e(vre,_Ye),e(Bn,bYe),e(Bn,LS),e(LS,vYe),e(Bn,FYe),e(Bn,xS),e(xS,TYe),e(Bn,MYe),e(k,EYe),e(k,In),e(In,Fre),e(Fre,CYe),e(In,wYe),e(In,$S),e($S,AYe),e(In,yYe),e(In,kS),e(kS,LYe),e(In,xYe),e(k,$Ye),e(k,qn),e(qn,Tre),e(Tre,kYe),e(qn,SYe),e(qn,SS),e(SS,RYe),e(qn,PYe),e(qn,RS),e(RS,BYe),e(qn,IYe),e(k,qYe),e(k,Eg),e(Eg,Mre),e(Mre,NYe),e(Eg,jYe),e(Eg,PS),e(PS,DYe),e(Eg,GYe),e(k,OYe),e(k,Cg),e(Cg,Ere),e(Ere,VYe),e(Cg,XYe),e(Cg,BS),e(BS,zYe),e(Cg,QYe),e(k,WYe),e(k,Nn),e(Nn,Cre),e(Cre,HYe),e(Nn,UYe),e(Nn,IS),e(IS,JYe),e(Nn,YYe),e(Nn,qS),e(qS,KYe),e(Nn,ZYe),e(k,eKe),e(k,wg),e(wg,wre),e(wre,oKe),e(wg,rKe),e(wg,NS),e(NS,tKe),e(wg,aKe),e(k,nKe),e(k,jn),e(jn,Are),e(Are,sKe),e(jn,lKe),e(jn,jS),e(jS,iKe),e(jn,dKe),e(jn,DS),e(DS,cKe),e(jn,fKe),e(k,mKe),e(k,Dn),e(Dn,yre),e(yre,gKe),e(Dn,hKe),e(Dn,GS),e(GS,pKe),e(Dn,uKe),e(Dn,OS),e(OS,_Ke),e(Dn,bKe),e(k,vKe),e(k,Gn),e(Gn,Lre),e(Lre,FKe),e(Gn,TKe),e(Gn,VS),e(VS,MKe),e(Gn,EKe),e(Gn,XS),e(XS,CKe),e(Gn,wKe),e(k,AKe),e(k,Ag),e(Ag,xre),e(xre,yKe),e(Ag,LKe),e(Ag,zS),e(zS,xKe),e(Ag,$Ke),e(k,kKe),e(k,On),e(On,$re),e($re,SKe),e(On,RKe),e(On,QS),e(QS,PKe),e(On,BKe),e(On,WS),e(WS,IKe),e(On,qKe),e(k,NKe),e(k,Vn),e(Vn,kre),e(kre,jKe),e(Vn,DKe),e(Vn,HS),e(HS,GKe),e(Vn,OKe),e(Vn,US),e(US,VKe),e(Vn,XKe),e(k,zKe),e(k,Xn),e(Xn,Sre),e(Sre,QKe),e(Xn,WKe),e(Xn,JS),e(JS,HKe),e(Xn,UKe),e(Xn,YS),e(YS,JKe),e(Xn,YKe),e(k,KKe),e(k,zn),e(zn,Rre),e(Rre,ZKe),e(zn,eZe),e(zn,KS),e(KS,oZe),e(zn,rZe),e(zn,ZS),e(ZS,tZe),e(zn,aZe),e(k,nZe),e(k,Qn),e(Qn,Pre),e(Pre,sZe),e(Qn,lZe),e(Qn,eR),e(eR,iZe),e(Qn,dZe),e(Qn,oR),e(oR,cZe),e(Qn,fZe),e(k,mZe),e(k,Wn),e(Wn,Bre),e(Bre,gZe),e(Wn,hZe),e(Wn,rR),e(rR,pZe),e(Wn,uZe),e(Wn,tR),e(tR,_Ze),e(Wn,bZe),e(k,vZe),e(k,yg),e(yg,Ire),e(Ire,FZe),e(yg,TZe),e(yg,aR),e(aR,MZe),e(yg,EZe),e(k,CZe),e(k,Hn),e(Hn,qre),e(qre,wZe),e(Hn,AZe),e(Hn,nR),e(nR,yZe),e(Hn,LZe),e(Hn,sR),e(sR,xZe),e(Hn,$Ze),e(k,kZe),e(k,Lg),e(Lg,Nre),e(Nre,SZe),e(Lg,RZe),e(Lg,lR),e(lR,PZe),e(Lg,BZe),e(k,IZe),e(k,Un),e(Un,jre),e(jre,qZe),e(Un,NZe),e(Un,iR),e(iR,jZe),e(Un,DZe),e(Un,dR),e(dR,GZe),e(Un,OZe),e(k,VZe),e(k,Jn),e(Jn,Dre),e(Dre,XZe),e(Jn,zZe),e(Jn,cR),e(cR,QZe),e(Jn,WZe),e(Jn,fR),e(fR,HZe),e(Jn,UZe),e(k,JZe),e(k,Yn),e(Yn,Gre),e(Gre,YZe),e(Yn,KZe),e(Yn,mR),e(mR,ZZe),e(Yn,eeo),e(Yn,gR),e(gR,oeo),e(Yn,reo),e(k,teo),e(k,Kn),e(Kn,Ore),e(Ore,aeo),e(Kn,neo),e(Kn,hR),e(hR,seo),e(Kn,leo),e(Kn,pR),e(pR,ieo),e(Kn,deo),e(k,ceo),e(k,Zn),e(Zn,Vre),e(Vre,feo),e(Zn,meo),e(Zn,uR),e(uR,geo),e(Zn,heo),e(Zn,_R),e(_R,peo),e(Zn,ueo),e(k,_eo),e(k,xg),e(xg,Xre),e(Xre,beo),e(xg,veo),e(xg,bR),e(bR,Feo),e(xg,Teo),e(k,Meo),e(k,es),e(es,zre),e(zre,Eeo),e(es,Ceo),e(es,vR),e(vR,weo),e(es,Aeo),e(es,FR),e(FR,yeo),e(es,Leo),e(k,xeo),e(k,os),e(os,Qre),e(Qre,$eo),e(os,keo),e(os,TR),e(TR,Seo),e(os,Reo),e(os,MR),e(MR,Peo),e(os,Beo),e(k,Ieo),e(k,rs),e(rs,Wre),e(Wre,qeo),e(rs,Neo),e(rs,ER),e(ER,jeo),e(rs,Deo),e(rs,CR),e(CR,Geo),e(rs,Oeo),e(k,Veo),e(k,ts),e(ts,Hre),e(Hre,Xeo),e(ts,zeo),e(ts,wR),e(wR,Qeo),e(ts,Weo),e(ts,AR),e(AR,Heo),e(ts,Ueo),e(k,Jeo),e(k,as),e(as,Ure),e(Ure,Yeo),e(as,Keo),e(as,yR),e(yR,Zeo),e(as,eoo),e(as,LR),e(LR,ooo),e(as,roo),e(k,too),e(k,ns),e(ns,Jre),e(Jre,aoo),e(ns,noo),e(ns,xR),e(xR,soo),e(ns,loo),e(ns,$R),e($R,ioo),e(ns,doo),e(k,coo),e(k,$g),e($g,Yre),e(Yre,foo),e($g,moo),e($g,kR),e(kR,goo),e($g,hoo),e(k,poo),e(k,ss),e(ss,Kre),e(Kre,uoo),e(ss,_oo),e(ss,SR),e(SR,boo),e(ss,voo),e(ss,RR),e(RR,Foo),e(ss,Too),e(k,Moo),e(k,kg),e(kg,Zre),e(Zre,Eoo),e(kg,Coo),e(kg,PR),e(PR,woo),e(kg,Aoo),e(k,yoo),e(k,Sg),e(Sg,ete),e(ete,Loo),e(Sg,xoo),e(Sg,BR),e(BR,$oo),e(Sg,koo),e(k,Soo),e(k,ls),e(ls,ote),e(ote,Roo),e(ls,Poo),e(ls,IR),e(IR,Boo),e(ls,Ioo),e(ls,qR),e(qR,qoo),e(ls,Noo),e(k,joo),e(k,is),e(is,rte),e(rte,Doo),e(is,Goo),e(is,NR),e(NR,Ooo),e(is,Voo),e(is,jR),e(jR,Xoo),e(is,zoo),e(k,Qoo),e(k,ds),e(ds,tte),e(tte,Woo),e(ds,Hoo),e(ds,DR),e(DR,Uoo),e(ds,Joo),e(ds,GR),e(GR,Yoo),e(ds,Koo),e(k,Zoo),e(k,Rg),e(Rg,ate),e(ate,ero),e(Rg,oro),e(Rg,OR),e(OR,rro),e(Rg,tro),e(k,aro),e(k,cs),e(cs,nte),e(nte,nro),e(cs,sro),e(cs,VR),e(VR,lro),e(cs,iro),e(cs,XR),e(XR,dro),e(cs,cro),e(k,fro),e(k,fs),e(fs,ste),e(ste,mro),e(fs,gro),e(fs,zR),e(zR,hro),e(fs,pro),e(fs,QR),e(QR,uro),e(fs,_ro),e(k,bro),e(k,ms),e(ms,lte),e(lte,vro),e(ms,Fro),e(ms,WR),e(WR,Tro),e(ms,Mro),e(ms,HR),e(HR,Ero),e(ms,Cro),e(k,wro),e(k,gs),e(gs,ite),e(ite,Aro),e(gs,yro),e(gs,UR),e(UR,Lro),e(gs,xro),e(gs,JR),e(JR,$ro),e(gs,kro),e(k,Sro),e(k,hs),e(hs,dte),e(dte,Rro),e(hs,Pro),e(hs,YR),e(YR,Bro),e(hs,Iro),e(hs,KR),e(KR,qro),e(hs,Nro),e(k,jro),e(k,ps),e(ps,cte),e(cte,Dro),e(ps,Gro),e(ps,ZR),e(ZR,Oro),e(ps,Vro),e(ps,eP),e(eP,Xro),e(ps,zro),e(k,Qro),e(k,us),e(us,fte),e(fte,Wro),e(us,Hro),e(us,oP),e(oP,Uro),e(us,Jro),e(us,rP),e(rP,Yro),e(us,Kro),e(k,Zro),e(k,Pg),e(Pg,mte),e(mte,eto),e(Pg,oto),e(Pg,tP),e(tP,rto),e(Pg,tto),e(k,ato),e(k,Bg),e(Bg,gte),e(gte,nto),e(Bg,sto),e(Bg,aP),e(aP,lto),e(Bg,ito),e(k,dto),e(k,Ig),e(Ig,hte),e(hte,cto),e(Ig,fto),e(Ig,nP),e(nP,mto),e(Ig,gto),e(k,hto),e(k,qg),e(qg,pte),e(pte,pto),e(qg,uto),e(qg,sP),e(sP,_to),e(qg,bto),e(k,vto),e(k,_s),e(_s,ute),e(ute,Fto),e(_s,Tto),e(_s,lP),e(lP,Mto),e(_s,Eto),e(_s,iP),e(iP,Cto),e(_s,wto),e(k,Ato),e(k,Ng),e(Ng,_te),e(_te,yto),e(Ng,Lto),e(Ng,dP),e(dP,xto),e(Ng,$to),e(k,kto),e(k,bs),e(bs,bte),e(bte,Sto),e(bs,Rto),e(bs,cP),e(cP,Pto),e(bs,Bto),e(bs,fP),e(fP,Ito),e(bs,qto),e(k,Nto),e(k,vs),e(vs,vte),e(vte,jto),e(vs,Dto),e(vs,mP),e(mP,Gto),e(vs,Oto),e(vs,gP),e(gP,Vto),e(vs,Xto),e(k,zto),e(k,Fs),e(Fs,Fte),e(Fte,Qto),e(Fs,Wto),e(Fs,hP),e(hP,Hto),e(Fs,Uto),e(Fs,pP),e(pP,Jto),e(Fs,Yto),e(k,Kto),e(k,Ts),e(Ts,Tte),e(Tte,Zto),e(Ts,eao),e(Ts,uP),e(uP,oao),e(Ts,rao),e(Ts,_P),e(_P,tao),e(Ts,aao),e(k,nao),e(k,Ms),e(Ms,Mte),e(Mte,sao),e(Ms,lao),e(Ms,bP),e(bP,iao),e(Ms,dao),e(Ms,vP),e(vP,cao),e(Ms,fao),e(k,mao),e(k,Es),e(Es,Ete),e(Ete,gao),e(Es,hao),e(Es,FP),e(FP,pao),e(Es,uao),e(Es,TP),e(TP,_ao),e(Es,bao),e(k,vao),e(k,jg),e(jg,Cte),e(Cte,Fao),e(jg,Tao),e(jg,MP),e(MP,Mao),e(jg,Eao),e(k,Cao),e(k,Dg),e(Dg,wte),e(wte,wao),e(Dg,Aao),e(Dg,EP),e(EP,yao),e(Dg,Lao),e(k,xao),e(k,Cs),e(Cs,Ate),e(Ate,$ao),e(Cs,kao),e(Cs,CP),e(CP,Sao),e(Cs,Rao),e(Cs,wP),e(wP,Pao),e(Cs,Bao),e(k,Iao),e(k,ws),e(ws,yte),e(yte,qao),e(ws,Nao),e(ws,AP),e(AP,jao),e(ws,Dao),e(ws,yP),e(yP,Gao),e(ws,Oao),e(k,Vao),e(k,As),e(As,Lte),e(Lte,Xao),e(As,zao),e(As,LP),e(LP,Qao),e(As,Wao),e(As,xP),e(xP,Hao),e(As,Uao),e(k,Jao),e(k,Gg),e(Gg,xte),e(xte,Yao),e(Gg,Kao),e(Gg,$P),e($P,Zao),e(Gg,eno),e(k,ono),e(k,Og),e(Og,$te),e($te,rno),e(Og,tno),e(Og,kP),e(kP,ano),e(Og,nno),e(k,sno),e(k,Vg),e(Vg,kte),e(kte,lno),e(Vg,ino),e(Vg,SP),e(SP,dno),e(Vg,cno),e(k,fno),e(k,ys),e(ys,Ste),e(Ste,mno),e(ys,gno),e(ys,RP),e(RP,hno),e(ys,pno),e(ys,PP),e(PP,uno),e(ys,_no),e(k,bno),e(k,Xg),e(Xg,Rte),e(Rte,vno),e(Xg,Fno),e(Xg,BP),e(BP,Tno),e(Xg,Mno),e(k,Eno),e(k,zg),e(zg,Pte),e(Pte,Cno),e(zg,wno),e(zg,IP),e(IP,Ano),e(zg,yno),e(k,Lno),e(k,Ls),e(Ls,Bte),e(Bte,xno),e(Ls,$no),e(Ls,qP),e(qP,kno),e(Ls,Sno),e(Ls,NP),e(NP,Rno),e(Ls,Pno),e(k,Bno),e(k,Qg),e(Qg,Ite),e(Ite,Ino),e(Qg,qno),e(Qg,jP),e(jP,Nno),e(Qg,jno),e(k,Dno),e(k,Wg),e(Wg,qte),e(qte,Gno),e(Wg,Ono),e(Wg,DP),e(DP,Vno),e(Wg,Xno),e(k,zno),e(k,xs),e(xs,Nte),e(Nte,Qno),e(xs,Wno),e(xs,GP),e(GP,Hno),e(xs,Uno),e(xs,OP),e(OP,Jno),e(xs,Yno),e(k,Kno),e(k,$s),e($s,jte),e(jte,Zno),e($s,eso),e($s,VP),e(VP,oso),e($s,rso),e($s,XP),e(XP,tso),e($s,aso),e(k,nso),e(k,ks),e(ks,Dte),e(Dte,sso),e(ks,lso),e(ks,zP),e(zP,iso),e(ks,dso),e(ks,QP),e(QP,cso),e(ks,fso),e(k,mso),e(k,Ss),e(Ss,Gte),e(Gte,gso),e(Ss,hso),e(Ss,WP),e(WP,pso),e(Ss,uso),e(Ss,HP),e(HP,_so),e(Ss,bso),e(Cr,vso),M(Hg,Cr,null),e(wo,Fso),e(wo,Ug),M(lA,Ug,null),e(Ug,Tso),e(Ug,Ote),e(Ote,Mso),b(f,GBe,_),b(f,vi,_),e(vi,Jg),e(Jg,Vte),M(iA,Vte,null),e(vi,Eso),e(vi,Xte),e(Xte,Cso),b(f,OBe,_),b(f,Ao,_),M(dA,Ao,null),e(Ao,wso),e(Ao,cA),e(cA,Aso),e(cA,UP),e(UP,yso),e(cA,Lso),e(Ao,xso),e(Ao,fA),e(fA,$so),e(fA,zte),e(zte,kso),e(fA,Sso),e(Ao,Rso),e(Ao,Qe),M(mA,Qe,null),e(Qe,Pso),e(Qe,Qte),e(Qte,Bso),e(Qe,Iso),e(Qe,wa),e(wa,qso),e(wa,Wte),e(Wte,Nso),e(wa,jso),e(wa,Hte),e(Hte,Dso),e(wa,Gso),e(wa,Ute),e(Ute,Oso),e(wa,Vso),e(Qe,Xso),e(Qe,ae),e(ae,Yg),e(Yg,Jte),e(Jte,zso),e(Yg,Qso),e(Yg,JP),e(JP,Wso),e(Yg,Hso),e(ae,Uso),e(ae,Kg),e(Kg,Yte),e(Yte,Jso),e(Kg,Yso),e(Kg,YP),e(YP,Kso),e(Kg,Zso),e(ae,elo),e(ae,Zg),e(Zg,Kte),e(Kte,olo),e(Zg,rlo),e(Zg,KP),e(KP,tlo),e(Zg,alo),e(ae,nlo),e(ae,eh),e(eh,Zte),e(Zte,slo),e(eh,llo),e(eh,ZP),e(ZP,ilo),e(eh,dlo),e(ae,clo),e(ae,oh),e(oh,eae),e(eae,flo),e(oh,mlo),e(oh,eB),e(eB,glo),e(oh,hlo),e(ae,plo),e(ae,rh),e(rh,oae),e(oae,ulo),e(rh,_lo),e(rh,oB),e(oB,blo),e(rh,vlo),e(ae,Flo),e(ae,th),e(th,rae),e(rae,Tlo),e(th,Mlo),e(th,rB),e(rB,Elo),e(th,Clo),e(ae,wlo),e(ae,ah),e(ah,tae),e(tae,Alo),e(ah,ylo),e(ah,tB),e(tB,Llo),e(ah,xlo),e(ae,$lo),e(ae,nh),e(nh,aae),e(aae,klo),e(nh,Slo),e(nh,aB),e(aB,Rlo),e(nh,Plo),e(ae,Blo),e(ae,sh),e(sh,nae),e(nae,Ilo),e(sh,qlo),e(sh,nB),e(nB,Nlo),e(sh,jlo),e(ae,Dlo),e(ae,lh),e(lh,sae),e(sae,Glo),e(lh,Olo),e(lh,sB),e(sB,Vlo),e(lh,Xlo),e(ae,zlo),e(ae,ih),e(ih,lae),e(lae,Qlo),e(ih,Wlo),e(ih,lB),e(lB,Hlo),e(ih,Ulo),e(ae,Jlo),e(ae,dh),e(dh,iae),e(iae,Ylo),e(dh,Klo),e(dh,iB),e(iB,Zlo),e(dh,eio),e(ae,oio),e(ae,ch),e(ch,dae),e(dae,rio),e(ch,tio),e(ch,dB),e(dB,aio),e(ch,nio),e(ae,sio),e(ae,fh),e(fh,cae),e(cae,lio),e(fh,iio),e(fh,cB),e(cB,dio),e(fh,cio),e(ae,fio),e(ae,mh),e(mh,fae),e(fae,mio),e(mh,gio),e(mh,fB),e(fB,hio),e(mh,pio),e(ae,uio),e(ae,gh),e(gh,mae),e(mae,_io),e(gh,bio),e(gh,mB),e(mB,vio),e(gh,Fio),e(ae,Tio),e(ae,hh),e(hh,gae),e(gae,Mio),e(hh,Eio),e(hh,gB),e(gB,Cio),e(hh,wio),e(ae,Aio),e(ae,ph),e(ph,hae),e(hae,yio),e(ph,Lio),e(ph,hB),e(hB,xio),e(ph,$io),e(ae,kio),e(ae,uh),e(uh,pae),e(pae,Sio),e(uh,Rio),e(uh,pB),e(pB,Pio),e(uh,Bio),e(ae,Iio),e(ae,_h),e(_h,uae),e(uae,qio),e(_h,Nio),e(_h,uB),e(uB,jio),e(_h,Dio),e(ae,Gio),e(ae,bh),e(bh,_ae),e(_ae,Oio),e(bh,Vio),e(bh,_B),e(_B,Xio),e(bh,zio),e(ae,Qio),e(ae,vh),e(vh,bae),e(bae,Wio),e(vh,Hio),e(vh,bB),e(bB,Uio),e(vh,Jio),e(ae,Yio),e(ae,Fh),e(Fh,vae),e(vae,Kio),e(Fh,Zio),e(Fh,vB),e(vB,edo),e(Fh,odo),e(Qe,rdo),M(Th,Qe,null),e(Qe,tdo),M(Mh,Qe,null),e(Ao,ado),e(Ao,Eh),M(gA,Eh,null),e(Eh,ndo),e(Eh,Fae),e(Fae,sdo),b(f,VBe,_),b(f,Fi,_),e(Fi,Ch),e(Ch,Tae),M(hA,Tae,null),e(Fi,ldo),e(Fi,Mae),e(Mae,ido),b(f,XBe,_),b(f,yo,_),M(pA,yo,null),e(yo,ddo),e(yo,uA),e(uA,cdo),e(uA,FB),e(FB,fdo),e(uA,mdo),e(yo,gdo),e(yo,_A),e(_A,hdo),e(_A,Eae),e(Eae,pdo),e(_A,udo),e(yo,_do),e(yo,We),M(bA,We,null),e(We,bdo),e(We,Cae),e(Cae,vdo),e(We,Fdo),e(We,Ti),e(Ti,Tdo),e(Ti,wae),e(wae,Mdo),e(Ti,Edo),e(Ti,Aae),e(Aae,Cdo),e(Ti,wdo),e(We,Ado),e(We,be),e(be,wh),e(wh,yae),e(yae,ydo),e(wh,Ldo),e(wh,TB),e(TB,xdo),e(wh,$do),e(be,kdo),e(be,Ah),e(Ah,Lae),e(Lae,Sdo),e(Ah,Rdo),e(Ah,MB),e(MB,Pdo),e(Ah,Bdo),e(be,Ido),e(be,yh),e(yh,xae),e(xae,qdo),e(yh,Ndo),e(yh,EB),e(EB,jdo),e(yh,Ddo),e(be,Gdo),e(be,Lh),e(Lh,$ae),e($ae,Odo),e(Lh,Vdo),e(Lh,CB),e(CB,Xdo),e(Lh,zdo),e(be,Qdo),e(be,xh),e(xh,kae),e(kae,Wdo),e(xh,Hdo),e(xh,wB),e(wB,Udo),e(xh,Jdo),e(be,Ydo),e(be,$h),e($h,Sae),e(Sae,Kdo),e($h,Zdo),e($h,AB),e(AB,eco),e($h,oco),e(be,rco),e(be,kh),e(kh,Rae),e(Rae,tco),e(kh,aco),e(kh,yB),e(yB,nco),e(kh,sco),e(be,lco),e(be,Sh),e(Sh,Pae),e(Pae,ico),e(Sh,dco),e(Sh,LB),e(LB,cco),e(Sh,fco),e(be,mco),e(be,Rh),e(Rh,Bae),e(Bae,gco),e(Rh,hco),e(Rh,xB),e(xB,pco),e(Rh,uco),e(be,_co),e(be,Ph),e(Ph,Iae),e(Iae,bco),e(Ph,vco),e(Ph,$B),e($B,Fco),e(Ph,Tco),e(be,Mco),e(be,Bh),e(Bh,qae),e(qae,Eco),e(Bh,Cco),e(Bh,kB),e(kB,wco),e(Bh,Aco),e(be,yco),e(be,Ih),e(Ih,Nae),e(Nae,Lco),e(Ih,xco),e(Ih,SB),e(SB,$co),e(Ih,kco),e(be,Sco),e(be,qh),e(qh,jae),e(jae,Rco),e(qh,Pco),e(qh,RB),e(RB,Bco),e(qh,Ico),e(be,qco),e(be,Nh),e(Nh,Dae),e(Dae,Nco),e(Nh,jco),e(Nh,PB),e(PB,Dco),e(Nh,Gco),e(We,Oco),M(jh,We,null),e(We,Vco),M(Dh,We,null),e(yo,Xco),e(yo,Gh),M(vA,Gh,null),e(Gh,zco),e(Gh,Gae),e(Gae,Qco),b(f,zBe,_),b(f,Mi,_),e(Mi,Oh),e(Oh,Oae),M(FA,Oae,null),e(Mi,Wco),e(Mi,Vae),e(Vae,Hco),b(f,QBe,_),b(f,Lo,_),M(TA,Lo,null),e(Lo,Uco),e(Lo,Ei),e(Ei,Jco),e(Ei,BB),e(BB,Yco),e(Ei,Kco),e(Ei,IB),e(IB,Zco),e(Ei,efo),e(Lo,ofo),e(Lo,MA),e(MA,rfo),e(MA,Xae),e(Xae,tfo),e(MA,afo),e(Lo,nfo),e(Lo,ot),M(EA,ot,null),e(ot,sfo),e(ot,zae),e(zae,lfo),e(ot,ifo),e(ot,Ci),e(Ci,dfo),e(Ci,Qae),e(Qae,cfo),e(Ci,ffo),e(Ci,qB),e(qB,mfo),e(Ci,gfo),e(ot,hfo),M(Vh,ot,null),e(Lo,pfo),e(Lo,He),M(CA,He,null),e(He,ufo),e(He,Wae),e(Wae,_fo),e(He,bfo),e(He,Aa),e(Aa,vfo),e(Aa,Hae),e(Hae,Ffo),e(Aa,Tfo),e(Aa,Uae),e(Uae,Mfo),e(Aa,Efo),e(Aa,Jae),e(Jae,Cfo),e(Aa,wfo),e(He,Afo),e(He,x),e(x,Xh),e(Xh,Yae),e(Yae,yfo),e(Xh,Lfo),e(Xh,NB),e(NB,xfo),e(Xh,$fo),e(x,kfo),e(x,zh),e(zh,Kae),e(Kae,Sfo),e(zh,Rfo),e(zh,jB),e(jB,Pfo),e(zh,Bfo),e(x,Ifo),e(x,Qh),e(Qh,Zae),e(Zae,qfo),e(Qh,Nfo),e(Qh,DB),e(DB,jfo),e(Qh,Dfo),e(x,Gfo),e(x,Wh),e(Wh,ene),e(ene,Ofo),e(Wh,Vfo),e(Wh,GB),e(GB,Xfo),e(Wh,zfo),e(x,Qfo),e(x,Hh),e(Hh,one),e(one,Wfo),e(Hh,Hfo),e(Hh,OB),e(OB,Ufo),e(Hh,Jfo),e(x,Yfo),e(x,Uh),e(Uh,rne),e(rne,Kfo),e(Uh,Zfo),e(Uh,VB),e(VB,emo),e(Uh,omo),e(x,rmo),e(x,Jh),e(Jh,tne),e(tne,tmo),e(Jh,amo),e(Jh,XB),e(XB,nmo),e(Jh,smo),e(x,lmo),e(x,Yh),e(Yh,ane),e(ane,imo),e(Yh,dmo),e(Yh,zB),e(zB,cmo),e(Yh,fmo),e(x,mmo),e(x,Kh),e(Kh,nne),e(nne,gmo),e(Kh,hmo),e(Kh,QB),e(QB,pmo),e(Kh,umo),e(x,_mo),e(x,Zh),e(Zh,sne),e(sne,bmo),e(Zh,vmo),e(Zh,WB),e(WB,Fmo),e(Zh,Tmo),e(x,Mmo),e(x,ep),e(ep,lne),e(lne,Emo),e(ep,Cmo),e(ep,HB),e(HB,wmo),e(ep,Amo),e(x,ymo),e(x,op),e(op,ine),e(ine,Lmo),e(op,xmo),e(op,UB),e(UB,$mo),e(op,kmo),e(x,Smo),e(x,rp),e(rp,dne),e(dne,Rmo),e(rp,Pmo),e(rp,JB),e(JB,Bmo),e(rp,Imo),e(x,qmo),e(x,tp),e(tp,cne),e(cne,Nmo),e(tp,jmo),e(tp,YB),e(YB,Dmo),e(tp,Gmo),e(x,Omo),e(x,ap),e(ap,fne),e(fne,Vmo),e(ap,Xmo),e(ap,KB),e(KB,zmo),e(ap,Qmo),e(x,Wmo),e(x,np),e(np,mne),e(mne,Hmo),e(np,Umo),e(np,ZB),e(ZB,Jmo),e(np,Ymo),e(x,Kmo),e(x,sp),e(sp,gne),e(gne,Zmo),e(sp,ego),e(sp,eI),e(eI,ogo),e(sp,rgo),e(x,tgo),e(x,lp),e(lp,hne),e(hne,ago),e(lp,ngo),e(lp,oI),e(oI,sgo),e(lp,lgo),e(x,igo),e(x,ip),e(ip,pne),e(pne,dgo),e(ip,cgo),e(ip,rI),e(rI,fgo),e(ip,mgo),e(x,ggo),e(x,dp),e(dp,une),e(une,hgo),e(dp,pgo),e(dp,tI),e(tI,ugo),e(dp,_go),e(x,bgo),e(x,cp),e(cp,_ne),e(_ne,vgo),e(cp,Fgo),e(cp,aI),e(aI,Tgo),e(cp,Mgo),e(x,Ego),e(x,fp),e(fp,bne),e(bne,Cgo),e(fp,wgo),e(fp,nI),e(nI,Ago),e(fp,ygo),e(x,Lgo),e(x,mp),e(mp,vne),e(vne,xgo),e(mp,$go),e(mp,sI),e(sI,kgo),e(mp,Sgo),e(x,Rgo),e(x,gp),e(gp,Fne),e(Fne,Pgo),e(gp,Bgo),e(gp,lI),e(lI,Igo),e(gp,qgo),e(x,Ngo),e(x,hp),e(hp,Tne),e(Tne,jgo),e(hp,Dgo),e(hp,iI),e(iI,Ggo),e(hp,Ogo),e(x,Vgo),e(x,pp),e(pp,Mne),e(Mne,Xgo),e(pp,zgo),e(pp,dI),e(dI,Qgo),e(pp,Wgo),e(x,Hgo),e(x,up),e(up,Ene),e(Ene,Ugo),e(up,Jgo),e(up,cI),e(cI,Ygo),e(up,Kgo),e(x,Zgo),e(x,_p),e(_p,Cne),e(Cne,eho),e(_p,oho),e(_p,fI),e(fI,rho),e(_p,tho),e(x,aho),e(x,bp),e(bp,wne),e(wne,nho),e(bp,sho),e(bp,mI),e(mI,lho),e(bp,iho),e(x,dho),e(x,vp),e(vp,Ane),e(Ane,cho),e(vp,fho),e(vp,gI),e(gI,mho),e(vp,gho),e(x,hho),e(x,Rs),e(Rs,yne),e(yne,pho),e(Rs,uho),e(Rs,hI),e(hI,_ho),e(Rs,bho),e(Rs,pI),e(pI,vho),e(Rs,Fho),e(x,Tho),e(x,Fp),e(Fp,Lne),e(Lne,Mho),e(Fp,Eho),e(Fp,uI),e(uI,Cho),e(Fp,who),e(x,Aho),e(x,Tp),e(Tp,xne),e(xne,yho),e(Tp,Lho),e(Tp,_I),e(_I,xho),e(Tp,$ho),e(x,kho),e(x,Mp),e(Mp,$ne),e($ne,Sho),e(Mp,Rho),e(Mp,bI),e(bI,Pho),e(Mp,Bho),e(x,Iho),e(x,Ep),e(Ep,kne),e(kne,qho),e(Ep,Nho),e(Ep,vI),e(vI,jho),e(Ep,Dho),e(x,Gho),e(x,Cp),e(Cp,Sne),e(Sne,Oho),e(Cp,Vho),e(Cp,FI),e(FI,Xho),e(Cp,zho),e(x,Qho),e(x,wp),e(wp,Rne),e(Rne,Who),e(wp,Hho),e(wp,TI),e(TI,Uho),e(wp,Jho),e(x,Yho),e(x,Ap),e(Ap,Pne),e(Pne,Kho),e(Ap,Zho),e(Ap,MI),e(MI,epo),e(Ap,opo),e(x,rpo),e(x,yp),e(yp,Bne),e(Bne,tpo),e(yp,apo),e(yp,EI),e(EI,npo),e(yp,spo),e(x,lpo),e(x,Lp),e(Lp,Ine),e(Ine,ipo),e(Lp,dpo),e(Lp,CI),e(CI,cpo),e(Lp,fpo),e(x,mpo),e(x,xp),e(xp,qne),e(qne,gpo),e(xp,hpo),e(xp,wI),e(wI,ppo),e(xp,upo),e(x,_po),e(x,$p),e($p,Nne),e(Nne,bpo),e($p,vpo),e($p,AI),e(AI,Fpo),e($p,Tpo),e(x,Mpo),e(x,kp),e(kp,jne),e(jne,Epo),e(kp,Cpo),e(kp,yI),e(yI,wpo),e(kp,Apo),e(x,ypo),e(x,Sp),e(Sp,Dne),e(Dne,Lpo),e(Sp,xpo),e(Sp,LI),e(LI,$po),e(Sp,kpo),e(x,Spo),e(x,Rp),e(Rp,Gne),e(Gne,Rpo),e(Rp,Ppo),e(Rp,xI),e(xI,Bpo),e(Rp,Ipo),e(x,qpo),e(x,Pp),e(Pp,One),e(One,Npo),e(Pp,jpo),e(Pp,$I),e($I,Dpo),e(Pp,Gpo),e(x,Opo),e(x,Bp),e(Bp,Vne),e(Vne,Vpo),e(Bp,Xpo),e(Bp,kI),e(kI,zpo),e(Bp,Qpo),e(x,Wpo),e(x,Ip),e(Ip,Xne),e(Xne,Hpo),e(Ip,Upo),e(Ip,SI),e(SI,Jpo),e(Ip,Ypo),e(x,Kpo),e(x,qp),e(qp,zne),e(zne,Zpo),e(qp,euo),e(qp,RI),e(RI,ouo),e(qp,ruo),e(x,tuo),e(x,Np),e(Np,Qne),e(Qne,auo),e(Np,nuo),e(Np,PI),e(PI,suo),e(Np,luo),e(x,iuo),e(x,jp),e(jp,Wne),e(Wne,duo),e(jp,cuo),e(jp,BI),e(BI,fuo),e(jp,muo),e(x,guo),e(x,Dp),e(Dp,Hne),e(Hne,huo),e(Dp,puo),e(Dp,II),e(II,uuo),e(Dp,_uo),e(x,buo),e(x,Gp),e(Gp,Une),e(Une,vuo),e(Gp,Fuo),e(Gp,qI),e(qI,Tuo),e(Gp,Muo),e(x,Euo),e(x,Op),e(Op,Jne),e(Jne,Cuo),e(Op,wuo),e(Op,NI),e(NI,Auo),e(Op,yuo),e(x,Luo),e(x,Vp),e(Vp,Yne),e(Yne,xuo),e(Vp,$uo),e(Vp,jI),e(jI,kuo),e(Vp,Suo),e(x,Ruo),e(x,Xp),e(Xp,Kne),e(Kne,Puo),e(Xp,Buo),e(Xp,DI),e(DI,Iuo),e(Xp,quo),e(x,Nuo),e(x,zp),e(zp,Zne),e(Zne,juo),e(zp,Duo),e(zp,GI),e(GI,Guo),e(zp,Ouo),e(x,Vuo),e(x,Qp),e(Qp,ese),e(ese,Xuo),e(Qp,zuo),e(Qp,OI),e(OI,Quo),e(Qp,Wuo),e(x,Huo),e(x,Wp),e(Wp,ose),e(ose,Uuo),e(Wp,Juo),e(Wp,VI),e(VI,Yuo),e(Wp,Kuo),e(x,Zuo),e(x,Hp),e(Hp,rse),e(rse,e_o),e(Hp,o_o),e(Hp,XI),e(XI,r_o),e(Hp,t_o),e(x,a_o),e(x,Up),e(Up,tse),e(tse,n_o),e(Up,s_o),e(Up,zI),e(zI,l_o),e(Up,i_o),e(x,d_o),e(x,Jp),e(Jp,ase),e(ase,c_o),e(Jp,f_o),e(Jp,QI),e(QI,m_o),e(Jp,g_o),e(x,h_o),e(x,Yp),e(Yp,nse),e(nse,p_o),e(Yp,u_o),e(Yp,WI),e(WI,__o),e(Yp,b_o),e(x,v_o),e(x,Kp),e(Kp,sse),e(sse,F_o),e(Kp,T_o),e(Kp,HI),e(HI,M_o),e(Kp,E_o),e(x,C_o),e(x,Zp),e(Zp,lse),e(lse,w_o),e(Zp,A_o),e(Zp,UI),e(UI,y_o),e(Zp,L_o),e(x,x_o),e(x,eu),e(eu,ise),e(ise,$_o),e(eu,k_o),e(eu,JI),e(JI,S_o),e(eu,R_o),e(x,P_o),e(x,ou),e(ou,dse),e(dse,B_o),e(ou,I_o),e(ou,YI),e(YI,q_o),e(ou,N_o),e(x,j_o),e(x,ru),e(ru,cse),e(cse,D_o),e(ru,G_o),e(ru,KI),e(KI,O_o),e(ru,V_o),e(x,X_o),e(x,tu),e(tu,fse),e(fse,z_o),e(tu,Q_o),e(tu,ZI),e(ZI,W_o),e(tu,H_o),e(x,U_o),e(x,au),e(au,mse),e(mse,J_o),e(au,Y_o),e(au,eq),e(eq,K_o),e(au,Z_o),e(x,e1o),e(x,nu),e(nu,gse),e(gse,o1o),e(nu,r1o),e(nu,oq),e(oq,t1o),e(nu,a1o),e(x,n1o),e(x,su),e(su,hse),e(hse,s1o),e(su,l1o),e(su,rq),e(rq,i1o),e(su,d1o),e(x,c1o),e(x,lu),e(lu,pse),e(pse,f1o),e(lu,m1o),e(lu,tq),e(tq,g1o),e(lu,h1o),e(x,p1o),e(x,iu),e(iu,use),e(use,u1o),e(iu,_1o),e(iu,aq),e(aq,b1o),e(iu,v1o),e(x,F1o),e(x,du),e(du,_se),e(_se,T1o),e(du,M1o),e(du,nq),e(nq,E1o),e(du,C1o),e(x,w1o),e(x,cu),e(cu,bse),e(bse,A1o),e(cu,y1o),e(cu,sq),e(sq,L1o),e(cu,x1o),e(x,$1o),e(x,fu),e(fu,vse),e(vse,k1o),e(fu,S1o),e(fu,lq),e(lq,R1o),e(fu,P1o),e(x,B1o),e(x,mu),e(mu,Fse),e(Fse,I1o),e(mu,q1o),e(mu,iq),e(iq,N1o),e(mu,j1o),e(x,D1o),e(x,gu),e(gu,Tse),e(Tse,G1o),e(gu,O1o),e(gu,dq),e(dq,V1o),e(gu,X1o),e(x,z1o),e(x,hu),e(hu,Mse),e(Mse,Q1o),e(hu,W1o),e(hu,cq),e(cq,H1o),e(hu,U1o),e(x,J1o),e(x,pu),e(pu,Ese),e(Ese,Y1o),e(pu,K1o),e(pu,fq),e(fq,Z1o),e(pu,e8o),e(x,o8o),e(x,uu),e(uu,Cse),e(Cse,r8o),e(uu,t8o),e(uu,mq),e(mq,a8o),e(uu,n8o),e(x,s8o),e(x,_u),e(_u,wse),e(wse,l8o),e(_u,i8o),e(_u,gq),e(gq,d8o),e(_u,c8o),e(x,f8o),e(x,bu),e(bu,Ase),e(Ase,m8o),e(bu,g8o),e(bu,hq),e(hq,h8o),e(bu,p8o),e(x,u8o),e(x,vu),e(vu,yse),e(yse,_8o),e(vu,b8o),e(vu,pq),e(pq,v8o),e(vu,F8o),e(x,T8o),e(x,Fu),e(Fu,Lse),e(Lse,M8o),e(Fu,E8o),e(Fu,uq),e(uq,C8o),e(Fu,w8o),e(x,A8o),e(x,Tu),e(Tu,xse),e(xse,y8o),e(Tu,L8o),e(Tu,_q),e(_q,x8o),e(Tu,$8o),e(x,k8o),e(x,Mu),e(Mu,$se),e($se,S8o),e(Mu,R8o),e(Mu,bq),e(bq,P8o),e(Mu,B8o),e(x,I8o),e(x,Eu),e(Eu,kse),e(kse,q8o),e(Eu,N8o),e(Eu,vq),e(vq,j8o),e(Eu,D8o),e(x,G8o),e(x,Cu),e(Cu,Sse),e(Sse,O8o),e(Cu,V8o),e(Cu,Fq),e(Fq,X8o),e(Cu,z8o),e(x,Q8o),e(x,wu),e(wu,Rse),e(Rse,W8o),e(wu,H8o),e(wu,Tq),e(Tq,U8o),e(wu,J8o),e(x,Y8o),e(x,Au),e(Au,Pse),e(Pse,K8o),e(Au,Z8o),e(Au,Mq),e(Mq,ebo),e(Au,obo),e(x,rbo),e(x,yu),e(yu,Bse),e(Bse,tbo),e(yu,abo),e(yu,Eq),e(Eq,nbo),e(yu,sbo),e(x,lbo),e(x,Lu),e(Lu,Ise),e(Ise,ibo),e(Lu,dbo),e(Lu,Cq),e(Cq,cbo),e(Lu,fbo),e(x,mbo),e(x,xu),e(xu,qse),e(qse,gbo),e(xu,hbo),e(xu,wq),e(wq,pbo),e(xu,ubo),e(x,_bo),e(x,$u),e($u,Nse),e(Nse,bbo),e($u,vbo),e($u,Aq),e(Aq,Fbo),e($u,Tbo),e(He,Mbo),e(He,ku),e(ku,Ebo),e(ku,jse),e(jse,Cbo),e(ku,wbo),e(ku,Dse),e(Dse,Abo),e(He,ybo),M(Su,He,null),b(f,WBe,_),b(f,wi,_),e(wi,Ru),e(Ru,Gse),M(wA,Gse,null),e(wi,Lbo),e(wi,Ose),e(Ose,xbo),b(f,HBe,_),b(f,xo,_),M(AA,xo,null),e(xo,$bo),e(xo,Ai),e(Ai,kbo),e(Ai,yq),e(yq,Sbo),e(Ai,Rbo),e(Ai,Lq),e(Lq,Pbo),e(Ai,Bbo),e(xo,Ibo),e(xo,yA),e(yA,qbo),e(yA,Vse),e(Vse,Nbo),e(yA,jbo),e(xo,Dbo),e(xo,rt),M(LA,rt,null),e(rt,Gbo),e(rt,Xse),e(Xse,Obo),e(rt,Vbo),e(rt,yi),e(yi,Xbo),e(yi,zse),e(zse,zbo),e(yi,Qbo),e(yi,xq),e(xq,Wbo),e(yi,Hbo),e(rt,Ubo),M(Pu,rt,null),e(xo,Jbo),e(xo,Ue),M(xA,Ue,null),e(Ue,Ybo),e(Ue,Qse),e(Qse,Kbo),e(Ue,Zbo),e(Ue,ya),e(ya,e2o),e(ya,Wse),e(Wse,o2o),e(ya,r2o),e(ya,Hse),e(Hse,t2o),e(ya,a2o),e(ya,Use),e(Use,n2o),e(ya,s2o),e(Ue,l2o),e(Ue,G),e(G,Bu),e(Bu,Jse),e(Jse,i2o),e(Bu,d2o),e(Bu,$q),e($q,c2o),e(Bu,f2o),e(G,m2o),e(G,Iu),e(Iu,Yse),e(Yse,g2o),e(Iu,h2o),e(Iu,kq),e(kq,p2o),e(Iu,u2o),e(G,_2o),e(G,qu),e(qu,Kse),e(Kse,b2o),e(qu,v2o),e(qu,Sq),e(Sq,F2o),e(qu,T2o),e(G,M2o),e(G,Nu),e(Nu,Zse),e(Zse,E2o),e(Nu,C2o),e(Nu,Rq),e(Rq,w2o),e(Nu,A2o),e(G,y2o),e(G,ju),e(ju,ele),e(ele,L2o),e(ju,x2o),e(ju,Pq),e(Pq,$2o),e(ju,k2o),e(G,S2o),e(G,Du),e(Du,ole),e(ole,R2o),e(Du,P2o),e(Du,Bq),e(Bq,B2o),e(Du,I2o),e(G,q2o),e(G,Gu),e(Gu,rle),e(rle,N2o),e(Gu,j2o),e(Gu,Iq),e(Iq,D2o),e(Gu,G2o),e(G,O2o),e(G,Ou),e(Ou,tle),e(tle,V2o),e(Ou,X2o),e(Ou,qq),e(qq,z2o),e(Ou,Q2o),e(G,W2o),e(G,Vu),e(Vu,ale),e(ale,H2o),e(Vu,U2o),e(Vu,Nq),e(Nq,J2o),e(Vu,Y2o),e(G,K2o),e(G,Xu),e(Xu,nle),e(nle,Z2o),e(Xu,evo),e(Xu,jq),e(jq,ovo),e(Xu,rvo),e(G,tvo),e(G,zu),e(zu,sle),e(sle,avo),e(zu,nvo),e(zu,Dq),e(Dq,svo),e(zu,lvo),e(G,ivo),e(G,Qu),e(Qu,lle),e(lle,dvo),e(Qu,cvo),e(Qu,Gq),e(Gq,fvo),e(Qu,mvo),e(G,gvo),e(G,Wu),e(Wu,ile),e(ile,hvo),e(Wu,pvo),e(Wu,Oq),e(Oq,uvo),e(Wu,_vo),e(G,bvo),e(G,Hu),e(Hu,dle),e(dle,vvo),e(Hu,Fvo),e(Hu,Vq),e(Vq,Tvo),e(Hu,Mvo),e(G,Evo),e(G,Uu),e(Uu,cle),e(cle,Cvo),e(Uu,wvo),e(Uu,Xq),e(Xq,Avo),e(Uu,yvo),e(G,Lvo),e(G,Ju),e(Ju,fle),e(fle,xvo),e(Ju,$vo),e(Ju,zq),e(zq,kvo),e(Ju,Svo),e(G,Rvo),e(G,Yu),e(Yu,mle),e(mle,Pvo),e(Yu,Bvo),e(Yu,Qq),e(Qq,Ivo),e(Yu,qvo),e(G,Nvo),e(G,Ku),e(Ku,gle),e(gle,jvo),e(Ku,Dvo),e(Ku,Wq),e(Wq,Gvo),e(Ku,Ovo),e(G,Vvo),e(G,Zu),e(Zu,hle),e(hle,Xvo),e(Zu,zvo),e(Zu,Hq),e(Hq,Qvo),e(Zu,Wvo),e(G,Hvo),e(G,e_),e(e_,ple),e(ple,Uvo),e(e_,Jvo),e(e_,Uq),e(Uq,Yvo),e(e_,Kvo),e(G,Zvo),e(G,o_),e(o_,ule),e(ule,eFo),e(o_,oFo),e(o_,Jq),e(Jq,rFo),e(o_,tFo),e(G,aFo),e(G,r_),e(r_,_le),e(_le,nFo),e(r_,sFo),e(r_,Yq),e(Yq,lFo),e(r_,iFo),e(G,dFo),e(G,t_),e(t_,ble),e(ble,cFo),e(t_,fFo),e(t_,Kq),e(Kq,mFo),e(t_,gFo),e(G,hFo),e(G,a_),e(a_,vle),e(vle,pFo),e(a_,uFo),e(a_,Zq),e(Zq,_Fo),e(a_,bFo),e(G,vFo),e(G,n_),e(n_,Fle),e(Fle,FFo),e(n_,TFo),e(n_,eN),e(eN,MFo),e(n_,EFo),e(G,CFo),e(G,s_),e(s_,Tle),e(Tle,wFo),e(s_,AFo),e(s_,oN),e(oN,yFo),e(s_,LFo),e(G,xFo),e(G,l_),e(l_,Mle),e(Mle,$Fo),e(l_,kFo),e(l_,rN),e(rN,SFo),e(l_,RFo),e(G,PFo),e(G,i_),e(i_,Ele),e(Ele,BFo),e(i_,IFo),e(i_,tN),e(tN,qFo),e(i_,NFo),e(G,jFo),e(G,d_),e(d_,Cle),e(Cle,DFo),e(d_,GFo),e(d_,aN),e(aN,OFo),e(d_,VFo),e(G,XFo),e(G,c_),e(c_,wle),e(wle,zFo),e(c_,QFo),e(c_,nN),e(nN,WFo),e(c_,HFo),e(G,UFo),e(G,f_),e(f_,Ale),e(Ale,JFo),e(f_,YFo),e(f_,sN),e(sN,KFo),e(f_,ZFo),e(G,e0o),e(G,m_),e(m_,yle),e(yle,o0o),e(m_,r0o),e(m_,lN),e(lN,t0o),e(m_,a0o),e(G,n0o),e(G,g_),e(g_,Lle),e(Lle,s0o),e(g_,l0o),e(g_,iN),e(iN,i0o),e(g_,d0o),e(G,c0o),e(G,h_),e(h_,xle),e(xle,f0o),e(h_,m0o),e(h_,dN),e(dN,g0o),e(h_,h0o),e(G,p0o),e(G,p_),e(p_,$le),e($le,u0o),e(p_,_0o),e(p_,cN),e(cN,b0o),e(p_,v0o),e(G,F0o),e(G,u_),e(u_,kle),e(kle,T0o),e(u_,M0o),e(u_,fN),e(fN,E0o),e(u_,C0o),e(G,w0o),e(G,__),e(__,Sle),e(Sle,A0o),e(__,y0o),e(__,mN),e(mN,L0o),e(__,x0o),e(G,$0o),e(G,b_),e(b_,Rle),e(Rle,k0o),e(b_,S0o),e(b_,gN),e(gN,R0o),e(b_,P0o),e(G,B0o),e(G,v_),e(v_,Ple),e(Ple,I0o),e(v_,q0o),e(v_,hN),e(hN,N0o),e(v_,j0o),e(Ue,D0o),e(Ue,F_),e(F_,G0o),e(F_,Ble),e(Ble,O0o),e(F_,V0o),e(F_,Ile),e(Ile,X0o),e(Ue,z0o),M(T_,Ue,null),b(f,UBe,_),b(f,Li,_),e(Li,M_),e(M_,qle),M($A,qle,null),e(Li,Q0o),e(Li,Nle),e(Nle,W0o),b(f,JBe,_),b(f,$o,_),M(kA,$o,null),e($o,H0o),e($o,xi),e(xi,U0o),e(xi,pN),e(pN,J0o),e(xi,Y0o),e(xi,uN),e(uN,K0o),e(xi,Z0o),e($o,eTo),e($o,SA),e(SA,oTo),e(SA,jle),e(jle,rTo),e(SA,tTo),e($o,aTo),e($o,tt),M(RA,tt,null),e(tt,nTo),e(tt,Dle),e(Dle,sTo),e(tt,lTo),e(tt,$i),e($i,iTo),e($i,Gle),e(Gle,dTo),e($i,cTo),e($i,_N),e(_N,fTo),e($i,mTo),e(tt,gTo),M(E_,tt,null),e($o,hTo),e($o,Je),M(PA,Je,null),e(Je,pTo),e(Je,Ole),e(Ole,uTo),e(Je,_To),e(Je,La),e(La,bTo),e(La,Vle),e(Vle,vTo),e(La,FTo),e(La,Xle),e(Xle,TTo),e(La,MTo),e(La,zle),e(zle,ETo),e(La,CTo),e(Je,wTo),e(Je,z),e(z,C_),e(C_,Qle),e(Qle,ATo),e(C_,yTo),e(C_,bN),e(bN,LTo),e(C_,xTo),e(z,$To),e(z,w_),e(w_,Wle),e(Wle,kTo),e(w_,STo),e(w_,vN),e(vN,RTo),e(w_,PTo),e(z,BTo),e(z,A_),e(A_,Hle),e(Hle,ITo),e(A_,qTo),e(A_,FN),e(FN,NTo),e(A_,jTo),e(z,DTo),e(z,y_),e(y_,Ule),e(Ule,GTo),e(y_,OTo),e(y_,TN),e(TN,VTo),e(y_,XTo),e(z,zTo),e(z,L_),e(L_,Jle),e(Jle,QTo),e(L_,WTo),e(L_,MN),e(MN,HTo),e(L_,UTo),e(z,JTo),e(z,x_),e(x_,Yle),e(Yle,YTo),e(x_,KTo),e(x_,EN),e(EN,ZTo),e(x_,e7o),e(z,o7o),e(z,$_),e($_,Kle),e(Kle,r7o),e($_,t7o),e($_,CN),e(CN,a7o),e($_,n7o),e(z,s7o),e(z,k_),e(k_,Zle),e(Zle,l7o),e(k_,i7o),e(k_,wN),e(wN,d7o),e(k_,c7o),e(z,f7o),e(z,S_),e(S_,eie),e(eie,m7o),e(S_,g7o),e(S_,AN),e(AN,h7o),e(S_,p7o),e(z,u7o),e(z,R_),e(R_,oie),e(oie,_7o),e(R_,b7o),e(R_,yN),e(yN,v7o),e(R_,F7o),e(z,T7o),e(z,P_),e(P_,rie),e(rie,M7o),e(P_,E7o),e(P_,LN),e(LN,C7o),e(P_,w7o),e(z,A7o),e(z,B_),e(B_,tie),e(tie,y7o),e(B_,L7o),e(B_,xN),e(xN,x7o),e(B_,$7o),e(z,k7o),e(z,I_),e(I_,aie),e(aie,S7o),e(I_,R7o),e(I_,$N),e($N,P7o),e(I_,B7o),e(z,I7o),e(z,q_),e(q_,nie),e(nie,q7o),e(q_,N7o),e(q_,kN),e(kN,j7o),e(q_,D7o),e(z,G7o),e(z,N_),e(N_,sie),e(sie,O7o),e(N_,V7o),e(N_,SN),e(SN,X7o),e(N_,z7o),e(z,Q7o),e(z,j_),e(j_,lie),e(lie,W7o),e(j_,H7o),e(j_,RN),e(RN,U7o),e(j_,J7o),e(z,Y7o),e(z,D_),e(D_,iie),e(iie,K7o),e(D_,Z7o),e(D_,PN),e(PN,eMo),e(D_,oMo),e(z,rMo),e(z,G_),e(G_,die),e(die,tMo),e(G_,aMo),e(G_,BN),e(BN,nMo),e(G_,sMo),e(z,lMo),e(z,O_),e(O_,cie),e(cie,iMo),e(O_,dMo),e(O_,IN),e(IN,cMo),e(O_,fMo),e(z,mMo),e(z,V_),e(V_,fie),e(fie,gMo),e(V_,hMo),e(V_,qN),e(qN,pMo),e(V_,uMo),e(z,_Mo),e(z,X_),e(X_,mie),e(mie,bMo),e(X_,vMo),e(X_,NN),e(NN,FMo),e(X_,TMo),e(z,MMo),e(z,z_),e(z_,gie),e(gie,EMo),e(z_,CMo),e(z_,jN),e(jN,wMo),e(z_,AMo),e(z,yMo),e(z,Q_),e(Q_,hie),e(hie,LMo),e(Q_,xMo),e(Q_,DN),e(DN,$Mo),e(Q_,kMo),e(z,SMo),e(z,W_),e(W_,pie),e(pie,RMo),e(W_,PMo),e(W_,GN),e(GN,BMo),e(W_,IMo),e(z,qMo),e(z,H_),e(H_,uie),e(uie,NMo),e(H_,jMo),e(H_,ON),e(ON,DMo),e(H_,GMo),e(z,OMo),e(z,U_),e(U_,_ie),e(_ie,VMo),e(U_,XMo),e(U_,VN),e(VN,zMo),e(U_,QMo),e(z,WMo),e(z,J_),e(J_,bie),e(bie,HMo),e(J_,UMo),e(J_,XN),e(XN,JMo),e(J_,YMo),e(z,KMo),e(z,Y_),e(Y_,vie),e(vie,ZMo),e(Y_,e4o),e(Y_,zN),e(zN,o4o),e(Y_,r4o),e(z,t4o),e(z,K_),e(K_,Fie),e(Fie,a4o),e(K_,n4o),e(K_,QN),e(QN,s4o),e(K_,l4o),e(z,i4o),e(z,Z_),e(Z_,Tie),e(Tie,d4o),e(Z_,c4o),e(Z_,WN),e(WN,f4o),e(Z_,m4o),e(z,g4o),e(z,e1),e(e1,Mie),e(Mie,h4o),e(e1,p4o),e(e1,HN),e(HN,u4o),e(e1,_4o),e(z,b4o),e(z,o1),e(o1,Eie),e(Eie,v4o),e(o1,F4o),e(o1,UN),e(UN,T4o),e(o1,M4o),e(z,E4o),e(z,r1),e(r1,Cie),e(Cie,C4o),e(r1,w4o),e(r1,JN),e(JN,A4o),e(r1,y4o),e(z,L4o),e(z,t1),e(t1,wie),e(wie,x4o),e(t1,$4o),e(t1,YN),e(YN,k4o),e(t1,S4o),e(z,R4o),e(z,a1),e(a1,Aie),e(Aie,P4o),e(a1,B4o),e(a1,KN),e(KN,I4o),e(a1,q4o),e(z,N4o),e(z,n1),e(n1,yie),e(yie,j4o),e(n1,D4o),e(n1,ZN),e(ZN,G4o),e(n1,O4o),e(Je,V4o),e(Je,s1),e(s1,X4o),e(s1,Lie),e(Lie,z4o),e(s1,Q4o),e(s1,xie),e(xie,W4o),e(Je,H4o),M(l1,Je,null),b(f,YBe,_),b(f,ki,_),e(ki,i1),e(i1,$ie),M(BA,$ie,null),e(ki,U4o),e(ki,kie),e(kie,J4o),b(f,KBe,_),b(f,ko,_),M(IA,ko,null),e(ko,Y4o),e(ko,Si),e(Si,K4o),e(Si,ej),e(ej,Z4o),e(Si,eEo),e(Si,oj),e(oj,oEo),e(Si,rEo),e(ko,tEo),e(ko,qA),e(qA,aEo),e(qA,Sie),e(Sie,nEo),e(qA,sEo),e(ko,lEo),e(ko,at),M(NA,at,null),e(at,iEo),e(at,Rie),e(Rie,dEo),e(at,cEo),e(at,Ri),e(Ri,fEo),e(Ri,Pie),e(Pie,mEo),e(Ri,gEo),e(Ri,rj),e(rj,hEo),e(Ri,pEo),e(at,uEo),M(d1,at,null),e(ko,_Eo),e(ko,Ye),M(jA,Ye,null),e(Ye,bEo),e(Ye,Bie),e(Bie,vEo),e(Ye,FEo),e(Ye,xa),e(xa,TEo),e(xa,Iie),e(Iie,MEo),e(xa,EEo),e(xa,qie),e(qie,CEo),e(xa,wEo),e(xa,Nie),e(Nie,AEo),e(xa,yEo),e(Ye,LEo),e(Ye,Q),e(Q,c1),e(c1,jie),e(jie,xEo),e(c1,$Eo),e(c1,tj),e(tj,kEo),e(c1,SEo),e(Q,REo),e(Q,f1),e(f1,Die),e(Die,PEo),e(f1,BEo),e(f1,aj),e(aj,IEo),e(f1,qEo),e(Q,NEo),e(Q,m1),e(m1,Gie),e(Gie,jEo),e(m1,DEo),e(m1,nj),e(nj,GEo),e(m1,OEo),e(Q,VEo),e(Q,g1),e(g1,Oie),e(Oie,XEo),e(g1,zEo),e(g1,sj),e(sj,QEo),e(g1,WEo),e(Q,HEo),e(Q,h1),e(h1,Vie),e(Vie,UEo),e(h1,JEo),e(h1,lj),e(lj,YEo),e(h1,KEo),e(Q,ZEo),e(Q,p1),e(p1,Xie),e(Xie,e5o),e(p1,o5o),e(p1,ij),e(ij,r5o),e(p1,t5o),e(Q,a5o),e(Q,u1),e(u1,zie),e(zie,n5o),e(u1,s5o),e(u1,dj),e(dj,l5o),e(u1,i5o),e(Q,d5o),e(Q,_1),e(_1,Qie),e(Qie,c5o),e(_1,f5o),e(_1,cj),e(cj,m5o),e(_1,g5o),e(Q,h5o),e(Q,b1),e(b1,Wie),e(Wie,p5o),e(b1,u5o),e(b1,fj),e(fj,_5o),e(b1,b5o),e(Q,v5o),e(Q,v1),e(v1,Hie),e(Hie,F5o),e(v1,T5o),e(v1,mj),e(mj,M5o),e(v1,E5o),e(Q,C5o),e(Q,F1),e(F1,Uie),e(Uie,w5o),e(F1,A5o),e(F1,gj),e(gj,y5o),e(F1,L5o),e(Q,x5o),e(Q,T1),e(T1,Jie),e(Jie,$5o),e(T1,k5o),e(T1,hj),e(hj,S5o),e(T1,R5o),e(Q,P5o),e(Q,M1),e(M1,Yie),e(Yie,B5o),e(M1,I5o),e(M1,pj),e(pj,q5o),e(M1,N5o),e(Q,j5o),e(Q,E1),e(E1,Kie),e(Kie,D5o),e(E1,G5o),e(E1,uj),e(uj,O5o),e(E1,V5o),e(Q,X5o),e(Q,C1),e(C1,Zie),e(Zie,z5o),e(C1,Q5o),e(C1,_j),e(_j,W5o),e(C1,H5o),e(Q,U5o),e(Q,w1),e(w1,ede),e(ede,J5o),e(w1,Y5o),e(w1,bj),e(bj,K5o),e(w1,Z5o),e(Q,eCo),e(Q,A1),e(A1,ode),e(ode,oCo),e(A1,rCo),e(A1,vj),e(vj,tCo),e(A1,aCo),e(Q,nCo),e(Q,y1),e(y1,rde),e(rde,sCo),e(y1,lCo),e(y1,Fj),e(Fj,iCo),e(y1,dCo),e(Q,cCo),e(Q,L1),e(L1,tde),e(tde,fCo),e(L1,mCo),e(L1,Tj),e(Tj,gCo),e(L1,hCo),e(Q,pCo),e(Q,x1),e(x1,ade),e(ade,uCo),e(x1,_Co),e(x1,Mj),e(Mj,bCo),e(x1,vCo),e(Q,FCo),e(Q,$1),e($1,nde),e(nde,TCo),e($1,MCo),e($1,Ej),e(Ej,ECo),e($1,CCo),e(Q,wCo),e(Q,k1),e(k1,sde),e(sde,ACo),e(k1,yCo),e(k1,Cj),e(Cj,LCo),e(k1,xCo),e(Q,$Co),e(Q,S1),e(S1,lde),e(lde,kCo),e(S1,SCo),e(S1,wj),e(wj,RCo),e(S1,PCo),e(Q,BCo),e(Q,R1),e(R1,ide),e(ide,ICo),e(R1,qCo),e(R1,Aj),e(Aj,NCo),e(R1,jCo),e(Q,DCo),e(Q,P1),e(P1,dde),e(dde,GCo),e(P1,OCo),e(P1,yj),e(yj,VCo),e(P1,XCo),e(Q,zCo),e(Q,B1),e(B1,cde),e(cde,QCo),e(B1,WCo),e(B1,Lj),e(Lj,HCo),e(B1,UCo),e(Q,JCo),e(Q,I1),e(I1,fde),e(fde,YCo),e(I1,KCo),e(I1,xj),e(xj,ZCo),e(I1,e3o),e(Q,o3o),e(Q,q1),e(q1,mde),e(mde,r3o),e(q1,t3o),e(q1,$j),e($j,a3o),e(q1,n3o),e(Q,s3o),e(Q,N1),e(N1,gde),e(gde,l3o),e(N1,i3o),e(N1,kj),e(kj,d3o),e(N1,c3o),e(Q,f3o),e(Q,j1),e(j1,hde),e(hde,m3o),e(j1,g3o),e(j1,Sj),e(Sj,h3o),e(j1,p3o),e(Q,u3o),e(Q,D1),e(D1,pde),e(pde,_3o),e(D1,b3o),e(D1,ude),e(ude,v3o),e(D1,F3o),e(Q,T3o),e(Q,G1),e(G1,_de),e(_de,M3o),e(G1,E3o),e(G1,Rj),e(Rj,C3o),e(G1,w3o),e(Q,A3o),e(Q,O1),e(O1,bde),e(bde,y3o),e(O1,L3o),e(O1,Pj),e(Pj,x3o),e(O1,$3o),e(Q,k3o),e(Q,V1),e(V1,vde),e(vde,S3o),e(V1,R3o),e(V1,Bj),e(Bj,P3o),e(V1,B3o),e(Q,I3o),e(Q,X1),e(X1,Fde),e(Fde,q3o),e(X1,N3o),e(X1,Ij),e(Ij,j3o),e(X1,D3o),e(Ye,G3o),e(Ye,z1),e(z1,O3o),e(z1,Tde),e(Tde,V3o),e(z1,X3o),e(z1,Mde),e(Mde,z3o),e(Ye,Q3o),M(Q1,Ye,null),b(f,ZBe,_),b(f,Pi,_),e(Pi,W1),e(W1,Ede),M(DA,Ede,null),e(Pi,W3o),e(Pi,Cde),e(Cde,H3o),b(f,eIe,_),b(f,So,_),M(GA,So,null),e(So,U3o),e(So,Bi),e(Bi,J3o),e(Bi,qj),e(qj,Y3o),e(Bi,K3o),e(Bi,Nj),e(Nj,Z3o),e(Bi,ewo),e(So,owo),e(So,OA),e(OA,rwo),e(OA,wde),e(wde,two),e(OA,awo),e(So,nwo),e(So,nt),M(VA,nt,null),e(nt,swo),e(nt,Ade),e(Ade,lwo),e(nt,iwo),e(nt,Ii),e(Ii,dwo),e(Ii,yde),e(yde,cwo),e(Ii,fwo),e(Ii,jj),e(jj,mwo),e(Ii,gwo),e(nt,hwo),M(H1,nt,null),e(So,pwo),e(So,Ke),M(XA,Ke,null),e(Ke,uwo),e(Ke,Lde),e(Lde,_wo),e(Ke,bwo),e(Ke,$a),e($a,vwo),e($a,xde),e(xde,Fwo),e($a,Two),e($a,$de),e($de,Mwo),e($a,Ewo),e($a,kde),e(kde,Cwo),e($a,wwo),e(Ke,Awo),e(Ke,he),e(he,U1),e(U1,Sde),e(Sde,ywo),e(U1,Lwo),e(U1,Dj),e(Dj,xwo),e(U1,$wo),e(he,kwo),e(he,J1),e(J1,Rde),e(Rde,Swo),e(J1,Rwo),e(J1,Gj),e(Gj,Pwo),e(J1,Bwo),e(he,Iwo),e(he,Y1),e(Y1,Pde),e(Pde,qwo),e(Y1,Nwo),e(Y1,Oj),e(Oj,jwo),e(Y1,Dwo),e(he,Gwo),e(he,K1),e(K1,Bde),e(Bde,Owo),e(K1,Vwo),e(K1,Vj),e(Vj,Xwo),e(K1,zwo),e(he,Qwo),e(he,Z1),e(Z1,Ide),e(Ide,Wwo),e(Z1,Hwo),e(Z1,Xj),e(Xj,Uwo),e(Z1,Jwo),e(he,Ywo),e(he,e8),e(e8,qde),e(qde,Kwo),e(e8,Zwo),e(e8,zj),e(zj,eAo),e(e8,oAo),e(he,rAo),e(he,o8),e(o8,Nde),e(Nde,tAo),e(o8,aAo),e(o8,Qj),e(Qj,nAo),e(o8,sAo),e(he,lAo),e(he,r8),e(r8,jde),e(jde,iAo),e(r8,dAo),e(r8,Wj),e(Wj,cAo),e(r8,fAo),e(he,mAo),e(he,t8),e(t8,Dde),e(Dde,gAo),e(t8,hAo),e(t8,Hj),e(Hj,pAo),e(t8,uAo),e(he,_Ao),e(he,a8),e(a8,Gde),e(Gde,bAo),e(a8,vAo),e(a8,Uj),e(Uj,FAo),e(a8,TAo),e(he,MAo),e(he,n8),e(n8,Ode),e(Ode,EAo),e(n8,CAo),e(n8,Jj),e(Jj,wAo),e(n8,AAo),e(he,yAo),e(he,s8),e(s8,Vde),e(Vde,LAo),e(s8,xAo),e(s8,Yj),e(Yj,$Ao),e(s8,kAo),e(he,SAo),e(he,l8),e(l8,Xde),e(Xde,RAo),e(l8,PAo),e(l8,Kj),e(Kj,BAo),e(l8,IAo),e(he,qAo),e(he,i8),e(i8,zde),e(zde,NAo),e(i8,jAo),e(i8,Zj),e(Zj,DAo),e(i8,GAo),e(he,OAo),e(he,d8),e(d8,Qde),e(Qde,VAo),e(d8,XAo),e(d8,eD),e(eD,zAo),e(d8,QAo),e(he,WAo),e(he,c8),e(c8,Wde),e(Wde,HAo),e(c8,UAo),e(c8,oD),e(oD,JAo),e(c8,YAo),e(he,KAo),e(he,f8),e(f8,Hde),e(Hde,ZAo),e(f8,e6o),e(f8,rD),e(rD,o6o),e(f8,r6o),e(Ke,t6o),e(Ke,m8),e(m8,a6o),e(m8,Ude),e(Ude,n6o),e(m8,s6o),e(m8,Jde),e(Jde,l6o),e(Ke,i6o),M(g8,Ke,null),b(f,oIe,_),b(f,qi,_),e(qi,h8),e(h8,Yde),M(zA,Yde,null),e(qi,d6o),e(qi,Kde),e(Kde,c6o),b(f,rIe,_),b(f,Ro,_),M(QA,Ro,null),e(Ro,f6o),e(Ro,Ni),e(Ni,m6o),e(Ni,tD),e(tD,g6o),e(Ni,h6o),e(Ni,aD),e(aD,p6o),e(Ni,u6o),e(Ro,_6o),e(Ro,WA),e(WA,b6o),e(WA,Zde),e(Zde,v6o),e(WA,F6o),e(Ro,T6o),e(Ro,st),M(HA,st,null),e(st,M6o),e(st,ece),e(ece,E6o),e(st,C6o),e(st,ji),e(ji,w6o),e(ji,oce),e(oce,A6o),e(ji,y6o),e(ji,nD),e(nD,L6o),e(ji,x6o),e(st,$6o),M(p8,st,null),e(Ro,k6o),e(Ro,Ze),M(UA,Ze,null),e(Ze,S6o),e(Ze,rce),e(rce,R6o),e(Ze,P6o),e(Ze,ka),e(ka,B6o),e(ka,tce),e(tce,I6o),e(ka,q6o),e(ka,ace),e(ace,N6o),e(ka,j6o),e(ka,nce),e(nce,D6o),e(ka,G6o),e(Ze,O6o),e(Ze,q),e(q,u8),e(u8,sce),e(sce,V6o),e(u8,X6o),e(u8,sD),e(sD,z6o),e(u8,Q6o),e(q,W6o),e(q,_8),e(_8,lce),e(lce,H6o),e(_8,U6o),e(_8,lD),e(lD,J6o),e(_8,Y6o),e(q,K6o),e(q,b8),e(b8,ice),e(ice,Z6o),e(b8,eyo),e(b8,iD),e(iD,oyo),e(b8,ryo),e(q,tyo),e(q,v8),e(v8,dce),e(dce,ayo),e(v8,nyo),e(v8,dD),e(dD,syo),e(v8,lyo),e(q,iyo),e(q,F8),e(F8,cce),e(cce,dyo),e(F8,cyo),e(F8,cD),e(cD,fyo),e(F8,myo),e(q,gyo),e(q,T8),e(T8,fce),e(fce,hyo),e(T8,pyo),e(T8,fD),e(fD,uyo),e(T8,_yo),e(q,byo),e(q,M8),e(M8,mce),e(mce,vyo),e(M8,Fyo),e(M8,mD),e(mD,Tyo),e(M8,Myo),e(q,Eyo),e(q,E8),e(E8,gce),e(gce,Cyo),e(E8,wyo),e(E8,gD),e(gD,Ayo),e(E8,yyo),e(q,Lyo),e(q,C8),e(C8,hce),e(hce,xyo),e(C8,$yo),e(C8,hD),e(hD,kyo),e(C8,Syo),e(q,Ryo),e(q,w8),e(w8,pce),e(pce,Pyo),e(w8,Byo),e(w8,pD),e(pD,Iyo),e(w8,qyo),e(q,Nyo),e(q,A8),e(A8,uce),e(uce,jyo),e(A8,Dyo),e(A8,uD),e(uD,Gyo),e(A8,Oyo),e(q,Vyo),e(q,y8),e(y8,_ce),e(_ce,Xyo),e(y8,zyo),e(y8,_D),e(_D,Qyo),e(y8,Wyo),e(q,Hyo),e(q,L8),e(L8,bce),e(bce,Uyo),e(L8,Jyo),e(L8,bD),e(bD,Yyo),e(L8,Kyo),e(q,Zyo),e(q,x8),e(x8,vce),e(vce,eLo),e(x8,oLo),e(x8,vD),e(vD,rLo),e(x8,tLo),e(q,aLo),e(q,$8),e($8,Fce),e(Fce,nLo),e($8,sLo),e($8,FD),e(FD,lLo),e($8,iLo),e(q,dLo),e(q,k8),e(k8,Tce),e(Tce,cLo),e(k8,fLo),e(k8,TD),e(TD,mLo),e(k8,gLo),e(q,hLo),e(q,S8),e(S8,Mce),e(Mce,pLo),e(S8,uLo),e(S8,MD),e(MD,_Lo),e(S8,bLo),e(q,vLo),e(q,R8),e(R8,Ece),e(Ece,FLo),e(R8,TLo),e(R8,ED),e(ED,MLo),e(R8,ELo),e(q,CLo),e(q,P8),e(P8,Cce),e(Cce,wLo),e(P8,ALo),e(P8,CD),e(CD,yLo),e(P8,LLo),e(q,xLo),e(q,B8),e(B8,wce),e(wce,$Lo),e(B8,kLo),e(B8,wD),e(wD,SLo),e(B8,RLo),e(q,PLo),e(q,I8),e(I8,Ace),e(Ace,BLo),e(I8,ILo),e(I8,AD),e(AD,qLo),e(I8,NLo),e(q,jLo),e(q,q8),e(q8,yce),e(yce,DLo),e(q8,GLo),e(q8,yD),e(yD,OLo),e(q8,VLo),e(q,XLo),e(q,N8),e(N8,Lce),e(Lce,zLo),e(N8,QLo),e(N8,LD),e(LD,WLo),e(N8,HLo),e(q,ULo),e(q,j8),e(j8,xce),e(xce,JLo),e(j8,YLo),e(j8,xD),e(xD,KLo),e(j8,ZLo),e(q,exo),e(q,D8),e(D8,$ce),e($ce,oxo),e(D8,rxo),e(D8,$D),e($D,txo),e(D8,axo),e(q,nxo),e(q,G8),e(G8,kce),e(kce,sxo),e(G8,lxo),e(G8,kD),e(kD,ixo),e(G8,dxo),e(q,cxo),e(q,O8),e(O8,Sce),e(Sce,fxo),e(O8,mxo),e(O8,SD),e(SD,gxo),e(O8,hxo),e(q,pxo),e(q,V8),e(V8,Rce),e(Rce,uxo),e(V8,_xo),e(V8,RD),e(RD,bxo),e(V8,vxo),e(q,Fxo),e(q,X8),e(X8,Pce),e(Pce,Txo),e(X8,Mxo),e(X8,PD),e(PD,Exo),e(X8,Cxo),e(q,wxo),e(q,z8),e(z8,Bce),e(Bce,Axo),e(z8,yxo),e(z8,BD),e(BD,Lxo),e(z8,xxo),e(q,$xo),e(q,Q8),e(Q8,Ice),e(Ice,kxo),e(Q8,Sxo),e(Q8,ID),e(ID,Rxo),e(Q8,Pxo),e(q,Bxo),e(q,W8),e(W8,qce),e(qce,Ixo),e(W8,qxo),e(W8,qD),e(qD,Nxo),e(W8,jxo),e(q,Dxo),e(q,H8),e(H8,Nce),e(Nce,Gxo),e(H8,Oxo),e(H8,ND),e(ND,Vxo),e(H8,Xxo),e(q,zxo),e(q,U8),e(U8,jce),e(jce,Qxo),e(U8,Wxo),e(U8,jD),e(jD,Hxo),e(U8,Uxo),e(q,Jxo),e(q,J8),e(J8,Dce),e(Dce,Yxo),e(J8,Kxo),e(J8,DD),e(DD,Zxo),e(J8,e9o),e(q,o9o),e(q,Y8),e(Y8,Gce),e(Gce,r9o),e(Y8,t9o),e(Y8,GD),e(GD,a9o),e(Y8,n9o),e(q,s9o),e(q,K8),e(K8,Oce),e(Oce,l9o),e(K8,i9o),e(K8,OD),e(OD,d9o),e(K8,c9o),e(q,f9o),e(q,Z8),e(Z8,Vce),e(Vce,m9o),e(Z8,g9o),e(Z8,VD),e(VD,h9o),e(Z8,p9o),e(q,u9o),e(q,eb),e(eb,Xce),e(Xce,_9o),e(eb,b9o),e(eb,XD),e(XD,v9o),e(eb,F9o),e(q,T9o),e(q,ob),e(ob,zce),e(zce,M9o),e(ob,E9o),e(ob,zD),e(zD,C9o),e(ob,w9o),e(q,A9o),e(q,rb),e(rb,Qce),e(Qce,y9o),e(rb,L9o),e(rb,QD),e(QD,x9o),e(rb,$9o),e(q,k9o),e(q,tb),e(tb,Wce),e(Wce,S9o),e(tb,R9o),e(tb,WD),e(WD,P9o),e(tb,B9o),e(q,I9o),e(q,ab),e(ab,Hce),e(Hce,q9o),e(ab,N9o),e(ab,HD),e(HD,j9o),e(ab,D9o),e(q,G9o),e(q,nb),e(nb,Uce),e(Uce,O9o),e(nb,V9o),e(nb,UD),e(UD,X9o),e(nb,z9o),e(q,Q9o),e(q,sb),e(sb,Jce),e(Jce,W9o),e(sb,H9o),e(sb,JD),e(JD,U9o),e(sb,J9o),e(q,Y9o),e(q,lb),e(lb,Yce),e(Yce,K9o),e(lb,Z9o),e(lb,YD),e(YD,e$o),e(lb,o$o),e(q,r$o),e(q,ib),e(ib,Kce),e(Kce,t$o),e(ib,a$o),e(ib,KD),e(KD,n$o),e(ib,s$o),e(Ze,l$o),e(Ze,db),e(db,i$o),e(db,Zce),e(Zce,d$o),e(db,c$o),e(db,efe),e(efe,f$o),e(Ze,m$o),M(cb,Ze,null),b(f,tIe,_),b(f,Di,_),e(Di,fb),e(fb,ofe),M(JA,ofe,null),e(Di,g$o),e(Di,rfe),e(rfe,h$o),b(f,aIe,_),b(f,Po,_),M(YA,Po,null),e(Po,p$o),e(Po,Gi),e(Gi,u$o),e(Gi,ZD),e(ZD,_$o),e(Gi,b$o),e(Gi,eG),e(eG,v$o),e(Gi,F$o),e(Po,T$o),e(Po,KA),e(KA,M$o),e(KA,tfe),e(tfe,E$o),e(KA,C$o),e(Po,w$o),e(Po,lt),M(ZA,lt,null),e(lt,A$o),e(lt,afe),e(afe,y$o),e(lt,L$o),e(lt,Oi),e(Oi,x$o),e(Oi,nfe),e(nfe,$$o),e(Oi,k$o),e(Oi,oG),e(oG,S$o),e(Oi,R$o),e(lt,P$o),M(mb,lt,null),e(Po,B$o),e(Po,eo),M(e6,eo,null),e(eo,I$o),e(eo,sfe),e(sfe,q$o),e(eo,N$o),e(eo,Sa),e(Sa,j$o),e(Sa,lfe),e(lfe,D$o),e(Sa,G$o),e(Sa,ife),e(ife,O$o),e(Sa,V$o),e(Sa,dfe),e(dfe,X$o),e(Sa,z$o),e(eo,Q$o),e(eo,Y),e(Y,gb),e(gb,cfe),e(cfe,W$o),e(gb,H$o),e(gb,rG),e(rG,U$o),e(gb,J$o),e(Y,Y$o),e(Y,hb),e(hb,ffe),e(ffe,K$o),e(hb,Z$o),e(hb,tG),e(tG,eko),e(hb,oko),e(Y,rko),e(Y,pb),e(pb,mfe),e(mfe,tko),e(pb,ako),e(pb,aG),e(aG,nko),e(pb,sko),e(Y,lko),e(Y,ub),e(ub,gfe),e(gfe,iko),e(ub,dko),e(ub,nG),e(nG,cko),e(ub,fko),e(Y,mko),e(Y,_b),e(_b,hfe),e(hfe,gko),e(_b,hko),e(_b,sG),e(sG,pko),e(_b,uko),e(Y,_ko),e(Y,bb),e(bb,pfe),e(pfe,bko),e(bb,vko),e(bb,lG),e(lG,Fko),e(bb,Tko),e(Y,Mko),e(Y,vb),e(vb,ufe),e(ufe,Eko),e(vb,Cko),e(vb,iG),e(iG,wko),e(vb,Ako),e(Y,yko),e(Y,Fb),e(Fb,_fe),e(_fe,Lko),e(Fb,xko),e(Fb,dG),e(dG,$ko),e(Fb,kko),e(Y,Sko),e(Y,Tb),e(Tb,bfe),e(bfe,Rko),e(Tb,Pko),e(Tb,cG),e(cG,Bko),e(Tb,Iko),e(Y,qko),e(Y,Mb),e(Mb,vfe),e(vfe,Nko),e(Mb,jko),e(Mb,fG),e(fG,Dko),e(Mb,Gko),e(Y,Oko),e(Y,Eb),e(Eb,Ffe),e(Ffe,Vko),e(Eb,Xko),e(Eb,mG),e(mG,zko),e(Eb,Qko),e(Y,Wko),e(Y,Cb),e(Cb,Tfe),e(Tfe,Hko),e(Cb,Uko),e(Cb,gG),e(gG,Jko),e(Cb,Yko),e(Y,Kko),e(Y,wb),e(wb,Mfe),e(Mfe,Zko),e(wb,eSo),e(wb,hG),e(hG,oSo),e(wb,rSo),e(Y,tSo),e(Y,Ab),e(Ab,Efe),e(Efe,aSo),e(Ab,nSo),e(Ab,pG),e(pG,sSo),e(Ab,lSo),e(Y,iSo),e(Y,yb),e(yb,Cfe),e(Cfe,dSo),e(yb,cSo),e(yb,uG),e(uG,fSo),e(yb,mSo),e(Y,gSo),e(Y,Lb),e(Lb,wfe),e(wfe,hSo),e(Lb,pSo),e(Lb,_G),e(_G,uSo),e(Lb,_So),e(Y,bSo),e(Y,xb),e(xb,Afe),e(Afe,vSo),e(xb,FSo),e(xb,bG),e(bG,TSo),e(xb,MSo),e(Y,ESo),e(Y,$b),e($b,yfe),e(yfe,CSo),e($b,wSo),e($b,vG),e(vG,ASo),e($b,ySo),e(Y,LSo),e(Y,kb),e(kb,Lfe),e(Lfe,xSo),e(kb,$So),e(kb,FG),e(FG,kSo),e(kb,SSo),e(Y,RSo),e(Y,Sb),e(Sb,xfe),e(xfe,PSo),e(Sb,BSo),e(Sb,TG),e(TG,ISo),e(Sb,qSo),e(Y,NSo),e(Y,Rb),e(Rb,$fe),e($fe,jSo),e(Rb,DSo),e(Rb,MG),e(MG,GSo),e(Rb,OSo),e(Y,VSo),e(Y,Pb),e(Pb,kfe),e(kfe,XSo),e(Pb,zSo),e(Pb,EG),e(EG,QSo),e(Pb,WSo),e(Y,HSo),e(Y,Bb),e(Bb,Sfe),e(Sfe,USo),e(Bb,JSo),e(Bb,CG),e(CG,YSo),e(Bb,KSo),e(Y,ZSo),e(Y,Ib),e(Ib,Rfe),e(Rfe,eRo),e(Ib,oRo),e(Ib,wG),e(wG,rRo),e(Ib,tRo),e(Y,aRo),e(Y,qb),e(qb,Pfe),e(Pfe,nRo),e(qb,sRo),e(qb,AG),e(AG,lRo),e(qb,iRo),e(Y,dRo),e(Y,Nb),e(Nb,Bfe),e(Bfe,cRo),e(Nb,fRo),e(Nb,yG),e(yG,mRo),e(Nb,gRo),e(Y,hRo),e(Y,jb),e(jb,Ife),e(Ife,pRo),e(jb,uRo),e(jb,LG),e(LG,_Ro),e(jb,bRo),e(Y,vRo),e(Y,Db),e(Db,qfe),e(qfe,FRo),e(Db,TRo),e(Db,xG),e(xG,MRo),e(Db,ERo),e(eo,CRo),e(eo,Gb),e(Gb,wRo),e(Gb,Nfe),e(Nfe,ARo),e(Gb,yRo),e(Gb,jfe),e(jfe,LRo),e(eo,xRo),M(Ob,eo,null),b(f,nIe,_),b(f,Vi,_),e(Vi,Vb),e(Vb,Dfe),M(o6,Dfe,null),e(Vi,$Ro),e(Vi,Gfe),e(Gfe,kRo),b(f,sIe,_),b(f,Bo,_),M(r6,Bo,null),e(Bo,SRo),e(Bo,Xi),e(Xi,RRo),e(Xi,$G),e($G,PRo),e(Xi,BRo),e(Xi,kG),e(kG,IRo),e(Xi,qRo),e(Bo,NRo),e(Bo,t6),e(t6,jRo),e(t6,Ofe),e(Ofe,DRo),e(t6,GRo),e(Bo,ORo),e(Bo,it),M(a6,it,null),e(it,VRo),e(it,Vfe),e(Vfe,XRo),e(it,zRo),e(it,zi),e(zi,QRo),e(zi,Xfe),e(Xfe,WRo),e(zi,HRo),e(zi,SG),e(SG,URo),e(zi,JRo),e(it,YRo),M(Xb,it,null),e(Bo,KRo),e(Bo,oo),M(n6,oo,null),e(oo,ZRo),e(oo,zfe),e(zfe,ePo),e(oo,oPo),e(oo,Ra),e(Ra,rPo),e(Ra,Qfe),e(Qfe,tPo),e(Ra,aPo),e(Ra,Wfe),e(Wfe,nPo),e(Ra,sPo),e(Ra,Hfe),e(Hfe,lPo),e(Ra,iPo),e(oo,dPo),e(oo,Yr),e(Yr,zb),e(zb,Ufe),e(Ufe,cPo),e(zb,fPo),e(zb,RG),e(RG,mPo),e(zb,gPo),e(Yr,hPo),e(Yr,Qb),e(Qb,Jfe),e(Jfe,pPo),e(Qb,uPo),e(Qb,PG),e(PG,_Po),e(Qb,bPo),e(Yr,vPo),e(Yr,Wb),e(Wb,Yfe),e(Yfe,FPo),e(Wb,TPo),e(Wb,BG),e(BG,MPo),e(Wb,EPo),e(Yr,CPo),e(Yr,Hb),e(Hb,Kfe),e(Kfe,wPo),e(Hb,APo),e(Hb,IG),e(IG,yPo),e(Hb,LPo),e(Yr,xPo),e(Yr,Ub),e(Ub,Zfe),e(Zfe,$Po),e(Ub,kPo),e(Ub,qG),e(qG,SPo),e(Ub,RPo),e(oo,PPo),e(oo,Jb),e(Jb,BPo),e(Jb,eme),e(eme,IPo),e(Jb,qPo),e(Jb,ome),e(ome,NPo),e(oo,jPo),M(Yb,oo,null),b(f,lIe,_),b(f,Qi,_),e(Qi,Kb),e(Kb,rme),M(s6,rme,null),e(Qi,DPo),e(Qi,tme),e(tme,GPo),b(f,iIe,_),b(f,Io,_),M(l6,Io,null),e(Io,OPo),e(Io,Wi),e(Wi,VPo),e(Wi,NG),e(NG,XPo),e(Wi,zPo),e(Wi,jG),e(jG,QPo),e(Wi,WPo),e(Io,HPo),e(Io,i6),e(i6,UPo),e(i6,ame),e(ame,JPo),e(i6,YPo),e(Io,KPo),e(Io,dt),M(d6,dt,null),e(dt,ZPo),e(dt,nme),e(nme,eBo),e(dt,oBo),e(dt,Hi),e(Hi,rBo),e(Hi,sme),e(sme,tBo),e(Hi,aBo),e(Hi,DG),e(DG,nBo),e(Hi,sBo),e(dt,lBo),M(Zb,dt,null),e(Io,iBo),e(Io,ro),M(c6,ro,null),e(ro,dBo),e(ro,lme),e(lme,cBo),e(ro,fBo),e(ro,Pa),e(Pa,mBo),e(Pa,ime),e(ime,gBo),e(Pa,hBo),e(Pa,dme),e(dme,pBo),e(Pa,uBo),e(Pa,cme),e(cme,_Bo),e(Pa,bBo),e(ro,vBo),e(ro,U),e(U,e2),e(e2,fme),e(fme,FBo),e(e2,TBo),e(e2,GG),e(GG,MBo),e(e2,EBo),e(U,CBo),e(U,o2),e(o2,mme),e(mme,wBo),e(o2,ABo),e(o2,OG),e(OG,yBo),e(o2,LBo),e(U,xBo),e(U,r2),e(r2,gme),e(gme,$Bo),e(r2,kBo),e(r2,VG),e(VG,SBo),e(r2,RBo),e(U,PBo),e(U,t2),e(t2,hme),e(hme,BBo),e(t2,IBo),e(t2,XG),e(XG,qBo),e(t2,NBo),e(U,jBo),e(U,a2),e(a2,pme),e(pme,DBo),e(a2,GBo),e(a2,zG),e(zG,OBo),e(a2,VBo),e(U,XBo),e(U,n2),e(n2,ume),e(ume,zBo),e(n2,QBo),e(n2,QG),e(QG,WBo),e(n2,HBo),e(U,UBo),e(U,s2),e(s2,_me),e(_me,JBo),e(s2,YBo),e(s2,WG),e(WG,KBo),e(s2,ZBo),e(U,eIo),e(U,l2),e(l2,bme),e(bme,oIo),e(l2,rIo),e(l2,HG),e(HG,tIo),e(l2,aIo),e(U,nIo),e(U,i2),e(i2,vme),e(vme,sIo),e(i2,lIo),e(i2,UG),e(UG,iIo),e(i2,dIo),e(U,cIo),e(U,d2),e(d2,Fme),e(Fme,fIo),e(d2,mIo),e(d2,JG),e(JG,gIo),e(d2,hIo),e(U,pIo),e(U,c2),e(c2,Tme),e(Tme,uIo),e(c2,_Io),e(c2,YG),e(YG,bIo),e(c2,vIo),e(U,FIo),e(U,f2),e(f2,Mme),e(Mme,TIo),e(f2,MIo),e(f2,KG),e(KG,EIo),e(f2,CIo),e(U,wIo),e(U,m2),e(m2,Eme),e(Eme,AIo),e(m2,yIo),e(m2,ZG),e(ZG,LIo),e(m2,xIo),e(U,$Io),e(U,g2),e(g2,Cme),e(Cme,kIo),e(g2,SIo),e(g2,eO),e(eO,RIo),e(g2,PIo),e(U,BIo),e(U,h2),e(h2,wme),e(wme,IIo),e(h2,qIo),e(h2,oO),e(oO,NIo),e(h2,jIo),e(U,DIo),e(U,p2),e(p2,Ame),e(Ame,GIo),e(p2,OIo),e(p2,rO),e(rO,VIo),e(p2,XIo),e(U,zIo),e(U,u2),e(u2,yme),e(yme,QIo),e(u2,WIo),e(u2,tO),e(tO,HIo),e(u2,UIo),e(U,JIo),e(U,_2),e(_2,Lme),e(Lme,YIo),e(_2,KIo),e(_2,aO),e(aO,ZIo),e(_2,eqo),e(U,oqo),e(U,b2),e(b2,xme),e(xme,rqo),e(b2,tqo),e(b2,nO),e(nO,aqo),e(b2,nqo),e(U,sqo),e(U,v2),e(v2,$me),e($me,lqo),e(v2,iqo),e(v2,sO),e(sO,dqo),e(v2,cqo),e(U,fqo),e(U,F2),e(F2,kme),e(kme,mqo),e(F2,gqo),e(F2,lO),e(lO,hqo),e(F2,pqo),e(U,uqo),e(U,T2),e(T2,Sme),e(Sme,_qo),e(T2,bqo),e(T2,iO),e(iO,vqo),e(T2,Fqo),e(U,Tqo),e(U,M2),e(M2,Rme),e(Rme,Mqo),e(M2,Eqo),e(M2,dO),e(dO,Cqo),e(M2,wqo),e(U,Aqo),e(U,E2),e(E2,Pme),e(Pme,yqo),e(E2,Lqo),e(E2,cO),e(cO,xqo),e(E2,$qo),e(U,kqo),e(U,C2),e(C2,Bme),e(Bme,Sqo),e(C2,Rqo),e(C2,fO),e(fO,Pqo),e(C2,Bqo),e(U,Iqo),e(U,w2),e(w2,Ime),e(Ime,qqo),e(w2,Nqo),e(w2,mO),e(mO,jqo),e(w2,Dqo),e(U,Gqo),e(U,A2),e(A2,qme),e(qme,Oqo),e(A2,Vqo),e(A2,gO),e(gO,Xqo),e(A2,zqo),e(U,Qqo),e(U,y2),e(y2,Nme),e(Nme,Wqo),e(y2,Hqo),e(y2,hO),e(hO,Uqo),e(y2,Jqo),e(U,Yqo),e(U,L2),e(L2,jme),e(jme,Kqo),e(L2,Zqo),e(L2,pO),e(pO,eNo),e(L2,oNo),e(U,rNo),e(U,x2),e(x2,Dme),e(Dme,tNo),e(x2,aNo),e(x2,uO),e(uO,nNo),e(x2,sNo),e(U,lNo),e(U,$2),e($2,Gme),e(Gme,iNo),e($2,dNo),e($2,_O),e(_O,cNo),e($2,fNo),e(U,mNo),e(U,k2),e(k2,Ome),e(Ome,gNo),e(k2,hNo),e(k2,bO),e(bO,pNo),e(k2,uNo),e(U,_No),e(U,S2),e(S2,Vme),e(Vme,bNo),e(S2,vNo),e(S2,vO),e(vO,FNo),e(S2,TNo),e(ro,MNo),e(ro,R2),e(R2,ENo),e(R2,Xme),e(Xme,CNo),e(R2,wNo),e(R2,zme),e(zme,ANo),e(ro,yNo),M(P2,ro,null),b(f,dIe,_),b(f,Ui,_),e(Ui,B2),e(B2,Qme),M(f6,Qme,null),e(Ui,LNo),e(Ui,Wme),e(Wme,xNo),b(f,cIe,_),b(f,qo,_),M(m6,qo,null),e(qo,$No),e(qo,Ji),e(Ji,kNo),e(Ji,FO),e(FO,SNo),e(Ji,RNo),e(Ji,TO),e(TO,PNo),e(Ji,BNo),e(qo,INo),e(qo,g6),e(g6,qNo),e(g6,Hme),e(Hme,NNo),e(g6,jNo),e(qo,DNo),e(qo,ct),M(h6,ct,null),e(ct,GNo),e(ct,Ume),e(Ume,ONo),e(ct,VNo),e(ct,Yi),e(Yi,XNo),e(Yi,Jme),e(Jme,zNo),e(Yi,QNo),e(Yi,MO),e(MO,WNo),e(Yi,HNo),e(ct,UNo),M(I2,ct,null),e(qo,JNo),e(qo,to),M(p6,to,null),e(to,YNo),e(to,Yme),e(Yme,KNo),e(to,ZNo),e(to,Ba),e(Ba,ejo),e(Ba,Kme),e(Kme,ojo),e(Ba,rjo),e(Ba,Zme),e(Zme,tjo),e(Ba,ajo),e(Ba,ege),e(ege,njo),e(Ba,sjo),e(to,ljo),e(to,O),e(O,q2),e(q2,oge),e(oge,ijo),e(q2,djo),e(q2,EO),e(EO,cjo),e(q2,fjo),e(O,mjo),e(O,N2),e(N2,rge),e(rge,gjo),e(N2,hjo),e(N2,CO),e(CO,pjo),e(N2,ujo),e(O,_jo),e(O,j2),e(j2,tge),e(tge,bjo),e(j2,vjo),e(j2,wO),e(wO,Fjo),e(j2,Tjo),e(O,Mjo),e(O,D2),e(D2,age),e(age,Ejo),e(D2,Cjo),e(D2,AO),e(AO,wjo),e(D2,Ajo),e(O,yjo),e(O,G2),e(G2,nge),e(nge,Ljo),e(G2,xjo),e(G2,yO),e(yO,$jo),e(G2,kjo),e(O,Sjo),e(O,O2),e(O2,sge),e(sge,Rjo),e(O2,Pjo),e(O2,LO),e(LO,Bjo),e(O2,Ijo),e(O,qjo),e(O,V2),e(V2,lge),e(lge,Njo),e(V2,jjo),e(V2,xO),e(xO,Djo),e(V2,Gjo),e(O,Ojo),e(O,X2),e(X2,ige),e(ige,Vjo),e(X2,Xjo),e(X2,$O),e($O,zjo),e(X2,Qjo),e(O,Wjo),e(O,z2),e(z2,dge),e(dge,Hjo),e(z2,Ujo),e(z2,kO),e(kO,Jjo),e(z2,Yjo),e(O,Kjo),e(O,Q2),e(Q2,cge),e(cge,Zjo),e(Q2,eDo),e(Q2,SO),e(SO,oDo),e(Q2,rDo),e(O,tDo),e(O,W2),e(W2,fge),e(fge,aDo),e(W2,nDo),e(W2,RO),e(RO,sDo),e(W2,lDo),e(O,iDo),e(O,H2),e(H2,mge),e(mge,dDo),e(H2,cDo),e(H2,PO),e(PO,fDo),e(H2,mDo),e(O,gDo),e(O,U2),e(U2,gge),e(gge,hDo),e(U2,pDo),e(U2,BO),e(BO,uDo),e(U2,_Do),e(O,bDo),e(O,J2),e(J2,hge),e(hge,vDo),e(J2,FDo),e(J2,IO),e(IO,TDo),e(J2,MDo),e(O,EDo),e(O,Y2),e(Y2,pge),e(pge,CDo),e(Y2,wDo),e(Y2,qO),e(qO,ADo),e(Y2,yDo),e(O,LDo),e(O,K2),e(K2,uge),e(uge,xDo),e(K2,$Do),e(K2,NO),e(NO,kDo),e(K2,SDo),e(O,RDo),e(O,Z2),e(Z2,_ge),e(_ge,PDo),e(Z2,BDo),e(Z2,jO),e(jO,IDo),e(Z2,qDo),e(O,NDo),e(O,ev),e(ev,bge),e(bge,jDo),e(ev,DDo),e(ev,DO),e(DO,GDo),e(ev,ODo),e(O,VDo),e(O,ov),e(ov,vge),e(vge,XDo),e(ov,zDo),e(ov,GO),e(GO,QDo),e(ov,WDo),e(O,HDo),e(O,rv),e(rv,Fge),e(Fge,UDo),e(rv,JDo),e(rv,OO),e(OO,YDo),e(rv,KDo),e(O,ZDo),e(O,tv),e(tv,Tge),e(Tge,eGo),e(tv,oGo),e(tv,VO),e(VO,rGo),e(tv,tGo),e(O,aGo),e(O,av),e(av,Mge),e(Mge,nGo),e(av,sGo),e(av,XO),e(XO,lGo),e(av,iGo),e(O,dGo),e(O,nv),e(nv,Ege),e(Ege,cGo),e(nv,fGo),e(nv,zO),e(zO,mGo),e(nv,gGo),e(O,hGo),e(O,sv),e(sv,Cge),e(Cge,pGo),e(sv,uGo),e(sv,QO),e(QO,_Go),e(sv,bGo),e(O,vGo),e(O,lv),e(lv,wge),e(wge,FGo),e(lv,TGo),e(lv,WO),e(WO,MGo),e(lv,EGo),e(O,CGo),e(O,iv),e(iv,Age),e(Age,wGo),e(iv,AGo),e(iv,HO),e(HO,yGo),e(iv,LGo),e(O,xGo),e(O,dv),e(dv,yge),e(yge,$Go),e(dv,kGo),e(dv,UO),e(UO,SGo),e(dv,RGo),e(O,PGo),e(O,cv),e(cv,Lge),e(Lge,BGo),e(cv,IGo),e(cv,JO),e(JO,qGo),e(cv,NGo),e(O,jGo),e(O,fv),e(fv,xge),e(xge,DGo),e(fv,GGo),e(fv,YO),e(YO,OGo),e(fv,VGo),e(O,XGo),e(O,mv),e(mv,$ge),e($ge,zGo),e(mv,QGo),e(mv,KO),e(KO,WGo),e(mv,HGo),e(O,UGo),e(O,gv),e(gv,kge),e(kge,JGo),e(gv,YGo),e(gv,ZO),e(ZO,KGo),e(gv,ZGo),e(O,eOo),e(O,hv),e(hv,Sge),e(Sge,oOo),e(hv,rOo),e(hv,eV),e(eV,tOo),e(hv,aOo),e(O,nOo),e(O,pv),e(pv,Rge),e(Rge,sOo),e(pv,lOo),e(pv,oV),e(oV,iOo),e(pv,dOo),e(O,cOo),e(O,uv),e(uv,Pge),e(Pge,fOo),e(uv,mOo),e(uv,rV),e(rV,gOo),e(uv,hOo),e(O,pOo),e(O,_v),e(_v,Bge),e(Bge,uOo),e(_v,_Oo),e(_v,tV),e(tV,bOo),e(_v,vOo),e(O,FOo),e(O,bv),e(bv,Ige),e(Ige,TOo),e(bv,MOo),e(bv,aV),e(aV,EOo),e(bv,COo),e(O,wOo),e(O,vv),e(vv,qge),e(qge,AOo),e(vv,yOo),e(vv,nV),e(nV,LOo),e(vv,xOo),e(O,$Oo),e(O,Fv),e(Fv,Nge),e(Nge,kOo),e(Fv,SOo),e(Fv,sV),e(sV,ROo),e(Fv,POo),e(O,BOo),e(O,Tv),e(Tv,jge),e(jge,IOo),e(Tv,qOo),e(Tv,lV),e(lV,NOo),e(Tv,jOo),e(to,DOo),e(to,Mv),e(Mv,GOo),e(Mv,Dge),e(Dge,OOo),e(Mv,VOo),e(Mv,Gge),e(Gge,XOo),e(to,zOo),M(Ev,to,null),b(f,fIe,_),b(f,Ki,_),e(Ki,Cv),e(Cv,Oge),M(u6,Oge,null),e(Ki,QOo),e(Ki,Vge),e(Vge,WOo),b(f,mIe,_),b(f,No,_),M(_6,No,null),e(No,HOo),e(No,Zi),e(Zi,UOo),e(Zi,iV),e(iV,JOo),e(Zi,YOo),e(Zi,dV),e(dV,KOo),e(Zi,ZOo),e(No,eVo),e(No,b6),e(b6,oVo),e(b6,Xge),e(Xge,rVo),e(b6,tVo),e(No,aVo),e(No,ft),M(v6,ft,null),e(ft,nVo),e(ft,zge),e(zge,sVo),e(ft,lVo),e(ft,ed),e(ed,iVo),e(ed,Qge),e(Qge,dVo),e(ed,cVo),e(ed,cV),e(cV,fVo),e(ed,mVo),e(ft,gVo),M(wv,ft,null),e(No,hVo),e(No,ao),M(F6,ao,null),e(ao,pVo),e(ao,Wge),e(Wge,uVo),e(ao,_Vo),e(ao,Ia),e(Ia,bVo),e(Ia,Hge),e(Hge,vVo),e(Ia,FVo),e(Ia,Uge),e(Uge,TVo),e(Ia,MVo),e(Ia,Jge),e(Jge,EVo),e(Ia,CVo),e(ao,wVo),e(ao,Yge),e(Yge,Av),e(Av,Kge),e(Kge,AVo),e(Av,yVo),e(Av,fV),e(fV,LVo),e(Av,xVo),e(ao,$Vo),e(ao,yv),e(yv,kVo),e(yv,Zge),e(Zge,SVo),e(yv,RVo),e(yv,ehe),e(ehe,PVo),e(ao,BVo),M(Lv,ao,null),b(f,gIe,_),b(f,od,_),e(od,xv),e(xv,ohe),M(T6,ohe,null),e(od,IVo),e(od,rhe),e(rhe,qVo),b(f,hIe,_),b(f,jo,_),M(M6,jo,null),e(jo,NVo),e(jo,rd),e(rd,jVo),e(rd,mV),e(mV,DVo),e(rd,GVo),e(rd,gV),e(gV,OVo),e(rd,VVo),e(jo,XVo),e(jo,E6),e(E6,zVo),e(E6,the),e(the,QVo),e(E6,WVo),e(jo,HVo),e(jo,mt),M(C6,mt,null),e(mt,UVo),e(mt,ahe),e(ahe,JVo),e(mt,YVo),e(mt,td),e(td,KVo),e(td,nhe),e(nhe,ZVo),e(td,eXo),e(td,hV),e(hV,oXo),e(td,rXo),e(mt,tXo),M($v,mt,null),e(jo,aXo),e(jo,no),M(w6,no,null),e(no,nXo),e(no,she),e(she,sXo),e(no,lXo),e(no,qa),e(qa,iXo),e(qa,lhe),e(lhe,dXo),e(qa,cXo),e(qa,ihe),e(ihe,fXo),e(qa,mXo),e(qa,dhe),e(dhe,gXo),e(qa,hXo),e(no,pXo),e(no,ve),e(ve,kv),e(kv,che),e(che,uXo),e(kv,_Xo),e(kv,pV),e(pV,bXo),e(kv,vXo),e(ve,FXo),e(ve,Sv),e(Sv,fhe),e(fhe,TXo),e(Sv,MXo),e(Sv,uV),e(uV,EXo),e(Sv,CXo),e(ve,wXo),e(ve,Rv),e(Rv,mhe),e(mhe,AXo),e(Rv,yXo),e(Rv,_V),e(_V,LXo),e(Rv,xXo),e(ve,$Xo),e(ve,Ps),e(Ps,ghe),e(ghe,kXo),e(Ps,SXo),e(Ps,bV),e(bV,RXo),e(Ps,PXo),e(Ps,vV),e(vV,BXo),e(Ps,IXo),e(ve,qXo),e(ve,Pv),e(Pv,hhe),e(hhe,NXo),e(Pv,jXo),e(Pv,FV),e(FV,DXo),e(Pv,GXo),e(ve,OXo),e(ve,gt),e(gt,phe),e(phe,VXo),e(gt,XXo),e(gt,TV),e(TV,zXo),e(gt,QXo),e(gt,MV),e(MV,WXo),e(gt,HXo),e(gt,EV),e(EV,UXo),e(gt,JXo),e(ve,YXo),e(ve,Bv),e(Bv,uhe),e(uhe,KXo),e(Bv,ZXo),e(Bv,CV),e(CV,ezo),e(Bv,ozo),e(ve,rzo),e(ve,Iv),e(Iv,_he),e(_he,tzo),e(Iv,azo),e(Iv,wV),e(wV,nzo),e(Iv,szo),e(ve,lzo),e(ve,qv),e(qv,bhe),e(bhe,izo),e(qv,dzo),e(qv,AV),e(AV,czo),e(qv,fzo),e(ve,mzo),e(ve,Nv),e(Nv,vhe),e(vhe,gzo),e(Nv,hzo),e(Nv,yV),e(yV,pzo),e(Nv,uzo),e(ve,_zo),e(ve,jv),e(jv,Fhe),e(Fhe,bzo),e(jv,vzo),e(jv,LV),e(LV,Fzo),e(jv,Tzo),e(ve,Mzo),e(ve,Dv),e(Dv,The),e(The,Ezo),e(Dv,Czo),e(Dv,xV),e(xV,wzo),e(Dv,Azo),e(ve,yzo),e(ve,Gv),e(Gv,Mhe),e(Mhe,Lzo),e(Gv,xzo),e(Gv,$V),e($V,$zo),e(Gv,kzo),e(no,Szo),e(no,Ov),e(Ov,Rzo),e(Ov,Ehe),e(Ehe,Pzo),e(Ov,Bzo),e(Ov,Che),e(Che,Izo),e(no,qzo),M(Vv,no,null),b(f,pIe,_),b(f,ad,_),e(ad,Xv),e(Xv,whe),M(A6,whe,null),e(ad,Nzo),e(ad,Ahe),e(Ahe,jzo),b(f,uIe,_),b(f,Do,_),M(y6,Do,null),e(Do,Dzo),e(Do,nd),e(nd,Gzo),e(nd,kV),e(kV,Ozo),e(nd,Vzo),e(nd,SV),e(SV,Xzo),e(nd,zzo),e(Do,Qzo),e(Do,L6),e(L6,Wzo),e(L6,yhe),e(yhe,Hzo),e(L6,Uzo),e(Do,Jzo),e(Do,ht),M(x6,ht,null),e(ht,Yzo),e(ht,Lhe),e(Lhe,Kzo),e(ht,Zzo),e(ht,sd),e(sd,eQo),e(sd,xhe),e(xhe,oQo),e(sd,rQo),e(sd,RV),e(RV,tQo),e(sd,aQo),e(ht,nQo),M(zv,ht,null),e(Do,sQo),e(Do,so),M($6,so,null),e(so,lQo),e(so,$he),e($he,iQo),e(so,dQo),e(so,Na),e(Na,cQo),e(Na,khe),e(khe,fQo),e(Na,mQo),e(Na,She),e(She,gQo),e(Na,hQo),e(Na,Rhe),e(Rhe,pQo),e(Na,uQo),e(so,_Qo),e(so,Phe),e(Phe,Qv),e(Qv,Bhe),e(Bhe,bQo),e(Qv,vQo),e(Qv,PV),e(PV,FQo),e(Qv,TQo),e(so,MQo),e(so,Wv),e(Wv,EQo),e(Wv,Ihe),e(Ihe,CQo),e(Wv,wQo),e(Wv,qhe),e(qhe,AQo),e(so,yQo),M(Hv,so,null),b(f,_Ie,_),b(f,ld,_),e(ld,Uv),e(Uv,Nhe),M(k6,Nhe,null),e(ld,LQo),e(ld,jhe),e(jhe,xQo),b(f,bIe,_),b(f,Go,_),M(S6,Go,null),e(Go,$Qo),e(Go,id),e(id,kQo),e(id,BV),e(BV,SQo),e(id,RQo),e(id,IV),e(IV,PQo),e(id,BQo),e(Go,IQo),e(Go,R6),e(R6,qQo),e(R6,Dhe),e(Dhe,NQo),e(R6,jQo),e(Go,DQo),e(Go,pt),M(P6,pt,null),e(pt,GQo),e(pt,Ghe),e(Ghe,OQo),e(pt,VQo),e(pt,dd),e(dd,XQo),e(dd,Ohe),e(Ohe,zQo),e(dd,QQo),e(dd,qV),e(qV,WQo),e(dd,HQo),e(pt,UQo),M(Jv,pt,null),e(Go,JQo),e(Go,lo),M(B6,lo,null),e(lo,YQo),e(lo,Vhe),e(Vhe,KQo),e(lo,ZQo),e(lo,ja),e(ja,eWo),e(ja,Xhe),e(Xhe,oWo),e(ja,rWo),e(ja,zhe),e(zhe,tWo),e(ja,aWo),e(ja,Qhe),e(Qhe,nWo),e(ja,sWo),e(lo,lWo),e(lo,je),e(je,Yv),e(Yv,Whe),e(Whe,iWo),e(Yv,dWo),e(Yv,NV),e(NV,cWo),e(Yv,fWo),e(je,mWo),e(je,Kv),e(Kv,Hhe),e(Hhe,gWo),e(Kv,hWo),e(Kv,jV),e(jV,pWo),e(Kv,uWo),e(je,_Wo),e(je,Zv),e(Zv,Uhe),e(Uhe,bWo),e(Zv,vWo),e(Zv,DV),e(DV,FWo),e(Zv,TWo),e(je,MWo),e(je,eF),e(eF,Jhe),e(Jhe,EWo),e(eF,CWo),e(eF,GV),e(GV,wWo),e(eF,AWo),e(je,yWo),e(je,oF),e(oF,Yhe),e(Yhe,LWo),e(oF,xWo),e(oF,OV),e(OV,$Wo),e(oF,kWo),e(je,SWo),e(je,rF),e(rF,Khe),e(Khe,RWo),e(rF,PWo),e(rF,VV),e(VV,BWo),e(rF,IWo),e(je,qWo),e(je,tF),e(tF,Zhe),e(Zhe,NWo),e(tF,jWo),e(tF,XV),e(XV,DWo),e(tF,GWo),e(je,OWo),e(je,aF),e(aF,epe),e(epe,VWo),e(aF,XWo),e(aF,zV),e(zV,zWo),e(aF,QWo),e(lo,WWo),e(lo,nF),e(nF,HWo),e(nF,ope),e(ope,UWo),e(nF,JWo),e(nF,rpe),e(rpe,YWo),e(lo,KWo),M(sF,lo,null),b(f,vIe,_),b(f,cd,_),e(cd,lF),e(lF,tpe),M(I6,tpe,null),e(cd,ZWo),e(cd,ape),e(ape,eHo),b(f,FIe,_),b(f,Oo,_),M(q6,Oo,null),e(Oo,oHo),e(Oo,fd),e(fd,rHo),e(fd,QV),e(QV,tHo),e(fd,aHo),e(fd,WV),e(WV,nHo),e(fd,sHo),e(Oo,lHo),e(Oo,N6),e(N6,iHo),e(N6,npe),e(npe,dHo),e(N6,cHo),e(Oo,fHo),e(Oo,ut),M(j6,ut,null),e(ut,mHo),e(ut,spe),e(spe,gHo),e(ut,hHo),e(ut,md),e(md,pHo),e(md,lpe),e(lpe,uHo),e(md,_Ho),e(md,HV),e(HV,bHo),e(md,vHo),e(ut,FHo),M(iF,ut,null),e(Oo,THo),e(Oo,io),M(D6,io,null),e(io,MHo),e(io,ipe),e(ipe,EHo),e(io,CHo),e(io,Da),e(Da,wHo),e(Da,dpe),e(dpe,AHo),e(Da,yHo),e(Da,cpe),e(cpe,LHo),e(Da,xHo),e(Da,fpe),e(fpe,$Ho),e(Da,kHo),e(io,SHo),e(io,Ga),e(Ga,dF),e(dF,mpe),e(mpe,RHo),e(dF,PHo),e(dF,UV),e(UV,BHo),e(dF,IHo),e(Ga,qHo),e(Ga,cF),e(cF,gpe),e(gpe,NHo),e(cF,jHo),e(cF,JV),e(JV,DHo),e(cF,GHo),e(Ga,OHo),e(Ga,fF),e(fF,hpe),e(hpe,VHo),e(fF,XHo),e(fF,YV),e(YV,zHo),e(fF,QHo),e(Ga,WHo),e(Ga,mF),e(mF,ppe),e(ppe,HHo),e(mF,UHo),e(mF,KV),e(KV,JHo),e(mF,YHo),e(io,KHo),e(io,gF),e(gF,ZHo),e(gF,upe),e(upe,eUo),e(gF,oUo),e(gF,_pe),e(_pe,rUo),e(io,tUo),M(hF,io,null),b(f,TIe,_),b(f,gd,_),e(gd,pF),e(pF,bpe),M(G6,bpe,null),e(gd,aUo),e(gd,vpe),e(vpe,nUo),b(f,MIe,_),b(f,Vo,_),M(O6,Vo,null),e(Vo,sUo),e(Vo,hd),e(hd,lUo),e(hd,ZV),e(ZV,iUo),e(hd,dUo),e(hd,eX),e(eX,cUo),e(hd,fUo),e(Vo,mUo),e(Vo,V6),e(V6,gUo),e(V6,Fpe),e(Fpe,hUo),e(V6,pUo),e(Vo,uUo),e(Vo,_t),M(X6,_t,null),e(_t,_Uo),e(_t,Tpe),e(Tpe,bUo),e(_t,vUo),e(_t,pd),e(pd,FUo),e(pd,Mpe),e(Mpe,TUo),e(pd,MUo),e(pd,oX),e(oX,EUo),e(pd,CUo),e(_t,wUo),M(uF,_t,null),e(Vo,AUo),e(Vo,co),M(z6,co,null),e(co,yUo),e(co,Epe),e(Epe,LUo),e(co,xUo),e(co,Oa),e(Oa,$Uo),e(Oa,Cpe),e(Cpe,kUo),e(Oa,SUo),e(Oa,wpe),e(wpe,RUo),e(Oa,PUo),e(Oa,Ape),e(Ape,BUo),e(Oa,IUo),e(co,qUo),e(co,De),e(De,_F),e(_F,ype),e(ype,NUo),e(_F,jUo),e(_F,rX),e(rX,DUo),e(_F,GUo),e(De,OUo),e(De,bF),e(bF,Lpe),e(Lpe,VUo),e(bF,XUo),e(bF,tX),e(tX,zUo),e(bF,QUo),e(De,WUo),e(De,vF),e(vF,xpe),e(xpe,HUo),e(vF,UUo),e(vF,aX),e(aX,JUo),e(vF,YUo),e(De,KUo),e(De,FF),e(FF,$pe),e($pe,ZUo),e(FF,eJo),e(FF,nX),e(nX,oJo),e(FF,rJo),e(De,tJo),e(De,TF),e(TF,kpe),e(kpe,aJo),e(TF,nJo),e(TF,sX),e(sX,sJo),e(TF,lJo),e(De,iJo),e(De,MF),e(MF,Spe),e(Spe,dJo),e(MF,cJo),e(MF,lX),e(lX,fJo),e(MF,mJo),e(De,gJo),e(De,EF),e(EF,Rpe),e(Rpe,hJo),e(EF,pJo),e(EF,iX),e(iX,uJo),e(EF,_Jo),e(De,bJo),e(De,CF),e(CF,Ppe),e(Ppe,vJo),e(CF,FJo),e(CF,dX),e(dX,TJo),e(CF,MJo),e(co,EJo),e(co,wF),e(wF,CJo),e(wF,Bpe),e(Bpe,wJo),e(wF,AJo),e(wF,Ipe),e(Ipe,yJo),e(co,LJo),M(AF,co,null),b(f,EIe,_),b(f,ud,_),e(ud,yF),e(yF,qpe),M(Q6,qpe,null),e(ud,xJo),e(ud,Npe),e(Npe,$Jo),b(f,CIe,_),b(f,Xo,_),M(W6,Xo,null),e(Xo,kJo),e(Xo,_d),e(_d,SJo),e(_d,cX),e(cX,RJo),e(_d,PJo),e(_d,fX),e(fX,BJo),e(_d,IJo),e(Xo,qJo),e(Xo,H6),e(H6,NJo),e(H6,jpe),e(jpe,jJo),e(H6,DJo),e(Xo,GJo),e(Xo,bt),M(U6,bt,null),e(bt,OJo),e(bt,Dpe),e(Dpe,VJo),e(bt,XJo),e(bt,bd),e(bd,zJo),e(bd,Gpe),e(Gpe,QJo),e(bd,WJo),e(bd,mX),e(mX,HJo),e(bd,UJo),e(bt,JJo),M(LF,bt,null),e(Xo,YJo),e(Xo,fo),M(J6,fo,null),e(fo,KJo),e(fo,Ope),e(Ope,ZJo),e(fo,eYo),e(fo,Va),e(Va,oYo),e(Va,Vpe),e(Vpe,rYo),e(Va,tYo),e(Va,Xpe),e(Xpe,aYo),e(Va,nYo),e(Va,zpe),e(zpe,sYo),e(Va,lYo),e(fo,iYo),e(fo,Y6),e(Y6,xF),e(xF,Qpe),e(Qpe,dYo),e(xF,cYo),e(xF,gX),e(gX,fYo),e(xF,mYo),e(Y6,gYo),e(Y6,$F),e($F,Wpe),e(Wpe,hYo),e($F,pYo),e($F,hX),e(hX,uYo),e($F,_Yo),e(fo,bYo),e(fo,kF),e(kF,vYo),e(kF,Hpe),e(Hpe,FYo),e(kF,TYo),e(kF,Upe),e(Upe,MYo),e(fo,EYo),M(SF,fo,null),b(f,wIe,_),b(f,vd,_),e(vd,RF),e(RF,Jpe),M(K6,Jpe,null),e(vd,CYo),e(vd,Ype),e(Ype,wYo),b(f,AIe,_),b(f,zo,_),M(Z6,zo,null),e(zo,AYo),e(zo,Fd),e(Fd,yYo),e(Fd,pX),e(pX,LYo),e(Fd,xYo),e(Fd,uX),e(uX,$Yo),e(Fd,kYo),e(zo,SYo),e(zo,ey),e(ey,RYo),e(ey,Kpe),e(Kpe,PYo),e(ey,BYo),e(zo,IYo),e(zo,vt),M(oy,vt,null),e(vt,qYo),e(vt,Zpe),e(Zpe,NYo),e(vt,jYo),e(vt,Td),e(Td,DYo),e(Td,eue),e(eue,GYo),e(Td,OYo),e(Td,_X),e(_X,VYo),e(Td,XYo),e(vt,zYo),M(PF,vt,null),e(zo,QYo),e(zo,mo),M(ry,mo,null),e(mo,WYo),e(mo,oue),e(oue,HYo),e(mo,UYo),e(mo,Xa),e(Xa,JYo),e(Xa,rue),e(rue,YYo),e(Xa,KYo),e(Xa,tue),e(tue,ZYo),e(Xa,eKo),e(Xa,aue),e(aue,oKo),e(Xa,rKo),e(mo,tKo),e(mo,za),e(za,BF),e(BF,nue),e(nue,aKo),e(BF,nKo),e(BF,bX),e(bX,sKo),e(BF,lKo),e(za,iKo),e(za,IF),e(IF,sue),e(sue,dKo),e(IF,cKo),e(IF,vX),e(vX,fKo),e(IF,mKo),e(za,gKo),e(za,qF),e(qF,lue),e(lue,hKo),e(qF,pKo),e(qF,FX),e(FX,uKo),e(qF,_Ko),e(za,bKo),e(za,NF),e(NF,iue),e(iue,vKo),e(NF,FKo),e(NF,TX),e(TX,TKo),e(NF,MKo),e(mo,EKo),e(mo,jF),e(jF,CKo),e(jF,due),e(due,wKo),e(jF,AKo),e(jF,cue),e(cue,yKo),e(mo,LKo),M(DF,mo,null),b(f,yIe,_),b(f,Md,_),e(Md,GF),e(GF,fue),M(ty,fue,null),e(Md,xKo),e(Md,mue),e(mue,$Ko),b(f,LIe,_),b(f,Qo,_),M(ay,Qo,null),e(Qo,kKo),e(Qo,Ed),e(Ed,SKo),e(Ed,MX),e(MX,RKo),e(Ed,PKo),e(Ed,EX),e(EX,BKo),e(Ed,IKo),e(Qo,qKo),e(Qo,ny),e(ny,NKo),e(ny,gue),e(gue,jKo),e(ny,DKo),e(Qo,GKo),e(Qo,Ft),M(sy,Ft,null),e(Ft,OKo),e(Ft,hue),e(hue,VKo),e(Ft,XKo),e(Ft,Cd),e(Cd,zKo),e(Cd,pue),e(pue,QKo),e(Cd,WKo),e(Cd,CX),e(CX,HKo),e(Cd,UKo),e(Ft,JKo),M(OF,Ft,null),e(Qo,YKo),e(Qo,go),M(ly,go,null),e(go,KKo),e(go,uue),e(uue,ZKo),e(go,eZo),e(go,Qa),e(Qa,oZo),e(Qa,_ue),e(_ue,rZo),e(Qa,tZo),e(Qa,bue),e(bue,aZo),e(Qa,nZo),e(Qa,vue),e(vue,sZo),e(Qa,lZo),e(go,iZo),e(go,wd),e(wd,VF),e(VF,Fue),e(Fue,dZo),e(VF,cZo),e(VF,wX),e(wX,fZo),e(VF,mZo),e(wd,gZo),e(wd,XF),e(XF,Tue),e(Tue,hZo),e(XF,pZo),e(XF,AX),e(AX,uZo),e(XF,_Zo),e(wd,bZo),e(wd,zF),e(zF,Mue),e(Mue,vZo),e(zF,FZo),e(zF,yX),e(yX,TZo),e(zF,MZo),e(go,EZo),e(go,QF),e(QF,CZo),e(QF,Eue),e(Eue,wZo),e(QF,AZo),e(QF,Cue),e(Cue,yZo),e(go,LZo),M(WF,go,null),b(f,xIe,_),b(f,Ad,_),e(Ad,HF),e(HF,wue),M(iy,wue,null),e(Ad,xZo),e(Ad,Aue),e(Aue,$Zo),b(f,$Ie,_),b(f,Wo,_),M(dy,Wo,null),e(Wo,kZo),e(Wo,yd),e(yd,SZo),e(yd,LX),e(LX,RZo),e(yd,PZo),e(yd,xX),e(xX,BZo),e(yd,IZo),e(Wo,qZo),e(Wo,cy),e(cy,NZo),e(cy,yue),e(yue,jZo),e(cy,DZo),e(Wo,GZo),e(Wo,Tt),M(fy,Tt,null),e(Tt,OZo),e(Tt,Lue),e(Lue,VZo),e(Tt,XZo),e(Tt,Ld),e(Ld,zZo),e(Ld,xue),e(xue,QZo),e(Ld,WZo),e(Ld,$X),e($X,HZo),e(Ld,UZo),e(Tt,JZo),M(UF,Tt,null),e(Wo,YZo),e(Wo,ho),M(my,ho,null),e(ho,KZo),e(ho,$ue),e($ue,ZZo),e(ho,eer),e(ho,Wa),e(Wa,oer),e(Wa,kue),e(kue,rer),e(Wa,ter),e(Wa,Sue),e(Sue,aer),e(Wa,ner),e(Wa,Rue),e(Rue,ser),e(Wa,ler),e(ho,ier),e(ho,gy),e(gy,JF),e(JF,Pue),e(Pue,der),e(JF,cer),e(JF,kX),e(kX,fer),e(JF,mer),e(gy,ger),e(gy,YF),e(YF,Bue),e(Bue,her),e(YF,per),e(YF,SX),e(SX,uer),e(YF,_er),e(ho,ber),e(ho,KF),e(KF,ver),e(KF,Iue),e(Iue,Fer),e(KF,Ter),e(KF,que),e(que,Mer),e(ho,Eer),M(ZF,ho,null),b(f,kIe,_),b(f,xd,_),e(xd,e0),e(e0,Nue),M(hy,Nue,null),e(xd,Cer),e(xd,jue),e(jue,wer),b(f,SIe,_),b(f,Ho,_),M(py,Ho,null),e(Ho,Aer),e(Ho,$d),e($d,yer),e($d,RX),e(RX,Ler),e($d,xer),e($d,PX),e(PX,$er),e($d,ker),e(Ho,Ser),e(Ho,uy),e(uy,Rer),e(uy,Due),e(Due,Per),e(uy,Ber),e(Ho,Ier),e(Ho,Mt),M(_y,Mt,null),e(Mt,qer),e(Mt,Gue),e(Gue,Ner),e(Mt,jer),e(Mt,kd),e(kd,Der),e(kd,Oue),e(Oue,Ger),e(kd,Oer),e(kd,BX),e(BX,Ver),e(kd,Xer),e(Mt,zer),M(o0,Mt,null),e(Ho,Qer),e(Ho,po),M(by,po,null),e(po,Wer),e(po,Vue),e(Vue,Her),e(po,Uer),e(po,Ha),e(Ha,Jer),e(Ha,Xue),e(Xue,Yer),e(Ha,Ker),e(Ha,zue),e(zue,Zer),e(Ha,eor),e(Ha,Que),e(Que,oor),e(Ha,ror),e(po,tor),e(po,Wue),e(Wue,r0),e(r0,Hue),e(Hue,aor),e(r0,nor),e(r0,IX),e(IX,sor),e(r0,lor),e(po,ior),e(po,t0),e(t0,dor),e(t0,Uue),e(Uue,cor),e(t0,mor),e(t0,Jue),e(Jue,gor),e(po,hor),M(a0,po,null),b(f,RIe,_),b(f,Sd,_),e(Sd,n0),e(n0,Yue),M(vy,Yue,null),e(Sd,por),e(Sd,Kue),e(Kue,uor),b(f,PIe,_),b(f,Uo,_),M(Fy,Uo,null),e(Uo,_or),e(Uo,Rd),e(Rd,bor),e(Rd,qX),e(qX,vor),e(Rd,For),e(Rd,NX),e(NX,Tor),e(Rd,Mor),e(Uo,Eor),e(Uo,Ty),e(Ty,Cor),e(Ty,Zue),e(Zue,wor),e(Ty,Aor),e(Uo,yor),e(Uo,Et),M(My,Et,null),e(Et,Lor),e(Et,e_e),e(e_e,xor),e(Et,$or),e(Et,Pd),e(Pd,kor),e(Pd,o_e),e(o_e,Sor),e(Pd,Ror),e(Pd,jX),e(jX,Por),e(Pd,Bor),e(Et,Ior),M(s0,Et,null),e(Uo,qor),e(Uo,uo),M(Ey,uo,null),e(uo,Nor),e(uo,r_e),e(r_e,jor),e(uo,Dor),e(uo,Ua),e(Ua,Gor),e(Ua,t_e),e(t_e,Oor),e(Ua,Vor),e(Ua,a_e),e(a_e,Xor),e(Ua,zor),e(Ua,n_e),e(n_e,Qor),e(Ua,Wor),e(uo,Hor),e(uo,Ja),e(Ja,l0),e(l0,s_e),e(s_e,Uor),e(l0,Jor),e(l0,DX),e(DX,Yor),e(l0,Kor),e(Ja,Zor),e(Ja,i0),e(i0,l_e),e(l_e,err),e(i0,orr),e(i0,GX),e(GX,rrr),e(i0,trr),e(Ja,arr),e(Ja,d0),e(d0,i_e),e(i_e,nrr),e(d0,srr),e(d0,OX),e(OX,lrr),e(d0,irr),e(Ja,drr),e(Ja,c0),e(c0,d_e),e(d_e,crr),e(c0,frr),e(c0,VX),e(VX,mrr),e(c0,grr),e(uo,hrr),e(uo,f0),e(f0,prr),e(f0,c_e),e(c_e,urr),e(f0,_rr),e(f0,f_e),e(f_e,brr),e(uo,vrr),M(m0,uo,null),b(f,BIe,_),b(f,Bd,_),e(Bd,g0),e(g0,m_e),M(Cy,m_e,null),e(Bd,Frr),e(Bd,g_e),e(g_e,Trr),b(f,IIe,_),b(f,Jo,_),M(wy,Jo,null),e(Jo,Mrr),e(Jo,Id),e(Id,Err),e(Id,XX),e(XX,Crr),e(Id,wrr),e(Id,zX),e(zX,Arr),e(Id,yrr),e(Jo,Lrr),e(Jo,Ay),e(Ay,xrr),e(Ay,h_e),e(h_e,$rr),e(Ay,krr),e(Jo,Srr),e(Jo,Ct),M(yy,Ct,null),e(Ct,Rrr),e(Ct,p_e),e(p_e,Prr),e(Ct,Brr),e(Ct,qd),e(qd,Irr),e(qd,u_e),e(u_e,qrr),e(qd,Nrr),e(qd,QX),e(QX,jrr),e(qd,Drr),e(Ct,Grr),M(h0,Ct,null),e(Jo,Orr),e(Jo,_o),M(Ly,_o,null),e(_o,Vrr),e(_o,__e),e(__e,Xrr),e(_o,zrr),e(_o,Ya),e(Ya,Qrr),e(Ya,b_e),e(b_e,Wrr),e(Ya,Hrr),e(Ya,v_e),e(v_e,Urr),e(Ya,Jrr),e(Ya,F_e),e(F_e,Yrr),e(Ya,Krr),e(_o,Zrr),e(_o,T_e),e(T_e,p0),e(p0,M_e),e(M_e,etr),e(p0,otr),e(p0,WX),e(WX,rtr),e(p0,ttr),e(_o,atr),e(_o,u0),e(u0,ntr),e(u0,E_e),e(E_e,str),e(u0,ltr),e(u0,C_e),e(C_e,itr),e(_o,dtr),M(_0,_o,null),b(f,qIe,_),b(f,Nd,_),e(Nd,b0),e(b0,w_e),M(xy,w_e,null),e(Nd,ctr),e(Nd,A_e),e(A_e,ftr),b(f,NIe,_),b(f,Yo,_),M($y,Yo,null),e(Yo,mtr),e(Yo,jd),e(jd,gtr),e(jd,HX),e(HX,htr),e(jd,ptr),e(jd,UX),e(UX,utr),e(jd,_tr),e(Yo,btr),e(Yo,ky),e(ky,vtr),e(ky,y_e),e(y_e,Ftr),e(ky,Ttr),e(Yo,Mtr),e(Yo,wt),M(Sy,wt,null),e(wt,Etr),e(wt,L_e),e(L_e,Ctr),e(wt,wtr),e(wt,Dd),e(Dd,Atr),e(Dd,x_e),e(x_e,ytr),e(Dd,Ltr),e(Dd,JX),e(JX,xtr),e(Dd,$tr),e(wt,ktr),M(v0,wt,null),e(Yo,Str),e(Yo,wr),M(Ry,wr,null),e(wr,Rtr),e(wr,$_e),e($_e,Ptr),e(wr,Btr),e(wr,Ka),e(Ka,Itr),e(Ka,k_e),e(k_e,qtr),e(Ka,Ntr),e(Ka,S_e),e(S_e,jtr),e(Ka,Dtr),e(Ka,R_e),e(R_e,Gtr),e(Ka,Otr),e(wr,Vtr),e(wr,N),e(N,F0),e(F0,P_e),e(P_e,Xtr),e(F0,ztr),e(F0,YX),e(YX,Qtr),e(F0,Wtr),e(N,Htr),e(N,T0),e(T0,B_e),e(B_e,Utr),e(T0,Jtr),e(T0,KX),e(KX,Ytr),e(T0,Ktr),e(N,Ztr),e(N,M0),e(M0,I_e),e(I_e,ear),e(M0,oar),e(M0,ZX),e(ZX,rar),e(M0,tar),e(N,aar),e(N,E0),e(E0,q_e),e(q_e,nar),e(E0,sar),e(E0,ez),e(ez,lar),e(E0,iar),e(N,dar),e(N,C0),e(C0,N_e),e(N_e,car),e(C0,far),e(C0,oz),e(oz,mar),e(C0,gar),e(N,har),e(N,w0),e(w0,j_e),e(j_e,par),e(w0,uar),e(w0,rz),e(rz,_ar),e(w0,bar),e(N,Far),e(N,A0),e(A0,D_e),e(D_e,Tar),e(A0,Mar),e(A0,tz),e(tz,Ear),e(A0,Car),e(N,war),e(N,y0),e(y0,G_e),e(G_e,Aar),e(y0,yar),e(y0,az),e(az,Lar),e(y0,xar),e(N,$ar),e(N,L0),e(L0,O_e),e(O_e,kar),e(L0,Sar),e(L0,nz),e(nz,Rar),e(L0,Par),e(N,Bar),e(N,x0),e(x0,V_e),e(V_e,Iar),e(x0,qar),e(x0,sz),e(sz,Nar),e(x0,jar),e(N,Dar),e(N,$0),e($0,X_e),e(X_e,Gar),e($0,Oar),e($0,lz),e(lz,Var),e($0,Xar),e(N,zar),e(N,k0),e(k0,z_e),e(z_e,Qar),e(k0,War),e(k0,iz),e(iz,Har),e(k0,Uar),e(N,Jar),e(N,S0),e(S0,Q_e),e(Q_e,Yar),e(S0,Kar),e(S0,dz),e(dz,Zar),e(S0,enr),e(N,onr),e(N,R0),e(R0,W_e),e(W_e,rnr),e(R0,tnr),e(R0,cz),e(cz,anr),e(R0,nnr),e(N,snr),e(N,P0),e(P0,H_e),e(H_e,lnr),e(P0,inr),e(P0,fz),e(fz,dnr),e(P0,cnr),e(N,fnr),e(N,B0),e(B0,U_e),e(U_e,mnr),e(B0,gnr),e(B0,mz),e(mz,hnr),e(B0,pnr),e(N,unr),e(N,I0),e(I0,J_e),e(J_e,_nr),e(I0,bnr),e(I0,gz),e(gz,vnr),e(I0,Fnr),e(N,Tnr),e(N,Bs),e(Bs,Y_e),e(Y_e,Mnr),e(Bs,Enr),e(Bs,hz),e(hz,Cnr),e(Bs,wnr),e(Bs,pz),e(pz,Anr),e(Bs,ynr),e(N,Lnr),e(N,q0),e(q0,K_e),e(K_e,xnr),e(q0,$nr),e(q0,uz),e(uz,knr),e(q0,Snr),e(N,Rnr),e(N,N0),e(N0,Z_e),e(Z_e,Pnr),e(N0,Bnr),e(N0,_z),e(_z,Inr),e(N0,qnr),e(N,Nnr),e(N,j0),e(j0,e1e),e(e1e,jnr),e(j0,Dnr),e(j0,bz),e(bz,Gnr),e(j0,Onr),e(N,Vnr),e(N,D0),e(D0,o1e),e(o1e,Xnr),e(D0,znr),e(D0,vz),e(vz,Qnr),e(D0,Wnr),e(N,Hnr),e(N,G0),e(G0,r1e),e(r1e,Unr),e(G0,Jnr),e(G0,Fz),e(Fz,Ynr),e(G0,Knr),e(N,Znr),e(N,O0),e(O0,t1e),e(t1e,esr),e(O0,osr),e(O0,Tz),e(Tz,rsr),e(O0,tsr),e(N,asr),e(N,V0),e(V0,a1e),e(a1e,nsr),e(V0,ssr),e(V0,Mz),e(Mz,lsr),e(V0,isr),e(N,dsr),e(N,X0),e(X0,n1e),e(n1e,csr),e(X0,fsr),e(X0,Ez),e(Ez,msr),e(X0,gsr),e(N,hsr),e(N,z0),e(z0,s1e),e(s1e,psr),e(z0,usr),e(z0,Cz),e(Cz,_sr),e(z0,bsr),e(N,vsr),e(N,Q0),e(Q0,l1e),e(l1e,Fsr),e(Q0,Tsr),e(Q0,wz),e(wz,Msr),e(Q0,Esr),e(N,Csr),e(N,W0),e(W0,i1e),e(i1e,wsr),e(W0,Asr),e(W0,Az),e(Az,ysr),e(W0,Lsr),e(N,xsr),e(N,H0),e(H0,d1e),e(d1e,$sr),e(H0,ksr),e(H0,yz),e(yz,Ssr),e(H0,Rsr),e(N,Psr),e(N,U0),e(U0,c1e),e(c1e,Bsr),e(U0,Isr),e(U0,Lz),e(Lz,qsr),e(U0,Nsr),e(N,jsr),e(N,J0),e(J0,f1e),e(f1e,Dsr),e(J0,Gsr),e(J0,xz),e(xz,Osr),e(J0,Vsr),e(N,Xsr),e(N,Y0),e(Y0,m1e),e(m1e,zsr),e(Y0,Qsr),e(Y0,$z),e($z,Wsr),e(Y0,Hsr),e(N,Usr),e(N,K0),e(K0,g1e),e(g1e,Jsr),e(K0,Ysr),e(K0,kz),e(kz,Ksr),e(K0,Zsr),e(N,elr),e(N,Z0),e(Z0,h1e),e(h1e,olr),e(Z0,rlr),e(Z0,Sz),e(Sz,tlr),e(Z0,alr),e(N,nlr),e(N,eT),e(eT,p1e),e(p1e,slr),e(eT,llr),e(eT,Rz),e(Rz,ilr),e(eT,dlr),e(N,clr),e(N,oT),e(oT,u1e),e(u1e,flr),e(oT,mlr),e(oT,Pz),e(Pz,glr),e(oT,hlr),e(N,plr),e(N,rT),e(rT,_1e),e(_1e,ulr),e(rT,_lr),e(rT,Bz),e(Bz,blr),e(rT,vlr),e(N,Flr),e(N,tT),e(tT,b1e),e(b1e,Tlr),e(tT,Mlr),e(tT,Iz),e(Iz,Elr),e(tT,Clr),e(N,wlr),e(N,aT),e(aT,v1e),e(v1e,Alr),e(aT,ylr),e(aT,qz),e(qz,Llr),e(aT,xlr),e(N,$lr),e(N,nT),e(nT,F1e),e(F1e,klr),e(nT,Slr),e(nT,Nz),e(Nz,Rlr),e(nT,Plr),e(N,Blr),e(N,sT),e(sT,T1e),e(T1e,Ilr),e(sT,qlr),e(sT,jz),e(jz,Nlr),e(sT,jlr),e(N,Dlr),e(N,lT),e(lT,M1e),e(M1e,Glr),e(lT,Olr),e(lT,Dz),e(Dz,Vlr),e(lT,Xlr),e(N,zlr),e(N,iT),e(iT,E1e),e(E1e,Qlr),e(iT,Wlr),e(iT,Gz),e(Gz,Hlr),e(iT,Ulr),e(N,Jlr),e(N,dT),e(dT,C1e),e(C1e,Ylr),e(dT,Klr),e(dT,Oz),e(Oz,Zlr),e(dT,eir),e(N,oir),e(N,cT),e(cT,w1e),e(w1e,rir),e(cT,tir),e(cT,Vz),e(Vz,air),e(cT,nir),e(wr,sir),M(fT,wr,null),b(f,jIe,_),b(f,Gd,_),e(Gd,mT),e(mT,A1e),M(Py,A1e,null),e(Gd,lir),e(Gd,y1e),e(y1e,iir),b(f,DIe,_),b(f,Ko,_),M(By,Ko,null),e(Ko,dir),e(Ko,Od),e(Od,cir),e(Od,Xz),e(Xz,fir),e(Od,mir),e(Od,zz),e(zz,gir),e(Od,hir),e(Ko,pir),e(Ko,Iy),e(Iy,uir),e(Iy,L1e),e(L1e,_ir),e(Iy,bir),e(Ko,vir),e(Ko,At),M(qy,At,null),e(At,Fir),e(At,x1e),e(x1e,Tir),e(At,Mir),e(At,Vd),e(Vd,Eir),e(Vd,$1e),e($1e,Cir),e(Vd,wir),e(Vd,Qz),e(Qz,Air),e(Vd,yir),e(At,Lir),M(gT,At,null),e(Ko,xir),e(Ko,Ar),M(Ny,Ar,null),e(Ar,$ir),e(Ar,k1e),e(k1e,kir),e(Ar,Sir),e(Ar,Za),e(Za,Rir),e(Za,S1e),e(S1e,Pir),e(Za,Bir),e(Za,R1e),e(R1e,Iir),e(Za,qir),e(Za,P1e),e(P1e,Nir),e(Za,jir),e(Ar,Dir),e(Ar,ne),e(ne,hT),e(hT,B1e),e(B1e,Gir),e(hT,Oir),e(hT,Wz),e(Wz,Vir),e(hT,Xir),e(ne,zir),e(ne,pT),e(pT,I1e),e(I1e,Qir),e(pT,Wir),e(pT,Hz),e(Hz,Hir),e(pT,Uir),e(ne,Jir),e(ne,uT),e(uT,q1e),e(q1e,Yir),e(uT,Kir),e(uT,Uz),e(Uz,Zir),e(uT,edr),e(ne,odr),e(ne,_T),e(_T,N1e),e(N1e,rdr),e(_T,tdr),e(_T,Jz),e(Jz,adr),e(_T,ndr),e(ne,sdr),e(ne,bT),e(bT,j1e),e(j1e,ldr),e(bT,idr),e(bT,Yz),e(Yz,ddr),e(bT,cdr),e(ne,fdr),e(ne,vT),e(vT,D1e),e(D1e,mdr),e(vT,gdr),e(vT,Kz),e(Kz,hdr),e(vT,pdr),e(ne,udr),e(ne,FT),e(FT,G1e),e(G1e,_dr),e(FT,bdr),e(FT,Zz),e(Zz,vdr),e(FT,Fdr),e(ne,Tdr),e(ne,TT),e(TT,O1e),e(O1e,Mdr),e(TT,Edr),e(TT,eQ),e(eQ,Cdr),e(TT,wdr),e(ne,Adr),e(ne,MT),e(MT,V1e),e(V1e,ydr),e(MT,Ldr),e(MT,oQ),e(oQ,xdr),e(MT,$dr),e(ne,kdr),e(ne,ET),e(ET,X1e),e(X1e,Sdr),e(ET,Rdr),e(ET,rQ),e(rQ,Pdr),e(ET,Bdr),e(ne,Idr),e(ne,CT),e(CT,z1e),e(z1e,qdr),e(CT,Ndr),e(CT,tQ),e(tQ,jdr),e(CT,Ddr),e(ne,Gdr),e(ne,wT),e(wT,Q1e),e(Q1e,Odr),e(wT,Vdr),e(wT,aQ),e(aQ,Xdr),e(wT,zdr),e(ne,Qdr),e(ne,AT),e(AT,W1e),e(W1e,Wdr),e(AT,Hdr),e(AT,nQ),e(nQ,Udr),e(AT,Jdr),e(ne,Ydr),e(ne,yT),e(yT,H1e),e(H1e,Kdr),e(yT,Zdr),e(yT,sQ),e(sQ,ecr),e(yT,ocr),e(ne,rcr),e(ne,LT),e(LT,U1e),e(U1e,tcr),e(LT,acr),e(LT,lQ),e(lQ,ncr),e(LT,scr),e(ne,lcr),e(ne,xT),e(xT,J1e),e(J1e,icr),e(xT,dcr),e(xT,iQ),e(iQ,ccr),e(xT,fcr),e(ne,mcr),e(ne,$T),e($T,Y1e),e(Y1e,gcr),e($T,hcr),e($T,dQ),e(dQ,pcr),e($T,ucr),e(ne,_cr),e(ne,kT),e(kT,K1e),e(K1e,bcr),e(kT,vcr),e(kT,cQ),e(cQ,Fcr),e(kT,Tcr),e(ne,Mcr),e(ne,ST),e(ST,Z1e),e(Z1e,Ecr),e(ST,Ccr),e(ST,fQ),e(fQ,wcr),e(ST,Acr),e(ne,ycr),e(ne,RT),e(RT,e8e),e(e8e,Lcr),e(RT,xcr),e(RT,mQ),e(mQ,$cr),e(RT,kcr),e(ne,Scr),e(ne,PT),e(PT,o8e),e(o8e,Rcr),e(PT,Pcr),e(PT,gQ),e(gQ,Bcr),e(PT,Icr),e(ne,qcr),e(ne,BT),e(BT,r8e),e(r8e,Ncr),e(BT,jcr),e(BT,hQ),e(hQ,Dcr),e(BT,Gcr),e(ne,Ocr),e(ne,IT),e(IT,t8e),e(t8e,Vcr),e(IT,Xcr),e(IT,pQ),e(pQ,zcr),e(IT,Qcr),e(Ar,Wcr),M(qT,Ar,null),b(f,GIe,_),b(f,Xd,_),e(Xd,NT),e(NT,a8e),M(jy,a8e,null),e(Xd,Hcr),e(Xd,n8e),e(n8e,Ucr),b(f,OIe,_),b(f,Zo,_),M(Dy,Zo,null),e(Zo,Jcr),e(Zo,zd),e(zd,Ycr),e(zd,uQ),e(uQ,Kcr),e(zd,Zcr),e(zd,_Q),e(_Q,efr),e(zd,ofr),e(Zo,rfr),e(Zo,Gy),e(Gy,tfr),e(Gy,s8e),e(s8e,afr),e(Gy,nfr),e(Zo,sfr),e(Zo,yt),M(Oy,yt,null),e(yt,lfr),e(yt,l8e),e(l8e,ifr),e(yt,dfr),e(yt,Qd),e(Qd,cfr),e(Qd,i8e),e(i8e,ffr),e(Qd,mfr),e(Qd,bQ),e(bQ,gfr),e(Qd,hfr),e(yt,pfr),M(jT,yt,null),e(Zo,ufr),e(Zo,yr),M(Vy,yr,null),e(yr,_fr),e(yr,d8e),e(d8e,bfr),e(yr,vfr),e(yr,en),e(en,Ffr),e(en,c8e),e(c8e,Tfr),e(en,Mfr),e(en,f8e),e(f8e,Efr),e(en,Cfr),e(en,m8e),e(m8e,wfr),e(en,Afr),e(yr,yfr),e(yr,Te),e(Te,DT),e(DT,g8e),e(g8e,Lfr),e(DT,xfr),e(DT,vQ),e(vQ,$fr),e(DT,kfr),e(Te,Sfr),e(Te,GT),e(GT,h8e),e(h8e,Rfr),e(GT,Pfr),e(GT,FQ),e(FQ,Bfr),e(GT,Ifr),e(Te,qfr),e(Te,OT),e(OT,p8e),e(p8e,Nfr),e(OT,jfr),e(OT,TQ),e(TQ,Dfr),e(OT,Gfr),e(Te,Ofr),e(Te,VT),e(VT,u8e),e(u8e,Vfr),e(VT,Xfr),e(VT,MQ),e(MQ,zfr),e(VT,Qfr),e(Te,Wfr),e(Te,XT),e(XT,_8e),e(_8e,Hfr),e(XT,Ufr),e(XT,EQ),e(EQ,Jfr),e(XT,Yfr),e(Te,Kfr),e(Te,zT),e(zT,b8e),e(b8e,Zfr),e(zT,emr),e(zT,CQ),e(CQ,omr),e(zT,rmr),e(Te,tmr),e(Te,QT),e(QT,v8e),e(v8e,amr),e(QT,nmr),e(QT,wQ),e(wQ,smr),e(QT,lmr),e(Te,imr),e(Te,WT),e(WT,F8e),e(F8e,dmr),e(WT,cmr),e(WT,AQ),e(AQ,fmr),e(WT,mmr),e(Te,gmr),e(Te,HT),e(HT,T8e),e(T8e,hmr),e(HT,pmr),e(HT,yQ),e(yQ,umr),e(HT,_mr),e(Te,bmr),e(Te,UT),e(UT,M8e),e(M8e,vmr),e(UT,Fmr),e(UT,LQ),e(LQ,Tmr),e(UT,Mmr),e(Te,Emr),e(Te,JT),e(JT,E8e),e(E8e,Cmr),e(JT,wmr),e(JT,xQ),e(xQ,Amr),e(JT,ymr),e(Te,Lmr),e(Te,YT),e(YT,C8e),e(C8e,xmr),e(YT,$mr),e(YT,$Q),e($Q,kmr),e(YT,Smr),e(yr,Rmr),M(KT,yr,null),b(f,VIe,_),b(f,Wd,_),e(Wd,ZT),e(ZT,w8e),M(Xy,w8e,null),e(Wd,Pmr),e(Wd,A8e),e(A8e,Bmr),b(f,XIe,_),b(f,er,_),M(zy,er,null),e(er,Imr),e(er,Hd),e(Hd,qmr),e(Hd,kQ),e(kQ,Nmr),e(Hd,jmr),e(Hd,SQ),e(SQ,Dmr),e(Hd,Gmr),e(er,Omr),e(er,Qy),e(Qy,Vmr),e(Qy,y8e),e(y8e,Xmr),e(Qy,zmr),e(er,Qmr),e(er,Lt),M(Wy,Lt,null),e(Lt,Wmr),e(Lt,L8e),e(L8e,Hmr),e(Lt,Umr),e(Lt,Ud),e(Ud,Jmr),e(Ud,x8e),e(x8e,Ymr),e(Ud,Kmr),e(Ud,RQ),e(RQ,Zmr),e(Ud,egr),e(Lt,ogr),M(e7,Lt,null),e(er,rgr),e(er,Lr),M(Hy,Lr,null),e(Lr,tgr),e(Lr,$8e),e($8e,agr),e(Lr,ngr),e(Lr,on),e(on,sgr),e(on,k8e),e(k8e,lgr),e(on,igr),e(on,S8e),e(S8e,dgr),e(on,cgr),e(on,R8e),e(R8e,fgr),e(on,mgr),e(Lr,ggr),e(Lr,Jd),e(Jd,o7),e(o7,P8e),e(P8e,hgr),e(o7,pgr),e(o7,PQ),e(PQ,ugr),e(o7,_gr),e(Jd,bgr),e(Jd,r7),e(r7,B8e),e(B8e,vgr),e(r7,Fgr),e(r7,BQ),e(BQ,Tgr),e(r7,Mgr),e(Jd,Egr),e(Jd,t7),e(t7,I8e),e(I8e,Cgr),e(t7,wgr),e(t7,IQ),e(IQ,Agr),e(t7,ygr),e(Lr,Lgr),M(a7,Lr,null),b(f,zIe,_),b(f,Yd,_),e(Yd,n7),e(n7,q8e),M(Uy,q8e,null),e(Yd,xgr),e(Yd,N8e),e(N8e,$gr),b(f,QIe,_),b(f,or,_),M(Jy,or,null),e(or,kgr),e(or,Kd),e(Kd,Sgr),e(Kd,qQ),e(qQ,Rgr),e(Kd,Pgr),e(Kd,NQ),e(NQ,Bgr),e(Kd,Igr),e(or,qgr),e(or,Yy),e(Yy,Ngr),e(Yy,j8e),e(j8e,jgr),e(Yy,Dgr),e(or,Ggr),e(or,xt),M(Ky,xt,null),e(xt,Ogr),e(xt,D8e),e(D8e,Vgr),e(xt,Xgr),e(xt,Zd),e(Zd,zgr),e(Zd,G8e),e(G8e,Qgr),e(Zd,Wgr),e(Zd,jQ),e(jQ,Hgr),e(Zd,Ugr),e(xt,Jgr),M(s7,xt,null),e(or,Ygr),e(or,xr),M(Zy,xr,null),e(xr,Kgr),e(xr,O8e),e(O8e,Zgr),e(xr,ehr),e(xr,rn),e(rn,ohr),e(rn,V8e),e(V8e,rhr),e(rn,thr),e(rn,X8e),e(X8e,ahr),e(rn,nhr),e(rn,z8e),e(z8e,shr),e(rn,lhr),e(xr,ihr),e(xr,ie),e(ie,l7),e(l7,Q8e),e(Q8e,dhr),e(l7,chr),e(l7,DQ),e(DQ,fhr),e(l7,mhr),e(ie,ghr),e(ie,i7),e(i7,W8e),e(W8e,hhr),e(i7,phr),e(i7,GQ),e(GQ,uhr),e(i7,_hr),e(ie,bhr),e(ie,d7),e(d7,H8e),e(H8e,vhr),e(d7,Fhr),e(d7,OQ),e(OQ,Thr),e(d7,Mhr),e(ie,Ehr),e(ie,c7),e(c7,U8e),e(U8e,Chr),e(c7,whr),e(c7,VQ),e(VQ,Ahr),e(c7,yhr),e(ie,Lhr),e(ie,f7),e(f7,J8e),e(J8e,xhr),e(f7,$hr),e(f7,XQ),e(XQ,khr),e(f7,Shr),e(ie,Rhr),e(ie,m7),e(m7,Y8e),e(Y8e,Phr),e(m7,Bhr),e(m7,zQ),e(zQ,Ihr),e(m7,qhr),e(ie,Nhr),e(ie,g7),e(g7,K8e),e(K8e,jhr),e(g7,Dhr),e(g7,QQ),e(QQ,Ghr),e(g7,Ohr),e(ie,Vhr),e(ie,h7),e(h7,Z8e),e(Z8e,Xhr),e(h7,zhr),e(h7,WQ),e(WQ,Qhr),e(h7,Whr),e(ie,Hhr),e(ie,p7),e(p7,ebe),e(ebe,Uhr),e(p7,Jhr),e(p7,HQ),e(HQ,Yhr),e(p7,Khr),e(ie,Zhr),e(ie,u7),e(u7,obe),e(obe,epr),e(u7,opr),e(u7,UQ),e(UQ,rpr),e(u7,tpr),e(ie,apr),e(ie,_7),e(_7,rbe),e(rbe,npr),e(_7,spr),e(_7,JQ),e(JQ,lpr),e(_7,ipr),e(ie,dpr),e(ie,b7),e(b7,tbe),e(tbe,cpr),e(b7,fpr),e(b7,YQ),e(YQ,mpr),e(b7,gpr),e(ie,hpr),e(ie,v7),e(v7,abe),e(abe,ppr),e(v7,upr),e(v7,KQ),e(KQ,_pr),e(v7,bpr),e(ie,vpr),e(ie,F7),e(F7,nbe),e(nbe,Fpr),e(F7,Tpr),e(F7,ZQ),e(ZQ,Mpr),e(F7,Epr),e(ie,Cpr),e(ie,T7),e(T7,sbe),e(sbe,wpr),e(T7,Apr),e(T7,eW),e(eW,ypr),e(T7,Lpr),e(ie,xpr),e(ie,M7),e(M7,lbe),e(lbe,$pr),e(M7,kpr),e(M7,oW),e(oW,Spr),e(M7,Rpr),e(ie,Ppr),e(ie,E7),e(E7,ibe),e(ibe,Bpr),e(E7,Ipr),e(E7,rW),e(rW,qpr),e(E7,Npr),e(ie,jpr),e(ie,C7),e(C7,dbe),e(dbe,Dpr),e(C7,Gpr),e(C7,tW),e(tW,Opr),e(C7,Vpr),e(ie,Xpr),e(ie,w7),e(w7,cbe),e(cbe,zpr),e(w7,Qpr),e(w7,aW),e(aW,Wpr),e(w7,Hpr),e(ie,Upr),e(ie,A7),e(A7,fbe),e(fbe,Jpr),e(A7,Ypr),e(A7,nW),e(nW,Kpr),e(A7,Zpr),e(xr,eur),M(y7,xr,null),b(f,WIe,_),b(f,ec,_),e(ec,L7),e(L7,mbe),M(eL,mbe,null),e(ec,our),e(ec,gbe),e(gbe,rur),b(f,HIe,_),b(f,rr,_),M(oL,rr,null),e(rr,tur),e(rr,oc),e(oc,aur),e(oc,sW),e(sW,nur),e(oc,sur),e(oc,lW),e(lW,lur),e(oc,iur),e(rr,dur),e(rr,rL),e(rL,cur),e(rL,hbe),e(hbe,fur),e(rL,mur),e(rr,gur),e(rr,$t),M(tL,$t,null),e($t,hur),e($t,pbe),e(pbe,pur),e($t,uur),e($t,rc),e(rc,_ur),e(rc,ube),e(ube,bur),e(rc,vur),e(rc,iW),e(iW,Fur),e(rc,Tur),e($t,Mur),M(x7,$t,null),e(rr,Eur),e(rr,$r),M(aL,$r,null),e($r,Cur),e($r,_be),e(_be,wur),e($r,Aur),e($r,tn),e(tn,yur),e(tn,bbe),e(bbe,Lur),e(tn,xur),e(tn,vbe),e(vbe,$ur),e(tn,kur),e(tn,Fbe),e(Fbe,Sur),e(tn,Rur),e($r,Pur),e($r,ye),e(ye,$7),e($7,Tbe),e(Tbe,Bur),e($7,Iur),e($7,dW),e(dW,qur),e($7,Nur),e(ye,jur),e(ye,k7),e(k7,Mbe),e(Mbe,Dur),e(k7,Gur),e(k7,cW),e(cW,Our),e(k7,Vur),e(ye,Xur),e(ye,S7),e(S7,Ebe),e(Ebe,zur),e(S7,Qur),e(S7,fW),e(fW,Wur),e(S7,Hur),e(ye,Uur),e(ye,R7),e(R7,Cbe),e(Cbe,Jur),e(R7,Yur),e(R7,mW),e(mW,Kur),e(R7,Zur),e(ye,e_r),e(ye,P7),e(P7,wbe),e(wbe,o_r),e(P7,r_r),e(P7,gW),e(gW,t_r),e(P7,a_r),e(ye,n_r),e(ye,B7),e(B7,Abe),e(Abe,s_r),e(B7,l_r),e(B7,hW),e(hW,i_r),e(B7,d_r),e(ye,c_r),e(ye,I7),e(I7,ybe),e(ybe,f_r),e(I7,m_r),e(I7,pW),e(pW,g_r),e(I7,h_r),e(ye,p_r),e(ye,q7),e(q7,Lbe),e(Lbe,u_r),e(q7,__r),e(q7,uW),e(uW,b_r),e(q7,v_r),e(ye,F_r),e(ye,N7),e(N7,xbe),e(xbe,T_r),e(N7,M_r),e(N7,_W),e(_W,E_r),e(N7,C_r),e(ye,w_r),e(ye,j7),e(j7,$be),e($be,A_r),e(j7,y_r),e(j7,bW),e(bW,L_r),e(j7,x_r),e($r,$_r),M(D7,$r,null),b(f,UIe,_),b(f,tc,_),e(tc,G7),e(G7,kbe),M(nL,kbe,null),e(tc,k_r),e(tc,Sbe),e(Sbe,S_r),b(f,JIe,_),b(f,tr,_),M(sL,tr,null),e(tr,R_r),e(tr,ac),e(ac,P_r),e(ac,vW),e(vW,B_r),e(ac,I_r),e(ac,FW),e(FW,q_r),e(ac,N_r),e(tr,j_r),e(tr,lL),e(lL,D_r),e(lL,Rbe),e(Rbe,G_r),e(lL,O_r),e(tr,V_r),e(tr,kt),M(iL,kt,null),e(kt,X_r),e(kt,Pbe),e(Pbe,z_r),e(kt,Q_r),e(kt,nc),e(nc,W_r),e(nc,Bbe),e(Bbe,H_r),e(nc,U_r),e(nc,TW),e(TW,J_r),e(nc,Y_r),e(kt,K_r),M(O7,kt,null),e(tr,Z_r),e(tr,kr),M(dL,kr,null),e(kr,e1r),e(kr,Ibe),e(Ibe,o1r),e(kr,r1r),e(kr,an),e(an,t1r),e(an,qbe),e(qbe,a1r),e(an,n1r),e(an,Nbe),e(Nbe,s1r),e(an,l1r),e(an,jbe),e(jbe,i1r),e(an,d1r),e(kr,c1r),e(kr,Z),e(Z,V7),e(V7,Dbe),e(Dbe,f1r),e(V7,m1r),e(V7,MW),e(MW,g1r),e(V7,h1r),e(Z,p1r),e(Z,X7),e(X7,Gbe),e(Gbe,u1r),e(X7,_1r),e(X7,EW),e(EW,b1r),e(X7,v1r),e(Z,F1r),e(Z,z7),e(z7,Obe),e(Obe,T1r),e(z7,M1r),e(z7,CW),e(CW,E1r),e(z7,C1r),e(Z,w1r),e(Z,Q7),e(Q7,Vbe),e(Vbe,A1r),e(Q7,y1r),e(Q7,wW),e(wW,L1r),e(Q7,x1r),e(Z,$1r),e(Z,W7),e(W7,Xbe),e(Xbe,k1r),e(W7,S1r),e(W7,AW),e(AW,R1r),e(W7,P1r),e(Z,B1r),e(Z,H7),e(H7,zbe),e(zbe,I1r),e(H7,q1r),e(H7,yW),e(yW,N1r),e(H7,j1r),e(Z,D1r),e(Z,U7),e(U7,Qbe),e(Qbe,G1r),e(U7,O1r),e(U7,LW),e(LW,V1r),e(U7,X1r),e(Z,z1r),e(Z,J7),e(J7,Wbe),e(Wbe,Q1r),e(J7,W1r),e(J7,xW),e(xW,H1r),e(J7,U1r),e(Z,J1r),e(Z,Y7),e(Y7,Hbe),e(Hbe,Y1r),e(Y7,K1r),e(Y7,$W),e($W,Z1r),e(Y7,e8r),e(Z,o8r),e(Z,K7),e(K7,Ube),e(Ube,r8r),e(K7,t8r),e(K7,kW),e(kW,a8r),e(K7,n8r),e(Z,s8r),e(Z,Z7),e(Z7,Jbe),e(Jbe,l8r),e(Z7,i8r),e(Z7,SW),e(SW,d8r),e(Z7,c8r),e(Z,f8r),e(Z,eM),e(eM,Ybe),e(Ybe,m8r),e(eM,g8r),e(eM,RW),e(RW,h8r),e(eM,p8r),e(Z,u8r),e(Z,oM),e(oM,Kbe),e(Kbe,_8r),e(oM,b8r),e(oM,PW),e(PW,v8r),e(oM,F8r),e(Z,T8r),e(Z,rM),e(rM,Zbe),e(Zbe,M8r),e(rM,E8r),e(rM,BW),e(BW,C8r),e(rM,w8r),e(Z,A8r),e(Z,tM),e(tM,e2e),e(e2e,y8r),e(tM,L8r),e(tM,IW),e(IW,x8r),e(tM,$8r),e(Z,k8r),e(Z,aM),e(aM,o2e),e(o2e,S8r),e(aM,R8r),e(aM,qW),e(qW,P8r),e(aM,B8r),e(Z,I8r),e(Z,nM),e(nM,r2e),e(r2e,q8r),e(nM,N8r),e(nM,NW),e(NW,j8r),e(nM,D8r),e(Z,G8r),e(Z,sM),e(sM,t2e),e(t2e,O8r),e(sM,V8r),e(sM,jW),e(jW,X8r),e(sM,z8r),e(Z,Q8r),e(Z,lM),e(lM,a2e),e(a2e,W8r),e(lM,H8r),e(lM,DW),e(DW,U8r),e(lM,J8r),e(Z,Y8r),e(Z,iM),e(iM,n2e),e(n2e,K8r),e(iM,Z8r),e(iM,GW),e(GW,ebr),e(iM,obr),e(Z,rbr),e(Z,dM),e(dM,s2e),e(s2e,tbr),e(dM,abr),e(dM,OW),e(OW,nbr),e(dM,sbr),e(Z,lbr),e(Z,cM),e(cM,l2e),e(l2e,ibr),e(cM,dbr),e(cM,VW),e(VW,cbr),e(cM,fbr),e(Z,mbr),e(Z,fM),e(fM,i2e),e(i2e,gbr),e(fM,hbr),e(fM,XW),e(XW,pbr),e(fM,ubr),e(Z,_br),e(Z,mM),e(mM,d2e),e(d2e,bbr),e(mM,vbr),e(mM,zW),e(zW,Fbr),e(mM,Tbr),e(Z,Mbr),e(Z,gM),e(gM,c2e),e(c2e,Ebr),e(gM,Cbr),e(gM,QW),e(QW,wbr),e(gM,Abr),e(Z,ybr),e(Z,hM),e(hM,f2e),e(f2e,Lbr),e(hM,xbr),e(hM,WW),e(WW,$br),e(hM,kbr),e(kr,Sbr),M(pM,kr,null),b(f,YIe,_),b(f,sc,_),e(sc,uM),e(uM,m2e),M(cL,m2e,null),e(sc,Rbr),e(sc,g2e),e(g2e,Pbr),b(f,KIe,_),b(f,ar,_),M(fL,ar,null),e(ar,Bbr),e(ar,lc),e(lc,Ibr),e(lc,HW),e(HW,qbr),e(lc,Nbr),e(lc,UW),e(UW,jbr),e(lc,Dbr),e(ar,Gbr),e(ar,mL),e(mL,Obr),e(mL,h2e),e(h2e,Vbr),e(mL,Xbr),e(ar,zbr),e(ar,St),M(gL,St,null),e(St,Qbr),e(St,p2e),e(p2e,Wbr),e(St,Hbr),e(St,ic),e(ic,Ubr),e(ic,u2e),e(u2e,Jbr),e(ic,Ybr),e(ic,JW),e(JW,Kbr),e(ic,Zbr),e(St,e2r),M(_M,St,null),e(ar,o2r),e(ar,Sr),M(hL,Sr,null),e(Sr,r2r),e(Sr,_2e),e(_2e,t2r),e(Sr,a2r),e(Sr,nn),e(nn,n2r),e(nn,b2e),e(b2e,s2r),e(nn,l2r),e(nn,v2e),e(v2e,i2r),e(nn,d2r),e(nn,F2e),e(F2e,c2r),e(nn,f2r),e(Sr,m2r),e(Sr,pe),e(pe,bM),e(bM,T2e),e(T2e,g2r),e(bM,h2r),e(bM,YW),e(YW,p2r),e(bM,u2r),e(pe,_2r),e(pe,vM),e(vM,M2e),e(M2e,b2r),e(vM,v2r),e(vM,KW),e(KW,F2r),e(vM,T2r),e(pe,M2r),e(pe,FM),e(FM,E2e),e(E2e,E2r),e(FM,C2r),e(FM,ZW),e(ZW,w2r),e(FM,A2r),e(pe,y2r),e(pe,TM),e(TM,C2e),e(C2e,L2r),e(TM,x2r),e(TM,eH),e(eH,$2r),e(TM,k2r),e(pe,S2r),e(pe,MM),e(MM,w2e),e(w2e,R2r),e(MM,P2r),e(MM,oH),e(oH,B2r),e(MM,I2r),e(pe,q2r),e(pe,EM),e(EM,A2e),e(A2e,N2r),e(EM,j2r),e(EM,rH),e(rH,D2r),e(EM,G2r),e(pe,O2r),e(pe,CM),e(CM,y2e),e(y2e,V2r),e(CM,X2r),e(CM,tH),e(tH,z2r),e(CM,Q2r),e(pe,W2r),e(pe,wM),e(wM,L2e),e(L2e,H2r),e(wM,U2r),e(wM,aH),e(aH,J2r),e(wM,Y2r),e(pe,K2r),e(pe,AM),e(AM,x2e),e(x2e,Z2r),e(AM,evr),e(AM,nH),e(nH,ovr),e(AM,rvr),e(pe,tvr),e(pe,yM),e(yM,$2e),e($2e,avr),e(yM,nvr),e(yM,sH),e(sH,svr),e(yM,lvr),e(pe,ivr),e(pe,LM),e(LM,k2e),e(k2e,dvr),e(LM,cvr),e(LM,lH),e(lH,fvr),e(LM,mvr),e(pe,gvr),e(pe,xM),e(xM,S2e),e(S2e,hvr),e(xM,pvr),e(xM,iH),e(iH,uvr),e(xM,_vr),e(pe,bvr),e(pe,$M),e($M,R2e),e(R2e,vvr),e($M,Fvr),e($M,dH),e(dH,Tvr),e($M,Mvr),e(pe,Evr),e(pe,kM),e(kM,P2e),e(P2e,Cvr),e(kM,wvr),e(kM,cH),e(cH,Avr),e(kM,yvr),e(pe,Lvr),e(pe,SM),e(SM,B2e),e(B2e,xvr),e(SM,$vr),e(SM,fH),e(fH,kvr),e(SM,Svr),e(pe,Rvr),e(pe,RM),e(RM,I2e),e(I2e,Pvr),e(RM,Bvr),e(RM,mH),e(mH,Ivr),e(RM,qvr),e(pe,Nvr),e(pe,PM),e(PM,q2e),e(q2e,jvr),e(PM,Dvr),e(PM,gH),e(gH,Gvr),e(PM,Ovr),e(Sr,Vvr),M(BM,Sr,null),b(f,ZIe,_),b(f,dc,_),e(dc,IM),e(IM,N2e),M(pL,N2e,null),e(dc,Xvr),e(dc,j2e),e(j2e,zvr),b(f,eqe,_),b(f,nr,_),M(uL,nr,null),e(nr,Qvr),e(nr,cc),e(cc,Wvr),e(cc,hH),e(hH,Hvr),e(cc,Uvr),e(cc,pH),e(pH,Jvr),e(cc,Yvr),e(nr,Kvr),e(nr,_L),e(_L,Zvr),e(_L,D2e),e(D2e,eFr),e(_L,oFr),e(nr,rFr),e(nr,Rt),M(bL,Rt,null),e(Rt,tFr),e(Rt,G2e),e(G2e,aFr),e(Rt,nFr),e(Rt,fc),e(fc,sFr),e(fc,O2e),e(O2e,lFr),e(fc,iFr),e(fc,uH),e(uH,dFr),e(fc,cFr),e(Rt,fFr),M(qM,Rt,null),e(nr,mFr),e(nr,Rr),M(vL,Rr,null),e(Rr,gFr),e(Rr,V2e),e(V2e,hFr),e(Rr,pFr),e(Rr,sn),e(sn,uFr),e(sn,X2e),e(X2e,_Fr),e(sn,bFr),e(sn,z2e),e(z2e,vFr),e(sn,FFr),e(sn,Q2e),e(Q2e,TFr),e(sn,MFr),e(Rr,EFr),e(Rr,FL),e(FL,NM),e(NM,W2e),e(W2e,CFr),e(NM,wFr),e(NM,_H),e(_H,AFr),e(NM,yFr),e(FL,LFr),e(FL,jM),e(jM,H2e),e(H2e,xFr),e(jM,$Fr),e(jM,bH),e(bH,kFr),e(jM,SFr),e(Rr,RFr),M(DM,Rr,null),b(f,oqe,_),b(f,mc,_),e(mc,GM),e(GM,U2e),M(TL,U2e,null),e(mc,PFr),e(mc,J2e),e(J2e,BFr),b(f,rqe,_),b(f,sr,_),M(ML,sr,null),e(sr,IFr),e(sr,gc),e(gc,qFr),e(gc,vH),e(vH,NFr),e(gc,jFr),e(gc,FH),e(FH,DFr),e(gc,GFr),e(sr,OFr),e(sr,EL),e(EL,VFr),e(EL,Y2e),e(Y2e,XFr),e(EL,zFr),e(sr,QFr),e(sr,Pt),M(CL,Pt,null),e(Pt,WFr),e(Pt,K2e),e(K2e,HFr),e(Pt,UFr),e(Pt,hc),e(hc,JFr),e(hc,Z2e),e(Z2e,YFr),e(hc,KFr),e(hc,TH),e(TH,ZFr),e(hc,e0r),e(Pt,o0r),M(OM,Pt,null),e(sr,r0r),e(sr,Pr),M(wL,Pr,null),e(Pr,t0r),e(Pr,eve),e(eve,a0r),e(Pr,n0r),e(Pr,ln),e(ln,s0r),e(ln,ove),e(ove,l0r),e(ln,i0r),e(ln,rve),e(rve,d0r),e(ln,c0r),e(ln,tve),e(tve,f0r),e(ln,m0r),e(Pr,g0r),e(Pr,ave),e(ave,VM),e(VM,nve),e(nve,h0r),e(VM,p0r),e(VM,MH),e(MH,u0r),e(VM,_0r),e(Pr,b0r),M(XM,Pr,null),b(f,tqe,_),b(f,pc,_),e(pc,zM),e(zM,sve),M(AL,sve,null),e(pc,v0r),e(pc,lve),e(lve,F0r),b(f,aqe,_),b(f,lr,_),M(yL,lr,null),e(lr,T0r),e(lr,uc),e(uc,M0r),e(uc,EH),e(EH,E0r),e(uc,C0r),e(uc,CH),e(CH,w0r),e(uc,A0r),e(lr,y0r),e(lr,LL),e(LL,L0r),e(LL,ive),e(ive,x0r),e(LL,$0r),e(lr,k0r),e(lr,Bt),M(xL,Bt,null),e(Bt,S0r),e(Bt,dve),e(dve,R0r),e(Bt,P0r),e(Bt,_c),e(_c,B0r),e(_c,cve),e(cve,I0r),e(_c,q0r),e(_c,wH),e(wH,N0r),e(_c,j0r),e(Bt,D0r),M(QM,Bt,null),e(lr,G0r),e(lr,Br),M($L,Br,null),e(Br,O0r),e(Br,fve),e(fve,V0r),e(Br,X0r),e(Br,dn),e(dn,z0r),e(dn,mve),e(mve,Q0r),e(dn,W0r),e(dn,gve),e(gve,H0r),e(dn,U0r),e(dn,hve),e(hve,J0r),e(dn,Y0r),e(Br,K0r),e(Br,de),e(de,WM),e(WM,pve),e(pve,Z0r),e(WM,eTr),e(WM,AH),e(AH,oTr),e(WM,rTr),e(de,tTr),e(de,HM),e(HM,uve),e(uve,aTr),e(HM,nTr),e(HM,yH),e(yH,sTr),e(HM,lTr),e(de,iTr),e(de,UM),e(UM,_ve),e(_ve,dTr),e(UM,cTr),e(UM,LH),e(LH,fTr),e(UM,mTr),e(de,gTr),e(de,JM),e(JM,bve),e(bve,hTr),e(JM,pTr),e(JM,xH),e(xH,uTr),e(JM,_Tr),e(de,bTr),e(de,YM),e(YM,vve),e(vve,vTr),e(YM,FTr),e(YM,$H),e($H,TTr),e(YM,MTr),e(de,ETr),e(de,KM),e(KM,Fve),e(Fve,CTr),e(KM,wTr),e(KM,kH),e(kH,ATr),e(KM,yTr),e(de,LTr),e(de,ZM),e(ZM,Tve),e(Tve,xTr),e(ZM,$Tr),e(ZM,SH),e(SH,kTr),e(ZM,STr),e(de,RTr),e(de,e4),e(e4,Mve),e(Mve,PTr),e(e4,BTr),e(e4,RH),e(RH,ITr),e(e4,qTr),e(de,NTr),e(de,o4),e(o4,Eve),e(Eve,jTr),e(o4,DTr),e(o4,PH),e(PH,GTr),e(o4,OTr),e(de,VTr),e(de,r4),e(r4,Cve),e(Cve,XTr),e(r4,zTr),e(r4,BH),e(BH,QTr),e(r4,WTr),e(de,HTr),e(de,t4),e(t4,wve),e(wve,UTr),e(t4,JTr),e(t4,IH),e(IH,YTr),e(t4,KTr),e(de,ZTr),e(de,a4),e(a4,Ave),e(Ave,e7r),e(a4,o7r),e(a4,qH),e(qH,r7r),e(a4,t7r),e(de,a7r),e(de,n4),e(n4,yve),e(yve,n7r),e(n4,s7r),e(n4,NH),e(NH,l7r),e(n4,i7r),e(de,d7r),e(de,s4),e(s4,Lve),e(Lve,c7r),e(s4,f7r),e(s4,jH),e(jH,m7r),e(s4,g7r),e(de,h7r),e(de,l4),e(l4,xve),e(xve,p7r),e(l4,u7r),e(l4,DH),e(DH,_7r),e(l4,b7r),e(de,v7r),e(de,i4),e(i4,$ve),e($ve,F7r),e(i4,T7r),e(i4,GH),e(GH,M7r),e(i4,E7r),e(de,C7r),e(de,d4),e(d4,kve),e(kve,w7r),e(d4,A7r),e(d4,OH),e(OH,y7r),e(d4,L7r),e(de,x7r),e(de,c4),e(c4,Sve),e(Sve,$7r),e(c4,k7r),e(c4,VH),e(VH,S7r),e(c4,R7r),e(de,P7r),e(de,f4),e(f4,Rve),e(Rve,B7r),e(f4,I7r),e(f4,XH),e(XH,q7r),e(f4,N7r),e(de,j7r),e(de,m4),e(m4,Pve),e(Pve,D7r),e(m4,G7r),e(m4,zH),e(zH,O7r),e(m4,V7r),e(Br,X7r),M(g4,Br,null),b(f,nqe,_),b(f,bc,_),e(bc,h4),e(h4,Bve),M(kL,Bve,null),e(bc,z7r),e(bc,Ive),e(Ive,Q7r),b(f,sqe,_),b(f,ir,_),M(SL,ir,null),e(ir,W7r),e(ir,vc),e(vc,H7r),e(vc,QH),e(QH,U7r),e(vc,J7r),e(vc,WH),e(WH,Y7r),e(vc,K7r),e(ir,Z7r),e(ir,RL),e(RL,eMr),e(RL,qve),e(qve,oMr),e(RL,rMr),e(ir,tMr),e(ir,It),M(PL,It,null),e(It,aMr),e(It,Nve),e(Nve,nMr),e(It,sMr),e(It,Fc),e(Fc,lMr),e(Fc,jve),e(jve,iMr),e(Fc,dMr),e(Fc,HH),e(HH,cMr),e(Fc,fMr),e(It,mMr),M(p4,It,null),e(ir,gMr),e(ir,Ir),M(BL,Ir,null),e(Ir,hMr),e(Ir,Dve),e(Dve,pMr),e(Ir,uMr),e(Ir,cn),e(cn,_Mr),e(cn,Gve),e(Gve,bMr),e(cn,vMr),e(cn,Ove),e(Ove,FMr),e(cn,TMr),e(cn,Vve),e(Vve,MMr),e(cn,EMr),e(Ir,CMr),e(Ir,ce),e(ce,u4),e(u4,Xve),e(Xve,wMr),e(u4,AMr),e(u4,UH),e(UH,yMr),e(u4,LMr),e(ce,xMr),e(ce,_4),e(_4,zve),e(zve,$Mr),e(_4,kMr),e(_4,JH),e(JH,SMr),e(_4,RMr),e(ce,PMr),e(ce,b4),e(b4,Qve),e(Qve,BMr),e(b4,IMr),e(b4,YH),e(YH,qMr),e(b4,NMr),e(ce,jMr),e(ce,v4),e(v4,Wve),e(Wve,DMr),e(v4,GMr),e(v4,KH),e(KH,OMr),e(v4,VMr),e(ce,XMr),e(ce,F4),e(F4,Hve),e(Hve,zMr),e(F4,QMr),e(F4,ZH),e(ZH,WMr),e(F4,HMr),e(ce,UMr),e(ce,T4),e(T4,Uve),e(Uve,JMr),e(T4,YMr),e(T4,eU),e(eU,KMr),e(T4,ZMr),e(ce,e4r),e(ce,M4),e(M4,Jve),e(Jve,o4r),e(M4,r4r),e(M4,oU),e(oU,t4r),e(M4,a4r),e(ce,n4r),e(ce,E4),e(E4,Yve),e(Yve,s4r),e(E4,l4r),e(E4,rU),e(rU,i4r),e(E4,d4r),e(ce,c4r),e(ce,C4),e(C4,Kve),e(Kve,f4r),e(C4,m4r),e(C4,tU),e(tU,g4r),e(C4,h4r),e(ce,p4r),e(ce,w4),e(w4,Zve),e(Zve,u4r),e(w4,_4r),e(w4,aU),e(aU,b4r),e(w4,v4r),e(ce,F4r),e(ce,A4),e(A4,eFe),e(eFe,T4r),e(A4,M4r),e(A4,nU),e(nU,E4r),e(A4,C4r),e(ce,w4r),e(ce,y4),e(y4,oFe),e(oFe,A4r),e(y4,y4r),e(y4,sU),e(sU,L4r),e(y4,x4r),e(ce,$4r),e(ce,L4),e(L4,rFe),e(rFe,k4r),e(L4,S4r),e(L4,lU),e(lU,R4r),e(L4,P4r),e(ce,B4r),e(ce,x4),e(x4,tFe),e(tFe,I4r),e(x4,q4r),e(x4,iU),e(iU,N4r),e(x4,j4r),e(ce,D4r),e(ce,$4),e($4,aFe),e(aFe,G4r),e($4,O4r),e($4,dU),e(dU,V4r),e($4,X4r),e(ce,z4r),e(ce,k4),e(k4,nFe),e(nFe,Q4r),e(k4,W4r),e(k4,cU),e(cU,H4r),e(k4,U4r),e(ce,J4r),e(ce,S4),e(S4,sFe),e(sFe,Y4r),e(S4,K4r),e(S4,fU),e(fU,Z4r),e(S4,eEr),e(ce,oEr),e(ce,R4),e(R4,lFe),e(lFe,rEr),e(R4,tEr),e(R4,mU),e(mU,aEr),e(R4,nEr),e(ce,sEr),e(ce,P4),e(P4,iFe),e(iFe,lEr),e(P4,iEr),e(P4,gU),e(gU,dEr),e(P4,cEr),e(ce,fEr),e(ce,B4),e(B4,dFe),e(dFe,mEr),e(B4,gEr),e(B4,hU),e(hU,hEr),e(B4,pEr),e(Ir,uEr),M(I4,Ir,null),b(f,lqe,_),b(f,Tc,_),e(Tc,q4),e(q4,cFe),M(IL,cFe,null),e(Tc,_Er),e(Tc,fFe),e(fFe,bEr),b(f,iqe,_),b(f,dr,_),M(qL,dr,null),e(dr,vEr),e(dr,Mc),e(Mc,FEr),e(Mc,pU),e(pU,TEr),e(Mc,MEr),e(Mc,uU),e(uU,EEr),e(Mc,CEr),e(dr,wEr),e(dr,NL),e(NL,AEr),e(NL,mFe),e(mFe,yEr),e(NL,LEr),e(dr,xEr),e(dr,qt),M(jL,qt,null),e(qt,$Er),e(qt,gFe),e(gFe,kEr),e(qt,SEr),e(qt,Ec),e(Ec,REr),e(Ec,hFe),e(hFe,PEr),e(Ec,BEr),e(Ec,_U),e(_U,IEr),e(Ec,qEr),e(qt,NEr),M(N4,qt,null),e(dr,jEr),e(dr,qr),M(DL,qr,null),e(qr,DEr),e(qr,pFe),e(pFe,GEr),e(qr,OEr),e(qr,fn),e(fn,VEr),e(fn,uFe),e(uFe,XEr),e(fn,zEr),e(fn,_Fe),e(_Fe,QEr),e(fn,WEr),e(fn,bFe),e(bFe,HEr),e(fn,UEr),e(qr,JEr),e(qr,vFe),e(vFe,j4),e(j4,FFe),e(FFe,YEr),e(j4,KEr),e(j4,bU),e(bU,ZEr),e(j4,e5r),e(qr,o5r),M(D4,qr,null),b(f,dqe,_),b(f,Cc,_),e(Cc,G4),e(G4,TFe),M(GL,TFe,null),e(Cc,r5r),e(Cc,MFe),e(MFe,t5r),b(f,cqe,_),b(f,cr,_),M(OL,cr,null),e(cr,a5r),e(cr,wc),e(wc,n5r),e(wc,vU),e(vU,s5r),e(wc,l5r),e(wc,FU),e(FU,i5r),e(wc,d5r),e(cr,c5r),e(cr,VL),e(VL,f5r),e(VL,EFe),e(EFe,m5r),e(VL,g5r),e(cr,h5r),e(cr,Nt),M(XL,Nt,null),e(Nt,p5r),e(Nt,CFe),e(CFe,u5r),e(Nt,_5r),e(Nt,Ac),e(Ac,b5r),e(Ac,wFe),e(wFe,v5r),e(Ac,F5r),e(Ac,TU),e(TU,T5r),e(Ac,M5r),e(Nt,E5r),M(O4,Nt,null),e(cr,C5r),e(cr,Nr),M(zL,Nr,null),e(Nr,w5r),e(Nr,AFe),e(AFe,A5r),e(Nr,y5r),e(Nr,mn),e(mn,L5r),e(mn,yFe),e(yFe,x5r),e(mn,$5r),e(mn,LFe),e(LFe,k5r),e(mn,S5r),e(mn,xFe),e(xFe,R5r),e(mn,P5r),e(Nr,B5r),e(Nr,$Fe),e($Fe,V4),e(V4,kFe),e(kFe,I5r),e(V4,q5r),e(V4,MU),e(MU,N5r),e(V4,j5r),e(Nr,D5r),M(X4,Nr,null),b(f,fqe,_),b(f,yc,_),e(yc,z4),e(z4,SFe),M(QL,SFe,null),e(yc,G5r),e(yc,RFe),e(RFe,O5r),b(f,mqe,_),b(f,fr,_),M(WL,fr,null),e(fr,V5r),e(fr,Lc),e(Lc,X5r),e(Lc,EU),e(EU,z5r),e(Lc,Q5r),e(Lc,CU),e(CU,W5r),e(Lc,H5r),e(fr,U5r),e(fr,HL),e(HL,J5r),e(HL,PFe),e(PFe,Y5r),e(HL,K5r),e(fr,Z5r),e(fr,jt),M(UL,jt,null),e(jt,eCr),e(jt,BFe),e(BFe,oCr),e(jt,rCr),e(jt,xc),e(xc,tCr),e(xc,IFe),e(IFe,aCr),e(xc,nCr),e(xc,wU),e(wU,sCr),e(xc,lCr),e(jt,iCr),M(Q4,jt,null),e(fr,dCr),e(fr,jr),M(JL,jr,null),e(jr,cCr),e(jr,qFe),e(qFe,fCr),e(jr,mCr),e(jr,gn),e(gn,gCr),e(gn,NFe),e(NFe,hCr),e(gn,pCr),e(gn,jFe),e(jFe,uCr),e(gn,_Cr),e(gn,DFe),e(DFe,bCr),e(gn,vCr),e(jr,FCr),e(jr,ee),e(ee,W4),e(W4,GFe),e(GFe,TCr),e(W4,MCr),e(W4,AU),e(AU,ECr),e(W4,CCr),e(ee,wCr),e(ee,H4),e(H4,OFe),e(OFe,ACr),e(H4,yCr),e(H4,yU),e(yU,LCr),e(H4,xCr),e(ee,$Cr),e(ee,U4),e(U4,VFe),e(VFe,kCr),e(U4,SCr),e(U4,LU),e(LU,RCr),e(U4,PCr),e(ee,BCr),e(ee,J4),e(J4,XFe),e(XFe,ICr),e(J4,qCr),e(J4,xU),e(xU,NCr),e(J4,jCr),e(ee,DCr),e(ee,Y4),e(Y4,zFe),e(zFe,GCr),e(Y4,OCr),e(Y4,$U),e($U,VCr),e(Y4,XCr),e(ee,zCr),e(ee,K4),e(K4,QFe),e(QFe,QCr),e(K4,WCr),e(K4,kU),e(kU,HCr),e(K4,UCr),e(ee,JCr),e(ee,Z4),e(Z4,WFe),e(WFe,YCr),e(Z4,KCr),e(Z4,SU),e(SU,ZCr),e(Z4,e3r),e(ee,o3r),e(ee,eE),e(eE,HFe),e(HFe,r3r),e(eE,t3r),e(eE,RU),e(RU,a3r),e(eE,n3r),e(ee,s3r),e(ee,oE),e(oE,UFe),e(UFe,l3r),e(oE,i3r),e(oE,PU),e(PU,d3r),e(oE,c3r),e(ee,f3r),e(ee,rE),e(rE,JFe),e(JFe,m3r),e(rE,g3r),e(rE,BU),e(BU,h3r),e(rE,p3r),e(ee,u3r),e(ee,tE),e(tE,YFe),e(YFe,_3r),e(tE,b3r),e(tE,IU),e(IU,v3r),e(tE,F3r),e(ee,T3r),e(ee,aE),e(aE,KFe),e(KFe,M3r),e(aE,E3r),e(aE,qU),e(qU,C3r),e(aE,w3r),e(ee,A3r),e(ee,nE),e(nE,ZFe),e(ZFe,y3r),e(nE,L3r),e(nE,NU),e(NU,x3r),e(nE,$3r),e(ee,k3r),e(ee,sE),e(sE,e0e),e(e0e,S3r),e(sE,R3r),e(sE,jU),e(jU,P3r),e(sE,B3r),e(ee,I3r),e(ee,lE),e(lE,o0e),e(o0e,q3r),e(lE,N3r),e(lE,DU),e(DU,j3r),e(lE,D3r),e(ee,G3r),e(ee,iE),e(iE,r0e),e(r0e,O3r),e(iE,V3r),e(iE,GU),e(GU,X3r),e(iE,z3r),e(ee,Q3r),e(ee,dE),e(dE,t0e),e(t0e,W3r),e(dE,H3r),e(dE,OU),e(OU,U3r),e(dE,J3r),e(ee,Y3r),e(ee,cE),e(cE,a0e),e(a0e,K3r),e(cE,Z3r),e(cE,VU),e(VU,ewr),e(cE,owr),e(ee,rwr),e(ee,fE),e(fE,n0e),e(n0e,twr),e(fE,awr),e(fE,XU),e(XU,nwr),e(fE,swr),e(ee,lwr),e(ee,mE),e(mE,s0e),e(s0e,iwr),e(mE,dwr),e(mE,zU),e(zU,cwr),e(mE,fwr),e(ee,mwr),e(ee,gE),e(gE,l0e),e(l0e,gwr),e(gE,hwr),e(gE,QU),e(QU,pwr),e(gE,uwr),e(ee,_wr),e(ee,hE),e(hE,i0e),e(i0e,bwr),e(hE,vwr),e(hE,WU),e(WU,Fwr),e(hE,Twr),e(ee,Mwr),e(ee,pE),e(pE,d0e),e(d0e,Ewr),e(pE,Cwr),e(pE,HU),e(HU,wwr),e(pE,Awr),e(ee,ywr),e(ee,uE),e(uE,c0e),e(c0e,Lwr),e(uE,xwr),e(uE,UU),e(UU,$wr),e(uE,kwr),e(ee,Swr),e(ee,_E),e(_E,f0e),e(f0e,Rwr),e(_E,Pwr),e(_E,JU),e(JU,Bwr),e(_E,Iwr),e(ee,qwr),e(ee,bE),e(bE,m0e),e(m0e,Nwr),e(bE,jwr),e(bE,YU),e(YU,Dwr),e(bE,Gwr),e(jr,Owr),M(vE,jr,null),b(f,gqe,_),b(f,$c,_),e($c,FE),e(FE,g0e),M(YL,g0e,null),e($c,Vwr),e($c,h0e),e(h0e,Xwr),b(f,hqe,_),b(f,mr,_),M(KL,mr,null),e(mr,zwr),e(mr,kc),e(kc,Qwr),e(kc,KU),e(KU,Wwr),e(kc,Hwr),e(kc,ZU),e(ZU,Uwr),e(kc,Jwr),e(mr,Ywr),e(mr,ZL),e(ZL,Kwr),e(ZL,p0e),e(p0e,Zwr),e(ZL,eAr),e(mr,oAr),e(mr,Dt),M(ex,Dt,null),e(Dt,rAr),e(Dt,u0e),e(u0e,tAr),e(Dt,aAr),e(Dt,Sc),e(Sc,nAr),e(Sc,_0e),e(_0e,sAr),e(Sc,lAr),e(Sc,eJ),e(eJ,iAr),e(Sc,dAr),e(Dt,cAr),M(TE,Dt,null),e(mr,fAr),e(mr,Dr),M(ox,Dr,null),e(Dr,mAr),e(Dr,b0e),e(b0e,gAr),e(Dr,hAr),e(Dr,hn),e(hn,pAr),e(hn,v0e),e(v0e,uAr),e(hn,_Ar),e(hn,F0e),e(F0e,bAr),e(hn,vAr),e(hn,T0e),e(T0e,FAr),e(hn,TAr),e(Dr,MAr),e(Dr,Le),e(Le,ME),e(ME,M0e),e(M0e,EAr),e(ME,CAr),e(ME,oJ),e(oJ,wAr),e(ME,AAr),e(Le,yAr),e(Le,EE),e(EE,E0e),e(E0e,LAr),e(EE,xAr),e(EE,rJ),e(rJ,$Ar),e(EE,kAr),e(Le,SAr),e(Le,CE),e(CE,C0e),e(C0e,RAr),e(CE,PAr),e(CE,tJ),e(tJ,BAr),e(CE,IAr),e(Le,qAr),e(Le,wE),e(wE,w0e),e(w0e,NAr),e(wE,jAr),e(wE,aJ),e(aJ,DAr),e(wE,GAr),e(Le,OAr),e(Le,AE),e(AE,A0e),e(A0e,VAr),e(AE,XAr),e(AE,nJ),e(nJ,zAr),e(AE,QAr),e(Le,WAr),e(Le,yE),e(yE,y0e),e(y0e,HAr),e(yE,UAr),e(yE,sJ),e(sJ,JAr),e(yE,YAr),e(Le,KAr),e(Le,LE),e(LE,L0e),e(L0e,ZAr),e(LE,e6r),e(LE,lJ),e(lJ,o6r),e(LE,r6r),e(Le,t6r),e(Le,xE),e(xE,x0e),e(x0e,a6r),e(xE,n6r),e(xE,iJ),e(iJ,s6r),e(xE,l6r),e(Le,i6r),e(Le,$E),e($E,$0e),e($0e,d6r),e($E,c6r),e($E,dJ),e(dJ,f6r),e($E,m6r),e(Le,g6r),e(Le,kE),e(kE,k0e),e(k0e,h6r),e(kE,p6r),e(kE,cJ),e(cJ,u6r),e(kE,_6r),e(Dr,b6r),M(SE,Dr,null),b(f,pqe,_),b(f,Rc,_),e(Rc,RE),e(RE,S0e),M(rx,S0e,null),e(Rc,v6r),e(Rc,R0e),e(R0e,F6r),b(f,uqe,_),b(f,gr,_),M(tx,gr,null),e(gr,T6r),e(gr,Pc),e(Pc,M6r),e(Pc,fJ),e(fJ,E6r),e(Pc,C6r),e(Pc,mJ),e(mJ,w6r),e(Pc,A6r),e(gr,y6r),e(gr,ax),e(ax,L6r),e(ax,P0e),e(P0e,x6r),e(ax,$6r),e(gr,k6r),e(gr,Gt),M(nx,Gt,null),e(Gt,S6r),e(Gt,B0e),e(B0e,R6r),e(Gt,P6r),e(Gt,Bc),e(Bc,B6r),e(Bc,I0e),e(I0e,I6r),e(Bc,q6r),e(Bc,gJ),e(gJ,N6r),e(Bc,j6r),e(Gt,D6r),M(PE,Gt,null),e(gr,G6r),e(gr,Gr),M(sx,Gr,null),e(Gr,O6r),e(Gr,q0e),e(q0e,V6r),e(Gr,X6r),e(Gr,pn),e(pn,z6r),e(pn,N0e),e(N0e,Q6r),e(pn,W6r),e(pn,j0e),e(j0e,H6r),e(pn,U6r),e(pn,D0e),e(D0e,J6r),e(pn,Y6r),e(Gr,K6r),e(Gr,Me),e(Me,BE),e(BE,G0e),e(G0e,Z6r),e(BE,eyr),e(BE,hJ),e(hJ,oyr),e(BE,ryr),e(Me,tyr),e(Me,IE),e(IE,O0e),e(O0e,ayr),e(IE,nyr),e(IE,pJ),e(pJ,syr),e(IE,lyr),e(Me,iyr),e(Me,qE),e(qE,V0e),e(V0e,dyr),e(qE,cyr),e(qE,uJ),e(uJ,fyr),e(qE,myr),e(Me,gyr),e(Me,NE),e(NE,X0e),e(X0e,hyr),e(NE,pyr),e(NE,_J),e(_J,uyr),e(NE,_yr),e(Me,byr),e(Me,jE),e(jE,z0e),e(z0e,vyr),e(jE,Fyr),e(jE,bJ),e(bJ,Tyr),e(jE,Myr),e(Me,Eyr),e(Me,DE),e(DE,Q0e),e(Q0e,Cyr),e(DE,wyr),e(DE,vJ),e(vJ,Ayr),e(DE,yyr),e(Me,Lyr),e(Me,GE),e(GE,W0e),e(W0e,xyr),e(GE,$yr),e(GE,FJ),e(FJ,kyr),e(GE,Syr),e(Me,Ryr),e(Me,OE),e(OE,H0e),e(H0e,Pyr),e(OE,Byr),e(OE,TJ),e(TJ,Iyr),e(OE,qyr),e(Me,Nyr),e(Me,VE),e(VE,U0e),e(U0e,jyr),e(VE,Dyr),e(VE,MJ),e(MJ,Gyr),e(VE,Oyr),e(Me,Vyr),e(Me,XE),e(XE,J0e),e(J0e,Xyr),e(XE,zyr),e(XE,EJ),e(EJ,Qyr),e(XE,Wyr),e(Me,Hyr),e(Me,zE),e(zE,Y0e),e(Y0e,Uyr),e(zE,Jyr),e(zE,CJ),e(CJ,Yyr),e(zE,Kyr),e(Me,Zyr),e(Me,QE),e(QE,K0e),e(K0e,eLr),e(QE,oLr),e(QE,wJ),e(wJ,rLr),e(QE,tLr),e(Gr,aLr),M(WE,Gr,null),b(f,_qe,_),b(f,Ic,_),e(Ic,HE),e(HE,Z0e),M(lx,Z0e,null),e(Ic,nLr),e(Ic,eTe),e(eTe,sLr),b(f,bqe,_),b(f,hr,_),M(ix,hr,null),e(hr,lLr),e(hr,qc),e(qc,iLr),e(qc,AJ),e(AJ,dLr),e(qc,cLr),e(qc,yJ),e(yJ,fLr),e(qc,mLr),e(hr,gLr),e(hr,dx),e(dx,hLr),e(dx,oTe),e(oTe,pLr),e(dx,uLr),e(hr,_Lr),e(hr,Ot),M(cx,Ot,null),e(Ot,bLr),e(Ot,rTe),e(rTe,vLr),e(Ot,FLr),e(Ot,Nc),e(Nc,TLr),e(Nc,tTe),e(tTe,MLr),e(Nc,ELr),e(Nc,LJ),e(LJ,CLr),e(Nc,wLr),e(Ot,ALr),M(UE,Ot,null),e(hr,yLr),e(hr,Or),M(fx,Or,null),e(Or,LLr),e(Or,aTe),e(aTe,xLr),e(Or,$Lr),e(Or,un),e(un,kLr),e(un,nTe),e(nTe,SLr),e(un,RLr),e(un,sTe),e(sTe,PLr),e(un,BLr),e(un,lTe),e(lTe,ILr),e(un,qLr),e(Or,NLr),e(Or,xe),e(xe,JE),e(JE,iTe),e(iTe,jLr),e(JE,DLr),e(JE,xJ),e(xJ,GLr),e(JE,OLr),e(xe,VLr),e(xe,YE),e(YE,dTe),e(dTe,XLr),e(YE,zLr),e(YE,$J),e($J,QLr),e(YE,WLr),e(xe,HLr),e(xe,KE),e(KE,cTe),e(cTe,ULr),e(KE,JLr),e(KE,kJ),e(kJ,YLr),e(KE,KLr),e(xe,ZLr),e(xe,ZE),e(ZE,fTe),e(fTe,exr),e(ZE,oxr),e(ZE,SJ),e(SJ,rxr),e(ZE,txr),e(xe,axr),e(xe,e5),e(e5,mTe),e(mTe,nxr),e(e5,sxr),e(e5,RJ),e(RJ,lxr),e(e5,ixr),e(xe,dxr),e(xe,o5),e(o5,gTe),e(gTe,cxr),e(o5,fxr),e(o5,PJ),e(PJ,mxr),e(o5,gxr),e(xe,hxr),e(xe,r5),e(r5,hTe),e(hTe,pxr),e(r5,uxr),e(r5,BJ),e(BJ,_xr),e(r5,bxr),e(xe,vxr),e(xe,t5),e(t5,pTe),e(pTe,Fxr),e(t5,Txr),e(t5,IJ),e(IJ,Mxr),e(t5,Exr),e(xe,Cxr),e(xe,a5),e(a5,uTe),e(uTe,wxr),e(a5,Axr),e(a5,qJ),e(qJ,yxr),e(a5,Lxr),e(xe,xxr),e(xe,n5),e(n5,_Te),e(_Te,$xr),e(n5,kxr),e(n5,NJ),e(NJ,Sxr),e(n5,Rxr),e(Or,Pxr),M(s5,Or,null),b(f,vqe,_),b(f,jc,_),e(jc,l5),e(l5,bTe),M(mx,bTe,null),e(jc,Bxr),e(jc,vTe),e(vTe,Ixr),b(f,Fqe,_),b(f,pr,_),M(gx,pr,null),e(pr,qxr),e(pr,Dc),e(Dc,Nxr),e(Dc,jJ),e(jJ,jxr),e(Dc,Dxr),e(Dc,DJ),e(DJ,Gxr),e(Dc,Oxr),e(pr,Vxr),e(pr,hx),e(hx,Xxr),e(hx,FTe),e(FTe,zxr),e(hx,Qxr),e(pr,Wxr),e(pr,Vt),M(px,Vt,null),e(Vt,Hxr),e(Vt,TTe),e(TTe,Uxr),e(Vt,Jxr),e(Vt,Gc),e(Gc,Yxr),e(Gc,MTe),e(MTe,Kxr),e(Gc,Zxr),e(Gc,GJ),e(GJ,e9r),e(Gc,o9r),e(Vt,r9r),M(i5,Vt,null),e(pr,t9r),e(pr,Vr),M(ux,Vr,null),e(Vr,a9r),e(Vr,ETe),e(ETe,n9r),e(Vr,s9r),e(Vr,_n),e(_n,l9r),e(_n,CTe),e(CTe,i9r),e(_n,d9r),e(_n,wTe),e(wTe,c9r),e(_n,f9r),e(_n,ATe),e(ATe,m9r),e(_n,g9r),e(Vr,h9r),e(Vr,Se),e(Se,d5),e(d5,yTe),e(yTe,p9r),e(d5,u9r),e(d5,OJ),e(OJ,_9r),e(d5,b9r),e(Se,v9r),e(Se,c5),e(c5,LTe),e(LTe,F9r),e(c5,T9r),e(c5,VJ),e(VJ,M9r),e(c5,E9r),e(Se,C9r),e(Se,f5),e(f5,xTe),e(xTe,w9r),e(f5,A9r),e(f5,XJ),e(XJ,y9r),e(f5,L9r),e(Se,x9r),e(Se,m5),e(m5,$Te),e($Te,$9r),e(m5,k9r),e(m5,zJ),e(zJ,S9r),e(m5,R9r),e(Se,P9r),e(Se,g5),e(g5,kTe),e(kTe,B9r),e(g5,I9r),e(g5,QJ),e(QJ,q9r),e(g5,N9r),e(Se,j9r),e(Se,h5),e(h5,STe),e(STe,D9r),e(h5,G9r),e(h5,WJ),e(WJ,O9r),e(h5,V9r),e(Se,X9r),e(Se,p5),e(p5,RTe),e(RTe,z9r),e(p5,Q9r),e(p5,HJ),e(HJ,W9r),e(p5,H9r),e(Se,U9r),e(Se,u5),e(u5,PTe),e(PTe,J9r),e(u5,Y9r),e(u5,UJ),e(UJ,K9r),e(u5,Z9r),e(Se,e$r),e(Se,_5),e(_5,BTe),e(BTe,o$r),e(_5,r$r),e(_5,JJ),e(JJ,t$r),e(_5,a$r),e(Vr,n$r),M(b5,Vr,null),b(f,Tqe,_),b(f,Oc,_),e(Oc,v5),e(v5,ITe),M(_x,ITe,null),e(Oc,s$r),e(Oc,qTe),e(qTe,l$r),b(f,Mqe,_),b(f,ur,_),M(bx,ur,null),e(ur,i$r),e(ur,Vc),e(Vc,d$r),e(Vc,YJ),e(YJ,c$r),e(Vc,f$r),e(Vc,KJ),e(KJ,m$r),e(Vc,g$r),e(ur,h$r),e(ur,vx),e(vx,p$r),e(vx,NTe),e(NTe,u$r),e(vx,_$r),e(ur,b$r),e(ur,Xt),M(Fx,Xt,null),e(Xt,v$r),e(Xt,jTe),e(jTe,F$r),e(Xt,T$r),e(Xt,Xc),e(Xc,M$r),e(Xc,DTe),e(DTe,E$r),e(Xc,C$r),e(Xc,ZJ),e(ZJ,w$r),e(Xc,A$r),e(Xt,y$r),M(F5,Xt,null),e(ur,L$r),e(ur,Xr),M(Tx,Xr,null),e(Xr,x$r),e(Xr,GTe),e(GTe,$$r),e(Xr,k$r),e(Xr,bn),e(bn,S$r),e(bn,OTe),e(OTe,R$r),e(bn,P$r),e(bn,VTe),e(VTe,B$r),e(bn,I$r),e(bn,XTe),e(XTe,q$r),e(bn,N$r),e(Xr,j$r),e(Xr,$e),e($e,T5),e(T5,zTe),e(zTe,D$r),e(T5,G$r),e(T5,eY),e(eY,O$r),e(T5,V$r),e($e,X$r),e($e,M5),e(M5,QTe),e(QTe,z$r),e(M5,Q$r),e(M5,oY),e(oY,W$r),e(M5,H$r),e($e,U$r),e($e,E5),e(E5,WTe),e(WTe,J$r),e(E5,Y$r),e(E5,rY),e(rY,K$r),e(E5,Z$r),e($e,ekr),e($e,C5),e(C5,HTe),e(HTe,okr),e(C5,rkr),e(C5,tY),e(tY,tkr),e(C5,akr),e($e,nkr),e($e,w5),e(w5,UTe),e(UTe,skr),e(w5,lkr),e(w5,aY),e(aY,ikr),e(w5,dkr),e($e,ckr),e($e,A5),e(A5,JTe),e(JTe,fkr),e(A5,mkr),e(A5,nY),e(nY,gkr),e(A5,hkr),e($e,pkr),e($e,y5),e(y5,YTe),e(YTe,ukr),e(y5,_kr),e(y5,sY),e(sY,bkr),e(y5,vkr),e($e,Fkr),e($e,L5),e(L5,KTe),e(KTe,Tkr),e(L5,Mkr),e(L5,lY),e(lY,Ekr),e(L5,Ckr),e($e,wkr),e($e,x5),e(x5,ZTe),e(ZTe,Akr),e(x5,ykr),e(x5,iY),e(iY,Lkr),e(x5,xkr),e($e,$kr),e($e,$5),e($5,e7e),e(e7e,kkr),e($5,Skr),e($5,dY),e(dY,Rkr),e($5,Pkr),e(Xr,Bkr),M(k5,Xr,null),b(f,Eqe,_),b(f,zc,_),e(zc,S5),e(S5,o7e),M(Mx,o7e,null),e(zc,Ikr),e(zc,r7e),e(r7e,qkr),b(f,Cqe,_),b(f,_r,_),M(Ex,_r,null),e(_r,Nkr),e(_r,Qc),e(Qc,jkr),e(Qc,cY),e(cY,Dkr),e(Qc,Gkr),e(Qc,fY),e(fY,Okr),e(Qc,Vkr),e(_r,Xkr),e(_r,Cx),e(Cx,zkr),e(Cx,t7e),e(t7e,Qkr),e(Cx,Wkr),e(_r,Hkr),e(_r,zt),M(wx,zt,null),e(zt,Ukr),e(zt,a7e),e(a7e,Jkr),e(zt,Ykr),e(zt,Wc),e(Wc,Kkr),e(Wc,n7e),e(n7e,Zkr),e(Wc,eSr),e(Wc,mY),e(mY,oSr),e(Wc,rSr),e(zt,tSr),M(R5,zt,null),e(_r,aSr),e(_r,zr),M(Ax,zr,null),e(zr,nSr),e(zr,s7e),e(s7e,sSr),e(zr,lSr),e(zr,vn),e(vn,iSr),e(vn,l7e),e(l7e,dSr),e(vn,cSr),e(vn,i7e),e(i7e,fSr),e(vn,mSr),e(vn,d7e),e(d7e,gSr),e(vn,hSr),e(zr,pSr),e(zr,ke),e(ke,P5),e(P5,c7e),e(c7e,uSr),e(P5,_Sr),e(P5,gY),e(gY,bSr),e(P5,vSr),e(ke,FSr),e(ke,B5),e(B5,f7e),e(f7e,TSr),e(B5,MSr),e(B5,hY),e(hY,ESr),e(B5,CSr),e(ke,wSr),e(ke,I5),e(I5,m7e),e(m7e,ASr),e(I5,ySr),e(I5,pY),e(pY,LSr),e(I5,xSr),e(ke,$Sr),e(ke,q5),e(q5,g7e),e(g7e,kSr),e(q5,SSr),e(q5,uY),e(uY,RSr),e(q5,PSr),e(ke,BSr),e(ke,N5),e(N5,h7e),e(h7e,ISr),e(N5,qSr),e(N5,_Y),e(_Y,NSr),e(N5,jSr),e(ke,DSr),e(ke,j5),e(j5,p7e),e(p7e,GSr),e(j5,OSr),e(j5,bY),e(bY,VSr),e(j5,XSr),e(ke,zSr),e(ke,D5),e(D5,u7e),e(u7e,QSr),e(D5,WSr),e(D5,vY),e(vY,HSr),e(D5,USr),e(ke,JSr),e(ke,G5),e(G5,_7e),e(_7e,YSr),e(G5,KSr),e(G5,FY),e(FY,ZSr),e(G5,eRr),e(ke,oRr),e(ke,O5),e(O5,b7e),e(b7e,rRr),e(O5,tRr),e(O5,TY),e(TY,aRr),e(O5,nRr),e(ke,sRr),e(ke,V5),e(V5,v7e),e(v7e,lRr),e(V5,iRr),e(V5,MY),e(MY,dRr),e(V5,cRr),e(zr,fRr),M(X5,zr,null),b(f,wqe,_),b(f,Hc,_),e(Hc,z5),e(z5,F7e),M(yx,F7e,null),e(Hc,mRr),e(Hc,T7e),e(T7e,gRr),b(f,Aqe,_),b(f,br,_),M(Lx,br,null),e(br,hRr),e(br,Uc),e(Uc,pRr),e(Uc,EY),e(EY,uRr),e(Uc,_Rr),e(Uc,CY),e(CY,bRr),e(Uc,vRr),e(br,FRr),e(br,xx),e(xx,TRr),e(xx,M7e),e(M7e,MRr),e(xx,ERr),e(br,CRr),e(br,Qt),M($x,Qt,null),e(Qt,wRr),e(Qt,E7e),e(E7e,ARr),e(Qt,yRr),e(Qt,Jc),e(Jc,LRr),e(Jc,C7e),e(C7e,xRr),e(Jc,$Rr),e(Jc,wY),e(wY,kRr),e(Jc,SRr),e(Qt,RRr),M(Q5,Qt,null),e(br,PRr),e(br,Qr),M(kx,Qr,null),e(Qr,BRr),e(Qr,w7e),e(w7e,IRr),e(Qr,qRr),e(Qr,Fn),e(Fn,NRr),e(Fn,A7e),e(A7e,jRr),e(Fn,DRr),e(Fn,y7e),e(y7e,GRr),e(Fn,ORr),e(Fn,L7e),e(L7e,VRr),e(Fn,XRr),e(Qr,zRr),e(Qr,Ge),e(Ge,W5),e(W5,x7e),e(x7e,QRr),e(W5,WRr),e(W5,AY),e(AY,HRr),e(W5,URr),e(Ge,JRr),e(Ge,H5),e(H5,$7e),e($7e,YRr),e(H5,KRr),e(H5,yY),e(yY,ZRr),e(H5,ePr),e(Ge,oPr),e(Ge,U5),e(U5,k7e),e(k7e,rPr),e(U5,tPr),e(U5,LY),e(LY,aPr),e(U5,nPr),e(Ge,sPr),e(Ge,J5),e(J5,S7e),e(S7e,lPr),e(J5,iPr),e(J5,xY),e(xY,dPr),e(J5,cPr),e(Ge,fPr),e(Ge,Y5),e(Y5,R7e),e(R7e,mPr),e(Y5,gPr),e(Y5,$Y),e($Y,hPr),e(Y5,pPr),e(Ge,uPr),e(Ge,K5),e(K5,P7e),e(P7e,_Pr),e(K5,bPr),e(K5,kY),e(kY,vPr),e(K5,FPr),e(Ge,TPr),e(Ge,Z5),e(Z5,B7e),e(B7e,MPr),e(Z5,EPr),e(Z5,SY),e(SY,CPr),e(Z5,wPr),e(Ge,APr),e(Ge,eC),e(eC,I7e),e(I7e,yPr),e(eC,LPr),e(eC,RY),e(RY,xPr),e(eC,$Pr),e(Qr,kPr),M(oC,Qr,null),b(f,yqe,_),b(f,Yc,_),e(Yc,rC),e(rC,q7e),M(Sx,q7e,null),e(Yc,SPr),e(Yc,N7e),e(N7e,RPr),b(f,Lqe,_),b(f,vr,_),M(Rx,vr,null),e(vr,PPr),e(vr,Kc),e(Kc,BPr),e(Kc,PY),e(PY,IPr),e(Kc,qPr),e(Kc,BY),e(BY,NPr),e(Kc,jPr),e(vr,DPr),e(vr,Px),e(Px,GPr),e(Px,j7e),e(j7e,OPr),e(Px,VPr),e(vr,XPr),e(vr,Wt),M(Bx,Wt,null),e(Wt,zPr),e(Wt,D7e),e(D7e,QPr),e(Wt,WPr),e(Wt,Zc),e(Zc,HPr),e(Zc,G7e),e(G7e,UPr),e(Zc,JPr),e(Zc,IY),e(IY,YPr),e(Zc,KPr),e(Wt,ZPr),M(tC,Wt,null),e(vr,eBr),e(vr,Wr),M(Ix,Wr,null),e(Wr,oBr),e(Wr,O7e),e(O7e,rBr),e(Wr,tBr),e(Wr,Tn),e(Tn,aBr),e(Tn,V7e),e(V7e,nBr),e(Tn,sBr),e(Tn,X7e),e(X7e,lBr),e(Tn,iBr),e(Tn,z7e),e(z7e,dBr),e(Tn,cBr),e(Wr,fBr),e(Wr,Oe),e(Oe,aC),e(aC,Q7e),e(Q7e,mBr),e(aC,gBr),e(aC,qY),e(qY,hBr),e(aC,pBr),e(Oe,uBr),e(Oe,nC),e(nC,W7e),e(W7e,_Br),e(nC,bBr),e(nC,NY),e(NY,vBr),e(nC,FBr),e(Oe,TBr),e(Oe,sC),e(sC,H7e),e(H7e,MBr),e(sC,EBr),e(sC,jY),e(jY,CBr),e(sC,wBr),e(Oe,ABr),e(Oe,lC),e(lC,U7e),e(U7e,yBr),e(lC,LBr),e(lC,DY),e(DY,xBr),e(lC,$Br),e(Oe,kBr),e(Oe,iC),e(iC,J7e),e(J7e,SBr),e(iC,RBr),e(iC,GY),e(GY,PBr),e(iC,BBr),e(Oe,IBr),e(Oe,dC),e(dC,Y7e),e(Y7e,qBr),e(dC,NBr),e(dC,OY),e(OY,jBr),e(dC,DBr),e(Oe,GBr),e(Oe,cC),e(cC,K7e),e(K7e,OBr),e(cC,VBr),e(cC,VY),e(VY,XBr),e(cC,zBr),e(Oe,QBr),e(Oe,fC),e(fC,Z7e),e(Z7e,WBr),e(fC,HBr),e(fC,XY),e(XY,UBr),e(fC,JBr),e(Wr,YBr),M(mC,Wr,null),b(f,xqe,_),b(f,ef,_),e(ef,gC),e(gC,eMe),M(qx,eMe,null),e(ef,KBr),e(ef,oMe),e(oMe,ZBr),b(f,$qe,_),b(f,Fr,_),M(Nx,Fr,null),e(Fr,eIr),e(Fr,of),e(of,oIr),e(of,zY),e(zY,rIr),e(of,tIr),e(of,QY),e(QY,aIr),e(of,nIr),e(Fr,sIr),e(Fr,jx),e(jx,lIr),e(jx,rMe),e(rMe,iIr),e(jx,dIr),e(Fr,cIr),e(Fr,Ht),M(Dx,Ht,null),e(Ht,fIr),e(Ht,tMe),e(tMe,mIr),e(Ht,gIr),e(Ht,rf),e(rf,hIr),e(rf,aMe),e(aMe,pIr),e(rf,uIr),e(rf,WY),e(WY,_Ir),e(rf,bIr),e(Ht,vIr),M(hC,Ht,null),e(Fr,FIr),e(Fr,Hr),M(Gx,Hr,null),e(Hr,TIr),e(Hr,nMe),e(nMe,MIr),e(Hr,EIr),e(Hr,Mn),e(Mn,CIr),e(Mn,sMe),e(sMe,wIr),e(Mn,AIr),e(Mn,lMe),e(lMe,yIr),e(Mn,LIr),e(Mn,iMe),e(iMe,xIr),e(Mn,$Ir),e(Hr,kIr),e(Hr,dMe),e(dMe,pC),e(pC,cMe),e(cMe,SIr),e(pC,RIr),e(pC,HY),e(HY,PIr),e(pC,BIr),e(Hr,IIr),M(uC,Hr,null),b(f,kqe,_),b(f,tf,_),e(tf,_C),e(_C,fMe),M(Ox,fMe,null),e(tf,qIr),e(tf,mMe),e(mMe,NIr),b(f,Sqe,_),b(f,Tr,_),M(Vx,Tr,null),e(Tr,jIr),e(Tr,af),e(af,DIr),e(af,UY),e(UY,GIr),e(af,OIr),e(af,JY),e(JY,VIr),e(af,XIr),e(Tr,zIr),e(Tr,Xx),e(Xx,QIr),e(Xx,gMe),e(gMe,WIr),e(Xx,HIr),e(Tr,UIr),e(Tr,Ut),M(zx,Ut,null),e(Ut,JIr),e(Ut,hMe),e(hMe,YIr),e(Ut,KIr),e(Ut,nf),e(nf,ZIr),e(nf,pMe),e(pMe,eqr),e(nf,oqr),e(nf,YY),e(YY,rqr),e(nf,tqr),e(Ut,aqr),M(bC,Ut,null),e(Tr,nqr),e(Tr,Ur),M(Qx,Ur,null),e(Ur,sqr),e(Ur,uMe),e(uMe,lqr),e(Ur,iqr),e(Ur,En),e(En,dqr),e(En,_Me),e(_Me,cqr),e(En,fqr),e(En,bMe),e(bMe,mqr),e(En,gqr),e(En,vMe),e(vMe,hqr),e(En,pqr),e(Ur,uqr),e(Ur,Wx),e(Wx,vC),e(vC,FMe),e(FMe,_qr),e(vC,bqr),e(vC,KY),e(KY,vqr),e(vC,Fqr),e(Wx,Tqr),e(Wx,FC),e(FC,TMe),e(TMe,Mqr),e(FC,Eqr),e(FC,ZY),e(ZY,Cqr),e(FC,wqr),e(Ur,Aqr),M(TC,Ur,null),b(f,Rqe,_),b(f,sf,_),e(sf,MC),e(MC,MMe),M(Hx,MMe,null),e(sf,yqr),e(sf,EMe),e(EMe,Lqr),b(f,Pqe,_),b(f,Mr,_),M(Ux,Mr,null),e(Mr,xqr),e(Mr,lf),e(lf,$qr),e(lf,eK),e(eK,kqr),e(lf,Sqr),e(lf,oK),e(oK,Rqr),e(lf,Pqr),e(Mr,Bqr),e(Mr,Jx),e(Jx,Iqr),e(Jx,CMe),e(CMe,qqr),e(Jx,Nqr),e(Mr,jqr),e(Mr,Jt),M(Yx,Jt,null),e(Jt,Dqr),e(Jt,wMe),e(wMe,Gqr),e(Jt,Oqr),e(Jt,df),e(df,Vqr),e(df,AMe),e(AMe,Xqr),e(df,zqr),e(df,rK),e(rK,Qqr),e(df,Wqr),e(Jt,Hqr),M(EC,Jt,null),e(Mr,Uqr),e(Mr,Jr),M(Kx,Jr,null),e(Jr,Jqr),e(Jr,yMe),e(yMe,Yqr),e(Jr,Kqr),e(Jr,Cn),e(Cn,Zqr),e(Cn,LMe),e(LMe,eNr),e(Cn,oNr),e(Cn,xMe),e(xMe,rNr),e(Cn,tNr),e(Cn,$Me),e($Me,aNr),e(Cn,nNr),e(Jr,sNr),e(Jr,kMe),e(kMe,CC),e(CC,SMe),e(SMe,lNr),e(CC,iNr),e(CC,tK),e(tK,dNr),e(CC,cNr),e(Jr,fNr),M(wC,Jr,null),Bqe=!0},p(f,[_]){const Zx={};_&2&&(Zx.$$scope={dirty:_,ctx:f}),bf.$set(Zx);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),ug.$set(RMe);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),Hg.$set(PMe);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),Th.$set(BMe);const e9={};_&2&&(e9.$$scope={dirty:_,ctx:f}),Mh.$set(e9);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),jh.$set(IMe);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),Dh.$set(wn);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),Vh.$set(qMe);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),Su.$set(NMe);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),Pu.$set(jMe);const o9={};_&2&&(o9.$$scope={dirty:_,ctx:f}),T_.$set(o9);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),E_.$set(DMe);const r9={};_&2&&(r9.$$scope={dirty:_,ctx:f}),l1.$set(r9);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),d1.$set(GMe);const t9={};_&2&&(t9.$$scope={dirty:_,ctx:f}),Q1.$set(t9);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),H1.$set(OMe);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),g8.$set(VMe);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),p8.$set(XMe);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),cb.$set(cf);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),mb.$set(zMe);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),Ob.$set(QMe);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),Xb.$set(WMe);const a9={};_&2&&(a9.$$scope={dirty:_,ctx:f}),Yb.$set(a9);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),Zb.$set(HMe);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),P2.$set(UMe);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),I2.$set(JMe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),Ev.$set(Kr);const n9={};_&2&&(n9.$$scope={dirty:_,ctx:f}),wv.$set(n9);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),Lv.$set(YMe);const s9={};_&2&&(s9.$$scope={dirty:_,ctx:f}),$v.$set(s9);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),Vv.$set(KMe);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),zv.$set(Zr);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),Hv.$set(ZMe);const ff={};_&2&&(ff.$$scope={dirty:_,ctx:f}),Jv.$set(ff);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),sF.$set(e4e);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),iF.$set(o4e);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),hF.$set(L);const AC={};_&2&&(AC.$$scope={dirty:_,ctx:f}),uF.$set(AC);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),AF.$set(r4e);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),LF.$set(t4e);const yC={};_&2&&(yC.$$scope={dirty:_,ctx:f}),SF.$set(yC);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),PF.$set(a4e);const n4e={};_&2&&(n4e.$$scope={dirty:_,ctx:f}),DF.$set(n4e);const LC={};_&2&&(LC.$$scope={dirty:_,ctx:f}),OF.$set(LC);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:f}),WF.$set(s4e);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:f}),UF.$set(l4e);const xC={};_&2&&(xC.$$scope={dirty:_,ctx:f}),ZF.$set(xC);const i4e={};_&2&&(i4e.$$scope={dirty:_,ctx:f}),o0.$set(i4e);const d4e={};_&2&&(d4e.$$scope={dirty:_,ctx:f}),a0.$set(d4e);const $C={};_&2&&($C.$$scope={dirty:_,ctx:f}),s0.$set($C);const c4e={};_&2&&(c4e.$$scope={dirty:_,ctx:f}),m0.$set(c4e);const f4e={};_&2&&(f4e.$$scope={dirty:_,ctx:f}),h0.$set(f4e);const kC={};_&2&&(kC.$$scope={dirty:_,ctx:f}),_0.$set(kC);const m4e={};_&2&&(m4e.$$scope={dirty:_,ctx:f}),v0.$set(m4e);const g4e={};_&2&&(g4e.$$scope={dirty:_,ctx:f}),fT.$set(g4e);const SC={};_&2&&(SC.$$scope={dirty:_,ctx:f}),gT.$set(SC);const h4e={};_&2&&(h4e.$$scope={dirty:_,ctx:f}),qT.$set(h4e);const p4e={};_&2&&(p4e.$$scope={dirty:_,ctx:f}),jT.$set(p4e);const RC={};_&2&&(RC.$$scope={dirty:_,ctx:f}),KT.$set(RC);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),e7.$set(u4e);const _4e={};_&2&&(_4e.$$scope={dirty:_,ctx:f}),a7.$set(_4e);const PC={};_&2&&(PC.$$scope={dirty:_,ctx:f}),s7.$set(PC);const b4e={};_&2&&(b4e.$$scope={dirty:_,ctx:f}),y7.$set(b4e);const v4e={};_&2&&(v4e.$$scope={dirty:_,ctx:f}),x7.$set(v4e);const BC={};_&2&&(BC.$$scope={dirty:_,ctx:f}),D7.$set(BC);const F4e={};_&2&&(F4e.$$scope={dirty:_,ctx:f}),O7.$set(F4e);const T4e={};_&2&&(T4e.$$scope={dirty:_,ctx:f}),pM.$set(T4e);const IC={};_&2&&(IC.$$scope={dirty:_,ctx:f}),_M.$set(IC);const M4e={};_&2&&(M4e.$$scope={dirty:_,ctx:f}),BM.$set(M4e);const E4e={};_&2&&(E4e.$$scope={dirty:_,ctx:f}),qM.$set(E4e);const qC={};_&2&&(qC.$$scope={dirty:_,ctx:f}),DM.$set(qC);const C4e={};_&2&&(C4e.$$scope={dirty:_,ctx:f}),OM.$set(C4e);const w4e={};_&2&&(w4e.$$scope={dirty:_,ctx:f}),XM.$set(w4e);const NC={};_&2&&(NC.$$scope={dirty:_,ctx:f}),QM.$set(NC);const A4e={};_&2&&(A4e.$$scope={dirty:_,ctx:f}),g4.$set(A4e);const y4e={};_&2&&(y4e.$$scope={dirty:_,ctx:f}),p4.$set(y4e);const jC={};_&2&&(jC.$$scope={dirty:_,ctx:f}),I4.$set(jC);const L4e={};_&2&&(L4e.$$scope={dirty:_,ctx:f}),N4.$set(L4e);const x4e={};_&2&&(x4e.$$scope={dirty:_,ctx:f}),D4.$set(x4e);const DC={};_&2&&(DC.$$scope={dirty:_,ctx:f}),O4.$set(DC);const $4e={};_&2&&($4e.$$scope={dirty:_,ctx:f}),X4.$set($4e);const k4e={};_&2&&(k4e.$$scope={dirty:_,ctx:f}),Q4.$set(k4e);const GC={};_&2&&(GC.$$scope={dirty:_,ctx:f}),vE.$set(GC);const S4e={};_&2&&(S4e.$$scope={dirty:_,ctx:f}),TE.$set(S4e);const R4e={};_&2&&(R4e.$$scope={dirty:_,ctx:f}),SE.$set(R4e);const OC={};_&2&&(OC.$$scope={dirty:_,ctx:f}),PE.$set(OC);const P4e={};_&2&&(P4e.$$scope={dirty:_,ctx:f}),WE.$set(P4e);const B4e={};_&2&&(B4e.$$scope={dirty:_,ctx:f}),UE.$set(B4e);const VC={};_&2&&(VC.$$scope={dirty:_,ctx:f}),s5.$set(VC);const I4e={};_&2&&(I4e.$$scope={dirty:_,ctx:f}),i5.$set(I4e);const q4e={};_&2&&(q4e.$$scope={dirty:_,ctx:f}),b5.$set(q4e);const XC={};_&2&&(XC.$$scope={dirty:_,ctx:f}),F5.$set(XC);const N4e={};_&2&&(N4e.$$scope={dirty:_,ctx:f}),k5.$set(N4e);const j4e={};_&2&&(j4e.$$scope={dirty:_,ctx:f}),R5.$set(j4e);const zC={};_&2&&(zC.$$scope={dirty:_,ctx:f}),X5.$set(zC);const D4e={};_&2&&(D4e.$$scope={dirty:_,ctx:f}),Q5.$set(D4e);const G4e={};_&2&&(G4e.$$scope={dirty:_,ctx:f}),oC.$set(G4e);const QC={};_&2&&(QC.$$scope={dirty:_,ctx:f}),tC.$set(QC);const O4e={};_&2&&(O4e.$$scope={dirty:_,ctx:f}),mC.$set(O4e);const V4e={};_&2&&(V4e.$$scope={dirty:_,ctx:f}),hC.$set(V4e);const WC={};_&2&&(WC.$$scope={dirty:_,ctx:f}),uC.$set(WC);const X4e={};_&2&&(X4e.$$scope={dirty:_,ctx:f}),bC.$set(X4e);const z4e={};_&2&&(z4e.$$scope={dirty:_,ctx:f}),TC.$set(z4e);const HC={};_&2&&(HC.$$scope={dirty:_,ctx:f}),EC.$set(HC);const Q4e={};_&2&&(Q4e.$$scope={dirty:_,ctx:f}),wC.$set(Q4e)},i(f){Bqe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(Hw.$$.fragment,f),E(Uw.$$.fragment,f),E(bf.$$.fragment,f),E(Jw.$$.fragment,f),E(Yw.$$.fragment,f),E(eA.$$.fragment,f),E(ug.$$.fragment,f),E(oA.$$.fragment,f),E(rA.$$.fragment,f),E(tA.$$.fragment,f),E(sA.$$.fragment,f),E(Hg.$$.fragment,f),E(lA.$$.fragment,f),E(iA.$$.fragment,f),E(dA.$$.fragment,f),E(mA.$$.fragment,f),E(Th.$$.fragment,f),E(Mh.$$.fragment,f),E(gA.$$.fragment,f),E(hA.$$.fragment,f),E(pA.$$.fragment,f),E(bA.$$.fragment,f),E(jh.$$.fragment,f),E(Dh.$$.fragment,f),E(vA.$$.fragment,f),E(FA.$$.fragment,f),E(TA.$$.fragment,f),E(EA.$$.fragment,f),E(Vh.$$.fragment,f),E(CA.$$.fragment,f),E(Su.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(LA.$$.fragment,f),E(Pu.$$.fragment,f),E(xA.$$.fragment,f),E(T_.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(RA.$$.fragment,f),E(E_.$$.fragment,f),E(PA.$$.fragment,f),E(l1.$$.fragment,f),E(BA.$$.fragment,f),E(IA.$$.fragment,f),E(NA.$$.fragment,f),E(d1.$$.fragment,f),E(jA.$$.fragment,f),E(Q1.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(VA.$$.fragment,f),E(H1.$$.fragment,f),E(XA.$$.fragment,f),E(g8.$$.fragment,f),E(zA.$$.fragment,f),E(QA.$$.fragment,f),E(HA.$$.fragment,f),E(p8.$$.fragment,f),E(UA.$$.fragment,f),E(cb.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(ZA.$$.fragment,f),E(mb.$$.fragment,f),E(e6.$$.fragment,f),E(Ob.$$.fragment,f),E(o6.$$.fragment,f),E(r6.$$.fragment,f),E(a6.$$.fragment,f),E(Xb.$$.fragment,f),E(n6.$$.fragment,f),E(Yb.$$.fragment,f),E(s6.$$.fragment,f),E(l6.$$.fragment,f),E(d6.$$.fragment,f),E(Zb.$$.fragment,f),E(c6.$$.fragment,f),E(P2.$$.fragment,f),E(f6.$$.fragment,f),E(m6.$$.fragment,f),E(h6.$$.fragment,f),E(I2.$$.fragment,f),E(p6.$$.fragment,f),E(Ev.$$.fragment,f),E(u6.$$.fragment,f),E(_6.$$.fragment,f),E(v6.$$.fragment,f),E(wv.$$.fragment,f),E(F6.$$.fragment,f),E(Lv.$$.fragment,f),E(T6.$$.fragment,f),E(M6.$$.fragment,f),E(C6.$$.fragment,f),E($v.$$.fragment,f),E(w6.$$.fragment,f),E(Vv.$$.fragment,f),E(A6.$$.fragment,f),E(y6.$$.fragment,f),E(x6.$$.fragment,f),E(zv.$$.fragment,f),E($6.$$.fragment,f),E(Hv.$$.fragment,f),E(k6.$$.fragment,f),E(S6.$$.fragment,f),E(P6.$$.fragment,f),E(Jv.$$.fragment,f),E(B6.$$.fragment,f),E(sF.$$.fragment,f),E(I6.$$.fragment,f),E(q6.$$.fragment,f),E(j6.$$.fragment,f),E(iF.$$.fragment,f),E(D6.$$.fragment,f),E(hF.$$.fragment,f),E(G6.$$.fragment,f),E(O6.$$.fragment,f),E(X6.$$.fragment,f),E(uF.$$.fragment,f),E(z6.$$.fragment,f),E(AF.$$.fragment,f),E(Q6.$$.fragment,f),E(W6.$$.fragment,f),E(U6.$$.fragment,f),E(LF.$$.fragment,f),E(J6.$$.fragment,f),E(SF.$$.fragment,f),E(K6.$$.fragment,f),E(Z6.$$.fragment,f),E(oy.$$.fragment,f),E(PF.$$.fragment,f),E(ry.$$.fragment,f),E(DF.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(OF.$$.fragment,f),E(ly.$$.fragment,f),E(WF.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(UF.$$.fragment,f),E(my.$$.fragment,f),E(ZF.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(o0.$$.fragment,f),E(by.$$.fragment,f),E(a0.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(s0.$$.fragment,f),E(Ey.$$.fragment,f),E(m0.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(h0.$$.fragment,f),E(Ly.$$.fragment,f),E(_0.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(v0.$$.fragment,f),E(Ry.$$.fragment,f),E(fT.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(qy.$$.fragment,f),E(gT.$$.fragment,f),E(Ny.$$.fragment,f),E(qT.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(jT.$$.fragment,f),E(Vy.$$.fragment,f),E(KT.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(e7.$$.fragment,f),E(Hy.$$.fragment,f),E(a7.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(s7.$$.fragment,f),E(Zy.$$.fragment,f),E(y7.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(x7.$$.fragment,f),E(aL.$$.fragment,f),E(D7.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(O7.$$.fragment,f),E(dL.$$.fragment,f),E(pM.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(_M.$$.fragment,f),E(hL.$$.fragment,f),E(BM.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(qM.$$.fragment,f),E(vL.$$.fragment,f),E(DM.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(OM.$$.fragment,f),E(wL.$$.fragment,f),E(XM.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(QM.$$.fragment,f),E($L.$$.fragment,f),E(g4.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(p4.$$.fragment,f),E(BL.$$.fragment,f),E(I4.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(N4.$$.fragment,f),E(DL.$$.fragment,f),E(D4.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(O4.$$.fragment,f),E(zL.$$.fragment,f),E(X4.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(Q4.$$.fragment,f),E(JL.$$.fragment,f),E(vE.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(ex.$$.fragment,f),E(TE.$$.fragment,f),E(ox.$$.fragment,f),E(SE.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(PE.$$.fragment,f),E(sx.$$.fragment,f),E(WE.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(UE.$$.fragment,f),E(fx.$$.fragment,f),E(s5.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(i5.$$.fragment,f),E(ux.$$.fragment,f),E(b5.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(F5.$$.fragment,f),E(Tx.$$.fragment,f),E(k5.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(R5.$$.fragment,f),E(Ax.$$.fragment,f),E(X5.$$.fragment,f),E(yx.$$.fragment,f),E(Lx.$$.fragment,f),E($x.$$.fragment,f),E(Q5.$$.fragment,f),E(kx.$$.fragment,f),E(oC.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(tC.$$.fragment,f),E(Ix.$$.fragment,f),E(mC.$$.fragment,f),E(qx.$$.fragment,f),E(Nx.$$.fragment,f),E(Dx.$$.fragment,f),E(hC.$$.fragment,f),E(Gx.$$.fragment,f),E(uC.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(bC.$$.fragment,f),E(Qx.$$.fragment,f),E(TC.$$.fragment,f),E(Hx.$$.fragment,f),E(Ux.$$.fragment,f),E(Yx.$$.fragment,f),E(EC.$$.fragment,f),E(Kx.$$.fragment,f),E(wC.$$.fragment,f),Bqe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(Hw.$$.fragment,f),C(Uw.$$.fragment,f),C(bf.$$.fragment,f),C(Jw.$$.fragment,f),C(Yw.$$.fragment,f),C(eA.$$.fragment,f),C(ug.$$.fragment,f),C(oA.$$.fragment,f),C(rA.$$.fragment,f),C(tA.$$.fragment,f),C(sA.$$.fragment,f),C(Hg.$$.fragment,f),C(lA.$$.fragment,f),C(iA.$$.fragment,f),C(dA.$$.fragment,f),C(mA.$$.fragment,f),C(Th.$$.fragment,f),C(Mh.$$.fragment,f),C(gA.$$.fragment,f),C(hA.$$.fragment,f),C(pA.$$.fragment,f),C(bA.$$.fragment,f),C(jh.$$.fragment,f),C(Dh.$$.fragment,f),C(vA.$$.fragment,f),C(FA.$$.fragment,f),C(TA.$$.fragment,f),C(EA.$$.fragment,f),C(Vh.$$.fragment,f),C(CA.$$.fragment,f),C(Su.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(LA.$$.fragment,f),C(Pu.$$.fragment,f),C(xA.$$.fragment,f),C(T_.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(RA.$$.fragment,f),C(E_.$$.fragment,f),C(PA.$$.fragment,f),C(l1.$$.fragment,f),C(BA.$$.fragment,f),C(IA.$$.fragment,f),C(NA.$$.fragment,f),C(d1.$$.fragment,f),C(jA.$$.fragment,f),C(Q1.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(VA.$$.fragment,f),C(H1.$$.fragment,f),C(XA.$$.fragment,f),C(g8.$$.fragment,f),C(zA.$$.fragment,f),C(QA.$$.fragment,f),C(HA.$$.fragment,f),C(p8.$$.fragment,f),C(UA.$$.fragment,f),C(cb.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(ZA.$$.fragment,f),C(mb.$$.fragment,f),C(e6.$$.fragment,f),C(Ob.$$.fragment,f),C(o6.$$.fragment,f),C(r6.$$.fragment,f),C(a6.$$.fragment,f),C(Xb.$$.fragment,f),C(n6.$$.fragment,f),C(Yb.$$.fragment,f),C(s6.$$.fragment,f),C(l6.$$.fragment,f),C(d6.$$.fragment,f),C(Zb.$$.fragment,f),C(c6.$$.fragment,f),C(P2.$$.fragment,f),C(f6.$$.fragment,f),C(m6.$$.fragment,f),C(h6.$$.fragment,f),C(I2.$$.fragment,f),C(p6.$$.fragment,f),C(Ev.$$.fragment,f),C(u6.$$.fragment,f),C(_6.$$.fragment,f),C(v6.$$.fragment,f),C(wv.$$.fragment,f),C(F6.$$.fragment,f),C(Lv.$$.fragment,f),C(T6.$$.fragment,f),C(M6.$$.fragment,f),C(C6.$$.fragment,f),C($v.$$.fragment,f),C(w6.$$.fragment,f),C(Vv.$$.fragment,f),C(A6.$$.fragment,f),C(y6.$$.fragment,f),C(x6.$$.fragment,f),C(zv.$$.fragment,f),C($6.$$.fragment,f),C(Hv.$$.fragment,f),C(k6.$$.fragment,f),C(S6.$$.fragment,f),C(P6.$$.fragment,f),C(Jv.$$.fragment,f),C(B6.$$.fragment,f),C(sF.$$.fragment,f),C(I6.$$.fragment,f),C(q6.$$.fragment,f),C(j6.$$.fragment,f),C(iF.$$.fragment,f),C(D6.$$.fragment,f),C(hF.$$.fragment,f),C(G6.$$.fragment,f),C(O6.$$.fragment,f),C(X6.$$.fragment,f),C(uF.$$.fragment,f),C(z6.$$.fragment,f),C(AF.$$.fragment,f),C(Q6.$$.fragment,f),C(W6.$$.fragment,f),C(U6.$$.fragment,f),C(LF.$$.fragment,f),C(J6.$$.fragment,f),C(SF.$$.fragment,f),C(K6.$$.fragment,f),C(Z6.$$.fragment,f),C(oy.$$.fragment,f),C(PF.$$.fragment,f),C(ry.$$.fragment,f),C(DF.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(OF.$$.fragment,f),C(ly.$$.fragment,f),C(WF.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(UF.$$.fragment,f),C(my.$$.fragment,f),C(ZF.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(o0.$$.fragment,f),C(by.$$.fragment,f),C(a0.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(s0.$$.fragment,f),C(Ey.$$.fragment,f),C(m0.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(h0.$$.fragment,f),C(Ly.$$.fragment,f),C(_0.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(v0.$$.fragment,f),C(Ry.$$.fragment,f),C(fT.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(qy.$$.fragment,f),C(gT.$$.fragment,f),C(Ny.$$.fragment,f),C(qT.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(jT.$$.fragment,f),C(Vy.$$.fragment,f),C(KT.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(e7.$$.fragment,f),C(Hy.$$.fragment,f),C(a7.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(s7.$$.fragment,f),C(Zy.$$.fragment,f),C(y7.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(x7.$$.fragment,f),C(aL.$$.fragment,f),C(D7.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(O7.$$.fragment,f),C(dL.$$.fragment,f),C(pM.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(_M.$$.fragment,f),C(hL.$$.fragment,f),C(BM.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(qM.$$.fragment,f),C(vL.$$.fragment,f),C(DM.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(OM.$$.fragment,f),C(wL.$$.fragment,f),C(XM.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(QM.$$.fragment,f),C($L.$$.fragment,f),C(g4.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(p4.$$.fragment,f),C(BL.$$.fragment,f),C(I4.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(N4.$$.fragment,f),C(DL.$$.fragment,f),C(D4.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(O4.$$.fragment,f),C(zL.$$.fragment,f),C(X4.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(Q4.$$.fragment,f),C(JL.$$.fragment,f),C(vE.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(ex.$$.fragment,f),C(TE.$$.fragment,f),C(ox.$$.fragment,f),C(SE.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(PE.$$.fragment,f),C(sx.$$.fragment,f),C(WE.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(UE.$$.fragment,f),C(fx.$$.fragment,f),C(s5.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(i5.$$.fragment,f),C(ux.$$.fragment,f),C(b5.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(F5.$$.fragment,f),C(Tx.$$.fragment,f),C(k5.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(R5.$$.fragment,f),C(Ax.$$.fragment,f),C(X5.$$.fragment,f),C(yx.$$.fragment,f),C(Lx.$$.fragment,f),C($x.$$.fragment,f),C(Q5.$$.fragment,f),C(kx.$$.fragment,f),C(oC.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(tC.$$.fragment,f),C(Ix.$$.fragment,f),C(mC.$$.fragment,f),C(qx.$$.fragment,f),C(Nx.$$.fragment,f),C(Dx.$$.fragment,f),C(hC.$$.fragment,f),C(Gx.$$.fragment,f),C(uC.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(bC.$$.fragment,f),C(Qx.$$.fragment,f),C(TC.$$.fragment,f),C(Hx.$$.fragment,f),C(Ux.$$.fragment,f),C(Yx.$$.fragment,f),C(EC.$$.fragment,f),C(Kx.$$.fragment,f),C(wC.$$.fragment,f),Bqe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(gf),f&&t(et),f&&t(Ne),f&&t(Xe),f&&t(pf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(SBe),f&&t(pi),w(Hw),f&&t(RBe),f&&t($n),f&&t(PBe),w(Uw,f),f&&t(BBe),f&&t(_$),f&&t(IBe),w(bf,f),f&&t(qBe),f&&t(ui),w(Jw),f&&t(NBe),f&&t(Co),w(Yw),w(eA),w(ug),w(oA),f&&t(jBe),f&&t(bi),w(rA),f&&t(DBe),f&&t(wo),w(tA),w(sA),w(Hg),w(lA),f&&t(GBe),f&&t(vi),w(iA),f&&t(OBe),f&&t(Ao),w(dA),w(mA),w(Th),w(Mh),w(gA),f&&t(VBe),f&&t(Fi),w(hA),f&&t(XBe),f&&t(yo),w(pA),w(bA),w(jh),w(Dh),w(vA),f&&t(zBe),f&&t(Mi),w(FA),f&&t(QBe),f&&t(Lo),w(TA),w(EA),w(Vh),w(CA),w(Su),f&&t(WBe),f&&t(wi),w(wA),f&&t(HBe),f&&t(xo),w(AA),w(LA),w(Pu),w(xA),w(T_),f&&t(UBe),f&&t(Li),w($A),f&&t(JBe),f&&t($o),w(kA),w(RA),w(E_),w(PA),w(l1),f&&t(YBe),f&&t(ki),w(BA),f&&t(KBe),f&&t(ko),w(IA),w(NA),w(d1),w(jA),w(Q1),f&&t(ZBe),f&&t(Pi),w(DA),f&&t(eIe),f&&t(So),w(GA),w(VA),w(H1),w(XA),w(g8),f&&t(oIe),f&&t(qi),w(zA),f&&t(rIe),f&&t(Ro),w(QA),w(HA),w(p8),w(UA),w(cb),f&&t(tIe),f&&t(Di),w(JA),f&&t(aIe),f&&t(Po),w(YA),w(ZA),w(mb),w(e6),w(Ob),f&&t(nIe),f&&t(Vi),w(o6),f&&t(sIe),f&&t(Bo),w(r6),w(a6),w(Xb),w(n6),w(Yb),f&&t(lIe),f&&t(Qi),w(s6),f&&t(iIe),f&&t(Io),w(l6),w(d6),w(Zb),w(c6),w(P2),f&&t(dIe),f&&t(Ui),w(f6),f&&t(cIe),f&&t(qo),w(m6),w(h6),w(I2),w(p6),w(Ev),f&&t(fIe),f&&t(Ki),w(u6),f&&t(mIe),f&&t(No),w(_6),w(v6),w(wv),w(F6),w(Lv),f&&t(gIe),f&&t(od),w(T6),f&&t(hIe),f&&t(jo),w(M6),w(C6),w($v),w(w6),w(Vv),f&&t(pIe),f&&t(ad),w(A6),f&&t(uIe),f&&t(Do),w(y6),w(x6),w(zv),w($6),w(Hv),f&&t(_Ie),f&&t(ld),w(k6),f&&t(bIe),f&&t(Go),w(S6),w(P6),w(Jv),w(B6),w(sF),f&&t(vIe),f&&t(cd),w(I6),f&&t(FIe),f&&t(Oo),w(q6),w(j6),w(iF),w(D6),w(hF),f&&t(TIe),f&&t(gd),w(G6),f&&t(MIe),f&&t(Vo),w(O6),w(X6),w(uF),w(z6),w(AF),f&&t(EIe),f&&t(ud),w(Q6),f&&t(CIe),f&&t(Xo),w(W6),w(U6),w(LF),w(J6),w(SF),f&&t(wIe),f&&t(vd),w(K6),f&&t(AIe),f&&t(zo),w(Z6),w(oy),w(PF),w(ry),w(DF),f&&t(yIe),f&&t(Md),w(ty),f&&t(LIe),f&&t(Qo),w(ay),w(sy),w(OF),w(ly),w(WF),f&&t(xIe),f&&t(Ad),w(iy),f&&t($Ie),f&&t(Wo),w(dy),w(fy),w(UF),w(my),w(ZF),f&&t(kIe),f&&t(xd),w(hy),f&&t(SIe),f&&t(Ho),w(py),w(_y),w(o0),w(by),w(a0),f&&t(RIe),f&&t(Sd),w(vy),f&&t(PIe),f&&t(Uo),w(Fy),w(My),w(s0),w(Ey),w(m0),f&&t(BIe),f&&t(Bd),w(Cy),f&&t(IIe),f&&t(Jo),w(wy),w(yy),w(h0),w(Ly),w(_0),f&&t(qIe),f&&t(Nd),w(xy),f&&t(NIe),f&&t(Yo),w($y),w(Sy),w(v0),w(Ry),w(fT),f&&t(jIe),f&&t(Gd),w(Py),f&&t(DIe),f&&t(Ko),w(By),w(qy),w(gT),w(Ny),w(qT),f&&t(GIe),f&&t(Xd),w(jy),f&&t(OIe),f&&t(Zo),w(Dy),w(Oy),w(jT),w(Vy),w(KT),f&&t(VIe),f&&t(Wd),w(Xy),f&&t(XIe),f&&t(er),w(zy),w(Wy),w(e7),w(Hy),w(a7),f&&t(zIe),f&&t(Yd),w(Uy),f&&t(QIe),f&&t(or),w(Jy),w(Ky),w(s7),w(Zy),w(y7),f&&t(WIe),f&&t(ec),w(eL),f&&t(HIe),f&&t(rr),w(oL),w(tL),w(x7),w(aL),w(D7),f&&t(UIe),f&&t(tc),w(nL),f&&t(JIe),f&&t(tr),w(sL),w(iL),w(O7),w(dL),w(pM),f&&t(YIe),f&&t(sc),w(cL),f&&t(KIe),f&&t(ar),w(fL),w(gL),w(_M),w(hL),w(BM),f&&t(ZIe),f&&t(dc),w(pL),f&&t(eqe),f&&t(nr),w(uL),w(bL),w(qM),w(vL),w(DM),f&&t(oqe),f&&t(mc),w(TL),f&&t(rqe),f&&t(sr),w(ML),w(CL),w(OM),w(wL),w(XM),f&&t(tqe),f&&t(pc),w(AL),f&&t(aqe),f&&t(lr),w(yL),w(xL),w(QM),w($L),w(g4),f&&t(nqe),f&&t(bc),w(kL),f&&t(sqe),f&&t(ir),w(SL),w(PL),w(p4),w(BL),w(I4),f&&t(lqe),f&&t(Tc),w(IL),f&&t(iqe),f&&t(dr),w(qL),w(jL),w(N4),w(DL),w(D4),f&&t(dqe),f&&t(Cc),w(GL),f&&t(cqe),f&&t(cr),w(OL),w(XL),w(O4),w(zL),w(X4),f&&t(fqe),f&&t(yc),w(QL),f&&t(mqe),f&&t(fr),w(WL),w(UL),w(Q4),w(JL),w(vE),f&&t(gqe),f&&t($c),w(YL),f&&t(hqe),f&&t(mr),w(KL),w(ex),w(TE),w(ox),w(SE),f&&t(pqe),f&&t(Rc),w(rx),f&&t(uqe),f&&t(gr),w(tx),w(nx),w(PE),w(sx),w(WE),f&&t(_qe),f&&t(Ic),w(lx),f&&t(bqe),f&&t(hr),w(ix),w(cx),w(UE),w(fx),w(s5),f&&t(vqe),f&&t(jc),w(mx),f&&t(Fqe),f&&t(pr),w(gx),w(px),w(i5),w(ux),w(b5),f&&t(Tqe),f&&t(Oc),w(_x),f&&t(Mqe),f&&t(ur),w(bx),w(Fx),w(F5),w(Tx),w(k5),f&&t(Eqe),f&&t(zc),w(Mx),f&&t(Cqe),f&&t(_r),w(Ex),w(wx),w(R5),w(Ax),w(X5),f&&t(wqe),f&&t(Hc),w(yx),f&&t(Aqe),f&&t(br),w(Lx),w($x),w(Q5),w(kx),w(oC),f&&t(yqe),f&&t(Yc),w(Sx),f&&t(Lqe),f&&t(vr),w(Rx),w(Bx),w(tC),w(Ix),w(mC),f&&t(xqe),f&&t(ef),w(qx),f&&t($qe),f&&t(Fr),w(Nx),w(Dx),w(hC),w(Gx),w(uC),f&&t(kqe),f&&t(tf),w(Ox),f&&t(Sqe),f&&t(Tr),w(Vx),w(zx),w(bC),w(Qx),w(TC),f&&t(Rqe),f&&t(sf),w(Hx),f&&t(Pqe),f&&t(Mr),w(Ux),w(Yx),w(EC),w(Kx),w(wC)}}}const B6t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function I6t(A){return Iwt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class V6t extends Swt{constructor(g){super();Rwt(this,g,I6t,P6t,Pwt,{})}}export{V6t as default,B6t as metadata};
