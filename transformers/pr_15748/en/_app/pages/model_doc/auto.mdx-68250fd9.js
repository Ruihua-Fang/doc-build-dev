import{S as u_t,i as b_t,s as v_t,e as a,k as l,w as f,t as o,M as T_t,c as n,d as t,m as i,a as s,x as m,h as r,b as c,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-4833417e.js";import{T as _yr}from"../../chunks/Tip-fffd6df1.js";import{D as E}from"../../chunks/Docstring-44c5af16.js";import{C as w}from"../../chunks/CodeBlock-90ffda97.js";import{I as z}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-04a16537.js";function F_t(yi){let J,Ae,ie,me,to,ce,ue,Do,wi,Ef,sa,Ai,Li,oM,yf,ye,io,Bi,Pn,rM,$n,In,tM,ki,jn,aM,xi,wf,$a;return{c(){J=a("p"),Ae=o("If your "),ie=a("code"),me=o("NewModelConfig"),to=o(" is a subclass of "),ce=a("code"),ue=o("PretrainedConfig"),Do=o(`, make sure its
`),wi=a("code"),Ef=o("model_type"),sa=o(" attribute is set to the same key you use when registering the config (here "),Ai=a("code"),Li=o('"new-model"'),oM=o(")."),yf=l(),ye=a("p"),io=o("Likewise, if your "),Bi=a("code"),Pn=o("NewModel"),rM=o(" is a subclass of "),$n=a("a"),In=o("PreTrainedModel"),tM=o(`, make sure its
`),ki=a("code"),jn=o("config_class"),aM=o(` attribute is set to the same class you use when registering the model (here
`),xi=a("code"),wf=o("NewModelConfig"),$a=o(")."),this.h()},l(co){J=n(co,"P",{});var ge=s(J);Ae=r(ge,"If your "),ie=n(ge,"CODE",{});var D0=s(ie);me=r(D0,"NewModelConfig"),D0.forEach(t),to=r(ge," is a subclass of "),ce=n(ge,"CODE",{});var Ri=s(ce);ue=r(Ri,"PretrainedConfig"),Ri.forEach(t),Do=r(ge,`, make sure its
`),wi=n(ge,"CODE",{});var q0=s(wi);Ef=r(q0,"model_type"),q0.forEach(t),sa=r(ge," attribute is set to the same key you use when registering the config (here "),Ai=n(ge,"CODE",{});var G0=s(Ai);Li=r(G0,'"new-model"'),G0.forEach(t),oM=r(ge,")."),ge.forEach(t),yf=i(co),ye=n(co,"P",{});var qo=s(ye);io=r(qo,"Likewise, if your "),Bi=n(qo,"CODE",{});var Ia=s(Bi);Pn=r(Ia,"NewModel"),Ia.forEach(t),rM=r(qo," is a subclass of "),$n=n(qo,"A",{href:!0});var O0=s($n);In=r(O0,"PreTrainedModel"),O0.forEach(t),tM=r(qo,`, make sure its
`),ki=n(qo,"CODE",{});var Af=s(ki);jn=r(Af,"config_class"),Af.forEach(t),aM=r(qo,` attribute is set to the same class you use when registering the model (here
`),xi=n(qo,"CODE",{});var X0=s(xi);wf=r(X0,"NewModelConfig"),X0.forEach(t),$a=r(qo,")."),qo.forEach(t),this.h()},h(){c($n,"href","/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel")},m(co,ge){b(co,J,ge),e(J,Ae),e(J,ie),e(ie,me),e(J,to),e(J,ce),e(ce,ue),e(J,Do),e(J,wi),e(wi,Ef),e(J,sa),e(J,Ai),e(Ai,Li),e(J,oM),b(co,yf,ge),b(co,ye,ge),e(ye,io),e(ye,Bi),e(Bi,Pn),e(ye,rM),e(ye,$n),e($n,In),e(ye,tM),e(ye,ki),e(ki,jn),e(ye,aM),e(ye,xi),e(xi,wf),e(ye,$a)},d(co){co&&t(J),co&&t(yf),co&&t(ye)}}}function C_t(yi){let J,Ae,ie,me,to;return{c(){J=a("p"),Ae=o("Passing "),ie=a("code"),me=o("use_auth_token=True"),to=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Ae=r(ue,"Passing "),ie=n(ue,"CODE",{});var Do=s(ie);me=r(Do,"use_auth_token=True"),Do.forEach(t),to=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Ae),e(J,ie),e(ie,me),e(J,to)},d(ce){ce&&t(J)}}}function M_t(yi){let J,Ae,ie,me,to;return{c(){J=a("p"),Ae=o("Passing "),ie=a("code"),me=o("use_auth_token=True"),to=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Ae=r(ue,"Passing "),ie=n(ue,"CODE",{});var Do=s(ie);me=r(Do,"use_auth_token=True"),Do.forEach(t),to=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Ae),e(J,ie),e(ie,me),e(J,to)},d(ce){ce&&t(J)}}}function E_t(yi){let J,Ae,ie,me,to,ce,ue,Do,wi,Ef,sa,Ai,Li,oM,yf,ye,io,Bi,Pn,rM,$n,In,tM,ki,jn,aM,xi,wf,$a,co,ge,D0,Ri,q0,G0,qo,Ia,O0,Af,X0,mxe,tLe,Si,Lf,$V,nM,gxe,IV,hxe,aLe,Nn,pxe,jV,_xe,uxe,NV,bxe,vxe,nLe,sM,sLe,z0,Txe,lLe,Bf,iLe,Pi,kf,DV,lM,Fxe,qV,Cxe,dLe,Go,iM,Mxe,dM,Exe,V0,yxe,wxe,Axe,cM,Lxe,GV,Bxe,kxe,xxe,fo,fM,Rxe,OV,Sxe,Pxe,$i,$xe,XV,Ixe,jxe,zV,Nxe,Dxe,qxe,v,xf,VV,Gxe,Oxe,W0,Xxe,zxe,Vxe,Rf,WV,Wxe,Qxe,Q0,Hxe,Uxe,Jxe,Sf,QV,Yxe,Kxe,H0,Zxe,eRe,oRe,Pf,HV,rRe,tRe,U0,aRe,nRe,sRe,$f,UV,lRe,iRe,J0,dRe,cRe,fRe,If,JV,mRe,gRe,Y0,hRe,pRe,_Re,jf,YV,uRe,bRe,K0,vRe,TRe,FRe,Nf,KV,CRe,MRe,Z0,ERe,yRe,wRe,Df,ZV,ARe,LRe,eL,BRe,kRe,xRe,qf,eW,RRe,SRe,oL,PRe,$Re,IRe,Gf,oW,jRe,NRe,rL,DRe,qRe,GRe,Of,rW,ORe,XRe,tL,zRe,VRe,WRe,Xf,tW,QRe,HRe,aL,URe,JRe,YRe,zf,aW,KRe,ZRe,nL,eSe,oSe,rSe,Vf,nW,tSe,aSe,sL,nSe,sSe,lSe,Wf,sW,iSe,dSe,lL,cSe,fSe,mSe,Qf,lW,gSe,hSe,iL,pSe,_Se,uSe,Hf,iW,bSe,vSe,dL,TSe,FSe,CSe,Uf,dW,MSe,ESe,cL,ySe,wSe,ASe,Jf,cW,LSe,BSe,fL,kSe,xSe,RSe,Yf,fW,SSe,PSe,mL,$Se,ISe,jSe,Kf,mW,NSe,DSe,gL,qSe,GSe,OSe,Zf,gW,XSe,zSe,hL,VSe,WSe,QSe,em,hW,HSe,USe,pL,JSe,YSe,KSe,om,pW,ZSe,ePe,_L,oPe,rPe,tPe,rm,_W,aPe,nPe,uL,sPe,lPe,iPe,tm,uW,dPe,cPe,bL,fPe,mPe,gPe,am,bW,hPe,pPe,vL,_Pe,uPe,bPe,nm,vW,vPe,TPe,TL,FPe,CPe,MPe,sm,TW,EPe,yPe,FL,wPe,APe,LPe,lm,FW,BPe,kPe,CL,xPe,RPe,SPe,im,CW,PPe,$Pe,ML,IPe,jPe,NPe,dm,MW,DPe,qPe,EL,GPe,OPe,XPe,cm,EW,zPe,VPe,yL,WPe,QPe,HPe,fm,yW,UPe,JPe,wL,YPe,KPe,ZPe,mm,wW,e$e,o$e,AL,r$e,t$e,a$e,gm,AW,n$e,s$e,LL,l$e,i$e,d$e,hm,LW,c$e,f$e,BL,m$e,g$e,h$e,pm,BW,p$e,_$e,kL,u$e,b$e,v$e,_m,kW,T$e,F$e,xL,C$e,M$e,E$e,um,xW,y$e,w$e,RL,A$e,L$e,B$e,bm,RW,k$e,x$e,SL,R$e,S$e,P$e,vm,SW,$$e,I$e,PL,j$e,N$e,D$e,Tm,PW,q$e,G$e,$L,O$e,X$e,z$e,Fm,$W,V$e,W$e,IL,Q$e,H$e,U$e,Cm,IW,J$e,Y$e,jL,K$e,Z$e,eIe,Mm,jW,oIe,rIe,NL,tIe,aIe,nIe,Em,NW,sIe,lIe,DL,iIe,dIe,cIe,ym,DW,fIe,mIe,qL,gIe,hIe,pIe,wm,qW,_Ie,uIe,GL,bIe,vIe,TIe,Am,GW,FIe,CIe,OL,MIe,EIe,yIe,Lm,OW,wIe,AIe,XL,LIe,BIe,kIe,Bm,XW,xIe,RIe,zL,SIe,PIe,$Ie,km,zW,IIe,jIe,VL,NIe,DIe,qIe,xm,VW,GIe,OIe,WL,XIe,zIe,VIe,Rm,WW,WIe,QIe,QL,HIe,UIe,JIe,Sm,QW,YIe,KIe,HL,ZIe,eje,oje,Pm,HW,rje,tje,UL,aje,nje,sje,$m,UW,lje,ije,JL,dje,cje,fje,Im,JW,mje,gje,YL,hje,pje,_je,jm,YW,uje,bje,KL,vje,Tje,Fje,Nm,KW,Cje,Mje,ZL,Eje,yje,wje,Dm,ZW,Aje,Lje,e9,Bje,kje,xje,qm,eQ,Rje,Sje,o9,Pje,$je,Ije,Gm,oQ,jje,Nje,r9,Dje,qje,Gje,Om,rQ,Oje,Xje,t9,zje,Vje,Wje,Xm,tQ,Qje,Hje,a9,Uje,Jje,Yje,zm,aQ,Kje,Zje,n9,eNe,oNe,rNe,Vm,nQ,tNe,aNe,s9,nNe,sNe,lNe,Wm,sQ,iNe,dNe,l9,cNe,fNe,mNe,Qm,lQ,gNe,hNe,i9,pNe,_Ne,uNe,Hm,iQ,bNe,vNe,d9,TNe,FNe,CNe,Um,dQ,MNe,ENe,c9,yNe,wNe,ANe,Jm,cQ,LNe,BNe,f9,kNe,xNe,RNe,Ym,fQ,SNe,PNe,m9,$Ne,INe,jNe,Km,mQ,NNe,DNe,g9,qNe,GNe,ONe,Zm,gQ,XNe,zNe,h9,VNe,WNe,QNe,eg,hQ,HNe,UNe,p9,JNe,YNe,KNe,og,pQ,ZNe,eDe,_9,oDe,rDe,tDe,rg,_Q,aDe,nDe,u9,sDe,lDe,iDe,tg,uQ,dDe,cDe,b9,fDe,mDe,gDe,ag,bQ,hDe,pDe,v9,_De,uDe,bDe,ng,vQ,vDe,TDe,T9,FDe,CDe,MDe,sg,TQ,EDe,yDe,F9,wDe,ADe,LDe,lg,FQ,BDe,kDe,C9,xDe,RDe,SDe,ig,CQ,PDe,$De,M9,IDe,jDe,NDe,dg,MQ,DDe,qDe,E9,GDe,ODe,XDe,cg,EQ,zDe,VDe,y9,WDe,QDe,HDe,fg,yQ,UDe,JDe,w9,YDe,KDe,ZDe,mg,wQ,eqe,oqe,A9,rqe,tqe,aqe,gg,AQ,nqe,sqe,L9,lqe,iqe,dqe,LQ,cqe,fqe,mM,mqe,hg,gM,gqe,BQ,hqe,cLe,Ii,pg,kQ,hM,pqe,xQ,_qe,fLe,Oo,pM,uqe,_M,bqe,B9,vqe,Tqe,Fqe,uM,Cqe,RQ,Mqe,Eqe,yqe,mo,bM,wqe,SQ,Aqe,Lqe,ja,Bqe,PQ,kqe,xqe,$Q,Rqe,Sqe,IQ,Pqe,$qe,Iqe,M,Dn,jQ,jqe,Nqe,k9,Dqe,qqe,x9,Gqe,Oqe,Xqe,qn,NQ,zqe,Vqe,R9,Wqe,Qqe,S9,Hqe,Uqe,Jqe,Gn,DQ,Yqe,Kqe,P9,Zqe,eGe,$9,oGe,rGe,tGe,_g,qQ,aGe,nGe,I9,sGe,lGe,iGe,On,GQ,dGe,cGe,j9,fGe,mGe,N9,gGe,hGe,pGe,ug,OQ,_Ge,uGe,D9,bGe,vGe,TGe,bg,XQ,FGe,CGe,q9,MGe,EGe,yGe,vg,zQ,wGe,AGe,G9,LGe,BGe,kGe,Xn,VQ,xGe,RGe,O9,SGe,PGe,X9,$Ge,IGe,jGe,zn,WQ,NGe,DGe,z9,qGe,GGe,V9,OGe,XGe,zGe,Vn,QQ,VGe,WGe,W9,QGe,HGe,Q9,UGe,JGe,YGe,Tg,HQ,KGe,ZGe,H9,eOe,oOe,rOe,Fg,UQ,tOe,aOe,U9,nOe,sOe,lOe,Wn,JQ,iOe,dOe,J9,cOe,fOe,Y9,mOe,gOe,hOe,Cg,YQ,pOe,_Oe,K9,uOe,bOe,vOe,Qn,KQ,TOe,FOe,Z9,COe,MOe,eB,EOe,yOe,wOe,Hn,ZQ,AOe,LOe,oB,BOe,kOe,rB,xOe,ROe,SOe,Un,eH,POe,$Oe,tB,IOe,jOe,oH,NOe,DOe,qOe,Mg,rH,GOe,OOe,aB,XOe,zOe,VOe,Jn,tH,WOe,QOe,nB,HOe,UOe,sB,JOe,YOe,KOe,Eg,aH,ZOe,eXe,lB,oXe,rXe,tXe,Yn,nH,aXe,nXe,iB,sXe,lXe,dB,iXe,dXe,cXe,Kn,sH,fXe,mXe,cB,gXe,hXe,fB,pXe,_Xe,uXe,Zn,lH,bXe,vXe,mB,TXe,FXe,gB,CXe,MXe,EXe,yg,iH,yXe,wXe,hB,AXe,LXe,BXe,es,dH,kXe,xXe,pB,RXe,SXe,_B,PXe,$Xe,IXe,wg,cH,jXe,NXe,uB,DXe,qXe,GXe,os,fH,OXe,XXe,bB,zXe,VXe,vB,WXe,QXe,HXe,rs,mH,UXe,JXe,TB,YXe,KXe,FB,ZXe,eze,oze,ts,gH,rze,tze,CB,aze,nze,MB,sze,lze,ize,as,hH,dze,cze,EB,fze,mze,yB,gze,hze,pze,Ag,pH,_ze,uze,wB,bze,vze,Tze,ns,_H,Fze,Cze,AB,Mze,Eze,LB,yze,wze,Aze,ss,uH,Lze,Bze,BB,kze,xze,kB,Rze,Sze,Pze,ls,bH,$ze,Ize,xB,jze,Nze,RB,Dze,qze,Gze,is,vH,Oze,Xze,SB,zze,Vze,PB,Wze,Qze,Hze,ds,TH,Uze,Jze,$B,Yze,Kze,IB,Zze,eVe,oVe,cs,FH,rVe,tVe,jB,aVe,nVe,NB,sVe,lVe,iVe,Lg,CH,dVe,cVe,DB,fVe,mVe,gVe,fs,MH,hVe,pVe,qB,_Ve,uVe,GB,bVe,vVe,TVe,Bg,EH,FVe,CVe,OB,MVe,EVe,yVe,kg,yH,wVe,AVe,XB,LVe,BVe,kVe,ms,wH,xVe,RVe,zB,SVe,PVe,VB,$Ve,IVe,jVe,gs,AH,NVe,DVe,WB,qVe,GVe,QB,OVe,XVe,zVe,xg,LH,VVe,WVe,HB,QVe,HVe,UVe,hs,BH,JVe,YVe,UB,KVe,ZVe,JB,eWe,oWe,rWe,ps,kH,tWe,aWe,YB,nWe,sWe,KB,lWe,iWe,dWe,_s,xH,cWe,fWe,ZB,mWe,gWe,ek,hWe,pWe,_We,us,RH,uWe,bWe,ok,vWe,TWe,rk,FWe,CWe,MWe,bs,SH,EWe,yWe,tk,wWe,AWe,ak,LWe,BWe,kWe,Rg,PH,xWe,RWe,nk,SWe,PWe,$We,Sg,$H,IWe,jWe,sk,NWe,DWe,qWe,Pg,IH,GWe,OWe,lk,XWe,zWe,VWe,$g,jH,WWe,QWe,ik,HWe,UWe,JWe,vs,NH,YWe,KWe,dk,ZWe,eQe,ck,oQe,rQe,tQe,Ig,DH,aQe,nQe,fk,sQe,lQe,iQe,Ts,qH,dQe,cQe,mk,fQe,mQe,gk,gQe,hQe,pQe,Fs,GH,_Qe,uQe,hk,bQe,vQe,pk,TQe,FQe,CQe,Cs,OH,MQe,EQe,_k,yQe,wQe,uk,AQe,LQe,BQe,Ms,XH,kQe,xQe,bk,RQe,SQe,vk,PQe,$Qe,IQe,Es,zH,jQe,NQe,Tk,DQe,qQe,Fk,GQe,OQe,XQe,jg,VH,zQe,VQe,Ck,WQe,QQe,HQe,Ng,WH,UQe,JQe,Mk,YQe,KQe,ZQe,ys,QH,eHe,oHe,Ek,rHe,tHe,yk,aHe,nHe,sHe,ws,HH,lHe,iHe,wk,dHe,cHe,Ak,fHe,mHe,gHe,As,UH,hHe,pHe,Lk,_He,uHe,Bk,bHe,vHe,THe,Dg,JH,FHe,CHe,kk,MHe,EHe,yHe,qg,YH,wHe,AHe,xk,LHe,BHe,kHe,Gg,KH,xHe,RHe,Rk,SHe,PHe,$He,Og,ZH,IHe,jHe,Sk,NHe,DHe,qHe,Ls,eU,GHe,OHe,Pk,XHe,zHe,$k,VHe,WHe,QHe,Xg,oU,HHe,UHe,Ik,JHe,YHe,KHe,zg,rU,ZHe,eUe,jk,oUe,rUe,tUe,Bs,tU,aUe,nUe,Nk,sUe,lUe,Dk,iUe,dUe,cUe,ks,aU,fUe,mUe,qk,gUe,hUe,Gk,pUe,_Ue,uUe,nU,bUe,vUe,vM,TUe,Vg,TM,FUe,sU,CUe,mLe,ji,Wg,lU,FM,MUe,iU,EUe,gLe,Xo,CM,yUe,MM,wUe,Ok,AUe,LUe,BUe,EM,kUe,dU,xUe,RUe,SUe,Le,yM,PUe,cU,$Ue,IUe,Na,jUe,fU,NUe,DUe,mU,qUe,GUe,gU,OUe,XUe,zUe,se,Qg,hU,VUe,WUe,Xk,QUe,HUe,UUe,Hg,pU,JUe,YUe,zk,KUe,ZUe,eJe,Ug,_U,oJe,rJe,Vk,tJe,aJe,nJe,Jg,uU,sJe,lJe,Wk,iJe,dJe,cJe,Yg,bU,fJe,mJe,Qk,gJe,hJe,pJe,Kg,vU,_Je,uJe,Hk,bJe,vJe,TJe,Zg,TU,FJe,CJe,Uk,MJe,EJe,yJe,eh,FU,wJe,AJe,Jk,LJe,BJe,kJe,oh,CU,xJe,RJe,Yk,SJe,PJe,$Je,rh,MU,IJe,jJe,Kk,NJe,DJe,qJe,th,EU,GJe,OJe,Zk,XJe,zJe,VJe,ah,yU,WJe,QJe,ex,HJe,UJe,JJe,nh,wU,YJe,KJe,ox,ZJe,eYe,oYe,sh,AU,rYe,tYe,rx,aYe,nYe,sYe,lh,LU,lYe,iYe,tx,dYe,cYe,fYe,ih,mYe,BU,gYe,hYe,wM,pYe,dh,AM,_Ye,kU,uYe,hLe,Ni,ch,xU,LM,bYe,RU,vYe,pLe,zo,BM,TYe,kM,FYe,ax,CYe,MYe,EYe,xM,yYe,SU,wYe,AYe,LYe,Be,RM,BYe,PU,kYe,xYe,Di,RYe,$U,SYe,PYe,IU,$Ye,IYe,jYe,we,fh,jU,NYe,DYe,nx,qYe,GYe,OYe,mh,NU,XYe,zYe,sx,VYe,WYe,QYe,gh,DU,HYe,UYe,lx,JYe,YYe,KYe,hh,qU,ZYe,eKe,ix,oKe,rKe,tKe,ph,GU,aKe,nKe,dx,sKe,lKe,iKe,_h,OU,dKe,cKe,cx,fKe,mKe,gKe,uh,XU,hKe,pKe,fx,_Ke,uKe,bKe,bh,zU,vKe,TKe,mx,FKe,CKe,MKe,vh,EKe,VU,yKe,wKe,SM,AKe,Th,PM,LKe,WU,BKe,_Le,qi,Fh,QU,$M,kKe,HU,xKe,uLe,Vo,IM,RKe,Gi,SKe,UU,PKe,$Ke,JU,IKe,jKe,NKe,jM,DKe,YU,qKe,GKe,OKe,Nr,NM,XKe,KU,zKe,VKe,Oi,WKe,ZU,QKe,HKe,eJ,UKe,JKe,YKe,oJ,KKe,ZKe,DM,eZe,ke,qM,oZe,rJ,rZe,tZe,Da,aZe,tJ,nZe,sZe,aJ,lZe,iZe,nJ,dZe,cZe,fZe,F,Ch,sJ,mZe,gZe,gx,hZe,pZe,_Ze,Mh,lJ,uZe,bZe,hx,vZe,TZe,FZe,Eh,iJ,CZe,MZe,px,EZe,yZe,wZe,yh,dJ,AZe,LZe,_x,BZe,kZe,xZe,wh,cJ,RZe,SZe,ux,PZe,$Ze,IZe,Ah,fJ,jZe,NZe,bx,DZe,qZe,GZe,Lh,mJ,OZe,XZe,vx,zZe,VZe,WZe,Bh,gJ,QZe,HZe,Tx,UZe,JZe,YZe,kh,hJ,KZe,ZZe,Fx,eeo,oeo,reo,xh,pJ,teo,aeo,Cx,neo,seo,leo,Rh,_J,ieo,deo,Mx,ceo,feo,meo,Sh,uJ,geo,heo,Ex,peo,_eo,ueo,Ph,bJ,beo,veo,yx,Teo,Feo,Ceo,$h,vJ,Meo,Eeo,wx,yeo,weo,Aeo,Ih,TJ,Leo,Beo,Ax,keo,xeo,Reo,jh,FJ,Seo,Peo,Lx,$eo,Ieo,jeo,Nh,CJ,Neo,Deo,Bx,qeo,Geo,Oeo,Dh,MJ,Xeo,zeo,kx,Veo,Weo,Qeo,qh,EJ,Heo,Ueo,xx,Jeo,Yeo,Keo,Gh,yJ,Zeo,eoo,Rx,ooo,roo,too,Oh,wJ,aoo,noo,Sx,soo,loo,ioo,Xh,AJ,doo,coo,Px,foo,moo,goo,zh,LJ,hoo,poo,$x,_oo,uoo,boo,Vh,BJ,voo,Too,Ix,Foo,Coo,Moo,Wh,kJ,Eoo,yoo,jx,woo,Aoo,Loo,xs,xJ,Boo,koo,Nx,xoo,Roo,Dx,Soo,Poo,$oo,Qh,RJ,Ioo,joo,qx,Noo,Doo,qoo,Hh,SJ,Goo,Ooo,Gx,Xoo,zoo,Voo,Uh,PJ,Woo,Qoo,Ox,Hoo,Uoo,Joo,Jh,$J,Yoo,Koo,Xx,Zoo,ero,oro,Yh,IJ,rro,tro,zx,aro,nro,sro,Kh,jJ,lro,iro,Vx,dro,cro,fro,Zh,NJ,mro,gro,Wx,hro,pro,_ro,ep,DJ,uro,bro,Qx,vro,Tro,Fro,op,qJ,Cro,Mro,Hx,Ero,yro,wro,rp,GJ,Aro,Lro,Ux,Bro,kro,xro,tp,OJ,Rro,Sro,Jx,Pro,$ro,Iro,ap,XJ,jro,Nro,Yx,Dro,qro,Gro,np,zJ,Oro,Xro,Kx,zro,Vro,Wro,sp,VJ,Qro,Hro,Zx,Uro,Jro,Yro,lp,WJ,Kro,Zro,eR,eto,oto,rto,ip,QJ,tto,ato,oR,nto,sto,lto,dp,HJ,ito,dto,rR,cto,fto,mto,cp,UJ,gto,hto,tR,pto,_to,uto,fp,JJ,bto,vto,aR,Tto,Fto,Cto,mp,YJ,Mto,Eto,nR,yto,wto,Ato,gp,KJ,Lto,Bto,sR,kto,xto,Rto,hp,ZJ,Sto,Pto,lR,$to,Ito,jto,pp,eY,Nto,Dto,iR,qto,Gto,Oto,_p,oY,Xto,zto,dR,Vto,Wto,Qto,up,rY,Hto,Uto,cR,Jto,Yto,Kto,bp,tY,Zto,eao,fR,oao,rao,tao,vp,aY,aao,nao,mR,sao,lao,iao,Tp,nY,dao,cao,gR,fao,mao,gao,Fp,sY,hao,pao,hR,_ao,uao,bao,Cp,lY,vao,Tao,pR,Fao,Cao,Mao,Mp,iY,Eao,yao,_R,wao,Aao,Lao,Ep,dY,Bao,kao,uR,xao,Rao,Sao,yp,cY,Pao,$ao,bR,Iao,jao,Nao,wp,fY,Dao,qao,vR,Gao,Oao,Xao,Ap,mY,zao,Vao,TR,Wao,Qao,Hao,Lp,gY,Uao,Jao,FR,Yao,Kao,Zao,Bp,hY,eno,ono,CR,rno,tno,ano,kp,pY,nno,sno,MR,lno,ino,dno,xp,_Y,cno,fno,ER,mno,gno,hno,Rp,uY,pno,_no,yR,uno,bno,vno,Sp,bY,Tno,Fno,wR,Cno,Mno,Eno,Pp,vY,yno,wno,AR,Ano,Lno,Bno,$p,TY,kno,xno,LR,Rno,Sno,Pno,Ip,FY,$no,Ino,BR,jno,Nno,Dno,jp,CY,qno,Gno,kR,Ono,Xno,zno,Np,MY,Vno,Wno,xR,Qno,Hno,Uno,Dp,EY,Jno,Yno,RR,Kno,Zno,eso,qp,yY,oso,rso,SR,tso,aso,nso,Gp,wY,sso,lso,PR,iso,dso,cso,Op,AY,fso,mso,$R,gso,hso,pso,Xp,LY,_so,uso,IR,bso,vso,Tso,zp,BY,Fso,Cso,jR,Mso,Eso,yso,Vp,kY,wso,Aso,NR,Lso,Bso,kso,Wp,xY,xso,Rso,DR,Sso,Pso,$so,Qp,RY,Iso,jso,qR,Nso,Dso,qso,Hp,SY,Gso,Oso,GR,Xso,zso,Vso,Up,PY,Wso,Qso,OR,Hso,Uso,Jso,Jp,$Y,Yso,Kso,XR,Zso,elo,olo,Yp,rlo,IY,tlo,alo,jY,nlo,slo,NY,llo,ilo,GM,bLe,Xi,Kp,DY,OM,dlo,qY,clo,vLe,Wo,XM,flo,zi,mlo,GY,glo,hlo,OY,plo,_lo,ulo,zM,blo,XY,vlo,Tlo,Flo,Dr,VM,Clo,zY,Mlo,Elo,Vi,ylo,VY,wlo,Alo,WY,Llo,Blo,klo,QY,xlo,Rlo,WM,Slo,xe,QM,Plo,HY,$lo,Ilo,qa,jlo,UY,Nlo,Dlo,JY,qlo,Glo,YY,Olo,Xlo,zlo,x,Zp,KY,Vlo,Wlo,zR,Qlo,Hlo,Ulo,e_,ZY,Jlo,Ylo,VR,Klo,Zlo,eio,o_,eK,oio,rio,WR,tio,aio,nio,r_,oK,sio,lio,QR,iio,dio,cio,t_,rK,fio,mio,HR,gio,hio,pio,a_,tK,_io,uio,UR,bio,vio,Tio,n_,aK,Fio,Cio,JR,Mio,Eio,yio,s_,nK,wio,Aio,YR,Lio,Bio,kio,l_,sK,xio,Rio,KR,Sio,Pio,$io,i_,lK,Iio,jio,ZR,Nio,Dio,qio,d_,iK,Gio,Oio,eS,Xio,zio,Vio,c_,dK,Wio,Qio,oS,Hio,Uio,Jio,f_,cK,Yio,Kio,rS,Zio,edo,odo,m_,fK,rdo,tdo,tS,ado,ndo,sdo,g_,mK,ldo,ido,aS,ddo,cdo,fdo,h_,gK,mdo,gdo,nS,hdo,pdo,_do,p_,hK,udo,bdo,sS,vdo,Tdo,Fdo,__,pK,Cdo,Mdo,lS,Edo,ydo,wdo,u_,_K,Ado,Ldo,iS,Bdo,kdo,xdo,b_,uK,Rdo,Sdo,dS,Pdo,$do,Ido,v_,bK,jdo,Ndo,cS,Ddo,qdo,Gdo,T_,vK,Odo,Xdo,fS,zdo,Vdo,Wdo,F_,TK,Qdo,Hdo,mS,Udo,Jdo,Ydo,C_,FK,Kdo,Zdo,gS,eco,oco,rco,M_,CK,tco,aco,hS,nco,sco,lco,E_,MK,ico,dco,pS,cco,fco,mco,y_,EK,gco,hco,_S,pco,_co,uco,w_,yK,bco,vco,uS,Tco,Fco,Cco,A_,wK,Mco,Eco,bS,yco,wco,Aco,L_,AK,Lco,Bco,vS,kco,xco,Rco,B_,LK,Sco,Pco,TS,$co,Ico,jco,k_,BK,Nco,Dco,FS,qco,Gco,Oco,x_,kK,Xco,zco,CS,Vco,Wco,Qco,R_,xK,Hco,Uco,MS,Jco,Yco,Kco,S_,RK,Zco,efo,ES,ofo,rfo,tfo,P_,SK,afo,nfo,yS,sfo,lfo,ifo,$_,PK,dfo,cfo,wS,ffo,mfo,gfo,I_,$K,hfo,pfo,AS,_fo,ufo,bfo,j_,vfo,IK,Tfo,Ffo,jK,Cfo,Mfo,NK,Efo,yfo,HM,TLe,Wi,N_,DK,UM,wfo,qK,Afo,FLe,Qo,JM,Lfo,Qi,Bfo,GK,kfo,xfo,OK,Rfo,Sfo,Pfo,YM,$fo,XK,Ifo,jfo,Nfo,qr,KM,Dfo,zK,qfo,Gfo,Hi,Ofo,VK,Xfo,zfo,WK,Vfo,Wfo,Qfo,QK,Hfo,Ufo,ZM,Jfo,Re,eE,Yfo,HK,Kfo,Zfo,Ga,emo,UK,omo,rmo,JK,tmo,amo,YK,nmo,smo,lmo,$,D_,KK,imo,dmo,LS,cmo,fmo,mmo,q_,ZK,gmo,hmo,BS,pmo,_mo,umo,G_,eZ,bmo,vmo,kS,Tmo,Fmo,Cmo,O_,oZ,Mmo,Emo,xS,ymo,wmo,Amo,X_,rZ,Lmo,Bmo,RS,kmo,xmo,Rmo,z_,tZ,Smo,Pmo,SS,$mo,Imo,jmo,V_,aZ,Nmo,Dmo,PS,qmo,Gmo,Omo,W_,nZ,Xmo,zmo,$S,Vmo,Wmo,Qmo,Q_,sZ,Hmo,Umo,IS,Jmo,Ymo,Kmo,H_,lZ,Zmo,ego,jS,ogo,rgo,tgo,U_,iZ,ago,ngo,NS,sgo,lgo,igo,J_,dZ,dgo,cgo,DS,fgo,mgo,ggo,Y_,cZ,hgo,pgo,qS,_go,ugo,bgo,K_,fZ,vgo,Tgo,GS,Fgo,Cgo,Mgo,Z_,mZ,Ego,ygo,OS,wgo,Ago,Lgo,eu,gZ,Bgo,kgo,XS,xgo,Rgo,Sgo,ou,hZ,Pgo,$go,zS,Igo,jgo,Ngo,ru,pZ,Dgo,qgo,VS,Ggo,Ogo,Xgo,tu,_Z,zgo,Vgo,WS,Wgo,Qgo,Hgo,au,uZ,Ugo,Jgo,QS,Ygo,Kgo,Zgo,nu,bZ,eho,oho,HS,rho,tho,aho,su,vZ,nho,sho,US,lho,iho,dho,lu,TZ,cho,fho,JS,mho,gho,hho,iu,FZ,pho,_ho,YS,uho,bho,vho,du,CZ,Tho,Fho,KS,Cho,Mho,Eho,cu,MZ,yho,who,ZS,Aho,Lho,Bho,fu,EZ,kho,xho,eP,Rho,Sho,Pho,mu,yZ,$ho,Iho,oP,jho,Nho,Dho,gu,wZ,qho,Gho,rP,Oho,Xho,zho,hu,AZ,Vho,Who,tP,Qho,Hho,Uho,pu,LZ,Jho,Yho,aP,Kho,Zho,epo,_u,BZ,opo,rpo,nP,tpo,apo,npo,uu,kZ,spo,lpo,sP,ipo,dpo,cpo,bu,xZ,fpo,mpo,lP,gpo,hpo,ppo,vu,_po,RZ,upo,bpo,SZ,vpo,Tpo,PZ,Fpo,Cpo,oE,CLe,Ui,Tu,$Z,rE,Mpo,IZ,Epo,MLe,Ho,tE,ypo,Ji,wpo,jZ,Apo,Lpo,NZ,Bpo,kpo,xpo,aE,Rpo,DZ,Spo,Ppo,$po,Gr,nE,Ipo,qZ,jpo,Npo,Yi,Dpo,GZ,qpo,Gpo,OZ,Opo,Xpo,zpo,XZ,Vpo,Wpo,sE,Qpo,Se,lE,Hpo,zZ,Upo,Jpo,Oa,Ypo,VZ,Kpo,Zpo,WZ,e_o,o_o,QZ,r_o,t_o,a_o,I,Fu,HZ,n_o,s_o,iP,l_o,i_o,d_o,Cu,UZ,c_o,f_o,dP,m_o,g_o,h_o,Mu,JZ,p_o,__o,cP,u_o,b_o,v_o,Eu,YZ,T_o,F_o,fP,C_o,M_o,E_o,yu,KZ,y_o,w_o,mP,A_o,L_o,B_o,wu,ZZ,k_o,x_o,gP,R_o,S_o,P_o,Au,eee,$_o,I_o,hP,j_o,N_o,D_o,Lu,oee,q_o,G_o,pP,O_o,X_o,z_o,Bu,ree,V_o,W_o,_P,Q_o,H_o,U_o,ku,tee,J_o,Y_o,uP,K_o,Z_o,euo,xu,aee,ouo,ruo,bP,tuo,auo,nuo,Ru,nee,suo,luo,vP,iuo,duo,cuo,Su,see,fuo,muo,TP,guo,huo,puo,Pu,lee,_uo,uuo,FP,buo,vuo,Tuo,$u,iee,Fuo,Cuo,CP,Muo,Euo,yuo,Iu,dee,wuo,Auo,MP,Luo,Buo,kuo,ju,cee,xuo,Ruo,EP,Suo,Puo,$uo,Nu,fee,Iuo,juo,yP,Nuo,Duo,quo,Du,mee,Guo,Ouo,wP,Xuo,zuo,Vuo,qu,gee,Wuo,Quo,AP,Huo,Uuo,Juo,Gu,hee,Yuo,Kuo,LP,Zuo,e1o,o1o,Ou,pee,r1o,t1o,BP,a1o,n1o,s1o,Xu,_ee,l1o,i1o,kP,d1o,c1o,f1o,zu,uee,m1o,g1o,xP,h1o,p1o,_1o,Vu,bee,u1o,b1o,RP,v1o,T1o,F1o,Wu,vee,C1o,M1o,SP,E1o,y1o,w1o,Qu,Tee,A1o,L1o,PP,B1o,k1o,x1o,Hu,Fee,R1o,S1o,$P,P1o,$1o,I1o,Uu,Cee,j1o,N1o,IP,D1o,q1o,G1o,Ju,Mee,O1o,X1o,Eee,z1o,V1o,W1o,Yu,yee,Q1o,H1o,jP,U1o,J1o,Y1o,Ku,wee,K1o,Z1o,NP,e4o,o4o,r4o,Zu,Aee,t4o,a4o,DP,n4o,s4o,l4o,e1,Lee,i4o,d4o,qP,c4o,f4o,m4o,o1,g4o,Bee,h4o,p4o,kee,_4o,u4o,xee,b4o,v4o,iE,ELe,Ki,r1,Ree,dE,T4o,See,F4o,yLe,Uo,cE,C4o,Zi,M4o,Pee,E4o,y4o,$ee,w4o,A4o,L4o,fE,B4o,Iee,k4o,x4o,R4o,Or,mE,S4o,jee,P4o,$4o,ed,I4o,Nee,j4o,N4o,Dee,D4o,q4o,G4o,qee,O4o,X4o,gE,z4o,Pe,hE,V4o,Gee,W4o,Q4o,Xa,H4o,Oee,U4o,J4o,Xee,Y4o,K4o,zee,Z4o,ebo,obo,ae,t1,Vee,rbo,tbo,GP,abo,nbo,sbo,a1,Wee,lbo,ibo,OP,dbo,cbo,fbo,n1,Qee,mbo,gbo,XP,hbo,pbo,_bo,s1,Hee,ubo,bbo,zP,vbo,Tbo,Fbo,l1,Uee,Cbo,Mbo,VP,Ebo,ybo,wbo,i1,Jee,Abo,Lbo,WP,Bbo,kbo,xbo,d1,Yee,Rbo,Sbo,QP,Pbo,$bo,Ibo,c1,Kee,jbo,Nbo,HP,Dbo,qbo,Gbo,f1,Zee,Obo,Xbo,UP,zbo,Vbo,Wbo,m1,eoe,Qbo,Hbo,JP,Ubo,Jbo,Ybo,g1,ooe,Kbo,Zbo,YP,e5o,o5o,r5o,h1,roe,t5o,a5o,KP,n5o,s5o,l5o,p1,toe,i5o,d5o,ZP,c5o,f5o,m5o,_1,aoe,g5o,h5o,e$,p5o,_5o,u5o,u1,noe,b5o,v5o,o$,T5o,F5o,C5o,b1,soe,M5o,E5o,r$,y5o,w5o,A5o,v1,L5o,loe,B5o,k5o,ioe,x5o,R5o,doe,S5o,P5o,pE,wLe,od,T1,coe,_E,$5o,foe,I5o,ALe,Jo,uE,j5o,rd,N5o,moe,D5o,q5o,goe,G5o,O5o,X5o,bE,z5o,hoe,V5o,W5o,Q5o,Xr,vE,H5o,poe,U5o,J5o,td,Y5o,_oe,K5o,Z5o,uoe,e2o,o2o,r2o,boe,t2o,a2o,TE,n2o,$e,FE,s2o,voe,l2o,i2o,za,d2o,Toe,c2o,f2o,Foe,m2o,g2o,Coe,h2o,p2o,_2o,A,F1,Moe,u2o,b2o,t$,v2o,T2o,F2o,C1,Eoe,C2o,M2o,a$,E2o,y2o,w2o,M1,yoe,A2o,L2o,n$,B2o,k2o,x2o,E1,woe,R2o,S2o,s$,P2o,$2o,I2o,y1,Aoe,j2o,N2o,l$,D2o,q2o,G2o,w1,Loe,O2o,X2o,i$,z2o,V2o,W2o,A1,Boe,Q2o,H2o,d$,U2o,J2o,Y2o,L1,koe,K2o,Z2o,c$,evo,ovo,rvo,B1,xoe,tvo,avo,f$,nvo,svo,lvo,k1,Roe,ivo,dvo,m$,cvo,fvo,mvo,x1,Soe,gvo,hvo,g$,pvo,_vo,uvo,R1,Poe,bvo,vvo,h$,Tvo,Fvo,Cvo,S1,$oe,Mvo,Evo,p$,yvo,wvo,Avo,P1,Ioe,Lvo,Bvo,_$,kvo,xvo,Rvo,$1,joe,Svo,Pvo,u$,$vo,Ivo,jvo,I1,Noe,Nvo,Dvo,b$,qvo,Gvo,Ovo,j1,Doe,Xvo,zvo,v$,Vvo,Wvo,Qvo,N1,qoe,Hvo,Uvo,T$,Jvo,Yvo,Kvo,D1,Goe,Zvo,eTo,F$,oTo,rTo,tTo,q1,Ooe,aTo,nTo,C$,sTo,lTo,iTo,G1,Xoe,dTo,cTo,M$,fTo,mTo,gTo,O1,zoe,hTo,pTo,E$,_To,uTo,bTo,X1,Voe,vTo,TTo,y$,FTo,CTo,MTo,z1,Woe,ETo,yTo,w$,wTo,ATo,LTo,V1,Qoe,BTo,kTo,A$,xTo,RTo,STo,W1,Hoe,PTo,$To,L$,ITo,jTo,NTo,Q1,Uoe,DTo,qTo,B$,GTo,OTo,XTo,H1,Joe,zTo,VTo,k$,WTo,QTo,HTo,U1,Yoe,UTo,JTo,x$,YTo,KTo,ZTo,J1,Koe,e7o,o7o,R$,r7o,t7o,a7o,Y1,Zoe,n7o,s7o,S$,l7o,i7o,d7o,K1,ere,c7o,f7o,P$,m7o,g7o,h7o,Z1,ore,p7o,_7o,$$,u7o,b7o,v7o,e4,rre,T7o,F7o,I$,C7o,M7o,E7o,o4,tre,y7o,w7o,j$,A7o,L7o,B7o,r4,are,k7o,x7o,N$,R7o,S7o,P7o,t4,nre,$7o,I7o,D$,j7o,N7o,D7o,a4,sre,q7o,G7o,q$,O7o,X7o,z7o,n4,lre,V7o,W7o,G$,Q7o,H7o,U7o,s4,ire,J7o,Y7o,O$,K7o,Z7o,e8o,l4,dre,o8o,r8o,X$,t8o,a8o,n8o,i4,cre,s8o,l8o,z$,i8o,d8o,c8o,d4,fre,f8o,m8o,V$,g8o,h8o,p8o,c4,mre,_8o,u8o,W$,b8o,v8o,T8o,f4,gre,F8o,C8o,Q$,M8o,E8o,y8o,m4,w8o,hre,A8o,L8o,pre,B8o,k8o,_re,x8o,R8o,CE,LLe,ad,g4,ure,ME,S8o,bre,P8o,BLe,Yo,EE,$8o,nd,I8o,vre,j8o,N8o,Tre,D8o,q8o,G8o,yE,O8o,Fre,X8o,z8o,V8o,zr,wE,W8o,Cre,Q8o,H8o,sd,U8o,Mre,J8o,Y8o,Ere,K8o,Z8o,eFo,yre,oFo,rFo,AE,tFo,Ie,LE,aFo,wre,nFo,sFo,Va,lFo,Are,iFo,dFo,Lre,cFo,fFo,Bre,mFo,gFo,hFo,G,h4,kre,pFo,_Fo,H$,uFo,bFo,vFo,p4,xre,TFo,FFo,U$,CFo,MFo,EFo,_4,Rre,yFo,wFo,J$,AFo,LFo,BFo,u4,Sre,kFo,xFo,Y$,RFo,SFo,PFo,b4,Pre,$Fo,IFo,K$,jFo,NFo,DFo,v4,$re,qFo,GFo,Z$,OFo,XFo,zFo,T4,Ire,VFo,WFo,eI,QFo,HFo,UFo,F4,jre,JFo,YFo,oI,KFo,ZFo,eCo,C4,Nre,oCo,rCo,rI,tCo,aCo,nCo,M4,Dre,sCo,lCo,tI,iCo,dCo,cCo,E4,qre,fCo,mCo,aI,gCo,hCo,pCo,y4,Gre,_Co,uCo,nI,bCo,vCo,TCo,w4,Ore,FCo,CCo,sI,MCo,ECo,yCo,A4,Xre,wCo,ACo,lI,LCo,BCo,kCo,L4,zre,xCo,RCo,iI,SCo,PCo,$Co,B4,Vre,ICo,jCo,dI,NCo,DCo,qCo,k4,Wre,GCo,OCo,cI,XCo,zCo,VCo,x4,Qre,WCo,QCo,fI,HCo,UCo,JCo,R4,Hre,YCo,KCo,mI,ZCo,eMo,oMo,S4,Ure,rMo,tMo,gI,aMo,nMo,sMo,P4,Jre,lMo,iMo,hI,dMo,cMo,fMo,$4,Yre,mMo,gMo,pI,hMo,pMo,_Mo,I4,Kre,uMo,bMo,_I,vMo,TMo,FMo,j4,Zre,CMo,MMo,uI,EMo,yMo,wMo,N4,ete,AMo,LMo,bI,BMo,kMo,xMo,D4,ote,RMo,SMo,vI,PMo,$Mo,IMo,q4,rte,jMo,NMo,TI,DMo,qMo,GMo,G4,OMo,tte,XMo,zMo,ate,VMo,WMo,nte,QMo,HMo,BE,kLe,ld,O4,ste,kE,UMo,lte,JMo,xLe,Ko,xE,YMo,id,KMo,ite,ZMo,eEo,dte,oEo,rEo,tEo,RE,aEo,cte,nEo,sEo,lEo,Vr,SE,iEo,fte,dEo,cEo,dd,fEo,mte,mEo,gEo,gte,hEo,pEo,_Eo,hte,uEo,bEo,PE,vEo,je,$E,TEo,pte,FEo,CEo,Wa,MEo,_te,EEo,yEo,ute,wEo,AEo,bte,LEo,BEo,kEo,na,X4,vte,xEo,REo,FI,SEo,PEo,$Eo,z4,Tte,IEo,jEo,CI,NEo,DEo,qEo,V4,Fte,GEo,OEo,MI,XEo,zEo,VEo,W4,Cte,WEo,QEo,EI,HEo,UEo,JEo,Q4,Mte,YEo,KEo,yI,ZEo,e3o,o3o,H4,r3o,Ete,t3o,a3o,yte,n3o,s3o,wte,l3o,i3o,IE,RLe,cd,U4,Ate,jE,d3o,Lte,c3o,SLe,Zo,NE,f3o,fd,m3o,Bte,g3o,h3o,kte,p3o,_3o,u3o,DE,b3o,xte,v3o,T3o,F3o,Wr,qE,C3o,Rte,M3o,E3o,md,y3o,Ste,w3o,A3o,Pte,L3o,B3o,k3o,$te,x3o,R3o,GE,S3o,Ne,OE,P3o,Ite,$3o,I3o,Qa,j3o,jte,N3o,D3o,Nte,q3o,G3o,Dte,O3o,X3o,z3o,D,J4,qte,V3o,W3o,wI,Q3o,H3o,U3o,Y4,Gte,J3o,Y3o,AI,K3o,Z3o,eyo,K4,Ote,oyo,ryo,LI,tyo,ayo,nyo,Z4,Xte,syo,lyo,BI,iyo,dyo,cyo,eb,zte,fyo,myo,kI,gyo,hyo,pyo,ob,Vte,_yo,uyo,xI,byo,vyo,Tyo,rb,Wte,Fyo,Cyo,RI,Myo,Eyo,yyo,tb,Qte,wyo,Ayo,SI,Lyo,Byo,kyo,ab,Hte,xyo,Ryo,PI,Syo,Pyo,$yo,nb,Ute,Iyo,jyo,$I,Nyo,Dyo,qyo,sb,Jte,Gyo,Oyo,II,Xyo,zyo,Vyo,lb,Yte,Wyo,Qyo,jI,Hyo,Uyo,Jyo,ib,Kte,Yyo,Kyo,NI,Zyo,ewo,owo,db,Zte,rwo,two,DI,awo,nwo,swo,cb,eae,lwo,iwo,qI,dwo,cwo,fwo,fb,oae,mwo,gwo,GI,hwo,pwo,_wo,mb,rae,uwo,bwo,OI,vwo,Two,Fwo,gb,tae,Cwo,Mwo,XI,Ewo,ywo,wwo,hb,aae,Awo,Lwo,zI,Bwo,kwo,xwo,pb,nae,Rwo,Swo,VI,Pwo,$wo,Iwo,_b,sae,jwo,Nwo,WI,Dwo,qwo,Gwo,ub,lae,Owo,Xwo,QI,zwo,Vwo,Wwo,bb,iae,Qwo,Hwo,HI,Uwo,Jwo,Ywo,vb,dae,Kwo,Zwo,UI,eAo,oAo,rAo,Tb,cae,tAo,aAo,JI,nAo,sAo,lAo,Fb,fae,iAo,dAo,YI,cAo,fAo,mAo,Cb,mae,gAo,hAo,KI,pAo,_Ao,uAo,Mb,gae,bAo,vAo,ZI,TAo,FAo,CAo,Eb,hae,MAo,EAo,ej,yAo,wAo,AAo,yb,pae,LAo,BAo,oj,kAo,xAo,RAo,wb,_ae,SAo,PAo,rj,$Ao,IAo,jAo,Ab,uae,NAo,DAo,tj,qAo,GAo,OAo,Lb,XAo,bae,zAo,VAo,vae,WAo,QAo,Tae,HAo,UAo,XE,PLe,gd,Bb,Fae,zE,JAo,Cae,YAo,$Le,er,VE,KAo,hd,ZAo,Mae,e6o,o6o,Eae,r6o,t6o,a6o,WE,n6o,yae,s6o,l6o,i6o,Qr,QE,d6o,wae,c6o,f6o,pd,m6o,Aae,g6o,h6o,Lae,p6o,_6o,u6o,Bae,b6o,v6o,HE,T6o,De,UE,F6o,kae,C6o,M6o,Ha,E6o,xae,y6o,w6o,Rae,A6o,L6o,Sae,B6o,k6o,x6o,R,kb,Pae,R6o,S6o,aj,P6o,$6o,I6o,xb,$ae,j6o,N6o,nj,D6o,q6o,G6o,Rb,Iae,O6o,X6o,sj,z6o,V6o,W6o,Sb,jae,Q6o,H6o,lj,U6o,J6o,Y6o,Pb,Nae,K6o,Z6o,ij,e0o,o0o,r0o,$b,Dae,t0o,a0o,dj,n0o,s0o,l0o,Ib,qae,i0o,d0o,cj,c0o,f0o,m0o,jb,Gae,g0o,h0o,fj,p0o,_0o,u0o,Nb,Oae,b0o,v0o,mj,T0o,F0o,C0o,Db,Xae,M0o,E0o,gj,y0o,w0o,A0o,qb,zae,L0o,B0o,hj,k0o,x0o,R0o,Gb,Vae,S0o,P0o,pj,$0o,I0o,j0o,Ob,Wae,N0o,D0o,_j,q0o,G0o,O0o,Xb,Qae,X0o,z0o,uj,V0o,W0o,Q0o,zb,Hae,H0o,U0o,bj,J0o,Y0o,K0o,Vb,Uae,Z0o,eLo,vj,oLo,rLo,tLo,Wb,Jae,aLo,nLo,Tj,sLo,lLo,iLo,Qb,Yae,dLo,cLo,Fj,fLo,mLo,gLo,Hb,Kae,hLo,pLo,Cj,_Lo,uLo,bLo,Ub,Zae,vLo,TLo,Mj,FLo,CLo,MLo,Jb,ene,ELo,yLo,Ej,wLo,ALo,LLo,Yb,one,BLo,kLo,yj,xLo,RLo,SLo,Kb,rne,PLo,$Lo,wj,ILo,jLo,NLo,Zb,tne,DLo,qLo,Aj,GLo,OLo,XLo,e5,ane,zLo,VLo,Lj,WLo,QLo,HLo,o5,nne,ULo,JLo,Bj,YLo,KLo,ZLo,r5,sne,e9o,o9o,kj,r9o,t9o,a9o,t5,lne,n9o,s9o,xj,l9o,i9o,d9o,a5,ine,c9o,f9o,Rj,m9o,g9o,h9o,n5,dne,p9o,_9o,Sj,u9o,b9o,v9o,s5,cne,T9o,F9o,Pj,C9o,M9o,E9o,l5,fne,y9o,w9o,$j,A9o,L9o,B9o,i5,mne,k9o,x9o,Ij,R9o,S9o,P9o,d5,gne,$9o,I9o,jj,j9o,N9o,D9o,c5,hne,q9o,G9o,Nj,O9o,X9o,z9o,f5,pne,V9o,W9o,Dj,Q9o,H9o,U9o,m5,_ne,J9o,Y9o,qj,K9o,Z9o,eBo,g5,une,oBo,rBo,Gj,tBo,aBo,nBo,h5,sBo,bne,lBo,iBo,vne,dBo,cBo,Tne,fBo,mBo,JE,ILe,_d,p5,Fne,YE,gBo,Cne,hBo,jLe,or,KE,pBo,ud,_Bo,Mne,uBo,bBo,Ene,vBo,TBo,FBo,ZE,CBo,yne,MBo,EBo,yBo,Hr,e3,wBo,wne,ABo,LBo,bd,BBo,Ane,kBo,xBo,Lne,RBo,SBo,PBo,Bne,$Bo,IBo,o3,jBo,qe,r3,NBo,kne,DBo,qBo,Ua,GBo,xne,OBo,XBo,Rne,zBo,VBo,Sne,WBo,QBo,HBo,Pne,_5,$ne,UBo,JBo,Oj,YBo,KBo,ZBo,u5,eko,Ine,oko,rko,jne,tko,ako,Nne,nko,sko,t3,NLe,vd,b5,Dne,a3,lko,qne,iko,DLe,rr,n3,dko,Td,cko,Gne,fko,mko,One,gko,hko,pko,s3,_ko,Xne,uko,bko,vko,Ur,l3,Tko,zne,Fko,Cko,Fd,Mko,Vne,Eko,yko,Wne,wko,Ako,Lko,Qne,Bko,kko,i3,xko,Ge,d3,Rko,Hne,Sko,Pko,Ja,$ko,Une,Iko,jko,Jne,Nko,Dko,Yne,qko,Gko,Oko,be,v5,Kne,Xko,zko,Xj,Vko,Wko,Qko,T5,Zne,Hko,Uko,zj,Jko,Yko,Kko,Rs,ese,Zko,exo,Vj,oxo,rxo,Wj,txo,axo,nxo,F5,ose,sxo,lxo,Qj,ixo,dxo,cxo,la,rse,fxo,mxo,Hj,gxo,hxo,Uj,pxo,_xo,Jj,uxo,bxo,vxo,C5,tse,Txo,Fxo,Yj,Cxo,Mxo,Exo,M5,ase,yxo,wxo,Kj,Axo,Lxo,Bxo,E5,nse,kxo,xxo,Zj,Rxo,Sxo,Pxo,y5,sse,$xo,Ixo,eN,jxo,Nxo,Dxo,w5,qxo,lse,Gxo,Oxo,ise,Xxo,zxo,dse,Vxo,Wxo,c3,qLe,Cd,A5,cse,f3,Qxo,fse,Hxo,GLe,tr,m3,Uxo,Md,Jxo,mse,Yxo,Kxo,gse,Zxo,eRo,oRo,g3,rRo,hse,tRo,aRo,nRo,Jr,h3,sRo,pse,lRo,iRo,Ed,dRo,_se,cRo,fRo,use,mRo,gRo,hRo,bse,pRo,_Ro,p3,uRo,Oe,_3,bRo,vse,vRo,TRo,Ya,FRo,Tse,CRo,MRo,Fse,ERo,yRo,Cse,wRo,ARo,LRo,Mse,L5,Ese,BRo,kRo,oN,xRo,RRo,SRo,B5,PRo,yse,$Ro,IRo,wse,jRo,NRo,Ase,DRo,qRo,u3,OLe,yd,k5,Lse,b3,GRo,Bse,ORo,XLe,ar,v3,XRo,wd,zRo,kse,VRo,WRo,xse,QRo,HRo,URo,T3,JRo,Rse,YRo,KRo,ZRo,Yr,F3,eSo,Sse,oSo,rSo,Ad,tSo,Pse,aSo,nSo,$se,sSo,lSo,iSo,Ise,dSo,cSo,C3,fSo,Xe,M3,mSo,jse,gSo,hSo,Ka,pSo,Nse,_So,uSo,Dse,bSo,vSo,qse,TSo,FSo,CSo,ao,x5,Gse,MSo,ESo,rN,ySo,wSo,ASo,R5,Ose,LSo,BSo,tN,kSo,xSo,RSo,S5,Xse,SSo,PSo,aN,$So,ISo,jSo,P5,zse,NSo,DSo,nN,qSo,GSo,OSo,$5,Vse,XSo,zSo,sN,VSo,WSo,QSo,I5,Wse,HSo,USo,lN,JSo,YSo,KSo,j5,Qse,ZSo,ePo,iN,oPo,rPo,tPo,N5,aPo,Hse,nPo,sPo,Use,lPo,iPo,Jse,dPo,cPo,E3,zLe,Ld,D5,Yse,y3,fPo,Kse,mPo,VLe,nr,w3,gPo,Bd,hPo,Zse,pPo,_Po,ele,uPo,bPo,vPo,A3,TPo,ole,FPo,CPo,MPo,Kr,L3,EPo,rle,yPo,wPo,kd,APo,tle,LPo,BPo,ale,kPo,xPo,RPo,nle,SPo,PPo,B3,$Po,ze,k3,IPo,sle,jPo,NPo,Za,DPo,lle,qPo,GPo,ile,OPo,XPo,dle,zPo,VPo,WPo,xd,q5,cle,QPo,HPo,dN,UPo,JPo,YPo,G5,fle,KPo,ZPo,cN,e$o,o$o,r$o,O5,mle,t$o,a$o,fN,n$o,s$o,l$o,X5,i$o,gle,d$o,c$o,hle,f$o,m$o,ple,g$o,h$o,x3,WLe,Rd,z5,_le,R3,p$o,ule,_$o,QLe,sr,S3,u$o,Sd,b$o,ble,v$o,T$o,vle,F$o,C$o,M$o,P3,E$o,Tle,y$o,w$o,A$o,Zr,$3,L$o,Fle,B$o,k$o,Pd,x$o,Cle,R$o,S$o,Mle,P$o,$$o,I$o,Ele,j$o,N$o,I3,D$o,Ve,j3,q$o,yle,G$o,O$o,en,X$o,wle,z$o,V$o,Ale,W$o,Q$o,Lle,H$o,U$o,J$o,no,V5,Ble,Y$o,K$o,mN,Z$o,eIo,oIo,W5,kle,rIo,tIo,gN,aIo,nIo,sIo,Q5,xle,lIo,iIo,hN,dIo,cIo,fIo,H5,Rle,mIo,gIo,pN,hIo,pIo,_Io,U5,Sle,uIo,bIo,_N,vIo,TIo,FIo,J5,Ple,CIo,MIo,uN,EIo,yIo,wIo,Y5,$le,AIo,LIo,bN,BIo,kIo,xIo,K5,RIo,Ile,SIo,PIo,jle,$Io,IIo,Nle,jIo,NIo,N3,HLe,$d,Z5,Dle,D3,DIo,qle,qIo,ULe,lr,q3,GIo,Id,OIo,Gle,XIo,zIo,Ole,VIo,WIo,QIo,G3,HIo,Xle,UIo,JIo,YIo,et,O3,KIo,zle,ZIo,ejo,jd,ojo,Vle,rjo,tjo,Wle,ajo,njo,sjo,Qle,ljo,ijo,X3,djo,We,z3,cjo,Hle,fjo,mjo,on,gjo,Ule,hjo,pjo,Jle,_jo,ujo,Yle,bjo,vjo,Tjo,V3,e2,Kle,Fjo,Cjo,vN,Mjo,Ejo,yjo,o2,Zle,wjo,Ajo,TN,Ljo,Bjo,kjo,r2,xjo,eie,Rjo,Sjo,oie,Pjo,$jo,rie,Ijo,jjo,W3,JLe,Nd,t2,tie,Q3,Njo,aie,Djo,YLe,ir,H3,qjo,Dd,Gjo,nie,Ojo,Xjo,sie,zjo,Vjo,Wjo,U3,Qjo,lie,Hjo,Ujo,Jjo,ot,J3,Yjo,iie,Kjo,Zjo,qd,eNo,die,oNo,rNo,cie,tNo,aNo,nNo,fie,sNo,lNo,Y3,iNo,Qe,K3,dNo,mie,cNo,fNo,rn,mNo,gie,gNo,hNo,hie,pNo,_No,pie,uNo,bNo,vNo,Gd,a2,_ie,TNo,FNo,FN,CNo,MNo,ENo,n2,uie,yNo,wNo,CN,ANo,LNo,BNo,s2,bie,kNo,xNo,MN,RNo,SNo,PNo,l2,$No,vie,INo,jNo,Tie,NNo,DNo,Fie,qNo,GNo,Z3,KLe,Od,i2,Cie,ey,ONo,Mie,XNo,ZLe,dr,oy,zNo,Xd,VNo,Eie,WNo,QNo,yie,HNo,UNo,JNo,ry,YNo,wie,KNo,ZNo,eDo,rt,ty,oDo,Aie,rDo,tDo,zd,aDo,Lie,nDo,sDo,Bie,lDo,iDo,dDo,kie,cDo,fDo,ay,mDo,He,ny,gDo,xie,hDo,pDo,tn,_Do,Rie,uDo,bDo,Sie,vDo,TDo,Pie,FDo,CDo,MDo,Vd,d2,$ie,EDo,yDo,EN,wDo,ADo,LDo,c2,Iie,BDo,kDo,yN,xDo,RDo,SDo,f2,jie,PDo,$Do,wN,IDo,jDo,NDo,m2,DDo,Nie,qDo,GDo,Die,ODo,XDo,qie,zDo,VDo,sy,e9e,Wd,g2,Gie,ly,WDo,Oie,QDo,o9e,cr,iy,HDo,Qd,UDo,Xie,JDo,YDo,zie,KDo,ZDo,eqo,dy,oqo,Vie,rqo,tqo,aqo,tt,cy,nqo,Wie,sqo,lqo,Hd,iqo,Qie,dqo,cqo,Hie,fqo,mqo,gqo,Uie,hqo,pqo,fy,_qo,Ue,my,uqo,Jie,bqo,vqo,an,Tqo,Yie,Fqo,Cqo,Kie,Mqo,Eqo,Zie,yqo,wqo,Aqo,ede,h2,ode,Lqo,Bqo,AN,kqo,xqo,Rqo,p2,Sqo,rde,Pqo,$qo,tde,Iqo,jqo,ade,Nqo,Dqo,gy,r9e,Ud,_2,nde,hy,qqo,sde,Gqo,t9e,fr,py,Oqo,Jd,Xqo,lde,zqo,Vqo,ide,Wqo,Qqo,Hqo,_y,Uqo,dde,Jqo,Yqo,Kqo,at,uy,Zqo,cde,eGo,oGo,Yd,rGo,fde,tGo,aGo,mde,nGo,sGo,lGo,gde,iGo,dGo,by,cGo,Je,vy,fGo,hde,mGo,gGo,nn,hGo,pde,pGo,_Go,_de,uGo,bGo,ude,vGo,TGo,FGo,bde,u2,vde,CGo,MGo,LN,EGo,yGo,wGo,b2,AGo,Tde,LGo,BGo,Fde,kGo,xGo,Cde,RGo,SGo,Ty,a9e,Kd,v2,Mde,Fy,PGo,Ede,$Go,n9e,mr,Cy,IGo,Zd,jGo,yde,NGo,DGo,wde,qGo,GGo,OGo,My,XGo,Ade,zGo,VGo,WGo,nt,Ey,QGo,Lde,HGo,UGo,ec,JGo,Bde,YGo,KGo,kde,ZGo,eOo,oOo,xde,rOo,tOo,yy,aOo,Ye,wy,nOo,Rde,sOo,lOo,sn,iOo,Sde,dOo,cOo,Pde,fOo,mOo,$de,gOo,hOo,pOo,Ay,T2,Ide,_Oo,uOo,BN,bOo,vOo,TOo,F2,jde,FOo,COo,kN,MOo,EOo,yOo,C2,wOo,Nde,AOo,LOo,Dde,BOo,kOo,qde,xOo,ROo,Ly,s9e,oc,M2,Gde,By,SOo,Ode,POo,l9e,gr,ky,$Oo,rc,IOo,Xde,jOo,NOo,zde,DOo,qOo,GOo,xy,OOo,Vde,XOo,zOo,VOo,st,Ry,WOo,Wde,QOo,HOo,tc,UOo,Qde,JOo,YOo,Hde,KOo,ZOo,eXo,Ude,oXo,rXo,Sy,tXo,go,Py,aXo,Jde,nXo,sXo,ln,lXo,Yde,iXo,dXo,Kde,cXo,fXo,Zde,mXo,gXo,hXo,B,E2,ece,pXo,_Xo,xN,uXo,bXo,vXo,y2,oce,TXo,FXo,RN,CXo,MXo,EXo,w2,rce,yXo,wXo,SN,AXo,LXo,BXo,A2,tce,kXo,xXo,PN,RXo,SXo,PXo,L2,ace,$Xo,IXo,$N,jXo,NXo,DXo,B2,nce,qXo,GXo,IN,OXo,XXo,zXo,k2,sce,VXo,WXo,jN,QXo,HXo,UXo,x2,lce,JXo,YXo,NN,KXo,ZXo,ezo,R2,ice,ozo,rzo,DN,tzo,azo,nzo,S2,dce,szo,lzo,qN,izo,dzo,czo,P2,cce,fzo,mzo,GN,gzo,hzo,pzo,$2,fce,_zo,uzo,ON,bzo,vzo,Tzo,I2,mce,Fzo,Czo,XN,Mzo,Ezo,yzo,j2,gce,wzo,Azo,zN,Lzo,Bzo,kzo,N2,hce,xzo,Rzo,VN,Szo,Pzo,$zo,Ss,pce,Izo,jzo,WN,Nzo,Dzo,QN,qzo,Gzo,Ozo,D2,_ce,Xzo,zzo,HN,Vzo,Wzo,Qzo,q2,uce,Hzo,Uzo,UN,Jzo,Yzo,Kzo,G2,bce,Zzo,eVo,JN,oVo,rVo,tVo,O2,vce,aVo,nVo,YN,sVo,lVo,iVo,X2,Tce,dVo,cVo,KN,fVo,mVo,gVo,z2,Fce,hVo,pVo,ZN,_Vo,uVo,bVo,V2,Cce,vVo,TVo,eD,FVo,CVo,MVo,W2,Mce,EVo,yVo,oD,wVo,AVo,LVo,Q2,Ece,BVo,kVo,rD,xVo,RVo,SVo,H2,yce,PVo,$Vo,tD,IVo,jVo,NVo,U2,wce,DVo,qVo,aD,GVo,OVo,XVo,J2,Ace,zVo,VVo,nD,WVo,QVo,HVo,Y2,Lce,UVo,JVo,sD,YVo,KVo,ZVo,K2,Bce,eWo,oWo,lD,rWo,tWo,aWo,Z2,kce,nWo,sWo,iD,lWo,iWo,dWo,ev,xce,cWo,fWo,dD,mWo,gWo,hWo,ov,Rce,pWo,_Wo,cD,uWo,bWo,vWo,rv,Sce,TWo,FWo,fD,CWo,MWo,EWo,tv,Pce,yWo,wWo,mD,AWo,LWo,BWo,av,$ce,kWo,xWo,gD,RWo,SWo,PWo,nv,Ice,$Wo,IWo,hD,jWo,NWo,DWo,sv,jce,qWo,GWo,pD,OWo,XWo,zWo,lv,Nce,VWo,WWo,_D,QWo,HWo,UWo,iv,Dce,JWo,YWo,uD,KWo,ZWo,eQo,dv,qce,oQo,rQo,bD,tQo,aQo,nQo,Gce,sQo,lQo,$y,i9e,ac,cv,Oce,Iy,iQo,Xce,dQo,d9e,hr,jy,cQo,nc,fQo,zce,mQo,gQo,Vce,hQo,pQo,_Qo,Ny,uQo,Wce,bQo,vQo,TQo,lt,Dy,FQo,Qce,CQo,MQo,sc,EQo,Hce,yQo,wQo,Uce,AQo,LQo,BQo,Jce,kQo,xQo,qy,RQo,ho,Gy,SQo,Yce,PQo,$Qo,dn,IQo,Kce,jQo,NQo,Zce,DQo,qQo,efe,GQo,OQo,XQo,H,fv,ofe,zQo,VQo,vD,WQo,QQo,HQo,mv,rfe,UQo,JQo,TD,YQo,KQo,ZQo,gv,tfe,eHo,oHo,FD,rHo,tHo,aHo,hv,afe,nHo,sHo,CD,lHo,iHo,dHo,pv,nfe,cHo,fHo,MD,mHo,gHo,hHo,_v,sfe,pHo,_Ho,ED,uHo,bHo,vHo,uv,lfe,THo,FHo,yD,CHo,MHo,EHo,bv,ife,yHo,wHo,wD,AHo,LHo,BHo,vv,dfe,kHo,xHo,AD,RHo,SHo,PHo,Tv,cfe,$Ho,IHo,LD,jHo,NHo,DHo,Fv,ffe,qHo,GHo,BD,OHo,XHo,zHo,Cv,mfe,VHo,WHo,kD,QHo,HHo,UHo,Mv,gfe,JHo,YHo,xD,KHo,ZHo,eUo,Ev,hfe,oUo,rUo,RD,tUo,aUo,nUo,yv,pfe,sUo,lUo,SD,iUo,dUo,cUo,wv,_fe,fUo,mUo,PD,gUo,hUo,pUo,Av,ufe,_Uo,uUo,$D,bUo,vUo,TUo,Lv,bfe,FUo,CUo,ID,MUo,EUo,yUo,Bv,vfe,wUo,AUo,jD,LUo,BUo,kUo,kv,Tfe,xUo,RUo,ND,SUo,PUo,$Uo,xv,Ffe,IUo,jUo,DD,NUo,DUo,qUo,Rv,Cfe,GUo,OUo,qD,XUo,zUo,VUo,Mfe,WUo,QUo,Oy,c9e,lc,Sv,Efe,Xy,HUo,yfe,UUo,f9e,pr,zy,JUo,ic,YUo,wfe,KUo,ZUo,Afe,eJo,oJo,rJo,Vy,tJo,Lfe,aJo,nJo,sJo,it,Wy,lJo,Bfe,iJo,dJo,dc,cJo,kfe,fJo,mJo,xfe,gJo,hJo,pJo,Rfe,_Jo,uJo,Qy,bJo,po,Hy,vJo,Sfe,TJo,FJo,cn,CJo,Pfe,MJo,EJo,$fe,yJo,wJo,Ife,AJo,LJo,BJo,he,Pv,jfe,kJo,xJo,GD,RJo,SJo,PJo,$v,Nfe,$Jo,IJo,OD,jJo,NJo,DJo,Iv,Dfe,qJo,GJo,XD,OJo,XJo,zJo,jv,qfe,VJo,WJo,zD,QJo,HJo,UJo,Nv,Gfe,JJo,YJo,VD,KJo,ZJo,eYo,Dv,Ofe,oYo,rYo,WD,tYo,aYo,nYo,qv,Xfe,sYo,lYo,QD,iYo,dYo,cYo,Gv,zfe,fYo,mYo,HD,gYo,hYo,pYo,Ov,Vfe,_Yo,uYo,UD,bYo,vYo,TYo,Xv,Wfe,FYo,CYo,JD,MYo,EYo,yYo,Qfe,wYo,AYo,Uy,m9e,cc,zv,Hfe,Jy,LYo,Ufe,BYo,g9e,_r,Yy,kYo,fc,xYo,Jfe,RYo,SYo,Yfe,PYo,$Yo,IYo,Ky,jYo,Kfe,NYo,DYo,qYo,dt,Zy,GYo,Zfe,OYo,XYo,mc,zYo,eme,VYo,WYo,ome,QYo,HYo,UYo,rme,JYo,YYo,ew,KYo,_o,ow,ZYo,tme,eKo,oKo,fn,rKo,ame,tKo,aKo,nme,nKo,sKo,sme,lKo,iKo,dKo,lme,Vv,ime,cKo,fKo,YD,mKo,gKo,hKo,dme,pKo,_Ko,rw,h9e,gc,Wv,cme,tw,uKo,fme,bKo,p9e,ur,aw,vKo,hc,TKo,mme,FKo,CKo,gme,MKo,EKo,yKo,nw,wKo,hme,AKo,LKo,BKo,ct,sw,kKo,pme,xKo,RKo,pc,SKo,_me,PKo,$Ko,ume,IKo,jKo,NKo,bme,DKo,qKo,lw,GKo,uo,iw,OKo,vme,XKo,zKo,mn,VKo,Tme,WKo,QKo,Fme,HKo,UKo,Cme,JKo,YKo,KKo,Y,Qv,Mme,ZKo,eZo,KD,oZo,rZo,tZo,Hv,Eme,aZo,nZo,ZD,sZo,lZo,iZo,Uv,yme,dZo,cZo,eq,fZo,mZo,gZo,Jv,wme,hZo,pZo,oq,_Zo,uZo,bZo,Yv,Ame,vZo,TZo,rq,FZo,CZo,MZo,Kv,Lme,EZo,yZo,tq,wZo,AZo,LZo,Zv,Bme,BZo,kZo,aq,xZo,RZo,SZo,eT,kme,PZo,$Zo,nq,IZo,jZo,NZo,oT,xme,DZo,qZo,sq,GZo,OZo,XZo,rT,Rme,zZo,VZo,lq,WZo,QZo,HZo,tT,Sme,UZo,JZo,iq,YZo,KZo,ZZo,aT,Pme,eer,oer,dq,rer,ter,aer,nT,$me,ner,ser,cq,ler,ier,der,sT,Ime,cer,fer,fq,mer,ger,her,lT,jme,per,_er,mq,uer,ber,ver,iT,Nme,Ter,Fer,gq,Cer,Mer,Eer,dT,Dme,yer,wer,hq,Aer,Ler,Ber,cT,qme,ker,xer,pq,Rer,Ser,Per,fT,Gme,$er,Ier,_q,jer,Ner,Der,mT,Ome,qer,Ger,uq,Oer,Xer,zer,Xme,Ver,Wer,dw,_9e,_c,gT,zme,cw,Qer,Vme,Her,u9e,br,fw,Uer,uc,Jer,Wme,Yer,Ker,Qme,Zer,eor,oor,mw,ror,Hme,tor,aor,nor,ft,gw,sor,Ume,lor,ior,bc,dor,Jme,cor,mor,Yme,gor,hor,por,Kme,_or,uor,hw,bor,bo,pw,vor,Zme,Tor,For,gn,Cor,ege,Mor,Eor,oge,yor,wor,rge,Aor,Lor,Bor,pe,hT,tge,kor,xor,bq,Ror,Sor,Por,pT,age,$or,Ior,vq,jor,Nor,Dor,_T,nge,qor,Gor,Tq,Oor,Xor,zor,uT,sge,Vor,Wor,Fq,Qor,Hor,Uor,bT,lge,Jor,Yor,Cq,Kor,Zor,err,vT,ige,orr,rrr,Mq,trr,arr,nrr,TT,dge,srr,lrr,Eq,irr,drr,crr,FT,cge,frr,mrr,yq,grr,hrr,prr,CT,fge,_rr,urr,wq,brr,vrr,Trr,MT,mge,Frr,Crr,Aq,Mrr,Err,yrr,gge,wrr,Arr,_w,b9e,vc,ET,hge,uw,Lrr,pge,Brr,v9e,vr,bw,krr,Tc,xrr,_ge,Rrr,Srr,uge,Prr,$rr,Irr,vw,jrr,bge,Nrr,Drr,qrr,mt,Tw,Grr,vge,Orr,Xrr,Fc,zrr,Tge,Vrr,Wrr,Fge,Qrr,Hrr,Urr,Cge,Jrr,Yrr,Fw,Krr,vo,Cw,Zrr,Mge,etr,otr,hn,rtr,Ege,ttr,atr,yge,ntr,str,wge,ltr,itr,dtr,X,yT,Age,ctr,ftr,Lq,mtr,gtr,htr,wT,Lge,ptr,_tr,Bq,utr,btr,vtr,AT,Bge,Ttr,Ftr,kq,Ctr,Mtr,Etr,LT,kge,ytr,wtr,xq,Atr,Ltr,Btr,BT,xge,ktr,xtr,Rq,Rtr,Str,Ptr,kT,Rge,$tr,Itr,Sq,jtr,Ntr,Dtr,xT,Sge,qtr,Gtr,Pq,Otr,Xtr,ztr,RT,Pge,Vtr,Wtr,$q,Qtr,Htr,Utr,ST,$ge,Jtr,Ytr,Iq,Ktr,Ztr,ear,PT,Ige,oar,rar,jq,tar,aar,nar,$T,jge,sar,lar,Nq,iar,dar,car,IT,Nge,far,mar,Dq,gar,har,par,jT,Dge,_ar,uar,qq,bar,Tar,Far,NT,qge,Car,Mar,Gq,Ear,yar,war,DT,Gge,Aar,Lar,Oq,Bar,kar,xar,qT,Oge,Rar,Sar,Xq,Par,$ar,Iar,GT,Xge,jar,Nar,zq,Dar,qar,Gar,OT,zge,Oar,Xar,Vq,zar,Var,War,XT,Vge,Qar,Har,Wq,Uar,Jar,Yar,zT,Wge,Kar,Zar,Qq,enr,onr,rnr,VT,Qge,tnr,anr,Hq,nnr,snr,lnr,WT,Hge,inr,dnr,Uq,cnr,fnr,mnr,QT,Uge,gnr,hnr,Jq,pnr,_nr,unr,HT,Jge,bnr,vnr,Yq,Tnr,Fnr,Cnr,UT,Yge,Mnr,Enr,Kq,ynr,wnr,Anr,Kge,Lnr,Bnr,Mw,T9e,Cc,JT,Zge,Ew,knr,ehe,xnr,F9e,Tr,yw,Rnr,Mc,Snr,ohe,Pnr,$nr,rhe,Inr,jnr,Nnr,ww,Dnr,the,qnr,Gnr,Onr,gt,Aw,Xnr,ahe,znr,Vnr,Ec,Wnr,nhe,Qnr,Hnr,she,Unr,Jnr,Ynr,lhe,Knr,Znr,Lw,esr,To,Bw,osr,ihe,rsr,tsr,pn,asr,dhe,nsr,ssr,che,lsr,isr,fhe,dsr,csr,fsr,te,YT,mhe,msr,gsr,Zq,hsr,psr,_sr,KT,ghe,usr,bsr,eG,vsr,Tsr,Fsr,ZT,hhe,Csr,Msr,oG,Esr,ysr,wsr,e7,phe,Asr,Lsr,rG,Bsr,ksr,xsr,o7,_he,Rsr,Ssr,tG,Psr,$sr,Isr,r7,uhe,jsr,Nsr,aG,Dsr,qsr,Gsr,t7,bhe,Osr,Xsr,nG,zsr,Vsr,Wsr,a7,vhe,Qsr,Hsr,sG,Usr,Jsr,Ysr,n7,The,Ksr,Zsr,lG,elr,olr,rlr,s7,Fhe,tlr,alr,iG,nlr,slr,llr,l7,Che,ilr,dlr,dG,clr,flr,mlr,i7,Mhe,glr,hlr,cG,plr,_lr,ulr,d7,Ehe,blr,vlr,fG,Tlr,Flr,Clr,c7,yhe,Mlr,Elr,mG,ylr,wlr,Alr,f7,whe,Llr,Blr,gG,klr,xlr,Rlr,m7,Ahe,Slr,Plr,hG,$lr,Ilr,jlr,g7,Lhe,Nlr,Dlr,pG,qlr,Glr,Olr,Bhe,Xlr,zlr,kw,C9e,yc,h7,khe,xw,Vlr,xhe,Wlr,M9e,Fr,Rw,Qlr,wc,Hlr,Rhe,Ulr,Jlr,She,Ylr,Klr,Zlr,Sw,eir,Phe,oir,rir,tir,ht,Pw,air,$he,nir,sir,Ac,lir,Ihe,iir,dir,jhe,cir,fir,mir,Nhe,gir,hir,$w,pir,Fo,Iw,_ir,Dhe,uir,bir,_n,vir,qhe,Tir,Fir,Ghe,Cir,Mir,Ohe,Eir,yir,wir,Xhe,p7,zhe,Air,Lir,_G,Bir,kir,xir,Vhe,Rir,Sir,jw,E9e,Lc,_7,Whe,Nw,Pir,Qhe,$ir,y9e,Cr,Dw,Iir,Bc,jir,Hhe,Nir,Dir,Uhe,qir,Gir,Oir,qw,Xir,Jhe,zir,Vir,Wir,pt,Gw,Qir,Yhe,Hir,Uir,kc,Jir,Khe,Yir,Kir,Zhe,Zir,edr,odr,epe,rdr,tdr,Ow,adr,Co,Xw,ndr,ope,sdr,ldr,un,idr,rpe,ddr,cdr,tpe,fdr,mdr,ape,gdr,hdr,pdr,K,u7,npe,_dr,udr,uG,bdr,vdr,Tdr,b7,spe,Fdr,Cdr,bG,Mdr,Edr,ydr,v7,lpe,wdr,Adr,vG,Ldr,Bdr,kdr,T7,ipe,xdr,Rdr,TG,Sdr,Pdr,$dr,F7,dpe,Idr,jdr,FG,Ndr,Ddr,qdr,C7,cpe,Gdr,Odr,CG,Xdr,zdr,Vdr,M7,fpe,Wdr,Qdr,MG,Hdr,Udr,Jdr,E7,mpe,Ydr,Kdr,EG,Zdr,ecr,ocr,y7,gpe,rcr,tcr,yG,acr,ncr,scr,w7,hpe,lcr,icr,wG,dcr,ccr,fcr,A7,ppe,mcr,gcr,AG,hcr,pcr,_cr,L7,_pe,ucr,bcr,LG,vcr,Tcr,Fcr,B7,upe,Ccr,Mcr,BG,Ecr,ycr,wcr,k7,bpe,Acr,Lcr,kG,Bcr,kcr,xcr,x7,vpe,Rcr,Scr,xG,Pcr,$cr,Icr,R7,Tpe,jcr,Ncr,RG,Dcr,qcr,Gcr,S7,Fpe,Ocr,Xcr,SG,zcr,Vcr,Wcr,P7,Cpe,Qcr,Hcr,PG,Ucr,Jcr,Ycr,$7,Mpe,Kcr,Zcr,$G,efr,ofr,rfr,I7,Epe,tfr,afr,IG,nfr,sfr,lfr,ype,ifr,dfr,zw,w9e,xc,j7,wpe,Vw,cfr,Ape,ffr,A9e,Mr,Ww,mfr,Rc,gfr,Lpe,hfr,pfr,Bpe,_fr,ufr,bfr,Qw,vfr,kpe,Tfr,Ffr,Cfr,_t,Hw,Mfr,xpe,Efr,yfr,Sc,wfr,Rpe,Afr,Lfr,Spe,Bfr,kfr,xfr,Ppe,Rfr,Sfr,Uw,Pfr,Mo,Jw,$fr,$pe,Ifr,jfr,bn,Nfr,Ipe,Dfr,qfr,jpe,Gfr,Ofr,Npe,Xfr,zfr,Vfr,Z,N7,Dpe,Wfr,Qfr,jG,Hfr,Ufr,Jfr,D7,qpe,Yfr,Kfr,NG,Zfr,emr,omr,q7,Gpe,rmr,tmr,DG,amr,nmr,smr,G7,Ope,lmr,imr,qG,dmr,cmr,fmr,O7,Xpe,mmr,gmr,GG,hmr,pmr,_mr,X7,zpe,umr,bmr,OG,vmr,Tmr,Fmr,z7,Vpe,Cmr,Mmr,XG,Emr,ymr,wmr,V7,Wpe,Amr,Lmr,zG,Bmr,kmr,xmr,W7,Qpe,Rmr,Smr,VG,Pmr,$mr,Imr,Q7,Hpe,jmr,Nmr,WG,Dmr,qmr,Gmr,H7,Upe,Omr,Xmr,QG,zmr,Vmr,Wmr,U7,Jpe,Qmr,Hmr,HG,Umr,Jmr,Ymr,J7,Ype,Kmr,Zmr,UG,egr,ogr,rgr,Y7,Kpe,tgr,agr,JG,ngr,sgr,lgr,K7,Zpe,igr,dgr,YG,cgr,fgr,mgr,Z7,e_e,ggr,hgr,KG,pgr,_gr,ugr,e8,o_e,bgr,vgr,ZG,Tgr,Fgr,Cgr,o8,r_e,Mgr,Egr,eO,ygr,wgr,Agr,r8,t_e,Lgr,Bgr,oO,kgr,xgr,Rgr,a_e,Sgr,Pgr,Yw,L9e,Pc,t8,n_e,Kw,$gr,s_e,Igr,B9e,Er,Zw,jgr,$c,Ngr,l_e,Dgr,qgr,i_e,Ggr,Ogr,Xgr,eA,zgr,d_e,Vgr,Wgr,Qgr,ut,oA,Hgr,c_e,Ugr,Jgr,Ic,Ygr,f_e,Kgr,Zgr,m_e,ehr,ohr,rhr,g_e,thr,ahr,rA,nhr,Eo,tA,shr,h_e,lhr,ihr,vn,dhr,p_e,chr,fhr,__e,mhr,ghr,u_e,hhr,phr,_hr,b_e,a8,v_e,uhr,bhr,rO,vhr,Thr,Fhr,T_e,Chr,Mhr,aA,k9e,jc,n8,F_e,nA,Ehr,C_e,yhr,x9e,yr,sA,whr,Nc,Ahr,M_e,Lhr,Bhr,E_e,khr,xhr,Rhr,lA,Shr,y_e,Phr,$hr,Ihr,bt,iA,jhr,w_e,Nhr,Dhr,Dc,qhr,A_e,Ghr,Ohr,L_e,Xhr,zhr,Vhr,B_e,Whr,Qhr,dA,Hhr,yo,cA,Uhr,k_e,Jhr,Yhr,Tn,Khr,x_e,Zhr,epr,R_e,opr,rpr,S_e,tpr,apr,npr,P_e,s8,$_e,spr,lpr,tO,ipr,dpr,cpr,I_e,fpr,mpr,fA,R9e,qc,l8,j_e,mA,gpr,N_e,hpr,S9e,wr,gA,ppr,Gc,_pr,D_e,upr,bpr,q_e,vpr,Tpr,Fpr,hA,Cpr,G_e,Mpr,Epr,ypr,vt,pA,wpr,O_e,Apr,Lpr,Oc,Bpr,X_e,kpr,xpr,z_e,Rpr,Spr,Ppr,V_e,$pr,Ipr,_A,jpr,wo,uA,Npr,W_e,Dpr,qpr,Fn,Gpr,Q_e,Opr,Xpr,H_e,zpr,Vpr,U_e,Wpr,Qpr,Hpr,V,i8,J_e,Upr,Jpr,aO,Ypr,Kpr,Zpr,d8,Y_e,e_r,o_r,nO,r_r,t_r,a_r,c8,K_e,n_r,s_r,sO,l_r,i_r,d_r,f8,Z_e,c_r,f_r,lO,m_r,g_r,h_r,m8,eue,p_r,__r,iO,u_r,b_r,v_r,g8,oue,T_r,F_r,dO,C_r,M_r,E_r,h8,rue,y_r,w_r,cO,A_r,L_r,B_r,p8,tue,k_r,x_r,fO,R_r,S_r,P_r,_8,aue,$_r,I_r,mO,j_r,N_r,D_r,u8,nue,q_r,G_r,gO,O_r,X_r,z_r,b8,sue,V_r,W_r,hO,Q_r,H_r,U_r,v8,lue,J_r,Y_r,pO,K_r,Z_r,eur,T8,iue,our,rur,_O,tur,aur,nur,F8,due,sur,lur,uO,iur,dur,cur,C8,cue,fur,mur,bO,gur,hur,pur,M8,fue,_ur,uur,vO,bur,vur,Tur,E8,mue,Fur,Cur,TO,Mur,Eur,yur,y8,gue,wur,Aur,FO,Lur,Bur,kur,w8,hue,xur,Rur,CO,Sur,Pur,$ur,A8,pue,Iur,jur,MO,Nur,Dur,qur,L8,_ue,Gur,Our,EO,Xur,zur,Vur,B8,uue,Wur,Qur,yO,Hur,Uur,Jur,k8,bue,Yur,Kur,wO,Zur,e1r,o1r,x8,vue,r1r,t1r,AO,a1r,n1r,s1r,Tue,l1r,i1r,bA,P9e,Xc,R8,Fue,vA,d1r,Cue,c1r,$9e,Ar,TA,f1r,zc,m1r,Mue,g1r,h1r,Eue,p1r,_1r,u1r,FA,b1r,yue,v1r,T1r,F1r,Tt,CA,C1r,wue,M1r,E1r,Vc,y1r,Aue,w1r,A1r,Lue,L1r,B1r,k1r,Bue,x1r,R1r,MA,S1r,Ao,EA,P1r,kue,$1r,I1r,Cn,j1r,xue,N1r,D1r,Rue,q1r,G1r,Sue,O1r,X1r,z1r,Mn,S8,Pue,V1r,W1r,LO,Q1r,H1r,U1r,P8,$ue,J1r,Y1r,BO,K1r,Z1r,e4r,$8,Iue,o4r,r4r,kO,t4r,a4r,n4r,I8,jue,s4r,l4r,xO,i4r,d4r,c4r,Nue,f4r,m4r,yA,I9e,Wc,j8,Due,wA,g4r,que,h4r,j9e,Lr,AA,p4r,Qc,_4r,Gue,u4r,b4r,Oue,v4r,T4r,F4r,LA,C4r,Xue,M4r,E4r,y4r,Ft,BA,w4r,zue,A4r,L4r,Hc,B4r,Vue,k4r,x4r,Wue,R4r,S4r,P4r,Que,$4r,I4r,kA,j4r,Lo,xA,N4r,Hue,D4r,q4r,En,G4r,Uue,O4r,X4r,Jue,z4r,V4r,Yue,W4r,Q4r,H4r,fe,N8,Kue,U4r,J4r,RO,Y4r,K4r,Z4r,D8,Zue,ebr,obr,SO,rbr,tbr,abr,q8,e1e,nbr,sbr,PO,lbr,ibr,dbr,G8,o1e,cbr,fbr,$O,mbr,gbr,hbr,O8,r1e,pbr,_br,IO,ubr,bbr,vbr,X8,t1e,Tbr,Fbr,jO,Cbr,Mbr,Ebr,z8,a1e,ybr,wbr,NO,Abr,Lbr,Bbr,V8,n1e,kbr,xbr,DO,Rbr,Sbr,Pbr,W8,s1e,$br,Ibr,qO,jbr,Nbr,Dbr,Q8,l1e,qbr,Gbr,GO,Obr,Xbr,zbr,H8,i1e,Vbr,Wbr,OO,Qbr,Hbr,Ubr,d1e,Jbr,Ybr,RA,N9e,Uc,U8,c1e,SA,Kbr,f1e,Zbr,D9e,Br,PA,e5r,Jc,o5r,m1e,r5r,t5r,g1e,a5r,n5r,s5r,$A,l5r,h1e,i5r,d5r,c5r,Ct,IA,f5r,p1e,m5r,g5r,Yc,h5r,_1e,p5r,_5r,u1e,u5r,b5r,v5r,b1e,T5r,F5r,jA,C5r,Bo,NA,M5r,v1e,E5r,y5r,yn,w5r,T1e,A5r,L5r,F1e,B5r,k5r,C1e,x5r,R5r,S5r,ve,J8,M1e,P5r,$5r,XO,I5r,j5r,N5r,Y8,E1e,D5r,q5r,zO,G5r,O5r,X5r,K8,y1e,z5r,V5r,VO,W5r,Q5r,H5r,Z8,w1e,U5r,J5r,WO,Y5r,K5r,Z5r,eF,A1e,e2r,o2r,QO,r2r,t2r,a2r,oF,L1e,n2r,s2r,HO,l2r,i2r,d2r,rF,B1e,c2r,f2r,UO,m2r,g2r,h2r,tF,k1e,p2r,_2r,JO,u2r,b2r,v2r,aF,x1e,T2r,F2r,YO,C2r,M2r,E2r,R1e,y2r,w2r,DA,q9e,Kc,nF,S1e,qA,A2r,P1e,L2r,G9e,kr,GA,B2r,Zc,k2r,$1e,x2r,R2r,I1e,S2r,P2r,$2r,OA,I2r,j1e,j2r,N2r,D2r,Mt,XA,q2r,N1e,G2r,O2r,ef,X2r,D1e,z2r,V2r,q1e,W2r,Q2r,H2r,G1e,U2r,J2r,zA,Y2r,ko,VA,K2r,O1e,Z2r,evr,wn,ovr,X1e,rvr,tvr,z1e,avr,nvr,V1e,svr,lvr,ivr,Te,sF,W1e,dvr,cvr,KO,fvr,mvr,gvr,lF,Q1e,hvr,pvr,ZO,_vr,uvr,bvr,iF,H1e,vvr,Tvr,eX,Fvr,Cvr,Mvr,dF,U1e,Evr,yvr,oX,wvr,Avr,Lvr,cF,J1e,Bvr,kvr,rX,xvr,Rvr,Svr,fF,Y1e,Pvr,$vr,tX,Ivr,jvr,Nvr,mF,K1e,Dvr,qvr,aX,Gvr,Ovr,Xvr,gF,Z1e,zvr,Vvr,nX,Wvr,Qvr,Hvr,hF,e4e,Uvr,Jvr,sX,Yvr,Kvr,Zvr,o4e,eTr,oTr,WA,O9e,of,pF,r4e,QA,rTr,t4e,tTr,X9e,xr,HA,aTr,rf,nTr,a4e,sTr,lTr,n4e,iTr,dTr,cTr,UA,fTr,s4e,mTr,gTr,hTr,Et,JA,pTr,l4e,_Tr,uTr,tf,bTr,i4e,vTr,TTr,d4e,FTr,CTr,MTr,c4e,ETr,yTr,YA,wTr,xo,KA,ATr,f4e,LTr,BTr,An,kTr,m4e,xTr,RTr,g4e,STr,PTr,h4e,$Tr,ITr,jTr,Fe,_F,p4e,NTr,DTr,lX,qTr,GTr,OTr,uF,_4e,XTr,zTr,iX,VTr,WTr,QTr,bF,u4e,HTr,UTr,dX,JTr,YTr,KTr,vF,b4e,ZTr,e7r,cX,o7r,r7r,t7r,TF,v4e,a7r,n7r,fX,s7r,l7r,i7r,FF,T4e,d7r,c7r,mX,f7r,m7r,g7r,CF,F4e,h7r,p7r,gX,_7r,u7r,b7r,MF,C4e,v7r,T7r,hX,F7r,C7r,M7r,EF,M4e,E7r,y7r,pX,w7r,A7r,L7r,E4e,B7r,k7r,ZA,z9e,af,yF,y4e,e6,x7r,w4e,R7r,V9e,Rr,o6,S7r,nf,P7r,A4e,$7r,I7r,L4e,j7r,N7r,D7r,r6,q7r,B4e,G7r,O7r,X7r,yt,t6,z7r,k4e,V7r,W7r,sf,Q7r,x4e,H7r,U7r,R4e,J7r,Y7r,K7r,S4e,Z7r,e8r,a6,o8r,Ro,n6,r8r,P4e,t8r,a8r,Ln,n8r,$4e,s8r,l8r,I4e,i8r,d8r,j4e,c8r,f8r,m8r,Ce,wF,N4e,g8r,h8r,_X,p8r,_8r,u8r,AF,D4e,b8r,v8r,uX,T8r,F8r,C8r,LF,q4e,M8r,E8r,bX,y8r,w8r,A8r,BF,G4e,L8r,B8r,vX,k8r,x8r,R8r,kF,O4e,S8r,P8r,TX,$8r,I8r,j8r,xF,X4e,N8r,D8r,FX,q8r,G8r,O8r,RF,z4e,X8r,z8r,CX,V8r,W8r,Q8r,SF,V4e,H8r,U8r,MX,J8r,Y8r,K8r,PF,W4e,Z8r,eFr,EX,oFr,rFr,tFr,Q4e,aFr,nFr,s6,W9e,lf,$F,H4e,l6,sFr,U4e,lFr,Q9e,Sr,i6,iFr,df,dFr,J4e,cFr,fFr,Y4e,mFr,gFr,hFr,d6,pFr,K4e,_Fr,uFr,bFr,wt,c6,vFr,Z4e,TFr,FFr,cf,CFr,ebe,MFr,EFr,obe,yFr,wFr,AFr,rbe,LFr,BFr,f6,kFr,So,m6,xFr,tbe,RFr,SFr,Bn,PFr,abe,$Fr,IFr,nbe,jFr,NFr,sbe,DFr,qFr,GFr,so,IF,lbe,OFr,XFr,yX,zFr,VFr,WFr,jF,ibe,QFr,HFr,wX,UFr,JFr,YFr,NF,dbe,KFr,ZFr,AX,eCr,oCr,rCr,DF,cbe,tCr,aCr,LX,nCr,sCr,lCr,qF,fbe,iCr,dCr,BX,cCr,fCr,mCr,GF,mbe,gCr,hCr,kX,pCr,_Cr,uCr,OF,gbe,bCr,vCr,xX,TCr,FCr,CCr,hbe,MCr,ECr,g6,H9e,ff,XF,pbe,h6,yCr,_be,wCr,U9e,Pr,p6,ACr,mf,LCr,ube,BCr,kCr,bbe,xCr,RCr,SCr,_6,PCr,vbe,$Cr,ICr,jCr,At,u6,NCr,Tbe,DCr,qCr,gf,GCr,Fbe,OCr,XCr,Cbe,zCr,VCr,WCr,Mbe,QCr,HCr,b6,UCr,Po,v6,JCr,Ebe,YCr,KCr,kn,ZCr,ybe,eMr,oMr,wbe,rMr,tMr,Abe,aMr,nMr,sMr,lo,zF,Lbe,lMr,iMr,RX,dMr,cMr,fMr,VF,Bbe,mMr,gMr,SX,hMr,pMr,_Mr,WF,kbe,uMr,bMr,PX,vMr,TMr,FMr,QF,xbe,CMr,MMr,$X,EMr,yMr,wMr,HF,Rbe,AMr,LMr,IX,BMr,kMr,xMr,UF,Sbe,RMr,SMr,jX,PMr,$Mr,IMr,JF,Pbe,jMr,NMr,NX,DMr,qMr,GMr,$be,OMr,XMr,T6,J9e,hf,YF,Ibe,F6,zMr,jbe,VMr,Y9e,$r,C6,WMr,pf,QMr,Nbe,HMr,UMr,Dbe,JMr,YMr,KMr,M6,ZMr,qbe,eEr,oEr,rEr,Lt,E6,tEr,Gbe,aEr,nEr,_f,sEr,Obe,lEr,iEr,Xbe,dEr,cEr,fEr,zbe,mEr,gEr,y6,hEr,$o,w6,pEr,Vbe,_Er,uEr,xn,bEr,Wbe,vEr,TEr,Qbe,FEr,CEr,Hbe,MEr,EEr,yEr,Ube,KF,Jbe,wEr,AEr,DX,LEr,BEr,kEr,Ybe,xEr,REr,A6,K9e,uf,ZF,Kbe,L6,SEr,Zbe,PEr,Z9e,Ir,B6,$Er,bf,IEr,e5e,jEr,NEr,o5e,DEr,qEr,GEr,k6,OEr,r5e,XEr,zEr,VEr,Bt,x6,WEr,t5e,QEr,HEr,vf,UEr,a5e,JEr,YEr,n5e,KEr,ZEr,e3r,s5e,o3r,r3r,R6,t3r,Io,S6,a3r,l5e,n3r,s3r,Rn,l3r,i5e,i3r,d3r,d5e,c3r,f3r,c5e,m3r,g3r,h3r,P6,eC,f5e,p3r,_3r,qX,u3r,b3r,v3r,oC,m5e,T3r,F3r,GX,C3r,M3r,E3r,g5e,y3r,w3r,$6,eBe,Tf,rC,h5e,I6,A3r,p5e,L3r,oBe,jr,j6,B3r,Ff,k3r,_5e,x3r,R3r,u5e,S3r,P3r,$3r,N6,I3r,b5e,j3r,N3r,D3r,kt,D6,q3r,v5e,G3r,O3r,Cf,X3r,T5e,z3r,V3r,F5e,W3r,Q3r,H3r,C5e,U3r,J3r,q6,Y3r,jo,G6,K3r,M5e,Z3r,eyr,Sn,oyr,E5e,ryr,tyr,y5e,ayr,nyr,w5e,syr,lyr,iyr,A5e,tC,L5e,dyr,cyr,OX,fyr,myr,gyr,B5e,hyr,pyr,O6,rBe;return ce=new z({}),$a=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased"),',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),nM=new z({}),sM=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Bf=new _yr({props:{warning:"&lcub;true}",$$slots:{default:[F_t]},$$scope:{ctx:yi}}}),lM=new z({}),iM=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/configuration_auto.py#L515"}}),fM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/configuration_auto.py#L538",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),mM=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),gM=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/configuration_auto.py#L660",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),hM=new z({}),pM=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/tokenization_auto.py#L351"}}),bM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15748/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),vM=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),TM=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),FM=new z({}),CM=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/feature_extraction_auto.py#L169"}}),yM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/feature_extraction_auto.py#L183",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15748/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),ih=new _yr({props:{$$slots:{default:[C_t]},$$scope:{ctx:yi}}}),wM=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),AM=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/feature_extraction_auto.py#L310",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),LM=new z({}),BM=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/processing_auto.py#L71"}}),RM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),vh=new _yr({props:{$$slots:{default:[M_t]},$$scope:{ctx:yi}}}),SM=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),PM=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),$M=new z({}),IM=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L672"}}),NM=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),DM=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),qM=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GM=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OM=new z({}),XM=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L679"}}),VM=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),WM=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),QM=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HM=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UM=new z({}),JM=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L694"}}),KM=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ZM=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),eE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rE=new z({}),tE=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L701"}}),nE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),sE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),lE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dE=new z({}),cE=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L708"}}),mE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),gE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),hE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_E=new z({}),uE=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L717"}}),vE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),TE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),FE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),CE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ME=new z({}),EE=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L751"}}),wE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),AE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),LE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),BE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kE=new z({}),xE=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L758"}}),SE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),PE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),$E=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),IE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jE=new z({}),NE=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L744"}}),qE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),GE=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),OE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),XE=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zE=new z({}),VE=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L726"}}),QE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),HE=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),UE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),JE=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YE=new z({}),KE=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L733"}}),e3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),o3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),r3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a3=new z({}),n3=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L767"}}),l3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15748/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15748/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15748/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),i3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),d3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f3=new z({}),m3=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L797"}}),h3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),p3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),_3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),u3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b3=new z({}),v3=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L804"}}),F3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),C3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),M3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),E3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y3=new z({}),w3=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L827"}}),L3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),B3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),k3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R3=new z({}),S3=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L811"}}),$3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),I3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),j3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D3=new z({}),q3=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L818"}}),O3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),X3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),z3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),W3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q3=new z({}),H3=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L836"}}),J3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Y3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),K3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Z3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ey=new z({}),oy=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L843"}}),ty=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),ay=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),ny=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ly=new z({}),iy=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L790"}}),cy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),fy=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),my=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gy=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hy=new z({}),py=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L774"}}),uy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),by=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),vy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Fy=new z({}),Cy=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_auto.py#L781"}}),Ey=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),yy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),wy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),By=new z({}),ky=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_tf_auto.py#L371"}}),Ry=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Sy=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),Py=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$y=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iy=new z({}),jy=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_tf_auto.py#L378"}}),Dy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),qy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),Gy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Oy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xy=new z({}),zy=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_tf_auto.py#L393"}}),Wy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Qy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),Hy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Uy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jy=new z({}),Yy=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_tf_auto.py#L400"}}),Zy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),ew=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),ow=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tw=new z({}),aw=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_tf_auto.py#L414"}}),sw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),lw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),iw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cw=new z({}),fw=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),gw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),hw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),pw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_w=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uw=new z({}),bw=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),Tw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Fw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),Cw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Mw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ew=new z({}),yw=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),Aw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Lw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Bw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xw=new z({}),Rw=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),Pw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),$w=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),Iw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Nw=new z({}),Dw=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),Gw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Ow=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),Xw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vw=new z({}),Ww=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_tf_auto.py#L439"}}),Hw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Uw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),Jw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Yw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Kw=new z({}),Zw=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_tf_auto.py#L407"}}),oA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),rA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),tA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nA=new z({}),sA=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),iA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),dA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),cA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mA=new z({}),gA=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_flax_auto.py#L220"}}),pA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),_A=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),uA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vA=new z({}),TA=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_flax_auto.py#L234"}}),CA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),MA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),EA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wA=new z({}),AA=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_flax_auto.py#L227"}}),BA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
</ul>`,name:"config"}]}}),kA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),xA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),RA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SA=new z({}),PA=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),IA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),jA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),NA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),DA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qA=new z({}),GA=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),XA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),zA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),VA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QA=new z({}),HA=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),JA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),YA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),KA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ZA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e6=new z({}),o6=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_flax_auto.py#L266"}}),t6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),a6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),n6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l6=new z({}),i6=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_flax_auto.py#L273"}}),c6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),f6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),m6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h6=new z({}),p6=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),u6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),b6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),v6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),T6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F6=new z({}),C6=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),E6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),y6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),w6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),A6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L6=new z({}),B6=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),x6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15748/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),R6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),S6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I6=new z({}),j6=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/modeling_flax_auto.py#L307"}}),D6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15748/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15748/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),q6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),G6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15748/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15748/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15748/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Ae=l(),ie=a("h1"),me=a("a"),to=a("span"),f(ce.$$.fragment),ue=l(),Do=a("span"),wi=o("Auto Classes"),Ef=l(),sa=a("p"),Ai=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Li=a("code"),oM=o("from_pretrained()"),yf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ye=l(),io=a("p"),Bi=o("Instantiating one of "),Pn=a("a"),rM=o("AutoConfig"),$n=o(", "),In=a("a"),tM=o("AutoModel"),ki=o(`, and
`),jn=a("a"),aM=o("AutoTokenizer"),xi=o(" will directly create a class of the relevant architecture. For instance"),wf=l(),f($a.$$.fragment),co=l(),ge=a("p"),D0=o("will create a model that is an instance of "),Ri=a("a"),q0=o("BertModel"),G0=o("."),qo=l(),Ia=a("p"),O0=o("There is one class of "),Af=a("code"),X0=o("AutoModel"),mxe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),tLe=l(),Si=a("h2"),Lf=a("a"),$V=a("span"),f(nM.$$.fragment),gxe=l(),IV=a("span"),hxe=o("Extending the Auto Classes"),aLe=l(),Nn=a("p"),pxe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),jV=a("code"),_xe=o("NewModel"),uxe=o(", make sure you have a "),NV=a("code"),bxe=o("NewModelConfig"),vxe=o(` then you can add those to the auto
classes like this:`),nLe=l(),f(sM.$$.fragment),sLe=l(),z0=a("p"),Txe=o("You will then be able to use the auto classes like you would usually do!"),lLe=l(),f(Bf.$$.fragment),iLe=l(),Pi=a("h2"),kf=a("a"),DV=a("span"),f(lM.$$.fragment),Fxe=l(),qV=a("span"),Cxe=o("AutoConfig"),dLe=l(),Go=a("div"),f(iM.$$.fragment),Mxe=l(),dM=a("p"),Exe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),V0=a("a"),yxe=o("from_pretrained()"),wxe=o(" class method."),Axe=l(),cM=a("p"),Lxe=o("This class cannot be instantiated directly using "),GV=a("code"),Bxe=o("__init__()"),kxe=o(" (throws an error)."),xxe=l(),fo=a("div"),f(fM.$$.fragment),Rxe=l(),OV=a("p"),Sxe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Pxe=l(),$i=a("p"),$xe=o("The configuration class to instantiate is selected based on the "),XV=a("code"),Ixe=o("model_type"),jxe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zV=a("code"),Nxe=o("pretrained_model_name_or_path"),Dxe=o(":"),qxe=l(),v=a("ul"),xf=a("li"),VV=a("strong"),Gxe=o("albert"),Oxe=o(" \u2014 "),W0=a("a"),Xxe=o("AlbertConfig"),zxe=o(" (ALBERT model)"),Vxe=l(),Rf=a("li"),WV=a("strong"),Wxe=o("bart"),Qxe=o(" \u2014 "),Q0=a("a"),Hxe=o("BartConfig"),Uxe=o(" (BART model)"),Jxe=l(),Sf=a("li"),QV=a("strong"),Yxe=o("beit"),Kxe=o(" \u2014 "),H0=a("a"),Zxe=o("BeitConfig"),eRe=o(" (BEiT model)"),oRe=l(),Pf=a("li"),HV=a("strong"),rRe=o("bert"),tRe=o(" \u2014 "),U0=a("a"),aRe=o("BertConfig"),nRe=o(" (BERT model)"),sRe=l(),$f=a("li"),UV=a("strong"),lRe=o("bert-generation"),iRe=o(" \u2014 "),J0=a("a"),dRe=o("BertGenerationConfig"),cRe=o(" (Bert Generation model)"),fRe=l(),If=a("li"),JV=a("strong"),mRe=o("big_bird"),gRe=o(" \u2014 "),Y0=a("a"),hRe=o("BigBirdConfig"),pRe=o(" (BigBird model)"),_Re=l(),jf=a("li"),YV=a("strong"),uRe=o("bigbird_pegasus"),bRe=o(" \u2014 "),K0=a("a"),vRe=o("BigBirdPegasusConfig"),TRe=o(" (BigBirdPegasus model)"),FRe=l(),Nf=a("li"),KV=a("strong"),CRe=o("blenderbot"),MRe=o(" \u2014 "),Z0=a("a"),ERe=o("BlenderbotConfig"),yRe=o(" (Blenderbot model)"),wRe=l(),Df=a("li"),ZV=a("strong"),ARe=o("blenderbot-small"),LRe=o(" \u2014 "),eL=a("a"),BRe=o("BlenderbotSmallConfig"),kRe=o(" (BlenderbotSmall model)"),xRe=l(),qf=a("li"),eW=a("strong"),RRe=o("camembert"),SRe=o(" \u2014 "),oL=a("a"),PRe=o("CamembertConfig"),$Re=o(" (CamemBERT model)"),IRe=l(),Gf=a("li"),oW=a("strong"),jRe=o("canine"),NRe=o(" \u2014 "),rL=a("a"),DRe=o("CanineConfig"),qRe=o(" (Canine model)"),GRe=l(),Of=a("li"),rW=a("strong"),ORe=o("clip"),XRe=o(" \u2014 "),tL=a("a"),zRe=o("CLIPConfig"),VRe=o(" (CLIP model)"),WRe=l(),Xf=a("li"),tW=a("strong"),QRe=o("convbert"),HRe=o(" \u2014 "),aL=a("a"),URe=o("ConvBertConfig"),JRe=o(" (ConvBERT model)"),YRe=l(),zf=a("li"),aW=a("strong"),KRe=o("convnext"),ZRe=o(" \u2014 "),nL=a("a"),eSe=o("ConvNextConfig"),oSe=o(" (ConvNext model)"),rSe=l(),Vf=a("li"),nW=a("strong"),tSe=o("ctrl"),aSe=o(" \u2014 "),sL=a("a"),nSe=o("CTRLConfig"),sSe=o(" (CTRL model)"),lSe=l(),Wf=a("li"),sW=a("strong"),iSe=o("deberta"),dSe=o(" \u2014 "),lL=a("a"),cSe=o("DebertaConfig"),fSe=o(" (DeBERTa model)"),mSe=l(),Qf=a("li"),lW=a("strong"),gSe=o("deberta-v2"),hSe=o(" \u2014 "),iL=a("a"),pSe=o("DebertaV2Config"),_Se=o(" (DeBERTa-v2 model)"),uSe=l(),Hf=a("li"),iW=a("strong"),bSe=o("deit"),vSe=o(" \u2014 "),dL=a("a"),TSe=o("DeiTConfig"),FSe=o(" (DeiT model)"),CSe=l(),Uf=a("li"),dW=a("strong"),MSe=o("detr"),ESe=o(" \u2014 "),cL=a("a"),ySe=o("DetrConfig"),wSe=o(" (DETR model)"),ASe=l(),Jf=a("li"),cW=a("strong"),LSe=o("distilbert"),BSe=o(" \u2014 "),fL=a("a"),kSe=o("DistilBertConfig"),xSe=o(" (DistilBERT model)"),RSe=l(),Yf=a("li"),fW=a("strong"),SSe=o("dpr"),PSe=o(" \u2014 "),mL=a("a"),$Se=o("DPRConfig"),ISe=o(" (DPR model)"),jSe=l(),Kf=a("li"),mW=a("strong"),NSe=o("electra"),DSe=o(" \u2014 "),gL=a("a"),qSe=o("ElectraConfig"),GSe=o(" (ELECTRA model)"),OSe=l(),Zf=a("li"),gW=a("strong"),XSe=o("encoder-decoder"),zSe=o(" \u2014 "),hL=a("a"),VSe=o("EncoderDecoderConfig"),WSe=o(" (Encoder decoder model)"),QSe=l(),em=a("li"),hW=a("strong"),HSe=o("flaubert"),USe=o(" \u2014 "),pL=a("a"),JSe=o("FlaubertConfig"),YSe=o(" (FlauBERT model)"),KSe=l(),om=a("li"),pW=a("strong"),ZSe=o("fnet"),ePe=o(" \u2014 "),_L=a("a"),oPe=o("FNetConfig"),rPe=o(" (FNet model)"),tPe=l(),rm=a("li"),_W=a("strong"),aPe=o("fsmt"),nPe=o(" \u2014 "),uL=a("a"),sPe=o("FSMTConfig"),lPe=o(" (FairSeq Machine-Translation model)"),iPe=l(),tm=a("li"),uW=a("strong"),dPe=o("funnel"),cPe=o(" \u2014 "),bL=a("a"),fPe=o("FunnelConfig"),mPe=o(" (Funnel Transformer model)"),gPe=l(),am=a("li"),bW=a("strong"),hPe=o("gpt2"),pPe=o(" \u2014 "),vL=a("a"),_Pe=o("GPT2Config"),uPe=o(" (OpenAI GPT-2 model)"),bPe=l(),nm=a("li"),vW=a("strong"),vPe=o("gpt_neo"),TPe=o(" \u2014 "),TL=a("a"),FPe=o("GPTNeoConfig"),CPe=o(" (GPT Neo model)"),MPe=l(),sm=a("li"),TW=a("strong"),EPe=o("gptj"),yPe=o(" \u2014 "),FL=a("a"),wPe=o("GPTJConfig"),APe=o(" (GPT-J model)"),LPe=l(),lm=a("li"),FW=a("strong"),BPe=o("hubert"),kPe=o(" \u2014 "),CL=a("a"),xPe=o("HubertConfig"),RPe=o(" (Hubert model)"),SPe=l(),im=a("li"),CW=a("strong"),PPe=o("ibert"),$Pe=o(" \u2014 "),ML=a("a"),IPe=o("IBertConfig"),jPe=o(" (I-BERT model)"),NPe=l(),dm=a("li"),MW=a("strong"),DPe=o("imagegpt"),qPe=o(" \u2014 "),EL=a("a"),GPe=o("ImageGPTConfig"),OPe=o(" (ImageGPT model)"),XPe=l(),cm=a("li"),EW=a("strong"),zPe=o("layoutlm"),VPe=o(" \u2014 "),yL=a("a"),WPe=o("LayoutLMConfig"),QPe=o(" (LayoutLM model)"),HPe=l(),fm=a("li"),yW=a("strong"),UPe=o("layoutlmv2"),JPe=o(" \u2014 "),wL=a("a"),YPe=o("LayoutLMv2Config"),KPe=o(" (LayoutLMv2 model)"),ZPe=l(),mm=a("li"),wW=a("strong"),e$e=o("led"),o$e=o(" \u2014 "),AL=a("a"),r$e=o("LEDConfig"),t$e=o(" (LED model)"),a$e=l(),gm=a("li"),AW=a("strong"),n$e=o("longformer"),s$e=o(" \u2014 "),LL=a("a"),l$e=o("LongformerConfig"),i$e=o(" (Longformer model)"),d$e=l(),hm=a("li"),LW=a("strong"),c$e=o("luke"),f$e=o(" \u2014 "),BL=a("a"),m$e=o("LukeConfig"),g$e=o(" (LUKE model)"),h$e=l(),pm=a("li"),BW=a("strong"),p$e=o("lxmert"),_$e=o(" \u2014 "),kL=a("a"),u$e=o("LxmertConfig"),b$e=o(" (LXMERT model)"),v$e=l(),_m=a("li"),kW=a("strong"),T$e=o("m2m_100"),F$e=o(" \u2014 "),xL=a("a"),C$e=o("M2M100Config"),M$e=o(" (M2M100 model)"),E$e=l(),um=a("li"),xW=a("strong"),y$e=o("marian"),w$e=o(" \u2014 "),RL=a("a"),A$e=o("MarianConfig"),L$e=o(" (Marian model)"),B$e=l(),bm=a("li"),RW=a("strong"),k$e=o("mbart"),x$e=o(" \u2014 "),SL=a("a"),R$e=o("MBartConfig"),S$e=o(" (mBART model)"),P$e=l(),vm=a("li"),SW=a("strong"),$$e=o("megatron-bert"),I$e=o(" \u2014 "),PL=a("a"),j$e=o("MegatronBertConfig"),N$e=o(" (MegatronBert model)"),D$e=l(),Tm=a("li"),PW=a("strong"),q$e=o("mobilebert"),G$e=o(" \u2014 "),$L=a("a"),O$e=o("MobileBertConfig"),X$e=o(" (MobileBERT model)"),z$e=l(),Fm=a("li"),$W=a("strong"),V$e=o("mpnet"),W$e=o(" \u2014 "),IL=a("a"),Q$e=o("MPNetConfig"),H$e=o(" (MPNet model)"),U$e=l(),Cm=a("li"),IW=a("strong"),J$e=o("mt5"),Y$e=o(" \u2014 "),jL=a("a"),K$e=o("MT5Config"),Z$e=o(" (mT5 model)"),eIe=l(),Mm=a("li"),jW=a("strong"),oIe=o("nystromformer"),rIe=o(" \u2014 "),NL=a("a"),tIe=o("NystromformerConfig"),aIe=o(" (Nystromformer model)"),nIe=l(),Em=a("li"),NW=a("strong"),sIe=o("openai-gpt"),lIe=o(" \u2014 "),DL=a("a"),iIe=o("OpenAIGPTConfig"),dIe=o(" (OpenAI GPT model)"),cIe=l(),ym=a("li"),DW=a("strong"),fIe=o("pegasus"),mIe=o(" \u2014 "),qL=a("a"),gIe=o("PegasusConfig"),hIe=o(" (Pegasus model)"),pIe=l(),wm=a("li"),qW=a("strong"),_Ie=o("perceiver"),uIe=o(" \u2014 "),GL=a("a"),bIe=o("PerceiverConfig"),vIe=o(" (Perceiver model)"),TIe=l(),Am=a("li"),GW=a("strong"),FIe=o("plbart"),CIe=o(" \u2014 "),OL=a("a"),MIe=o("PLBartConfig"),EIe=o(" (PLBart model)"),yIe=l(),Lm=a("li"),OW=a("strong"),wIe=o("poolformer"),AIe=o(" \u2014 "),XL=a("a"),LIe=o("PoolFormerConfig"),BIe=o(" (PoolFormer model)"),kIe=l(),Bm=a("li"),XW=a("strong"),xIe=o("prophetnet"),RIe=o(" \u2014 "),zL=a("a"),SIe=o("ProphetNetConfig"),PIe=o(" (ProphetNet model)"),$Ie=l(),km=a("li"),zW=a("strong"),IIe=o("qdqbert"),jIe=o(" \u2014 "),VL=a("a"),NIe=o("QDQBertConfig"),DIe=o(" (QDQBert model)"),qIe=l(),xm=a("li"),VW=a("strong"),GIe=o("rag"),OIe=o(" \u2014 "),WL=a("a"),XIe=o("RagConfig"),zIe=o(" (RAG model)"),VIe=l(),Rm=a("li"),WW=a("strong"),WIe=o("realm"),QIe=o(" \u2014 "),QL=a("a"),HIe=o("RealmConfig"),UIe=o(" (Realm model)"),JIe=l(),Sm=a("li"),QW=a("strong"),YIe=o("reformer"),KIe=o(" \u2014 "),HL=a("a"),ZIe=o("ReformerConfig"),eje=o(" (Reformer model)"),oje=l(),Pm=a("li"),HW=a("strong"),rje=o("rembert"),tje=o(" \u2014 "),UL=a("a"),aje=o("RemBertConfig"),nje=o(" (RemBERT model)"),sje=l(),$m=a("li"),UW=a("strong"),lje=o("retribert"),ije=o(" \u2014 "),JL=a("a"),dje=o("RetriBertConfig"),cje=o(" (RetriBERT model)"),fje=l(),Im=a("li"),JW=a("strong"),mje=o("roberta"),gje=o(" \u2014 "),YL=a("a"),hje=o("RobertaConfig"),pje=o(" (RoBERTa model)"),_je=l(),jm=a("li"),YW=a("strong"),uje=o("roformer"),bje=o(" \u2014 "),KL=a("a"),vje=o("RoFormerConfig"),Tje=o(" (RoFormer model)"),Fje=l(),Nm=a("li"),KW=a("strong"),Cje=o("segformer"),Mje=o(" \u2014 "),ZL=a("a"),Eje=o("SegformerConfig"),yje=o(" (SegFormer model)"),wje=l(),Dm=a("li"),ZW=a("strong"),Aje=o("sew"),Lje=o(" \u2014 "),e9=a("a"),Bje=o("SEWConfig"),kje=o(" (SEW model)"),xje=l(),qm=a("li"),eQ=a("strong"),Rje=o("sew-d"),Sje=o(" \u2014 "),o9=a("a"),Pje=o("SEWDConfig"),$je=o(" (SEW-D model)"),Ije=l(),Gm=a("li"),oQ=a("strong"),jje=o("speech-encoder-decoder"),Nje=o(" \u2014 "),r9=a("a"),Dje=o("SpeechEncoderDecoderConfig"),qje=o(" (Speech Encoder decoder model)"),Gje=l(),Om=a("li"),rQ=a("strong"),Oje=o("speech_to_text"),Xje=o(" \u2014 "),t9=a("a"),zje=o("Speech2TextConfig"),Vje=o(" (Speech2Text model)"),Wje=l(),Xm=a("li"),tQ=a("strong"),Qje=o("speech_to_text_2"),Hje=o(" \u2014 "),a9=a("a"),Uje=o("Speech2Text2Config"),Jje=o(" (Speech2Text2 model)"),Yje=l(),zm=a("li"),aQ=a("strong"),Kje=o("splinter"),Zje=o(" \u2014 "),n9=a("a"),eNe=o("SplinterConfig"),oNe=o(" (Splinter model)"),rNe=l(),Vm=a("li"),nQ=a("strong"),tNe=o("squeezebert"),aNe=o(" \u2014 "),s9=a("a"),nNe=o("SqueezeBertConfig"),sNe=o(" (SqueezeBERT model)"),lNe=l(),Wm=a("li"),sQ=a("strong"),iNe=o("swin"),dNe=o(" \u2014 "),l9=a("a"),cNe=o("SwinConfig"),fNe=o(" (Swin model)"),mNe=l(),Qm=a("li"),lQ=a("strong"),gNe=o("t5"),hNe=o(" \u2014 "),i9=a("a"),pNe=o("T5Config"),_Ne=o(" (T5 model)"),uNe=l(),Hm=a("li"),iQ=a("strong"),bNe=o("tapas"),vNe=o(" \u2014 "),d9=a("a"),TNe=o("TapasConfig"),FNe=o(" (TAPAS model)"),CNe=l(),Um=a("li"),dQ=a("strong"),MNe=o("transfo-xl"),ENe=o(" \u2014 "),c9=a("a"),yNe=o("TransfoXLConfig"),wNe=o(" (Transformer-XL model)"),ANe=l(),Jm=a("li"),cQ=a("strong"),LNe=o("trocr"),BNe=o(" \u2014 "),f9=a("a"),kNe=o("TrOCRConfig"),xNe=o(" (TrOCR model)"),RNe=l(),Ym=a("li"),fQ=a("strong"),SNe=o("unispeech"),PNe=o(" \u2014 "),m9=a("a"),$Ne=o("UniSpeechConfig"),INe=o(" (UniSpeech model)"),jNe=l(),Km=a("li"),mQ=a("strong"),NNe=o("unispeech-sat"),DNe=o(" \u2014 "),g9=a("a"),qNe=o("UniSpeechSatConfig"),GNe=o(" (UniSpeechSat model)"),ONe=l(),Zm=a("li"),gQ=a("strong"),XNe=o("vilt"),zNe=o(" \u2014 "),h9=a("a"),VNe=o("ViltConfig"),WNe=o(" (ViLT model)"),QNe=l(),eg=a("li"),hQ=a("strong"),HNe=o("vision-encoder-decoder"),UNe=o(" \u2014 "),p9=a("a"),JNe=o("VisionEncoderDecoderConfig"),YNe=o(" (Vision Encoder decoder model)"),KNe=l(),og=a("li"),pQ=a("strong"),ZNe=o("vision-text-dual-encoder"),eDe=o(" \u2014 "),_9=a("a"),oDe=o("VisionTextDualEncoderConfig"),rDe=o(" (VisionTextDualEncoder model)"),tDe=l(),rg=a("li"),_Q=a("strong"),aDe=o("visual_bert"),nDe=o(" \u2014 "),u9=a("a"),sDe=o("VisualBertConfig"),lDe=o(" (VisualBert model)"),iDe=l(),tg=a("li"),uQ=a("strong"),dDe=o("vit"),cDe=o(" \u2014 "),b9=a("a"),fDe=o("ViTConfig"),mDe=o(" (ViT model)"),gDe=l(),ag=a("li"),bQ=a("strong"),hDe=o("vit_mae"),pDe=o(" \u2014 "),v9=a("a"),_De=o("ViTMAEConfig"),uDe=o(" (ViTMAE model)"),bDe=l(),ng=a("li"),vQ=a("strong"),vDe=o("wav2vec2"),TDe=o(" \u2014 "),T9=a("a"),FDe=o("Wav2Vec2Config"),CDe=o(" (Wav2Vec2 model)"),MDe=l(),sg=a("li"),TQ=a("strong"),EDe=o("wavlm"),yDe=o(" \u2014 "),F9=a("a"),wDe=o("WavLMConfig"),ADe=o(" (WavLM model)"),LDe=l(),lg=a("li"),FQ=a("strong"),BDe=o("xglm"),kDe=o(" \u2014 "),C9=a("a"),xDe=o("XGLMConfig"),RDe=o(" (XGLM model)"),SDe=l(),ig=a("li"),CQ=a("strong"),PDe=o("xlm"),$De=o(" \u2014 "),M9=a("a"),IDe=o("XLMConfig"),jDe=o(" (XLM model)"),NDe=l(),dg=a("li"),MQ=a("strong"),DDe=o("xlm-prophetnet"),qDe=o(" \u2014 "),E9=a("a"),GDe=o("XLMProphetNetConfig"),ODe=o(" (XLMProphetNet model)"),XDe=l(),cg=a("li"),EQ=a("strong"),zDe=o("xlm-roberta"),VDe=o(" \u2014 "),y9=a("a"),WDe=o("XLMRobertaConfig"),QDe=o(" (XLM-RoBERTa model)"),HDe=l(),fg=a("li"),yQ=a("strong"),UDe=o("xlm-roberta-xl"),JDe=o(" \u2014 "),w9=a("a"),YDe=o("XLMRobertaXLConfig"),KDe=o(" (XLM-RoBERTa-XL model)"),ZDe=l(),mg=a("li"),wQ=a("strong"),eqe=o("xlnet"),oqe=o(" \u2014 "),A9=a("a"),rqe=o("XLNetConfig"),tqe=o(" (XLNet model)"),aqe=l(),gg=a("li"),AQ=a("strong"),nqe=o("yoso"),sqe=o(" \u2014 "),L9=a("a"),lqe=o("YosoConfig"),iqe=o(" (YOSO model)"),dqe=l(),LQ=a("p"),cqe=o("Examples:"),fqe=l(),f(mM.$$.fragment),mqe=l(),hg=a("div"),f(gM.$$.fragment),gqe=l(),BQ=a("p"),hqe=o("Register a new configuration for this class."),cLe=l(),Ii=a("h2"),pg=a("a"),kQ=a("span"),f(hM.$$.fragment),pqe=l(),xQ=a("span"),_qe=o("AutoTokenizer"),fLe=l(),Oo=a("div"),f(pM.$$.fragment),uqe=l(),_M=a("p"),bqe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),B9=a("a"),vqe=o("AutoTokenizer.from_pretrained()"),Tqe=o(" class method."),Fqe=l(),uM=a("p"),Cqe=o("This class cannot be instantiated directly using "),RQ=a("code"),Mqe=o("__init__()"),Eqe=o(" (throws an error)."),yqe=l(),mo=a("div"),f(bM.$$.fragment),wqe=l(),SQ=a("p"),Aqe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Lqe=l(),ja=a("p"),Bqe=o("The tokenizer class to instantiate is selected based on the "),PQ=a("code"),kqe=o("model_type"),xqe=o(` property of the config object (either
passed as an argument or loaded from `),$Q=a("code"),Rqe=o("pretrained_model_name_or_path"),Sqe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IQ=a("code"),Pqe=o("pretrained_model_name_or_path"),$qe=o(":"),Iqe=l(),M=a("ul"),Dn=a("li"),jQ=a("strong"),jqe=o("albert"),Nqe=o(" \u2014 "),k9=a("a"),Dqe=o("AlbertTokenizer"),qqe=o(" or "),x9=a("a"),Gqe=o("AlbertTokenizerFast"),Oqe=o(" (ALBERT model)"),Xqe=l(),qn=a("li"),NQ=a("strong"),zqe=o("bart"),Vqe=o(" \u2014 "),R9=a("a"),Wqe=o("BartTokenizer"),Qqe=o(" or "),S9=a("a"),Hqe=o("BartTokenizerFast"),Uqe=o(" (BART model)"),Jqe=l(),Gn=a("li"),DQ=a("strong"),Yqe=o("barthez"),Kqe=o(" \u2014 "),P9=a("a"),Zqe=o("BarthezTokenizer"),eGe=o(" or "),$9=a("a"),oGe=o("BarthezTokenizerFast"),rGe=o(" (BARThez model)"),tGe=l(),_g=a("li"),qQ=a("strong"),aGe=o("bartpho"),nGe=o(" \u2014 "),I9=a("a"),sGe=o("BartphoTokenizer"),lGe=o(" (BARTpho model)"),iGe=l(),On=a("li"),GQ=a("strong"),dGe=o("bert"),cGe=o(" \u2014 "),j9=a("a"),fGe=o("BertTokenizer"),mGe=o(" or "),N9=a("a"),gGe=o("BertTokenizerFast"),hGe=o(" (BERT model)"),pGe=l(),ug=a("li"),OQ=a("strong"),_Ge=o("bert-generation"),uGe=o(" \u2014 "),D9=a("a"),bGe=o("BertGenerationTokenizer"),vGe=o(" (Bert Generation model)"),TGe=l(),bg=a("li"),XQ=a("strong"),FGe=o("bert-japanese"),CGe=o(" \u2014 "),q9=a("a"),MGe=o("BertJapaneseTokenizer"),EGe=o(" (BertJapanese model)"),yGe=l(),vg=a("li"),zQ=a("strong"),wGe=o("bertweet"),AGe=o(" \u2014 "),G9=a("a"),LGe=o("BertweetTokenizer"),BGe=o(" (Bertweet model)"),kGe=l(),Xn=a("li"),VQ=a("strong"),xGe=o("big_bird"),RGe=o(" \u2014 "),O9=a("a"),SGe=o("BigBirdTokenizer"),PGe=o(" or "),X9=a("a"),$Ge=o("BigBirdTokenizerFast"),IGe=o(" (BigBird model)"),jGe=l(),zn=a("li"),WQ=a("strong"),NGe=o("bigbird_pegasus"),DGe=o(" \u2014 "),z9=a("a"),qGe=o("PegasusTokenizer"),GGe=o(" or "),V9=a("a"),OGe=o("PegasusTokenizerFast"),XGe=o(" (BigBirdPegasus model)"),zGe=l(),Vn=a("li"),QQ=a("strong"),VGe=o("blenderbot"),WGe=o(" \u2014 "),W9=a("a"),QGe=o("BlenderbotTokenizer"),HGe=o(" or "),Q9=a("a"),UGe=o("BlenderbotTokenizerFast"),JGe=o(" (Blenderbot model)"),YGe=l(),Tg=a("li"),HQ=a("strong"),KGe=o("blenderbot-small"),ZGe=o(" \u2014 "),H9=a("a"),eOe=o("BlenderbotSmallTokenizer"),oOe=o(" (BlenderbotSmall model)"),rOe=l(),Fg=a("li"),UQ=a("strong"),tOe=o("byt5"),aOe=o(" \u2014 "),U9=a("a"),nOe=o("ByT5Tokenizer"),sOe=o(" (ByT5 model)"),lOe=l(),Wn=a("li"),JQ=a("strong"),iOe=o("camembert"),dOe=o(" \u2014 "),J9=a("a"),cOe=o("CamembertTokenizer"),fOe=o(" or "),Y9=a("a"),mOe=o("CamembertTokenizerFast"),gOe=o(" (CamemBERT model)"),hOe=l(),Cg=a("li"),YQ=a("strong"),pOe=o("canine"),_Oe=o(" \u2014 "),K9=a("a"),uOe=o("CanineTokenizer"),bOe=o(" (Canine model)"),vOe=l(),Qn=a("li"),KQ=a("strong"),TOe=o("clip"),FOe=o(" \u2014 "),Z9=a("a"),COe=o("CLIPTokenizer"),MOe=o(" or "),eB=a("a"),EOe=o("CLIPTokenizerFast"),yOe=o(" (CLIP model)"),wOe=l(),Hn=a("li"),ZQ=a("strong"),AOe=o("convbert"),LOe=o(" \u2014 "),oB=a("a"),BOe=o("ConvBertTokenizer"),kOe=o(" or "),rB=a("a"),xOe=o("ConvBertTokenizerFast"),ROe=o(" (ConvBERT model)"),SOe=l(),Un=a("li"),eH=a("strong"),POe=o("cpm"),$Oe=o(" \u2014 "),tB=a("a"),IOe=o("CpmTokenizer"),jOe=o(" or "),oH=a("code"),NOe=o("CpmTokenizerFast"),DOe=o(" (CPM model)"),qOe=l(),Mg=a("li"),rH=a("strong"),GOe=o("ctrl"),OOe=o(" \u2014 "),aB=a("a"),XOe=o("CTRLTokenizer"),zOe=o(" (CTRL model)"),VOe=l(),Jn=a("li"),tH=a("strong"),WOe=o("deberta"),QOe=o(" \u2014 "),nB=a("a"),HOe=o("DebertaTokenizer"),UOe=o(" or "),sB=a("a"),JOe=o("DebertaTokenizerFast"),YOe=o(" (DeBERTa model)"),KOe=l(),Eg=a("li"),aH=a("strong"),ZOe=o("deberta-v2"),eXe=o(" \u2014 "),lB=a("a"),oXe=o("DebertaV2Tokenizer"),rXe=o(" (DeBERTa-v2 model)"),tXe=l(),Yn=a("li"),nH=a("strong"),aXe=o("distilbert"),nXe=o(" \u2014 "),iB=a("a"),sXe=o("DistilBertTokenizer"),lXe=o(" or "),dB=a("a"),iXe=o("DistilBertTokenizerFast"),dXe=o(" (DistilBERT model)"),cXe=l(),Kn=a("li"),sH=a("strong"),fXe=o("dpr"),mXe=o(" \u2014 "),cB=a("a"),gXe=o("DPRQuestionEncoderTokenizer"),hXe=o(" or "),fB=a("a"),pXe=o("DPRQuestionEncoderTokenizerFast"),_Xe=o(" (DPR model)"),uXe=l(),Zn=a("li"),lH=a("strong"),bXe=o("electra"),vXe=o(" \u2014 "),mB=a("a"),TXe=o("ElectraTokenizer"),FXe=o(" or "),gB=a("a"),CXe=o("ElectraTokenizerFast"),MXe=o(" (ELECTRA model)"),EXe=l(),yg=a("li"),iH=a("strong"),yXe=o("flaubert"),wXe=o(" \u2014 "),hB=a("a"),AXe=o("FlaubertTokenizer"),LXe=o(" (FlauBERT model)"),BXe=l(),es=a("li"),dH=a("strong"),kXe=o("fnet"),xXe=o(" \u2014 "),pB=a("a"),RXe=o("FNetTokenizer"),SXe=o(" or "),_B=a("a"),PXe=o("FNetTokenizerFast"),$Xe=o(" (FNet model)"),IXe=l(),wg=a("li"),cH=a("strong"),jXe=o("fsmt"),NXe=o(" \u2014 "),uB=a("a"),DXe=o("FSMTTokenizer"),qXe=o(" (FairSeq Machine-Translation model)"),GXe=l(),os=a("li"),fH=a("strong"),OXe=o("funnel"),XXe=o(" \u2014 "),bB=a("a"),zXe=o("FunnelTokenizer"),VXe=o(" or "),vB=a("a"),WXe=o("FunnelTokenizerFast"),QXe=o(" (Funnel Transformer model)"),HXe=l(),rs=a("li"),mH=a("strong"),UXe=o("gpt2"),JXe=o(" \u2014 "),TB=a("a"),YXe=o("GPT2Tokenizer"),KXe=o(" or "),FB=a("a"),ZXe=o("GPT2TokenizerFast"),eze=o(" (OpenAI GPT-2 model)"),oze=l(),ts=a("li"),gH=a("strong"),rze=o("gpt_neo"),tze=o(" \u2014 "),CB=a("a"),aze=o("GPT2Tokenizer"),nze=o(" or "),MB=a("a"),sze=o("GPT2TokenizerFast"),lze=o(" (GPT Neo model)"),ize=l(),as=a("li"),hH=a("strong"),dze=o("herbert"),cze=o(" \u2014 "),EB=a("a"),fze=o("HerbertTokenizer"),mze=o(" or "),yB=a("a"),gze=o("HerbertTokenizerFast"),hze=o(" (HerBERT model)"),pze=l(),Ag=a("li"),pH=a("strong"),_ze=o("hubert"),uze=o(" \u2014 "),wB=a("a"),bze=o("Wav2Vec2CTCTokenizer"),vze=o(" (Hubert model)"),Tze=l(),ns=a("li"),_H=a("strong"),Fze=o("ibert"),Cze=o(" \u2014 "),AB=a("a"),Mze=o("RobertaTokenizer"),Eze=o(" or "),LB=a("a"),yze=o("RobertaTokenizerFast"),wze=o(" (I-BERT model)"),Aze=l(),ss=a("li"),uH=a("strong"),Lze=o("layoutlm"),Bze=o(" \u2014 "),BB=a("a"),kze=o("LayoutLMTokenizer"),xze=o(" or "),kB=a("a"),Rze=o("LayoutLMTokenizerFast"),Sze=o(" (LayoutLM model)"),Pze=l(),ls=a("li"),bH=a("strong"),$ze=o("layoutlmv2"),Ize=o(" \u2014 "),xB=a("a"),jze=o("LayoutLMv2Tokenizer"),Nze=o(" or "),RB=a("a"),Dze=o("LayoutLMv2TokenizerFast"),qze=o(" (LayoutLMv2 model)"),Gze=l(),is=a("li"),vH=a("strong"),Oze=o("layoutxlm"),Xze=o(" \u2014 "),SB=a("a"),zze=o("LayoutXLMTokenizer"),Vze=o(" or "),PB=a("a"),Wze=o("LayoutXLMTokenizerFast"),Qze=o(" (LayoutXLM model)"),Hze=l(),ds=a("li"),TH=a("strong"),Uze=o("led"),Jze=o(" \u2014 "),$B=a("a"),Yze=o("LEDTokenizer"),Kze=o(" or "),IB=a("a"),Zze=o("LEDTokenizerFast"),eVe=o(" (LED model)"),oVe=l(),cs=a("li"),FH=a("strong"),rVe=o("longformer"),tVe=o(" \u2014 "),jB=a("a"),aVe=o("LongformerTokenizer"),nVe=o(" or "),NB=a("a"),sVe=o("LongformerTokenizerFast"),lVe=o(" (Longformer model)"),iVe=l(),Lg=a("li"),CH=a("strong"),dVe=o("luke"),cVe=o(" \u2014 "),DB=a("a"),fVe=o("LukeTokenizer"),mVe=o(" (LUKE model)"),gVe=l(),fs=a("li"),MH=a("strong"),hVe=o("lxmert"),pVe=o(" \u2014 "),qB=a("a"),_Ve=o("LxmertTokenizer"),uVe=o(" or "),GB=a("a"),bVe=o("LxmertTokenizerFast"),vVe=o(" (LXMERT model)"),TVe=l(),Bg=a("li"),EH=a("strong"),FVe=o("m2m_100"),CVe=o(" \u2014 "),OB=a("a"),MVe=o("M2M100Tokenizer"),EVe=o(" (M2M100 model)"),yVe=l(),kg=a("li"),yH=a("strong"),wVe=o("marian"),AVe=o(" \u2014 "),XB=a("a"),LVe=o("MarianTokenizer"),BVe=o(" (Marian model)"),kVe=l(),ms=a("li"),wH=a("strong"),xVe=o("mbart"),RVe=o(" \u2014 "),zB=a("a"),SVe=o("MBartTokenizer"),PVe=o(" or "),VB=a("a"),$Ve=o("MBartTokenizerFast"),IVe=o(" (mBART model)"),jVe=l(),gs=a("li"),AH=a("strong"),NVe=o("mbart50"),DVe=o(" \u2014 "),WB=a("a"),qVe=o("MBart50Tokenizer"),GVe=o(" or "),QB=a("a"),OVe=o("MBart50TokenizerFast"),XVe=o(" (mBART-50 model)"),zVe=l(),xg=a("li"),LH=a("strong"),VVe=o("mluke"),WVe=o(" \u2014 "),HB=a("a"),QVe=o("MLukeTokenizer"),HVe=o(" (mLUKE model)"),UVe=l(),hs=a("li"),BH=a("strong"),JVe=o("mobilebert"),YVe=o(" \u2014 "),UB=a("a"),KVe=o("MobileBertTokenizer"),ZVe=o(" or "),JB=a("a"),eWe=o("MobileBertTokenizerFast"),oWe=o(" (MobileBERT model)"),rWe=l(),ps=a("li"),kH=a("strong"),tWe=o("mpnet"),aWe=o(" \u2014 "),YB=a("a"),nWe=o("MPNetTokenizer"),sWe=o(" or "),KB=a("a"),lWe=o("MPNetTokenizerFast"),iWe=o(" (MPNet model)"),dWe=l(),_s=a("li"),xH=a("strong"),cWe=o("mt5"),fWe=o(" \u2014 "),ZB=a("a"),mWe=o("MT5Tokenizer"),gWe=o(" or "),ek=a("a"),hWe=o("MT5TokenizerFast"),pWe=o(" (mT5 model)"),_We=l(),us=a("li"),RH=a("strong"),uWe=o("openai-gpt"),bWe=o(" \u2014 "),ok=a("a"),vWe=o("OpenAIGPTTokenizer"),TWe=o(" or "),rk=a("a"),FWe=o("OpenAIGPTTokenizerFast"),CWe=o(" (OpenAI GPT model)"),MWe=l(),bs=a("li"),SH=a("strong"),EWe=o("pegasus"),yWe=o(" \u2014 "),tk=a("a"),wWe=o("PegasusTokenizer"),AWe=o(" or "),ak=a("a"),LWe=o("PegasusTokenizerFast"),BWe=o(" (Pegasus model)"),kWe=l(),Rg=a("li"),PH=a("strong"),xWe=o("perceiver"),RWe=o(" \u2014 "),nk=a("a"),SWe=o("PerceiverTokenizer"),PWe=o(" (Perceiver model)"),$We=l(),Sg=a("li"),$H=a("strong"),IWe=o("phobert"),jWe=o(" \u2014 "),sk=a("a"),NWe=o("PhobertTokenizer"),DWe=o(" (PhoBERT model)"),qWe=l(),Pg=a("li"),IH=a("strong"),GWe=o("plbart"),OWe=o(" \u2014 "),lk=a("a"),XWe=o("PLBartTokenizer"),zWe=o(" (PLBart model)"),VWe=l(),$g=a("li"),jH=a("strong"),WWe=o("prophetnet"),QWe=o(" \u2014 "),ik=a("a"),HWe=o("ProphetNetTokenizer"),UWe=o(" (ProphetNet model)"),JWe=l(),vs=a("li"),NH=a("strong"),YWe=o("qdqbert"),KWe=o(" \u2014 "),dk=a("a"),ZWe=o("BertTokenizer"),eQe=o(" or "),ck=a("a"),oQe=o("BertTokenizerFast"),rQe=o(" (QDQBert model)"),tQe=l(),Ig=a("li"),DH=a("strong"),aQe=o("rag"),nQe=o(" \u2014 "),fk=a("a"),sQe=o("RagTokenizer"),lQe=o(" (RAG model)"),iQe=l(),Ts=a("li"),qH=a("strong"),dQe=o("reformer"),cQe=o(" \u2014 "),mk=a("a"),fQe=o("ReformerTokenizer"),mQe=o(" or "),gk=a("a"),gQe=o("ReformerTokenizerFast"),hQe=o(" (Reformer model)"),pQe=l(),Fs=a("li"),GH=a("strong"),_Qe=o("rembert"),uQe=o(" \u2014 "),hk=a("a"),bQe=o("RemBertTokenizer"),vQe=o(" or "),pk=a("a"),TQe=o("RemBertTokenizerFast"),FQe=o(" (RemBERT model)"),CQe=l(),Cs=a("li"),OH=a("strong"),MQe=o("retribert"),EQe=o(" \u2014 "),_k=a("a"),yQe=o("RetriBertTokenizer"),wQe=o(" or "),uk=a("a"),AQe=o("RetriBertTokenizerFast"),LQe=o(" (RetriBERT model)"),BQe=l(),Ms=a("li"),XH=a("strong"),kQe=o("roberta"),xQe=o(" \u2014 "),bk=a("a"),RQe=o("RobertaTokenizer"),SQe=o(" or "),vk=a("a"),PQe=o("RobertaTokenizerFast"),$Qe=o(" (RoBERTa model)"),IQe=l(),Es=a("li"),zH=a("strong"),jQe=o("roformer"),NQe=o(" \u2014 "),Tk=a("a"),DQe=o("RoFormerTokenizer"),qQe=o(" or "),Fk=a("a"),GQe=o("RoFormerTokenizerFast"),OQe=o(" (RoFormer model)"),XQe=l(),jg=a("li"),VH=a("strong"),zQe=o("speech_to_text"),VQe=o(" \u2014 "),Ck=a("a"),WQe=o("Speech2TextTokenizer"),QQe=o(" (Speech2Text model)"),HQe=l(),Ng=a("li"),WH=a("strong"),UQe=o("speech_to_text_2"),JQe=o(" \u2014 "),Mk=a("a"),YQe=o("Speech2Text2Tokenizer"),KQe=o(" (Speech2Text2 model)"),ZQe=l(),ys=a("li"),QH=a("strong"),eHe=o("splinter"),oHe=o(" \u2014 "),Ek=a("a"),rHe=o("SplinterTokenizer"),tHe=o(" or "),yk=a("a"),aHe=o("SplinterTokenizerFast"),nHe=o(" (Splinter model)"),sHe=l(),ws=a("li"),HH=a("strong"),lHe=o("squeezebert"),iHe=o(" \u2014 "),wk=a("a"),dHe=o("SqueezeBertTokenizer"),cHe=o(" or "),Ak=a("a"),fHe=o("SqueezeBertTokenizerFast"),mHe=o(" (SqueezeBERT model)"),gHe=l(),As=a("li"),UH=a("strong"),hHe=o("t5"),pHe=o(" \u2014 "),Lk=a("a"),_He=o("T5Tokenizer"),uHe=o(" or "),Bk=a("a"),bHe=o("T5TokenizerFast"),vHe=o(" (T5 model)"),THe=l(),Dg=a("li"),JH=a("strong"),FHe=o("tapas"),CHe=o(" \u2014 "),kk=a("a"),MHe=o("TapasTokenizer"),EHe=o(" (TAPAS model)"),yHe=l(),qg=a("li"),YH=a("strong"),wHe=o("transfo-xl"),AHe=o(" \u2014 "),xk=a("a"),LHe=o("TransfoXLTokenizer"),BHe=o(" (Transformer-XL model)"),kHe=l(),Gg=a("li"),KH=a("strong"),xHe=o("wav2vec2"),RHe=o(" \u2014 "),Rk=a("a"),SHe=o("Wav2Vec2CTCTokenizer"),PHe=o(" (Wav2Vec2 model)"),$He=l(),Og=a("li"),ZH=a("strong"),IHe=o("wav2vec2_phoneme"),jHe=o(" \u2014 "),Sk=a("a"),NHe=o("Wav2Vec2PhonemeCTCTokenizer"),DHe=o(" (Wav2Vec2Phoneme model)"),qHe=l(),Ls=a("li"),eU=a("strong"),GHe=o("xglm"),OHe=o(" \u2014 "),Pk=a("a"),XHe=o("XGLMTokenizer"),zHe=o(" or "),$k=a("a"),VHe=o("XGLMTokenizerFast"),WHe=o(" (XGLM model)"),QHe=l(),Xg=a("li"),oU=a("strong"),HHe=o("xlm"),UHe=o(" \u2014 "),Ik=a("a"),JHe=o("XLMTokenizer"),YHe=o(" (XLM model)"),KHe=l(),zg=a("li"),rU=a("strong"),ZHe=o("xlm-prophetnet"),eUe=o(" \u2014 "),jk=a("a"),oUe=o("XLMProphetNetTokenizer"),rUe=o(" (XLMProphetNet model)"),tUe=l(),Bs=a("li"),tU=a("strong"),aUe=o("xlm-roberta"),nUe=o(" \u2014 "),Nk=a("a"),sUe=o("XLMRobertaTokenizer"),lUe=o(" or "),Dk=a("a"),iUe=o("XLMRobertaTokenizerFast"),dUe=o(" (XLM-RoBERTa model)"),cUe=l(),ks=a("li"),aU=a("strong"),fUe=o("xlnet"),mUe=o(" \u2014 "),qk=a("a"),gUe=o("XLNetTokenizer"),hUe=o(" or "),Gk=a("a"),pUe=o("XLNetTokenizerFast"),_Ue=o(" (XLNet model)"),uUe=l(),nU=a("p"),bUe=o("Examples:"),vUe=l(),f(vM.$$.fragment),TUe=l(),Vg=a("div"),f(TM.$$.fragment),FUe=l(),sU=a("p"),CUe=o("Register a new tokenizer in this mapping."),mLe=l(),ji=a("h2"),Wg=a("a"),lU=a("span"),f(FM.$$.fragment),MUe=l(),iU=a("span"),EUe=o("AutoFeatureExtractor"),gLe=l(),Xo=a("div"),f(CM.$$.fragment),yUe=l(),MM=a("p"),wUe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Ok=a("a"),AUe=o("AutoFeatureExtractor.from_pretrained()"),LUe=o(" class method."),BUe=l(),EM=a("p"),kUe=o("This class cannot be instantiated directly using "),dU=a("code"),xUe=o("__init__()"),RUe=o(" (throws an error)."),SUe=l(),Le=a("div"),f(yM.$$.fragment),PUe=l(),cU=a("p"),$Ue=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),IUe=l(),Na=a("p"),jUe=o("The feature extractor class to instantiate is selected based on the "),fU=a("code"),NUe=o("model_type"),DUe=o(` property of the config object
(either passed as an argument or loaded from `),mU=a("code"),qUe=o("pretrained_model_name_or_path"),GUe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),gU=a("code"),OUe=o("pretrained_model_name_or_path"),XUe=o(":"),zUe=l(),se=a("ul"),Qg=a("li"),hU=a("strong"),VUe=o("beit"),WUe=o(" \u2014 "),Xk=a("a"),QUe=o("BeitFeatureExtractor"),HUe=o(" (BEiT model)"),UUe=l(),Hg=a("li"),pU=a("strong"),JUe=o("clip"),YUe=o(" \u2014 "),zk=a("a"),KUe=o("CLIPFeatureExtractor"),ZUe=o(" (CLIP model)"),eJe=l(),Ug=a("li"),_U=a("strong"),oJe=o("convnext"),rJe=o(" \u2014 "),Vk=a("a"),tJe=o("ConvNextFeatureExtractor"),aJe=o(" (ConvNext model)"),nJe=l(),Jg=a("li"),uU=a("strong"),sJe=o("deit"),lJe=o(" \u2014 "),Wk=a("a"),iJe=o("DeiTFeatureExtractor"),dJe=o(" (DeiT model)"),cJe=l(),Yg=a("li"),bU=a("strong"),fJe=o("detr"),mJe=o(" \u2014 "),Qk=a("a"),gJe=o("DetrFeatureExtractor"),hJe=o(" (DETR model)"),pJe=l(),Kg=a("li"),vU=a("strong"),_Je=o("hubert"),uJe=o(" \u2014 "),Hk=a("a"),bJe=o("Wav2Vec2FeatureExtractor"),vJe=o(" (Hubert model)"),TJe=l(),Zg=a("li"),TU=a("strong"),FJe=o("layoutlmv2"),CJe=o(" \u2014 "),Uk=a("a"),MJe=o("LayoutLMv2FeatureExtractor"),EJe=o(" (LayoutLMv2 model)"),yJe=l(),eh=a("li"),FU=a("strong"),wJe=o("perceiver"),AJe=o(" \u2014 "),Jk=a("a"),LJe=o("PerceiverFeatureExtractor"),BJe=o(" (Perceiver model)"),kJe=l(),oh=a("li"),CU=a("strong"),xJe=o("poolformer"),RJe=o(" \u2014 "),Yk=a("a"),SJe=o("PoolFormerFeatureExtractor"),PJe=o(" (PoolFormer model)"),$Je=l(),rh=a("li"),MU=a("strong"),IJe=o("segformer"),jJe=o(" \u2014 "),Kk=a("a"),NJe=o("SegformerFeatureExtractor"),DJe=o(" (SegFormer model)"),qJe=l(),th=a("li"),EU=a("strong"),GJe=o("speech_to_text"),OJe=o(" \u2014 "),Zk=a("a"),XJe=o("Speech2TextFeatureExtractor"),zJe=o(" (Speech2Text model)"),VJe=l(),ah=a("li"),yU=a("strong"),WJe=o("swin"),QJe=o(" \u2014 "),ex=a("a"),HJe=o("ViTFeatureExtractor"),UJe=o(" (Swin model)"),JJe=l(),nh=a("li"),wU=a("strong"),YJe=o("vit"),KJe=o(" \u2014 "),ox=a("a"),ZJe=o("ViTFeatureExtractor"),eYe=o(" (ViT model)"),oYe=l(),sh=a("li"),AU=a("strong"),rYe=o("vit_mae"),tYe=o(" \u2014 "),rx=a("a"),aYe=o("ViTFeatureExtractor"),nYe=o(" (ViTMAE model)"),sYe=l(),lh=a("li"),LU=a("strong"),lYe=o("wav2vec2"),iYe=o(" \u2014 "),tx=a("a"),dYe=o("Wav2Vec2FeatureExtractor"),cYe=o(" (Wav2Vec2 model)"),fYe=l(),f(ih.$$.fragment),mYe=l(),BU=a("p"),gYe=o("Examples:"),hYe=l(),f(wM.$$.fragment),pYe=l(),dh=a("div"),f(AM.$$.fragment),_Ye=l(),kU=a("p"),uYe=o("Register a new feature extractor for this class."),hLe=l(),Ni=a("h2"),ch=a("a"),xU=a("span"),f(LM.$$.fragment),bYe=l(),RU=a("span"),vYe=o("AutoProcessor"),pLe=l(),zo=a("div"),f(BM.$$.fragment),TYe=l(),kM=a("p"),FYe=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),ax=a("a"),CYe=o("AutoProcessor.from_pretrained()"),MYe=o(" class method."),EYe=l(),xM=a("p"),yYe=o("This class cannot be instantiated directly using "),SU=a("code"),wYe=o("__init__()"),AYe=o(" (throws an error)."),LYe=l(),Be=a("div"),f(RM.$$.fragment),BYe=l(),PU=a("p"),kYe=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),xYe=l(),Di=a("p"),RYe=o("The processor class to instantiate is selected based on the "),$U=a("code"),SYe=o("model_type"),PYe=o(` property of the config object (either
passed as an argument or loaded from `),IU=a("code"),$Ye=o("pretrained_model_name_or_path"),IYe=o(" if possible):"),jYe=l(),we=a("ul"),fh=a("li"),jU=a("strong"),NYe=o("clip"),DYe=o(" \u2014 "),nx=a("a"),qYe=o("CLIPProcessor"),GYe=o(" (CLIP model)"),OYe=l(),mh=a("li"),NU=a("strong"),XYe=o("layoutlmv2"),zYe=o(" \u2014 "),sx=a("a"),VYe=o("LayoutLMv2Processor"),WYe=o(" (LayoutLMv2 model)"),QYe=l(),gh=a("li"),DU=a("strong"),HYe=o("layoutxlm"),UYe=o(" \u2014 "),lx=a("a"),JYe=o("LayoutXLMProcessor"),YYe=o(" (LayoutXLM model)"),KYe=l(),hh=a("li"),qU=a("strong"),ZYe=o("speech_to_text"),eKe=o(" \u2014 "),ix=a("a"),oKe=o("Speech2TextProcessor"),rKe=o(" (Speech2Text model)"),tKe=l(),ph=a("li"),GU=a("strong"),aKe=o("speech_to_text_2"),nKe=o(" \u2014 "),dx=a("a"),sKe=o("Speech2Text2Processor"),lKe=o(" (Speech2Text2 model)"),iKe=l(),_h=a("li"),OU=a("strong"),dKe=o("trocr"),cKe=o(" \u2014 "),cx=a("a"),fKe=o("TrOCRProcessor"),mKe=o(" (TrOCR model)"),gKe=l(),uh=a("li"),XU=a("strong"),hKe=o("vision-text-dual-encoder"),pKe=o(" \u2014 "),fx=a("a"),_Ke=o("VisionTextDualEncoderProcessor"),uKe=o(" (VisionTextDualEncoder model)"),bKe=l(),bh=a("li"),zU=a("strong"),vKe=o("wav2vec2"),TKe=o(" \u2014 "),mx=a("a"),FKe=o("Wav2Vec2Processor"),CKe=o(" (Wav2Vec2 model)"),MKe=l(),f(vh.$$.fragment),EKe=l(),VU=a("p"),yKe=o("Examples:"),wKe=l(),f(SM.$$.fragment),AKe=l(),Th=a("div"),f(PM.$$.fragment),LKe=l(),WU=a("p"),BKe=o("Register a new processor for this class."),_Le=l(),qi=a("h2"),Fh=a("a"),QU=a("span"),f($M.$$.fragment),kKe=l(),HU=a("span"),xKe=o("AutoModel"),uLe=l(),Vo=a("div"),f(IM.$$.fragment),RKe=l(),Gi=a("p"),SKe=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UU=a("code"),PKe=o("from_pretrained()"),$Ke=o("class method or the "),JU=a("code"),IKe=o("from_config()"),jKe=o(`class
method.`),NKe=l(),jM=a("p"),DKe=o("This class cannot be instantiated directly using "),YU=a("code"),qKe=o("__init__()"),GKe=o(" (throws an error)."),OKe=l(),Nr=a("div"),f(NM.$$.fragment),XKe=l(),KU=a("p"),zKe=o("Instantiates one of the base model classes of the library from a configuration."),VKe=l(),Oi=a("p"),WKe=o(`Note:
Loading a model from its configuration file does `),ZU=a("strong"),QKe=o("not"),HKe=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=a("code"),UKe=o("from_pretrained()"),JKe=o("to load the model weights."),YKe=l(),oJ=a("p"),KKe=o("Examples:"),ZKe=l(),f(DM.$$.fragment),eZe=l(),ke=a("div"),f(qM.$$.fragment),oZe=l(),rJ=a("p"),rZe=o("Instantiate one of the base model classes of the library from a pretrained model."),tZe=l(),Da=a("p"),aZe=o("The model class to instantiate is selected based on the "),tJ=a("code"),nZe=o("model_type"),sZe=o(` property of the config object (either
passed as an argument or loaded from `),aJ=a("code"),lZe=o("pretrained_model_name_or_path"),iZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nJ=a("code"),dZe=o("pretrained_model_name_or_path"),cZe=o(":"),fZe=l(),F=a("ul"),Ch=a("li"),sJ=a("strong"),mZe=o("albert"),gZe=o(" \u2014 "),gx=a("a"),hZe=o("AlbertModel"),pZe=o(" (ALBERT model)"),_Ze=l(),Mh=a("li"),lJ=a("strong"),uZe=o("bart"),bZe=o(" \u2014 "),hx=a("a"),vZe=o("BartModel"),TZe=o(" (BART model)"),FZe=l(),Eh=a("li"),iJ=a("strong"),CZe=o("beit"),MZe=o(" \u2014 "),px=a("a"),EZe=o("BeitModel"),yZe=o(" (BEiT model)"),wZe=l(),yh=a("li"),dJ=a("strong"),AZe=o("bert"),LZe=o(" \u2014 "),_x=a("a"),BZe=o("BertModel"),kZe=o(" (BERT model)"),xZe=l(),wh=a("li"),cJ=a("strong"),RZe=o("bert-generation"),SZe=o(" \u2014 "),ux=a("a"),PZe=o("BertGenerationEncoder"),$Ze=o(" (Bert Generation model)"),IZe=l(),Ah=a("li"),fJ=a("strong"),jZe=o("big_bird"),NZe=o(" \u2014 "),bx=a("a"),DZe=o("BigBirdModel"),qZe=o(" (BigBird model)"),GZe=l(),Lh=a("li"),mJ=a("strong"),OZe=o("bigbird_pegasus"),XZe=o(" \u2014 "),vx=a("a"),zZe=o("BigBirdPegasusModel"),VZe=o(" (BigBirdPegasus model)"),WZe=l(),Bh=a("li"),gJ=a("strong"),QZe=o("blenderbot"),HZe=o(" \u2014 "),Tx=a("a"),UZe=o("BlenderbotModel"),JZe=o(" (Blenderbot model)"),YZe=l(),kh=a("li"),hJ=a("strong"),KZe=o("blenderbot-small"),ZZe=o(" \u2014 "),Fx=a("a"),eeo=o("BlenderbotSmallModel"),oeo=o(" (BlenderbotSmall model)"),reo=l(),xh=a("li"),pJ=a("strong"),teo=o("camembert"),aeo=o(" \u2014 "),Cx=a("a"),neo=o("CamembertModel"),seo=o(" (CamemBERT model)"),leo=l(),Rh=a("li"),_J=a("strong"),ieo=o("canine"),deo=o(" \u2014 "),Mx=a("a"),ceo=o("CanineModel"),feo=o(" (Canine model)"),meo=l(),Sh=a("li"),uJ=a("strong"),geo=o("clip"),heo=o(" \u2014 "),Ex=a("a"),peo=o("CLIPModel"),_eo=o(" (CLIP model)"),ueo=l(),Ph=a("li"),bJ=a("strong"),beo=o("convbert"),veo=o(" \u2014 "),yx=a("a"),Teo=o("ConvBertModel"),Feo=o(" (ConvBERT model)"),Ceo=l(),$h=a("li"),vJ=a("strong"),Meo=o("convnext"),Eeo=o(" \u2014 "),wx=a("a"),yeo=o("ConvNextModel"),weo=o(" (ConvNext model)"),Aeo=l(),Ih=a("li"),TJ=a("strong"),Leo=o("ctrl"),Beo=o(" \u2014 "),Ax=a("a"),keo=o("CTRLModel"),xeo=o(" (CTRL model)"),Reo=l(),jh=a("li"),FJ=a("strong"),Seo=o("deberta"),Peo=o(" \u2014 "),Lx=a("a"),$eo=o("DebertaModel"),Ieo=o(" (DeBERTa model)"),jeo=l(),Nh=a("li"),CJ=a("strong"),Neo=o("deberta-v2"),Deo=o(" \u2014 "),Bx=a("a"),qeo=o("DebertaV2Model"),Geo=o(" (DeBERTa-v2 model)"),Oeo=l(),Dh=a("li"),MJ=a("strong"),Xeo=o("deit"),zeo=o(" \u2014 "),kx=a("a"),Veo=o("DeiTModel"),Weo=o(" (DeiT model)"),Qeo=l(),qh=a("li"),EJ=a("strong"),Heo=o("detr"),Ueo=o(" \u2014 "),xx=a("a"),Jeo=o("DetrModel"),Yeo=o(" (DETR model)"),Keo=l(),Gh=a("li"),yJ=a("strong"),Zeo=o("distilbert"),eoo=o(" \u2014 "),Rx=a("a"),ooo=o("DistilBertModel"),roo=o(" (DistilBERT model)"),too=l(),Oh=a("li"),wJ=a("strong"),aoo=o("dpr"),noo=o(" \u2014 "),Sx=a("a"),soo=o("DPRQuestionEncoder"),loo=o(" (DPR model)"),ioo=l(),Xh=a("li"),AJ=a("strong"),doo=o("electra"),coo=o(" \u2014 "),Px=a("a"),foo=o("ElectraModel"),moo=o(" (ELECTRA model)"),goo=l(),zh=a("li"),LJ=a("strong"),hoo=o("flaubert"),poo=o(" \u2014 "),$x=a("a"),_oo=o("FlaubertModel"),uoo=o(" (FlauBERT model)"),boo=l(),Vh=a("li"),BJ=a("strong"),voo=o("fnet"),Too=o(" \u2014 "),Ix=a("a"),Foo=o("FNetModel"),Coo=o(" (FNet model)"),Moo=l(),Wh=a("li"),kJ=a("strong"),Eoo=o("fsmt"),yoo=o(" \u2014 "),jx=a("a"),woo=o("FSMTModel"),Aoo=o(" (FairSeq Machine-Translation model)"),Loo=l(),xs=a("li"),xJ=a("strong"),Boo=o("funnel"),koo=o(" \u2014 "),Nx=a("a"),xoo=o("FunnelModel"),Roo=o(" or "),Dx=a("a"),Soo=o("FunnelBaseModel"),Poo=o(" (Funnel Transformer model)"),$oo=l(),Qh=a("li"),RJ=a("strong"),Ioo=o("gpt2"),joo=o(" \u2014 "),qx=a("a"),Noo=o("GPT2Model"),Doo=o(" (OpenAI GPT-2 model)"),qoo=l(),Hh=a("li"),SJ=a("strong"),Goo=o("gpt_neo"),Ooo=o(" \u2014 "),Gx=a("a"),Xoo=o("GPTNeoModel"),zoo=o(" (GPT Neo model)"),Voo=l(),Uh=a("li"),PJ=a("strong"),Woo=o("gptj"),Qoo=o(" \u2014 "),Ox=a("a"),Hoo=o("GPTJModel"),Uoo=o(" (GPT-J model)"),Joo=l(),Jh=a("li"),$J=a("strong"),Yoo=o("hubert"),Koo=o(" \u2014 "),Xx=a("a"),Zoo=o("HubertModel"),ero=o(" (Hubert model)"),oro=l(),Yh=a("li"),IJ=a("strong"),rro=o("ibert"),tro=o(" \u2014 "),zx=a("a"),aro=o("IBertModel"),nro=o(" (I-BERT model)"),sro=l(),Kh=a("li"),jJ=a("strong"),lro=o("imagegpt"),iro=o(" \u2014 "),Vx=a("a"),dro=o("ImageGPTModel"),cro=o(" (ImageGPT model)"),fro=l(),Zh=a("li"),NJ=a("strong"),mro=o("layoutlm"),gro=o(" \u2014 "),Wx=a("a"),hro=o("LayoutLMModel"),pro=o(" (LayoutLM model)"),_ro=l(),ep=a("li"),DJ=a("strong"),uro=o("layoutlmv2"),bro=o(" \u2014 "),Qx=a("a"),vro=o("LayoutLMv2Model"),Tro=o(" (LayoutLMv2 model)"),Fro=l(),op=a("li"),qJ=a("strong"),Cro=o("led"),Mro=o(" \u2014 "),Hx=a("a"),Ero=o("LEDModel"),yro=o(" (LED model)"),wro=l(),rp=a("li"),GJ=a("strong"),Aro=o("longformer"),Lro=o(" \u2014 "),Ux=a("a"),Bro=o("LongformerModel"),kro=o(" (Longformer model)"),xro=l(),tp=a("li"),OJ=a("strong"),Rro=o("luke"),Sro=o(" \u2014 "),Jx=a("a"),Pro=o("LukeModel"),$ro=o(" (LUKE model)"),Iro=l(),ap=a("li"),XJ=a("strong"),jro=o("lxmert"),Nro=o(" \u2014 "),Yx=a("a"),Dro=o("LxmertModel"),qro=o(" (LXMERT model)"),Gro=l(),np=a("li"),zJ=a("strong"),Oro=o("m2m_100"),Xro=o(" \u2014 "),Kx=a("a"),zro=o("M2M100Model"),Vro=o(" (M2M100 model)"),Wro=l(),sp=a("li"),VJ=a("strong"),Qro=o("marian"),Hro=o(" \u2014 "),Zx=a("a"),Uro=o("MarianModel"),Jro=o(" (Marian model)"),Yro=l(),lp=a("li"),WJ=a("strong"),Kro=o("mbart"),Zro=o(" \u2014 "),eR=a("a"),eto=o("MBartModel"),oto=o(" (mBART model)"),rto=l(),ip=a("li"),QJ=a("strong"),tto=o("megatron-bert"),ato=o(" \u2014 "),oR=a("a"),nto=o("MegatronBertModel"),sto=o(" (MegatronBert model)"),lto=l(),dp=a("li"),HJ=a("strong"),ito=o("mobilebert"),dto=o(" \u2014 "),rR=a("a"),cto=o("MobileBertModel"),fto=o(" (MobileBERT model)"),mto=l(),cp=a("li"),UJ=a("strong"),gto=o("mpnet"),hto=o(" \u2014 "),tR=a("a"),pto=o("MPNetModel"),_to=o(" (MPNet model)"),uto=l(),fp=a("li"),JJ=a("strong"),bto=o("mt5"),vto=o(" \u2014 "),aR=a("a"),Tto=o("MT5Model"),Fto=o(" (mT5 model)"),Cto=l(),mp=a("li"),YJ=a("strong"),Mto=o("nystromformer"),Eto=o(" \u2014 "),nR=a("a"),yto=o("NystromformerModel"),wto=o(" (Nystromformer model)"),Ato=l(),gp=a("li"),KJ=a("strong"),Lto=o("openai-gpt"),Bto=o(" \u2014 "),sR=a("a"),kto=o("OpenAIGPTModel"),xto=o(" (OpenAI GPT model)"),Rto=l(),hp=a("li"),ZJ=a("strong"),Sto=o("pegasus"),Pto=o(" \u2014 "),lR=a("a"),$to=o("PegasusModel"),Ito=o(" (Pegasus model)"),jto=l(),pp=a("li"),eY=a("strong"),Nto=o("perceiver"),Dto=o(" \u2014 "),iR=a("a"),qto=o("PerceiverModel"),Gto=o(" (Perceiver model)"),Oto=l(),_p=a("li"),oY=a("strong"),Xto=o("plbart"),zto=o(" \u2014 "),dR=a("a"),Vto=o("PLBartModel"),Wto=o(" (PLBart model)"),Qto=l(),up=a("li"),rY=a("strong"),Hto=o("poolformer"),Uto=o(" \u2014 "),cR=a("a"),Jto=o("PoolFormerModel"),Yto=o(" (PoolFormer model)"),Kto=l(),bp=a("li"),tY=a("strong"),Zto=o("prophetnet"),eao=o(" \u2014 "),fR=a("a"),oao=o("ProphetNetModel"),rao=o(" (ProphetNet model)"),tao=l(),vp=a("li"),aY=a("strong"),aao=o("qdqbert"),nao=o(" \u2014 "),mR=a("a"),sao=o("QDQBertModel"),lao=o(" (QDQBert model)"),iao=l(),Tp=a("li"),nY=a("strong"),dao=o("reformer"),cao=o(" \u2014 "),gR=a("a"),fao=o("ReformerModel"),mao=o(" (Reformer model)"),gao=l(),Fp=a("li"),sY=a("strong"),hao=o("rembert"),pao=o(" \u2014 "),hR=a("a"),_ao=o("RemBertModel"),uao=o(" (RemBERT model)"),bao=l(),Cp=a("li"),lY=a("strong"),vao=o("retribert"),Tao=o(" \u2014 "),pR=a("a"),Fao=o("RetriBertModel"),Cao=o(" (RetriBERT model)"),Mao=l(),Mp=a("li"),iY=a("strong"),Eao=o("roberta"),yao=o(" \u2014 "),_R=a("a"),wao=o("RobertaModel"),Aao=o(" (RoBERTa model)"),Lao=l(),Ep=a("li"),dY=a("strong"),Bao=o("roformer"),kao=o(" \u2014 "),uR=a("a"),xao=o("RoFormerModel"),Rao=o(" (RoFormer model)"),Sao=l(),yp=a("li"),cY=a("strong"),Pao=o("segformer"),$ao=o(" \u2014 "),bR=a("a"),Iao=o("SegformerModel"),jao=o(" (SegFormer model)"),Nao=l(),wp=a("li"),fY=a("strong"),Dao=o("sew"),qao=o(" \u2014 "),vR=a("a"),Gao=o("SEWModel"),Oao=o(" (SEW model)"),Xao=l(),Ap=a("li"),mY=a("strong"),zao=o("sew-d"),Vao=o(" \u2014 "),TR=a("a"),Wao=o("SEWDModel"),Qao=o(" (SEW-D model)"),Hao=l(),Lp=a("li"),gY=a("strong"),Uao=o("speech_to_text"),Jao=o(" \u2014 "),FR=a("a"),Yao=o("Speech2TextModel"),Kao=o(" (Speech2Text model)"),Zao=l(),Bp=a("li"),hY=a("strong"),eno=o("splinter"),ono=o(" \u2014 "),CR=a("a"),rno=o("SplinterModel"),tno=o(" (Splinter model)"),ano=l(),kp=a("li"),pY=a("strong"),nno=o("squeezebert"),sno=o(" \u2014 "),MR=a("a"),lno=o("SqueezeBertModel"),ino=o(" (SqueezeBERT model)"),dno=l(),xp=a("li"),_Y=a("strong"),cno=o("swin"),fno=o(" \u2014 "),ER=a("a"),mno=o("SwinModel"),gno=o(" (Swin model)"),hno=l(),Rp=a("li"),uY=a("strong"),pno=o("t5"),_no=o(" \u2014 "),yR=a("a"),uno=o("T5Model"),bno=o(" (T5 model)"),vno=l(),Sp=a("li"),bY=a("strong"),Tno=o("tapas"),Fno=o(" \u2014 "),wR=a("a"),Cno=o("TapasModel"),Mno=o(" (TAPAS model)"),Eno=l(),Pp=a("li"),vY=a("strong"),yno=o("transfo-xl"),wno=o(" \u2014 "),AR=a("a"),Ano=o("TransfoXLModel"),Lno=o(" (Transformer-XL model)"),Bno=l(),$p=a("li"),TY=a("strong"),kno=o("unispeech"),xno=o(" \u2014 "),LR=a("a"),Rno=o("UniSpeechModel"),Sno=o(" (UniSpeech model)"),Pno=l(),Ip=a("li"),FY=a("strong"),$no=o("unispeech-sat"),Ino=o(" \u2014 "),BR=a("a"),jno=o("UniSpeechSatModel"),Nno=o(" (UniSpeechSat model)"),Dno=l(),jp=a("li"),CY=a("strong"),qno=o("vilt"),Gno=o(" \u2014 "),kR=a("a"),Ono=o("ViltModel"),Xno=o(" (ViLT model)"),zno=l(),Np=a("li"),MY=a("strong"),Vno=o("vision-text-dual-encoder"),Wno=o(" \u2014 "),xR=a("a"),Qno=o("VisionTextDualEncoderModel"),Hno=o(" (VisionTextDualEncoder model)"),Uno=l(),Dp=a("li"),EY=a("strong"),Jno=o("visual_bert"),Yno=o(" \u2014 "),RR=a("a"),Kno=o("VisualBertModel"),Zno=o(" (VisualBert model)"),eso=l(),qp=a("li"),yY=a("strong"),oso=o("vit"),rso=o(" \u2014 "),SR=a("a"),tso=o("ViTModel"),aso=o(" (ViT model)"),nso=l(),Gp=a("li"),wY=a("strong"),sso=o("vit_mae"),lso=o(" \u2014 "),PR=a("a"),iso=o("ViTMAEModel"),dso=o(" (ViTMAE model)"),cso=l(),Op=a("li"),AY=a("strong"),fso=o("wav2vec2"),mso=o(" \u2014 "),$R=a("a"),gso=o("Wav2Vec2Model"),hso=o(" (Wav2Vec2 model)"),pso=l(),Xp=a("li"),LY=a("strong"),_so=o("wavlm"),uso=o(" \u2014 "),IR=a("a"),bso=o("WavLMModel"),vso=o(" (WavLM model)"),Tso=l(),zp=a("li"),BY=a("strong"),Fso=o("xglm"),Cso=o(" \u2014 "),jR=a("a"),Mso=o("XGLMModel"),Eso=o(" (XGLM model)"),yso=l(),Vp=a("li"),kY=a("strong"),wso=o("xlm"),Aso=o(" \u2014 "),NR=a("a"),Lso=o("XLMModel"),Bso=o(" (XLM model)"),kso=l(),Wp=a("li"),xY=a("strong"),xso=o("xlm-prophetnet"),Rso=o(" \u2014 "),DR=a("a"),Sso=o("XLMProphetNetModel"),Pso=o(" (XLMProphetNet model)"),$so=l(),Qp=a("li"),RY=a("strong"),Iso=o("xlm-roberta"),jso=o(" \u2014 "),qR=a("a"),Nso=o("XLMRobertaModel"),Dso=o(" (XLM-RoBERTa model)"),qso=l(),Hp=a("li"),SY=a("strong"),Gso=o("xlm-roberta-xl"),Oso=o(" \u2014 "),GR=a("a"),Xso=o("XLMRobertaXLModel"),zso=o(" (XLM-RoBERTa-XL model)"),Vso=l(),Up=a("li"),PY=a("strong"),Wso=o("xlnet"),Qso=o(" \u2014 "),OR=a("a"),Hso=o("XLNetModel"),Uso=o(" (XLNet model)"),Jso=l(),Jp=a("li"),$Y=a("strong"),Yso=o("yoso"),Kso=o(" \u2014 "),XR=a("a"),Zso=o("YosoModel"),elo=o(" (YOSO model)"),olo=l(),Yp=a("p"),rlo=o("The model is set in evaluation mode by default using "),IY=a("code"),tlo=o("model.eval()"),alo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jY=a("code"),nlo=o("model.train()"),slo=l(),NY=a("p"),llo=o("Examples:"),ilo=l(),f(GM.$$.fragment),bLe=l(),Xi=a("h2"),Kp=a("a"),DY=a("span"),f(OM.$$.fragment),dlo=l(),qY=a("span"),clo=o("AutoModelForPreTraining"),vLe=l(),Wo=a("div"),f(XM.$$.fragment),flo=l(),zi=a("p"),mlo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GY=a("code"),glo=o("from_pretrained()"),hlo=o("class method or the "),OY=a("code"),plo=o("from_config()"),_lo=o(`class
method.`),ulo=l(),zM=a("p"),blo=o("This class cannot be instantiated directly using "),XY=a("code"),vlo=o("__init__()"),Tlo=o(" (throws an error)."),Flo=l(),Dr=a("div"),f(VM.$$.fragment),Clo=l(),zY=a("p"),Mlo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Elo=l(),Vi=a("p"),ylo=o(`Note:
Loading a model from its configuration file does `),VY=a("strong"),wlo=o("not"),Alo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=a("code"),Llo=o("from_pretrained()"),Blo=o("to load the model weights."),klo=l(),QY=a("p"),xlo=o("Examples:"),Rlo=l(),f(WM.$$.fragment),Slo=l(),xe=a("div"),f(QM.$$.fragment),Plo=l(),HY=a("p"),$lo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ilo=l(),qa=a("p"),jlo=o("The model class to instantiate is selected based on the "),UY=a("code"),Nlo=o("model_type"),Dlo=o(` property of the config object (either
passed as an argument or loaded from `),JY=a("code"),qlo=o("pretrained_model_name_or_path"),Glo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YY=a("code"),Olo=o("pretrained_model_name_or_path"),Xlo=o(":"),zlo=l(),x=a("ul"),Zp=a("li"),KY=a("strong"),Vlo=o("albert"),Wlo=o(" \u2014 "),zR=a("a"),Qlo=o("AlbertForPreTraining"),Hlo=o(" (ALBERT model)"),Ulo=l(),e_=a("li"),ZY=a("strong"),Jlo=o("bart"),Ylo=o(" \u2014 "),VR=a("a"),Klo=o("BartForConditionalGeneration"),Zlo=o(" (BART model)"),eio=l(),o_=a("li"),eK=a("strong"),oio=o("bert"),rio=o(" \u2014 "),WR=a("a"),tio=o("BertForPreTraining"),aio=o(" (BERT model)"),nio=l(),r_=a("li"),oK=a("strong"),sio=o("big_bird"),lio=o(" \u2014 "),QR=a("a"),iio=o("BigBirdForPreTraining"),dio=o(" (BigBird model)"),cio=l(),t_=a("li"),rK=a("strong"),fio=o("camembert"),mio=o(" \u2014 "),HR=a("a"),gio=o("CamembertForMaskedLM"),hio=o(" (CamemBERT model)"),pio=l(),a_=a("li"),tK=a("strong"),_io=o("ctrl"),uio=o(" \u2014 "),UR=a("a"),bio=o("CTRLLMHeadModel"),vio=o(" (CTRL model)"),Tio=l(),n_=a("li"),aK=a("strong"),Fio=o("deberta"),Cio=o(" \u2014 "),JR=a("a"),Mio=o("DebertaForMaskedLM"),Eio=o(" (DeBERTa model)"),yio=l(),s_=a("li"),nK=a("strong"),wio=o("deberta-v2"),Aio=o(" \u2014 "),YR=a("a"),Lio=o("DebertaV2ForMaskedLM"),Bio=o(" (DeBERTa-v2 model)"),kio=l(),l_=a("li"),sK=a("strong"),xio=o("distilbert"),Rio=o(" \u2014 "),KR=a("a"),Sio=o("DistilBertForMaskedLM"),Pio=o(" (DistilBERT model)"),$io=l(),i_=a("li"),lK=a("strong"),Iio=o("electra"),jio=o(" \u2014 "),ZR=a("a"),Nio=o("ElectraForPreTraining"),Dio=o(" (ELECTRA model)"),qio=l(),d_=a("li"),iK=a("strong"),Gio=o("flaubert"),Oio=o(" \u2014 "),eS=a("a"),Xio=o("FlaubertWithLMHeadModel"),zio=o(" (FlauBERT model)"),Vio=l(),c_=a("li"),dK=a("strong"),Wio=o("fnet"),Qio=o(" \u2014 "),oS=a("a"),Hio=o("FNetForPreTraining"),Uio=o(" (FNet model)"),Jio=l(),f_=a("li"),cK=a("strong"),Yio=o("fsmt"),Kio=o(" \u2014 "),rS=a("a"),Zio=o("FSMTForConditionalGeneration"),edo=o(" (FairSeq Machine-Translation model)"),odo=l(),m_=a("li"),fK=a("strong"),rdo=o("funnel"),tdo=o(" \u2014 "),tS=a("a"),ado=o("FunnelForPreTraining"),ndo=o(" (Funnel Transformer model)"),sdo=l(),g_=a("li"),mK=a("strong"),ldo=o("gpt2"),ido=o(" \u2014 "),aS=a("a"),ddo=o("GPT2LMHeadModel"),cdo=o(" (OpenAI GPT-2 model)"),fdo=l(),h_=a("li"),gK=a("strong"),mdo=o("ibert"),gdo=o(" \u2014 "),nS=a("a"),hdo=o("IBertForMaskedLM"),pdo=o(" (I-BERT model)"),_do=l(),p_=a("li"),hK=a("strong"),udo=o("layoutlm"),bdo=o(" \u2014 "),sS=a("a"),vdo=o("LayoutLMForMaskedLM"),Tdo=o(" (LayoutLM model)"),Fdo=l(),__=a("li"),pK=a("strong"),Cdo=o("longformer"),Mdo=o(" \u2014 "),lS=a("a"),Edo=o("LongformerForMaskedLM"),ydo=o(" (Longformer model)"),wdo=l(),u_=a("li"),_K=a("strong"),Ado=o("lxmert"),Ldo=o(" \u2014 "),iS=a("a"),Bdo=o("LxmertForPreTraining"),kdo=o(" (LXMERT model)"),xdo=l(),b_=a("li"),uK=a("strong"),Rdo=o("megatron-bert"),Sdo=o(" \u2014 "),dS=a("a"),Pdo=o("MegatronBertForPreTraining"),$do=o(" (MegatronBert model)"),Ido=l(),v_=a("li"),bK=a("strong"),jdo=o("mobilebert"),Ndo=o(" \u2014 "),cS=a("a"),Ddo=o("MobileBertForPreTraining"),qdo=o(" (MobileBERT model)"),Gdo=l(),T_=a("li"),vK=a("strong"),Odo=o("mpnet"),Xdo=o(" \u2014 "),fS=a("a"),zdo=o("MPNetForMaskedLM"),Vdo=o(" (MPNet model)"),Wdo=l(),F_=a("li"),TK=a("strong"),Qdo=o("openai-gpt"),Hdo=o(" \u2014 "),mS=a("a"),Udo=o("OpenAIGPTLMHeadModel"),Jdo=o(" (OpenAI GPT model)"),Ydo=l(),C_=a("li"),FK=a("strong"),Kdo=o("retribert"),Zdo=o(" \u2014 "),gS=a("a"),eco=o("RetriBertModel"),oco=o(" (RetriBERT model)"),rco=l(),M_=a("li"),CK=a("strong"),tco=o("roberta"),aco=o(" \u2014 "),hS=a("a"),nco=o("RobertaForMaskedLM"),sco=o(" (RoBERTa model)"),lco=l(),E_=a("li"),MK=a("strong"),ico=o("squeezebert"),dco=o(" \u2014 "),pS=a("a"),cco=o("SqueezeBertForMaskedLM"),fco=o(" (SqueezeBERT model)"),mco=l(),y_=a("li"),EK=a("strong"),gco=o("t5"),hco=o(" \u2014 "),_S=a("a"),pco=o("T5ForConditionalGeneration"),_co=o(" (T5 model)"),uco=l(),w_=a("li"),yK=a("strong"),bco=o("tapas"),vco=o(" \u2014 "),uS=a("a"),Tco=o("TapasForMaskedLM"),Fco=o(" (TAPAS model)"),Cco=l(),A_=a("li"),wK=a("strong"),Mco=o("transfo-xl"),Eco=o(" \u2014 "),bS=a("a"),yco=o("TransfoXLLMHeadModel"),wco=o(" (Transformer-XL model)"),Aco=l(),L_=a("li"),AK=a("strong"),Lco=o("unispeech"),Bco=o(" \u2014 "),vS=a("a"),kco=o("UniSpeechForPreTraining"),xco=o(" (UniSpeech model)"),Rco=l(),B_=a("li"),LK=a("strong"),Sco=o("unispeech-sat"),Pco=o(" \u2014 "),TS=a("a"),$co=o("UniSpeechSatForPreTraining"),Ico=o(" (UniSpeechSat model)"),jco=l(),k_=a("li"),BK=a("strong"),Nco=o("visual_bert"),Dco=o(" \u2014 "),FS=a("a"),qco=o("VisualBertForPreTraining"),Gco=o(" (VisualBert model)"),Oco=l(),x_=a("li"),kK=a("strong"),Xco=o("vit_mae"),zco=o(" \u2014 "),CS=a("a"),Vco=o("ViTMAEForPreTraining"),Wco=o(" (ViTMAE model)"),Qco=l(),R_=a("li"),xK=a("strong"),Hco=o("wav2vec2"),Uco=o(" \u2014 "),MS=a("a"),Jco=o("Wav2Vec2ForPreTraining"),Yco=o(" (Wav2Vec2 model)"),Kco=l(),S_=a("li"),RK=a("strong"),Zco=o("xlm"),efo=o(" \u2014 "),ES=a("a"),ofo=o("XLMWithLMHeadModel"),rfo=o(" (XLM model)"),tfo=l(),P_=a("li"),SK=a("strong"),afo=o("xlm-roberta"),nfo=o(" \u2014 "),yS=a("a"),sfo=o("XLMRobertaForMaskedLM"),lfo=o(" (XLM-RoBERTa model)"),ifo=l(),$_=a("li"),PK=a("strong"),dfo=o("xlm-roberta-xl"),cfo=o(" \u2014 "),wS=a("a"),ffo=o("XLMRobertaXLForMaskedLM"),mfo=o(" (XLM-RoBERTa-XL model)"),gfo=l(),I_=a("li"),$K=a("strong"),hfo=o("xlnet"),pfo=o(" \u2014 "),AS=a("a"),_fo=o("XLNetLMHeadModel"),ufo=o(" (XLNet model)"),bfo=l(),j_=a("p"),vfo=o("The model is set in evaluation mode by default using "),IK=a("code"),Tfo=o("model.eval()"),Ffo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jK=a("code"),Cfo=o("model.train()"),Mfo=l(),NK=a("p"),Efo=o("Examples:"),yfo=l(),f(HM.$$.fragment),TLe=l(),Wi=a("h2"),N_=a("a"),DK=a("span"),f(UM.$$.fragment),wfo=l(),qK=a("span"),Afo=o("AutoModelForCausalLM"),FLe=l(),Qo=a("div"),f(JM.$$.fragment),Lfo=l(),Qi=a("p"),Bfo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GK=a("code"),kfo=o("from_pretrained()"),xfo=o("class method or the "),OK=a("code"),Rfo=o("from_config()"),Sfo=o(`class
method.`),Pfo=l(),YM=a("p"),$fo=o("This class cannot be instantiated directly using "),XK=a("code"),Ifo=o("__init__()"),jfo=o(" (throws an error)."),Nfo=l(),qr=a("div"),f(KM.$$.fragment),Dfo=l(),zK=a("p"),qfo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Gfo=l(),Hi=a("p"),Ofo=o(`Note:
Loading a model from its configuration file does `),VK=a("strong"),Xfo=o("not"),zfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=a("code"),Vfo=o("from_pretrained()"),Wfo=o("to load the model weights."),Qfo=l(),QK=a("p"),Hfo=o("Examples:"),Ufo=l(),f(ZM.$$.fragment),Jfo=l(),Re=a("div"),f(eE.$$.fragment),Yfo=l(),HK=a("p"),Kfo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Zfo=l(),Ga=a("p"),emo=o("The model class to instantiate is selected based on the "),UK=a("code"),omo=o("model_type"),rmo=o(` property of the config object (either
passed as an argument or loaded from `),JK=a("code"),tmo=o("pretrained_model_name_or_path"),amo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YK=a("code"),nmo=o("pretrained_model_name_or_path"),smo=o(":"),lmo=l(),$=a("ul"),D_=a("li"),KK=a("strong"),imo=o("bart"),dmo=o(" \u2014 "),LS=a("a"),cmo=o("BartForCausalLM"),fmo=o(" (BART model)"),mmo=l(),q_=a("li"),ZK=a("strong"),gmo=o("bert"),hmo=o(" \u2014 "),BS=a("a"),pmo=o("BertLMHeadModel"),_mo=o(" (BERT model)"),umo=l(),G_=a("li"),eZ=a("strong"),bmo=o("bert-generation"),vmo=o(" \u2014 "),kS=a("a"),Tmo=o("BertGenerationDecoder"),Fmo=o(" (Bert Generation model)"),Cmo=l(),O_=a("li"),oZ=a("strong"),Mmo=o("big_bird"),Emo=o(" \u2014 "),xS=a("a"),ymo=o("BigBirdForCausalLM"),wmo=o(" (BigBird model)"),Amo=l(),X_=a("li"),rZ=a("strong"),Lmo=o("bigbird_pegasus"),Bmo=o(" \u2014 "),RS=a("a"),kmo=o("BigBirdPegasusForCausalLM"),xmo=o(" (BigBirdPegasus model)"),Rmo=l(),z_=a("li"),tZ=a("strong"),Smo=o("blenderbot"),Pmo=o(" \u2014 "),SS=a("a"),$mo=o("BlenderbotForCausalLM"),Imo=o(" (Blenderbot model)"),jmo=l(),V_=a("li"),aZ=a("strong"),Nmo=o("blenderbot-small"),Dmo=o(" \u2014 "),PS=a("a"),qmo=o("BlenderbotSmallForCausalLM"),Gmo=o(" (BlenderbotSmall model)"),Omo=l(),W_=a("li"),nZ=a("strong"),Xmo=o("camembert"),zmo=o(" \u2014 "),$S=a("a"),Vmo=o("CamembertForCausalLM"),Wmo=o(" (CamemBERT model)"),Qmo=l(),Q_=a("li"),sZ=a("strong"),Hmo=o("ctrl"),Umo=o(" \u2014 "),IS=a("a"),Jmo=o("CTRLLMHeadModel"),Ymo=o(" (CTRL model)"),Kmo=l(),H_=a("li"),lZ=a("strong"),Zmo=o("electra"),ego=o(" \u2014 "),jS=a("a"),ogo=o("ElectraForCausalLM"),rgo=o(" (ELECTRA model)"),tgo=l(),U_=a("li"),iZ=a("strong"),ago=o("gpt2"),ngo=o(" \u2014 "),NS=a("a"),sgo=o("GPT2LMHeadModel"),lgo=o(" (OpenAI GPT-2 model)"),igo=l(),J_=a("li"),dZ=a("strong"),dgo=o("gpt_neo"),cgo=o(" \u2014 "),DS=a("a"),fgo=o("GPTNeoForCausalLM"),mgo=o(" (GPT Neo model)"),ggo=l(),Y_=a("li"),cZ=a("strong"),hgo=o("gptj"),pgo=o(" \u2014 "),qS=a("a"),_go=o("GPTJForCausalLM"),ugo=o(" (GPT-J model)"),bgo=l(),K_=a("li"),fZ=a("strong"),vgo=o("marian"),Tgo=o(" \u2014 "),GS=a("a"),Fgo=o("MarianForCausalLM"),Cgo=o(" (Marian model)"),Mgo=l(),Z_=a("li"),mZ=a("strong"),Ego=o("mbart"),ygo=o(" \u2014 "),OS=a("a"),wgo=o("MBartForCausalLM"),Ago=o(" (mBART model)"),Lgo=l(),eu=a("li"),gZ=a("strong"),Bgo=o("megatron-bert"),kgo=o(" \u2014 "),XS=a("a"),xgo=o("MegatronBertForCausalLM"),Rgo=o(" (MegatronBert model)"),Sgo=l(),ou=a("li"),hZ=a("strong"),Pgo=o("openai-gpt"),$go=o(" \u2014 "),zS=a("a"),Igo=o("OpenAIGPTLMHeadModel"),jgo=o(" (OpenAI GPT model)"),Ngo=l(),ru=a("li"),pZ=a("strong"),Dgo=o("pegasus"),qgo=o(" \u2014 "),VS=a("a"),Ggo=o("PegasusForCausalLM"),Ogo=o(" (Pegasus model)"),Xgo=l(),tu=a("li"),_Z=a("strong"),zgo=o("plbart"),Vgo=o(" \u2014 "),WS=a("a"),Wgo=o("PLBartForCausalLM"),Qgo=o(" (PLBart model)"),Hgo=l(),au=a("li"),uZ=a("strong"),Ugo=o("prophetnet"),Jgo=o(" \u2014 "),QS=a("a"),Ygo=o("ProphetNetForCausalLM"),Kgo=o(" (ProphetNet model)"),Zgo=l(),nu=a("li"),bZ=a("strong"),eho=o("qdqbert"),oho=o(" \u2014 "),HS=a("a"),rho=o("QDQBertLMHeadModel"),tho=o(" (QDQBert model)"),aho=l(),su=a("li"),vZ=a("strong"),nho=o("reformer"),sho=o(" \u2014 "),US=a("a"),lho=o("ReformerModelWithLMHead"),iho=o(" (Reformer model)"),dho=l(),lu=a("li"),TZ=a("strong"),cho=o("rembert"),fho=o(" \u2014 "),JS=a("a"),mho=o("RemBertForCausalLM"),gho=o(" (RemBERT model)"),hho=l(),iu=a("li"),FZ=a("strong"),pho=o("roberta"),_ho=o(" \u2014 "),YS=a("a"),uho=o("RobertaForCausalLM"),bho=o(" (RoBERTa model)"),vho=l(),du=a("li"),CZ=a("strong"),Tho=o("roformer"),Fho=o(" \u2014 "),KS=a("a"),Cho=o("RoFormerForCausalLM"),Mho=o(" (RoFormer model)"),Eho=l(),cu=a("li"),MZ=a("strong"),yho=o("speech_to_text_2"),who=o(" \u2014 "),ZS=a("a"),Aho=o("Speech2Text2ForCausalLM"),Lho=o(" (Speech2Text2 model)"),Bho=l(),fu=a("li"),EZ=a("strong"),kho=o("transfo-xl"),xho=o(" \u2014 "),eP=a("a"),Rho=o("TransfoXLLMHeadModel"),Sho=o(" (Transformer-XL model)"),Pho=l(),mu=a("li"),yZ=a("strong"),$ho=o("trocr"),Iho=o(" \u2014 "),oP=a("a"),jho=o("TrOCRForCausalLM"),Nho=o(" (TrOCR model)"),Dho=l(),gu=a("li"),wZ=a("strong"),qho=o("xglm"),Gho=o(" \u2014 "),rP=a("a"),Oho=o("XGLMForCausalLM"),Xho=o(" (XGLM model)"),zho=l(),hu=a("li"),AZ=a("strong"),Vho=o("xlm"),Who=o(" \u2014 "),tP=a("a"),Qho=o("XLMWithLMHeadModel"),Hho=o(" (XLM model)"),Uho=l(),pu=a("li"),LZ=a("strong"),Jho=o("xlm-prophetnet"),Yho=o(" \u2014 "),aP=a("a"),Kho=o("XLMProphetNetForCausalLM"),Zho=o(" (XLMProphetNet model)"),epo=l(),_u=a("li"),BZ=a("strong"),opo=o("xlm-roberta"),rpo=o(" \u2014 "),nP=a("a"),tpo=o("XLMRobertaForCausalLM"),apo=o(" (XLM-RoBERTa model)"),npo=l(),uu=a("li"),kZ=a("strong"),spo=o("xlm-roberta-xl"),lpo=o(" \u2014 "),sP=a("a"),ipo=o("XLMRobertaXLForCausalLM"),dpo=o(" (XLM-RoBERTa-XL model)"),cpo=l(),bu=a("li"),xZ=a("strong"),fpo=o("xlnet"),mpo=o(" \u2014 "),lP=a("a"),gpo=o("XLNetLMHeadModel"),hpo=o(" (XLNet model)"),ppo=l(),vu=a("p"),_po=o("The model is set in evaluation mode by default using "),RZ=a("code"),upo=o("model.eval()"),bpo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SZ=a("code"),vpo=o("model.train()"),Tpo=l(),PZ=a("p"),Fpo=o("Examples:"),Cpo=l(),f(oE.$$.fragment),CLe=l(),Ui=a("h2"),Tu=a("a"),$Z=a("span"),f(rE.$$.fragment),Mpo=l(),IZ=a("span"),Epo=o("AutoModelForMaskedLM"),MLe=l(),Ho=a("div"),f(tE.$$.fragment),ypo=l(),Ji=a("p"),wpo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jZ=a("code"),Apo=o("from_pretrained()"),Lpo=o("class method or the "),NZ=a("code"),Bpo=o("from_config()"),kpo=o(`class
method.`),xpo=l(),aE=a("p"),Rpo=o("This class cannot be instantiated directly using "),DZ=a("code"),Spo=o("__init__()"),Ppo=o(" (throws an error)."),$po=l(),Gr=a("div"),f(nE.$$.fragment),Ipo=l(),qZ=a("p"),jpo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Npo=l(),Yi=a("p"),Dpo=o(`Note:
Loading a model from its configuration file does `),GZ=a("strong"),qpo=o("not"),Gpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("code"),Opo=o("from_pretrained()"),Xpo=o("to load the model weights."),zpo=l(),XZ=a("p"),Vpo=o("Examples:"),Wpo=l(),f(sE.$$.fragment),Qpo=l(),Se=a("div"),f(lE.$$.fragment),Hpo=l(),zZ=a("p"),Upo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Jpo=l(),Oa=a("p"),Ypo=o("The model class to instantiate is selected based on the "),VZ=a("code"),Kpo=o("model_type"),Zpo=o(` property of the config object (either
passed as an argument or loaded from `),WZ=a("code"),e_o=o("pretrained_model_name_or_path"),o_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QZ=a("code"),r_o=o("pretrained_model_name_or_path"),t_o=o(":"),a_o=l(),I=a("ul"),Fu=a("li"),HZ=a("strong"),n_o=o("albert"),s_o=o(" \u2014 "),iP=a("a"),l_o=o("AlbertForMaskedLM"),i_o=o(" (ALBERT model)"),d_o=l(),Cu=a("li"),UZ=a("strong"),c_o=o("bart"),f_o=o(" \u2014 "),dP=a("a"),m_o=o("BartForConditionalGeneration"),g_o=o(" (BART model)"),h_o=l(),Mu=a("li"),JZ=a("strong"),p_o=o("bert"),__o=o(" \u2014 "),cP=a("a"),u_o=o("BertForMaskedLM"),b_o=o(" (BERT model)"),v_o=l(),Eu=a("li"),YZ=a("strong"),T_o=o("big_bird"),F_o=o(" \u2014 "),fP=a("a"),C_o=o("BigBirdForMaskedLM"),M_o=o(" (BigBird model)"),E_o=l(),yu=a("li"),KZ=a("strong"),y_o=o("camembert"),w_o=o(" \u2014 "),mP=a("a"),A_o=o("CamembertForMaskedLM"),L_o=o(" (CamemBERT model)"),B_o=l(),wu=a("li"),ZZ=a("strong"),k_o=o("convbert"),x_o=o(" \u2014 "),gP=a("a"),R_o=o("ConvBertForMaskedLM"),S_o=o(" (ConvBERT model)"),P_o=l(),Au=a("li"),eee=a("strong"),$_o=o("deberta"),I_o=o(" \u2014 "),hP=a("a"),j_o=o("DebertaForMaskedLM"),N_o=o(" (DeBERTa model)"),D_o=l(),Lu=a("li"),oee=a("strong"),q_o=o("deberta-v2"),G_o=o(" \u2014 "),pP=a("a"),O_o=o("DebertaV2ForMaskedLM"),X_o=o(" (DeBERTa-v2 model)"),z_o=l(),Bu=a("li"),ree=a("strong"),V_o=o("distilbert"),W_o=o(" \u2014 "),_P=a("a"),Q_o=o("DistilBertForMaskedLM"),H_o=o(" (DistilBERT model)"),U_o=l(),ku=a("li"),tee=a("strong"),J_o=o("electra"),Y_o=o(" \u2014 "),uP=a("a"),K_o=o("ElectraForMaskedLM"),Z_o=o(" (ELECTRA model)"),euo=l(),xu=a("li"),aee=a("strong"),ouo=o("flaubert"),ruo=o(" \u2014 "),bP=a("a"),tuo=o("FlaubertWithLMHeadModel"),auo=o(" (FlauBERT model)"),nuo=l(),Ru=a("li"),nee=a("strong"),suo=o("fnet"),luo=o(" \u2014 "),vP=a("a"),iuo=o("FNetForMaskedLM"),duo=o(" (FNet model)"),cuo=l(),Su=a("li"),see=a("strong"),fuo=o("funnel"),muo=o(" \u2014 "),TP=a("a"),guo=o("FunnelForMaskedLM"),huo=o(" (Funnel Transformer model)"),puo=l(),Pu=a("li"),lee=a("strong"),_uo=o("ibert"),uuo=o(" \u2014 "),FP=a("a"),buo=o("IBertForMaskedLM"),vuo=o(" (I-BERT model)"),Tuo=l(),$u=a("li"),iee=a("strong"),Fuo=o("layoutlm"),Cuo=o(" \u2014 "),CP=a("a"),Muo=o("LayoutLMForMaskedLM"),Euo=o(" (LayoutLM model)"),yuo=l(),Iu=a("li"),dee=a("strong"),wuo=o("longformer"),Auo=o(" \u2014 "),MP=a("a"),Luo=o("LongformerForMaskedLM"),Buo=o(" (Longformer model)"),kuo=l(),ju=a("li"),cee=a("strong"),xuo=o("mbart"),Ruo=o(" \u2014 "),EP=a("a"),Suo=o("MBartForConditionalGeneration"),Puo=o(" (mBART model)"),$uo=l(),Nu=a("li"),fee=a("strong"),Iuo=o("megatron-bert"),juo=o(" \u2014 "),yP=a("a"),Nuo=o("MegatronBertForMaskedLM"),Duo=o(" (MegatronBert model)"),quo=l(),Du=a("li"),mee=a("strong"),Guo=o("mobilebert"),Ouo=o(" \u2014 "),wP=a("a"),Xuo=o("MobileBertForMaskedLM"),zuo=o(" (MobileBERT model)"),Vuo=l(),qu=a("li"),gee=a("strong"),Wuo=o("mpnet"),Quo=o(" \u2014 "),AP=a("a"),Huo=o("MPNetForMaskedLM"),Uuo=o(" (MPNet model)"),Juo=l(),Gu=a("li"),hee=a("strong"),Yuo=o("nystromformer"),Kuo=o(" \u2014 "),LP=a("a"),Zuo=o("NystromformerForMaskedLM"),e1o=o(" (Nystromformer model)"),o1o=l(),Ou=a("li"),pee=a("strong"),r1o=o("perceiver"),t1o=o(" \u2014 "),BP=a("a"),a1o=o("PerceiverForMaskedLM"),n1o=o(" (Perceiver model)"),s1o=l(),Xu=a("li"),_ee=a("strong"),l1o=o("qdqbert"),i1o=o(" \u2014 "),kP=a("a"),d1o=o("QDQBertForMaskedLM"),c1o=o(" (QDQBert model)"),f1o=l(),zu=a("li"),uee=a("strong"),m1o=o("reformer"),g1o=o(" \u2014 "),xP=a("a"),h1o=o("ReformerForMaskedLM"),p1o=o(" (Reformer model)"),_1o=l(),Vu=a("li"),bee=a("strong"),u1o=o("rembert"),b1o=o(" \u2014 "),RP=a("a"),v1o=o("RemBertForMaskedLM"),T1o=o(" (RemBERT model)"),F1o=l(),Wu=a("li"),vee=a("strong"),C1o=o("roberta"),M1o=o(" \u2014 "),SP=a("a"),E1o=o("RobertaForMaskedLM"),y1o=o(" (RoBERTa model)"),w1o=l(),Qu=a("li"),Tee=a("strong"),A1o=o("roformer"),L1o=o(" \u2014 "),PP=a("a"),B1o=o("RoFormerForMaskedLM"),k1o=o(" (RoFormer model)"),x1o=l(),Hu=a("li"),Fee=a("strong"),R1o=o("squeezebert"),S1o=o(" \u2014 "),$P=a("a"),P1o=o("SqueezeBertForMaskedLM"),$1o=o(" (SqueezeBERT model)"),I1o=l(),Uu=a("li"),Cee=a("strong"),j1o=o("tapas"),N1o=o(" \u2014 "),IP=a("a"),D1o=o("TapasForMaskedLM"),q1o=o(" (TAPAS model)"),G1o=l(),Ju=a("li"),Mee=a("strong"),O1o=o("wav2vec2"),X1o=o(" \u2014 "),Eee=a("code"),z1o=o("Wav2Vec2ForMaskedLM"),V1o=o("(Wav2Vec2 model)"),W1o=l(),Yu=a("li"),yee=a("strong"),Q1o=o("xlm"),H1o=o(" \u2014 "),jP=a("a"),U1o=o("XLMWithLMHeadModel"),J1o=o(" (XLM model)"),Y1o=l(),Ku=a("li"),wee=a("strong"),K1o=o("xlm-roberta"),Z1o=o(" \u2014 "),NP=a("a"),e4o=o("XLMRobertaForMaskedLM"),o4o=o(" (XLM-RoBERTa model)"),r4o=l(),Zu=a("li"),Aee=a("strong"),t4o=o("xlm-roberta-xl"),a4o=o(" \u2014 "),DP=a("a"),n4o=o("XLMRobertaXLForMaskedLM"),s4o=o(" (XLM-RoBERTa-XL model)"),l4o=l(),e1=a("li"),Lee=a("strong"),i4o=o("yoso"),d4o=o(" \u2014 "),qP=a("a"),c4o=o("YosoForMaskedLM"),f4o=o(" (YOSO model)"),m4o=l(),o1=a("p"),g4o=o("The model is set in evaluation mode by default using "),Bee=a("code"),h4o=o("model.eval()"),p4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kee=a("code"),_4o=o("model.train()"),u4o=l(),xee=a("p"),b4o=o("Examples:"),v4o=l(),f(iE.$$.fragment),ELe=l(),Ki=a("h2"),r1=a("a"),Ree=a("span"),f(dE.$$.fragment),T4o=l(),See=a("span"),F4o=o("AutoModelForSeq2SeqLM"),yLe=l(),Uo=a("div"),f(cE.$$.fragment),C4o=l(),Zi=a("p"),M4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Pee=a("code"),E4o=o("from_pretrained()"),y4o=o("class method or the "),$ee=a("code"),w4o=o("from_config()"),A4o=o(`class
method.`),L4o=l(),fE=a("p"),B4o=o("This class cannot be instantiated directly using "),Iee=a("code"),k4o=o("__init__()"),x4o=o(" (throws an error)."),R4o=l(),Or=a("div"),f(mE.$$.fragment),S4o=l(),jee=a("p"),P4o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$4o=l(),ed=a("p"),I4o=o(`Note:
Loading a model from its configuration file does `),Nee=a("strong"),j4o=o("not"),N4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dee=a("code"),D4o=o("from_pretrained()"),q4o=o("to load the model weights."),G4o=l(),qee=a("p"),O4o=o("Examples:"),X4o=l(),f(gE.$$.fragment),z4o=l(),Pe=a("div"),f(hE.$$.fragment),V4o=l(),Gee=a("p"),W4o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Q4o=l(),Xa=a("p"),H4o=o("The model class to instantiate is selected based on the "),Oee=a("code"),U4o=o("model_type"),J4o=o(` property of the config object (either
passed as an argument or loaded from `),Xee=a("code"),Y4o=o("pretrained_model_name_or_path"),K4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zee=a("code"),Z4o=o("pretrained_model_name_or_path"),ebo=o(":"),obo=l(),ae=a("ul"),t1=a("li"),Vee=a("strong"),rbo=o("bart"),tbo=o(" \u2014 "),GP=a("a"),abo=o("BartForConditionalGeneration"),nbo=o(" (BART model)"),sbo=l(),a1=a("li"),Wee=a("strong"),lbo=o("bigbird_pegasus"),ibo=o(" \u2014 "),OP=a("a"),dbo=o("BigBirdPegasusForConditionalGeneration"),cbo=o(" (BigBirdPegasus model)"),fbo=l(),n1=a("li"),Qee=a("strong"),mbo=o("blenderbot"),gbo=o(" \u2014 "),XP=a("a"),hbo=o("BlenderbotForConditionalGeneration"),pbo=o(" (Blenderbot model)"),_bo=l(),s1=a("li"),Hee=a("strong"),ubo=o("blenderbot-small"),bbo=o(" \u2014 "),zP=a("a"),vbo=o("BlenderbotSmallForConditionalGeneration"),Tbo=o(" (BlenderbotSmall model)"),Fbo=l(),l1=a("li"),Uee=a("strong"),Cbo=o("encoder-decoder"),Mbo=o(" \u2014 "),VP=a("a"),Ebo=o("EncoderDecoderModel"),ybo=o(" (Encoder decoder model)"),wbo=l(),i1=a("li"),Jee=a("strong"),Abo=o("fsmt"),Lbo=o(" \u2014 "),WP=a("a"),Bbo=o("FSMTForConditionalGeneration"),kbo=o(" (FairSeq Machine-Translation model)"),xbo=l(),d1=a("li"),Yee=a("strong"),Rbo=o("led"),Sbo=o(" \u2014 "),QP=a("a"),Pbo=o("LEDForConditionalGeneration"),$bo=o(" (LED model)"),Ibo=l(),c1=a("li"),Kee=a("strong"),jbo=o("m2m_100"),Nbo=o(" \u2014 "),HP=a("a"),Dbo=o("M2M100ForConditionalGeneration"),qbo=o(" (M2M100 model)"),Gbo=l(),f1=a("li"),Zee=a("strong"),Obo=o("marian"),Xbo=o(" \u2014 "),UP=a("a"),zbo=o("MarianMTModel"),Vbo=o(" (Marian model)"),Wbo=l(),m1=a("li"),eoe=a("strong"),Qbo=o("mbart"),Hbo=o(" \u2014 "),JP=a("a"),Ubo=o("MBartForConditionalGeneration"),Jbo=o(" (mBART model)"),Ybo=l(),g1=a("li"),ooe=a("strong"),Kbo=o("mt5"),Zbo=o(" \u2014 "),YP=a("a"),e5o=o("MT5ForConditionalGeneration"),o5o=o(" (mT5 model)"),r5o=l(),h1=a("li"),roe=a("strong"),t5o=o("pegasus"),a5o=o(" \u2014 "),KP=a("a"),n5o=o("PegasusForConditionalGeneration"),s5o=o(" (Pegasus model)"),l5o=l(),p1=a("li"),toe=a("strong"),i5o=o("plbart"),d5o=o(" \u2014 "),ZP=a("a"),c5o=o("PLBartForConditionalGeneration"),f5o=o(" (PLBart model)"),m5o=l(),_1=a("li"),aoe=a("strong"),g5o=o("prophetnet"),h5o=o(" \u2014 "),e$=a("a"),p5o=o("ProphetNetForConditionalGeneration"),_5o=o(" (ProphetNet model)"),u5o=l(),u1=a("li"),noe=a("strong"),b5o=o("t5"),v5o=o(" \u2014 "),o$=a("a"),T5o=o("T5ForConditionalGeneration"),F5o=o(" (T5 model)"),C5o=l(),b1=a("li"),soe=a("strong"),M5o=o("xlm-prophetnet"),E5o=o(" \u2014 "),r$=a("a"),y5o=o("XLMProphetNetForConditionalGeneration"),w5o=o(" (XLMProphetNet model)"),A5o=l(),v1=a("p"),L5o=o("The model is set in evaluation mode by default using "),loe=a("code"),B5o=o("model.eval()"),k5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ioe=a("code"),x5o=o("model.train()"),R5o=l(),doe=a("p"),S5o=o("Examples:"),P5o=l(),f(pE.$$.fragment),wLe=l(),od=a("h2"),T1=a("a"),coe=a("span"),f(_E.$$.fragment),$5o=l(),foe=a("span"),I5o=o("AutoModelForSequenceClassification"),ALe=l(),Jo=a("div"),f(uE.$$.fragment),j5o=l(),rd=a("p"),N5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),moe=a("code"),D5o=o("from_pretrained()"),q5o=o("class method or the "),goe=a("code"),G5o=o("from_config()"),O5o=o(`class
method.`),X5o=l(),bE=a("p"),z5o=o("This class cannot be instantiated directly using "),hoe=a("code"),V5o=o("__init__()"),W5o=o(" (throws an error)."),Q5o=l(),Xr=a("div"),f(vE.$$.fragment),H5o=l(),poe=a("p"),U5o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),J5o=l(),td=a("p"),Y5o=o(`Note:
Loading a model from its configuration file does `),_oe=a("strong"),K5o=o("not"),Z5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uoe=a("code"),e2o=o("from_pretrained()"),o2o=o("to load the model weights."),r2o=l(),boe=a("p"),t2o=o("Examples:"),a2o=l(),f(TE.$$.fragment),n2o=l(),$e=a("div"),f(FE.$$.fragment),s2o=l(),voe=a("p"),l2o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),i2o=l(),za=a("p"),d2o=o("The model class to instantiate is selected based on the "),Toe=a("code"),c2o=o("model_type"),f2o=o(` property of the config object (either
passed as an argument or loaded from `),Foe=a("code"),m2o=o("pretrained_model_name_or_path"),g2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Coe=a("code"),h2o=o("pretrained_model_name_or_path"),p2o=o(":"),_2o=l(),A=a("ul"),F1=a("li"),Moe=a("strong"),u2o=o("albert"),b2o=o(" \u2014 "),t$=a("a"),v2o=o("AlbertForSequenceClassification"),T2o=o(" (ALBERT model)"),F2o=l(),C1=a("li"),Eoe=a("strong"),C2o=o("bart"),M2o=o(" \u2014 "),a$=a("a"),E2o=o("BartForSequenceClassification"),y2o=o(" (BART model)"),w2o=l(),M1=a("li"),yoe=a("strong"),A2o=o("bert"),L2o=o(" \u2014 "),n$=a("a"),B2o=o("BertForSequenceClassification"),k2o=o(" (BERT model)"),x2o=l(),E1=a("li"),woe=a("strong"),R2o=o("big_bird"),S2o=o(" \u2014 "),s$=a("a"),P2o=o("BigBirdForSequenceClassification"),$2o=o(" (BigBird model)"),I2o=l(),y1=a("li"),Aoe=a("strong"),j2o=o("bigbird_pegasus"),N2o=o(" \u2014 "),l$=a("a"),D2o=o("BigBirdPegasusForSequenceClassification"),q2o=o(" (BigBirdPegasus model)"),G2o=l(),w1=a("li"),Loe=a("strong"),O2o=o("camembert"),X2o=o(" \u2014 "),i$=a("a"),z2o=o("CamembertForSequenceClassification"),V2o=o(" (CamemBERT model)"),W2o=l(),A1=a("li"),Boe=a("strong"),Q2o=o("canine"),H2o=o(" \u2014 "),d$=a("a"),U2o=o("CanineForSequenceClassification"),J2o=o(" (Canine model)"),Y2o=l(),L1=a("li"),koe=a("strong"),K2o=o("convbert"),Z2o=o(" \u2014 "),c$=a("a"),evo=o("ConvBertForSequenceClassification"),ovo=o(" (ConvBERT model)"),rvo=l(),B1=a("li"),xoe=a("strong"),tvo=o("ctrl"),avo=o(" \u2014 "),f$=a("a"),nvo=o("CTRLForSequenceClassification"),svo=o(" (CTRL model)"),lvo=l(),k1=a("li"),Roe=a("strong"),ivo=o("deberta"),dvo=o(" \u2014 "),m$=a("a"),cvo=o("DebertaForSequenceClassification"),fvo=o(" (DeBERTa model)"),mvo=l(),x1=a("li"),Soe=a("strong"),gvo=o("deberta-v2"),hvo=o(" \u2014 "),g$=a("a"),pvo=o("DebertaV2ForSequenceClassification"),_vo=o(" (DeBERTa-v2 model)"),uvo=l(),R1=a("li"),Poe=a("strong"),bvo=o("distilbert"),vvo=o(" \u2014 "),h$=a("a"),Tvo=o("DistilBertForSequenceClassification"),Fvo=o(" (DistilBERT model)"),Cvo=l(),S1=a("li"),$oe=a("strong"),Mvo=o("electra"),Evo=o(" \u2014 "),p$=a("a"),yvo=o("ElectraForSequenceClassification"),wvo=o(" (ELECTRA model)"),Avo=l(),P1=a("li"),Ioe=a("strong"),Lvo=o("flaubert"),Bvo=o(" \u2014 "),_$=a("a"),kvo=o("FlaubertForSequenceClassification"),xvo=o(" (FlauBERT model)"),Rvo=l(),$1=a("li"),joe=a("strong"),Svo=o("fnet"),Pvo=o(" \u2014 "),u$=a("a"),$vo=o("FNetForSequenceClassification"),Ivo=o(" (FNet model)"),jvo=l(),I1=a("li"),Noe=a("strong"),Nvo=o("funnel"),Dvo=o(" \u2014 "),b$=a("a"),qvo=o("FunnelForSequenceClassification"),Gvo=o(" (Funnel Transformer model)"),Ovo=l(),j1=a("li"),Doe=a("strong"),Xvo=o("gpt2"),zvo=o(" \u2014 "),v$=a("a"),Vvo=o("GPT2ForSequenceClassification"),Wvo=o(" (OpenAI GPT-2 model)"),Qvo=l(),N1=a("li"),qoe=a("strong"),Hvo=o("gpt_neo"),Uvo=o(" \u2014 "),T$=a("a"),Jvo=o("GPTNeoForSequenceClassification"),Yvo=o(" (GPT Neo model)"),Kvo=l(),D1=a("li"),Goe=a("strong"),Zvo=o("gptj"),eTo=o(" \u2014 "),F$=a("a"),oTo=o("GPTJForSequenceClassification"),rTo=o(" (GPT-J model)"),tTo=l(),q1=a("li"),Ooe=a("strong"),aTo=o("ibert"),nTo=o(" \u2014 "),C$=a("a"),sTo=o("IBertForSequenceClassification"),lTo=o(" (I-BERT model)"),iTo=l(),G1=a("li"),Xoe=a("strong"),dTo=o("layoutlm"),cTo=o(" \u2014 "),M$=a("a"),fTo=o("LayoutLMForSequenceClassification"),mTo=o(" (LayoutLM model)"),gTo=l(),O1=a("li"),zoe=a("strong"),hTo=o("layoutlmv2"),pTo=o(" \u2014 "),E$=a("a"),_To=o("LayoutLMv2ForSequenceClassification"),uTo=o(" (LayoutLMv2 model)"),bTo=l(),X1=a("li"),Voe=a("strong"),vTo=o("led"),TTo=o(" \u2014 "),y$=a("a"),FTo=o("LEDForSequenceClassification"),CTo=o(" (LED model)"),MTo=l(),z1=a("li"),Woe=a("strong"),ETo=o("longformer"),yTo=o(" \u2014 "),w$=a("a"),wTo=o("LongformerForSequenceClassification"),ATo=o(" (Longformer model)"),LTo=l(),V1=a("li"),Qoe=a("strong"),BTo=o("mbart"),kTo=o(" \u2014 "),A$=a("a"),xTo=o("MBartForSequenceClassification"),RTo=o(" (mBART model)"),STo=l(),W1=a("li"),Hoe=a("strong"),PTo=o("megatron-bert"),$To=o(" \u2014 "),L$=a("a"),ITo=o("MegatronBertForSequenceClassification"),jTo=o(" (MegatronBert model)"),NTo=l(),Q1=a("li"),Uoe=a("strong"),DTo=o("mobilebert"),qTo=o(" \u2014 "),B$=a("a"),GTo=o("MobileBertForSequenceClassification"),OTo=o(" (MobileBERT model)"),XTo=l(),H1=a("li"),Joe=a("strong"),zTo=o("mpnet"),VTo=o(" \u2014 "),k$=a("a"),WTo=o("MPNetForSequenceClassification"),QTo=o(" (MPNet model)"),HTo=l(),U1=a("li"),Yoe=a("strong"),UTo=o("nystromformer"),JTo=o(" \u2014 "),x$=a("a"),YTo=o("NystromformerForSequenceClassification"),KTo=o(" (Nystromformer model)"),ZTo=l(),J1=a("li"),Koe=a("strong"),e7o=o("openai-gpt"),o7o=o(" \u2014 "),R$=a("a"),r7o=o("OpenAIGPTForSequenceClassification"),t7o=o(" (OpenAI GPT model)"),a7o=l(),Y1=a("li"),Zoe=a("strong"),n7o=o("perceiver"),s7o=o(" \u2014 "),S$=a("a"),l7o=o("PerceiverForSequenceClassification"),i7o=o(" (Perceiver model)"),d7o=l(),K1=a("li"),ere=a("strong"),c7o=o("plbart"),f7o=o(" \u2014 "),P$=a("a"),m7o=o("PLBartForSequenceClassification"),g7o=o(" (PLBart model)"),h7o=l(),Z1=a("li"),ore=a("strong"),p7o=o("qdqbert"),_7o=o(" \u2014 "),$$=a("a"),u7o=o("QDQBertForSequenceClassification"),b7o=o(" (QDQBert model)"),v7o=l(),e4=a("li"),rre=a("strong"),T7o=o("reformer"),F7o=o(" \u2014 "),I$=a("a"),C7o=o("ReformerForSequenceClassification"),M7o=o(" (Reformer model)"),E7o=l(),o4=a("li"),tre=a("strong"),y7o=o("rembert"),w7o=o(" \u2014 "),j$=a("a"),A7o=o("RemBertForSequenceClassification"),L7o=o(" (RemBERT model)"),B7o=l(),r4=a("li"),are=a("strong"),k7o=o("roberta"),x7o=o(" \u2014 "),N$=a("a"),R7o=o("RobertaForSequenceClassification"),S7o=o(" (RoBERTa model)"),P7o=l(),t4=a("li"),nre=a("strong"),$7o=o("roformer"),I7o=o(" \u2014 "),D$=a("a"),j7o=o("RoFormerForSequenceClassification"),N7o=o(" (RoFormer model)"),D7o=l(),a4=a("li"),sre=a("strong"),q7o=o("squeezebert"),G7o=o(" \u2014 "),q$=a("a"),O7o=o("SqueezeBertForSequenceClassification"),X7o=o(" (SqueezeBERT model)"),z7o=l(),n4=a("li"),lre=a("strong"),V7o=o("tapas"),W7o=o(" \u2014 "),G$=a("a"),Q7o=o("TapasForSequenceClassification"),H7o=o(" (TAPAS model)"),U7o=l(),s4=a("li"),ire=a("strong"),J7o=o("transfo-xl"),Y7o=o(" \u2014 "),O$=a("a"),K7o=o("TransfoXLForSequenceClassification"),Z7o=o(" (Transformer-XL model)"),e8o=l(),l4=a("li"),dre=a("strong"),o8o=o("xlm"),r8o=o(" \u2014 "),X$=a("a"),t8o=o("XLMForSequenceClassification"),a8o=o(" (XLM model)"),n8o=l(),i4=a("li"),cre=a("strong"),s8o=o("xlm-roberta"),l8o=o(" \u2014 "),z$=a("a"),i8o=o("XLMRobertaForSequenceClassification"),d8o=o(" (XLM-RoBERTa model)"),c8o=l(),d4=a("li"),fre=a("strong"),f8o=o("xlm-roberta-xl"),m8o=o(" \u2014 "),V$=a("a"),g8o=o("XLMRobertaXLForSequenceClassification"),h8o=o(" (XLM-RoBERTa-XL model)"),p8o=l(),c4=a("li"),mre=a("strong"),_8o=o("xlnet"),u8o=o(" \u2014 "),W$=a("a"),b8o=o("XLNetForSequenceClassification"),v8o=o(" (XLNet model)"),T8o=l(),f4=a("li"),gre=a("strong"),F8o=o("yoso"),C8o=o(" \u2014 "),Q$=a("a"),M8o=o("YosoForSequenceClassification"),E8o=o(" (YOSO model)"),y8o=l(),m4=a("p"),w8o=o("The model is set in evaluation mode by default using "),hre=a("code"),A8o=o("model.eval()"),L8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pre=a("code"),B8o=o("model.train()"),k8o=l(),_re=a("p"),x8o=o("Examples:"),R8o=l(),f(CE.$$.fragment),LLe=l(),ad=a("h2"),g4=a("a"),ure=a("span"),f(ME.$$.fragment),S8o=l(),bre=a("span"),P8o=o("AutoModelForMultipleChoice"),BLe=l(),Yo=a("div"),f(EE.$$.fragment),$8o=l(),nd=a("p"),I8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vre=a("code"),j8o=o("from_pretrained()"),N8o=o("class method or the "),Tre=a("code"),D8o=o("from_config()"),q8o=o(`class
method.`),G8o=l(),yE=a("p"),O8o=o("This class cannot be instantiated directly using "),Fre=a("code"),X8o=o("__init__()"),z8o=o(" (throws an error)."),V8o=l(),zr=a("div"),f(wE.$$.fragment),W8o=l(),Cre=a("p"),Q8o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),H8o=l(),sd=a("p"),U8o=o(`Note:
Loading a model from its configuration file does `),Mre=a("strong"),J8o=o("not"),Y8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=a("code"),K8o=o("from_pretrained()"),Z8o=o("to load the model weights."),eFo=l(),yre=a("p"),oFo=o("Examples:"),rFo=l(),f(AE.$$.fragment),tFo=l(),Ie=a("div"),f(LE.$$.fragment),aFo=l(),wre=a("p"),nFo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sFo=l(),Va=a("p"),lFo=o("The model class to instantiate is selected based on the "),Are=a("code"),iFo=o("model_type"),dFo=o(` property of the config object (either
passed as an argument or loaded from `),Lre=a("code"),cFo=o("pretrained_model_name_or_path"),fFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bre=a("code"),mFo=o("pretrained_model_name_or_path"),gFo=o(":"),hFo=l(),G=a("ul"),h4=a("li"),kre=a("strong"),pFo=o("albert"),_Fo=o(" \u2014 "),H$=a("a"),uFo=o("AlbertForMultipleChoice"),bFo=o(" (ALBERT model)"),vFo=l(),p4=a("li"),xre=a("strong"),TFo=o("bert"),FFo=o(" \u2014 "),U$=a("a"),CFo=o("BertForMultipleChoice"),MFo=o(" (BERT model)"),EFo=l(),_4=a("li"),Rre=a("strong"),yFo=o("big_bird"),wFo=o(" \u2014 "),J$=a("a"),AFo=o("BigBirdForMultipleChoice"),LFo=o(" (BigBird model)"),BFo=l(),u4=a("li"),Sre=a("strong"),kFo=o("camembert"),xFo=o(" \u2014 "),Y$=a("a"),RFo=o("CamembertForMultipleChoice"),SFo=o(" (CamemBERT model)"),PFo=l(),b4=a("li"),Pre=a("strong"),$Fo=o("canine"),IFo=o(" \u2014 "),K$=a("a"),jFo=o("CanineForMultipleChoice"),NFo=o(" (Canine model)"),DFo=l(),v4=a("li"),$re=a("strong"),qFo=o("convbert"),GFo=o(" \u2014 "),Z$=a("a"),OFo=o("ConvBertForMultipleChoice"),XFo=o(" (ConvBERT model)"),zFo=l(),T4=a("li"),Ire=a("strong"),VFo=o("distilbert"),WFo=o(" \u2014 "),eI=a("a"),QFo=o("DistilBertForMultipleChoice"),HFo=o(" (DistilBERT model)"),UFo=l(),F4=a("li"),jre=a("strong"),JFo=o("electra"),YFo=o(" \u2014 "),oI=a("a"),KFo=o("ElectraForMultipleChoice"),ZFo=o(" (ELECTRA model)"),eCo=l(),C4=a("li"),Nre=a("strong"),oCo=o("flaubert"),rCo=o(" \u2014 "),rI=a("a"),tCo=o("FlaubertForMultipleChoice"),aCo=o(" (FlauBERT model)"),nCo=l(),M4=a("li"),Dre=a("strong"),sCo=o("fnet"),lCo=o(" \u2014 "),tI=a("a"),iCo=o("FNetForMultipleChoice"),dCo=o(" (FNet model)"),cCo=l(),E4=a("li"),qre=a("strong"),fCo=o("funnel"),mCo=o(" \u2014 "),aI=a("a"),gCo=o("FunnelForMultipleChoice"),hCo=o(" (Funnel Transformer model)"),pCo=l(),y4=a("li"),Gre=a("strong"),_Co=o("ibert"),uCo=o(" \u2014 "),nI=a("a"),bCo=o("IBertForMultipleChoice"),vCo=o(" (I-BERT model)"),TCo=l(),w4=a("li"),Ore=a("strong"),FCo=o("longformer"),CCo=o(" \u2014 "),sI=a("a"),MCo=o("LongformerForMultipleChoice"),ECo=o(" (Longformer model)"),yCo=l(),A4=a("li"),Xre=a("strong"),wCo=o("megatron-bert"),ACo=o(" \u2014 "),lI=a("a"),LCo=o("MegatronBertForMultipleChoice"),BCo=o(" (MegatronBert model)"),kCo=l(),L4=a("li"),zre=a("strong"),xCo=o("mobilebert"),RCo=o(" \u2014 "),iI=a("a"),SCo=o("MobileBertForMultipleChoice"),PCo=o(" (MobileBERT model)"),$Co=l(),B4=a("li"),Vre=a("strong"),ICo=o("mpnet"),jCo=o(" \u2014 "),dI=a("a"),NCo=o("MPNetForMultipleChoice"),DCo=o(" (MPNet model)"),qCo=l(),k4=a("li"),Wre=a("strong"),GCo=o("nystromformer"),OCo=o(" \u2014 "),cI=a("a"),XCo=o("NystromformerForMultipleChoice"),zCo=o(" (Nystromformer model)"),VCo=l(),x4=a("li"),Qre=a("strong"),WCo=o("qdqbert"),QCo=o(" \u2014 "),fI=a("a"),HCo=o("QDQBertForMultipleChoice"),UCo=o(" (QDQBert model)"),JCo=l(),R4=a("li"),Hre=a("strong"),YCo=o("rembert"),KCo=o(" \u2014 "),mI=a("a"),ZCo=o("RemBertForMultipleChoice"),eMo=o(" (RemBERT model)"),oMo=l(),S4=a("li"),Ure=a("strong"),rMo=o("roberta"),tMo=o(" \u2014 "),gI=a("a"),aMo=o("RobertaForMultipleChoice"),nMo=o(" (RoBERTa model)"),sMo=l(),P4=a("li"),Jre=a("strong"),lMo=o("roformer"),iMo=o(" \u2014 "),hI=a("a"),dMo=o("RoFormerForMultipleChoice"),cMo=o(" (RoFormer model)"),fMo=l(),$4=a("li"),Yre=a("strong"),mMo=o("squeezebert"),gMo=o(" \u2014 "),pI=a("a"),hMo=o("SqueezeBertForMultipleChoice"),pMo=o(" (SqueezeBERT model)"),_Mo=l(),I4=a("li"),Kre=a("strong"),uMo=o("xlm"),bMo=o(" \u2014 "),_I=a("a"),vMo=o("XLMForMultipleChoice"),TMo=o(" (XLM model)"),FMo=l(),j4=a("li"),Zre=a("strong"),CMo=o("xlm-roberta"),MMo=o(" \u2014 "),uI=a("a"),EMo=o("XLMRobertaForMultipleChoice"),yMo=o(" (XLM-RoBERTa model)"),wMo=l(),N4=a("li"),ete=a("strong"),AMo=o("xlm-roberta-xl"),LMo=o(" \u2014 "),bI=a("a"),BMo=o("XLMRobertaXLForMultipleChoice"),kMo=o(" (XLM-RoBERTa-XL model)"),xMo=l(),D4=a("li"),ote=a("strong"),RMo=o("xlnet"),SMo=o(" \u2014 "),vI=a("a"),PMo=o("XLNetForMultipleChoice"),$Mo=o(" (XLNet model)"),IMo=l(),q4=a("li"),rte=a("strong"),jMo=o("yoso"),NMo=o(" \u2014 "),TI=a("a"),DMo=o("YosoForMultipleChoice"),qMo=o(" (YOSO model)"),GMo=l(),G4=a("p"),OMo=o("The model is set in evaluation mode by default using "),tte=a("code"),XMo=o("model.eval()"),zMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ate=a("code"),VMo=o("model.train()"),WMo=l(),nte=a("p"),QMo=o("Examples:"),HMo=l(),f(BE.$$.fragment),kLe=l(),ld=a("h2"),O4=a("a"),ste=a("span"),f(kE.$$.fragment),UMo=l(),lte=a("span"),JMo=o("AutoModelForNextSentencePrediction"),xLe=l(),Ko=a("div"),f(xE.$$.fragment),YMo=l(),id=a("p"),KMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ite=a("code"),ZMo=o("from_pretrained()"),eEo=o("class method or the "),dte=a("code"),oEo=o("from_config()"),rEo=o(`class
method.`),tEo=l(),RE=a("p"),aEo=o("This class cannot be instantiated directly using "),cte=a("code"),nEo=o("__init__()"),sEo=o(" (throws an error)."),lEo=l(),Vr=a("div"),f(SE.$$.fragment),iEo=l(),fte=a("p"),dEo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cEo=l(),dd=a("p"),fEo=o(`Note:
Loading a model from its configuration file does `),mte=a("strong"),mEo=o("not"),gEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gte=a("code"),hEo=o("from_pretrained()"),pEo=o("to load the model weights."),_Eo=l(),hte=a("p"),uEo=o("Examples:"),bEo=l(),f(PE.$$.fragment),vEo=l(),je=a("div"),f($E.$$.fragment),TEo=l(),pte=a("p"),FEo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),CEo=l(),Wa=a("p"),MEo=o("The model class to instantiate is selected based on the "),_te=a("code"),EEo=o("model_type"),yEo=o(` property of the config object (either
passed as an argument or loaded from `),ute=a("code"),wEo=o("pretrained_model_name_or_path"),AEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bte=a("code"),LEo=o("pretrained_model_name_or_path"),BEo=o(":"),kEo=l(),na=a("ul"),X4=a("li"),vte=a("strong"),xEo=o("bert"),REo=o(" \u2014 "),FI=a("a"),SEo=o("BertForNextSentencePrediction"),PEo=o(" (BERT model)"),$Eo=l(),z4=a("li"),Tte=a("strong"),IEo=o("fnet"),jEo=o(" \u2014 "),CI=a("a"),NEo=o("FNetForNextSentencePrediction"),DEo=o(" (FNet model)"),qEo=l(),V4=a("li"),Fte=a("strong"),GEo=o("megatron-bert"),OEo=o(" \u2014 "),MI=a("a"),XEo=o("MegatronBertForNextSentencePrediction"),zEo=o(" (MegatronBert model)"),VEo=l(),W4=a("li"),Cte=a("strong"),WEo=o("mobilebert"),QEo=o(" \u2014 "),EI=a("a"),HEo=o("MobileBertForNextSentencePrediction"),UEo=o(" (MobileBERT model)"),JEo=l(),Q4=a("li"),Mte=a("strong"),YEo=o("qdqbert"),KEo=o(" \u2014 "),yI=a("a"),ZEo=o("QDQBertForNextSentencePrediction"),e3o=o(" (QDQBert model)"),o3o=l(),H4=a("p"),r3o=o("The model is set in evaluation mode by default using "),Ete=a("code"),t3o=o("model.eval()"),a3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yte=a("code"),n3o=o("model.train()"),s3o=l(),wte=a("p"),l3o=o("Examples:"),i3o=l(),f(IE.$$.fragment),RLe=l(),cd=a("h2"),U4=a("a"),Ate=a("span"),f(jE.$$.fragment),d3o=l(),Lte=a("span"),c3o=o("AutoModelForTokenClassification"),SLe=l(),Zo=a("div"),f(NE.$$.fragment),f3o=l(),fd=a("p"),m3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Bte=a("code"),g3o=o("from_pretrained()"),h3o=o("class method or the "),kte=a("code"),p3o=o("from_config()"),_3o=o(`class
method.`),u3o=l(),DE=a("p"),b3o=o("This class cannot be instantiated directly using "),xte=a("code"),v3o=o("__init__()"),T3o=o(" (throws an error)."),F3o=l(),Wr=a("div"),f(qE.$$.fragment),C3o=l(),Rte=a("p"),M3o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),E3o=l(),md=a("p"),y3o=o(`Note:
Loading a model from its configuration file does `),Ste=a("strong"),w3o=o("not"),A3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pte=a("code"),L3o=o("from_pretrained()"),B3o=o("to load the model weights."),k3o=l(),$te=a("p"),x3o=o("Examples:"),R3o=l(),f(GE.$$.fragment),S3o=l(),Ne=a("div"),f(OE.$$.fragment),P3o=l(),Ite=a("p"),$3o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),I3o=l(),Qa=a("p"),j3o=o("The model class to instantiate is selected based on the "),jte=a("code"),N3o=o("model_type"),D3o=o(` property of the config object (either
passed as an argument or loaded from `),Nte=a("code"),q3o=o("pretrained_model_name_or_path"),G3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dte=a("code"),O3o=o("pretrained_model_name_or_path"),X3o=o(":"),z3o=l(),D=a("ul"),J4=a("li"),qte=a("strong"),V3o=o("albert"),W3o=o(" \u2014 "),wI=a("a"),Q3o=o("AlbertForTokenClassification"),H3o=o(" (ALBERT model)"),U3o=l(),Y4=a("li"),Gte=a("strong"),J3o=o("bert"),Y3o=o(" \u2014 "),AI=a("a"),K3o=o("BertForTokenClassification"),Z3o=o(" (BERT model)"),eyo=l(),K4=a("li"),Ote=a("strong"),oyo=o("big_bird"),ryo=o(" \u2014 "),LI=a("a"),tyo=o("BigBirdForTokenClassification"),ayo=o(" (BigBird model)"),nyo=l(),Z4=a("li"),Xte=a("strong"),syo=o("camembert"),lyo=o(" \u2014 "),BI=a("a"),iyo=o("CamembertForTokenClassification"),dyo=o(" (CamemBERT model)"),cyo=l(),eb=a("li"),zte=a("strong"),fyo=o("canine"),myo=o(" \u2014 "),kI=a("a"),gyo=o("CanineForTokenClassification"),hyo=o(" (Canine model)"),pyo=l(),ob=a("li"),Vte=a("strong"),_yo=o("convbert"),uyo=o(" \u2014 "),xI=a("a"),byo=o("ConvBertForTokenClassification"),vyo=o(" (ConvBERT model)"),Tyo=l(),rb=a("li"),Wte=a("strong"),Fyo=o("deberta"),Cyo=o(" \u2014 "),RI=a("a"),Myo=o("DebertaForTokenClassification"),Eyo=o(" (DeBERTa model)"),yyo=l(),tb=a("li"),Qte=a("strong"),wyo=o("deberta-v2"),Ayo=o(" \u2014 "),SI=a("a"),Lyo=o("DebertaV2ForTokenClassification"),Byo=o(" (DeBERTa-v2 model)"),kyo=l(),ab=a("li"),Hte=a("strong"),xyo=o("distilbert"),Ryo=o(" \u2014 "),PI=a("a"),Syo=o("DistilBertForTokenClassification"),Pyo=o(" (DistilBERT model)"),$yo=l(),nb=a("li"),Ute=a("strong"),Iyo=o("electra"),jyo=o(" \u2014 "),$I=a("a"),Nyo=o("ElectraForTokenClassification"),Dyo=o(" (ELECTRA model)"),qyo=l(),sb=a("li"),Jte=a("strong"),Gyo=o("flaubert"),Oyo=o(" \u2014 "),II=a("a"),Xyo=o("FlaubertForTokenClassification"),zyo=o(" (FlauBERT model)"),Vyo=l(),lb=a("li"),Yte=a("strong"),Wyo=o("fnet"),Qyo=o(" \u2014 "),jI=a("a"),Hyo=o("FNetForTokenClassification"),Uyo=o(" (FNet model)"),Jyo=l(),ib=a("li"),Kte=a("strong"),Yyo=o("funnel"),Kyo=o(" \u2014 "),NI=a("a"),Zyo=o("FunnelForTokenClassification"),ewo=o(" (Funnel Transformer model)"),owo=l(),db=a("li"),Zte=a("strong"),rwo=o("gpt2"),two=o(" \u2014 "),DI=a("a"),awo=o("GPT2ForTokenClassification"),nwo=o(" (OpenAI GPT-2 model)"),swo=l(),cb=a("li"),eae=a("strong"),lwo=o("ibert"),iwo=o(" \u2014 "),qI=a("a"),dwo=o("IBertForTokenClassification"),cwo=o(" (I-BERT model)"),fwo=l(),fb=a("li"),oae=a("strong"),mwo=o("layoutlm"),gwo=o(" \u2014 "),GI=a("a"),hwo=o("LayoutLMForTokenClassification"),pwo=o(" (LayoutLM model)"),_wo=l(),mb=a("li"),rae=a("strong"),uwo=o("layoutlmv2"),bwo=o(" \u2014 "),OI=a("a"),vwo=o("LayoutLMv2ForTokenClassification"),Two=o(" (LayoutLMv2 model)"),Fwo=l(),gb=a("li"),tae=a("strong"),Cwo=o("longformer"),Mwo=o(" \u2014 "),XI=a("a"),Ewo=o("LongformerForTokenClassification"),ywo=o(" (Longformer model)"),wwo=l(),hb=a("li"),aae=a("strong"),Awo=o("megatron-bert"),Lwo=o(" \u2014 "),zI=a("a"),Bwo=o("MegatronBertForTokenClassification"),kwo=o(" (MegatronBert model)"),xwo=l(),pb=a("li"),nae=a("strong"),Rwo=o("mobilebert"),Swo=o(" \u2014 "),VI=a("a"),Pwo=o("MobileBertForTokenClassification"),$wo=o(" (MobileBERT model)"),Iwo=l(),_b=a("li"),sae=a("strong"),jwo=o("mpnet"),Nwo=o(" \u2014 "),WI=a("a"),Dwo=o("MPNetForTokenClassification"),qwo=o(" (MPNet model)"),Gwo=l(),ub=a("li"),lae=a("strong"),Owo=o("nystromformer"),Xwo=o(" \u2014 "),QI=a("a"),zwo=o("NystromformerForTokenClassification"),Vwo=o(" (Nystromformer model)"),Wwo=l(),bb=a("li"),iae=a("strong"),Qwo=o("qdqbert"),Hwo=o(" \u2014 "),HI=a("a"),Uwo=o("QDQBertForTokenClassification"),Jwo=o(" (QDQBert model)"),Ywo=l(),vb=a("li"),dae=a("strong"),Kwo=o("rembert"),Zwo=o(" \u2014 "),UI=a("a"),eAo=o("RemBertForTokenClassification"),oAo=o(" (RemBERT model)"),rAo=l(),Tb=a("li"),cae=a("strong"),tAo=o("roberta"),aAo=o(" \u2014 "),JI=a("a"),nAo=o("RobertaForTokenClassification"),sAo=o(" (RoBERTa model)"),lAo=l(),Fb=a("li"),fae=a("strong"),iAo=o("roformer"),dAo=o(" \u2014 "),YI=a("a"),cAo=o("RoFormerForTokenClassification"),fAo=o(" (RoFormer model)"),mAo=l(),Cb=a("li"),mae=a("strong"),gAo=o("squeezebert"),hAo=o(" \u2014 "),KI=a("a"),pAo=o("SqueezeBertForTokenClassification"),_Ao=o(" (SqueezeBERT model)"),uAo=l(),Mb=a("li"),gae=a("strong"),bAo=o("xlm"),vAo=o(" \u2014 "),ZI=a("a"),TAo=o("XLMForTokenClassification"),FAo=o(" (XLM model)"),CAo=l(),Eb=a("li"),hae=a("strong"),MAo=o("xlm-roberta"),EAo=o(" \u2014 "),ej=a("a"),yAo=o("XLMRobertaForTokenClassification"),wAo=o(" (XLM-RoBERTa model)"),AAo=l(),yb=a("li"),pae=a("strong"),LAo=o("xlm-roberta-xl"),BAo=o(" \u2014 "),oj=a("a"),kAo=o("XLMRobertaXLForTokenClassification"),xAo=o(" (XLM-RoBERTa-XL model)"),RAo=l(),wb=a("li"),_ae=a("strong"),SAo=o("xlnet"),PAo=o(" \u2014 "),rj=a("a"),$Ao=o("XLNetForTokenClassification"),IAo=o(" (XLNet model)"),jAo=l(),Ab=a("li"),uae=a("strong"),NAo=o("yoso"),DAo=o(" \u2014 "),tj=a("a"),qAo=o("YosoForTokenClassification"),GAo=o(" (YOSO model)"),OAo=l(),Lb=a("p"),XAo=o("The model is set in evaluation mode by default using "),bae=a("code"),zAo=o("model.eval()"),VAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vae=a("code"),WAo=o("model.train()"),QAo=l(),Tae=a("p"),HAo=o("Examples:"),UAo=l(),f(XE.$$.fragment),PLe=l(),gd=a("h2"),Bb=a("a"),Fae=a("span"),f(zE.$$.fragment),JAo=l(),Cae=a("span"),YAo=o("AutoModelForQuestionAnswering"),$Le=l(),er=a("div"),f(VE.$$.fragment),KAo=l(),hd=a("p"),ZAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Mae=a("code"),e6o=o("from_pretrained()"),o6o=o("class method or the "),Eae=a("code"),r6o=o("from_config()"),t6o=o(`class
method.`),a6o=l(),WE=a("p"),n6o=o("This class cannot be instantiated directly using "),yae=a("code"),s6o=o("__init__()"),l6o=o(" (throws an error)."),i6o=l(),Qr=a("div"),f(QE.$$.fragment),d6o=l(),wae=a("p"),c6o=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),f6o=l(),pd=a("p"),m6o=o(`Note:
Loading a model from its configuration file does `),Aae=a("strong"),g6o=o("not"),h6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lae=a("code"),p6o=o("from_pretrained()"),_6o=o("to load the model weights."),u6o=l(),Bae=a("p"),b6o=o("Examples:"),v6o=l(),f(HE.$$.fragment),T6o=l(),De=a("div"),f(UE.$$.fragment),F6o=l(),kae=a("p"),C6o=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),M6o=l(),Ha=a("p"),E6o=o("The model class to instantiate is selected based on the "),xae=a("code"),y6o=o("model_type"),w6o=o(` property of the config object (either
passed as an argument or loaded from `),Rae=a("code"),A6o=o("pretrained_model_name_or_path"),L6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sae=a("code"),B6o=o("pretrained_model_name_or_path"),k6o=o(":"),x6o=l(),R=a("ul"),kb=a("li"),Pae=a("strong"),R6o=o("albert"),S6o=o(" \u2014 "),aj=a("a"),P6o=o("AlbertForQuestionAnswering"),$6o=o(" (ALBERT model)"),I6o=l(),xb=a("li"),$ae=a("strong"),j6o=o("bart"),N6o=o(" \u2014 "),nj=a("a"),D6o=o("BartForQuestionAnswering"),q6o=o(" (BART model)"),G6o=l(),Rb=a("li"),Iae=a("strong"),O6o=o("bert"),X6o=o(" \u2014 "),sj=a("a"),z6o=o("BertForQuestionAnswering"),V6o=o(" (BERT model)"),W6o=l(),Sb=a("li"),jae=a("strong"),Q6o=o("big_bird"),H6o=o(" \u2014 "),lj=a("a"),U6o=o("BigBirdForQuestionAnswering"),J6o=o(" (BigBird model)"),Y6o=l(),Pb=a("li"),Nae=a("strong"),K6o=o("bigbird_pegasus"),Z6o=o(" \u2014 "),ij=a("a"),e0o=o("BigBirdPegasusForQuestionAnswering"),o0o=o(" (BigBirdPegasus model)"),r0o=l(),$b=a("li"),Dae=a("strong"),t0o=o("camembert"),a0o=o(" \u2014 "),dj=a("a"),n0o=o("CamembertForQuestionAnswering"),s0o=o(" (CamemBERT model)"),l0o=l(),Ib=a("li"),qae=a("strong"),i0o=o("canine"),d0o=o(" \u2014 "),cj=a("a"),c0o=o("CanineForQuestionAnswering"),f0o=o(" (Canine model)"),m0o=l(),jb=a("li"),Gae=a("strong"),g0o=o("convbert"),h0o=o(" \u2014 "),fj=a("a"),p0o=o("ConvBertForQuestionAnswering"),_0o=o(" (ConvBERT model)"),u0o=l(),Nb=a("li"),Oae=a("strong"),b0o=o("deberta"),v0o=o(" \u2014 "),mj=a("a"),T0o=o("DebertaForQuestionAnswering"),F0o=o(" (DeBERTa model)"),C0o=l(),Db=a("li"),Xae=a("strong"),M0o=o("deberta-v2"),E0o=o(" \u2014 "),gj=a("a"),y0o=o("DebertaV2ForQuestionAnswering"),w0o=o(" (DeBERTa-v2 model)"),A0o=l(),qb=a("li"),zae=a("strong"),L0o=o("distilbert"),B0o=o(" \u2014 "),hj=a("a"),k0o=o("DistilBertForQuestionAnswering"),x0o=o(" (DistilBERT model)"),R0o=l(),Gb=a("li"),Vae=a("strong"),S0o=o("electra"),P0o=o(" \u2014 "),pj=a("a"),$0o=o("ElectraForQuestionAnswering"),I0o=o(" (ELECTRA model)"),j0o=l(),Ob=a("li"),Wae=a("strong"),N0o=o("flaubert"),D0o=o(" \u2014 "),_j=a("a"),q0o=o("FlaubertForQuestionAnsweringSimple"),G0o=o(" (FlauBERT model)"),O0o=l(),Xb=a("li"),Qae=a("strong"),X0o=o("fnet"),z0o=o(" \u2014 "),uj=a("a"),V0o=o("FNetForQuestionAnswering"),W0o=o(" (FNet model)"),Q0o=l(),zb=a("li"),Hae=a("strong"),H0o=o("funnel"),U0o=o(" \u2014 "),bj=a("a"),J0o=o("FunnelForQuestionAnswering"),Y0o=o(" (Funnel Transformer model)"),K0o=l(),Vb=a("li"),Uae=a("strong"),Z0o=o("gptj"),eLo=o(" \u2014 "),vj=a("a"),oLo=o("GPTJForQuestionAnswering"),rLo=o(" (GPT-J model)"),tLo=l(),Wb=a("li"),Jae=a("strong"),aLo=o("ibert"),nLo=o(" \u2014 "),Tj=a("a"),sLo=o("IBertForQuestionAnswering"),lLo=o(" (I-BERT model)"),iLo=l(),Qb=a("li"),Yae=a("strong"),dLo=o("layoutlmv2"),cLo=o(" \u2014 "),Fj=a("a"),fLo=o("LayoutLMv2ForQuestionAnswering"),mLo=o(" (LayoutLMv2 model)"),gLo=l(),Hb=a("li"),Kae=a("strong"),hLo=o("led"),pLo=o(" \u2014 "),Cj=a("a"),_Lo=o("LEDForQuestionAnswering"),uLo=o(" (LED model)"),bLo=l(),Ub=a("li"),Zae=a("strong"),vLo=o("longformer"),TLo=o(" \u2014 "),Mj=a("a"),FLo=o("LongformerForQuestionAnswering"),CLo=o(" (Longformer model)"),MLo=l(),Jb=a("li"),ene=a("strong"),ELo=o("lxmert"),yLo=o(" \u2014 "),Ej=a("a"),wLo=o("LxmertForQuestionAnswering"),ALo=o(" (LXMERT model)"),LLo=l(),Yb=a("li"),one=a("strong"),BLo=o("mbart"),kLo=o(" \u2014 "),yj=a("a"),xLo=o("MBartForQuestionAnswering"),RLo=o(" (mBART model)"),SLo=l(),Kb=a("li"),rne=a("strong"),PLo=o("megatron-bert"),$Lo=o(" \u2014 "),wj=a("a"),ILo=o("MegatronBertForQuestionAnswering"),jLo=o(" (MegatronBert model)"),NLo=l(),Zb=a("li"),tne=a("strong"),DLo=o("mobilebert"),qLo=o(" \u2014 "),Aj=a("a"),GLo=o("MobileBertForQuestionAnswering"),OLo=o(" (MobileBERT model)"),XLo=l(),e5=a("li"),ane=a("strong"),zLo=o("mpnet"),VLo=o(" \u2014 "),Lj=a("a"),WLo=o("MPNetForQuestionAnswering"),QLo=o(" (MPNet model)"),HLo=l(),o5=a("li"),nne=a("strong"),ULo=o("nystromformer"),JLo=o(" \u2014 "),Bj=a("a"),YLo=o("NystromformerForQuestionAnswering"),KLo=o(" (Nystromformer model)"),ZLo=l(),r5=a("li"),sne=a("strong"),e9o=o("qdqbert"),o9o=o(" \u2014 "),kj=a("a"),r9o=o("QDQBertForQuestionAnswering"),t9o=o(" (QDQBert model)"),a9o=l(),t5=a("li"),lne=a("strong"),n9o=o("reformer"),s9o=o(" \u2014 "),xj=a("a"),l9o=o("ReformerForQuestionAnswering"),i9o=o(" (Reformer model)"),d9o=l(),a5=a("li"),ine=a("strong"),c9o=o("rembert"),f9o=o(" \u2014 "),Rj=a("a"),m9o=o("RemBertForQuestionAnswering"),g9o=o(" (RemBERT model)"),h9o=l(),n5=a("li"),dne=a("strong"),p9o=o("roberta"),_9o=o(" \u2014 "),Sj=a("a"),u9o=o("RobertaForQuestionAnswering"),b9o=o(" (RoBERTa model)"),v9o=l(),s5=a("li"),cne=a("strong"),T9o=o("roformer"),F9o=o(" \u2014 "),Pj=a("a"),C9o=o("RoFormerForQuestionAnswering"),M9o=o(" (RoFormer model)"),E9o=l(),l5=a("li"),fne=a("strong"),y9o=o("splinter"),w9o=o(" \u2014 "),$j=a("a"),A9o=o("SplinterForQuestionAnswering"),L9o=o(" (Splinter model)"),B9o=l(),i5=a("li"),mne=a("strong"),k9o=o("squeezebert"),x9o=o(" \u2014 "),Ij=a("a"),R9o=o("SqueezeBertForQuestionAnswering"),S9o=o(" (SqueezeBERT model)"),P9o=l(),d5=a("li"),gne=a("strong"),$9o=o("xlm"),I9o=o(" \u2014 "),jj=a("a"),j9o=o("XLMForQuestionAnsweringSimple"),N9o=o(" (XLM model)"),D9o=l(),c5=a("li"),hne=a("strong"),q9o=o("xlm-roberta"),G9o=o(" \u2014 "),Nj=a("a"),O9o=o("XLMRobertaForQuestionAnswering"),X9o=o(" (XLM-RoBERTa model)"),z9o=l(),f5=a("li"),pne=a("strong"),V9o=o("xlm-roberta-xl"),W9o=o(" \u2014 "),Dj=a("a"),Q9o=o("XLMRobertaXLForQuestionAnswering"),H9o=o(" (XLM-RoBERTa-XL model)"),U9o=l(),m5=a("li"),_ne=a("strong"),J9o=o("xlnet"),Y9o=o(" \u2014 "),qj=a("a"),K9o=o("XLNetForQuestionAnsweringSimple"),Z9o=o(" (XLNet model)"),eBo=l(),g5=a("li"),une=a("strong"),oBo=o("yoso"),rBo=o(" \u2014 "),Gj=a("a"),tBo=o("YosoForQuestionAnswering"),aBo=o(" (YOSO model)"),nBo=l(),h5=a("p"),sBo=o("The model is set in evaluation mode by default using "),bne=a("code"),lBo=o("model.eval()"),iBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vne=a("code"),dBo=o("model.train()"),cBo=l(),Tne=a("p"),fBo=o("Examples:"),mBo=l(),f(JE.$$.fragment),ILe=l(),_d=a("h2"),p5=a("a"),Fne=a("span"),f(YE.$$.fragment),gBo=l(),Cne=a("span"),hBo=o("AutoModelForTableQuestionAnswering"),jLe=l(),or=a("div"),f(KE.$$.fragment),pBo=l(),ud=a("p"),_Bo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Mne=a("code"),uBo=o("from_pretrained()"),bBo=o("class method or the "),Ene=a("code"),vBo=o("from_config()"),TBo=o(`class
method.`),FBo=l(),ZE=a("p"),CBo=o("This class cannot be instantiated directly using "),yne=a("code"),MBo=o("__init__()"),EBo=o(" (throws an error)."),yBo=l(),Hr=a("div"),f(e3.$$.fragment),wBo=l(),wne=a("p"),ABo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),LBo=l(),bd=a("p"),BBo=o(`Note:
Loading a model from its configuration file does `),Ane=a("strong"),kBo=o("not"),xBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lne=a("code"),RBo=o("from_pretrained()"),SBo=o("to load the model weights."),PBo=l(),Bne=a("p"),$Bo=o("Examples:"),IBo=l(),f(o3.$$.fragment),jBo=l(),qe=a("div"),f(r3.$$.fragment),NBo=l(),kne=a("p"),DBo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qBo=l(),Ua=a("p"),GBo=o("The model class to instantiate is selected based on the "),xne=a("code"),OBo=o("model_type"),XBo=o(` property of the config object (either
passed as an argument or loaded from `),Rne=a("code"),zBo=o("pretrained_model_name_or_path"),VBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sne=a("code"),WBo=o("pretrained_model_name_or_path"),QBo=o(":"),HBo=l(),Pne=a("ul"),_5=a("li"),$ne=a("strong"),UBo=o("tapas"),JBo=o(" \u2014 "),Oj=a("a"),YBo=o("TapasForQuestionAnswering"),KBo=o(" (TAPAS model)"),ZBo=l(),u5=a("p"),eko=o("The model is set in evaluation mode by default using "),Ine=a("code"),oko=o("model.eval()"),rko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jne=a("code"),tko=o("model.train()"),ako=l(),Nne=a("p"),nko=o("Examples:"),sko=l(),f(t3.$$.fragment),NLe=l(),vd=a("h2"),b5=a("a"),Dne=a("span"),f(a3.$$.fragment),lko=l(),qne=a("span"),iko=o("AutoModelForImageClassification"),DLe=l(),rr=a("div"),f(n3.$$.fragment),dko=l(),Td=a("p"),cko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gne=a("code"),fko=o("from_pretrained()"),mko=o("class method or the "),One=a("code"),gko=o("from_config()"),hko=o(`class
method.`),pko=l(),s3=a("p"),_ko=o("This class cannot be instantiated directly using "),Xne=a("code"),uko=o("__init__()"),bko=o(" (throws an error)."),vko=l(),Ur=a("div"),f(l3.$$.fragment),Tko=l(),zne=a("p"),Fko=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Cko=l(),Fd=a("p"),Mko=o(`Note:
Loading a model from its configuration file does `),Vne=a("strong"),Eko=o("not"),yko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wne=a("code"),wko=o("from_pretrained()"),Ako=o("to load the model weights."),Lko=l(),Qne=a("p"),Bko=o("Examples:"),kko=l(),f(i3.$$.fragment),xko=l(),Ge=a("div"),f(d3.$$.fragment),Rko=l(),Hne=a("p"),Sko=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Pko=l(),Ja=a("p"),$ko=o("The model class to instantiate is selected based on the "),Une=a("code"),Iko=o("model_type"),jko=o(` property of the config object (either
passed as an argument or loaded from `),Jne=a("code"),Nko=o("pretrained_model_name_or_path"),Dko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yne=a("code"),qko=o("pretrained_model_name_or_path"),Gko=o(":"),Oko=l(),be=a("ul"),v5=a("li"),Kne=a("strong"),Xko=o("beit"),zko=o(" \u2014 "),Xj=a("a"),Vko=o("BeitForImageClassification"),Wko=o(" (BEiT model)"),Qko=l(),T5=a("li"),Zne=a("strong"),Hko=o("convnext"),Uko=o(" \u2014 "),zj=a("a"),Jko=o("ConvNextForImageClassification"),Yko=o(" (ConvNext model)"),Kko=l(),Rs=a("li"),ese=a("strong"),Zko=o("deit"),exo=o(" \u2014 "),Vj=a("a"),oxo=o("DeiTForImageClassification"),rxo=o(" or "),Wj=a("a"),txo=o("DeiTForImageClassificationWithTeacher"),axo=o(" (DeiT model)"),nxo=l(),F5=a("li"),ose=a("strong"),sxo=o("imagegpt"),lxo=o(" \u2014 "),Qj=a("a"),ixo=o("ImageGPTForImageClassification"),dxo=o(" (ImageGPT model)"),cxo=l(),la=a("li"),rse=a("strong"),fxo=o("perceiver"),mxo=o(" \u2014 "),Hj=a("a"),gxo=o("PerceiverForImageClassificationLearned"),hxo=o(" or "),Uj=a("a"),pxo=o("PerceiverForImageClassificationFourier"),_xo=o(" or "),Jj=a("a"),uxo=o("PerceiverForImageClassificationConvProcessing"),bxo=o(" (Perceiver model)"),vxo=l(),C5=a("li"),tse=a("strong"),Txo=o("poolformer"),Fxo=o(" \u2014 "),Yj=a("a"),Cxo=o("PoolFormerForImageClassification"),Mxo=o(" (PoolFormer model)"),Exo=l(),M5=a("li"),ase=a("strong"),yxo=o("segformer"),wxo=o(" \u2014 "),Kj=a("a"),Axo=o("SegformerForImageClassification"),Lxo=o(" (SegFormer model)"),Bxo=l(),E5=a("li"),nse=a("strong"),kxo=o("swin"),xxo=o(" \u2014 "),Zj=a("a"),Rxo=o("SwinForImageClassification"),Sxo=o(" (Swin model)"),Pxo=l(),y5=a("li"),sse=a("strong"),$xo=o("vit"),Ixo=o(" \u2014 "),eN=a("a"),jxo=o("ViTForImageClassification"),Nxo=o(" (ViT model)"),Dxo=l(),w5=a("p"),qxo=o("The model is set in evaluation mode by default using "),lse=a("code"),Gxo=o("model.eval()"),Oxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ise=a("code"),Xxo=o("model.train()"),zxo=l(),dse=a("p"),Vxo=o("Examples:"),Wxo=l(),f(c3.$$.fragment),qLe=l(),Cd=a("h2"),A5=a("a"),cse=a("span"),f(f3.$$.fragment),Qxo=l(),fse=a("span"),Hxo=o("AutoModelForVision2Seq"),GLe=l(),tr=a("div"),f(m3.$$.fragment),Uxo=l(),Md=a("p"),Jxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mse=a("code"),Yxo=o("from_pretrained()"),Kxo=o("class method or the "),gse=a("code"),Zxo=o("from_config()"),eRo=o(`class
method.`),oRo=l(),g3=a("p"),rRo=o("This class cannot be instantiated directly using "),hse=a("code"),tRo=o("__init__()"),aRo=o(" (throws an error)."),nRo=l(),Jr=a("div"),f(h3.$$.fragment),sRo=l(),pse=a("p"),lRo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),iRo=l(),Ed=a("p"),dRo=o(`Note:
Loading a model from its configuration file does `),_se=a("strong"),cRo=o("not"),fRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),use=a("code"),mRo=o("from_pretrained()"),gRo=o("to load the model weights."),hRo=l(),bse=a("p"),pRo=o("Examples:"),_Ro=l(),f(p3.$$.fragment),uRo=l(),Oe=a("div"),f(_3.$$.fragment),bRo=l(),vse=a("p"),vRo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),TRo=l(),Ya=a("p"),FRo=o("The model class to instantiate is selected based on the "),Tse=a("code"),CRo=o("model_type"),MRo=o(` property of the config object (either
passed as an argument or loaded from `),Fse=a("code"),ERo=o("pretrained_model_name_or_path"),yRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cse=a("code"),wRo=o("pretrained_model_name_or_path"),ARo=o(":"),LRo=l(),Mse=a("ul"),L5=a("li"),Ese=a("strong"),BRo=o("vision-encoder-decoder"),kRo=o(" \u2014 "),oN=a("a"),xRo=o("VisionEncoderDecoderModel"),RRo=o(" (Vision Encoder decoder model)"),SRo=l(),B5=a("p"),PRo=o("The model is set in evaluation mode by default using "),yse=a("code"),$Ro=o("model.eval()"),IRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wse=a("code"),jRo=o("model.train()"),NRo=l(),Ase=a("p"),DRo=o("Examples:"),qRo=l(),f(u3.$$.fragment),OLe=l(),yd=a("h2"),k5=a("a"),Lse=a("span"),f(b3.$$.fragment),GRo=l(),Bse=a("span"),ORo=o("AutoModelForAudioClassification"),XLe=l(),ar=a("div"),f(v3.$$.fragment),XRo=l(),wd=a("p"),zRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),kse=a("code"),VRo=o("from_pretrained()"),WRo=o("class method or the "),xse=a("code"),QRo=o("from_config()"),HRo=o(`class
method.`),URo=l(),T3=a("p"),JRo=o("This class cannot be instantiated directly using "),Rse=a("code"),YRo=o("__init__()"),KRo=o(" (throws an error)."),ZRo=l(),Yr=a("div"),f(F3.$$.fragment),eSo=l(),Sse=a("p"),oSo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),rSo=l(),Ad=a("p"),tSo=o(`Note:
Loading a model from its configuration file does `),Pse=a("strong"),aSo=o("not"),nSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$se=a("code"),sSo=o("from_pretrained()"),lSo=o("to load the model weights."),iSo=l(),Ise=a("p"),dSo=o("Examples:"),cSo=l(),f(C3.$$.fragment),fSo=l(),Xe=a("div"),f(M3.$$.fragment),mSo=l(),jse=a("p"),gSo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),hSo=l(),Ka=a("p"),pSo=o("The model class to instantiate is selected based on the "),Nse=a("code"),_So=o("model_type"),uSo=o(` property of the config object (either
passed as an argument or loaded from `),Dse=a("code"),bSo=o("pretrained_model_name_or_path"),vSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qse=a("code"),TSo=o("pretrained_model_name_or_path"),FSo=o(":"),CSo=l(),ao=a("ul"),x5=a("li"),Gse=a("strong"),MSo=o("hubert"),ESo=o(" \u2014 "),rN=a("a"),ySo=o("HubertForSequenceClassification"),wSo=o(" (Hubert model)"),ASo=l(),R5=a("li"),Ose=a("strong"),LSo=o("sew"),BSo=o(" \u2014 "),tN=a("a"),kSo=o("SEWForSequenceClassification"),xSo=o(" (SEW model)"),RSo=l(),S5=a("li"),Xse=a("strong"),SSo=o("sew-d"),PSo=o(" \u2014 "),aN=a("a"),$So=o("SEWDForSequenceClassification"),ISo=o(" (SEW-D model)"),jSo=l(),P5=a("li"),zse=a("strong"),NSo=o("unispeech"),DSo=o(" \u2014 "),nN=a("a"),qSo=o("UniSpeechForSequenceClassification"),GSo=o(" (UniSpeech model)"),OSo=l(),$5=a("li"),Vse=a("strong"),XSo=o("unispeech-sat"),zSo=o(" \u2014 "),sN=a("a"),VSo=o("UniSpeechSatForSequenceClassification"),WSo=o(" (UniSpeechSat model)"),QSo=l(),I5=a("li"),Wse=a("strong"),HSo=o("wav2vec2"),USo=o(" \u2014 "),lN=a("a"),JSo=o("Wav2Vec2ForSequenceClassification"),YSo=o(" (Wav2Vec2 model)"),KSo=l(),j5=a("li"),Qse=a("strong"),ZSo=o("wavlm"),ePo=o(" \u2014 "),iN=a("a"),oPo=o("WavLMForSequenceClassification"),rPo=o(" (WavLM model)"),tPo=l(),N5=a("p"),aPo=o("The model is set in evaluation mode by default using "),Hse=a("code"),nPo=o("model.eval()"),sPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Use=a("code"),lPo=o("model.train()"),iPo=l(),Jse=a("p"),dPo=o("Examples:"),cPo=l(),f(E3.$$.fragment),zLe=l(),Ld=a("h2"),D5=a("a"),Yse=a("span"),f(y3.$$.fragment),fPo=l(),Kse=a("span"),mPo=o("AutoModelForAudioFrameClassification"),VLe=l(),nr=a("div"),f(w3.$$.fragment),gPo=l(),Bd=a("p"),hPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Zse=a("code"),pPo=o("from_pretrained()"),_Po=o("class method or the "),ele=a("code"),uPo=o("from_config()"),bPo=o(`class
method.`),vPo=l(),A3=a("p"),TPo=o("This class cannot be instantiated directly using "),ole=a("code"),FPo=o("__init__()"),CPo=o(" (throws an error)."),MPo=l(),Kr=a("div"),f(L3.$$.fragment),EPo=l(),rle=a("p"),yPo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),wPo=l(),kd=a("p"),APo=o(`Note:
Loading a model from its configuration file does `),tle=a("strong"),LPo=o("not"),BPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ale=a("code"),kPo=o("from_pretrained()"),xPo=o("to load the model weights."),RPo=l(),nle=a("p"),SPo=o("Examples:"),PPo=l(),f(B3.$$.fragment),$Po=l(),ze=a("div"),f(k3.$$.fragment),IPo=l(),sle=a("p"),jPo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),NPo=l(),Za=a("p"),DPo=o("The model class to instantiate is selected based on the "),lle=a("code"),qPo=o("model_type"),GPo=o(` property of the config object (either
passed as an argument or loaded from `),ile=a("code"),OPo=o("pretrained_model_name_or_path"),XPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dle=a("code"),zPo=o("pretrained_model_name_or_path"),VPo=o(":"),WPo=l(),xd=a("ul"),q5=a("li"),cle=a("strong"),QPo=o("unispeech-sat"),HPo=o(" \u2014 "),dN=a("a"),UPo=o("UniSpeechSatForAudioFrameClassification"),JPo=o(" (UniSpeechSat model)"),YPo=l(),G5=a("li"),fle=a("strong"),KPo=o("wav2vec2"),ZPo=o(" \u2014 "),cN=a("a"),e$o=o("Wav2Vec2ForAudioFrameClassification"),o$o=o(" (Wav2Vec2 model)"),r$o=l(),O5=a("li"),mle=a("strong"),t$o=o("wavlm"),a$o=o(" \u2014 "),fN=a("a"),n$o=o("WavLMForAudioFrameClassification"),s$o=o(" (WavLM model)"),l$o=l(),X5=a("p"),i$o=o("The model is set in evaluation mode by default using "),gle=a("code"),d$o=o("model.eval()"),c$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hle=a("code"),f$o=o("model.train()"),m$o=l(),ple=a("p"),g$o=o("Examples:"),h$o=l(),f(x3.$$.fragment),WLe=l(),Rd=a("h2"),z5=a("a"),_le=a("span"),f(R3.$$.fragment),p$o=l(),ule=a("span"),_$o=o("AutoModelForCTC"),QLe=l(),sr=a("div"),f(S3.$$.fragment),u$o=l(),Sd=a("p"),b$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ble=a("code"),v$o=o("from_pretrained()"),T$o=o("class method or the "),vle=a("code"),F$o=o("from_config()"),C$o=o(`class
method.`),M$o=l(),P3=a("p"),E$o=o("This class cannot be instantiated directly using "),Tle=a("code"),y$o=o("__init__()"),w$o=o(" (throws an error)."),A$o=l(),Zr=a("div"),f($3.$$.fragment),L$o=l(),Fle=a("p"),B$o=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),k$o=l(),Pd=a("p"),x$o=o(`Note:
Loading a model from its configuration file does `),Cle=a("strong"),R$o=o("not"),S$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mle=a("code"),P$o=o("from_pretrained()"),$$o=o("to load the model weights."),I$o=l(),Ele=a("p"),j$o=o("Examples:"),N$o=l(),f(I3.$$.fragment),D$o=l(),Ve=a("div"),f(j3.$$.fragment),q$o=l(),yle=a("p"),G$o=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),O$o=l(),en=a("p"),X$o=o("The model class to instantiate is selected based on the "),wle=a("code"),z$o=o("model_type"),V$o=o(` property of the config object (either
passed as an argument or loaded from `),Ale=a("code"),W$o=o("pretrained_model_name_or_path"),Q$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lle=a("code"),H$o=o("pretrained_model_name_or_path"),U$o=o(":"),J$o=l(),no=a("ul"),V5=a("li"),Ble=a("strong"),Y$o=o("hubert"),K$o=o(" \u2014 "),mN=a("a"),Z$o=o("HubertForCTC"),eIo=o(" (Hubert model)"),oIo=l(),W5=a("li"),kle=a("strong"),rIo=o("sew"),tIo=o(" \u2014 "),gN=a("a"),aIo=o("SEWForCTC"),nIo=o(" (SEW model)"),sIo=l(),Q5=a("li"),xle=a("strong"),lIo=o("sew-d"),iIo=o(" \u2014 "),hN=a("a"),dIo=o("SEWDForCTC"),cIo=o(" (SEW-D model)"),fIo=l(),H5=a("li"),Rle=a("strong"),mIo=o("unispeech"),gIo=o(" \u2014 "),pN=a("a"),hIo=o("UniSpeechForCTC"),pIo=o(" (UniSpeech model)"),_Io=l(),U5=a("li"),Sle=a("strong"),uIo=o("unispeech-sat"),bIo=o(" \u2014 "),_N=a("a"),vIo=o("UniSpeechSatForCTC"),TIo=o(" (UniSpeechSat model)"),FIo=l(),J5=a("li"),Ple=a("strong"),CIo=o("wav2vec2"),MIo=o(" \u2014 "),uN=a("a"),EIo=o("Wav2Vec2ForCTC"),yIo=o(" (Wav2Vec2 model)"),wIo=l(),Y5=a("li"),$le=a("strong"),AIo=o("wavlm"),LIo=o(" \u2014 "),bN=a("a"),BIo=o("WavLMForCTC"),kIo=o(" (WavLM model)"),xIo=l(),K5=a("p"),RIo=o("The model is set in evaluation mode by default using "),Ile=a("code"),SIo=o("model.eval()"),PIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jle=a("code"),$Io=o("model.train()"),IIo=l(),Nle=a("p"),jIo=o("Examples:"),NIo=l(),f(N3.$$.fragment),HLe=l(),$d=a("h2"),Z5=a("a"),Dle=a("span"),f(D3.$$.fragment),DIo=l(),qle=a("span"),qIo=o("AutoModelForSpeechSeq2Seq"),ULe=l(),lr=a("div"),f(q3.$$.fragment),GIo=l(),Id=a("p"),OIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Gle=a("code"),XIo=o("from_pretrained()"),zIo=o("class method or the "),Ole=a("code"),VIo=o("from_config()"),WIo=o(`class
method.`),QIo=l(),G3=a("p"),HIo=o("This class cannot be instantiated directly using "),Xle=a("code"),UIo=o("__init__()"),JIo=o(" (throws an error)."),YIo=l(),et=a("div"),f(O3.$$.fragment),KIo=l(),zle=a("p"),ZIo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ejo=l(),jd=a("p"),ojo=o(`Note:
Loading a model from its configuration file does `),Vle=a("strong"),rjo=o("not"),tjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wle=a("code"),ajo=o("from_pretrained()"),njo=o("to load the model weights."),sjo=l(),Qle=a("p"),ljo=o("Examples:"),ijo=l(),f(X3.$$.fragment),djo=l(),We=a("div"),f(z3.$$.fragment),cjo=l(),Hle=a("p"),fjo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mjo=l(),on=a("p"),gjo=o("The model class to instantiate is selected based on the "),Ule=a("code"),hjo=o("model_type"),pjo=o(` property of the config object (either
passed as an argument or loaded from `),Jle=a("code"),_jo=o("pretrained_model_name_or_path"),ujo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yle=a("code"),bjo=o("pretrained_model_name_or_path"),vjo=o(":"),Tjo=l(),V3=a("ul"),e2=a("li"),Kle=a("strong"),Fjo=o("speech-encoder-decoder"),Cjo=o(" \u2014 "),vN=a("a"),Mjo=o("SpeechEncoderDecoderModel"),Ejo=o(" (Speech Encoder decoder model)"),yjo=l(),o2=a("li"),Zle=a("strong"),wjo=o("speech_to_text"),Ajo=o(" \u2014 "),TN=a("a"),Ljo=o("Speech2TextForConditionalGeneration"),Bjo=o(" (Speech2Text model)"),kjo=l(),r2=a("p"),xjo=o("The model is set in evaluation mode by default using "),eie=a("code"),Rjo=o("model.eval()"),Sjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oie=a("code"),Pjo=o("model.train()"),$jo=l(),rie=a("p"),Ijo=o("Examples:"),jjo=l(),f(W3.$$.fragment),JLe=l(),Nd=a("h2"),t2=a("a"),tie=a("span"),f(Q3.$$.fragment),Njo=l(),aie=a("span"),Djo=o("AutoModelForAudioXVector"),YLe=l(),ir=a("div"),f(H3.$$.fragment),qjo=l(),Dd=a("p"),Gjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),nie=a("code"),Ojo=o("from_pretrained()"),Xjo=o("class method or the "),sie=a("code"),zjo=o("from_config()"),Vjo=o(`class
method.`),Wjo=l(),U3=a("p"),Qjo=o("This class cannot be instantiated directly using "),lie=a("code"),Hjo=o("__init__()"),Ujo=o(" (throws an error)."),Jjo=l(),ot=a("div"),f(J3.$$.fragment),Yjo=l(),iie=a("p"),Kjo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Zjo=l(),qd=a("p"),eNo=o(`Note:
Loading a model from its configuration file does `),die=a("strong"),oNo=o("not"),rNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cie=a("code"),tNo=o("from_pretrained()"),aNo=o("to load the model weights."),nNo=l(),fie=a("p"),sNo=o("Examples:"),lNo=l(),f(Y3.$$.fragment),iNo=l(),Qe=a("div"),f(K3.$$.fragment),dNo=l(),mie=a("p"),cNo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),fNo=l(),rn=a("p"),mNo=o("The model class to instantiate is selected based on the "),gie=a("code"),gNo=o("model_type"),hNo=o(` property of the config object (either
passed as an argument or loaded from `),hie=a("code"),pNo=o("pretrained_model_name_or_path"),_No=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pie=a("code"),uNo=o("pretrained_model_name_or_path"),bNo=o(":"),vNo=l(),Gd=a("ul"),a2=a("li"),_ie=a("strong"),TNo=o("unispeech-sat"),FNo=o(" \u2014 "),FN=a("a"),CNo=o("UniSpeechSatForXVector"),MNo=o(" (UniSpeechSat model)"),ENo=l(),n2=a("li"),uie=a("strong"),yNo=o("wav2vec2"),wNo=o(" \u2014 "),CN=a("a"),ANo=o("Wav2Vec2ForXVector"),LNo=o(" (Wav2Vec2 model)"),BNo=l(),s2=a("li"),bie=a("strong"),kNo=o("wavlm"),xNo=o(" \u2014 "),MN=a("a"),RNo=o("WavLMForXVector"),SNo=o(" (WavLM model)"),PNo=l(),l2=a("p"),$No=o("The model is set in evaluation mode by default using "),vie=a("code"),INo=o("model.eval()"),jNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tie=a("code"),NNo=o("model.train()"),DNo=l(),Fie=a("p"),qNo=o("Examples:"),GNo=l(),f(Z3.$$.fragment),KLe=l(),Od=a("h2"),i2=a("a"),Cie=a("span"),f(ey.$$.fragment),ONo=l(),Mie=a("span"),XNo=o("AutoModelForMaskedImageModeling"),ZLe=l(),dr=a("div"),f(oy.$$.fragment),zNo=l(),Xd=a("p"),VNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Eie=a("code"),WNo=o("from_pretrained()"),QNo=o("class method or the "),yie=a("code"),HNo=o("from_config()"),UNo=o(`class
method.`),JNo=l(),ry=a("p"),YNo=o("This class cannot be instantiated directly using "),wie=a("code"),KNo=o("__init__()"),ZNo=o(" (throws an error)."),eDo=l(),rt=a("div"),f(ty.$$.fragment),oDo=l(),Aie=a("p"),rDo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),tDo=l(),zd=a("p"),aDo=o(`Note:
Loading a model from its configuration file does `),Lie=a("strong"),nDo=o("not"),sDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bie=a("code"),lDo=o("from_pretrained()"),iDo=o("to load the model weights."),dDo=l(),kie=a("p"),cDo=o("Examples:"),fDo=l(),f(ay.$$.fragment),mDo=l(),He=a("div"),f(ny.$$.fragment),gDo=l(),xie=a("p"),hDo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),pDo=l(),tn=a("p"),_Do=o("The model class to instantiate is selected based on the "),Rie=a("code"),uDo=o("model_type"),bDo=o(` property of the config object (either
passed as an argument or loaded from `),Sie=a("code"),vDo=o("pretrained_model_name_or_path"),TDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=a("code"),FDo=o("pretrained_model_name_or_path"),CDo=o(":"),MDo=l(),Vd=a("ul"),d2=a("li"),$ie=a("strong"),EDo=o("deit"),yDo=o(" \u2014 "),EN=a("a"),wDo=o("DeiTForMaskedImageModeling"),ADo=o(" (DeiT model)"),LDo=l(),c2=a("li"),Iie=a("strong"),BDo=o("swin"),kDo=o(" \u2014 "),yN=a("a"),xDo=o("SwinForMaskedImageModeling"),RDo=o(" (Swin model)"),SDo=l(),f2=a("li"),jie=a("strong"),PDo=o("vit"),$Do=o(" \u2014 "),wN=a("a"),IDo=o("ViTForMaskedImageModeling"),jDo=o(" (ViT model)"),NDo=l(),m2=a("p"),DDo=o("The model is set in evaluation mode by default using "),Nie=a("code"),qDo=o("model.eval()"),GDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Die=a("code"),ODo=o("model.train()"),XDo=l(),qie=a("p"),zDo=o("Examples:"),VDo=l(),f(sy.$$.fragment),e9e=l(),Wd=a("h2"),g2=a("a"),Gie=a("span"),f(ly.$$.fragment),WDo=l(),Oie=a("span"),QDo=o("AutoModelForObjectDetection"),o9e=l(),cr=a("div"),f(iy.$$.fragment),HDo=l(),Qd=a("p"),UDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Xie=a("code"),JDo=o("from_pretrained()"),YDo=o("class method or the "),zie=a("code"),KDo=o("from_config()"),ZDo=o(`class
method.`),eqo=l(),dy=a("p"),oqo=o("This class cannot be instantiated directly using "),Vie=a("code"),rqo=o("__init__()"),tqo=o(" (throws an error)."),aqo=l(),tt=a("div"),f(cy.$$.fragment),nqo=l(),Wie=a("p"),sqo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),lqo=l(),Hd=a("p"),iqo=o(`Note:
Loading a model from its configuration file does `),Qie=a("strong"),dqo=o("not"),cqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hie=a("code"),fqo=o("from_pretrained()"),mqo=o("to load the model weights."),gqo=l(),Uie=a("p"),hqo=o("Examples:"),pqo=l(),f(fy.$$.fragment),_qo=l(),Ue=a("div"),f(my.$$.fragment),uqo=l(),Jie=a("p"),bqo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),vqo=l(),an=a("p"),Tqo=o("The model class to instantiate is selected based on the "),Yie=a("code"),Fqo=o("model_type"),Cqo=o(` property of the config object (either
passed as an argument or loaded from `),Kie=a("code"),Mqo=o("pretrained_model_name_or_path"),Eqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zie=a("code"),yqo=o("pretrained_model_name_or_path"),wqo=o(":"),Aqo=l(),ede=a("ul"),h2=a("li"),ode=a("strong"),Lqo=o("detr"),Bqo=o(" \u2014 "),AN=a("a"),kqo=o("DetrForObjectDetection"),xqo=o(" (DETR model)"),Rqo=l(),p2=a("p"),Sqo=o("The model is set in evaluation mode by default using "),rde=a("code"),Pqo=o("model.eval()"),$qo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tde=a("code"),Iqo=o("model.train()"),jqo=l(),ade=a("p"),Nqo=o("Examples:"),Dqo=l(),f(gy.$$.fragment),r9e=l(),Ud=a("h2"),_2=a("a"),nde=a("span"),f(hy.$$.fragment),qqo=l(),sde=a("span"),Gqo=o("AutoModelForImageSegmentation"),t9e=l(),fr=a("div"),f(py.$$.fragment),Oqo=l(),Jd=a("p"),Xqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),lde=a("code"),zqo=o("from_pretrained()"),Vqo=o("class method or the "),ide=a("code"),Wqo=o("from_config()"),Qqo=o(`class
method.`),Hqo=l(),_y=a("p"),Uqo=o("This class cannot be instantiated directly using "),dde=a("code"),Jqo=o("__init__()"),Yqo=o(" (throws an error)."),Kqo=l(),at=a("div"),f(uy.$$.fragment),Zqo=l(),cde=a("p"),eGo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),oGo=l(),Yd=a("p"),rGo=o(`Note:
Loading a model from its configuration file does `),fde=a("strong"),tGo=o("not"),aGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mde=a("code"),nGo=o("from_pretrained()"),sGo=o("to load the model weights."),lGo=l(),gde=a("p"),iGo=o("Examples:"),dGo=l(),f(by.$$.fragment),cGo=l(),Je=a("div"),f(vy.$$.fragment),fGo=l(),hde=a("p"),mGo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),gGo=l(),nn=a("p"),hGo=o("The model class to instantiate is selected based on the "),pde=a("code"),pGo=o("model_type"),_Go=o(` property of the config object (either
passed as an argument or loaded from `),_de=a("code"),uGo=o("pretrained_model_name_or_path"),bGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ude=a("code"),vGo=o("pretrained_model_name_or_path"),TGo=o(":"),FGo=l(),bde=a("ul"),u2=a("li"),vde=a("strong"),CGo=o("detr"),MGo=o(" \u2014 "),LN=a("a"),EGo=o("DetrForSegmentation"),yGo=o(" (DETR model)"),wGo=l(),b2=a("p"),AGo=o("The model is set in evaluation mode by default using "),Tde=a("code"),LGo=o("model.eval()"),BGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fde=a("code"),kGo=o("model.train()"),xGo=l(),Cde=a("p"),RGo=o("Examples:"),SGo=l(),f(Ty.$$.fragment),a9e=l(),Kd=a("h2"),v2=a("a"),Mde=a("span"),f(Fy.$$.fragment),PGo=l(),Ede=a("span"),$Go=o("AutoModelForSemanticSegmentation"),n9e=l(),mr=a("div"),f(Cy.$$.fragment),IGo=l(),Zd=a("p"),jGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),yde=a("code"),NGo=o("from_pretrained()"),DGo=o("class method or the "),wde=a("code"),qGo=o("from_config()"),GGo=o(`class
method.`),OGo=l(),My=a("p"),XGo=o("This class cannot be instantiated directly using "),Ade=a("code"),zGo=o("__init__()"),VGo=o(" (throws an error)."),WGo=l(),nt=a("div"),f(Ey.$$.fragment),QGo=l(),Lde=a("p"),HGo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),UGo=l(),ec=a("p"),JGo=o(`Note:
Loading a model from its configuration file does `),Bde=a("strong"),YGo=o("not"),KGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kde=a("code"),ZGo=o("from_pretrained()"),eOo=o("to load the model weights."),oOo=l(),xde=a("p"),rOo=o("Examples:"),tOo=l(),f(yy.$$.fragment),aOo=l(),Ye=a("div"),f(wy.$$.fragment),nOo=l(),Rde=a("p"),sOo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),lOo=l(),sn=a("p"),iOo=o("The model class to instantiate is selected based on the "),Sde=a("code"),dOo=o("model_type"),cOo=o(` property of the config object (either
passed as an argument or loaded from `),Pde=a("code"),fOo=o("pretrained_model_name_or_path"),mOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$de=a("code"),gOo=o("pretrained_model_name_or_path"),hOo=o(":"),pOo=l(),Ay=a("ul"),T2=a("li"),Ide=a("strong"),_Oo=o("beit"),uOo=o(" \u2014 "),BN=a("a"),bOo=o("BeitForSemanticSegmentation"),vOo=o(" (BEiT model)"),TOo=l(),F2=a("li"),jde=a("strong"),FOo=o("segformer"),COo=o(" \u2014 "),kN=a("a"),MOo=o("SegformerForSemanticSegmentation"),EOo=o(" (SegFormer model)"),yOo=l(),C2=a("p"),wOo=o("The model is set in evaluation mode by default using "),Nde=a("code"),AOo=o("model.eval()"),LOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dde=a("code"),BOo=o("model.train()"),kOo=l(),qde=a("p"),xOo=o("Examples:"),ROo=l(),f(Ly.$$.fragment),s9e=l(),oc=a("h2"),M2=a("a"),Gde=a("span"),f(By.$$.fragment),SOo=l(),Ode=a("span"),POo=o("TFAutoModel"),l9e=l(),gr=a("div"),f(ky.$$.fragment),$Oo=l(),rc=a("p"),IOo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Xde=a("code"),jOo=o("from_pretrained()"),NOo=o("class method or the "),zde=a("code"),DOo=o("from_config()"),qOo=o(`class
method.`),GOo=l(),xy=a("p"),OOo=o("This class cannot be instantiated directly using "),Vde=a("code"),XOo=o("__init__()"),zOo=o(" (throws an error)."),VOo=l(),st=a("div"),f(Ry.$$.fragment),WOo=l(),Wde=a("p"),QOo=o("Instantiates one of the base model classes of the library from a configuration."),HOo=l(),tc=a("p"),UOo=o(`Note:
Loading a model from its configuration file does `),Qde=a("strong"),JOo=o("not"),YOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hde=a("code"),KOo=o("from_pretrained()"),ZOo=o("to load the model weights."),eXo=l(),Ude=a("p"),oXo=o("Examples:"),rXo=l(),f(Sy.$$.fragment),tXo=l(),go=a("div"),f(Py.$$.fragment),aXo=l(),Jde=a("p"),nXo=o("Instantiate one of the base model classes of the library from a pretrained model."),sXo=l(),ln=a("p"),lXo=o("The model class to instantiate is selected based on the "),Yde=a("code"),iXo=o("model_type"),dXo=o(` property of the config object (either
passed as an argument or loaded from `),Kde=a("code"),cXo=o("pretrained_model_name_or_path"),fXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zde=a("code"),mXo=o("pretrained_model_name_or_path"),gXo=o(":"),hXo=l(),B=a("ul"),E2=a("li"),ece=a("strong"),pXo=o("albert"),_Xo=o(" \u2014 "),xN=a("a"),uXo=o("TFAlbertModel"),bXo=o(" (ALBERT model)"),vXo=l(),y2=a("li"),oce=a("strong"),TXo=o("bart"),FXo=o(" \u2014 "),RN=a("a"),CXo=o("TFBartModel"),MXo=o(" (BART model)"),EXo=l(),w2=a("li"),rce=a("strong"),yXo=o("bert"),wXo=o(" \u2014 "),SN=a("a"),AXo=o("TFBertModel"),LXo=o(" (BERT model)"),BXo=l(),A2=a("li"),tce=a("strong"),kXo=o("blenderbot"),xXo=o(" \u2014 "),PN=a("a"),RXo=o("TFBlenderbotModel"),SXo=o(" (Blenderbot model)"),PXo=l(),L2=a("li"),ace=a("strong"),$Xo=o("blenderbot-small"),IXo=o(" \u2014 "),$N=a("a"),jXo=o("TFBlenderbotSmallModel"),NXo=o(" (BlenderbotSmall model)"),DXo=l(),B2=a("li"),nce=a("strong"),qXo=o("camembert"),GXo=o(" \u2014 "),IN=a("a"),OXo=o("TFCamembertModel"),XXo=o(" (CamemBERT model)"),zXo=l(),k2=a("li"),sce=a("strong"),VXo=o("clip"),WXo=o(" \u2014 "),jN=a("a"),QXo=o("TFCLIPModel"),HXo=o(" (CLIP model)"),UXo=l(),x2=a("li"),lce=a("strong"),JXo=o("convbert"),YXo=o(" \u2014 "),NN=a("a"),KXo=o("TFConvBertModel"),ZXo=o(" (ConvBERT model)"),ezo=l(),R2=a("li"),ice=a("strong"),ozo=o("ctrl"),rzo=o(" \u2014 "),DN=a("a"),tzo=o("TFCTRLModel"),azo=o(" (CTRL model)"),nzo=l(),S2=a("li"),dce=a("strong"),szo=o("deberta"),lzo=o(" \u2014 "),qN=a("a"),izo=o("TFDebertaModel"),dzo=o(" (DeBERTa model)"),czo=l(),P2=a("li"),cce=a("strong"),fzo=o("deberta-v2"),mzo=o(" \u2014 "),GN=a("a"),gzo=o("TFDebertaV2Model"),hzo=o(" (DeBERTa-v2 model)"),pzo=l(),$2=a("li"),fce=a("strong"),_zo=o("distilbert"),uzo=o(" \u2014 "),ON=a("a"),bzo=o("TFDistilBertModel"),vzo=o(" (DistilBERT model)"),Tzo=l(),I2=a("li"),mce=a("strong"),Fzo=o("dpr"),Czo=o(" \u2014 "),XN=a("a"),Mzo=o("TFDPRQuestionEncoder"),Ezo=o(" (DPR model)"),yzo=l(),j2=a("li"),gce=a("strong"),wzo=o("electra"),Azo=o(" \u2014 "),zN=a("a"),Lzo=o("TFElectraModel"),Bzo=o(" (ELECTRA model)"),kzo=l(),N2=a("li"),hce=a("strong"),xzo=o("flaubert"),Rzo=o(" \u2014 "),VN=a("a"),Szo=o("TFFlaubertModel"),Pzo=o(" (FlauBERT model)"),$zo=l(),Ss=a("li"),pce=a("strong"),Izo=o("funnel"),jzo=o(" \u2014 "),WN=a("a"),Nzo=o("TFFunnelModel"),Dzo=o(" or "),QN=a("a"),qzo=o("TFFunnelBaseModel"),Gzo=o(" (Funnel Transformer model)"),Ozo=l(),D2=a("li"),_ce=a("strong"),Xzo=o("gpt2"),zzo=o(" \u2014 "),HN=a("a"),Vzo=o("TFGPT2Model"),Wzo=o(" (OpenAI GPT-2 model)"),Qzo=l(),q2=a("li"),uce=a("strong"),Hzo=o("hubert"),Uzo=o(" \u2014 "),UN=a("a"),Jzo=o("TFHubertModel"),Yzo=o(" (Hubert model)"),Kzo=l(),G2=a("li"),bce=a("strong"),Zzo=o("layoutlm"),eVo=o(" \u2014 "),JN=a("a"),oVo=o("TFLayoutLMModel"),rVo=o(" (LayoutLM model)"),tVo=l(),O2=a("li"),vce=a("strong"),aVo=o("led"),nVo=o(" \u2014 "),YN=a("a"),sVo=o("TFLEDModel"),lVo=o(" (LED model)"),iVo=l(),X2=a("li"),Tce=a("strong"),dVo=o("longformer"),cVo=o(" \u2014 "),KN=a("a"),fVo=o("TFLongformerModel"),mVo=o(" (Longformer model)"),gVo=l(),z2=a("li"),Fce=a("strong"),hVo=o("lxmert"),pVo=o(" \u2014 "),ZN=a("a"),_Vo=o("TFLxmertModel"),uVo=o(" (LXMERT model)"),bVo=l(),V2=a("li"),Cce=a("strong"),vVo=o("marian"),TVo=o(" \u2014 "),eD=a("a"),FVo=o("TFMarianModel"),CVo=o(" (Marian model)"),MVo=l(),W2=a("li"),Mce=a("strong"),EVo=o("mbart"),yVo=o(" \u2014 "),oD=a("a"),wVo=o("TFMBartModel"),AVo=o(" (mBART model)"),LVo=l(),Q2=a("li"),Ece=a("strong"),BVo=o("mobilebert"),kVo=o(" \u2014 "),rD=a("a"),xVo=o("TFMobileBertModel"),RVo=o(" (MobileBERT model)"),SVo=l(),H2=a("li"),yce=a("strong"),PVo=o("mpnet"),$Vo=o(" \u2014 "),tD=a("a"),IVo=o("TFMPNetModel"),jVo=o(" (MPNet model)"),NVo=l(),U2=a("li"),wce=a("strong"),DVo=o("mt5"),qVo=o(" \u2014 "),aD=a("a"),GVo=o("TFMT5Model"),OVo=o(" (mT5 model)"),XVo=l(),J2=a("li"),Ace=a("strong"),zVo=o("openai-gpt"),VVo=o(" \u2014 "),nD=a("a"),WVo=o("TFOpenAIGPTModel"),QVo=o(" (OpenAI GPT model)"),HVo=l(),Y2=a("li"),Lce=a("strong"),UVo=o("pegasus"),JVo=o(" \u2014 "),sD=a("a"),YVo=o("TFPegasusModel"),KVo=o(" (Pegasus model)"),ZVo=l(),K2=a("li"),Bce=a("strong"),eWo=o("rembert"),oWo=o(" \u2014 "),lD=a("a"),rWo=o("TFRemBertModel"),tWo=o(" (RemBERT model)"),aWo=l(),Z2=a("li"),kce=a("strong"),nWo=o("roberta"),sWo=o(" \u2014 "),iD=a("a"),lWo=o("TFRobertaModel"),iWo=o(" (RoBERTa model)"),dWo=l(),ev=a("li"),xce=a("strong"),cWo=o("roformer"),fWo=o(" \u2014 "),dD=a("a"),mWo=o("TFRoFormerModel"),gWo=o(" (RoFormer model)"),hWo=l(),ov=a("li"),Rce=a("strong"),pWo=o("speech_to_text"),_Wo=o(" \u2014 "),cD=a("a"),uWo=o("TFSpeech2TextModel"),bWo=o(" (Speech2Text model)"),vWo=l(),rv=a("li"),Sce=a("strong"),TWo=o("t5"),FWo=o(" \u2014 "),fD=a("a"),CWo=o("TFT5Model"),MWo=o(" (T5 model)"),EWo=l(),tv=a("li"),Pce=a("strong"),yWo=o("tapas"),wWo=o(" \u2014 "),mD=a("a"),AWo=o("TFTapasModel"),LWo=o(" (TAPAS model)"),BWo=l(),av=a("li"),$ce=a("strong"),kWo=o("transfo-xl"),xWo=o(" \u2014 "),gD=a("a"),RWo=o("TFTransfoXLModel"),SWo=o(" (Transformer-XL model)"),PWo=l(),nv=a("li"),Ice=a("strong"),$Wo=o("vit"),IWo=o(" \u2014 "),hD=a("a"),jWo=o("TFViTModel"),NWo=o(" (ViT model)"),DWo=l(),sv=a("li"),jce=a("strong"),qWo=o("wav2vec2"),GWo=o(" \u2014 "),pD=a("a"),OWo=o("TFWav2Vec2Model"),XWo=o(" (Wav2Vec2 model)"),zWo=l(),lv=a("li"),Nce=a("strong"),VWo=o("xlm"),WWo=o(" \u2014 "),_D=a("a"),QWo=o("TFXLMModel"),HWo=o(" (XLM model)"),UWo=l(),iv=a("li"),Dce=a("strong"),JWo=o("xlm-roberta"),YWo=o(" \u2014 "),uD=a("a"),KWo=o("TFXLMRobertaModel"),ZWo=o(" (XLM-RoBERTa model)"),eQo=l(),dv=a("li"),qce=a("strong"),oQo=o("xlnet"),rQo=o(" \u2014 "),bD=a("a"),tQo=o("TFXLNetModel"),aQo=o(" (XLNet model)"),nQo=l(),Gce=a("p"),sQo=o("Examples:"),lQo=l(),f($y.$$.fragment),i9e=l(),ac=a("h2"),cv=a("a"),Oce=a("span"),f(Iy.$$.fragment),iQo=l(),Xce=a("span"),dQo=o("TFAutoModelForPreTraining"),d9e=l(),hr=a("div"),f(jy.$$.fragment),cQo=l(),nc=a("p"),fQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zce=a("code"),mQo=o("from_pretrained()"),gQo=o("class method or the "),Vce=a("code"),hQo=o("from_config()"),pQo=o(`class
method.`),_Qo=l(),Ny=a("p"),uQo=o("This class cannot be instantiated directly using "),Wce=a("code"),bQo=o("__init__()"),vQo=o(" (throws an error)."),TQo=l(),lt=a("div"),f(Dy.$$.fragment),FQo=l(),Qce=a("p"),CQo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MQo=l(),sc=a("p"),EQo=o(`Note:
Loading a model from its configuration file does `),Hce=a("strong"),yQo=o("not"),wQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uce=a("code"),AQo=o("from_pretrained()"),LQo=o("to load the model weights."),BQo=l(),Jce=a("p"),kQo=o("Examples:"),xQo=l(),f(qy.$$.fragment),RQo=l(),ho=a("div"),f(Gy.$$.fragment),SQo=l(),Yce=a("p"),PQo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$Qo=l(),dn=a("p"),IQo=o("The model class to instantiate is selected based on the "),Kce=a("code"),jQo=o("model_type"),NQo=o(` property of the config object (either
passed as an argument or loaded from `),Zce=a("code"),DQo=o("pretrained_model_name_or_path"),qQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),efe=a("code"),GQo=o("pretrained_model_name_or_path"),OQo=o(":"),XQo=l(),H=a("ul"),fv=a("li"),ofe=a("strong"),zQo=o("albert"),VQo=o(" \u2014 "),vD=a("a"),WQo=o("TFAlbertForPreTraining"),QQo=o(" (ALBERT model)"),HQo=l(),mv=a("li"),rfe=a("strong"),UQo=o("bart"),JQo=o(" \u2014 "),TD=a("a"),YQo=o("TFBartForConditionalGeneration"),KQo=o(" (BART model)"),ZQo=l(),gv=a("li"),tfe=a("strong"),eHo=o("bert"),oHo=o(" \u2014 "),FD=a("a"),rHo=o("TFBertForPreTraining"),tHo=o(" (BERT model)"),aHo=l(),hv=a("li"),afe=a("strong"),nHo=o("camembert"),sHo=o(" \u2014 "),CD=a("a"),lHo=o("TFCamembertForMaskedLM"),iHo=o(" (CamemBERT model)"),dHo=l(),pv=a("li"),nfe=a("strong"),cHo=o("ctrl"),fHo=o(" \u2014 "),MD=a("a"),mHo=o("TFCTRLLMHeadModel"),gHo=o(" (CTRL model)"),hHo=l(),_v=a("li"),sfe=a("strong"),pHo=o("distilbert"),_Ho=o(" \u2014 "),ED=a("a"),uHo=o("TFDistilBertForMaskedLM"),bHo=o(" (DistilBERT model)"),vHo=l(),uv=a("li"),lfe=a("strong"),THo=o("electra"),FHo=o(" \u2014 "),yD=a("a"),CHo=o("TFElectraForPreTraining"),MHo=o(" (ELECTRA model)"),EHo=l(),bv=a("li"),ife=a("strong"),yHo=o("flaubert"),wHo=o(" \u2014 "),wD=a("a"),AHo=o("TFFlaubertWithLMHeadModel"),LHo=o(" (FlauBERT model)"),BHo=l(),vv=a("li"),dfe=a("strong"),kHo=o("funnel"),xHo=o(" \u2014 "),AD=a("a"),RHo=o("TFFunnelForPreTraining"),SHo=o(" (Funnel Transformer model)"),PHo=l(),Tv=a("li"),cfe=a("strong"),$Ho=o("gpt2"),IHo=o(" \u2014 "),LD=a("a"),jHo=o("TFGPT2LMHeadModel"),NHo=o(" (OpenAI GPT-2 model)"),DHo=l(),Fv=a("li"),ffe=a("strong"),qHo=o("layoutlm"),GHo=o(" \u2014 "),BD=a("a"),OHo=o("TFLayoutLMForMaskedLM"),XHo=o(" (LayoutLM model)"),zHo=l(),Cv=a("li"),mfe=a("strong"),VHo=o("lxmert"),WHo=o(" \u2014 "),kD=a("a"),QHo=o("TFLxmertForPreTraining"),HHo=o(" (LXMERT model)"),UHo=l(),Mv=a("li"),gfe=a("strong"),JHo=o("mobilebert"),YHo=o(" \u2014 "),xD=a("a"),KHo=o("TFMobileBertForPreTraining"),ZHo=o(" (MobileBERT model)"),eUo=l(),Ev=a("li"),hfe=a("strong"),oUo=o("mpnet"),rUo=o(" \u2014 "),RD=a("a"),tUo=o("TFMPNetForMaskedLM"),aUo=o(" (MPNet model)"),nUo=l(),yv=a("li"),pfe=a("strong"),sUo=o("openai-gpt"),lUo=o(" \u2014 "),SD=a("a"),iUo=o("TFOpenAIGPTLMHeadModel"),dUo=o(" (OpenAI GPT model)"),cUo=l(),wv=a("li"),_fe=a("strong"),fUo=o("roberta"),mUo=o(" \u2014 "),PD=a("a"),gUo=o("TFRobertaForMaskedLM"),hUo=o(" (RoBERTa model)"),pUo=l(),Av=a("li"),ufe=a("strong"),_Uo=o("t5"),uUo=o(" \u2014 "),$D=a("a"),bUo=o("TFT5ForConditionalGeneration"),vUo=o(" (T5 model)"),TUo=l(),Lv=a("li"),bfe=a("strong"),FUo=o("tapas"),CUo=o(" \u2014 "),ID=a("a"),MUo=o("TFTapasForMaskedLM"),EUo=o(" (TAPAS model)"),yUo=l(),Bv=a("li"),vfe=a("strong"),wUo=o("transfo-xl"),AUo=o(" \u2014 "),jD=a("a"),LUo=o("TFTransfoXLLMHeadModel"),BUo=o(" (Transformer-XL model)"),kUo=l(),kv=a("li"),Tfe=a("strong"),xUo=o("xlm"),RUo=o(" \u2014 "),ND=a("a"),SUo=o("TFXLMWithLMHeadModel"),PUo=o(" (XLM model)"),$Uo=l(),xv=a("li"),Ffe=a("strong"),IUo=o("xlm-roberta"),jUo=o(" \u2014 "),DD=a("a"),NUo=o("TFXLMRobertaForMaskedLM"),DUo=o(" (XLM-RoBERTa model)"),qUo=l(),Rv=a("li"),Cfe=a("strong"),GUo=o("xlnet"),OUo=o(" \u2014 "),qD=a("a"),XUo=o("TFXLNetLMHeadModel"),zUo=o(" (XLNet model)"),VUo=l(),Mfe=a("p"),WUo=o("Examples:"),QUo=l(),f(Oy.$$.fragment),c9e=l(),lc=a("h2"),Sv=a("a"),Efe=a("span"),f(Xy.$$.fragment),HUo=l(),yfe=a("span"),UUo=o("TFAutoModelForCausalLM"),f9e=l(),pr=a("div"),f(zy.$$.fragment),JUo=l(),ic=a("p"),YUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wfe=a("code"),KUo=o("from_pretrained()"),ZUo=o("class method or the "),Afe=a("code"),eJo=o("from_config()"),oJo=o(`class
method.`),rJo=l(),Vy=a("p"),tJo=o("This class cannot be instantiated directly using "),Lfe=a("code"),aJo=o("__init__()"),nJo=o(" (throws an error)."),sJo=l(),it=a("div"),f(Wy.$$.fragment),lJo=l(),Bfe=a("p"),iJo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dJo=l(),dc=a("p"),cJo=o(`Note:
Loading a model from its configuration file does `),kfe=a("strong"),fJo=o("not"),mJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xfe=a("code"),gJo=o("from_pretrained()"),hJo=o("to load the model weights."),pJo=l(),Rfe=a("p"),_Jo=o("Examples:"),uJo=l(),f(Qy.$$.fragment),bJo=l(),po=a("div"),f(Hy.$$.fragment),vJo=l(),Sfe=a("p"),TJo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FJo=l(),cn=a("p"),CJo=o("The model class to instantiate is selected based on the "),Pfe=a("code"),MJo=o("model_type"),EJo=o(` property of the config object (either
passed as an argument or loaded from `),$fe=a("code"),yJo=o("pretrained_model_name_or_path"),wJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=a("code"),AJo=o("pretrained_model_name_or_path"),LJo=o(":"),BJo=l(),he=a("ul"),Pv=a("li"),jfe=a("strong"),kJo=o("bert"),xJo=o(" \u2014 "),GD=a("a"),RJo=o("TFBertLMHeadModel"),SJo=o(" (BERT model)"),PJo=l(),$v=a("li"),Nfe=a("strong"),$Jo=o("ctrl"),IJo=o(" \u2014 "),OD=a("a"),jJo=o("TFCTRLLMHeadModel"),NJo=o(" (CTRL model)"),DJo=l(),Iv=a("li"),Dfe=a("strong"),qJo=o("gpt2"),GJo=o(" \u2014 "),XD=a("a"),OJo=o("TFGPT2LMHeadModel"),XJo=o(" (OpenAI GPT-2 model)"),zJo=l(),jv=a("li"),qfe=a("strong"),VJo=o("openai-gpt"),WJo=o(" \u2014 "),zD=a("a"),QJo=o("TFOpenAIGPTLMHeadModel"),HJo=o(" (OpenAI GPT model)"),UJo=l(),Nv=a("li"),Gfe=a("strong"),JJo=o("rembert"),YJo=o(" \u2014 "),VD=a("a"),KJo=o("TFRemBertForCausalLM"),ZJo=o(" (RemBERT model)"),eYo=l(),Dv=a("li"),Ofe=a("strong"),oYo=o("roberta"),rYo=o(" \u2014 "),WD=a("a"),tYo=o("TFRobertaForCausalLM"),aYo=o(" (RoBERTa model)"),nYo=l(),qv=a("li"),Xfe=a("strong"),sYo=o("roformer"),lYo=o(" \u2014 "),QD=a("a"),iYo=o("TFRoFormerForCausalLM"),dYo=o(" (RoFormer model)"),cYo=l(),Gv=a("li"),zfe=a("strong"),fYo=o("transfo-xl"),mYo=o(" \u2014 "),HD=a("a"),gYo=o("TFTransfoXLLMHeadModel"),hYo=o(" (Transformer-XL model)"),pYo=l(),Ov=a("li"),Vfe=a("strong"),_Yo=o("xlm"),uYo=o(" \u2014 "),UD=a("a"),bYo=o("TFXLMWithLMHeadModel"),vYo=o(" (XLM model)"),TYo=l(),Xv=a("li"),Wfe=a("strong"),FYo=o("xlnet"),CYo=o(" \u2014 "),JD=a("a"),MYo=o("TFXLNetLMHeadModel"),EYo=o(" (XLNet model)"),yYo=l(),Qfe=a("p"),wYo=o("Examples:"),AYo=l(),f(Uy.$$.fragment),m9e=l(),cc=a("h2"),zv=a("a"),Hfe=a("span"),f(Jy.$$.fragment),LYo=l(),Ufe=a("span"),BYo=o("TFAutoModelForImageClassification"),g9e=l(),_r=a("div"),f(Yy.$$.fragment),kYo=l(),fc=a("p"),xYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Jfe=a("code"),RYo=o("from_pretrained()"),SYo=o("class method or the "),Yfe=a("code"),PYo=o("from_config()"),$Yo=o(`class
method.`),IYo=l(),Ky=a("p"),jYo=o("This class cannot be instantiated directly using "),Kfe=a("code"),NYo=o("__init__()"),DYo=o(" (throws an error)."),qYo=l(),dt=a("div"),f(Zy.$$.fragment),GYo=l(),Zfe=a("p"),OYo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),XYo=l(),mc=a("p"),zYo=o(`Note:
Loading a model from its configuration file does `),eme=a("strong"),VYo=o("not"),WYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ome=a("code"),QYo=o("from_pretrained()"),HYo=o("to load the model weights."),UYo=l(),rme=a("p"),JYo=o("Examples:"),YYo=l(),f(ew.$$.fragment),KYo=l(),_o=a("div"),f(ow.$$.fragment),ZYo=l(),tme=a("p"),eKo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),oKo=l(),fn=a("p"),rKo=o("The model class to instantiate is selected based on the "),ame=a("code"),tKo=o("model_type"),aKo=o(` property of the config object (either
passed as an argument or loaded from `),nme=a("code"),nKo=o("pretrained_model_name_or_path"),sKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sme=a("code"),lKo=o("pretrained_model_name_or_path"),iKo=o(":"),dKo=l(),lme=a("ul"),Vv=a("li"),ime=a("strong"),cKo=o("vit"),fKo=o(" \u2014 "),YD=a("a"),mKo=o("TFViTForImageClassification"),gKo=o(" (ViT model)"),hKo=l(),dme=a("p"),pKo=o("Examples:"),_Ko=l(),f(rw.$$.fragment),h9e=l(),gc=a("h2"),Wv=a("a"),cme=a("span"),f(tw.$$.fragment),uKo=l(),fme=a("span"),bKo=o("TFAutoModelForMaskedLM"),p9e=l(),ur=a("div"),f(aw.$$.fragment),vKo=l(),hc=a("p"),TKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mme=a("code"),FKo=o("from_pretrained()"),CKo=o("class method or the "),gme=a("code"),MKo=o("from_config()"),EKo=o(`class
method.`),yKo=l(),nw=a("p"),wKo=o("This class cannot be instantiated directly using "),hme=a("code"),AKo=o("__init__()"),LKo=o(" (throws an error)."),BKo=l(),ct=a("div"),f(sw.$$.fragment),kKo=l(),pme=a("p"),xKo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),RKo=l(),pc=a("p"),SKo=o(`Note:
Loading a model from its configuration file does `),_me=a("strong"),PKo=o("not"),$Ko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ume=a("code"),IKo=o("from_pretrained()"),jKo=o("to load the model weights."),NKo=l(),bme=a("p"),DKo=o("Examples:"),qKo=l(),f(lw.$$.fragment),GKo=l(),uo=a("div"),f(iw.$$.fragment),OKo=l(),vme=a("p"),XKo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zKo=l(),mn=a("p"),VKo=o("The model class to instantiate is selected based on the "),Tme=a("code"),WKo=o("model_type"),QKo=o(` property of the config object (either
passed as an argument or loaded from `),Fme=a("code"),HKo=o("pretrained_model_name_or_path"),UKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=a("code"),JKo=o("pretrained_model_name_or_path"),YKo=o(":"),KKo=l(),Y=a("ul"),Qv=a("li"),Mme=a("strong"),ZKo=o("albert"),eZo=o(" \u2014 "),KD=a("a"),oZo=o("TFAlbertForMaskedLM"),rZo=o(" (ALBERT model)"),tZo=l(),Hv=a("li"),Eme=a("strong"),aZo=o("bert"),nZo=o(" \u2014 "),ZD=a("a"),sZo=o("TFBertForMaskedLM"),lZo=o(" (BERT model)"),iZo=l(),Uv=a("li"),yme=a("strong"),dZo=o("camembert"),cZo=o(" \u2014 "),eq=a("a"),fZo=o("TFCamembertForMaskedLM"),mZo=o(" (CamemBERT model)"),gZo=l(),Jv=a("li"),wme=a("strong"),hZo=o("convbert"),pZo=o(" \u2014 "),oq=a("a"),_Zo=o("TFConvBertForMaskedLM"),uZo=o(" (ConvBERT model)"),bZo=l(),Yv=a("li"),Ame=a("strong"),vZo=o("deberta"),TZo=o(" \u2014 "),rq=a("a"),FZo=o("TFDebertaForMaskedLM"),CZo=o(" (DeBERTa model)"),MZo=l(),Kv=a("li"),Lme=a("strong"),EZo=o("deberta-v2"),yZo=o(" \u2014 "),tq=a("a"),wZo=o("TFDebertaV2ForMaskedLM"),AZo=o(" (DeBERTa-v2 model)"),LZo=l(),Zv=a("li"),Bme=a("strong"),BZo=o("distilbert"),kZo=o(" \u2014 "),aq=a("a"),xZo=o("TFDistilBertForMaskedLM"),RZo=o(" (DistilBERT model)"),SZo=l(),eT=a("li"),kme=a("strong"),PZo=o("electra"),$Zo=o(" \u2014 "),nq=a("a"),IZo=o("TFElectraForMaskedLM"),jZo=o(" (ELECTRA model)"),NZo=l(),oT=a("li"),xme=a("strong"),DZo=o("flaubert"),qZo=o(" \u2014 "),sq=a("a"),GZo=o("TFFlaubertWithLMHeadModel"),OZo=o(" (FlauBERT model)"),XZo=l(),rT=a("li"),Rme=a("strong"),zZo=o("funnel"),VZo=o(" \u2014 "),lq=a("a"),WZo=o("TFFunnelForMaskedLM"),QZo=o(" (Funnel Transformer model)"),HZo=l(),tT=a("li"),Sme=a("strong"),UZo=o("layoutlm"),JZo=o(" \u2014 "),iq=a("a"),YZo=o("TFLayoutLMForMaskedLM"),KZo=o(" (LayoutLM model)"),ZZo=l(),aT=a("li"),Pme=a("strong"),eer=o("longformer"),oer=o(" \u2014 "),dq=a("a"),rer=o("TFLongformerForMaskedLM"),ter=o(" (Longformer model)"),aer=l(),nT=a("li"),$me=a("strong"),ner=o("mobilebert"),ser=o(" \u2014 "),cq=a("a"),ler=o("TFMobileBertForMaskedLM"),ier=o(" (MobileBERT model)"),der=l(),sT=a("li"),Ime=a("strong"),cer=o("mpnet"),fer=o(" \u2014 "),fq=a("a"),mer=o("TFMPNetForMaskedLM"),ger=o(" (MPNet model)"),her=l(),lT=a("li"),jme=a("strong"),per=o("rembert"),_er=o(" \u2014 "),mq=a("a"),uer=o("TFRemBertForMaskedLM"),ber=o(" (RemBERT model)"),ver=l(),iT=a("li"),Nme=a("strong"),Ter=o("roberta"),Fer=o(" \u2014 "),gq=a("a"),Cer=o("TFRobertaForMaskedLM"),Mer=o(" (RoBERTa model)"),Eer=l(),dT=a("li"),Dme=a("strong"),yer=o("roformer"),wer=o(" \u2014 "),hq=a("a"),Aer=o("TFRoFormerForMaskedLM"),Ler=o(" (RoFormer model)"),Ber=l(),cT=a("li"),qme=a("strong"),ker=o("tapas"),xer=o(" \u2014 "),pq=a("a"),Rer=o("TFTapasForMaskedLM"),Ser=o(" (TAPAS model)"),Per=l(),fT=a("li"),Gme=a("strong"),$er=o("xlm"),Ier=o(" \u2014 "),_q=a("a"),jer=o("TFXLMWithLMHeadModel"),Ner=o(" (XLM model)"),Der=l(),mT=a("li"),Ome=a("strong"),qer=o("xlm-roberta"),Ger=o(" \u2014 "),uq=a("a"),Oer=o("TFXLMRobertaForMaskedLM"),Xer=o(" (XLM-RoBERTa model)"),zer=l(),Xme=a("p"),Ver=o("Examples:"),Wer=l(),f(dw.$$.fragment),_9e=l(),_c=a("h2"),gT=a("a"),zme=a("span"),f(cw.$$.fragment),Qer=l(),Vme=a("span"),Her=o("TFAutoModelForSeq2SeqLM"),u9e=l(),br=a("div"),f(fw.$$.fragment),Uer=l(),uc=a("p"),Jer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Wme=a("code"),Yer=o("from_pretrained()"),Ker=o("class method or the "),Qme=a("code"),Zer=o("from_config()"),eor=o(`class
method.`),oor=l(),mw=a("p"),ror=o("This class cannot be instantiated directly using "),Hme=a("code"),tor=o("__init__()"),aor=o(" (throws an error)."),nor=l(),ft=a("div"),f(gw.$$.fragment),sor=l(),Ume=a("p"),lor=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ior=l(),bc=a("p"),dor=o(`Note:
Loading a model from its configuration file does `),Jme=a("strong"),cor=o("not"),mor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yme=a("code"),gor=o("from_pretrained()"),hor=o("to load the model weights."),por=l(),Kme=a("p"),_or=o("Examples:"),uor=l(),f(hw.$$.fragment),bor=l(),bo=a("div"),f(pw.$$.fragment),vor=l(),Zme=a("p"),Tor=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),For=l(),gn=a("p"),Cor=o("The model class to instantiate is selected based on the "),ege=a("code"),Mor=o("model_type"),Eor=o(` property of the config object (either
passed as an argument or loaded from `),oge=a("code"),yor=o("pretrained_model_name_or_path"),wor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rge=a("code"),Aor=o("pretrained_model_name_or_path"),Lor=o(":"),Bor=l(),pe=a("ul"),hT=a("li"),tge=a("strong"),kor=o("bart"),xor=o(" \u2014 "),bq=a("a"),Ror=o("TFBartForConditionalGeneration"),Sor=o(" (BART model)"),Por=l(),pT=a("li"),age=a("strong"),$or=o("blenderbot"),Ior=o(" \u2014 "),vq=a("a"),jor=o("TFBlenderbotForConditionalGeneration"),Nor=o(" (Blenderbot model)"),Dor=l(),_T=a("li"),nge=a("strong"),qor=o("blenderbot-small"),Gor=o(" \u2014 "),Tq=a("a"),Oor=o("TFBlenderbotSmallForConditionalGeneration"),Xor=o(" (BlenderbotSmall model)"),zor=l(),uT=a("li"),sge=a("strong"),Vor=o("encoder-decoder"),Wor=o(" \u2014 "),Fq=a("a"),Qor=o("TFEncoderDecoderModel"),Hor=o(" (Encoder decoder model)"),Uor=l(),bT=a("li"),lge=a("strong"),Jor=o("led"),Yor=o(" \u2014 "),Cq=a("a"),Kor=o("TFLEDForConditionalGeneration"),Zor=o(" (LED model)"),err=l(),vT=a("li"),ige=a("strong"),orr=o("marian"),rrr=o(" \u2014 "),Mq=a("a"),trr=o("TFMarianMTModel"),arr=o(" (Marian model)"),nrr=l(),TT=a("li"),dge=a("strong"),srr=o("mbart"),lrr=o(" \u2014 "),Eq=a("a"),irr=o("TFMBartForConditionalGeneration"),drr=o(" (mBART model)"),crr=l(),FT=a("li"),cge=a("strong"),frr=o("mt5"),mrr=o(" \u2014 "),yq=a("a"),grr=o("TFMT5ForConditionalGeneration"),hrr=o(" (mT5 model)"),prr=l(),CT=a("li"),fge=a("strong"),_rr=o("pegasus"),urr=o(" \u2014 "),wq=a("a"),brr=o("TFPegasusForConditionalGeneration"),vrr=o(" (Pegasus model)"),Trr=l(),MT=a("li"),mge=a("strong"),Frr=o("t5"),Crr=o(" \u2014 "),Aq=a("a"),Mrr=o("TFT5ForConditionalGeneration"),Err=o(" (T5 model)"),yrr=l(),gge=a("p"),wrr=o("Examples:"),Arr=l(),f(_w.$$.fragment),b9e=l(),vc=a("h2"),ET=a("a"),hge=a("span"),f(uw.$$.fragment),Lrr=l(),pge=a("span"),Brr=o("TFAutoModelForSequenceClassification"),v9e=l(),vr=a("div"),f(bw.$$.fragment),krr=l(),Tc=a("p"),xrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_ge=a("code"),Rrr=o("from_pretrained()"),Srr=o("class method or the "),uge=a("code"),Prr=o("from_config()"),$rr=o(`class
method.`),Irr=l(),vw=a("p"),jrr=o("This class cannot be instantiated directly using "),bge=a("code"),Nrr=o("__init__()"),Drr=o(" (throws an error)."),qrr=l(),mt=a("div"),f(Tw.$$.fragment),Grr=l(),vge=a("p"),Orr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Xrr=l(),Fc=a("p"),zrr=o(`Note:
Loading a model from its configuration file does `),Tge=a("strong"),Vrr=o("not"),Wrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fge=a("code"),Qrr=o("from_pretrained()"),Hrr=o("to load the model weights."),Urr=l(),Cge=a("p"),Jrr=o("Examples:"),Yrr=l(),f(Fw.$$.fragment),Krr=l(),vo=a("div"),f(Cw.$$.fragment),Zrr=l(),Mge=a("p"),etr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),otr=l(),hn=a("p"),rtr=o("The model class to instantiate is selected based on the "),Ege=a("code"),ttr=o("model_type"),atr=o(` property of the config object (either
passed as an argument or loaded from `),yge=a("code"),ntr=o("pretrained_model_name_or_path"),str=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=a("code"),ltr=o("pretrained_model_name_or_path"),itr=o(":"),dtr=l(),X=a("ul"),yT=a("li"),Age=a("strong"),ctr=o("albert"),ftr=o(" \u2014 "),Lq=a("a"),mtr=o("TFAlbertForSequenceClassification"),gtr=o(" (ALBERT model)"),htr=l(),wT=a("li"),Lge=a("strong"),ptr=o("bert"),_tr=o(" \u2014 "),Bq=a("a"),utr=o("TFBertForSequenceClassification"),btr=o(" (BERT model)"),vtr=l(),AT=a("li"),Bge=a("strong"),Ttr=o("camembert"),Ftr=o(" \u2014 "),kq=a("a"),Ctr=o("TFCamembertForSequenceClassification"),Mtr=o(" (CamemBERT model)"),Etr=l(),LT=a("li"),kge=a("strong"),ytr=o("convbert"),wtr=o(" \u2014 "),xq=a("a"),Atr=o("TFConvBertForSequenceClassification"),Ltr=o(" (ConvBERT model)"),Btr=l(),BT=a("li"),xge=a("strong"),ktr=o("ctrl"),xtr=o(" \u2014 "),Rq=a("a"),Rtr=o("TFCTRLForSequenceClassification"),Str=o(" (CTRL model)"),Ptr=l(),kT=a("li"),Rge=a("strong"),$tr=o("deberta"),Itr=o(" \u2014 "),Sq=a("a"),jtr=o("TFDebertaForSequenceClassification"),Ntr=o(" (DeBERTa model)"),Dtr=l(),xT=a("li"),Sge=a("strong"),qtr=o("deberta-v2"),Gtr=o(" \u2014 "),Pq=a("a"),Otr=o("TFDebertaV2ForSequenceClassification"),Xtr=o(" (DeBERTa-v2 model)"),ztr=l(),RT=a("li"),Pge=a("strong"),Vtr=o("distilbert"),Wtr=o(" \u2014 "),$q=a("a"),Qtr=o("TFDistilBertForSequenceClassification"),Htr=o(" (DistilBERT model)"),Utr=l(),ST=a("li"),$ge=a("strong"),Jtr=o("electra"),Ytr=o(" \u2014 "),Iq=a("a"),Ktr=o("TFElectraForSequenceClassification"),Ztr=o(" (ELECTRA model)"),ear=l(),PT=a("li"),Ige=a("strong"),oar=o("flaubert"),rar=o(" \u2014 "),jq=a("a"),tar=o("TFFlaubertForSequenceClassification"),aar=o(" (FlauBERT model)"),nar=l(),$T=a("li"),jge=a("strong"),sar=o("funnel"),lar=o(" \u2014 "),Nq=a("a"),iar=o("TFFunnelForSequenceClassification"),dar=o(" (Funnel Transformer model)"),car=l(),IT=a("li"),Nge=a("strong"),far=o("gpt2"),mar=o(" \u2014 "),Dq=a("a"),gar=o("TFGPT2ForSequenceClassification"),har=o(" (OpenAI GPT-2 model)"),par=l(),jT=a("li"),Dge=a("strong"),_ar=o("layoutlm"),uar=o(" \u2014 "),qq=a("a"),bar=o("TFLayoutLMForSequenceClassification"),Tar=o(" (LayoutLM model)"),Far=l(),NT=a("li"),qge=a("strong"),Car=o("longformer"),Mar=o(" \u2014 "),Gq=a("a"),Ear=o("TFLongformerForSequenceClassification"),yar=o(" (Longformer model)"),war=l(),DT=a("li"),Gge=a("strong"),Aar=o("mobilebert"),Lar=o(" \u2014 "),Oq=a("a"),Bar=o("TFMobileBertForSequenceClassification"),kar=o(" (MobileBERT model)"),xar=l(),qT=a("li"),Oge=a("strong"),Rar=o("mpnet"),Sar=o(" \u2014 "),Xq=a("a"),Par=o("TFMPNetForSequenceClassification"),$ar=o(" (MPNet model)"),Iar=l(),GT=a("li"),Xge=a("strong"),jar=o("openai-gpt"),Nar=o(" \u2014 "),zq=a("a"),Dar=o("TFOpenAIGPTForSequenceClassification"),qar=o(" (OpenAI GPT model)"),Gar=l(),OT=a("li"),zge=a("strong"),Oar=o("rembert"),Xar=o(" \u2014 "),Vq=a("a"),zar=o("TFRemBertForSequenceClassification"),Var=o(" (RemBERT model)"),War=l(),XT=a("li"),Vge=a("strong"),Qar=o("roberta"),Har=o(" \u2014 "),Wq=a("a"),Uar=o("TFRobertaForSequenceClassification"),Jar=o(" (RoBERTa model)"),Yar=l(),zT=a("li"),Wge=a("strong"),Kar=o("roformer"),Zar=o(" \u2014 "),Qq=a("a"),enr=o("TFRoFormerForSequenceClassification"),onr=o(" (RoFormer model)"),rnr=l(),VT=a("li"),Qge=a("strong"),tnr=o("tapas"),anr=o(" \u2014 "),Hq=a("a"),nnr=o("TFTapasForSequenceClassification"),snr=o(" (TAPAS model)"),lnr=l(),WT=a("li"),Hge=a("strong"),inr=o("transfo-xl"),dnr=o(" \u2014 "),Uq=a("a"),cnr=o("TFTransfoXLForSequenceClassification"),fnr=o(" (Transformer-XL model)"),mnr=l(),QT=a("li"),Uge=a("strong"),gnr=o("xlm"),hnr=o(" \u2014 "),Jq=a("a"),pnr=o("TFXLMForSequenceClassification"),_nr=o(" (XLM model)"),unr=l(),HT=a("li"),Jge=a("strong"),bnr=o("xlm-roberta"),vnr=o(" \u2014 "),Yq=a("a"),Tnr=o("TFXLMRobertaForSequenceClassification"),Fnr=o(" (XLM-RoBERTa model)"),Cnr=l(),UT=a("li"),Yge=a("strong"),Mnr=o("xlnet"),Enr=o(" \u2014 "),Kq=a("a"),ynr=o("TFXLNetForSequenceClassification"),wnr=o(" (XLNet model)"),Anr=l(),Kge=a("p"),Lnr=o("Examples:"),Bnr=l(),f(Mw.$$.fragment),T9e=l(),Cc=a("h2"),JT=a("a"),Zge=a("span"),f(Ew.$$.fragment),knr=l(),ehe=a("span"),xnr=o("TFAutoModelForMultipleChoice"),F9e=l(),Tr=a("div"),f(yw.$$.fragment),Rnr=l(),Mc=a("p"),Snr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ohe=a("code"),Pnr=o("from_pretrained()"),$nr=o("class method or the "),rhe=a("code"),Inr=o("from_config()"),jnr=o(`class
method.`),Nnr=l(),ww=a("p"),Dnr=o("This class cannot be instantiated directly using "),the=a("code"),qnr=o("__init__()"),Gnr=o(" (throws an error)."),Onr=l(),gt=a("div"),f(Aw.$$.fragment),Xnr=l(),ahe=a("p"),znr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Vnr=l(),Ec=a("p"),Wnr=o(`Note:
Loading a model from its configuration file does `),nhe=a("strong"),Qnr=o("not"),Hnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),she=a("code"),Unr=o("from_pretrained()"),Jnr=o("to load the model weights."),Ynr=l(),lhe=a("p"),Knr=o("Examples:"),Znr=l(),f(Lw.$$.fragment),esr=l(),To=a("div"),f(Bw.$$.fragment),osr=l(),ihe=a("p"),rsr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tsr=l(),pn=a("p"),asr=o("The model class to instantiate is selected based on the "),dhe=a("code"),nsr=o("model_type"),ssr=o(` property of the config object (either
passed as an argument or loaded from `),che=a("code"),lsr=o("pretrained_model_name_or_path"),isr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fhe=a("code"),dsr=o("pretrained_model_name_or_path"),csr=o(":"),fsr=l(),te=a("ul"),YT=a("li"),mhe=a("strong"),msr=o("albert"),gsr=o(" \u2014 "),Zq=a("a"),hsr=o("TFAlbertForMultipleChoice"),psr=o(" (ALBERT model)"),_sr=l(),KT=a("li"),ghe=a("strong"),usr=o("bert"),bsr=o(" \u2014 "),eG=a("a"),vsr=o("TFBertForMultipleChoice"),Tsr=o(" (BERT model)"),Fsr=l(),ZT=a("li"),hhe=a("strong"),Csr=o("camembert"),Msr=o(" \u2014 "),oG=a("a"),Esr=o("TFCamembertForMultipleChoice"),ysr=o(" (CamemBERT model)"),wsr=l(),e7=a("li"),phe=a("strong"),Asr=o("convbert"),Lsr=o(" \u2014 "),rG=a("a"),Bsr=o("TFConvBertForMultipleChoice"),ksr=o(" (ConvBERT model)"),xsr=l(),o7=a("li"),_he=a("strong"),Rsr=o("distilbert"),Ssr=o(" \u2014 "),tG=a("a"),Psr=o("TFDistilBertForMultipleChoice"),$sr=o(" (DistilBERT model)"),Isr=l(),r7=a("li"),uhe=a("strong"),jsr=o("electra"),Nsr=o(" \u2014 "),aG=a("a"),Dsr=o("TFElectraForMultipleChoice"),qsr=o(" (ELECTRA model)"),Gsr=l(),t7=a("li"),bhe=a("strong"),Osr=o("flaubert"),Xsr=o(" \u2014 "),nG=a("a"),zsr=o("TFFlaubertForMultipleChoice"),Vsr=o(" (FlauBERT model)"),Wsr=l(),a7=a("li"),vhe=a("strong"),Qsr=o("funnel"),Hsr=o(" \u2014 "),sG=a("a"),Usr=o("TFFunnelForMultipleChoice"),Jsr=o(" (Funnel Transformer model)"),Ysr=l(),n7=a("li"),The=a("strong"),Ksr=o("longformer"),Zsr=o(" \u2014 "),lG=a("a"),elr=o("TFLongformerForMultipleChoice"),olr=o(" (Longformer model)"),rlr=l(),s7=a("li"),Fhe=a("strong"),tlr=o("mobilebert"),alr=o(" \u2014 "),iG=a("a"),nlr=o("TFMobileBertForMultipleChoice"),slr=o(" (MobileBERT model)"),llr=l(),l7=a("li"),Che=a("strong"),ilr=o("mpnet"),dlr=o(" \u2014 "),dG=a("a"),clr=o("TFMPNetForMultipleChoice"),flr=o(" (MPNet model)"),mlr=l(),i7=a("li"),Mhe=a("strong"),glr=o("rembert"),hlr=o(" \u2014 "),cG=a("a"),plr=o("TFRemBertForMultipleChoice"),_lr=o(" (RemBERT model)"),ulr=l(),d7=a("li"),Ehe=a("strong"),blr=o("roberta"),vlr=o(" \u2014 "),fG=a("a"),Tlr=o("TFRobertaForMultipleChoice"),Flr=o(" (RoBERTa model)"),Clr=l(),c7=a("li"),yhe=a("strong"),Mlr=o("roformer"),Elr=o(" \u2014 "),mG=a("a"),ylr=o("TFRoFormerForMultipleChoice"),wlr=o(" (RoFormer model)"),Alr=l(),f7=a("li"),whe=a("strong"),Llr=o("xlm"),Blr=o(" \u2014 "),gG=a("a"),klr=o("TFXLMForMultipleChoice"),xlr=o(" (XLM model)"),Rlr=l(),m7=a("li"),Ahe=a("strong"),Slr=o("xlm-roberta"),Plr=o(" \u2014 "),hG=a("a"),$lr=o("TFXLMRobertaForMultipleChoice"),Ilr=o(" (XLM-RoBERTa model)"),jlr=l(),g7=a("li"),Lhe=a("strong"),Nlr=o("xlnet"),Dlr=o(" \u2014 "),pG=a("a"),qlr=o("TFXLNetForMultipleChoice"),Glr=o(" (XLNet model)"),Olr=l(),Bhe=a("p"),Xlr=o("Examples:"),zlr=l(),f(kw.$$.fragment),C9e=l(),yc=a("h2"),h7=a("a"),khe=a("span"),f(xw.$$.fragment),Vlr=l(),xhe=a("span"),Wlr=o("TFAutoModelForTableQuestionAnswering"),M9e=l(),Fr=a("div"),f(Rw.$$.fragment),Qlr=l(),wc=a("p"),Hlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Rhe=a("code"),Ulr=o("from_pretrained()"),Jlr=o("class method or the "),She=a("code"),Ylr=o("from_config()"),Klr=o(`class
method.`),Zlr=l(),Sw=a("p"),eir=o("This class cannot be instantiated directly using "),Phe=a("code"),oir=o("__init__()"),rir=o(" (throws an error)."),tir=l(),ht=a("div"),f(Pw.$$.fragment),air=l(),$he=a("p"),nir=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),sir=l(),Ac=a("p"),lir=o(`Note:
Loading a model from its configuration file does `),Ihe=a("strong"),iir=o("not"),dir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jhe=a("code"),cir=o("from_pretrained()"),fir=o("to load the model weights."),mir=l(),Nhe=a("p"),gir=o("Examples:"),hir=l(),f($w.$$.fragment),pir=l(),Fo=a("div"),f(Iw.$$.fragment),_ir=l(),Dhe=a("p"),uir=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bir=l(),_n=a("p"),vir=o("The model class to instantiate is selected based on the "),qhe=a("code"),Tir=o("model_type"),Fir=o(` property of the config object (either
passed as an argument or loaded from `),Ghe=a("code"),Cir=o("pretrained_model_name_or_path"),Mir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=a("code"),Eir=o("pretrained_model_name_or_path"),yir=o(":"),wir=l(),Xhe=a("ul"),p7=a("li"),zhe=a("strong"),Air=o("tapas"),Lir=o(" \u2014 "),_G=a("a"),Bir=o("TFTapasForQuestionAnswering"),kir=o(" (TAPAS model)"),xir=l(),Vhe=a("p"),Rir=o("Examples:"),Sir=l(),f(jw.$$.fragment),E9e=l(),Lc=a("h2"),_7=a("a"),Whe=a("span"),f(Nw.$$.fragment),Pir=l(),Qhe=a("span"),$ir=o("TFAutoModelForTokenClassification"),y9e=l(),Cr=a("div"),f(Dw.$$.fragment),Iir=l(),Bc=a("p"),jir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Hhe=a("code"),Nir=o("from_pretrained()"),Dir=o("class method or the "),Uhe=a("code"),qir=o("from_config()"),Gir=o(`class
method.`),Oir=l(),qw=a("p"),Xir=o("This class cannot be instantiated directly using "),Jhe=a("code"),zir=o("__init__()"),Vir=o(" (throws an error)."),Wir=l(),pt=a("div"),f(Gw.$$.fragment),Qir=l(),Yhe=a("p"),Hir=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Uir=l(),kc=a("p"),Jir=o(`Note:
Loading a model from its configuration file does `),Khe=a("strong"),Yir=o("not"),Kir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zhe=a("code"),Zir=o("from_pretrained()"),edr=o("to load the model weights."),odr=l(),epe=a("p"),rdr=o("Examples:"),tdr=l(),f(Ow.$$.fragment),adr=l(),Co=a("div"),f(Xw.$$.fragment),ndr=l(),ope=a("p"),sdr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ldr=l(),un=a("p"),idr=o("The model class to instantiate is selected based on the "),rpe=a("code"),ddr=o("model_type"),cdr=o(` property of the config object (either
passed as an argument or loaded from `),tpe=a("code"),fdr=o("pretrained_model_name_or_path"),mdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=a("code"),gdr=o("pretrained_model_name_or_path"),hdr=o(":"),pdr=l(),K=a("ul"),u7=a("li"),npe=a("strong"),_dr=o("albert"),udr=o(" \u2014 "),uG=a("a"),bdr=o("TFAlbertForTokenClassification"),vdr=o(" (ALBERT model)"),Tdr=l(),b7=a("li"),spe=a("strong"),Fdr=o("bert"),Cdr=o(" \u2014 "),bG=a("a"),Mdr=o("TFBertForTokenClassification"),Edr=o(" (BERT model)"),ydr=l(),v7=a("li"),lpe=a("strong"),wdr=o("camembert"),Adr=o(" \u2014 "),vG=a("a"),Ldr=o("TFCamembertForTokenClassification"),Bdr=o(" (CamemBERT model)"),kdr=l(),T7=a("li"),ipe=a("strong"),xdr=o("convbert"),Rdr=o(" \u2014 "),TG=a("a"),Sdr=o("TFConvBertForTokenClassification"),Pdr=o(" (ConvBERT model)"),$dr=l(),F7=a("li"),dpe=a("strong"),Idr=o("deberta"),jdr=o(" \u2014 "),FG=a("a"),Ndr=o("TFDebertaForTokenClassification"),Ddr=o(" (DeBERTa model)"),qdr=l(),C7=a("li"),cpe=a("strong"),Gdr=o("deberta-v2"),Odr=o(" \u2014 "),CG=a("a"),Xdr=o("TFDebertaV2ForTokenClassification"),zdr=o(" (DeBERTa-v2 model)"),Vdr=l(),M7=a("li"),fpe=a("strong"),Wdr=o("distilbert"),Qdr=o(" \u2014 "),MG=a("a"),Hdr=o("TFDistilBertForTokenClassification"),Udr=o(" (DistilBERT model)"),Jdr=l(),E7=a("li"),mpe=a("strong"),Ydr=o("electra"),Kdr=o(" \u2014 "),EG=a("a"),Zdr=o("TFElectraForTokenClassification"),ecr=o(" (ELECTRA model)"),ocr=l(),y7=a("li"),gpe=a("strong"),rcr=o("flaubert"),tcr=o(" \u2014 "),yG=a("a"),acr=o("TFFlaubertForTokenClassification"),ncr=o(" (FlauBERT model)"),scr=l(),w7=a("li"),hpe=a("strong"),lcr=o("funnel"),icr=o(" \u2014 "),wG=a("a"),dcr=o("TFFunnelForTokenClassification"),ccr=o(" (Funnel Transformer model)"),fcr=l(),A7=a("li"),ppe=a("strong"),mcr=o("layoutlm"),gcr=o(" \u2014 "),AG=a("a"),hcr=o("TFLayoutLMForTokenClassification"),pcr=o(" (LayoutLM model)"),_cr=l(),L7=a("li"),_pe=a("strong"),ucr=o("longformer"),bcr=o(" \u2014 "),LG=a("a"),vcr=o("TFLongformerForTokenClassification"),Tcr=o(" (Longformer model)"),Fcr=l(),B7=a("li"),upe=a("strong"),Ccr=o("mobilebert"),Mcr=o(" \u2014 "),BG=a("a"),Ecr=o("TFMobileBertForTokenClassification"),ycr=o(" (MobileBERT model)"),wcr=l(),k7=a("li"),bpe=a("strong"),Acr=o("mpnet"),Lcr=o(" \u2014 "),kG=a("a"),Bcr=o("TFMPNetForTokenClassification"),kcr=o(" (MPNet model)"),xcr=l(),x7=a("li"),vpe=a("strong"),Rcr=o("rembert"),Scr=o(" \u2014 "),xG=a("a"),Pcr=o("TFRemBertForTokenClassification"),$cr=o(" (RemBERT model)"),Icr=l(),R7=a("li"),Tpe=a("strong"),jcr=o("roberta"),Ncr=o(" \u2014 "),RG=a("a"),Dcr=o("TFRobertaForTokenClassification"),qcr=o(" (RoBERTa model)"),Gcr=l(),S7=a("li"),Fpe=a("strong"),Ocr=o("roformer"),Xcr=o(" \u2014 "),SG=a("a"),zcr=o("TFRoFormerForTokenClassification"),Vcr=o(" (RoFormer model)"),Wcr=l(),P7=a("li"),Cpe=a("strong"),Qcr=o("xlm"),Hcr=o(" \u2014 "),PG=a("a"),Ucr=o("TFXLMForTokenClassification"),Jcr=o(" (XLM model)"),Ycr=l(),$7=a("li"),Mpe=a("strong"),Kcr=o("xlm-roberta"),Zcr=o(" \u2014 "),$G=a("a"),efr=o("TFXLMRobertaForTokenClassification"),ofr=o(" (XLM-RoBERTa model)"),rfr=l(),I7=a("li"),Epe=a("strong"),tfr=o("xlnet"),afr=o(" \u2014 "),IG=a("a"),nfr=o("TFXLNetForTokenClassification"),sfr=o(" (XLNet model)"),lfr=l(),ype=a("p"),ifr=o("Examples:"),dfr=l(),f(zw.$$.fragment),w9e=l(),xc=a("h2"),j7=a("a"),wpe=a("span"),f(Vw.$$.fragment),cfr=l(),Ape=a("span"),ffr=o("TFAutoModelForQuestionAnswering"),A9e=l(),Mr=a("div"),f(Ww.$$.fragment),mfr=l(),Rc=a("p"),gfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lpe=a("code"),hfr=o("from_pretrained()"),pfr=o("class method or the "),Bpe=a("code"),_fr=o("from_config()"),ufr=o(`class
method.`),bfr=l(),Qw=a("p"),vfr=o("This class cannot be instantiated directly using "),kpe=a("code"),Tfr=o("__init__()"),Ffr=o(" (throws an error)."),Cfr=l(),_t=a("div"),f(Hw.$$.fragment),Mfr=l(),xpe=a("p"),Efr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yfr=l(),Sc=a("p"),wfr=o(`Note:
Loading a model from its configuration file does `),Rpe=a("strong"),Afr=o("not"),Lfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Spe=a("code"),Bfr=o("from_pretrained()"),kfr=o("to load the model weights."),xfr=l(),Ppe=a("p"),Rfr=o("Examples:"),Sfr=l(),f(Uw.$$.fragment),Pfr=l(),Mo=a("div"),f(Jw.$$.fragment),$fr=l(),$pe=a("p"),Ifr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jfr=l(),bn=a("p"),Nfr=o("The model class to instantiate is selected based on the "),Ipe=a("code"),Dfr=o("model_type"),qfr=o(` property of the config object (either
passed as an argument or loaded from `),jpe=a("code"),Gfr=o("pretrained_model_name_or_path"),Ofr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=a("code"),Xfr=o("pretrained_model_name_or_path"),zfr=o(":"),Vfr=l(),Z=a("ul"),N7=a("li"),Dpe=a("strong"),Wfr=o("albert"),Qfr=o(" \u2014 "),jG=a("a"),Hfr=o("TFAlbertForQuestionAnswering"),Ufr=o(" (ALBERT model)"),Jfr=l(),D7=a("li"),qpe=a("strong"),Yfr=o("bert"),Kfr=o(" \u2014 "),NG=a("a"),Zfr=o("TFBertForQuestionAnswering"),emr=o(" (BERT model)"),omr=l(),q7=a("li"),Gpe=a("strong"),rmr=o("camembert"),tmr=o(" \u2014 "),DG=a("a"),amr=o("TFCamembertForQuestionAnswering"),nmr=o(" (CamemBERT model)"),smr=l(),G7=a("li"),Ope=a("strong"),lmr=o("convbert"),imr=o(" \u2014 "),qG=a("a"),dmr=o("TFConvBertForQuestionAnswering"),cmr=o(" (ConvBERT model)"),fmr=l(),O7=a("li"),Xpe=a("strong"),mmr=o("deberta"),gmr=o(" \u2014 "),GG=a("a"),hmr=o("TFDebertaForQuestionAnswering"),pmr=o(" (DeBERTa model)"),_mr=l(),X7=a("li"),zpe=a("strong"),umr=o("deberta-v2"),bmr=o(" \u2014 "),OG=a("a"),vmr=o("TFDebertaV2ForQuestionAnswering"),Tmr=o(" (DeBERTa-v2 model)"),Fmr=l(),z7=a("li"),Vpe=a("strong"),Cmr=o("distilbert"),Mmr=o(" \u2014 "),XG=a("a"),Emr=o("TFDistilBertForQuestionAnswering"),ymr=o(" (DistilBERT model)"),wmr=l(),V7=a("li"),Wpe=a("strong"),Amr=o("electra"),Lmr=o(" \u2014 "),zG=a("a"),Bmr=o("TFElectraForQuestionAnswering"),kmr=o(" (ELECTRA model)"),xmr=l(),W7=a("li"),Qpe=a("strong"),Rmr=o("flaubert"),Smr=o(" \u2014 "),VG=a("a"),Pmr=o("TFFlaubertForQuestionAnsweringSimple"),$mr=o(" (FlauBERT model)"),Imr=l(),Q7=a("li"),Hpe=a("strong"),jmr=o("funnel"),Nmr=o(" \u2014 "),WG=a("a"),Dmr=o("TFFunnelForQuestionAnswering"),qmr=o(" (Funnel Transformer model)"),Gmr=l(),H7=a("li"),Upe=a("strong"),Omr=o("longformer"),Xmr=o(" \u2014 "),QG=a("a"),zmr=o("TFLongformerForQuestionAnswering"),Vmr=o(" (Longformer model)"),Wmr=l(),U7=a("li"),Jpe=a("strong"),Qmr=o("mobilebert"),Hmr=o(" \u2014 "),HG=a("a"),Umr=o("TFMobileBertForQuestionAnswering"),Jmr=o(" (MobileBERT model)"),Ymr=l(),J7=a("li"),Ype=a("strong"),Kmr=o("mpnet"),Zmr=o(" \u2014 "),UG=a("a"),egr=o("TFMPNetForQuestionAnswering"),ogr=o(" (MPNet model)"),rgr=l(),Y7=a("li"),Kpe=a("strong"),tgr=o("rembert"),agr=o(" \u2014 "),JG=a("a"),ngr=o("TFRemBertForQuestionAnswering"),sgr=o(" (RemBERT model)"),lgr=l(),K7=a("li"),Zpe=a("strong"),igr=o("roberta"),dgr=o(" \u2014 "),YG=a("a"),cgr=o("TFRobertaForQuestionAnswering"),fgr=o(" (RoBERTa model)"),mgr=l(),Z7=a("li"),e_e=a("strong"),ggr=o("roformer"),hgr=o(" \u2014 "),KG=a("a"),pgr=o("TFRoFormerForQuestionAnswering"),_gr=o(" (RoFormer model)"),ugr=l(),e8=a("li"),o_e=a("strong"),bgr=o("xlm"),vgr=o(" \u2014 "),ZG=a("a"),Tgr=o("TFXLMForQuestionAnsweringSimple"),Fgr=o(" (XLM model)"),Cgr=l(),o8=a("li"),r_e=a("strong"),Mgr=o("xlm-roberta"),Egr=o(" \u2014 "),eO=a("a"),ygr=o("TFXLMRobertaForQuestionAnswering"),wgr=o(" (XLM-RoBERTa model)"),Agr=l(),r8=a("li"),t_e=a("strong"),Lgr=o("xlnet"),Bgr=o(" \u2014 "),oO=a("a"),kgr=o("TFXLNetForQuestionAnsweringSimple"),xgr=o(" (XLNet model)"),Rgr=l(),a_e=a("p"),Sgr=o("Examples:"),Pgr=l(),f(Yw.$$.fragment),L9e=l(),Pc=a("h2"),t8=a("a"),n_e=a("span"),f(Kw.$$.fragment),$gr=l(),s_e=a("span"),Igr=o("TFAutoModelForVision2Seq"),B9e=l(),Er=a("div"),f(Zw.$$.fragment),jgr=l(),$c=a("p"),Ngr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),l_e=a("code"),Dgr=o("from_pretrained()"),qgr=o("class method or the "),i_e=a("code"),Ggr=o("from_config()"),Ogr=o(`class
method.`),Xgr=l(),eA=a("p"),zgr=o("This class cannot be instantiated directly using "),d_e=a("code"),Vgr=o("__init__()"),Wgr=o(" (throws an error)."),Qgr=l(),ut=a("div"),f(oA.$$.fragment),Hgr=l(),c_e=a("p"),Ugr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Jgr=l(),Ic=a("p"),Ygr=o(`Note:
Loading a model from its configuration file does `),f_e=a("strong"),Kgr=o("not"),Zgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),m_e=a("code"),ehr=o("from_pretrained()"),ohr=o("to load the model weights."),rhr=l(),g_e=a("p"),thr=o("Examples:"),ahr=l(),f(rA.$$.fragment),nhr=l(),Eo=a("div"),f(tA.$$.fragment),shr=l(),h_e=a("p"),lhr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ihr=l(),vn=a("p"),dhr=o("The model class to instantiate is selected based on the "),p_e=a("code"),chr=o("model_type"),fhr=o(` property of the config object (either
passed as an argument or loaded from `),__e=a("code"),mhr=o("pretrained_model_name_or_path"),ghr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=a("code"),hhr=o("pretrained_model_name_or_path"),phr=o(":"),_hr=l(),b_e=a("ul"),a8=a("li"),v_e=a("strong"),uhr=o("vision-encoder-decoder"),bhr=o(" \u2014 "),rO=a("a"),vhr=o("TFVisionEncoderDecoderModel"),Thr=o(" (Vision Encoder decoder model)"),Fhr=l(),T_e=a("p"),Chr=o("Examples:"),Mhr=l(),f(aA.$$.fragment),k9e=l(),jc=a("h2"),n8=a("a"),F_e=a("span"),f(nA.$$.fragment),Ehr=l(),C_e=a("span"),yhr=o("TFAutoModelForSpeechSeq2Seq"),x9e=l(),yr=a("div"),f(sA.$$.fragment),whr=l(),Nc=a("p"),Ahr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),M_e=a("code"),Lhr=o("from_pretrained()"),Bhr=o("class method or the "),E_e=a("code"),khr=o("from_config()"),xhr=o(`class
method.`),Rhr=l(),lA=a("p"),Shr=o("This class cannot be instantiated directly using "),y_e=a("code"),Phr=o("__init__()"),$hr=o(" (throws an error)."),Ihr=l(),bt=a("div"),f(iA.$$.fragment),jhr=l(),w_e=a("p"),Nhr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Dhr=l(),Dc=a("p"),qhr=o(`Note:
Loading a model from its configuration file does `),A_e=a("strong"),Ghr=o("not"),Ohr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),L_e=a("code"),Xhr=o("from_pretrained()"),zhr=o("to load the model weights."),Vhr=l(),B_e=a("p"),Whr=o("Examples:"),Qhr=l(),f(dA.$$.fragment),Hhr=l(),yo=a("div"),f(cA.$$.fragment),Uhr=l(),k_e=a("p"),Jhr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Yhr=l(),Tn=a("p"),Khr=o("The model class to instantiate is selected based on the "),x_e=a("code"),Zhr=o("model_type"),epr=o(` property of the config object (either
passed as an argument or loaded from `),R_e=a("code"),opr=o("pretrained_model_name_or_path"),rpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=a("code"),tpr=o("pretrained_model_name_or_path"),apr=o(":"),npr=l(),P_e=a("ul"),s8=a("li"),$_e=a("strong"),spr=o("speech_to_text"),lpr=o(" \u2014 "),tO=a("a"),ipr=o("TFSpeech2TextForConditionalGeneration"),dpr=o(" (Speech2Text model)"),cpr=l(),I_e=a("p"),fpr=o("Examples:"),mpr=l(),f(fA.$$.fragment),R9e=l(),qc=a("h2"),l8=a("a"),j_e=a("span"),f(mA.$$.fragment),gpr=l(),N_e=a("span"),hpr=o("FlaxAutoModel"),S9e=l(),wr=a("div"),f(gA.$$.fragment),ppr=l(),Gc=a("p"),_pr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),D_e=a("code"),upr=o("from_pretrained()"),bpr=o("class method or the "),q_e=a("code"),vpr=o("from_config()"),Tpr=o(`class
method.`),Fpr=l(),hA=a("p"),Cpr=o("This class cannot be instantiated directly using "),G_e=a("code"),Mpr=o("__init__()"),Epr=o(" (throws an error)."),ypr=l(),vt=a("div"),f(pA.$$.fragment),wpr=l(),O_e=a("p"),Apr=o("Instantiates one of the base model classes of the library from a configuration."),Lpr=l(),Oc=a("p"),Bpr=o(`Note:
Loading a model from its configuration file does `),X_e=a("strong"),kpr=o("not"),xpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),z_e=a("code"),Rpr=o("from_pretrained()"),Spr=o("to load the model weights."),Ppr=l(),V_e=a("p"),$pr=o("Examples:"),Ipr=l(),f(_A.$$.fragment),jpr=l(),wo=a("div"),f(uA.$$.fragment),Npr=l(),W_e=a("p"),Dpr=o("Instantiate one of the base model classes of the library from a pretrained model."),qpr=l(),Fn=a("p"),Gpr=o("The model class to instantiate is selected based on the "),Q_e=a("code"),Opr=o("model_type"),Xpr=o(` property of the config object (either
passed as an argument or loaded from `),H_e=a("code"),zpr=o("pretrained_model_name_or_path"),Vpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=a("code"),Wpr=o("pretrained_model_name_or_path"),Qpr=o(":"),Hpr=l(),V=a("ul"),i8=a("li"),J_e=a("strong"),Upr=o("albert"),Jpr=o(" \u2014 "),aO=a("a"),Ypr=o("FlaxAlbertModel"),Kpr=o(" (ALBERT model)"),Zpr=l(),d8=a("li"),Y_e=a("strong"),e_r=o("bart"),o_r=o(" \u2014 "),nO=a("a"),r_r=o("FlaxBartModel"),t_r=o(" (BART model)"),a_r=l(),c8=a("li"),K_e=a("strong"),n_r=o("beit"),s_r=o(" \u2014 "),sO=a("a"),l_r=o("FlaxBeitModel"),i_r=o(" (BEiT model)"),d_r=l(),f8=a("li"),Z_e=a("strong"),c_r=o("bert"),f_r=o(" \u2014 "),lO=a("a"),m_r=o("FlaxBertModel"),g_r=o(" (BERT model)"),h_r=l(),m8=a("li"),eue=a("strong"),p_r=o("big_bird"),__r=o(" \u2014 "),iO=a("a"),u_r=o("FlaxBigBirdModel"),b_r=o(" (BigBird model)"),v_r=l(),g8=a("li"),oue=a("strong"),T_r=o("blenderbot"),F_r=o(" \u2014 "),dO=a("a"),C_r=o("FlaxBlenderbotModel"),M_r=o(" (Blenderbot model)"),E_r=l(),h8=a("li"),rue=a("strong"),y_r=o("blenderbot-small"),w_r=o(" \u2014 "),cO=a("a"),A_r=o("FlaxBlenderbotSmallModel"),L_r=o(" (BlenderbotSmall model)"),B_r=l(),p8=a("li"),tue=a("strong"),k_r=o("clip"),x_r=o(" \u2014 "),fO=a("a"),R_r=o("FlaxCLIPModel"),S_r=o(" (CLIP model)"),P_r=l(),_8=a("li"),aue=a("strong"),$_r=o("distilbert"),I_r=o(" \u2014 "),mO=a("a"),j_r=o("FlaxDistilBertModel"),N_r=o(" (DistilBERT model)"),D_r=l(),u8=a("li"),nue=a("strong"),q_r=o("electra"),G_r=o(" \u2014 "),gO=a("a"),O_r=o("FlaxElectraModel"),X_r=o(" (ELECTRA model)"),z_r=l(),b8=a("li"),sue=a("strong"),V_r=o("gpt2"),W_r=o(" \u2014 "),hO=a("a"),Q_r=o("FlaxGPT2Model"),H_r=o(" (OpenAI GPT-2 model)"),U_r=l(),v8=a("li"),lue=a("strong"),J_r=o("gpt_neo"),Y_r=o(" \u2014 "),pO=a("a"),K_r=o("FlaxGPTNeoModel"),Z_r=o(" (GPT Neo model)"),eur=l(),T8=a("li"),iue=a("strong"),our=o("gptj"),rur=o(" \u2014 "),_O=a("a"),tur=o("FlaxGPTJModel"),aur=o(" (GPT-J model)"),nur=l(),F8=a("li"),due=a("strong"),sur=o("marian"),lur=o(" \u2014 "),uO=a("a"),iur=o("FlaxMarianModel"),dur=o(" (Marian model)"),cur=l(),C8=a("li"),cue=a("strong"),fur=o("mbart"),mur=o(" \u2014 "),bO=a("a"),gur=o("FlaxMBartModel"),hur=o(" (mBART model)"),pur=l(),M8=a("li"),fue=a("strong"),_ur=o("mt5"),uur=o(" \u2014 "),vO=a("a"),bur=o("FlaxMT5Model"),vur=o(" (mT5 model)"),Tur=l(),E8=a("li"),mue=a("strong"),Fur=o("pegasus"),Cur=o(" \u2014 "),TO=a("a"),Mur=o("FlaxPegasusModel"),Eur=o(" (Pegasus model)"),yur=l(),y8=a("li"),gue=a("strong"),wur=o("roberta"),Aur=o(" \u2014 "),FO=a("a"),Lur=o("FlaxRobertaModel"),Bur=o(" (RoBERTa model)"),kur=l(),w8=a("li"),hue=a("strong"),xur=o("roformer"),Rur=o(" \u2014 "),CO=a("a"),Sur=o("FlaxRoFormerModel"),Pur=o(" (RoFormer model)"),$ur=l(),A8=a("li"),pue=a("strong"),Iur=o("t5"),jur=o(" \u2014 "),MO=a("a"),Nur=o("FlaxT5Model"),Dur=o(" (T5 model)"),qur=l(),L8=a("li"),_ue=a("strong"),Gur=o("vision-text-dual-encoder"),Our=o(" \u2014 "),EO=a("a"),Xur=o("FlaxVisionTextDualEncoderModel"),zur=o(" (VisionTextDualEncoder model)"),Vur=l(),B8=a("li"),uue=a("strong"),Wur=o("vit"),Qur=o(" \u2014 "),yO=a("a"),Hur=o("FlaxViTModel"),Uur=o(" (ViT model)"),Jur=l(),k8=a("li"),bue=a("strong"),Yur=o("wav2vec2"),Kur=o(" \u2014 "),wO=a("a"),Zur=o("FlaxWav2Vec2Model"),e1r=o(" (Wav2Vec2 model)"),o1r=l(),x8=a("li"),vue=a("strong"),r1r=o("xglm"),t1r=o(" \u2014 "),AO=a("a"),a1r=o("FlaxXGLMModel"),n1r=o(" (XGLM model)"),s1r=l(),Tue=a("p"),l1r=o("Examples:"),i1r=l(),f(bA.$$.fragment),P9e=l(),Xc=a("h2"),R8=a("a"),Fue=a("span"),f(vA.$$.fragment),d1r=l(),Cue=a("span"),c1r=o("FlaxAutoModelForCausalLM"),$9e=l(),Ar=a("div"),f(TA.$$.fragment),f1r=l(),zc=a("p"),m1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Mue=a("code"),g1r=o("from_pretrained()"),h1r=o("class method or the "),Eue=a("code"),p1r=o("from_config()"),_1r=o(`class
method.`),u1r=l(),FA=a("p"),b1r=o("This class cannot be instantiated directly using "),yue=a("code"),v1r=o("__init__()"),T1r=o(" (throws an error)."),F1r=l(),Tt=a("div"),f(CA.$$.fragment),C1r=l(),wue=a("p"),M1r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),E1r=l(),Vc=a("p"),y1r=o(`Note:
Loading a model from its configuration file does `),Aue=a("strong"),w1r=o("not"),A1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lue=a("code"),L1r=o("from_pretrained()"),B1r=o("to load the model weights."),k1r=l(),Bue=a("p"),x1r=o("Examples:"),R1r=l(),f(MA.$$.fragment),S1r=l(),Ao=a("div"),f(EA.$$.fragment),P1r=l(),kue=a("p"),$1r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),I1r=l(),Cn=a("p"),j1r=o("The model class to instantiate is selected based on the "),xue=a("code"),N1r=o("model_type"),D1r=o(` property of the config object (either
passed as an argument or loaded from `),Rue=a("code"),q1r=o("pretrained_model_name_or_path"),G1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=a("code"),O1r=o("pretrained_model_name_or_path"),X1r=o(":"),z1r=l(),Mn=a("ul"),S8=a("li"),Pue=a("strong"),V1r=o("gpt2"),W1r=o(" \u2014 "),LO=a("a"),Q1r=o("FlaxGPT2LMHeadModel"),H1r=o(" (OpenAI GPT-2 model)"),U1r=l(),P8=a("li"),$ue=a("strong"),J1r=o("gpt_neo"),Y1r=o(" \u2014 "),BO=a("a"),K1r=o("FlaxGPTNeoForCausalLM"),Z1r=o(" (GPT Neo model)"),e4r=l(),$8=a("li"),Iue=a("strong"),o4r=o("gptj"),r4r=o(" \u2014 "),kO=a("a"),t4r=o("FlaxGPTJForCausalLM"),a4r=o(" (GPT-J model)"),n4r=l(),I8=a("li"),jue=a("strong"),s4r=o("xglm"),l4r=o(" \u2014 "),xO=a("a"),i4r=o("FlaxXGLMForCausalLM"),d4r=o(" (XGLM model)"),c4r=l(),Nue=a("p"),f4r=o("Examples:"),m4r=l(),f(yA.$$.fragment),I9e=l(),Wc=a("h2"),j8=a("a"),Due=a("span"),f(wA.$$.fragment),g4r=l(),que=a("span"),h4r=o("FlaxAutoModelForPreTraining"),j9e=l(),Lr=a("div"),f(AA.$$.fragment),p4r=l(),Qc=a("p"),_4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Gue=a("code"),u4r=o("from_pretrained()"),b4r=o("class method or the "),Oue=a("code"),v4r=o("from_config()"),T4r=o(`class
method.`),F4r=l(),LA=a("p"),C4r=o("This class cannot be instantiated directly using "),Xue=a("code"),M4r=o("__init__()"),E4r=o(" (throws an error)."),y4r=l(),Ft=a("div"),f(BA.$$.fragment),w4r=l(),zue=a("p"),A4r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),L4r=l(),Hc=a("p"),B4r=o(`Note:
Loading a model from its configuration file does `),Vue=a("strong"),k4r=o("not"),x4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wue=a("code"),R4r=o("from_pretrained()"),S4r=o("to load the model weights."),P4r=l(),Que=a("p"),$4r=o("Examples:"),I4r=l(),f(kA.$$.fragment),j4r=l(),Lo=a("div"),f(xA.$$.fragment),N4r=l(),Hue=a("p"),D4r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),q4r=l(),En=a("p"),G4r=o("The model class to instantiate is selected based on the "),Uue=a("code"),O4r=o("model_type"),X4r=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),z4r=o("pretrained_model_name_or_path"),V4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),W4r=o("pretrained_model_name_or_path"),Q4r=o(":"),H4r=l(),fe=a("ul"),N8=a("li"),Kue=a("strong"),U4r=o("albert"),J4r=o(" \u2014 "),RO=a("a"),Y4r=o("FlaxAlbertForPreTraining"),K4r=o(" (ALBERT model)"),Z4r=l(),D8=a("li"),Zue=a("strong"),ebr=o("bart"),obr=o(" \u2014 "),SO=a("a"),rbr=o("FlaxBartForConditionalGeneration"),tbr=o(" (BART model)"),abr=l(),q8=a("li"),e1e=a("strong"),nbr=o("bert"),sbr=o(" \u2014 "),PO=a("a"),lbr=o("FlaxBertForPreTraining"),ibr=o(" (BERT model)"),dbr=l(),G8=a("li"),o1e=a("strong"),cbr=o("big_bird"),fbr=o(" \u2014 "),$O=a("a"),mbr=o("FlaxBigBirdForPreTraining"),gbr=o(" (BigBird model)"),hbr=l(),O8=a("li"),r1e=a("strong"),pbr=o("electra"),_br=o(" \u2014 "),IO=a("a"),ubr=o("FlaxElectraForPreTraining"),bbr=o(" (ELECTRA model)"),vbr=l(),X8=a("li"),t1e=a("strong"),Tbr=o("mbart"),Fbr=o(" \u2014 "),jO=a("a"),Cbr=o("FlaxMBartForConditionalGeneration"),Mbr=o(" (mBART model)"),Ebr=l(),z8=a("li"),a1e=a("strong"),ybr=o("mt5"),wbr=o(" \u2014 "),NO=a("a"),Abr=o("FlaxMT5ForConditionalGeneration"),Lbr=o(" (mT5 model)"),Bbr=l(),V8=a("li"),n1e=a("strong"),kbr=o("roberta"),xbr=o(" \u2014 "),DO=a("a"),Rbr=o("FlaxRobertaForMaskedLM"),Sbr=o(" (RoBERTa model)"),Pbr=l(),W8=a("li"),s1e=a("strong"),$br=o("roformer"),Ibr=o(" \u2014 "),qO=a("a"),jbr=o("FlaxRoFormerForMaskedLM"),Nbr=o(" (RoFormer model)"),Dbr=l(),Q8=a("li"),l1e=a("strong"),qbr=o("t5"),Gbr=o(" \u2014 "),GO=a("a"),Obr=o("FlaxT5ForConditionalGeneration"),Xbr=o(" (T5 model)"),zbr=l(),H8=a("li"),i1e=a("strong"),Vbr=o("wav2vec2"),Wbr=o(" \u2014 "),OO=a("a"),Qbr=o("FlaxWav2Vec2ForPreTraining"),Hbr=o(" (Wav2Vec2 model)"),Ubr=l(),d1e=a("p"),Jbr=o("Examples:"),Ybr=l(),f(RA.$$.fragment),N9e=l(),Uc=a("h2"),U8=a("a"),c1e=a("span"),f(SA.$$.fragment),Kbr=l(),f1e=a("span"),Zbr=o("FlaxAutoModelForMaskedLM"),D9e=l(),Br=a("div"),f(PA.$$.fragment),e5r=l(),Jc=a("p"),o5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),m1e=a("code"),r5r=o("from_pretrained()"),t5r=o("class method or the "),g1e=a("code"),a5r=o("from_config()"),n5r=o(`class
method.`),s5r=l(),$A=a("p"),l5r=o("This class cannot be instantiated directly using "),h1e=a("code"),i5r=o("__init__()"),d5r=o(" (throws an error)."),c5r=l(),Ct=a("div"),f(IA.$$.fragment),f5r=l(),p1e=a("p"),m5r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),g5r=l(),Yc=a("p"),h5r=o(`Note:
Loading a model from its configuration file does `),_1e=a("strong"),p5r=o("not"),_5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u1e=a("code"),u5r=o("from_pretrained()"),b5r=o("to load the model weights."),v5r=l(),b1e=a("p"),T5r=o("Examples:"),F5r=l(),f(jA.$$.fragment),C5r=l(),Bo=a("div"),f(NA.$$.fragment),M5r=l(),v1e=a("p"),E5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),y5r=l(),yn=a("p"),w5r=o("The model class to instantiate is selected based on the "),T1e=a("code"),A5r=o("model_type"),L5r=o(` property of the config object (either
passed as an argument or loaded from `),F1e=a("code"),B5r=o("pretrained_model_name_or_path"),k5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),x5r=o("pretrained_model_name_or_path"),R5r=o(":"),S5r=l(),ve=a("ul"),J8=a("li"),M1e=a("strong"),P5r=o("albert"),$5r=o(" \u2014 "),XO=a("a"),I5r=o("FlaxAlbertForMaskedLM"),j5r=o(" (ALBERT model)"),N5r=l(),Y8=a("li"),E1e=a("strong"),D5r=o("bart"),q5r=o(" \u2014 "),zO=a("a"),G5r=o("FlaxBartForConditionalGeneration"),O5r=o(" (BART model)"),X5r=l(),K8=a("li"),y1e=a("strong"),z5r=o("bert"),V5r=o(" \u2014 "),VO=a("a"),W5r=o("FlaxBertForMaskedLM"),Q5r=o(" (BERT model)"),H5r=l(),Z8=a("li"),w1e=a("strong"),U5r=o("big_bird"),J5r=o(" \u2014 "),WO=a("a"),Y5r=o("FlaxBigBirdForMaskedLM"),K5r=o(" (BigBird model)"),Z5r=l(),eF=a("li"),A1e=a("strong"),e2r=o("distilbert"),o2r=o(" \u2014 "),QO=a("a"),r2r=o("FlaxDistilBertForMaskedLM"),t2r=o(" (DistilBERT model)"),a2r=l(),oF=a("li"),L1e=a("strong"),n2r=o("electra"),s2r=o(" \u2014 "),HO=a("a"),l2r=o("FlaxElectraForMaskedLM"),i2r=o(" (ELECTRA model)"),d2r=l(),rF=a("li"),B1e=a("strong"),c2r=o("mbart"),f2r=o(" \u2014 "),UO=a("a"),m2r=o("FlaxMBartForConditionalGeneration"),g2r=o(" (mBART model)"),h2r=l(),tF=a("li"),k1e=a("strong"),p2r=o("roberta"),_2r=o(" \u2014 "),JO=a("a"),u2r=o("FlaxRobertaForMaskedLM"),b2r=o(" (RoBERTa model)"),v2r=l(),aF=a("li"),x1e=a("strong"),T2r=o("roformer"),F2r=o(" \u2014 "),YO=a("a"),C2r=o("FlaxRoFormerForMaskedLM"),M2r=o(" (RoFormer model)"),E2r=l(),R1e=a("p"),y2r=o("Examples:"),w2r=l(),f(DA.$$.fragment),q9e=l(),Kc=a("h2"),nF=a("a"),S1e=a("span"),f(qA.$$.fragment),A2r=l(),P1e=a("span"),L2r=o("FlaxAutoModelForSeq2SeqLM"),G9e=l(),kr=a("div"),f(GA.$$.fragment),B2r=l(),Zc=a("p"),k2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$1e=a("code"),x2r=o("from_pretrained()"),R2r=o("class method or the "),I1e=a("code"),S2r=o("from_config()"),P2r=o(`class
method.`),$2r=l(),OA=a("p"),I2r=o("This class cannot be instantiated directly using "),j1e=a("code"),j2r=o("__init__()"),N2r=o(" (throws an error)."),D2r=l(),Mt=a("div"),f(XA.$$.fragment),q2r=l(),N1e=a("p"),G2r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),O2r=l(),ef=a("p"),X2r=o(`Note:
Loading a model from its configuration file does `),D1e=a("strong"),z2r=o("not"),V2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),q1e=a("code"),W2r=o("from_pretrained()"),Q2r=o("to load the model weights."),H2r=l(),G1e=a("p"),U2r=o("Examples:"),J2r=l(),f(zA.$$.fragment),Y2r=l(),ko=a("div"),f(VA.$$.fragment),K2r=l(),O1e=a("p"),Z2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),evr=l(),wn=a("p"),ovr=o("The model class to instantiate is selected based on the "),X1e=a("code"),rvr=o("model_type"),tvr=o(` property of the config object (either
passed as an argument or loaded from `),z1e=a("code"),avr=o("pretrained_model_name_or_path"),nvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),svr=o("pretrained_model_name_or_path"),lvr=o(":"),ivr=l(),Te=a("ul"),sF=a("li"),W1e=a("strong"),dvr=o("bart"),cvr=o(" \u2014 "),KO=a("a"),fvr=o("FlaxBartForConditionalGeneration"),mvr=o(" (BART model)"),gvr=l(),lF=a("li"),Q1e=a("strong"),hvr=o("blenderbot"),pvr=o(" \u2014 "),ZO=a("a"),_vr=o("FlaxBlenderbotForConditionalGeneration"),uvr=o(" (Blenderbot model)"),bvr=l(),iF=a("li"),H1e=a("strong"),vvr=o("blenderbot-small"),Tvr=o(" \u2014 "),eX=a("a"),Fvr=o("FlaxBlenderbotSmallForConditionalGeneration"),Cvr=o(" (BlenderbotSmall model)"),Mvr=l(),dF=a("li"),U1e=a("strong"),Evr=o("encoder-decoder"),yvr=o(" \u2014 "),oX=a("a"),wvr=o("FlaxEncoderDecoderModel"),Avr=o(" (Encoder decoder model)"),Lvr=l(),cF=a("li"),J1e=a("strong"),Bvr=o("marian"),kvr=o(" \u2014 "),rX=a("a"),xvr=o("FlaxMarianMTModel"),Rvr=o(" (Marian model)"),Svr=l(),fF=a("li"),Y1e=a("strong"),Pvr=o("mbart"),$vr=o(" \u2014 "),tX=a("a"),Ivr=o("FlaxMBartForConditionalGeneration"),jvr=o(" (mBART model)"),Nvr=l(),mF=a("li"),K1e=a("strong"),Dvr=o("mt5"),qvr=o(" \u2014 "),aX=a("a"),Gvr=o("FlaxMT5ForConditionalGeneration"),Ovr=o(" (mT5 model)"),Xvr=l(),gF=a("li"),Z1e=a("strong"),zvr=o("pegasus"),Vvr=o(" \u2014 "),nX=a("a"),Wvr=o("FlaxPegasusForConditionalGeneration"),Qvr=o(" (Pegasus model)"),Hvr=l(),hF=a("li"),e4e=a("strong"),Uvr=o("t5"),Jvr=o(" \u2014 "),sX=a("a"),Yvr=o("FlaxT5ForConditionalGeneration"),Kvr=o(" (T5 model)"),Zvr=l(),o4e=a("p"),eTr=o("Examples:"),oTr=l(),f(WA.$$.fragment),O9e=l(),of=a("h2"),pF=a("a"),r4e=a("span"),f(QA.$$.fragment),rTr=l(),t4e=a("span"),tTr=o("FlaxAutoModelForSequenceClassification"),X9e=l(),xr=a("div"),f(HA.$$.fragment),aTr=l(),rf=a("p"),nTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),a4e=a("code"),sTr=o("from_pretrained()"),lTr=o("class method or the "),n4e=a("code"),iTr=o("from_config()"),dTr=o(`class
method.`),cTr=l(),UA=a("p"),fTr=o("This class cannot be instantiated directly using "),s4e=a("code"),mTr=o("__init__()"),gTr=o(" (throws an error)."),hTr=l(),Et=a("div"),f(JA.$$.fragment),pTr=l(),l4e=a("p"),_Tr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uTr=l(),tf=a("p"),bTr=o(`Note:
Loading a model from its configuration file does `),i4e=a("strong"),vTr=o("not"),TTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),d4e=a("code"),FTr=o("from_pretrained()"),CTr=o("to load the model weights."),MTr=l(),c4e=a("p"),ETr=o("Examples:"),yTr=l(),f(YA.$$.fragment),wTr=l(),xo=a("div"),f(KA.$$.fragment),ATr=l(),f4e=a("p"),LTr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),BTr=l(),An=a("p"),kTr=o("The model class to instantiate is selected based on the "),m4e=a("code"),xTr=o("model_type"),RTr=o(` property of the config object (either
passed as an argument or loaded from `),g4e=a("code"),STr=o("pretrained_model_name_or_path"),PTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=a("code"),$Tr=o("pretrained_model_name_or_path"),ITr=o(":"),jTr=l(),Fe=a("ul"),_F=a("li"),p4e=a("strong"),NTr=o("albert"),DTr=o(" \u2014 "),lX=a("a"),qTr=o("FlaxAlbertForSequenceClassification"),GTr=o(" (ALBERT model)"),OTr=l(),uF=a("li"),_4e=a("strong"),XTr=o("bart"),zTr=o(" \u2014 "),iX=a("a"),VTr=o("FlaxBartForSequenceClassification"),WTr=o(" (BART model)"),QTr=l(),bF=a("li"),u4e=a("strong"),HTr=o("bert"),UTr=o(" \u2014 "),dX=a("a"),JTr=o("FlaxBertForSequenceClassification"),YTr=o(" (BERT model)"),KTr=l(),vF=a("li"),b4e=a("strong"),ZTr=o("big_bird"),e7r=o(" \u2014 "),cX=a("a"),o7r=o("FlaxBigBirdForSequenceClassification"),r7r=o(" (BigBird model)"),t7r=l(),TF=a("li"),v4e=a("strong"),a7r=o("distilbert"),n7r=o(" \u2014 "),fX=a("a"),s7r=o("FlaxDistilBertForSequenceClassification"),l7r=o(" (DistilBERT model)"),i7r=l(),FF=a("li"),T4e=a("strong"),d7r=o("electra"),c7r=o(" \u2014 "),mX=a("a"),f7r=o("FlaxElectraForSequenceClassification"),m7r=o(" (ELECTRA model)"),g7r=l(),CF=a("li"),F4e=a("strong"),h7r=o("mbart"),p7r=o(" \u2014 "),gX=a("a"),_7r=o("FlaxMBartForSequenceClassification"),u7r=o(" (mBART model)"),b7r=l(),MF=a("li"),C4e=a("strong"),v7r=o("roberta"),T7r=o(" \u2014 "),hX=a("a"),F7r=o("FlaxRobertaForSequenceClassification"),C7r=o(" (RoBERTa model)"),M7r=l(),EF=a("li"),M4e=a("strong"),E7r=o("roformer"),y7r=o(" \u2014 "),pX=a("a"),w7r=o("FlaxRoFormerForSequenceClassification"),A7r=o(" (RoFormer model)"),L7r=l(),E4e=a("p"),B7r=o("Examples:"),k7r=l(),f(ZA.$$.fragment),z9e=l(),af=a("h2"),yF=a("a"),y4e=a("span"),f(e6.$$.fragment),x7r=l(),w4e=a("span"),R7r=o("FlaxAutoModelForQuestionAnswering"),V9e=l(),Rr=a("div"),f(o6.$$.fragment),S7r=l(),nf=a("p"),P7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),A4e=a("code"),$7r=o("from_pretrained()"),I7r=o("class method or the "),L4e=a("code"),j7r=o("from_config()"),N7r=o(`class
method.`),D7r=l(),r6=a("p"),q7r=o("This class cannot be instantiated directly using "),B4e=a("code"),G7r=o("__init__()"),O7r=o(" (throws an error)."),X7r=l(),yt=a("div"),f(t6.$$.fragment),z7r=l(),k4e=a("p"),V7r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),W7r=l(),sf=a("p"),Q7r=o(`Note:
Loading a model from its configuration file does `),x4e=a("strong"),H7r=o("not"),U7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),R4e=a("code"),J7r=o("from_pretrained()"),Y7r=o("to load the model weights."),K7r=l(),S4e=a("p"),Z7r=o("Examples:"),e8r=l(),f(a6.$$.fragment),o8r=l(),Ro=a("div"),f(n6.$$.fragment),r8r=l(),P4e=a("p"),t8r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),a8r=l(),Ln=a("p"),n8r=o("The model class to instantiate is selected based on the "),$4e=a("code"),s8r=o("model_type"),l8r=o(` property of the config object (either
passed as an argument or loaded from `),I4e=a("code"),i8r=o("pretrained_model_name_or_path"),d8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=a("code"),c8r=o("pretrained_model_name_or_path"),f8r=o(":"),m8r=l(),Ce=a("ul"),wF=a("li"),N4e=a("strong"),g8r=o("albert"),h8r=o(" \u2014 "),_X=a("a"),p8r=o("FlaxAlbertForQuestionAnswering"),_8r=o(" (ALBERT model)"),u8r=l(),AF=a("li"),D4e=a("strong"),b8r=o("bart"),v8r=o(" \u2014 "),uX=a("a"),T8r=o("FlaxBartForQuestionAnswering"),F8r=o(" (BART model)"),C8r=l(),LF=a("li"),q4e=a("strong"),M8r=o("bert"),E8r=o(" \u2014 "),bX=a("a"),y8r=o("FlaxBertForQuestionAnswering"),w8r=o(" (BERT model)"),A8r=l(),BF=a("li"),G4e=a("strong"),L8r=o("big_bird"),B8r=o(" \u2014 "),vX=a("a"),k8r=o("FlaxBigBirdForQuestionAnswering"),x8r=o(" (BigBird model)"),R8r=l(),kF=a("li"),O4e=a("strong"),S8r=o("distilbert"),P8r=o(" \u2014 "),TX=a("a"),$8r=o("FlaxDistilBertForQuestionAnswering"),I8r=o(" (DistilBERT model)"),j8r=l(),xF=a("li"),X4e=a("strong"),N8r=o("electra"),D8r=o(" \u2014 "),FX=a("a"),q8r=o("FlaxElectraForQuestionAnswering"),G8r=o(" (ELECTRA model)"),O8r=l(),RF=a("li"),z4e=a("strong"),X8r=o("mbart"),z8r=o(" \u2014 "),CX=a("a"),V8r=o("FlaxMBartForQuestionAnswering"),W8r=o(" (mBART model)"),Q8r=l(),SF=a("li"),V4e=a("strong"),H8r=o("roberta"),U8r=o(" \u2014 "),MX=a("a"),J8r=o("FlaxRobertaForQuestionAnswering"),Y8r=o(" (RoBERTa model)"),K8r=l(),PF=a("li"),W4e=a("strong"),Z8r=o("roformer"),eFr=o(" \u2014 "),EX=a("a"),oFr=o("FlaxRoFormerForQuestionAnswering"),rFr=o(" (RoFormer model)"),tFr=l(),Q4e=a("p"),aFr=o("Examples:"),nFr=l(),f(s6.$$.fragment),W9e=l(),lf=a("h2"),$F=a("a"),H4e=a("span"),f(l6.$$.fragment),sFr=l(),U4e=a("span"),lFr=o("FlaxAutoModelForTokenClassification"),Q9e=l(),Sr=a("div"),f(i6.$$.fragment),iFr=l(),df=a("p"),dFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),J4e=a("code"),cFr=o("from_pretrained()"),fFr=o("class method or the "),Y4e=a("code"),mFr=o("from_config()"),gFr=o(`class
method.`),hFr=l(),d6=a("p"),pFr=o("This class cannot be instantiated directly using "),K4e=a("code"),_Fr=o("__init__()"),uFr=o(" (throws an error)."),bFr=l(),wt=a("div"),f(c6.$$.fragment),vFr=l(),Z4e=a("p"),TFr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),FFr=l(),cf=a("p"),CFr=o(`Note:
Loading a model from its configuration file does `),ebe=a("strong"),MFr=o("not"),EFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),obe=a("code"),yFr=o("from_pretrained()"),wFr=o("to load the model weights."),AFr=l(),rbe=a("p"),LFr=o("Examples:"),BFr=l(),f(f6.$$.fragment),kFr=l(),So=a("div"),f(m6.$$.fragment),xFr=l(),tbe=a("p"),RFr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),SFr=l(),Bn=a("p"),PFr=o("The model class to instantiate is selected based on the "),abe=a("code"),$Fr=o("model_type"),IFr=o(` property of the config object (either
passed as an argument or loaded from `),nbe=a("code"),jFr=o("pretrained_model_name_or_path"),NFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=a("code"),DFr=o("pretrained_model_name_or_path"),qFr=o(":"),GFr=l(),so=a("ul"),IF=a("li"),lbe=a("strong"),OFr=o("albert"),XFr=o(" \u2014 "),yX=a("a"),zFr=o("FlaxAlbertForTokenClassification"),VFr=o(" (ALBERT model)"),WFr=l(),jF=a("li"),ibe=a("strong"),QFr=o("bert"),HFr=o(" \u2014 "),wX=a("a"),UFr=o("FlaxBertForTokenClassification"),JFr=o(" (BERT model)"),YFr=l(),NF=a("li"),dbe=a("strong"),KFr=o("big_bird"),ZFr=o(" \u2014 "),AX=a("a"),eCr=o("FlaxBigBirdForTokenClassification"),oCr=o(" (BigBird model)"),rCr=l(),DF=a("li"),cbe=a("strong"),tCr=o("distilbert"),aCr=o(" \u2014 "),LX=a("a"),nCr=o("FlaxDistilBertForTokenClassification"),sCr=o(" (DistilBERT model)"),lCr=l(),qF=a("li"),fbe=a("strong"),iCr=o("electra"),dCr=o(" \u2014 "),BX=a("a"),cCr=o("FlaxElectraForTokenClassification"),fCr=o(" (ELECTRA model)"),mCr=l(),GF=a("li"),mbe=a("strong"),gCr=o("roberta"),hCr=o(" \u2014 "),kX=a("a"),pCr=o("FlaxRobertaForTokenClassification"),_Cr=o(" (RoBERTa model)"),uCr=l(),OF=a("li"),gbe=a("strong"),bCr=o("roformer"),vCr=o(" \u2014 "),xX=a("a"),TCr=o("FlaxRoFormerForTokenClassification"),FCr=o(" (RoFormer model)"),CCr=l(),hbe=a("p"),MCr=o("Examples:"),ECr=l(),f(g6.$$.fragment),H9e=l(),ff=a("h2"),XF=a("a"),pbe=a("span"),f(h6.$$.fragment),yCr=l(),_be=a("span"),wCr=o("FlaxAutoModelForMultipleChoice"),U9e=l(),Pr=a("div"),f(p6.$$.fragment),ACr=l(),mf=a("p"),LCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ube=a("code"),BCr=o("from_pretrained()"),kCr=o("class method or the "),bbe=a("code"),xCr=o("from_config()"),RCr=o(`class
method.`),SCr=l(),_6=a("p"),PCr=o("This class cannot be instantiated directly using "),vbe=a("code"),$Cr=o("__init__()"),ICr=o(" (throws an error)."),jCr=l(),At=a("div"),f(u6.$$.fragment),NCr=l(),Tbe=a("p"),DCr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qCr=l(),gf=a("p"),GCr=o(`Note:
Loading a model from its configuration file does `),Fbe=a("strong"),OCr=o("not"),XCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cbe=a("code"),zCr=o("from_pretrained()"),VCr=o("to load the model weights."),WCr=l(),Mbe=a("p"),QCr=o("Examples:"),HCr=l(),f(b6.$$.fragment),UCr=l(),Po=a("div"),f(v6.$$.fragment),JCr=l(),Ebe=a("p"),YCr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),KCr=l(),kn=a("p"),ZCr=o("The model class to instantiate is selected based on the "),ybe=a("code"),eMr=o("model_type"),oMr=o(` property of the config object (either
passed as an argument or loaded from `),wbe=a("code"),rMr=o("pretrained_model_name_or_path"),tMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=a("code"),aMr=o("pretrained_model_name_or_path"),nMr=o(":"),sMr=l(),lo=a("ul"),zF=a("li"),Lbe=a("strong"),lMr=o("albert"),iMr=o(" \u2014 "),RX=a("a"),dMr=o("FlaxAlbertForMultipleChoice"),cMr=o(" (ALBERT model)"),fMr=l(),VF=a("li"),Bbe=a("strong"),mMr=o("bert"),gMr=o(" \u2014 "),SX=a("a"),hMr=o("FlaxBertForMultipleChoice"),pMr=o(" (BERT model)"),_Mr=l(),WF=a("li"),kbe=a("strong"),uMr=o("big_bird"),bMr=o(" \u2014 "),PX=a("a"),vMr=o("FlaxBigBirdForMultipleChoice"),TMr=o(" (BigBird model)"),FMr=l(),QF=a("li"),xbe=a("strong"),CMr=o("distilbert"),MMr=o(" \u2014 "),$X=a("a"),EMr=o("FlaxDistilBertForMultipleChoice"),yMr=o(" (DistilBERT model)"),wMr=l(),HF=a("li"),Rbe=a("strong"),AMr=o("electra"),LMr=o(" \u2014 "),IX=a("a"),BMr=o("FlaxElectraForMultipleChoice"),kMr=o(" (ELECTRA model)"),xMr=l(),UF=a("li"),Sbe=a("strong"),RMr=o("roberta"),SMr=o(" \u2014 "),jX=a("a"),PMr=o("FlaxRobertaForMultipleChoice"),$Mr=o(" (RoBERTa model)"),IMr=l(),JF=a("li"),Pbe=a("strong"),jMr=o("roformer"),NMr=o(" \u2014 "),NX=a("a"),DMr=o("FlaxRoFormerForMultipleChoice"),qMr=o(" (RoFormer model)"),GMr=l(),$be=a("p"),OMr=o("Examples:"),XMr=l(),f(T6.$$.fragment),J9e=l(),hf=a("h2"),YF=a("a"),Ibe=a("span"),f(F6.$$.fragment),zMr=l(),jbe=a("span"),VMr=o("FlaxAutoModelForNextSentencePrediction"),Y9e=l(),$r=a("div"),f(C6.$$.fragment),WMr=l(),pf=a("p"),QMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Nbe=a("code"),HMr=o("from_pretrained()"),UMr=o("class method or the "),Dbe=a("code"),JMr=o("from_config()"),YMr=o(`class
method.`),KMr=l(),M6=a("p"),ZMr=o("This class cannot be instantiated directly using "),qbe=a("code"),eEr=o("__init__()"),oEr=o(" (throws an error)."),rEr=l(),Lt=a("div"),f(E6.$$.fragment),tEr=l(),Gbe=a("p"),aEr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),nEr=l(),_f=a("p"),sEr=o(`Note:
Loading a model from its configuration file does `),Obe=a("strong"),lEr=o("not"),iEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xbe=a("code"),dEr=o("from_pretrained()"),cEr=o("to load the model weights."),fEr=l(),zbe=a("p"),mEr=o("Examples:"),gEr=l(),f(y6.$$.fragment),hEr=l(),$o=a("div"),f(w6.$$.fragment),pEr=l(),Vbe=a("p"),_Er=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uEr=l(),xn=a("p"),bEr=o("The model class to instantiate is selected based on the "),Wbe=a("code"),vEr=o("model_type"),TEr=o(` property of the config object (either
passed as an argument or loaded from `),Qbe=a("code"),FEr=o("pretrained_model_name_or_path"),CEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=a("code"),MEr=o("pretrained_model_name_or_path"),EEr=o(":"),yEr=l(),Ube=a("ul"),KF=a("li"),Jbe=a("strong"),wEr=o("bert"),AEr=o(" \u2014 "),DX=a("a"),LEr=o("FlaxBertForNextSentencePrediction"),BEr=o(" (BERT model)"),kEr=l(),Ybe=a("p"),xEr=o("Examples:"),REr=l(),f(A6.$$.fragment),K9e=l(),uf=a("h2"),ZF=a("a"),Kbe=a("span"),f(L6.$$.fragment),SEr=l(),Zbe=a("span"),PEr=o("FlaxAutoModelForImageClassification"),Z9e=l(),Ir=a("div"),f(B6.$$.fragment),$Er=l(),bf=a("p"),IEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),e5e=a("code"),jEr=o("from_pretrained()"),NEr=o("class method or the "),o5e=a("code"),DEr=o("from_config()"),qEr=o(`class
method.`),GEr=l(),k6=a("p"),OEr=o("This class cannot be instantiated directly using "),r5e=a("code"),XEr=o("__init__()"),zEr=o(" (throws an error)."),VEr=l(),Bt=a("div"),f(x6.$$.fragment),WEr=l(),t5e=a("p"),QEr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),HEr=l(),vf=a("p"),UEr=o(`Note:
Loading a model from its configuration file does `),a5e=a("strong"),JEr=o("not"),YEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),n5e=a("code"),KEr=o("from_pretrained()"),ZEr=o("to load the model weights."),e3r=l(),s5e=a("p"),o3r=o("Examples:"),r3r=l(),f(R6.$$.fragment),t3r=l(),Io=a("div"),f(S6.$$.fragment),a3r=l(),l5e=a("p"),n3r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),s3r=l(),Rn=a("p"),l3r=o("The model class to instantiate is selected based on the "),i5e=a("code"),i3r=o("model_type"),d3r=o(` property of the config object (either
passed as an argument or loaded from `),d5e=a("code"),c3r=o("pretrained_model_name_or_path"),f3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c5e=a("code"),m3r=o("pretrained_model_name_or_path"),g3r=o(":"),h3r=l(),P6=a("ul"),eC=a("li"),f5e=a("strong"),p3r=o("beit"),_3r=o(" \u2014 "),qX=a("a"),u3r=o("FlaxBeitForImageClassification"),b3r=o(" (BEiT model)"),v3r=l(),oC=a("li"),m5e=a("strong"),T3r=o("vit"),F3r=o(" \u2014 "),GX=a("a"),C3r=o("FlaxViTForImageClassification"),M3r=o(" (ViT model)"),E3r=l(),g5e=a("p"),y3r=o("Examples:"),w3r=l(),f($6.$$.fragment),eBe=l(),Tf=a("h2"),rC=a("a"),h5e=a("span"),f(I6.$$.fragment),A3r=l(),p5e=a("span"),L3r=o("FlaxAutoModelForVision2Seq"),oBe=l(),jr=a("div"),f(j6.$$.fragment),B3r=l(),Ff=a("p"),k3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_5e=a("code"),x3r=o("from_pretrained()"),R3r=o("class method or the "),u5e=a("code"),S3r=o("from_config()"),P3r=o(`class
method.`),$3r=l(),N6=a("p"),I3r=o("This class cannot be instantiated directly using "),b5e=a("code"),j3r=o("__init__()"),N3r=o(" (throws an error)."),D3r=l(),kt=a("div"),f(D6.$$.fragment),q3r=l(),v5e=a("p"),G3r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),O3r=l(),Cf=a("p"),X3r=o(`Note:
Loading a model from its configuration file does `),T5e=a("strong"),z3r=o("not"),V3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),F5e=a("code"),W3r=o("from_pretrained()"),Q3r=o("to load the model weights."),H3r=l(),C5e=a("p"),U3r=o("Examples:"),J3r=l(),f(q6.$$.fragment),Y3r=l(),jo=a("div"),f(G6.$$.fragment),K3r=l(),M5e=a("p"),Z3r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),eyr=l(),Sn=a("p"),oyr=o("The model class to instantiate is selected based on the "),E5e=a("code"),ryr=o("model_type"),tyr=o(` property of the config object (either
passed as an argument or loaded from `),y5e=a("code"),ayr=o("pretrained_model_name_or_path"),nyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=a("code"),syr=o("pretrained_model_name_or_path"),lyr=o(":"),iyr=l(),A5e=a("ul"),tC=a("li"),L5e=a("strong"),dyr=o("vision-encoder-decoder"),cyr=o(" \u2014 "),OX=a("a"),fyr=o("FlaxVisionEncoderDecoderModel"),myr=o(" (Vision Encoder decoder model)"),gyr=l(),B5e=a("p"),hyr=o("Examples:"),pyr=l(),f(O6.$$.fragment),this.h()},l(d){const u=T_t('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),Ae=i(d),ie=n(d,"H1",{class:!0});var X6=s(ie);me=n(X6,"A",{id:!0,class:!0,href:!0});var k5e=s(me);to=n(k5e,"SPAN",{});var x5e=s(to);m(ce.$$.fragment,x5e),x5e.forEach(t),k5e.forEach(t),ue=i(X6),Do=n(X6,"SPAN",{});var uyr=s(Do);wi=r(uyr,"Auto Classes"),uyr.forEach(t),X6.forEach(t),Ef=i(d),sa=n(d,"P",{});var tBe=s(sa);Ai=r(tBe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Li=n(tBe,"CODE",{});var byr=s(Li);oM=r(byr,"from_pretrained()"),byr.forEach(t),yf=r(tBe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),tBe.forEach(t),ye=i(d),io=n(d,"P",{});var aC=s(io);Bi=r(aC,"Instantiating one of "),Pn=n(aC,"A",{href:!0});var vyr=s(Pn);rM=r(vyr,"AutoConfig"),vyr.forEach(t),$n=r(aC,", "),In=n(aC,"A",{href:!0});var Tyr=s(In);tM=r(Tyr,"AutoModel"),Tyr.forEach(t),ki=r(aC,`, and
`),jn=n(aC,"A",{href:!0});var Fyr=s(jn);aM=r(Fyr,"AutoTokenizer"),Fyr.forEach(t),xi=r(aC," will directly create a class of the relevant architecture. For instance"),aC.forEach(t),wf=i(d),m($a.$$.fragment,d),co=i(d),ge=n(d,"P",{});var aBe=s(ge);D0=r(aBe,"will create a model that is an instance of "),Ri=n(aBe,"A",{href:!0});var Cyr=s(Ri);q0=r(Cyr,"BertModel"),Cyr.forEach(t),G0=r(aBe,"."),aBe.forEach(t),qo=i(d),Ia=n(d,"P",{});var nBe=s(Ia);O0=r(nBe,"There is one class of "),Af=n(nBe,"CODE",{});var Myr=s(Af);X0=r(Myr,"AutoModel"),Myr.forEach(t),mxe=r(nBe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),nBe.forEach(t),tLe=i(d),Si=n(d,"H2",{class:!0});var sBe=s(Si);Lf=n(sBe,"A",{id:!0,class:!0,href:!0});var Eyr=s(Lf);$V=n(Eyr,"SPAN",{});var yyr=s($V);m(nM.$$.fragment,yyr),yyr.forEach(t),Eyr.forEach(t),gxe=i(sBe),IV=n(sBe,"SPAN",{});var wyr=s(IV);hxe=r(wyr,"Extending the Auto Classes"),wyr.forEach(t),sBe.forEach(t),aLe=i(d),Nn=n(d,"P",{});var XX=s(Nn);pxe=r(XX,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),jV=n(XX,"CODE",{});var Ayr=s(jV);_xe=r(Ayr,"NewModel"),Ayr.forEach(t),uxe=r(XX,", make sure you have a "),NV=n(XX,"CODE",{});var Lyr=s(NV);bxe=r(Lyr,"NewModelConfig"),Lyr.forEach(t),vxe=r(XX,` then you can add those to the auto
classes like this:`),XX.forEach(t),nLe=i(d),m(sM.$$.fragment,d),sLe=i(d),z0=n(d,"P",{});var Byr=s(z0);Txe=r(Byr,"You will then be able to use the auto classes like you would usually do!"),Byr.forEach(t),lLe=i(d),m(Bf.$$.fragment,d),iLe=i(d),Pi=n(d,"H2",{class:!0});var lBe=s(Pi);kf=n(lBe,"A",{id:!0,class:!0,href:!0});var kyr=s(kf);DV=n(kyr,"SPAN",{});var xyr=s(DV);m(lM.$$.fragment,xyr),xyr.forEach(t),kyr.forEach(t),Fxe=i(lBe),qV=n(lBe,"SPAN",{});var Ryr=s(qV);Cxe=r(Ryr,"AutoConfig"),Ryr.forEach(t),lBe.forEach(t),dLe=i(d),Go=n(d,"DIV",{class:!0});var Ps=s(Go);m(iM.$$.fragment,Ps),Mxe=i(Ps),dM=n(Ps,"P",{});var iBe=s(dM);Exe=r(iBe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),V0=n(iBe,"A",{href:!0});var Syr=s(V0);yxe=r(Syr,"from_pretrained()"),Syr.forEach(t),wxe=r(iBe," class method."),iBe.forEach(t),Axe=i(Ps),cM=n(Ps,"P",{});var dBe=s(cM);Lxe=r(dBe,"This class cannot be instantiated directly using "),GV=n(dBe,"CODE",{});var Pyr=s(GV);Bxe=r(Pyr,"__init__()"),Pyr.forEach(t),kxe=r(dBe," (throws an error)."),dBe.forEach(t),xxe=i(Ps),fo=n(Ps,"DIV",{class:!0});var ia=s(fo);m(fM.$$.fragment,ia),Rxe=i(ia),OV=n(ia,"P",{});var $yr=s(OV);Sxe=r($yr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),$yr.forEach(t),Pxe=i(ia),$i=n(ia,"P",{});var zX=s($i);$xe=r(zX,"The configuration class to instantiate is selected based on the "),XV=n(zX,"CODE",{});var Iyr=s(XV);Ixe=r(Iyr,"model_type"),Iyr.forEach(t),jxe=r(zX,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zV=n(zX,"CODE",{});var jyr=s(zV);Nxe=r(jyr,"pretrained_model_name_or_path"),jyr.forEach(t),Dxe=r(zX,":"),zX.forEach(t),qxe=i(ia),v=n(ia,"UL",{});var T=s(v);xf=n(T,"LI",{});var R5e=s(xf);VV=n(R5e,"STRONG",{});var Nyr=s(VV);Gxe=r(Nyr,"albert"),Nyr.forEach(t),Oxe=r(R5e," \u2014 "),W0=n(R5e,"A",{href:!0});var Dyr=s(W0);Xxe=r(Dyr,"AlbertConfig"),Dyr.forEach(t),zxe=r(R5e," (ALBERT model)"),R5e.forEach(t),Vxe=i(T),Rf=n(T,"LI",{});var S5e=s(Rf);WV=n(S5e,"STRONG",{});var qyr=s(WV);Wxe=r(qyr,"bart"),qyr.forEach(t),Qxe=r(S5e," \u2014 "),Q0=n(S5e,"A",{href:!0});var Gyr=s(Q0);Hxe=r(Gyr,"BartConfig"),Gyr.forEach(t),Uxe=r(S5e," (BART model)"),S5e.forEach(t),Jxe=i(T),Sf=n(T,"LI",{});var P5e=s(Sf);QV=n(P5e,"STRONG",{});var Oyr=s(QV);Yxe=r(Oyr,"beit"),Oyr.forEach(t),Kxe=r(P5e," \u2014 "),H0=n(P5e,"A",{href:!0});var Xyr=s(H0);Zxe=r(Xyr,"BeitConfig"),Xyr.forEach(t),eRe=r(P5e," (BEiT model)"),P5e.forEach(t),oRe=i(T),Pf=n(T,"LI",{});var $5e=s(Pf);HV=n($5e,"STRONG",{});var zyr=s(HV);rRe=r(zyr,"bert"),zyr.forEach(t),tRe=r($5e," \u2014 "),U0=n($5e,"A",{href:!0});var Vyr=s(U0);aRe=r(Vyr,"BertConfig"),Vyr.forEach(t),nRe=r($5e," (BERT model)"),$5e.forEach(t),sRe=i(T),$f=n(T,"LI",{});var I5e=s($f);UV=n(I5e,"STRONG",{});var Wyr=s(UV);lRe=r(Wyr,"bert-generation"),Wyr.forEach(t),iRe=r(I5e," \u2014 "),J0=n(I5e,"A",{href:!0});var Qyr=s(J0);dRe=r(Qyr,"BertGenerationConfig"),Qyr.forEach(t),cRe=r(I5e," (Bert Generation model)"),I5e.forEach(t),fRe=i(T),If=n(T,"LI",{});var j5e=s(If);JV=n(j5e,"STRONG",{});var Hyr=s(JV);mRe=r(Hyr,"big_bird"),Hyr.forEach(t),gRe=r(j5e," \u2014 "),Y0=n(j5e,"A",{href:!0});var Uyr=s(Y0);hRe=r(Uyr,"BigBirdConfig"),Uyr.forEach(t),pRe=r(j5e," (BigBird model)"),j5e.forEach(t),_Re=i(T),jf=n(T,"LI",{});var N5e=s(jf);YV=n(N5e,"STRONG",{});var Jyr=s(YV);uRe=r(Jyr,"bigbird_pegasus"),Jyr.forEach(t),bRe=r(N5e," \u2014 "),K0=n(N5e,"A",{href:!0});var Yyr=s(K0);vRe=r(Yyr,"BigBirdPegasusConfig"),Yyr.forEach(t),TRe=r(N5e," (BigBirdPegasus model)"),N5e.forEach(t),FRe=i(T),Nf=n(T,"LI",{});var D5e=s(Nf);KV=n(D5e,"STRONG",{});var Kyr=s(KV);CRe=r(Kyr,"blenderbot"),Kyr.forEach(t),MRe=r(D5e," \u2014 "),Z0=n(D5e,"A",{href:!0});var Zyr=s(Z0);ERe=r(Zyr,"BlenderbotConfig"),Zyr.forEach(t),yRe=r(D5e," (Blenderbot model)"),D5e.forEach(t),wRe=i(T),Df=n(T,"LI",{});var q5e=s(Df);ZV=n(q5e,"STRONG",{});var ewr=s(ZV);ARe=r(ewr,"blenderbot-small"),ewr.forEach(t),LRe=r(q5e," \u2014 "),eL=n(q5e,"A",{href:!0});var owr=s(eL);BRe=r(owr,"BlenderbotSmallConfig"),owr.forEach(t),kRe=r(q5e," (BlenderbotSmall model)"),q5e.forEach(t),xRe=i(T),qf=n(T,"LI",{});var G5e=s(qf);eW=n(G5e,"STRONG",{});var rwr=s(eW);RRe=r(rwr,"camembert"),rwr.forEach(t),SRe=r(G5e," \u2014 "),oL=n(G5e,"A",{href:!0});var twr=s(oL);PRe=r(twr,"CamembertConfig"),twr.forEach(t),$Re=r(G5e," (CamemBERT model)"),G5e.forEach(t),IRe=i(T),Gf=n(T,"LI",{});var O5e=s(Gf);oW=n(O5e,"STRONG",{});var awr=s(oW);jRe=r(awr,"canine"),awr.forEach(t),NRe=r(O5e," \u2014 "),rL=n(O5e,"A",{href:!0});var nwr=s(rL);DRe=r(nwr,"CanineConfig"),nwr.forEach(t),qRe=r(O5e," (Canine model)"),O5e.forEach(t),GRe=i(T),Of=n(T,"LI",{});var X5e=s(Of);rW=n(X5e,"STRONG",{});var swr=s(rW);ORe=r(swr,"clip"),swr.forEach(t),XRe=r(X5e," \u2014 "),tL=n(X5e,"A",{href:!0});var lwr=s(tL);zRe=r(lwr,"CLIPConfig"),lwr.forEach(t),VRe=r(X5e," (CLIP model)"),X5e.forEach(t),WRe=i(T),Xf=n(T,"LI",{});var z5e=s(Xf);tW=n(z5e,"STRONG",{});var iwr=s(tW);QRe=r(iwr,"convbert"),iwr.forEach(t),HRe=r(z5e," \u2014 "),aL=n(z5e,"A",{href:!0});var dwr=s(aL);URe=r(dwr,"ConvBertConfig"),dwr.forEach(t),JRe=r(z5e," (ConvBERT model)"),z5e.forEach(t),YRe=i(T),zf=n(T,"LI",{});var V5e=s(zf);aW=n(V5e,"STRONG",{});var cwr=s(aW);KRe=r(cwr,"convnext"),cwr.forEach(t),ZRe=r(V5e," \u2014 "),nL=n(V5e,"A",{href:!0});var fwr=s(nL);eSe=r(fwr,"ConvNextConfig"),fwr.forEach(t),oSe=r(V5e," (ConvNext model)"),V5e.forEach(t),rSe=i(T),Vf=n(T,"LI",{});var W5e=s(Vf);nW=n(W5e,"STRONG",{});var mwr=s(nW);tSe=r(mwr,"ctrl"),mwr.forEach(t),aSe=r(W5e," \u2014 "),sL=n(W5e,"A",{href:!0});var gwr=s(sL);nSe=r(gwr,"CTRLConfig"),gwr.forEach(t),sSe=r(W5e," (CTRL model)"),W5e.forEach(t),lSe=i(T),Wf=n(T,"LI",{});var Q5e=s(Wf);sW=n(Q5e,"STRONG",{});var hwr=s(sW);iSe=r(hwr,"deberta"),hwr.forEach(t),dSe=r(Q5e," \u2014 "),lL=n(Q5e,"A",{href:!0});var pwr=s(lL);cSe=r(pwr,"DebertaConfig"),pwr.forEach(t),fSe=r(Q5e," (DeBERTa model)"),Q5e.forEach(t),mSe=i(T),Qf=n(T,"LI",{});var H5e=s(Qf);lW=n(H5e,"STRONG",{});var _wr=s(lW);gSe=r(_wr,"deberta-v2"),_wr.forEach(t),hSe=r(H5e," \u2014 "),iL=n(H5e,"A",{href:!0});var uwr=s(iL);pSe=r(uwr,"DebertaV2Config"),uwr.forEach(t),_Se=r(H5e," (DeBERTa-v2 model)"),H5e.forEach(t),uSe=i(T),Hf=n(T,"LI",{});var U5e=s(Hf);iW=n(U5e,"STRONG",{});var bwr=s(iW);bSe=r(bwr,"deit"),bwr.forEach(t),vSe=r(U5e," \u2014 "),dL=n(U5e,"A",{href:!0});var vwr=s(dL);TSe=r(vwr,"DeiTConfig"),vwr.forEach(t),FSe=r(U5e," (DeiT model)"),U5e.forEach(t),CSe=i(T),Uf=n(T,"LI",{});var J5e=s(Uf);dW=n(J5e,"STRONG",{});var Twr=s(dW);MSe=r(Twr,"detr"),Twr.forEach(t),ESe=r(J5e," \u2014 "),cL=n(J5e,"A",{href:!0});var Fwr=s(cL);ySe=r(Fwr,"DetrConfig"),Fwr.forEach(t),wSe=r(J5e," (DETR model)"),J5e.forEach(t),ASe=i(T),Jf=n(T,"LI",{});var Y5e=s(Jf);cW=n(Y5e,"STRONG",{});var Cwr=s(cW);LSe=r(Cwr,"distilbert"),Cwr.forEach(t),BSe=r(Y5e," \u2014 "),fL=n(Y5e,"A",{href:!0});var Mwr=s(fL);kSe=r(Mwr,"DistilBertConfig"),Mwr.forEach(t),xSe=r(Y5e," (DistilBERT model)"),Y5e.forEach(t),RSe=i(T),Yf=n(T,"LI",{});var K5e=s(Yf);fW=n(K5e,"STRONG",{});var Ewr=s(fW);SSe=r(Ewr,"dpr"),Ewr.forEach(t),PSe=r(K5e," \u2014 "),mL=n(K5e,"A",{href:!0});var ywr=s(mL);$Se=r(ywr,"DPRConfig"),ywr.forEach(t),ISe=r(K5e," (DPR model)"),K5e.forEach(t),jSe=i(T),Kf=n(T,"LI",{});var Z5e=s(Kf);mW=n(Z5e,"STRONG",{});var wwr=s(mW);NSe=r(wwr,"electra"),wwr.forEach(t),DSe=r(Z5e," \u2014 "),gL=n(Z5e,"A",{href:!0});var Awr=s(gL);qSe=r(Awr,"ElectraConfig"),Awr.forEach(t),GSe=r(Z5e," (ELECTRA model)"),Z5e.forEach(t),OSe=i(T),Zf=n(T,"LI",{});var e2e=s(Zf);gW=n(e2e,"STRONG",{});var Lwr=s(gW);XSe=r(Lwr,"encoder-decoder"),Lwr.forEach(t),zSe=r(e2e," \u2014 "),hL=n(e2e,"A",{href:!0});var Bwr=s(hL);VSe=r(Bwr,"EncoderDecoderConfig"),Bwr.forEach(t),WSe=r(e2e," (Encoder decoder model)"),e2e.forEach(t),QSe=i(T),em=n(T,"LI",{});var o2e=s(em);hW=n(o2e,"STRONG",{});var kwr=s(hW);HSe=r(kwr,"flaubert"),kwr.forEach(t),USe=r(o2e," \u2014 "),pL=n(o2e,"A",{href:!0});var xwr=s(pL);JSe=r(xwr,"FlaubertConfig"),xwr.forEach(t),YSe=r(o2e," (FlauBERT model)"),o2e.forEach(t),KSe=i(T),om=n(T,"LI",{});var r2e=s(om);pW=n(r2e,"STRONG",{});var Rwr=s(pW);ZSe=r(Rwr,"fnet"),Rwr.forEach(t),ePe=r(r2e," \u2014 "),_L=n(r2e,"A",{href:!0});var Swr=s(_L);oPe=r(Swr,"FNetConfig"),Swr.forEach(t),rPe=r(r2e," (FNet model)"),r2e.forEach(t),tPe=i(T),rm=n(T,"LI",{});var t2e=s(rm);_W=n(t2e,"STRONG",{});var Pwr=s(_W);aPe=r(Pwr,"fsmt"),Pwr.forEach(t),nPe=r(t2e," \u2014 "),uL=n(t2e,"A",{href:!0});var $wr=s(uL);sPe=r($wr,"FSMTConfig"),$wr.forEach(t),lPe=r(t2e," (FairSeq Machine-Translation model)"),t2e.forEach(t),iPe=i(T),tm=n(T,"LI",{});var a2e=s(tm);uW=n(a2e,"STRONG",{});var Iwr=s(uW);dPe=r(Iwr,"funnel"),Iwr.forEach(t),cPe=r(a2e," \u2014 "),bL=n(a2e,"A",{href:!0});var jwr=s(bL);fPe=r(jwr,"FunnelConfig"),jwr.forEach(t),mPe=r(a2e," (Funnel Transformer model)"),a2e.forEach(t),gPe=i(T),am=n(T,"LI",{});var n2e=s(am);bW=n(n2e,"STRONG",{});var Nwr=s(bW);hPe=r(Nwr,"gpt2"),Nwr.forEach(t),pPe=r(n2e," \u2014 "),vL=n(n2e,"A",{href:!0});var Dwr=s(vL);_Pe=r(Dwr,"GPT2Config"),Dwr.forEach(t),uPe=r(n2e," (OpenAI GPT-2 model)"),n2e.forEach(t),bPe=i(T),nm=n(T,"LI",{});var s2e=s(nm);vW=n(s2e,"STRONG",{});var qwr=s(vW);vPe=r(qwr,"gpt_neo"),qwr.forEach(t),TPe=r(s2e," \u2014 "),TL=n(s2e,"A",{href:!0});var Gwr=s(TL);FPe=r(Gwr,"GPTNeoConfig"),Gwr.forEach(t),CPe=r(s2e," (GPT Neo model)"),s2e.forEach(t),MPe=i(T),sm=n(T,"LI",{});var l2e=s(sm);TW=n(l2e,"STRONG",{});var Owr=s(TW);EPe=r(Owr,"gptj"),Owr.forEach(t),yPe=r(l2e," \u2014 "),FL=n(l2e,"A",{href:!0});var Xwr=s(FL);wPe=r(Xwr,"GPTJConfig"),Xwr.forEach(t),APe=r(l2e," (GPT-J model)"),l2e.forEach(t),LPe=i(T),lm=n(T,"LI",{});var i2e=s(lm);FW=n(i2e,"STRONG",{});var zwr=s(FW);BPe=r(zwr,"hubert"),zwr.forEach(t),kPe=r(i2e," \u2014 "),CL=n(i2e,"A",{href:!0});var Vwr=s(CL);xPe=r(Vwr,"HubertConfig"),Vwr.forEach(t),RPe=r(i2e," (Hubert model)"),i2e.forEach(t),SPe=i(T),im=n(T,"LI",{});var d2e=s(im);CW=n(d2e,"STRONG",{});var Wwr=s(CW);PPe=r(Wwr,"ibert"),Wwr.forEach(t),$Pe=r(d2e," \u2014 "),ML=n(d2e,"A",{href:!0});var Qwr=s(ML);IPe=r(Qwr,"IBertConfig"),Qwr.forEach(t),jPe=r(d2e," (I-BERT model)"),d2e.forEach(t),NPe=i(T),dm=n(T,"LI",{});var c2e=s(dm);MW=n(c2e,"STRONG",{});var Hwr=s(MW);DPe=r(Hwr,"imagegpt"),Hwr.forEach(t),qPe=r(c2e," \u2014 "),EL=n(c2e,"A",{href:!0});var Uwr=s(EL);GPe=r(Uwr,"ImageGPTConfig"),Uwr.forEach(t),OPe=r(c2e," (ImageGPT model)"),c2e.forEach(t),XPe=i(T),cm=n(T,"LI",{});var f2e=s(cm);EW=n(f2e,"STRONG",{});var Jwr=s(EW);zPe=r(Jwr,"layoutlm"),Jwr.forEach(t),VPe=r(f2e," \u2014 "),yL=n(f2e,"A",{href:!0});var Ywr=s(yL);WPe=r(Ywr,"LayoutLMConfig"),Ywr.forEach(t),QPe=r(f2e," (LayoutLM model)"),f2e.forEach(t),HPe=i(T),fm=n(T,"LI",{});var m2e=s(fm);yW=n(m2e,"STRONG",{});var Kwr=s(yW);UPe=r(Kwr,"layoutlmv2"),Kwr.forEach(t),JPe=r(m2e," \u2014 "),wL=n(m2e,"A",{href:!0});var Zwr=s(wL);YPe=r(Zwr,"LayoutLMv2Config"),Zwr.forEach(t),KPe=r(m2e," (LayoutLMv2 model)"),m2e.forEach(t),ZPe=i(T),mm=n(T,"LI",{});var g2e=s(mm);wW=n(g2e,"STRONG",{});var eAr=s(wW);e$e=r(eAr,"led"),eAr.forEach(t),o$e=r(g2e," \u2014 "),AL=n(g2e,"A",{href:!0});var oAr=s(AL);r$e=r(oAr,"LEDConfig"),oAr.forEach(t),t$e=r(g2e," (LED model)"),g2e.forEach(t),a$e=i(T),gm=n(T,"LI",{});var h2e=s(gm);AW=n(h2e,"STRONG",{});var rAr=s(AW);n$e=r(rAr,"longformer"),rAr.forEach(t),s$e=r(h2e," \u2014 "),LL=n(h2e,"A",{href:!0});var tAr=s(LL);l$e=r(tAr,"LongformerConfig"),tAr.forEach(t),i$e=r(h2e," (Longformer model)"),h2e.forEach(t),d$e=i(T),hm=n(T,"LI",{});var p2e=s(hm);LW=n(p2e,"STRONG",{});var aAr=s(LW);c$e=r(aAr,"luke"),aAr.forEach(t),f$e=r(p2e," \u2014 "),BL=n(p2e,"A",{href:!0});var nAr=s(BL);m$e=r(nAr,"LukeConfig"),nAr.forEach(t),g$e=r(p2e," (LUKE model)"),p2e.forEach(t),h$e=i(T),pm=n(T,"LI",{});var _2e=s(pm);BW=n(_2e,"STRONG",{});var sAr=s(BW);p$e=r(sAr,"lxmert"),sAr.forEach(t),_$e=r(_2e," \u2014 "),kL=n(_2e,"A",{href:!0});var lAr=s(kL);u$e=r(lAr,"LxmertConfig"),lAr.forEach(t),b$e=r(_2e," (LXMERT model)"),_2e.forEach(t),v$e=i(T),_m=n(T,"LI",{});var u2e=s(_m);kW=n(u2e,"STRONG",{});var iAr=s(kW);T$e=r(iAr,"m2m_100"),iAr.forEach(t),F$e=r(u2e," \u2014 "),xL=n(u2e,"A",{href:!0});var dAr=s(xL);C$e=r(dAr,"M2M100Config"),dAr.forEach(t),M$e=r(u2e," (M2M100 model)"),u2e.forEach(t),E$e=i(T),um=n(T,"LI",{});var b2e=s(um);xW=n(b2e,"STRONG",{});var cAr=s(xW);y$e=r(cAr,"marian"),cAr.forEach(t),w$e=r(b2e," \u2014 "),RL=n(b2e,"A",{href:!0});var fAr=s(RL);A$e=r(fAr,"MarianConfig"),fAr.forEach(t),L$e=r(b2e," (Marian model)"),b2e.forEach(t),B$e=i(T),bm=n(T,"LI",{});var v2e=s(bm);RW=n(v2e,"STRONG",{});var mAr=s(RW);k$e=r(mAr,"mbart"),mAr.forEach(t),x$e=r(v2e," \u2014 "),SL=n(v2e,"A",{href:!0});var gAr=s(SL);R$e=r(gAr,"MBartConfig"),gAr.forEach(t),S$e=r(v2e," (mBART model)"),v2e.forEach(t),P$e=i(T),vm=n(T,"LI",{});var T2e=s(vm);SW=n(T2e,"STRONG",{});var hAr=s(SW);$$e=r(hAr,"megatron-bert"),hAr.forEach(t),I$e=r(T2e," \u2014 "),PL=n(T2e,"A",{href:!0});var pAr=s(PL);j$e=r(pAr,"MegatronBertConfig"),pAr.forEach(t),N$e=r(T2e," (MegatronBert model)"),T2e.forEach(t),D$e=i(T),Tm=n(T,"LI",{});var F2e=s(Tm);PW=n(F2e,"STRONG",{});var _Ar=s(PW);q$e=r(_Ar,"mobilebert"),_Ar.forEach(t),G$e=r(F2e," \u2014 "),$L=n(F2e,"A",{href:!0});var uAr=s($L);O$e=r(uAr,"MobileBertConfig"),uAr.forEach(t),X$e=r(F2e," (MobileBERT model)"),F2e.forEach(t),z$e=i(T),Fm=n(T,"LI",{});var C2e=s(Fm);$W=n(C2e,"STRONG",{});var bAr=s($W);V$e=r(bAr,"mpnet"),bAr.forEach(t),W$e=r(C2e," \u2014 "),IL=n(C2e,"A",{href:!0});var vAr=s(IL);Q$e=r(vAr,"MPNetConfig"),vAr.forEach(t),H$e=r(C2e," (MPNet model)"),C2e.forEach(t),U$e=i(T),Cm=n(T,"LI",{});var M2e=s(Cm);IW=n(M2e,"STRONG",{});var TAr=s(IW);J$e=r(TAr,"mt5"),TAr.forEach(t),Y$e=r(M2e," \u2014 "),jL=n(M2e,"A",{href:!0});var FAr=s(jL);K$e=r(FAr,"MT5Config"),FAr.forEach(t),Z$e=r(M2e," (mT5 model)"),M2e.forEach(t),eIe=i(T),Mm=n(T,"LI",{});var E2e=s(Mm);jW=n(E2e,"STRONG",{});var CAr=s(jW);oIe=r(CAr,"nystromformer"),CAr.forEach(t),rIe=r(E2e," \u2014 "),NL=n(E2e,"A",{href:!0});var MAr=s(NL);tIe=r(MAr,"NystromformerConfig"),MAr.forEach(t),aIe=r(E2e," (Nystromformer model)"),E2e.forEach(t),nIe=i(T),Em=n(T,"LI",{});var y2e=s(Em);NW=n(y2e,"STRONG",{});var EAr=s(NW);sIe=r(EAr,"openai-gpt"),EAr.forEach(t),lIe=r(y2e," \u2014 "),DL=n(y2e,"A",{href:!0});var yAr=s(DL);iIe=r(yAr,"OpenAIGPTConfig"),yAr.forEach(t),dIe=r(y2e," (OpenAI GPT model)"),y2e.forEach(t),cIe=i(T),ym=n(T,"LI",{});var w2e=s(ym);DW=n(w2e,"STRONG",{});var wAr=s(DW);fIe=r(wAr,"pegasus"),wAr.forEach(t),mIe=r(w2e," \u2014 "),qL=n(w2e,"A",{href:!0});var AAr=s(qL);gIe=r(AAr,"PegasusConfig"),AAr.forEach(t),hIe=r(w2e," (Pegasus model)"),w2e.forEach(t),pIe=i(T),wm=n(T,"LI",{});var A2e=s(wm);qW=n(A2e,"STRONG",{});var LAr=s(qW);_Ie=r(LAr,"perceiver"),LAr.forEach(t),uIe=r(A2e," \u2014 "),GL=n(A2e,"A",{href:!0});var BAr=s(GL);bIe=r(BAr,"PerceiverConfig"),BAr.forEach(t),vIe=r(A2e," (Perceiver model)"),A2e.forEach(t),TIe=i(T),Am=n(T,"LI",{});var L2e=s(Am);GW=n(L2e,"STRONG",{});var kAr=s(GW);FIe=r(kAr,"plbart"),kAr.forEach(t),CIe=r(L2e," \u2014 "),OL=n(L2e,"A",{href:!0});var xAr=s(OL);MIe=r(xAr,"PLBartConfig"),xAr.forEach(t),EIe=r(L2e," (PLBart model)"),L2e.forEach(t),yIe=i(T),Lm=n(T,"LI",{});var B2e=s(Lm);OW=n(B2e,"STRONG",{});var RAr=s(OW);wIe=r(RAr,"poolformer"),RAr.forEach(t),AIe=r(B2e," \u2014 "),XL=n(B2e,"A",{href:!0});var SAr=s(XL);LIe=r(SAr,"PoolFormerConfig"),SAr.forEach(t),BIe=r(B2e," (PoolFormer model)"),B2e.forEach(t),kIe=i(T),Bm=n(T,"LI",{});var k2e=s(Bm);XW=n(k2e,"STRONG",{});var PAr=s(XW);xIe=r(PAr,"prophetnet"),PAr.forEach(t),RIe=r(k2e," \u2014 "),zL=n(k2e,"A",{href:!0});var $Ar=s(zL);SIe=r($Ar,"ProphetNetConfig"),$Ar.forEach(t),PIe=r(k2e," (ProphetNet model)"),k2e.forEach(t),$Ie=i(T),km=n(T,"LI",{});var x2e=s(km);zW=n(x2e,"STRONG",{});var IAr=s(zW);IIe=r(IAr,"qdqbert"),IAr.forEach(t),jIe=r(x2e," \u2014 "),VL=n(x2e,"A",{href:!0});var jAr=s(VL);NIe=r(jAr,"QDQBertConfig"),jAr.forEach(t),DIe=r(x2e," (QDQBert model)"),x2e.forEach(t),qIe=i(T),xm=n(T,"LI",{});var R2e=s(xm);VW=n(R2e,"STRONG",{});var NAr=s(VW);GIe=r(NAr,"rag"),NAr.forEach(t),OIe=r(R2e," \u2014 "),WL=n(R2e,"A",{href:!0});var DAr=s(WL);XIe=r(DAr,"RagConfig"),DAr.forEach(t),zIe=r(R2e," (RAG model)"),R2e.forEach(t),VIe=i(T),Rm=n(T,"LI",{});var S2e=s(Rm);WW=n(S2e,"STRONG",{});var qAr=s(WW);WIe=r(qAr,"realm"),qAr.forEach(t),QIe=r(S2e," \u2014 "),QL=n(S2e,"A",{href:!0});var GAr=s(QL);HIe=r(GAr,"RealmConfig"),GAr.forEach(t),UIe=r(S2e," (Realm model)"),S2e.forEach(t),JIe=i(T),Sm=n(T,"LI",{});var P2e=s(Sm);QW=n(P2e,"STRONG",{});var OAr=s(QW);YIe=r(OAr,"reformer"),OAr.forEach(t),KIe=r(P2e," \u2014 "),HL=n(P2e,"A",{href:!0});var XAr=s(HL);ZIe=r(XAr,"ReformerConfig"),XAr.forEach(t),eje=r(P2e," (Reformer model)"),P2e.forEach(t),oje=i(T),Pm=n(T,"LI",{});var $2e=s(Pm);HW=n($2e,"STRONG",{});var zAr=s(HW);rje=r(zAr,"rembert"),zAr.forEach(t),tje=r($2e," \u2014 "),UL=n($2e,"A",{href:!0});var VAr=s(UL);aje=r(VAr,"RemBertConfig"),VAr.forEach(t),nje=r($2e," (RemBERT model)"),$2e.forEach(t),sje=i(T),$m=n(T,"LI",{});var I2e=s($m);UW=n(I2e,"STRONG",{});var WAr=s(UW);lje=r(WAr,"retribert"),WAr.forEach(t),ije=r(I2e," \u2014 "),JL=n(I2e,"A",{href:!0});var QAr=s(JL);dje=r(QAr,"RetriBertConfig"),QAr.forEach(t),cje=r(I2e," (RetriBERT model)"),I2e.forEach(t),fje=i(T),Im=n(T,"LI",{});var j2e=s(Im);JW=n(j2e,"STRONG",{});var HAr=s(JW);mje=r(HAr,"roberta"),HAr.forEach(t),gje=r(j2e," \u2014 "),YL=n(j2e,"A",{href:!0});var UAr=s(YL);hje=r(UAr,"RobertaConfig"),UAr.forEach(t),pje=r(j2e," (RoBERTa model)"),j2e.forEach(t),_je=i(T),jm=n(T,"LI",{});var N2e=s(jm);YW=n(N2e,"STRONG",{});var JAr=s(YW);uje=r(JAr,"roformer"),JAr.forEach(t),bje=r(N2e," \u2014 "),KL=n(N2e,"A",{href:!0});var YAr=s(KL);vje=r(YAr,"RoFormerConfig"),YAr.forEach(t),Tje=r(N2e," (RoFormer model)"),N2e.forEach(t),Fje=i(T),Nm=n(T,"LI",{});var D2e=s(Nm);KW=n(D2e,"STRONG",{});var KAr=s(KW);Cje=r(KAr,"segformer"),KAr.forEach(t),Mje=r(D2e," \u2014 "),ZL=n(D2e,"A",{href:!0});var ZAr=s(ZL);Eje=r(ZAr,"SegformerConfig"),ZAr.forEach(t),yje=r(D2e," (SegFormer model)"),D2e.forEach(t),wje=i(T),Dm=n(T,"LI",{});var q2e=s(Dm);ZW=n(q2e,"STRONG",{});var e6r=s(ZW);Aje=r(e6r,"sew"),e6r.forEach(t),Lje=r(q2e," \u2014 "),e9=n(q2e,"A",{href:!0});var o6r=s(e9);Bje=r(o6r,"SEWConfig"),o6r.forEach(t),kje=r(q2e," (SEW model)"),q2e.forEach(t),xje=i(T),qm=n(T,"LI",{});var G2e=s(qm);eQ=n(G2e,"STRONG",{});var r6r=s(eQ);Rje=r(r6r,"sew-d"),r6r.forEach(t),Sje=r(G2e," \u2014 "),o9=n(G2e,"A",{href:!0});var t6r=s(o9);Pje=r(t6r,"SEWDConfig"),t6r.forEach(t),$je=r(G2e," (SEW-D model)"),G2e.forEach(t),Ije=i(T),Gm=n(T,"LI",{});var O2e=s(Gm);oQ=n(O2e,"STRONG",{});var a6r=s(oQ);jje=r(a6r,"speech-encoder-decoder"),a6r.forEach(t),Nje=r(O2e," \u2014 "),r9=n(O2e,"A",{href:!0});var n6r=s(r9);Dje=r(n6r,"SpeechEncoderDecoderConfig"),n6r.forEach(t),qje=r(O2e," (Speech Encoder decoder model)"),O2e.forEach(t),Gje=i(T),Om=n(T,"LI",{});var X2e=s(Om);rQ=n(X2e,"STRONG",{});var s6r=s(rQ);Oje=r(s6r,"speech_to_text"),s6r.forEach(t),Xje=r(X2e," \u2014 "),t9=n(X2e,"A",{href:!0});var l6r=s(t9);zje=r(l6r,"Speech2TextConfig"),l6r.forEach(t),Vje=r(X2e," (Speech2Text model)"),X2e.forEach(t),Wje=i(T),Xm=n(T,"LI",{});var z2e=s(Xm);tQ=n(z2e,"STRONG",{});var i6r=s(tQ);Qje=r(i6r,"speech_to_text_2"),i6r.forEach(t),Hje=r(z2e," \u2014 "),a9=n(z2e,"A",{href:!0});var d6r=s(a9);Uje=r(d6r,"Speech2Text2Config"),d6r.forEach(t),Jje=r(z2e," (Speech2Text2 model)"),z2e.forEach(t),Yje=i(T),zm=n(T,"LI",{});var V2e=s(zm);aQ=n(V2e,"STRONG",{});var c6r=s(aQ);Kje=r(c6r,"splinter"),c6r.forEach(t),Zje=r(V2e," \u2014 "),n9=n(V2e,"A",{href:!0});var f6r=s(n9);eNe=r(f6r,"SplinterConfig"),f6r.forEach(t),oNe=r(V2e," (Splinter model)"),V2e.forEach(t),rNe=i(T),Vm=n(T,"LI",{});var W2e=s(Vm);nQ=n(W2e,"STRONG",{});var m6r=s(nQ);tNe=r(m6r,"squeezebert"),m6r.forEach(t),aNe=r(W2e," \u2014 "),s9=n(W2e,"A",{href:!0});var g6r=s(s9);nNe=r(g6r,"SqueezeBertConfig"),g6r.forEach(t),sNe=r(W2e," (SqueezeBERT model)"),W2e.forEach(t),lNe=i(T),Wm=n(T,"LI",{});var Q2e=s(Wm);sQ=n(Q2e,"STRONG",{});var h6r=s(sQ);iNe=r(h6r,"swin"),h6r.forEach(t),dNe=r(Q2e," \u2014 "),l9=n(Q2e,"A",{href:!0});var p6r=s(l9);cNe=r(p6r,"SwinConfig"),p6r.forEach(t),fNe=r(Q2e," (Swin model)"),Q2e.forEach(t),mNe=i(T),Qm=n(T,"LI",{});var H2e=s(Qm);lQ=n(H2e,"STRONG",{});var _6r=s(lQ);gNe=r(_6r,"t5"),_6r.forEach(t),hNe=r(H2e," \u2014 "),i9=n(H2e,"A",{href:!0});var u6r=s(i9);pNe=r(u6r,"T5Config"),u6r.forEach(t),_Ne=r(H2e," (T5 model)"),H2e.forEach(t),uNe=i(T),Hm=n(T,"LI",{});var U2e=s(Hm);iQ=n(U2e,"STRONG",{});var b6r=s(iQ);bNe=r(b6r,"tapas"),b6r.forEach(t),vNe=r(U2e," \u2014 "),d9=n(U2e,"A",{href:!0});var v6r=s(d9);TNe=r(v6r,"TapasConfig"),v6r.forEach(t),FNe=r(U2e," (TAPAS model)"),U2e.forEach(t),CNe=i(T),Um=n(T,"LI",{});var J2e=s(Um);dQ=n(J2e,"STRONG",{});var T6r=s(dQ);MNe=r(T6r,"transfo-xl"),T6r.forEach(t),ENe=r(J2e," \u2014 "),c9=n(J2e,"A",{href:!0});var F6r=s(c9);yNe=r(F6r,"TransfoXLConfig"),F6r.forEach(t),wNe=r(J2e," (Transformer-XL model)"),J2e.forEach(t),ANe=i(T),Jm=n(T,"LI",{});var Y2e=s(Jm);cQ=n(Y2e,"STRONG",{});var C6r=s(cQ);LNe=r(C6r,"trocr"),C6r.forEach(t),BNe=r(Y2e," \u2014 "),f9=n(Y2e,"A",{href:!0});var M6r=s(f9);kNe=r(M6r,"TrOCRConfig"),M6r.forEach(t),xNe=r(Y2e," (TrOCR model)"),Y2e.forEach(t),RNe=i(T),Ym=n(T,"LI",{});var K2e=s(Ym);fQ=n(K2e,"STRONG",{});var E6r=s(fQ);SNe=r(E6r,"unispeech"),E6r.forEach(t),PNe=r(K2e," \u2014 "),m9=n(K2e,"A",{href:!0});var y6r=s(m9);$Ne=r(y6r,"UniSpeechConfig"),y6r.forEach(t),INe=r(K2e," (UniSpeech model)"),K2e.forEach(t),jNe=i(T),Km=n(T,"LI",{});var Z2e=s(Km);mQ=n(Z2e,"STRONG",{});var w6r=s(mQ);NNe=r(w6r,"unispeech-sat"),w6r.forEach(t),DNe=r(Z2e," \u2014 "),g9=n(Z2e,"A",{href:!0});var A6r=s(g9);qNe=r(A6r,"UniSpeechSatConfig"),A6r.forEach(t),GNe=r(Z2e," (UniSpeechSat model)"),Z2e.forEach(t),ONe=i(T),Zm=n(T,"LI",{});var eve=s(Zm);gQ=n(eve,"STRONG",{});var L6r=s(gQ);XNe=r(L6r,"vilt"),L6r.forEach(t),zNe=r(eve," \u2014 "),h9=n(eve,"A",{href:!0});var B6r=s(h9);VNe=r(B6r,"ViltConfig"),B6r.forEach(t),WNe=r(eve," (ViLT model)"),eve.forEach(t),QNe=i(T),eg=n(T,"LI",{});var ove=s(eg);hQ=n(ove,"STRONG",{});var k6r=s(hQ);HNe=r(k6r,"vision-encoder-decoder"),k6r.forEach(t),UNe=r(ove," \u2014 "),p9=n(ove,"A",{href:!0});var x6r=s(p9);JNe=r(x6r,"VisionEncoderDecoderConfig"),x6r.forEach(t),YNe=r(ove," (Vision Encoder decoder model)"),ove.forEach(t),KNe=i(T),og=n(T,"LI",{});var rve=s(og);pQ=n(rve,"STRONG",{});var R6r=s(pQ);ZNe=r(R6r,"vision-text-dual-encoder"),R6r.forEach(t),eDe=r(rve," \u2014 "),_9=n(rve,"A",{href:!0});var S6r=s(_9);oDe=r(S6r,"VisionTextDualEncoderConfig"),S6r.forEach(t),rDe=r(rve," (VisionTextDualEncoder model)"),rve.forEach(t),tDe=i(T),rg=n(T,"LI",{});var tve=s(rg);_Q=n(tve,"STRONG",{});var P6r=s(_Q);aDe=r(P6r,"visual_bert"),P6r.forEach(t),nDe=r(tve," \u2014 "),u9=n(tve,"A",{href:!0});var $6r=s(u9);sDe=r($6r,"VisualBertConfig"),$6r.forEach(t),lDe=r(tve," (VisualBert model)"),tve.forEach(t),iDe=i(T),tg=n(T,"LI",{});var ave=s(tg);uQ=n(ave,"STRONG",{});var I6r=s(uQ);dDe=r(I6r,"vit"),I6r.forEach(t),cDe=r(ave," \u2014 "),b9=n(ave,"A",{href:!0});var j6r=s(b9);fDe=r(j6r,"ViTConfig"),j6r.forEach(t),mDe=r(ave," (ViT model)"),ave.forEach(t),gDe=i(T),ag=n(T,"LI",{});var nve=s(ag);bQ=n(nve,"STRONG",{});var N6r=s(bQ);hDe=r(N6r,"vit_mae"),N6r.forEach(t),pDe=r(nve," \u2014 "),v9=n(nve,"A",{href:!0});var D6r=s(v9);_De=r(D6r,"ViTMAEConfig"),D6r.forEach(t),uDe=r(nve," (ViTMAE model)"),nve.forEach(t),bDe=i(T),ng=n(T,"LI",{});var sve=s(ng);vQ=n(sve,"STRONG",{});var q6r=s(vQ);vDe=r(q6r,"wav2vec2"),q6r.forEach(t),TDe=r(sve," \u2014 "),T9=n(sve,"A",{href:!0});var G6r=s(T9);FDe=r(G6r,"Wav2Vec2Config"),G6r.forEach(t),CDe=r(sve," (Wav2Vec2 model)"),sve.forEach(t),MDe=i(T),sg=n(T,"LI",{});var lve=s(sg);TQ=n(lve,"STRONG",{});var O6r=s(TQ);EDe=r(O6r,"wavlm"),O6r.forEach(t),yDe=r(lve," \u2014 "),F9=n(lve,"A",{href:!0});var X6r=s(F9);wDe=r(X6r,"WavLMConfig"),X6r.forEach(t),ADe=r(lve," (WavLM model)"),lve.forEach(t),LDe=i(T),lg=n(T,"LI",{});var ive=s(lg);FQ=n(ive,"STRONG",{});var z6r=s(FQ);BDe=r(z6r,"xglm"),z6r.forEach(t),kDe=r(ive," \u2014 "),C9=n(ive,"A",{href:!0});var V6r=s(C9);xDe=r(V6r,"XGLMConfig"),V6r.forEach(t),RDe=r(ive," (XGLM model)"),ive.forEach(t),SDe=i(T),ig=n(T,"LI",{});var dve=s(ig);CQ=n(dve,"STRONG",{});var W6r=s(CQ);PDe=r(W6r,"xlm"),W6r.forEach(t),$De=r(dve," \u2014 "),M9=n(dve,"A",{href:!0});var Q6r=s(M9);IDe=r(Q6r,"XLMConfig"),Q6r.forEach(t),jDe=r(dve," (XLM model)"),dve.forEach(t),NDe=i(T),dg=n(T,"LI",{});var cve=s(dg);MQ=n(cve,"STRONG",{});var H6r=s(MQ);DDe=r(H6r,"xlm-prophetnet"),H6r.forEach(t),qDe=r(cve," \u2014 "),E9=n(cve,"A",{href:!0});var U6r=s(E9);GDe=r(U6r,"XLMProphetNetConfig"),U6r.forEach(t),ODe=r(cve," (XLMProphetNet model)"),cve.forEach(t),XDe=i(T),cg=n(T,"LI",{});var fve=s(cg);EQ=n(fve,"STRONG",{});var J6r=s(EQ);zDe=r(J6r,"xlm-roberta"),J6r.forEach(t),VDe=r(fve," \u2014 "),y9=n(fve,"A",{href:!0});var Y6r=s(y9);WDe=r(Y6r,"XLMRobertaConfig"),Y6r.forEach(t),QDe=r(fve," (XLM-RoBERTa model)"),fve.forEach(t),HDe=i(T),fg=n(T,"LI",{});var mve=s(fg);yQ=n(mve,"STRONG",{});var K6r=s(yQ);UDe=r(K6r,"xlm-roberta-xl"),K6r.forEach(t),JDe=r(mve," \u2014 "),w9=n(mve,"A",{href:!0});var Z6r=s(w9);YDe=r(Z6r,"XLMRobertaXLConfig"),Z6r.forEach(t),KDe=r(mve," (XLM-RoBERTa-XL model)"),mve.forEach(t),ZDe=i(T),mg=n(T,"LI",{});var gve=s(mg);wQ=n(gve,"STRONG",{});var e0r=s(wQ);eqe=r(e0r,"xlnet"),e0r.forEach(t),oqe=r(gve," \u2014 "),A9=n(gve,"A",{href:!0});var o0r=s(A9);rqe=r(o0r,"XLNetConfig"),o0r.forEach(t),tqe=r(gve," (XLNet model)"),gve.forEach(t),aqe=i(T),gg=n(T,"LI",{});var hve=s(gg);AQ=n(hve,"STRONG",{});var r0r=s(AQ);nqe=r(r0r,"yoso"),r0r.forEach(t),sqe=r(hve," \u2014 "),L9=n(hve,"A",{href:!0});var t0r=s(L9);lqe=r(t0r,"YosoConfig"),t0r.forEach(t),iqe=r(hve," (YOSO model)"),hve.forEach(t),T.forEach(t),dqe=i(ia),LQ=n(ia,"P",{});var a0r=s(LQ);cqe=r(a0r,"Examples:"),a0r.forEach(t),fqe=i(ia),m(mM.$$.fragment,ia),ia.forEach(t),mqe=i(Ps),hg=n(Ps,"DIV",{class:!0});var cBe=s(hg);m(gM.$$.fragment,cBe),gqe=i(cBe),BQ=n(cBe,"P",{});var n0r=s(BQ);hqe=r(n0r,"Register a new configuration for this class."),n0r.forEach(t),cBe.forEach(t),Ps.forEach(t),cLe=i(d),Ii=n(d,"H2",{class:!0});var fBe=s(Ii);pg=n(fBe,"A",{id:!0,class:!0,href:!0});var s0r=s(pg);kQ=n(s0r,"SPAN",{});var l0r=s(kQ);m(hM.$$.fragment,l0r),l0r.forEach(t),s0r.forEach(t),pqe=i(fBe),xQ=n(fBe,"SPAN",{});var i0r=s(xQ);_qe=r(i0r,"AutoTokenizer"),i0r.forEach(t),fBe.forEach(t),fLe=i(d),Oo=n(d,"DIV",{class:!0});var $s=s(Oo);m(pM.$$.fragment,$s),uqe=i($s),_M=n($s,"P",{});var mBe=s(_M);bqe=r(mBe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),B9=n(mBe,"A",{href:!0});var d0r=s(B9);vqe=r(d0r,"AutoTokenizer.from_pretrained()"),d0r.forEach(t),Tqe=r(mBe," class method."),mBe.forEach(t),Fqe=i($s),uM=n($s,"P",{});var gBe=s(uM);Cqe=r(gBe,"This class cannot be instantiated directly using "),RQ=n(gBe,"CODE",{});var c0r=s(RQ);Mqe=r(c0r,"__init__()"),c0r.forEach(t),Eqe=r(gBe," (throws an error)."),gBe.forEach(t),yqe=i($s),mo=n($s,"DIV",{class:!0});var da=s(mo);m(bM.$$.fragment,da),wqe=i(da),SQ=n(da,"P",{});var f0r=s(SQ);Aqe=r(f0r,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),f0r.forEach(t),Lqe=i(da),ja=n(da,"P",{});var nC=s(ja);Bqe=r(nC,"The tokenizer class to instantiate is selected based on the "),PQ=n(nC,"CODE",{});var m0r=s(PQ);kqe=r(m0r,"model_type"),m0r.forEach(t),xqe=r(nC,` property of the config object (either
passed as an argument or loaded from `),$Q=n(nC,"CODE",{});var g0r=s($Q);Rqe=r(g0r,"pretrained_model_name_or_path"),g0r.forEach(t),Sqe=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IQ=n(nC,"CODE",{});var h0r=s(IQ);Pqe=r(h0r,"pretrained_model_name_or_path"),h0r.forEach(t),$qe=r(nC,":"),nC.forEach(t),Iqe=i(da),M=n(da,"UL",{});var y=s(M);Dn=n(y,"LI",{});var z6=s(Dn);jQ=n(z6,"STRONG",{});var p0r=s(jQ);jqe=r(p0r,"albert"),p0r.forEach(t),Nqe=r(z6," \u2014 "),k9=n(z6,"A",{href:!0});var _0r=s(k9);Dqe=r(_0r,"AlbertTokenizer"),_0r.forEach(t),qqe=r(z6," or "),x9=n(z6,"A",{href:!0});var u0r=s(x9);Gqe=r(u0r,"AlbertTokenizerFast"),u0r.forEach(t),Oqe=r(z6," (ALBERT model)"),z6.forEach(t),Xqe=i(y),qn=n(y,"LI",{});var V6=s(qn);NQ=n(V6,"STRONG",{});var b0r=s(NQ);zqe=r(b0r,"bart"),b0r.forEach(t),Vqe=r(V6," \u2014 "),R9=n(V6,"A",{href:!0});var v0r=s(R9);Wqe=r(v0r,"BartTokenizer"),v0r.forEach(t),Qqe=r(V6," or "),S9=n(V6,"A",{href:!0});var T0r=s(S9);Hqe=r(T0r,"BartTokenizerFast"),T0r.forEach(t),Uqe=r(V6," (BART model)"),V6.forEach(t),Jqe=i(y),Gn=n(y,"LI",{});var W6=s(Gn);DQ=n(W6,"STRONG",{});var F0r=s(DQ);Yqe=r(F0r,"barthez"),F0r.forEach(t),Kqe=r(W6," \u2014 "),P9=n(W6,"A",{href:!0});var C0r=s(P9);Zqe=r(C0r,"BarthezTokenizer"),C0r.forEach(t),eGe=r(W6," or "),$9=n(W6,"A",{href:!0});var M0r=s($9);oGe=r(M0r,"BarthezTokenizerFast"),M0r.forEach(t),rGe=r(W6," (BARThez model)"),W6.forEach(t),tGe=i(y),_g=n(y,"LI",{});var pve=s(_g);qQ=n(pve,"STRONG",{});var E0r=s(qQ);aGe=r(E0r,"bartpho"),E0r.forEach(t),nGe=r(pve," \u2014 "),I9=n(pve,"A",{href:!0});var y0r=s(I9);sGe=r(y0r,"BartphoTokenizer"),y0r.forEach(t),lGe=r(pve," (BARTpho model)"),pve.forEach(t),iGe=i(y),On=n(y,"LI",{});var Q6=s(On);GQ=n(Q6,"STRONG",{});var w0r=s(GQ);dGe=r(w0r,"bert"),w0r.forEach(t),cGe=r(Q6," \u2014 "),j9=n(Q6,"A",{href:!0});var A0r=s(j9);fGe=r(A0r,"BertTokenizer"),A0r.forEach(t),mGe=r(Q6," or "),N9=n(Q6,"A",{href:!0});var L0r=s(N9);gGe=r(L0r,"BertTokenizerFast"),L0r.forEach(t),hGe=r(Q6," (BERT model)"),Q6.forEach(t),pGe=i(y),ug=n(y,"LI",{});var _ve=s(ug);OQ=n(_ve,"STRONG",{});var B0r=s(OQ);_Ge=r(B0r,"bert-generation"),B0r.forEach(t),uGe=r(_ve," \u2014 "),D9=n(_ve,"A",{href:!0});var k0r=s(D9);bGe=r(k0r,"BertGenerationTokenizer"),k0r.forEach(t),vGe=r(_ve," (Bert Generation model)"),_ve.forEach(t),TGe=i(y),bg=n(y,"LI",{});var uve=s(bg);XQ=n(uve,"STRONG",{});var x0r=s(XQ);FGe=r(x0r,"bert-japanese"),x0r.forEach(t),CGe=r(uve," \u2014 "),q9=n(uve,"A",{href:!0});var R0r=s(q9);MGe=r(R0r,"BertJapaneseTokenizer"),R0r.forEach(t),EGe=r(uve," (BertJapanese model)"),uve.forEach(t),yGe=i(y),vg=n(y,"LI",{});var bve=s(vg);zQ=n(bve,"STRONG",{});var S0r=s(zQ);wGe=r(S0r,"bertweet"),S0r.forEach(t),AGe=r(bve," \u2014 "),G9=n(bve,"A",{href:!0});var P0r=s(G9);LGe=r(P0r,"BertweetTokenizer"),P0r.forEach(t),BGe=r(bve," (Bertweet model)"),bve.forEach(t),kGe=i(y),Xn=n(y,"LI",{});var H6=s(Xn);VQ=n(H6,"STRONG",{});var $0r=s(VQ);xGe=r($0r,"big_bird"),$0r.forEach(t),RGe=r(H6," \u2014 "),O9=n(H6,"A",{href:!0});var I0r=s(O9);SGe=r(I0r,"BigBirdTokenizer"),I0r.forEach(t),PGe=r(H6," or "),X9=n(H6,"A",{href:!0});var j0r=s(X9);$Ge=r(j0r,"BigBirdTokenizerFast"),j0r.forEach(t),IGe=r(H6," (BigBird model)"),H6.forEach(t),jGe=i(y),zn=n(y,"LI",{});var U6=s(zn);WQ=n(U6,"STRONG",{});var N0r=s(WQ);NGe=r(N0r,"bigbird_pegasus"),N0r.forEach(t),DGe=r(U6," \u2014 "),z9=n(U6,"A",{href:!0});var D0r=s(z9);qGe=r(D0r,"PegasusTokenizer"),D0r.forEach(t),GGe=r(U6," or "),V9=n(U6,"A",{href:!0});var q0r=s(V9);OGe=r(q0r,"PegasusTokenizerFast"),q0r.forEach(t),XGe=r(U6," (BigBirdPegasus model)"),U6.forEach(t),zGe=i(y),Vn=n(y,"LI",{});var J6=s(Vn);QQ=n(J6,"STRONG",{});var G0r=s(QQ);VGe=r(G0r,"blenderbot"),G0r.forEach(t),WGe=r(J6," \u2014 "),W9=n(J6,"A",{href:!0});var O0r=s(W9);QGe=r(O0r,"BlenderbotTokenizer"),O0r.forEach(t),HGe=r(J6," or "),Q9=n(J6,"A",{href:!0});var X0r=s(Q9);UGe=r(X0r,"BlenderbotTokenizerFast"),X0r.forEach(t),JGe=r(J6," (Blenderbot model)"),J6.forEach(t),YGe=i(y),Tg=n(y,"LI",{});var vve=s(Tg);HQ=n(vve,"STRONG",{});var z0r=s(HQ);KGe=r(z0r,"blenderbot-small"),z0r.forEach(t),ZGe=r(vve," \u2014 "),H9=n(vve,"A",{href:!0});var V0r=s(H9);eOe=r(V0r,"BlenderbotSmallTokenizer"),V0r.forEach(t),oOe=r(vve," (BlenderbotSmall model)"),vve.forEach(t),rOe=i(y),Fg=n(y,"LI",{});var Tve=s(Fg);UQ=n(Tve,"STRONG",{});var W0r=s(UQ);tOe=r(W0r,"byt5"),W0r.forEach(t),aOe=r(Tve," \u2014 "),U9=n(Tve,"A",{href:!0});var Q0r=s(U9);nOe=r(Q0r,"ByT5Tokenizer"),Q0r.forEach(t),sOe=r(Tve," (ByT5 model)"),Tve.forEach(t),lOe=i(y),Wn=n(y,"LI",{});var Y6=s(Wn);JQ=n(Y6,"STRONG",{});var H0r=s(JQ);iOe=r(H0r,"camembert"),H0r.forEach(t),dOe=r(Y6," \u2014 "),J9=n(Y6,"A",{href:!0});var U0r=s(J9);cOe=r(U0r,"CamembertTokenizer"),U0r.forEach(t),fOe=r(Y6," or "),Y9=n(Y6,"A",{href:!0});var J0r=s(Y9);mOe=r(J0r,"CamembertTokenizerFast"),J0r.forEach(t),gOe=r(Y6," (CamemBERT model)"),Y6.forEach(t),hOe=i(y),Cg=n(y,"LI",{});var Fve=s(Cg);YQ=n(Fve,"STRONG",{});var Y0r=s(YQ);pOe=r(Y0r,"canine"),Y0r.forEach(t),_Oe=r(Fve," \u2014 "),K9=n(Fve,"A",{href:!0});var K0r=s(K9);uOe=r(K0r,"CanineTokenizer"),K0r.forEach(t),bOe=r(Fve," (Canine model)"),Fve.forEach(t),vOe=i(y),Qn=n(y,"LI",{});var K6=s(Qn);KQ=n(K6,"STRONG",{});var Z0r=s(KQ);TOe=r(Z0r,"clip"),Z0r.forEach(t),FOe=r(K6," \u2014 "),Z9=n(K6,"A",{href:!0});var eLr=s(Z9);COe=r(eLr,"CLIPTokenizer"),eLr.forEach(t),MOe=r(K6," or "),eB=n(K6,"A",{href:!0});var oLr=s(eB);EOe=r(oLr,"CLIPTokenizerFast"),oLr.forEach(t),yOe=r(K6," (CLIP model)"),K6.forEach(t),wOe=i(y),Hn=n(y,"LI",{});var Z6=s(Hn);ZQ=n(Z6,"STRONG",{});var rLr=s(ZQ);AOe=r(rLr,"convbert"),rLr.forEach(t),LOe=r(Z6," \u2014 "),oB=n(Z6,"A",{href:!0});var tLr=s(oB);BOe=r(tLr,"ConvBertTokenizer"),tLr.forEach(t),kOe=r(Z6," or "),rB=n(Z6,"A",{href:!0});var aLr=s(rB);xOe=r(aLr,"ConvBertTokenizerFast"),aLr.forEach(t),ROe=r(Z6," (ConvBERT model)"),Z6.forEach(t),SOe=i(y),Un=n(y,"LI",{});var e0=s(Un);eH=n(e0,"STRONG",{});var nLr=s(eH);POe=r(nLr,"cpm"),nLr.forEach(t),$Oe=r(e0," \u2014 "),tB=n(e0,"A",{href:!0});var sLr=s(tB);IOe=r(sLr,"CpmTokenizer"),sLr.forEach(t),jOe=r(e0," or "),oH=n(e0,"CODE",{});var lLr=s(oH);NOe=r(lLr,"CpmTokenizerFast"),lLr.forEach(t),DOe=r(e0," (CPM model)"),e0.forEach(t),qOe=i(y),Mg=n(y,"LI",{});var Cve=s(Mg);rH=n(Cve,"STRONG",{});var iLr=s(rH);GOe=r(iLr,"ctrl"),iLr.forEach(t),OOe=r(Cve," \u2014 "),aB=n(Cve,"A",{href:!0});var dLr=s(aB);XOe=r(dLr,"CTRLTokenizer"),dLr.forEach(t),zOe=r(Cve," (CTRL model)"),Cve.forEach(t),VOe=i(y),Jn=n(y,"LI",{});var o0=s(Jn);tH=n(o0,"STRONG",{});var cLr=s(tH);WOe=r(cLr,"deberta"),cLr.forEach(t),QOe=r(o0," \u2014 "),nB=n(o0,"A",{href:!0});var fLr=s(nB);HOe=r(fLr,"DebertaTokenizer"),fLr.forEach(t),UOe=r(o0," or "),sB=n(o0,"A",{href:!0});var mLr=s(sB);JOe=r(mLr,"DebertaTokenizerFast"),mLr.forEach(t),YOe=r(o0," (DeBERTa model)"),o0.forEach(t),KOe=i(y),Eg=n(y,"LI",{});var Mve=s(Eg);aH=n(Mve,"STRONG",{});var gLr=s(aH);ZOe=r(gLr,"deberta-v2"),gLr.forEach(t),eXe=r(Mve," \u2014 "),lB=n(Mve,"A",{href:!0});var hLr=s(lB);oXe=r(hLr,"DebertaV2Tokenizer"),hLr.forEach(t),rXe=r(Mve," (DeBERTa-v2 model)"),Mve.forEach(t),tXe=i(y),Yn=n(y,"LI",{});var r0=s(Yn);nH=n(r0,"STRONG",{});var pLr=s(nH);aXe=r(pLr,"distilbert"),pLr.forEach(t),nXe=r(r0," \u2014 "),iB=n(r0,"A",{href:!0});var _Lr=s(iB);sXe=r(_Lr,"DistilBertTokenizer"),_Lr.forEach(t),lXe=r(r0," or "),dB=n(r0,"A",{href:!0});var uLr=s(dB);iXe=r(uLr,"DistilBertTokenizerFast"),uLr.forEach(t),dXe=r(r0," (DistilBERT model)"),r0.forEach(t),cXe=i(y),Kn=n(y,"LI",{});var t0=s(Kn);sH=n(t0,"STRONG",{});var bLr=s(sH);fXe=r(bLr,"dpr"),bLr.forEach(t),mXe=r(t0," \u2014 "),cB=n(t0,"A",{href:!0});var vLr=s(cB);gXe=r(vLr,"DPRQuestionEncoderTokenizer"),vLr.forEach(t),hXe=r(t0," or "),fB=n(t0,"A",{href:!0});var TLr=s(fB);pXe=r(TLr,"DPRQuestionEncoderTokenizerFast"),TLr.forEach(t),_Xe=r(t0," (DPR model)"),t0.forEach(t),uXe=i(y),Zn=n(y,"LI",{});var a0=s(Zn);lH=n(a0,"STRONG",{});var FLr=s(lH);bXe=r(FLr,"electra"),FLr.forEach(t),vXe=r(a0," \u2014 "),mB=n(a0,"A",{href:!0});var CLr=s(mB);TXe=r(CLr,"ElectraTokenizer"),CLr.forEach(t),FXe=r(a0," or "),gB=n(a0,"A",{href:!0});var MLr=s(gB);CXe=r(MLr,"ElectraTokenizerFast"),MLr.forEach(t),MXe=r(a0," (ELECTRA model)"),a0.forEach(t),EXe=i(y),yg=n(y,"LI",{});var Eve=s(yg);iH=n(Eve,"STRONG",{});var ELr=s(iH);yXe=r(ELr,"flaubert"),ELr.forEach(t),wXe=r(Eve," \u2014 "),hB=n(Eve,"A",{href:!0});var yLr=s(hB);AXe=r(yLr,"FlaubertTokenizer"),yLr.forEach(t),LXe=r(Eve," (FlauBERT model)"),Eve.forEach(t),BXe=i(y),es=n(y,"LI",{});var n0=s(es);dH=n(n0,"STRONG",{});var wLr=s(dH);kXe=r(wLr,"fnet"),wLr.forEach(t),xXe=r(n0," \u2014 "),pB=n(n0,"A",{href:!0});var ALr=s(pB);RXe=r(ALr,"FNetTokenizer"),ALr.forEach(t),SXe=r(n0," or "),_B=n(n0,"A",{href:!0});var LLr=s(_B);PXe=r(LLr,"FNetTokenizerFast"),LLr.forEach(t),$Xe=r(n0," (FNet model)"),n0.forEach(t),IXe=i(y),wg=n(y,"LI",{});var yve=s(wg);cH=n(yve,"STRONG",{});var BLr=s(cH);jXe=r(BLr,"fsmt"),BLr.forEach(t),NXe=r(yve," \u2014 "),uB=n(yve,"A",{href:!0});var kLr=s(uB);DXe=r(kLr,"FSMTTokenizer"),kLr.forEach(t),qXe=r(yve," (FairSeq Machine-Translation model)"),yve.forEach(t),GXe=i(y),os=n(y,"LI",{});var s0=s(os);fH=n(s0,"STRONG",{});var xLr=s(fH);OXe=r(xLr,"funnel"),xLr.forEach(t),XXe=r(s0," \u2014 "),bB=n(s0,"A",{href:!0});var RLr=s(bB);zXe=r(RLr,"FunnelTokenizer"),RLr.forEach(t),VXe=r(s0," or "),vB=n(s0,"A",{href:!0});var SLr=s(vB);WXe=r(SLr,"FunnelTokenizerFast"),SLr.forEach(t),QXe=r(s0," (Funnel Transformer model)"),s0.forEach(t),HXe=i(y),rs=n(y,"LI",{});var l0=s(rs);mH=n(l0,"STRONG",{});var PLr=s(mH);UXe=r(PLr,"gpt2"),PLr.forEach(t),JXe=r(l0," \u2014 "),TB=n(l0,"A",{href:!0});var $Lr=s(TB);YXe=r($Lr,"GPT2Tokenizer"),$Lr.forEach(t),KXe=r(l0," or "),FB=n(l0,"A",{href:!0});var ILr=s(FB);ZXe=r(ILr,"GPT2TokenizerFast"),ILr.forEach(t),eze=r(l0," (OpenAI GPT-2 model)"),l0.forEach(t),oze=i(y),ts=n(y,"LI",{});var i0=s(ts);gH=n(i0,"STRONG",{});var jLr=s(gH);rze=r(jLr,"gpt_neo"),jLr.forEach(t),tze=r(i0," \u2014 "),CB=n(i0,"A",{href:!0});var NLr=s(CB);aze=r(NLr,"GPT2Tokenizer"),NLr.forEach(t),nze=r(i0," or "),MB=n(i0,"A",{href:!0});var DLr=s(MB);sze=r(DLr,"GPT2TokenizerFast"),DLr.forEach(t),lze=r(i0," (GPT Neo model)"),i0.forEach(t),ize=i(y),as=n(y,"LI",{});var d0=s(as);hH=n(d0,"STRONG",{});var qLr=s(hH);dze=r(qLr,"herbert"),qLr.forEach(t),cze=r(d0," \u2014 "),EB=n(d0,"A",{href:!0});var GLr=s(EB);fze=r(GLr,"HerbertTokenizer"),GLr.forEach(t),mze=r(d0," or "),yB=n(d0,"A",{href:!0});var OLr=s(yB);gze=r(OLr,"HerbertTokenizerFast"),OLr.forEach(t),hze=r(d0," (HerBERT model)"),d0.forEach(t),pze=i(y),Ag=n(y,"LI",{});var wve=s(Ag);pH=n(wve,"STRONG",{});var XLr=s(pH);_ze=r(XLr,"hubert"),XLr.forEach(t),uze=r(wve," \u2014 "),wB=n(wve,"A",{href:!0});var zLr=s(wB);bze=r(zLr,"Wav2Vec2CTCTokenizer"),zLr.forEach(t),vze=r(wve," (Hubert model)"),wve.forEach(t),Tze=i(y),ns=n(y,"LI",{});var c0=s(ns);_H=n(c0,"STRONG",{});var VLr=s(_H);Fze=r(VLr,"ibert"),VLr.forEach(t),Cze=r(c0," \u2014 "),AB=n(c0,"A",{href:!0});var WLr=s(AB);Mze=r(WLr,"RobertaTokenizer"),WLr.forEach(t),Eze=r(c0," or "),LB=n(c0,"A",{href:!0});var QLr=s(LB);yze=r(QLr,"RobertaTokenizerFast"),QLr.forEach(t),wze=r(c0," (I-BERT model)"),c0.forEach(t),Aze=i(y),ss=n(y,"LI",{});var f0=s(ss);uH=n(f0,"STRONG",{});var HLr=s(uH);Lze=r(HLr,"layoutlm"),HLr.forEach(t),Bze=r(f0," \u2014 "),BB=n(f0,"A",{href:!0});var ULr=s(BB);kze=r(ULr,"LayoutLMTokenizer"),ULr.forEach(t),xze=r(f0," or "),kB=n(f0,"A",{href:!0});var JLr=s(kB);Rze=r(JLr,"LayoutLMTokenizerFast"),JLr.forEach(t),Sze=r(f0," (LayoutLM model)"),f0.forEach(t),Pze=i(y),ls=n(y,"LI",{});var m0=s(ls);bH=n(m0,"STRONG",{});var YLr=s(bH);$ze=r(YLr,"layoutlmv2"),YLr.forEach(t),Ize=r(m0," \u2014 "),xB=n(m0,"A",{href:!0});var KLr=s(xB);jze=r(KLr,"LayoutLMv2Tokenizer"),KLr.forEach(t),Nze=r(m0," or "),RB=n(m0,"A",{href:!0});var ZLr=s(RB);Dze=r(ZLr,"LayoutLMv2TokenizerFast"),ZLr.forEach(t),qze=r(m0," (LayoutLMv2 model)"),m0.forEach(t),Gze=i(y),is=n(y,"LI",{});var g0=s(is);vH=n(g0,"STRONG",{});var e9r=s(vH);Oze=r(e9r,"layoutxlm"),e9r.forEach(t),Xze=r(g0," \u2014 "),SB=n(g0,"A",{href:!0});var o9r=s(SB);zze=r(o9r,"LayoutXLMTokenizer"),o9r.forEach(t),Vze=r(g0," or "),PB=n(g0,"A",{href:!0});var r9r=s(PB);Wze=r(r9r,"LayoutXLMTokenizerFast"),r9r.forEach(t),Qze=r(g0," (LayoutXLM model)"),g0.forEach(t),Hze=i(y),ds=n(y,"LI",{});var h0=s(ds);TH=n(h0,"STRONG",{});var t9r=s(TH);Uze=r(t9r,"led"),t9r.forEach(t),Jze=r(h0," \u2014 "),$B=n(h0,"A",{href:!0});var a9r=s($B);Yze=r(a9r,"LEDTokenizer"),a9r.forEach(t),Kze=r(h0," or "),IB=n(h0,"A",{href:!0});var n9r=s(IB);Zze=r(n9r,"LEDTokenizerFast"),n9r.forEach(t),eVe=r(h0," (LED model)"),h0.forEach(t),oVe=i(y),cs=n(y,"LI",{});var p0=s(cs);FH=n(p0,"STRONG",{});var s9r=s(FH);rVe=r(s9r,"longformer"),s9r.forEach(t),tVe=r(p0," \u2014 "),jB=n(p0,"A",{href:!0});var l9r=s(jB);aVe=r(l9r,"LongformerTokenizer"),l9r.forEach(t),nVe=r(p0," or "),NB=n(p0,"A",{href:!0});var i9r=s(NB);sVe=r(i9r,"LongformerTokenizerFast"),i9r.forEach(t),lVe=r(p0," (Longformer model)"),p0.forEach(t),iVe=i(y),Lg=n(y,"LI",{});var Ave=s(Lg);CH=n(Ave,"STRONG",{});var d9r=s(CH);dVe=r(d9r,"luke"),d9r.forEach(t),cVe=r(Ave," \u2014 "),DB=n(Ave,"A",{href:!0});var c9r=s(DB);fVe=r(c9r,"LukeTokenizer"),c9r.forEach(t),mVe=r(Ave," (LUKE model)"),Ave.forEach(t),gVe=i(y),fs=n(y,"LI",{});var _0=s(fs);MH=n(_0,"STRONG",{});var f9r=s(MH);hVe=r(f9r,"lxmert"),f9r.forEach(t),pVe=r(_0," \u2014 "),qB=n(_0,"A",{href:!0});var m9r=s(qB);_Ve=r(m9r,"LxmertTokenizer"),m9r.forEach(t),uVe=r(_0," or "),GB=n(_0,"A",{href:!0});var g9r=s(GB);bVe=r(g9r,"LxmertTokenizerFast"),g9r.forEach(t),vVe=r(_0," (LXMERT model)"),_0.forEach(t),TVe=i(y),Bg=n(y,"LI",{});var Lve=s(Bg);EH=n(Lve,"STRONG",{});var h9r=s(EH);FVe=r(h9r,"m2m_100"),h9r.forEach(t),CVe=r(Lve," \u2014 "),OB=n(Lve,"A",{href:!0});var p9r=s(OB);MVe=r(p9r,"M2M100Tokenizer"),p9r.forEach(t),EVe=r(Lve," (M2M100 model)"),Lve.forEach(t),yVe=i(y),kg=n(y,"LI",{});var Bve=s(kg);yH=n(Bve,"STRONG",{});var _9r=s(yH);wVe=r(_9r,"marian"),_9r.forEach(t),AVe=r(Bve," \u2014 "),XB=n(Bve,"A",{href:!0});var u9r=s(XB);LVe=r(u9r,"MarianTokenizer"),u9r.forEach(t),BVe=r(Bve," (Marian model)"),Bve.forEach(t),kVe=i(y),ms=n(y,"LI",{});var u0=s(ms);wH=n(u0,"STRONG",{});var b9r=s(wH);xVe=r(b9r,"mbart"),b9r.forEach(t),RVe=r(u0," \u2014 "),zB=n(u0,"A",{href:!0});var v9r=s(zB);SVe=r(v9r,"MBartTokenizer"),v9r.forEach(t),PVe=r(u0," or "),VB=n(u0,"A",{href:!0});var T9r=s(VB);$Ve=r(T9r,"MBartTokenizerFast"),T9r.forEach(t),IVe=r(u0," (mBART model)"),u0.forEach(t),jVe=i(y),gs=n(y,"LI",{});var b0=s(gs);AH=n(b0,"STRONG",{});var F9r=s(AH);NVe=r(F9r,"mbart50"),F9r.forEach(t),DVe=r(b0," \u2014 "),WB=n(b0,"A",{href:!0});var C9r=s(WB);qVe=r(C9r,"MBart50Tokenizer"),C9r.forEach(t),GVe=r(b0," or "),QB=n(b0,"A",{href:!0});var M9r=s(QB);OVe=r(M9r,"MBart50TokenizerFast"),M9r.forEach(t),XVe=r(b0," (mBART-50 model)"),b0.forEach(t),zVe=i(y),xg=n(y,"LI",{});var kve=s(xg);LH=n(kve,"STRONG",{});var E9r=s(LH);VVe=r(E9r,"mluke"),E9r.forEach(t),WVe=r(kve," \u2014 "),HB=n(kve,"A",{href:!0});var y9r=s(HB);QVe=r(y9r,"MLukeTokenizer"),y9r.forEach(t),HVe=r(kve," (mLUKE model)"),kve.forEach(t),UVe=i(y),hs=n(y,"LI",{});var v0=s(hs);BH=n(v0,"STRONG",{});var w9r=s(BH);JVe=r(w9r,"mobilebert"),w9r.forEach(t),YVe=r(v0," \u2014 "),UB=n(v0,"A",{href:!0});var A9r=s(UB);KVe=r(A9r,"MobileBertTokenizer"),A9r.forEach(t),ZVe=r(v0," or "),JB=n(v0,"A",{href:!0});var L9r=s(JB);eWe=r(L9r,"MobileBertTokenizerFast"),L9r.forEach(t),oWe=r(v0," (MobileBERT model)"),v0.forEach(t),rWe=i(y),ps=n(y,"LI",{});var T0=s(ps);kH=n(T0,"STRONG",{});var B9r=s(kH);tWe=r(B9r,"mpnet"),B9r.forEach(t),aWe=r(T0," \u2014 "),YB=n(T0,"A",{href:!0});var k9r=s(YB);nWe=r(k9r,"MPNetTokenizer"),k9r.forEach(t),sWe=r(T0," or "),KB=n(T0,"A",{href:!0});var x9r=s(KB);lWe=r(x9r,"MPNetTokenizerFast"),x9r.forEach(t),iWe=r(T0," (MPNet model)"),T0.forEach(t),dWe=i(y),_s=n(y,"LI",{});var F0=s(_s);xH=n(F0,"STRONG",{});var R9r=s(xH);cWe=r(R9r,"mt5"),R9r.forEach(t),fWe=r(F0," \u2014 "),ZB=n(F0,"A",{href:!0});var S9r=s(ZB);mWe=r(S9r,"MT5Tokenizer"),S9r.forEach(t),gWe=r(F0," or "),ek=n(F0,"A",{href:!0});var P9r=s(ek);hWe=r(P9r,"MT5TokenizerFast"),P9r.forEach(t),pWe=r(F0," (mT5 model)"),F0.forEach(t),_We=i(y),us=n(y,"LI",{});var C0=s(us);RH=n(C0,"STRONG",{});var $9r=s(RH);uWe=r($9r,"openai-gpt"),$9r.forEach(t),bWe=r(C0," \u2014 "),ok=n(C0,"A",{href:!0});var I9r=s(ok);vWe=r(I9r,"OpenAIGPTTokenizer"),I9r.forEach(t),TWe=r(C0," or "),rk=n(C0,"A",{href:!0});var j9r=s(rk);FWe=r(j9r,"OpenAIGPTTokenizerFast"),j9r.forEach(t),CWe=r(C0," (OpenAI GPT model)"),C0.forEach(t),MWe=i(y),bs=n(y,"LI",{});var M0=s(bs);SH=n(M0,"STRONG",{});var N9r=s(SH);EWe=r(N9r,"pegasus"),N9r.forEach(t),yWe=r(M0," \u2014 "),tk=n(M0,"A",{href:!0});var D9r=s(tk);wWe=r(D9r,"PegasusTokenizer"),D9r.forEach(t),AWe=r(M0," or "),ak=n(M0,"A",{href:!0});var q9r=s(ak);LWe=r(q9r,"PegasusTokenizerFast"),q9r.forEach(t),BWe=r(M0," (Pegasus model)"),M0.forEach(t),kWe=i(y),Rg=n(y,"LI",{});var xve=s(Rg);PH=n(xve,"STRONG",{});var G9r=s(PH);xWe=r(G9r,"perceiver"),G9r.forEach(t),RWe=r(xve," \u2014 "),nk=n(xve,"A",{href:!0});var O9r=s(nk);SWe=r(O9r,"PerceiverTokenizer"),O9r.forEach(t),PWe=r(xve," (Perceiver model)"),xve.forEach(t),$We=i(y),Sg=n(y,"LI",{});var Rve=s(Sg);$H=n(Rve,"STRONG",{});var X9r=s($H);IWe=r(X9r,"phobert"),X9r.forEach(t),jWe=r(Rve," \u2014 "),sk=n(Rve,"A",{href:!0});var z9r=s(sk);NWe=r(z9r,"PhobertTokenizer"),z9r.forEach(t),DWe=r(Rve," (PhoBERT model)"),Rve.forEach(t),qWe=i(y),Pg=n(y,"LI",{});var Sve=s(Pg);IH=n(Sve,"STRONG",{});var V9r=s(IH);GWe=r(V9r,"plbart"),V9r.forEach(t),OWe=r(Sve," \u2014 "),lk=n(Sve,"A",{href:!0});var W9r=s(lk);XWe=r(W9r,"PLBartTokenizer"),W9r.forEach(t),zWe=r(Sve," (PLBart model)"),Sve.forEach(t),VWe=i(y),$g=n(y,"LI",{});var Pve=s($g);jH=n(Pve,"STRONG",{});var Q9r=s(jH);WWe=r(Q9r,"prophetnet"),Q9r.forEach(t),QWe=r(Pve," \u2014 "),ik=n(Pve,"A",{href:!0});var H9r=s(ik);HWe=r(H9r,"ProphetNetTokenizer"),H9r.forEach(t),UWe=r(Pve," (ProphetNet model)"),Pve.forEach(t),JWe=i(y),vs=n(y,"LI",{});var E0=s(vs);NH=n(E0,"STRONG",{});var U9r=s(NH);YWe=r(U9r,"qdqbert"),U9r.forEach(t),KWe=r(E0," \u2014 "),dk=n(E0,"A",{href:!0});var J9r=s(dk);ZWe=r(J9r,"BertTokenizer"),J9r.forEach(t),eQe=r(E0," or "),ck=n(E0,"A",{href:!0});var Y9r=s(ck);oQe=r(Y9r,"BertTokenizerFast"),Y9r.forEach(t),rQe=r(E0," (QDQBert model)"),E0.forEach(t),tQe=i(y),Ig=n(y,"LI",{});var $ve=s(Ig);DH=n($ve,"STRONG",{});var K9r=s(DH);aQe=r(K9r,"rag"),K9r.forEach(t),nQe=r($ve," \u2014 "),fk=n($ve,"A",{href:!0});var Z9r=s(fk);sQe=r(Z9r,"RagTokenizer"),Z9r.forEach(t),lQe=r($ve," (RAG model)"),$ve.forEach(t),iQe=i(y),Ts=n(y,"LI",{});var y0=s(Ts);qH=n(y0,"STRONG",{});var eBr=s(qH);dQe=r(eBr,"reformer"),eBr.forEach(t),cQe=r(y0," \u2014 "),mk=n(y0,"A",{href:!0});var oBr=s(mk);fQe=r(oBr,"ReformerTokenizer"),oBr.forEach(t),mQe=r(y0," or "),gk=n(y0,"A",{href:!0});var rBr=s(gk);gQe=r(rBr,"ReformerTokenizerFast"),rBr.forEach(t),hQe=r(y0," (Reformer model)"),y0.forEach(t),pQe=i(y),Fs=n(y,"LI",{});var w0=s(Fs);GH=n(w0,"STRONG",{});var tBr=s(GH);_Qe=r(tBr,"rembert"),tBr.forEach(t),uQe=r(w0," \u2014 "),hk=n(w0,"A",{href:!0});var aBr=s(hk);bQe=r(aBr,"RemBertTokenizer"),aBr.forEach(t),vQe=r(w0," or "),pk=n(w0,"A",{href:!0});var nBr=s(pk);TQe=r(nBr,"RemBertTokenizerFast"),nBr.forEach(t),FQe=r(w0," (RemBERT model)"),w0.forEach(t),CQe=i(y),Cs=n(y,"LI",{});var A0=s(Cs);OH=n(A0,"STRONG",{});var sBr=s(OH);MQe=r(sBr,"retribert"),sBr.forEach(t),EQe=r(A0," \u2014 "),_k=n(A0,"A",{href:!0});var lBr=s(_k);yQe=r(lBr,"RetriBertTokenizer"),lBr.forEach(t),wQe=r(A0," or "),uk=n(A0,"A",{href:!0});var iBr=s(uk);AQe=r(iBr,"RetriBertTokenizerFast"),iBr.forEach(t),LQe=r(A0," (RetriBERT model)"),A0.forEach(t),BQe=i(y),Ms=n(y,"LI",{});var L0=s(Ms);XH=n(L0,"STRONG",{});var dBr=s(XH);kQe=r(dBr,"roberta"),dBr.forEach(t),xQe=r(L0," \u2014 "),bk=n(L0,"A",{href:!0});var cBr=s(bk);RQe=r(cBr,"RobertaTokenizer"),cBr.forEach(t),SQe=r(L0," or "),vk=n(L0,"A",{href:!0});var fBr=s(vk);PQe=r(fBr,"RobertaTokenizerFast"),fBr.forEach(t),$Qe=r(L0," (RoBERTa model)"),L0.forEach(t),IQe=i(y),Es=n(y,"LI",{});var B0=s(Es);zH=n(B0,"STRONG",{});var mBr=s(zH);jQe=r(mBr,"roformer"),mBr.forEach(t),NQe=r(B0," \u2014 "),Tk=n(B0,"A",{href:!0});var gBr=s(Tk);DQe=r(gBr,"RoFormerTokenizer"),gBr.forEach(t),qQe=r(B0," or "),Fk=n(B0,"A",{href:!0});var hBr=s(Fk);GQe=r(hBr,"RoFormerTokenizerFast"),hBr.forEach(t),OQe=r(B0," (RoFormer model)"),B0.forEach(t),XQe=i(y),jg=n(y,"LI",{});var Ive=s(jg);VH=n(Ive,"STRONG",{});var pBr=s(VH);zQe=r(pBr,"speech_to_text"),pBr.forEach(t),VQe=r(Ive," \u2014 "),Ck=n(Ive,"A",{href:!0});var _Br=s(Ck);WQe=r(_Br,"Speech2TextTokenizer"),_Br.forEach(t),QQe=r(Ive," (Speech2Text model)"),Ive.forEach(t),HQe=i(y),Ng=n(y,"LI",{});var jve=s(Ng);WH=n(jve,"STRONG",{});var uBr=s(WH);UQe=r(uBr,"speech_to_text_2"),uBr.forEach(t),JQe=r(jve," \u2014 "),Mk=n(jve,"A",{href:!0});var bBr=s(Mk);YQe=r(bBr,"Speech2Text2Tokenizer"),bBr.forEach(t),KQe=r(jve," (Speech2Text2 model)"),jve.forEach(t),ZQe=i(y),ys=n(y,"LI",{});var k0=s(ys);QH=n(k0,"STRONG",{});var vBr=s(QH);eHe=r(vBr,"splinter"),vBr.forEach(t),oHe=r(k0," \u2014 "),Ek=n(k0,"A",{href:!0});var TBr=s(Ek);rHe=r(TBr,"SplinterTokenizer"),TBr.forEach(t),tHe=r(k0," or "),yk=n(k0,"A",{href:!0});var FBr=s(yk);aHe=r(FBr,"SplinterTokenizerFast"),FBr.forEach(t),nHe=r(k0," (Splinter model)"),k0.forEach(t),sHe=i(y),ws=n(y,"LI",{});var x0=s(ws);HH=n(x0,"STRONG",{});var CBr=s(HH);lHe=r(CBr,"squeezebert"),CBr.forEach(t),iHe=r(x0," \u2014 "),wk=n(x0,"A",{href:!0});var MBr=s(wk);dHe=r(MBr,"SqueezeBertTokenizer"),MBr.forEach(t),cHe=r(x0," or "),Ak=n(x0,"A",{href:!0});var EBr=s(Ak);fHe=r(EBr,"SqueezeBertTokenizerFast"),EBr.forEach(t),mHe=r(x0," (SqueezeBERT model)"),x0.forEach(t),gHe=i(y),As=n(y,"LI",{});var R0=s(As);UH=n(R0,"STRONG",{});var yBr=s(UH);hHe=r(yBr,"t5"),yBr.forEach(t),pHe=r(R0," \u2014 "),Lk=n(R0,"A",{href:!0});var wBr=s(Lk);_He=r(wBr,"T5Tokenizer"),wBr.forEach(t),uHe=r(R0," or "),Bk=n(R0,"A",{href:!0});var ABr=s(Bk);bHe=r(ABr,"T5TokenizerFast"),ABr.forEach(t),vHe=r(R0," (T5 model)"),R0.forEach(t),THe=i(y),Dg=n(y,"LI",{});var Nve=s(Dg);JH=n(Nve,"STRONG",{});var LBr=s(JH);FHe=r(LBr,"tapas"),LBr.forEach(t),CHe=r(Nve," \u2014 "),kk=n(Nve,"A",{href:!0});var BBr=s(kk);MHe=r(BBr,"TapasTokenizer"),BBr.forEach(t),EHe=r(Nve," (TAPAS model)"),Nve.forEach(t),yHe=i(y),qg=n(y,"LI",{});var Dve=s(qg);YH=n(Dve,"STRONG",{});var kBr=s(YH);wHe=r(kBr,"transfo-xl"),kBr.forEach(t),AHe=r(Dve," \u2014 "),xk=n(Dve,"A",{href:!0});var xBr=s(xk);LHe=r(xBr,"TransfoXLTokenizer"),xBr.forEach(t),BHe=r(Dve," (Transformer-XL model)"),Dve.forEach(t),kHe=i(y),Gg=n(y,"LI",{});var qve=s(Gg);KH=n(qve,"STRONG",{});var RBr=s(KH);xHe=r(RBr,"wav2vec2"),RBr.forEach(t),RHe=r(qve," \u2014 "),Rk=n(qve,"A",{href:!0});var SBr=s(Rk);SHe=r(SBr,"Wav2Vec2CTCTokenizer"),SBr.forEach(t),PHe=r(qve," (Wav2Vec2 model)"),qve.forEach(t),$He=i(y),Og=n(y,"LI",{});var Gve=s(Og);ZH=n(Gve,"STRONG",{});var PBr=s(ZH);IHe=r(PBr,"wav2vec2_phoneme"),PBr.forEach(t),jHe=r(Gve," \u2014 "),Sk=n(Gve,"A",{href:!0});var $Br=s(Sk);NHe=r($Br,"Wav2Vec2PhonemeCTCTokenizer"),$Br.forEach(t),DHe=r(Gve," (Wav2Vec2Phoneme model)"),Gve.forEach(t),qHe=i(y),Ls=n(y,"LI",{});var S0=s(Ls);eU=n(S0,"STRONG",{});var IBr=s(eU);GHe=r(IBr,"xglm"),IBr.forEach(t),OHe=r(S0," \u2014 "),Pk=n(S0,"A",{href:!0});var jBr=s(Pk);XHe=r(jBr,"XGLMTokenizer"),jBr.forEach(t),zHe=r(S0," or "),$k=n(S0,"A",{href:!0});var NBr=s($k);VHe=r(NBr,"XGLMTokenizerFast"),NBr.forEach(t),WHe=r(S0," (XGLM model)"),S0.forEach(t),QHe=i(y),Xg=n(y,"LI",{});var Ove=s(Xg);oU=n(Ove,"STRONG",{});var DBr=s(oU);HHe=r(DBr,"xlm"),DBr.forEach(t),UHe=r(Ove," \u2014 "),Ik=n(Ove,"A",{href:!0});var qBr=s(Ik);JHe=r(qBr,"XLMTokenizer"),qBr.forEach(t),YHe=r(Ove," (XLM model)"),Ove.forEach(t),KHe=i(y),zg=n(y,"LI",{});var Xve=s(zg);rU=n(Xve,"STRONG",{});var GBr=s(rU);ZHe=r(GBr,"xlm-prophetnet"),GBr.forEach(t),eUe=r(Xve," \u2014 "),jk=n(Xve,"A",{href:!0});var OBr=s(jk);oUe=r(OBr,"XLMProphetNetTokenizer"),OBr.forEach(t),rUe=r(Xve," (XLMProphetNet model)"),Xve.forEach(t),tUe=i(y),Bs=n(y,"LI",{});var P0=s(Bs);tU=n(P0,"STRONG",{});var XBr=s(tU);aUe=r(XBr,"xlm-roberta"),XBr.forEach(t),nUe=r(P0," \u2014 "),Nk=n(P0,"A",{href:!0});var zBr=s(Nk);sUe=r(zBr,"XLMRobertaTokenizer"),zBr.forEach(t),lUe=r(P0," or "),Dk=n(P0,"A",{href:!0});var VBr=s(Dk);iUe=r(VBr,"XLMRobertaTokenizerFast"),VBr.forEach(t),dUe=r(P0," (XLM-RoBERTa model)"),P0.forEach(t),cUe=i(y),ks=n(y,"LI",{});var $0=s(ks);aU=n($0,"STRONG",{});var WBr=s(aU);fUe=r(WBr,"xlnet"),WBr.forEach(t),mUe=r($0," \u2014 "),qk=n($0,"A",{href:!0});var QBr=s(qk);gUe=r(QBr,"XLNetTokenizer"),QBr.forEach(t),hUe=r($0," or "),Gk=n($0,"A",{href:!0});var HBr=s(Gk);pUe=r(HBr,"XLNetTokenizerFast"),HBr.forEach(t),_Ue=r($0," (XLNet model)"),$0.forEach(t),y.forEach(t),uUe=i(da),nU=n(da,"P",{});var UBr=s(nU);bUe=r(UBr,"Examples:"),UBr.forEach(t),vUe=i(da),m(vM.$$.fragment,da),da.forEach(t),TUe=i($s),Vg=n($s,"DIV",{class:!0});var hBe=s(Vg);m(TM.$$.fragment,hBe),FUe=i(hBe),sU=n(hBe,"P",{});var JBr=s(sU);CUe=r(JBr,"Register a new tokenizer in this mapping."),JBr.forEach(t),hBe.forEach(t),$s.forEach(t),mLe=i(d),ji=n(d,"H2",{class:!0});var pBe=s(ji);Wg=n(pBe,"A",{id:!0,class:!0,href:!0});var YBr=s(Wg);lU=n(YBr,"SPAN",{});var KBr=s(lU);m(FM.$$.fragment,KBr),KBr.forEach(t),YBr.forEach(t),MUe=i(pBe),iU=n(pBe,"SPAN",{});var ZBr=s(iU);EUe=r(ZBr,"AutoFeatureExtractor"),ZBr.forEach(t),pBe.forEach(t),gLe=i(d),Xo=n(d,"DIV",{class:!0});var Is=s(Xo);m(CM.$$.fragment,Is),yUe=i(Is),MM=n(Is,"P",{});var _Be=s(MM);wUe=r(_Be,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Ok=n(_Be,"A",{href:!0});var ekr=s(Ok);AUe=r(ekr,"AutoFeatureExtractor.from_pretrained()"),ekr.forEach(t),LUe=r(_Be," class method."),_Be.forEach(t),BUe=i(Is),EM=n(Is,"P",{});var uBe=s(EM);kUe=r(uBe,"This class cannot be instantiated directly using "),dU=n(uBe,"CODE",{});var okr=s(dU);xUe=r(okr,"__init__()"),okr.forEach(t),RUe=r(uBe," (throws an error)."),uBe.forEach(t),SUe=i(Is),Le=n(Is,"DIV",{class:!0});var xt=s(Le);m(yM.$$.fragment,xt),PUe=i(xt),cU=n(xt,"P",{});var rkr=s(cU);$Ue=r(rkr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),rkr.forEach(t),IUe=i(xt),Na=n(xt,"P",{});var sC=s(Na);jUe=r(sC,"The feature extractor class to instantiate is selected based on the "),fU=n(sC,"CODE",{});var tkr=s(fU);NUe=r(tkr,"model_type"),tkr.forEach(t),DUe=r(sC,` property of the config object
(either passed as an argument or loaded from `),mU=n(sC,"CODE",{});var akr=s(mU);qUe=r(akr,"pretrained_model_name_or_path"),akr.forEach(t),GUe=r(sC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),gU=n(sC,"CODE",{});var nkr=s(gU);OUe=r(nkr,"pretrained_model_name_or_path"),nkr.forEach(t),XUe=r(sC,":"),sC.forEach(t),zUe=i(xt),se=n(xt,"UL",{});var de=s(se);Qg=n(de,"LI",{});var zve=s(Qg);hU=n(zve,"STRONG",{});var skr=s(hU);VUe=r(skr,"beit"),skr.forEach(t),WUe=r(zve," \u2014 "),Xk=n(zve,"A",{href:!0});var lkr=s(Xk);QUe=r(lkr,"BeitFeatureExtractor"),lkr.forEach(t),HUe=r(zve," (BEiT model)"),zve.forEach(t),UUe=i(de),Hg=n(de,"LI",{});var Vve=s(Hg);pU=n(Vve,"STRONG",{});var ikr=s(pU);JUe=r(ikr,"clip"),ikr.forEach(t),YUe=r(Vve," \u2014 "),zk=n(Vve,"A",{href:!0});var dkr=s(zk);KUe=r(dkr,"CLIPFeatureExtractor"),dkr.forEach(t),ZUe=r(Vve," (CLIP model)"),Vve.forEach(t),eJe=i(de),Ug=n(de,"LI",{});var Wve=s(Ug);_U=n(Wve,"STRONG",{});var ckr=s(_U);oJe=r(ckr,"convnext"),ckr.forEach(t),rJe=r(Wve," \u2014 "),Vk=n(Wve,"A",{href:!0});var fkr=s(Vk);tJe=r(fkr,"ConvNextFeatureExtractor"),fkr.forEach(t),aJe=r(Wve," (ConvNext model)"),Wve.forEach(t),nJe=i(de),Jg=n(de,"LI",{});var Qve=s(Jg);uU=n(Qve,"STRONG",{});var mkr=s(uU);sJe=r(mkr,"deit"),mkr.forEach(t),lJe=r(Qve," \u2014 "),Wk=n(Qve,"A",{href:!0});var gkr=s(Wk);iJe=r(gkr,"DeiTFeatureExtractor"),gkr.forEach(t),dJe=r(Qve," (DeiT model)"),Qve.forEach(t),cJe=i(de),Yg=n(de,"LI",{});var Hve=s(Yg);bU=n(Hve,"STRONG",{});var hkr=s(bU);fJe=r(hkr,"detr"),hkr.forEach(t),mJe=r(Hve," \u2014 "),Qk=n(Hve,"A",{href:!0});var pkr=s(Qk);gJe=r(pkr,"DetrFeatureExtractor"),pkr.forEach(t),hJe=r(Hve," (DETR model)"),Hve.forEach(t),pJe=i(de),Kg=n(de,"LI",{});var Uve=s(Kg);vU=n(Uve,"STRONG",{});var _kr=s(vU);_Je=r(_kr,"hubert"),_kr.forEach(t),uJe=r(Uve," \u2014 "),Hk=n(Uve,"A",{href:!0});var ukr=s(Hk);bJe=r(ukr,"Wav2Vec2FeatureExtractor"),ukr.forEach(t),vJe=r(Uve," (Hubert model)"),Uve.forEach(t),TJe=i(de),Zg=n(de,"LI",{});var Jve=s(Zg);TU=n(Jve,"STRONG",{});var bkr=s(TU);FJe=r(bkr,"layoutlmv2"),bkr.forEach(t),CJe=r(Jve," \u2014 "),Uk=n(Jve,"A",{href:!0});var vkr=s(Uk);MJe=r(vkr,"LayoutLMv2FeatureExtractor"),vkr.forEach(t),EJe=r(Jve," (LayoutLMv2 model)"),Jve.forEach(t),yJe=i(de),eh=n(de,"LI",{});var Yve=s(eh);FU=n(Yve,"STRONG",{});var Tkr=s(FU);wJe=r(Tkr,"perceiver"),Tkr.forEach(t),AJe=r(Yve," \u2014 "),Jk=n(Yve,"A",{href:!0});var Fkr=s(Jk);LJe=r(Fkr,"PerceiverFeatureExtractor"),Fkr.forEach(t),BJe=r(Yve," (Perceiver model)"),Yve.forEach(t),kJe=i(de),oh=n(de,"LI",{});var Kve=s(oh);CU=n(Kve,"STRONG",{});var Ckr=s(CU);xJe=r(Ckr,"poolformer"),Ckr.forEach(t),RJe=r(Kve," \u2014 "),Yk=n(Kve,"A",{href:!0});var Mkr=s(Yk);SJe=r(Mkr,"PoolFormerFeatureExtractor"),Mkr.forEach(t),PJe=r(Kve," (PoolFormer model)"),Kve.forEach(t),$Je=i(de),rh=n(de,"LI",{});var Zve=s(rh);MU=n(Zve,"STRONG",{});var Ekr=s(MU);IJe=r(Ekr,"segformer"),Ekr.forEach(t),jJe=r(Zve," \u2014 "),Kk=n(Zve,"A",{href:!0});var ykr=s(Kk);NJe=r(ykr,"SegformerFeatureExtractor"),ykr.forEach(t),DJe=r(Zve," (SegFormer model)"),Zve.forEach(t),qJe=i(de),th=n(de,"LI",{});var eTe=s(th);EU=n(eTe,"STRONG",{});var wkr=s(EU);GJe=r(wkr,"speech_to_text"),wkr.forEach(t),OJe=r(eTe," \u2014 "),Zk=n(eTe,"A",{href:!0});var Akr=s(Zk);XJe=r(Akr,"Speech2TextFeatureExtractor"),Akr.forEach(t),zJe=r(eTe," (Speech2Text model)"),eTe.forEach(t),VJe=i(de),ah=n(de,"LI",{});var oTe=s(ah);yU=n(oTe,"STRONG",{});var Lkr=s(yU);WJe=r(Lkr,"swin"),Lkr.forEach(t),QJe=r(oTe," \u2014 "),ex=n(oTe,"A",{href:!0});var Bkr=s(ex);HJe=r(Bkr,"ViTFeatureExtractor"),Bkr.forEach(t),UJe=r(oTe," (Swin model)"),oTe.forEach(t),JJe=i(de),nh=n(de,"LI",{});var rTe=s(nh);wU=n(rTe,"STRONG",{});var kkr=s(wU);YJe=r(kkr,"vit"),kkr.forEach(t),KJe=r(rTe," \u2014 "),ox=n(rTe,"A",{href:!0});var xkr=s(ox);ZJe=r(xkr,"ViTFeatureExtractor"),xkr.forEach(t),eYe=r(rTe," (ViT model)"),rTe.forEach(t),oYe=i(de),sh=n(de,"LI",{});var tTe=s(sh);AU=n(tTe,"STRONG",{});var Rkr=s(AU);rYe=r(Rkr,"vit_mae"),Rkr.forEach(t),tYe=r(tTe," \u2014 "),rx=n(tTe,"A",{href:!0});var Skr=s(rx);aYe=r(Skr,"ViTFeatureExtractor"),Skr.forEach(t),nYe=r(tTe," (ViTMAE model)"),tTe.forEach(t),sYe=i(de),lh=n(de,"LI",{});var aTe=s(lh);LU=n(aTe,"STRONG",{});var Pkr=s(LU);lYe=r(Pkr,"wav2vec2"),Pkr.forEach(t),iYe=r(aTe," \u2014 "),tx=n(aTe,"A",{href:!0});var $kr=s(tx);dYe=r($kr,"Wav2Vec2FeatureExtractor"),$kr.forEach(t),cYe=r(aTe," (Wav2Vec2 model)"),aTe.forEach(t),de.forEach(t),fYe=i(xt),m(ih.$$.fragment,xt),mYe=i(xt),BU=n(xt,"P",{});var Ikr=s(BU);gYe=r(Ikr,"Examples:"),Ikr.forEach(t),hYe=i(xt),m(wM.$$.fragment,xt),xt.forEach(t),pYe=i(Is),dh=n(Is,"DIV",{class:!0});var bBe=s(dh);m(AM.$$.fragment,bBe),_Ye=i(bBe),kU=n(bBe,"P",{});var jkr=s(kU);uYe=r(jkr,"Register a new feature extractor for this class."),jkr.forEach(t),bBe.forEach(t),Is.forEach(t),hLe=i(d),Ni=n(d,"H2",{class:!0});var vBe=s(Ni);ch=n(vBe,"A",{id:!0,class:!0,href:!0});var Nkr=s(ch);xU=n(Nkr,"SPAN",{});var Dkr=s(xU);m(LM.$$.fragment,Dkr),Dkr.forEach(t),Nkr.forEach(t),bYe=i(vBe),RU=n(vBe,"SPAN",{});var qkr=s(RU);vYe=r(qkr,"AutoProcessor"),qkr.forEach(t),vBe.forEach(t),pLe=i(d),zo=n(d,"DIV",{class:!0});var js=s(zo);m(BM.$$.fragment,js),TYe=i(js),kM=n(js,"P",{});var TBe=s(kM);FYe=r(TBe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),ax=n(TBe,"A",{href:!0});var Gkr=s(ax);CYe=r(Gkr,"AutoProcessor.from_pretrained()"),Gkr.forEach(t),MYe=r(TBe," class method."),TBe.forEach(t),EYe=i(js),xM=n(js,"P",{});var FBe=s(xM);yYe=r(FBe,"This class cannot be instantiated directly using "),SU=n(FBe,"CODE",{});var Okr=s(SU);wYe=r(Okr,"__init__()"),Okr.forEach(t),AYe=r(FBe," (throws an error)."),FBe.forEach(t),LYe=i(js),Be=n(js,"DIV",{class:!0});var Rt=s(Be);m(RM.$$.fragment,Rt),BYe=i(Rt),PU=n(Rt,"P",{});var Xkr=s(PU);kYe=r(Xkr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Xkr.forEach(t),xYe=i(Rt),Di=n(Rt,"P",{});var VX=s(Di);RYe=r(VX,"The processor class to instantiate is selected based on the "),$U=n(VX,"CODE",{});var zkr=s($U);SYe=r(zkr,"model_type"),zkr.forEach(t),PYe=r(VX,` property of the config object (either
passed as an argument or loaded from `),IU=n(VX,"CODE",{});var Vkr=s(IU);$Ye=r(Vkr,"pretrained_model_name_or_path"),Vkr.forEach(t),IYe=r(VX," if possible):"),VX.forEach(t),jYe=i(Rt),we=n(Rt,"UL",{});var No=s(we);fh=n(No,"LI",{});var nTe=s(fh);jU=n(nTe,"STRONG",{});var Wkr=s(jU);NYe=r(Wkr,"clip"),Wkr.forEach(t),DYe=r(nTe," \u2014 "),nx=n(nTe,"A",{href:!0});var Qkr=s(nx);qYe=r(Qkr,"CLIPProcessor"),Qkr.forEach(t),GYe=r(nTe," (CLIP model)"),nTe.forEach(t),OYe=i(No),mh=n(No,"LI",{});var sTe=s(mh);NU=n(sTe,"STRONG",{});var Hkr=s(NU);XYe=r(Hkr,"layoutlmv2"),Hkr.forEach(t),zYe=r(sTe," \u2014 "),sx=n(sTe,"A",{href:!0});var Ukr=s(sx);VYe=r(Ukr,"LayoutLMv2Processor"),Ukr.forEach(t),WYe=r(sTe," (LayoutLMv2 model)"),sTe.forEach(t),QYe=i(No),gh=n(No,"LI",{});var lTe=s(gh);DU=n(lTe,"STRONG",{});var Jkr=s(DU);HYe=r(Jkr,"layoutxlm"),Jkr.forEach(t),UYe=r(lTe," \u2014 "),lx=n(lTe,"A",{href:!0});var Ykr=s(lx);JYe=r(Ykr,"LayoutXLMProcessor"),Ykr.forEach(t),YYe=r(lTe," (LayoutXLM model)"),lTe.forEach(t),KYe=i(No),hh=n(No,"LI",{});var iTe=s(hh);qU=n(iTe,"STRONG",{});var Kkr=s(qU);ZYe=r(Kkr,"speech_to_text"),Kkr.forEach(t),eKe=r(iTe," \u2014 "),ix=n(iTe,"A",{href:!0});var Zkr=s(ix);oKe=r(Zkr,"Speech2TextProcessor"),Zkr.forEach(t),rKe=r(iTe," (Speech2Text model)"),iTe.forEach(t),tKe=i(No),ph=n(No,"LI",{});var dTe=s(ph);GU=n(dTe,"STRONG",{});var exr=s(GU);aKe=r(exr,"speech_to_text_2"),exr.forEach(t),nKe=r(dTe," \u2014 "),dx=n(dTe,"A",{href:!0});var oxr=s(dx);sKe=r(oxr,"Speech2Text2Processor"),oxr.forEach(t),lKe=r(dTe," (Speech2Text2 model)"),dTe.forEach(t),iKe=i(No),_h=n(No,"LI",{});var cTe=s(_h);OU=n(cTe,"STRONG",{});var rxr=s(OU);dKe=r(rxr,"trocr"),rxr.forEach(t),cKe=r(cTe," \u2014 "),cx=n(cTe,"A",{href:!0});var txr=s(cx);fKe=r(txr,"TrOCRProcessor"),txr.forEach(t),mKe=r(cTe," (TrOCR model)"),cTe.forEach(t),gKe=i(No),uh=n(No,"LI",{});var fTe=s(uh);XU=n(fTe,"STRONG",{});var axr=s(XU);hKe=r(axr,"vision-text-dual-encoder"),axr.forEach(t),pKe=r(fTe," \u2014 "),fx=n(fTe,"A",{href:!0});var nxr=s(fx);_Ke=r(nxr,"VisionTextDualEncoderProcessor"),nxr.forEach(t),uKe=r(fTe," (VisionTextDualEncoder model)"),fTe.forEach(t),bKe=i(No),bh=n(No,"LI",{});var mTe=s(bh);zU=n(mTe,"STRONG",{});var sxr=s(zU);vKe=r(sxr,"wav2vec2"),sxr.forEach(t),TKe=r(mTe," \u2014 "),mx=n(mTe,"A",{href:!0});var lxr=s(mx);FKe=r(lxr,"Wav2Vec2Processor"),lxr.forEach(t),CKe=r(mTe," (Wav2Vec2 model)"),mTe.forEach(t),No.forEach(t),MKe=i(Rt),m(vh.$$.fragment,Rt),EKe=i(Rt),VU=n(Rt,"P",{});var ixr=s(VU);yKe=r(ixr,"Examples:"),ixr.forEach(t),wKe=i(Rt),m(SM.$$.fragment,Rt),Rt.forEach(t),AKe=i(js),Th=n(js,"DIV",{class:!0});var CBe=s(Th);m(PM.$$.fragment,CBe),LKe=i(CBe),WU=n(CBe,"P",{});var dxr=s(WU);BKe=r(dxr,"Register a new processor for this class."),dxr.forEach(t),CBe.forEach(t),js.forEach(t),_Le=i(d),qi=n(d,"H2",{class:!0});var MBe=s(qi);Fh=n(MBe,"A",{id:!0,class:!0,href:!0});var cxr=s(Fh);QU=n(cxr,"SPAN",{});var fxr=s(QU);m($M.$$.fragment,fxr),fxr.forEach(t),cxr.forEach(t),kKe=i(MBe),HU=n(MBe,"SPAN",{});var mxr=s(HU);xKe=r(mxr,"AutoModel"),mxr.forEach(t),MBe.forEach(t),uLe=i(d),Vo=n(d,"DIV",{class:!0});var Ns=s(Vo);m(IM.$$.fragment,Ns),RKe=i(Ns),Gi=n(Ns,"P",{});var WX=s(Gi);SKe=r(WX,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UU=n(WX,"CODE",{});var gxr=s(UU);PKe=r(gxr,"from_pretrained()"),gxr.forEach(t),$Ke=r(WX,"class method or the "),JU=n(WX,"CODE",{});var hxr=s(JU);IKe=r(hxr,"from_config()"),hxr.forEach(t),jKe=r(WX,`class
method.`),WX.forEach(t),NKe=i(Ns),jM=n(Ns,"P",{});var EBe=s(jM);DKe=r(EBe,"This class cannot be instantiated directly using "),YU=n(EBe,"CODE",{});var pxr=s(YU);qKe=r(pxr,"__init__()"),pxr.forEach(t),GKe=r(EBe," (throws an error)."),EBe.forEach(t),OKe=i(Ns),Nr=n(Ns,"DIV",{class:!0});var Ds=s(Nr);m(NM.$$.fragment,Ds),XKe=i(Ds),KU=n(Ds,"P",{});var _xr=s(KU);zKe=r(_xr,"Instantiates one of the base model classes of the library from a configuration."),_xr.forEach(t),VKe=i(Ds),Oi=n(Ds,"P",{});var QX=s(Oi);WKe=r(QX,`Note:
Loading a model from its configuration file does `),ZU=n(QX,"STRONG",{});var uxr=s(ZU);QKe=r(uxr,"not"),uxr.forEach(t),HKe=r(QX,` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=n(QX,"CODE",{});var bxr=s(eJ);UKe=r(bxr,"from_pretrained()"),bxr.forEach(t),JKe=r(QX,"to load the model weights."),QX.forEach(t),YKe=i(Ds),oJ=n(Ds,"P",{});var vxr=s(oJ);KKe=r(vxr,"Examples:"),vxr.forEach(t),ZKe=i(Ds),m(DM.$$.fragment,Ds),Ds.forEach(t),eZe=i(Ns),ke=n(Ns,"DIV",{class:!0});var St=s(ke);m(qM.$$.fragment,St),oZe=i(St),rJ=n(St,"P",{});var Txr=s(rJ);rZe=r(Txr,"Instantiate one of the base model classes of the library from a pretrained model."),Txr.forEach(t),tZe=i(St),Da=n(St,"P",{});var lC=s(Da);aZe=r(lC,"The model class to instantiate is selected based on the "),tJ=n(lC,"CODE",{});var Fxr=s(tJ);nZe=r(Fxr,"model_type"),Fxr.forEach(t),sZe=r(lC,` property of the config object (either
passed as an argument or loaded from `),aJ=n(lC,"CODE",{});var Cxr=s(aJ);lZe=r(Cxr,"pretrained_model_name_or_path"),Cxr.forEach(t),iZe=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nJ=n(lC,"CODE",{});var Mxr=s(nJ);dZe=r(Mxr,"pretrained_model_name_or_path"),Mxr.forEach(t),cZe=r(lC,":"),lC.forEach(t),fZe=i(St),F=n(St,"UL",{});var C=s(F);Ch=n(C,"LI",{});var gTe=s(Ch);sJ=n(gTe,"STRONG",{});var Exr=s(sJ);mZe=r(Exr,"albert"),Exr.forEach(t),gZe=r(gTe," \u2014 "),gx=n(gTe,"A",{href:!0});var yxr=s(gx);hZe=r(yxr,"AlbertModel"),yxr.forEach(t),pZe=r(gTe," (ALBERT model)"),gTe.forEach(t),_Ze=i(C),Mh=n(C,"LI",{});var hTe=s(Mh);lJ=n(hTe,"STRONG",{});var wxr=s(lJ);uZe=r(wxr,"bart"),wxr.forEach(t),bZe=r(hTe," \u2014 "),hx=n(hTe,"A",{href:!0});var Axr=s(hx);vZe=r(Axr,"BartModel"),Axr.forEach(t),TZe=r(hTe," (BART model)"),hTe.forEach(t),FZe=i(C),Eh=n(C,"LI",{});var pTe=s(Eh);iJ=n(pTe,"STRONG",{});var Lxr=s(iJ);CZe=r(Lxr,"beit"),Lxr.forEach(t),MZe=r(pTe," \u2014 "),px=n(pTe,"A",{href:!0});var Bxr=s(px);EZe=r(Bxr,"BeitModel"),Bxr.forEach(t),yZe=r(pTe," (BEiT model)"),pTe.forEach(t),wZe=i(C),yh=n(C,"LI",{});var _Te=s(yh);dJ=n(_Te,"STRONG",{});var kxr=s(dJ);AZe=r(kxr,"bert"),kxr.forEach(t),LZe=r(_Te," \u2014 "),_x=n(_Te,"A",{href:!0});var xxr=s(_x);BZe=r(xxr,"BertModel"),xxr.forEach(t),kZe=r(_Te," (BERT model)"),_Te.forEach(t),xZe=i(C),wh=n(C,"LI",{});var uTe=s(wh);cJ=n(uTe,"STRONG",{});var Rxr=s(cJ);RZe=r(Rxr,"bert-generation"),Rxr.forEach(t),SZe=r(uTe," \u2014 "),ux=n(uTe,"A",{href:!0});var Sxr=s(ux);PZe=r(Sxr,"BertGenerationEncoder"),Sxr.forEach(t),$Ze=r(uTe," (Bert Generation model)"),uTe.forEach(t),IZe=i(C),Ah=n(C,"LI",{});var bTe=s(Ah);fJ=n(bTe,"STRONG",{});var Pxr=s(fJ);jZe=r(Pxr,"big_bird"),Pxr.forEach(t),NZe=r(bTe," \u2014 "),bx=n(bTe,"A",{href:!0});var $xr=s(bx);DZe=r($xr,"BigBirdModel"),$xr.forEach(t),qZe=r(bTe," (BigBird model)"),bTe.forEach(t),GZe=i(C),Lh=n(C,"LI",{});var vTe=s(Lh);mJ=n(vTe,"STRONG",{});var Ixr=s(mJ);OZe=r(Ixr,"bigbird_pegasus"),Ixr.forEach(t),XZe=r(vTe," \u2014 "),vx=n(vTe,"A",{href:!0});var jxr=s(vx);zZe=r(jxr,"BigBirdPegasusModel"),jxr.forEach(t),VZe=r(vTe," (BigBirdPegasus model)"),vTe.forEach(t),WZe=i(C),Bh=n(C,"LI",{});var TTe=s(Bh);gJ=n(TTe,"STRONG",{});var Nxr=s(gJ);QZe=r(Nxr,"blenderbot"),Nxr.forEach(t),HZe=r(TTe," \u2014 "),Tx=n(TTe,"A",{href:!0});var Dxr=s(Tx);UZe=r(Dxr,"BlenderbotModel"),Dxr.forEach(t),JZe=r(TTe," (Blenderbot model)"),TTe.forEach(t),YZe=i(C),kh=n(C,"LI",{});var FTe=s(kh);hJ=n(FTe,"STRONG",{});var qxr=s(hJ);KZe=r(qxr,"blenderbot-small"),qxr.forEach(t),ZZe=r(FTe," \u2014 "),Fx=n(FTe,"A",{href:!0});var Gxr=s(Fx);eeo=r(Gxr,"BlenderbotSmallModel"),Gxr.forEach(t),oeo=r(FTe," (BlenderbotSmall model)"),FTe.forEach(t),reo=i(C),xh=n(C,"LI",{});var CTe=s(xh);pJ=n(CTe,"STRONG",{});var Oxr=s(pJ);teo=r(Oxr,"camembert"),Oxr.forEach(t),aeo=r(CTe," \u2014 "),Cx=n(CTe,"A",{href:!0});var Xxr=s(Cx);neo=r(Xxr,"CamembertModel"),Xxr.forEach(t),seo=r(CTe," (CamemBERT model)"),CTe.forEach(t),leo=i(C),Rh=n(C,"LI",{});var MTe=s(Rh);_J=n(MTe,"STRONG",{});var zxr=s(_J);ieo=r(zxr,"canine"),zxr.forEach(t),deo=r(MTe," \u2014 "),Mx=n(MTe,"A",{href:!0});var Vxr=s(Mx);ceo=r(Vxr,"CanineModel"),Vxr.forEach(t),feo=r(MTe," (Canine model)"),MTe.forEach(t),meo=i(C),Sh=n(C,"LI",{});var ETe=s(Sh);uJ=n(ETe,"STRONG",{});var Wxr=s(uJ);geo=r(Wxr,"clip"),Wxr.forEach(t),heo=r(ETe," \u2014 "),Ex=n(ETe,"A",{href:!0});var Qxr=s(Ex);peo=r(Qxr,"CLIPModel"),Qxr.forEach(t),_eo=r(ETe," (CLIP model)"),ETe.forEach(t),ueo=i(C),Ph=n(C,"LI",{});var yTe=s(Ph);bJ=n(yTe,"STRONG",{});var Hxr=s(bJ);beo=r(Hxr,"convbert"),Hxr.forEach(t),veo=r(yTe," \u2014 "),yx=n(yTe,"A",{href:!0});var Uxr=s(yx);Teo=r(Uxr,"ConvBertModel"),Uxr.forEach(t),Feo=r(yTe," (ConvBERT model)"),yTe.forEach(t),Ceo=i(C),$h=n(C,"LI",{});var wTe=s($h);vJ=n(wTe,"STRONG",{});var Jxr=s(vJ);Meo=r(Jxr,"convnext"),Jxr.forEach(t),Eeo=r(wTe," \u2014 "),wx=n(wTe,"A",{href:!0});var Yxr=s(wx);yeo=r(Yxr,"ConvNextModel"),Yxr.forEach(t),weo=r(wTe," (ConvNext model)"),wTe.forEach(t),Aeo=i(C),Ih=n(C,"LI",{});var ATe=s(Ih);TJ=n(ATe,"STRONG",{});var Kxr=s(TJ);Leo=r(Kxr,"ctrl"),Kxr.forEach(t),Beo=r(ATe," \u2014 "),Ax=n(ATe,"A",{href:!0});var Zxr=s(Ax);keo=r(Zxr,"CTRLModel"),Zxr.forEach(t),xeo=r(ATe," (CTRL model)"),ATe.forEach(t),Reo=i(C),jh=n(C,"LI",{});var LTe=s(jh);FJ=n(LTe,"STRONG",{});var eRr=s(FJ);Seo=r(eRr,"deberta"),eRr.forEach(t),Peo=r(LTe," \u2014 "),Lx=n(LTe,"A",{href:!0});var oRr=s(Lx);$eo=r(oRr,"DebertaModel"),oRr.forEach(t),Ieo=r(LTe," (DeBERTa model)"),LTe.forEach(t),jeo=i(C),Nh=n(C,"LI",{});var BTe=s(Nh);CJ=n(BTe,"STRONG",{});var rRr=s(CJ);Neo=r(rRr,"deberta-v2"),rRr.forEach(t),Deo=r(BTe," \u2014 "),Bx=n(BTe,"A",{href:!0});var tRr=s(Bx);qeo=r(tRr,"DebertaV2Model"),tRr.forEach(t),Geo=r(BTe," (DeBERTa-v2 model)"),BTe.forEach(t),Oeo=i(C),Dh=n(C,"LI",{});var kTe=s(Dh);MJ=n(kTe,"STRONG",{});var aRr=s(MJ);Xeo=r(aRr,"deit"),aRr.forEach(t),zeo=r(kTe," \u2014 "),kx=n(kTe,"A",{href:!0});var nRr=s(kx);Veo=r(nRr,"DeiTModel"),nRr.forEach(t),Weo=r(kTe," (DeiT model)"),kTe.forEach(t),Qeo=i(C),qh=n(C,"LI",{});var xTe=s(qh);EJ=n(xTe,"STRONG",{});var sRr=s(EJ);Heo=r(sRr,"detr"),sRr.forEach(t),Ueo=r(xTe," \u2014 "),xx=n(xTe,"A",{href:!0});var lRr=s(xx);Jeo=r(lRr,"DetrModel"),lRr.forEach(t),Yeo=r(xTe," (DETR model)"),xTe.forEach(t),Keo=i(C),Gh=n(C,"LI",{});var RTe=s(Gh);yJ=n(RTe,"STRONG",{});var iRr=s(yJ);Zeo=r(iRr,"distilbert"),iRr.forEach(t),eoo=r(RTe," \u2014 "),Rx=n(RTe,"A",{href:!0});var dRr=s(Rx);ooo=r(dRr,"DistilBertModel"),dRr.forEach(t),roo=r(RTe," (DistilBERT model)"),RTe.forEach(t),too=i(C),Oh=n(C,"LI",{});var STe=s(Oh);wJ=n(STe,"STRONG",{});var cRr=s(wJ);aoo=r(cRr,"dpr"),cRr.forEach(t),noo=r(STe," \u2014 "),Sx=n(STe,"A",{href:!0});var fRr=s(Sx);soo=r(fRr,"DPRQuestionEncoder"),fRr.forEach(t),loo=r(STe," (DPR model)"),STe.forEach(t),ioo=i(C),Xh=n(C,"LI",{});var PTe=s(Xh);AJ=n(PTe,"STRONG",{});var mRr=s(AJ);doo=r(mRr,"electra"),mRr.forEach(t),coo=r(PTe," \u2014 "),Px=n(PTe,"A",{href:!0});var gRr=s(Px);foo=r(gRr,"ElectraModel"),gRr.forEach(t),moo=r(PTe," (ELECTRA model)"),PTe.forEach(t),goo=i(C),zh=n(C,"LI",{});var $Te=s(zh);LJ=n($Te,"STRONG",{});var hRr=s(LJ);hoo=r(hRr,"flaubert"),hRr.forEach(t),poo=r($Te," \u2014 "),$x=n($Te,"A",{href:!0});var pRr=s($x);_oo=r(pRr,"FlaubertModel"),pRr.forEach(t),uoo=r($Te," (FlauBERT model)"),$Te.forEach(t),boo=i(C),Vh=n(C,"LI",{});var ITe=s(Vh);BJ=n(ITe,"STRONG",{});var _Rr=s(BJ);voo=r(_Rr,"fnet"),_Rr.forEach(t),Too=r(ITe," \u2014 "),Ix=n(ITe,"A",{href:!0});var uRr=s(Ix);Foo=r(uRr,"FNetModel"),uRr.forEach(t),Coo=r(ITe," (FNet model)"),ITe.forEach(t),Moo=i(C),Wh=n(C,"LI",{});var jTe=s(Wh);kJ=n(jTe,"STRONG",{});var bRr=s(kJ);Eoo=r(bRr,"fsmt"),bRr.forEach(t),yoo=r(jTe," \u2014 "),jx=n(jTe,"A",{href:!0});var vRr=s(jx);woo=r(vRr,"FSMTModel"),vRr.forEach(t),Aoo=r(jTe," (FairSeq Machine-Translation model)"),jTe.forEach(t),Loo=i(C),xs=n(C,"LI",{});var I0=s(xs);xJ=n(I0,"STRONG",{});var TRr=s(xJ);Boo=r(TRr,"funnel"),TRr.forEach(t),koo=r(I0," \u2014 "),Nx=n(I0,"A",{href:!0});var FRr=s(Nx);xoo=r(FRr,"FunnelModel"),FRr.forEach(t),Roo=r(I0," or "),Dx=n(I0,"A",{href:!0});var CRr=s(Dx);Soo=r(CRr,"FunnelBaseModel"),CRr.forEach(t),Poo=r(I0," (Funnel Transformer model)"),I0.forEach(t),$oo=i(C),Qh=n(C,"LI",{});var NTe=s(Qh);RJ=n(NTe,"STRONG",{});var MRr=s(RJ);Ioo=r(MRr,"gpt2"),MRr.forEach(t),joo=r(NTe," \u2014 "),qx=n(NTe,"A",{href:!0});var ERr=s(qx);Noo=r(ERr,"GPT2Model"),ERr.forEach(t),Doo=r(NTe," (OpenAI GPT-2 model)"),NTe.forEach(t),qoo=i(C),Hh=n(C,"LI",{});var DTe=s(Hh);SJ=n(DTe,"STRONG",{});var yRr=s(SJ);Goo=r(yRr,"gpt_neo"),yRr.forEach(t),Ooo=r(DTe," \u2014 "),Gx=n(DTe,"A",{href:!0});var wRr=s(Gx);Xoo=r(wRr,"GPTNeoModel"),wRr.forEach(t),zoo=r(DTe," (GPT Neo model)"),DTe.forEach(t),Voo=i(C),Uh=n(C,"LI",{});var qTe=s(Uh);PJ=n(qTe,"STRONG",{});var ARr=s(PJ);Woo=r(ARr,"gptj"),ARr.forEach(t),Qoo=r(qTe," \u2014 "),Ox=n(qTe,"A",{href:!0});var LRr=s(Ox);Hoo=r(LRr,"GPTJModel"),LRr.forEach(t),Uoo=r(qTe," (GPT-J model)"),qTe.forEach(t),Joo=i(C),Jh=n(C,"LI",{});var GTe=s(Jh);$J=n(GTe,"STRONG",{});var BRr=s($J);Yoo=r(BRr,"hubert"),BRr.forEach(t),Koo=r(GTe," \u2014 "),Xx=n(GTe,"A",{href:!0});var kRr=s(Xx);Zoo=r(kRr,"HubertModel"),kRr.forEach(t),ero=r(GTe," (Hubert model)"),GTe.forEach(t),oro=i(C),Yh=n(C,"LI",{});var OTe=s(Yh);IJ=n(OTe,"STRONG",{});var xRr=s(IJ);rro=r(xRr,"ibert"),xRr.forEach(t),tro=r(OTe," \u2014 "),zx=n(OTe,"A",{href:!0});var RRr=s(zx);aro=r(RRr,"IBertModel"),RRr.forEach(t),nro=r(OTe," (I-BERT model)"),OTe.forEach(t),sro=i(C),Kh=n(C,"LI",{});var XTe=s(Kh);jJ=n(XTe,"STRONG",{});var SRr=s(jJ);lro=r(SRr,"imagegpt"),SRr.forEach(t),iro=r(XTe," \u2014 "),Vx=n(XTe,"A",{href:!0});var PRr=s(Vx);dro=r(PRr,"ImageGPTModel"),PRr.forEach(t),cro=r(XTe," (ImageGPT model)"),XTe.forEach(t),fro=i(C),Zh=n(C,"LI",{});var zTe=s(Zh);NJ=n(zTe,"STRONG",{});var $Rr=s(NJ);mro=r($Rr,"layoutlm"),$Rr.forEach(t),gro=r(zTe," \u2014 "),Wx=n(zTe,"A",{href:!0});var IRr=s(Wx);hro=r(IRr,"LayoutLMModel"),IRr.forEach(t),pro=r(zTe," (LayoutLM model)"),zTe.forEach(t),_ro=i(C),ep=n(C,"LI",{});var VTe=s(ep);DJ=n(VTe,"STRONG",{});var jRr=s(DJ);uro=r(jRr,"layoutlmv2"),jRr.forEach(t),bro=r(VTe," \u2014 "),Qx=n(VTe,"A",{href:!0});var NRr=s(Qx);vro=r(NRr,"LayoutLMv2Model"),NRr.forEach(t),Tro=r(VTe," (LayoutLMv2 model)"),VTe.forEach(t),Fro=i(C),op=n(C,"LI",{});var WTe=s(op);qJ=n(WTe,"STRONG",{});var DRr=s(qJ);Cro=r(DRr,"led"),DRr.forEach(t),Mro=r(WTe," \u2014 "),Hx=n(WTe,"A",{href:!0});var qRr=s(Hx);Ero=r(qRr,"LEDModel"),qRr.forEach(t),yro=r(WTe," (LED model)"),WTe.forEach(t),wro=i(C),rp=n(C,"LI",{});var QTe=s(rp);GJ=n(QTe,"STRONG",{});var GRr=s(GJ);Aro=r(GRr,"longformer"),GRr.forEach(t),Lro=r(QTe," \u2014 "),Ux=n(QTe,"A",{href:!0});var ORr=s(Ux);Bro=r(ORr,"LongformerModel"),ORr.forEach(t),kro=r(QTe," (Longformer model)"),QTe.forEach(t),xro=i(C),tp=n(C,"LI",{});var HTe=s(tp);OJ=n(HTe,"STRONG",{});var XRr=s(OJ);Rro=r(XRr,"luke"),XRr.forEach(t),Sro=r(HTe," \u2014 "),Jx=n(HTe,"A",{href:!0});var zRr=s(Jx);Pro=r(zRr,"LukeModel"),zRr.forEach(t),$ro=r(HTe," (LUKE model)"),HTe.forEach(t),Iro=i(C),ap=n(C,"LI",{});var UTe=s(ap);XJ=n(UTe,"STRONG",{});var VRr=s(XJ);jro=r(VRr,"lxmert"),VRr.forEach(t),Nro=r(UTe," \u2014 "),Yx=n(UTe,"A",{href:!0});var WRr=s(Yx);Dro=r(WRr,"LxmertModel"),WRr.forEach(t),qro=r(UTe," (LXMERT model)"),UTe.forEach(t),Gro=i(C),np=n(C,"LI",{});var JTe=s(np);zJ=n(JTe,"STRONG",{});var QRr=s(zJ);Oro=r(QRr,"m2m_100"),QRr.forEach(t),Xro=r(JTe," \u2014 "),Kx=n(JTe,"A",{href:!0});var HRr=s(Kx);zro=r(HRr,"M2M100Model"),HRr.forEach(t),Vro=r(JTe," (M2M100 model)"),JTe.forEach(t),Wro=i(C),sp=n(C,"LI",{});var YTe=s(sp);VJ=n(YTe,"STRONG",{});var URr=s(VJ);Qro=r(URr,"marian"),URr.forEach(t),Hro=r(YTe," \u2014 "),Zx=n(YTe,"A",{href:!0});var JRr=s(Zx);Uro=r(JRr,"MarianModel"),JRr.forEach(t),Jro=r(YTe," (Marian model)"),YTe.forEach(t),Yro=i(C),lp=n(C,"LI",{});var KTe=s(lp);WJ=n(KTe,"STRONG",{});var YRr=s(WJ);Kro=r(YRr,"mbart"),YRr.forEach(t),Zro=r(KTe," \u2014 "),eR=n(KTe,"A",{href:!0});var KRr=s(eR);eto=r(KRr,"MBartModel"),KRr.forEach(t),oto=r(KTe," (mBART model)"),KTe.forEach(t),rto=i(C),ip=n(C,"LI",{});var ZTe=s(ip);QJ=n(ZTe,"STRONG",{});var ZRr=s(QJ);tto=r(ZRr,"megatron-bert"),ZRr.forEach(t),ato=r(ZTe," \u2014 "),oR=n(ZTe,"A",{href:!0});var eSr=s(oR);nto=r(eSr,"MegatronBertModel"),eSr.forEach(t),sto=r(ZTe," (MegatronBert model)"),ZTe.forEach(t),lto=i(C),dp=n(C,"LI",{});var e7e=s(dp);HJ=n(e7e,"STRONG",{});var oSr=s(HJ);ito=r(oSr,"mobilebert"),oSr.forEach(t),dto=r(e7e," \u2014 "),rR=n(e7e,"A",{href:!0});var rSr=s(rR);cto=r(rSr,"MobileBertModel"),rSr.forEach(t),fto=r(e7e," (MobileBERT model)"),e7e.forEach(t),mto=i(C),cp=n(C,"LI",{});var o7e=s(cp);UJ=n(o7e,"STRONG",{});var tSr=s(UJ);gto=r(tSr,"mpnet"),tSr.forEach(t),hto=r(o7e," \u2014 "),tR=n(o7e,"A",{href:!0});var aSr=s(tR);pto=r(aSr,"MPNetModel"),aSr.forEach(t),_to=r(o7e," (MPNet model)"),o7e.forEach(t),uto=i(C),fp=n(C,"LI",{});var r7e=s(fp);JJ=n(r7e,"STRONG",{});var nSr=s(JJ);bto=r(nSr,"mt5"),nSr.forEach(t),vto=r(r7e," \u2014 "),aR=n(r7e,"A",{href:!0});var sSr=s(aR);Tto=r(sSr,"MT5Model"),sSr.forEach(t),Fto=r(r7e," (mT5 model)"),r7e.forEach(t),Cto=i(C),mp=n(C,"LI",{});var t7e=s(mp);YJ=n(t7e,"STRONG",{});var lSr=s(YJ);Mto=r(lSr,"nystromformer"),lSr.forEach(t),Eto=r(t7e," \u2014 "),nR=n(t7e,"A",{href:!0});var iSr=s(nR);yto=r(iSr,"NystromformerModel"),iSr.forEach(t),wto=r(t7e," (Nystromformer model)"),t7e.forEach(t),Ato=i(C),gp=n(C,"LI",{});var a7e=s(gp);KJ=n(a7e,"STRONG",{});var dSr=s(KJ);Lto=r(dSr,"openai-gpt"),dSr.forEach(t),Bto=r(a7e," \u2014 "),sR=n(a7e,"A",{href:!0});var cSr=s(sR);kto=r(cSr,"OpenAIGPTModel"),cSr.forEach(t),xto=r(a7e," (OpenAI GPT model)"),a7e.forEach(t),Rto=i(C),hp=n(C,"LI",{});var n7e=s(hp);ZJ=n(n7e,"STRONG",{});var fSr=s(ZJ);Sto=r(fSr,"pegasus"),fSr.forEach(t),Pto=r(n7e," \u2014 "),lR=n(n7e,"A",{href:!0});var mSr=s(lR);$to=r(mSr,"PegasusModel"),mSr.forEach(t),Ito=r(n7e," (Pegasus model)"),n7e.forEach(t),jto=i(C),pp=n(C,"LI",{});var s7e=s(pp);eY=n(s7e,"STRONG",{});var gSr=s(eY);Nto=r(gSr,"perceiver"),gSr.forEach(t),Dto=r(s7e," \u2014 "),iR=n(s7e,"A",{href:!0});var hSr=s(iR);qto=r(hSr,"PerceiverModel"),hSr.forEach(t),Gto=r(s7e," (Perceiver model)"),s7e.forEach(t),Oto=i(C),_p=n(C,"LI",{});var l7e=s(_p);oY=n(l7e,"STRONG",{});var pSr=s(oY);Xto=r(pSr,"plbart"),pSr.forEach(t),zto=r(l7e," \u2014 "),dR=n(l7e,"A",{href:!0});var _Sr=s(dR);Vto=r(_Sr,"PLBartModel"),_Sr.forEach(t),Wto=r(l7e," (PLBart model)"),l7e.forEach(t),Qto=i(C),up=n(C,"LI",{});var i7e=s(up);rY=n(i7e,"STRONG",{});var uSr=s(rY);Hto=r(uSr,"poolformer"),uSr.forEach(t),Uto=r(i7e," \u2014 "),cR=n(i7e,"A",{href:!0});var bSr=s(cR);Jto=r(bSr,"PoolFormerModel"),bSr.forEach(t),Yto=r(i7e," (PoolFormer model)"),i7e.forEach(t),Kto=i(C),bp=n(C,"LI",{});var d7e=s(bp);tY=n(d7e,"STRONG",{});var vSr=s(tY);Zto=r(vSr,"prophetnet"),vSr.forEach(t),eao=r(d7e," \u2014 "),fR=n(d7e,"A",{href:!0});var TSr=s(fR);oao=r(TSr,"ProphetNetModel"),TSr.forEach(t),rao=r(d7e," (ProphetNet model)"),d7e.forEach(t),tao=i(C),vp=n(C,"LI",{});var c7e=s(vp);aY=n(c7e,"STRONG",{});var FSr=s(aY);aao=r(FSr,"qdqbert"),FSr.forEach(t),nao=r(c7e," \u2014 "),mR=n(c7e,"A",{href:!0});var CSr=s(mR);sao=r(CSr,"QDQBertModel"),CSr.forEach(t),lao=r(c7e," (QDQBert model)"),c7e.forEach(t),iao=i(C),Tp=n(C,"LI",{});var f7e=s(Tp);nY=n(f7e,"STRONG",{});var MSr=s(nY);dao=r(MSr,"reformer"),MSr.forEach(t),cao=r(f7e," \u2014 "),gR=n(f7e,"A",{href:!0});var ESr=s(gR);fao=r(ESr,"ReformerModel"),ESr.forEach(t),mao=r(f7e," (Reformer model)"),f7e.forEach(t),gao=i(C),Fp=n(C,"LI",{});var m7e=s(Fp);sY=n(m7e,"STRONG",{});var ySr=s(sY);hao=r(ySr,"rembert"),ySr.forEach(t),pao=r(m7e," \u2014 "),hR=n(m7e,"A",{href:!0});var wSr=s(hR);_ao=r(wSr,"RemBertModel"),wSr.forEach(t),uao=r(m7e," (RemBERT model)"),m7e.forEach(t),bao=i(C),Cp=n(C,"LI",{});var g7e=s(Cp);lY=n(g7e,"STRONG",{});var ASr=s(lY);vao=r(ASr,"retribert"),ASr.forEach(t),Tao=r(g7e," \u2014 "),pR=n(g7e,"A",{href:!0});var LSr=s(pR);Fao=r(LSr,"RetriBertModel"),LSr.forEach(t),Cao=r(g7e," (RetriBERT model)"),g7e.forEach(t),Mao=i(C),Mp=n(C,"LI",{});var h7e=s(Mp);iY=n(h7e,"STRONG",{});var BSr=s(iY);Eao=r(BSr,"roberta"),BSr.forEach(t),yao=r(h7e," \u2014 "),_R=n(h7e,"A",{href:!0});var kSr=s(_R);wao=r(kSr,"RobertaModel"),kSr.forEach(t),Aao=r(h7e," (RoBERTa model)"),h7e.forEach(t),Lao=i(C),Ep=n(C,"LI",{});var p7e=s(Ep);dY=n(p7e,"STRONG",{});var xSr=s(dY);Bao=r(xSr,"roformer"),xSr.forEach(t),kao=r(p7e," \u2014 "),uR=n(p7e,"A",{href:!0});var RSr=s(uR);xao=r(RSr,"RoFormerModel"),RSr.forEach(t),Rao=r(p7e," (RoFormer model)"),p7e.forEach(t),Sao=i(C),yp=n(C,"LI",{});var _7e=s(yp);cY=n(_7e,"STRONG",{});var SSr=s(cY);Pao=r(SSr,"segformer"),SSr.forEach(t),$ao=r(_7e," \u2014 "),bR=n(_7e,"A",{href:!0});var PSr=s(bR);Iao=r(PSr,"SegformerModel"),PSr.forEach(t),jao=r(_7e," (SegFormer model)"),_7e.forEach(t),Nao=i(C),wp=n(C,"LI",{});var u7e=s(wp);fY=n(u7e,"STRONG",{});var $Sr=s(fY);Dao=r($Sr,"sew"),$Sr.forEach(t),qao=r(u7e," \u2014 "),vR=n(u7e,"A",{href:!0});var ISr=s(vR);Gao=r(ISr,"SEWModel"),ISr.forEach(t),Oao=r(u7e," (SEW model)"),u7e.forEach(t),Xao=i(C),Ap=n(C,"LI",{});var b7e=s(Ap);mY=n(b7e,"STRONG",{});var jSr=s(mY);zao=r(jSr,"sew-d"),jSr.forEach(t),Vao=r(b7e," \u2014 "),TR=n(b7e,"A",{href:!0});var NSr=s(TR);Wao=r(NSr,"SEWDModel"),NSr.forEach(t),Qao=r(b7e," (SEW-D model)"),b7e.forEach(t),Hao=i(C),Lp=n(C,"LI",{});var v7e=s(Lp);gY=n(v7e,"STRONG",{});var DSr=s(gY);Uao=r(DSr,"speech_to_text"),DSr.forEach(t),Jao=r(v7e," \u2014 "),FR=n(v7e,"A",{href:!0});var qSr=s(FR);Yao=r(qSr,"Speech2TextModel"),qSr.forEach(t),Kao=r(v7e," (Speech2Text model)"),v7e.forEach(t),Zao=i(C),Bp=n(C,"LI",{});var T7e=s(Bp);hY=n(T7e,"STRONG",{});var GSr=s(hY);eno=r(GSr,"splinter"),GSr.forEach(t),ono=r(T7e," \u2014 "),CR=n(T7e,"A",{href:!0});var OSr=s(CR);rno=r(OSr,"SplinterModel"),OSr.forEach(t),tno=r(T7e," (Splinter model)"),T7e.forEach(t),ano=i(C),kp=n(C,"LI",{});var F7e=s(kp);pY=n(F7e,"STRONG",{});var XSr=s(pY);nno=r(XSr,"squeezebert"),XSr.forEach(t),sno=r(F7e," \u2014 "),MR=n(F7e,"A",{href:!0});var zSr=s(MR);lno=r(zSr,"SqueezeBertModel"),zSr.forEach(t),ino=r(F7e," (SqueezeBERT model)"),F7e.forEach(t),dno=i(C),xp=n(C,"LI",{});var C7e=s(xp);_Y=n(C7e,"STRONG",{});var VSr=s(_Y);cno=r(VSr,"swin"),VSr.forEach(t),fno=r(C7e," \u2014 "),ER=n(C7e,"A",{href:!0});var WSr=s(ER);mno=r(WSr,"SwinModel"),WSr.forEach(t),gno=r(C7e," (Swin model)"),C7e.forEach(t),hno=i(C),Rp=n(C,"LI",{});var M7e=s(Rp);uY=n(M7e,"STRONG",{});var QSr=s(uY);pno=r(QSr,"t5"),QSr.forEach(t),_no=r(M7e," \u2014 "),yR=n(M7e,"A",{href:!0});var HSr=s(yR);uno=r(HSr,"T5Model"),HSr.forEach(t),bno=r(M7e," (T5 model)"),M7e.forEach(t),vno=i(C),Sp=n(C,"LI",{});var E7e=s(Sp);bY=n(E7e,"STRONG",{});var USr=s(bY);Tno=r(USr,"tapas"),USr.forEach(t),Fno=r(E7e," \u2014 "),wR=n(E7e,"A",{href:!0});var JSr=s(wR);Cno=r(JSr,"TapasModel"),JSr.forEach(t),Mno=r(E7e," (TAPAS model)"),E7e.forEach(t),Eno=i(C),Pp=n(C,"LI",{});var y7e=s(Pp);vY=n(y7e,"STRONG",{});var YSr=s(vY);yno=r(YSr,"transfo-xl"),YSr.forEach(t),wno=r(y7e," \u2014 "),AR=n(y7e,"A",{href:!0});var KSr=s(AR);Ano=r(KSr,"TransfoXLModel"),KSr.forEach(t),Lno=r(y7e," (Transformer-XL model)"),y7e.forEach(t),Bno=i(C),$p=n(C,"LI",{});var w7e=s($p);TY=n(w7e,"STRONG",{});var ZSr=s(TY);kno=r(ZSr,"unispeech"),ZSr.forEach(t),xno=r(w7e," \u2014 "),LR=n(w7e,"A",{href:!0});var ePr=s(LR);Rno=r(ePr,"UniSpeechModel"),ePr.forEach(t),Sno=r(w7e," (UniSpeech model)"),w7e.forEach(t),Pno=i(C),Ip=n(C,"LI",{});var A7e=s(Ip);FY=n(A7e,"STRONG",{});var oPr=s(FY);$no=r(oPr,"unispeech-sat"),oPr.forEach(t),Ino=r(A7e," \u2014 "),BR=n(A7e,"A",{href:!0});var rPr=s(BR);jno=r(rPr,"UniSpeechSatModel"),rPr.forEach(t),Nno=r(A7e," (UniSpeechSat model)"),A7e.forEach(t),Dno=i(C),jp=n(C,"LI",{});var L7e=s(jp);CY=n(L7e,"STRONG",{});var tPr=s(CY);qno=r(tPr,"vilt"),tPr.forEach(t),Gno=r(L7e," \u2014 "),kR=n(L7e,"A",{href:!0});var aPr=s(kR);Ono=r(aPr,"ViltModel"),aPr.forEach(t),Xno=r(L7e," (ViLT model)"),L7e.forEach(t),zno=i(C),Np=n(C,"LI",{});var B7e=s(Np);MY=n(B7e,"STRONG",{});var nPr=s(MY);Vno=r(nPr,"vision-text-dual-encoder"),nPr.forEach(t),Wno=r(B7e," \u2014 "),xR=n(B7e,"A",{href:!0});var sPr=s(xR);Qno=r(sPr,"VisionTextDualEncoderModel"),sPr.forEach(t),Hno=r(B7e," (VisionTextDualEncoder model)"),B7e.forEach(t),Uno=i(C),Dp=n(C,"LI",{});var k7e=s(Dp);EY=n(k7e,"STRONG",{});var lPr=s(EY);Jno=r(lPr,"visual_bert"),lPr.forEach(t),Yno=r(k7e," \u2014 "),RR=n(k7e,"A",{href:!0});var iPr=s(RR);Kno=r(iPr,"VisualBertModel"),iPr.forEach(t),Zno=r(k7e," (VisualBert model)"),k7e.forEach(t),eso=i(C),qp=n(C,"LI",{});var x7e=s(qp);yY=n(x7e,"STRONG",{});var dPr=s(yY);oso=r(dPr,"vit"),dPr.forEach(t),rso=r(x7e," \u2014 "),SR=n(x7e,"A",{href:!0});var cPr=s(SR);tso=r(cPr,"ViTModel"),cPr.forEach(t),aso=r(x7e," (ViT model)"),x7e.forEach(t),nso=i(C),Gp=n(C,"LI",{});var R7e=s(Gp);wY=n(R7e,"STRONG",{});var fPr=s(wY);sso=r(fPr,"vit_mae"),fPr.forEach(t),lso=r(R7e," \u2014 "),PR=n(R7e,"A",{href:!0});var mPr=s(PR);iso=r(mPr,"ViTMAEModel"),mPr.forEach(t),dso=r(R7e," (ViTMAE model)"),R7e.forEach(t),cso=i(C),Op=n(C,"LI",{});var S7e=s(Op);AY=n(S7e,"STRONG",{});var gPr=s(AY);fso=r(gPr,"wav2vec2"),gPr.forEach(t),mso=r(S7e," \u2014 "),$R=n(S7e,"A",{href:!0});var hPr=s($R);gso=r(hPr,"Wav2Vec2Model"),hPr.forEach(t),hso=r(S7e," (Wav2Vec2 model)"),S7e.forEach(t),pso=i(C),Xp=n(C,"LI",{});var P7e=s(Xp);LY=n(P7e,"STRONG",{});var pPr=s(LY);_so=r(pPr,"wavlm"),pPr.forEach(t),uso=r(P7e," \u2014 "),IR=n(P7e,"A",{href:!0});var _Pr=s(IR);bso=r(_Pr,"WavLMModel"),_Pr.forEach(t),vso=r(P7e," (WavLM model)"),P7e.forEach(t),Tso=i(C),zp=n(C,"LI",{});var $7e=s(zp);BY=n($7e,"STRONG",{});var uPr=s(BY);Fso=r(uPr,"xglm"),uPr.forEach(t),Cso=r($7e," \u2014 "),jR=n($7e,"A",{href:!0});var bPr=s(jR);Mso=r(bPr,"XGLMModel"),bPr.forEach(t),Eso=r($7e," (XGLM model)"),$7e.forEach(t),yso=i(C),Vp=n(C,"LI",{});var I7e=s(Vp);kY=n(I7e,"STRONG",{});var vPr=s(kY);wso=r(vPr,"xlm"),vPr.forEach(t),Aso=r(I7e," \u2014 "),NR=n(I7e,"A",{href:!0});var TPr=s(NR);Lso=r(TPr,"XLMModel"),TPr.forEach(t),Bso=r(I7e," (XLM model)"),I7e.forEach(t),kso=i(C),Wp=n(C,"LI",{});var j7e=s(Wp);xY=n(j7e,"STRONG",{});var FPr=s(xY);xso=r(FPr,"xlm-prophetnet"),FPr.forEach(t),Rso=r(j7e," \u2014 "),DR=n(j7e,"A",{href:!0});var CPr=s(DR);Sso=r(CPr,"XLMProphetNetModel"),CPr.forEach(t),Pso=r(j7e," (XLMProphetNet model)"),j7e.forEach(t),$so=i(C),Qp=n(C,"LI",{});var N7e=s(Qp);RY=n(N7e,"STRONG",{});var MPr=s(RY);Iso=r(MPr,"xlm-roberta"),MPr.forEach(t),jso=r(N7e," \u2014 "),qR=n(N7e,"A",{href:!0});var EPr=s(qR);Nso=r(EPr,"XLMRobertaModel"),EPr.forEach(t),Dso=r(N7e," (XLM-RoBERTa model)"),N7e.forEach(t),qso=i(C),Hp=n(C,"LI",{});var D7e=s(Hp);SY=n(D7e,"STRONG",{});var yPr=s(SY);Gso=r(yPr,"xlm-roberta-xl"),yPr.forEach(t),Oso=r(D7e," \u2014 "),GR=n(D7e,"A",{href:!0});var wPr=s(GR);Xso=r(wPr,"XLMRobertaXLModel"),wPr.forEach(t),zso=r(D7e," (XLM-RoBERTa-XL model)"),D7e.forEach(t),Vso=i(C),Up=n(C,"LI",{});var q7e=s(Up);PY=n(q7e,"STRONG",{});var APr=s(PY);Wso=r(APr,"xlnet"),APr.forEach(t),Qso=r(q7e," \u2014 "),OR=n(q7e,"A",{href:!0});var LPr=s(OR);Hso=r(LPr,"XLNetModel"),LPr.forEach(t),Uso=r(q7e," (XLNet model)"),q7e.forEach(t),Jso=i(C),Jp=n(C,"LI",{});var G7e=s(Jp);$Y=n(G7e,"STRONG",{});var BPr=s($Y);Yso=r(BPr,"yoso"),BPr.forEach(t),Kso=r(G7e," \u2014 "),XR=n(G7e,"A",{href:!0});var kPr=s(XR);Zso=r(kPr,"YosoModel"),kPr.forEach(t),elo=r(G7e," (YOSO model)"),G7e.forEach(t),C.forEach(t),olo=i(St),Yp=n(St,"P",{});var O7e=s(Yp);rlo=r(O7e,"The model is set in evaluation mode by default using "),IY=n(O7e,"CODE",{});var xPr=s(IY);tlo=r(xPr,"model.eval()"),xPr.forEach(t),alo=r(O7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jY=n(O7e,"CODE",{});var RPr=s(jY);nlo=r(RPr,"model.train()"),RPr.forEach(t),O7e.forEach(t),slo=i(St),NY=n(St,"P",{});var SPr=s(NY);llo=r(SPr,"Examples:"),SPr.forEach(t),ilo=i(St),m(GM.$$.fragment,St),St.forEach(t),Ns.forEach(t),bLe=i(d),Xi=n(d,"H2",{class:!0});var yBe=s(Xi);Kp=n(yBe,"A",{id:!0,class:!0,href:!0});var PPr=s(Kp);DY=n(PPr,"SPAN",{});var $Pr=s(DY);m(OM.$$.fragment,$Pr),$Pr.forEach(t),PPr.forEach(t),dlo=i(yBe),qY=n(yBe,"SPAN",{});var IPr=s(qY);clo=r(IPr,"AutoModelForPreTraining"),IPr.forEach(t),yBe.forEach(t),vLe=i(d),Wo=n(d,"DIV",{class:!0});var qs=s(Wo);m(XM.$$.fragment,qs),flo=i(qs),zi=n(qs,"P",{});var HX=s(zi);mlo=r(HX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GY=n(HX,"CODE",{});var jPr=s(GY);glo=r(jPr,"from_pretrained()"),jPr.forEach(t),hlo=r(HX,"class method or the "),OY=n(HX,"CODE",{});var NPr=s(OY);plo=r(NPr,"from_config()"),NPr.forEach(t),_lo=r(HX,`class
method.`),HX.forEach(t),ulo=i(qs),zM=n(qs,"P",{});var wBe=s(zM);blo=r(wBe,"This class cannot be instantiated directly using "),XY=n(wBe,"CODE",{});var DPr=s(XY);vlo=r(DPr,"__init__()"),DPr.forEach(t),Tlo=r(wBe," (throws an error)."),wBe.forEach(t),Flo=i(qs),Dr=n(qs,"DIV",{class:!0});var Gs=s(Dr);m(VM.$$.fragment,Gs),Clo=i(Gs),zY=n(Gs,"P",{});var qPr=s(zY);Mlo=r(qPr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qPr.forEach(t),Elo=i(Gs),Vi=n(Gs,"P",{});var UX=s(Vi);ylo=r(UX,`Note:
Loading a model from its configuration file does `),VY=n(UX,"STRONG",{});var GPr=s(VY);wlo=r(GPr,"not"),GPr.forEach(t),Alo=r(UX,` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=n(UX,"CODE",{});var OPr=s(WY);Llo=r(OPr,"from_pretrained()"),OPr.forEach(t),Blo=r(UX,"to load the model weights."),UX.forEach(t),klo=i(Gs),QY=n(Gs,"P",{});var XPr=s(QY);xlo=r(XPr,"Examples:"),XPr.forEach(t),Rlo=i(Gs),m(WM.$$.fragment,Gs),Gs.forEach(t),Slo=i(qs),xe=n(qs,"DIV",{class:!0});var Pt=s(xe);m(QM.$$.fragment,Pt),Plo=i(Pt),HY=n(Pt,"P",{});var zPr=s(HY);$lo=r(zPr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zPr.forEach(t),Ilo=i(Pt),qa=n(Pt,"P",{});var iC=s(qa);jlo=r(iC,"The model class to instantiate is selected based on the "),UY=n(iC,"CODE",{});var VPr=s(UY);Nlo=r(VPr,"model_type"),VPr.forEach(t),Dlo=r(iC,` property of the config object (either
passed as an argument or loaded from `),JY=n(iC,"CODE",{});var WPr=s(JY);qlo=r(WPr,"pretrained_model_name_or_path"),WPr.forEach(t),Glo=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YY=n(iC,"CODE",{});var QPr=s(YY);Olo=r(QPr,"pretrained_model_name_or_path"),QPr.forEach(t),Xlo=r(iC,":"),iC.forEach(t),zlo=i(Pt),x=n(Pt,"UL",{});var S=s(x);Zp=n(S,"LI",{});var X7e=s(Zp);KY=n(X7e,"STRONG",{});var HPr=s(KY);Vlo=r(HPr,"albert"),HPr.forEach(t),Wlo=r(X7e," \u2014 "),zR=n(X7e,"A",{href:!0});var UPr=s(zR);Qlo=r(UPr,"AlbertForPreTraining"),UPr.forEach(t),Hlo=r(X7e," (ALBERT model)"),X7e.forEach(t),Ulo=i(S),e_=n(S,"LI",{});var z7e=s(e_);ZY=n(z7e,"STRONG",{});var JPr=s(ZY);Jlo=r(JPr,"bart"),JPr.forEach(t),Ylo=r(z7e," \u2014 "),VR=n(z7e,"A",{href:!0});var YPr=s(VR);Klo=r(YPr,"BartForConditionalGeneration"),YPr.forEach(t),Zlo=r(z7e," (BART model)"),z7e.forEach(t),eio=i(S),o_=n(S,"LI",{});var V7e=s(o_);eK=n(V7e,"STRONG",{});var KPr=s(eK);oio=r(KPr,"bert"),KPr.forEach(t),rio=r(V7e," \u2014 "),WR=n(V7e,"A",{href:!0});var ZPr=s(WR);tio=r(ZPr,"BertForPreTraining"),ZPr.forEach(t),aio=r(V7e," (BERT model)"),V7e.forEach(t),nio=i(S),r_=n(S,"LI",{});var W7e=s(r_);oK=n(W7e,"STRONG",{});var e$r=s(oK);sio=r(e$r,"big_bird"),e$r.forEach(t),lio=r(W7e," \u2014 "),QR=n(W7e,"A",{href:!0});var o$r=s(QR);iio=r(o$r,"BigBirdForPreTraining"),o$r.forEach(t),dio=r(W7e," (BigBird model)"),W7e.forEach(t),cio=i(S),t_=n(S,"LI",{});var Q7e=s(t_);rK=n(Q7e,"STRONG",{});var r$r=s(rK);fio=r(r$r,"camembert"),r$r.forEach(t),mio=r(Q7e," \u2014 "),HR=n(Q7e,"A",{href:!0});var t$r=s(HR);gio=r(t$r,"CamembertForMaskedLM"),t$r.forEach(t),hio=r(Q7e," (CamemBERT model)"),Q7e.forEach(t),pio=i(S),a_=n(S,"LI",{});var H7e=s(a_);tK=n(H7e,"STRONG",{});var a$r=s(tK);_io=r(a$r,"ctrl"),a$r.forEach(t),uio=r(H7e," \u2014 "),UR=n(H7e,"A",{href:!0});var n$r=s(UR);bio=r(n$r,"CTRLLMHeadModel"),n$r.forEach(t),vio=r(H7e," (CTRL model)"),H7e.forEach(t),Tio=i(S),n_=n(S,"LI",{});var U7e=s(n_);aK=n(U7e,"STRONG",{});var s$r=s(aK);Fio=r(s$r,"deberta"),s$r.forEach(t),Cio=r(U7e," \u2014 "),JR=n(U7e,"A",{href:!0});var l$r=s(JR);Mio=r(l$r,"DebertaForMaskedLM"),l$r.forEach(t),Eio=r(U7e," (DeBERTa model)"),U7e.forEach(t),yio=i(S),s_=n(S,"LI",{});var J7e=s(s_);nK=n(J7e,"STRONG",{});var i$r=s(nK);wio=r(i$r,"deberta-v2"),i$r.forEach(t),Aio=r(J7e," \u2014 "),YR=n(J7e,"A",{href:!0});var d$r=s(YR);Lio=r(d$r,"DebertaV2ForMaskedLM"),d$r.forEach(t),Bio=r(J7e," (DeBERTa-v2 model)"),J7e.forEach(t),kio=i(S),l_=n(S,"LI",{});var Y7e=s(l_);sK=n(Y7e,"STRONG",{});var c$r=s(sK);xio=r(c$r,"distilbert"),c$r.forEach(t),Rio=r(Y7e," \u2014 "),KR=n(Y7e,"A",{href:!0});var f$r=s(KR);Sio=r(f$r,"DistilBertForMaskedLM"),f$r.forEach(t),Pio=r(Y7e," (DistilBERT model)"),Y7e.forEach(t),$io=i(S),i_=n(S,"LI",{});var K7e=s(i_);lK=n(K7e,"STRONG",{});var m$r=s(lK);Iio=r(m$r,"electra"),m$r.forEach(t),jio=r(K7e," \u2014 "),ZR=n(K7e,"A",{href:!0});var g$r=s(ZR);Nio=r(g$r,"ElectraForPreTraining"),g$r.forEach(t),Dio=r(K7e," (ELECTRA model)"),K7e.forEach(t),qio=i(S),d_=n(S,"LI",{});var Z7e=s(d_);iK=n(Z7e,"STRONG",{});var h$r=s(iK);Gio=r(h$r,"flaubert"),h$r.forEach(t),Oio=r(Z7e," \u2014 "),eS=n(Z7e,"A",{href:!0});var p$r=s(eS);Xio=r(p$r,"FlaubertWithLMHeadModel"),p$r.forEach(t),zio=r(Z7e," (FlauBERT model)"),Z7e.forEach(t),Vio=i(S),c_=n(S,"LI",{});var e8e=s(c_);dK=n(e8e,"STRONG",{});var _$r=s(dK);Wio=r(_$r,"fnet"),_$r.forEach(t),Qio=r(e8e," \u2014 "),oS=n(e8e,"A",{href:!0});var u$r=s(oS);Hio=r(u$r,"FNetForPreTraining"),u$r.forEach(t),Uio=r(e8e," (FNet model)"),e8e.forEach(t),Jio=i(S),f_=n(S,"LI",{});var o8e=s(f_);cK=n(o8e,"STRONG",{});var b$r=s(cK);Yio=r(b$r,"fsmt"),b$r.forEach(t),Kio=r(o8e," \u2014 "),rS=n(o8e,"A",{href:!0});var v$r=s(rS);Zio=r(v$r,"FSMTForConditionalGeneration"),v$r.forEach(t),edo=r(o8e," (FairSeq Machine-Translation model)"),o8e.forEach(t),odo=i(S),m_=n(S,"LI",{});var r8e=s(m_);fK=n(r8e,"STRONG",{});var T$r=s(fK);rdo=r(T$r,"funnel"),T$r.forEach(t),tdo=r(r8e," \u2014 "),tS=n(r8e,"A",{href:!0});var F$r=s(tS);ado=r(F$r,"FunnelForPreTraining"),F$r.forEach(t),ndo=r(r8e," (Funnel Transformer model)"),r8e.forEach(t),sdo=i(S),g_=n(S,"LI",{});var t8e=s(g_);mK=n(t8e,"STRONG",{});var C$r=s(mK);ldo=r(C$r,"gpt2"),C$r.forEach(t),ido=r(t8e," \u2014 "),aS=n(t8e,"A",{href:!0});var M$r=s(aS);ddo=r(M$r,"GPT2LMHeadModel"),M$r.forEach(t),cdo=r(t8e," (OpenAI GPT-2 model)"),t8e.forEach(t),fdo=i(S),h_=n(S,"LI",{});var a8e=s(h_);gK=n(a8e,"STRONG",{});var E$r=s(gK);mdo=r(E$r,"ibert"),E$r.forEach(t),gdo=r(a8e," \u2014 "),nS=n(a8e,"A",{href:!0});var y$r=s(nS);hdo=r(y$r,"IBertForMaskedLM"),y$r.forEach(t),pdo=r(a8e," (I-BERT model)"),a8e.forEach(t),_do=i(S),p_=n(S,"LI",{});var n8e=s(p_);hK=n(n8e,"STRONG",{});var w$r=s(hK);udo=r(w$r,"layoutlm"),w$r.forEach(t),bdo=r(n8e," \u2014 "),sS=n(n8e,"A",{href:!0});var A$r=s(sS);vdo=r(A$r,"LayoutLMForMaskedLM"),A$r.forEach(t),Tdo=r(n8e," (LayoutLM model)"),n8e.forEach(t),Fdo=i(S),__=n(S,"LI",{});var s8e=s(__);pK=n(s8e,"STRONG",{});var L$r=s(pK);Cdo=r(L$r,"longformer"),L$r.forEach(t),Mdo=r(s8e," \u2014 "),lS=n(s8e,"A",{href:!0});var B$r=s(lS);Edo=r(B$r,"LongformerForMaskedLM"),B$r.forEach(t),ydo=r(s8e," (Longformer model)"),s8e.forEach(t),wdo=i(S),u_=n(S,"LI",{});var l8e=s(u_);_K=n(l8e,"STRONG",{});var k$r=s(_K);Ado=r(k$r,"lxmert"),k$r.forEach(t),Ldo=r(l8e," \u2014 "),iS=n(l8e,"A",{href:!0});var x$r=s(iS);Bdo=r(x$r,"LxmertForPreTraining"),x$r.forEach(t),kdo=r(l8e," (LXMERT model)"),l8e.forEach(t),xdo=i(S),b_=n(S,"LI",{});var i8e=s(b_);uK=n(i8e,"STRONG",{});var R$r=s(uK);Rdo=r(R$r,"megatron-bert"),R$r.forEach(t),Sdo=r(i8e," \u2014 "),dS=n(i8e,"A",{href:!0});var S$r=s(dS);Pdo=r(S$r,"MegatronBertForPreTraining"),S$r.forEach(t),$do=r(i8e," (MegatronBert model)"),i8e.forEach(t),Ido=i(S),v_=n(S,"LI",{});var d8e=s(v_);bK=n(d8e,"STRONG",{});var P$r=s(bK);jdo=r(P$r,"mobilebert"),P$r.forEach(t),Ndo=r(d8e," \u2014 "),cS=n(d8e,"A",{href:!0});var $$r=s(cS);Ddo=r($$r,"MobileBertForPreTraining"),$$r.forEach(t),qdo=r(d8e," (MobileBERT model)"),d8e.forEach(t),Gdo=i(S),T_=n(S,"LI",{});var c8e=s(T_);vK=n(c8e,"STRONG",{});var I$r=s(vK);Odo=r(I$r,"mpnet"),I$r.forEach(t),Xdo=r(c8e," \u2014 "),fS=n(c8e,"A",{href:!0});var j$r=s(fS);zdo=r(j$r,"MPNetForMaskedLM"),j$r.forEach(t),Vdo=r(c8e," (MPNet model)"),c8e.forEach(t),Wdo=i(S),F_=n(S,"LI",{});var f8e=s(F_);TK=n(f8e,"STRONG",{});var N$r=s(TK);Qdo=r(N$r,"openai-gpt"),N$r.forEach(t),Hdo=r(f8e," \u2014 "),mS=n(f8e,"A",{href:!0});var D$r=s(mS);Udo=r(D$r,"OpenAIGPTLMHeadModel"),D$r.forEach(t),Jdo=r(f8e," (OpenAI GPT model)"),f8e.forEach(t),Ydo=i(S),C_=n(S,"LI",{});var m8e=s(C_);FK=n(m8e,"STRONG",{});var q$r=s(FK);Kdo=r(q$r,"retribert"),q$r.forEach(t),Zdo=r(m8e," \u2014 "),gS=n(m8e,"A",{href:!0});var G$r=s(gS);eco=r(G$r,"RetriBertModel"),G$r.forEach(t),oco=r(m8e," (RetriBERT model)"),m8e.forEach(t),rco=i(S),M_=n(S,"LI",{});var g8e=s(M_);CK=n(g8e,"STRONG",{});var O$r=s(CK);tco=r(O$r,"roberta"),O$r.forEach(t),aco=r(g8e," \u2014 "),hS=n(g8e,"A",{href:!0});var X$r=s(hS);nco=r(X$r,"RobertaForMaskedLM"),X$r.forEach(t),sco=r(g8e," (RoBERTa model)"),g8e.forEach(t),lco=i(S),E_=n(S,"LI",{});var h8e=s(E_);MK=n(h8e,"STRONG",{});var z$r=s(MK);ico=r(z$r,"squeezebert"),z$r.forEach(t),dco=r(h8e," \u2014 "),pS=n(h8e,"A",{href:!0});var V$r=s(pS);cco=r(V$r,"SqueezeBertForMaskedLM"),V$r.forEach(t),fco=r(h8e," (SqueezeBERT model)"),h8e.forEach(t),mco=i(S),y_=n(S,"LI",{});var p8e=s(y_);EK=n(p8e,"STRONG",{});var W$r=s(EK);gco=r(W$r,"t5"),W$r.forEach(t),hco=r(p8e," \u2014 "),_S=n(p8e,"A",{href:!0});var Q$r=s(_S);pco=r(Q$r,"T5ForConditionalGeneration"),Q$r.forEach(t),_co=r(p8e," (T5 model)"),p8e.forEach(t),uco=i(S),w_=n(S,"LI",{});var _8e=s(w_);yK=n(_8e,"STRONG",{});var H$r=s(yK);bco=r(H$r,"tapas"),H$r.forEach(t),vco=r(_8e," \u2014 "),uS=n(_8e,"A",{href:!0});var U$r=s(uS);Tco=r(U$r,"TapasForMaskedLM"),U$r.forEach(t),Fco=r(_8e," (TAPAS model)"),_8e.forEach(t),Cco=i(S),A_=n(S,"LI",{});var u8e=s(A_);wK=n(u8e,"STRONG",{});var J$r=s(wK);Mco=r(J$r,"transfo-xl"),J$r.forEach(t),Eco=r(u8e," \u2014 "),bS=n(u8e,"A",{href:!0});var Y$r=s(bS);yco=r(Y$r,"TransfoXLLMHeadModel"),Y$r.forEach(t),wco=r(u8e," (Transformer-XL model)"),u8e.forEach(t),Aco=i(S),L_=n(S,"LI",{});var b8e=s(L_);AK=n(b8e,"STRONG",{});var K$r=s(AK);Lco=r(K$r,"unispeech"),K$r.forEach(t),Bco=r(b8e," \u2014 "),vS=n(b8e,"A",{href:!0});var Z$r=s(vS);kco=r(Z$r,"UniSpeechForPreTraining"),Z$r.forEach(t),xco=r(b8e," (UniSpeech model)"),b8e.forEach(t),Rco=i(S),B_=n(S,"LI",{});var v8e=s(B_);LK=n(v8e,"STRONG",{});var eIr=s(LK);Sco=r(eIr,"unispeech-sat"),eIr.forEach(t),Pco=r(v8e," \u2014 "),TS=n(v8e,"A",{href:!0});var oIr=s(TS);$co=r(oIr,"UniSpeechSatForPreTraining"),oIr.forEach(t),Ico=r(v8e," (UniSpeechSat model)"),v8e.forEach(t),jco=i(S),k_=n(S,"LI",{});var T8e=s(k_);BK=n(T8e,"STRONG",{});var rIr=s(BK);Nco=r(rIr,"visual_bert"),rIr.forEach(t),Dco=r(T8e," \u2014 "),FS=n(T8e,"A",{href:!0});var tIr=s(FS);qco=r(tIr,"VisualBertForPreTraining"),tIr.forEach(t),Gco=r(T8e," (VisualBert model)"),T8e.forEach(t),Oco=i(S),x_=n(S,"LI",{});var F8e=s(x_);kK=n(F8e,"STRONG",{});var aIr=s(kK);Xco=r(aIr,"vit_mae"),aIr.forEach(t),zco=r(F8e," \u2014 "),CS=n(F8e,"A",{href:!0});var nIr=s(CS);Vco=r(nIr,"ViTMAEForPreTraining"),nIr.forEach(t),Wco=r(F8e," (ViTMAE model)"),F8e.forEach(t),Qco=i(S),R_=n(S,"LI",{});var C8e=s(R_);xK=n(C8e,"STRONG",{});var sIr=s(xK);Hco=r(sIr,"wav2vec2"),sIr.forEach(t),Uco=r(C8e," \u2014 "),MS=n(C8e,"A",{href:!0});var lIr=s(MS);Jco=r(lIr,"Wav2Vec2ForPreTraining"),lIr.forEach(t),Yco=r(C8e," (Wav2Vec2 model)"),C8e.forEach(t),Kco=i(S),S_=n(S,"LI",{});var M8e=s(S_);RK=n(M8e,"STRONG",{});var iIr=s(RK);Zco=r(iIr,"xlm"),iIr.forEach(t),efo=r(M8e," \u2014 "),ES=n(M8e,"A",{href:!0});var dIr=s(ES);ofo=r(dIr,"XLMWithLMHeadModel"),dIr.forEach(t),rfo=r(M8e," (XLM model)"),M8e.forEach(t),tfo=i(S),P_=n(S,"LI",{});var E8e=s(P_);SK=n(E8e,"STRONG",{});var cIr=s(SK);afo=r(cIr,"xlm-roberta"),cIr.forEach(t),nfo=r(E8e," \u2014 "),yS=n(E8e,"A",{href:!0});var fIr=s(yS);sfo=r(fIr,"XLMRobertaForMaskedLM"),fIr.forEach(t),lfo=r(E8e," (XLM-RoBERTa model)"),E8e.forEach(t),ifo=i(S),$_=n(S,"LI",{});var y8e=s($_);PK=n(y8e,"STRONG",{});var mIr=s(PK);dfo=r(mIr,"xlm-roberta-xl"),mIr.forEach(t),cfo=r(y8e," \u2014 "),wS=n(y8e,"A",{href:!0});var gIr=s(wS);ffo=r(gIr,"XLMRobertaXLForMaskedLM"),gIr.forEach(t),mfo=r(y8e," (XLM-RoBERTa-XL model)"),y8e.forEach(t),gfo=i(S),I_=n(S,"LI",{});var w8e=s(I_);$K=n(w8e,"STRONG",{});var hIr=s($K);hfo=r(hIr,"xlnet"),hIr.forEach(t),pfo=r(w8e," \u2014 "),AS=n(w8e,"A",{href:!0});var pIr=s(AS);_fo=r(pIr,"XLNetLMHeadModel"),pIr.forEach(t),ufo=r(w8e," (XLNet model)"),w8e.forEach(t),S.forEach(t),bfo=i(Pt),j_=n(Pt,"P",{});var A8e=s(j_);vfo=r(A8e,"The model is set in evaluation mode by default using "),IK=n(A8e,"CODE",{});var _Ir=s(IK);Tfo=r(_Ir,"model.eval()"),_Ir.forEach(t),Ffo=r(A8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jK=n(A8e,"CODE",{});var uIr=s(jK);Cfo=r(uIr,"model.train()"),uIr.forEach(t),A8e.forEach(t),Mfo=i(Pt),NK=n(Pt,"P",{});var bIr=s(NK);Efo=r(bIr,"Examples:"),bIr.forEach(t),yfo=i(Pt),m(HM.$$.fragment,Pt),Pt.forEach(t),qs.forEach(t),TLe=i(d),Wi=n(d,"H2",{class:!0});var ABe=s(Wi);N_=n(ABe,"A",{id:!0,class:!0,href:!0});var vIr=s(N_);DK=n(vIr,"SPAN",{});var TIr=s(DK);m(UM.$$.fragment,TIr),TIr.forEach(t),vIr.forEach(t),wfo=i(ABe),qK=n(ABe,"SPAN",{});var FIr=s(qK);Afo=r(FIr,"AutoModelForCausalLM"),FIr.forEach(t),ABe.forEach(t),FLe=i(d),Qo=n(d,"DIV",{class:!0});var Os=s(Qo);m(JM.$$.fragment,Os),Lfo=i(Os),Qi=n(Os,"P",{});var JX=s(Qi);Bfo=r(JX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GK=n(JX,"CODE",{});var CIr=s(GK);kfo=r(CIr,"from_pretrained()"),CIr.forEach(t),xfo=r(JX,"class method or the "),OK=n(JX,"CODE",{});var MIr=s(OK);Rfo=r(MIr,"from_config()"),MIr.forEach(t),Sfo=r(JX,`class
method.`),JX.forEach(t),Pfo=i(Os),YM=n(Os,"P",{});var LBe=s(YM);$fo=r(LBe,"This class cannot be instantiated directly using "),XK=n(LBe,"CODE",{});var EIr=s(XK);Ifo=r(EIr,"__init__()"),EIr.forEach(t),jfo=r(LBe," (throws an error)."),LBe.forEach(t),Nfo=i(Os),qr=n(Os,"DIV",{class:!0});var Xs=s(qr);m(KM.$$.fragment,Xs),Dfo=i(Xs),zK=n(Xs,"P",{});var yIr=s(zK);qfo=r(yIr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yIr.forEach(t),Gfo=i(Xs),Hi=n(Xs,"P",{});var YX=s(Hi);Ofo=r(YX,`Note:
Loading a model from its configuration file does `),VK=n(YX,"STRONG",{});var wIr=s(VK);Xfo=r(wIr,"not"),wIr.forEach(t),zfo=r(YX,` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=n(YX,"CODE",{});var AIr=s(WK);Vfo=r(AIr,"from_pretrained()"),AIr.forEach(t),Wfo=r(YX,"to load the model weights."),YX.forEach(t),Qfo=i(Xs),QK=n(Xs,"P",{});var LIr=s(QK);Hfo=r(LIr,"Examples:"),LIr.forEach(t),Ufo=i(Xs),m(ZM.$$.fragment,Xs),Xs.forEach(t),Jfo=i(Os),Re=n(Os,"DIV",{class:!0});var $t=s(Re);m(eE.$$.fragment,$t),Yfo=i($t),HK=n($t,"P",{});var BIr=s(HK);Kfo=r(BIr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BIr.forEach(t),Zfo=i($t),Ga=n($t,"P",{});var dC=s(Ga);emo=r(dC,"The model class to instantiate is selected based on the "),UK=n(dC,"CODE",{});var kIr=s(UK);omo=r(kIr,"model_type"),kIr.forEach(t),rmo=r(dC,` property of the config object (either
passed as an argument or loaded from `),JK=n(dC,"CODE",{});var xIr=s(JK);tmo=r(xIr,"pretrained_model_name_or_path"),xIr.forEach(t),amo=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YK=n(dC,"CODE",{});var RIr=s(YK);nmo=r(RIr,"pretrained_model_name_or_path"),RIr.forEach(t),smo=r(dC,":"),dC.forEach(t),lmo=i($t),$=n($t,"UL",{});var j=s($);D_=n(j,"LI",{});var L8e=s(D_);KK=n(L8e,"STRONG",{});var SIr=s(KK);imo=r(SIr,"bart"),SIr.forEach(t),dmo=r(L8e," \u2014 "),LS=n(L8e,"A",{href:!0});var PIr=s(LS);cmo=r(PIr,"BartForCausalLM"),PIr.forEach(t),fmo=r(L8e," (BART model)"),L8e.forEach(t),mmo=i(j),q_=n(j,"LI",{});var B8e=s(q_);ZK=n(B8e,"STRONG",{});var $Ir=s(ZK);gmo=r($Ir,"bert"),$Ir.forEach(t),hmo=r(B8e," \u2014 "),BS=n(B8e,"A",{href:!0});var IIr=s(BS);pmo=r(IIr,"BertLMHeadModel"),IIr.forEach(t),_mo=r(B8e," (BERT model)"),B8e.forEach(t),umo=i(j),G_=n(j,"LI",{});var k8e=s(G_);eZ=n(k8e,"STRONG",{});var jIr=s(eZ);bmo=r(jIr,"bert-generation"),jIr.forEach(t),vmo=r(k8e," \u2014 "),kS=n(k8e,"A",{href:!0});var NIr=s(kS);Tmo=r(NIr,"BertGenerationDecoder"),NIr.forEach(t),Fmo=r(k8e," (Bert Generation model)"),k8e.forEach(t),Cmo=i(j),O_=n(j,"LI",{});var x8e=s(O_);oZ=n(x8e,"STRONG",{});var DIr=s(oZ);Mmo=r(DIr,"big_bird"),DIr.forEach(t),Emo=r(x8e," \u2014 "),xS=n(x8e,"A",{href:!0});var qIr=s(xS);ymo=r(qIr,"BigBirdForCausalLM"),qIr.forEach(t),wmo=r(x8e," (BigBird model)"),x8e.forEach(t),Amo=i(j),X_=n(j,"LI",{});var R8e=s(X_);rZ=n(R8e,"STRONG",{});var GIr=s(rZ);Lmo=r(GIr,"bigbird_pegasus"),GIr.forEach(t),Bmo=r(R8e," \u2014 "),RS=n(R8e,"A",{href:!0});var OIr=s(RS);kmo=r(OIr,"BigBirdPegasusForCausalLM"),OIr.forEach(t),xmo=r(R8e," (BigBirdPegasus model)"),R8e.forEach(t),Rmo=i(j),z_=n(j,"LI",{});var S8e=s(z_);tZ=n(S8e,"STRONG",{});var XIr=s(tZ);Smo=r(XIr,"blenderbot"),XIr.forEach(t),Pmo=r(S8e," \u2014 "),SS=n(S8e,"A",{href:!0});var zIr=s(SS);$mo=r(zIr,"BlenderbotForCausalLM"),zIr.forEach(t),Imo=r(S8e," (Blenderbot model)"),S8e.forEach(t),jmo=i(j),V_=n(j,"LI",{});var P8e=s(V_);aZ=n(P8e,"STRONG",{});var VIr=s(aZ);Nmo=r(VIr,"blenderbot-small"),VIr.forEach(t),Dmo=r(P8e," \u2014 "),PS=n(P8e,"A",{href:!0});var WIr=s(PS);qmo=r(WIr,"BlenderbotSmallForCausalLM"),WIr.forEach(t),Gmo=r(P8e," (BlenderbotSmall model)"),P8e.forEach(t),Omo=i(j),W_=n(j,"LI",{});var $8e=s(W_);nZ=n($8e,"STRONG",{});var QIr=s(nZ);Xmo=r(QIr,"camembert"),QIr.forEach(t),zmo=r($8e," \u2014 "),$S=n($8e,"A",{href:!0});var HIr=s($S);Vmo=r(HIr,"CamembertForCausalLM"),HIr.forEach(t),Wmo=r($8e," (CamemBERT model)"),$8e.forEach(t),Qmo=i(j),Q_=n(j,"LI",{});var I8e=s(Q_);sZ=n(I8e,"STRONG",{});var UIr=s(sZ);Hmo=r(UIr,"ctrl"),UIr.forEach(t),Umo=r(I8e," \u2014 "),IS=n(I8e,"A",{href:!0});var JIr=s(IS);Jmo=r(JIr,"CTRLLMHeadModel"),JIr.forEach(t),Ymo=r(I8e," (CTRL model)"),I8e.forEach(t),Kmo=i(j),H_=n(j,"LI",{});var j8e=s(H_);lZ=n(j8e,"STRONG",{});var YIr=s(lZ);Zmo=r(YIr,"electra"),YIr.forEach(t),ego=r(j8e," \u2014 "),jS=n(j8e,"A",{href:!0});var KIr=s(jS);ogo=r(KIr,"ElectraForCausalLM"),KIr.forEach(t),rgo=r(j8e," (ELECTRA model)"),j8e.forEach(t),tgo=i(j),U_=n(j,"LI",{});var N8e=s(U_);iZ=n(N8e,"STRONG",{});var ZIr=s(iZ);ago=r(ZIr,"gpt2"),ZIr.forEach(t),ngo=r(N8e," \u2014 "),NS=n(N8e,"A",{href:!0});var ejr=s(NS);sgo=r(ejr,"GPT2LMHeadModel"),ejr.forEach(t),lgo=r(N8e," (OpenAI GPT-2 model)"),N8e.forEach(t),igo=i(j),J_=n(j,"LI",{});var D8e=s(J_);dZ=n(D8e,"STRONG",{});var ojr=s(dZ);dgo=r(ojr,"gpt_neo"),ojr.forEach(t),cgo=r(D8e," \u2014 "),DS=n(D8e,"A",{href:!0});var rjr=s(DS);fgo=r(rjr,"GPTNeoForCausalLM"),rjr.forEach(t),mgo=r(D8e," (GPT Neo model)"),D8e.forEach(t),ggo=i(j),Y_=n(j,"LI",{});var q8e=s(Y_);cZ=n(q8e,"STRONG",{});var tjr=s(cZ);hgo=r(tjr,"gptj"),tjr.forEach(t),pgo=r(q8e," \u2014 "),qS=n(q8e,"A",{href:!0});var ajr=s(qS);_go=r(ajr,"GPTJForCausalLM"),ajr.forEach(t),ugo=r(q8e," (GPT-J model)"),q8e.forEach(t),bgo=i(j),K_=n(j,"LI",{});var G8e=s(K_);fZ=n(G8e,"STRONG",{});var njr=s(fZ);vgo=r(njr,"marian"),njr.forEach(t),Tgo=r(G8e," \u2014 "),GS=n(G8e,"A",{href:!0});var sjr=s(GS);Fgo=r(sjr,"MarianForCausalLM"),sjr.forEach(t),Cgo=r(G8e," (Marian model)"),G8e.forEach(t),Mgo=i(j),Z_=n(j,"LI",{});var O8e=s(Z_);mZ=n(O8e,"STRONG",{});var ljr=s(mZ);Ego=r(ljr,"mbart"),ljr.forEach(t),ygo=r(O8e," \u2014 "),OS=n(O8e,"A",{href:!0});var ijr=s(OS);wgo=r(ijr,"MBartForCausalLM"),ijr.forEach(t),Ago=r(O8e," (mBART model)"),O8e.forEach(t),Lgo=i(j),eu=n(j,"LI",{});var X8e=s(eu);gZ=n(X8e,"STRONG",{});var djr=s(gZ);Bgo=r(djr,"megatron-bert"),djr.forEach(t),kgo=r(X8e," \u2014 "),XS=n(X8e,"A",{href:!0});var cjr=s(XS);xgo=r(cjr,"MegatronBertForCausalLM"),cjr.forEach(t),Rgo=r(X8e," (MegatronBert model)"),X8e.forEach(t),Sgo=i(j),ou=n(j,"LI",{});var z8e=s(ou);hZ=n(z8e,"STRONG",{});var fjr=s(hZ);Pgo=r(fjr,"openai-gpt"),fjr.forEach(t),$go=r(z8e," \u2014 "),zS=n(z8e,"A",{href:!0});var mjr=s(zS);Igo=r(mjr,"OpenAIGPTLMHeadModel"),mjr.forEach(t),jgo=r(z8e," (OpenAI GPT model)"),z8e.forEach(t),Ngo=i(j),ru=n(j,"LI",{});var V8e=s(ru);pZ=n(V8e,"STRONG",{});var gjr=s(pZ);Dgo=r(gjr,"pegasus"),gjr.forEach(t),qgo=r(V8e," \u2014 "),VS=n(V8e,"A",{href:!0});var hjr=s(VS);Ggo=r(hjr,"PegasusForCausalLM"),hjr.forEach(t),Ogo=r(V8e," (Pegasus model)"),V8e.forEach(t),Xgo=i(j),tu=n(j,"LI",{});var W8e=s(tu);_Z=n(W8e,"STRONG",{});var pjr=s(_Z);zgo=r(pjr,"plbart"),pjr.forEach(t),Vgo=r(W8e," \u2014 "),WS=n(W8e,"A",{href:!0});var _jr=s(WS);Wgo=r(_jr,"PLBartForCausalLM"),_jr.forEach(t),Qgo=r(W8e," (PLBart model)"),W8e.forEach(t),Hgo=i(j),au=n(j,"LI",{});var Q8e=s(au);uZ=n(Q8e,"STRONG",{});var ujr=s(uZ);Ugo=r(ujr,"prophetnet"),ujr.forEach(t),Jgo=r(Q8e," \u2014 "),QS=n(Q8e,"A",{href:!0});var bjr=s(QS);Ygo=r(bjr,"ProphetNetForCausalLM"),bjr.forEach(t),Kgo=r(Q8e," (ProphetNet model)"),Q8e.forEach(t),Zgo=i(j),nu=n(j,"LI",{});var H8e=s(nu);bZ=n(H8e,"STRONG",{});var vjr=s(bZ);eho=r(vjr,"qdqbert"),vjr.forEach(t),oho=r(H8e," \u2014 "),HS=n(H8e,"A",{href:!0});var Tjr=s(HS);rho=r(Tjr,"QDQBertLMHeadModel"),Tjr.forEach(t),tho=r(H8e," (QDQBert model)"),H8e.forEach(t),aho=i(j),su=n(j,"LI",{});var U8e=s(su);vZ=n(U8e,"STRONG",{});var Fjr=s(vZ);nho=r(Fjr,"reformer"),Fjr.forEach(t),sho=r(U8e," \u2014 "),US=n(U8e,"A",{href:!0});var Cjr=s(US);lho=r(Cjr,"ReformerModelWithLMHead"),Cjr.forEach(t),iho=r(U8e," (Reformer model)"),U8e.forEach(t),dho=i(j),lu=n(j,"LI",{});var J8e=s(lu);TZ=n(J8e,"STRONG",{});var Mjr=s(TZ);cho=r(Mjr,"rembert"),Mjr.forEach(t),fho=r(J8e," \u2014 "),JS=n(J8e,"A",{href:!0});var Ejr=s(JS);mho=r(Ejr,"RemBertForCausalLM"),Ejr.forEach(t),gho=r(J8e," (RemBERT model)"),J8e.forEach(t),hho=i(j),iu=n(j,"LI",{});var Y8e=s(iu);FZ=n(Y8e,"STRONG",{});var yjr=s(FZ);pho=r(yjr,"roberta"),yjr.forEach(t),_ho=r(Y8e," \u2014 "),YS=n(Y8e,"A",{href:!0});var wjr=s(YS);uho=r(wjr,"RobertaForCausalLM"),wjr.forEach(t),bho=r(Y8e," (RoBERTa model)"),Y8e.forEach(t),vho=i(j),du=n(j,"LI",{});var K8e=s(du);CZ=n(K8e,"STRONG",{});var Ajr=s(CZ);Tho=r(Ajr,"roformer"),Ajr.forEach(t),Fho=r(K8e," \u2014 "),KS=n(K8e,"A",{href:!0});var Ljr=s(KS);Cho=r(Ljr,"RoFormerForCausalLM"),Ljr.forEach(t),Mho=r(K8e," (RoFormer model)"),K8e.forEach(t),Eho=i(j),cu=n(j,"LI",{});var Z8e=s(cu);MZ=n(Z8e,"STRONG",{});var Bjr=s(MZ);yho=r(Bjr,"speech_to_text_2"),Bjr.forEach(t),who=r(Z8e," \u2014 "),ZS=n(Z8e,"A",{href:!0});var kjr=s(ZS);Aho=r(kjr,"Speech2Text2ForCausalLM"),kjr.forEach(t),Lho=r(Z8e," (Speech2Text2 model)"),Z8e.forEach(t),Bho=i(j),fu=n(j,"LI",{});var eFe=s(fu);EZ=n(eFe,"STRONG",{});var xjr=s(EZ);kho=r(xjr,"transfo-xl"),xjr.forEach(t),xho=r(eFe," \u2014 "),eP=n(eFe,"A",{href:!0});var Rjr=s(eP);Rho=r(Rjr,"TransfoXLLMHeadModel"),Rjr.forEach(t),Sho=r(eFe," (Transformer-XL model)"),eFe.forEach(t),Pho=i(j),mu=n(j,"LI",{});var oFe=s(mu);yZ=n(oFe,"STRONG",{});var Sjr=s(yZ);$ho=r(Sjr,"trocr"),Sjr.forEach(t),Iho=r(oFe," \u2014 "),oP=n(oFe,"A",{href:!0});var Pjr=s(oP);jho=r(Pjr,"TrOCRForCausalLM"),Pjr.forEach(t),Nho=r(oFe," (TrOCR model)"),oFe.forEach(t),Dho=i(j),gu=n(j,"LI",{});var rFe=s(gu);wZ=n(rFe,"STRONG",{});var $jr=s(wZ);qho=r($jr,"xglm"),$jr.forEach(t),Gho=r(rFe," \u2014 "),rP=n(rFe,"A",{href:!0});var Ijr=s(rP);Oho=r(Ijr,"XGLMForCausalLM"),Ijr.forEach(t),Xho=r(rFe," (XGLM model)"),rFe.forEach(t),zho=i(j),hu=n(j,"LI",{});var tFe=s(hu);AZ=n(tFe,"STRONG",{});var jjr=s(AZ);Vho=r(jjr,"xlm"),jjr.forEach(t),Who=r(tFe," \u2014 "),tP=n(tFe,"A",{href:!0});var Njr=s(tP);Qho=r(Njr,"XLMWithLMHeadModel"),Njr.forEach(t),Hho=r(tFe," (XLM model)"),tFe.forEach(t),Uho=i(j),pu=n(j,"LI",{});var aFe=s(pu);LZ=n(aFe,"STRONG",{});var Djr=s(LZ);Jho=r(Djr,"xlm-prophetnet"),Djr.forEach(t),Yho=r(aFe," \u2014 "),aP=n(aFe,"A",{href:!0});var qjr=s(aP);Kho=r(qjr,"XLMProphetNetForCausalLM"),qjr.forEach(t),Zho=r(aFe," (XLMProphetNet model)"),aFe.forEach(t),epo=i(j),_u=n(j,"LI",{});var nFe=s(_u);BZ=n(nFe,"STRONG",{});var Gjr=s(BZ);opo=r(Gjr,"xlm-roberta"),Gjr.forEach(t),rpo=r(nFe," \u2014 "),nP=n(nFe,"A",{href:!0});var Ojr=s(nP);tpo=r(Ojr,"XLMRobertaForCausalLM"),Ojr.forEach(t),apo=r(nFe," (XLM-RoBERTa model)"),nFe.forEach(t),npo=i(j),uu=n(j,"LI",{});var sFe=s(uu);kZ=n(sFe,"STRONG",{});var Xjr=s(kZ);spo=r(Xjr,"xlm-roberta-xl"),Xjr.forEach(t),lpo=r(sFe," \u2014 "),sP=n(sFe,"A",{href:!0});var zjr=s(sP);ipo=r(zjr,"XLMRobertaXLForCausalLM"),zjr.forEach(t),dpo=r(sFe," (XLM-RoBERTa-XL model)"),sFe.forEach(t),cpo=i(j),bu=n(j,"LI",{});var lFe=s(bu);xZ=n(lFe,"STRONG",{});var Vjr=s(xZ);fpo=r(Vjr,"xlnet"),Vjr.forEach(t),mpo=r(lFe," \u2014 "),lP=n(lFe,"A",{href:!0});var Wjr=s(lP);gpo=r(Wjr,"XLNetLMHeadModel"),Wjr.forEach(t),hpo=r(lFe," (XLNet model)"),lFe.forEach(t),j.forEach(t),ppo=i($t),vu=n($t,"P",{});var iFe=s(vu);_po=r(iFe,"The model is set in evaluation mode by default using "),RZ=n(iFe,"CODE",{});var Qjr=s(RZ);upo=r(Qjr,"model.eval()"),Qjr.forEach(t),bpo=r(iFe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SZ=n(iFe,"CODE",{});var Hjr=s(SZ);vpo=r(Hjr,"model.train()"),Hjr.forEach(t),iFe.forEach(t),Tpo=i($t),PZ=n($t,"P",{});var Ujr=s(PZ);Fpo=r(Ujr,"Examples:"),Ujr.forEach(t),Cpo=i($t),m(oE.$$.fragment,$t),$t.forEach(t),Os.forEach(t),CLe=i(d),Ui=n(d,"H2",{class:!0});var BBe=s(Ui);Tu=n(BBe,"A",{id:!0,class:!0,href:!0});var Jjr=s(Tu);$Z=n(Jjr,"SPAN",{});var Yjr=s($Z);m(rE.$$.fragment,Yjr),Yjr.forEach(t),Jjr.forEach(t),Mpo=i(BBe),IZ=n(BBe,"SPAN",{});var Kjr=s(IZ);Epo=r(Kjr,"AutoModelForMaskedLM"),Kjr.forEach(t),BBe.forEach(t),MLe=i(d),Ho=n(d,"DIV",{class:!0});var zs=s(Ho);m(tE.$$.fragment,zs),ypo=i(zs),Ji=n(zs,"P",{});var KX=s(Ji);wpo=r(KX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jZ=n(KX,"CODE",{});var Zjr=s(jZ);Apo=r(Zjr,"from_pretrained()"),Zjr.forEach(t),Lpo=r(KX,"class method or the "),NZ=n(KX,"CODE",{});var eNr=s(NZ);Bpo=r(eNr,"from_config()"),eNr.forEach(t),kpo=r(KX,`class
method.`),KX.forEach(t),xpo=i(zs),aE=n(zs,"P",{});var kBe=s(aE);Rpo=r(kBe,"This class cannot be instantiated directly using "),DZ=n(kBe,"CODE",{});var oNr=s(DZ);Spo=r(oNr,"__init__()"),oNr.forEach(t),Ppo=r(kBe," (throws an error)."),kBe.forEach(t),$po=i(zs),Gr=n(zs,"DIV",{class:!0});var Vs=s(Gr);m(nE.$$.fragment,Vs),Ipo=i(Vs),qZ=n(Vs,"P",{});var rNr=s(qZ);jpo=r(rNr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rNr.forEach(t),Npo=i(Vs),Yi=n(Vs,"P",{});var ZX=s(Yi);Dpo=r(ZX,`Note:
Loading a model from its configuration file does `),GZ=n(ZX,"STRONG",{});var tNr=s(GZ);qpo=r(tNr,"not"),tNr.forEach(t),Gpo=r(ZX,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(ZX,"CODE",{});var aNr=s(OZ);Opo=r(aNr,"from_pretrained()"),aNr.forEach(t),Xpo=r(ZX,"to load the model weights."),ZX.forEach(t),zpo=i(Vs),XZ=n(Vs,"P",{});var nNr=s(XZ);Vpo=r(nNr,"Examples:"),nNr.forEach(t),Wpo=i(Vs),m(sE.$$.fragment,Vs),Vs.forEach(t),Qpo=i(zs),Se=n(zs,"DIV",{class:!0});var It=s(Se);m(lE.$$.fragment,It),Hpo=i(It),zZ=n(It,"P",{});var sNr=s(zZ);Upo=r(sNr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),sNr.forEach(t),Jpo=i(It),Oa=n(It,"P",{});var cC=s(Oa);Ypo=r(cC,"The model class to instantiate is selected based on the "),VZ=n(cC,"CODE",{});var lNr=s(VZ);Kpo=r(lNr,"model_type"),lNr.forEach(t),Zpo=r(cC,` property of the config object (either
passed as an argument or loaded from `),WZ=n(cC,"CODE",{});var iNr=s(WZ);e_o=r(iNr,"pretrained_model_name_or_path"),iNr.forEach(t),o_o=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QZ=n(cC,"CODE",{});var dNr=s(QZ);r_o=r(dNr,"pretrained_model_name_or_path"),dNr.forEach(t),t_o=r(cC,":"),cC.forEach(t),a_o=i(It),I=n(It,"UL",{});var N=s(I);Fu=n(N,"LI",{});var dFe=s(Fu);HZ=n(dFe,"STRONG",{});var cNr=s(HZ);n_o=r(cNr,"albert"),cNr.forEach(t),s_o=r(dFe," \u2014 "),iP=n(dFe,"A",{href:!0});var fNr=s(iP);l_o=r(fNr,"AlbertForMaskedLM"),fNr.forEach(t),i_o=r(dFe," (ALBERT model)"),dFe.forEach(t),d_o=i(N),Cu=n(N,"LI",{});var cFe=s(Cu);UZ=n(cFe,"STRONG",{});var mNr=s(UZ);c_o=r(mNr,"bart"),mNr.forEach(t),f_o=r(cFe," \u2014 "),dP=n(cFe,"A",{href:!0});var gNr=s(dP);m_o=r(gNr,"BartForConditionalGeneration"),gNr.forEach(t),g_o=r(cFe," (BART model)"),cFe.forEach(t),h_o=i(N),Mu=n(N,"LI",{});var fFe=s(Mu);JZ=n(fFe,"STRONG",{});var hNr=s(JZ);p_o=r(hNr,"bert"),hNr.forEach(t),__o=r(fFe," \u2014 "),cP=n(fFe,"A",{href:!0});var pNr=s(cP);u_o=r(pNr,"BertForMaskedLM"),pNr.forEach(t),b_o=r(fFe," (BERT model)"),fFe.forEach(t),v_o=i(N),Eu=n(N,"LI",{});var mFe=s(Eu);YZ=n(mFe,"STRONG",{});var _Nr=s(YZ);T_o=r(_Nr,"big_bird"),_Nr.forEach(t),F_o=r(mFe," \u2014 "),fP=n(mFe,"A",{href:!0});var uNr=s(fP);C_o=r(uNr,"BigBirdForMaskedLM"),uNr.forEach(t),M_o=r(mFe," (BigBird model)"),mFe.forEach(t),E_o=i(N),yu=n(N,"LI",{});var gFe=s(yu);KZ=n(gFe,"STRONG",{});var bNr=s(KZ);y_o=r(bNr,"camembert"),bNr.forEach(t),w_o=r(gFe," \u2014 "),mP=n(gFe,"A",{href:!0});var vNr=s(mP);A_o=r(vNr,"CamembertForMaskedLM"),vNr.forEach(t),L_o=r(gFe," (CamemBERT model)"),gFe.forEach(t),B_o=i(N),wu=n(N,"LI",{});var hFe=s(wu);ZZ=n(hFe,"STRONG",{});var TNr=s(ZZ);k_o=r(TNr,"convbert"),TNr.forEach(t),x_o=r(hFe," \u2014 "),gP=n(hFe,"A",{href:!0});var FNr=s(gP);R_o=r(FNr,"ConvBertForMaskedLM"),FNr.forEach(t),S_o=r(hFe," (ConvBERT model)"),hFe.forEach(t),P_o=i(N),Au=n(N,"LI",{});var pFe=s(Au);eee=n(pFe,"STRONG",{});var CNr=s(eee);$_o=r(CNr,"deberta"),CNr.forEach(t),I_o=r(pFe," \u2014 "),hP=n(pFe,"A",{href:!0});var MNr=s(hP);j_o=r(MNr,"DebertaForMaskedLM"),MNr.forEach(t),N_o=r(pFe," (DeBERTa model)"),pFe.forEach(t),D_o=i(N),Lu=n(N,"LI",{});var _Fe=s(Lu);oee=n(_Fe,"STRONG",{});var ENr=s(oee);q_o=r(ENr,"deberta-v2"),ENr.forEach(t),G_o=r(_Fe," \u2014 "),pP=n(_Fe,"A",{href:!0});var yNr=s(pP);O_o=r(yNr,"DebertaV2ForMaskedLM"),yNr.forEach(t),X_o=r(_Fe," (DeBERTa-v2 model)"),_Fe.forEach(t),z_o=i(N),Bu=n(N,"LI",{});var uFe=s(Bu);ree=n(uFe,"STRONG",{});var wNr=s(ree);V_o=r(wNr,"distilbert"),wNr.forEach(t),W_o=r(uFe," \u2014 "),_P=n(uFe,"A",{href:!0});var ANr=s(_P);Q_o=r(ANr,"DistilBertForMaskedLM"),ANr.forEach(t),H_o=r(uFe," (DistilBERT model)"),uFe.forEach(t),U_o=i(N),ku=n(N,"LI",{});var bFe=s(ku);tee=n(bFe,"STRONG",{});var LNr=s(tee);J_o=r(LNr,"electra"),LNr.forEach(t),Y_o=r(bFe," \u2014 "),uP=n(bFe,"A",{href:!0});var BNr=s(uP);K_o=r(BNr,"ElectraForMaskedLM"),BNr.forEach(t),Z_o=r(bFe," (ELECTRA model)"),bFe.forEach(t),euo=i(N),xu=n(N,"LI",{});var vFe=s(xu);aee=n(vFe,"STRONG",{});var kNr=s(aee);ouo=r(kNr,"flaubert"),kNr.forEach(t),ruo=r(vFe," \u2014 "),bP=n(vFe,"A",{href:!0});var xNr=s(bP);tuo=r(xNr,"FlaubertWithLMHeadModel"),xNr.forEach(t),auo=r(vFe," (FlauBERT model)"),vFe.forEach(t),nuo=i(N),Ru=n(N,"LI",{});var TFe=s(Ru);nee=n(TFe,"STRONG",{});var RNr=s(nee);suo=r(RNr,"fnet"),RNr.forEach(t),luo=r(TFe," \u2014 "),vP=n(TFe,"A",{href:!0});var SNr=s(vP);iuo=r(SNr,"FNetForMaskedLM"),SNr.forEach(t),duo=r(TFe," (FNet model)"),TFe.forEach(t),cuo=i(N),Su=n(N,"LI",{});var FFe=s(Su);see=n(FFe,"STRONG",{});var PNr=s(see);fuo=r(PNr,"funnel"),PNr.forEach(t),muo=r(FFe," \u2014 "),TP=n(FFe,"A",{href:!0});var $Nr=s(TP);guo=r($Nr,"FunnelForMaskedLM"),$Nr.forEach(t),huo=r(FFe," (Funnel Transformer model)"),FFe.forEach(t),puo=i(N),Pu=n(N,"LI",{});var CFe=s(Pu);lee=n(CFe,"STRONG",{});var INr=s(lee);_uo=r(INr,"ibert"),INr.forEach(t),uuo=r(CFe," \u2014 "),FP=n(CFe,"A",{href:!0});var jNr=s(FP);buo=r(jNr,"IBertForMaskedLM"),jNr.forEach(t),vuo=r(CFe," (I-BERT model)"),CFe.forEach(t),Tuo=i(N),$u=n(N,"LI",{});var MFe=s($u);iee=n(MFe,"STRONG",{});var NNr=s(iee);Fuo=r(NNr,"layoutlm"),NNr.forEach(t),Cuo=r(MFe," \u2014 "),CP=n(MFe,"A",{href:!0});var DNr=s(CP);Muo=r(DNr,"LayoutLMForMaskedLM"),DNr.forEach(t),Euo=r(MFe," (LayoutLM model)"),MFe.forEach(t),yuo=i(N),Iu=n(N,"LI",{});var EFe=s(Iu);dee=n(EFe,"STRONG",{});var qNr=s(dee);wuo=r(qNr,"longformer"),qNr.forEach(t),Auo=r(EFe," \u2014 "),MP=n(EFe,"A",{href:!0});var GNr=s(MP);Luo=r(GNr,"LongformerForMaskedLM"),GNr.forEach(t),Buo=r(EFe," (Longformer model)"),EFe.forEach(t),kuo=i(N),ju=n(N,"LI",{});var yFe=s(ju);cee=n(yFe,"STRONG",{});var ONr=s(cee);xuo=r(ONr,"mbart"),ONr.forEach(t),Ruo=r(yFe," \u2014 "),EP=n(yFe,"A",{href:!0});var XNr=s(EP);Suo=r(XNr,"MBartForConditionalGeneration"),XNr.forEach(t),Puo=r(yFe," (mBART model)"),yFe.forEach(t),$uo=i(N),Nu=n(N,"LI",{});var wFe=s(Nu);fee=n(wFe,"STRONG",{});var zNr=s(fee);Iuo=r(zNr,"megatron-bert"),zNr.forEach(t),juo=r(wFe," \u2014 "),yP=n(wFe,"A",{href:!0});var VNr=s(yP);Nuo=r(VNr,"MegatronBertForMaskedLM"),VNr.forEach(t),Duo=r(wFe," (MegatronBert model)"),wFe.forEach(t),quo=i(N),Du=n(N,"LI",{});var AFe=s(Du);mee=n(AFe,"STRONG",{});var WNr=s(mee);Guo=r(WNr,"mobilebert"),WNr.forEach(t),Ouo=r(AFe," \u2014 "),wP=n(AFe,"A",{href:!0});var QNr=s(wP);Xuo=r(QNr,"MobileBertForMaskedLM"),QNr.forEach(t),zuo=r(AFe," (MobileBERT model)"),AFe.forEach(t),Vuo=i(N),qu=n(N,"LI",{});var LFe=s(qu);gee=n(LFe,"STRONG",{});var HNr=s(gee);Wuo=r(HNr,"mpnet"),HNr.forEach(t),Quo=r(LFe," \u2014 "),AP=n(LFe,"A",{href:!0});var UNr=s(AP);Huo=r(UNr,"MPNetForMaskedLM"),UNr.forEach(t),Uuo=r(LFe," (MPNet model)"),LFe.forEach(t),Juo=i(N),Gu=n(N,"LI",{});var BFe=s(Gu);hee=n(BFe,"STRONG",{});var JNr=s(hee);Yuo=r(JNr,"nystromformer"),JNr.forEach(t),Kuo=r(BFe," \u2014 "),LP=n(BFe,"A",{href:!0});var YNr=s(LP);Zuo=r(YNr,"NystromformerForMaskedLM"),YNr.forEach(t),e1o=r(BFe," (Nystromformer model)"),BFe.forEach(t),o1o=i(N),Ou=n(N,"LI",{});var kFe=s(Ou);pee=n(kFe,"STRONG",{});var KNr=s(pee);r1o=r(KNr,"perceiver"),KNr.forEach(t),t1o=r(kFe," \u2014 "),BP=n(kFe,"A",{href:!0});var ZNr=s(BP);a1o=r(ZNr,"PerceiverForMaskedLM"),ZNr.forEach(t),n1o=r(kFe," (Perceiver model)"),kFe.forEach(t),s1o=i(N),Xu=n(N,"LI",{});var xFe=s(Xu);_ee=n(xFe,"STRONG",{});var eDr=s(_ee);l1o=r(eDr,"qdqbert"),eDr.forEach(t),i1o=r(xFe," \u2014 "),kP=n(xFe,"A",{href:!0});var oDr=s(kP);d1o=r(oDr,"QDQBertForMaskedLM"),oDr.forEach(t),c1o=r(xFe," (QDQBert model)"),xFe.forEach(t),f1o=i(N),zu=n(N,"LI",{});var RFe=s(zu);uee=n(RFe,"STRONG",{});var rDr=s(uee);m1o=r(rDr,"reformer"),rDr.forEach(t),g1o=r(RFe," \u2014 "),xP=n(RFe,"A",{href:!0});var tDr=s(xP);h1o=r(tDr,"ReformerForMaskedLM"),tDr.forEach(t),p1o=r(RFe," (Reformer model)"),RFe.forEach(t),_1o=i(N),Vu=n(N,"LI",{});var SFe=s(Vu);bee=n(SFe,"STRONG",{});var aDr=s(bee);u1o=r(aDr,"rembert"),aDr.forEach(t),b1o=r(SFe," \u2014 "),RP=n(SFe,"A",{href:!0});var nDr=s(RP);v1o=r(nDr,"RemBertForMaskedLM"),nDr.forEach(t),T1o=r(SFe," (RemBERT model)"),SFe.forEach(t),F1o=i(N),Wu=n(N,"LI",{});var PFe=s(Wu);vee=n(PFe,"STRONG",{});var sDr=s(vee);C1o=r(sDr,"roberta"),sDr.forEach(t),M1o=r(PFe," \u2014 "),SP=n(PFe,"A",{href:!0});var lDr=s(SP);E1o=r(lDr,"RobertaForMaskedLM"),lDr.forEach(t),y1o=r(PFe," (RoBERTa model)"),PFe.forEach(t),w1o=i(N),Qu=n(N,"LI",{});var $Fe=s(Qu);Tee=n($Fe,"STRONG",{});var iDr=s(Tee);A1o=r(iDr,"roformer"),iDr.forEach(t),L1o=r($Fe," \u2014 "),PP=n($Fe,"A",{href:!0});var dDr=s(PP);B1o=r(dDr,"RoFormerForMaskedLM"),dDr.forEach(t),k1o=r($Fe," (RoFormer model)"),$Fe.forEach(t),x1o=i(N),Hu=n(N,"LI",{});var IFe=s(Hu);Fee=n(IFe,"STRONG",{});var cDr=s(Fee);R1o=r(cDr,"squeezebert"),cDr.forEach(t),S1o=r(IFe," \u2014 "),$P=n(IFe,"A",{href:!0});var fDr=s($P);P1o=r(fDr,"SqueezeBertForMaskedLM"),fDr.forEach(t),$1o=r(IFe," (SqueezeBERT model)"),IFe.forEach(t),I1o=i(N),Uu=n(N,"LI",{});var jFe=s(Uu);Cee=n(jFe,"STRONG",{});var mDr=s(Cee);j1o=r(mDr,"tapas"),mDr.forEach(t),N1o=r(jFe," \u2014 "),IP=n(jFe,"A",{href:!0});var gDr=s(IP);D1o=r(gDr,"TapasForMaskedLM"),gDr.forEach(t),q1o=r(jFe," (TAPAS model)"),jFe.forEach(t),G1o=i(N),Ju=n(N,"LI",{});var NFe=s(Ju);Mee=n(NFe,"STRONG",{});var hDr=s(Mee);O1o=r(hDr,"wav2vec2"),hDr.forEach(t),X1o=r(NFe," \u2014 "),Eee=n(NFe,"CODE",{});var pDr=s(Eee);z1o=r(pDr,"Wav2Vec2ForMaskedLM"),pDr.forEach(t),V1o=r(NFe,"(Wav2Vec2 model)"),NFe.forEach(t),W1o=i(N),Yu=n(N,"LI",{});var DFe=s(Yu);yee=n(DFe,"STRONG",{});var _Dr=s(yee);Q1o=r(_Dr,"xlm"),_Dr.forEach(t),H1o=r(DFe," \u2014 "),jP=n(DFe,"A",{href:!0});var uDr=s(jP);U1o=r(uDr,"XLMWithLMHeadModel"),uDr.forEach(t),J1o=r(DFe," (XLM model)"),DFe.forEach(t),Y1o=i(N),Ku=n(N,"LI",{});var qFe=s(Ku);wee=n(qFe,"STRONG",{});var bDr=s(wee);K1o=r(bDr,"xlm-roberta"),bDr.forEach(t),Z1o=r(qFe," \u2014 "),NP=n(qFe,"A",{href:!0});var vDr=s(NP);e4o=r(vDr,"XLMRobertaForMaskedLM"),vDr.forEach(t),o4o=r(qFe," (XLM-RoBERTa model)"),qFe.forEach(t),r4o=i(N),Zu=n(N,"LI",{});var GFe=s(Zu);Aee=n(GFe,"STRONG",{});var TDr=s(Aee);t4o=r(TDr,"xlm-roberta-xl"),TDr.forEach(t),a4o=r(GFe," \u2014 "),DP=n(GFe,"A",{href:!0});var FDr=s(DP);n4o=r(FDr,"XLMRobertaXLForMaskedLM"),FDr.forEach(t),s4o=r(GFe," (XLM-RoBERTa-XL model)"),GFe.forEach(t),l4o=i(N),e1=n(N,"LI",{});var OFe=s(e1);Lee=n(OFe,"STRONG",{});var CDr=s(Lee);i4o=r(CDr,"yoso"),CDr.forEach(t),d4o=r(OFe," \u2014 "),qP=n(OFe,"A",{href:!0});var MDr=s(qP);c4o=r(MDr,"YosoForMaskedLM"),MDr.forEach(t),f4o=r(OFe," (YOSO model)"),OFe.forEach(t),N.forEach(t),m4o=i(It),o1=n(It,"P",{});var XFe=s(o1);g4o=r(XFe,"The model is set in evaluation mode by default using "),Bee=n(XFe,"CODE",{});var EDr=s(Bee);h4o=r(EDr,"model.eval()"),EDr.forEach(t),p4o=r(XFe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kee=n(XFe,"CODE",{});var yDr=s(kee);_4o=r(yDr,"model.train()"),yDr.forEach(t),XFe.forEach(t),u4o=i(It),xee=n(It,"P",{});var wDr=s(xee);b4o=r(wDr,"Examples:"),wDr.forEach(t),v4o=i(It),m(iE.$$.fragment,It),It.forEach(t),zs.forEach(t),ELe=i(d),Ki=n(d,"H2",{class:!0});var xBe=s(Ki);r1=n(xBe,"A",{id:!0,class:!0,href:!0});var ADr=s(r1);Ree=n(ADr,"SPAN",{});var LDr=s(Ree);m(dE.$$.fragment,LDr),LDr.forEach(t),ADr.forEach(t),T4o=i(xBe),See=n(xBe,"SPAN",{});var BDr=s(See);F4o=r(BDr,"AutoModelForSeq2SeqLM"),BDr.forEach(t),xBe.forEach(t),yLe=i(d),Uo=n(d,"DIV",{class:!0});var Ws=s(Uo);m(cE.$$.fragment,Ws),C4o=i(Ws),Zi=n(Ws,"P",{});var ez=s(Zi);M4o=r(ez,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Pee=n(ez,"CODE",{});var kDr=s(Pee);E4o=r(kDr,"from_pretrained()"),kDr.forEach(t),y4o=r(ez,"class method or the "),$ee=n(ez,"CODE",{});var xDr=s($ee);w4o=r(xDr,"from_config()"),xDr.forEach(t),A4o=r(ez,`class
method.`),ez.forEach(t),L4o=i(Ws),fE=n(Ws,"P",{});var RBe=s(fE);B4o=r(RBe,"This class cannot be instantiated directly using "),Iee=n(RBe,"CODE",{});var RDr=s(Iee);k4o=r(RDr,"__init__()"),RDr.forEach(t),x4o=r(RBe," (throws an error)."),RBe.forEach(t),R4o=i(Ws),Or=n(Ws,"DIV",{class:!0});var Qs=s(Or);m(mE.$$.fragment,Qs),S4o=i(Qs),jee=n(Qs,"P",{});var SDr=s(jee);P4o=r(SDr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SDr.forEach(t),$4o=i(Qs),ed=n(Qs,"P",{});var oz=s(ed);I4o=r(oz,`Note:
Loading a model from its configuration file does `),Nee=n(oz,"STRONG",{});var PDr=s(Nee);j4o=r(PDr,"not"),PDr.forEach(t),N4o=r(oz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dee=n(oz,"CODE",{});var $Dr=s(Dee);D4o=r($Dr,"from_pretrained()"),$Dr.forEach(t),q4o=r(oz,"to load the model weights."),oz.forEach(t),G4o=i(Qs),qee=n(Qs,"P",{});var IDr=s(qee);O4o=r(IDr,"Examples:"),IDr.forEach(t),X4o=i(Qs),m(gE.$$.fragment,Qs),Qs.forEach(t),z4o=i(Ws),Pe=n(Ws,"DIV",{class:!0});var jt=s(Pe);m(hE.$$.fragment,jt),V4o=i(jt),Gee=n(jt,"P",{});var jDr=s(Gee);W4o=r(jDr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jDr.forEach(t),Q4o=i(jt),Xa=n(jt,"P",{});var fC=s(Xa);H4o=r(fC,"The model class to instantiate is selected based on the "),Oee=n(fC,"CODE",{});var NDr=s(Oee);U4o=r(NDr,"model_type"),NDr.forEach(t),J4o=r(fC,` property of the config object (either
passed as an argument or loaded from `),Xee=n(fC,"CODE",{});var DDr=s(Xee);Y4o=r(DDr,"pretrained_model_name_or_path"),DDr.forEach(t),K4o=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zee=n(fC,"CODE",{});var qDr=s(zee);Z4o=r(qDr,"pretrained_model_name_or_path"),qDr.forEach(t),ebo=r(fC,":"),fC.forEach(t),obo=i(jt),ae=n(jt,"UL",{});var le=s(ae);t1=n(le,"LI",{});var zFe=s(t1);Vee=n(zFe,"STRONG",{});var GDr=s(Vee);rbo=r(GDr,"bart"),GDr.forEach(t),tbo=r(zFe," \u2014 "),GP=n(zFe,"A",{href:!0});var ODr=s(GP);abo=r(ODr,"BartForConditionalGeneration"),ODr.forEach(t),nbo=r(zFe," (BART model)"),zFe.forEach(t),sbo=i(le),a1=n(le,"LI",{});var VFe=s(a1);Wee=n(VFe,"STRONG",{});var XDr=s(Wee);lbo=r(XDr,"bigbird_pegasus"),XDr.forEach(t),ibo=r(VFe," \u2014 "),OP=n(VFe,"A",{href:!0});var zDr=s(OP);dbo=r(zDr,"BigBirdPegasusForConditionalGeneration"),zDr.forEach(t),cbo=r(VFe," (BigBirdPegasus model)"),VFe.forEach(t),fbo=i(le),n1=n(le,"LI",{});var WFe=s(n1);Qee=n(WFe,"STRONG",{});var VDr=s(Qee);mbo=r(VDr,"blenderbot"),VDr.forEach(t),gbo=r(WFe," \u2014 "),XP=n(WFe,"A",{href:!0});var WDr=s(XP);hbo=r(WDr,"BlenderbotForConditionalGeneration"),WDr.forEach(t),pbo=r(WFe," (Blenderbot model)"),WFe.forEach(t),_bo=i(le),s1=n(le,"LI",{});var QFe=s(s1);Hee=n(QFe,"STRONG",{});var QDr=s(Hee);ubo=r(QDr,"blenderbot-small"),QDr.forEach(t),bbo=r(QFe," \u2014 "),zP=n(QFe,"A",{href:!0});var HDr=s(zP);vbo=r(HDr,"BlenderbotSmallForConditionalGeneration"),HDr.forEach(t),Tbo=r(QFe," (BlenderbotSmall model)"),QFe.forEach(t),Fbo=i(le),l1=n(le,"LI",{});var HFe=s(l1);Uee=n(HFe,"STRONG",{});var UDr=s(Uee);Cbo=r(UDr,"encoder-decoder"),UDr.forEach(t),Mbo=r(HFe," \u2014 "),VP=n(HFe,"A",{href:!0});var JDr=s(VP);Ebo=r(JDr,"EncoderDecoderModel"),JDr.forEach(t),ybo=r(HFe," (Encoder decoder model)"),HFe.forEach(t),wbo=i(le),i1=n(le,"LI",{});var UFe=s(i1);Jee=n(UFe,"STRONG",{});var YDr=s(Jee);Abo=r(YDr,"fsmt"),YDr.forEach(t),Lbo=r(UFe," \u2014 "),WP=n(UFe,"A",{href:!0});var KDr=s(WP);Bbo=r(KDr,"FSMTForConditionalGeneration"),KDr.forEach(t),kbo=r(UFe," (FairSeq Machine-Translation model)"),UFe.forEach(t),xbo=i(le),d1=n(le,"LI",{});var JFe=s(d1);Yee=n(JFe,"STRONG",{});var ZDr=s(Yee);Rbo=r(ZDr,"led"),ZDr.forEach(t),Sbo=r(JFe," \u2014 "),QP=n(JFe,"A",{href:!0});var eqr=s(QP);Pbo=r(eqr,"LEDForConditionalGeneration"),eqr.forEach(t),$bo=r(JFe," (LED model)"),JFe.forEach(t),Ibo=i(le),c1=n(le,"LI",{});var YFe=s(c1);Kee=n(YFe,"STRONG",{});var oqr=s(Kee);jbo=r(oqr,"m2m_100"),oqr.forEach(t),Nbo=r(YFe," \u2014 "),HP=n(YFe,"A",{href:!0});var rqr=s(HP);Dbo=r(rqr,"M2M100ForConditionalGeneration"),rqr.forEach(t),qbo=r(YFe," (M2M100 model)"),YFe.forEach(t),Gbo=i(le),f1=n(le,"LI",{});var KFe=s(f1);Zee=n(KFe,"STRONG",{});var tqr=s(Zee);Obo=r(tqr,"marian"),tqr.forEach(t),Xbo=r(KFe," \u2014 "),UP=n(KFe,"A",{href:!0});var aqr=s(UP);zbo=r(aqr,"MarianMTModel"),aqr.forEach(t),Vbo=r(KFe," (Marian model)"),KFe.forEach(t),Wbo=i(le),m1=n(le,"LI",{});var ZFe=s(m1);eoe=n(ZFe,"STRONG",{});var nqr=s(eoe);Qbo=r(nqr,"mbart"),nqr.forEach(t),Hbo=r(ZFe," \u2014 "),JP=n(ZFe,"A",{href:!0});var sqr=s(JP);Ubo=r(sqr,"MBartForConditionalGeneration"),sqr.forEach(t),Jbo=r(ZFe," (mBART model)"),ZFe.forEach(t),Ybo=i(le),g1=n(le,"LI",{});var eCe=s(g1);ooe=n(eCe,"STRONG",{});var lqr=s(ooe);Kbo=r(lqr,"mt5"),lqr.forEach(t),Zbo=r(eCe," \u2014 "),YP=n(eCe,"A",{href:!0});var iqr=s(YP);e5o=r(iqr,"MT5ForConditionalGeneration"),iqr.forEach(t),o5o=r(eCe," (mT5 model)"),eCe.forEach(t),r5o=i(le),h1=n(le,"LI",{});var oCe=s(h1);roe=n(oCe,"STRONG",{});var dqr=s(roe);t5o=r(dqr,"pegasus"),dqr.forEach(t),a5o=r(oCe," \u2014 "),KP=n(oCe,"A",{href:!0});var cqr=s(KP);n5o=r(cqr,"PegasusForConditionalGeneration"),cqr.forEach(t),s5o=r(oCe," (Pegasus model)"),oCe.forEach(t),l5o=i(le),p1=n(le,"LI",{});var rCe=s(p1);toe=n(rCe,"STRONG",{});var fqr=s(toe);i5o=r(fqr,"plbart"),fqr.forEach(t),d5o=r(rCe," \u2014 "),ZP=n(rCe,"A",{href:!0});var mqr=s(ZP);c5o=r(mqr,"PLBartForConditionalGeneration"),mqr.forEach(t),f5o=r(rCe," (PLBart model)"),rCe.forEach(t),m5o=i(le),_1=n(le,"LI",{});var tCe=s(_1);aoe=n(tCe,"STRONG",{});var gqr=s(aoe);g5o=r(gqr,"prophetnet"),gqr.forEach(t),h5o=r(tCe," \u2014 "),e$=n(tCe,"A",{href:!0});var hqr=s(e$);p5o=r(hqr,"ProphetNetForConditionalGeneration"),hqr.forEach(t),_5o=r(tCe," (ProphetNet model)"),tCe.forEach(t),u5o=i(le),u1=n(le,"LI",{});var aCe=s(u1);noe=n(aCe,"STRONG",{});var pqr=s(noe);b5o=r(pqr,"t5"),pqr.forEach(t),v5o=r(aCe," \u2014 "),o$=n(aCe,"A",{href:!0});var _qr=s(o$);T5o=r(_qr,"T5ForConditionalGeneration"),_qr.forEach(t),F5o=r(aCe," (T5 model)"),aCe.forEach(t),C5o=i(le),b1=n(le,"LI",{});var nCe=s(b1);soe=n(nCe,"STRONG",{});var uqr=s(soe);M5o=r(uqr,"xlm-prophetnet"),uqr.forEach(t),E5o=r(nCe," \u2014 "),r$=n(nCe,"A",{href:!0});var bqr=s(r$);y5o=r(bqr,"XLMProphetNetForConditionalGeneration"),bqr.forEach(t),w5o=r(nCe," (XLMProphetNet model)"),nCe.forEach(t),le.forEach(t),A5o=i(jt),v1=n(jt,"P",{});var sCe=s(v1);L5o=r(sCe,"The model is set in evaluation mode by default using "),loe=n(sCe,"CODE",{});var vqr=s(loe);B5o=r(vqr,"model.eval()"),vqr.forEach(t),k5o=r(sCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ioe=n(sCe,"CODE",{});var Tqr=s(ioe);x5o=r(Tqr,"model.train()"),Tqr.forEach(t),sCe.forEach(t),R5o=i(jt),doe=n(jt,"P",{});var Fqr=s(doe);S5o=r(Fqr,"Examples:"),Fqr.forEach(t),P5o=i(jt),m(pE.$$.fragment,jt),jt.forEach(t),Ws.forEach(t),wLe=i(d),od=n(d,"H2",{class:!0});var SBe=s(od);T1=n(SBe,"A",{id:!0,class:!0,href:!0});var Cqr=s(T1);coe=n(Cqr,"SPAN",{});var Mqr=s(coe);m(_E.$$.fragment,Mqr),Mqr.forEach(t),Cqr.forEach(t),$5o=i(SBe),foe=n(SBe,"SPAN",{});var Eqr=s(foe);I5o=r(Eqr,"AutoModelForSequenceClassification"),Eqr.forEach(t),SBe.forEach(t),ALe=i(d),Jo=n(d,"DIV",{class:!0});var Hs=s(Jo);m(uE.$$.fragment,Hs),j5o=i(Hs),rd=n(Hs,"P",{});var rz=s(rd);N5o=r(rz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),moe=n(rz,"CODE",{});var yqr=s(moe);D5o=r(yqr,"from_pretrained()"),yqr.forEach(t),q5o=r(rz,"class method or the "),goe=n(rz,"CODE",{});var wqr=s(goe);G5o=r(wqr,"from_config()"),wqr.forEach(t),O5o=r(rz,`class
method.`),rz.forEach(t),X5o=i(Hs),bE=n(Hs,"P",{});var PBe=s(bE);z5o=r(PBe,"This class cannot be instantiated directly using "),hoe=n(PBe,"CODE",{});var Aqr=s(hoe);V5o=r(Aqr,"__init__()"),Aqr.forEach(t),W5o=r(PBe," (throws an error)."),PBe.forEach(t),Q5o=i(Hs),Xr=n(Hs,"DIV",{class:!0});var Us=s(Xr);m(vE.$$.fragment,Us),H5o=i(Us),poe=n(Us,"P",{});var Lqr=s(poe);U5o=r(Lqr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Lqr.forEach(t),J5o=i(Us),td=n(Us,"P",{});var tz=s(td);Y5o=r(tz,`Note:
Loading a model from its configuration file does `),_oe=n(tz,"STRONG",{});var Bqr=s(_oe);K5o=r(Bqr,"not"),Bqr.forEach(t),Z5o=r(tz,` load the model weights. It only affects the
model\u2019s configuration. Use `),uoe=n(tz,"CODE",{});var kqr=s(uoe);e2o=r(kqr,"from_pretrained()"),kqr.forEach(t),o2o=r(tz,"to load the model weights."),tz.forEach(t),r2o=i(Us),boe=n(Us,"P",{});var xqr=s(boe);t2o=r(xqr,"Examples:"),xqr.forEach(t),a2o=i(Us),m(TE.$$.fragment,Us),Us.forEach(t),n2o=i(Hs),$e=n(Hs,"DIV",{class:!0});var Nt=s($e);m(FE.$$.fragment,Nt),s2o=i(Nt),voe=n(Nt,"P",{});var Rqr=s(voe);l2o=r(Rqr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Rqr.forEach(t),i2o=i(Nt),za=n(Nt,"P",{});var mC=s(za);d2o=r(mC,"The model class to instantiate is selected based on the "),Toe=n(mC,"CODE",{});var Sqr=s(Toe);c2o=r(Sqr,"model_type"),Sqr.forEach(t),f2o=r(mC,` property of the config object (either
passed as an argument or loaded from `),Foe=n(mC,"CODE",{});var Pqr=s(Foe);m2o=r(Pqr,"pretrained_model_name_or_path"),Pqr.forEach(t),g2o=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Coe=n(mC,"CODE",{});var $qr=s(Coe);h2o=r($qr,"pretrained_model_name_or_path"),$qr.forEach(t),p2o=r(mC,":"),mC.forEach(t),_2o=i(Nt),A=n(Nt,"UL",{});var L=s(A);F1=n(L,"LI",{});var lCe=s(F1);Moe=n(lCe,"STRONG",{});var Iqr=s(Moe);u2o=r(Iqr,"albert"),Iqr.forEach(t),b2o=r(lCe," \u2014 "),t$=n(lCe,"A",{href:!0});var jqr=s(t$);v2o=r(jqr,"AlbertForSequenceClassification"),jqr.forEach(t),T2o=r(lCe," (ALBERT model)"),lCe.forEach(t),F2o=i(L),C1=n(L,"LI",{});var iCe=s(C1);Eoe=n(iCe,"STRONG",{});var Nqr=s(Eoe);C2o=r(Nqr,"bart"),Nqr.forEach(t),M2o=r(iCe," \u2014 "),a$=n(iCe,"A",{href:!0});var Dqr=s(a$);E2o=r(Dqr,"BartForSequenceClassification"),Dqr.forEach(t),y2o=r(iCe," (BART model)"),iCe.forEach(t),w2o=i(L),M1=n(L,"LI",{});var dCe=s(M1);yoe=n(dCe,"STRONG",{});var qqr=s(yoe);A2o=r(qqr,"bert"),qqr.forEach(t),L2o=r(dCe," \u2014 "),n$=n(dCe,"A",{href:!0});var Gqr=s(n$);B2o=r(Gqr,"BertForSequenceClassification"),Gqr.forEach(t),k2o=r(dCe," (BERT model)"),dCe.forEach(t),x2o=i(L),E1=n(L,"LI",{});var cCe=s(E1);woe=n(cCe,"STRONG",{});var Oqr=s(woe);R2o=r(Oqr,"big_bird"),Oqr.forEach(t),S2o=r(cCe," \u2014 "),s$=n(cCe,"A",{href:!0});var Xqr=s(s$);P2o=r(Xqr,"BigBirdForSequenceClassification"),Xqr.forEach(t),$2o=r(cCe," (BigBird model)"),cCe.forEach(t),I2o=i(L),y1=n(L,"LI",{});var fCe=s(y1);Aoe=n(fCe,"STRONG",{});var zqr=s(Aoe);j2o=r(zqr,"bigbird_pegasus"),zqr.forEach(t),N2o=r(fCe," \u2014 "),l$=n(fCe,"A",{href:!0});var Vqr=s(l$);D2o=r(Vqr,"BigBirdPegasusForSequenceClassification"),Vqr.forEach(t),q2o=r(fCe," (BigBirdPegasus model)"),fCe.forEach(t),G2o=i(L),w1=n(L,"LI",{});var mCe=s(w1);Loe=n(mCe,"STRONG",{});var Wqr=s(Loe);O2o=r(Wqr,"camembert"),Wqr.forEach(t),X2o=r(mCe," \u2014 "),i$=n(mCe,"A",{href:!0});var Qqr=s(i$);z2o=r(Qqr,"CamembertForSequenceClassification"),Qqr.forEach(t),V2o=r(mCe," (CamemBERT model)"),mCe.forEach(t),W2o=i(L),A1=n(L,"LI",{});var gCe=s(A1);Boe=n(gCe,"STRONG",{});var Hqr=s(Boe);Q2o=r(Hqr,"canine"),Hqr.forEach(t),H2o=r(gCe," \u2014 "),d$=n(gCe,"A",{href:!0});var Uqr=s(d$);U2o=r(Uqr,"CanineForSequenceClassification"),Uqr.forEach(t),J2o=r(gCe," (Canine model)"),gCe.forEach(t),Y2o=i(L),L1=n(L,"LI",{});var hCe=s(L1);koe=n(hCe,"STRONG",{});var Jqr=s(koe);K2o=r(Jqr,"convbert"),Jqr.forEach(t),Z2o=r(hCe," \u2014 "),c$=n(hCe,"A",{href:!0});var Yqr=s(c$);evo=r(Yqr,"ConvBertForSequenceClassification"),Yqr.forEach(t),ovo=r(hCe," (ConvBERT model)"),hCe.forEach(t),rvo=i(L),B1=n(L,"LI",{});var pCe=s(B1);xoe=n(pCe,"STRONG",{});var Kqr=s(xoe);tvo=r(Kqr,"ctrl"),Kqr.forEach(t),avo=r(pCe," \u2014 "),f$=n(pCe,"A",{href:!0});var Zqr=s(f$);nvo=r(Zqr,"CTRLForSequenceClassification"),Zqr.forEach(t),svo=r(pCe," (CTRL model)"),pCe.forEach(t),lvo=i(L),k1=n(L,"LI",{});var _Ce=s(k1);Roe=n(_Ce,"STRONG",{});var eGr=s(Roe);ivo=r(eGr,"deberta"),eGr.forEach(t),dvo=r(_Ce," \u2014 "),m$=n(_Ce,"A",{href:!0});var oGr=s(m$);cvo=r(oGr,"DebertaForSequenceClassification"),oGr.forEach(t),fvo=r(_Ce," (DeBERTa model)"),_Ce.forEach(t),mvo=i(L),x1=n(L,"LI",{});var uCe=s(x1);Soe=n(uCe,"STRONG",{});var rGr=s(Soe);gvo=r(rGr,"deberta-v2"),rGr.forEach(t),hvo=r(uCe," \u2014 "),g$=n(uCe,"A",{href:!0});var tGr=s(g$);pvo=r(tGr,"DebertaV2ForSequenceClassification"),tGr.forEach(t),_vo=r(uCe," (DeBERTa-v2 model)"),uCe.forEach(t),uvo=i(L),R1=n(L,"LI",{});var bCe=s(R1);Poe=n(bCe,"STRONG",{});var aGr=s(Poe);bvo=r(aGr,"distilbert"),aGr.forEach(t),vvo=r(bCe," \u2014 "),h$=n(bCe,"A",{href:!0});var nGr=s(h$);Tvo=r(nGr,"DistilBertForSequenceClassification"),nGr.forEach(t),Fvo=r(bCe," (DistilBERT model)"),bCe.forEach(t),Cvo=i(L),S1=n(L,"LI",{});var vCe=s(S1);$oe=n(vCe,"STRONG",{});var sGr=s($oe);Mvo=r(sGr,"electra"),sGr.forEach(t),Evo=r(vCe," \u2014 "),p$=n(vCe,"A",{href:!0});var lGr=s(p$);yvo=r(lGr,"ElectraForSequenceClassification"),lGr.forEach(t),wvo=r(vCe," (ELECTRA model)"),vCe.forEach(t),Avo=i(L),P1=n(L,"LI",{});var TCe=s(P1);Ioe=n(TCe,"STRONG",{});var iGr=s(Ioe);Lvo=r(iGr,"flaubert"),iGr.forEach(t),Bvo=r(TCe," \u2014 "),_$=n(TCe,"A",{href:!0});var dGr=s(_$);kvo=r(dGr,"FlaubertForSequenceClassification"),dGr.forEach(t),xvo=r(TCe," (FlauBERT model)"),TCe.forEach(t),Rvo=i(L),$1=n(L,"LI",{});var FCe=s($1);joe=n(FCe,"STRONG",{});var cGr=s(joe);Svo=r(cGr,"fnet"),cGr.forEach(t),Pvo=r(FCe," \u2014 "),u$=n(FCe,"A",{href:!0});var fGr=s(u$);$vo=r(fGr,"FNetForSequenceClassification"),fGr.forEach(t),Ivo=r(FCe," (FNet model)"),FCe.forEach(t),jvo=i(L),I1=n(L,"LI",{});var CCe=s(I1);Noe=n(CCe,"STRONG",{});var mGr=s(Noe);Nvo=r(mGr,"funnel"),mGr.forEach(t),Dvo=r(CCe," \u2014 "),b$=n(CCe,"A",{href:!0});var gGr=s(b$);qvo=r(gGr,"FunnelForSequenceClassification"),gGr.forEach(t),Gvo=r(CCe," (Funnel Transformer model)"),CCe.forEach(t),Ovo=i(L),j1=n(L,"LI",{});var MCe=s(j1);Doe=n(MCe,"STRONG",{});var hGr=s(Doe);Xvo=r(hGr,"gpt2"),hGr.forEach(t),zvo=r(MCe," \u2014 "),v$=n(MCe,"A",{href:!0});var pGr=s(v$);Vvo=r(pGr,"GPT2ForSequenceClassification"),pGr.forEach(t),Wvo=r(MCe," (OpenAI GPT-2 model)"),MCe.forEach(t),Qvo=i(L),N1=n(L,"LI",{});var ECe=s(N1);qoe=n(ECe,"STRONG",{});var _Gr=s(qoe);Hvo=r(_Gr,"gpt_neo"),_Gr.forEach(t),Uvo=r(ECe," \u2014 "),T$=n(ECe,"A",{href:!0});var uGr=s(T$);Jvo=r(uGr,"GPTNeoForSequenceClassification"),uGr.forEach(t),Yvo=r(ECe," (GPT Neo model)"),ECe.forEach(t),Kvo=i(L),D1=n(L,"LI",{});var yCe=s(D1);Goe=n(yCe,"STRONG",{});var bGr=s(Goe);Zvo=r(bGr,"gptj"),bGr.forEach(t),eTo=r(yCe," \u2014 "),F$=n(yCe,"A",{href:!0});var vGr=s(F$);oTo=r(vGr,"GPTJForSequenceClassification"),vGr.forEach(t),rTo=r(yCe," (GPT-J model)"),yCe.forEach(t),tTo=i(L),q1=n(L,"LI",{});var wCe=s(q1);Ooe=n(wCe,"STRONG",{});var TGr=s(Ooe);aTo=r(TGr,"ibert"),TGr.forEach(t),nTo=r(wCe," \u2014 "),C$=n(wCe,"A",{href:!0});var FGr=s(C$);sTo=r(FGr,"IBertForSequenceClassification"),FGr.forEach(t),lTo=r(wCe," (I-BERT model)"),wCe.forEach(t),iTo=i(L),G1=n(L,"LI",{});var ACe=s(G1);Xoe=n(ACe,"STRONG",{});var CGr=s(Xoe);dTo=r(CGr,"layoutlm"),CGr.forEach(t),cTo=r(ACe," \u2014 "),M$=n(ACe,"A",{href:!0});var MGr=s(M$);fTo=r(MGr,"LayoutLMForSequenceClassification"),MGr.forEach(t),mTo=r(ACe," (LayoutLM model)"),ACe.forEach(t),gTo=i(L),O1=n(L,"LI",{});var LCe=s(O1);zoe=n(LCe,"STRONG",{});var EGr=s(zoe);hTo=r(EGr,"layoutlmv2"),EGr.forEach(t),pTo=r(LCe," \u2014 "),E$=n(LCe,"A",{href:!0});var yGr=s(E$);_To=r(yGr,"LayoutLMv2ForSequenceClassification"),yGr.forEach(t),uTo=r(LCe," (LayoutLMv2 model)"),LCe.forEach(t),bTo=i(L),X1=n(L,"LI",{});var BCe=s(X1);Voe=n(BCe,"STRONG",{});var wGr=s(Voe);vTo=r(wGr,"led"),wGr.forEach(t),TTo=r(BCe," \u2014 "),y$=n(BCe,"A",{href:!0});var AGr=s(y$);FTo=r(AGr,"LEDForSequenceClassification"),AGr.forEach(t),CTo=r(BCe," (LED model)"),BCe.forEach(t),MTo=i(L),z1=n(L,"LI",{});var kCe=s(z1);Woe=n(kCe,"STRONG",{});var LGr=s(Woe);ETo=r(LGr,"longformer"),LGr.forEach(t),yTo=r(kCe," \u2014 "),w$=n(kCe,"A",{href:!0});var BGr=s(w$);wTo=r(BGr,"LongformerForSequenceClassification"),BGr.forEach(t),ATo=r(kCe," (Longformer model)"),kCe.forEach(t),LTo=i(L),V1=n(L,"LI",{});var xCe=s(V1);Qoe=n(xCe,"STRONG",{});var kGr=s(Qoe);BTo=r(kGr,"mbart"),kGr.forEach(t),kTo=r(xCe," \u2014 "),A$=n(xCe,"A",{href:!0});var xGr=s(A$);xTo=r(xGr,"MBartForSequenceClassification"),xGr.forEach(t),RTo=r(xCe," (mBART model)"),xCe.forEach(t),STo=i(L),W1=n(L,"LI",{});var RCe=s(W1);Hoe=n(RCe,"STRONG",{});var RGr=s(Hoe);PTo=r(RGr,"megatron-bert"),RGr.forEach(t),$To=r(RCe," \u2014 "),L$=n(RCe,"A",{href:!0});var SGr=s(L$);ITo=r(SGr,"MegatronBertForSequenceClassification"),SGr.forEach(t),jTo=r(RCe," (MegatronBert model)"),RCe.forEach(t),NTo=i(L),Q1=n(L,"LI",{});var SCe=s(Q1);Uoe=n(SCe,"STRONG",{});var PGr=s(Uoe);DTo=r(PGr,"mobilebert"),PGr.forEach(t),qTo=r(SCe," \u2014 "),B$=n(SCe,"A",{href:!0});var $Gr=s(B$);GTo=r($Gr,"MobileBertForSequenceClassification"),$Gr.forEach(t),OTo=r(SCe," (MobileBERT model)"),SCe.forEach(t),XTo=i(L),H1=n(L,"LI",{});var PCe=s(H1);Joe=n(PCe,"STRONG",{});var IGr=s(Joe);zTo=r(IGr,"mpnet"),IGr.forEach(t),VTo=r(PCe," \u2014 "),k$=n(PCe,"A",{href:!0});var jGr=s(k$);WTo=r(jGr,"MPNetForSequenceClassification"),jGr.forEach(t),QTo=r(PCe," (MPNet model)"),PCe.forEach(t),HTo=i(L),U1=n(L,"LI",{});var $Ce=s(U1);Yoe=n($Ce,"STRONG",{});var NGr=s(Yoe);UTo=r(NGr,"nystromformer"),NGr.forEach(t),JTo=r($Ce," \u2014 "),x$=n($Ce,"A",{href:!0});var DGr=s(x$);YTo=r(DGr,"NystromformerForSequenceClassification"),DGr.forEach(t),KTo=r($Ce," (Nystromformer model)"),$Ce.forEach(t),ZTo=i(L),J1=n(L,"LI",{});var ICe=s(J1);Koe=n(ICe,"STRONG",{});var qGr=s(Koe);e7o=r(qGr,"openai-gpt"),qGr.forEach(t),o7o=r(ICe," \u2014 "),R$=n(ICe,"A",{href:!0});var GGr=s(R$);r7o=r(GGr,"OpenAIGPTForSequenceClassification"),GGr.forEach(t),t7o=r(ICe," (OpenAI GPT model)"),ICe.forEach(t),a7o=i(L),Y1=n(L,"LI",{});var jCe=s(Y1);Zoe=n(jCe,"STRONG",{});var OGr=s(Zoe);n7o=r(OGr,"perceiver"),OGr.forEach(t),s7o=r(jCe," \u2014 "),S$=n(jCe,"A",{href:!0});var XGr=s(S$);l7o=r(XGr,"PerceiverForSequenceClassification"),XGr.forEach(t),i7o=r(jCe," (Perceiver model)"),jCe.forEach(t),d7o=i(L),K1=n(L,"LI",{});var NCe=s(K1);ere=n(NCe,"STRONG",{});var zGr=s(ere);c7o=r(zGr,"plbart"),zGr.forEach(t),f7o=r(NCe," \u2014 "),P$=n(NCe,"A",{href:!0});var VGr=s(P$);m7o=r(VGr,"PLBartForSequenceClassification"),VGr.forEach(t),g7o=r(NCe," (PLBart model)"),NCe.forEach(t),h7o=i(L),Z1=n(L,"LI",{});var DCe=s(Z1);ore=n(DCe,"STRONG",{});var WGr=s(ore);p7o=r(WGr,"qdqbert"),WGr.forEach(t),_7o=r(DCe," \u2014 "),$$=n(DCe,"A",{href:!0});var QGr=s($$);u7o=r(QGr,"QDQBertForSequenceClassification"),QGr.forEach(t),b7o=r(DCe," (QDQBert model)"),DCe.forEach(t),v7o=i(L),e4=n(L,"LI",{});var qCe=s(e4);rre=n(qCe,"STRONG",{});var HGr=s(rre);T7o=r(HGr,"reformer"),HGr.forEach(t),F7o=r(qCe," \u2014 "),I$=n(qCe,"A",{href:!0});var UGr=s(I$);C7o=r(UGr,"ReformerForSequenceClassification"),UGr.forEach(t),M7o=r(qCe," (Reformer model)"),qCe.forEach(t),E7o=i(L),o4=n(L,"LI",{});var GCe=s(o4);tre=n(GCe,"STRONG",{});var JGr=s(tre);y7o=r(JGr,"rembert"),JGr.forEach(t),w7o=r(GCe," \u2014 "),j$=n(GCe,"A",{href:!0});var YGr=s(j$);A7o=r(YGr,"RemBertForSequenceClassification"),YGr.forEach(t),L7o=r(GCe," (RemBERT model)"),GCe.forEach(t),B7o=i(L),r4=n(L,"LI",{});var OCe=s(r4);are=n(OCe,"STRONG",{});var KGr=s(are);k7o=r(KGr,"roberta"),KGr.forEach(t),x7o=r(OCe," \u2014 "),N$=n(OCe,"A",{href:!0});var ZGr=s(N$);R7o=r(ZGr,"RobertaForSequenceClassification"),ZGr.forEach(t),S7o=r(OCe," (RoBERTa model)"),OCe.forEach(t),P7o=i(L),t4=n(L,"LI",{});var XCe=s(t4);nre=n(XCe,"STRONG",{});var eOr=s(nre);$7o=r(eOr,"roformer"),eOr.forEach(t),I7o=r(XCe," \u2014 "),D$=n(XCe,"A",{href:!0});var oOr=s(D$);j7o=r(oOr,"RoFormerForSequenceClassification"),oOr.forEach(t),N7o=r(XCe," (RoFormer model)"),XCe.forEach(t),D7o=i(L),a4=n(L,"LI",{});var zCe=s(a4);sre=n(zCe,"STRONG",{});var rOr=s(sre);q7o=r(rOr,"squeezebert"),rOr.forEach(t),G7o=r(zCe," \u2014 "),q$=n(zCe,"A",{href:!0});var tOr=s(q$);O7o=r(tOr,"SqueezeBertForSequenceClassification"),tOr.forEach(t),X7o=r(zCe," (SqueezeBERT model)"),zCe.forEach(t),z7o=i(L),n4=n(L,"LI",{});var VCe=s(n4);lre=n(VCe,"STRONG",{});var aOr=s(lre);V7o=r(aOr,"tapas"),aOr.forEach(t),W7o=r(VCe," \u2014 "),G$=n(VCe,"A",{href:!0});var nOr=s(G$);Q7o=r(nOr,"TapasForSequenceClassification"),nOr.forEach(t),H7o=r(VCe," (TAPAS model)"),VCe.forEach(t),U7o=i(L),s4=n(L,"LI",{});var WCe=s(s4);ire=n(WCe,"STRONG",{});var sOr=s(ire);J7o=r(sOr,"transfo-xl"),sOr.forEach(t),Y7o=r(WCe," \u2014 "),O$=n(WCe,"A",{href:!0});var lOr=s(O$);K7o=r(lOr,"TransfoXLForSequenceClassification"),lOr.forEach(t),Z7o=r(WCe," (Transformer-XL model)"),WCe.forEach(t),e8o=i(L),l4=n(L,"LI",{});var QCe=s(l4);dre=n(QCe,"STRONG",{});var iOr=s(dre);o8o=r(iOr,"xlm"),iOr.forEach(t),r8o=r(QCe," \u2014 "),X$=n(QCe,"A",{href:!0});var dOr=s(X$);t8o=r(dOr,"XLMForSequenceClassification"),dOr.forEach(t),a8o=r(QCe," (XLM model)"),QCe.forEach(t),n8o=i(L),i4=n(L,"LI",{});var HCe=s(i4);cre=n(HCe,"STRONG",{});var cOr=s(cre);s8o=r(cOr,"xlm-roberta"),cOr.forEach(t),l8o=r(HCe," \u2014 "),z$=n(HCe,"A",{href:!0});var fOr=s(z$);i8o=r(fOr,"XLMRobertaForSequenceClassification"),fOr.forEach(t),d8o=r(HCe," (XLM-RoBERTa model)"),HCe.forEach(t),c8o=i(L),d4=n(L,"LI",{});var UCe=s(d4);fre=n(UCe,"STRONG",{});var mOr=s(fre);f8o=r(mOr,"xlm-roberta-xl"),mOr.forEach(t),m8o=r(UCe," \u2014 "),V$=n(UCe,"A",{href:!0});var gOr=s(V$);g8o=r(gOr,"XLMRobertaXLForSequenceClassification"),gOr.forEach(t),h8o=r(UCe," (XLM-RoBERTa-XL model)"),UCe.forEach(t),p8o=i(L),c4=n(L,"LI",{});var JCe=s(c4);mre=n(JCe,"STRONG",{});var hOr=s(mre);_8o=r(hOr,"xlnet"),hOr.forEach(t),u8o=r(JCe," \u2014 "),W$=n(JCe,"A",{href:!0});var pOr=s(W$);b8o=r(pOr,"XLNetForSequenceClassification"),pOr.forEach(t),v8o=r(JCe," (XLNet model)"),JCe.forEach(t),T8o=i(L),f4=n(L,"LI",{});var YCe=s(f4);gre=n(YCe,"STRONG",{});var _Or=s(gre);F8o=r(_Or,"yoso"),_Or.forEach(t),C8o=r(YCe," \u2014 "),Q$=n(YCe,"A",{href:!0});var uOr=s(Q$);M8o=r(uOr,"YosoForSequenceClassification"),uOr.forEach(t),E8o=r(YCe," (YOSO model)"),YCe.forEach(t),L.forEach(t),y8o=i(Nt),m4=n(Nt,"P",{});var KCe=s(m4);w8o=r(KCe,"The model is set in evaluation mode by default using "),hre=n(KCe,"CODE",{});var bOr=s(hre);A8o=r(bOr,"model.eval()"),bOr.forEach(t),L8o=r(KCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pre=n(KCe,"CODE",{});var vOr=s(pre);B8o=r(vOr,"model.train()"),vOr.forEach(t),KCe.forEach(t),k8o=i(Nt),_re=n(Nt,"P",{});var TOr=s(_re);x8o=r(TOr,"Examples:"),TOr.forEach(t),R8o=i(Nt),m(CE.$$.fragment,Nt),Nt.forEach(t),Hs.forEach(t),LLe=i(d),ad=n(d,"H2",{class:!0});var $Be=s(ad);g4=n($Be,"A",{id:!0,class:!0,href:!0});var FOr=s(g4);ure=n(FOr,"SPAN",{});var COr=s(ure);m(ME.$$.fragment,COr),COr.forEach(t),FOr.forEach(t),S8o=i($Be),bre=n($Be,"SPAN",{});var MOr=s(bre);P8o=r(MOr,"AutoModelForMultipleChoice"),MOr.forEach(t),$Be.forEach(t),BLe=i(d),Yo=n(d,"DIV",{class:!0});var Js=s(Yo);m(EE.$$.fragment,Js),$8o=i(Js),nd=n(Js,"P",{});var az=s(nd);I8o=r(az,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vre=n(az,"CODE",{});var EOr=s(vre);j8o=r(EOr,"from_pretrained()"),EOr.forEach(t),N8o=r(az,"class method or the "),Tre=n(az,"CODE",{});var yOr=s(Tre);D8o=r(yOr,"from_config()"),yOr.forEach(t),q8o=r(az,`class
method.`),az.forEach(t),G8o=i(Js),yE=n(Js,"P",{});var IBe=s(yE);O8o=r(IBe,"This class cannot be instantiated directly using "),Fre=n(IBe,"CODE",{});var wOr=s(Fre);X8o=r(wOr,"__init__()"),wOr.forEach(t),z8o=r(IBe," (throws an error)."),IBe.forEach(t),V8o=i(Js),zr=n(Js,"DIV",{class:!0});var Ys=s(zr);m(wE.$$.fragment,Ys),W8o=i(Ys),Cre=n(Ys,"P",{});var AOr=s(Cre);Q8o=r(AOr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),AOr.forEach(t),H8o=i(Ys),sd=n(Ys,"P",{});var nz=s(sd);U8o=r(nz,`Note:
Loading a model from its configuration file does `),Mre=n(nz,"STRONG",{});var LOr=s(Mre);J8o=r(LOr,"not"),LOr.forEach(t),Y8o=r(nz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=n(nz,"CODE",{});var BOr=s(Ere);K8o=r(BOr,"from_pretrained()"),BOr.forEach(t),Z8o=r(nz,"to load the model weights."),nz.forEach(t),eFo=i(Ys),yre=n(Ys,"P",{});var kOr=s(yre);oFo=r(kOr,"Examples:"),kOr.forEach(t),rFo=i(Ys),m(AE.$$.fragment,Ys),Ys.forEach(t),tFo=i(Js),Ie=n(Js,"DIV",{class:!0});var Dt=s(Ie);m(LE.$$.fragment,Dt),aFo=i(Dt),wre=n(Dt,"P",{});var xOr=s(wre);nFo=r(xOr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xOr.forEach(t),sFo=i(Dt),Va=n(Dt,"P",{});var gC=s(Va);lFo=r(gC,"The model class to instantiate is selected based on the "),Are=n(gC,"CODE",{});var ROr=s(Are);iFo=r(ROr,"model_type"),ROr.forEach(t),dFo=r(gC,` property of the config object (either
passed as an argument or loaded from `),Lre=n(gC,"CODE",{});var SOr=s(Lre);cFo=r(SOr,"pretrained_model_name_or_path"),SOr.forEach(t),fFo=r(gC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bre=n(gC,"CODE",{});var POr=s(Bre);mFo=r(POr,"pretrained_model_name_or_path"),POr.forEach(t),gFo=r(gC,":"),gC.forEach(t),hFo=i(Dt),G=n(Dt,"UL",{});var O=s(G);h4=n(O,"LI",{});var ZCe=s(h4);kre=n(ZCe,"STRONG",{});var $Or=s(kre);pFo=r($Or,"albert"),$Or.forEach(t),_Fo=r(ZCe," \u2014 "),H$=n(ZCe,"A",{href:!0});var IOr=s(H$);uFo=r(IOr,"AlbertForMultipleChoice"),IOr.forEach(t),bFo=r(ZCe," (ALBERT model)"),ZCe.forEach(t),vFo=i(O),p4=n(O,"LI",{});var eMe=s(p4);xre=n(eMe,"STRONG",{});var jOr=s(xre);TFo=r(jOr,"bert"),jOr.forEach(t),FFo=r(eMe," \u2014 "),U$=n(eMe,"A",{href:!0});var NOr=s(U$);CFo=r(NOr,"BertForMultipleChoice"),NOr.forEach(t),MFo=r(eMe," (BERT model)"),eMe.forEach(t),EFo=i(O),_4=n(O,"LI",{});var oMe=s(_4);Rre=n(oMe,"STRONG",{});var DOr=s(Rre);yFo=r(DOr,"big_bird"),DOr.forEach(t),wFo=r(oMe," \u2014 "),J$=n(oMe,"A",{href:!0});var qOr=s(J$);AFo=r(qOr,"BigBirdForMultipleChoice"),qOr.forEach(t),LFo=r(oMe," (BigBird model)"),oMe.forEach(t),BFo=i(O),u4=n(O,"LI",{});var rMe=s(u4);Sre=n(rMe,"STRONG",{});var GOr=s(Sre);kFo=r(GOr,"camembert"),GOr.forEach(t),xFo=r(rMe," \u2014 "),Y$=n(rMe,"A",{href:!0});var OOr=s(Y$);RFo=r(OOr,"CamembertForMultipleChoice"),OOr.forEach(t),SFo=r(rMe," (CamemBERT model)"),rMe.forEach(t),PFo=i(O),b4=n(O,"LI",{});var tMe=s(b4);Pre=n(tMe,"STRONG",{});var XOr=s(Pre);$Fo=r(XOr,"canine"),XOr.forEach(t),IFo=r(tMe," \u2014 "),K$=n(tMe,"A",{href:!0});var zOr=s(K$);jFo=r(zOr,"CanineForMultipleChoice"),zOr.forEach(t),NFo=r(tMe," (Canine model)"),tMe.forEach(t),DFo=i(O),v4=n(O,"LI",{});var aMe=s(v4);$re=n(aMe,"STRONG",{});var VOr=s($re);qFo=r(VOr,"convbert"),VOr.forEach(t),GFo=r(aMe," \u2014 "),Z$=n(aMe,"A",{href:!0});var WOr=s(Z$);OFo=r(WOr,"ConvBertForMultipleChoice"),WOr.forEach(t),XFo=r(aMe," (ConvBERT model)"),aMe.forEach(t),zFo=i(O),T4=n(O,"LI",{});var nMe=s(T4);Ire=n(nMe,"STRONG",{});var QOr=s(Ire);VFo=r(QOr,"distilbert"),QOr.forEach(t),WFo=r(nMe," \u2014 "),eI=n(nMe,"A",{href:!0});var HOr=s(eI);QFo=r(HOr,"DistilBertForMultipleChoice"),HOr.forEach(t),HFo=r(nMe," (DistilBERT model)"),nMe.forEach(t),UFo=i(O),F4=n(O,"LI",{});var sMe=s(F4);jre=n(sMe,"STRONG",{});var UOr=s(jre);JFo=r(UOr,"electra"),UOr.forEach(t),YFo=r(sMe," \u2014 "),oI=n(sMe,"A",{href:!0});var JOr=s(oI);KFo=r(JOr,"ElectraForMultipleChoice"),JOr.forEach(t),ZFo=r(sMe," (ELECTRA model)"),sMe.forEach(t),eCo=i(O),C4=n(O,"LI",{});var lMe=s(C4);Nre=n(lMe,"STRONG",{});var YOr=s(Nre);oCo=r(YOr,"flaubert"),YOr.forEach(t),rCo=r(lMe," \u2014 "),rI=n(lMe,"A",{href:!0});var KOr=s(rI);tCo=r(KOr,"FlaubertForMultipleChoice"),KOr.forEach(t),aCo=r(lMe," (FlauBERT model)"),lMe.forEach(t),nCo=i(O),M4=n(O,"LI",{});var iMe=s(M4);Dre=n(iMe,"STRONG",{});var ZOr=s(Dre);sCo=r(ZOr,"fnet"),ZOr.forEach(t),lCo=r(iMe," \u2014 "),tI=n(iMe,"A",{href:!0});var eXr=s(tI);iCo=r(eXr,"FNetForMultipleChoice"),eXr.forEach(t),dCo=r(iMe," (FNet model)"),iMe.forEach(t),cCo=i(O),E4=n(O,"LI",{});var dMe=s(E4);qre=n(dMe,"STRONG",{});var oXr=s(qre);fCo=r(oXr,"funnel"),oXr.forEach(t),mCo=r(dMe," \u2014 "),aI=n(dMe,"A",{href:!0});var rXr=s(aI);gCo=r(rXr,"FunnelForMultipleChoice"),rXr.forEach(t),hCo=r(dMe," (Funnel Transformer model)"),dMe.forEach(t),pCo=i(O),y4=n(O,"LI",{});var cMe=s(y4);Gre=n(cMe,"STRONG",{});var tXr=s(Gre);_Co=r(tXr,"ibert"),tXr.forEach(t),uCo=r(cMe," \u2014 "),nI=n(cMe,"A",{href:!0});var aXr=s(nI);bCo=r(aXr,"IBertForMultipleChoice"),aXr.forEach(t),vCo=r(cMe," (I-BERT model)"),cMe.forEach(t),TCo=i(O),w4=n(O,"LI",{});var fMe=s(w4);Ore=n(fMe,"STRONG",{});var nXr=s(Ore);FCo=r(nXr,"longformer"),nXr.forEach(t),CCo=r(fMe," \u2014 "),sI=n(fMe,"A",{href:!0});var sXr=s(sI);MCo=r(sXr,"LongformerForMultipleChoice"),sXr.forEach(t),ECo=r(fMe," (Longformer model)"),fMe.forEach(t),yCo=i(O),A4=n(O,"LI",{});var mMe=s(A4);Xre=n(mMe,"STRONG",{});var lXr=s(Xre);wCo=r(lXr,"megatron-bert"),lXr.forEach(t),ACo=r(mMe," \u2014 "),lI=n(mMe,"A",{href:!0});var iXr=s(lI);LCo=r(iXr,"MegatronBertForMultipleChoice"),iXr.forEach(t),BCo=r(mMe," (MegatronBert model)"),mMe.forEach(t),kCo=i(O),L4=n(O,"LI",{});var gMe=s(L4);zre=n(gMe,"STRONG",{});var dXr=s(zre);xCo=r(dXr,"mobilebert"),dXr.forEach(t),RCo=r(gMe," \u2014 "),iI=n(gMe,"A",{href:!0});var cXr=s(iI);SCo=r(cXr,"MobileBertForMultipleChoice"),cXr.forEach(t),PCo=r(gMe," (MobileBERT model)"),gMe.forEach(t),$Co=i(O),B4=n(O,"LI",{});var hMe=s(B4);Vre=n(hMe,"STRONG",{});var fXr=s(Vre);ICo=r(fXr,"mpnet"),fXr.forEach(t),jCo=r(hMe," \u2014 "),dI=n(hMe,"A",{href:!0});var mXr=s(dI);NCo=r(mXr,"MPNetForMultipleChoice"),mXr.forEach(t),DCo=r(hMe," (MPNet model)"),hMe.forEach(t),qCo=i(O),k4=n(O,"LI",{});var pMe=s(k4);Wre=n(pMe,"STRONG",{});var gXr=s(Wre);GCo=r(gXr,"nystromformer"),gXr.forEach(t),OCo=r(pMe," \u2014 "),cI=n(pMe,"A",{href:!0});var hXr=s(cI);XCo=r(hXr,"NystromformerForMultipleChoice"),hXr.forEach(t),zCo=r(pMe," (Nystromformer model)"),pMe.forEach(t),VCo=i(O),x4=n(O,"LI",{});var _Me=s(x4);Qre=n(_Me,"STRONG",{});var pXr=s(Qre);WCo=r(pXr,"qdqbert"),pXr.forEach(t),QCo=r(_Me," \u2014 "),fI=n(_Me,"A",{href:!0});var _Xr=s(fI);HCo=r(_Xr,"QDQBertForMultipleChoice"),_Xr.forEach(t),UCo=r(_Me," (QDQBert model)"),_Me.forEach(t),JCo=i(O),R4=n(O,"LI",{});var uMe=s(R4);Hre=n(uMe,"STRONG",{});var uXr=s(Hre);YCo=r(uXr,"rembert"),uXr.forEach(t),KCo=r(uMe," \u2014 "),mI=n(uMe,"A",{href:!0});var bXr=s(mI);ZCo=r(bXr,"RemBertForMultipleChoice"),bXr.forEach(t),eMo=r(uMe," (RemBERT model)"),uMe.forEach(t),oMo=i(O),S4=n(O,"LI",{});var bMe=s(S4);Ure=n(bMe,"STRONG",{});var vXr=s(Ure);rMo=r(vXr,"roberta"),vXr.forEach(t),tMo=r(bMe," \u2014 "),gI=n(bMe,"A",{href:!0});var TXr=s(gI);aMo=r(TXr,"RobertaForMultipleChoice"),TXr.forEach(t),nMo=r(bMe," (RoBERTa model)"),bMe.forEach(t),sMo=i(O),P4=n(O,"LI",{});var vMe=s(P4);Jre=n(vMe,"STRONG",{});var FXr=s(Jre);lMo=r(FXr,"roformer"),FXr.forEach(t),iMo=r(vMe," \u2014 "),hI=n(vMe,"A",{href:!0});var CXr=s(hI);dMo=r(CXr,"RoFormerForMultipleChoice"),CXr.forEach(t),cMo=r(vMe," (RoFormer model)"),vMe.forEach(t),fMo=i(O),$4=n(O,"LI",{});var TMe=s($4);Yre=n(TMe,"STRONG",{});var MXr=s(Yre);mMo=r(MXr,"squeezebert"),MXr.forEach(t),gMo=r(TMe," \u2014 "),pI=n(TMe,"A",{href:!0});var EXr=s(pI);hMo=r(EXr,"SqueezeBertForMultipleChoice"),EXr.forEach(t),pMo=r(TMe," (SqueezeBERT model)"),TMe.forEach(t),_Mo=i(O),I4=n(O,"LI",{});var FMe=s(I4);Kre=n(FMe,"STRONG",{});var yXr=s(Kre);uMo=r(yXr,"xlm"),yXr.forEach(t),bMo=r(FMe," \u2014 "),_I=n(FMe,"A",{href:!0});var wXr=s(_I);vMo=r(wXr,"XLMForMultipleChoice"),wXr.forEach(t),TMo=r(FMe," (XLM model)"),FMe.forEach(t),FMo=i(O),j4=n(O,"LI",{});var CMe=s(j4);Zre=n(CMe,"STRONG",{});var AXr=s(Zre);CMo=r(AXr,"xlm-roberta"),AXr.forEach(t),MMo=r(CMe," \u2014 "),uI=n(CMe,"A",{href:!0});var LXr=s(uI);EMo=r(LXr,"XLMRobertaForMultipleChoice"),LXr.forEach(t),yMo=r(CMe," (XLM-RoBERTa model)"),CMe.forEach(t),wMo=i(O),N4=n(O,"LI",{});var MMe=s(N4);ete=n(MMe,"STRONG",{});var BXr=s(ete);AMo=r(BXr,"xlm-roberta-xl"),BXr.forEach(t),LMo=r(MMe," \u2014 "),bI=n(MMe,"A",{href:!0});var kXr=s(bI);BMo=r(kXr,"XLMRobertaXLForMultipleChoice"),kXr.forEach(t),kMo=r(MMe," (XLM-RoBERTa-XL model)"),MMe.forEach(t),xMo=i(O),D4=n(O,"LI",{});var EMe=s(D4);ote=n(EMe,"STRONG",{});var xXr=s(ote);RMo=r(xXr,"xlnet"),xXr.forEach(t),SMo=r(EMe," \u2014 "),vI=n(EMe,"A",{href:!0});var RXr=s(vI);PMo=r(RXr,"XLNetForMultipleChoice"),RXr.forEach(t),$Mo=r(EMe," (XLNet model)"),EMe.forEach(t),IMo=i(O),q4=n(O,"LI",{});var yMe=s(q4);rte=n(yMe,"STRONG",{});var SXr=s(rte);jMo=r(SXr,"yoso"),SXr.forEach(t),NMo=r(yMe," \u2014 "),TI=n(yMe,"A",{href:!0});var PXr=s(TI);DMo=r(PXr,"YosoForMultipleChoice"),PXr.forEach(t),qMo=r(yMe," (YOSO model)"),yMe.forEach(t),O.forEach(t),GMo=i(Dt),G4=n(Dt,"P",{});var wMe=s(G4);OMo=r(wMe,"The model is set in evaluation mode by default using "),tte=n(wMe,"CODE",{});var $Xr=s(tte);XMo=r($Xr,"model.eval()"),$Xr.forEach(t),zMo=r(wMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ate=n(wMe,"CODE",{});var IXr=s(ate);VMo=r(IXr,"model.train()"),IXr.forEach(t),wMe.forEach(t),WMo=i(Dt),nte=n(Dt,"P",{});var jXr=s(nte);QMo=r(jXr,"Examples:"),jXr.forEach(t),HMo=i(Dt),m(BE.$$.fragment,Dt),Dt.forEach(t),Js.forEach(t),kLe=i(d),ld=n(d,"H2",{class:!0});var jBe=s(ld);O4=n(jBe,"A",{id:!0,class:!0,href:!0});var NXr=s(O4);ste=n(NXr,"SPAN",{});var DXr=s(ste);m(kE.$$.fragment,DXr),DXr.forEach(t),NXr.forEach(t),UMo=i(jBe),lte=n(jBe,"SPAN",{});var qXr=s(lte);JMo=r(qXr,"AutoModelForNextSentencePrediction"),qXr.forEach(t),jBe.forEach(t),xLe=i(d),Ko=n(d,"DIV",{class:!0});var Ks=s(Ko);m(xE.$$.fragment,Ks),YMo=i(Ks),id=n(Ks,"P",{});var sz=s(id);KMo=r(sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ite=n(sz,"CODE",{});var GXr=s(ite);ZMo=r(GXr,"from_pretrained()"),GXr.forEach(t),eEo=r(sz,"class method or the "),dte=n(sz,"CODE",{});var OXr=s(dte);oEo=r(OXr,"from_config()"),OXr.forEach(t),rEo=r(sz,`class
method.`),sz.forEach(t),tEo=i(Ks),RE=n(Ks,"P",{});var NBe=s(RE);aEo=r(NBe,"This class cannot be instantiated directly using "),cte=n(NBe,"CODE",{});var XXr=s(cte);nEo=r(XXr,"__init__()"),XXr.forEach(t),sEo=r(NBe," (throws an error)."),NBe.forEach(t),lEo=i(Ks),Vr=n(Ks,"DIV",{class:!0});var Zs=s(Vr);m(SE.$$.fragment,Zs),iEo=i(Zs),fte=n(Zs,"P",{});var zXr=s(fte);dEo=r(zXr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zXr.forEach(t),cEo=i(Zs),dd=n(Zs,"P",{});var lz=s(dd);fEo=r(lz,`Note:
Loading a model from its configuration file does `),mte=n(lz,"STRONG",{});var VXr=s(mte);mEo=r(VXr,"not"),VXr.forEach(t),gEo=r(lz,` load the model weights. It only affects the
model\u2019s configuration. Use `),gte=n(lz,"CODE",{});var WXr=s(gte);hEo=r(WXr,"from_pretrained()"),WXr.forEach(t),pEo=r(lz,"to load the model weights."),lz.forEach(t),_Eo=i(Zs),hte=n(Zs,"P",{});var QXr=s(hte);uEo=r(QXr,"Examples:"),QXr.forEach(t),bEo=i(Zs),m(PE.$$.fragment,Zs),Zs.forEach(t),vEo=i(Ks),je=n(Ks,"DIV",{class:!0});var qt=s(je);m($E.$$.fragment,qt),TEo=i(qt),pte=n(qt,"P",{});var HXr=s(pte);FEo=r(HXr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),HXr.forEach(t),CEo=i(qt),Wa=n(qt,"P",{});var hC=s(Wa);MEo=r(hC,"The model class to instantiate is selected based on the "),_te=n(hC,"CODE",{});var UXr=s(_te);EEo=r(UXr,"model_type"),UXr.forEach(t),yEo=r(hC,` property of the config object (either
passed as an argument or loaded from `),ute=n(hC,"CODE",{});var JXr=s(ute);wEo=r(JXr,"pretrained_model_name_or_path"),JXr.forEach(t),AEo=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bte=n(hC,"CODE",{});var YXr=s(bte);LEo=r(YXr,"pretrained_model_name_or_path"),YXr.forEach(t),BEo=r(hC,":"),hC.forEach(t),kEo=i(qt),na=n(qt,"UL",{});var el=s(na);X4=n(el,"LI",{});var AMe=s(X4);vte=n(AMe,"STRONG",{});var KXr=s(vte);xEo=r(KXr,"bert"),KXr.forEach(t),REo=r(AMe," \u2014 "),FI=n(AMe,"A",{href:!0});var ZXr=s(FI);SEo=r(ZXr,"BertForNextSentencePrediction"),ZXr.forEach(t),PEo=r(AMe," (BERT model)"),AMe.forEach(t),$Eo=i(el),z4=n(el,"LI",{});var LMe=s(z4);Tte=n(LMe,"STRONG",{});var ezr=s(Tte);IEo=r(ezr,"fnet"),ezr.forEach(t),jEo=r(LMe," \u2014 "),CI=n(LMe,"A",{href:!0});var ozr=s(CI);NEo=r(ozr,"FNetForNextSentencePrediction"),ozr.forEach(t),DEo=r(LMe," (FNet model)"),LMe.forEach(t),qEo=i(el),V4=n(el,"LI",{});var BMe=s(V4);Fte=n(BMe,"STRONG",{});var rzr=s(Fte);GEo=r(rzr,"megatron-bert"),rzr.forEach(t),OEo=r(BMe," \u2014 "),MI=n(BMe,"A",{href:!0});var tzr=s(MI);XEo=r(tzr,"MegatronBertForNextSentencePrediction"),tzr.forEach(t),zEo=r(BMe," (MegatronBert model)"),BMe.forEach(t),VEo=i(el),W4=n(el,"LI",{});var kMe=s(W4);Cte=n(kMe,"STRONG",{});var azr=s(Cte);WEo=r(azr,"mobilebert"),azr.forEach(t),QEo=r(kMe," \u2014 "),EI=n(kMe,"A",{href:!0});var nzr=s(EI);HEo=r(nzr,"MobileBertForNextSentencePrediction"),nzr.forEach(t),UEo=r(kMe," (MobileBERT model)"),kMe.forEach(t),JEo=i(el),Q4=n(el,"LI",{});var xMe=s(Q4);Mte=n(xMe,"STRONG",{});var szr=s(Mte);YEo=r(szr,"qdqbert"),szr.forEach(t),KEo=r(xMe," \u2014 "),yI=n(xMe,"A",{href:!0});var lzr=s(yI);ZEo=r(lzr,"QDQBertForNextSentencePrediction"),lzr.forEach(t),e3o=r(xMe," (QDQBert model)"),xMe.forEach(t),el.forEach(t),o3o=i(qt),H4=n(qt,"P",{});var RMe=s(H4);r3o=r(RMe,"The model is set in evaluation mode by default using "),Ete=n(RMe,"CODE",{});var izr=s(Ete);t3o=r(izr,"model.eval()"),izr.forEach(t),a3o=r(RMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yte=n(RMe,"CODE",{});var dzr=s(yte);n3o=r(dzr,"model.train()"),dzr.forEach(t),RMe.forEach(t),s3o=i(qt),wte=n(qt,"P",{});var czr=s(wte);l3o=r(czr,"Examples:"),czr.forEach(t),i3o=i(qt),m(IE.$$.fragment,qt),qt.forEach(t),Ks.forEach(t),RLe=i(d),cd=n(d,"H2",{class:!0});var DBe=s(cd);U4=n(DBe,"A",{id:!0,class:!0,href:!0});var fzr=s(U4);Ate=n(fzr,"SPAN",{});var mzr=s(Ate);m(jE.$$.fragment,mzr),mzr.forEach(t),fzr.forEach(t),d3o=i(DBe),Lte=n(DBe,"SPAN",{});var gzr=s(Lte);c3o=r(gzr,"AutoModelForTokenClassification"),gzr.forEach(t),DBe.forEach(t),SLe=i(d),Zo=n(d,"DIV",{class:!0});var ol=s(Zo);m(NE.$$.fragment,ol),f3o=i(ol),fd=n(ol,"P",{});var iz=s(fd);m3o=r(iz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Bte=n(iz,"CODE",{});var hzr=s(Bte);g3o=r(hzr,"from_pretrained()"),hzr.forEach(t),h3o=r(iz,"class method or the "),kte=n(iz,"CODE",{});var pzr=s(kte);p3o=r(pzr,"from_config()"),pzr.forEach(t),_3o=r(iz,`class
method.`),iz.forEach(t),u3o=i(ol),DE=n(ol,"P",{});var qBe=s(DE);b3o=r(qBe,"This class cannot be instantiated directly using "),xte=n(qBe,"CODE",{});var _zr=s(xte);v3o=r(_zr,"__init__()"),_zr.forEach(t),T3o=r(qBe," (throws an error)."),qBe.forEach(t),F3o=i(ol),Wr=n(ol,"DIV",{class:!0});var rl=s(Wr);m(qE.$$.fragment,rl),C3o=i(rl),Rte=n(rl,"P",{});var uzr=s(Rte);M3o=r(uzr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uzr.forEach(t),E3o=i(rl),md=n(rl,"P",{});var dz=s(md);y3o=r(dz,`Note:
Loading a model from its configuration file does `),Ste=n(dz,"STRONG",{});var bzr=s(Ste);w3o=r(bzr,"not"),bzr.forEach(t),A3o=r(dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pte=n(dz,"CODE",{});var vzr=s(Pte);L3o=r(vzr,"from_pretrained()"),vzr.forEach(t),B3o=r(dz,"to load the model weights."),dz.forEach(t),k3o=i(rl),$te=n(rl,"P",{});var Tzr=s($te);x3o=r(Tzr,"Examples:"),Tzr.forEach(t),R3o=i(rl),m(GE.$$.fragment,rl),rl.forEach(t),S3o=i(ol),Ne=n(ol,"DIV",{class:!0});var Gt=s(Ne);m(OE.$$.fragment,Gt),P3o=i(Gt),Ite=n(Gt,"P",{});var Fzr=s(Ite);$3o=r(Fzr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Fzr.forEach(t),I3o=i(Gt),Qa=n(Gt,"P",{});var pC=s(Qa);j3o=r(pC,"The model class to instantiate is selected based on the "),jte=n(pC,"CODE",{});var Czr=s(jte);N3o=r(Czr,"model_type"),Czr.forEach(t),D3o=r(pC,` property of the config object (either
passed as an argument or loaded from `),Nte=n(pC,"CODE",{});var Mzr=s(Nte);q3o=r(Mzr,"pretrained_model_name_or_path"),Mzr.forEach(t),G3o=r(pC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dte=n(pC,"CODE",{});var Ezr=s(Dte);O3o=r(Ezr,"pretrained_model_name_or_path"),Ezr.forEach(t),X3o=r(pC,":"),pC.forEach(t),z3o=i(Gt),D=n(Gt,"UL",{});var q=s(D);J4=n(q,"LI",{});var SMe=s(J4);qte=n(SMe,"STRONG",{});var yzr=s(qte);V3o=r(yzr,"albert"),yzr.forEach(t),W3o=r(SMe," \u2014 "),wI=n(SMe,"A",{href:!0});var wzr=s(wI);Q3o=r(wzr,"AlbertForTokenClassification"),wzr.forEach(t),H3o=r(SMe," (ALBERT model)"),SMe.forEach(t),U3o=i(q),Y4=n(q,"LI",{});var PMe=s(Y4);Gte=n(PMe,"STRONG",{});var Azr=s(Gte);J3o=r(Azr,"bert"),Azr.forEach(t),Y3o=r(PMe," \u2014 "),AI=n(PMe,"A",{href:!0});var Lzr=s(AI);K3o=r(Lzr,"BertForTokenClassification"),Lzr.forEach(t),Z3o=r(PMe," (BERT model)"),PMe.forEach(t),eyo=i(q),K4=n(q,"LI",{});var $Me=s(K4);Ote=n($Me,"STRONG",{});var Bzr=s(Ote);oyo=r(Bzr,"big_bird"),Bzr.forEach(t),ryo=r($Me," \u2014 "),LI=n($Me,"A",{href:!0});var kzr=s(LI);tyo=r(kzr,"BigBirdForTokenClassification"),kzr.forEach(t),ayo=r($Me," (BigBird model)"),$Me.forEach(t),nyo=i(q),Z4=n(q,"LI",{});var IMe=s(Z4);Xte=n(IMe,"STRONG",{});var xzr=s(Xte);syo=r(xzr,"camembert"),xzr.forEach(t),lyo=r(IMe," \u2014 "),BI=n(IMe,"A",{href:!0});var Rzr=s(BI);iyo=r(Rzr,"CamembertForTokenClassification"),Rzr.forEach(t),dyo=r(IMe," (CamemBERT model)"),IMe.forEach(t),cyo=i(q),eb=n(q,"LI",{});var jMe=s(eb);zte=n(jMe,"STRONG",{});var Szr=s(zte);fyo=r(Szr,"canine"),Szr.forEach(t),myo=r(jMe," \u2014 "),kI=n(jMe,"A",{href:!0});var Pzr=s(kI);gyo=r(Pzr,"CanineForTokenClassification"),Pzr.forEach(t),hyo=r(jMe," (Canine model)"),jMe.forEach(t),pyo=i(q),ob=n(q,"LI",{});var NMe=s(ob);Vte=n(NMe,"STRONG",{});var $zr=s(Vte);_yo=r($zr,"convbert"),$zr.forEach(t),uyo=r(NMe," \u2014 "),xI=n(NMe,"A",{href:!0});var Izr=s(xI);byo=r(Izr,"ConvBertForTokenClassification"),Izr.forEach(t),vyo=r(NMe," (ConvBERT model)"),NMe.forEach(t),Tyo=i(q),rb=n(q,"LI",{});var DMe=s(rb);Wte=n(DMe,"STRONG",{});var jzr=s(Wte);Fyo=r(jzr,"deberta"),jzr.forEach(t),Cyo=r(DMe," \u2014 "),RI=n(DMe,"A",{href:!0});var Nzr=s(RI);Myo=r(Nzr,"DebertaForTokenClassification"),Nzr.forEach(t),Eyo=r(DMe," (DeBERTa model)"),DMe.forEach(t),yyo=i(q),tb=n(q,"LI",{});var qMe=s(tb);Qte=n(qMe,"STRONG",{});var Dzr=s(Qte);wyo=r(Dzr,"deberta-v2"),Dzr.forEach(t),Ayo=r(qMe," \u2014 "),SI=n(qMe,"A",{href:!0});var qzr=s(SI);Lyo=r(qzr,"DebertaV2ForTokenClassification"),qzr.forEach(t),Byo=r(qMe," (DeBERTa-v2 model)"),qMe.forEach(t),kyo=i(q),ab=n(q,"LI",{});var GMe=s(ab);Hte=n(GMe,"STRONG",{});var Gzr=s(Hte);xyo=r(Gzr,"distilbert"),Gzr.forEach(t),Ryo=r(GMe," \u2014 "),PI=n(GMe,"A",{href:!0});var Ozr=s(PI);Syo=r(Ozr,"DistilBertForTokenClassification"),Ozr.forEach(t),Pyo=r(GMe," (DistilBERT model)"),GMe.forEach(t),$yo=i(q),nb=n(q,"LI",{});var OMe=s(nb);Ute=n(OMe,"STRONG",{});var Xzr=s(Ute);Iyo=r(Xzr,"electra"),Xzr.forEach(t),jyo=r(OMe," \u2014 "),$I=n(OMe,"A",{href:!0});var zzr=s($I);Nyo=r(zzr,"ElectraForTokenClassification"),zzr.forEach(t),Dyo=r(OMe," (ELECTRA model)"),OMe.forEach(t),qyo=i(q),sb=n(q,"LI",{});var XMe=s(sb);Jte=n(XMe,"STRONG",{});var Vzr=s(Jte);Gyo=r(Vzr,"flaubert"),Vzr.forEach(t),Oyo=r(XMe," \u2014 "),II=n(XMe,"A",{href:!0});var Wzr=s(II);Xyo=r(Wzr,"FlaubertForTokenClassification"),Wzr.forEach(t),zyo=r(XMe," (FlauBERT model)"),XMe.forEach(t),Vyo=i(q),lb=n(q,"LI",{});var zMe=s(lb);Yte=n(zMe,"STRONG",{});var Qzr=s(Yte);Wyo=r(Qzr,"fnet"),Qzr.forEach(t),Qyo=r(zMe," \u2014 "),jI=n(zMe,"A",{href:!0});var Hzr=s(jI);Hyo=r(Hzr,"FNetForTokenClassification"),Hzr.forEach(t),Uyo=r(zMe," (FNet model)"),zMe.forEach(t),Jyo=i(q),ib=n(q,"LI",{});var VMe=s(ib);Kte=n(VMe,"STRONG",{});var Uzr=s(Kte);Yyo=r(Uzr,"funnel"),Uzr.forEach(t),Kyo=r(VMe," \u2014 "),NI=n(VMe,"A",{href:!0});var Jzr=s(NI);Zyo=r(Jzr,"FunnelForTokenClassification"),Jzr.forEach(t),ewo=r(VMe," (Funnel Transformer model)"),VMe.forEach(t),owo=i(q),db=n(q,"LI",{});var WMe=s(db);Zte=n(WMe,"STRONG",{});var Yzr=s(Zte);rwo=r(Yzr,"gpt2"),Yzr.forEach(t),two=r(WMe," \u2014 "),DI=n(WMe,"A",{href:!0});var Kzr=s(DI);awo=r(Kzr,"GPT2ForTokenClassification"),Kzr.forEach(t),nwo=r(WMe," (OpenAI GPT-2 model)"),WMe.forEach(t),swo=i(q),cb=n(q,"LI",{});var QMe=s(cb);eae=n(QMe,"STRONG",{});var Zzr=s(eae);lwo=r(Zzr,"ibert"),Zzr.forEach(t),iwo=r(QMe," \u2014 "),qI=n(QMe,"A",{href:!0});var eVr=s(qI);dwo=r(eVr,"IBertForTokenClassification"),eVr.forEach(t),cwo=r(QMe," (I-BERT model)"),QMe.forEach(t),fwo=i(q),fb=n(q,"LI",{});var HMe=s(fb);oae=n(HMe,"STRONG",{});var oVr=s(oae);mwo=r(oVr,"layoutlm"),oVr.forEach(t),gwo=r(HMe," \u2014 "),GI=n(HMe,"A",{href:!0});var rVr=s(GI);hwo=r(rVr,"LayoutLMForTokenClassification"),rVr.forEach(t),pwo=r(HMe," (LayoutLM model)"),HMe.forEach(t),_wo=i(q),mb=n(q,"LI",{});var UMe=s(mb);rae=n(UMe,"STRONG",{});var tVr=s(rae);uwo=r(tVr,"layoutlmv2"),tVr.forEach(t),bwo=r(UMe," \u2014 "),OI=n(UMe,"A",{href:!0});var aVr=s(OI);vwo=r(aVr,"LayoutLMv2ForTokenClassification"),aVr.forEach(t),Two=r(UMe," (LayoutLMv2 model)"),UMe.forEach(t),Fwo=i(q),gb=n(q,"LI",{});var JMe=s(gb);tae=n(JMe,"STRONG",{});var nVr=s(tae);Cwo=r(nVr,"longformer"),nVr.forEach(t),Mwo=r(JMe," \u2014 "),XI=n(JMe,"A",{href:!0});var sVr=s(XI);Ewo=r(sVr,"LongformerForTokenClassification"),sVr.forEach(t),ywo=r(JMe," (Longformer model)"),JMe.forEach(t),wwo=i(q),hb=n(q,"LI",{});var YMe=s(hb);aae=n(YMe,"STRONG",{});var lVr=s(aae);Awo=r(lVr,"megatron-bert"),lVr.forEach(t),Lwo=r(YMe," \u2014 "),zI=n(YMe,"A",{href:!0});var iVr=s(zI);Bwo=r(iVr,"MegatronBertForTokenClassification"),iVr.forEach(t),kwo=r(YMe," (MegatronBert model)"),YMe.forEach(t),xwo=i(q),pb=n(q,"LI",{});var KMe=s(pb);nae=n(KMe,"STRONG",{});var dVr=s(nae);Rwo=r(dVr,"mobilebert"),dVr.forEach(t),Swo=r(KMe," \u2014 "),VI=n(KMe,"A",{href:!0});var cVr=s(VI);Pwo=r(cVr,"MobileBertForTokenClassification"),cVr.forEach(t),$wo=r(KMe," (MobileBERT model)"),KMe.forEach(t),Iwo=i(q),_b=n(q,"LI",{});var ZMe=s(_b);sae=n(ZMe,"STRONG",{});var fVr=s(sae);jwo=r(fVr,"mpnet"),fVr.forEach(t),Nwo=r(ZMe," \u2014 "),WI=n(ZMe,"A",{href:!0});var mVr=s(WI);Dwo=r(mVr,"MPNetForTokenClassification"),mVr.forEach(t),qwo=r(ZMe," (MPNet model)"),ZMe.forEach(t),Gwo=i(q),ub=n(q,"LI",{});var eEe=s(ub);lae=n(eEe,"STRONG",{});var gVr=s(lae);Owo=r(gVr,"nystromformer"),gVr.forEach(t),Xwo=r(eEe," \u2014 "),QI=n(eEe,"A",{href:!0});var hVr=s(QI);zwo=r(hVr,"NystromformerForTokenClassification"),hVr.forEach(t),Vwo=r(eEe," (Nystromformer model)"),eEe.forEach(t),Wwo=i(q),bb=n(q,"LI",{});var oEe=s(bb);iae=n(oEe,"STRONG",{});var pVr=s(iae);Qwo=r(pVr,"qdqbert"),pVr.forEach(t),Hwo=r(oEe," \u2014 "),HI=n(oEe,"A",{href:!0});var _Vr=s(HI);Uwo=r(_Vr,"QDQBertForTokenClassification"),_Vr.forEach(t),Jwo=r(oEe," (QDQBert model)"),oEe.forEach(t),Ywo=i(q),vb=n(q,"LI",{});var rEe=s(vb);dae=n(rEe,"STRONG",{});var uVr=s(dae);Kwo=r(uVr,"rembert"),uVr.forEach(t),Zwo=r(rEe," \u2014 "),UI=n(rEe,"A",{href:!0});var bVr=s(UI);eAo=r(bVr,"RemBertForTokenClassification"),bVr.forEach(t),oAo=r(rEe," (RemBERT model)"),rEe.forEach(t),rAo=i(q),Tb=n(q,"LI",{});var tEe=s(Tb);cae=n(tEe,"STRONG",{});var vVr=s(cae);tAo=r(vVr,"roberta"),vVr.forEach(t),aAo=r(tEe," \u2014 "),JI=n(tEe,"A",{href:!0});var TVr=s(JI);nAo=r(TVr,"RobertaForTokenClassification"),TVr.forEach(t),sAo=r(tEe," (RoBERTa model)"),tEe.forEach(t),lAo=i(q),Fb=n(q,"LI",{});var aEe=s(Fb);fae=n(aEe,"STRONG",{});var FVr=s(fae);iAo=r(FVr,"roformer"),FVr.forEach(t),dAo=r(aEe," \u2014 "),YI=n(aEe,"A",{href:!0});var CVr=s(YI);cAo=r(CVr,"RoFormerForTokenClassification"),CVr.forEach(t),fAo=r(aEe," (RoFormer model)"),aEe.forEach(t),mAo=i(q),Cb=n(q,"LI",{});var nEe=s(Cb);mae=n(nEe,"STRONG",{});var MVr=s(mae);gAo=r(MVr,"squeezebert"),MVr.forEach(t),hAo=r(nEe," \u2014 "),KI=n(nEe,"A",{href:!0});var EVr=s(KI);pAo=r(EVr,"SqueezeBertForTokenClassification"),EVr.forEach(t),_Ao=r(nEe," (SqueezeBERT model)"),nEe.forEach(t),uAo=i(q),Mb=n(q,"LI",{});var sEe=s(Mb);gae=n(sEe,"STRONG",{});var yVr=s(gae);bAo=r(yVr,"xlm"),yVr.forEach(t),vAo=r(sEe," \u2014 "),ZI=n(sEe,"A",{href:!0});var wVr=s(ZI);TAo=r(wVr,"XLMForTokenClassification"),wVr.forEach(t),FAo=r(sEe," (XLM model)"),sEe.forEach(t),CAo=i(q),Eb=n(q,"LI",{});var lEe=s(Eb);hae=n(lEe,"STRONG",{});var AVr=s(hae);MAo=r(AVr,"xlm-roberta"),AVr.forEach(t),EAo=r(lEe," \u2014 "),ej=n(lEe,"A",{href:!0});var LVr=s(ej);yAo=r(LVr,"XLMRobertaForTokenClassification"),LVr.forEach(t),wAo=r(lEe," (XLM-RoBERTa model)"),lEe.forEach(t),AAo=i(q),yb=n(q,"LI",{});var iEe=s(yb);pae=n(iEe,"STRONG",{});var BVr=s(pae);LAo=r(BVr,"xlm-roberta-xl"),BVr.forEach(t),BAo=r(iEe," \u2014 "),oj=n(iEe,"A",{href:!0});var kVr=s(oj);kAo=r(kVr,"XLMRobertaXLForTokenClassification"),kVr.forEach(t),xAo=r(iEe," (XLM-RoBERTa-XL model)"),iEe.forEach(t),RAo=i(q),wb=n(q,"LI",{});var dEe=s(wb);_ae=n(dEe,"STRONG",{});var xVr=s(_ae);SAo=r(xVr,"xlnet"),xVr.forEach(t),PAo=r(dEe," \u2014 "),rj=n(dEe,"A",{href:!0});var RVr=s(rj);$Ao=r(RVr,"XLNetForTokenClassification"),RVr.forEach(t),IAo=r(dEe," (XLNet model)"),dEe.forEach(t),jAo=i(q),Ab=n(q,"LI",{});var cEe=s(Ab);uae=n(cEe,"STRONG",{});var SVr=s(uae);NAo=r(SVr,"yoso"),SVr.forEach(t),DAo=r(cEe," \u2014 "),tj=n(cEe,"A",{href:!0});var PVr=s(tj);qAo=r(PVr,"YosoForTokenClassification"),PVr.forEach(t),GAo=r(cEe," (YOSO model)"),cEe.forEach(t),q.forEach(t),OAo=i(Gt),Lb=n(Gt,"P",{});var fEe=s(Lb);XAo=r(fEe,"The model is set in evaluation mode by default using "),bae=n(fEe,"CODE",{});var $Vr=s(bae);zAo=r($Vr,"model.eval()"),$Vr.forEach(t),VAo=r(fEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vae=n(fEe,"CODE",{});var IVr=s(vae);WAo=r(IVr,"model.train()"),IVr.forEach(t),fEe.forEach(t),QAo=i(Gt),Tae=n(Gt,"P",{});var jVr=s(Tae);HAo=r(jVr,"Examples:"),jVr.forEach(t),UAo=i(Gt),m(XE.$$.fragment,Gt),Gt.forEach(t),ol.forEach(t),PLe=i(d),gd=n(d,"H2",{class:!0});var GBe=s(gd);Bb=n(GBe,"A",{id:!0,class:!0,href:!0});var NVr=s(Bb);Fae=n(NVr,"SPAN",{});var DVr=s(Fae);m(zE.$$.fragment,DVr),DVr.forEach(t),NVr.forEach(t),JAo=i(GBe),Cae=n(GBe,"SPAN",{});var qVr=s(Cae);YAo=r(qVr,"AutoModelForQuestionAnswering"),qVr.forEach(t),GBe.forEach(t),$Le=i(d),er=n(d,"DIV",{class:!0});var tl=s(er);m(VE.$$.fragment,tl),KAo=i(tl),hd=n(tl,"P",{});var cz=s(hd);ZAo=r(cz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Mae=n(cz,"CODE",{});var GVr=s(Mae);e6o=r(GVr,"from_pretrained()"),GVr.forEach(t),o6o=r(cz,"class method or the "),Eae=n(cz,"CODE",{});var OVr=s(Eae);r6o=r(OVr,"from_config()"),OVr.forEach(t),t6o=r(cz,`class
method.`),cz.forEach(t),a6o=i(tl),WE=n(tl,"P",{});var OBe=s(WE);n6o=r(OBe,"This class cannot be instantiated directly using "),yae=n(OBe,"CODE",{});var XVr=s(yae);s6o=r(XVr,"__init__()"),XVr.forEach(t),l6o=r(OBe," (throws an error)."),OBe.forEach(t),i6o=i(tl),Qr=n(tl,"DIV",{class:!0});var al=s(Qr);m(QE.$$.fragment,al),d6o=i(al),wae=n(al,"P",{});var zVr=s(wae);c6o=r(zVr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zVr.forEach(t),f6o=i(al),pd=n(al,"P",{});var fz=s(pd);m6o=r(fz,`Note:
Loading a model from its configuration file does `),Aae=n(fz,"STRONG",{});var VVr=s(Aae);g6o=r(VVr,"not"),VVr.forEach(t),h6o=r(fz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lae=n(fz,"CODE",{});var WVr=s(Lae);p6o=r(WVr,"from_pretrained()"),WVr.forEach(t),_6o=r(fz,"to load the model weights."),fz.forEach(t),u6o=i(al),Bae=n(al,"P",{});var QVr=s(Bae);b6o=r(QVr,"Examples:"),QVr.forEach(t),v6o=i(al),m(HE.$$.fragment,al),al.forEach(t),T6o=i(tl),De=n(tl,"DIV",{class:!0});var Ot=s(De);m(UE.$$.fragment,Ot),F6o=i(Ot),kae=n(Ot,"P",{});var HVr=s(kae);C6o=r(HVr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),HVr.forEach(t),M6o=i(Ot),Ha=n(Ot,"P",{});var _C=s(Ha);E6o=r(_C,"The model class to instantiate is selected based on the "),xae=n(_C,"CODE",{});var UVr=s(xae);y6o=r(UVr,"model_type"),UVr.forEach(t),w6o=r(_C,` property of the config object (either
passed as an argument or loaded from `),Rae=n(_C,"CODE",{});var JVr=s(Rae);A6o=r(JVr,"pretrained_model_name_or_path"),JVr.forEach(t),L6o=r(_C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sae=n(_C,"CODE",{});var YVr=s(Sae);B6o=r(YVr,"pretrained_model_name_or_path"),YVr.forEach(t),k6o=r(_C,":"),_C.forEach(t),x6o=i(Ot),R=n(Ot,"UL",{});var P=s(R);kb=n(P,"LI",{});var mEe=s(kb);Pae=n(mEe,"STRONG",{});var KVr=s(Pae);R6o=r(KVr,"albert"),KVr.forEach(t),S6o=r(mEe," \u2014 "),aj=n(mEe,"A",{href:!0});var ZVr=s(aj);P6o=r(ZVr,"AlbertForQuestionAnswering"),ZVr.forEach(t),$6o=r(mEe," (ALBERT model)"),mEe.forEach(t),I6o=i(P),xb=n(P,"LI",{});var gEe=s(xb);$ae=n(gEe,"STRONG",{});var eWr=s($ae);j6o=r(eWr,"bart"),eWr.forEach(t),N6o=r(gEe," \u2014 "),nj=n(gEe,"A",{href:!0});var oWr=s(nj);D6o=r(oWr,"BartForQuestionAnswering"),oWr.forEach(t),q6o=r(gEe," (BART model)"),gEe.forEach(t),G6o=i(P),Rb=n(P,"LI",{});var hEe=s(Rb);Iae=n(hEe,"STRONG",{});var rWr=s(Iae);O6o=r(rWr,"bert"),rWr.forEach(t),X6o=r(hEe," \u2014 "),sj=n(hEe,"A",{href:!0});var tWr=s(sj);z6o=r(tWr,"BertForQuestionAnswering"),tWr.forEach(t),V6o=r(hEe," (BERT model)"),hEe.forEach(t),W6o=i(P),Sb=n(P,"LI",{});var pEe=s(Sb);jae=n(pEe,"STRONG",{});var aWr=s(jae);Q6o=r(aWr,"big_bird"),aWr.forEach(t),H6o=r(pEe," \u2014 "),lj=n(pEe,"A",{href:!0});var nWr=s(lj);U6o=r(nWr,"BigBirdForQuestionAnswering"),nWr.forEach(t),J6o=r(pEe," (BigBird model)"),pEe.forEach(t),Y6o=i(P),Pb=n(P,"LI",{});var _Ee=s(Pb);Nae=n(_Ee,"STRONG",{});var sWr=s(Nae);K6o=r(sWr,"bigbird_pegasus"),sWr.forEach(t),Z6o=r(_Ee," \u2014 "),ij=n(_Ee,"A",{href:!0});var lWr=s(ij);e0o=r(lWr,"BigBirdPegasusForQuestionAnswering"),lWr.forEach(t),o0o=r(_Ee," (BigBirdPegasus model)"),_Ee.forEach(t),r0o=i(P),$b=n(P,"LI",{});var uEe=s($b);Dae=n(uEe,"STRONG",{});var iWr=s(Dae);t0o=r(iWr,"camembert"),iWr.forEach(t),a0o=r(uEe," \u2014 "),dj=n(uEe,"A",{href:!0});var dWr=s(dj);n0o=r(dWr,"CamembertForQuestionAnswering"),dWr.forEach(t),s0o=r(uEe," (CamemBERT model)"),uEe.forEach(t),l0o=i(P),Ib=n(P,"LI",{});var bEe=s(Ib);qae=n(bEe,"STRONG",{});var cWr=s(qae);i0o=r(cWr,"canine"),cWr.forEach(t),d0o=r(bEe," \u2014 "),cj=n(bEe,"A",{href:!0});var fWr=s(cj);c0o=r(fWr,"CanineForQuestionAnswering"),fWr.forEach(t),f0o=r(bEe," (Canine model)"),bEe.forEach(t),m0o=i(P),jb=n(P,"LI",{});var vEe=s(jb);Gae=n(vEe,"STRONG",{});var mWr=s(Gae);g0o=r(mWr,"convbert"),mWr.forEach(t),h0o=r(vEe," \u2014 "),fj=n(vEe,"A",{href:!0});var gWr=s(fj);p0o=r(gWr,"ConvBertForQuestionAnswering"),gWr.forEach(t),_0o=r(vEe," (ConvBERT model)"),vEe.forEach(t),u0o=i(P),Nb=n(P,"LI",{});var TEe=s(Nb);Oae=n(TEe,"STRONG",{});var hWr=s(Oae);b0o=r(hWr,"deberta"),hWr.forEach(t),v0o=r(TEe," \u2014 "),mj=n(TEe,"A",{href:!0});var pWr=s(mj);T0o=r(pWr,"DebertaForQuestionAnswering"),pWr.forEach(t),F0o=r(TEe," (DeBERTa model)"),TEe.forEach(t),C0o=i(P),Db=n(P,"LI",{});var FEe=s(Db);Xae=n(FEe,"STRONG",{});var _Wr=s(Xae);M0o=r(_Wr,"deberta-v2"),_Wr.forEach(t),E0o=r(FEe," \u2014 "),gj=n(FEe,"A",{href:!0});var uWr=s(gj);y0o=r(uWr,"DebertaV2ForQuestionAnswering"),uWr.forEach(t),w0o=r(FEe," (DeBERTa-v2 model)"),FEe.forEach(t),A0o=i(P),qb=n(P,"LI",{});var CEe=s(qb);zae=n(CEe,"STRONG",{});var bWr=s(zae);L0o=r(bWr,"distilbert"),bWr.forEach(t),B0o=r(CEe," \u2014 "),hj=n(CEe,"A",{href:!0});var vWr=s(hj);k0o=r(vWr,"DistilBertForQuestionAnswering"),vWr.forEach(t),x0o=r(CEe," (DistilBERT model)"),CEe.forEach(t),R0o=i(P),Gb=n(P,"LI",{});var MEe=s(Gb);Vae=n(MEe,"STRONG",{});var TWr=s(Vae);S0o=r(TWr,"electra"),TWr.forEach(t),P0o=r(MEe," \u2014 "),pj=n(MEe,"A",{href:!0});var FWr=s(pj);$0o=r(FWr,"ElectraForQuestionAnswering"),FWr.forEach(t),I0o=r(MEe," (ELECTRA model)"),MEe.forEach(t),j0o=i(P),Ob=n(P,"LI",{});var EEe=s(Ob);Wae=n(EEe,"STRONG",{});var CWr=s(Wae);N0o=r(CWr,"flaubert"),CWr.forEach(t),D0o=r(EEe," \u2014 "),_j=n(EEe,"A",{href:!0});var MWr=s(_j);q0o=r(MWr,"FlaubertForQuestionAnsweringSimple"),MWr.forEach(t),G0o=r(EEe," (FlauBERT model)"),EEe.forEach(t),O0o=i(P),Xb=n(P,"LI",{});var yEe=s(Xb);Qae=n(yEe,"STRONG",{});var EWr=s(Qae);X0o=r(EWr,"fnet"),EWr.forEach(t),z0o=r(yEe," \u2014 "),uj=n(yEe,"A",{href:!0});var yWr=s(uj);V0o=r(yWr,"FNetForQuestionAnswering"),yWr.forEach(t),W0o=r(yEe," (FNet model)"),yEe.forEach(t),Q0o=i(P),zb=n(P,"LI",{});var wEe=s(zb);Hae=n(wEe,"STRONG",{});var wWr=s(Hae);H0o=r(wWr,"funnel"),wWr.forEach(t),U0o=r(wEe," \u2014 "),bj=n(wEe,"A",{href:!0});var AWr=s(bj);J0o=r(AWr,"FunnelForQuestionAnswering"),AWr.forEach(t),Y0o=r(wEe," (Funnel Transformer model)"),wEe.forEach(t),K0o=i(P),Vb=n(P,"LI",{});var AEe=s(Vb);Uae=n(AEe,"STRONG",{});var LWr=s(Uae);Z0o=r(LWr,"gptj"),LWr.forEach(t),eLo=r(AEe," \u2014 "),vj=n(AEe,"A",{href:!0});var BWr=s(vj);oLo=r(BWr,"GPTJForQuestionAnswering"),BWr.forEach(t),rLo=r(AEe," (GPT-J model)"),AEe.forEach(t),tLo=i(P),Wb=n(P,"LI",{});var LEe=s(Wb);Jae=n(LEe,"STRONG",{});var kWr=s(Jae);aLo=r(kWr,"ibert"),kWr.forEach(t),nLo=r(LEe," \u2014 "),Tj=n(LEe,"A",{href:!0});var xWr=s(Tj);sLo=r(xWr,"IBertForQuestionAnswering"),xWr.forEach(t),lLo=r(LEe," (I-BERT model)"),LEe.forEach(t),iLo=i(P),Qb=n(P,"LI",{});var BEe=s(Qb);Yae=n(BEe,"STRONG",{});var RWr=s(Yae);dLo=r(RWr,"layoutlmv2"),RWr.forEach(t),cLo=r(BEe," \u2014 "),Fj=n(BEe,"A",{href:!0});var SWr=s(Fj);fLo=r(SWr,"LayoutLMv2ForQuestionAnswering"),SWr.forEach(t),mLo=r(BEe," (LayoutLMv2 model)"),BEe.forEach(t),gLo=i(P),Hb=n(P,"LI",{});var kEe=s(Hb);Kae=n(kEe,"STRONG",{});var PWr=s(Kae);hLo=r(PWr,"led"),PWr.forEach(t),pLo=r(kEe," \u2014 "),Cj=n(kEe,"A",{href:!0});var $Wr=s(Cj);_Lo=r($Wr,"LEDForQuestionAnswering"),$Wr.forEach(t),uLo=r(kEe," (LED model)"),kEe.forEach(t),bLo=i(P),Ub=n(P,"LI",{});var xEe=s(Ub);Zae=n(xEe,"STRONG",{});var IWr=s(Zae);vLo=r(IWr,"longformer"),IWr.forEach(t),TLo=r(xEe," \u2014 "),Mj=n(xEe,"A",{href:!0});var jWr=s(Mj);FLo=r(jWr,"LongformerForQuestionAnswering"),jWr.forEach(t),CLo=r(xEe," (Longformer model)"),xEe.forEach(t),MLo=i(P),Jb=n(P,"LI",{});var REe=s(Jb);ene=n(REe,"STRONG",{});var NWr=s(ene);ELo=r(NWr,"lxmert"),NWr.forEach(t),yLo=r(REe," \u2014 "),Ej=n(REe,"A",{href:!0});var DWr=s(Ej);wLo=r(DWr,"LxmertForQuestionAnswering"),DWr.forEach(t),ALo=r(REe," (LXMERT model)"),REe.forEach(t),LLo=i(P),Yb=n(P,"LI",{});var SEe=s(Yb);one=n(SEe,"STRONG",{});var qWr=s(one);BLo=r(qWr,"mbart"),qWr.forEach(t),kLo=r(SEe," \u2014 "),yj=n(SEe,"A",{href:!0});var GWr=s(yj);xLo=r(GWr,"MBartForQuestionAnswering"),GWr.forEach(t),RLo=r(SEe," (mBART model)"),SEe.forEach(t),SLo=i(P),Kb=n(P,"LI",{});var PEe=s(Kb);rne=n(PEe,"STRONG",{});var OWr=s(rne);PLo=r(OWr,"megatron-bert"),OWr.forEach(t),$Lo=r(PEe," \u2014 "),wj=n(PEe,"A",{href:!0});var XWr=s(wj);ILo=r(XWr,"MegatronBertForQuestionAnswering"),XWr.forEach(t),jLo=r(PEe," (MegatronBert model)"),PEe.forEach(t),NLo=i(P),Zb=n(P,"LI",{});var $Ee=s(Zb);tne=n($Ee,"STRONG",{});var zWr=s(tne);DLo=r(zWr,"mobilebert"),zWr.forEach(t),qLo=r($Ee," \u2014 "),Aj=n($Ee,"A",{href:!0});var VWr=s(Aj);GLo=r(VWr,"MobileBertForQuestionAnswering"),VWr.forEach(t),OLo=r($Ee," (MobileBERT model)"),$Ee.forEach(t),XLo=i(P),e5=n(P,"LI",{});var IEe=s(e5);ane=n(IEe,"STRONG",{});var WWr=s(ane);zLo=r(WWr,"mpnet"),WWr.forEach(t),VLo=r(IEe," \u2014 "),Lj=n(IEe,"A",{href:!0});var QWr=s(Lj);WLo=r(QWr,"MPNetForQuestionAnswering"),QWr.forEach(t),QLo=r(IEe," (MPNet model)"),IEe.forEach(t),HLo=i(P),o5=n(P,"LI",{});var jEe=s(o5);nne=n(jEe,"STRONG",{});var HWr=s(nne);ULo=r(HWr,"nystromformer"),HWr.forEach(t),JLo=r(jEe," \u2014 "),Bj=n(jEe,"A",{href:!0});var UWr=s(Bj);YLo=r(UWr,"NystromformerForQuestionAnswering"),UWr.forEach(t),KLo=r(jEe," (Nystromformer model)"),jEe.forEach(t),ZLo=i(P),r5=n(P,"LI",{});var NEe=s(r5);sne=n(NEe,"STRONG",{});var JWr=s(sne);e9o=r(JWr,"qdqbert"),JWr.forEach(t),o9o=r(NEe," \u2014 "),kj=n(NEe,"A",{href:!0});var YWr=s(kj);r9o=r(YWr,"QDQBertForQuestionAnswering"),YWr.forEach(t),t9o=r(NEe," (QDQBert model)"),NEe.forEach(t),a9o=i(P),t5=n(P,"LI",{});var DEe=s(t5);lne=n(DEe,"STRONG",{});var KWr=s(lne);n9o=r(KWr,"reformer"),KWr.forEach(t),s9o=r(DEe," \u2014 "),xj=n(DEe,"A",{href:!0});var ZWr=s(xj);l9o=r(ZWr,"ReformerForQuestionAnswering"),ZWr.forEach(t),i9o=r(DEe," (Reformer model)"),DEe.forEach(t),d9o=i(P),a5=n(P,"LI",{});var qEe=s(a5);ine=n(qEe,"STRONG",{});var eQr=s(ine);c9o=r(eQr,"rembert"),eQr.forEach(t),f9o=r(qEe," \u2014 "),Rj=n(qEe,"A",{href:!0});var oQr=s(Rj);m9o=r(oQr,"RemBertForQuestionAnswering"),oQr.forEach(t),g9o=r(qEe," (RemBERT model)"),qEe.forEach(t),h9o=i(P),n5=n(P,"LI",{});var GEe=s(n5);dne=n(GEe,"STRONG",{});var rQr=s(dne);p9o=r(rQr,"roberta"),rQr.forEach(t),_9o=r(GEe," \u2014 "),Sj=n(GEe,"A",{href:!0});var tQr=s(Sj);u9o=r(tQr,"RobertaForQuestionAnswering"),tQr.forEach(t),b9o=r(GEe," (RoBERTa model)"),GEe.forEach(t),v9o=i(P),s5=n(P,"LI",{});var OEe=s(s5);cne=n(OEe,"STRONG",{});var aQr=s(cne);T9o=r(aQr,"roformer"),aQr.forEach(t),F9o=r(OEe," \u2014 "),Pj=n(OEe,"A",{href:!0});var nQr=s(Pj);C9o=r(nQr,"RoFormerForQuestionAnswering"),nQr.forEach(t),M9o=r(OEe," (RoFormer model)"),OEe.forEach(t),E9o=i(P),l5=n(P,"LI",{});var XEe=s(l5);fne=n(XEe,"STRONG",{});var sQr=s(fne);y9o=r(sQr,"splinter"),sQr.forEach(t),w9o=r(XEe," \u2014 "),$j=n(XEe,"A",{href:!0});var lQr=s($j);A9o=r(lQr,"SplinterForQuestionAnswering"),lQr.forEach(t),L9o=r(XEe," (Splinter model)"),XEe.forEach(t),B9o=i(P),i5=n(P,"LI",{});var zEe=s(i5);mne=n(zEe,"STRONG",{});var iQr=s(mne);k9o=r(iQr,"squeezebert"),iQr.forEach(t),x9o=r(zEe," \u2014 "),Ij=n(zEe,"A",{href:!0});var dQr=s(Ij);R9o=r(dQr,"SqueezeBertForQuestionAnswering"),dQr.forEach(t),S9o=r(zEe," (SqueezeBERT model)"),zEe.forEach(t),P9o=i(P),d5=n(P,"LI",{});var VEe=s(d5);gne=n(VEe,"STRONG",{});var cQr=s(gne);$9o=r(cQr,"xlm"),cQr.forEach(t),I9o=r(VEe," \u2014 "),jj=n(VEe,"A",{href:!0});var fQr=s(jj);j9o=r(fQr,"XLMForQuestionAnsweringSimple"),fQr.forEach(t),N9o=r(VEe," (XLM model)"),VEe.forEach(t),D9o=i(P),c5=n(P,"LI",{});var WEe=s(c5);hne=n(WEe,"STRONG",{});var mQr=s(hne);q9o=r(mQr,"xlm-roberta"),mQr.forEach(t),G9o=r(WEe," \u2014 "),Nj=n(WEe,"A",{href:!0});var gQr=s(Nj);O9o=r(gQr,"XLMRobertaForQuestionAnswering"),gQr.forEach(t),X9o=r(WEe," (XLM-RoBERTa model)"),WEe.forEach(t),z9o=i(P),f5=n(P,"LI",{});var QEe=s(f5);pne=n(QEe,"STRONG",{});var hQr=s(pne);V9o=r(hQr,"xlm-roberta-xl"),hQr.forEach(t),W9o=r(QEe," \u2014 "),Dj=n(QEe,"A",{href:!0});var pQr=s(Dj);Q9o=r(pQr,"XLMRobertaXLForQuestionAnswering"),pQr.forEach(t),H9o=r(QEe," (XLM-RoBERTa-XL model)"),QEe.forEach(t),U9o=i(P),m5=n(P,"LI",{});var HEe=s(m5);_ne=n(HEe,"STRONG",{});var _Qr=s(_ne);J9o=r(_Qr,"xlnet"),_Qr.forEach(t),Y9o=r(HEe," \u2014 "),qj=n(HEe,"A",{href:!0});var uQr=s(qj);K9o=r(uQr,"XLNetForQuestionAnsweringSimple"),uQr.forEach(t),Z9o=r(HEe," (XLNet model)"),HEe.forEach(t),eBo=i(P),g5=n(P,"LI",{});var UEe=s(g5);une=n(UEe,"STRONG",{});var bQr=s(une);oBo=r(bQr,"yoso"),bQr.forEach(t),rBo=r(UEe," \u2014 "),Gj=n(UEe,"A",{href:!0});var vQr=s(Gj);tBo=r(vQr,"YosoForQuestionAnswering"),vQr.forEach(t),aBo=r(UEe," (YOSO model)"),UEe.forEach(t),P.forEach(t),nBo=i(Ot),h5=n(Ot,"P",{});var JEe=s(h5);sBo=r(JEe,"The model is set in evaluation mode by default using "),bne=n(JEe,"CODE",{});var TQr=s(bne);lBo=r(TQr,"model.eval()"),TQr.forEach(t),iBo=r(JEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vne=n(JEe,"CODE",{});var FQr=s(vne);dBo=r(FQr,"model.train()"),FQr.forEach(t),JEe.forEach(t),cBo=i(Ot),Tne=n(Ot,"P",{});var CQr=s(Tne);fBo=r(CQr,"Examples:"),CQr.forEach(t),mBo=i(Ot),m(JE.$$.fragment,Ot),Ot.forEach(t),tl.forEach(t),ILe=i(d),_d=n(d,"H2",{class:!0});var XBe=s(_d);p5=n(XBe,"A",{id:!0,class:!0,href:!0});var MQr=s(p5);Fne=n(MQr,"SPAN",{});var EQr=s(Fne);m(YE.$$.fragment,EQr),EQr.forEach(t),MQr.forEach(t),gBo=i(XBe),Cne=n(XBe,"SPAN",{});var yQr=s(Cne);hBo=r(yQr,"AutoModelForTableQuestionAnswering"),yQr.forEach(t),XBe.forEach(t),jLe=i(d),or=n(d,"DIV",{class:!0});var nl=s(or);m(KE.$$.fragment,nl),pBo=i(nl),ud=n(nl,"P",{});var mz=s(ud);_Bo=r(mz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Mne=n(mz,"CODE",{});var wQr=s(Mne);uBo=r(wQr,"from_pretrained()"),wQr.forEach(t),bBo=r(mz,"class method or the "),Ene=n(mz,"CODE",{});var AQr=s(Ene);vBo=r(AQr,"from_config()"),AQr.forEach(t),TBo=r(mz,`class
method.`),mz.forEach(t),FBo=i(nl),ZE=n(nl,"P",{});var zBe=s(ZE);CBo=r(zBe,"This class cannot be instantiated directly using "),yne=n(zBe,"CODE",{});var LQr=s(yne);MBo=r(LQr,"__init__()"),LQr.forEach(t),EBo=r(zBe," (throws an error)."),zBe.forEach(t),yBo=i(nl),Hr=n(nl,"DIV",{class:!0});var sl=s(Hr);m(e3.$$.fragment,sl),wBo=i(sl),wne=n(sl,"P",{});var BQr=s(wne);ABo=r(BQr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),BQr.forEach(t),LBo=i(sl),bd=n(sl,"P",{});var gz=s(bd);BBo=r(gz,`Note:
Loading a model from its configuration file does `),Ane=n(gz,"STRONG",{});var kQr=s(Ane);kBo=r(kQr,"not"),kQr.forEach(t),xBo=r(gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lne=n(gz,"CODE",{});var xQr=s(Lne);RBo=r(xQr,"from_pretrained()"),xQr.forEach(t),SBo=r(gz,"to load the model weights."),gz.forEach(t),PBo=i(sl),Bne=n(sl,"P",{});var RQr=s(Bne);$Bo=r(RQr,"Examples:"),RQr.forEach(t),IBo=i(sl),m(o3.$$.fragment,sl),sl.forEach(t),jBo=i(nl),qe=n(nl,"DIV",{class:!0});var Xt=s(qe);m(r3.$$.fragment,Xt),NBo=i(Xt),kne=n(Xt,"P",{});var SQr=s(kne);DBo=r(SQr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),SQr.forEach(t),qBo=i(Xt),Ua=n(Xt,"P",{});var uC=s(Ua);GBo=r(uC,"The model class to instantiate is selected based on the "),xne=n(uC,"CODE",{});var PQr=s(xne);OBo=r(PQr,"model_type"),PQr.forEach(t),XBo=r(uC,` property of the config object (either
passed as an argument or loaded from `),Rne=n(uC,"CODE",{});var $Qr=s(Rne);zBo=r($Qr,"pretrained_model_name_or_path"),$Qr.forEach(t),VBo=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sne=n(uC,"CODE",{});var IQr=s(Sne);WBo=r(IQr,"pretrained_model_name_or_path"),IQr.forEach(t),QBo=r(uC,":"),uC.forEach(t),HBo=i(Xt),Pne=n(Xt,"UL",{});var jQr=s(Pne);_5=n(jQr,"LI",{});var YEe=s(_5);$ne=n(YEe,"STRONG",{});var NQr=s($ne);UBo=r(NQr,"tapas"),NQr.forEach(t),JBo=r(YEe," \u2014 "),Oj=n(YEe,"A",{href:!0});var DQr=s(Oj);YBo=r(DQr,"TapasForQuestionAnswering"),DQr.forEach(t),KBo=r(YEe," (TAPAS model)"),YEe.forEach(t),jQr.forEach(t),ZBo=i(Xt),u5=n(Xt,"P",{});var KEe=s(u5);eko=r(KEe,"The model is set in evaluation mode by default using "),Ine=n(KEe,"CODE",{});var qQr=s(Ine);oko=r(qQr,"model.eval()"),qQr.forEach(t),rko=r(KEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jne=n(KEe,"CODE",{});var GQr=s(jne);tko=r(GQr,"model.train()"),GQr.forEach(t),KEe.forEach(t),ako=i(Xt),Nne=n(Xt,"P",{});var OQr=s(Nne);nko=r(OQr,"Examples:"),OQr.forEach(t),sko=i(Xt),m(t3.$$.fragment,Xt),Xt.forEach(t),nl.forEach(t),NLe=i(d),vd=n(d,"H2",{class:!0});var VBe=s(vd);b5=n(VBe,"A",{id:!0,class:!0,href:!0});var XQr=s(b5);Dne=n(XQr,"SPAN",{});var zQr=s(Dne);m(a3.$$.fragment,zQr),zQr.forEach(t),XQr.forEach(t),lko=i(VBe),qne=n(VBe,"SPAN",{});var VQr=s(qne);iko=r(VQr,"AutoModelForImageClassification"),VQr.forEach(t),VBe.forEach(t),DLe=i(d),rr=n(d,"DIV",{class:!0});var ll=s(rr);m(n3.$$.fragment,ll),dko=i(ll),Td=n(ll,"P",{});var hz=s(Td);cko=r(hz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gne=n(hz,"CODE",{});var WQr=s(Gne);fko=r(WQr,"from_pretrained()"),WQr.forEach(t),mko=r(hz,"class method or the "),One=n(hz,"CODE",{});var QQr=s(One);gko=r(QQr,"from_config()"),QQr.forEach(t),hko=r(hz,`class
method.`),hz.forEach(t),pko=i(ll),s3=n(ll,"P",{});var WBe=s(s3);_ko=r(WBe,"This class cannot be instantiated directly using "),Xne=n(WBe,"CODE",{});var HQr=s(Xne);uko=r(HQr,"__init__()"),HQr.forEach(t),bko=r(WBe," (throws an error)."),WBe.forEach(t),vko=i(ll),Ur=n(ll,"DIV",{class:!0});var il=s(Ur);m(l3.$$.fragment,il),Tko=i(il),zne=n(il,"P",{});var UQr=s(zne);Fko=r(UQr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UQr.forEach(t),Cko=i(il),Fd=n(il,"P",{});var pz=s(Fd);Mko=r(pz,`Note:
Loading a model from its configuration file does `),Vne=n(pz,"STRONG",{});var JQr=s(Vne);Eko=r(JQr,"not"),JQr.forEach(t),yko=r(pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wne=n(pz,"CODE",{});var YQr=s(Wne);wko=r(YQr,"from_pretrained()"),YQr.forEach(t),Ako=r(pz,"to load the model weights."),pz.forEach(t),Lko=i(il),Qne=n(il,"P",{});var KQr=s(Qne);Bko=r(KQr,"Examples:"),KQr.forEach(t),kko=i(il),m(i3.$$.fragment,il),il.forEach(t),xko=i(ll),Ge=n(ll,"DIV",{class:!0});var zt=s(Ge);m(d3.$$.fragment,zt),Rko=i(zt),Hne=n(zt,"P",{});var ZQr=s(Hne);Sko=r(ZQr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ZQr.forEach(t),Pko=i(zt),Ja=n(zt,"P",{});var bC=s(Ja);$ko=r(bC,"The model class to instantiate is selected based on the "),Une=n(bC,"CODE",{});var eHr=s(Une);Iko=r(eHr,"model_type"),eHr.forEach(t),jko=r(bC,` property of the config object (either
passed as an argument or loaded from `),Jne=n(bC,"CODE",{});var oHr=s(Jne);Nko=r(oHr,"pretrained_model_name_or_path"),oHr.forEach(t),Dko=r(bC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yne=n(bC,"CODE",{});var rHr=s(Yne);qko=r(rHr,"pretrained_model_name_or_path"),rHr.forEach(t),Gko=r(bC,":"),bC.forEach(t),Oko=i(zt),be=n(zt,"UL",{});var Ke=s(be);v5=n(Ke,"LI",{});var ZEe=s(v5);Kne=n(ZEe,"STRONG",{});var tHr=s(Kne);Xko=r(tHr,"beit"),tHr.forEach(t),zko=r(ZEe," \u2014 "),Xj=n(ZEe,"A",{href:!0});var aHr=s(Xj);Vko=r(aHr,"BeitForImageClassification"),aHr.forEach(t),Wko=r(ZEe," (BEiT model)"),ZEe.forEach(t),Qko=i(Ke),T5=n(Ke,"LI",{});var e3e=s(T5);Zne=n(e3e,"STRONG",{});var nHr=s(Zne);Hko=r(nHr,"convnext"),nHr.forEach(t),Uko=r(e3e," \u2014 "),zj=n(e3e,"A",{href:!0});var sHr=s(zj);Jko=r(sHr,"ConvNextForImageClassification"),sHr.forEach(t),Yko=r(e3e," (ConvNext model)"),e3e.forEach(t),Kko=i(Ke),Rs=n(Ke,"LI",{});var j0=s(Rs);ese=n(j0,"STRONG",{});var lHr=s(ese);Zko=r(lHr,"deit"),lHr.forEach(t),exo=r(j0," \u2014 "),Vj=n(j0,"A",{href:!0});var iHr=s(Vj);oxo=r(iHr,"DeiTForImageClassification"),iHr.forEach(t),rxo=r(j0," or "),Wj=n(j0,"A",{href:!0});var dHr=s(Wj);txo=r(dHr,"DeiTForImageClassificationWithTeacher"),dHr.forEach(t),axo=r(j0," (DeiT model)"),j0.forEach(t),nxo=i(Ke),F5=n(Ke,"LI",{});var o3e=s(F5);ose=n(o3e,"STRONG",{});var cHr=s(ose);sxo=r(cHr,"imagegpt"),cHr.forEach(t),lxo=r(o3e," \u2014 "),Qj=n(o3e,"A",{href:!0});var fHr=s(Qj);ixo=r(fHr,"ImageGPTForImageClassification"),fHr.forEach(t),dxo=r(o3e," (ImageGPT model)"),o3e.forEach(t),cxo=i(Ke),la=n(Ke,"LI",{});var Mf=s(la);rse=n(Mf,"STRONG",{});var mHr=s(rse);fxo=r(mHr,"perceiver"),mHr.forEach(t),mxo=r(Mf," \u2014 "),Hj=n(Mf,"A",{href:!0});var gHr=s(Hj);gxo=r(gHr,"PerceiverForImageClassificationLearned"),gHr.forEach(t),hxo=r(Mf," or "),Uj=n(Mf,"A",{href:!0});var hHr=s(Uj);pxo=r(hHr,"PerceiverForImageClassificationFourier"),hHr.forEach(t),_xo=r(Mf," or "),Jj=n(Mf,"A",{href:!0});var pHr=s(Jj);uxo=r(pHr,"PerceiverForImageClassificationConvProcessing"),pHr.forEach(t),bxo=r(Mf," (Perceiver model)"),Mf.forEach(t),vxo=i(Ke),C5=n(Ke,"LI",{});var r3e=s(C5);tse=n(r3e,"STRONG",{});var _Hr=s(tse);Txo=r(_Hr,"poolformer"),_Hr.forEach(t),Fxo=r(r3e," \u2014 "),Yj=n(r3e,"A",{href:!0});var uHr=s(Yj);Cxo=r(uHr,"PoolFormerForImageClassification"),uHr.forEach(t),Mxo=r(r3e," (PoolFormer model)"),r3e.forEach(t),Exo=i(Ke),M5=n(Ke,"LI",{});var t3e=s(M5);ase=n(t3e,"STRONG",{});var bHr=s(ase);yxo=r(bHr,"segformer"),bHr.forEach(t),wxo=r(t3e," \u2014 "),Kj=n(t3e,"A",{href:!0});var vHr=s(Kj);Axo=r(vHr,"SegformerForImageClassification"),vHr.forEach(t),Lxo=r(t3e," (SegFormer model)"),t3e.forEach(t),Bxo=i(Ke),E5=n(Ke,"LI",{});var a3e=s(E5);nse=n(a3e,"STRONG",{});var THr=s(nse);kxo=r(THr,"swin"),THr.forEach(t),xxo=r(a3e," \u2014 "),Zj=n(a3e,"A",{href:!0});var FHr=s(Zj);Rxo=r(FHr,"SwinForImageClassification"),FHr.forEach(t),Sxo=r(a3e," (Swin model)"),a3e.forEach(t),Pxo=i(Ke),y5=n(Ke,"LI",{});var n3e=s(y5);sse=n(n3e,"STRONG",{});var CHr=s(sse);$xo=r(CHr,"vit"),CHr.forEach(t),Ixo=r(n3e," \u2014 "),eN=n(n3e,"A",{href:!0});var MHr=s(eN);jxo=r(MHr,"ViTForImageClassification"),MHr.forEach(t),Nxo=r(n3e," (ViT model)"),n3e.forEach(t),Ke.forEach(t),Dxo=i(zt),w5=n(zt,"P",{});var s3e=s(w5);qxo=r(s3e,"The model is set in evaluation mode by default using "),lse=n(s3e,"CODE",{});var EHr=s(lse);Gxo=r(EHr,"model.eval()"),EHr.forEach(t),Oxo=r(s3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ise=n(s3e,"CODE",{});var yHr=s(ise);Xxo=r(yHr,"model.train()"),yHr.forEach(t),s3e.forEach(t),zxo=i(zt),dse=n(zt,"P",{});var wHr=s(dse);Vxo=r(wHr,"Examples:"),wHr.forEach(t),Wxo=i(zt),m(c3.$$.fragment,zt),zt.forEach(t),ll.forEach(t),qLe=i(d),Cd=n(d,"H2",{class:!0});var QBe=s(Cd);A5=n(QBe,"A",{id:!0,class:!0,href:!0});var AHr=s(A5);cse=n(AHr,"SPAN",{});var LHr=s(cse);m(f3.$$.fragment,LHr),LHr.forEach(t),AHr.forEach(t),Qxo=i(QBe),fse=n(QBe,"SPAN",{});var BHr=s(fse);Hxo=r(BHr,"AutoModelForVision2Seq"),BHr.forEach(t),QBe.forEach(t),GLe=i(d),tr=n(d,"DIV",{class:!0});var dl=s(tr);m(m3.$$.fragment,dl),Uxo=i(dl),Md=n(dl,"P",{});var _z=s(Md);Jxo=r(_z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mse=n(_z,"CODE",{});var kHr=s(mse);Yxo=r(kHr,"from_pretrained()"),kHr.forEach(t),Kxo=r(_z,"class method or the "),gse=n(_z,"CODE",{});var xHr=s(gse);Zxo=r(xHr,"from_config()"),xHr.forEach(t),eRo=r(_z,`class
method.`),_z.forEach(t),oRo=i(dl),g3=n(dl,"P",{});var HBe=s(g3);rRo=r(HBe,"This class cannot be instantiated directly using "),hse=n(HBe,"CODE",{});var RHr=s(hse);tRo=r(RHr,"__init__()"),RHr.forEach(t),aRo=r(HBe," (throws an error)."),HBe.forEach(t),nRo=i(dl),Jr=n(dl,"DIV",{class:!0});var cl=s(Jr);m(h3.$$.fragment,cl),sRo=i(cl),pse=n(cl,"P",{});var SHr=s(pse);lRo=r(SHr,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),SHr.forEach(t),iRo=i(cl),Ed=n(cl,"P",{});var uz=s(Ed);dRo=r(uz,`Note:
Loading a model from its configuration file does `),_se=n(uz,"STRONG",{});var PHr=s(_se);cRo=r(PHr,"not"),PHr.forEach(t),fRo=r(uz,` load the model weights. It only affects the
model\u2019s configuration. Use `),use=n(uz,"CODE",{});var $Hr=s(use);mRo=r($Hr,"from_pretrained()"),$Hr.forEach(t),gRo=r(uz,"to load the model weights."),uz.forEach(t),hRo=i(cl),bse=n(cl,"P",{});var IHr=s(bse);pRo=r(IHr,"Examples:"),IHr.forEach(t),_Ro=i(cl),m(p3.$$.fragment,cl),cl.forEach(t),uRo=i(dl),Oe=n(dl,"DIV",{class:!0});var Vt=s(Oe);m(_3.$$.fragment,Vt),bRo=i(Vt),vse=n(Vt,"P",{});var jHr=s(vse);vRo=r(jHr,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jHr.forEach(t),TRo=i(Vt),Ya=n(Vt,"P",{});var vC=s(Ya);FRo=r(vC,"The model class to instantiate is selected based on the "),Tse=n(vC,"CODE",{});var NHr=s(Tse);CRo=r(NHr,"model_type"),NHr.forEach(t),MRo=r(vC,` property of the config object (either
passed as an argument or loaded from `),Fse=n(vC,"CODE",{});var DHr=s(Fse);ERo=r(DHr,"pretrained_model_name_or_path"),DHr.forEach(t),yRo=r(vC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cse=n(vC,"CODE",{});var qHr=s(Cse);wRo=r(qHr,"pretrained_model_name_or_path"),qHr.forEach(t),ARo=r(vC,":"),vC.forEach(t),LRo=i(Vt),Mse=n(Vt,"UL",{});var GHr=s(Mse);L5=n(GHr,"LI",{});var l3e=s(L5);Ese=n(l3e,"STRONG",{});var OHr=s(Ese);BRo=r(OHr,"vision-encoder-decoder"),OHr.forEach(t),kRo=r(l3e," \u2014 "),oN=n(l3e,"A",{href:!0});var XHr=s(oN);xRo=r(XHr,"VisionEncoderDecoderModel"),XHr.forEach(t),RRo=r(l3e," (Vision Encoder decoder model)"),l3e.forEach(t),GHr.forEach(t),SRo=i(Vt),B5=n(Vt,"P",{});var i3e=s(B5);PRo=r(i3e,"The model is set in evaluation mode by default using "),yse=n(i3e,"CODE",{});var zHr=s(yse);$Ro=r(zHr,"model.eval()"),zHr.forEach(t),IRo=r(i3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wse=n(i3e,"CODE",{});var VHr=s(wse);jRo=r(VHr,"model.train()"),VHr.forEach(t),i3e.forEach(t),NRo=i(Vt),Ase=n(Vt,"P",{});var WHr=s(Ase);DRo=r(WHr,"Examples:"),WHr.forEach(t),qRo=i(Vt),m(u3.$$.fragment,Vt),Vt.forEach(t),dl.forEach(t),OLe=i(d),yd=n(d,"H2",{class:!0});var UBe=s(yd);k5=n(UBe,"A",{id:!0,class:!0,href:!0});var QHr=s(k5);Lse=n(QHr,"SPAN",{});var HHr=s(Lse);m(b3.$$.fragment,HHr),HHr.forEach(t),QHr.forEach(t),GRo=i(UBe),Bse=n(UBe,"SPAN",{});var UHr=s(Bse);ORo=r(UHr,"AutoModelForAudioClassification"),UHr.forEach(t),UBe.forEach(t),XLe=i(d),ar=n(d,"DIV",{class:!0});var fl=s(ar);m(v3.$$.fragment,fl),XRo=i(fl),wd=n(fl,"P",{});var bz=s(wd);zRo=r(bz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),kse=n(bz,"CODE",{});var JHr=s(kse);VRo=r(JHr,"from_pretrained()"),JHr.forEach(t),WRo=r(bz,"class method or the "),xse=n(bz,"CODE",{});var YHr=s(xse);QRo=r(YHr,"from_config()"),YHr.forEach(t),HRo=r(bz,`class
method.`),bz.forEach(t),URo=i(fl),T3=n(fl,"P",{});var JBe=s(T3);JRo=r(JBe,"This class cannot be instantiated directly using "),Rse=n(JBe,"CODE",{});var KHr=s(Rse);YRo=r(KHr,"__init__()"),KHr.forEach(t),KRo=r(JBe," (throws an error)."),JBe.forEach(t),ZRo=i(fl),Yr=n(fl,"DIV",{class:!0});var ml=s(Yr);m(F3.$$.fragment,ml),eSo=i(ml),Sse=n(ml,"P",{});var ZHr=s(Sse);oSo=r(ZHr,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ZHr.forEach(t),rSo=i(ml),Ad=n(ml,"P",{});var vz=s(Ad);tSo=r(vz,`Note:
Loading a model from its configuration file does `),Pse=n(vz,"STRONG",{});var eUr=s(Pse);aSo=r(eUr,"not"),eUr.forEach(t),nSo=r(vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),$se=n(vz,"CODE",{});var oUr=s($se);sSo=r(oUr,"from_pretrained()"),oUr.forEach(t),lSo=r(vz,"to load the model weights."),vz.forEach(t),iSo=i(ml),Ise=n(ml,"P",{});var rUr=s(Ise);dSo=r(rUr,"Examples:"),rUr.forEach(t),cSo=i(ml),m(C3.$$.fragment,ml),ml.forEach(t),fSo=i(fl),Xe=n(fl,"DIV",{class:!0});var Wt=s(Xe);m(M3.$$.fragment,Wt),mSo=i(Wt),jse=n(Wt,"P",{});var tUr=s(jse);gSo=r(tUr,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),tUr.forEach(t),hSo=i(Wt),Ka=n(Wt,"P",{});var TC=s(Ka);pSo=r(TC,"The model class to instantiate is selected based on the "),Nse=n(TC,"CODE",{});var aUr=s(Nse);_So=r(aUr,"model_type"),aUr.forEach(t),uSo=r(TC,` property of the config object (either
passed as an argument or loaded from `),Dse=n(TC,"CODE",{});var nUr=s(Dse);bSo=r(nUr,"pretrained_model_name_or_path"),nUr.forEach(t),vSo=r(TC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qse=n(TC,"CODE",{});var sUr=s(qse);TSo=r(sUr,"pretrained_model_name_or_path"),sUr.forEach(t),FSo=r(TC,":"),TC.forEach(t),CSo=i(Wt),ao=n(Wt,"UL",{});var Qt=s(ao);x5=n(Qt,"LI",{});var d3e=s(x5);Gse=n(d3e,"STRONG",{});var lUr=s(Gse);MSo=r(lUr,"hubert"),lUr.forEach(t),ESo=r(d3e," \u2014 "),rN=n(d3e,"A",{href:!0});var iUr=s(rN);ySo=r(iUr,"HubertForSequenceClassification"),iUr.forEach(t),wSo=r(d3e," (Hubert model)"),d3e.forEach(t),ASo=i(Qt),R5=n(Qt,"LI",{});var c3e=s(R5);Ose=n(c3e,"STRONG",{});var dUr=s(Ose);LSo=r(dUr,"sew"),dUr.forEach(t),BSo=r(c3e," \u2014 "),tN=n(c3e,"A",{href:!0});var cUr=s(tN);kSo=r(cUr,"SEWForSequenceClassification"),cUr.forEach(t),xSo=r(c3e," (SEW model)"),c3e.forEach(t),RSo=i(Qt),S5=n(Qt,"LI",{});var f3e=s(S5);Xse=n(f3e,"STRONG",{});var fUr=s(Xse);SSo=r(fUr,"sew-d"),fUr.forEach(t),PSo=r(f3e," \u2014 "),aN=n(f3e,"A",{href:!0});var mUr=s(aN);$So=r(mUr,"SEWDForSequenceClassification"),mUr.forEach(t),ISo=r(f3e," (SEW-D model)"),f3e.forEach(t),jSo=i(Qt),P5=n(Qt,"LI",{});var m3e=s(P5);zse=n(m3e,"STRONG",{});var gUr=s(zse);NSo=r(gUr,"unispeech"),gUr.forEach(t),DSo=r(m3e," \u2014 "),nN=n(m3e,"A",{href:!0});var hUr=s(nN);qSo=r(hUr,"UniSpeechForSequenceClassification"),hUr.forEach(t),GSo=r(m3e," (UniSpeech model)"),m3e.forEach(t),OSo=i(Qt),$5=n(Qt,"LI",{});var g3e=s($5);Vse=n(g3e,"STRONG",{});var pUr=s(Vse);XSo=r(pUr,"unispeech-sat"),pUr.forEach(t),zSo=r(g3e," \u2014 "),sN=n(g3e,"A",{href:!0});var _Ur=s(sN);VSo=r(_Ur,"UniSpeechSatForSequenceClassification"),_Ur.forEach(t),WSo=r(g3e," (UniSpeechSat model)"),g3e.forEach(t),QSo=i(Qt),I5=n(Qt,"LI",{});var h3e=s(I5);Wse=n(h3e,"STRONG",{});var uUr=s(Wse);HSo=r(uUr,"wav2vec2"),uUr.forEach(t),USo=r(h3e," \u2014 "),lN=n(h3e,"A",{href:!0});var bUr=s(lN);JSo=r(bUr,"Wav2Vec2ForSequenceClassification"),bUr.forEach(t),YSo=r(h3e," (Wav2Vec2 model)"),h3e.forEach(t),KSo=i(Qt),j5=n(Qt,"LI",{});var p3e=s(j5);Qse=n(p3e,"STRONG",{});var vUr=s(Qse);ZSo=r(vUr,"wavlm"),vUr.forEach(t),ePo=r(p3e," \u2014 "),iN=n(p3e,"A",{href:!0});var TUr=s(iN);oPo=r(TUr,"WavLMForSequenceClassification"),TUr.forEach(t),rPo=r(p3e," (WavLM model)"),p3e.forEach(t),Qt.forEach(t),tPo=i(Wt),N5=n(Wt,"P",{});var _3e=s(N5);aPo=r(_3e,"The model is set in evaluation mode by default using "),Hse=n(_3e,"CODE",{});var FUr=s(Hse);nPo=r(FUr,"model.eval()"),FUr.forEach(t),sPo=r(_3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Use=n(_3e,"CODE",{});var CUr=s(Use);lPo=r(CUr,"model.train()"),CUr.forEach(t),_3e.forEach(t),iPo=i(Wt),Jse=n(Wt,"P",{});var MUr=s(Jse);dPo=r(MUr,"Examples:"),MUr.forEach(t),cPo=i(Wt),m(E3.$$.fragment,Wt),Wt.forEach(t),fl.forEach(t),zLe=i(d),Ld=n(d,"H2",{class:!0});var YBe=s(Ld);D5=n(YBe,"A",{id:!0,class:!0,href:!0});var EUr=s(D5);Yse=n(EUr,"SPAN",{});var yUr=s(Yse);m(y3.$$.fragment,yUr),yUr.forEach(t),EUr.forEach(t),fPo=i(YBe),Kse=n(YBe,"SPAN",{});var wUr=s(Kse);mPo=r(wUr,"AutoModelForAudioFrameClassification"),wUr.forEach(t),YBe.forEach(t),VLe=i(d),nr=n(d,"DIV",{class:!0});var gl=s(nr);m(w3.$$.fragment,gl),gPo=i(gl),Bd=n(gl,"P",{});var Tz=s(Bd);hPo=r(Tz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Zse=n(Tz,"CODE",{});var AUr=s(Zse);pPo=r(AUr,"from_pretrained()"),AUr.forEach(t),_Po=r(Tz,"class method or the "),ele=n(Tz,"CODE",{});var LUr=s(ele);uPo=r(LUr,"from_config()"),LUr.forEach(t),bPo=r(Tz,`class
method.`),Tz.forEach(t),vPo=i(gl),A3=n(gl,"P",{});var KBe=s(A3);TPo=r(KBe,"This class cannot be instantiated directly using "),ole=n(KBe,"CODE",{});var BUr=s(ole);FPo=r(BUr,"__init__()"),BUr.forEach(t),CPo=r(KBe," (throws an error)."),KBe.forEach(t),MPo=i(gl),Kr=n(gl,"DIV",{class:!0});var hl=s(Kr);m(L3.$$.fragment,hl),EPo=i(hl),rle=n(hl,"P",{});var kUr=s(rle);yPo=r(kUr,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),kUr.forEach(t),wPo=i(hl),kd=n(hl,"P",{});var Fz=s(kd);APo=r(Fz,`Note:
Loading a model from its configuration file does `),tle=n(Fz,"STRONG",{});var xUr=s(tle);LPo=r(xUr,"not"),xUr.forEach(t),BPo=r(Fz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ale=n(Fz,"CODE",{});var RUr=s(ale);kPo=r(RUr,"from_pretrained()"),RUr.forEach(t),xPo=r(Fz,"to load the model weights."),Fz.forEach(t),RPo=i(hl),nle=n(hl,"P",{});var SUr=s(nle);SPo=r(SUr,"Examples:"),SUr.forEach(t),PPo=i(hl),m(B3.$$.fragment,hl),hl.forEach(t),$Po=i(gl),ze=n(gl,"DIV",{class:!0});var Ht=s(ze);m(k3.$$.fragment,Ht),IPo=i(Ht),sle=n(Ht,"P",{});var PUr=s(sle);jPo=r(PUr,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),PUr.forEach(t),NPo=i(Ht),Za=n(Ht,"P",{});var FC=s(Za);DPo=r(FC,"The model class to instantiate is selected based on the "),lle=n(FC,"CODE",{});var $Ur=s(lle);qPo=r($Ur,"model_type"),$Ur.forEach(t),GPo=r(FC,` property of the config object (either
passed as an argument or loaded from `),ile=n(FC,"CODE",{});var IUr=s(ile);OPo=r(IUr,"pretrained_model_name_or_path"),IUr.forEach(t),XPo=r(FC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dle=n(FC,"CODE",{});var jUr=s(dle);zPo=r(jUr,"pretrained_model_name_or_path"),jUr.forEach(t),VPo=r(FC,":"),FC.forEach(t),WPo=i(Ht),xd=n(Ht,"UL",{});var Cz=s(xd);q5=n(Cz,"LI",{});var u3e=s(q5);cle=n(u3e,"STRONG",{});var NUr=s(cle);QPo=r(NUr,"unispeech-sat"),NUr.forEach(t),HPo=r(u3e," \u2014 "),dN=n(u3e,"A",{href:!0});var DUr=s(dN);UPo=r(DUr,"UniSpeechSatForAudioFrameClassification"),DUr.forEach(t),JPo=r(u3e," (UniSpeechSat model)"),u3e.forEach(t),YPo=i(Cz),G5=n(Cz,"LI",{});var b3e=s(G5);fle=n(b3e,"STRONG",{});var qUr=s(fle);KPo=r(qUr,"wav2vec2"),qUr.forEach(t),ZPo=r(b3e," \u2014 "),cN=n(b3e,"A",{href:!0});var GUr=s(cN);e$o=r(GUr,"Wav2Vec2ForAudioFrameClassification"),GUr.forEach(t),o$o=r(b3e," (Wav2Vec2 model)"),b3e.forEach(t),r$o=i(Cz),O5=n(Cz,"LI",{});var v3e=s(O5);mle=n(v3e,"STRONG",{});var OUr=s(mle);t$o=r(OUr,"wavlm"),OUr.forEach(t),a$o=r(v3e," \u2014 "),fN=n(v3e,"A",{href:!0});var XUr=s(fN);n$o=r(XUr,"WavLMForAudioFrameClassification"),XUr.forEach(t),s$o=r(v3e," (WavLM model)"),v3e.forEach(t),Cz.forEach(t),l$o=i(Ht),X5=n(Ht,"P",{});var T3e=s(X5);i$o=r(T3e,"The model is set in evaluation mode by default using "),gle=n(T3e,"CODE",{});var zUr=s(gle);d$o=r(zUr,"model.eval()"),zUr.forEach(t),c$o=r(T3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hle=n(T3e,"CODE",{});var VUr=s(hle);f$o=r(VUr,"model.train()"),VUr.forEach(t),T3e.forEach(t),m$o=i(Ht),ple=n(Ht,"P",{});var WUr=s(ple);g$o=r(WUr,"Examples:"),WUr.forEach(t),h$o=i(Ht),m(x3.$$.fragment,Ht),Ht.forEach(t),gl.forEach(t),WLe=i(d),Rd=n(d,"H2",{class:!0});var ZBe=s(Rd);z5=n(ZBe,"A",{id:!0,class:!0,href:!0});var QUr=s(z5);_le=n(QUr,"SPAN",{});var HUr=s(_le);m(R3.$$.fragment,HUr),HUr.forEach(t),QUr.forEach(t),p$o=i(ZBe),ule=n(ZBe,"SPAN",{});var UUr=s(ule);_$o=r(UUr,"AutoModelForCTC"),UUr.forEach(t),ZBe.forEach(t),QLe=i(d),sr=n(d,"DIV",{class:!0});var pl=s(sr);m(S3.$$.fragment,pl),u$o=i(pl),Sd=n(pl,"P",{});var Mz=s(Sd);b$o=r(Mz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ble=n(Mz,"CODE",{});var JUr=s(ble);v$o=r(JUr,"from_pretrained()"),JUr.forEach(t),T$o=r(Mz,"class method or the "),vle=n(Mz,"CODE",{});var YUr=s(vle);F$o=r(YUr,"from_config()"),YUr.forEach(t),C$o=r(Mz,`class
method.`),Mz.forEach(t),M$o=i(pl),P3=n(pl,"P",{});var eke=s(P3);E$o=r(eke,"This class cannot be instantiated directly using "),Tle=n(eke,"CODE",{});var KUr=s(Tle);y$o=r(KUr,"__init__()"),KUr.forEach(t),w$o=r(eke," (throws an error)."),eke.forEach(t),A$o=i(pl),Zr=n(pl,"DIV",{class:!0});var _l=s(Zr);m($3.$$.fragment,_l),L$o=i(_l),Fle=n(_l,"P",{});var ZUr=s(Fle);B$o=r(ZUr,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ZUr.forEach(t),k$o=i(_l),Pd=n(_l,"P",{});var Ez=s(Pd);x$o=r(Ez,`Note:
Loading a model from its configuration file does `),Cle=n(Ez,"STRONG",{});var eJr=s(Cle);R$o=r(eJr,"not"),eJr.forEach(t),S$o=r(Ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mle=n(Ez,"CODE",{});var oJr=s(Mle);P$o=r(oJr,"from_pretrained()"),oJr.forEach(t),$$o=r(Ez,"to load the model weights."),Ez.forEach(t),I$o=i(_l),Ele=n(_l,"P",{});var rJr=s(Ele);j$o=r(rJr,"Examples:"),rJr.forEach(t),N$o=i(_l),m(I3.$$.fragment,_l),_l.forEach(t),D$o=i(pl),Ve=n(pl,"DIV",{class:!0});var Ut=s(Ve);m(j3.$$.fragment,Ut),q$o=i(Ut),yle=n(Ut,"P",{});var tJr=s(yle);G$o=r(tJr,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),tJr.forEach(t),O$o=i(Ut),en=n(Ut,"P",{});var CC=s(en);X$o=r(CC,"The model class to instantiate is selected based on the "),wle=n(CC,"CODE",{});var aJr=s(wle);z$o=r(aJr,"model_type"),aJr.forEach(t),V$o=r(CC,` property of the config object (either
passed as an argument or loaded from `),Ale=n(CC,"CODE",{});var nJr=s(Ale);W$o=r(nJr,"pretrained_model_name_or_path"),nJr.forEach(t),Q$o=r(CC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lle=n(CC,"CODE",{});var sJr=s(Lle);H$o=r(sJr,"pretrained_model_name_or_path"),sJr.forEach(t),U$o=r(CC,":"),CC.forEach(t),J$o=i(Ut),no=n(Ut,"UL",{});var Jt=s(no);V5=n(Jt,"LI",{});var F3e=s(V5);Ble=n(F3e,"STRONG",{});var lJr=s(Ble);Y$o=r(lJr,"hubert"),lJr.forEach(t),K$o=r(F3e," \u2014 "),mN=n(F3e,"A",{href:!0});var iJr=s(mN);Z$o=r(iJr,"HubertForCTC"),iJr.forEach(t),eIo=r(F3e," (Hubert model)"),F3e.forEach(t),oIo=i(Jt),W5=n(Jt,"LI",{});var C3e=s(W5);kle=n(C3e,"STRONG",{});var dJr=s(kle);rIo=r(dJr,"sew"),dJr.forEach(t),tIo=r(C3e," \u2014 "),gN=n(C3e,"A",{href:!0});var cJr=s(gN);aIo=r(cJr,"SEWForCTC"),cJr.forEach(t),nIo=r(C3e," (SEW model)"),C3e.forEach(t),sIo=i(Jt),Q5=n(Jt,"LI",{});var M3e=s(Q5);xle=n(M3e,"STRONG",{});var fJr=s(xle);lIo=r(fJr,"sew-d"),fJr.forEach(t),iIo=r(M3e," \u2014 "),hN=n(M3e,"A",{href:!0});var mJr=s(hN);dIo=r(mJr,"SEWDForCTC"),mJr.forEach(t),cIo=r(M3e," (SEW-D model)"),M3e.forEach(t),fIo=i(Jt),H5=n(Jt,"LI",{});var E3e=s(H5);Rle=n(E3e,"STRONG",{});var gJr=s(Rle);mIo=r(gJr,"unispeech"),gJr.forEach(t),gIo=r(E3e," \u2014 "),pN=n(E3e,"A",{href:!0});var hJr=s(pN);hIo=r(hJr,"UniSpeechForCTC"),hJr.forEach(t),pIo=r(E3e," (UniSpeech model)"),E3e.forEach(t),_Io=i(Jt),U5=n(Jt,"LI",{});var y3e=s(U5);Sle=n(y3e,"STRONG",{});var pJr=s(Sle);uIo=r(pJr,"unispeech-sat"),pJr.forEach(t),bIo=r(y3e," \u2014 "),_N=n(y3e,"A",{href:!0});var _Jr=s(_N);vIo=r(_Jr,"UniSpeechSatForCTC"),_Jr.forEach(t),TIo=r(y3e," (UniSpeechSat model)"),y3e.forEach(t),FIo=i(Jt),J5=n(Jt,"LI",{});var w3e=s(J5);Ple=n(w3e,"STRONG",{});var uJr=s(Ple);CIo=r(uJr,"wav2vec2"),uJr.forEach(t),MIo=r(w3e," \u2014 "),uN=n(w3e,"A",{href:!0});var bJr=s(uN);EIo=r(bJr,"Wav2Vec2ForCTC"),bJr.forEach(t),yIo=r(w3e," (Wav2Vec2 model)"),w3e.forEach(t),wIo=i(Jt),Y5=n(Jt,"LI",{});var A3e=s(Y5);$le=n(A3e,"STRONG",{});var vJr=s($le);AIo=r(vJr,"wavlm"),vJr.forEach(t),LIo=r(A3e," \u2014 "),bN=n(A3e,"A",{href:!0});var TJr=s(bN);BIo=r(TJr,"WavLMForCTC"),TJr.forEach(t),kIo=r(A3e," (WavLM model)"),A3e.forEach(t),Jt.forEach(t),xIo=i(Ut),K5=n(Ut,"P",{});var L3e=s(K5);RIo=r(L3e,"The model is set in evaluation mode by default using "),Ile=n(L3e,"CODE",{});var FJr=s(Ile);SIo=r(FJr,"model.eval()"),FJr.forEach(t),PIo=r(L3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jle=n(L3e,"CODE",{});var CJr=s(jle);$Io=r(CJr,"model.train()"),CJr.forEach(t),L3e.forEach(t),IIo=i(Ut),Nle=n(Ut,"P",{});var MJr=s(Nle);jIo=r(MJr,"Examples:"),MJr.forEach(t),NIo=i(Ut),m(N3.$$.fragment,Ut),Ut.forEach(t),pl.forEach(t),HLe=i(d),$d=n(d,"H2",{class:!0});var oke=s($d);Z5=n(oke,"A",{id:!0,class:!0,href:!0});var EJr=s(Z5);Dle=n(EJr,"SPAN",{});var yJr=s(Dle);m(D3.$$.fragment,yJr),yJr.forEach(t),EJr.forEach(t),DIo=i(oke),qle=n(oke,"SPAN",{});var wJr=s(qle);qIo=r(wJr,"AutoModelForSpeechSeq2Seq"),wJr.forEach(t),oke.forEach(t),ULe=i(d),lr=n(d,"DIV",{class:!0});var ul=s(lr);m(q3.$$.fragment,ul),GIo=i(ul),Id=n(ul,"P",{});var yz=s(Id);OIo=r(yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Gle=n(yz,"CODE",{});var AJr=s(Gle);XIo=r(AJr,"from_pretrained()"),AJr.forEach(t),zIo=r(yz,"class method or the "),Ole=n(yz,"CODE",{});var LJr=s(Ole);VIo=r(LJr,"from_config()"),LJr.forEach(t),WIo=r(yz,`class
method.`),yz.forEach(t),QIo=i(ul),G3=n(ul,"P",{});var rke=s(G3);HIo=r(rke,"This class cannot be instantiated directly using "),Xle=n(rke,"CODE",{});var BJr=s(Xle);UIo=r(BJr,"__init__()"),BJr.forEach(t),JIo=r(rke," (throws an error)."),rke.forEach(t),YIo=i(ul),et=n(ul,"DIV",{class:!0});var bl=s(et);m(O3.$$.fragment,bl),KIo=i(bl),zle=n(bl,"P",{});var kJr=s(zle);ZIo=r(kJr,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),kJr.forEach(t),ejo=i(bl),jd=n(bl,"P",{});var wz=s(jd);ojo=r(wz,`Note:
Loading a model from its configuration file does `),Vle=n(wz,"STRONG",{});var xJr=s(Vle);rjo=r(xJr,"not"),xJr.forEach(t),tjo=r(wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wle=n(wz,"CODE",{});var RJr=s(Wle);ajo=r(RJr,"from_pretrained()"),RJr.forEach(t),njo=r(wz,"to load the model weights."),wz.forEach(t),sjo=i(bl),Qle=n(bl,"P",{});var SJr=s(Qle);ljo=r(SJr,"Examples:"),SJr.forEach(t),ijo=i(bl),m(X3.$$.fragment,bl),bl.forEach(t),djo=i(ul),We=n(ul,"DIV",{class:!0});var Yt=s(We);m(z3.$$.fragment,Yt),cjo=i(Yt),Hle=n(Yt,"P",{});var PJr=s(Hle);fjo=r(PJr,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),PJr.forEach(t),mjo=i(Yt),on=n(Yt,"P",{});var MC=s(on);gjo=r(MC,"The model class to instantiate is selected based on the "),Ule=n(MC,"CODE",{});var $Jr=s(Ule);hjo=r($Jr,"model_type"),$Jr.forEach(t),pjo=r(MC,` property of the config object (either
passed as an argument or loaded from `),Jle=n(MC,"CODE",{});var IJr=s(Jle);_jo=r(IJr,"pretrained_model_name_or_path"),IJr.forEach(t),ujo=r(MC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yle=n(MC,"CODE",{});var jJr=s(Yle);bjo=r(jJr,"pretrained_model_name_or_path"),jJr.forEach(t),vjo=r(MC,":"),MC.forEach(t),Tjo=i(Yt),V3=n(Yt,"UL",{});var tke=s(V3);e2=n(tke,"LI",{});var B3e=s(e2);Kle=n(B3e,"STRONG",{});var NJr=s(Kle);Fjo=r(NJr,"speech-encoder-decoder"),NJr.forEach(t),Cjo=r(B3e," \u2014 "),vN=n(B3e,"A",{href:!0});var DJr=s(vN);Mjo=r(DJr,"SpeechEncoderDecoderModel"),DJr.forEach(t),Ejo=r(B3e," (Speech Encoder decoder model)"),B3e.forEach(t),yjo=i(tke),o2=n(tke,"LI",{});var k3e=s(o2);Zle=n(k3e,"STRONG",{});var qJr=s(Zle);wjo=r(qJr,"speech_to_text"),qJr.forEach(t),Ajo=r(k3e," \u2014 "),TN=n(k3e,"A",{href:!0});var GJr=s(TN);Ljo=r(GJr,"Speech2TextForConditionalGeneration"),GJr.forEach(t),Bjo=r(k3e," (Speech2Text model)"),k3e.forEach(t),tke.forEach(t),kjo=i(Yt),r2=n(Yt,"P",{});var x3e=s(r2);xjo=r(x3e,"The model is set in evaluation mode by default using "),eie=n(x3e,"CODE",{});var OJr=s(eie);Rjo=r(OJr,"model.eval()"),OJr.forEach(t),Sjo=r(x3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oie=n(x3e,"CODE",{});var XJr=s(oie);Pjo=r(XJr,"model.train()"),XJr.forEach(t),x3e.forEach(t),$jo=i(Yt),rie=n(Yt,"P",{});var zJr=s(rie);Ijo=r(zJr,"Examples:"),zJr.forEach(t),jjo=i(Yt),m(W3.$$.fragment,Yt),Yt.forEach(t),ul.forEach(t),JLe=i(d),Nd=n(d,"H2",{class:!0});var ake=s(Nd);t2=n(ake,"A",{id:!0,class:!0,href:!0});var VJr=s(t2);tie=n(VJr,"SPAN",{});var WJr=s(tie);m(Q3.$$.fragment,WJr),WJr.forEach(t),VJr.forEach(t),Njo=i(ake),aie=n(ake,"SPAN",{});var QJr=s(aie);Djo=r(QJr,"AutoModelForAudioXVector"),QJr.forEach(t),ake.forEach(t),YLe=i(d),ir=n(d,"DIV",{class:!0});var vl=s(ir);m(H3.$$.fragment,vl),qjo=i(vl),Dd=n(vl,"P",{});var Az=s(Dd);Gjo=r(Az,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),nie=n(Az,"CODE",{});var HJr=s(nie);Ojo=r(HJr,"from_pretrained()"),HJr.forEach(t),Xjo=r(Az,"class method or the "),sie=n(Az,"CODE",{});var UJr=s(sie);zjo=r(UJr,"from_config()"),UJr.forEach(t),Vjo=r(Az,`class
method.`),Az.forEach(t),Wjo=i(vl),U3=n(vl,"P",{});var nke=s(U3);Qjo=r(nke,"This class cannot be instantiated directly using "),lie=n(nke,"CODE",{});var JJr=s(lie);Hjo=r(JJr,"__init__()"),JJr.forEach(t),Ujo=r(nke," (throws an error)."),nke.forEach(t),Jjo=i(vl),ot=n(vl,"DIV",{class:!0});var Tl=s(ot);m(J3.$$.fragment,Tl),Yjo=i(Tl),iie=n(Tl,"P",{});var YJr=s(iie);Kjo=r(YJr,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),YJr.forEach(t),Zjo=i(Tl),qd=n(Tl,"P",{});var Lz=s(qd);eNo=r(Lz,`Note:
Loading a model from its configuration file does `),die=n(Lz,"STRONG",{});var KJr=s(die);oNo=r(KJr,"not"),KJr.forEach(t),rNo=r(Lz,` load the model weights. It only affects the
model\u2019s configuration. Use `),cie=n(Lz,"CODE",{});var ZJr=s(cie);tNo=r(ZJr,"from_pretrained()"),ZJr.forEach(t),aNo=r(Lz,"to load the model weights."),Lz.forEach(t),nNo=i(Tl),fie=n(Tl,"P",{});var eYr=s(fie);sNo=r(eYr,"Examples:"),eYr.forEach(t),lNo=i(Tl),m(Y3.$$.fragment,Tl),Tl.forEach(t),iNo=i(vl),Qe=n(vl,"DIV",{class:!0});var Kt=s(Qe);m(K3.$$.fragment,Kt),dNo=i(Kt),mie=n(Kt,"P",{});var oYr=s(mie);cNo=r(oYr,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),oYr.forEach(t),fNo=i(Kt),rn=n(Kt,"P",{});var EC=s(rn);mNo=r(EC,"The model class to instantiate is selected based on the "),gie=n(EC,"CODE",{});var rYr=s(gie);gNo=r(rYr,"model_type"),rYr.forEach(t),hNo=r(EC,` property of the config object (either
passed as an argument or loaded from `),hie=n(EC,"CODE",{});var tYr=s(hie);pNo=r(tYr,"pretrained_model_name_or_path"),tYr.forEach(t),_No=r(EC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pie=n(EC,"CODE",{});var aYr=s(pie);uNo=r(aYr,"pretrained_model_name_or_path"),aYr.forEach(t),bNo=r(EC,":"),EC.forEach(t),vNo=i(Kt),Gd=n(Kt,"UL",{});var Bz=s(Gd);a2=n(Bz,"LI",{});var R3e=s(a2);_ie=n(R3e,"STRONG",{});var nYr=s(_ie);TNo=r(nYr,"unispeech-sat"),nYr.forEach(t),FNo=r(R3e," \u2014 "),FN=n(R3e,"A",{href:!0});var sYr=s(FN);CNo=r(sYr,"UniSpeechSatForXVector"),sYr.forEach(t),MNo=r(R3e," (UniSpeechSat model)"),R3e.forEach(t),ENo=i(Bz),n2=n(Bz,"LI",{});var S3e=s(n2);uie=n(S3e,"STRONG",{});var lYr=s(uie);yNo=r(lYr,"wav2vec2"),lYr.forEach(t),wNo=r(S3e," \u2014 "),CN=n(S3e,"A",{href:!0});var iYr=s(CN);ANo=r(iYr,"Wav2Vec2ForXVector"),iYr.forEach(t),LNo=r(S3e," (Wav2Vec2 model)"),S3e.forEach(t),BNo=i(Bz),s2=n(Bz,"LI",{});var P3e=s(s2);bie=n(P3e,"STRONG",{});var dYr=s(bie);kNo=r(dYr,"wavlm"),dYr.forEach(t),xNo=r(P3e," \u2014 "),MN=n(P3e,"A",{href:!0});var cYr=s(MN);RNo=r(cYr,"WavLMForXVector"),cYr.forEach(t),SNo=r(P3e," (WavLM model)"),P3e.forEach(t),Bz.forEach(t),PNo=i(Kt),l2=n(Kt,"P",{});var $3e=s(l2);$No=r($3e,"The model is set in evaluation mode by default using "),vie=n($3e,"CODE",{});var fYr=s(vie);INo=r(fYr,"model.eval()"),fYr.forEach(t),jNo=r($3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tie=n($3e,"CODE",{});var mYr=s(Tie);NNo=r(mYr,"model.train()"),mYr.forEach(t),$3e.forEach(t),DNo=i(Kt),Fie=n(Kt,"P",{});var gYr=s(Fie);qNo=r(gYr,"Examples:"),gYr.forEach(t),GNo=i(Kt),m(Z3.$$.fragment,Kt),Kt.forEach(t),vl.forEach(t),KLe=i(d),Od=n(d,"H2",{class:!0});var ske=s(Od);i2=n(ske,"A",{id:!0,class:!0,href:!0});var hYr=s(i2);Cie=n(hYr,"SPAN",{});var pYr=s(Cie);m(ey.$$.fragment,pYr),pYr.forEach(t),hYr.forEach(t),ONo=i(ske),Mie=n(ske,"SPAN",{});var _Yr=s(Mie);XNo=r(_Yr,"AutoModelForMaskedImageModeling"),_Yr.forEach(t),ske.forEach(t),ZLe=i(d),dr=n(d,"DIV",{class:!0});var Fl=s(dr);m(oy.$$.fragment,Fl),zNo=i(Fl),Xd=n(Fl,"P",{});var kz=s(Xd);VNo=r(kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Eie=n(kz,"CODE",{});var uYr=s(Eie);WNo=r(uYr,"from_pretrained()"),uYr.forEach(t),QNo=r(kz,"class method or the "),yie=n(kz,"CODE",{});var bYr=s(yie);HNo=r(bYr,"from_config()"),bYr.forEach(t),UNo=r(kz,`class
method.`),kz.forEach(t),JNo=i(Fl),ry=n(Fl,"P",{});var lke=s(ry);YNo=r(lke,"This class cannot be instantiated directly using "),wie=n(lke,"CODE",{});var vYr=s(wie);KNo=r(vYr,"__init__()"),vYr.forEach(t),ZNo=r(lke," (throws an error)."),lke.forEach(t),eDo=i(Fl),rt=n(Fl,"DIV",{class:!0});var Cl=s(rt);m(ty.$$.fragment,Cl),oDo=i(Cl),Aie=n(Cl,"P",{});var TYr=s(Aie);rDo=r(TYr,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),TYr.forEach(t),tDo=i(Cl),zd=n(Cl,"P",{});var xz=s(zd);aDo=r(xz,`Note:
Loading a model from its configuration file does `),Lie=n(xz,"STRONG",{});var FYr=s(Lie);nDo=r(FYr,"not"),FYr.forEach(t),sDo=r(xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bie=n(xz,"CODE",{});var CYr=s(Bie);lDo=r(CYr,"from_pretrained()"),CYr.forEach(t),iDo=r(xz,"to load the model weights."),xz.forEach(t),dDo=i(Cl),kie=n(Cl,"P",{});var MYr=s(kie);cDo=r(MYr,"Examples:"),MYr.forEach(t),fDo=i(Cl),m(ay.$$.fragment,Cl),Cl.forEach(t),mDo=i(Fl),He=n(Fl,"DIV",{class:!0});var Zt=s(He);m(ny.$$.fragment,Zt),gDo=i(Zt),xie=n(Zt,"P",{});var EYr=s(xie);hDo=r(EYr,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),EYr.forEach(t),pDo=i(Zt),tn=n(Zt,"P",{});var yC=s(tn);_Do=r(yC,"The model class to instantiate is selected based on the "),Rie=n(yC,"CODE",{});var yYr=s(Rie);uDo=r(yYr,"model_type"),yYr.forEach(t),bDo=r(yC,` property of the config object (either
passed as an argument or loaded from `),Sie=n(yC,"CODE",{});var wYr=s(Sie);vDo=r(wYr,"pretrained_model_name_or_path"),wYr.forEach(t),TDo=r(yC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=n(yC,"CODE",{});var AYr=s(Pie);FDo=r(AYr,"pretrained_model_name_or_path"),AYr.forEach(t),CDo=r(yC,":"),yC.forEach(t),MDo=i(Zt),Vd=n(Zt,"UL",{});var Rz=s(Vd);d2=n(Rz,"LI",{});var I3e=s(d2);$ie=n(I3e,"STRONG",{});var LYr=s($ie);EDo=r(LYr,"deit"),LYr.forEach(t),yDo=r(I3e," \u2014 "),EN=n(I3e,"A",{href:!0});var BYr=s(EN);wDo=r(BYr,"DeiTForMaskedImageModeling"),BYr.forEach(t),ADo=r(I3e," (DeiT model)"),I3e.forEach(t),LDo=i(Rz),c2=n(Rz,"LI",{});var j3e=s(c2);Iie=n(j3e,"STRONG",{});var kYr=s(Iie);BDo=r(kYr,"swin"),kYr.forEach(t),kDo=r(j3e," \u2014 "),yN=n(j3e,"A",{href:!0});var xYr=s(yN);xDo=r(xYr,"SwinForMaskedImageModeling"),xYr.forEach(t),RDo=r(j3e," (Swin model)"),j3e.forEach(t),SDo=i(Rz),f2=n(Rz,"LI",{});var N3e=s(f2);jie=n(N3e,"STRONG",{});var RYr=s(jie);PDo=r(RYr,"vit"),RYr.forEach(t),$Do=r(N3e," \u2014 "),wN=n(N3e,"A",{href:!0});var SYr=s(wN);IDo=r(SYr,"ViTForMaskedImageModeling"),SYr.forEach(t),jDo=r(N3e," (ViT model)"),N3e.forEach(t),Rz.forEach(t),NDo=i(Zt),m2=n(Zt,"P",{});var D3e=s(m2);DDo=r(D3e,"The model is set in evaluation mode by default using "),Nie=n(D3e,"CODE",{});var PYr=s(Nie);qDo=r(PYr,"model.eval()"),PYr.forEach(t),GDo=r(D3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Die=n(D3e,"CODE",{});var $Yr=s(Die);ODo=r($Yr,"model.train()"),$Yr.forEach(t),D3e.forEach(t),XDo=i(Zt),qie=n(Zt,"P",{});var IYr=s(qie);zDo=r(IYr,"Examples:"),IYr.forEach(t),VDo=i(Zt),m(sy.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),e9e=i(d),Wd=n(d,"H2",{class:!0});var ike=s(Wd);g2=n(ike,"A",{id:!0,class:!0,href:!0});var jYr=s(g2);Gie=n(jYr,"SPAN",{});var NYr=s(Gie);m(ly.$$.fragment,NYr),NYr.forEach(t),jYr.forEach(t),WDo=i(ike),Oie=n(ike,"SPAN",{});var DYr=s(Oie);QDo=r(DYr,"AutoModelForObjectDetection"),DYr.forEach(t),ike.forEach(t),o9e=i(d),cr=n(d,"DIV",{class:!0});var Ml=s(cr);m(iy.$$.fragment,Ml),HDo=i(Ml),Qd=n(Ml,"P",{});var Sz=s(Qd);UDo=r(Sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Xie=n(Sz,"CODE",{});var qYr=s(Xie);JDo=r(qYr,"from_pretrained()"),qYr.forEach(t),YDo=r(Sz,"class method or the "),zie=n(Sz,"CODE",{});var GYr=s(zie);KDo=r(GYr,"from_config()"),GYr.forEach(t),ZDo=r(Sz,`class
method.`),Sz.forEach(t),eqo=i(Ml),dy=n(Ml,"P",{});var dke=s(dy);oqo=r(dke,"This class cannot be instantiated directly using "),Vie=n(dke,"CODE",{});var OYr=s(Vie);rqo=r(OYr,"__init__()"),OYr.forEach(t),tqo=r(dke," (throws an error)."),dke.forEach(t),aqo=i(Ml),tt=n(Ml,"DIV",{class:!0});var El=s(tt);m(cy.$$.fragment,El),nqo=i(El),Wie=n(El,"P",{});var XYr=s(Wie);sqo=r(XYr,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),XYr.forEach(t),lqo=i(El),Hd=n(El,"P",{});var Pz=s(Hd);iqo=r(Pz,`Note:
Loading a model from its configuration file does `),Qie=n(Pz,"STRONG",{});var zYr=s(Qie);dqo=r(zYr,"not"),zYr.forEach(t),cqo=r(Pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hie=n(Pz,"CODE",{});var VYr=s(Hie);fqo=r(VYr,"from_pretrained()"),VYr.forEach(t),mqo=r(Pz,"to load the model weights."),Pz.forEach(t),gqo=i(El),Uie=n(El,"P",{});var WYr=s(Uie);hqo=r(WYr,"Examples:"),WYr.forEach(t),pqo=i(El),m(fy.$$.fragment,El),El.forEach(t),_qo=i(Ml),Ue=n(Ml,"DIV",{class:!0});var ea=s(Ue);m(my.$$.fragment,ea),uqo=i(ea),Jie=n(ea,"P",{});var QYr=s(Jie);bqo=r(QYr,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),QYr.forEach(t),vqo=i(ea),an=n(ea,"P",{});var wC=s(an);Tqo=r(wC,"The model class to instantiate is selected based on the "),Yie=n(wC,"CODE",{});var HYr=s(Yie);Fqo=r(HYr,"model_type"),HYr.forEach(t),Cqo=r(wC,` property of the config object (either
passed as an argument or loaded from `),Kie=n(wC,"CODE",{});var UYr=s(Kie);Mqo=r(UYr,"pretrained_model_name_or_path"),UYr.forEach(t),Eqo=r(wC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zie=n(wC,"CODE",{});var JYr=s(Zie);yqo=r(JYr,"pretrained_model_name_or_path"),JYr.forEach(t),wqo=r(wC,":"),wC.forEach(t),Aqo=i(ea),ede=n(ea,"UL",{});var YYr=s(ede);h2=n(YYr,"LI",{});var q3e=s(h2);ode=n(q3e,"STRONG",{});var KYr=s(ode);Lqo=r(KYr,"detr"),KYr.forEach(t),Bqo=r(q3e," \u2014 "),AN=n(q3e,"A",{href:!0});var ZYr=s(AN);kqo=r(ZYr,"DetrForObjectDetection"),ZYr.forEach(t),xqo=r(q3e," (DETR model)"),q3e.forEach(t),YYr.forEach(t),Rqo=i(ea),p2=n(ea,"P",{});var G3e=s(p2);Sqo=r(G3e,"The model is set in evaluation mode by default using "),rde=n(G3e,"CODE",{});var eKr=s(rde);Pqo=r(eKr,"model.eval()"),eKr.forEach(t),$qo=r(G3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tde=n(G3e,"CODE",{});var oKr=s(tde);Iqo=r(oKr,"model.train()"),oKr.forEach(t),G3e.forEach(t),jqo=i(ea),ade=n(ea,"P",{});var rKr=s(ade);Nqo=r(rKr,"Examples:"),rKr.forEach(t),Dqo=i(ea),m(gy.$$.fragment,ea),ea.forEach(t),Ml.forEach(t),r9e=i(d),Ud=n(d,"H2",{class:!0});var cke=s(Ud);_2=n(cke,"A",{id:!0,class:!0,href:!0});var tKr=s(_2);nde=n(tKr,"SPAN",{});var aKr=s(nde);m(hy.$$.fragment,aKr),aKr.forEach(t),tKr.forEach(t),qqo=i(cke),sde=n(cke,"SPAN",{});var nKr=s(sde);Gqo=r(nKr,"AutoModelForImageSegmentation"),nKr.forEach(t),cke.forEach(t),t9e=i(d),fr=n(d,"DIV",{class:!0});var yl=s(fr);m(py.$$.fragment,yl),Oqo=i(yl),Jd=n(yl,"P",{});var $z=s(Jd);Xqo=r($z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),lde=n($z,"CODE",{});var sKr=s(lde);zqo=r(sKr,"from_pretrained()"),sKr.forEach(t),Vqo=r($z,"class method or the "),ide=n($z,"CODE",{});var lKr=s(ide);Wqo=r(lKr,"from_config()"),lKr.forEach(t),Qqo=r($z,`class
method.`),$z.forEach(t),Hqo=i(yl),_y=n(yl,"P",{});var fke=s(_y);Uqo=r(fke,"This class cannot be instantiated directly using "),dde=n(fke,"CODE",{});var iKr=s(dde);Jqo=r(iKr,"__init__()"),iKr.forEach(t),Yqo=r(fke," (throws an error)."),fke.forEach(t),Kqo=i(yl),at=n(yl,"DIV",{class:!0});var wl=s(at);m(uy.$$.fragment,wl),Zqo=i(wl),cde=n(wl,"P",{});var dKr=s(cde);eGo=r(dKr,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),dKr.forEach(t),oGo=i(wl),Yd=n(wl,"P",{});var Iz=s(Yd);rGo=r(Iz,`Note:
Loading a model from its configuration file does `),fde=n(Iz,"STRONG",{});var cKr=s(fde);tGo=r(cKr,"not"),cKr.forEach(t),aGo=r(Iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),mde=n(Iz,"CODE",{});var fKr=s(mde);nGo=r(fKr,"from_pretrained()"),fKr.forEach(t),sGo=r(Iz,"to load the model weights."),Iz.forEach(t),lGo=i(wl),gde=n(wl,"P",{});var mKr=s(gde);iGo=r(mKr,"Examples:"),mKr.forEach(t),dGo=i(wl),m(by.$$.fragment,wl),wl.forEach(t),cGo=i(yl),Je=n(yl,"DIV",{class:!0});var oa=s(Je);m(vy.$$.fragment,oa),fGo=i(oa),hde=n(oa,"P",{});var gKr=s(hde);mGo=r(gKr,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),gKr.forEach(t),gGo=i(oa),nn=n(oa,"P",{});var AC=s(nn);hGo=r(AC,"The model class to instantiate is selected based on the "),pde=n(AC,"CODE",{});var hKr=s(pde);pGo=r(hKr,"model_type"),hKr.forEach(t),_Go=r(AC,` property of the config object (either
passed as an argument or loaded from `),_de=n(AC,"CODE",{});var pKr=s(_de);uGo=r(pKr,"pretrained_model_name_or_path"),pKr.forEach(t),bGo=r(AC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ude=n(AC,"CODE",{});var _Kr=s(ude);vGo=r(_Kr,"pretrained_model_name_or_path"),_Kr.forEach(t),TGo=r(AC,":"),AC.forEach(t),FGo=i(oa),bde=n(oa,"UL",{});var uKr=s(bde);u2=n(uKr,"LI",{});var O3e=s(u2);vde=n(O3e,"STRONG",{});var bKr=s(vde);CGo=r(bKr,"detr"),bKr.forEach(t),MGo=r(O3e," \u2014 "),LN=n(O3e,"A",{href:!0});var vKr=s(LN);EGo=r(vKr,"DetrForSegmentation"),vKr.forEach(t),yGo=r(O3e," (DETR model)"),O3e.forEach(t),uKr.forEach(t),wGo=i(oa),b2=n(oa,"P",{});var X3e=s(b2);AGo=r(X3e,"The model is set in evaluation mode by default using "),Tde=n(X3e,"CODE",{});var TKr=s(Tde);LGo=r(TKr,"model.eval()"),TKr.forEach(t),BGo=r(X3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fde=n(X3e,"CODE",{});var FKr=s(Fde);kGo=r(FKr,"model.train()"),FKr.forEach(t),X3e.forEach(t),xGo=i(oa),Cde=n(oa,"P",{});var CKr=s(Cde);RGo=r(CKr,"Examples:"),CKr.forEach(t),SGo=i(oa),m(Ty.$$.fragment,oa),oa.forEach(t),yl.forEach(t),a9e=i(d),Kd=n(d,"H2",{class:!0});var mke=s(Kd);v2=n(mke,"A",{id:!0,class:!0,href:!0});var MKr=s(v2);Mde=n(MKr,"SPAN",{});var EKr=s(Mde);m(Fy.$$.fragment,EKr),EKr.forEach(t),MKr.forEach(t),PGo=i(mke),Ede=n(mke,"SPAN",{});var yKr=s(Ede);$Go=r(yKr,"AutoModelForSemanticSegmentation"),yKr.forEach(t),mke.forEach(t),n9e=i(d),mr=n(d,"DIV",{class:!0});var Al=s(mr);m(Cy.$$.fragment,Al),IGo=i(Al),Zd=n(Al,"P",{});var jz=s(Zd);jGo=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),yde=n(jz,"CODE",{});var wKr=s(yde);NGo=r(wKr,"from_pretrained()"),wKr.forEach(t),DGo=r(jz,"class method or the "),wde=n(jz,"CODE",{});var AKr=s(wde);qGo=r(AKr,"from_config()"),AKr.forEach(t),GGo=r(jz,`class
method.`),jz.forEach(t),OGo=i(Al),My=n(Al,"P",{});var gke=s(My);XGo=r(gke,"This class cannot be instantiated directly using "),Ade=n(gke,"CODE",{});var LKr=s(Ade);zGo=r(LKr,"__init__()"),LKr.forEach(t),VGo=r(gke," (throws an error)."),gke.forEach(t),WGo=i(Al),nt=n(Al,"DIV",{class:!0});var Ll=s(nt);m(Ey.$$.fragment,Ll),QGo=i(Ll),Lde=n(Ll,"P",{});var BKr=s(Lde);HGo=r(BKr,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),BKr.forEach(t),UGo=i(Ll),ec=n(Ll,"P",{});var Nz=s(ec);JGo=r(Nz,`Note:
Loading a model from its configuration file does `),Bde=n(Nz,"STRONG",{});var kKr=s(Bde);YGo=r(kKr,"not"),kKr.forEach(t),KGo=r(Nz,` load the model weights. It only affects the
model\u2019s configuration. Use `),kde=n(Nz,"CODE",{});var xKr=s(kde);ZGo=r(xKr,"from_pretrained()"),xKr.forEach(t),eOo=r(Nz,"to load the model weights."),Nz.forEach(t),oOo=i(Ll),xde=n(Ll,"P",{});var RKr=s(xde);rOo=r(RKr,"Examples:"),RKr.forEach(t),tOo=i(Ll),m(yy.$$.fragment,Ll),Ll.forEach(t),aOo=i(Al),Ye=n(Al,"DIV",{class:!0});var ra=s(Ye);m(wy.$$.fragment,ra),nOo=i(ra),Rde=n(ra,"P",{});var SKr=s(Rde);sOo=r(SKr,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),SKr.forEach(t),lOo=i(ra),sn=n(ra,"P",{});var LC=s(sn);iOo=r(LC,"The model class to instantiate is selected based on the "),Sde=n(LC,"CODE",{});var PKr=s(Sde);dOo=r(PKr,"model_type"),PKr.forEach(t),cOo=r(LC,` property of the config object (either
passed as an argument or loaded from `),Pde=n(LC,"CODE",{});var $Kr=s(Pde);fOo=r($Kr,"pretrained_model_name_or_path"),$Kr.forEach(t),mOo=r(LC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$de=n(LC,"CODE",{});var IKr=s($de);gOo=r(IKr,"pretrained_model_name_or_path"),IKr.forEach(t),hOo=r(LC,":"),LC.forEach(t),pOo=i(ra),Ay=n(ra,"UL",{});var hke=s(Ay);T2=n(hke,"LI",{});var z3e=s(T2);Ide=n(z3e,"STRONG",{});var jKr=s(Ide);_Oo=r(jKr,"beit"),jKr.forEach(t),uOo=r(z3e," \u2014 "),BN=n(z3e,"A",{href:!0});var NKr=s(BN);bOo=r(NKr,"BeitForSemanticSegmentation"),NKr.forEach(t),vOo=r(z3e," (BEiT model)"),z3e.forEach(t),TOo=i(hke),F2=n(hke,"LI",{});var V3e=s(F2);jde=n(V3e,"STRONG",{});var DKr=s(jde);FOo=r(DKr,"segformer"),DKr.forEach(t),COo=r(V3e," \u2014 "),kN=n(V3e,"A",{href:!0});var qKr=s(kN);MOo=r(qKr,"SegformerForSemanticSegmentation"),qKr.forEach(t),EOo=r(V3e," (SegFormer model)"),V3e.forEach(t),hke.forEach(t),yOo=i(ra),C2=n(ra,"P",{});var W3e=s(C2);wOo=r(W3e,"The model is set in evaluation mode by default using "),Nde=n(W3e,"CODE",{});var GKr=s(Nde);AOo=r(GKr,"model.eval()"),GKr.forEach(t),LOo=r(W3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dde=n(W3e,"CODE",{});var OKr=s(Dde);BOo=r(OKr,"model.train()"),OKr.forEach(t),W3e.forEach(t),kOo=i(ra),qde=n(ra,"P",{});var XKr=s(qde);xOo=r(XKr,"Examples:"),XKr.forEach(t),ROo=i(ra),m(Ly.$$.fragment,ra),ra.forEach(t),Al.forEach(t),s9e=i(d),oc=n(d,"H2",{class:!0});var pke=s(oc);M2=n(pke,"A",{id:!0,class:!0,href:!0});var zKr=s(M2);Gde=n(zKr,"SPAN",{});var VKr=s(Gde);m(By.$$.fragment,VKr),VKr.forEach(t),zKr.forEach(t),SOo=i(pke),Ode=n(pke,"SPAN",{});var WKr=s(Ode);POo=r(WKr,"TFAutoModel"),WKr.forEach(t),pke.forEach(t),l9e=i(d),gr=n(d,"DIV",{class:!0});var Bl=s(gr);m(ky.$$.fragment,Bl),$Oo=i(Bl),rc=n(Bl,"P",{});var Dz=s(rc);IOo=r(Dz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Xde=n(Dz,"CODE",{});var QKr=s(Xde);jOo=r(QKr,"from_pretrained()"),QKr.forEach(t),NOo=r(Dz,"class method or the "),zde=n(Dz,"CODE",{});var HKr=s(zde);DOo=r(HKr,"from_config()"),HKr.forEach(t),qOo=r(Dz,`class
method.`),Dz.forEach(t),GOo=i(Bl),xy=n(Bl,"P",{});var _ke=s(xy);OOo=r(_ke,"This class cannot be instantiated directly using "),Vde=n(_ke,"CODE",{});var UKr=s(Vde);XOo=r(UKr,"__init__()"),UKr.forEach(t),zOo=r(_ke," (throws an error)."),_ke.forEach(t),VOo=i(Bl),st=n(Bl,"DIV",{class:!0});var kl=s(st);m(Ry.$$.fragment,kl),WOo=i(kl),Wde=n(kl,"P",{});var JKr=s(Wde);QOo=r(JKr,"Instantiates one of the base model classes of the library from a configuration."),JKr.forEach(t),HOo=i(kl),tc=n(kl,"P",{});var qz=s(tc);UOo=r(qz,`Note:
Loading a model from its configuration file does `),Qde=n(qz,"STRONG",{});var YKr=s(Qde);JOo=r(YKr,"not"),YKr.forEach(t),YOo=r(qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hde=n(qz,"CODE",{});var KKr=s(Hde);KOo=r(KKr,"from_pretrained()"),KKr.forEach(t),ZOo=r(qz,"to load the model weights."),qz.forEach(t),eXo=i(kl),Ude=n(kl,"P",{});var ZKr=s(Ude);oXo=r(ZKr,"Examples:"),ZKr.forEach(t),rXo=i(kl),m(Sy.$$.fragment,kl),kl.forEach(t),tXo=i(Bl),go=n(Bl,"DIV",{class:!0});var ca=s(go);m(Py.$$.fragment,ca),aXo=i(ca),Jde=n(ca,"P",{});var eZr=s(Jde);nXo=r(eZr,"Instantiate one of the base model classes of the library from a pretrained model."),eZr.forEach(t),sXo=i(ca),ln=n(ca,"P",{});var BC=s(ln);lXo=r(BC,"The model class to instantiate is selected based on the "),Yde=n(BC,"CODE",{});var oZr=s(Yde);iXo=r(oZr,"model_type"),oZr.forEach(t),dXo=r(BC,` property of the config object (either
passed as an argument or loaded from `),Kde=n(BC,"CODE",{});var rZr=s(Kde);cXo=r(rZr,"pretrained_model_name_or_path"),rZr.forEach(t),fXo=r(BC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zde=n(BC,"CODE",{});var tZr=s(Zde);mXo=r(tZr,"pretrained_model_name_or_path"),tZr.forEach(t),gXo=r(BC,":"),BC.forEach(t),hXo=i(ca),B=n(ca,"UL",{});var k=s(B);E2=n(k,"LI",{});var Q3e=s(E2);ece=n(Q3e,"STRONG",{});var aZr=s(ece);pXo=r(aZr,"albert"),aZr.forEach(t),_Xo=r(Q3e," \u2014 "),xN=n(Q3e,"A",{href:!0});var nZr=s(xN);uXo=r(nZr,"TFAlbertModel"),nZr.forEach(t),bXo=r(Q3e," (ALBERT model)"),Q3e.forEach(t),vXo=i(k),y2=n(k,"LI",{});var H3e=s(y2);oce=n(H3e,"STRONG",{});var sZr=s(oce);TXo=r(sZr,"bart"),sZr.forEach(t),FXo=r(H3e," \u2014 "),RN=n(H3e,"A",{href:!0});var lZr=s(RN);CXo=r(lZr,"TFBartModel"),lZr.forEach(t),MXo=r(H3e," (BART model)"),H3e.forEach(t),EXo=i(k),w2=n(k,"LI",{});var U3e=s(w2);rce=n(U3e,"STRONG",{});var iZr=s(rce);yXo=r(iZr,"bert"),iZr.forEach(t),wXo=r(U3e," \u2014 "),SN=n(U3e,"A",{href:!0});var dZr=s(SN);AXo=r(dZr,"TFBertModel"),dZr.forEach(t),LXo=r(U3e," (BERT model)"),U3e.forEach(t),BXo=i(k),A2=n(k,"LI",{});var J3e=s(A2);tce=n(J3e,"STRONG",{});var cZr=s(tce);kXo=r(cZr,"blenderbot"),cZr.forEach(t),xXo=r(J3e," \u2014 "),PN=n(J3e,"A",{href:!0});var fZr=s(PN);RXo=r(fZr,"TFBlenderbotModel"),fZr.forEach(t),SXo=r(J3e," (Blenderbot model)"),J3e.forEach(t),PXo=i(k),L2=n(k,"LI",{});var Y3e=s(L2);ace=n(Y3e,"STRONG",{});var mZr=s(ace);$Xo=r(mZr,"blenderbot-small"),mZr.forEach(t),IXo=r(Y3e," \u2014 "),$N=n(Y3e,"A",{href:!0});var gZr=s($N);jXo=r(gZr,"TFBlenderbotSmallModel"),gZr.forEach(t),NXo=r(Y3e," (BlenderbotSmall model)"),Y3e.forEach(t),DXo=i(k),B2=n(k,"LI",{});var K3e=s(B2);nce=n(K3e,"STRONG",{});var hZr=s(nce);qXo=r(hZr,"camembert"),hZr.forEach(t),GXo=r(K3e," \u2014 "),IN=n(K3e,"A",{href:!0});var pZr=s(IN);OXo=r(pZr,"TFCamembertModel"),pZr.forEach(t),XXo=r(K3e," (CamemBERT model)"),K3e.forEach(t),zXo=i(k),k2=n(k,"LI",{});var Z3e=s(k2);sce=n(Z3e,"STRONG",{});var _Zr=s(sce);VXo=r(_Zr,"clip"),_Zr.forEach(t),WXo=r(Z3e," \u2014 "),jN=n(Z3e,"A",{href:!0});var uZr=s(jN);QXo=r(uZr,"TFCLIPModel"),uZr.forEach(t),HXo=r(Z3e," (CLIP model)"),Z3e.forEach(t),UXo=i(k),x2=n(k,"LI",{});var eye=s(x2);lce=n(eye,"STRONG",{});var bZr=s(lce);JXo=r(bZr,"convbert"),bZr.forEach(t),YXo=r(eye," \u2014 "),NN=n(eye,"A",{href:!0});var vZr=s(NN);KXo=r(vZr,"TFConvBertModel"),vZr.forEach(t),ZXo=r(eye," (ConvBERT model)"),eye.forEach(t),ezo=i(k),R2=n(k,"LI",{});var oye=s(R2);ice=n(oye,"STRONG",{});var TZr=s(ice);ozo=r(TZr,"ctrl"),TZr.forEach(t),rzo=r(oye," \u2014 "),DN=n(oye,"A",{href:!0});var FZr=s(DN);tzo=r(FZr,"TFCTRLModel"),FZr.forEach(t),azo=r(oye," (CTRL model)"),oye.forEach(t),nzo=i(k),S2=n(k,"LI",{});var rye=s(S2);dce=n(rye,"STRONG",{});var CZr=s(dce);szo=r(CZr,"deberta"),CZr.forEach(t),lzo=r(rye," \u2014 "),qN=n(rye,"A",{href:!0});var MZr=s(qN);izo=r(MZr,"TFDebertaModel"),MZr.forEach(t),dzo=r(rye," (DeBERTa model)"),rye.forEach(t),czo=i(k),P2=n(k,"LI",{});var tye=s(P2);cce=n(tye,"STRONG",{});var EZr=s(cce);fzo=r(EZr,"deberta-v2"),EZr.forEach(t),mzo=r(tye," \u2014 "),GN=n(tye,"A",{href:!0});var yZr=s(GN);gzo=r(yZr,"TFDebertaV2Model"),yZr.forEach(t),hzo=r(tye," (DeBERTa-v2 model)"),tye.forEach(t),pzo=i(k),$2=n(k,"LI",{});var aye=s($2);fce=n(aye,"STRONG",{});var wZr=s(fce);_zo=r(wZr,"distilbert"),wZr.forEach(t),uzo=r(aye," \u2014 "),ON=n(aye,"A",{href:!0});var AZr=s(ON);bzo=r(AZr,"TFDistilBertModel"),AZr.forEach(t),vzo=r(aye," (DistilBERT model)"),aye.forEach(t),Tzo=i(k),I2=n(k,"LI",{});var nye=s(I2);mce=n(nye,"STRONG",{});var LZr=s(mce);Fzo=r(LZr,"dpr"),LZr.forEach(t),Czo=r(nye," \u2014 "),XN=n(nye,"A",{href:!0});var BZr=s(XN);Mzo=r(BZr,"TFDPRQuestionEncoder"),BZr.forEach(t),Ezo=r(nye," (DPR model)"),nye.forEach(t),yzo=i(k),j2=n(k,"LI",{});var sye=s(j2);gce=n(sye,"STRONG",{});var kZr=s(gce);wzo=r(kZr,"electra"),kZr.forEach(t),Azo=r(sye," \u2014 "),zN=n(sye,"A",{href:!0});var xZr=s(zN);Lzo=r(xZr,"TFElectraModel"),xZr.forEach(t),Bzo=r(sye," (ELECTRA model)"),sye.forEach(t),kzo=i(k),N2=n(k,"LI",{});var lye=s(N2);hce=n(lye,"STRONG",{});var RZr=s(hce);xzo=r(RZr,"flaubert"),RZr.forEach(t),Rzo=r(lye," \u2014 "),VN=n(lye,"A",{href:!0});var SZr=s(VN);Szo=r(SZr,"TFFlaubertModel"),SZr.forEach(t),Pzo=r(lye," (FlauBERT model)"),lye.forEach(t),$zo=i(k),Ss=n(k,"LI",{});var N0=s(Ss);pce=n(N0,"STRONG",{});var PZr=s(pce);Izo=r(PZr,"funnel"),PZr.forEach(t),jzo=r(N0," \u2014 "),WN=n(N0,"A",{href:!0});var $Zr=s(WN);Nzo=r($Zr,"TFFunnelModel"),$Zr.forEach(t),Dzo=r(N0," or "),QN=n(N0,"A",{href:!0});var IZr=s(QN);qzo=r(IZr,"TFFunnelBaseModel"),IZr.forEach(t),Gzo=r(N0," (Funnel Transformer model)"),N0.forEach(t),Ozo=i(k),D2=n(k,"LI",{});var iye=s(D2);_ce=n(iye,"STRONG",{});var jZr=s(_ce);Xzo=r(jZr,"gpt2"),jZr.forEach(t),zzo=r(iye," \u2014 "),HN=n(iye,"A",{href:!0});var NZr=s(HN);Vzo=r(NZr,"TFGPT2Model"),NZr.forEach(t),Wzo=r(iye," (OpenAI GPT-2 model)"),iye.forEach(t),Qzo=i(k),q2=n(k,"LI",{});var dye=s(q2);uce=n(dye,"STRONG",{});var DZr=s(uce);Hzo=r(DZr,"hubert"),DZr.forEach(t),Uzo=r(dye," \u2014 "),UN=n(dye,"A",{href:!0});var qZr=s(UN);Jzo=r(qZr,"TFHubertModel"),qZr.forEach(t),Yzo=r(dye," (Hubert model)"),dye.forEach(t),Kzo=i(k),G2=n(k,"LI",{});var cye=s(G2);bce=n(cye,"STRONG",{});var GZr=s(bce);Zzo=r(GZr,"layoutlm"),GZr.forEach(t),eVo=r(cye," \u2014 "),JN=n(cye,"A",{href:!0});var OZr=s(JN);oVo=r(OZr,"TFLayoutLMModel"),OZr.forEach(t),rVo=r(cye," (LayoutLM model)"),cye.forEach(t),tVo=i(k),O2=n(k,"LI",{});var fye=s(O2);vce=n(fye,"STRONG",{});var XZr=s(vce);aVo=r(XZr,"led"),XZr.forEach(t),nVo=r(fye," \u2014 "),YN=n(fye,"A",{href:!0});var zZr=s(YN);sVo=r(zZr,"TFLEDModel"),zZr.forEach(t),lVo=r(fye," (LED model)"),fye.forEach(t),iVo=i(k),X2=n(k,"LI",{});var mye=s(X2);Tce=n(mye,"STRONG",{});var VZr=s(Tce);dVo=r(VZr,"longformer"),VZr.forEach(t),cVo=r(mye," \u2014 "),KN=n(mye,"A",{href:!0});var WZr=s(KN);fVo=r(WZr,"TFLongformerModel"),WZr.forEach(t),mVo=r(mye," (Longformer model)"),mye.forEach(t),gVo=i(k),z2=n(k,"LI",{});var gye=s(z2);Fce=n(gye,"STRONG",{});var QZr=s(Fce);hVo=r(QZr,"lxmert"),QZr.forEach(t),pVo=r(gye," \u2014 "),ZN=n(gye,"A",{href:!0});var HZr=s(ZN);_Vo=r(HZr,"TFLxmertModel"),HZr.forEach(t),uVo=r(gye," (LXMERT model)"),gye.forEach(t),bVo=i(k),V2=n(k,"LI",{});var hye=s(V2);Cce=n(hye,"STRONG",{});var UZr=s(Cce);vVo=r(UZr,"marian"),UZr.forEach(t),TVo=r(hye," \u2014 "),eD=n(hye,"A",{href:!0});var JZr=s(eD);FVo=r(JZr,"TFMarianModel"),JZr.forEach(t),CVo=r(hye," (Marian model)"),hye.forEach(t),MVo=i(k),W2=n(k,"LI",{});var pye=s(W2);Mce=n(pye,"STRONG",{});var YZr=s(Mce);EVo=r(YZr,"mbart"),YZr.forEach(t),yVo=r(pye," \u2014 "),oD=n(pye,"A",{href:!0});var KZr=s(oD);wVo=r(KZr,"TFMBartModel"),KZr.forEach(t),AVo=r(pye," (mBART model)"),pye.forEach(t),LVo=i(k),Q2=n(k,"LI",{});var _ye=s(Q2);Ece=n(_ye,"STRONG",{});var ZZr=s(Ece);BVo=r(ZZr,"mobilebert"),ZZr.forEach(t),kVo=r(_ye," \u2014 "),rD=n(_ye,"A",{href:!0});var eet=s(rD);xVo=r(eet,"TFMobileBertModel"),eet.forEach(t),RVo=r(_ye," (MobileBERT model)"),_ye.forEach(t),SVo=i(k),H2=n(k,"LI",{});var uye=s(H2);yce=n(uye,"STRONG",{});var oet=s(yce);PVo=r(oet,"mpnet"),oet.forEach(t),$Vo=r(uye," \u2014 "),tD=n(uye,"A",{href:!0});var ret=s(tD);IVo=r(ret,"TFMPNetModel"),ret.forEach(t),jVo=r(uye," (MPNet model)"),uye.forEach(t),NVo=i(k),U2=n(k,"LI",{});var bye=s(U2);wce=n(bye,"STRONG",{});var tet=s(wce);DVo=r(tet,"mt5"),tet.forEach(t),qVo=r(bye," \u2014 "),aD=n(bye,"A",{href:!0});var aet=s(aD);GVo=r(aet,"TFMT5Model"),aet.forEach(t),OVo=r(bye," (mT5 model)"),bye.forEach(t),XVo=i(k),J2=n(k,"LI",{});var vye=s(J2);Ace=n(vye,"STRONG",{});var net=s(Ace);zVo=r(net,"openai-gpt"),net.forEach(t),VVo=r(vye," \u2014 "),nD=n(vye,"A",{href:!0});var set=s(nD);WVo=r(set,"TFOpenAIGPTModel"),set.forEach(t),QVo=r(vye," (OpenAI GPT model)"),vye.forEach(t),HVo=i(k),Y2=n(k,"LI",{});var Tye=s(Y2);Lce=n(Tye,"STRONG",{});var iet=s(Lce);UVo=r(iet,"pegasus"),iet.forEach(t),JVo=r(Tye," \u2014 "),sD=n(Tye,"A",{href:!0});var det=s(sD);YVo=r(det,"TFPegasusModel"),det.forEach(t),KVo=r(Tye," (Pegasus model)"),Tye.forEach(t),ZVo=i(k),K2=n(k,"LI",{});var Fye=s(K2);Bce=n(Fye,"STRONG",{});var cet=s(Bce);eWo=r(cet,"rembert"),cet.forEach(t),oWo=r(Fye," \u2014 "),lD=n(Fye,"A",{href:!0});var fet=s(lD);rWo=r(fet,"TFRemBertModel"),fet.forEach(t),tWo=r(Fye," (RemBERT model)"),Fye.forEach(t),aWo=i(k),Z2=n(k,"LI",{});var Cye=s(Z2);kce=n(Cye,"STRONG",{});var met=s(kce);nWo=r(met,"roberta"),met.forEach(t),sWo=r(Cye," \u2014 "),iD=n(Cye,"A",{href:!0});var get=s(iD);lWo=r(get,"TFRobertaModel"),get.forEach(t),iWo=r(Cye," (RoBERTa model)"),Cye.forEach(t),dWo=i(k),ev=n(k,"LI",{});var Mye=s(ev);xce=n(Mye,"STRONG",{});var het=s(xce);cWo=r(het,"roformer"),het.forEach(t),fWo=r(Mye," \u2014 "),dD=n(Mye,"A",{href:!0});var pet=s(dD);mWo=r(pet,"TFRoFormerModel"),pet.forEach(t),gWo=r(Mye," (RoFormer model)"),Mye.forEach(t),hWo=i(k),ov=n(k,"LI",{});var Eye=s(ov);Rce=n(Eye,"STRONG",{});var _et=s(Rce);pWo=r(_et,"speech_to_text"),_et.forEach(t),_Wo=r(Eye," \u2014 "),cD=n(Eye,"A",{href:!0});var uet=s(cD);uWo=r(uet,"TFSpeech2TextModel"),uet.forEach(t),bWo=r(Eye," (Speech2Text model)"),Eye.forEach(t),vWo=i(k),rv=n(k,"LI",{});var yye=s(rv);Sce=n(yye,"STRONG",{});var bet=s(Sce);TWo=r(bet,"t5"),bet.forEach(t),FWo=r(yye," \u2014 "),fD=n(yye,"A",{href:!0});var vet=s(fD);CWo=r(vet,"TFT5Model"),vet.forEach(t),MWo=r(yye," (T5 model)"),yye.forEach(t),EWo=i(k),tv=n(k,"LI",{});var wye=s(tv);Pce=n(wye,"STRONG",{});var Tet=s(Pce);yWo=r(Tet,"tapas"),Tet.forEach(t),wWo=r(wye," \u2014 "),mD=n(wye,"A",{href:!0});var Fet=s(mD);AWo=r(Fet,"TFTapasModel"),Fet.forEach(t),LWo=r(wye," (TAPAS model)"),wye.forEach(t),BWo=i(k),av=n(k,"LI",{});var Aye=s(av);$ce=n(Aye,"STRONG",{});var Cet=s($ce);kWo=r(Cet,"transfo-xl"),Cet.forEach(t),xWo=r(Aye," \u2014 "),gD=n(Aye,"A",{href:!0});var Met=s(gD);RWo=r(Met,"TFTransfoXLModel"),Met.forEach(t),SWo=r(Aye," (Transformer-XL model)"),Aye.forEach(t),PWo=i(k),nv=n(k,"LI",{});var Lye=s(nv);Ice=n(Lye,"STRONG",{});var Eet=s(Ice);$Wo=r(Eet,"vit"),Eet.forEach(t),IWo=r(Lye," \u2014 "),hD=n(Lye,"A",{href:!0});var yet=s(hD);jWo=r(yet,"TFViTModel"),yet.forEach(t),NWo=r(Lye," (ViT model)"),Lye.forEach(t),DWo=i(k),sv=n(k,"LI",{});var Bye=s(sv);jce=n(Bye,"STRONG",{});var wet=s(jce);qWo=r(wet,"wav2vec2"),wet.forEach(t),GWo=r(Bye," \u2014 "),pD=n(Bye,"A",{href:!0});var Aet=s(pD);OWo=r(Aet,"TFWav2Vec2Model"),Aet.forEach(t),XWo=r(Bye," (Wav2Vec2 model)"),Bye.forEach(t),zWo=i(k),lv=n(k,"LI",{});var kye=s(lv);Nce=n(kye,"STRONG",{});var Let=s(Nce);VWo=r(Let,"xlm"),Let.forEach(t),WWo=r(kye," \u2014 "),_D=n(kye,"A",{href:!0});var Bet=s(_D);QWo=r(Bet,"TFXLMModel"),Bet.forEach(t),HWo=r(kye," (XLM model)"),kye.forEach(t),UWo=i(k),iv=n(k,"LI",{});var xye=s(iv);Dce=n(xye,"STRONG",{});var ket=s(Dce);JWo=r(ket,"xlm-roberta"),ket.forEach(t),YWo=r(xye," \u2014 "),uD=n(xye,"A",{href:!0});var xet=s(uD);KWo=r(xet,"TFXLMRobertaModel"),xet.forEach(t),ZWo=r(xye," (XLM-RoBERTa model)"),xye.forEach(t),eQo=i(k),dv=n(k,"LI",{});var Rye=s(dv);qce=n(Rye,"STRONG",{});var Ret=s(qce);oQo=r(Ret,"xlnet"),Ret.forEach(t),rQo=r(Rye," \u2014 "),bD=n(Rye,"A",{href:!0});var Set=s(bD);tQo=r(Set,"TFXLNetModel"),Set.forEach(t),aQo=r(Rye," (XLNet model)"),Rye.forEach(t),k.forEach(t),nQo=i(ca),Gce=n(ca,"P",{});var Pet=s(Gce);sQo=r(Pet,"Examples:"),Pet.forEach(t),lQo=i(ca),m($y.$$.fragment,ca),ca.forEach(t),Bl.forEach(t),i9e=i(d),ac=n(d,"H2",{class:!0});var uke=s(ac);cv=n(uke,"A",{id:!0,class:!0,href:!0});var $et=s(cv);Oce=n($et,"SPAN",{});var Iet=s(Oce);m(Iy.$$.fragment,Iet),Iet.forEach(t),$et.forEach(t),iQo=i(uke),Xce=n(uke,"SPAN",{});var jet=s(Xce);dQo=r(jet,"TFAutoModelForPreTraining"),jet.forEach(t),uke.forEach(t),d9e=i(d),hr=n(d,"DIV",{class:!0});var xl=s(hr);m(jy.$$.fragment,xl),cQo=i(xl),nc=n(xl,"P",{});var Gz=s(nc);fQo=r(Gz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zce=n(Gz,"CODE",{});var Net=s(zce);mQo=r(Net,"from_pretrained()"),Net.forEach(t),gQo=r(Gz,"class method or the "),Vce=n(Gz,"CODE",{});var Det=s(Vce);hQo=r(Det,"from_config()"),Det.forEach(t),pQo=r(Gz,`class
method.`),Gz.forEach(t),_Qo=i(xl),Ny=n(xl,"P",{});var bke=s(Ny);uQo=r(bke,"This class cannot be instantiated directly using "),Wce=n(bke,"CODE",{});var qet=s(Wce);bQo=r(qet,"__init__()"),qet.forEach(t),vQo=r(bke," (throws an error)."),bke.forEach(t),TQo=i(xl),lt=n(xl,"DIV",{class:!0});var Rl=s(lt);m(Dy.$$.fragment,Rl),FQo=i(Rl),Qce=n(Rl,"P",{});var Get=s(Qce);CQo=r(Get,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Get.forEach(t),MQo=i(Rl),sc=n(Rl,"P",{});var Oz=s(sc);EQo=r(Oz,`Note:
Loading a model from its configuration file does `),Hce=n(Oz,"STRONG",{});var Oet=s(Hce);yQo=r(Oet,"not"),Oet.forEach(t),wQo=r(Oz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uce=n(Oz,"CODE",{});var Xet=s(Uce);AQo=r(Xet,"from_pretrained()"),Xet.forEach(t),LQo=r(Oz,"to load the model weights."),Oz.forEach(t),BQo=i(Rl),Jce=n(Rl,"P",{});var zet=s(Jce);kQo=r(zet,"Examples:"),zet.forEach(t),xQo=i(Rl),m(qy.$$.fragment,Rl),Rl.forEach(t),RQo=i(xl),ho=n(xl,"DIV",{class:!0});var fa=s(ho);m(Gy.$$.fragment,fa),SQo=i(fa),Yce=n(fa,"P",{});var Vet=s(Yce);PQo=r(Vet,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vet.forEach(t),$Qo=i(fa),dn=n(fa,"P",{});var kC=s(dn);IQo=r(kC,"The model class to instantiate is selected based on the "),Kce=n(kC,"CODE",{});var Wet=s(Kce);jQo=r(Wet,"model_type"),Wet.forEach(t),NQo=r(kC,` property of the config object (either
passed as an argument or loaded from `),Zce=n(kC,"CODE",{});var Qet=s(Zce);DQo=r(Qet,"pretrained_model_name_or_path"),Qet.forEach(t),qQo=r(kC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),efe=n(kC,"CODE",{});var Het=s(efe);GQo=r(Het,"pretrained_model_name_or_path"),Het.forEach(t),OQo=r(kC,":"),kC.forEach(t),XQo=i(fa),H=n(fa,"UL",{});var U=s(H);fv=n(U,"LI",{});var Sye=s(fv);ofe=n(Sye,"STRONG",{});var Uet=s(ofe);zQo=r(Uet,"albert"),Uet.forEach(t),VQo=r(Sye," \u2014 "),vD=n(Sye,"A",{href:!0});var Jet=s(vD);WQo=r(Jet,"TFAlbertForPreTraining"),Jet.forEach(t),QQo=r(Sye," (ALBERT model)"),Sye.forEach(t),HQo=i(U),mv=n(U,"LI",{});var Pye=s(mv);rfe=n(Pye,"STRONG",{});var Yet=s(rfe);UQo=r(Yet,"bart"),Yet.forEach(t),JQo=r(Pye," \u2014 "),TD=n(Pye,"A",{href:!0});var Ket=s(TD);YQo=r(Ket,"TFBartForConditionalGeneration"),Ket.forEach(t),KQo=r(Pye," (BART model)"),Pye.forEach(t),ZQo=i(U),gv=n(U,"LI",{});var $ye=s(gv);tfe=n($ye,"STRONG",{});var Zet=s(tfe);eHo=r(Zet,"bert"),Zet.forEach(t),oHo=r($ye," \u2014 "),FD=n($ye,"A",{href:!0});var eot=s(FD);rHo=r(eot,"TFBertForPreTraining"),eot.forEach(t),tHo=r($ye," (BERT model)"),$ye.forEach(t),aHo=i(U),hv=n(U,"LI",{});var Iye=s(hv);afe=n(Iye,"STRONG",{});var oot=s(afe);nHo=r(oot,"camembert"),oot.forEach(t),sHo=r(Iye," \u2014 "),CD=n(Iye,"A",{href:!0});var rot=s(CD);lHo=r(rot,"TFCamembertForMaskedLM"),rot.forEach(t),iHo=r(Iye," (CamemBERT model)"),Iye.forEach(t),dHo=i(U),pv=n(U,"LI",{});var jye=s(pv);nfe=n(jye,"STRONG",{});var tot=s(nfe);cHo=r(tot,"ctrl"),tot.forEach(t),fHo=r(jye," \u2014 "),MD=n(jye,"A",{href:!0});var aot=s(MD);mHo=r(aot,"TFCTRLLMHeadModel"),aot.forEach(t),gHo=r(jye," (CTRL model)"),jye.forEach(t),hHo=i(U),_v=n(U,"LI",{});var Nye=s(_v);sfe=n(Nye,"STRONG",{});var not=s(sfe);pHo=r(not,"distilbert"),not.forEach(t),_Ho=r(Nye," \u2014 "),ED=n(Nye,"A",{href:!0});var sot=s(ED);uHo=r(sot,"TFDistilBertForMaskedLM"),sot.forEach(t),bHo=r(Nye," (DistilBERT model)"),Nye.forEach(t),vHo=i(U),uv=n(U,"LI",{});var Dye=s(uv);lfe=n(Dye,"STRONG",{});var lot=s(lfe);THo=r(lot,"electra"),lot.forEach(t),FHo=r(Dye," \u2014 "),yD=n(Dye,"A",{href:!0});var iot=s(yD);CHo=r(iot,"TFElectraForPreTraining"),iot.forEach(t),MHo=r(Dye," (ELECTRA model)"),Dye.forEach(t),EHo=i(U),bv=n(U,"LI",{});var qye=s(bv);ife=n(qye,"STRONG",{});var dot=s(ife);yHo=r(dot,"flaubert"),dot.forEach(t),wHo=r(qye," \u2014 "),wD=n(qye,"A",{href:!0});var cot=s(wD);AHo=r(cot,"TFFlaubertWithLMHeadModel"),cot.forEach(t),LHo=r(qye," (FlauBERT model)"),qye.forEach(t),BHo=i(U),vv=n(U,"LI",{});var Gye=s(vv);dfe=n(Gye,"STRONG",{});var fot=s(dfe);kHo=r(fot,"funnel"),fot.forEach(t),xHo=r(Gye," \u2014 "),AD=n(Gye,"A",{href:!0});var mot=s(AD);RHo=r(mot,"TFFunnelForPreTraining"),mot.forEach(t),SHo=r(Gye," (Funnel Transformer model)"),Gye.forEach(t),PHo=i(U),Tv=n(U,"LI",{});var Oye=s(Tv);cfe=n(Oye,"STRONG",{});var got=s(cfe);$Ho=r(got,"gpt2"),got.forEach(t),IHo=r(Oye," \u2014 "),LD=n(Oye,"A",{href:!0});var hot=s(LD);jHo=r(hot,"TFGPT2LMHeadModel"),hot.forEach(t),NHo=r(Oye," (OpenAI GPT-2 model)"),Oye.forEach(t),DHo=i(U),Fv=n(U,"LI",{});var Xye=s(Fv);ffe=n(Xye,"STRONG",{});var pot=s(ffe);qHo=r(pot,"layoutlm"),pot.forEach(t),GHo=r(Xye," \u2014 "),BD=n(Xye,"A",{href:!0});var _ot=s(BD);OHo=r(_ot,"TFLayoutLMForMaskedLM"),_ot.forEach(t),XHo=r(Xye," (LayoutLM model)"),Xye.forEach(t),zHo=i(U),Cv=n(U,"LI",{});var zye=s(Cv);mfe=n(zye,"STRONG",{});var uot=s(mfe);VHo=r(uot,"lxmert"),uot.forEach(t),WHo=r(zye," \u2014 "),kD=n(zye,"A",{href:!0});var bot=s(kD);QHo=r(bot,"TFLxmertForPreTraining"),bot.forEach(t),HHo=r(zye," (LXMERT model)"),zye.forEach(t),UHo=i(U),Mv=n(U,"LI",{});var Vye=s(Mv);gfe=n(Vye,"STRONG",{});var vot=s(gfe);JHo=r(vot,"mobilebert"),vot.forEach(t),YHo=r(Vye," \u2014 "),xD=n(Vye,"A",{href:!0});var Tot=s(xD);KHo=r(Tot,"TFMobileBertForPreTraining"),Tot.forEach(t),ZHo=r(Vye," (MobileBERT model)"),Vye.forEach(t),eUo=i(U),Ev=n(U,"LI",{});var Wye=s(Ev);hfe=n(Wye,"STRONG",{});var Fot=s(hfe);oUo=r(Fot,"mpnet"),Fot.forEach(t),rUo=r(Wye," \u2014 "),RD=n(Wye,"A",{href:!0});var Cot=s(RD);tUo=r(Cot,"TFMPNetForMaskedLM"),Cot.forEach(t),aUo=r(Wye," (MPNet model)"),Wye.forEach(t),nUo=i(U),yv=n(U,"LI",{});var Qye=s(yv);pfe=n(Qye,"STRONG",{});var Mot=s(pfe);sUo=r(Mot,"openai-gpt"),Mot.forEach(t),lUo=r(Qye," \u2014 "),SD=n(Qye,"A",{href:!0});var Eot=s(SD);iUo=r(Eot,"TFOpenAIGPTLMHeadModel"),Eot.forEach(t),dUo=r(Qye," (OpenAI GPT model)"),Qye.forEach(t),cUo=i(U),wv=n(U,"LI",{});var Hye=s(wv);_fe=n(Hye,"STRONG",{});var yot=s(_fe);fUo=r(yot,"roberta"),yot.forEach(t),mUo=r(Hye," \u2014 "),PD=n(Hye,"A",{href:!0});var wot=s(PD);gUo=r(wot,"TFRobertaForMaskedLM"),wot.forEach(t),hUo=r(Hye," (RoBERTa model)"),Hye.forEach(t),pUo=i(U),Av=n(U,"LI",{});var Uye=s(Av);ufe=n(Uye,"STRONG",{});var Aot=s(ufe);_Uo=r(Aot,"t5"),Aot.forEach(t),uUo=r(Uye," \u2014 "),$D=n(Uye,"A",{href:!0});var Lot=s($D);bUo=r(Lot,"TFT5ForConditionalGeneration"),Lot.forEach(t),vUo=r(Uye," (T5 model)"),Uye.forEach(t),TUo=i(U),Lv=n(U,"LI",{});var Jye=s(Lv);bfe=n(Jye,"STRONG",{});var Bot=s(bfe);FUo=r(Bot,"tapas"),Bot.forEach(t),CUo=r(Jye," \u2014 "),ID=n(Jye,"A",{href:!0});var kot=s(ID);MUo=r(kot,"TFTapasForMaskedLM"),kot.forEach(t),EUo=r(Jye," (TAPAS model)"),Jye.forEach(t),yUo=i(U),Bv=n(U,"LI",{});var Yye=s(Bv);vfe=n(Yye,"STRONG",{});var xot=s(vfe);wUo=r(xot,"transfo-xl"),xot.forEach(t),AUo=r(Yye," \u2014 "),jD=n(Yye,"A",{href:!0});var Rot=s(jD);LUo=r(Rot,"TFTransfoXLLMHeadModel"),Rot.forEach(t),BUo=r(Yye," (Transformer-XL model)"),Yye.forEach(t),kUo=i(U),kv=n(U,"LI",{});var Kye=s(kv);Tfe=n(Kye,"STRONG",{});var Sot=s(Tfe);xUo=r(Sot,"xlm"),Sot.forEach(t),RUo=r(Kye," \u2014 "),ND=n(Kye,"A",{href:!0});var Pot=s(ND);SUo=r(Pot,"TFXLMWithLMHeadModel"),Pot.forEach(t),PUo=r(Kye," (XLM model)"),Kye.forEach(t),$Uo=i(U),xv=n(U,"LI",{});var Zye=s(xv);Ffe=n(Zye,"STRONG",{});var $ot=s(Ffe);IUo=r($ot,"xlm-roberta"),$ot.forEach(t),jUo=r(Zye," \u2014 "),DD=n(Zye,"A",{href:!0});var Iot=s(DD);NUo=r(Iot,"TFXLMRobertaForMaskedLM"),Iot.forEach(t),DUo=r(Zye," (XLM-RoBERTa model)"),Zye.forEach(t),qUo=i(U),Rv=n(U,"LI",{});var ewe=s(Rv);Cfe=n(ewe,"STRONG",{});var jot=s(Cfe);GUo=r(jot,"xlnet"),jot.forEach(t),OUo=r(ewe," \u2014 "),qD=n(ewe,"A",{href:!0});var Not=s(qD);XUo=r(Not,"TFXLNetLMHeadModel"),Not.forEach(t),zUo=r(ewe," (XLNet model)"),ewe.forEach(t),U.forEach(t),VUo=i(fa),Mfe=n(fa,"P",{});var Dot=s(Mfe);WUo=r(Dot,"Examples:"),Dot.forEach(t),QUo=i(fa),m(Oy.$$.fragment,fa),fa.forEach(t),xl.forEach(t),c9e=i(d),lc=n(d,"H2",{class:!0});var vke=s(lc);Sv=n(vke,"A",{id:!0,class:!0,href:!0});var qot=s(Sv);Efe=n(qot,"SPAN",{});var Got=s(Efe);m(Xy.$$.fragment,Got),Got.forEach(t),qot.forEach(t),HUo=i(vke),yfe=n(vke,"SPAN",{});var Oot=s(yfe);UUo=r(Oot,"TFAutoModelForCausalLM"),Oot.forEach(t),vke.forEach(t),f9e=i(d),pr=n(d,"DIV",{class:!0});var Sl=s(pr);m(zy.$$.fragment,Sl),JUo=i(Sl),ic=n(Sl,"P",{});var Xz=s(ic);YUo=r(Xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wfe=n(Xz,"CODE",{});var Xot=s(wfe);KUo=r(Xot,"from_pretrained()"),Xot.forEach(t),ZUo=r(Xz,"class method or the "),Afe=n(Xz,"CODE",{});var zot=s(Afe);eJo=r(zot,"from_config()"),zot.forEach(t),oJo=r(Xz,`class
method.`),Xz.forEach(t),rJo=i(Sl),Vy=n(Sl,"P",{});var Tke=s(Vy);tJo=r(Tke,"This class cannot be instantiated directly using "),Lfe=n(Tke,"CODE",{});var Vot=s(Lfe);aJo=r(Vot,"__init__()"),Vot.forEach(t),nJo=r(Tke," (throws an error)."),Tke.forEach(t),sJo=i(Sl),it=n(Sl,"DIV",{class:!0});var Pl=s(it);m(Wy.$$.fragment,Pl),lJo=i(Pl),Bfe=n(Pl,"P",{});var Wot=s(Bfe);iJo=r(Wot,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Wot.forEach(t),dJo=i(Pl),dc=n(Pl,"P",{});var zz=s(dc);cJo=r(zz,`Note:
Loading a model from its configuration file does `),kfe=n(zz,"STRONG",{});var Qot=s(kfe);fJo=r(Qot,"not"),Qot.forEach(t),mJo=r(zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),xfe=n(zz,"CODE",{});var Hot=s(xfe);gJo=r(Hot,"from_pretrained()"),Hot.forEach(t),hJo=r(zz,"to load the model weights."),zz.forEach(t),pJo=i(Pl),Rfe=n(Pl,"P",{});var Uot=s(Rfe);_Jo=r(Uot,"Examples:"),Uot.forEach(t),uJo=i(Pl),m(Qy.$$.fragment,Pl),Pl.forEach(t),bJo=i(Sl),po=n(Sl,"DIV",{class:!0});var ma=s(po);m(Hy.$$.fragment,ma),vJo=i(ma),Sfe=n(ma,"P",{});var Jot=s(Sfe);TJo=r(Jot,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Jot.forEach(t),FJo=i(ma),cn=n(ma,"P",{});var xC=s(cn);CJo=r(xC,"The model class to instantiate is selected based on the "),Pfe=n(xC,"CODE",{});var Yot=s(Pfe);MJo=r(Yot,"model_type"),Yot.forEach(t),EJo=r(xC,` property of the config object (either
passed as an argument or loaded from `),$fe=n(xC,"CODE",{});var Kot=s($fe);yJo=r(Kot,"pretrained_model_name_or_path"),Kot.forEach(t),wJo=r(xC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=n(xC,"CODE",{});var Zot=s(Ife);AJo=r(Zot,"pretrained_model_name_or_path"),Zot.forEach(t),LJo=r(xC,":"),xC.forEach(t),BJo=i(ma),he=n(ma,"UL",{});var Me=s(he);Pv=n(Me,"LI",{});var owe=s(Pv);jfe=n(owe,"STRONG",{});var ert=s(jfe);kJo=r(ert,"bert"),ert.forEach(t),xJo=r(owe," \u2014 "),GD=n(owe,"A",{href:!0});var ort=s(GD);RJo=r(ort,"TFBertLMHeadModel"),ort.forEach(t),SJo=r(owe," (BERT model)"),owe.forEach(t),PJo=i(Me),$v=n(Me,"LI",{});var rwe=s($v);Nfe=n(rwe,"STRONG",{});var rrt=s(Nfe);$Jo=r(rrt,"ctrl"),rrt.forEach(t),IJo=r(rwe," \u2014 "),OD=n(rwe,"A",{href:!0});var trt=s(OD);jJo=r(trt,"TFCTRLLMHeadModel"),trt.forEach(t),NJo=r(rwe," (CTRL model)"),rwe.forEach(t),DJo=i(Me),Iv=n(Me,"LI",{});var twe=s(Iv);Dfe=n(twe,"STRONG",{});var art=s(Dfe);qJo=r(art,"gpt2"),art.forEach(t),GJo=r(twe," \u2014 "),XD=n(twe,"A",{href:!0});var nrt=s(XD);OJo=r(nrt,"TFGPT2LMHeadModel"),nrt.forEach(t),XJo=r(twe," (OpenAI GPT-2 model)"),twe.forEach(t),zJo=i(Me),jv=n(Me,"LI",{});var awe=s(jv);qfe=n(awe,"STRONG",{});var srt=s(qfe);VJo=r(srt,"openai-gpt"),srt.forEach(t),WJo=r(awe," \u2014 "),zD=n(awe,"A",{href:!0});var lrt=s(zD);QJo=r(lrt,"TFOpenAIGPTLMHeadModel"),lrt.forEach(t),HJo=r(awe," (OpenAI GPT model)"),awe.forEach(t),UJo=i(Me),Nv=n(Me,"LI",{});var nwe=s(Nv);Gfe=n(nwe,"STRONG",{});var irt=s(Gfe);JJo=r(irt,"rembert"),irt.forEach(t),YJo=r(nwe," \u2014 "),VD=n(nwe,"A",{href:!0});var drt=s(VD);KJo=r(drt,"TFRemBertForCausalLM"),drt.forEach(t),ZJo=r(nwe," (RemBERT model)"),nwe.forEach(t),eYo=i(Me),Dv=n(Me,"LI",{});var swe=s(Dv);Ofe=n(swe,"STRONG",{});var crt=s(Ofe);oYo=r(crt,"roberta"),crt.forEach(t),rYo=r(swe," \u2014 "),WD=n(swe,"A",{href:!0});var frt=s(WD);tYo=r(frt,"TFRobertaForCausalLM"),frt.forEach(t),aYo=r(swe," (RoBERTa model)"),swe.forEach(t),nYo=i(Me),qv=n(Me,"LI",{});var lwe=s(qv);Xfe=n(lwe,"STRONG",{});var mrt=s(Xfe);sYo=r(mrt,"roformer"),mrt.forEach(t),lYo=r(lwe," \u2014 "),QD=n(lwe,"A",{href:!0});var grt=s(QD);iYo=r(grt,"TFRoFormerForCausalLM"),grt.forEach(t),dYo=r(lwe," (RoFormer model)"),lwe.forEach(t),cYo=i(Me),Gv=n(Me,"LI",{});var iwe=s(Gv);zfe=n(iwe,"STRONG",{});var hrt=s(zfe);fYo=r(hrt,"transfo-xl"),hrt.forEach(t),mYo=r(iwe," \u2014 "),HD=n(iwe,"A",{href:!0});var prt=s(HD);gYo=r(prt,"TFTransfoXLLMHeadModel"),prt.forEach(t),hYo=r(iwe," (Transformer-XL model)"),iwe.forEach(t),pYo=i(Me),Ov=n(Me,"LI",{});var dwe=s(Ov);Vfe=n(dwe,"STRONG",{});var _rt=s(Vfe);_Yo=r(_rt,"xlm"),_rt.forEach(t),uYo=r(dwe," \u2014 "),UD=n(dwe,"A",{href:!0});var urt=s(UD);bYo=r(urt,"TFXLMWithLMHeadModel"),urt.forEach(t),vYo=r(dwe," (XLM model)"),dwe.forEach(t),TYo=i(Me),Xv=n(Me,"LI",{});var cwe=s(Xv);Wfe=n(cwe,"STRONG",{});var brt=s(Wfe);FYo=r(brt,"xlnet"),brt.forEach(t),CYo=r(cwe," \u2014 "),JD=n(cwe,"A",{href:!0});var vrt=s(JD);MYo=r(vrt,"TFXLNetLMHeadModel"),vrt.forEach(t),EYo=r(cwe," (XLNet model)"),cwe.forEach(t),Me.forEach(t),yYo=i(ma),Qfe=n(ma,"P",{});var Trt=s(Qfe);wYo=r(Trt,"Examples:"),Trt.forEach(t),AYo=i(ma),m(Uy.$$.fragment,ma),ma.forEach(t),Sl.forEach(t),m9e=i(d),cc=n(d,"H2",{class:!0});var Fke=s(cc);zv=n(Fke,"A",{id:!0,class:!0,href:!0});var Frt=s(zv);Hfe=n(Frt,"SPAN",{});var Crt=s(Hfe);m(Jy.$$.fragment,Crt),Crt.forEach(t),Frt.forEach(t),LYo=i(Fke),Ufe=n(Fke,"SPAN",{});var Mrt=s(Ufe);BYo=r(Mrt,"TFAutoModelForImageClassification"),Mrt.forEach(t),Fke.forEach(t),g9e=i(d),_r=n(d,"DIV",{class:!0});var $l=s(_r);m(Yy.$$.fragment,$l),kYo=i($l),fc=n($l,"P",{});var Vz=s(fc);xYo=r(Vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Jfe=n(Vz,"CODE",{});var Ert=s(Jfe);RYo=r(Ert,"from_pretrained()"),Ert.forEach(t),SYo=r(Vz,"class method or the "),Yfe=n(Vz,"CODE",{});var yrt=s(Yfe);PYo=r(yrt,"from_config()"),yrt.forEach(t),$Yo=r(Vz,`class
method.`),Vz.forEach(t),IYo=i($l),Ky=n($l,"P",{});var Cke=s(Ky);jYo=r(Cke,"This class cannot be instantiated directly using "),Kfe=n(Cke,"CODE",{});var wrt=s(Kfe);NYo=r(wrt,"__init__()"),wrt.forEach(t),DYo=r(Cke," (throws an error)."),Cke.forEach(t),qYo=i($l),dt=n($l,"DIV",{class:!0});var Il=s(dt);m(Zy.$$.fragment,Il),GYo=i(Il),Zfe=n(Il,"P",{});var Art=s(Zfe);OYo=r(Art,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Art.forEach(t),XYo=i(Il),mc=n(Il,"P",{});var Wz=s(mc);zYo=r(Wz,`Note:
Loading a model from its configuration file does `),eme=n(Wz,"STRONG",{});var Lrt=s(eme);VYo=r(Lrt,"not"),Lrt.forEach(t),WYo=r(Wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ome=n(Wz,"CODE",{});var Brt=s(ome);QYo=r(Brt,"from_pretrained()"),Brt.forEach(t),HYo=r(Wz,"to load the model weights."),Wz.forEach(t),UYo=i(Il),rme=n(Il,"P",{});var krt=s(rme);JYo=r(krt,"Examples:"),krt.forEach(t),YYo=i(Il),m(ew.$$.fragment,Il),Il.forEach(t),KYo=i($l),_o=n($l,"DIV",{class:!0});var ga=s(_o);m(ow.$$.fragment,ga),ZYo=i(ga),tme=n(ga,"P",{});var xrt=s(tme);eKo=r(xrt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xrt.forEach(t),oKo=i(ga),fn=n(ga,"P",{});var RC=s(fn);rKo=r(RC,"The model class to instantiate is selected based on the "),ame=n(RC,"CODE",{});var Rrt=s(ame);tKo=r(Rrt,"model_type"),Rrt.forEach(t),aKo=r(RC,` property of the config object (either
passed as an argument or loaded from `),nme=n(RC,"CODE",{});var Srt=s(nme);nKo=r(Srt,"pretrained_model_name_or_path"),Srt.forEach(t),sKo=r(RC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sme=n(RC,"CODE",{});var Prt=s(sme);lKo=r(Prt,"pretrained_model_name_or_path"),Prt.forEach(t),iKo=r(RC,":"),RC.forEach(t),dKo=i(ga),lme=n(ga,"UL",{});var $rt=s(lme);Vv=n($rt,"LI",{});var fwe=s(Vv);ime=n(fwe,"STRONG",{});var Irt=s(ime);cKo=r(Irt,"vit"),Irt.forEach(t),fKo=r(fwe," \u2014 "),YD=n(fwe,"A",{href:!0});var jrt=s(YD);mKo=r(jrt,"TFViTForImageClassification"),jrt.forEach(t),gKo=r(fwe," (ViT model)"),fwe.forEach(t),$rt.forEach(t),hKo=i(ga),dme=n(ga,"P",{});var Nrt=s(dme);pKo=r(Nrt,"Examples:"),Nrt.forEach(t),_Ko=i(ga),m(rw.$$.fragment,ga),ga.forEach(t),$l.forEach(t),h9e=i(d),gc=n(d,"H2",{class:!0});var Mke=s(gc);Wv=n(Mke,"A",{id:!0,class:!0,href:!0});var Drt=s(Wv);cme=n(Drt,"SPAN",{});var qrt=s(cme);m(tw.$$.fragment,qrt),qrt.forEach(t),Drt.forEach(t),uKo=i(Mke),fme=n(Mke,"SPAN",{});var Grt=s(fme);bKo=r(Grt,"TFAutoModelForMaskedLM"),Grt.forEach(t),Mke.forEach(t),p9e=i(d),ur=n(d,"DIV",{class:!0});var jl=s(ur);m(aw.$$.fragment,jl),vKo=i(jl),hc=n(jl,"P",{});var Qz=s(hc);TKo=r(Qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mme=n(Qz,"CODE",{});var Ort=s(mme);FKo=r(Ort,"from_pretrained()"),Ort.forEach(t),CKo=r(Qz,"class method or the "),gme=n(Qz,"CODE",{});var Xrt=s(gme);MKo=r(Xrt,"from_config()"),Xrt.forEach(t),EKo=r(Qz,`class
method.`),Qz.forEach(t),yKo=i(jl),nw=n(jl,"P",{});var Eke=s(nw);wKo=r(Eke,"This class cannot be instantiated directly using "),hme=n(Eke,"CODE",{});var zrt=s(hme);AKo=r(zrt,"__init__()"),zrt.forEach(t),LKo=r(Eke," (throws an error)."),Eke.forEach(t),BKo=i(jl),ct=n(jl,"DIV",{class:!0});var Nl=s(ct);m(sw.$$.fragment,Nl),kKo=i(Nl),pme=n(Nl,"P",{});var Vrt=s(pme);xKo=r(Vrt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Vrt.forEach(t),RKo=i(Nl),pc=n(Nl,"P",{});var Hz=s(pc);SKo=r(Hz,`Note:
Loading a model from its configuration file does `),_me=n(Hz,"STRONG",{});var Wrt=s(_me);PKo=r(Wrt,"not"),Wrt.forEach(t),$Ko=r(Hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ume=n(Hz,"CODE",{});var Qrt=s(ume);IKo=r(Qrt,"from_pretrained()"),Qrt.forEach(t),jKo=r(Hz,"to load the model weights."),Hz.forEach(t),NKo=i(Nl),bme=n(Nl,"P",{});var Hrt=s(bme);DKo=r(Hrt,"Examples:"),Hrt.forEach(t),qKo=i(Nl),m(lw.$$.fragment,Nl),Nl.forEach(t),GKo=i(jl),uo=n(jl,"DIV",{class:!0});var ha=s(uo);m(iw.$$.fragment,ha),OKo=i(ha),vme=n(ha,"P",{});var Urt=s(vme);XKo=r(Urt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Urt.forEach(t),zKo=i(ha),mn=n(ha,"P",{});var SC=s(mn);VKo=r(SC,"The model class to instantiate is selected based on the "),Tme=n(SC,"CODE",{});var Jrt=s(Tme);WKo=r(Jrt,"model_type"),Jrt.forEach(t),QKo=r(SC,` property of the config object (either
passed as an argument or loaded from `),Fme=n(SC,"CODE",{});var Yrt=s(Fme);HKo=r(Yrt,"pretrained_model_name_or_path"),Yrt.forEach(t),UKo=r(SC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=n(SC,"CODE",{});var Krt=s(Cme);JKo=r(Krt,"pretrained_model_name_or_path"),Krt.forEach(t),YKo=r(SC,":"),SC.forEach(t),KKo=i(ha),Y=n(ha,"UL",{});var ee=s(Y);Qv=n(ee,"LI",{});var mwe=s(Qv);Mme=n(mwe,"STRONG",{});var Zrt=s(Mme);ZKo=r(Zrt,"albert"),Zrt.forEach(t),eZo=r(mwe," \u2014 "),KD=n(mwe,"A",{href:!0});var ett=s(KD);oZo=r(ett,"TFAlbertForMaskedLM"),ett.forEach(t),rZo=r(mwe," (ALBERT model)"),mwe.forEach(t),tZo=i(ee),Hv=n(ee,"LI",{});var gwe=s(Hv);Eme=n(gwe,"STRONG",{});var ott=s(Eme);aZo=r(ott,"bert"),ott.forEach(t),nZo=r(gwe," \u2014 "),ZD=n(gwe,"A",{href:!0});var rtt=s(ZD);sZo=r(rtt,"TFBertForMaskedLM"),rtt.forEach(t),lZo=r(gwe," (BERT model)"),gwe.forEach(t),iZo=i(ee),Uv=n(ee,"LI",{});var hwe=s(Uv);yme=n(hwe,"STRONG",{});var ttt=s(yme);dZo=r(ttt,"camembert"),ttt.forEach(t),cZo=r(hwe," \u2014 "),eq=n(hwe,"A",{href:!0});var att=s(eq);fZo=r(att,"TFCamembertForMaskedLM"),att.forEach(t),mZo=r(hwe," (CamemBERT model)"),hwe.forEach(t),gZo=i(ee),Jv=n(ee,"LI",{});var pwe=s(Jv);wme=n(pwe,"STRONG",{});var ntt=s(wme);hZo=r(ntt,"convbert"),ntt.forEach(t),pZo=r(pwe," \u2014 "),oq=n(pwe,"A",{href:!0});var stt=s(oq);_Zo=r(stt,"TFConvBertForMaskedLM"),stt.forEach(t),uZo=r(pwe," (ConvBERT model)"),pwe.forEach(t),bZo=i(ee),Yv=n(ee,"LI",{});var _we=s(Yv);Ame=n(_we,"STRONG",{});var ltt=s(Ame);vZo=r(ltt,"deberta"),ltt.forEach(t),TZo=r(_we," \u2014 "),rq=n(_we,"A",{href:!0});var itt=s(rq);FZo=r(itt,"TFDebertaForMaskedLM"),itt.forEach(t),CZo=r(_we," (DeBERTa model)"),_we.forEach(t),MZo=i(ee),Kv=n(ee,"LI",{});var uwe=s(Kv);Lme=n(uwe,"STRONG",{});var dtt=s(Lme);EZo=r(dtt,"deberta-v2"),dtt.forEach(t),yZo=r(uwe," \u2014 "),tq=n(uwe,"A",{href:!0});var ctt=s(tq);wZo=r(ctt,"TFDebertaV2ForMaskedLM"),ctt.forEach(t),AZo=r(uwe," (DeBERTa-v2 model)"),uwe.forEach(t),LZo=i(ee),Zv=n(ee,"LI",{});var bwe=s(Zv);Bme=n(bwe,"STRONG",{});var ftt=s(Bme);BZo=r(ftt,"distilbert"),ftt.forEach(t),kZo=r(bwe," \u2014 "),aq=n(bwe,"A",{href:!0});var mtt=s(aq);xZo=r(mtt,"TFDistilBertForMaskedLM"),mtt.forEach(t),RZo=r(bwe," (DistilBERT model)"),bwe.forEach(t),SZo=i(ee),eT=n(ee,"LI",{});var vwe=s(eT);kme=n(vwe,"STRONG",{});var gtt=s(kme);PZo=r(gtt,"electra"),gtt.forEach(t),$Zo=r(vwe," \u2014 "),nq=n(vwe,"A",{href:!0});var htt=s(nq);IZo=r(htt,"TFElectraForMaskedLM"),htt.forEach(t),jZo=r(vwe," (ELECTRA model)"),vwe.forEach(t),NZo=i(ee),oT=n(ee,"LI",{});var Twe=s(oT);xme=n(Twe,"STRONG",{});var ptt=s(xme);DZo=r(ptt,"flaubert"),ptt.forEach(t),qZo=r(Twe," \u2014 "),sq=n(Twe,"A",{href:!0});var _tt=s(sq);GZo=r(_tt,"TFFlaubertWithLMHeadModel"),_tt.forEach(t),OZo=r(Twe," (FlauBERT model)"),Twe.forEach(t),XZo=i(ee),rT=n(ee,"LI",{});var Fwe=s(rT);Rme=n(Fwe,"STRONG",{});var utt=s(Rme);zZo=r(utt,"funnel"),utt.forEach(t),VZo=r(Fwe," \u2014 "),lq=n(Fwe,"A",{href:!0});var btt=s(lq);WZo=r(btt,"TFFunnelForMaskedLM"),btt.forEach(t),QZo=r(Fwe," (Funnel Transformer model)"),Fwe.forEach(t),HZo=i(ee),tT=n(ee,"LI",{});var Cwe=s(tT);Sme=n(Cwe,"STRONG",{});var vtt=s(Sme);UZo=r(vtt,"layoutlm"),vtt.forEach(t),JZo=r(Cwe," \u2014 "),iq=n(Cwe,"A",{href:!0});var Ttt=s(iq);YZo=r(Ttt,"TFLayoutLMForMaskedLM"),Ttt.forEach(t),KZo=r(Cwe," (LayoutLM model)"),Cwe.forEach(t),ZZo=i(ee),aT=n(ee,"LI",{});var Mwe=s(aT);Pme=n(Mwe,"STRONG",{});var Ftt=s(Pme);eer=r(Ftt,"longformer"),Ftt.forEach(t),oer=r(Mwe," \u2014 "),dq=n(Mwe,"A",{href:!0});var Ctt=s(dq);rer=r(Ctt,"TFLongformerForMaskedLM"),Ctt.forEach(t),ter=r(Mwe," (Longformer model)"),Mwe.forEach(t),aer=i(ee),nT=n(ee,"LI",{});var Ewe=s(nT);$me=n(Ewe,"STRONG",{});var Mtt=s($me);ner=r(Mtt,"mobilebert"),Mtt.forEach(t),ser=r(Ewe," \u2014 "),cq=n(Ewe,"A",{href:!0});var Ett=s(cq);ler=r(Ett,"TFMobileBertForMaskedLM"),Ett.forEach(t),ier=r(Ewe," (MobileBERT model)"),Ewe.forEach(t),der=i(ee),sT=n(ee,"LI",{});var ywe=s(sT);Ime=n(ywe,"STRONG",{});var ytt=s(Ime);cer=r(ytt,"mpnet"),ytt.forEach(t),fer=r(ywe," \u2014 "),fq=n(ywe,"A",{href:!0});var wtt=s(fq);mer=r(wtt,"TFMPNetForMaskedLM"),wtt.forEach(t),ger=r(ywe," (MPNet model)"),ywe.forEach(t),her=i(ee),lT=n(ee,"LI",{});var wwe=s(lT);jme=n(wwe,"STRONG",{});var Att=s(jme);per=r(Att,"rembert"),Att.forEach(t),_er=r(wwe," \u2014 "),mq=n(wwe,"A",{href:!0});var Ltt=s(mq);uer=r(Ltt,"TFRemBertForMaskedLM"),Ltt.forEach(t),ber=r(wwe," (RemBERT model)"),wwe.forEach(t),ver=i(ee),iT=n(ee,"LI",{});var Awe=s(iT);Nme=n(Awe,"STRONG",{});var Btt=s(Nme);Ter=r(Btt,"roberta"),Btt.forEach(t),Fer=r(Awe," \u2014 "),gq=n(Awe,"A",{href:!0});var ktt=s(gq);Cer=r(ktt,"TFRobertaForMaskedLM"),ktt.forEach(t),Mer=r(Awe," (RoBERTa model)"),Awe.forEach(t),Eer=i(ee),dT=n(ee,"LI",{});var Lwe=s(dT);Dme=n(Lwe,"STRONG",{});var xtt=s(Dme);yer=r(xtt,"roformer"),xtt.forEach(t),wer=r(Lwe," \u2014 "),hq=n(Lwe,"A",{href:!0});var Rtt=s(hq);Aer=r(Rtt,"TFRoFormerForMaskedLM"),Rtt.forEach(t),Ler=r(Lwe," (RoFormer model)"),Lwe.forEach(t),Ber=i(ee),cT=n(ee,"LI",{});var Bwe=s(cT);qme=n(Bwe,"STRONG",{});var Stt=s(qme);ker=r(Stt,"tapas"),Stt.forEach(t),xer=r(Bwe," \u2014 "),pq=n(Bwe,"A",{href:!0});var Ptt=s(pq);Rer=r(Ptt,"TFTapasForMaskedLM"),Ptt.forEach(t),Ser=r(Bwe," (TAPAS model)"),Bwe.forEach(t),Per=i(ee),fT=n(ee,"LI",{});var kwe=s(fT);Gme=n(kwe,"STRONG",{});var $tt=s(Gme);$er=r($tt,"xlm"),$tt.forEach(t),Ier=r(kwe," \u2014 "),_q=n(kwe,"A",{href:!0});var Itt=s(_q);jer=r(Itt,"TFXLMWithLMHeadModel"),Itt.forEach(t),Ner=r(kwe," (XLM model)"),kwe.forEach(t),Der=i(ee),mT=n(ee,"LI",{});var xwe=s(mT);Ome=n(xwe,"STRONG",{});var jtt=s(Ome);qer=r(jtt,"xlm-roberta"),jtt.forEach(t),Ger=r(xwe," \u2014 "),uq=n(xwe,"A",{href:!0});var Ntt=s(uq);Oer=r(Ntt,"TFXLMRobertaForMaskedLM"),Ntt.forEach(t),Xer=r(xwe," (XLM-RoBERTa model)"),xwe.forEach(t),ee.forEach(t),zer=i(ha),Xme=n(ha,"P",{});var Dtt=s(Xme);Ver=r(Dtt,"Examples:"),Dtt.forEach(t),Wer=i(ha),m(dw.$$.fragment,ha),ha.forEach(t),jl.forEach(t),_9e=i(d),_c=n(d,"H2",{class:!0});var yke=s(_c);gT=n(yke,"A",{id:!0,class:!0,href:!0});var qtt=s(gT);zme=n(qtt,"SPAN",{});var Gtt=s(zme);m(cw.$$.fragment,Gtt),Gtt.forEach(t),qtt.forEach(t),Qer=i(yke),Vme=n(yke,"SPAN",{});var Ott=s(Vme);Her=r(Ott,"TFAutoModelForSeq2SeqLM"),Ott.forEach(t),yke.forEach(t),u9e=i(d),br=n(d,"DIV",{class:!0});var Dl=s(br);m(fw.$$.fragment,Dl),Uer=i(Dl),uc=n(Dl,"P",{});var Uz=s(uc);Jer=r(Uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Wme=n(Uz,"CODE",{});var Xtt=s(Wme);Yer=r(Xtt,"from_pretrained()"),Xtt.forEach(t),Ker=r(Uz,"class method or the "),Qme=n(Uz,"CODE",{});var ztt=s(Qme);Zer=r(ztt,"from_config()"),ztt.forEach(t),eor=r(Uz,`class
method.`),Uz.forEach(t),oor=i(Dl),mw=n(Dl,"P",{});var wke=s(mw);ror=r(wke,"This class cannot be instantiated directly using "),Hme=n(wke,"CODE",{});var Vtt=s(Hme);tor=r(Vtt,"__init__()"),Vtt.forEach(t),aor=r(wke," (throws an error)."),wke.forEach(t),nor=i(Dl),ft=n(Dl,"DIV",{class:!0});var ql=s(ft);m(gw.$$.fragment,ql),sor=i(ql),Ume=n(ql,"P",{});var Wtt=s(Ume);lor=r(Wtt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Wtt.forEach(t),ior=i(ql),bc=n(ql,"P",{});var Jz=s(bc);dor=r(Jz,`Note:
Loading a model from its configuration file does `),Jme=n(Jz,"STRONG",{});var Qtt=s(Jme);cor=r(Qtt,"not"),Qtt.forEach(t),mor=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yme=n(Jz,"CODE",{});var Htt=s(Yme);gor=r(Htt,"from_pretrained()"),Htt.forEach(t),hor=r(Jz,"to load the model weights."),Jz.forEach(t),por=i(ql),Kme=n(ql,"P",{});var Utt=s(Kme);_or=r(Utt,"Examples:"),Utt.forEach(t),uor=i(ql),m(hw.$$.fragment,ql),ql.forEach(t),bor=i(Dl),bo=n(Dl,"DIV",{class:!0});var pa=s(bo);m(pw.$$.fragment,pa),vor=i(pa),Zme=n(pa,"P",{});var Jtt=s(Zme);Tor=r(Jtt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Jtt.forEach(t),For=i(pa),gn=n(pa,"P",{});var PC=s(gn);Cor=r(PC,"The model class to instantiate is selected based on the "),ege=n(PC,"CODE",{});var Ytt=s(ege);Mor=r(Ytt,"model_type"),Ytt.forEach(t),Eor=r(PC,` property of the config object (either
passed as an argument or loaded from `),oge=n(PC,"CODE",{});var Ktt=s(oge);yor=r(Ktt,"pretrained_model_name_or_path"),Ktt.forEach(t),wor=r(PC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rge=n(PC,"CODE",{});var Ztt=s(rge);Aor=r(Ztt,"pretrained_model_name_or_path"),Ztt.forEach(t),Lor=r(PC,":"),PC.forEach(t),Bor=i(pa),pe=n(pa,"UL",{});var Ee=s(pe);hT=n(Ee,"LI",{});var Rwe=s(hT);tge=n(Rwe,"STRONG",{});var eat=s(tge);kor=r(eat,"bart"),eat.forEach(t),xor=r(Rwe," \u2014 "),bq=n(Rwe,"A",{href:!0});var oat=s(bq);Ror=r(oat,"TFBartForConditionalGeneration"),oat.forEach(t),Sor=r(Rwe," (BART model)"),Rwe.forEach(t),Por=i(Ee),pT=n(Ee,"LI",{});var Swe=s(pT);age=n(Swe,"STRONG",{});var rat=s(age);$or=r(rat,"blenderbot"),rat.forEach(t),Ior=r(Swe," \u2014 "),vq=n(Swe,"A",{href:!0});var tat=s(vq);jor=r(tat,"TFBlenderbotForConditionalGeneration"),tat.forEach(t),Nor=r(Swe," (Blenderbot model)"),Swe.forEach(t),Dor=i(Ee),_T=n(Ee,"LI",{});var Pwe=s(_T);nge=n(Pwe,"STRONG",{});var aat=s(nge);qor=r(aat,"blenderbot-small"),aat.forEach(t),Gor=r(Pwe," \u2014 "),Tq=n(Pwe,"A",{href:!0});var nat=s(Tq);Oor=r(nat,"TFBlenderbotSmallForConditionalGeneration"),nat.forEach(t),Xor=r(Pwe," (BlenderbotSmall model)"),Pwe.forEach(t),zor=i(Ee),uT=n(Ee,"LI",{});var $we=s(uT);sge=n($we,"STRONG",{});var sat=s(sge);Vor=r(sat,"encoder-decoder"),sat.forEach(t),Wor=r($we," \u2014 "),Fq=n($we,"A",{href:!0});var lat=s(Fq);Qor=r(lat,"TFEncoderDecoderModel"),lat.forEach(t),Hor=r($we," (Encoder decoder model)"),$we.forEach(t),Uor=i(Ee),bT=n(Ee,"LI",{});var Iwe=s(bT);lge=n(Iwe,"STRONG",{});var iat=s(lge);Jor=r(iat,"led"),iat.forEach(t),Yor=r(Iwe," \u2014 "),Cq=n(Iwe,"A",{href:!0});var dat=s(Cq);Kor=r(dat,"TFLEDForConditionalGeneration"),dat.forEach(t),Zor=r(Iwe," (LED model)"),Iwe.forEach(t),err=i(Ee),vT=n(Ee,"LI",{});var jwe=s(vT);ige=n(jwe,"STRONG",{});var cat=s(ige);orr=r(cat,"marian"),cat.forEach(t),rrr=r(jwe," \u2014 "),Mq=n(jwe,"A",{href:!0});var fat=s(Mq);trr=r(fat,"TFMarianMTModel"),fat.forEach(t),arr=r(jwe," (Marian model)"),jwe.forEach(t),nrr=i(Ee),TT=n(Ee,"LI",{});var Nwe=s(TT);dge=n(Nwe,"STRONG",{});var mat=s(dge);srr=r(mat,"mbart"),mat.forEach(t),lrr=r(Nwe," \u2014 "),Eq=n(Nwe,"A",{href:!0});var gat=s(Eq);irr=r(gat,"TFMBartForConditionalGeneration"),gat.forEach(t),drr=r(Nwe," (mBART model)"),Nwe.forEach(t),crr=i(Ee),FT=n(Ee,"LI",{});var Dwe=s(FT);cge=n(Dwe,"STRONG",{});var hat=s(cge);frr=r(hat,"mt5"),hat.forEach(t),mrr=r(Dwe," \u2014 "),yq=n(Dwe,"A",{href:!0});var pat=s(yq);grr=r(pat,"TFMT5ForConditionalGeneration"),pat.forEach(t),hrr=r(Dwe," (mT5 model)"),Dwe.forEach(t),prr=i(Ee),CT=n(Ee,"LI",{});var qwe=s(CT);fge=n(qwe,"STRONG",{});var _at=s(fge);_rr=r(_at,"pegasus"),_at.forEach(t),urr=r(qwe," \u2014 "),wq=n(qwe,"A",{href:!0});var uat=s(wq);brr=r(uat,"TFPegasusForConditionalGeneration"),uat.forEach(t),vrr=r(qwe," (Pegasus model)"),qwe.forEach(t),Trr=i(Ee),MT=n(Ee,"LI",{});var Gwe=s(MT);mge=n(Gwe,"STRONG",{});var bat=s(mge);Frr=r(bat,"t5"),bat.forEach(t),Crr=r(Gwe," \u2014 "),Aq=n(Gwe,"A",{href:!0});var vat=s(Aq);Mrr=r(vat,"TFT5ForConditionalGeneration"),vat.forEach(t),Err=r(Gwe," (T5 model)"),Gwe.forEach(t),Ee.forEach(t),yrr=i(pa),gge=n(pa,"P",{});var Tat=s(gge);wrr=r(Tat,"Examples:"),Tat.forEach(t),Arr=i(pa),m(_w.$$.fragment,pa),pa.forEach(t),Dl.forEach(t),b9e=i(d),vc=n(d,"H2",{class:!0});var Ake=s(vc);ET=n(Ake,"A",{id:!0,class:!0,href:!0});var Fat=s(ET);hge=n(Fat,"SPAN",{});var Cat=s(hge);m(uw.$$.fragment,Cat),Cat.forEach(t),Fat.forEach(t),Lrr=i(Ake),pge=n(Ake,"SPAN",{});var Mat=s(pge);Brr=r(Mat,"TFAutoModelForSequenceClassification"),Mat.forEach(t),Ake.forEach(t),v9e=i(d),vr=n(d,"DIV",{class:!0});var Gl=s(vr);m(bw.$$.fragment,Gl),krr=i(Gl),Tc=n(Gl,"P",{});var Yz=s(Tc);xrr=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_ge=n(Yz,"CODE",{});var Eat=s(_ge);Rrr=r(Eat,"from_pretrained()"),Eat.forEach(t),Srr=r(Yz,"class method or the "),uge=n(Yz,"CODE",{});var yat=s(uge);Prr=r(yat,"from_config()"),yat.forEach(t),$rr=r(Yz,`class
method.`),Yz.forEach(t),Irr=i(Gl),vw=n(Gl,"P",{});var Lke=s(vw);jrr=r(Lke,"This class cannot be instantiated directly using "),bge=n(Lke,"CODE",{});var wat=s(bge);Nrr=r(wat,"__init__()"),wat.forEach(t),Drr=r(Lke," (throws an error)."),Lke.forEach(t),qrr=i(Gl),mt=n(Gl,"DIV",{class:!0});var Ol=s(mt);m(Tw.$$.fragment,Ol),Grr=i(Ol),vge=n(Ol,"P",{});var Aat=s(vge);Orr=r(Aat,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Aat.forEach(t),Xrr=i(Ol),Fc=n(Ol,"P",{});var Kz=s(Fc);zrr=r(Kz,`Note:
Loading a model from its configuration file does `),Tge=n(Kz,"STRONG",{});var Lat=s(Tge);Vrr=r(Lat,"not"),Lat.forEach(t),Wrr=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fge=n(Kz,"CODE",{});var Bat=s(Fge);Qrr=r(Bat,"from_pretrained()"),Bat.forEach(t),Hrr=r(Kz,"to load the model weights."),Kz.forEach(t),Urr=i(Ol),Cge=n(Ol,"P",{});var kat=s(Cge);Jrr=r(kat,"Examples:"),kat.forEach(t),Yrr=i(Ol),m(Fw.$$.fragment,Ol),Ol.forEach(t),Krr=i(Gl),vo=n(Gl,"DIV",{class:!0});var _a=s(vo);m(Cw.$$.fragment,_a),Zrr=i(_a),Mge=n(_a,"P",{});var xat=s(Mge);etr=r(xat,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xat.forEach(t),otr=i(_a),hn=n(_a,"P",{});var $C=s(hn);rtr=r($C,"The model class to instantiate is selected based on the "),Ege=n($C,"CODE",{});var Rat=s(Ege);ttr=r(Rat,"model_type"),Rat.forEach(t),atr=r($C,` property of the config object (either
passed as an argument or loaded from `),yge=n($C,"CODE",{});var Sat=s(yge);ntr=r(Sat,"pretrained_model_name_or_path"),Sat.forEach(t),str=r($C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=n($C,"CODE",{});var Pat=s(wge);ltr=r(Pat,"pretrained_model_name_or_path"),Pat.forEach(t),itr=r($C,":"),$C.forEach(t),dtr=i(_a),X=n(_a,"UL",{});var W=s(X);yT=n(W,"LI",{});var Owe=s(yT);Age=n(Owe,"STRONG",{});var $at=s(Age);ctr=r($at,"albert"),$at.forEach(t),ftr=r(Owe," \u2014 "),Lq=n(Owe,"A",{href:!0});var Iat=s(Lq);mtr=r(Iat,"TFAlbertForSequenceClassification"),Iat.forEach(t),gtr=r(Owe," (ALBERT model)"),Owe.forEach(t),htr=i(W),wT=n(W,"LI",{});var Xwe=s(wT);Lge=n(Xwe,"STRONG",{});var jat=s(Lge);ptr=r(jat,"bert"),jat.forEach(t),_tr=r(Xwe," \u2014 "),Bq=n(Xwe,"A",{href:!0});var Nat=s(Bq);utr=r(Nat,"TFBertForSequenceClassification"),Nat.forEach(t),btr=r(Xwe," (BERT model)"),Xwe.forEach(t),vtr=i(W),AT=n(W,"LI",{});var zwe=s(AT);Bge=n(zwe,"STRONG",{});var Dat=s(Bge);Ttr=r(Dat,"camembert"),Dat.forEach(t),Ftr=r(zwe," \u2014 "),kq=n(zwe,"A",{href:!0});var qat=s(kq);Ctr=r(qat,"TFCamembertForSequenceClassification"),qat.forEach(t),Mtr=r(zwe," (CamemBERT model)"),zwe.forEach(t),Etr=i(W),LT=n(W,"LI",{});var Vwe=s(LT);kge=n(Vwe,"STRONG",{});var Gat=s(kge);ytr=r(Gat,"convbert"),Gat.forEach(t),wtr=r(Vwe," \u2014 "),xq=n(Vwe,"A",{href:!0});var Oat=s(xq);Atr=r(Oat,"TFConvBertForSequenceClassification"),Oat.forEach(t),Ltr=r(Vwe," (ConvBERT model)"),Vwe.forEach(t),Btr=i(W),BT=n(W,"LI",{});var Wwe=s(BT);xge=n(Wwe,"STRONG",{});var Xat=s(xge);ktr=r(Xat,"ctrl"),Xat.forEach(t),xtr=r(Wwe," \u2014 "),Rq=n(Wwe,"A",{href:!0});var zat=s(Rq);Rtr=r(zat,"TFCTRLForSequenceClassification"),zat.forEach(t),Str=r(Wwe," (CTRL model)"),Wwe.forEach(t),Ptr=i(W),kT=n(W,"LI",{});var Qwe=s(kT);Rge=n(Qwe,"STRONG",{});var Vat=s(Rge);$tr=r(Vat,"deberta"),Vat.forEach(t),Itr=r(Qwe," \u2014 "),Sq=n(Qwe,"A",{href:!0});var Wat=s(Sq);jtr=r(Wat,"TFDebertaForSequenceClassification"),Wat.forEach(t),Ntr=r(Qwe," (DeBERTa model)"),Qwe.forEach(t),Dtr=i(W),xT=n(W,"LI",{});var Hwe=s(xT);Sge=n(Hwe,"STRONG",{});var Qat=s(Sge);qtr=r(Qat,"deberta-v2"),Qat.forEach(t),Gtr=r(Hwe," \u2014 "),Pq=n(Hwe,"A",{href:!0});var Hat=s(Pq);Otr=r(Hat,"TFDebertaV2ForSequenceClassification"),Hat.forEach(t),Xtr=r(Hwe," (DeBERTa-v2 model)"),Hwe.forEach(t),ztr=i(W),RT=n(W,"LI",{});var Uwe=s(RT);Pge=n(Uwe,"STRONG",{});var Uat=s(Pge);Vtr=r(Uat,"distilbert"),Uat.forEach(t),Wtr=r(Uwe," \u2014 "),$q=n(Uwe,"A",{href:!0});var Jat=s($q);Qtr=r(Jat,"TFDistilBertForSequenceClassification"),Jat.forEach(t),Htr=r(Uwe," (DistilBERT model)"),Uwe.forEach(t),Utr=i(W),ST=n(W,"LI",{});var Jwe=s(ST);$ge=n(Jwe,"STRONG",{});var Yat=s($ge);Jtr=r(Yat,"electra"),Yat.forEach(t),Ytr=r(Jwe," \u2014 "),Iq=n(Jwe,"A",{href:!0});var Kat=s(Iq);Ktr=r(Kat,"TFElectraForSequenceClassification"),Kat.forEach(t),Ztr=r(Jwe," (ELECTRA model)"),Jwe.forEach(t),ear=i(W),PT=n(W,"LI",{});var Ywe=s(PT);Ige=n(Ywe,"STRONG",{});var Zat=s(Ige);oar=r(Zat,"flaubert"),Zat.forEach(t),rar=r(Ywe," \u2014 "),jq=n(Ywe,"A",{href:!0});var ent=s(jq);tar=r(ent,"TFFlaubertForSequenceClassification"),ent.forEach(t),aar=r(Ywe," (FlauBERT model)"),Ywe.forEach(t),nar=i(W),$T=n(W,"LI",{});var Kwe=s($T);jge=n(Kwe,"STRONG",{});var ont=s(jge);sar=r(ont,"funnel"),ont.forEach(t),lar=r(Kwe," \u2014 "),Nq=n(Kwe,"A",{href:!0});var rnt=s(Nq);iar=r(rnt,"TFFunnelForSequenceClassification"),rnt.forEach(t),dar=r(Kwe," (Funnel Transformer model)"),Kwe.forEach(t),car=i(W),IT=n(W,"LI",{});var Zwe=s(IT);Nge=n(Zwe,"STRONG",{});var tnt=s(Nge);far=r(tnt,"gpt2"),tnt.forEach(t),mar=r(Zwe," \u2014 "),Dq=n(Zwe,"A",{href:!0});var ant=s(Dq);gar=r(ant,"TFGPT2ForSequenceClassification"),ant.forEach(t),har=r(Zwe," (OpenAI GPT-2 model)"),Zwe.forEach(t),par=i(W),jT=n(W,"LI",{});var eAe=s(jT);Dge=n(eAe,"STRONG",{});var nnt=s(Dge);_ar=r(nnt,"layoutlm"),nnt.forEach(t),uar=r(eAe," \u2014 "),qq=n(eAe,"A",{href:!0});var snt=s(qq);bar=r(snt,"TFLayoutLMForSequenceClassification"),snt.forEach(t),Tar=r(eAe," (LayoutLM model)"),eAe.forEach(t),Far=i(W),NT=n(W,"LI",{});var oAe=s(NT);qge=n(oAe,"STRONG",{});var lnt=s(qge);Car=r(lnt,"longformer"),lnt.forEach(t),Mar=r(oAe," \u2014 "),Gq=n(oAe,"A",{href:!0});var int=s(Gq);Ear=r(int,"TFLongformerForSequenceClassification"),int.forEach(t),yar=r(oAe," (Longformer model)"),oAe.forEach(t),war=i(W),DT=n(W,"LI",{});var rAe=s(DT);Gge=n(rAe,"STRONG",{});var dnt=s(Gge);Aar=r(dnt,"mobilebert"),dnt.forEach(t),Lar=r(rAe," \u2014 "),Oq=n(rAe,"A",{href:!0});var cnt=s(Oq);Bar=r(cnt,"TFMobileBertForSequenceClassification"),cnt.forEach(t),kar=r(rAe," (MobileBERT model)"),rAe.forEach(t),xar=i(W),qT=n(W,"LI",{});var tAe=s(qT);Oge=n(tAe,"STRONG",{});var fnt=s(Oge);Rar=r(fnt,"mpnet"),fnt.forEach(t),Sar=r(tAe," \u2014 "),Xq=n(tAe,"A",{href:!0});var mnt=s(Xq);Par=r(mnt,"TFMPNetForSequenceClassification"),mnt.forEach(t),$ar=r(tAe," (MPNet model)"),tAe.forEach(t),Iar=i(W),GT=n(W,"LI",{});var aAe=s(GT);Xge=n(aAe,"STRONG",{});var gnt=s(Xge);jar=r(gnt,"openai-gpt"),gnt.forEach(t),Nar=r(aAe," \u2014 "),zq=n(aAe,"A",{href:!0});var hnt=s(zq);Dar=r(hnt,"TFOpenAIGPTForSequenceClassification"),hnt.forEach(t),qar=r(aAe," (OpenAI GPT model)"),aAe.forEach(t),Gar=i(W),OT=n(W,"LI",{});var nAe=s(OT);zge=n(nAe,"STRONG",{});var pnt=s(zge);Oar=r(pnt,"rembert"),pnt.forEach(t),Xar=r(nAe," \u2014 "),Vq=n(nAe,"A",{href:!0});var _nt=s(Vq);zar=r(_nt,"TFRemBertForSequenceClassification"),_nt.forEach(t),Var=r(nAe," (RemBERT model)"),nAe.forEach(t),War=i(W),XT=n(W,"LI",{});var sAe=s(XT);Vge=n(sAe,"STRONG",{});var unt=s(Vge);Qar=r(unt,"roberta"),unt.forEach(t),Har=r(sAe," \u2014 "),Wq=n(sAe,"A",{href:!0});var bnt=s(Wq);Uar=r(bnt,"TFRobertaForSequenceClassification"),bnt.forEach(t),Jar=r(sAe," (RoBERTa model)"),sAe.forEach(t),Yar=i(W),zT=n(W,"LI",{});var lAe=s(zT);Wge=n(lAe,"STRONG",{});var vnt=s(Wge);Kar=r(vnt,"roformer"),vnt.forEach(t),Zar=r(lAe," \u2014 "),Qq=n(lAe,"A",{href:!0});var Tnt=s(Qq);enr=r(Tnt,"TFRoFormerForSequenceClassification"),Tnt.forEach(t),onr=r(lAe," (RoFormer model)"),lAe.forEach(t),rnr=i(W),VT=n(W,"LI",{});var iAe=s(VT);Qge=n(iAe,"STRONG",{});var Fnt=s(Qge);tnr=r(Fnt,"tapas"),Fnt.forEach(t),anr=r(iAe," \u2014 "),Hq=n(iAe,"A",{href:!0});var Cnt=s(Hq);nnr=r(Cnt,"TFTapasForSequenceClassification"),Cnt.forEach(t),snr=r(iAe," (TAPAS model)"),iAe.forEach(t),lnr=i(W),WT=n(W,"LI",{});var dAe=s(WT);Hge=n(dAe,"STRONG",{});var Mnt=s(Hge);inr=r(Mnt,"transfo-xl"),Mnt.forEach(t),dnr=r(dAe," \u2014 "),Uq=n(dAe,"A",{href:!0});var Ent=s(Uq);cnr=r(Ent,"TFTransfoXLForSequenceClassification"),Ent.forEach(t),fnr=r(dAe," (Transformer-XL model)"),dAe.forEach(t),mnr=i(W),QT=n(W,"LI",{});var cAe=s(QT);Uge=n(cAe,"STRONG",{});var ynt=s(Uge);gnr=r(ynt,"xlm"),ynt.forEach(t),hnr=r(cAe," \u2014 "),Jq=n(cAe,"A",{href:!0});var wnt=s(Jq);pnr=r(wnt,"TFXLMForSequenceClassification"),wnt.forEach(t),_nr=r(cAe," (XLM model)"),cAe.forEach(t),unr=i(W),HT=n(W,"LI",{});var fAe=s(HT);Jge=n(fAe,"STRONG",{});var Ant=s(Jge);bnr=r(Ant,"xlm-roberta"),Ant.forEach(t),vnr=r(fAe," \u2014 "),Yq=n(fAe,"A",{href:!0});var Lnt=s(Yq);Tnr=r(Lnt,"TFXLMRobertaForSequenceClassification"),Lnt.forEach(t),Fnr=r(fAe," (XLM-RoBERTa model)"),fAe.forEach(t),Cnr=i(W),UT=n(W,"LI",{});var mAe=s(UT);Yge=n(mAe,"STRONG",{});var Bnt=s(Yge);Mnr=r(Bnt,"xlnet"),Bnt.forEach(t),Enr=r(mAe," \u2014 "),Kq=n(mAe,"A",{href:!0});var knt=s(Kq);ynr=r(knt,"TFXLNetForSequenceClassification"),knt.forEach(t),wnr=r(mAe," (XLNet model)"),mAe.forEach(t),W.forEach(t),Anr=i(_a),Kge=n(_a,"P",{});var xnt=s(Kge);Lnr=r(xnt,"Examples:"),xnt.forEach(t),Bnr=i(_a),m(Mw.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),T9e=i(d),Cc=n(d,"H2",{class:!0});var Bke=s(Cc);JT=n(Bke,"A",{id:!0,class:!0,href:!0});var Rnt=s(JT);Zge=n(Rnt,"SPAN",{});var Snt=s(Zge);m(Ew.$$.fragment,Snt),Snt.forEach(t),Rnt.forEach(t),knr=i(Bke),ehe=n(Bke,"SPAN",{});var Pnt=s(ehe);xnr=r(Pnt,"TFAutoModelForMultipleChoice"),Pnt.forEach(t),Bke.forEach(t),F9e=i(d),Tr=n(d,"DIV",{class:!0});var Xl=s(Tr);m(yw.$$.fragment,Xl),Rnr=i(Xl),Mc=n(Xl,"P",{});var Zz=s(Mc);Snr=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ohe=n(Zz,"CODE",{});var $nt=s(ohe);Pnr=r($nt,"from_pretrained()"),$nt.forEach(t),$nr=r(Zz,"class method or the "),rhe=n(Zz,"CODE",{});var Int=s(rhe);Inr=r(Int,"from_config()"),Int.forEach(t),jnr=r(Zz,`class
method.`),Zz.forEach(t),Nnr=i(Xl),ww=n(Xl,"P",{});var kke=s(ww);Dnr=r(kke,"This class cannot be instantiated directly using "),the=n(kke,"CODE",{});var jnt=s(the);qnr=r(jnt,"__init__()"),jnt.forEach(t),Gnr=r(kke," (throws an error)."),kke.forEach(t),Onr=i(Xl),gt=n(Xl,"DIV",{class:!0});var zl=s(gt);m(Aw.$$.fragment,zl),Xnr=i(zl),ahe=n(zl,"P",{});var Nnt=s(ahe);znr=r(Nnt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Nnt.forEach(t),Vnr=i(zl),Ec=n(zl,"P",{});var eV=s(Ec);Wnr=r(eV,`Note:
Loading a model from its configuration file does `),nhe=n(eV,"STRONG",{});var Dnt=s(nhe);Qnr=r(Dnt,"not"),Dnt.forEach(t),Hnr=r(eV,` load the model weights. It only affects the
model\u2019s configuration. Use `),she=n(eV,"CODE",{});var qnt=s(she);Unr=r(qnt,"from_pretrained()"),qnt.forEach(t),Jnr=r(eV,"to load the model weights."),eV.forEach(t),Ynr=i(zl),lhe=n(zl,"P",{});var Gnt=s(lhe);Knr=r(Gnt,"Examples:"),Gnt.forEach(t),Znr=i(zl),m(Lw.$$.fragment,zl),zl.forEach(t),esr=i(Xl),To=n(Xl,"DIV",{class:!0});var ua=s(To);m(Bw.$$.fragment,ua),osr=i(ua),ihe=n(ua,"P",{});var Ont=s(ihe);rsr=r(Ont,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Ont.forEach(t),tsr=i(ua),pn=n(ua,"P",{});var IC=s(pn);asr=r(IC,"The model class to instantiate is selected based on the "),dhe=n(IC,"CODE",{});var Xnt=s(dhe);nsr=r(Xnt,"model_type"),Xnt.forEach(t),ssr=r(IC,` property of the config object (either
passed as an argument or loaded from `),che=n(IC,"CODE",{});var znt=s(che);lsr=r(znt,"pretrained_model_name_or_path"),znt.forEach(t),isr=r(IC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fhe=n(IC,"CODE",{});var Vnt=s(fhe);dsr=r(Vnt,"pretrained_model_name_or_path"),Vnt.forEach(t),csr=r(IC,":"),IC.forEach(t),fsr=i(ua),te=n(ua,"UL",{});var ne=s(te);YT=n(ne,"LI",{});var gAe=s(YT);mhe=n(gAe,"STRONG",{});var Wnt=s(mhe);msr=r(Wnt,"albert"),Wnt.forEach(t),gsr=r(gAe," \u2014 "),Zq=n(gAe,"A",{href:!0});var Qnt=s(Zq);hsr=r(Qnt,"TFAlbertForMultipleChoice"),Qnt.forEach(t),psr=r(gAe," (ALBERT model)"),gAe.forEach(t),_sr=i(ne),KT=n(ne,"LI",{});var hAe=s(KT);ghe=n(hAe,"STRONG",{});var Hnt=s(ghe);usr=r(Hnt,"bert"),Hnt.forEach(t),bsr=r(hAe," \u2014 "),eG=n(hAe,"A",{href:!0});var Unt=s(eG);vsr=r(Unt,"TFBertForMultipleChoice"),Unt.forEach(t),Tsr=r(hAe," (BERT model)"),hAe.forEach(t),Fsr=i(ne),ZT=n(ne,"LI",{});var pAe=s(ZT);hhe=n(pAe,"STRONG",{});var Jnt=s(hhe);Csr=r(Jnt,"camembert"),Jnt.forEach(t),Msr=r(pAe," \u2014 "),oG=n(pAe,"A",{href:!0});var Ynt=s(oG);Esr=r(Ynt,"TFCamembertForMultipleChoice"),Ynt.forEach(t),ysr=r(pAe," (CamemBERT model)"),pAe.forEach(t),wsr=i(ne),e7=n(ne,"LI",{});var _Ae=s(e7);phe=n(_Ae,"STRONG",{});var Knt=s(phe);Asr=r(Knt,"convbert"),Knt.forEach(t),Lsr=r(_Ae," \u2014 "),rG=n(_Ae,"A",{href:!0});var Znt=s(rG);Bsr=r(Znt,"TFConvBertForMultipleChoice"),Znt.forEach(t),ksr=r(_Ae," (ConvBERT model)"),_Ae.forEach(t),xsr=i(ne),o7=n(ne,"LI",{});var uAe=s(o7);_he=n(uAe,"STRONG",{});var est=s(_he);Rsr=r(est,"distilbert"),est.forEach(t),Ssr=r(uAe," \u2014 "),tG=n(uAe,"A",{href:!0});var ost=s(tG);Psr=r(ost,"TFDistilBertForMultipleChoice"),ost.forEach(t),$sr=r(uAe," (DistilBERT model)"),uAe.forEach(t),Isr=i(ne),r7=n(ne,"LI",{});var bAe=s(r7);uhe=n(bAe,"STRONG",{});var rst=s(uhe);jsr=r(rst,"electra"),rst.forEach(t),Nsr=r(bAe," \u2014 "),aG=n(bAe,"A",{href:!0});var tst=s(aG);Dsr=r(tst,"TFElectraForMultipleChoice"),tst.forEach(t),qsr=r(bAe," (ELECTRA model)"),bAe.forEach(t),Gsr=i(ne),t7=n(ne,"LI",{});var vAe=s(t7);bhe=n(vAe,"STRONG",{});var ast=s(bhe);Osr=r(ast,"flaubert"),ast.forEach(t),Xsr=r(vAe," \u2014 "),nG=n(vAe,"A",{href:!0});var nst=s(nG);zsr=r(nst,"TFFlaubertForMultipleChoice"),nst.forEach(t),Vsr=r(vAe," (FlauBERT model)"),vAe.forEach(t),Wsr=i(ne),a7=n(ne,"LI",{});var TAe=s(a7);vhe=n(TAe,"STRONG",{});var sst=s(vhe);Qsr=r(sst,"funnel"),sst.forEach(t),Hsr=r(TAe," \u2014 "),sG=n(TAe,"A",{href:!0});var lst=s(sG);Usr=r(lst,"TFFunnelForMultipleChoice"),lst.forEach(t),Jsr=r(TAe," (Funnel Transformer model)"),TAe.forEach(t),Ysr=i(ne),n7=n(ne,"LI",{});var FAe=s(n7);The=n(FAe,"STRONG",{});var ist=s(The);Ksr=r(ist,"longformer"),ist.forEach(t),Zsr=r(FAe," \u2014 "),lG=n(FAe,"A",{href:!0});var dst=s(lG);elr=r(dst,"TFLongformerForMultipleChoice"),dst.forEach(t),olr=r(FAe," (Longformer model)"),FAe.forEach(t),rlr=i(ne),s7=n(ne,"LI",{});var CAe=s(s7);Fhe=n(CAe,"STRONG",{});var cst=s(Fhe);tlr=r(cst,"mobilebert"),cst.forEach(t),alr=r(CAe," \u2014 "),iG=n(CAe,"A",{href:!0});var fst=s(iG);nlr=r(fst,"TFMobileBertForMultipleChoice"),fst.forEach(t),slr=r(CAe," (MobileBERT model)"),CAe.forEach(t),llr=i(ne),l7=n(ne,"LI",{});var MAe=s(l7);Che=n(MAe,"STRONG",{});var mst=s(Che);ilr=r(mst,"mpnet"),mst.forEach(t),dlr=r(MAe," \u2014 "),dG=n(MAe,"A",{href:!0});var gst=s(dG);clr=r(gst,"TFMPNetForMultipleChoice"),gst.forEach(t),flr=r(MAe," (MPNet model)"),MAe.forEach(t),mlr=i(ne),i7=n(ne,"LI",{});var EAe=s(i7);Mhe=n(EAe,"STRONG",{});var hst=s(Mhe);glr=r(hst,"rembert"),hst.forEach(t),hlr=r(EAe," \u2014 "),cG=n(EAe,"A",{href:!0});var pst=s(cG);plr=r(pst,"TFRemBertForMultipleChoice"),pst.forEach(t),_lr=r(EAe," (RemBERT model)"),EAe.forEach(t),ulr=i(ne),d7=n(ne,"LI",{});var yAe=s(d7);Ehe=n(yAe,"STRONG",{});var _st=s(Ehe);blr=r(_st,"roberta"),_st.forEach(t),vlr=r(yAe," \u2014 "),fG=n(yAe,"A",{href:!0});var ust=s(fG);Tlr=r(ust,"TFRobertaForMultipleChoice"),ust.forEach(t),Flr=r(yAe," (RoBERTa model)"),yAe.forEach(t),Clr=i(ne),c7=n(ne,"LI",{});var wAe=s(c7);yhe=n(wAe,"STRONG",{});var bst=s(yhe);Mlr=r(bst,"roformer"),bst.forEach(t),Elr=r(wAe," \u2014 "),mG=n(wAe,"A",{href:!0});var vst=s(mG);ylr=r(vst,"TFRoFormerForMultipleChoice"),vst.forEach(t),wlr=r(wAe," (RoFormer model)"),wAe.forEach(t),Alr=i(ne),f7=n(ne,"LI",{});var AAe=s(f7);whe=n(AAe,"STRONG",{});var Tst=s(whe);Llr=r(Tst,"xlm"),Tst.forEach(t),Blr=r(AAe," \u2014 "),gG=n(AAe,"A",{href:!0});var Fst=s(gG);klr=r(Fst,"TFXLMForMultipleChoice"),Fst.forEach(t),xlr=r(AAe," (XLM model)"),AAe.forEach(t),Rlr=i(ne),m7=n(ne,"LI",{});var LAe=s(m7);Ahe=n(LAe,"STRONG",{});var Cst=s(Ahe);Slr=r(Cst,"xlm-roberta"),Cst.forEach(t),Plr=r(LAe," \u2014 "),hG=n(LAe,"A",{href:!0});var Mst=s(hG);$lr=r(Mst,"TFXLMRobertaForMultipleChoice"),Mst.forEach(t),Ilr=r(LAe," (XLM-RoBERTa model)"),LAe.forEach(t),jlr=i(ne),g7=n(ne,"LI",{});var BAe=s(g7);Lhe=n(BAe,"STRONG",{});var Est=s(Lhe);Nlr=r(Est,"xlnet"),Est.forEach(t),Dlr=r(BAe," \u2014 "),pG=n(BAe,"A",{href:!0});var yst=s(pG);qlr=r(yst,"TFXLNetForMultipleChoice"),yst.forEach(t),Glr=r(BAe," (XLNet model)"),BAe.forEach(t),ne.forEach(t),Olr=i(ua),Bhe=n(ua,"P",{});var wst=s(Bhe);Xlr=r(wst,"Examples:"),wst.forEach(t),zlr=i(ua),m(kw.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),C9e=i(d),yc=n(d,"H2",{class:!0});var xke=s(yc);h7=n(xke,"A",{id:!0,class:!0,href:!0});var Ast=s(h7);khe=n(Ast,"SPAN",{});var Lst=s(khe);m(xw.$$.fragment,Lst),Lst.forEach(t),Ast.forEach(t),Vlr=i(xke),xhe=n(xke,"SPAN",{});var Bst=s(xhe);Wlr=r(Bst,"TFAutoModelForTableQuestionAnswering"),Bst.forEach(t),xke.forEach(t),M9e=i(d),Fr=n(d,"DIV",{class:!0});var Vl=s(Fr);m(Rw.$$.fragment,Vl),Qlr=i(Vl),wc=n(Vl,"P",{});var oV=s(wc);Hlr=r(oV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Rhe=n(oV,"CODE",{});var kst=s(Rhe);Ulr=r(kst,"from_pretrained()"),kst.forEach(t),Jlr=r(oV,"class method or the "),She=n(oV,"CODE",{});var xst=s(She);Ylr=r(xst,"from_config()"),xst.forEach(t),Klr=r(oV,`class
method.`),oV.forEach(t),Zlr=i(Vl),Sw=n(Vl,"P",{});var Rke=s(Sw);eir=r(Rke,"This class cannot be instantiated directly using "),Phe=n(Rke,"CODE",{});var Rst=s(Phe);oir=r(Rst,"__init__()"),Rst.forEach(t),rir=r(Rke," (throws an error)."),Rke.forEach(t),tir=i(Vl),ht=n(Vl,"DIV",{class:!0});var Wl=s(ht);m(Pw.$$.fragment,Wl),air=i(Wl),$he=n(Wl,"P",{});var Sst=s($he);nir=r(Sst,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Sst.forEach(t),sir=i(Wl),Ac=n(Wl,"P",{});var rV=s(Ac);lir=r(rV,`Note:
Loading a model from its configuration file does `),Ihe=n(rV,"STRONG",{});var Pst=s(Ihe);iir=r(Pst,"not"),Pst.forEach(t),dir=r(rV,` load the model weights. It only affects the
model\u2019s configuration. Use `),jhe=n(rV,"CODE",{});var $st=s(jhe);cir=r($st,"from_pretrained()"),$st.forEach(t),fir=r(rV,"to load the model weights."),rV.forEach(t),mir=i(Wl),Nhe=n(Wl,"P",{});var Ist=s(Nhe);gir=r(Ist,"Examples:"),Ist.forEach(t),hir=i(Wl),m($w.$$.fragment,Wl),Wl.forEach(t),pir=i(Vl),Fo=n(Vl,"DIV",{class:!0});var ba=s(Fo);m(Iw.$$.fragment,ba),_ir=i(ba),Dhe=n(ba,"P",{});var jst=s(Dhe);uir=r(jst,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jst.forEach(t),bir=i(ba),_n=n(ba,"P",{});var jC=s(_n);vir=r(jC,"The model class to instantiate is selected based on the "),qhe=n(jC,"CODE",{});var Nst=s(qhe);Tir=r(Nst,"model_type"),Nst.forEach(t),Fir=r(jC,` property of the config object (either
passed as an argument or loaded from `),Ghe=n(jC,"CODE",{});var Dst=s(Ghe);Cir=r(Dst,"pretrained_model_name_or_path"),Dst.forEach(t),Mir=r(jC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=n(jC,"CODE",{});var qst=s(Ohe);Eir=r(qst,"pretrained_model_name_or_path"),qst.forEach(t),yir=r(jC,":"),jC.forEach(t),wir=i(ba),Xhe=n(ba,"UL",{});var Gst=s(Xhe);p7=n(Gst,"LI",{});var kAe=s(p7);zhe=n(kAe,"STRONG",{});var Ost=s(zhe);Air=r(Ost,"tapas"),Ost.forEach(t),Lir=r(kAe," \u2014 "),_G=n(kAe,"A",{href:!0});var Xst=s(_G);Bir=r(Xst,"TFTapasForQuestionAnswering"),Xst.forEach(t),kir=r(kAe," (TAPAS model)"),kAe.forEach(t),Gst.forEach(t),xir=i(ba),Vhe=n(ba,"P",{});var zst=s(Vhe);Rir=r(zst,"Examples:"),zst.forEach(t),Sir=i(ba),m(jw.$$.fragment,ba),ba.forEach(t),Vl.forEach(t),E9e=i(d),Lc=n(d,"H2",{class:!0});var Ske=s(Lc);_7=n(Ske,"A",{id:!0,class:!0,href:!0});var Vst=s(_7);Whe=n(Vst,"SPAN",{});var Wst=s(Whe);m(Nw.$$.fragment,Wst),Wst.forEach(t),Vst.forEach(t),Pir=i(Ske),Qhe=n(Ske,"SPAN",{});var Qst=s(Qhe);$ir=r(Qst,"TFAutoModelForTokenClassification"),Qst.forEach(t),Ske.forEach(t),y9e=i(d),Cr=n(d,"DIV",{class:!0});var Ql=s(Cr);m(Dw.$$.fragment,Ql),Iir=i(Ql),Bc=n(Ql,"P",{});var tV=s(Bc);jir=r(tV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Hhe=n(tV,"CODE",{});var Hst=s(Hhe);Nir=r(Hst,"from_pretrained()"),Hst.forEach(t),Dir=r(tV,"class method or the "),Uhe=n(tV,"CODE",{});var Ust=s(Uhe);qir=r(Ust,"from_config()"),Ust.forEach(t),Gir=r(tV,`class
method.`),tV.forEach(t),Oir=i(Ql),qw=n(Ql,"P",{});var Pke=s(qw);Xir=r(Pke,"This class cannot be instantiated directly using "),Jhe=n(Pke,"CODE",{});var Jst=s(Jhe);zir=r(Jst,"__init__()"),Jst.forEach(t),Vir=r(Pke," (throws an error)."),Pke.forEach(t),Wir=i(Ql),pt=n(Ql,"DIV",{class:!0});var Hl=s(pt);m(Gw.$$.fragment,Hl),Qir=i(Hl),Yhe=n(Hl,"P",{});var Yst=s(Yhe);Hir=r(Yst,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Yst.forEach(t),Uir=i(Hl),kc=n(Hl,"P",{});var aV=s(kc);Jir=r(aV,`Note:
Loading a model from its configuration file does `),Khe=n(aV,"STRONG",{});var Kst=s(Khe);Yir=r(Kst,"not"),Kst.forEach(t),Kir=r(aV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zhe=n(aV,"CODE",{});var Zst=s(Zhe);Zir=r(Zst,"from_pretrained()"),Zst.forEach(t),edr=r(aV,"to load the model weights."),aV.forEach(t),odr=i(Hl),epe=n(Hl,"P",{});var elt=s(epe);rdr=r(elt,"Examples:"),elt.forEach(t),tdr=i(Hl),m(Ow.$$.fragment,Hl),Hl.forEach(t),adr=i(Ql),Co=n(Ql,"DIV",{class:!0});var va=s(Co);m(Xw.$$.fragment,va),ndr=i(va),ope=n(va,"P",{});var olt=s(ope);sdr=r(olt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),olt.forEach(t),ldr=i(va),un=n(va,"P",{});var NC=s(un);idr=r(NC,"The model class to instantiate is selected based on the "),rpe=n(NC,"CODE",{});var rlt=s(rpe);ddr=r(rlt,"model_type"),rlt.forEach(t),cdr=r(NC,` property of the config object (either
passed as an argument or loaded from `),tpe=n(NC,"CODE",{});var tlt=s(tpe);fdr=r(tlt,"pretrained_model_name_or_path"),tlt.forEach(t),mdr=r(NC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=n(NC,"CODE",{});var alt=s(ape);gdr=r(alt,"pretrained_model_name_or_path"),alt.forEach(t),hdr=r(NC,":"),NC.forEach(t),pdr=i(va),K=n(va,"UL",{});var oe=s(K);u7=n(oe,"LI",{});var xAe=s(u7);npe=n(xAe,"STRONG",{});var nlt=s(npe);_dr=r(nlt,"albert"),nlt.forEach(t),udr=r(xAe," \u2014 "),uG=n(xAe,"A",{href:!0});var slt=s(uG);bdr=r(slt,"TFAlbertForTokenClassification"),slt.forEach(t),vdr=r(xAe," (ALBERT model)"),xAe.forEach(t),Tdr=i(oe),b7=n(oe,"LI",{});var RAe=s(b7);spe=n(RAe,"STRONG",{});var llt=s(spe);Fdr=r(llt,"bert"),llt.forEach(t),Cdr=r(RAe," \u2014 "),bG=n(RAe,"A",{href:!0});var ilt=s(bG);Mdr=r(ilt,"TFBertForTokenClassification"),ilt.forEach(t),Edr=r(RAe," (BERT model)"),RAe.forEach(t),ydr=i(oe),v7=n(oe,"LI",{});var SAe=s(v7);lpe=n(SAe,"STRONG",{});var dlt=s(lpe);wdr=r(dlt,"camembert"),dlt.forEach(t),Adr=r(SAe," \u2014 "),vG=n(SAe,"A",{href:!0});var clt=s(vG);Ldr=r(clt,"TFCamembertForTokenClassification"),clt.forEach(t),Bdr=r(SAe," (CamemBERT model)"),SAe.forEach(t),kdr=i(oe),T7=n(oe,"LI",{});var PAe=s(T7);ipe=n(PAe,"STRONG",{});var flt=s(ipe);xdr=r(flt,"convbert"),flt.forEach(t),Rdr=r(PAe," \u2014 "),TG=n(PAe,"A",{href:!0});var mlt=s(TG);Sdr=r(mlt,"TFConvBertForTokenClassification"),mlt.forEach(t),Pdr=r(PAe," (ConvBERT model)"),PAe.forEach(t),$dr=i(oe),F7=n(oe,"LI",{});var $Ae=s(F7);dpe=n($Ae,"STRONG",{});var glt=s(dpe);Idr=r(glt,"deberta"),glt.forEach(t),jdr=r($Ae," \u2014 "),FG=n($Ae,"A",{href:!0});var hlt=s(FG);Ndr=r(hlt,"TFDebertaForTokenClassification"),hlt.forEach(t),Ddr=r($Ae," (DeBERTa model)"),$Ae.forEach(t),qdr=i(oe),C7=n(oe,"LI",{});var IAe=s(C7);cpe=n(IAe,"STRONG",{});var plt=s(cpe);Gdr=r(plt,"deberta-v2"),plt.forEach(t),Odr=r(IAe," \u2014 "),CG=n(IAe,"A",{href:!0});var _lt=s(CG);Xdr=r(_lt,"TFDebertaV2ForTokenClassification"),_lt.forEach(t),zdr=r(IAe," (DeBERTa-v2 model)"),IAe.forEach(t),Vdr=i(oe),M7=n(oe,"LI",{});var jAe=s(M7);fpe=n(jAe,"STRONG",{});var ult=s(fpe);Wdr=r(ult,"distilbert"),ult.forEach(t),Qdr=r(jAe," \u2014 "),MG=n(jAe,"A",{href:!0});var blt=s(MG);Hdr=r(blt,"TFDistilBertForTokenClassification"),blt.forEach(t),Udr=r(jAe," (DistilBERT model)"),jAe.forEach(t),Jdr=i(oe),E7=n(oe,"LI",{});var NAe=s(E7);mpe=n(NAe,"STRONG",{});var vlt=s(mpe);Ydr=r(vlt,"electra"),vlt.forEach(t),Kdr=r(NAe," \u2014 "),EG=n(NAe,"A",{href:!0});var Tlt=s(EG);Zdr=r(Tlt,"TFElectraForTokenClassification"),Tlt.forEach(t),ecr=r(NAe," (ELECTRA model)"),NAe.forEach(t),ocr=i(oe),y7=n(oe,"LI",{});var DAe=s(y7);gpe=n(DAe,"STRONG",{});var Flt=s(gpe);rcr=r(Flt,"flaubert"),Flt.forEach(t),tcr=r(DAe," \u2014 "),yG=n(DAe,"A",{href:!0});var Clt=s(yG);acr=r(Clt,"TFFlaubertForTokenClassification"),Clt.forEach(t),ncr=r(DAe," (FlauBERT model)"),DAe.forEach(t),scr=i(oe),w7=n(oe,"LI",{});var qAe=s(w7);hpe=n(qAe,"STRONG",{});var Mlt=s(hpe);lcr=r(Mlt,"funnel"),Mlt.forEach(t),icr=r(qAe," \u2014 "),wG=n(qAe,"A",{href:!0});var Elt=s(wG);dcr=r(Elt,"TFFunnelForTokenClassification"),Elt.forEach(t),ccr=r(qAe," (Funnel Transformer model)"),qAe.forEach(t),fcr=i(oe),A7=n(oe,"LI",{});var GAe=s(A7);ppe=n(GAe,"STRONG",{});var ylt=s(ppe);mcr=r(ylt,"layoutlm"),ylt.forEach(t),gcr=r(GAe," \u2014 "),AG=n(GAe,"A",{href:!0});var wlt=s(AG);hcr=r(wlt,"TFLayoutLMForTokenClassification"),wlt.forEach(t),pcr=r(GAe," (LayoutLM model)"),GAe.forEach(t),_cr=i(oe),L7=n(oe,"LI",{});var OAe=s(L7);_pe=n(OAe,"STRONG",{});var Alt=s(_pe);ucr=r(Alt,"longformer"),Alt.forEach(t),bcr=r(OAe," \u2014 "),LG=n(OAe,"A",{href:!0});var Llt=s(LG);vcr=r(Llt,"TFLongformerForTokenClassification"),Llt.forEach(t),Tcr=r(OAe," (Longformer model)"),OAe.forEach(t),Fcr=i(oe),B7=n(oe,"LI",{});var XAe=s(B7);upe=n(XAe,"STRONG",{});var Blt=s(upe);Ccr=r(Blt,"mobilebert"),Blt.forEach(t),Mcr=r(XAe," \u2014 "),BG=n(XAe,"A",{href:!0});var klt=s(BG);Ecr=r(klt,"TFMobileBertForTokenClassification"),klt.forEach(t),ycr=r(XAe," (MobileBERT model)"),XAe.forEach(t),wcr=i(oe),k7=n(oe,"LI",{});var zAe=s(k7);bpe=n(zAe,"STRONG",{});var xlt=s(bpe);Acr=r(xlt,"mpnet"),xlt.forEach(t),Lcr=r(zAe," \u2014 "),kG=n(zAe,"A",{href:!0});var Rlt=s(kG);Bcr=r(Rlt,"TFMPNetForTokenClassification"),Rlt.forEach(t),kcr=r(zAe," (MPNet model)"),zAe.forEach(t),xcr=i(oe),x7=n(oe,"LI",{});var VAe=s(x7);vpe=n(VAe,"STRONG",{});var Slt=s(vpe);Rcr=r(Slt,"rembert"),Slt.forEach(t),Scr=r(VAe," \u2014 "),xG=n(VAe,"A",{href:!0});var Plt=s(xG);Pcr=r(Plt,"TFRemBertForTokenClassification"),Plt.forEach(t),$cr=r(VAe," (RemBERT model)"),VAe.forEach(t),Icr=i(oe),R7=n(oe,"LI",{});var WAe=s(R7);Tpe=n(WAe,"STRONG",{});var $lt=s(Tpe);jcr=r($lt,"roberta"),$lt.forEach(t),Ncr=r(WAe," \u2014 "),RG=n(WAe,"A",{href:!0});var Ilt=s(RG);Dcr=r(Ilt,"TFRobertaForTokenClassification"),Ilt.forEach(t),qcr=r(WAe," (RoBERTa model)"),WAe.forEach(t),Gcr=i(oe),S7=n(oe,"LI",{});var QAe=s(S7);Fpe=n(QAe,"STRONG",{});var jlt=s(Fpe);Ocr=r(jlt,"roformer"),jlt.forEach(t),Xcr=r(QAe," \u2014 "),SG=n(QAe,"A",{href:!0});var Nlt=s(SG);zcr=r(Nlt,"TFRoFormerForTokenClassification"),Nlt.forEach(t),Vcr=r(QAe," (RoFormer model)"),QAe.forEach(t),Wcr=i(oe),P7=n(oe,"LI",{});var HAe=s(P7);Cpe=n(HAe,"STRONG",{});var Dlt=s(Cpe);Qcr=r(Dlt,"xlm"),Dlt.forEach(t),Hcr=r(HAe," \u2014 "),PG=n(HAe,"A",{href:!0});var qlt=s(PG);Ucr=r(qlt,"TFXLMForTokenClassification"),qlt.forEach(t),Jcr=r(HAe," (XLM model)"),HAe.forEach(t),Ycr=i(oe),$7=n(oe,"LI",{});var UAe=s($7);Mpe=n(UAe,"STRONG",{});var Glt=s(Mpe);Kcr=r(Glt,"xlm-roberta"),Glt.forEach(t),Zcr=r(UAe," \u2014 "),$G=n(UAe,"A",{href:!0});var Olt=s($G);efr=r(Olt,"TFXLMRobertaForTokenClassification"),Olt.forEach(t),ofr=r(UAe," (XLM-RoBERTa model)"),UAe.forEach(t),rfr=i(oe),I7=n(oe,"LI",{});var JAe=s(I7);Epe=n(JAe,"STRONG",{});var Xlt=s(Epe);tfr=r(Xlt,"xlnet"),Xlt.forEach(t),afr=r(JAe," \u2014 "),IG=n(JAe,"A",{href:!0});var zlt=s(IG);nfr=r(zlt,"TFXLNetForTokenClassification"),zlt.forEach(t),sfr=r(JAe," (XLNet model)"),JAe.forEach(t),oe.forEach(t),lfr=i(va),ype=n(va,"P",{});var Vlt=s(ype);ifr=r(Vlt,"Examples:"),Vlt.forEach(t),dfr=i(va),m(zw.$$.fragment,va),va.forEach(t),Ql.forEach(t),w9e=i(d),xc=n(d,"H2",{class:!0});var $ke=s(xc);j7=n($ke,"A",{id:!0,class:!0,href:!0});var Wlt=s(j7);wpe=n(Wlt,"SPAN",{});var Qlt=s(wpe);m(Vw.$$.fragment,Qlt),Qlt.forEach(t),Wlt.forEach(t),cfr=i($ke),Ape=n($ke,"SPAN",{});var Hlt=s(Ape);ffr=r(Hlt,"TFAutoModelForQuestionAnswering"),Hlt.forEach(t),$ke.forEach(t),A9e=i(d),Mr=n(d,"DIV",{class:!0});var Ul=s(Mr);m(Ww.$$.fragment,Ul),mfr=i(Ul),Rc=n(Ul,"P",{});var nV=s(Rc);gfr=r(nV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lpe=n(nV,"CODE",{});var Ult=s(Lpe);hfr=r(Ult,"from_pretrained()"),Ult.forEach(t),pfr=r(nV,"class method or the "),Bpe=n(nV,"CODE",{});var Jlt=s(Bpe);_fr=r(Jlt,"from_config()"),Jlt.forEach(t),ufr=r(nV,`class
method.`),nV.forEach(t),bfr=i(Ul),Qw=n(Ul,"P",{});var Ike=s(Qw);vfr=r(Ike,"This class cannot be instantiated directly using "),kpe=n(Ike,"CODE",{});var Ylt=s(kpe);Tfr=r(Ylt,"__init__()"),Ylt.forEach(t),Ffr=r(Ike," (throws an error)."),Ike.forEach(t),Cfr=i(Ul),_t=n(Ul,"DIV",{class:!0});var Jl=s(_t);m(Hw.$$.fragment,Jl),Mfr=i(Jl),xpe=n(Jl,"P",{});var Klt=s(xpe);Efr=r(Klt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Klt.forEach(t),yfr=i(Jl),Sc=n(Jl,"P",{});var sV=s(Sc);wfr=r(sV,`Note:
Loading a model from its configuration file does `),Rpe=n(sV,"STRONG",{});var Zlt=s(Rpe);Afr=r(Zlt,"not"),Zlt.forEach(t),Lfr=r(sV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Spe=n(sV,"CODE",{});var eit=s(Spe);Bfr=r(eit,"from_pretrained()"),eit.forEach(t),kfr=r(sV,"to load the model weights."),sV.forEach(t),xfr=i(Jl),Ppe=n(Jl,"P",{});var oit=s(Ppe);Rfr=r(oit,"Examples:"),oit.forEach(t),Sfr=i(Jl),m(Uw.$$.fragment,Jl),Jl.forEach(t),Pfr=i(Ul),Mo=n(Ul,"DIV",{class:!0});var Ta=s(Mo);m(Jw.$$.fragment,Ta),$fr=i(Ta),$pe=n(Ta,"P",{});var rit=s($pe);Ifr=r(rit,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rit.forEach(t),jfr=i(Ta),bn=n(Ta,"P",{});var DC=s(bn);Nfr=r(DC,"The model class to instantiate is selected based on the "),Ipe=n(DC,"CODE",{});var tit=s(Ipe);Dfr=r(tit,"model_type"),tit.forEach(t),qfr=r(DC,` property of the config object (either
passed as an argument or loaded from `),jpe=n(DC,"CODE",{});var ait=s(jpe);Gfr=r(ait,"pretrained_model_name_or_path"),ait.forEach(t),Ofr=r(DC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=n(DC,"CODE",{});var nit=s(Npe);Xfr=r(nit,"pretrained_model_name_or_path"),nit.forEach(t),zfr=r(DC,":"),DC.forEach(t),Vfr=i(Ta),Z=n(Ta,"UL",{});var re=s(Z);N7=n(re,"LI",{});var YAe=s(N7);Dpe=n(YAe,"STRONG",{});var sit=s(Dpe);Wfr=r(sit,"albert"),sit.forEach(t),Qfr=r(YAe," \u2014 "),jG=n(YAe,"A",{href:!0});var lit=s(jG);Hfr=r(lit,"TFAlbertForQuestionAnswering"),lit.forEach(t),Ufr=r(YAe," (ALBERT model)"),YAe.forEach(t),Jfr=i(re),D7=n(re,"LI",{});var KAe=s(D7);qpe=n(KAe,"STRONG",{});var iit=s(qpe);Yfr=r(iit,"bert"),iit.forEach(t),Kfr=r(KAe," \u2014 "),NG=n(KAe,"A",{href:!0});var dit=s(NG);Zfr=r(dit,"TFBertForQuestionAnswering"),dit.forEach(t),emr=r(KAe," (BERT model)"),KAe.forEach(t),omr=i(re),q7=n(re,"LI",{});var ZAe=s(q7);Gpe=n(ZAe,"STRONG",{});var cit=s(Gpe);rmr=r(cit,"camembert"),cit.forEach(t),tmr=r(ZAe," \u2014 "),DG=n(ZAe,"A",{href:!0});var fit=s(DG);amr=r(fit,"TFCamembertForQuestionAnswering"),fit.forEach(t),nmr=r(ZAe," (CamemBERT model)"),ZAe.forEach(t),smr=i(re),G7=n(re,"LI",{});var e6e=s(G7);Ope=n(e6e,"STRONG",{});var mit=s(Ope);lmr=r(mit,"convbert"),mit.forEach(t),imr=r(e6e," \u2014 "),qG=n(e6e,"A",{href:!0});var git=s(qG);dmr=r(git,"TFConvBertForQuestionAnswering"),git.forEach(t),cmr=r(e6e," (ConvBERT model)"),e6e.forEach(t),fmr=i(re),O7=n(re,"LI",{});var o6e=s(O7);Xpe=n(o6e,"STRONG",{});var hit=s(Xpe);mmr=r(hit,"deberta"),hit.forEach(t),gmr=r(o6e," \u2014 "),GG=n(o6e,"A",{href:!0});var pit=s(GG);hmr=r(pit,"TFDebertaForQuestionAnswering"),pit.forEach(t),pmr=r(o6e," (DeBERTa model)"),o6e.forEach(t),_mr=i(re),X7=n(re,"LI",{});var r6e=s(X7);zpe=n(r6e,"STRONG",{});var _it=s(zpe);umr=r(_it,"deberta-v2"),_it.forEach(t),bmr=r(r6e," \u2014 "),OG=n(r6e,"A",{href:!0});var uit=s(OG);vmr=r(uit,"TFDebertaV2ForQuestionAnswering"),uit.forEach(t),Tmr=r(r6e," (DeBERTa-v2 model)"),r6e.forEach(t),Fmr=i(re),z7=n(re,"LI",{});var t6e=s(z7);Vpe=n(t6e,"STRONG",{});var bit=s(Vpe);Cmr=r(bit,"distilbert"),bit.forEach(t),Mmr=r(t6e," \u2014 "),XG=n(t6e,"A",{href:!0});var vit=s(XG);Emr=r(vit,"TFDistilBertForQuestionAnswering"),vit.forEach(t),ymr=r(t6e," (DistilBERT model)"),t6e.forEach(t),wmr=i(re),V7=n(re,"LI",{});var a6e=s(V7);Wpe=n(a6e,"STRONG",{});var Tit=s(Wpe);Amr=r(Tit,"electra"),Tit.forEach(t),Lmr=r(a6e," \u2014 "),zG=n(a6e,"A",{href:!0});var Fit=s(zG);Bmr=r(Fit,"TFElectraForQuestionAnswering"),Fit.forEach(t),kmr=r(a6e," (ELECTRA model)"),a6e.forEach(t),xmr=i(re),W7=n(re,"LI",{});var n6e=s(W7);Qpe=n(n6e,"STRONG",{});var Cit=s(Qpe);Rmr=r(Cit,"flaubert"),Cit.forEach(t),Smr=r(n6e," \u2014 "),VG=n(n6e,"A",{href:!0});var Mit=s(VG);Pmr=r(Mit,"TFFlaubertForQuestionAnsweringSimple"),Mit.forEach(t),$mr=r(n6e," (FlauBERT model)"),n6e.forEach(t),Imr=i(re),Q7=n(re,"LI",{});var s6e=s(Q7);Hpe=n(s6e,"STRONG",{});var Eit=s(Hpe);jmr=r(Eit,"funnel"),Eit.forEach(t),Nmr=r(s6e," \u2014 "),WG=n(s6e,"A",{href:!0});var yit=s(WG);Dmr=r(yit,"TFFunnelForQuestionAnswering"),yit.forEach(t),qmr=r(s6e," (Funnel Transformer model)"),s6e.forEach(t),Gmr=i(re),H7=n(re,"LI",{});var l6e=s(H7);Upe=n(l6e,"STRONG",{});var wit=s(Upe);Omr=r(wit,"longformer"),wit.forEach(t),Xmr=r(l6e," \u2014 "),QG=n(l6e,"A",{href:!0});var Ait=s(QG);zmr=r(Ait,"TFLongformerForQuestionAnswering"),Ait.forEach(t),Vmr=r(l6e," (Longformer model)"),l6e.forEach(t),Wmr=i(re),U7=n(re,"LI",{});var i6e=s(U7);Jpe=n(i6e,"STRONG",{});var Lit=s(Jpe);Qmr=r(Lit,"mobilebert"),Lit.forEach(t),Hmr=r(i6e," \u2014 "),HG=n(i6e,"A",{href:!0});var Bit=s(HG);Umr=r(Bit,"TFMobileBertForQuestionAnswering"),Bit.forEach(t),Jmr=r(i6e," (MobileBERT model)"),i6e.forEach(t),Ymr=i(re),J7=n(re,"LI",{});var d6e=s(J7);Ype=n(d6e,"STRONG",{});var kit=s(Ype);Kmr=r(kit,"mpnet"),kit.forEach(t),Zmr=r(d6e," \u2014 "),UG=n(d6e,"A",{href:!0});var xit=s(UG);egr=r(xit,"TFMPNetForQuestionAnswering"),xit.forEach(t),ogr=r(d6e," (MPNet model)"),d6e.forEach(t),rgr=i(re),Y7=n(re,"LI",{});var c6e=s(Y7);Kpe=n(c6e,"STRONG",{});var Rit=s(Kpe);tgr=r(Rit,"rembert"),Rit.forEach(t),agr=r(c6e," \u2014 "),JG=n(c6e,"A",{href:!0});var Sit=s(JG);ngr=r(Sit,"TFRemBertForQuestionAnswering"),Sit.forEach(t),sgr=r(c6e," (RemBERT model)"),c6e.forEach(t),lgr=i(re),K7=n(re,"LI",{});var f6e=s(K7);Zpe=n(f6e,"STRONG",{});var Pit=s(Zpe);igr=r(Pit,"roberta"),Pit.forEach(t),dgr=r(f6e," \u2014 "),YG=n(f6e,"A",{href:!0});var $it=s(YG);cgr=r($it,"TFRobertaForQuestionAnswering"),$it.forEach(t),fgr=r(f6e," (RoBERTa model)"),f6e.forEach(t),mgr=i(re),Z7=n(re,"LI",{});var m6e=s(Z7);e_e=n(m6e,"STRONG",{});var Iit=s(e_e);ggr=r(Iit,"roformer"),Iit.forEach(t),hgr=r(m6e," \u2014 "),KG=n(m6e,"A",{href:!0});var jit=s(KG);pgr=r(jit,"TFRoFormerForQuestionAnswering"),jit.forEach(t),_gr=r(m6e," (RoFormer model)"),m6e.forEach(t),ugr=i(re),e8=n(re,"LI",{});var g6e=s(e8);o_e=n(g6e,"STRONG",{});var Nit=s(o_e);bgr=r(Nit,"xlm"),Nit.forEach(t),vgr=r(g6e," \u2014 "),ZG=n(g6e,"A",{href:!0});var Dit=s(ZG);Tgr=r(Dit,"TFXLMForQuestionAnsweringSimple"),Dit.forEach(t),Fgr=r(g6e," (XLM model)"),g6e.forEach(t),Cgr=i(re),o8=n(re,"LI",{});var h6e=s(o8);r_e=n(h6e,"STRONG",{});var qit=s(r_e);Mgr=r(qit,"xlm-roberta"),qit.forEach(t),Egr=r(h6e," \u2014 "),eO=n(h6e,"A",{href:!0});var Git=s(eO);ygr=r(Git,"TFXLMRobertaForQuestionAnswering"),Git.forEach(t),wgr=r(h6e," (XLM-RoBERTa model)"),h6e.forEach(t),Agr=i(re),r8=n(re,"LI",{});var p6e=s(r8);t_e=n(p6e,"STRONG",{});var Oit=s(t_e);Lgr=r(Oit,"xlnet"),Oit.forEach(t),Bgr=r(p6e," \u2014 "),oO=n(p6e,"A",{href:!0});var Xit=s(oO);kgr=r(Xit,"TFXLNetForQuestionAnsweringSimple"),Xit.forEach(t),xgr=r(p6e," (XLNet model)"),p6e.forEach(t),re.forEach(t),Rgr=i(Ta),a_e=n(Ta,"P",{});var zit=s(a_e);Sgr=r(zit,"Examples:"),zit.forEach(t),Pgr=i(Ta),m(Yw.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),L9e=i(d),Pc=n(d,"H2",{class:!0});var jke=s(Pc);t8=n(jke,"A",{id:!0,class:!0,href:!0});var Vit=s(t8);n_e=n(Vit,"SPAN",{});var Wit=s(n_e);m(Kw.$$.fragment,Wit),Wit.forEach(t),Vit.forEach(t),$gr=i(jke),s_e=n(jke,"SPAN",{});var Qit=s(s_e);Igr=r(Qit,"TFAutoModelForVision2Seq"),Qit.forEach(t),jke.forEach(t),B9e=i(d),Er=n(d,"DIV",{class:!0});var Yl=s(Er);m(Zw.$$.fragment,Yl),jgr=i(Yl),$c=n(Yl,"P",{});var lV=s($c);Ngr=r(lV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),l_e=n(lV,"CODE",{});var Hit=s(l_e);Dgr=r(Hit,"from_pretrained()"),Hit.forEach(t),qgr=r(lV,"class method or the "),i_e=n(lV,"CODE",{});var Uit=s(i_e);Ggr=r(Uit,"from_config()"),Uit.forEach(t),Ogr=r(lV,`class
method.`),lV.forEach(t),Xgr=i(Yl),eA=n(Yl,"P",{});var Nke=s(eA);zgr=r(Nke,"This class cannot be instantiated directly using "),d_e=n(Nke,"CODE",{});var Jit=s(d_e);Vgr=r(Jit,"__init__()"),Jit.forEach(t),Wgr=r(Nke," (throws an error)."),Nke.forEach(t),Qgr=i(Yl),ut=n(Yl,"DIV",{class:!0});var Kl=s(ut);m(oA.$$.fragment,Kl),Hgr=i(Kl),c_e=n(Kl,"P",{});var Yit=s(c_e);Ugr=r(Yit,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Yit.forEach(t),Jgr=i(Kl),Ic=n(Kl,"P",{});var iV=s(Ic);Ygr=r(iV,`Note:
Loading a model from its configuration file does `),f_e=n(iV,"STRONG",{});var Kit=s(f_e);Kgr=r(Kit,"not"),Kit.forEach(t),Zgr=r(iV,` load the model weights. It only affects the
model\u2019s configuration. Use `),m_e=n(iV,"CODE",{});var Zit=s(m_e);ehr=r(Zit,"from_pretrained()"),Zit.forEach(t),ohr=r(iV,"to load the model weights."),iV.forEach(t),rhr=i(Kl),g_e=n(Kl,"P",{});var edt=s(g_e);thr=r(edt,"Examples:"),edt.forEach(t),ahr=i(Kl),m(rA.$$.fragment,Kl),Kl.forEach(t),nhr=i(Yl),Eo=n(Yl,"DIV",{class:!0});var Fa=s(Eo);m(tA.$$.fragment,Fa),shr=i(Fa),h_e=n(Fa,"P",{});var odt=s(h_e);lhr=r(odt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),odt.forEach(t),ihr=i(Fa),vn=n(Fa,"P",{});var qC=s(vn);dhr=r(qC,"The model class to instantiate is selected based on the "),p_e=n(qC,"CODE",{});var rdt=s(p_e);chr=r(rdt,"model_type"),rdt.forEach(t),fhr=r(qC,` property of the config object (either
passed as an argument or loaded from `),__e=n(qC,"CODE",{});var tdt=s(__e);mhr=r(tdt,"pretrained_model_name_or_path"),tdt.forEach(t),ghr=r(qC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=n(qC,"CODE",{});var adt=s(u_e);hhr=r(adt,"pretrained_model_name_or_path"),adt.forEach(t),phr=r(qC,":"),qC.forEach(t),_hr=i(Fa),b_e=n(Fa,"UL",{});var ndt=s(b_e);a8=n(ndt,"LI",{});var _6e=s(a8);v_e=n(_6e,"STRONG",{});var sdt=s(v_e);uhr=r(sdt,"vision-encoder-decoder"),sdt.forEach(t),bhr=r(_6e," \u2014 "),rO=n(_6e,"A",{href:!0});var ldt=s(rO);vhr=r(ldt,"TFVisionEncoderDecoderModel"),ldt.forEach(t),Thr=r(_6e," (Vision Encoder decoder model)"),_6e.forEach(t),ndt.forEach(t),Fhr=i(Fa),T_e=n(Fa,"P",{});var idt=s(T_e);Chr=r(idt,"Examples:"),idt.forEach(t),Mhr=i(Fa),m(aA.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),k9e=i(d),jc=n(d,"H2",{class:!0});var Dke=s(jc);n8=n(Dke,"A",{id:!0,class:!0,href:!0});var ddt=s(n8);F_e=n(ddt,"SPAN",{});var cdt=s(F_e);m(nA.$$.fragment,cdt),cdt.forEach(t),ddt.forEach(t),Ehr=i(Dke),C_e=n(Dke,"SPAN",{});var fdt=s(C_e);yhr=r(fdt,"TFAutoModelForSpeechSeq2Seq"),fdt.forEach(t),Dke.forEach(t),x9e=i(d),yr=n(d,"DIV",{class:!0});var Zl=s(yr);m(sA.$$.fragment,Zl),whr=i(Zl),Nc=n(Zl,"P",{});var dV=s(Nc);Ahr=r(dV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),M_e=n(dV,"CODE",{});var mdt=s(M_e);Lhr=r(mdt,"from_pretrained()"),mdt.forEach(t),Bhr=r(dV,"class method or the "),E_e=n(dV,"CODE",{});var gdt=s(E_e);khr=r(gdt,"from_config()"),gdt.forEach(t),xhr=r(dV,`class
method.`),dV.forEach(t),Rhr=i(Zl),lA=n(Zl,"P",{});var qke=s(lA);Shr=r(qke,"This class cannot be instantiated directly using "),y_e=n(qke,"CODE",{});var hdt=s(y_e);Phr=r(hdt,"__init__()"),hdt.forEach(t),$hr=r(qke," (throws an error)."),qke.forEach(t),Ihr=i(Zl),bt=n(Zl,"DIV",{class:!0});var ei=s(bt);m(iA.$$.fragment,ei),jhr=i(ei),w_e=n(ei,"P",{});var pdt=s(w_e);Nhr=r(pdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),pdt.forEach(t),Dhr=i(ei),Dc=n(ei,"P",{});var cV=s(Dc);qhr=r(cV,`Note:
Loading a model from its configuration file does `),A_e=n(cV,"STRONG",{});var _dt=s(A_e);Ghr=r(_dt,"not"),_dt.forEach(t),Ohr=r(cV,` load the model weights. It only affects the
model\u2019s configuration. Use `),L_e=n(cV,"CODE",{});var udt=s(L_e);Xhr=r(udt,"from_pretrained()"),udt.forEach(t),zhr=r(cV,"to load the model weights."),cV.forEach(t),Vhr=i(ei),B_e=n(ei,"P",{});var bdt=s(B_e);Whr=r(bdt,"Examples:"),bdt.forEach(t),Qhr=i(ei),m(dA.$$.fragment,ei),ei.forEach(t),Hhr=i(Zl),yo=n(Zl,"DIV",{class:!0});var Ca=s(yo);m(cA.$$.fragment,Ca),Uhr=i(Ca),k_e=n(Ca,"P",{});var vdt=s(k_e);Jhr=r(vdt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vdt.forEach(t),Yhr=i(Ca),Tn=n(Ca,"P",{});var GC=s(Tn);Khr=r(GC,"The model class to instantiate is selected based on the "),x_e=n(GC,"CODE",{});var Tdt=s(x_e);Zhr=r(Tdt,"model_type"),Tdt.forEach(t),epr=r(GC,` property of the config object (either
passed as an argument or loaded from `),R_e=n(GC,"CODE",{});var Fdt=s(R_e);opr=r(Fdt,"pretrained_model_name_or_path"),Fdt.forEach(t),rpr=r(GC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=n(GC,"CODE",{});var Cdt=s(S_e);tpr=r(Cdt,"pretrained_model_name_or_path"),Cdt.forEach(t),apr=r(GC,":"),GC.forEach(t),npr=i(Ca),P_e=n(Ca,"UL",{});var Mdt=s(P_e);s8=n(Mdt,"LI",{});var u6e=s(s8);$_e=n(u6e,"STRONG",{});var Edt=s($_e);spr=r(Edt,"speech_to_text"),Edt.forEach(t),lpr=r(u6e," \u2014 "),tO=n(u6e,"A",{href:!0});var ydt=s(tO);ipr=r(ydt,"TFSpeech2TextForConditionalGeneration"),ydt.forEach(t),dpr=r(u6e," (Speech2Text model)"),u6e.forEach(t),Mdt.forEach(t),cpr=i(Ca),I_e=n(Ca,"P",{});var wdt=s(I_e);fpr=r(wdt,"Examples:"),wdt.forEach(t),mpr=i(Ca),m(fA.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),R9e=i(d),qc=n(d,"H2",{class:!0});var Gke=s(qc);l8=n(Gke,"A",{id:!0,class:!0,href:!0});var Adt=s(l8);j_e=n(Adt,"SPAN",{});var Ldt=s(j_e);m(mA.$$.fragment,Ldt),Ldt.forEach(t),Adt.forEach(t),gpr=i(Gke),N_e=n(Gke,"SPAN",{});var Bdt=s(N_e);hpr=r(Bdt,"FlaxAutoModel"),Bdt.forEach(t),Gke.forEach(t),S9e=i(d),wr=n(d,"DIV",{class:!0});var oi=s(wr);m(gA.$$.fragment,oi),ppr=i(oi),Gc=n(oi,"P",{});var fV=s(Gc);_pr=r(fV,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),D_e=n(fV,"CODE",{});var kdt=s(D_e);upr=r(kdt,"from_pretrained()"),kdt.forEach(t),bpr=r(fV,"class method or the "),q_e=n(fV,"CODE",{});var xdt=s(q_e);vpr=r(xdt,"from_config()"),xdt.forEach(t),Tpr=r(fV,`class
method.`),fV.forEach(t),Fpr=i(oi),hA=n(oi,"P",{});var Oke=s(hA);Cpr=r(Oke,"This class cannot be instantiated directly using "),G_e=n(Oke,"CODE",{});var Rdt=s(G_e);Mpr=r(Rdt,"__init__()"),Rdt.forEach(t),Epr=r(Oke," (throws an error)."),Oke.forEach(t),ypr=i(oi),vt=n(oi,"DIV",{class:!0});var ri=s(vt);m(pA.$$.fragment,ri),wpr=i(ri),O_e=n(ri,"P",{});var Sdt=s(O_e);Apr=r(Sdt,"Instantiates one of the base model classes of the library from a configuration."),Sdt.forEach(t),Lpr=i(ri),Oc=n(ri,"P",{});var mV=s(Oc);Bpr=r(mV,`Note:
Loading a model from its configuration file does `),X_e=n(mV,"STRONG",{});var Pdt=s(X_e);kpr=r(Pdt,"not"),Pdt.forEach(t),xpr=r(mV,` load the model weights. It only affects the
model\u2019s configuration. Use `),z_e=n(mV,"CODE",{});var $dt=s(z_e);Rpr=r($dt,"from_pretrained()"),$dt.forEach(t),Spr=r(mV,"to load the model weights."),mV.forEach(t),Ppr=i(ri),V_e=n(ri,"P",{});var Idt=s(V_e);$pr=r(Idt,"Examples:"),Idt.forEach(t),Ipr=i(ri),m(_A.$$.fragment,ri),ri.forEach(t),jpr=i(oi),wo=n(oi,"DIV",{class:!0});var Ma=s(wo);m(uA.$$.fragment,Ma),Npr=i(Ma),W_e=n(Ma,"P",{});var jdt=s(W_e);Dpr=r(jdt,"Instantiate one of the base model classes of the library from a pretrained model."),jdt.forEach(t),qpr=i(Ma),Fn=n(Ma,"P",{});var OC=s(Fn);Gpr=r(OC,"The model class to instantiate is selected based on the "),Q_e=n(OC,"CODE",{});var Ndt=s(Q_e);Opr=r(Ndt,"model_type"),Ndt.forEach(t),Xpr=r(OC,` property of the config object (either
passed as an argument or loaded from `),H_e=n(OC,"CODE",{});var Ddt=s(H_e);zpr=r(Ddt,"pretrained_model_name_or_path"),Ddt.forEach(t),Vpr=r(OC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=n(OC,"CODE",{});var qdt=s(U_e);Wpr=r(qdt,"pretrained_model_name_or_path"),qdt.forEach(t),Qpr=r(OC,":"),OC.forEach(t),Hpr=i(Ma),V=n(Ma,"UL",{});var Q=s(V);i8=n(Q,"LI",{});var b6e=s(i8);J_e=n(b6e,"STRONG",{});var Gdt=s(J_e);Upr=r(Gdt,"albert"),Gdt.forEach(t),Jpr=r(b6e," \u2014 "),aO=n(b6e,"A",{href:!0});var Odt=s(aO);Ypr=r(Odt,"FlaxAlbertModel"),Odt.forEach(t),Kpr=r(b6e," (ALBERT model)"),b6e.forEach(t),Zpr=i(Q),d8=n(Q,"LI",{});var v6e=s(d8);Y_e=n(v6e,"STRONG",{});var Xdt=s(Y_e);e_r=r(Xdt,"bart"),Xdt.forEach(t),o_r=r(v6e," \u2014 "),nO=n(v6e,"A",{href:!0});var zdt=s(nO);r_r=r(zdt,"FlaxBartModel"),zdt.forEach(t),t_r=r(v6e," (BART model)"),v6e.forEach(t),a_r=i(Q),c8=n(Q,"LI",{});var T6e=s(c8);K_e=n(T6e,"STRONG",{});var Vdt=s(K_e);n_r=r(Vdt,"beit"),Vdt.forEach(t),s_r=r(T6e," \u2014 "),sO=n(T6e,"A",{href:!0});var Wdt=s(sO);l_r=r(Wdt,"FlaxBeitModel"),Wdt.forEach(t),i_r=r(T6e," (BEiT model)"),T6e.forEach(t),d_r=i(Q),f8=n(Q,"LI",{});var F6e=s(f8);Z_e=n(F6e,"STRONG",{});var Qdt=s(Z_e);c_r=r(Qdt,"bert"),Qdt.forEach(t),f_r=r(F6e," \u2014 "),lO=n(F6e,"A",{href:!0});var Hdt=s(lO);m_r=r(Hdt,"FlaxBertModel"),Hdt.forEach(t),g_r=r(F6e," (BERT model)"),F6e.forEach(t),h_r=i(Q),m8=n(Q,"LI",{});var C6e=s(m8);eue=n(C6e,"STRONG",{});var Udt=s(eue);p_r=r(Udt,"big_bird"),Udt.forEach(t),__r=r(C6e," \u2014 "),iO=n(C6e,"A",{href:!0});var Jdt=s(iO);u_r=r(Jdt,"FlaxBigBirdModel"),Jdt.forEach(t),b_r=r(C6e," (BigBird model)"),C6e.forEach(t),v_r=i(Q),g8=n(Q,"LI",{});var M6e=s(g8);oue=n(M6e,"STRONG",{});var Ydt=s(oue);T_r=r(Ydt,"blenderbot"),Ydt.forEach(t),F_r=r(M6e," \u2014 "),dO=n(M6e,"A",{href:!0});var Kdt=s(dO);C_r=r(Kdt,"FlaxBlenderbotModel"),Kdt.forEach(t),M_r=r(M6e," (Blenderbot model)"),M6e.forEach(t),E_r=i(Q),h8=n(Q,"LI",{});var E6e=s(h8);rue=n(E6e,"STRONG",{});var Zdt=s(rue);y_r=r(Zdt,"blenderbot-small"),Zdt.forEach(t),w_r=r(E6e," \u2014 "),cO=n(E6e,"A",{href:!0});var ect=s(cO);A_r=r(ect,"FlaxBlenderbotSmallModel"),ect.forEach(t),L_r=r(E6e," (BlenderbotSmall model)"),E6e.forEach(t),B_r=i(Q),p8=n(Q,"LI",{});var y6e=s(p8);tue=n(y6e,"STRONG",{});var oct=s(tue);k_r=r(oct,"clip"),oct.forEach(t),x_r=r(y6e," \u2014 "),fO=n(y6e,"A",{href:!0});var rct=s(fO);R_r=r(rct,"FlaxCLIPModel"),rct.forEach(t),S_r=r(y6e," (CLIP model)"),y6e.forEach(t),P_r=i(Q),_8=n(Q,"LI",{});var w6e=s(_8);aue=n(w6e,"STRONG",{});var tct=s(aue);$_r=r(tct,"distilbert"),tct.forEach(t),I_r=r(w6e," \u2014 "),mO=n(w6e,"A",{href:!0});var act=s(mO);j_r=r(act,"FlaxDistilBertModel"),act.forEach(t),N_r=r(w6e," (DistilBERT model)"),w6e.forEach(t),D_r=i(Q),u8=n(Q,"LI",{});var A6e=s(u8);nue=n(A6e,"STRONG",{});var nct=s(nue);q_r=r(nct,"electra"),nct.forEach(t),G_r=r(A6e," \u2014 "),gO=n(A6e,"A",{href:!0});var sct=s(gO);O_r=r(sct,"FlaxElectraModel"),sct.forEach(t),X_r=r(A6e," (ELECTRA model)"),A6e.forEach(t),z_r=i(Q),b8=n(Q,"LI",{});var L6e=s(b8);sue=n(L6e,"STRONG",{});var lct=s(sue);V_r=r(lct,"gpt2"),lct.forEach(t),W_r=r(L6e," \u2014 "),hO=n(L6e,"A",{href:!0});var ict=s(hO);Q_r=r(ict,"FlaxGPT2Model"),ict.forEach(t),H_r=r(L6e," (OpenAI GPT-2 model)"),L6e.forEach(t),U_r=i(Q),v8=n(Q,"LI",{});var B6e=s(v8);lue=n(B6e,"STRONG",{});var dct=s(lue);J_r=r(dct,"gpt_neo"),dct.forEach(t),Y_r=r(B6e," \u2014 "),pO=n(B6e,"A",{href:!0});var cct=s(pO);K_r=r(cct,"FlaxGPTNeoModel"),cct.forEach(t),Z_r=r(B6e," (GPT Neo model)"),B6e.forEach(t),eur=i(Q),T8=n(Q,"LI",{});var k6e=s(T8);iue=n(k6e,"STRONG",{});var fct=s(iue);our=r(fct,"gptj"),fct.forEach(t),rur=r(k6e," \u2014 "),_O=n(k6e,"A",{href:!0});var mct=s(_O);tur=r(mct,"FlaxGPTJModel"),mct.forEach(t),aur=r(k6e," (GPT-J model)"),k6e.forEach(t),nur=i(Q),F8=n(Q,"LI",{});var x6e=s(F8);due=n(x6e,"STRONG",{});var gct=s(due);sur=r(gct,"marian"),gct.forEach(t),lur=r(x6e," \u2014 "),uO=n(x6e,"A",{href:!0});var hct=s(uO);iur=r(hct,"FlaxMarianModel"),hct.forEach(t),dur=r(x6e," (Marian model)"),x6e.forEach(t),cur=i(Q),C8=n(Q,"LI",{});var R6e=s(C8);cue=n(R6e,"STRONG",{});var pct=s(cue);fur=r(pct,"mbart"),pct.forEach(t),mur=r(R6e," \u2014 "),bO=n(R6e,"A",{href:!0});var _ct=s(bO);gur=r(_ct,"FlaxMBartModel"),_ct.forEach(t),hur=r(R6e," (mBART model)"),R6e.forEach(t),pur=i(Q),M8=n(Q,"LI",{});var S6e=s(M8);fue=n(S6e,"STRONG",{});var uct=s(fue);_ur=r(uct,"mt5"),uct.forEach(t),uur=r(S6e," \u2014 "),vO=n(S6e,"A",{href:!0});var bct=s(vO);bur=r(bct,"FlaxMT5Model"),bct.forEach(t),vur=r(S6e," (mT5 model)"),S6e.forEach(t),Tur=i(Q),E8=n(Q,"LI",{});var P6e=s(E8);mue=n(P6e,"STRONG",{});var vct=s(mue);Fur=r(vct,"pegasus"),vct.forEach(t),Cur=r(P6e," \u2014 "),TO=n(P6e,"A",{href:!0});var Tct=s(TO);Mur=r(Tct,"FlaxPegasusModel"),Tct.forEach(t),Eur=r(P6e," (Pegasus model)"),P6e.forEach(t),yur=i(Q),y8=n(Q,"LI",{});var $6e=s(y8);gue=n($6e,"STRONG",{});var Fct=s(gue);wur=r(Fct,"roberta"),Fct.forEach(t),Aur=r($6e," \u2014 "),FO=n($6e,"A",{href:!0});var Cct=s(FO);Lur=r(Cct,"FlaxRobertaModel"),Cct.forEach(t),Bur=r($6e," (RoBERTa model)"),$6e.forEach(t),kur=i(Q),w8=n(Q,"LI",{});var I6e=s(w8);hue=n(I6e,"STRONG",{});var Mct=s(hue);xur=r(Mct,"roformer"),Mct.forEach(t),Rur=r(I6e," \u2014 "),CO=n(I6e,"A",{href:!0});var Ect=s(CO);Sur=r(Ect,"FlaxRoFormerModel"),Ect.forEach(t),Pur=r(I6e," (RoFormer model)"),I6e.forEach(t),$ur=i(Q),A8=n(Q,"LI",{});var j6e=s(A8);pue=n(j6e,"STRONG",{});var yct=s(pue);Iur=r(yct,"t5"),yct.forEach(t),jur=r(j6e," \u2014 "),MO=n(j6e,"A",{href:!0});var wct=s(MO);Nur=r(wct,"FlaxT5Model"),wct.forEach(t),Dur=r(j6e," (T5 model)"),j6e.forEach(t),qur=i(Q),L8=n(Q,"LI",{});var N6e=s(L8);_ue=n(N6e,"STRONG",{});var Act=s(_ue);Gur=r(Act,"vision-text-dual-encoder"),Act.forEach(t),Our=r(N6e," \u2014 "),EO=n(N6e,"A",{href:!0});var Lct=s(EO);Xur=r(Lct,"FlaxVisionTextDualEncoderModel"),Lct.forEach(t),zur=r(N6e," (VisionTextDualEncoder model)"),N6e.forEach(t),Vur=i(Q),B8=n(Q,"LI",{});var D6e=s(B8);uue=n(D6e,"STRONG",{});var Bct=s(uue);Wur=r(Bct,"vit"),Bct.forEach(t),Qur=r(D6e," \u2014 "),yO=n(D6e,"A",{href:!0});var kct=s(yO);Hur=r(kct,"FlaxViTModel"),kct.forEach(t),Uur=r(D6e," (ViT model)"),D6e.forEach(t),Jur=i(Q),k8=n(Q,"LI",{});var q6e=s(k8);bue=n(q6e,"STRONG",{});var xct=s(bue);Yur=r(xct,"wav2vec2"),xct.forEach(t),Kur=r(q6e," \u2014 "),wO=n(q6e,"A",{href:!0});var Rct=s(wO);Zur=r(Rct,"FlaxWav2Vec2Model"),Rct.forEach(t),e1r=r(q6e," (Wav2Vec2 model)"),q6e.forEach(t),o1r=i(Q),x8=n(Q,"LI",{});var G6e=s(x8);vue=n(G6e,"STRONG",{});var Sct=s(vue);r1r=r(Sct,"xglm"),Sct.forEach(t),t1r=r(G6e," \u2014 "),AO=n(G6e,"A",{href:!0});var Pct=s(AO);a1r=r(Pct,"FlaxXGLMModel"),Pct.forEach(t),n1r=r(G6e," (XGLM model)"),G6e.forEach(t),Q.forEach(t),s1r=i(Ma),Tue=n(Ma,"P",{});var $ct=s(Tue);l1r=r($ct,"Examples:"),$ct.forEach(t),i1r=i(Ma),m(bA.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),P9e=i(d),Xc=n(d,"H2",{class:!0});var Xke=s(Xc);R8=n(Xke,"A",{id:!0,class:!0,href:!0});var Ict=s(R8);Fue=n(Ict,"SPAN",{});var jct=s(Fue);m(vA.$$.fragment,jct),jct.forEach(t),Ict.forEach(t),d1r=i(Xke),Cue=n(Xke,"SPAN",{});var Nct=s(Cue);c1r=r(Nct,"FlaxAutoModelForCausalLM"),Nct.forEach(t),Xke.forEach(t),$9e=i(d),Ar=n(d,"DIV",{class:!0});var ti=s(Ar);m(TA.$$.fragment,ti),f1r=i(ti),zc=n(ti,"P",{});var gV=s(zc);m1r=r(gV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Mue=n(gV,"CODE",{});var Dct=s(Mue);g1r=r(Dct,"from_pretrained()"),Dct.forEach(t),h1r=r(gV,"class method or the "),Eue=n(gV,"CODE",{});var qct=s(Eue);p1r=r(qct,"from_config()"),qct.forEach(t),_1r=r(gV,`class
method.`),gV.forEach(t),u1r=i(ti),FA=n(ti,"P",{});var zke=s(FA);b1r=r(zke,"This class cannot be instantiated directly using "),yue=n(zke,"CODE",{});var Gct=s(yue);v1r=r(Gct,"__init__()"),Gct.forEach(t),T1r=r(zke," (throws an error)."),zke.forEach(t),F1r=i(ti),Tt=n(ti,"DIV",{class:!0});var ai=s(Tt);m(CA.$$.fragment,ai),C1r=i(ai),wue=n(ai,"P",{});var Oct=s(wue);M1r=r(Oct,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Oct.forEach(t),E1r=i(ai),Vc=n(ai,"P",{});var hV=s(Vc);y1r=r(hV,`Note:
Loading a model from its configuration file does `),Aue=n(hV,"STRONG",{});var Xct=s(Aue);w1r=r(Xct,"not"),Xct.forEach(t),A1r=r(hV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lue=n(hV,"CODE",{});var zct=s(Lue);L1r=r(zct,"from_pretrained()"),zct.forEach(t),B1r=r(hV,"to load the model weights."),hV.forEach(t),k1r=i(ai),Bue=n(ai,"P",{});var Vct=s(Bue);x1r=r(Vct,"Examples:"),Vct.forEach(t),R1r=i(ai),m(MA.$$.fragment,ai),ai.forEach(t),S1r=i(ti),Ao=n(ti,"DIV",{class:!0});var Ea=s(Ao);m(EA.$$.fragment,Ea),P1r=i(Ea),kue=n(Ea,"P",{});var Wct=s(kue);$1r=r(Wct,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wct.forEach(t),I1r=i(Ea),Cn=n(Ea,"P",{});var XC=s(Cn);j1r=r(XC,"The model class to instantiate is selected based on the "),xue=n(XC,"CODE",{});var Qct=s(xue);N1r=r(Qct,"model_type"),Qct.forEach(t),D1r=r(XC,` property of the config object (either
passed as an argument or loaded from `),Rue=n(XC,"CODE",{});var Hct=s(Rue);q1r=r(Hct,"pretrained_model_name_or_path"),Hct.forEach(t),G1r=r(XC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=n(XC,"CODE",{});var Uct=s(Sue);O1r=r(Uct,"pretrained_model_name_or_path"),Uct.forEach(t),X1r=r(XC,":"),XC.forEach(t),z1r=i(Ea),Mn=n(Ea,"UL",{});var zC=s(Mn);S8=n(zC,"LI",{});var O6e=s(S8);Pue=n(O6e,"STRONG",{});var Jct=s(Pue);V1r=r(Jct,"gpt2"),Jct.forEach(t),W1r=r(O6e," \u2014 "),LO=n(O6e,"A",{href:!0});var Yct=s(LO);Q1r=r(Yct,"FlaxGPT2LMHeadModel"),Yct.forEach(t),H1r=r(O6e," (OpenAI GPT-2 model)"),O6e.forEach(t),U1r=i(zC),P8=n(zC,"LI",{});var X6e=s(P8);$ue=n(X6e,"STRONG",{});var Kct=s($ue);J1r=r(Kct,"gpt_neo"),Kct.forEach(t),Y1r=r(X6e," \u2014 "),BO=n(X6e,"A",{href:!0});var Zct=s(BO);K1r=r(Zct,"FlaxGPTNeoForCausalLM"),Zct.forEach(t),Z1r=r(X6e," (GPT Neo model)"),X6e.forEach(t),e4r=i(zC),$8=n(zC,"LI",{});var z6e=s($8);Iue=n(z6e,"STRONG",{});var eft=s(Iue);o4r=r(eft,"gptj"),eft.forEach(t),r4r=r(z6e," \u2014 "),kO=n(z6e,"A",{href:!0});var oft=s(kO);t4r=r(oft,"FlaxGPTJForCausalLM"),oft.forEach(t),a4r=r(z6e," (GPT-J model)"),z6e.forEach(t),n4r=i(zC),I8=n(zC,"LI",{});var V6e=s(I8);jue=n(V6e,"STRONG",{});var rft=s(jue);s4r=r(rft,"xglm"),rft.forEach(t),l4r=r(V6e," \u2014 "),xO=n(V6e,"A",{href:!0});var tft=s(xO);i4r=r(tft,"FlaxXGLMForCausalLM"),tft.forEach(t),d4r=r(V6e," (XGLM model)"),V6e.forEach(t),zC.forEach(t),c4r=i(Ea),Nue=n(Ea,"P",{});var aft=s(Nue);f4r=r(aft,"Examples:"),aft.forEach(t),m4r=i(Ea),m(yA.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),I9e=i(d),Wc=n(d,"H2",{class:!0});var Vke=s(Wc);j8=n(Vke,"A",{id:!0,class:!0,href:!0});var nft=s(j8);Due=n(nft,"SPAN",{});var sft=s(Due);m(wA.$$.fragment,sft),sft.forEach(t),nft.forEach(t),g4r=i(Vke),que=n(Vke,"SPAN",{});var lft=s(que);h4r=r(lft,"FlaxAutoModelForPreTraining"),lft.forEach(t),Vke.forEach(t),j9e=i(d),Lr=n(d,"DIV",{class:!0});var ni=s(Lr);m(AA.$$.fragment,ni),p4r=i(ni),Qc=n(ni,"P",{});var pV=s(Qc);_4r=r(pV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Gue=n(pV,"CODE",{});var ift=s(Gue);u4r=r(ift,"from_pretrained()"),ift.forEach(t),b4r=r(pV,"class method or the "),Oue=n(pV,"CODE",{});var dft=s(Oue);v4r=r(dft,"from_config()"),dft.forEach(t),T4r=r(pV,`class
method.`),pV.forEach(t),F4r=i(ni),LA=n(ni,"P",{});var Wke=s(LA);C4r=r(Wke,"This class cannot be instantiated directly using "),Xue=n(Wke,"CODE",{});var cft=s(Xue);M4r=r(cft,"__init__()"),cft.forEach(t),E4r=r(Wke," (throws an error)."),Wke.forEach(t),y4r=i(ni),Ft=n(ni,"DIV",{class:!0});var si=s(Ft);m(BA.$$.fragment,si),w4r=i(si),zue=n(si,"P",{});var fft=s(zue);A4r=r(fft,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fft.forEach(t),L4r=i(si),Hc=n(si,"P",{});var _V=s(Hc);B4r=r(_V,`Note:
Loading a model from its configuration file does `),Vue=n(_V,"STRONG",{});var mft=s(Vue);k4r=r(mft,"not"),mft.forEach(t),x4r=r(_V,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wue=n(_V,"CODE",{});var gft=s(Wue);R4r=r(gft,"from_pretrained()"),gft.forEach(t),S4r=r(_V,"to load the model weights."),_V.forEach(t),P4r=i(si),Que=n(si,"P",{});var hft=s(Que);$4r=r(hft,"Examples:"),hft.forEach(t),I4r=i(si),m(kA.$$.fragment,si),si.forEach(t),j4r=i(ni),Lo=n(ni,"DIV",{class:!0});var ya=s(Lo);m(xA.$$.fragment,ya),N4r=i(ya),Hue=n(ya,"P",{});var pft=s(Hue);D4r=r(pft,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pft.forEach(t),q4r=i(ya),En=n(ya,"P",{});var VC=s(En);G4r=r(VC,"The model class to instantiate is selected based on the "),Uue=n(VC,"CODE",{});var _ft=s(Uue);O4r=r(_ft,"model_type"),_ft.forEach(t),X4r=r(VC,` property of the config object (either
passed as an argument or loaded from `),Jue=n(VC,"CODE",{});var uft=s(Jue);z4r=r(uft,"pretrained_model_name_or_path"),uft.forEach(t),V4r=r(VC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(VC,"CODE",{});var bft=s(Yue);W4r=r(bft,"pretrained_model_name_or_path"),bft.forEach(t),Q4r=r(VC,":"),VC.forEach(t),H4r=i(ya),fe=n(ya,"UL",{});var _e=s(fe);N8=n(_e,"LI",{});var W6e=s(N8);Kue=n(W6e,"STRONG",{});var vft=s(Kue);U4r=r(vft,"albert"),vft.forEach(t),J4r=r(W6e," \u2014 "),RO=n(W6e,"A",{href:!0});var Tft=s(RO);Y4r=r(Tft,"FlaxAlbertForPreTraining"),Tft.forEach(t),K4r=r(W6e," (ALBERT model)"),W6e.forEach(t),Z4r=i(_e),D8=n(_e,"LI",{});var Q6e=s(D8);Zue=n(Q6e,"STRONG",{});var Fft=s(Zue);ebr=r(Fft,"bart"),Fft.forEach(t),obr=r(Q6e," \u2014 "),SO=n(Q6e,"A",{href:!0});var Cft=s(SO);rbr=r(Cft,"FlaxBartForConditionalGeneration"),Cft.forEach(t),tbr=r(Q6e," (BART model)"),Q6e.forEach(t),abr=i(_e),q8=n(_e,"LI",{});var H6e=s(q8);e1e=n(H6e,"STRONG",{});var Mft=s(e1e);nbr=r(Mft,"bert"),Mft.forEach(t),sbr=r(H6e," \u2014 "),PO=n(H6e,"A",{href:!0});var Eft=s(PO);lbr=r(Eft,"FlaxBertForPreTraining"),Eft.forEach(t),ibr=r(H6e," (BERT model)"),H6e.forEach(t),dbr=i(_e),G8=n(_e,"LI",{});var U6e=s(G8);o1e=n(U6e,"STRONG",{});var yft=s(o1e);cbr=r(yft,"big_bird"),yft.forEach(t),fbr=r(U6e," \u2014 "),$O=n(U6e,"A",{href:!0});var wft=s($O);mbr=r(wft,"FlaxBigBirdForPreTraining"),wft.forEach(t),gbr=r(U6e," (BigBird model)"),U6e.forEach(t),hbr=i(_e),O8=n(_e,"LI",{});var J6e=s(O8);r1e=n(J6e,"STRONG",{});var Aft=s(r1e);pbr=r(Aft,"electra"),Aft.forEach(t),_br=r(J6e," \u2014 "),IO=n(J6e,"A",{href:!0});var Lft=s(IO);ubr=r(Lft,"FlaxElectraForPreTraining"),Lft.forEach(t),bbr=r(J6e," (ELECTRA model)"),J6e.forEach(t),vbr=i(_e),X8=n(_e,"LI",{});var Y6e=s(X8);t1e=n(Y6e,"STRONG",{});var Bft=s(t1e);Tbr=r(Bft,"mbart"),Bft.forEach(t),Fbr=r(Y6e," \u2014 "),jO=n(Y6e,"A",{href:!0});var kft=s(jO);Cbr=r(kft,"FlaxMBartForConditionalGeneration"),kft.forEach(t),Mbr=r(Y6e," (mBART model)"),Y6e.forEach(t),Ebr=i(_e),z8=n(_e,"LI",{});var K6e=s(z8);a1e=n(K6e,"STRONG",{});var xft=s(a1e);ybr=r(xft,"mt5"),xft.forEach(t),wbr=r(K6e," \u2014 "),NO=n(K6e,"A",{href:!0});var Rft=s(NO);Abr=r(Rft,"FlaxMT5ForConditionalGeneration"),Rft.forEach(t),Lbr=r(K6e," (mT5 model)"),K6e.forEach(t),Bbr=i(_e),V8=n(_e,"LI",{});var Z6e=s(V8);n1e=n(Z6e,"STRONG",{});var Sft=s(n1e);kbr=r(Sft,"roberta"),Sft.forEach(t),xbr=r(Z6e," \u2014 "),DO=n(Z6e,"A",{href:!0});var Pft=s(DO);Rbr=r(Pft,"FlaxRobertaForMaskedLM"),Pft.forEach(t),Sbr=r(Z6e," (RoBERTa model)"),Z6e.forEach(t),Pbr=i(_e),W8=n(_e,"LI",{});var e0e=s(W8);s1e=n(e0e,"STRONG",{});var $ft=s(s1e);$br=r($ft,"roformer"),$ft.forEach(t),Ibr=r(e0e," \u2014 "),qO=n(e0e,"A",{href:!0});var Ift=s(qO);jbr=r(Ift,"FlaxRoFormerForMaskedLM"),Ift.forEach(t),Nbr=r(e0e," (RoFormer model)"),e0e.forEach(t),Dbr=i(_e),Q8=n(_e,"LI",{});var o0e=s(Q8);l1e=n(o0e,"STRONG",{});var jft=s(l1e);qbr=r(jft,"t5"),jft.forEach(t),Gbr=r(o0e," \u2014 "),GO=n(o0e,"A",{href:!0});var Nft=s(GO);Obr=r(Nft,"FlaxT5ForConditionalGeneration"),Nft.forEach(t),Xbr=r(o0e," (T5 model)"),o0e.forEach(t),zbr=i(_e),H8=n(_e,"LI",{});var r0e=s(H8);i1e=n(r0e,"STRONG",{});var Dft=s(i1e);Vbr=r(Dft,"wav2vec2"),Dft.forEach(t),Wbr=r(r0e," \u2014 "),OO=n(r0e,"A",{href:!0});var qft=s(OO);Qbr=r(qft,"FlaxWav2Vec2ForPreTraining"),qft.forEach(t),Hbr=r(r0e," (Wav2Vec2 model)"),r0e.forEach(t),_e.forEach(t),Ubr=i(ya),d1e=n(ya,"P",{});var Gft=s(d1e);Jbr=r(Gft,"Examples:"),Gft.forEach(t),Ybr=i(ya),m(RA.$$.fragment,ya),ya.forEach(t),ni.forEach(t),N9e=i(d),Uc=n(d,"H2",{class:!0});var Qke=s(Uc);U8=n(Qke,"A",{id:!0,class:!0,href:!0});var Oft=s(U8);c1e=n(Oft,"SPAN",{});var Xft=s(c1e);m(SA.$$.fragment,Xft),Xft.forEach(t),Oft.forEach(t),Kbr=i(Qke),f1e=n(Qke,"SPAN",{});var zft=s(f1e);Zbr=r(zft,"FlaxAutoModelForMaskedLM"),zft.forEach(t),Qke.forEach(t),D9e=i(d),Br=n(d,"DIV",{class:!0});var li=s(Br);m(PA.$$.fragment,li),e5r=i(li),Jc=n(li,"P",{});var uV=s(Jc);o5r=r(uV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),m1e=n(uV,"CODE",{});var Vft=s(m1e);r5r=r(Vft,"from_pretrained()"),Vft.forEach(t),t5r=r(uV,"class method or the "),g1e=n(uV,"CODE",{});var Wft=s(g1e);a5r=r(Wft,"from_config()"),Wft.forEach(t),n5r=r(uV,`class
method.`),uV.forEach(t),s5r=i(li),$A=n(li,"P",{});var Hke=s($A);l5r=r(Hke,"This class cannot be instantiated directly using "),h1e=n(Hke,"CODE",{});var Qft=s(h1e);i5r=r(Qft,"__init__()"),Qft.forEach(t),d5r=r(Hke," (throws an error)."),Hke.forEach(t),c5r=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(IA.$$.fragment,ii),f5r=i(ii),p1e=n(ii,"P",{});var Hft=s(p1e);m5r=r(Hft,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Hft.forEach(t),g5r=i(ii),Yc=n(ii,"P",{});var bV=s(Yc);h5r=r(bV,`Note:
Loading a model from its configuration file does `),_1e=n(bV,"STRONG",{});var Uft=s(_1e);p5r=r(Uft,"not"),Uft.forEach(t),_5r=r(bV,` load the model weights. It only affects the
model\u2019s configuration. Use `),u1e=n(bV,"CODE",{});var Jft=s(u1e);u5r=r(Jft,"from_pretrained()"),Jft.forEach(t),b5r=r(bV,"to load the model weights."),bV.forEach(t),v5r=i(ii),b1e=n(ii,"P",{});var Yft=s(b1e);T5r=r(Yft,"Examples:"),Yft.forEach(t),F5r=i(ii),m(jA.$$.fragment,ii),ii.forEach(t),C5r=i(li),Bo=n(li,"DIV",{class:!0});var wa=s(Bo);m(NA.$$.fragment,wa),M5r=i(wa),v1e=n(wa,"P",{});var Kft=s(v1e);E5r=r(Kft,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Kft.forEach(t),y5r=i(wa),yn=n(wa,"P",{});var WC=s(yn);w5r=r(WC,"The model class to instantiate is selected based on the "),T1e=n(WC,"CODE",{});var Zft=s(T1e);A5r=r(Zft,"model_type"),Zft.forEach(t),L5r=r(WC,` property of the config object (either
passed as an argument or loaded from `),F1e=n(WC,"CODE",{});var emt=s(F1e);B5r=r(emt,"pretrained_model_name_or_path"),emt.forEach(t),k5r=r(WC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(WC,"CODE",{});var omt=s(C1e);x5r=r(omt,"pretrained_model_name_or_path"),omt.forEach(t),R5r=r(WC,":"),WC.forEach(t),S5r=i(wa),ve=n(wa,"UL",{});var Ze=s(ve);J8=n(Ze,"LI",{});var t0e=s(J8);M1e=n(t0e,"STRONG",{});var rmt=s(M1e);P5r=r(rmt,"albert"),rmt.forEach(t),$5r=r(t0e," \u2014 "),XO=n(t0e,"A",{href:!0});var tmt=s(XO);I5r=r(tmt,"FlaxAlbertForMaskedLM"),tmt.forEach(t),j5r=r(t0e," (ALBERT model)"),t0e.forEach(t),N5r=i(Ze),Y8=n(Ze,"LI",{});var a0e=s(Y8);E1e=n(a0e,"STRONG",{});var amt=s(E1e);D5r=r(amt,"bart"),amt.forEach(t),q5r=r(a0e," \u2014 "),zO=n(a0e,"A",{href:!0});var nmt=s(zO);G5r=r(nmt,"FlaxBartForConditionalGeneration"),nmt.forEach(t),O5r=r(a0e," (BART model)"),a0e.forEach(t),X5r=i(Ze),K8=n(Ze,"LI",{});var n0e=s(K8);y1e=n(n0e,"STRONG",{});var smt=s(y1e);z5r=r(smt,"bert"),smt.forEach(t),V5r=r(n0e," \u2014 "),VO=n(n0e,"A",{href:!0});var lmt=s(VO);W5r=r(lmt,"FlaxBertForMaskedLM"),lmt.forEach(t),Q5r=r(n0e," (BERT model)"),n0e.forEach(t),H5r=i(Ze),Z8=n(Ze,"LI",{});var s0e=s(Z8);w1e=n(s0e,"STRONG",{});var imt=s(w1e);U5r=r(imt,"big_bird"),imt.forEach(t),J5r=r(s0e," \u2014 "),WO=n(s0e,"A",{href:!0});var dmt=s(WO);Y5r=r(dmt,"FlaxBigBirdForMaskedLM"),dmt.forEach(t),K5r=r(s0e," (BigBird model)"),s0e.forEach(t),Z5r=i(Ze),eF=n(Ze,"LI",{});var l0e=s(eF);A1e=n(l0e,"STRONG",{});var cmt=s(A1e);e2r=r(cmt,"distilbert"),cmt.forEach(t),o2r=r(l0e," \u2014 "),QO=n(l0e,"A",{href:!0});var fmt=s(QO);r2r=r(fmt,"FlaxDistilBertForMaskedLM"),fmt.forEach(t),t2r=r(l0e," (DistilBERT model)"),l0e.forEach(t),a2r=i(Ze),oF=n(Ze,"LI",{});var i0e=s(oF);L1e=n(i0e,"STRONG",{});var mmt=s(L1e);n2r=r(mmt,"electra"),mmt.forEach(t),s2r=r(i0e," \u2014 "),HO=n(i0e,"A",{href:!0});var gmt=s(HO);l2r=r(gmt,"FlaxElectraForMaskedLM"),gmt.forEach(t),i2r=r(i0e," (ELECTRA model)"),i0e.forEach(t),d2r=i(Ze),rF=n(Ze,"LI",{});var d0e=s(rF);B1e=n(d0e,"STRONG",{});var hmt=s(B1e);c2r=r(hmt,"mbart"),hmt.forEach(t),f2r=r(d0e," \u2014 "),UO=n(d0e,"A",{href:!0});var pmt=s(UO);m2r=r(pmt,"FlaxMBartForConditionalGeneration"),pmt.forEach(t),g2r=r(d0e," (mBART model)"),d0e.forEach(t),h2r=i(Ze),tF=n(Ze,"LI",{});var c0e=s(tF);k1e=n(c0e,"STRONG",{});var _mt=s(k1e);p2r=r(_mt,"roberta"),_mt.forEach(t),_2r=r(c0e," \u2014 "),JO=n(c0e,"A",{href:!0});var umt=s(JO);u2r=r(umt,"FlaxRobertaForMaskedLM"),umt.forEach(t),b2r=r(c0e," (RoBERTa model)"),c0e.forEach(t),v2r=i(Ze),aF=n(Ze,"LI",{});var f0e=s(aF);x1e=n(f0e,"STRONG",{});var bmt=s(x1e);T2r=r(bmt,"roformer"),bmt.forEach(t),F2r=r(f0e," \u2014 "),YO=n(f0e,"A",{href:!0});var vmt=s(YO);C2r=r(vmt,"FlaxRoFormerForMaskedLM"),vmt.forEach(t),M2r=r(f0e," (RoFormer model)"),f0e.forEach(t),Ze.forEach(t),E2r=i(wa),R1e=n(wa,"P",{});var Tmt=s(R1e);y2r=r(Tmt,"Examples:"),Tmt.forEach(t),w2r=i(wa),m(DA.$$.fragment,wa),wa.forEach(t),li.forEach(t),q9e=i(d),Kc=n(d,"H2",{class:!0});var Uke=s(Kc);nF=n(Uke,"A",{id:!0,class:!0,href:!0});var Fmt=s(nF);S1e=n(Fmt,"SPAN",{});var Cmt=s(S1e);m(qA.$$.fragment,Cmt),Cmt.forEach(t),Fmt.forEach(t),A2r=i(Uke),P1e=n(Uke,"SPAN",{});var Mmt=s(P1e);L2r=r(Mmt,"FlaxAutoModelForSeq2SeqLM"),Mmt.forEach(t),Uke.forEach(t),G9e=i(d),kr=n(d,"DIV",{class:!0});var di=s(kr);m(GA.$$.fragment,di),B2r=i(di),Zc=n(di,"P",{});var vV=s(Zc);k2r=r(vV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$1e=n(vV,"CODE",{});var Emt=s($1e);x2r=r(Emt,"from_pretrained()"),Emt.forEach(t),R2r=r(vV,"class method or the "),I1e=n(vV,"CODE",{});var ymt=s(I1e);S2r=r(ymt,"from_config()"),ymt.forEach(t),P2r=r(vV,`class
method.`),vV.forEach(t),$2r=i(di),OA=n(di,"P",{});var Jke=s(OA);I2r=r(Jke,"This class cannot be instantiated directly using "),j1e=n(Jke,"CODE",{});var wmt=s(j1e);j2r=r(wmt,"__init__()"),wmt.forEach(t),N2r=r(Jke," (throws an error)."),Jke.forEach(t),D2r=i(di),Mt=n(di,"DIV",{class:!0});var ci=s(Mt);m(XA.$$.fragment,ci),q2r=i(ci),N1e=n(ci,"P",{});var Amt=s(N1e);G2r=r(Amt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Amt.forEach(t),O2r=i(ci),ef=n(ci,"P",{});var TV=s(ef);X2r=r(TV,`Note:
Loading a model from its configuration file does `),D1e=n(TV,"STRONG",{});var Lmt=s(D1e);z2r=r(Lmt,"not"),Lmt.forEach(t),V2r=r(TV,` load the model weights. It only affects the
model\u2019s configuration. Use `),q1e=n(TV,"CODE",{});var Bmt=s(q1e);W2r=r(Bmt,"from_pretrained()"),Bmt.forEach(t),Q2r=r(TV,"to load the model weights."),TV.forEach(t),H2r=i(ci),G1e=n(ci,"P",{});var kmt=s(G1e);U2r=r(kmt,"Examples:"),kmt.forEach(t),J2r=i(ci),m(zA.$$.fragment,ci),ci.forEach(t),Y2r=i(di),ko=n(di,"DIV",{class:!0});var Aa=s(ko);m(VA.$$.fragment,Aa),K2r=i(Aa),O1e=n(Aa,"P",{});var xmt=s(O1e);Z2r=r(xmt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xmt.forEach(t),evr=i(Aa),wn=n(Aa,"P",{});var QC=s(wn);ovr=r(QC,"The model class to instantiate is selected based on the "),X1e=n(QC,"CODE",{});var Rmt=s(X1e);rvr=r(Rmt,"model_type"),Rmt.forEach(t),tvr=r(QC,` property of the config object (either
passed as an argument or loaded from `),z1e=n(QC,"CODE",{});var Smt=s(z1e);avr=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),nvr=r(QC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(QC,"CODE",{});var Pmt=s(V1e);svr=r(Pmt,"pretrained_model_name_or_path"),Pmt.forEach(t),lvr=r(QC,":"),QC.forEach(t),ivr=i(Aa),Te=n(Aa,"UL",{});var eo=s(Te);sF=n(eo,"LI",{});var m0e=s(sF);W1e=n(m0e,"STRONG",{});var $mt=s(W1e);dvr=r($mt,"bart"),$mt.forEach(t),cvr=r(m0e," \u2014 "),KO=n(m0e,"A",{href:!0});var Imt=s(KO);fvr=r(Imt,"FlaxBartForConditionalGeneration"),Imt.forEach(t),mvr=r(m0e," (BART model)"),m0e.forEach(t),gvr=i(eo),lF=n(eo,"LI",{});var g0e=s(lF);Q1e=n(g0e,"STRONG",{});var jmt=s(Q1e);hvr=r(jmt,"blenderbot"),jmt.forEach(t),pvr=r(g0e," \u2014 "),ZO=n(g0e,"A",{href:!0});var Nmt=s(ZO);_vr=r(Nmt,"FlaxBlenderbotForConditionalGeneration"),Nmt.forEach(t),uvr=r(g0e," (Blenderbot model)"),g0e.forEach(t),bvr=i(eo),iF=n(eo,"LI",{});var h0e=s(iF);H1e=n(h0e,"STRONG",{});var Dmt=s(H1e);vvr=r(Dmt,"blenderbot-small"),Dmt.forEach(t),Tvr=r(h0e," \u2014 "),eX=n(h0e,"A",{href:!0});var qmt=s(eX);Fvr=r(qmt,"FlaxBlenderbotSmallForConditionalGeneration"),qmt.forEach(t),Cvr=r(h0e," (BlenderbotSmall model)"),h0e.forEach(t),Mvr=i(eo),dF=n(eo,"LI",{});var p0e=s(dF);U1e=n(p0e,"STRONG",{});var Gmt=s(U1e);Evr=r(Gmt,"encoder-decoder"),Gmt.forEach(t),yvr=r(p0e," \u2014 "),oX=n(p0e,"A",{href:!0});var Omt=s(oX);wvr=r(Omt,"FlaxEncoderDecoderModel"),Omt.forEach(t),Avr=r(p0e," (Encoder decoder model)"),p0e.forEach(t),Lvr=i(eo),cF=n(eo,"LI",{});var _0e=s(cF);J1e=n(_0e,"STRONG",{});var Xmt=s(J1e);Bvr=r(Xmt,"marian"),Xmt.forEach(t),kvr=r(_0e," \u2014 "),rX=n(_0e,"A",{href:!0});var zmt=s(rX);xvr=r(zmt,"FlaxMarianMTModel"),zmt.forEach(t),Rvr=r(_0e," (Marian model)"),_0e.forEach(t),Svr=i(eo),fF=n(eo,"LI",{});var u0e=s(fF);Y1e=n(u0e,"STRONG",{});var Vmt=s(Y1e);Pvr=r(Vmt,"mbart"),Vmt.forEach(t),$vr=r(u0e," \u2014 "),tX=n(u0e,"A",{href:!0});var Wmt=s(tX);Ivr=r(Wmt,"FlaxMBartForConditionalGeneration"),Wmt.forEach(t),jvr=r(u0e," (mBART model)"),u0e.forEach(t),Nvr=i(eo),mF=n(eo,"LI",{});var b0e=s(mF);K1e=n(b0e,"STRONG",{});var Qmt=s(K1e);Dvr=r(Qmt,"mt5"),Qmt.forEach(t),qvr=r(b0e," \u2014 "),aX=n(b0e,"A",{href:!0});var Hmt=s(aX);Gvr=r(Hmt,"FlaxMT5ForConditionalGeneration"),Hmt.forEach(t),Ovr=r(b0e," (mT5 model)"),b0e.forEach(t),Xvr=i(eo),gF=n(eo,"LI",{});var v0e=s(gF);Z1e=n(v0e,"STRONG",{});var Umt=s(Z1e);zvr=r(Umt,"pegasus"),Umt.forEach(t),Vvr=r(v0e," \u2014 "),nX=n(v0e,"A",{href:!0});var Jmt=s(nX);Wvr=r(Jmt,"FlaxPegasusForConditionalGeneration"),Jmt.forEach(t),Qvr=r(v0e," (Pegasus model)"),v0e.forEach(t),Hvr=i(eo),hF=n(eo,"LI",{});var T0e=s(hF);e4e=n(T0e,"STRONG",{});var Ymt=s(e4e);Uvr=r(Ymt,"t5"),Ymt.forEach(t),Jvr=r(T0e," \u2014 "),sX=n(T0e,"A",{href:!0});var Kmt=s(sX);Yvr=r(Kmt,"FlaxT5ForConditionalGeneration"),Kmt.forEach(t),Kvr=r(T0e," (T5 model)"),T0e.forEach(t),eo.forEach(t),Zvr=i(Aa),o4e=n(Aa,"P",{});var Zmt=s(o4e);eTr=r(Zmt,"Examples:"),Zmt.forEach(t),oTr=i(Aa),m(WA.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),O9e=i(d),of=n(d,"H2",{class:!0});var Yke=s(of);pF=n(Yke,"A",{id:!0,class:!0,href:!0});var egt=s(pF);r4e=n(egt,"SPAN",{});var ogt=s(r4e);m(QA.$$.fragment,ogt),ogt.forEach(t),egt.forEach(t),rTr=i(Yke),t4e=n(Yke,"SPAN",{});var rgt=s(t4e);tTr=r(rgt,"FlaxAutoModelForSequenceClassification"),rgt.forEach(t),Yke.forEach(t),X9e=i(d),xr=n(d,"DIV",{class:!0});var fi=s(xr);m(HA.$$.fragment,fi),aTr=i(fi),rf=n(fi,"P",{});var FV=s(rf);nTr=r(FV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),a4e=n(FV,"CODE",{});var tgt=s(a4e);sTr=r(tgt,"from_pretrained()"),tgt.forEach(t),lTr=r(FV,"class method or the "),n4e=n(FV,"CODE",{});var agt=s(n4e);iTr=r(agt,"from_config()"),agt.forEach(t),dTr=r(FV,`class
method.`),FV.forEach(t),cTr=i(fi),UA=n(fi,"P",{});var Kke=s(UA);fTr=r(Kke,"This class cannot be instantiated directly using "),s4e=n(Kke,"CODE",{});var ngt=s(s4e);mTr=r(ngt,"__init__()"),ngt.forEach(t),gTr=r(Kke," (throws an error)."),Kke.forEach(t),hTr=i(fi),Et=n(fi,"DIV",{class:!0});var mi=s(Et);m(JA.$$.fragment,mi),pTr=i(mi),l4e=n(mi,"P",{});var sgt=s(l4e);_Tr=r(sgt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sgt.forEach(t),uTr=i(mi),tf=n(mi,"P",{});var CV=s(tf);bTr=r(CV,`Note:
Loading a model from its configuration file does `),i4e=n(CV,"STRONG",{});var lgt=s(i4e);vTr=r(lgt,"not"),lgt.forEach(t),TTr=r(CV,` load the model weights. It only affects the
model\u2019s configuration. Use `),d4e=n(CV,"CODE",{});var igt=s(d4e);FTr=r(igt,"from_pretrained()"),igt.forEach(t),CTr=r(CV,"to load the model weights."),CV.forEach(t),MTr=i(mi),c4e=n(mi,"P",{});var dgt=s(c4e);ETr=r(dgt,"Examples:"),dgt.forEach(t),yTr=i(mi),m(YA.$$.fragment,mi),mi.forEach(t),wTr=i(fi),xo=n(fi,"DIV",{class:!0});var La=s(xo);m(KA.$$.fragment,La),ATr=i(La),f4e=n(La,"P",{});var cgt=s(f4e);LTr=r(cgt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cgt.forEach(t),BTr=i(La),An=n(La,"P",{});var HC=s(An);kTr=r(HC,"The model class to instantiate is selected based on the "),m4e=n(HC,"CODE",{});var fgt=s(m4e);xTr=r(fgt,"model_type"),fgt.forEach(t),RTr=r(HC,` property of the config object (either
passed as an argument or loaded from `),g4e=n(HC,"CODE",{});var mgt=s(g4e);STr=r(mgt,"pretrained_model_name_or_path"),mgt.forEach(t),PTr=r(HC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=n(HC,"CODE",{});var ggt=s(h4e);$Tr=r(ggt,"pretrained_model_name_or_path"),ggt.forEach(t),ITr=r(HC,":"),HC.forEach(t),jTr=i(La),Fe=n(La,"UL",{});var oo=s(Fe);_F=n(oo,"LI",{});var F0e=s(_F);p4e=n(F0e,"STRONG",{});var hgt=s(p4e);NTr=r(hgt,"albert"),hgt.forEach(t),DTr=r(F0e," \u2014 "),lX=n(F0e,"A",{href:!0});var pgt=s(lX);qTr=r(pgt,"FlaxAlbertForSequenceClassification"),pgt.forEach(t),GTr=r(F0e," (ALBERT model)"),F0e.forEach(t),OTr=i(oo),uF=n(oo,"LI",{});var C0e=s(uF);_4e=n(C0e,"STRONG",{});var _gt=s(_4e);XTr=r(_gt,"bart"),_gt.forEach(t),zTr=r(C0e," \u2014 "),iX=n(C0e,"A",{href:!0});var ugt=s(iX);VTr=r(ugt,"FlaxBartForSequenceClassification"),ugt.forEach(t),WTr=r(C0e," (BART model)"),C0e.forEach(t),QTr=i(oo),bF=n(oo,"LI",{});var M0e=s(bF);u4e=n(M0e,"STRONG",{});var bgt=s(u4e);HTr=r(bgt,"bert"),bgt.forEach(t),UTr=r(M0e," \u2014 "),dX=n(M0e,"A",{href:!0});var vgt=s(dX);JTr=r(vgt,"FlaxBertForSequenceClassification"),vgt.forEach(t),YTr=r(M0e," (BERT model)"),M0e.forEach(t),KTr=i(oo),vF=n(oo,"LI",{});var E0e=s(vF);b4e=n(E0e,"STRONG",{});var Tgt=s(b4e);ZTr=r(Tgt,"big_bird"),Tgt.forEach(t),e7r=r(E0e," \u2014 "),cX=n(E0e,"A",{href:!0});var Fgt=s(cX);o7r=r(Fgt,"FlaxBigBirdForSequenceClassification"),Fgt.forEach(t),r7r=r(E0e," (BigBird model)"),E0e.forEach(t),t7r=i(oo),TF=n(oo,"LI",{});var y0e=s(TF);v4e=n(y0e,"STRONG",{});var Cgt=s(v4e);a7r=r(Cgt,"distilbert"),Cgt.forEach(t),n7r=r(y0e," \u2014 "),fX=n(y0e,"A",{href:!0});var Mgt=s(fX);s7r=r(Mgt,"FlaxDistilBertForSequenceClassification"),Mgt.forEach(t),l7r=r(y0e," (DistilBERT model)"),y0e.forEach(t),i7r=i(oo),FF=n(oo,"LI",{});var w0e=s(FF);T4e=n(w0e,"STRONG",{});var Egt=s(T4e);d7r=r(Egt,"electra"),Egt.forEach(t),c7r=r(w0e," \u2014 "),mX=n(w0e,"A",{href:!0});var ygt=s(mX);f7r=r(ygt,"FlaxElectraForSequenceClassification"),ygt.forEach(t),m7r=r(w0e," (ELECTRA model)"),w0e.forEach(t),g7r=i(oo),CF=n(oo,"LI",{});var A0e=s(CF);F4e=n(A0e,"STRONG",{});var wgt=s(F4e);h7r=r(wgt,"mbart"),wgt.forEach(t),p7r=r(A0e," \u2014 "),gX=n(A0e,"A",{href:!0});var Agt=s(gX);_7r=r(Agt,"FlaxMBartForSequenceClassification"),Agt.forEach(t),u7r=r(A0e," (mBART model)"),A0e.forEach(t),b7r=i(oo),MF=n(oo,"LI",{});var L0e=s(MF);C4e=n(L0e,"STRONG",{});var Lgt=s(C4e);v7r=r(Lgt,"roberta"),Lgt.forEach(t),T7r=r(L0e," \u2014 "),hX=n(L0e,"A",{href:!0});var Bgt=s(hX);F7r=r(Bgt,"FlaxRobertaForSequenceClassification"),Bgt.forEach(t),C7r=r(L0e," (RoBERTa model)"),L0e.forEach(t),M7r=i(oo),EF=n(oo,"LI",{});var B0e=s(EF);M4e=n(B0e,"STRONG",{});var kgt=s(M4e);E7r=r(kgt,"roformer"),kgt.forEach(t),y7r=r(B0e," \u2014 "),pX=n(B0e,"A",{href:!0});var xgt=s(pX);w7r=r(xgt,"FlaxRoFormerForSequenceClassification"),xgt.forEach(t),A7r=r(B0e," (RoFormer model)"),B0e.forEach(t),oo.forEach(t),L7r=i(La),E4e=n(La,"P",{});var Rgt=s(E4e);B7r=r(Rgt,"Examples:"),Rgt.forEach(t),k7r=i(La),m(ZA.$$.fragment,La),La.forEach(t),fi.forEach(t),z9e=i(d),af=n(d,"H2",{class:!0});var Zke=s(af);yF=n(Zke,"A",{id:!0,class:!0,href:!0});var Sgt=s(yF);y4e=n(Sgt,"SPAN",{});var Pgt=s(y4e);m(e6.$$.fragment,Pgt),Pgt.forEach(t),Sgt.forEach(t),x7r=i(Zke),w4e=n(Zke,"SPAN",{});var $gt=s(w4e);R7r=r($gt,"FlaxAutoModelForQuestionAnswering"),$gt.forEach(t),Zke.forEach(t),V9e=i(d),Rr=n(d,"DIV",{class:!0});var gi=s(Rr);m(o6.$$.fragment,gi),S7r=i(gi),nf=n(gi,"P",{});var MV=s(nf);P7r=r(MV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),A4e=n(MV,"CODE",{});var Igt=s(A4e);$7r=r(Igt,"from_pretrained()"),Igt.forEach(t),I7r=r(MV,"class method or the "),L4e=n(MV,"CODE",{});var jgt=s(L4e);j7r=r(jgt,"from_config()"),jgt.forEach(t),N7r=r(MV,`class
method.`),MV.forEach(t),D7r=i(gi),r6=n(gi,"P",{});var exe=s(r6);q7r=r(exe,"This class cannot be instantiated directly using "),B4e=n(exe,"CODE",{});var Ngt=s(B4e);G7r=r(Ngt,"__init__()"),Ngt.forEach(t),O7r=r(exe," (throws an error)."),exe.forEach(t),X7r=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(t6.$$.fragment,hi),z7r=i(hi),k4e=n(hi,"P",{});var Dgt=s(k4e);V7r=r(Dgt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Dgt.forEach(t),W7r=i(hi),sf=n(hi,"P",{});var EV=s(sf);Q7r=r(EV,`Note:
Loading a model from its configuration file does `),x4e=n(EV,"STRONG",{});var qgt=s(x4e);H7r=r(qgt,"not"),qgt.forEach(t),U7r=r(EV,` load the model weights. It only affects the
model\u2019s configuration. Use `),R4e=n(EV,"CODE",{});var Ggt=s(R4e);J7r=r(Ggt,"from_pretrained()"),Ggt.forEach(t),Y7r=r(EV,"to load the model weights."),EV.forEach(t),K7r=i(hi),S4e=n(hi,"P",{});var Ogt=s(S4e);Z7r=r(Ogt,"Examples:"),Ogt.forEach(t),e8r=i(hi),m(a6.$$.fragment,hi),hi.forEach(t),o8r=i(gi),Ro=n(gi,"DIV",{class:!0});var Ba=s(Ro);m(n6.$$.fragment,Ba),r8r=i(Ba),P4e=n(Ba,"P",{});var Xgt=s(P4e);t8r=r(Xgt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xgt.forEach(t),a8r=i(Ba),Ln=n(Ba,"P",{});var UC=s(Ln);n8r=r(UC,"The model class to instantiate is selected based on the "),$4e=n(UC,"CODE",{});var zgt=s($4e);s8r=r(zgt,"model_type"),zgt.forEach(t),l8r=r(UC,` property of the config object (either
passed as an argument or loaded from `),I4e=n(UC,"CODE",{});var Vgt=s(I4e);i8r=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),d8r=r(UC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=n(UC,"CODE",{});var Wgt=s(j4e);c8r=r(Wgt,"pretrained_model_name_or_path"),Wgt.forEach(t),f8r=r(UC,":"),UC.forEach(t),m8r=i(Ba),Ce=n(Ba,"UL",{});var ro=s(Ce);wF=n(ro,"LI",{});var k0e=s(wF);N4e=n(k0e,"STRONG",{});var Qgt=s(N4e);g8r=r(Qgt,"albert"),Qgt.forEach(t),h8r=r(k0e," \u2014 "),_X=n(k0e,"A",{href:!0});var Hgt=s(_X);p8r=r(Hgt,"FlaxAlbertForQuestionAnswering"),Hgt.forEach(t),_8r=r(k0e," (ALBERT model)"),k0e.forEach(t),u8r=i(ro),AF=n(ro,"LI",{});var x0e=s(AF);D4e=n(x0e,"STRONG",{});var Ugt=s(D4e);b8r=r(Ugt,"bart"),Ugt.forEach(t),v8r=r(x0e," \u2014 "),uX=n(x0e,"A",{href:!0});var Jgt=s(uX);T8r=r(Jgt,"FlaxBartForQuestionAnswering"),Jgt.forEach(t),F8r=r(x0e," (BART model)"),x0e.forEach(t),C8r=i(ro),LF=n(ro,"LI",{});var R0e=s(LF);q4e=n(R0e,"STRONG",{});var Ygt=s(q4e);M8r=r(Ygt,"bert"),Ygt.forEach(t),E8r=r(R0e," \u2014 "),bX=n(R0e,"A",{href:!0});var Kgt=s(bX);y8r=r(Kgt,"FlaxBertForQuestionAnswering"),Kgt.forEach(t),w8r=r(R0e," (BERT model)"),R0e.forEach(t),A8r=i(ro),BF=n(ro,"LI",{});var S0e=s(BF);G4e=n(S0e,"STRONG",{});var Zgt=s(G4e);L8r=r(Zgt,"big_bird"),Zgt.forEach(t),B8r=r(S0e," \u2014 "),vX=n(S0e,"A",{href:!0});var eht=s(vX);k8r=r(eht,"FlaxBigBirdForQuestionAnswering"),eht.forEach(t),x8r=r(S0e," (BigBird model)"),S0e.forEach(t),R8r=i(ro),kF=n(ro,"LI",{});var P0e=s(kF);O4e=n(P0e,"STRONG",{});var oht=s(O4e);S8r=r(oht,"distilbert"),oht.forEach(t),P8r=r(P0e," \u2014 "),TX=n(P0e,"A",{href:!0});var rht=s(TX);$8r=r(rht,"FlaxDistilBertForQuestionAnswering"),rht.forEach(t),I8r=r(P0e," (DistilBERT model)"),P0e.forEach(t),j8r=i(ro),xF=n(ro,"LI",{});var $0e=s(xF);X4e=n($0e,"STRONG",{});var tht=s(X4e);N8r=r(tht,"electra"),tht.forEach(t),D8r=r($0e," \u2014 "),FX=n($0e,"A",{href:!0});var aht=s(FX);q8r=r(aht,"FlaxElectraForQuestionAnswering"),aht.forEach(t),G8r=r($0e," (ELECTRA model)"),$0e.forEach(t),O8r=i(ro),RF=n(ro,"LI",{});var I0e=s(RF);z4e=n(I0e,"STRONG",{});var nht=s(z4e);X8r=r(nht,"mbart"),nht.forEach(t),z8r=r(I0e," \u2014 "),CX=n(I0e,"A",{href:!0});var sht=s(CX);V8r=r(sht,"FlaxMBartForQuestionAnswering"),sht.forEach(t),W8r=r(I0e," (mBART model)"),I0e.forEach(t),Q8r=i(ro),SF=n(ro,"LI",{});var j0e=s(SF);V4e=n(j0e,"STRONG",{});var lht=s(V4e);H8r=r(lht,"roberta"),lht.forEach(t),U8r=r(j0e," \u2014 "),MX=n(j0e,"A",{href:!0});var iht=s(MX);J8r=r(iht,"FlaxRobertaForQuestionAnswering"),iht.forEach(t),Y8r=r(j0e," (RoBERTa model)"),j0e.forEach(t),K8r=i(ro),PF=n(ro,"LI",{});var N0e=s(PF);W4e=n(N0e,"STRONG",{});var dht=s(W4e);Z8r=r(dht,"roformer"),dht.forEach(t),eFr=r(N0e," \u2014 "),EX=n(N0e,"A",{href:!0});var cht=s(EX);oFr=r(cht,"FlaxRoFormerForQuestionAnswering"),cht.forEach(t),rFr=r(N0e," (RoFormer model)"),N0e.forEach(t),ro.forEach(t),tFr=i(Ba),Q4e=n(Ba,"P",{});var fht=s(Q4e);aFr=r(fht,"Examples:"),fht.forEach(t),nFr=i(Ba),m(s6.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),W9e=i(d),lf=n(d,"H2",{class:!0});var oxe=s(lf);$F=n(oxe,"A",{id:!0,class:!0,href:!0});var mht=s($F);H4e=n(mht,"SPAN",{});var ght=s(H4e);m(l6.$$.fragment,ght),ght.forEach(t),mht.forEach(t),sFr=i(oxe),U4e=n(oxe,"SPAN",{});var hht=s(U4e);lFr=r(hht,"FlaxAutoModelForTokenClassification"),hht.forEach(t),oxe.forEach(t),Q9e=i(d),Sr=n(d,"DIV",{class:!0});var pi=s(Sr);m(i6.$$.fragment,pi),iFr=i(pi),df=n(pi,"P",{});var yV=s(df);dFr=r(yV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),J4e=n(yV,"CODE",{});var pht=s(J4e);cFr=r(pht,"from_pretrained()"),pht.forEach(t),fFr=r(yV,"class method or the "),Y4e=n(yV,"CODE",{});var _ht=s(Y4e);mFr=r(_ht,"from_config()"),_ht.forEach(t),gFr=r(yV,`class
method.`),yV.forEach(t),hFr=i(pi),d6=n(pi,"P",{});var rxe=s(d6);pFr=r(rxe,"This class cannot be instantiated directly using "),K4e=n(rxe,"CODE",{});var uht=s(K4e);_Fr=r(uht,"__init__()"),uht.forEach(t),uFr=r(rxe," (throws an error)."),rxe.forEach(t),bFr=i(pi),wt=n(pi,"DIV",{class:!0});var _i=s(wt);m(c6.$$.fragment,_i),vFr=i(_i),Z4e=n(_i,"P",{});var bht=s(Z4e);TFr=r(bht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bht.forEach(t),FFr=i(_i),cf=n(_i,"P",{});var wV=s(cf);CFr=r(wV,`Note:
Loading a model from its configuration file does `),ebe=n(wV,"STRONG",{});var vht=s(ebe);MFr=r(vht,"not"),vht.forEach(t),EFr=r(wV,` load the model weights. It only affects the
model\u2019s configuration. Use `),obe=n(wV,"CODE",{});var Tht=s(obe);yFr=r(Tht,"from_pretrained()"),Tht.forEach(t),wFr=r(wV,"to load the model weights."),wV.forEach(t),AFr=i(_i),rbe=n(_i,"P",{});var Fht=s(rbe);LFr=r(Fht,"Examples:"),Fht.forEach(t),BFr=i(_i),m(f6.$$.fragment,_i),_i.forEach(t),kFr=i(pi),So=n(pi,"DIV",{class:!0});var ka=s(So);m(m6.$$.fragment,ka),xFr=i(ka),tbe=n(ka,"P",{});var Cht=s(tbe);RFr=r(Cht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Cht.forEach(t),SFr=i(ka),Bn=n(ka,"P",{});var JC=s(Bn);PFr=r(JC,"The model class to instantiate is selected based on the "),abe=n(JC,"CODE",{});var Mht=s(abe);$Fr=r(Mht,"model_type"),Mht.forEach(t),IFr=r(JC,` property of the config object (either
passed as an argument or loaded from `),nbe=n(JC,"CODE",{});var Eht=s(nbe);jFr=r(Eht,"pretrained_model_name_or_path"),Eht.forEach(t),NFr=r(JC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=n(JC,"CODE",{});var yht=s(sbe);DFr=r(yht,"pretrained_model_name_or_path"),yht.forEach(t),qFr=r(JC,":"),JC.forEach(t),GFr=i(ka),so=n(ka,"UL",{});var ta=s(so);IF=n(ta,"LI",{});var D0e=s(IF);lbe=n(D0e,"STRONG",{});var wht=s(lbe);OFr=r(wht,"albert"),wht.forEach(t),XFr=r(D0e," \u2014 "),yX=n(D0e,"A",{href:!0});var Aht=s(yX);zFr=r(Aht,"FlaxAlbertForTokenClassification"),Aht.forEach(t),VFr=r(D0e," (ALBERT model)"),D0e.forEach(t),WFr=i(ta),jF=n(ta,"LI",{});var q0e=s(jF);ibe=n(q0e,"STRONG",{});var Lht=s(ibe);QFr=r(Lht,"bert"),Lht.forEach(t),HFr=r(q0e," \u2014 "),wX=n(q0e,"A",{href:!0});var Bht=s(wX);UFr=r(Bht,"FlaxBertForTokenClassification"),Bht.forEach(t),JFr=r(q0e," (BERT model)"),q0e.forEach(t),YFr=i(ta),NF=n(ta,"LI",{});var G0e=s(NF);dbe=n(G0e,"STRONG",{});var kht=s(dbe);KFr=r(kht,"big_bird"),kht.forEach(t),ZFr=r(G0e," \u2014 "),AX=n(G0e,"A",{href:!0});var xht=s(AX);eCr=r(xht,"FlaxBigBirdForTokenClassification"),xht.forEach(t),oCr=r(G0e," (BigBird model)"),G0e.forEach(t),rCr=i(ta),DF=n(ta,"LI",{});var O0e=s(DF);cbe=n(O0e,"STRONG",{});var Rht=s(cbe);tCr=r(Rht,"distilbert"),Rht.forEach(t),aCr=r(O0e," \u2014 "),LX=n(O0e,"A",{href:!0});var Sht=s(LX);nCr=r(Sht,"FlaxDistilBertForTokenClassification"),Sht.forEach(t),sCr=r(O0e," (DistilBERT model)"),O0e.forEach(t),lCr=i(ta),qF=n(ta,"LI",{});var X0e=s(qF);fbe=n(X0e,"STRONG",{});var Pht=s(fbe);iCr=r(Pht,"electra"),Pht.forEach(t),dCr=r(X0e," \u2014 "),BX=n(X0e,"A",{href:!0});var $ht=s(BX);cCr=r($ht,"FlaxElectraForTokenClassification"),$ht.forEach(t),fCr=r(X0e," (ELECTRA model)"),X0e.forEach(t),mCr=i(ta),GF=n(ta,"LI",{});var z0e=s(GF);mbe=n(z0e,"STRONG",{});var Iht=s(mbe);gCr=r(Iht,"roberta"),Iht.forEach(t),hCr=r(z0e," \u2014 "),kX=n(z0e,"A",{href:!0});var jht=s(kX);pCr=r(jht,"FlaxRobertaForTokenClassification"),jht.forEach(t),_Cr=r(z0e," (RoBERTa model)"),z0e.forEach(t),uCr=i(ta),OF=n(ta,"LI",{});var V0e=s(OF);gbe=n(V0e,"STRONG",{});var Nht=s(gbe);bCr=r(Nht,"roformer"),Nht.forEach(t),vCr=r(V0e," \u2014 "),xX=n(V0e,"A",{href:!0});var Dht=s(xX);TCr=r(Dht,"FlaxRoFormerForTokenClassification"),Dht.forEach(t),FCr=r(V0e," (RoFormer model)"),V0e.forEach(t),ta.forEach(t),CCr=i(ka),hbe=n(ka,"P",{});var qht=s(hbe);MCr=r(qht,"Examples:"),qht.forEach(t),ECr=i(ka),m(g6.$$.fragment,ka),ka.forEach(t),pi.forEach(t),H9e=i(d),ff=n(d,"H2",{class:!0});var txe=s(ff);XF=n(txe,"A",{id:!0,class:!0,href:!0});var Ght=s(XF);pbe=n(Ght,"SPAN",{});var Oht=s(pbe);m(h6.$$.fragment,Oht),Oht.forEach(t),Ght.forEach(t),yCr=i(txe),_be=n(txe,"SPAN",{});var Xht=s(_be);wCr=r(Xht,"FlaxAutoModelForMultipleChoice"),Xht.forEach(t),txe.forEach(t),U9e=i(d),Pr=n(d,"DIV",{class:!0});var ui=s(Pr);m(p6.$$.fragment,ui),ACr=i(ui),mf=n(ui,"P",{});var AV=s(mf);LCr=r(AV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ube=n(AV,"CODE",{});var zht=s(ube);BCr=r(zht,"from_pretrained()"),zht.forEach(t),kCr=r(AV,"class method or the "),bbe=n(AV,"CODE",{});var Vht=s(bbe);xCr=r(Vht,"from_config()"),Vht.forEach(t),RCr=r(AV,`class
method.`),AV.forEach(t),SCr=i(ui),_6=n(ui,"P",{});var axe=s(_6);PCr=r(axe,"This class cannot be instantiated directly using "),vbe=n(axe,"CODE",{});var Wht=s(vbe);$Cr=r(Wht,"__init__()"),Wht.forEach(t),ICr=r(axe," (throws an error)."),axe.forEach(t),jCr=i(ui),At=n(ui,"DIV",{class:!0});var bi=s(At);m(u6.$$.fragment,bi),NCr=i(bi),Tbe=n(bi,"P",{});var Qht=s(Tbe);DCr=r(Qht,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Qht.forEach(t),qCr=i(bi),gf=n(bi,"P",{});var LV=s(gf);GCr=r(LV,`Note:
Loading a model from its configuration file does `),Fbe=n(LV,"STRONG",{});var Hht=s(Fbe);OCr=r(Hht,"not"),Hht.forEach(t),XCr=r(LV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cbe=n(LV,"CODE",{});var Uht=s(Cbe);zCr=r(Uht,"from_pretrained()"),Uht.forEach(t),VCr=r(LV,"to load the model weights."),LV.forEach(t),WCr=i(bi),Mbe=n(bi,"P",{});var Jht=s(Mbe);QCr=r(Jht,"Examples:"),Jht.forEach(t),HCr=i(bi),m(b6.$$.fragment,bi),bi.forEach(t),UCr=i(ui),Po=n(ui,"DIV",{class:!0});var xa=s(Po);m(v6.$$.fragment,xa),JCr=i(xa),Ebe=n(xa,"P",{});var Yht=s(Ebe);YCr=r(Yht,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Yht.forEach(t),KCr=i(xa),kn=n(xa,"P",{});var YC=s(kn);ZCr=r(YC,"The model class to instantiate is selected based on the "),ybe=n(YC,"CODE",{});var Kht=s(ybe);eMr=r(Kht,"model_type"),Kht.forEach(t),oMr=r(YC,` property of the config object (either
passed as an argument or loaded from `),wbe=n(YC,"CODE",{});var Zht=s(wbe);rMr=r(Zht,"pretrained_model_name_or_path"),Zht.forEach(t),tMr=r(YC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=n(YC,"CODE",{});var ept=s(Abe);aMr=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),nMr=r(YC,":"),YC.forEach(t),sMr=i(xa),lo=n(xa,"UL",{});var aa=s(lo);zF=n(aa,"LI",{});var W0e=s(zF);Lbe=n(W0e,"STRONG",{});var opt=s(Lbe);lMr=r(opt,"albert"),opt.forEach(t),iMr=r(W0e," \u2014 "),RX=n(W0e,"A",{href:!0});var rpt=s(RX);dMr=r(rpt,"FlaxAlbertForMultipleChoice"),rpt.forEach(t),cMr=r(W0e," (ALBERT model)"),W0e.forEach(t),fMr=i(aa),VF=n(aa,"LI",{});var Q0e=s(VF);Bbe=n(Q0e,"STRONG",{});var tpt=s(Bbe);mMr=r(tpt,"bert"),tpt.forEach(t),gMr=r(Q0e," \u2014 "),SX=n(Q0e,"A",{href:!0});var apt=s(SX);hMr=r(apt,"FlaxBertForMultipleChoice"),apt.forEach(t),pMr=r(Q0e," (BERT model)"),Q0e.forEach(t),_Mr=i(aa),WF=n(aa,"LI",{});var H0e=s(WF);kbe=n(H0e,"STRONG",{});var npt=s(kbe);uMr=r(npt,"big_bird"),npt.forEach(t),bMr=r(H0e," \u2014 "),PX=n(H0e,"A",{href:!0});var spt=s(PX);vMr=r(spt,"FlaxBigBirdForMultipleChoice"),spt.forEach(t),TMr=r(H0e," (BigBird model)"),H0e.forEach(t),FMr=i(aa),QF=n(aa,"LI",{});var U0e=s(QF);xbe=n(U0e,"STRONG",{});var lpt=s(xbe);CMr=r(lpt,"distilbert"),lpt.forEach(t),MMr=r(U0e," \u2014 "),$X=n(U0e,"A",{href:!0});var ipt=s($X);EMr=r(ipt,"FlaxDistilBertForMultipleChoice"),ipt.forEach(t),yMr=r(U0e," (DistilBERT model)"),U0e.forEach(t),wMr=i(aa),HF=n(aa,"LI",{});var J0e=s(HF);Rbe=n(J0e,"STRONG",{});var dpt=s(Rbe);AMr=r(dpt,"electra"),dpt.forEach(t),LMr=r(J0e," \u2014 "),IX=n(J0e,"A",{href:!0});var cpt=s(IX);BMr=r(cpt,"FlaxElectraForMultipleChoice"),cpt.forEach(t),kMr=r(J0e," (ELECTRA model)"),J0e.forEach(t),xMr=i(aa),UF=n(aa,"LI",{});var Y0e=s(UF);Sbe=n(Y0e,"STRONG",{});var fpt=s(Sbe);RMr=r(fpt,"roberta"),fpt.forEach(t),SMr=r(Y0e," \u2014 "),jX=n(Y0e,"A",{href:!0});var mpt=s(jX);PMr=r(mpt,"FlaxRobertaForMultipleChoice"),mpt.forEach(t),$Mr=r(Y0e," (RoBERTa model)"),Y0e.forEach(t),IMr=i(aa),JF=n(aa,"LI",{});var K0e=s(JF);Pbe=n(K0e,"STRONG",{});var gpt=s(Pbe);jMr=r(gpt,"roformer"),gpt.forEach(t),NMr=r(K0e," \u2014 "),NX=n(K0e,"A",{href:!0});var hpt=s(NX);DMr=r(hpt,"FlaxRoFormerForMultipleChoice"),hpt.forEach(t),qMr=r(K0e," (RoFormer model)"),K0e.forEach(t),aa.forEach(t),GMr=i(xa),$be=n(xa,"P",{});var ppt=s($be);OMr=r(ppt,"Examples:"),ppt.forEach(t),XMr=i(xa),m(T6.$$.fragment,xa),xa.forEach(t),ui.forEach(t),J9e=i(d),hf=n(d,"H2",{class:!0});var nxe=s(hf);YF=n(nxe,"A",{id:!0,class:!0,href:!0});var _pt=s(YF);Ibe=n(_pt,"SPAN",{});var upt=s(Ibe);m(F6.$$.fragment,upt),upt.forEach(t),_pt.forEach(t),zMr=i(nxe),jbe=n(nxe,"SPAN",{});var bpt=s(jbe);VMr=r(bpt,"FlaxAutoModelForNextSentencePrediction"),bpt.forEach(t),nxe.forEach(t),Y9e=i(d),$r=n(d,"DIV",{class:!0});var vi=s($r);m(C6.$$.fragment,vi),WMr=i(vi),pf=n(vi,"P",{});var BV=s(pf);QMr=r(BV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Nbe=n(BV,"CODE",{});var vpt=s(Nbe);HMr=r(vpt,"from_pretrained()"),vpt.forEach(t),UMr=r(BV,"class method or the "),Dbe=n(BV,"CODE",{});var Tpt=s(Dbe);JMr=r(Tpt,"from_config()"),Tpt.forEach(t),YMr=r(BV,`class
method.`),BV.forEach(t),KMr=i(vi),M6=n(vi,"P",{});var sxe=s(M6);ZMr=r(sxe,"This class cannot be instantiated directly using "),qbe=n(sxe,"CODE",{});var Fpt=s(qbe);eEr=r(Fpt,"__init__()"),Fpt.forEach(t),oEr=r(sxe," (throws an error)."),sxe.forEach(t),rEr=i(vi),Lt=n(vi,"DIV",{class:!0});var Ti=s(Lt);m(E6.$$.fragment,Ti),tEr=i(Ti),Gbe=n(Ti,"P",{});var Cpt=s(Gbe);aEr=r(Cpt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Cpt.forEach(t),nEr=i(Ti),_f=n(Ti,"P",{});var kV=s(_f);sEr=r(kV,`Note:
Loading a model from its configuration file does `),Obe=n(kV,"STRONG",{});var Mpt=s(Obe);lEr=r(Mpt,"not"),Mpt.forEach(t),iEr=r(kV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xbe=n(kV,"CODE",{});var Ept=s(Xbe);dEr=r(Ept,"from_pretrained()"),Ept.forEach(t),cEr=r(kV,"to load the model weights."),kV.forEach(t),fEr=i(Ti),zbe=n(Ti,"P",{});var ypt=s(zbe);mEr=r(ypt,"Examples:"),ypt.forEach(t),gEr=i(Ti),m(y6.$$.fragment,Ti),Ti.forEach(t),hEr=i(vi),$o=n(vi,"DIV",{class:!0});var Ra=s($o);m(w6.$$.fragment,Ra),pEr=i(Ra),Vbe=n(Ra,"P",{});var wpt=s(Vbe);_Er=r(wpt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wpt.forEach(t),uEr=i(Ra),xn=n(Ra,"P",{});var KC=s(xn);bEr=r(KC,"The model class to instantiate is selected based on the "),Wbe=n(KC,"CODE",{});var Apt=s(Wbe);vEr=r(Apt,"model_type"),Apt.forEach(t),TEr=r(KC,` property of the config object (either
passed as an argument or loaded from `),Qbe=n(KC,"CODE",{});var Lpt=s(Qbe);FEr=r(Lpt,"pretrained_model_name_or_path"),Lpt.forEach(t),CEr=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=n(KC,"CODE",{});var Bpt=s(Hbe);MEr=r(Bpt,"pretrained_model_name_or_path"),Bpt.forEach(t),EEr=r(KC,":"),KC.forEach(t),yEr=i(Ra),Ube=n(Ra,"UL",{});var kpt=s(Ube);KF=n(kpt,"LI",{});var Z0e=s(KF);Jbe=n(Z0e,"STRONG",{});var xpt=s(Jbe);wEr=r(xpt,"bert"),xpt.forEach(t),AEr=r(Z0e," \u2014 "),DX=n(Z0e,"A",{href:!0});var Rpt=s(DX);LEr=r(Rpt,"FlaxBertForNextSentencePrediction"),Rpt.forEach(t),BEr=r(Z0e," (BERT model)"),Z0e.forEach(t),kpt.forEach(t),kEr=i(Ra),Ybe=n(Ra,"P",{});var Spt=s(Ybe);xEr=r(Spt,"Examples:"),Spt.forEach(t),REr=i(Ra),m(A6.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),K9e=i(d),uf=n(d,"H2",{class:!0});var lxe=s(uf);ZF=n(lxe,"A",{id:!0,class:!0,href:!0});var Ppt=s(ZF);Kbe=n(Ppt,"SPAN",{});var $pt=s(Kbe);m(L6.$$.fragment,$pt),$pt.forEach(t),Ppt.forEach(t),SEr=i(lxe),Zbe=n(lxe,"SPAN",{});var Ipt=s(Zbe);PEr=r(Ipt,"FlaxAutoModelForImageClassification"),Ipt.forEach(t),lxe.forEach(t),Z9e=i(d),Ir=n(d,"DIV",{class:!0});var Fi=s(Ir);m(B6.$$.fragment,Fi),$Er=i(Fi),bf=n(Fi,"P",{});var xV=s(bf);IEr=r(xV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),e5e=n(xV,"CODE",{});var jpt=s(e5e);jEr=r(jpt,"from_pretrained()"),jpt.forEach(t),NEr=r(xV,"class method or the "),o5e=n(xV,"CODE",{});var Npt=s(o5e);DEr=r(Npt,"from_config()"),Npt.forEach(t),qEr=r(xV,`class
method.`),xV.forEach(t),GEr=i(Fi),k6=n(Fi,"P",{});var ixe=s(k6);OEr=r(ixe,"This class cannot be instantiated directly using "),r5e=n(ixe,"CODE",{});var Dpt=s(r5e);XEr=r(Dpt,"__init__()"),Dpt.forEach(t),zEr=r(ixe," (throws an error)."),ixe.forEach(t),VEr=i(Fi),Bt=n(Fi,"DIV",{class:!0});var Ci=s(Bt);m(x6.$$.fragment,Ci),WEr=i(Ci),t5e=n(Ci,"P",{});var qpt=s(t5e);QEr=r(qpt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qpt.forEach(t),HEr=i(Ci),vf=n(Ci,"P",{});var RV=s(vf);UEr=r(RV,`Note:
Loading a model from its configuration file does `),a5e=n(RV,"STRONG",{});var Gpt=s(a5e);JEr=r(Gpt,"not"),Gpt.forEach(t),YEr=r(RV,` load the model weights. It only affects the
model\u2019s configuration. Use `),n5e=n(RV,"CODE",{});var Opt=s(n5e);KEr=r(Opt,"from_pretrained()"),Opt.forEach(t),ZEr=r(RV,"to load the model weights."),RV.forEach(t),e3r=i(Ci),s5e=n(Ci,"P",{});var Xpt=s(s5e);o3r=r(Xpt,"Examples:"),Xpt.forEach(t),r3r=i(Ci),m(R6.$$.fragment,Ci),Ci.forEach(t),t3r=i(Fi),Io=n(Fi,"DIV",{class:!0});var Sa=s(Io);m(S6.$$.fragment,Sa),a3r=i(Sa),l5e=n(Sa,"P",{});var zpt=s(l5e);n3r=r(zpt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zpt.forEach(t),s3r=i(Sa),Rn=n(Sa,"P",{});var ZC=s(Rn);l3r=r(ZC,"The model class to instantiate is selected based on the "),i5e=n(ZC,"CODE",{});var Vpt=s(i5e);i3r=r(Vpt,"model_type"),Vpt.forEach(t),d3r=r(ZC,` property of the config object (either
passed as an argument or loaded from `),d5e=n(ZC,"CODE",{});var Wpt=s(d5e);c3r=r(Wpt,"pretrained_model_name_or_path"),Wpt.forEach(t),f3r=r(ZC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c5e=n(ZC,"CODE",{});var Qpt=s(c5e);m3r=r(Qpt,"pretrained_model_name_or_path"),Qpt.forEach(t),g3r=r(ZC,":"),ZC.forEach(t),h3r=i(Sa),P6=n(Sa,"UL",{});var dxe=s(P6);eC=n(dxe,"LI",{});var eLe=s(eC);f5e=n(eLe,"STRONG",{});var Hpt=s(f5e);p3r=r(Hpt,"beit"),Hpt.forEach(t),_3r=r(eLe," \u2014 "),qX=n(eLe,"A",{href:!0});var Upt=s(qX);u3r=r(Upt,"FlaxBeitForImageClassification"),Upt.forEach(t),b3r=r(eLe," (BEiT model)"),eLe.forEach(t),v3r=i(dxe),oC=n(dxe,"LI",{});var oLe=s(oC);m5e=n(oLe,"STRONG",{});var Jpt=s(m5e);T3r=r(Jpt,"vit"),Jpt.forEach(t),F3r=r(oLe," \u2014 "),GX=n(oLe,"A",{href:!0});var Ypt=s(GX);C3r=r(Ypt,"FlaxViTForImageClassification"),Ypt.forEach(t),M3r=r(oLe," (ViT model)"),oLe.forEach(t),dxe.forEach(t),E3r=i(Sa),g5e=n(Sa,"P",{});var Kpt=s(g5e);y3r=r(Kpt,"Examples:"),Kpt.forEach(t),w3r=i(Sa),m($6.$$.fragment,Sa),Sa.forEach(t),Fi.forEach(t),eBe=i(d),Tf=n(d,"H2",{class:!0});var cxe=s(Tf);rC=n(cxe,"A",{id:!0,class:!0,href:!0});var Zpt=s(rC);h5e=n(Zpt,"SPAN",{});var e_t=s(h5e);m(I6.$$.fragment,e_t),e_t.forEach(t),Zpt.forEach(t),A3r=i(cxe),p5e=n(cxe,"SPAN",{});var o_t=s(p5e);L3r=r(o_t,"FlaxAutoModelForVision2Seq"),o_t.forEach(t),cxe.forEach(t),oBe=i(d),jr=n(d,"DIV",{class:!0});var Mi=s(jr);m(j6.$$.fragment,Mi),B3r=i(Mi),Ff=n(Mi,"P",{});var SV=s(Ff);k3r=r(SV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_5e=n(SV,"CODE",{});var r_t=s(_5e);x3r=r(r_t,"from_pretrained()"),r_t.forEach(t),R3r=r(SV,"class method or the "),u5e=n(SV,"CODE",{});var t_t=s(u5e);S3r=r(t_t,"from_config()"),t_t.forEach(t),P3r=r(SV,`class
method.`),SV.forEach(t),$3r=i(Mi),N6=n(Mi,"P",{});var fxe=s(N6);I3r=r(fxe,"This class cannot be instantiated directly using "),b5e=n(fxe,"CODE",{});var a_t=s(b5e);j3r=r(a_t,"__init__()"),a_t.forEach(t),N3r=r(fxe," (throws an error)."),fxe.forEach(t),D3r=i(Mi),kt=n(Mi,"DIV",{class:!0});var Ei=s(kt);m(D6.$$.fragment,Ei),q3r=i(Ei),v5e=n(Ei,"P",{});var n_t=s(v5e);G3r=r(n_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),n_t.forEach(t),O3r=i(Ei),Cf=n(Ei,"P",{});var PV=s(Cf);X3r=r(PV,`Note:
Loading a model from its configuration file does `),T5e=n(PV,"STRONG",{});var s_t=s(T5e);z3r=r(s_t,"not"),s_t.forEach(t),V3r=r(PV,` load the model weights. It only affects the
model\u2019s configuration. Use `),F5e=n(PV,"CODE",{});var l_t=s(F5e);W3r=r(l_t,"from_pretrained()"),l_t.forEach(t),Q3r=r(PV,"to load the model weights."),PV.forEach(t),H3r=i(Ei),C5e=n(Ei,"P",{});var i_t=s(C5e);U3r=r(i_t,"Examples:"),i_t.forEach(t),J3r=i(Ei),m(q6.$$.fragment,Ei),Ei.forEach(t),Y3r=i(Mi),jo=n(Mi,"DIV",{class:!0});var Pa=s(jo);m(G6.$$.fragment,Pa),K3r=i(Pa),M5e=n(Pa,"P",{});var d_t=s(M5e);Z3r=r(d_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),d_t.forEach(t),eyr=i(Pa),Sn=n(Pa,"P",{});var eM=s(Sn);oyr=r(eM,"The model class to instantiate is selected based on the "),E5e=n(eM,"CODE",{});var c_t=s(E5e);ryr=r(c_t,"model_type"),c_t.forEach(t),tyr=r(eM,` property of the config object (either
passed as an argument or loaded from `),y5e=n(eM,"CODE",{});var f_t=s(y5e);ayr=r(f_t,"pretrained_model_name_or_path"),f_t.forEach(t),nyr=r(eM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=n(eM,"CODE",{});var m_t=s(w5e);syr=r(m_t,"pretrained_model_name_or_path"),m_t.forEach(t),lyr=r(eM,":"),eM.forEach(t),iyr=i(Pa),A5e=n(Pa,"UL",{});var g_t=s(A5e);tC=n(g_t,"LI",{});var rLe=s(tC);L5e=n(rLe,"STRONG",{});var h_t=s(L5e);dyr=r(h_t,"vision-encoder-decoder"),h_t.forEach(t),cyr=r(rLe," \u2014 "),OX=n(rLe,"A",{href:!0});var p_t=s(OX);fyr=r(p_t,"FlaxVisionEncoderDecoderModel"),p_t.forEach(t),myr=r(rLe," (Vision Encoder decoder model)"),rLe.forEach(t),g_t.forEach(t),gyr=i(Pa),B5e=n(Pa,"P",{});var __t=s(B5e);hyr=r(__t,"Examples:"),__t.forEach(t),pyr=i(Pa),m(O6.$$.fragment,Pa),Pa.forEach(t),Mi.forEach(t),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(y_t)),c(me,"id","auto-classes"),c(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(me,"href","#auto-classes"),c(ie,"class","relative group"),c(Pn,"href","/docs/transformers/pr_15748/en/model_doc/auto#transformers.AutoConfig"),c(In,"href","/docs/transformers/pr_15748/en/model_doc/auto#transformers.AutoModel"),c(jn,"href","/docs/transformers/pr_15748/en/model_doc/auto#transformers.AutoTokenizer"),c(Ri,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertModel"),c(Lf,"id","extending-the-auto-classes"),c(Lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lf,"href","#extending-the-auto-classes"),c(Si,"class","relative group"),c(kf,"id","transformers.AutoConfig"),c(kf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kf,"href","#transformers.AutoConfig"),c(Pi,"class","relative group"),c(V0,"href","/docs/transformers/pr_15748/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(W0,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertConfig"),c(Q0,"href","/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartConfig"),c(H0,"href","/docs/transformers/pr_15748/en/model_doc/beit#transformers.BeitConfig"),c(U0,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertConfig"),c(J0,"href","/docs/transformers/pr_15748/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Y0,"href","/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdConfig"),c(K0,"href","/docs/transformers/pr_15748/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Z0,"href","/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(eL,"href","/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(oL,"href","/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertConfig"),c(rL,"href","/docs/transformers/pr_15748/en/model_doc/canine#transformers.CanineConfig"),c(tL,"href","/docs/transformers/pr_15748/en/model_doc/clip#transformers.CLIPConfig"),c(aL,"href","/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertConfig"),c(nL,"href","/docs/transformers/pr_15748/en/model_doc/convnext#transformers.ConvNextConfig"),c(sL,"href","/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.CTRLConfig"),c(lL,"href","/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaConfig"),c(iL,"href","/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(dL,"href","/docs/transformers/pr_15748/en/model_doc/deit#transformers.DeiTConfig"),c(cL,"href","/docs/transformers/pr_15748/en/model_doc/detr#transformers.DetrConfig"),c(fL,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertConfig"),c(mL,"href","/docs/transformers/pr_15748/en/model_doc/dpr#transformers.DPRConfig"),c(gL,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraConfig"),c(hL,"href","/docs/transformers/pr_15748/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(pL,"href","/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertConfig"),c(_L,"href","/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetConfig"),c(uL,"href","/docs/transformers/pr_15748/en/model_doc/fsmt#transformers.FSMTConfig"),c(bL,"href","/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelConfig"),c(vL,"href","/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2Config"),c(TL,"href","/docs/transformers/pr_15748/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(FL,"href","/docs/transformers/pr_15748/en/model_doc/gptj#transformers.GPTJConfig"),c(CL,"href","/docs/transformers/pr_15748/en/model_doc/hubert#transformers.HubertConfig"),c(ML,"href","/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertConfig"),c(EL,"href","/docs/transformers/pr_15748/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(yL,"href","/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(wL,"href","/docs/transformers/pr_15748/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(AL,"href","/docs/transformers/pr_15748/en/model_doc/led#transformers.LEDConfig"),c(LL,"href","/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerConfig"),c(BL,"href","/docs/transformers/pr_15748/en/model_doc/luke#transformers.LukeConfig"),c(kL,"href","/docs/transformers/pr_15748/en/model_doc/lxmert#transformers.LxmertConfig"),c(xL,"href","/docs/transformers/pr_15748/en/model_doc/m2m_100#transformers.M2M100Config"),c(RL,"href","/docs/transformers/pr_15748/en/model_doc/marian#transformers.MarianConfig"),c(SL,"href","/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartConfig"),c(PL,"href","/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c($L,"href","/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(IL,"href","/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetConfig"),c(jL,"href","/docs/transformers/pr_15748/en/model_doc/mt5#transformers.MT5Config"),c(NL,"href","/docs/transformers/pr_15748/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(DL,"href","/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(qL,"href","/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.PegasusConfig"),c(GL,"href","/docs/transformers/pr_15748/en/model_doc/perceiver#transformers.PerceiverConfig"),c(OL,"href","/docs/transformers/pr_15748/en/model_doc/plbart#transformers.PLBartConfig"),c(XL,"href","/docs/transformers/pr_15748/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(zL,"href","/docs/transformers/pr_15748/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(VL,"href","/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(WL,"href","/docs/transformers/pr_15748/en/model_doc/rag#transformers.RagConfig"),c(QL,"href","/docs/transformers/pr_15748/en/model_doc/realm#transformers.RealmConfig"),c(HL,"href","/docs/transformers/pr_15748/en/model_doc/reformer#transformers.ReformerConfig"),c(UL,"href","/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertConfig"),c(JL,"href","/docs/transformers/pr_15748/en/model_doc/retribert#transformers.RetriBertConfig"),c(YL,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaConfig"),c(KL,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerConfig"),c(ZL,"href","/docs/transformers/pr_15748/en/model_doc/segformer#transformers.SegformerConfig"),c(e9,"href","/docs/transformers/pr_15748/en/model_doc/sew#transformers.SEWConfig"),c(o9,"href","/docs/transformers/pr_15748/en/model_doc/sew-d#transformers.SEWDConfig"),c(r9,"href","/docs/transformers/pr_15748/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(t9,"href","/docs/transformers/pr_15748/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(a9,"href","/docs/transformers/pr_15748/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(n9,"href","/docs/transformers/pr_15748/en/model_doc/splinter#transformers.SplinterConfig"),c(s9,"href","/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(l9,"href","/docs/transformers/pr_15748/en/model_doc/swin#transformers.SwinConfig"),c(i9,"href","/docs/transformers/pr_15748/en/model_doc/t5#transformers.T5Config"),c(d9,"href","/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasConfig"),c(c9,"href","/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(f9,"href","/docs/transformers/pr_15748/en/model_doc/trocr#transformers.TrOCRConfig"),c(m9,"href","/docs/transformers/pr_15748/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(g9,"href","/docs/transformers/pr_15748/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(h9,"href","/docs/transformers/pr_15748/en/model_doc/vilt#transformers.ViltConfig"),c(p9,"href","/docs/transformers/pr_15748/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(_9,"href","/docs/transformers/pr_15748/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(u9,"href","/docs/transformers/pr_15748/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(b9,"href","/docs/transformers/pr_15748/en/model_doc/vit#transformers.ViTConfig"),c(v9,"href","/docs/transformers/pr_15748/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(T9,"href","/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(F9,"href","/docs/transformers/pr_15748/en/model_doc/wavlm#transformers.WavLMConfig"),c(C9,"href","/docs/transformers/pr_15748/en/model_doc/xglm#transformers.XGLMConfig"),c(M9,"href","/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMConfig"),c(E9,"href","/docs/transformers/pr_15748/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(y9,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(w9,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(A9,"href","/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetConfig"),c(L9,"href","/docs/transformers/pr_15748/en/model_doc/yoso#transformers.YosoConfig"),c(fo,"class","docstring"),c(hg,"class","docstring"),c(Go,"class","docstring"),c(pg,"id","transformers.AutoTokenizer"),c(pg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pg,"href","#transformers.AutoTokenizer"),c(Ii,"class","relative group"),c(B9,"href","/docs/transformers/pr_15748/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(k9,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertTokenizer"),c(x9,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(R9,"href","/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartTokenizer"),c(S9,"href","/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartTokenizerFast"),c(P9,"href","/docs/transformers/pr_15748/en/model_doc/barthez#transformers.BarthezTokenizer"),c($9,"href","/docs/transformers/pr_15748/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(I9,"href","/docs/transformers/pr_15748/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(j9,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertTokenizer"),c(N9,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertTokenizerFast"),c(D9,"href","/docs/transformers/pr_15748/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(q9,"href","/docs/transformers/pr_15748/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(G9,"href","/docs/transformers/pr_15748/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(O9,"href","/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(X9,"href","/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(z9,"href","/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(V9,"href","/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(W9,"href","/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(Q9,"href","/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(H9,"href","/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(U9,"href","/docs/transformers/pr_15748/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(J9,"href","/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertTokenizer"),c(Y9,"href","/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(K9,"href","/docs/transformers/pr_15748/en/model_doc/canine#transformers.CanineTokenizer"),c(Z9,"href","/docs/transformers/pr_15748/en/model_doc/clip#transformers.CLIPTokenizer"),c(eB,"href","/docs/transformers/pr_15748/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(oB,"href","/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(rB,"href","/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(tB,"href","/docs/transformers/pr_15748/en/model_doc/cpm#transformers.CpmTokenizer"),c(aB,"href","/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(nB,"href","/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaTokenizer"),c(sB,"href","/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(lB,"href","/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(iB,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(dB,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(cB,"href","/docs/transformers/pr_15748/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(fB,"href","/docs/transformers/pr_15748/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(mB,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraTokenizer"),c(gB,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(hB,"href","/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(pB,"href","/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetTokenizer"),c(_B,"href","/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(uB,"href","/docs/transformers/pr_15748/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(bB,"href","/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelTokenizer"),c(vB,"href","/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(TB,"href","/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(FB,"href","/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(CB,"href","/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(MB,"href","/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(EB,"href","/docs/transformers/pr_15748/en/model_doc/herbert#transformers.HerbertTokenizer"),c(yB,"href","/docs/transformers/pr_15748/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(wB,"href","/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(AB,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaTokenizer"),c(LB,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BB,"href","/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(kB,"href","/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(xB,"href","/docs/transformers/pr_15748/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(RB,"href","/docs/transformers/pr_15748/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(SB,"href","/docs/transformers/pr_15748/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(PB,"href","/docs/transformers/pr_15748/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c($B,"href","/docs/transformers/pr_15748/en/model_doc/led#transformers.LEDTokenizer"),c(IB,"href","/docs/transformers/pr_15748/en/model_doc/led#transformers.LEDTokenizerFast"),c(jB,"href","/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerTokenizer"),c(NB,"href","/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(DB,"href","/docs/transformers/pr_15748/en/model_doc/luke#transformers.LukeTokenizer"),c(qB,"href","/docs/transformers/pr_15748/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(GB,"href","/docs/transformers/pr_15748/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(OB,"href","/docs/transformers/pr_15748/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(XB,"href","/docs/transformers/pr_15748/en/model_doc/marian#transformers.MarianTokenizer"),c(zB,"href","/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartTokenizer"),c(VB,"href","/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(WB,"href","/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(QB,"href","/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(HB,"href","/docs/transformers/pr_15748/en/model_doc/mluke#transformers.MLukeTokenizer"),c(UB,"href","/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(JB,"href","/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(YB,"href","/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(KB,"href","/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(ZB,"href","/docs/transformers/pr_15748/en/model_doc/mt5#transformers.T5Tokenizer"),c(ek,"href","/docs/transformers/pr_15748/en/model_doc/mt5#transformers.T5TokenizerFast"),c(ok,"href","/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(rk,"href","/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(tk,"href","/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ak,"href","/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(nk,"href","/docs/transformers/pr_15748/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(sk,"href","/docs/transformers/pr_15748/en/model_doc/phobert#transformers.PhobertTokenizer"),c(lk,"href","/docs/transformers/pr_15748/en/model_doc/plbart#transformers.PLBartTokenizer"),c(ik,"href","/docs/transformers/pr_15748/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(dk,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertTokenizer"),c(ck,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertTokenizerFast"),c(fk,"href","/docs/transformers/pr_15748/en/model_doc/rag#transformers.RagTokenizer"),c(mk,"href","/docs/transformers/pr_15748/en/model_doc/reformer#transformers.ReformerTokenizer"),c(gk,"href","/docs/transformers/pr_15748/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(hk,"href","/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertTokenizer"),c(pk,"href","/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(_k,"href","/docs/transformers/pr_15748/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(uk,"href","/docs/transformers/pr_15748/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(bk,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaTokenizer"),c(vk,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Tk,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Fk,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Ck,"href","/docs/transformers/pr_15748/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Mk,"href","/docs/transformers/pr_15748/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Ek,"href","/docs/transformers/pr_15748/en/model_doc/splinter#transformers.SplinterTokenizer"),c(yk,"href","/docs/transformers/pr_15748/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(wk,"href","/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(Ak,"href","/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(Lk,"href","/docs/transformers/pr_15748/en/model_doc/mt5#transformers.T5Tokenizer"),c(Bk,"href","/docs/transformers/pr_15748/en/model_doc/mt5#transformers.T5TokenizerFast"),c(kk,"href","/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasTokenizer"),c(xk,"href","/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(Rk,"href","/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Sk,"href","/docs/transformers/pr_15748/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(Pk,"href","/docs/transformers/pr_15748/en/model_doc/xglm#transformers.XGLMTokenizer"),c($k,"href","/docs/transformers/pr_15748/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(Ik,"href","/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMTokenizer"),c(jk,"href","/docs/transformers/pr_15748/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(Nk,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(Dk,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(qk,"href","/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Gk,"href","/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(mo,"class","docstring"),c(Vg,"class","docstring"),c(Oo,"class","docstring"),c(Wg,"id","transformers.AutoFeatureExtractor"),c(Wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wg,"href","#transformers.AutoFeatureExtractor"),c(ji,"class","relative group"),c(Ok,"href","/docs/transformers/pr_15748/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Xk,"href","/docs/transformers/pr_15748/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(zk,"href","/docs/transformers/pr_15748/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Vk,"href","/docs/transformers/pr_15748/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Wk,"href","/docs/transformers/pr_15748/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Qk,"href","/docs/transformers/pr_15748/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(Hk,"href","/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Uk,"href","/docs/transformers/pr_15748/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Jk,"href","/docs/transformers/pr_15748/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Yk,"href","/docs/transformers/pr_15748/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Kk,"href","/docs/transformers/pr_15748/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Zk,"href","/docs/transformers/pr_15748/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(ex,"href","/docs/transformers/pr_15748/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(ox,"href","/docs/transformers/pr_15748/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(rx,"href","/docs/transformers/pr_15748/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(tx,"href","/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Le,"class","docstring"),c(dh,"class","docstring"),c(Xo,"class","docstring"),c(ch,"id","transformers.AutoProcessor"),c(ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ch,"href","#transformers.AutoProcessor"),c(Ni,"class","relative group"),c(ax,"href","/docs/transformers/pr_15748/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(nx,"href","/docs/transformers/pr_15748/en/model_doc/clip#transformers.CLIPProcessor"),c(sx,"href","/docs/transformers/pr_15748/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(lx,"href","/docs/transformers/pr_15748/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(ix,"href","/docs/transformers/pr_15748/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(dx,"href","/docs/transformers/pr_15748/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(cx,"href","/docs/transformers/pr_15748/en/model_doc/trocr#transformers.TrOCRProcessor"),c(fx,"href","/docs/transformers/pr_15748/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(mx,"href","/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Be,"class","docstring"),c(Th,"class","docstring"),c(zo,"class","docstring"),c(Fh,"id","transformers.AutoModel"),c(Fh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fh,"href","#transformers.AutoModel"),c(qi,"class","relative group"),c(Nr,"class","docstring"),c(gx,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertModel"),c(hx,"href","/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartModel"),c(px,"href","/docs/transformers/pr_15748/en/model_doc/beit#transformers.BeitModel"),c(_x,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertModel"),c(ux,"href","/docs/transformers/pr_15748/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(bx,"href","/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdModel"),c(vx,"href","/docs/transformers/pr_15748/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(Tx,"href","/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Fx,"href","/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Cx,"href","/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertModel"),c(Mx,"href","/docs/transformers/pr_15748/en/model_doc/canine#transformers.CanineModel"),c(Ex,"href","/docs/transformers/pr_15748/en/model_doc/clip#transformers.CLIPModel"),c(yx,"href","/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertModel"),c(wx,"href","/docs/transformers/pr_15748/en/model_doc/convnext#transformers.ConvNextModel"),c(Ax,"href","/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.CTRLModel"),c(Lx,"href","/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaModel"),c(Bx,"href","/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(kx,"href","/docs/transformers/pr_15748/en/model_doc/deit#transformers.DeiTModel"),c(xx,"href","/docs/transformers/pr_15748/en/model_doc/detr#transformers.DetrModel"),c(Rx,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertModel"),c(Sx,"href","/docs/transformers/pr_15748/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Px,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraModel"),c($x,"href","/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertModel"),c(Ix,"href","/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetModel"),c(jx,"href","/docs/transformers/pr_15748/en/model_doc/fsmt#transformers.FSMTModel"),c(Nx,"href","/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelModel"),c(Dx,"href","/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelBaseModel"),c(qx,"href","/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2Model"),c(Gx,"href","/docs/transformers/pr_15748/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Ox,"href","/docs/transformers/pr_15748/en/model_doc/gptj#transformers.GPTJModel"),c(Xx,"href","/docs/transformers/pr_15748/en/model_doc/hubert#transformers.HubertModel"),c(zx,"href","/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertModel"),c(Vx,"href","/docs/transformers/pr_15748/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Wx,"href","/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Qx,"href","/docs/transformers/pr_15748/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Hx,"href","/docs/transformers/pr_15748/en/model_doc/led#transformers.LEDModel"),c(Ux,"href","/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerModel"),c(Jx,"href","/docs/transformers/pr_15748/en/model_doc/luke#transformers.LukeModel"),c(Yx,"href","/docs/transformers/pr_15748/en/model_doc/lxmert#transformers.LxmertModel"),c(Kx,"href","/docs/transformers/pr_15748/en/model_doc/m2m_100#transformers.M2M100Model"),c(Zx,"href","/docs/transformers/pr_15748/en/model_doc/marian#transformers.MarianModel"),c(eR,"href","/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartModel"),c(oR,"href","/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(rR,"href","/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertModel"),c(tR,"href","/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetModel"),c(aR,"href","/docs/transformers/pr_15748/en/model_doc/mt5#transformers.MT5Model"),c(nR,"href","/docs/transformers/pr_15748/en/model_doc/nystromformer#transformers.NystromformerModel"),c(sR,"href","/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(lR,"href","/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.PegasusModel"),c(iR,"href","/docs/transformers/pr_15748/en/model_doc/perceiver#transformers.PerceiverModel"),c(dR,"href","/docs/transformers/pr_15748/en/model_doc/plbart#transformers.PLBartModel"),c(cR,"href","/docs/transformers/pr_15748/en/model_doc/poolformer#transformers.PoolFormerModel"),c(fR,"href","/docs/transformers/pr_15748/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(mR,"href","/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertModel"),c(gR,"href","/docs/transformers/pr_15748/en/model_doc/reformer#transformers.ReformerModel"),c(hR,"href","/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertModel"),c(pR,"href","/docs/transformers/pr_15748/en/model_doc/retribert#transformers.RetriBertModel"),c(_R,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaModel"),c(uR,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerModel"),c(bR,"href","/docs/transformers/pr_15748/en/model_doc/segformer#transformers.SegformerModel"),c(vR,"href","/docs/transformers/pr_15748/en/model_doc/sew#transformers.SEWModel"),c(TR,"href","/docs/transformers/pr_15748/en/model_doc/sew-d#transformers.SEWDModel"),c(FR,"href","/docs/transformers/pr_15748/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(CR,"href","/docs/transformers/pr_15748/en/model_doc/splinter#transformers.SplinterModel"),c(MR,"href","/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(ER,"href","/docs/transformers/pr_15748/en/model_doc/swin#transformers.SwinModel"),c(yR,"href","/docs/transformers/pr_15748/en/model_doc/t5#transformers.T5Model"),c(wR,"href","/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasModel"),c(AR,"href","/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(LR,"href","/docs/transformers/pr_15748/en/model_doc/unispeech#transformers.UniSpeechModel"),c(BR,"href","/docs/transformers/pr_15748/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(kR,"href","/docs/transformers/pr_15748/en/model_doc/vilt#transformers.ViltModel"),c(xR,"href","/docs/transformers/pr_15748/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(RR,"href","/docs/transformers/pr_15748/en/model_doc/visual_bert#transformers.VisualBertModel"),c(SR,"href","/docs/transformers/pr_15748/en/model_doc/vit#transformers.ViTModel"),c(PR,"href","/docs/transformers/pr_15748/en/model_doc/vit_mae#transformers.ViTMAEModel"),c($R,"href","/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(IR,"href","/docs/transformers/pr_15748/en/model_doc/wavlm#transformers.WavLMModel"),c(jR,"href","/docs/transformers/pr_15748/en/model_doc/xglm#transformers.XGLMModel"),c(NR,"href","/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMModel"),c(DR,"href","/docs/transformers/pr_15748/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(qR,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(GR,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(OR,"href","/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetModel"),c(XR,"href","/docs/transformers/pr_15748/en/model_doc/yoso#transformers.YosoModel"),c(ke,"class","docstring"),c(Vo,"class","docstring"),c(Kp,"id","transformers.AutoModelForPreTraining"),c(Kp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kp,"href","#transformers.AutoModelForPreTraining"),c(Xi,"class","relative group"),c(Dr,"class","docstring"),c(zR,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertForPreTraining"),c(VR,"href","/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(WR,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertForPreTraining"),c(QR,"href","/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(HR,"href","/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(UR,"href","/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(JR,"href","/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(YR,"href","/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(KR,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(ZR,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraForPreTraining"),c(eS,"href","/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(oS,"href","/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetForPreTraining"),c(rS,"href","/docs/transformers/pr_15748/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(tS,"href","/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(aS,"href","/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(nS,"href","/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(sS,"href","/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(lS,"href","/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(iS,"href","/docs/transformers/pr_15748/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(dS,"href","/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(cS,"href","/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(fS,"href","/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(mS,"href","/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(gS,"href","/docs/transformers/pr_15748/en/model_doc/retribert#transformers.RetriBertModel"),c(hS,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(pS,"href","/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(_S,"href","/docs/transformers/pr_15748/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(uS,"href","/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(bS,"href","/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(vS,"href","/docs/transformers/pr_15748/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(TS,"href","/docs/transformers/pr_15748/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(FS,"href","/docs/transformers/pr_15748/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(CS,"href","/docs/transformers/pr_15748/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(MS,"href","/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(ES,"href","/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(yS,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(wS,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(AS,"href","/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(xe,"class","docstring"),c(Wo,"class","docstring"),c(N_,"id","transformers.AutoModelForCausalLM"),c(N_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N_,"href","#transformers.AutoModelForCausalLM"),c(Wi,"class","relative group"),c(qr,"class","docstring"),c(LS,"href","/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartForCausalLM"),c(BS,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertLMHeadModel"),c(kS,"href","/docs/transformers/pr_15748/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(xS,"href","/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(RS,"href","/docs/transformers/pr_15748/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(SS,"href","/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(PS,"href","/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c($S,"href","/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(IS,"href","/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(jS,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraForCausalLM"),c(NS,"href","/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(DS,"href","/docs/transformers/pr_15748/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(qS,"href","/docs/transformers/pr_15748/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(GS,"href","/docs/transformers/pr_15748/en/model_doc/marian#transformers.MarianForCausalLM"),c(OS,"href","/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartForCausalLM"),c(XS,"href","/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(zS,"href","/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(VS,"href","/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(WS,"href","/docs/transformers/pr_15748/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(QS,"href","/docs/transformers/pr_15748/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(HS,"href","/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(US,"href","/docs/transformers/pr_15748/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(JS,"href","/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(YS,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(KS,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(ZS,"href","/docs/transformers/pr_15748/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(eP,"href","/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(oP,"href","/docs/transformers/pr_15748/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(rP,"href","/docs/transformers/pr_15748/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(tP,"href","/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(aP,"href","/docs/transformers/pr_15748/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(nP,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(sP,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(lP,"href","/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Re,"class","docstring"),c(Qo,"class","docstring"),c(Tu,"id","transformers.AutoModelForMaskedLM"),c(Tu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tu,"href","#transformers.AutoModelForMaskedLM"),c(Ui,"class","relative group"),c(Gr,"class","docstring"),c(iP,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(dP,"href","/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(cP,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertForMaskedLM"),c(fP,"href","/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(mP,"href","/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(gP,"href","/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(hP,"href","/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(pP,"href","/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(_P,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(uP,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(bP,"href","/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(vP,"href","/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(TP,"href","/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(FP,"href","/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(CP,"href","/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(MP,"href","/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(EP,"href","/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(yP,"href","/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(wP,"href","/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(AP,"href","/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(LP,"href","/docs/transformers/pr_15748/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(BP,"href","/docs/transformers/pr_15748/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(kP,"href","/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(xP,"href","/docs/transformers/pr_15748/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(RP,"href","/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(SP,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(PP,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c($P,"href","/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(IP,"href","/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(jP,"href","/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(NP,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(DP,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(qP,"href","/docs/transformers/pr_15748/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Se,"class","docstring"),c(Ho,"class","docstring"),c(r1,"id","transformers.AutoModelForSeq2SeqLM"),c(r1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ki,"class","relative group"),c(Or,"class","docstring"),c(GP,"href","/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(OP,"href","/docs/transformers/pr_15748/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(XP,"href","/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(zP,"href","/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(VP,"href","/docs/transformers/pr_15748/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(WP,"href","/docs/transformers/pr_15748/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(QP,"href","/docs/transformers/pr_15748/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(HP,"href","/docs/transformers/pr_15748/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(UP,"href","/docs/transformers/pr_15748/en/model_doc/marian#transformers.MarianMTModel"),c(JP,"href","/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(YP,"href","/docs/transformers/pr_15748/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(KP,"href","/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(ZP,"href","/docs/transformers/pr_15748/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(e$,"href","/docs/transformers/pr_15748/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(o$,"href","/docs/transformers/pr_15748/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(r$,"href","/docs/transformers/pr_15748/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Pe,"class","docstring"),c(Uo,"class","docstring"),c(T1,"id","transformers.AutoModelForSequenceClassification"),c(T1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T1,"href","#transformers.AutoModelForSequenceClassification"),c(od,"class","relative group"),c(Xr,"class","docstring"),c(t$,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(a$,"href","/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartForSequenceClassification"),c(n$,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertForSequenceClassification"),c(s$,"href","/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(l$,"href","/docs/transformers/pr_15748/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(i$,"href","/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(d$,"href","/docs/transformers/pr_15748/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(c$,"href","/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(f$,"href","/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(m$,"href","/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(g$,"href","/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(h$,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(p$,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(_$,"href","/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(u$,"href","/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(b$,"href","/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(v$,"href","/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(T$,"href","/docs/transformers/pr_15748/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(F$,"href","/docs/transformers/pr_15748/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(C$,"href","/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(M$,"href","/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(E$,"href","/docs/transformers/pr_15748/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(y$,"href","/docs/transformers/pr_15748/en/model_doc/led#transformers.LEDForSequenceClassification"),c(w$,"href","/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(A$,"href","/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(L$,"href","/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(B$,"href","/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(k$,"href","/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(x$,"href","/docs/transformers/pr_15748/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(R$,"href","/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(S$,"href","/docs/transformers/pr_15748/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(P$,"href","/docs/transformers/pr_15748/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c($$,"href","/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(I$,"href","/docs/transformers/pr_15748/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(j$,"href","/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(N$,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(D$,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(q$,"href","/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(G$,"href","/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(O$,"href","/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(X$,"href","/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(z$,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(V$,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(W$,"href","/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(Q$,"href","/docs/transformers/pr_15748/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c($e,"class","docstring"),c(Jo,"class","docstring"),c(g4,"id","transformers.AutoModelForMultipleChoice"),c(g4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g4,"href","#transformers.AutoModelForMultipleChoice"),c(ad,"class","relative group"),c(zr,"class","docstring"),c(H$,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(U$,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertForMultipleChoice"),c(J$,"href","/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(Y$,"href","/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(K$,"href","/docs/transformers/pr_15748/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(Z$,"href","/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(eI,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(oI,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(rI,"href","/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(tI,"href","/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(aI,"href","/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(nI,"href","/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(sI,"href","/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(lI,"href","/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(iI,"href","/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(dI,"href","/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(cI,"href","/docs/transformers/pr_15748/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(fI,"href","/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(mI,"href","/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(gI,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(hI,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(pI,"href","/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(_I,"href","/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(uI,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(bI,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(vI,"href","/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(TI,"href","/docs/transformers/pr_15748/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ie,"class","docstring"),c(Yo,"class","docstring"),c(O4,"id","transformers.AutoModelForNextSentencePrediction"),c(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O4,"href","#transformers.AutoModelForNextSentencePrediction"),c(ld,"class","relative group"),c(Vr,"class","docstring"),c(FI,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(CI,"href","/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(MI,"href","/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(EI,"href","/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(yI,"href","/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(je,"class","docstring"),c(Ko,"class","docstring"),c(U4,"id","transformers.AutoModelForTokenClassification"),c(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U4,"href","#transformers.AutoModelForTokenClassification"),c(cd,"class","relative group"),c(Wr,"class","docstring"),c(wI,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(AI,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertForTokenClassification"),c(LI,"href","/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(BI,"href","/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(kI,"href","/docs/transformers/pr_15748/en/model_doc/canine#transformers.CanineForTokenClassification"),c(xI,"href","/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(RI,"href","/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(SI,"href","/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(PI,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c($I,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(II,"href","/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(jI,"href","/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(NI,"href","/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(DI,"href","/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(qI,"href","/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(GI,"href","/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(OI,"href","/docs/transformers/pr_15748/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(XI,"href","/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(zI,"href","/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(VI,"href","/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(WI,"href","/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(QI,"href","/docs/transformers/pr_15748/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(HI,"href","/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(UI,"href","/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(JI,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(YI,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(KI,"href","/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(ZI,"href","/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(ej,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(oj,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(rj,"href","/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(tj,"href","/docs/transformers/pr_15748/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(Ne,"class","docstring"),c(Zo,"class","docstring"),c(Bb,"id","transformers.AutoModelForQuestionAnswering"),c(Bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bb,"href","#transformers.AutoModelForQuestionAnswering"),c(gd,"class","relative group"),c(Qr,"class","docstring"),c(aj,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(nj,"href","/docs/transformers/pr_15748/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(sj,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(lj,"href","/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(ij,"href","/docs/transformers/pr_15748/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(dj,"href","/docs/transformers/pr_15748/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(cj,"href","/docs/transformers/pr_15748/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(fj,"href","/docs/transformers/pr_15748/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(mj,"href","/docs/transformers/pr_15748/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(gj,"href","/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(hj,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(pj,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(_j,"href","/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(uj,"href","/docs/transformers/pr_15748/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(bj,"href","/docs/transformers/pr_15748/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(vj,"href","/docs/transformers/pr_15748/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(Tj,"href","/docs/transformers/pr_15748/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(Fj,"href","/docs/transformers/pr_15748/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(Cj,"href","/docs/transformers/pr_15748/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(Mj,"href","/docs/transformers/pr_15748/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Ej,"href","/docs/transformers/pr_15748/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(yj,"href","/docs/transformers/pr_15748/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(wj,"href","/docs/transformers/pr_15748/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(Aj,"href","/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(Lj,"href","/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(Bj,"href","/docs/transformers/pr_15748/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(kj,"href","/docs/transformers/pr_15748/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(xj,"href","/docs/transformers/pr_15748/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(Rj,"href","/docs/transformers/pr_15748/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(Sj,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(Pj,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c($j,"href","/docs/transformers/pr_15748/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(Ij,"href","/docs/transformers/pr_15748/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(jj,"href","/docs/transformers/pr_15748/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(Nj,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(Dj,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(qj,"href","/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(Gj,"href","/docs/transformers/pr_15748/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(De,"class","docstring"),c(er,"class","docstring"),c(p5,"id","transformers.AutoModelForTableQuestionAnswering"),c(p5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(_d,"class","relative group"),c(Hr,"class","docstring"),c(Oj,"href","/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(qe,"class","docstring"),c(or,"class","docstring"),c(b5,"id","transformers.AutoModelForImageClassification"),c(b5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b5,"href","#transformers.AutoModelForImageClassification"),c(vd,"class","relative group"),c(Ur,"class","docstring"),c(Xj,"href","/docs/transformers/pr_15748/en/model_doc/beit#transformers.BeitForImageClassification"),c(zj,"href","/docs/transformers/pr_15748/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(Vj,"href","/docs/transformers/pr_15748/en/model_doc/deit#transformers.DeiTForImageClassification"),c(Wj,"href","/docs/transformers/pr_15748/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(Qj,"href","/docs/transformers/pr_15748/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(Hj,"href","/docs/transformers/pr_15748/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(Uj,"href","/docs/transformers/pr_15748/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(Jj,"href","/docs/transformers/pr_15748/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(Yj,"href","/docs/transformers/pr_15748/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(Kj,"href","/docs/transformers/pr_15748/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(Zj,"href","/docs/transformers/pr_15748/en/model_doc/swin#transformers.SwinForImageClassification"),c(eN,"href","/docs/transformers/pr_15748/en/model_doc/vit#transformers.ViTForImageClassification"),c(Ge,"class","docstring"),c(rr,"class","docstring"),c(A5,"id","transformers.AutoModelForVision2Seq"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.AutoModelForVision2Seq"),c(Cd,"class","relative group"),c(Jr,"class","docstring"),c(oN,"href","/docs/transformers/pr_15748/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Oe,"class","docstring"),c(tr,"class","docstring"),c(k5,"id","transformers.AutoModelForAudioClassification"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.AutoModelForAudioClassification"),c(yd,"class","relative group"),c(Yr,"class","docstring"),c(rN,"href","/docs/transformers/pr_15748/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(tN,"href","/docs/transformers/pr_15748/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(aN,"href","/docs/transformers/pr_15748/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(nN,"href","/docs/transformers/pr_15748/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(sN,"href","/docs/transformers/pr_15748/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(lN,"href","/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(iN,"href","/docs/transformers/pr_15748/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(Xe,"class","docstring"),c(ar,"class","docstring"),c(D5,"id","transformers.AutoModelForAudioFrameClassification"),c(D5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D5,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ld,"class","relative group"),c(Kr,"class","docstring"),c(dN,"href","/docs/transformers/pr_15748/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(cN,"href","/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(fN,"href","/docs/transformers/pr_15748/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ze,"class","docstring"),c(nr,"class","docstring"),c(z5,"id","transformers.AutoModelForCTC"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.AutoModelForCTC"),c(Rd,"class","relative group"),c(Zr,"class","docstring"),c(mN,"href","/docs/transformers/pr_15748/en/model_doc/hubert#transformers.HubertForCTC"),c(gN,"href","/docs/transformers/pr_15748/en/model_doc/sew#transformers.SEWForCTC"),c(hN,"href","/docs/transformers/pr_15748/en/model_doc/sew-d#transformers.SEWDForCTC"),c(pN,"href","/docs/transformers/pr_15748/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(_N,"href","/docs/transformers/pr_15748/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(uN,"href","/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(bN,"href","/docs/transformers/pr_15748/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Ve,"class","docstring"),c(sr,"class","docstring"),c(Z5,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z5,"href","#transformers.AutoModelForSpeechSeq2Seq"),c($d,"class","relative group"),c(et,"class","docstring"),c(vN,"href","/docs/transformers/pr_15748/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(TN,"href","/docs/transformers/pr_15748/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(We,"class","docstring"),c(lr,"class","docstring"),c(t2,"id","transformers.AutoModelForAudioXVector"),c(t2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t2,"href","#transformers.AutoModelForAudioXVector"),c(Nd,"class","relative group"),c(ot,"class","docstring"),c(FN,"href","/docs/transformers/pr_15748/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(CN,"href","/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(MN,"href","/docs/transformers/pr_15748/en/model_doc/wavlm#transformers.WavLMForXVector"),c(Qe,"class","docstring"),c(ir,"class","docstring"),c(i2,"id","transformers.AutoModelForMaskedImageModeling"),c(i2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i2,"href","#transformers.AutoModelForMaskedImageModeling"),c(Od,"class","relative group"),c(rt,"class","docstring"),c(EN,"href","/docs/transformers/pr_15748/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(yN,"href","/docs/transformers/pr_15748/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(wN,"href","/docs/transformers/pr_15748/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(He,"class","docstring"),c(dr,"class","docstring"),c(g2,"id","transformers.AutoModelForObjectDetection"),c(g2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g2,"href","#transformers.AutoModelForObjectDetection"),c(Wd,"class","relative group"),c(tt,"class","docstring"),c(AN,"href","/docs/transformers/pr_15748/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Ue,"class","docstring"),c(cr,"class","docstring"),c(_2,"id","transformers.AutoModelForImageSegmentation"),c(_2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_2,"href","#transformers.AutoModelForImageSegmentation"),c(Ud,"class","relative group"),c(at,"class","docstring"),c(LN,"href","/docs/transformers/pr_15748/en/model_doc/detr#transformers.DetrForSegmentation"),c(Je,"class","docstring"),c(fr,"class","docstring"),c(v2,"id","transformers.AutoModelForSemanticSegmentation"),c(v2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v2,"href","#transformers.AutoModelForSemanticSegmentation"),c(Kd,"class","relative group"),c(nt,"class","docstring"),c(BN,"href","/docs/transformers/pr_15748/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(kN,"href","/docs/transformers/pr_15748/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Ye,"class","docstring"),c(mr,"class","docstring"),c(M2,"id","transformers.TFAutoModel"),c(M2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M2,"href","#transformers.TFAutoModel"),c(oc,"class","relative group"),c(st,"class","docstring"),c(xN,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.TFAlbertModel"),c(RN,"href","/docs/transformers/pr_15748/en/model_doc/bart#transformers.TFBartModel"),c(SN,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.TFBertModel"),c(PN,"href","/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c($N,"href","/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(IN,"href","/docs/transformers/pr_15748/en/model_doc/camembert#transformers.TFCamembertModel"),c(jN,"href","/docs/transformers/pr_15748/en/model_doc/clip#transformers.TFCLIPModel"),c(NN,"href","/docs/transformers/pr_15748/en/model_doc/convbert#transformers.TFConvBertModel"),c(DN,"href","/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.TFCTRLModel"),c(qN,"href","/docs/transformers/pr_15748/en/model_doc/deberta#transformers.TFDebertaModel"),c(GN,"href","/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(ON,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(XN,"href","/docs/transformers/pr_15748/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(zN,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.TFElectraModel"),c(VN,"href","/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(WN,"href","/docs/transformers/pr_15748/en/model_doc/funnel#transformers.TFFunnelModel"),c(QN,"href","/docs/transformers/pr_15748/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(HN,"href","/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.TFGPT2Model"),c(UN,"href","/docs/transformers/pr_15748/en/model_doc/hubert#transformers.TFHubertModel"),c(JN,"href","/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(YN,"href","/docs/transformers/pr_15748/en/model_doc/led#transformers.TFLEDModel"),c(KN,"href","/docs/transformers/pr_15748/en/model_doc/longformer#transformers.TFLongformerModel"),c(ZN,"href","/docs/transformers/pr_15748/en/model_doc/lxmert#transformers.TFLxmertModel"),c(eD,"href","/docs/transformers/pr_15748/en/model_doc/marian#transformers.TFMarianModel"),c(oD,"href","/docs/transformers/pr_15748/en/model_doc/mbart#transformers.TFMBartModel"),c(rD,"href","/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(tD,"href","/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.TFMPNetModel"),c(aD,"href","/docs/transformers/pr_15748/en/model_doc/mt5#transformers.TFMT5Model"),c(nD,"href","/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(sD,"href","/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.TFPegasusModel"),c(lD,"href","/docs/transformers/pr_15748/en/model_doc/rembert#transformers.TFRemBertModel"),c(iD,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.TFRobertaModel"),c(dD,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.TFRoFormerModel"),c(cD,"href","/docs/transformers/pr_15748/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(fD,"href","/docs/transformers/pr_15748/en/model_doc/t5#transformers.TFT5Model"),c(mD,"href","/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TFTapasModel"),c(gD,"href","/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(hD,"href","/docs/transformers/pr_15748/en/model_doc/vit#transformers.TFViTModel"),c(pD,"href","/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(_D,"href","/docs/transformers/pr_15748/en/model_doc/xlm#transformers.TFXLMModel"),c(uD,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(bD,"href","/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.TFXLNetModel"),c(go,"class","docstring"),c(gr,"class","docstring"),c(cv,"id","transformers.TFAutoModelForPreTraining"),c(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cv,"href","#transformers.TFAutoModelForPreTraining"),c(ac,"class","relative group"),c(lt,"class","docstring"),c(vD,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(TD,"href","/docs/transformers/pr_15748/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(FD,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.TFBertForPreTraining"),c(CD,"href","/docs/transformers/pr_15748/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(MD,"href","/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(ED,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(yD,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(wD,"href","/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(AD,"href","/docs/transformers/pr_15748/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(LD,"href","/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(BD,"href","/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(kD,"href","/docs/transformers/pr_15748/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(xD,"href","/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(RD,"href","/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(SD,"href","/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(PD,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c($D,"href","/docs/transformers/pr_15748/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(ID,"href","/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(jD,"href","/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(ND,"href","/docs/transformers/pr_15748/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(DD,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(qD,"href","/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(ho,"class","docstring"),c(hr,"class","docstring"),c(Sv,"id","transformers.TFAutoModelForCausalLM"),c(Sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sv,"href","#transformers.TFAutoModelForCausalLM"),c(lc,"class","relative group"),c(it,"class","docstring"),c(GD,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(OD,"href","/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(XD,"href","/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(zD,"href","/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(VD,"href","/docs/transformers/pr_15748/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(WD,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(QD,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(HD,"href","/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(UD,"href","/docs/transformers/pr_15748/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(JD,"href","/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(po,"class","docstring"),c(pr,"class","docstring"),c(zv,"id","transformers.TFAutoModelForImageClassification"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.TFAutoModelForImageClassification"),c(cc,"class","relative group"),c(dt,"class","docstring"),c(YD,"href","/docs/transformers/pr_15748/en/model_doc/vit#transformers.TFViTForImageClassification"),c(_o,"class","docstring"),c(_r,"class","docstring"),c(Wv,"id","transformers.TFAutoModelForMaskedLM"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.TFAutoModelForMaskedLM"),c(gc,"class","relative group"),c(ct,"class","docstring"),c(KD,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(ZD,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(eq,"href","/docs/transformers/pr_15748/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(oq,"href","/docs/transformers/pr_15748/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(rq,"href","/docs/transformers/pr_15748/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(tq,"href","/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(aq,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(nq,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(sq,"href","/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(lq,"href","/docs/transformers/pr_15748/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(iq,"href","/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(dq,"href","/docs/transformers/pr_15748/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(cq,"href","/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(fq,"href","/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(mq,"href","/docs/transformers/pr_15748/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(gq,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(hq,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(pq,"href","/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(_q,"href","/docs/transformers/pr_15748/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(uq,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(uo,"class","docstring"),c(ur,"class","docstring"),c(gT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(_c,"class","relative group"),c(ft,"class","docstring"),c(bq,"href","/docs/transformers/pr_15748/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(vq,"href","/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(Tq,"href","/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(Fq,"href","/docs/transformers/pr_15748/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(Cq,"href","/docs/transformers/pr_15748/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(Mq,"href","/docs/transformers/pr_15748/en/model_doc/marian#transformers.TFMarianMTModel"),c(Eq,"href","/docs/transformers/pr_15748/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(yq,"href","/docs/transformers/pr_15748/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(wq,"href","/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(Aq,"href","/docs/transformers/pr_15748/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(bo,"class","docstring"),c(br,"class","docstring"),c(ET,"id","transformers.TFAutoModelForSequenceClassification"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.TFAutoModelForSequenceClassification"),c(vc,"class","relative group"),c(mt,"class","docstring"),c(Lq,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(Bq,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(kq,"href","/docs/transformers/pr_15748/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(xq,"href","/docs/transformers/pr_15748/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(Rq,"href","/docs/transformers/pr_15748/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(Sq,"href","/docs/transformers/pr_15748/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(Pq,"href","/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c($q,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(Iq,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(jq,"href","/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(Nq,"href","/docs/transformers/pr_15748/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(Dq,"href","/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(qq,"href","/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(Gq,"href","/docs/transformers/pr_15748/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(Oq,"href","/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Xq,"href","/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(zq,"href","/docs/transformers/pr_15748/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Vq,"href","/docs/transformers/pr_15748/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(Wq,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Qq,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Hq,"href","/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(Uq,"href","/docs/transformers/pr_15748/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(Jq,"href","/docs/transformers/pr_15748/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(Yq,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(Kq,"href","/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(vo,"class","docstring"),c(vr,"class","docstring"),c(JT,"id","transformers.TFAutoModelForMultipleChoice"),c(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JT,"href","#transformers.TFAutoModelForMultipleChoice"),c(Cc,"class","relative group"),c(gt,"class","docstring"),c(Zq,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(eG,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(oG,"href","/docs/transformers/pr_15748/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(rG,"href","/docs/transformers/pr_15748/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(tG,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(aG,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(nG,"href","/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(sG,"href","/docs/transformers/pr_15748/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(lG,"href","/docs/transformers/pr_15748/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(iG,"href","/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(dG,"href","/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(cG,"href","/docs/transformers/pr_15748/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(fG,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(mG,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(gG,"href","/docs/transformers/pr_15748/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(hG,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(pG,"href","/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(To,"class","docstring"),c(Tr,"class","docstring"),c(h7,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(h7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h7,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(yc,"class","relative group"),c(ht,"class","docstring"),c(_G,"href","/docs/transformers/pr_15748/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Fo,"class","docstring"),c(Fr,"class","docstring"),c(_7,"id","transformers.TFAutoModelForTokenClassification"),c(_7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_7,"href","#transformers.TFAutoModelForTokenClassification"),c(Lc,"class","relative group"),c(pt,"class","docstring"),c(uG,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(bG,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(vG,"href","/docs/transformers/pr_15748/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(TG,"href","/docs/transformers/pr_15748/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(FG,"href","/docs/transformers/pr_15748/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(CG,"href","/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(MG,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(EG,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(yG,"href","/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(wG,"href","/docs/transformers/pr_15748/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(AG,"href","/docs/transformers/pr_15748/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(LG,"href","/docs/transformers/pr_15748/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(BG,"href","/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(kG,"href","/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(xG,"href","/docs/transformers/pr_15748/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(RG,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(SG,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(PG,"href","/docs/transformers/pr_15748/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c($G,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(IG,"href","/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Co,"class","docstring"),c(Cr,"class","docstring"),c(j7,"id","transformers.TFAutoModelForQuestionAnswering"),c(j7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j7,"href","#transformers.TFAutoModelForQuestionAnswering"),c(xc,"class","relative group"),c(_t,"class","docstring"),c(jG,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(NG,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(DG,"href","/docs/transformers/pr_15748/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(qG,"href","/docs/transformers/pr_15748/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(GG,"href","/docs/transformers/pr_15748/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(OG,"href","/docs/transformers/pr_15748/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(XG,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(zG,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(VG,"href","/docs/transformers/pr_15748/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(WG,"href","/docs/transformers/pr_15748/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(QG,"href","/docs/transformers/pr_15748/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(HG,"href","/docs/transformers/pr_15748/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(UG,"href","/docs/transformers/pr_15748/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_15748/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(YG,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(ZG,"href","/docs/transformers/pr_15748/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(eO,"href","/docs/transformers/pr_15748/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_15748/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Mo,"class","docstring"),c(Mr,"class","docstring"),c(t8,"id","transformers.TFAutoModelForVision2Seq"),c(t8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t8,"href","#transformers.TFAutoModelForVision2Seq"),c(Pc,"class","relative group"),c(ut,"class","docstring"),c(rO,"href","/docs/transformers/pr_15748/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Eo,"class","docstring"),c(Er,"class","docstring"),c(n8,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(n8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n8,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(jc,"class","relative group"),c(bt,"class","docstring"),c(tO,"href","/docs/transformers/pr_15748/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(yo,"class","docstring"),c(yr,"class","docstring"),c(l8,"id","transformers.FlaxAutoModel"),c(l8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l8,"href","#transformers.FlaxAutoModel"),c(qc,"class","relative group"),c(vt,"class","docstring"),c(aO,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.FlaxAlbertModel"),c(nO,"href","/docs/transformers/pr_15748/en/model_doc/bart#transformers.FlaxBartModel"),c(sO,"href","/docs/transformers/pr_15748/en/model_doc/beit#transformers.FlaxBeitModel"),c(lO,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.FlaxBertModel"),c(iO,"href","/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(dO,"href","/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(cO,"href","/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(fO,"href","/docs/transformers/pr_15748/en/model_doc/clip#transformers.FlaxCLIPModel"),c(mO,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(gO,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.FlaxElectraModel"),c(hO,"href","/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(pO,"href","/docs/transformers/pr_15748/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(_O,"href","/docs/transformers/pr_15748/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(uO,"href","/docs/transformers/pr_15748/en/model_doc/marian#transformers.FlaxMarianModel"),c(bO,"href","/docs/transformers/pr_15748/en/model_doc/mbart#transformers.FlaxMBartModel"),c(vO,"href","/docs/transformers/pr_15748/en/model_doc/mt5#transformers.FlaxMT5Model"),c(TO,"href","/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(FO,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(CO,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(MO,"href","/docs/transformers/pr_15748/en/model_doc/t5#transformers.FlaxT5Model"),c(EO,"href","/docs/transformers/pr_15748/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(yO,"href","/docs/transformers/pr_15748/en/model_doc/vit#transformers.FlaxViTModel"),c(wO,"href","/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(AO,"href","/docs/transformers/pr_15748/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(wo,"class","docstring"),c(wr,"class","docstring"),c(R8,"id","transformers.FlaxAutoModelForCausalLM"),c(R8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R8,"href","#transformers.FlaxAutoModelForCausalLM"),c(Xc,"class","relative group"),c(Tt,"class","docstring"),c(LO,"href","/docs/transformers/pr_15748/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(BO,"href","/docs/transformers/pr_15748/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(kO,"href","/docs/transformers/pr_15748/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(xO,"href","/docs/transformers/pr_15748/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Ao,"class","docstring"),c(Ar,"class","docstring"),c(j8,"id","transformers.FlaxAutoModelForPreTraining"),c(j8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j8,"href","#transformers.FlaxAutoModelForPreTraining"),c(Wc,"class","relative group"),c(Ft,"class","docstring"),c(RO,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(SO,"href","/docs/transformers/pr_15748/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(PO,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c($O,"href","/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(IO,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(jO,"href","/docs/transformers/pr_15748/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(NO,"href","/docs/transformers/pr_15748/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(DO,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(qO,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(GO,"href","/docs/transformers/pr_15748/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(OO,"href","/docs/transformers/pr_15748/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Lo,"class","docstring"),c(Lr,"class","docstring"),c(U8,"id","transformers.FlaxAutoModelForMaskedLM"),c(U8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U8,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Uc,"class","relative group"),c(Ct,"class","docstring"),c(XO,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(zO,"href","/docs/transformers/pr_15748/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(VO,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(WO,"href","/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(QO,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(HO,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(UO,"href","/docs/transformers/pr_15748/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(JO,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(YO,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Bo,"class","docstring"),c(Br,"class","docstring"),c(nF,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nF,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Kc,"class","relative group"),c(Mt,"class","docstring"),c(KO,"href","/docs/transformers/pr_15748/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ZO,"href","/docs/transformers/pr_15748/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(eX,"href","/docs/transformers/pr_15748/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(oX,"href","/docs/transformers/pr_15748/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(rX,"href","/docs/transformers/pr_15748/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(tX,"href","/docs/transformers/pr_15748/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(aX,"href","/docs/transformers/pr_15748/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(nX,"href","/docs/transformers/pr_15748/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(sX,"href","/docs/transformers/pr_15748/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ko,"class","docstring"),c(kr,"class","docstring"),c(pF,"id","transformers.FlaxAutoModelForSequenceClassification"),c(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pF,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(of,"class","relative group"),c(Et,"class","docstring"),c(lX,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(iX,"href","/docs/transformers/pr_15748/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(dX,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(cX,"href","/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(fX,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(mX,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(gX,"href","/docs/transformers/pr_15748/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(hX,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(pX,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(xo,"class","docstring"),c(xr,"class","docstring"),c(yF,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(af,"class","relative group"),c(yt,"class","docstring"),c(_X,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_15748/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_15748/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Ro,"class","docstring"),c(Rr,"class","docstring"),c($F,"id","transformers.FlaxAutoModelForTokenClassification"),c($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($F,"href","#transformers.FlaxAutoModelForTokenClassification"),c(lf,"class","relative group"),c(wt,"class","docstring"),c(yX,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(wX,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(AX,"href","/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(LX,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(BX,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(kX,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(xX,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(So,"class","docstring"),c(Sr,"class","docstring"),c(XF,"id","transformers.FlaxAutoModelForMultipleChoice"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ff,"class","relative group"),c(At,"class","docstring"),c(RX,"href","/docs/transformers/pr_15748/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(SX,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(PX,"href","/docs/transformers/pr_15748/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c($X,"href","/docs/transformers/pr_15748/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(IX,"href","/docs/transformers/pr_15748/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(jX,"href","/docs/transformers/pr_15748/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(NX,"href","/docs/transformers/pr_15748/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Po,"class","docstring"),c(Pr,"class","docstring"),c(YF,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YF,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(hf,"class","relative group"),c(Lt,"class","docstring"),c(DX,"href","/docs/transformers/pr_15748/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c($o,"class","docstring"),c($r,"class","docstring"),c(ZF,"id","transformers.FlaxAutoModelForImageClassification"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.FlaxAutoModelForImageClassification"),c(uf,"class","relative group"),c(Bt,"class","docstring"),c(qX,"href","/docs/transformers/pr_15748/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(GX,"href","/docs/transformers/pr_15748/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Io,"class","docstring"),c(Ir,"class","docstring"),c(rC,"id","transformers.FlaxAutoModelForVision2Seq"),c(rC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Tf,"class","relative group"),c(kt,"class","docstring"),c(OX,"href","/docs/transformers/pr_15748/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(jo,"class","docstring"),c(jr,"class","docstring")},m(d,u){e(document.head,J),b(d,Ae,u),b(d,ie,u),e(ie,me),e(me,to),g(ce,to,null),e(ie,ue),e(ie,Do),e(Do,wi),b(d,Ef,u),b(d,sa,u),e(sa,Ai),e(sa,Li),e(Li,oM),e(sa,yf),b(d,ye,u),b(d,io,u),e(io,Bi),e(io,Pn),e(Pn,rM),e(io,$n),e(io,In),e(In,tM),e(io,ki),e(io,jn),e(jn,aM),e(io,xi),b(d,wf,u),g($a,d,u),b(d,co,u),b(d,ge,u),e(ge,D0),e(ge,Ri),e(Ri,q0),e(ge,G0),b(d,qo,u),b(d,Ia,u),e(Ia,O0),e(Ia,Af),e(Af,X0),e(Ia,mxe),b(d,tLe,u),b(d,Si,u),e(Si,Lf),e(Lf,$V),g(nM,$V,null),e(Si,gxe),e(Si,IV),e(IV,hxe),b(d,aLe,u),b(d,Nn,u),e(Nn,pxe),e(Nn,jV),e(jV,_xe),e(Nn,uxe),e(Nn,NV),e(NV,bxe),e(Nn,vxe),b(d,nLe,u),g(sM,d,u),b(d,sLe,u),b(d,z0,u),e(z0,Txe),b(d,lLe,u),g(Bf,d,u),b(d,iLe,u),b(d,Pi,u),e(Pi,kf),e(kf,DV),g(lM,DV,null),e(Pi,Fxe),e(Pi,qV),e(qV,Cxe),b(d,dLe,u),b(d,Go,u),g(iM,Go,null),e(Go,Mxe),e(Go,dM),e(dM,Exe),e(dM,V0),e(V0,yxe),e(dM,wxe),e(Go,Axe),e(Go,cM),e(cM,Lxe),e(cM,GV),e(GV,Bxe),e(cM,kxe),e(Go,xxe),e(Go,fo),g(fM,fo,null),e(fo,Rxe),e(fo,OV),e(OV,Sxe),e(fo,Pxe),e(fo,$i),e($i,$xe),e($i,XV),e(XV,Ixe),e($i,jxe),e($i,zV),e(zV,Nxe),e($i,Dxe),e(fo,qxe),e(fo,v),e(v,xf),e(xf,VV),e(VV,Gxe),e(xf,Oxe),e(xf,W0),e(W0,Xxe),e(xf,zxe),e(v,Vxe),e(v,Rf),e(Rf,WV),e(WV,Wxe),e(Rf,Qxe),e(Rf,Q0),e(Q0,Hxe),e(Rf,Uxe),e(v,Jxe),e(v,Sf),e(Sf,QV),e(QV,Yxe),e(Sf,Kxe),e(Sf,H0),e(H0,Zxe),e(Sf,eRe),e(v,oRe),e(v,Pf),e(Pf,HV),e(HV,rRe),e(Pf,tRe),e(Pf,U0),e(U0,aRe),e(Pf,nRe),e(v,sRe),e(v,$f),e($f,UV),e(UV,lRe),e($f,iRe),e($f,J0),e(J0,dRe),e($f,cRe),e(v,fRe),e(v,If),e(If,JV),e(JV,mRe),e(If,gRe),e(If,Y0),e(Y0,hRe),e(If,pRe),e(v,_Re),e(v,jf),e(jf,YV),e(YV,uRe),e(jf,bRe),e(jf,K0),e(K0,vRe),e(jf,TRe),e(v,FRe),e(v,Nf),e(Nf,KV),e(KV,CRe),e(Nf,MRe),e(Nf,Z0),e(Z0,ERe),e(Nf,yRe),e(v,wRe),e(v,Df),e(Df,ZV),e(ZV,ARe),e(Df,LRe),e(Df,eL),e(eL,BRe),e(Df,kRe),e(v,xRe),e(v,qf),e(qf,eW),e(eW,RRe),e(qf,SRe),e(qf,oL),e(oL,PRe),e(qf,$Re),e(v,IRe),e(v,Gf),e(Gf,oW),e(oW,jRe),e(Gf,NRe),e(Gf,rL),e(rL,DRe),e(Gf,qRe),e(v,GRe),e(v,Of),e(Of,rW),e(rW,ORe),e(Of,XRe),e(Of,tL),e(tL,zRe),e(Of,VRe),e(v,WRe),e(v,Xf),e(Xf,tW),e(tW,QRe),e(Xf,HRe),e(Xf,aL),e(aL,URe),e(Xf,JRe),e(v,YRe),e(v,zf),e(zf,aW),e(aW,KRe),e(zf,ZRe),e(zf,nL),e(nL,eSe),e(zf,oSe),e(v,rSe),e(v,Vf),e(Vf,nW),e(nW,tSe),e(Vf,aSe),e(Vf,sL),e(sL,nSe),e(Vf,sSe),e(v,lSe),e(v,Wf),e(Wf,sW),e(sW,iSe),e(Wf,dSe),e(Wf,lL),e(lL,cSe),e(Wf,fSe),e(v,mSe),e(v,Qf),e(Qf,lW),e(lW,gSe),e(Qf,hSe),e(Qf,iL),e(iL,pSe),e(Qf,_Se),e(v,uSe),e(v,Hf),e(Hf,iW),e(iW,bSe),e(Hf,vSe),e(Hf,dL),e(dL,TSe),e(Hf,FSe),e(v,CSe),e(v,Uf),e(Uf,dW),e(dW,MSe),e(Uf,ESe),e(Uf,cL),e(cL,ySe),e(Uf,wSe),e(v,ASe),e(v,Jf),e(Jf,cW),e(cW,LSe),e(Jf,BSe),e(Jf,fL),e(fL,kSe),e(Jf,xSe),e(v,RSe),e(v,Yf),e(Yf,fW),e(fW,SSe),e(Yf,PSe),e(Yf,mL),e(mL,$Se),e(Yf,ISe),e(v,jSe),e(v,Kf),e(Kf,mW),e(mW,NSe),e(Kf,DSe),e(Kf,gL),e(gL,qSe),e(Kf,GSe),e(v,OSe),e(v,Zf),e(Zf,gW),e(gW,XSe),e(Zf,zSe),e(Zf,hL),e(hL,VSe),e(Zf,WSe),e(v,QSe),e(v,em),e(em,hW),e(hW,HSe),e(em,USe),e(em,pL),e(pL,JSe),e(em,YSe),e(v,KSe),e(v,om),e(om,pW),e(pW,ZSe),e(om,ePe),e(om,_L),e(_L,oPe),e(om,rPe),e(v,tPe),e(v,rm),e(rm,_W),e(_W,aPe),e(rm,nPe),e(rm,uL),e(uL,sPe),e(rm,lPe),e(v,iPe),e(v,tm),e(tm,uW),e(uW,dPe),e(tm,cPe),e(tm,bL),e(bL,fPe),e(tm,mPe),e(v,gPe),e(v,am),e(am,bW),e(bW,hPe),e(am,pPe),e(am,vL),e(vL,_Pe),e(am,uPe),e(v,bPe),e(v,nm),e(nm,vW),e(vW,vPe),e(nm,TPe),e(nm,TL),e(TL,FPe),e(nm,CPe),e(v,MPe),e(v,sm),e(sm,TW),e(TW,EPe),e(sm,yPe),e(sm,FL),e(FL,wPe),e(sm,APe),e(v,LPe),e(v,lm),e(lm,FW),e(FW,BPe),e(lm,kPe),e(lm,CL),e(CL,xPe),e(lm,RPe),e(v,SPe),e(v,im),e(im,CW),e(CW,PPe),e(im,$Pe),e(im,ML),e(ML,IPe),e(im,jPe),e(v,NPe),e(v,dm),e(dm,MW),e(MW,DPe),e(dm,qPe),e(dm,EL),e(EL,GPe),e(dm,OPe),e(v,XPe),e(v,cm),e(cm,EW),e(EW,zPe),e(cm,VPe),e(cm,yL),e(yL,WPe),e(cm,QPe),e(v,HPe),e(v,fm),e(fm,yW),e(yW,UPe),e(fm,JPe),e(fm,wL),e(wL,YPe),e(fm,KPe),e(v,ZPe),e(v,mm),e(mm,wW),e(wW,e$e),e(mm,o$e),e(mm,AL),e(AL,r$e),e(mm,t$e),e(v,a$e),e(v,gm),e(gm,AW),e(AW,n$e),e(gm,s$e),e(gm,LL),e(LL,l$e),e(gm,i$e),e(v,d$e),e(v,hm),e(hm,LW),e(LW,c$e),e(hm,f$e),e(hm,BL),e(BL,m$e),e(hm,g$e),e(v,h$e),e(v,pm),e(pm,BW),e(BW,p$e),e(pm,_$e),e(pm,kL),e(kL,u$e),e(pm,b$e),e(v,v$e),e(v,_m),e(_m,kW),e(kW,T$e),e(_m,F$e),e(_m,xL),e(xL,C$e),e(_m,M$e),e(v,E$e),e(v,um),e(um,xW),e(xW,y$e),e(um,w$e),e(um,RL),e(RL,A$e),e(um,L$e),e(v,B$e),e(v,bm),e(bm,RW),e(RW,k$e),e(bm,x$e),e(bm,SL),e(SL,R$e),e(bm,S$e),e(v,P$e),e(v,vm),e(vm,SW),e(SW,$$e),e(vm,I$e),e(vm,PL),e(PL,j$e),e(vm,N$e),e(v,D$e),e(v,Tm),e(Tm,PW),e(PW,q$e),e(Tm,G$e),e(Tm,$L),e($L,O$e),e(Tm,X$e),e(v,z$e),e(v,Fm),e(Fm,$W),e($W,V$e),e(Fm,W$e),e(Fm,IL),e(IL,Q$e),e(Fm,H$e),e(v,U$e),e(v,Cm),e(Cm,IW),e(IW,J$e),e(Cm,Y$e),e(Cm,jL),e(jL,K$e),e(Cm,Z$e),e(v,eIe),e(v,Mm),e(Mm,jW),e(jW,oIe),e(Mm,rIe),e(Mm,NL),e(NL,tIe),e(Mm,aIe),e(v,nIe),e(v,Em),e(Em,NW),e(NW,sIe),e(Em,lIe),e(Em,DL),e(DL,iIe),e(Em,dIe),e(v,cIe),e(v,ym),e(ym,DW),e(DW,fIe),e(ym,mIe),e(ym,qL),e(qL,gIe),e(ym,hIe),e(v,pIe),e(v,wm),e(wm,qW),e(qW,_Ie),e(wm,uIe),e(wm,GL),e(GL,bIe),e(wm,vIe),e(v,TIe),e(v,Am),e(Am,GW),e(GW,FIe),e(Am,CIe),e(Am,OL),e(OL,MIe),e(Am,EIe),e(v,yIe),e(v,Lm),e(Lm,OW),e(OW,wIe),e(Lm,AIe),e(Lm,XL),e(XL,LIe),e(Lm,BIe),e(v,kIe),e(v,Bm),e(Bm,XW),e(XW,xIe),e(Bm,RIe),e(Bm,zL),e(zL,SIe),e(Bm,PIe),e(v,$Ie),e(v,km),e(km,zW),e(zW,IIe),e(km,jIe),e(km,VL),e(VL,NIe),e(km,DIe),e(v,qIe),e(v,xm),e(xm,VW),e(VW,GIe),e(xm,OIe),e(xm,WL),e(WL,XIe),e(xm,zIe),e(v,VIe),e(v,Rm),e(Rm,WW),e(WW,WIe),e(Rm,QIe),e(Rm,QL),e(QL,HIe),e(Rm,UIe),e(v,JIe),e(v,Sm),e(Sm,QW),e(QW,YIe),e(Sm,KIe),e(Sm,HL),e(HL,ZIe),e(Sm,eje),e(v,oje),e(v,Pm),e(Pm,HW),e(HW,rje),e(Pm,tje),e(Pm,UL),e(UL,aje),e(Pm,nje),e(v,sje),e(v,$m),e($m,UW),e(UW,lje),e($m,ije),e($m,JL),e(JL,dje),e($m,cje),e(v,fje),e(v,Im),e(Im,JW),e(JW,mje),e(Im,gje),e(Im,YL),e(YL,hje),e(Im,pje),e(v,_je),e(v,jm),e(jm,YW),e(YW,uje),e(jm,bje),e(jm,KL),e(KL,vje),e(jm,Tje),e(v,Fje),e(v,Nm),e(Nm,KW),e(KW,Cje),e(Nm,Mje),e(Nm,ZL),e(ZL,Eje),e(Nm,yje),e(v,wje),e(v,Dm),e(Dm,ZW),e(ZW,Aje),e(Dm,Lje),e(Dm,e9),e(e9,Bje),e(Dm,kje),e(v,xje),e(v,qm),e(qm,eQ),e(eQ,Rje),e(qm,Sje),e(qm,o9),e(o9,Pje),e(qm,$je),e(v,Ije),e(v,Gm),e(Gm,oQ),e(oQ,jje),e(Gm,Nje),e(Gm,r9),e(r9,Dje),e(Gm,qje),e(v,Gje),e(v,Om),e(Om,rQ),e(rQ,Oje),e(Om,Xje),e(Om,t9),e(t9,zje),e(Om,Vje),e(v,Wje),e(v,Xm),e(Xm,tQ),e(tQ,Qje),e(Xm,Hje),e(Xm,a9),e(a9,Uje),e(Xm,Jje),e(v,Yje),e(v,zm),e(zm,aQ),e(aQ,Kje),e(zm,Zje),e(zm,n9),e(n9,eNe),e(zm,oNe),e(v,rNe),e(v,Vm),e(Vm,nQ),e(nQ,tNe),e(Vm,aNe),e(Vm,s9),e(s9,nNe),e(Vm,sNe),e(v,lNe),e(v,Wm),e(Wm,sQ),e(sQ,iNe),e(Wm,dNe),e(Wm,l9),e(l9,cNe),e(Wm,fNe),e(v,mNe),e(v,Qm),e(Qm,lQ),e(lQ,gNe),e(Qm,hNe),e(Qm,i9),e(i9,pNe),e(Qm,_Ne),e(v,uNe),e(v,Hm),e(Hm,iQ),e(iQ,bNe),e(Hm,vNe),e(Hm,d9),e(d9,TNe),e(Hm,FNe),e(v,CNe),e(v,Um),e(Um,dQ),e(dQ,MNe),e(Um,ENe),e(Um,c9),e(c9,yNe),e(Um,wNe),e(v,ANe),e(v,Jm),e(Jm,cQ),e(cQ,LNe),e(Jm,BNe),e(Jm,f9),e(f9,kNe),e(Jm,xNe),e(v,RNe),e(v,Ym),e(Ym,fQ),e(fQ,SNe),e(Ym,PNe),e(Ym,m9),e(m9,$Ne),e(Ym,INe),e(v,jNe),e(v,Km),e(Km,mQ),e(mQ,NNe),e(Km,DNe),e(Km,g9),e(g9,qNe),e(Km,GNe),e(v,ONe),e(v,Zm),e(Zm,gQ),e(gQ,XNe),e(Zm,zNe),e(Zm,h9),e(h9,VNe),e(Zm,WNe),e(v,QNe),e(v,eg),e(eg,hQ),e(hQ,HNe),e(eg,UNe),e(eg,p9),e(p9,JNe),e(eg,YNe),e(v,KNe),e(v,og),e(og,pQ),e(pQ,ZNe),e(og,eDe),e(og,_9),e(_9,oDe),e(og,rDe),e(v,tDe),e(v,rg),e(rg,_Q),e(_Q,aDe),e(rg,nDe),e(rg,u9),e(u9,sDe),e(rg,lDe),e(v,iDe),e(v,tg),e(tg,uQ),e(uQ,dDe),e(tg,cDe),e(tg,b9),e(b9,fDe),e(tg,mDe),e(v,gDe),e(v,ag),e(ag,bQ),e(bQ,hDe),e(ag,pDe),e(ag,v9),e(v9,_De),e(ag,uDe),e(v,bDe),e(v,ng),e(ng,vQ),e(vQ,vDe),e(ng,TDe),e(ng,T9),e(T9,FDe),e(ng,CDe),e(v,MDe),e(v,sg),e(sg,TQ),e(TQ,EDe),e(sg,yDe),e(sg,F9),e(F9,wDe),e(sg,ADe),e(v,LDe),e(v,lg),e(lg,FQ),e(FQ,BDe),e(lg,kDe),e(lg,C9),e(C9,xDe),e(lg,RDe),e(v,SDe),e(v,ig),e(ig,CQ),e(CQ,PDe),e(ig,$De),e(ig,M9),e(M9,IDe),e(ig,jDe),e(v,NDe),e(v,dg),e(dg,MQ),e(MQ,DDe),e(dg,qDe),e(dg,E9),e(E9,GDe),e(dg,ODe),e(v,XDe),e(v,cg),e(cg,EQ),e(EQ,zDe),e(cg,VDe),e(cg,y9),e(y9,WDe),e(cg,QDe),e(v,HDe),e(v,fg),e(fg,yQ),e(yQ,UDe),e(fg,JDe),e(fg,w9),e(w9,YDe),e(fg,KDe),e(v,ZDe),e(v,mg),e(mg,wQ),e(wQ,eqe),e(mg,oqe),e(mg,A9),e(A9,rqe),e(mg,tqe),e(v,aqe),e(v,gg),e(gg,AQ),e(AQ,nqe),e(gg,sqe),e(gg,L9),e(L9,lqe),e(gg,iqe),e(fo,dqe),e(fo,LQ),e(LQ,cqe),e(fo,fqe),g(mM,fo,null),e(Go,mqe),e(Go,hg),g(gM,hg,null),e(hg,gqe),e(hg,BQ),e(BQ,hqe),b(d,cLe,u),b(d,Ii,u),e(Ii,pg),e(pg,kQ),g(hM,kQ,null),e(Ii,pqe),e(Ii,xQ),e(xQ,_qe),b(d,fLe,u),b(d,Oo,u),g(pM,Oo,null),e(Oo,uqe),e(Oo,_M),e(_M,bqe),e(_M,B9),e(B9,vqe),e(_M,Tqe),e(Oo,Fqe),e(Oo,uM),e(uM,Cqe),e(uM,RQ),e(RQ,Mqe),e(uM,Eqe),e(Oo,yqe),e(Oo,mo),g(bM,mo,null),e(mo,wqe),e(mo,SQ),e(SQ,Aqe),e(mo,Lqe),e(mo,ja),e(ja,Bqe),e(ja,PQ),e(PQ,kqe),e(ja,xqe),e(ja,$Q),e($Q,Rqe),e(ja,Sqe),e(ja,IQ),e(IQ,Pqe),e(ja,$qe),e(mo,Iqe),e(mo,M),e(M,Dn),e(Dn,jQ),e(jQ,jqe),e(Dn,Nqe),e(Dn,k9),e(k9,Dqe),e(Dn,qqe),e(Dn,x9),e(x9,Gqe),e(Dn,Oqe),e(M,Xqe),e(M,qn),e(qn,NQ),e(NQ,zqe),e(qn,Vqe),e(qn,R9),e(R9,Wqe),e(qn,Qqe),e(qn,S9),e(S9,Hqe),e(qn,Uqe),e(M,Jqe),e(M,Gn),e(Gn,DQ),e(DQ,Yqe),e(Gn,Kqe),e(Gn,P9),e(P9,Zqe),e(Gn,eGe),e(Gn,$9),e($9,oGe),e(Gn,rGe),e(M,tGe),e(M,_g),e(_g,qQ),e(qQ,aGe),e(_g,nGe),e(_g,I9),e(I9,sGe),e(_g,lGe),e(M,iGe),e(M,On),e(On,GQ),e(GQ,dGe),e(On,cGe),e(On,j9),e(j9,fGe),e(On,mGe),e(On,N9),e(N9,gGe),e(On,hGe),e(M,pGe),e(M,ug),e(ug,OQ),e(OQ,_Ge),e(ug,uGe),e(ug,D9),e(D9,bGe),e(ug,vGe),e(M,TGe),e(M,bg),e(bg,XQ),e(XQ,FGe),e(bg,CGe),e(bg,q9),e(q9,MGe),e(bg,EGe),e(M,yGe),e(M,vg),e(vg,zQ),e(zQ,wGe),e(vg,AGe),e(vg,G9),e(G9,LGe),e(vg,BGe),e(M,kGe),e(M,Xn),e(Xn,VQ),e(VQ,xGe),e(Xn,RGe),e(Xn,O9),e(O9,SGe),e(Xn,PGe),e(Xn,X9),e(X9,$Ge),e(Xn,IGe),e(M,jGe),e(M,zn),e(zn,WQ),e(WQ,NGe),e(zn,DGe),e(zn,z9),e(z9,qGe),e(zn,GGe),e(zn,V9),e(V9,OGe),e(zn,XGe),e(M,zGe),e(M,Vn),e(Vn,QQ),e(QQ,VGe),e(Vn,WGe),e(Vn,W9),e(W9,QGe),e(Vn,HGe),e(Vn,Q9),e(Q9,UGe),e(Vn,JGe),e(M,YGe),e(M,Tg),e(Tg,HQ),e(HQ,KGe),e(Tg,ZGe),e(Tg,H9),e(H9,eOe),e(Tg,oOe),e(M,rOe),e(M,Fg),e(Fg,UQ),e(UQ,tOe),e(Fg,aOe),e(Fg,U9),e(U9,nOe),e(Fg,sOe),e(M,lOe),e(M,Wn),e(Wn,JQ),e(JQ,iOe),e(Wn,dOe),e(Wn,J9),e(J9,cOe),e(Wn,fOe),e(Wn,Y9),e(Y9,mOe),e(Wn,gOe),e(M,hOe),e(M,Cg),e(Cg,YQ),e(YQ,pOe),e(Cg,_Oe),e(Cg,K9),e(K9,uOe),e(Cg,bOe),e(M,vOe),e(M,Qn),e(Qn,KQ),e(KQ,TOe),e(Qn,FOe),e(Qn,Z9),e(Z9,COe),e(Qn,MOe),e(Qn,eB),e(eB,EOe),e(Qn,yOe),e(M,wOe),e(M,Hn),e(Hn,ZQ),e(ZQ,AOe),e(Hn,LOe),e(Hn,oB),e(oB,BOe),e(Hn,kOe),e(Hn,rB),e(rB,xOe),e(Hn,ROe),e(M,SOe),e(M,Un),e(Un,eH),e(eH,POe),e(Un,$Oe),e(Un,tB),e(tB,IOe),e(Un,jOe),e(Un,oH),e(oH,NOe),e(Un,DOe),e(M,qOe),e(M,Mg),e(Mg,rH),e(rH,GOe),e(Mg,OOe),e(Mg,aB),e(aB,XOe),e(Mg,zOe),e(M,VOe),e(M,Jn),e(Jn,tH),e(tH,WOe),e(Jn,QOe),e(Jn,nB),e(nB,HOe),e(Jn,UOe),e(Jn,sB),e(sB,JOe),e(Jn,YOe),e(M,KOe),e(M,Eg),e(Eg,aH),e(aH,ZOe),e(Eg,eXe),e(Eg,lB),e(lB,oXe),e(Eg,rXe),e(M,tXe),e(M,Yn),e(Yn,nH),e(nH,aXe),e(Yn,nXe),e(Yn,iB),e(iB,sXe),e(Yn,lXe),e(Yn,dB),e(dB,iXe),e(Yn,dXe),e(M,cXe),e(M,Kn),e(Kn,sH),e(sH,fXe),e(Kn,mXe),e(Kn,cB),e(cB,gXe),e(Kn,hXe),e(Kn,fB),e(fB,pXe),e(Kn,_Xe),e(M,uXe),e(M,Zn),e(Zn,lH),e(lH,bXe),e(Zn,vXe),e(Zn,mB),e(mB,TXe),e(Zn,FXe),e(Zn,gB),e(gB,CXe),e(Zn,MXe),e(M,EXe),e(M,yg),e(yg,iH),e(iH,yXe),e(yg,wXe),e(yg,hB),e(hB,AXe),e(yg,LXe),e(M,BXe),e(M,es),e(es,dH),e(dH,kXe),e(es,xXe),e(es,pB),e(pB,RXe),e(es,SXe),e(es,_B),e(_B,PXe),e(es,$Xe),e(M,IXe),e(M,wg),e(wg,cH),e(cH,jXe),e(wg,NXe),e(wg,uB),e(uB,DXe),e(wg,qXe),e(M,GXe),e(M,os),e(os,fH),e(fH,OXe),e(os,XXe),e(os,bB),e(bB,zXe),e(os,VXe),e(os,vB),e(vB,WXe),e(os,QXe),e(M,HXe),e(M,rs),e(rs,mH),e(mH,UXe),e(rs,JXe),e(rs,TB),e(TB,YXe),e(rs,KXe),e(rs,FB),e(FB,ZXe),e(rs,eze),e(M,oze),e(M,ts),e(ts,gH),e(gH,rze),e(ts,tze),e(ts,CB),e(CB,aze),e(ts,nze),e(ts,MB),e(MB,sze),e(ts,lze),e(M,ize),e(M,as),e(as,hH),e(hH,dze),e(as,cze),e(as,EB),e(EB,fze),e(as,mze),e(as,yB),e(yB,gze),e(as,hze),e(M,pze),e(M,Ag),e(Ag,pH),e(pH,_ze),e(Ag,uze),e(Ag,wB),e(wB,bze),e(Ag,vze),e(M,Tze),e(M,ns),e(ns,_H),e(_H,Fze),e(ns,Cze),e(ns,AB),e(AB,Mze),e(ns,Eze),e(ns,LB),e(LB,yze),e(ns,wze),e(M,Aze),e(M,ss),e(ss,uH),e(uH,Lze),e(ss,Bze),e(ss,BB),e(BB,kze),e(ss,xze),e(ss,kB),e(kB,Rze),e(ss,Sze),e(M,Pze),e(M,ls),e(ls,bH),e(bH,$ze),e(ls,Ize),e(ls,xB),e(xB,jze),e(ls,Nze),e(ls,RB),e(RB,Dze),e(ls,qze),e(M,Gze),e(M,is),e(is,vH),e(vH,Oze),e(is,Xze),e(is,SB),e(SB,zze),e(is,Vze),e(is,PB),e(PB,Wze),e(is,Qze),e(M,Hze),e(M,ds),e(ds,TH),e(TH,Uze),e(ds,Jze),e(ds,$B),e($B,Yze),e(ds,Kze),e(ds,IB),e(IB,Zze),e(ds,eVe),e(M,oVe),e(M,cs),e(cs,FH),e(FH,rVe),e(cs,tVe),e(cs,jB),e(jB,aVe),e(cs,nVe),e(cs,NB),e(NB,sVe),e(cs,lVe),e(M,iVe),e(M,Lg),e(Lg,CH),e(CH,dVe),e(Lg,cVe),e(Lg,DB),e(DB,fVe),e(Lg,mVe),e(M,gVe),e(M,fs),e(fs,MH),e(MH,hVe),e(fs,pVe),e(fs,qB),e(qB,_Ve),e(fs,uVe),e(fs,GB),e(GB,bVe),e(fs,vVe),e(M,TVe),e(M,Bg),e(Bg,EH),e(EH,FVe),e(Bg,CVe),e(Bg,OB),e(OB,MVe),e(Bg,EVe),e(M,yVe),e(M,kg),e(kg,yH),e(yH,wVe),e(kg,AVe),e(kg,XB),e(XB,LVe),e(kg,BVe),e(M,kVe),e(M,ms),e(ms,wH),e(wH,xVe),e(ms,RVe),e(ms,zB),e(zB,SVe),e(ms,PVe),e(ms,VB),e(VB,$Ve),e(ms,IVe),e(M,jVe),e(M,gs),e(gs,AH),e(AH,NVe),e(gs,DVe),e(gs,WB),e(WB,qVe),e(gs,GVe),e(gs,QB),e(QB,OVe),e(gs,XVe),e(M,zVe),e(M,xg),e(xg,LH),e(LH,VVe),e(xg,WVe),e(xg,HB),e(HB,QVe),e(xg,HVe),e(M,UVe),e(M,hs),e(hs,BH),e(BH,JVe),e(hs,YVe),e(hs,UB),e(UB,KVe),e(hs,ZVe),e(hs,JB),e(JB,eWe),e(hs,oWe),e(M,rWe),e(M,ps),e(ps,kH),e(kH,tWe),e(ps,aWe),e(ps,YB),e(YB,nWe),e(ps,sWe),e(ps,KB),e(KB,lWe),e(ps,iWe),e(M,dWe),e(M,_s),e(_s,xH),e(xH,cWe),e(_s,fWe),e(_s,ZB),e(ZB,mWe),e(_s,gWe),e(_s,ek),e(ek,hWe),e(_s,pWe),e(M,_We),e(M,us),e(us,RH),e(RH,uWe),e(us,bWe),e(us,ok),e(ok,vWe),e(us,TWe),e(us,rk),e(rk,FWe),e(us,CWe),e(M,MWe),e(M,bs),e(bs,SH),e(SH,EWe),e(bs,yWe),e(bs,tk),e(tk,wWe),e(bs,AWe),e(bs,ak),e(ak,LWe),e(bs,BWe),e(M,kWe),e(M,Rg),e(Rg,PH),e(PH,xWe),e(Rg,RWe),e(Rg,nk),e(nk,SWe),e(Rg,PWe),e(M,$We),e(M,Sg),e(Sg,$H),e($H,IWe),e(Sg,jWe),e(Sg,sk),e(sk,NWe),e(Sg,DWe),e(M,qWe),e(M,Pg),e(Pg,IH),e(IH,GWe),e(Pg,OWe),e(Pg,lk),e(lk,XWe),e(Pg,zWe),e(M,VWe),e(M,$g),e($g,jH),e(jH,WWe),e($g,QWe),e($g,ik),e(ik,HWe),e($g,UWe),e(M,JWe),e(M,vs),e(vs,NH),e(NH,YWe),e(vs,KWe),e(vs,dk),e(dk,ZWe),e(vs,eQe),e(vs,ck),e(ck,oQe),e(vs,rQe),e(M,tQe),e(M,Ig),e(Ig,DH),e(DH,aQe),e(Ig,nQe),e(Ig,fk),e(fk,sQe),e(Ig,lQe),e(M,iQe),e(M,Ts),e(Ts,qH),e(qH,dQe),e(Ts,cQe),e(Ts,mk),e(mk,fQe),e(Ts,mQe),e(Ts,gk),e(gk,gQe),e(Ts,hQe),e(M,pQe),e(M,Fs),e(Fs,GH),e(GH,_Qe),e(Fs,uQe),e(Fs,hk),e(hk,bQe),e(Fs,vQe),e(Fs,pk),e(pk,TQe),e(Fs,FQe),e(M,CQe),e(M,Cs),e(Cs,OH),e(OH,MQe),e(Cs,EQe),e(Cs,_k),e(_k,yQe),e(Cs,wQe),e(Cs,uk),e(uk,AQe),e(Cs,LQe),e(M,BQe),e(M,Ms),e(Ms,XH),e(XH,kQe),e(Ms,xQe),e(Ms,bk),e(bk,RQe),e(Ms,SQe),e(Ms,vk),e(vk,PQe),e(Ms,$Qe),e(M,IQe),e(M,Es),e(Es,zH),e(zH,jQe),e(Es,NQe),e(Es,Tk),e(Tk,DQe),e(Es,qQe),e(Es,Fk),e(Fk,GQe),e(Es,OQe),e(M,XQe),e(M,jg),e(jg,VH),e(VH,zQe),e(jg,VQe),e(jg,Ck),e(Ck,WQe),e(jg,QQe),e(M,HQe),e(M,Ng),e(Ng,WH),e(WH,UQe),e(Ng,JQe),e(Ng,Mk),e(Mk,YQe),e(Ng,KQe),e(M,ZQe),e(M,ys),e(ys,QH),e(QH,eHe),e(ys,oHe),e(ys,Ek),e(Ek,rHe),e(ys,tHe),e(ys,yk),e(yk,aHe),e(ys,nHe),e(M,sHe),e(M,ws),e(ws,HH),e(HH,lHe),e(ws,iHe),e(ws,wk),e(wk,dHe),e(ws,cHe),e(ws,Ak),e(Ak,fHe),e(ws,mHe),e(M,gHe),e(M,As),e(As,UH),e(UH,hHe),e(As,pHe),e(As,Lk),e(Lk,_He),e(As,uHe),e(As,Bk),e(Bk,bHe),e(As,vHe),e(M,THe),e(M,Dg),e(Dg,JH),e(JH,FHe),e(Dg,CHe),e(Dg,kk),e(kk,MHe),e(Dg,EHe),e(M,yHe),e(M,qg),e(qg,YH),e(YH,wHe),e(qg,AHe),e(qg,xk),e(xk,LHe),e(qg,BHe),e(M,kHe),e(M,Gg),e(Gg,KH),e(KH,xHe),e(Gg,RHe),e(Gg,Rk),e(Rk,SHe),e(Gg,PHe),e(M,$He),e(M,Og),e(Og,ZH),e(ZH,IHe),e(Og,jHe),e(Og,Sk),e(Sk,NHe),e(Og,DHe),e(M,qHe),e(M,Ls),e(Ls,eU),e(eU,GHe),e(Ls,OHe),e(Ls,Pk),e(Pk,XHe),e(Ls,zHe),e(Ls,$k),e($k,VHe),e(Ls,WHe),e(M,QHe),e(M,Xg),e(Xg,oU),e(oU,HHe),e(Xg,UHe),e(Xg,Ik),e(Ik,JHe),e(Xg,YHe),e(M,KHe),e(M,zg),e(zg,rU),e(rU,ZHe),e(zg,eUe),e(zg,jk),e(jk,oUe),e(zg,rUe),e(M,tUe),e(M,Bs),e(Bs,tU),e(tU,aUe),e(Bs,nUe),e(Bs,Nk),e(Nk,sUe),e(Bs,lUe),e(Bs,Dk),e(Dk,iUe),e(Bs,dUe),e(M,cUe),e(M,ks),e(ks,aU),e(aU,fUe),e(ks,mUe),e(ks,qk),e(qk,gUe),e(ks,hUe),e(ks,Gk),e(Gk,pUe),e(ks,_Ue),e(mo,uUe),e(mo,nU),e(nU,bUe),e(mo,vUe),g(vM,mo,null),e(Oo,TUe),e(Oo,Vg),g(TM,Vg,null),e(Vg,FUe),e(Vg,sU),e(sU,CUe),b(d,mLe,u),b(d,ji,u),e(ji,Wg),e(Wg,lU),g(FM,lU,null),e(ji,MUe),e(ji,iU),e(iU,EUe),b(d,gLe,u),b(d,Xo,u),g(CM,Xo,null),e(Xo,yUe),e(Xo,MM),e(MM,wUe),e(MM,Ok),e(Ok,AUe),e(MM,LUe),e(Xo,BUe),e(Xo,EM),e(EM,kUe),e(EM,dU),e(dU,xUe),e(EM,RUe),e(Xo,SUe),e(Xo,Le),g(yM,Le,null),e(Le,PUe),e(Le,cU),e(cU,$Ue),e(Le,IUe),e(Le,Na),e(Na,jUe),e(Na,fU),e(fU,NUe),e(Na,DUe),e(Na,mU),e(mU,qUe),e(Na,GUe),e(Na,gU),e(gU,OUe),e(Na,XUe),e(Le,zUe),e(Le,se),e(se,Qg),e(Qg,hU),e(hU,VUe),e(Qg,WUe),e(Qg,Xk),e(Xk,QUe),e(Qg,HUe),e(se,UUe),e(se,Hg),e(Hg,pU),e(pU,JUe),e(Hg,YUe),e(Hg,zk),e(zk,KUe),e(Hg,ZUe),e(se,eJe),e(se,Ug),e(Ug,_U),e(_U,oJe),e(Ug,rJe),e(Ug,Vk),e(Vk,tJe),e(Ug,aJe),e(se,nJe),e(se,Jg),e(Jg,uU),e(uU,sJe),e(Jg,lJe),e(Jg,Wk),e(Wk,iJe),e(Jg,dJe),e(se,cJe),e(se,Yg),e(Yg,bU),e(bU,fJe),e(Yg,mJe),e(Yg,Qk),e(Qk,gJe),e(Yg,hJe),e(se,pJe),e(se,Kg),e(Kg,vU),e(vU,_Je),e(Kg,uJe),e(Kg,Hk),e(Hk,bJe),e(Kg,vJe),e(se,TJe),e(se,Zg),e(Zg,TU),e(TU,FJe),e(Zg,CJe),e(Zg,Uk),e(Uk,MJe),e(Zg,EJe),e(se,yJe),e(se,eh),e(eh,FU),e(FU,wJe),e(eh,AJe),e(eh,Jk),e(Jk,LJe),e(eh,BJe),e(se,kJe),e(se,oh),e(oh,CU),e(CU,xJe),e(oh,RJe),e(oh,Yk),e(Yk,SJe),e(oh,PJe),e(se,$Je),e(se,rh),e(rh,MU),e(MU,IJe),e(rh,jJe),e(rh,Kk),e(Kk,NJe),e(rh,DJe),e(se,qJe),e(se,th),e(th,EU),e(EU,GJe),e(th,OJe),e(th,Zk),e(Zk,XJe),e(th,zJe),e(se,VJe),e(se,ah),e(ah,yU),e(yU,WJe),e(ah,QJe),e(ah,ex),e(ex,HJe),e(ah,UJe),e(se,JJe),e(se,nh),e(nh,wU),e(wU,YJe),e(nh,KJe),e(nh,ox),e(ox,ZJe),e(nh,eYe),e(se,oYe),e(se,sh),e(sh,AU),e(AU,rYe),e(sh,tYe),e(sh,rx),e(rx,aYe),e(sh,nYe),e(se,sYe),e(se,lh),e(lh,LU),e(LU,lYe),e(lh,iYe),e(lh,tx),e(tx,dYe),e(lh,cYe),e(Le,fYe),g(ih,Le,null),e(Le,mYe),e(Le,BU),e(BU,gYe),e(Le,hYe),g(wM,Le,null),e(Xo,pYe),e(Xo,dh),g(AM,dh,null),e(dh,_Ye),e(dh,kU),e(kU,uYe),b(d,hLe,u),b(d,Ni,u),e(Ni,ch),e(ch,xU),g(LM,xU,null),e(Ni,bYe),e(Ni,RU),e(RU,vYe),b(d,pLe,u),b(d,zo,u),g(BM,zo,null),e(zo,TYe),e(zo,kM),e(kM,FYe),e(kM,ax),e(ax,CYe),e(kM,MYe),e(zo,EYe),e(zo,xM),e(xM,yYe),e(xM,SU),e(SU,wYe),e(xM,AYe),e(zo,LYe),e(zo,Be),g(RM,Be,null),e(Be,BYe),e(Be,PU),e(PU,kYe),e(Be,xYe),e(Be,Di),e(Di,RYe),e(Di,$U),e($U,SYe),e(Di,PYe),e(Di,IU),e(IU,$Ye),e(Di,IYe),e(Be,jYe),e(Be,we),e(we,fh),e(fh,jU),e(jU,NYe),e(fh,DYe),e(fh,nx),e(nx,qYe),e(fh,GYe),e(we,OYe),e(we,mh),e(mh,NU),e(NU,XYe),e(mh,zYe),e(mh,sx),e(sx,VYe),e(mh,WYe),e(we,QYe),e(we,gh),e(gh,DU),e(DU,HYe),e(gh,UYe),e(gh,lx),e(lx,JYe),e(gh,YYe),e(we,KYe),e(we,hh),e(hh,qU),e(qU,ZYe),e(hh,eKe),e(hh,ix),e(ix,oKe),e(hh,rKe),e(we,tKe),e(we,ph),e(ph,GU),e(GU,aKe),e(ph,nKe),e(ph,dx),e(dx,sKe),e(ph,lKe),e(we,iKe),e(we,_h),e(_h,OU),e(OU,dKe),e(_h,cKe),e(_h,cx),e(cx,fKe),e(_h,mKe),e(we,gKe),e(we,uh),e(uh,XU),e(XU,hKe),e(uh,pKe),e(uh,fx),e(fx,_Ke),e(uh,uKe),e(we,bKe),e(we,bh),e(bh,zU),e(zU,vKe),e(bh,TKe),e(bh,mx),e(mx,FKe),e(bh,CKe),e(Be,MKe),g(vh,Be,null),e(Be,EKe),e(Be,VU),e(VU,yKe),e(Be,wKe),g(SM,Be,null),e(zo,AKe),e(zo,Th),g(PM,Th,null),e(Th,LKe),e(Th,WU),e(WU,BKe),b(d,_Le,u),b(d,qi,u),e(qi,Fh),e(Fh,QU),g($M,QU,null),e(qi,kKe),e(qi,HU),e(HU,xKe),b(d,uLe,u),b(d,Vo,u),g(IM,Vo,null),e(Vo,RKe),e(Vo,Gi),e(Gi,SKe),e(Gi,UU),e(UU,PKe),e(Gi,$Ke),e(Gi,JU),e(JU,IKe),e(Gi,jKe),e(Vo,NKe),e(Vo,jM),e(jM,DKe),e(jM,YU),e(YU,qKe),e(jM,GKe),e(Vo,OKe),e(Vo,Nr),g(NM,Nr,null),e(Nr,XKe),e(Nr,KU),e(KU,zKe),e(Nr,VKe),e(Nr,Oi),e(Oi,WKe),e(Oi,ZU),e(ZU,QKe),e(Oi,HKe),e(Oi,eJ),e(eJ,UKe),e(Oi,JKe),e(Nr,YKe),e(Nr,oJ),e(oJ,KKe),e(Nr,ZKe),g(DM,Nr,null),e(Vo,eZe),e(Vo,ke),g(qM,ke,null),e(ke,oZe),e(ke,rJ),e(rJ,rZe),e(ke,tZe),e(ke,Da),e(Da,aZe),e(Da,tJ),e(tJ,nZe),e(Da,sZe),e(Da,aJ),e(aJ,lZe),e(Da,iZe),e(Da,nJ),e(nJ,dZe),e(Da,cZe),e(ke,fZe),e(ke,F),e(F,Ch),e(Ch,sJ),e(sJ,mZe),e(Ch,gZe),e(Ch,gx),e(gx,hZe),e(Ch,pZe),e(F,_Ze),e(F,Mh),e(Mh,lJ),e(lJ,uZe),e(Mh,bZe),e(Mh,hx),e(hx,vZe),e(Mh,TZe),e(F,FZe),e(F,Eh),e(Eh,iJ),e(iJ,CZe),e(Eh,MZe),e(Eh,px),e(px,EZe),e(Eh,yZe),e(F,wZe),e(F,yh),e(yh,dJ),e(dJ,AZe),e(yh,LZe),e(yh,_x),e(_x,BZe),e(yh,kZe),e(F,xZe),e(F,wh),e(wh,cJ),e(cJ,RZe),e(wh,SZe),e(wh,ux),e(ux,PZe),e(wh,$Ze),e(F,IZe),e(F,Ah),e(Ah,fJ),e(fJ,jZe),e(Ah,NZe),e(Ah,bx),e(bx,DZe),e(Ah,qZe),e(F,GZe),e(F,Lh),e(Lh,mJ),e(mJ,OZe),e(Lh,XZe),e(Lh,vx),e(vx,zZe),e(Lh,VZe),e(F,WZe),e(F,Bh),e(Bh,gJ),e(gJ,QZe),e(Bh,HZe),e(Bh,Tx),e(Tx,UZe),e(Bh,JZe),e(F,YZe),e(F,kh),e(kh,hJ),e(hJ,KZe),e(kh,ZZe),e(kh,Fx),e(Fx,eeo),e(kh,oeo),e(F,reo),e(F,xh),e(xh,pJ),e(pJ,teo),e(xh,aeo),e(xh,Cx),e(Cx,neo),e(xh,seo),e(F,leo),e(F,Rh),e(Rh,_J),e(_J,ieo),e(Rh,deo),e(Rh,Mx),e(Mx,ceo),e(Rh,feo),e(F,meo),e(F,Sh),e(Sh,uJ),e(uJ,geo),e(Sh,heo),e(Sh,Ex),e(Ex,peo),e(Sh,_eo),e(F,ueo),e(F,Ph),e(Ph,bJ),e(bJ,beo),e(Ph,veo),e(Ph,yx),e(yx,Teo),e(Ph,Feo),e(F,Ceo),e(F,$h),e($h,vJ),e(vJ,Meo),e($h,Eeo),e($h,wx),e(wx,yeo),e($h,weo),e(F,Aeo),e(F,Ih),e(Ih,TJ),e(TJ,Leo),e(Ih,Beo),e(Ih,Ax),e(Ax,keo),e(Ih,xeo),e(F,Reo),e(F,jh),e(jh,FJ),e(FJ,Seo),e(jh,Peo),e(jh,Lx),e(Lx,$eo),e(jh,Ieo),e(F,jeo),e(F,Nh),e(Nh,CJ),e(CJ,Neo),e(Nh,Deo),e(Nh,Bx),e(Bx,qeo),e(Nh,Geo),e(F,Oeo),e(F,Dh),e(Dh,MJ),e(MJ,Xeo),e(Dh,zeo),e(Dh,kx),e(kx,Veo),e(Dh,Weo),e(F,Qeo),e(F,qh),e(qh,EJ),e(EJ,Heo),e(qh,Ueo),e(qh,xx),e(xx,Jeo),e(qh,Yeo),e(F,Keo),e(F,Gh),e(Gh,yJ),e(yJ,Zeo),e(Gh,eoo),e(Gh,Rx),e(Rx,ooo),e(Gh,roo),e(F,too),e(F,Oh),e(Oh,wJ),e(wJ,aoo),e(Oh,noo),e(Oh,Sx),e(Sx,soo),e(Oh,loo),e(F,ioo),e(F,Xh),e(Xh,AJ),e(AJ,doo),e(Xh,coo),e(Xh,Px),e(Px,foo),e(Xh,moo),e(F,goo),e(F,zh),e(zh,LJ),e(LJ,hoo),e(zh,poo),e(zh,$x),e($x,_oo),e(zh,uoo),e(F,boo),e(F,Vh),e(Vh,BJ),e(BJ,voo),e(Vh,Too),e(Vh,Ix),e(Ix,Foo),e(Vh,Coo),e(F,Moo),e(F,Wh),e(Wh,kJ),e(kJ,Eoo),e(Wh,yoo),e(Wh,jx),e(jx,woo),e(Wh,Aoo),e(F,Loo),e(F,xs),e(xs,xJ),e(xJ,Boo),e(xs,koo),e(xs,Nx),e(Nx,xoo),e(xs,Roo),e(xs,Dx),e(Dx,Soo),e(xs,Poo),e(F,$oo),e(F,Qh),e(Qh,RJ),e(RJ,Ioo),e(Qh,joo),e(Qh,qx),e(qx,Noo),e(Qh,Doo),e(F,qoo),e(F,Hh),e(Hh,SJ),e(SJ,Goo),e(Hh,Ooo),e(Hh,Gx),e(Gx,Xoo),e(Hh,zoo),e(F,Voo),e(F,Uh),e(Uh,PJ),e(PJ,Woo),e(Uh,Qoo),e(Uh,Ox),e(Ox,Hoo),e(Uh,Uoo),e(F,Joo),e(F,Jh),e(Jh,$J),e($J,Yoo),e(Jh,Koo),e(Jh,Xx),e(Xx,Zoo),e(Jh,ero),e(F,oro),e(F,Yh),e(Yh,IJ),e(IJ,rro),e(Yh,tro),e(Yh,zx),e(zx,aro),e(Yh,nro),e(F,sro),e(F,Kh),e(Kh,jJ),e(jJ,lro),e(Kh,iro),e(Kh,Vx),e(Vx,dro),e(Kh,cro),e(F,fro),e(F,Zh),e(Zh,NJ),e(NJ,mro),e(Zh,gro),e(Zh,Wx),e(Wx,hro),e(Zh,pro),e(F,_ro),e(F,ep),e(ep,DJ),e(DJ,uro),e(ep,bro),e(ep,Qx),e(Qx,vro),e(ep,Tro),e(F,Fro),e(F,op),e(op,qJ),e(qJ,Cro),e(op,Mro),e(op,Hx),e(Hx,Ero),e(op,yro),e(F,wro),e(F,rp),e(rp,GJ),e(GJ,Aro),e(rp,Lro),e(rp,Ux),e(Ux,Bro),e(rp,kro),e(F,xro),e(F,tp),e(tp,OJ),e(OJ,Rro),e(tp,Sro),e(tp,Jx),e(Jx,Pro),e(tp,$ro),e(F,Iro),e(F,ap),e(ap,XJ),e(XJ,jro),e(ap,Nro),e(ap,Yx),e(Yx,Dro),e(ap,qro),e(F,Gro),e(F,np),e(np,zJ),e(zJ,Oro),e(np,Xro),e(np,Kx),e(Kx,zro),e(np,Vro),e(F,Wro),e(F,sp),e(sp,VJ),e(VJ,Qro),e(sp,Hro),e(sp,Zx),e(Zx,Uro),e(sp,Jro),e(F,Yro),e(F,lp),e(lp,WJ),e(WJ,Kro),e(lp,Zro),e(lp,eR),e(eR,eto),e(lp,oto),e(F,rto),e(F,ip),e(ip,QJ),e(QJ,tto),e(ip,ato),e(ip,oR),e(oR,nto),e(ip,sto),e(F,lto),e(F,dp),e(dp,HJ),e(HJ,ito),e(dp,dto),e(dp,rR),e(rR,cto),e(dp,fto),e(F,mto),e(F,cp),e(cp,UJ),e(UJ,gto),e(cp,hto),e(cp,tR),e(tR,pto),e(cp,_to),e(F,uto),e(F,fp),e(fp,JJ),e(JJ,bto),e(fp,vto),e(fp,aR),e(aR,Tto),e(fp,Fto),e(F,Cto),e(F,mp),e(mp,YJ),e(YJ,Mto),e(mp,Eto),e(mp,nR),e(nR,yto),e(mp,wto),e(F,Ato),e(F,gp),e(gp,KJ),e(KJ,Lto),e(gp,Bto),e(gp,sR),e(sR,kto),e(gp,xto),e(F,Rto),e(F,hp),e(hp,ZJ),e(ZJ,Sto),e(hp,Pto),e(hp,lR),e(lR,$to),e(hp,Ito),e(F,jto),e(F,pp),e(pp,eY),e(eY,Nto),e(pp,Dto),e(pp,iR),e(iR,qto),e(pp,Gto),e(F,Oto),e(F,_p),e(_p,oY),e(oY,Xto),e(_p,zto),e(_p,dR),e(dR,Vto),e(_p,Wto),e(F,Qto),e(F,up),e(up,rY),e(rY,Hto),e(up,Uto),e(up,cR),e(cR,Jto),e(up,Yto),e(F,Kto),e(F,bp),e(bp,tY),e(tY,Zto),e(bp,eao),e(bp,fR),e(fR,oao),e(bp,rao),e(F,tao),e(F,vp),e(vp,aY),e(aY,aao),e(vp,nao),e(vp,mR),e(mR,sao),e(vp,lao),e(F,iao),e(F,Tp),e(Tp,nY),e(nY,dao),e(Tp,cao),e(Tp,gR),e(gR,fao),e(Tp,mao),e(F,gao),e(F,Fp),e(Fp,sY),e(sY,hao),e(Fp,pao),e(Fp,hR),e(hR,_ao),e(Fp,uao),e(F,bao),e(F,Cp),e(Cp,lY),e(lY,vao),e(Cp,Tao),e(Cp,pR),e(pR,Fao),e(Cp,Cao),e(F,Mao),e(F,Mp),e(Mp,iY),e(iY,Eao),e(Mp,yao),e(Mp,_R),e(_R,wao),e(Mp,Aao),e(F,Lao),e(F,Ep),e(Ep,dY),e(dY,Bao),e(Ep,kao),e(Ep,uR),e(uR,xao),e(Ep,Rao),e(F,Sao),e(F,yp),e(yp,cY),e(cY,Pao),e(yp,$ao),e(yp,bR),e(bR,Iao),e(yp,jao),e(F,Nao),e(F,wp),e(wp,fY),e(fY,Dao),e(wp,qao),e(wp,vR),e(vR,Gao),e(wp,Oao),e(F,Xao),e(F,Ap),e(Ap,mY),e(mY,zao),e(Ap,Vao),e(Ap,TR),e(TR,Wao),e(Ap,Qao),e(F,Hao),e(F,Lp),e(Lp,gY),e(gY,Uao),e(Lp,Jao),e(Lp,FR),e(FR,Yao),e(Lp,Kao),e(F,Zao),e(F,Bp),e(Bp,hY),e(hY,eno),e(Bp,ono),e(Bp,CR),e(CR,rno),e(Bp,tno),e(F,ano),e(F,kp),e(kp,pY),e(pY,nno),e(kp,sno),e(kp,MR),e(MR,lno),e(kp,ino),e(F,dno),e(F,xp),e(xp,_Y),e(_Y,cno),e(xp,fno),e(xp,ER),e(ER,mno),e(xp,gno),e(F,hno),e(F,Rp),e(Rp,uY),e(uY,pno),e(Rp,_no),e(Rp,yR),e(yR,uno),e(Rp,bno),e(F,vno),e(F,Sp),e(Sp,bY),e(bY,Tno),e(Sp,Fno),e(Sp,wR),e(wR,Cno),e(Sp,Mno),e(F,Eno),e(F,Pp),e(Pp,vY),e(vY,yno),e(Pp,wno),e(Pp,AR),e(AR,Ano),e(Pp,Lno),e(F,Bno),e(F,$p),e($p,TY),e(TY,kno),e($p,xno),e($p,LR),e(LR,Rno),e($p,Sno),e(F,Pno),e(F,Ip),e(Ip,FY),e(FY,$no),e(Ip,Ino),e(Ip,BR),e(BR,jno),e(Ip,Nno),e(F,Dno),e(F,jp),e(jp,CY),e(CY,qno),e(jp,Gno),e(jp,kR),e(kR,Ono),e(jp,Xno),e(F,zno),e(F,Np),e(Np,MY),e(MY,Vno),e(Np,Wno),e(Np,xR),e(xR,Qno),e(Np,Hno),e(F,Uno),e(F,Dp),e(Dp,EY),e(EY,Jno),e(Dp,Yno),e(Dp,RR),e(RR,Kno),e(Dp,Zno),e(F,eso),e(F,qp),e(qp,yY),e(yY,oso),e(qp,rso),e(qp,SR),e(SR,tso),e(qp,aso),e(F,nso),e(F,Gp),e(Gp,wY),e(wY,sso),e(Gp,lso),e(Gp,PR),e(PR,iso),e(Gp,dso),e(F,cso),e(F,Op),e(Op,AY),e(AY,fso),e(Op,mso),e(Op,$R),e($R,gso),e(Op,hso),e(F,pso),e(F,Xp),e(Xp,LY),e(LY,_so),e(Xp,uso),e(Xp,IR),e(IR,bso),e(Xp,vso),e(F,Tso),e(F,zp),e(zp,BY),e(BY,Fso),e(zp,Cso),e(zp,jR),e(jR,Mso),e(zp,Eso),e(F,yso),e(F,Vp),e(Vp,kY),e(kY,wso),e(Vp,Aso),e(Vp,NR),e(NR,Lso),e(Vp,Bso),e(F,kso),e(F,Wp),e(Wp,xY),e(xY,xso),e(Wp,Rso),e(Wp,DR),e(DR,Sso),e(Wp,Pso),e(F,$so),e(F,Qp),e(Qp,RY),e(RY,Iso),e(Qp,jso),e(Qp,qR),e(qR,Nso),e(Qp,Dso),e(F,qso),e(F,Hp),e(Hp,SY),e(SY,Gso),e(Hp,Oso),e(Hp,GR),e(GR,Xso),e(Hp,zso),e(F,Vso),e(F,Up),e(Up,PY),e(PY,Wso),e(Up,Qso),e(Up,OR),e(OR,Hso),e(Up,Uso),e(F,Jso),e(F,Jp),e(Jp,$Y),e($Y,Yso),e(Jp,Kso),e(Jp,XR),e(XR,Zso),e(Jp,elo),e(ke,olo),e(ke,Yp),e(Yp,rlo),e(Yp,IY),e(IY,tlo),e(Yp,alo),e(Yp,jY),e(jY,nlo),e(ke,slo),e(ke,NY),e(NY,llo),e(ke,ilo),g(GM,ke,null),b(d,bLe,u),b(d,Xi,u),e(Xi,Kp),e(Kp,DY),g(OM,DY,null),e(Xi,dlo),e(Xi,qY),e(qY,clo),b(d,vLe,u),b(d,Wo,u),g(XM,Wo,null),e(Wo,flo),e(Wo,zi),e(zi,mlo),e(zi,GY),e(GY,glo),e(zi,hlo),e(zi,OY),e(OY,plo),e(zi,_lo),e(Wo,ulo),e(Wo,zM),e(zM,blo),e(zM,XY),e(XY,vlo),e(zM,Tlo),e(Wo,Flo),e(Wo,Dr),g(VM,Dr,null),e(Dr,Clo),e(Dr,zY),e(zY,Mlo),e(Dr,Elo),e(Dr,Vi),e(Vi,ylo),e(Vi,VY),e(VY,wlo),e(Vi,Alo),e(Vi,WY),e(WY,Llo),e(Vi,Blo),e(Dr,klo),e(Dr,QY),e(QY,xlo),e(Dr,Rlo),g(WM,Dr,null),e(Wo,Slo),e(Wo,xe),g(QM,xe,null),e(xe,Plo),e(xe,HY),e(HY,$lo),e(xe,Ilo),e(xe,qa),e(qa,jlo),e(qa,UY),e(UY,Nlo),e(qa,Dlo),e(qa,JY),e(JY,qlo),e(qa,Glo),e(qa,YY),e(YY,Olo),e(qa,Xlo),e(xe,zlo),e(xe,x),e(x,Zp),e(Zp,KY),e(KY,Vlo),e(Zp,Wlo),e(Zp,zR),e(zR,Qlo),e(Zp,Hlo),e(x,Ulo),e(x,e_),e(e_,ZY),e(ZY,Jlo),e(e_,Ylo),e(e_,VR),e(VR,Klo),e(e_,Zlo),e(x,eio),e(x,o_),e(o_,eK),e(eK,oio),e(o_,rio),e(o_,WR),e(WR,tio),e(o_,aio),e(x,nio),e(x,r_),e(r_,oK),e(oK,sio),e(r_,lio),e(r_,QR),e(QR,iio),e(r_,dio),e(x,cio),e(x,t_),e(t_,rK),e(rK,fio),e(t_,mio),e(t_,HR),e(HR,gio),e(t_,hio),e(x,pio),e(x,a_),e(a_,tK),e(tK,_io),e(a_,uio),e(a_,UR),e(UR,bio),e(a_,vio),e(x,Tio),e(x,n_),e(n_,aK),e(aK,Fio),e(n_,Cio),e(n_,JR),e(JR,Mio),e(n_,Eio),e(x,yio),e(x,s_),e(s_,nK),e(nK,wio),e(s_,Aio),e(s_,YR),e(YR,Lio),e(s_,Bio),e(x,kio),e(x,l_),e(l_,sK),e(sK,xio),e(l_,Rio),e(l_,KR),e(KR,Sio),e(l_,Pio),e(x,$io),e(x,i_),e(i_,lK),e(lK,Iio),e(i_,jio),e(i_,ZR),e(ZR,Nio),e(i_,Dio),e(x,qio),e(x,d_),e(d_,iK),e(iK,Gio),e(d_,Oio),e(d_,eS),e(eS,Xio),e(d_,zio),e(x,Vio),e(x,c_),e(c_,dK),e(dK,Wio),e(c_,Qio),e(c_,oS),e(oS,Hio),e(c_,Uio),e(x,Jio),e(x,f_),e(f_,cK),e(cK,Yio),e(f_,Kio),e(f_,rS),e(rS,Zio),e(f_,edo),e(x,odo),e(x,m_),e(m_,fK),e(fK,rdo),e(m_,tdo),e(m_,tS),e(tS,ado),e(m_,ndo),e(x,sdo),e(x,g_),e(g_,mK),e(mK,ldo),e(g_,ido),e(g_,aS),e(aS,ddo),e(g_,cdo),e(x,fdo),e(x,h_),e(h_,gK),e(gK,mdo),e(h_,gdo),e(h_,nS),e(nS,hdo),e(h_,pdo),e(x,_do),e(x,p_),e(p_,hK),e(hK,udo),e(p_,bdo),e(p_,sS),e(sS,vdo),e(p_,Tdo),e(x,Fdo),e(x,__),e(__,pK),e(pK,Cdo),e(__,Mdo),e(__,lS),e(lS,Edo),e(__,ydo),e(x,wdo),e(x,u_),e(u_,_K),e(_K,Ado),e(u_,Ldo),e(u_,iS),e(iS,Bdo),e(u_,kdo),e(x,xdo),e(x,b_),e(b_,uK),e(uK,Rdo),e(b_,Sdo),e(b_,dS),e(dS,Pdo),e(b_,$do),e(x,Ido),e(x,v_),e(v_,bK),e(bK,jdo),e(v_,Ndo),e(v_,cS),e(cS,Ddo),e(v_,qdo),e(x,Gdo),e(x,T_),e(T_,vK),e(vK,Odo),e(T_,Xdo),e(T_,fS),e(fS,zdo),e(T_,Vdo),e(x,Wdo),e(x,F_),e(F_,TK),e(TK,Qdo),e(F_,Hdo),e(F_,mS),e(mS,Udo),e(F_,Jdo),e(x,Ydo),e(x,C_),e(C_,FK),e(FK,Kdo),e(C_,Zdo),e(C_,gS),e(gS,eco),e(C_,oco),e(x,rco),e(x,M_),e(M_,CK),e(CK,tco),e(M_,aco),e(M_,hS),e(hS,nco),e(M_,sco),e(x,lco),e(x,E_),e(E_,MK),e(MK,ico),e(E_,dco),e(E_,pS),e(pS,cco),e(E_,fco),e(x,mco),e(x,y_),e(y_,EK),e(EK,gco),e(y_,hco),e(y_,_S),e(_S,pco),e(y_,_co),e(x,uco),e(x,w_),e(w_,yK),e(yK,bco),e(w_,vco),e(w_,uS),e(uS,Tco),e(w_,Fco),e(x,Cco),e(x,A_),e(A_,wK),e(wK,Mco),e(A_,Eco),e(A_,bS),e(bS,yco),e(A_,wco),e(x,Aco),e(x,L_),e(L_,AK),e(AK,Lco),e(L_,Bco),e(L_,vS),e(vS,kco),e(L_,xco),e(x,Rco),e(x,B_),e(B_,LK),e(LK,Sco),e(B_,Pco),e(B_,TS),e(TS,$co),e(B_,Ico),e(x,jco),e(x,k_),e(k_,BK),e(BK,Nco),e(k_,Dco),e(k_,FS),e(FS,qco),e(k_,Gco),e(x,Oco),e(x,x_),e(x_,kK),e(kK,Xco),e(x_,zco),e(x_,CS),e(CS,Vco),e(x_,Wco),e(x,Qco),e(x,R_),e(R_,xK),e(xK,Hco),e(R_,Uco),e(R_,MS),e(MS,Jco),e(R_,Yco),e(x,Kco),e(x,S_),e(S_,RK),e(RK,Zco),e(S_,efo),e(S_,ES),e(ES,ofo),e(S_,rfo),e(x,tfo),e(x,P_),e(P_,SK),e(SK,afo),e(P_,nfo),e(P_,yS),e(yS,sfo),e(P_,lfo),e(x,ifo),e(x,$_),e($_,PK),e(PK,dfo),e($_,cfo),e($_,wS),e(wS,ffo),e($_,mfo),e(x,gfo),e(x,I_),e(I_,$K),e($K,hfo),e(I_,pfo),e(I_,AS),e(AS,_fo),e(I_,ufo),e(xe,bfo),e(xe,j_),e(j_,vfo),e(j_,IK),e(IK,Tfo),e(j_,Ffo),e(j_,jK),e(jK,Cfo),e(xe,Mfo),e(xe,NK),e(NK,Efo),e(xe,yfo),g(HM,xe,null),b(d,TLe,u),b(d,Wi,u),e(Wi,N_),e(N_,DK),g(UM,DK,null),e(Wi,wfo),e(Wi,qK),e(qK,Afo),b(d,FLe,u),b(d,Qo,u),g(JM,Qo,null),e(Qo,Lfo),e(Qo,Qi),e(Qi,Bfo),e(Qi,GK),e(GK,kfo),e(Qi,xfo),e(Qi,OK),e(OK,Rfo),e(Qi,Sfo),e(Qo,Pfo),e(Qo,YM),e(YM,$fo),e(YM,XK),e(XK,Ifo),e(YM,jfo),e(Qo,Nfo),e(Qo,qr),g(KM,qr,null),e(qr,Dfo),e(qr,zK),e(zK,qfo),e(qr,Gfo),e(qr,Hi),e(Hi,Ofo),e(Hi,VK),e(VK,Xfo),e(Hi,zfo),e(Hi,WK),e(WK,Vfo),e(Hi,Wfo),e(qr,Qfo),e(qr,QK),e(QK,Hfo),e(qr,Ufo),g(ZM,qr,null),e(Qo,Jfo),e(Qo,Re),g(eE,Re,null),e(Re,Yfo),e(Re,HK),e(HK,Kfo),e(Re,Zfo),e(Re,Ga),e(Ga,emo),e(Ga,UK),e(UK,omo),e(Ga,rmo),e(Ga,JK),e(JK,tmo),e(Ga,amo),e(Ga,YK),e(YK,nmo),e(Ga,smo),e(Re,lmo),e(Re,$),e($,D_),e(D_,KK),e(KK,imo),e(D_,dmo),e(D_,LS),e(LS,cmo),e(D_,fmo),e($,mmo),e($,q_),e(q_,ZK),e(ZK,gmo),e(q_,hmo),e(q_,BS),e(BS,pmo),e(q_,_mo),e($,umo),e($,G_),e(G_,eZ),e(eZ,bmo),e(G_,vmo),e(G_,kS),e(kS,Tmo),e(G_,Fmo),e($,Cmo),e($,O_),e(O_,oZ),e(oZ,Mmo),e(O_,Emo),e(O_,xS),e(xS,ymo),e(O_,wmo),e($,Amo),e($,X_),e(X_,rZ),e(rZ,Lmo),e(X_,Bmo),e(X_,RS),e(RS,kmo),e(X_,xmo),e($,Rmo),e($,z_),e(z_,tZ),e(tZ,Smo),e(z_,Pmo),e(z_,SS),e(SS,$mo),e(z_,Imo),e($,jmo),e($,V_),e(V_,aZ),e(aZ,Nmo),e(V_,Dmo),e(V_,PS),e(PS,qmo),e(V_,Gmo),e($,Omo),e($,W_),e(W_,nZ),e(nZ,Xmo),e(W_,zmo),e(W_,$S),e($S,Vmo),e(W_,Wmo),e($,Qmo),e($,Q_),e(Q_,sZ),e(sZ,Hmo),e(Q_,Umo),e(Q_,IS),e(IS,Jmo),e(Q_,Ymo),e($,Kmo),e($,H_),e(H_,lZ),e(lZ,Zmo),e(H_,ego),e(H_,jS),e(jS,ogo),e(H_,rgo),e($,tgo),e($,U_),e(U_,iZ),e(iZ,ago),e(U_,ngo),e(U_,NS),e(NS,sgo),e(U_,lgo),e($,igo),e($,J_),e(J_,dZ),e(dZ,dgo),e(J_,cgo),e(J_,DS),e(DS,fgo),e(J_,mgo),e($,ggo),e($,Y_),e(Y_,cZ),e(cZ,hgo),e(Y_,pgo),e(Y_,qS),e(qS,_go),e(Y_,ugo),e($,bgo),e($,K_),e(K_,fZ),e(fZ,vgo),e(K_,Tgo),e(K_,GS),e(GS,Fgo),e(K_,Cgo),e($,Mgo),e($,Z_),e(Z_,mZ),e(mZ,Ego),e(Z_,ygo),e(Z_,OS),e(OS,wgo),e(Z_,Ago),e($,Lgo),e($,eu),e(eu,gZ),e(gZ,Bgo),e(eu,kgo),e(eu,XS),e(XS,xgo),e(eu,Rgo),e($,Sgo),e($,ou),e(ou,hZ),e(hZ,Pgo),e(ou,$go),e(ou,zS),e(zS,Igo),e(ou,jgo),e($,Ngo),e($,ru),e(ru,pZ),e(pZ,Dgo),e(ru,qgo),e(ru,VS),e(VS,Ggo),e(ru,Ogo),e($,Xgo),e($,tu),e(tu,_Z),e(_Z,zgo),e(tu,Vgo),e(tu,WS),e(WS,Wgo),e(tu,Qgo),e($,Hgo),e($,au),e(au,uZ),e(uZ,Ugo),e(au,Jgo),e(au,QS),e(QS,Ygo),e(au,Kgo),e($,Zgo),e($,nu),e(nu,bZ),e(bZ,eho),e(nu,oho),e(nu,HS),e(HS,rho),e(nu,tho),e($,aho),e($,su),e(su,vZ),e(vZ,nho),e(su,sho),e(su,US),e(US,lho),e(su,iho),e($,dho),e($,lu),e(lu,TZ),e(TZ,cho),e(lu,fho),e(lu,JS),e(JS,mho),e(lu,gho),e($,hho),e($,iu),e(iu,FZ),e(FZ,pho),e(iu,_ho),e(iu,YS),e(YS,uho),e(iu,bho),e($,vho),e($,du),e(du,CZ),e(CZ,Tho),e(du,Fho),e(du,KS),e(KS,Cho),e(du,Mho),e($,Eho),e($,cu),e(cu,MZ),e(MZ,yho),e(cu,who),e(cu,ZS),e(ZS,Aho),e(cu,Lho),e($,Bho),e($,fu),e(fu,EZ),e(EZ,kho),e(fu,xho),e(fu,eP),e(eP,Rho),e(fu,Sho),e($,Pho),e($,mu),e(mu,yZ),e(yZ,$ho),e(mu,Iho),e(mu,oP),e(oP,jho),e(mu,Nho),e($,Dho),e($,gu),e(gu,wZ),e(wZ,qho),e(gu,Gho),e(gu,rP),e(rP,Oho),e(gu,Xho),e($,zho),e($,hu),e(hu,AZ),e(AZ,Vho),e(hu,Who),e(hu,tP),e(tP,Qho),e(hu,Hho),e($,Uho),e($,pu),e(pu,LZ),e(LZ,Jho),e(pu,Yho),e(pu,aP),e(aP,Kho),e(pu,Zho),e($,epo),e($,_u),e(_u,BZ),e(BZ,opo),e(_u,rpo),e(_u,nP),e(nP,tpo),e(_u,apo),e($,npo),e($,uu),e(uu,kZ),e(kZ,spo),e(uu,lpo),e(uu,sP),e(sP,ipo),e(uu,dpo),e($,cpo),e($,bu),e(bu,xZ),e(xZ,fpo),e(bu,mpo),e(bu,lP),e(lP,gpo),e(bu,hpo),e(Re,ppo),e(Re,vu),e(vu,_po),e(vu,RZ),e(RZ,upo),e(vu,bpo),e(vu,SZ),e(SZ,vpo),e(Re,Tpo),e(Re,PZ),e(PZ,Fpo),e(Re,Cpo),g(oE,Re,null),b(d,CLe,u),b(d,Ui,u),e(Ui,Tu),e(Tu,$Z),g(rE,$Z,null),e(Ui,Mpo),e(Ui,IZ),e(IZ,Epo),b(d,MLe,u),b(d,Ho,u),g(tE,Ho,null),e(Ho,ypo),e(Ho,Ji),e(Ji,wpo),e(Ji,jZ),e(jZ,Apo),e(Ji,Lpo),e(Ji,NZ),e(NZ,Bpo),e(Ji,kpo),e(Ho,xpo),e(Ho,aE),e(aE,Rpo),e(aE,DZ),e(DZ,Spo),e(aE,Ppo),e(Ho,$po),e(Ho,Gr),g(nE,Gr,null),e(Gr,Ipo),e(Gr,qZ),e(qZ,jpo),e(Gr,Npo),e(Gr,Yi),e(Yi,Dpo),e(Yi,GZ),e(GZ,qpo),e(Yi,Gpo),e(Yi,OZ),e(OZ,Opo),e(Yi,Xpo),e(Gr,zpo),e(Gr,XZ),e(XZ,Vpo),e(Gr,Wpo),g(sE,Gr,null),e(Ho,Qpo),e(Ho,Se),g(lE,Se,null),e(Se,Hpo),e(Se,zZ),e(zZ,Upo),e(Se,Jpo),e(Se,Oa),e(Oa,Ypo),e(Oa,VZ),e(VZ,Kpo),e(Oa,Zpo),e(Oa,WZ),e(WZ,e_o),e(Oa,o_o),e(Oa,QZ),e(QZ,r_o),e(Oa,t_o),e(Se,a_o),e(Se,I),e(I,Fu),e(Fu,HZ),e(HZ,n_o),e(Fu,s_o),e(Fu,iP),e(iP,l_o),e(Fu,i_o),e(I,d_o),e(I,Cu),e(Cu,UZ),e(UZ,c_o),e(Cu,f_o),e(Cu,dP),e(dP,m_o),e(Cu,g_o),e(I,h_o),e(I,Mu),e(Mu,JZ),e(JZ,p_o),e(Mu,__o),e(Mu,cP),e(cP,u_o),e(Mu,b_o),e(I,v_o),e(I,Eu),e(Eu,YZ),e(YZ,T_o),e(Eu,F_o),e(Eu,fP),e(fP,C_o),e(Eu,M_o),e(I,E_o),e(I,yu),e(yu,KZ),e(KZ,y_o),e(yu,w_o),e(yu,mP),e(mP,A_o),e(yu,L_o),e(I,B_o),e(I,wu),e(wu,ZZ),e(ZZ,k_o),e(wu,x_o),e(wu,gP),e(gP,R_o),e(wu,S_o),e(I,P_o),e(I,Au),e(Au,eee),e(eee,$_o),e(Au,I_o),e(Au,hP),e(hP,j_o),e(Au,N_o),e(I,D_o),e(I,Lu),e(Lu,oee),e(oee,q_o),e(Lu,G_o),e(Lu,pP),e(pP,O_o),e(Lu,X_o),e(I,z_o),e(I,Bu),e(Bu,ree),e(ree,V_o),e(Bu,W_o),e(Bu,_P),e(_P,Q_o),e(Bu,H_o),e(I,U_o),e(I,ku),e(ku,tee),e(tee,J_o),e(ku,Y_o),e(ku,uP),e(uP,K_o),e(ku,Z_o),e(I,euo),e(I,xu),e(xu,aee),e(aee,ouo),e(xu,ruo),e(xu,bP),e(bP,tuo),e(xu,auo),e(I,nuo),e(I,Ru),e(Ru,nee),e(nee,suo),e(Ru,luo),e(Ru,vP),e(vP,iuo),e(Ru,duo),e(I,cuo),e(I,Su),e(Su,see),e(see,fuo),e(Su,muo),e(Su,TP),e(TP,guo),e(Su,huo),e(I,puo),e(I,Pu),e(Pu,lee),e(lee,_uo),e(Pu,uuo),e(Pu,FP),e(FP,buo),e(Pu,vuo),e(I,Tuo),e(I,$u),e($u,iee),e(iee,Fuo),e($u,Cuo),e($u,CP),e(CP,Muo),e($u,Euo),e(I,yuo),e(I,Iu),e(Iu,dee),e(dee,wuo),e(Iu,Auo),e(Iu,MP),e(MP,Luo),e(Iu,Buo),e(I,kuo),e(I,ju),e(ju,cee),e(cee,xuo),e(ju,Ruo),e(ju,EP),e(EP,Suo),e(ju,Puo),e(I,$uo),e(I,Nu),e(Nu,fee),e(fee,Iuo),e(Nu,juo),e(Nu,yP),e(yP,Nuo),e(Nu,Duo),e(I,quo),e(I,Du),e(Du,mee),e(mee,Guo),e(Du,Ouo),e(Du,wP),e(wP,Xuo),e(Du,zuo),e(I,Vuo),e(I,qu),e(qu,gee),e(gee,Wuo),e(qu,Quo),e(qu,AP),e(AP,Huo),e(qu,Uuo),e(I,Juo),e(I,Gu),e(Gu,hee),e(hee,Yuo),e(Gu,Kuo),e(Gu,LP),e(LP,Zuo),e(Gu,e1o),e(I,o1o),e(I,Ou),e(Ou,pee),e(pee,r1o),e(Ou,t1o),e(Ou,BP),e(BP,a1o),e(Ou,n1o),e(I,s1o),e(I,Xu),e(Xu,_ee),e(_ee,l1o),e(Xu,i1o),e(Xu,kP),e(kP,d1o),e(Xu,c1o),e(I,f1o),e(I,zu),e(zu,uee),e(uee,m1o),e(zu,g1o),e(zu,xP),e(xP,h1o),e(zu,p1o),e(I,_1o),e(I,Vu),e(Vu,bee),e(bee,u1o),e(Vu,b1o),e(Vu,RP),e(RP,v1o),e(Vu,T1o),e(I,F1o),e(I,Wu),e(Wu,vee),e(vee,C1o),e(Wu,M1o),e(Wu,SP),e(SP,E1o),e(Wu,y1o),e(I,w1o),e(I,Qu),e(Qu,Tee),e(Tee,A1o),e(Qu,L1o),e(Qu,PP),e(PP,B1o),e(Qu,k1o),e(I,x1o),e(I,Hu),e(Hu,Fee),e(Fee,R1o),e(Hu,S1o),e(Hu,$P),e($P,P1o),e(Hu,$1o),e(I,I1o),e(I,Uu),e(Uu,Cee),e(Cee,j1o),e(Uu,N1o),e(Uu,IP),e(IP,D1o),e(Uu,q1o),e(I,G1o),e(I,Ju),e(Ju,Mee),e(Mee,O1o),e(Ju,X1o),e(Ju,Eee),e(Eee,z1o),e(Ju,V1o),e(I,W1o),e(I,Yu),e(Yu,yee),e(yee,Q1o),e(Yu,H1o),e(Yu,jP),e(jP,U1o),e(Yu,J1o),e(I,Y1o),e(I,Ku),e(Ku,wee),e(wee,K1o),e(Ku,Z1o),e(Ku,NP),e(NP,e4o),e(Ku,o4o),e(I,r4o),e(I,Zu),e(Zu,Aee),e(Aee,t4o),e(Zu,a4o),e(Zu,DP),e(DP,n4o),e(Zu,s4o),e(I,l4o),e(I,e1),e(e1,Lee),e(Lee,i4o),e(e1,d4o),e(e1,qP),e(qP,c4o),e(e1,f4o),e(Se,m4o),e(Se,o1),e(o1,g4o),e(o1,Bee),e(Bee,h4o),e(o1,p4o),e(o1,kee),e(kee,_4o),e(Se,u4o),e(Se,xee),e(xee,b4o),e(Se,v4o),g(iE,Se,null),b(d,ELe,u),b(d,Ki,u),e(Ki,r1),e(r1,Ree),g(dE,Ree,null),e(Ki,T4o),e(Ki,See),e(See,F4o),b(d,yLe,u),b(d,Uo,u),g(cE,Uo,null),e(Uo,C4o),e(Uo,Zi),e(Zi,M4o),e(Zi,Pee),e(Pee,E4o),e(Zi,y4o),e(Zi,$ee),e($ee,w4o),e(Zi,A4o),e(Uo,L4o),e(Uo,fE),e(fE,B4o),e(fE,Iee),e(Iee,k4o),e(fE,x4o),e(Uo,R4o),e(Uo,Or),g(mE,Or,null),e(Or,S4o),e(Or,jee),e(jee,P4o),e(Or,$4o),e(Or,ed),e(ed,I4o),e(ed,Nee),e(Nee,j4o),e(ed,N4o),e(ed,Dee),e(Dee,D4o),e(ed,q4o),e(Or,G4o),e(Or,qee),e(qee,O4o),e(Or,X4o),g(gE,Or,null),e(Uo,z4o),e(Uo,Pe),g(hE,Pe,null),e(Pe,V4o),e(Pe,Gee),e(Gee,W4o),e(Pe,Q4o),e(Pe,Xa),e(Xa,H4o),e(Xa,Oee),e(Oee,U4o),e(Xa,J4o),e(Xa,Xee),e(Xee,Y4o),e(Xa,K4o),e(Xa,zee),e(zee,Z4o),e(Xa,ebo),e(Pe,obo),e(Pe,ae),e(ae,t1),e(t1,Vee),e(Vee,rbo),e(t1,tbo),e(t1,GP),e(GP,abo),e(t1,nbo),e(ae,sbo),e(ae,a1),e(a1,Wee),e(Wee,lbo),e(a1,ibo),e(a1,OP),e(OP,dbo),e(a1,cbo),e(ae,fbo),e(ae,n1),e(n1,Qee),e(Qee,mbo),e(n1,gbo),e(n1,XP),e(XP,hbo),e(n1,pbo),e(ae,_bo),e(ae,s1),e(s1,Hee),e(Hee,ubo),e(s1,bbo),e(s1,zP),e(zP,vbo),e(s1,Tbo),e(ae,Fbo),e(ae,l1),e(l1,Uee),e(Uee,Cbo),e(l1,Mbo),e(l1,VP),e(VP,Ebo),e(l1,ybo),e(ae,wbo),e(ae,i1),e(i1,Jee),e(Jee,Abo),e(i1,Lbo),e(i1,WP),e(WP,Bbo),e(i1,kbo),e(ae,xbo),e(ae,d1),e(d1,Yee),e(Yee,Rbo),e(d1,Sbo),e(d1,QP),e(QP,Pbo),e(d1,$bo),e(ae,Ibo),e(ae,c1),e(c1,Kee),e(Kee,jbo),e(c1,Nbo),e(c1,HP),e(HP,Dbo),e(c1,qbo),e(ae,Gbo),e(ae,f1),e(f1,Zee),e(Zee,Obo),e(f1,Xbo),e(f1,UP),e(UP,zbo),e(f1,Vbo),e(ae,Wbo),e(ae,m1),e(m1,eoe),e(eoe,Qbo),e(m1,Hbo),e(m1,JP),e(JP,Ubo),e(m1,Jbo),e(ae,Ybo),e(ae,g1),e(g1,ooe),e(ooe,Kbo),e(g1,Zbo),e(g1,YP),e(YP,e5o),e(g1,o5o),e(ae,r5o),e(ae,h1),e(h1,roe),e(roe,t5o),e(h1,a5o),e(h1,KP),e(KP,n5o),e(h1,s5o),e(ae,l5o),e(ae,p1),e(p1,toe),e(toe,i5o),e(p1,d5o),e(p1,ZP),e(ZP,c5o),e(p1,f5o),e(ae,m5o),e(ae,_1),e(_1,aoe),e(aoe,g5o),e(_1,h5o),e(_1,e$),e(e$,p5o),e(_1,_5o),e(ae,u5o),e(ae,u1),e(u1,noe),e(noe,b5o),e(u1,v5o),e(u1,o$),e(o$,T5o),e(u1,F5o),e(ae,C5o),e(ae,b1),e(b1,soe),e(soe,M5o),e(b1,E5o),e(b1,r$),e(r$,y5o),e(b1,w5o),e(Pe,A5o),e(Pe,v1),e(v1,L5o),e(v1,loe),e(loe,B5o),e(v1,k5o),e(v1,ioe),e(ioe,x5o),e(Pe,R5o),e(Pe,doe),e(doe,S5o),e(Pe,P5o),g(pE,Pe,null),b(d,wLe,u),b(d,od,u),e(od,T1),e(T1,coe),g(_E,coe,null),e(od,$5o),e(od,foe),e(foe,I5o),b(d,ALe,u),b(d,Jo,u),g(uE,Jo,null),e(Jo,j5o),e(Jo,rd),e(rd,N5o),e(rd,moe),e(moe,D5o),e(rd,q5o),e(rd,goe),e(goe,G5o),e(rd,O5o),e(Jo,X5o),e(Jo,bE),e(bE,z5o),e(bE,hoe),e(hoe,V5o),e(bE,W5o),e(Jo,Q5o),e(Jo,Xr),g(vE,Xr,null),e(Xr,H5o),e(Xr,poe),e(poe,U5o),e(Xr,J5o),e(Xr,td),e(td,Y5o),e(td,_oe),e(_oe,K5o),e(td,Z5o),e(td,uoe),e(uoe,e2o),e(td,o2o),e(Xr,r2o),e(Xr,boe),e(boe,t2o),e(Xr,a2o),g(TE,Xr,null),e(Jo,n2o),e(Jo,$e),g(FE,$e,null),e($e,s2o),e($e,voe),e(voe,l2o),e($e,i2o),e($e,za),e(za,d2o),e(za,Toe),e(Toe,c2o),e(za,f2o),e(za,Foe),e(Foe,m2o),e(za,g2o),e(za,Coe),e(Coe,h2o),e(za,p2o),e($e,_2o),e($e,A),e(A,F1),e(F1,Moe),e(Moe,u2o),e(F1,b2o),e(F1,t$),e(t$,v2o),e(F1,T2o),e(A,F2o),e(A,C1),e(C1,Eoe),e(Eoe,C2o),e(C1,M2o),e(C1,a$),e(a$,E2o),e(C1,y2o),e(A,w2o),e(A,M1),e(M1,yoe),e(yoe,A2o),e(M1,L2o),e(M1,n$),e(n$,B2o),e(M1,k2o),e(A,x2o),e(A,E1),e(E1,woe),e(woe,R2o),e(E1,S2o),e(E1,s$),e(s$,P2o),e(E1,$2o),e(A,I2o),e(A,y1),e(y1,Aoe),e(Aoe,j2o),e(y1,N2o),e(y1,l$),e(l$,D2o),e(y1,q2o),e(A,G2o),e(A,w1),e(w1,Loe),e(Loe,O2o),e(w1,X2o),e(w1,i$),e(i$,z2o),e(w1,V2o),e(A,W2o),e(A,A1),e(A1,Boe),e(Boe,Q2o),e(A1,H2o),e(A1,d$),e(d$,U2o),e(A1,J2o),e(A,Y2o),e(A,L1),e(L1,koe),e(koe,K2o),e(L1,Z2o),e(L1,c$),e(c$,evo),e(L1,ovo),e(A,rvo),e(A,B1),e(B1,xoe),e(xoe,tvo),e(B1,avo),e(B1,f$),e(f$,nvo),e(B1,svo),e(A,lvo),e(A,k1),e(k1,Roe),e(Roe,ivo),e(k1,dvo),e(k1,m$),e(m$,cvo),e(k1,fvo),e(A,mvo),e(A,x1),e(x1,Soe),e(Soe,gvo),e(x1,hvo),e(x1,g$),e(g$,pvo),e(x1,_vo),e(A,uvo),e(A,R1),e(R1,Poe),e(Poe,bvo),e(R1,vvo),e(R1,h$),e(h$,Tvo),e(R1,Fvo),e(A,Cvo),e(A,S1),e(S1,$oe),e($oe,Mvo),e(S1,Evo),e(S1,p$),e(p$,yvo),e(S1,wvo),e(A,Avo),e(A,P1),e(P1,Ioe),e(Ioe,Lvo),e(P1,Bvo),e(P1,_$),e(_$,kvo),e(P1,xvo),e(A,Rvo),e(A,$1),e($1,joe),e(joe,Svo),e($1,Pvo),e($1,u$),e(u$,$vo),e($1,Ivo),e(A,jvo),e(A,I1),e(I1,Noe),e(Noe,Nvo),e(I1,Dvo),e(I1,b$),e(b$,qvo),e(I1,Gvo),e(A,Ovo),e(A,j1),e(j1,Doe),e(Doe,Xvo),e(j1,zvo),e(j1,v$),e(v$,Vvo),e(j1,Wvo),e(A,Qvo),e(A,N1),e(N1,qoe),e(qoe,Hvo),e(N1,Uvo),e(N1,T$),e(T$,Jvo),e(N1,Yvo),e(A,Kvo),e(A,D1),e(D1,Goe),e(Goe,Zvo),e(D1,eTo),e(D1,F$),e(F$,oTo),e(D1,rTo),e(A,tTo),e(A,q1),e(q1,Ooe),e(Ooe,aTo),e(q1,nTo),e(q1,C$),e(C$,sTo),e(q1,lTo),e(A,iTo),e(A,G1),e(G1,Xoe),e(Xoe,dTo),e(G1,cTo),e(G1,M$),e(M$,fTo),e(G1,mTo),e(A,gTo),e(A,O1),e(O1,zoe),e(zoe,hTo),e(O1,pTo),e(O1,E$),e(E$,_To),e(O1,uTo),e(A,bTo),e(A,X1),e(X1,Voe),e(Voe,vTo),e(X1,TTo),e(X1,y$),e(y$,FTo),e(X1,CTo),e(A,MTo),e(A,z1),e(z1,Woe),e(Woe,ETo),e(z1,yTo),e(z1,w$),e(w$,wTo),e(z1,ATo),e(A,LTo),e(A,V1),e(V1,Qoe),e(Qoe,BTo),e(V1,kTo),e(V1,A$),e(A$,xTo),e(V1,RTo),e(A,STo),e(A,W1),e(W1,Hoe),e(Hoe,PTo),e(W1,$To),e(W1,L$),e(L$,ITo),e(W1,jTo),e(A,NTo),e(A,Q1),e(Q1,Uoe),e(Uoe,DTo),e(Q1,qTo),e(Q1,B$),e(B$,GTo),e(Q1,OTo),e(A,XTo),e(A,H1),e(H1,Joe),e(Joe,zTo),e(H1,VTo),e(H1,k$),e(k$,WTo),e(H1,QTo),e(A,HTo),e(A,U1),e(U1,Yoe),e(Yoe,UTo),e(U1,JTo),e(U1,x$),e(x$,YTo),e(U1,KTo),e(A,ZTo),e(A,J1),e(J1,Koe),e(Koe,e7o),e(J1,o7o),e(J1,R$),e(R$,r7o),e(J1,t7o),e(A,a7o),e(A,Y1),e(Y1,Zoe),e(Zoe,n7o),e(Y1,s7o),e(Y1,S$),e(S$,l7o),e(Y1,i7o),e(A,d7o),e(A,K1),e(K1,ere),e(ere,c7o),e(K1,f7o),e(K1,P$),e(P$,m7o),e(K1,g7o),e(A,h7o),e(A,Z1),e(Z1,ore),e(ore,p7o),e(Z1,_7o),e(Z1,$$),e($$,u7o),e(Z1,b7o),e(A,v7o),e(A,e4),e(e4,rre),e(rre,T7o),e(e4,F7o),e(e4,I$),e(I$,C7o),e(e4,M7o),e(A,E7o),e(A,o4),e(o4,tre),e(tre,y7o),e(o4,w7o),e(o4,j$),e(j$,A7o),e(o4,L7o),e(A,B7o),e(A,r4),e(r4,are),e(are,k7o),e(r4,x7o),e(r4,N$),e(N$,R7o),e(r4,S7o),e(A,P7o),e(A,t4),e(t4,nre),e(nre,$7o),e(t4,I7o),e(t4,D$),e(D$,j7o),e(t4,N7o),e(A,D7o),e(A,a4),e(a4,sre),e(sre,q7o),e(a4,G7o),e(a4,q$),e(q$,O7o),e(a4,X7o),e(A,z7o),e(A,n4),e(n4,lre),e(lre,V7o),e(n4,W7o),e(n4,G$),e(G$,Q7o),e(n4,H7o),e(A,U7o),e(A,s4),e(s4,ire),e(ire,J7o),e(s4,Y7o),e(s4,O$),e(O$,K7o),e(s4,Z7o),e(A,e8o),e(A,l4),e(l4,dre),e(dre,o8o),e(l4,r8o),e(l4,X$),e(X$,t8o),e(l4,a8o),e(A,n8o),e(A,i4),e(i4,cre),e(cre,s8o),e(i4,l8o),e(i4,z$),e(z$,i8o),e(i4,d8o),e(A,c8o),e(A,d4),e(d4,fre),e(fre,f8o),e(d4,m8o),e(d4,V$),e(V$,g8o),e(d4,h8o),e(A,p8o),e(A,c4),e(c4,mre),e(mre,_8o),e(c4,u8o),e(c4,W$),e(W$,b8o),e(c4,v8o),e(A,T8o),e(A,f4),e(f4,gre),e(gre,F8o),e(f4,C8o),e(f4,Q$),e(Q$,M8o),e(f4,E8o),e($e,y8o),e($e,m4),e(m4,w8o),e(m4,hre),e(hre,A8o),e(m4,L8o),e(m4,pre),e(pre,B8o),e($e,k8o),e($e,_re),e(_re,x8o),e($e,R8o),g(CE,$e,null),b(d,LLe,u),b(d,ad,u),e(ad,g4),e(g4,ure),g(ME,ure,null),e(ad,S8o),e(ad,bre),e(bre,P8o),b(d,BLe,u),b(d,Yo,u),g(EE,Yo,null),e(Yo,$8o),e(Yo,nd),e(nd,I8o),e(nd,vre),e(vre,j8o),e(nd,N8o),e(nd,Tre),e(Tre,D8o),e(nd,q8o),e(Yo,G8o),e(Yo,yE),e(yE,O8o),e(yE,Fre),e(Fre,X8o),e(yE,z8o),e(Yo,V8o),e(Yo,zr),g(wE,zr,null),e(zr,W8o),e(zr,Cre),e(Cre,Q8o),e(zr,H8o),e(zr,sd),e(sd,U8o),e(sd,Mre),e(Mre,J8o),e(sd,Y8o),e(sd,Ere),e(Ere,K8o),e(sd,Z8o),e(zr,eFo),e(zr,yre),e(yre,oFo),e(zr,rFo),g(AE,zr,null),e(Yo,tFo),e(Yo,Ie),g(LE,Ie,null),e(Ie,aFo),e(Ie,wre),e(wre,nFo),e(Ie,sFo),e(Ie,Va),e(Va,lFo),e(Va,Are),e(Are,iFo),e(Va,dFo),e(Va,Lre),e(Lre,cFo),e(Va,fFo),e(Va,Bre),e(Bre,mFo),e(Va,gFo),e(Ie,hFo),e(Ie,G),e(G,h4),e(h4,kre),e(kre,pFo),e(h4,_Fo),e(h4,H$),e(H$,uFo),e(h4,bFo),e(G,vFo),e(G,p4),e(p4,xre),e(xre,TFo),e(p4,FFo),e(p4,U$),e(U$,CFo),e(p4,MFo),e(G,EFo),e(G,_4),e(_4,Rre),e(Rre,yFo),e(_4,wFo),e(_4,J$),e(J$,AFo),e(_4,LFo),e(G,BFo),e(G,u4),e(u4,Sre),e(Sre,kFo),e(u4,xFo),e(u4,Y$),e(Y$,RFo),e(u4,SFo),e(G,PFo),e(G,b4),e(b4,Pre),e(Pre,$Fo),e(b4,IFo),e(b4,K$),e(K$,jFo),e(b4,NFo),e(G,DFo),e(G,v4),e(v4,$re),e($re,qFo),e(v4,GFo),e(v4,Z$),e(Z$,OFo),e(v4,XFo),e(G,zFo),e(G,T4),e(T4,Ire),e(Ire,VFo),e(T4,WFo),e(T4,eI),e(eI,QFo),e(T4,HFo),e(G,UFo),e(G,F4),e(F4,jre),e(jre,JFo),e(F4,YFo),e(F4,oI),e(oI,KFo),e(F4,ZFo),e(G,eCo),e(G,C4),e(C4,Nre),e(Nre,oCo),e(C4,rCo),e(C4,rI),e(rI,tCo),e(C4,aCo),e(G,nCo),e(G,M4),e(M4,Dre),e(Dre,sCo),e(M4,lCo),e(M4,tI),e(tI,iCo),e(M4,dCo),e(G,cCo),e(G,E4),e(E4,qre),e(qre,fCo),e(E4,mCo),e(E4,aI),e(aI,gCo),e(E4,hCo),e(G,pCo),e(G,y4),e(y4,Gre),e(Gre,_Co),e(y4,uCo),e(y4,nI),e(nI,bCo),e(y4,vCo),e(G,TCo),e(G,w4),e(w4,Ore),e(Ore,FCo),e(w4,CCo),e(w4,sI),e(sI,MCo),e(w4,ECo),e(G,yCo),e(G,A4),e(A4,Xre),e(Xre,wCo),e(A4,ACo),e(A4,lI),e(lI,LCo),e(A4,BCo),e(G,kCo),e(G,L4),e(L4,zre),e(zre,xCo),e(L4,RCo),e(L4,iI),e(iI,SCo),e(L4,PCo),e(G,$Co),e(G,B4),e(B4,Vre),e(Vre,ICo),e(B4,jCo),e(B4,dI),e(dI,NCo),e(B4,DCo),e(G,qCo),e(G,k4),e(k4,Wre),e(Wre,GCo),e(k4,OCo),e(k4,cI),e(cI,XCo),e(k4,zCo),e(G,VCo),e(G,x4),e(x4,Qre),e(Qre,WCo),e(x4,QCo),e(x4,fI),e(fI,HCo),e(x4,UCo),e(G,JCo),e(G,R4),e(R4,Hre),e(Hre,YCo),e(R4,KCo),e(R4,mI),e(mI,ZCo),e(R4,eMo),e(G,oMo),e(G,S4),e(S4,Ure),e(Ure,rMo),e(S4,tMo),e(S4,gI),e(gI,aMo),e(S4,nMo),e(G,sMo),e(G,P4),e(P4,Jre),e(Jre,lMo),e(P4,iMo),e(P4,hI),e(hI,dMo),e(P4,cMo),e(G,fMo),e(G,$4),e($4,Yre),e(Yre,mMo),e($4,gMo),e($4,pI),e(pI,hMo),e($4,pMo),e(G,_Mo),e(G,I4),e(I4,Kre),e(Kre,uMo),e(I4,bMo),e(I4,_I),e(_I,vMo),e(I4,TMo),e(G,FMo),e(G,j4),e(j4,Zre),e(Zre,CMo),e(j4,MMo),e(j4,uI),e(uI,EMo),e(j4,yMo),e(G,wMo),e(G,N4),e(N4,ete),e(ete,AMo),e(N4,LMo),e(N4,bI),e(bI,BMo),e(N4,kMo),e(G,xMo),e(G,D4),e(D4,ote),e(ote,RMo),e(D4,SMo),e(D4,vI),e(vI,PMo),e(D4,$Mo),e(G,IMo),e(G,q4),e(q4,rte),e(rte,jMo),e(q4,NMo),e(q4,TI),e(TI,DMo),e(q4,qMo),e(Ie,GMo),e(Ie,G4),e(G4,OMo),e(G4,tte),e(tte,XMo),e(G4,zMo),e(G4,ate),e(ate,VMo),e(Ie,WMo),e(Ie,nte),e(nte,QMo),e(Ie,HMo),g(BE,Ie,null),b(d,kLe,u),b(d,ld,u),e(ld,O4),e(O4,ste),g(kE,ste,null),e(ld,UMo),e(ld,lte),e(lte,JMo),b(d,xLe,u),b(d,Ko,u),g(xE,Ko,null),e(Ko,YMo),e(Ko,id),e(id,KMo),e(id,ite),e(ite,ZMo),e(id,eEo),e(id,dte),e(dte,oEo),e(id,rEo),e(Ko,tEo),e(Ko,RE),e(RE,aEo),e(RE,cte),e(cte,nEo),e(RE,sEo),e(Ko,lEo),e(Ko,Vr),g(SE,Vr,null),e(Vr,iEo),e(Vr,fte),e(fte,dEo),e(Vr,cEo),e(Vr,dd),e(dd,fEo),e(dd,mte),e(mte,mEo),e(dd,gEo),e(dd,gte),e(gte,hEo),e(dd,pEo),e(Vr,_Eo),e(Vr,hte),e(hte,uEo),e(Vr,bEo),g(PE,Vr,null),e(Ko,vEo),e(Ko,je),g($E,je,null),e(je,TEo),e(je,pte),e(pte,FEo),e(je,CEo),e(je,Wa),e(Wa,MEo),e(Wa,_te),e(_te,EEo),e(Wa,yEo),e(Wa,ute),e(ute,wEo),e(Wa,AEo),e(Wa,bte),e(bte,LEo),e(Wa,BEo),e(je,kEo),e(je,na),e(na,X4),e(X4,vte),e(vte,xEo),e(X4,REo),e(X4,FI),e(FI,SEo),e(X4,PEo),e(na,$Eo),e(na,z4),e(z4,Tte),e(Tte,IEo),e(z4,jEo),e(z4,CI),e(CI,NEo),e(z4,DEo),e(na,qEo),e(na,V4),e(V4,Fte),e(Fte,GEo),e(V4,OEo),e(V4,MI),e(MI,XEo),e(V4,zEo),e(na,VEo),e(na,W4),e(W4,Cte),e(Cte,WEo),e(W4,QEo),e(W4,EI),e(EI,HEo),e(W4,UEo),e(na,JEo),e(na,Q4),e(Q4,Mte),e(Mte,YEo),e(Q4,KEo),e(Q4,yI),e(yI,ZEo),e(Q4,e3o),e(je,o3o),e(je,H4),e(H4,r3o),e(H4,Ete),e(Ete,t3o),e(H4,a3o),e(H4,yte),e(yte,n3o),e(je,s3o),e(je,wte),e(wte,l3o),e(je,i3o),g(IE,je,null),b(d,RLe,u),b(d,cd,u),e(cd,U4),e(U4,Ate),g(jE,Ate,null),e(cd,d3o),e(cd,Lte),e(Lte,c3o),b(d,SLe,u),b(d,Zo,u),g(NE,Zo,null),e(Zo,f3o),e(Zo,fd),e(fd,m3o),e(fd,Bte),e(Bte,g3o),e(fd,h3o),e(fd,kte),e(kte,p3o),e(fd,_3o),e(Zo,u3o),e(Zo,DE),e(DE,b3o),e(DE,xte),e(xte,v3o),e(DE,T3o),e(Zo,F3o),e(Zo,Wr),g(qE,Wr,null),e(Wr,C3o),e(Wr,Rte),e(Rte,M3o),e(Wr,E3o),e(Wr,md),e(md,y3o),e(md,Ste),e(Ste,w3o),e(md,A3o),e(md,Pte),e(Pte,L3o),e(md,B3o),e(Wr,k3o),e(Wr,$te),e($te,x3o),e(Wr,R3o),g(GE,Wr,null),e(Zo,S3o),e(Zo,Ne),g(OE,Ne,null),e(Ne,P3o),e(Ne,Ite),e(Ite,$3o),e(Ne,I3o),e(Ne,Qa),e(Qa,j3o),e(Qa,jte),e(jte,N3o),e(Qa,D3o),e(Qa,Nte),e(Nte,q3o),e(Qa,G3o),e(Qa,Dte),e(Dte,O3o),e(Qa,X3o),e(Ne,z3o),e(Ne,D),e(D,J4),e(J4,qte),e(qte,V3o),e(J4,W3o),e(J4,wI),e(wI,Q3o),e(J4,H3o),e(D,U3o),e(D,Y4),e(Y4,Gte),e(Gte,J3o),e(Y4,Y3o),e(Y4,AI),e(AI,K3o),e(Y4,Z3o),e(D,eyo),e(D,K4),e(K4,Ote),e(Ote,oyo),e(K4,ryo),e(K4,LI),e(LI,tyo),e(K4,ayo),e(D,nyo),e(D,Z4),e(Z4,Xte),e(Xte,syo),e(Z4,lyo),e(Z4,BI),e(BI,iyo),e(Z4,dyo),e(D,cyo),e(D,eb),e(eb,zte),e(zte,fyo),e(eb,myo),e(eb,kI),e(kI,gyo),e(eb,hyo),e(D,pyo),e(D,ob),e(ob,Vte),e(Vte,_yo),e(ob,uyo),e(ob,xI),e(xI,byo),e(ob,vyo),e(D,Tyo),e(D,rb),e(rb,Wte),e(Wte,Fyo),e(rb,Cyo),e(rb,RI),e(RI,Myo),e(rb,Eyo),e(D,yyo),e(D,tb),e(tb,Qte),e(Qte,wyo),e(tb,Ayo),e(tb,SI),e(SI,Lyo),e(tb,Byo),e(D,kyo),e(D,ab),e(ab,Hte),e(Hte,xyo),e(ab,Ryo),e(ab,PI),e(PI,Syo),e(ab,Pyo),e(D,$yo),e(D,nb),e(nb,Ute),e(Ute,Iyo),e(nb,jyo),e(nb,$I),e($I,Nyo),e(nb,Dyo),e(D,qyo),e(D,sb),e(sb,Jte),e(Jte,Gyo),e(sb,Oyo),e(sb,II),e(II,Xyo),e(sb,zyo),e(D,Vyo),e(D,lb),e(lb,Yte),e(Yte,Wyo),e(lb,Qyo),e(lb,jI),e(jI,Hyo),e(lb,Uyo),e(D,Jyo),e(D,ib),e(ib,Kte),e(Kte,Yyo),e(ib,Kyo),e(ib,NI),e(NI,Zyo),e(ib,ewo),e(D,owo),e(D,db),e(db,Zte),e(Zte,rwo),e(db,two),e(db,DI),e(DI,awo),e(db,nwo),e(D,swo),e(D,cb),e(cb,eae),e(eae,lwo),e(cb,iwo),e(cb,qI),e(qI,dwo),e(cb,cwo),e(D,fwo),e(D,fb),e(fb,oae),e(oae,mwo),e(fb,gwo),e(fb,GI),e(GI,hwo),e(fb,pwo),e(D,_wo),e(D,mb),e(mb,rae),e(rae,uwo),e(mb,bwo),e(mb,OI),e(OI,vwo),e(mb,Two),e(D,Fwo),e(D,gb),e(gb,tae),e(tae,Cwo),e(gb,Mwo),e(gb,XI),e(XI,Ewo),e(gb,ywo),e(D,wwo),e(D,hb),e(hb,aae),e(aae,Awo),e(hb,Lwo),e(hb,zI),e(zI,Bwo),e(hb,kwo),e(D,xwo),e(D,pb),e(pb,nae),e(nae,Rwo),e(pb,Swo),e(pb,VI),e(VI,Pwo),e(pb,$wo),e(D,Iwo),e(D,_b),e(_b,sae),e(sae,jwo),e(_b,Nwo),e(_b,WI),e(WI,Dwo),e(_b,qwo),e(D,Gwo),e(D,ub),e(ub,lae),e(lae,Owo),e(ub,Xwo),e(ub,QI),e(QI,zwo),e(ub,Vwo),e(D,Wwo),e(D,bb),e(bb,iae),e(iae,Qwo),e(bb,Hwo),e(bb,HI),e(HI,Uwo),e(bb,Jwo),e(D,Ywo),e(D,vb),e(vb,dae),e(dae,Kwo),e(vb,Zwo),e(vb,UI),e(UI,eAo),e(vb,oAo),e(D,rAo),e(D,Tb),e(Tb,cae),e(cae,tAo),e(Tb,aAo),e(Tb,JI),e(JI,nAo),e(Tb,sAo),e(D,lAo),e(D,Fb),e(Fb,fae),e(fae,iAo),e(Fb,dAo),e(Fb,YI),e(YI,cAo),e(Fb,fAo),e(D,mAo),e(D,Cb),e(Cb,mae),e(mae,gAo),e(Cb,hAo),e(Cb,KI),e(KI,pAo),e(Cb,_Ao),e(D,uAo),e(D,Mb),e(Mb,gae),e(gae,bAo),e(Mb,vAo),e(Mb,ZI),e(ZI,TAo),e(Mb,FAo),e(D,CAo),e(D,Eb),e(Eb,hae),e(hae,MAo),e(Eb,EAo),e(Eb,ej),e(ej,yAo),e(Eb,wAo),e(D,AAo),e(D,yb),e(yb,pae),e(pae,LAo),e(yb,BAo),e(yb,oj),e(oj,kAo),e(yb,xAo),e(D,RAo),e(D,wb),e(wb,_ae),e(_ae,SAo),e(wb,PAo),e(wb,rj),e(rj,$Ao),e(wb,IAo),e(D,jAo),e(D,Ab),e(Ab,uae),e(uae,NAo),e(Ab,DAo),e(Ab,tj),e(tj,qAo),e(Ab,GAo),e(Ne,OAo),e(Ne,Lb),e(Lb,XAo),e(Lb,bae),e(bae,zAo),e(Lb,VAo),e(Lb,vae),e(vae,WAo),e(Ne,QAo),e(Ne,Tae),e(Tae,HAo),e(Ne,UAo),g(XE,Ne,null),b(d,PLe,u),b(d,gd,u),e(gd,Bb),e(Bb,Fae),g(zE,Fae,null),e(gd,JAo),e(gd,Cae),e(Cae,YAo),b(d,$Le,u),b(d,er,u),g(VE,er,null),e(er,KAo),e(er,hd),e(hd,ZAo),e(hd,Mae),e(Mae,e6o),e(hd,o6o),e(hd,Eae),e(Eae,r6o),e(hd,t6o),e(er,a6o),e(er,WE),e(WE,n6o),e(WE,yae),e(yae,s6o),e(WE,l6o),e(er,i6o),e(er,Qr),g(QE,Qr,null),e(Qr,d6o),e(Qr,wae),e(wae,c6o),e(Qr,f6o),e(Qr,pd),e(pd,m6o),e(pd,Aae),e(Aae,g6o),e(pd,h6o),e(pd,Lae),e(Lae,p6o),e(pd,_6o),e(Qr,u6o),e(Qr,Bae),e(Bae,b6o),e(Qr,v6o),g(HE,Qr,null),e(er,T6o),e(er,De),g(UE,De,null),e(De,F6o),e(De,kae),e(kae,C6o),e(De,M6o),e(De,Ha),e(Ha,E6o),e(Ha,xae),e(xae,y6o),e(Ha,w6o),e(Ha,Rae),e(Rae,A6o),e(Ha,L6o),e(Ha,Sae),e(Sae,B6o),e(Ha,k6o),e(De,x6o),e(De,R),e(R,kb),e(kb,Pae),e(Pae,R6o),e(kb,S6o),e(kb,aj),e(aj,P6o),e(kb,$6o),e(R,I6o),e(R,xb),e(xb,$ae),e($ae,j6o),e(xb,N6o),e(xb,nj),e(nj,D6o),e(xb,q6o),e(R,G6o),e(R,Rb),e(Rb,Iae),e(Iae,O6o),e(Rb,X6o),e(Rb,sj),e(sj,z6o),e(Rb,V6o),e(R,W6o),e(R,Sb),e(Sb,jae),e(jae,Q6o),e(Sb,H6o),e(Sb,lj),e(lj,U6o),e(Sb,J6o),e(R,Y6o),e(R,Pb),e(Pb,Nae),e(Nae,K6o),e(Pb,Z6o),e(Pb,ij),e(ij,e0o),e(Pb,o0o),e(R,r0o),e(R,$b),e($b,Dae),e(Dae,t0o),e($b,a0o),e($b,dj),e(dj,n0o),e($b,s0o),e(R,l0o),e(R,Ib),e(Ib,qae),e(qae,i0o),e(Ib,d0o),e(Ib,cj),e(cj,c0o),e(Ib,f0o),e(R,m0o),e(R,jb),e(jb,Gae),e(Gae,g0o),e(jb,h0o),e(jb,fj),e(fj,p0o),e(jb,_0o),e(R,u0o),e(R,Nb),e(Nb,Oae),e(Oae,b0o),e(Nb,v0o),e(Nb,mj),e(mj,T0o),e(Nb,F0o),e(R,C0o),e(R,Db),e(Db,Xae),e(Xae,M0o),e(Db,E0o),e(Db,gj),e(gj,y0o),e(Db,w0o),e(R,A0o),e(R,qb),e(qb,zae),e(zae,L0o),e(qb,B0o),e(qb,hj),e(hj,k0o),e(qb,x0o),e(R,R0o),e(R,Gb),e(Gb,Vae),e(Vae,S0o),e(Gb,P0o),e(Gb,pj),e(pj,$0o),e(Gb,I0o),e(R,j0o),e(R,Ob),e(Ob,Wae),e(Wae,N0o),e(Ob,D0o),e(Ob,_j),e(_j,q0o),e(Ob,G0o),e(R,O0o),e(R,Xb),e(Xb,Qae),e(Qae,X0o),e(Xb,z0o),e(Xb,uj),e(uj,V0o),e(Xb,W0o),e(R,Q0o),e(R,zb),e(zb,Hae),e(Hae,H0o),e(zb,U0o),e(zb,bj),e(bj,J0o),e(zb,Y0o),e(R,K0o),e(R,Vb),e(Vb,Uae),e(Uae,Z0o),e(Vb,eLo),e(Vb,vj),e(vj,oLo),e(Vb,rLo),e(R,tLo),e(R,Wb),e(Wb,Jae),e(Jae,aLo),e(Wb,nLo),e(Wb,Tj),e(Tj,sLo),e(Wb,lLo),e(R,iLo),e(R,Qb),e(Qb,Yae),e(Yae,dLo),e(Qb,cLo),e(Qb,Fj),e(Fj,fLo),e(Qb,mLo),e(R,gLo),e(R,Hb),e(Hb,Kae),e(Kae,hLo),e(Hb,pLo),e(Hb,Cj),e(Cj,_Lo),e(Hb,uLo),e(R,bLo),e(R,Ub),e(Ub,Zae),e(Zae,vLo),e(Ub,TLo),e(Ub,Mj),e(Mj,FLo),e(Ub,CLo),e(R,MLo),e(R,Jb),e(Jb,ene),e(ene,ELo),e(Jb,yLo),e(Jb,Ej),e(Ej,wLo),e(Jb,ALo),e(R,LLo),e(R,Yb),e(Yb,one),e(one,BLo),e(Yb,kLo),e(Yb,yj),e(yj,xLo),e(Yb,RLo),e(R,SLo),e(R,Kb),e(Kb,rne),e(rne,PLo),e(Kb,$Lo),e(Kb,wj),e(wj,ILo),e(Kb,jLo),e(R,NLo),e(R,Zb),e(Zb,tne),e(tne,DLo),e(Zb,qLo),e(Zb,Aj),e(Aj,GLo),e(Zb,OLo),e(R,XLo),e(R,e5),e(e5,ane),e(ane,zLo),e(e5,VLo),e(e5,Lj),e(Lj,WLo),e(e5,QLo),e(R,HLo),e(R,o5),e(o5,nne),e(nne,ULo),e(o5,JLo),e(o5,Bj),e(Bj,YLo),e(o5,KLo),e(R,ZLo),e(R,r5),e(r5,sne),e(sne,e9o),e(r5,o9o),e(r5,kj),e(kj,r9o),e(r5,t9o),e(R,a9o),e(R,t5),e(t5,lne),e(lne,n9o),e(t5,s9o),e(t5,xj),e(xj,l9o),e(t5,i9o),e(R,d9o),e(R,a5),e(a5,ine),e(ine,c9o),e(a5,f9o),e(a5,Rj),e(Rj,m9o),e(a5,g9o),e(R,h9o),e(R,n5),e(n5,dne),e(dne,p9o),e(n5,_9o),e(n5,Sj),e(Sj,u9o),e(n5,b9o),e(R,v9o),e(R,s5),e(s5,cne),e(cne,T9o),e(s5,F9o),e(s5,Pj),e(Pj,C9o),e(s5,M9o),e(R,E9o),e(R,l5),e(l5,fne),e(fne,y9o),e(l5,w9o),e(l5,$j),e($j,A9o),e(l5,L9o),e(R,B9o),e(R,i5),e(i5,mne),e(mne,k9o),e(i5,x9o),e(i5,Ij),e(Ij,R9o),e(i5,S9o),e(R,P9o),e(R,d5),e(d5,gne),e(gne,$9o),e(d5,I9o),e(d5,jj),e(jj,j9o),e(d5,N9o),e(R,D9o),e(R,c5),e(c5,hne),e(hne,q9o),e(c5,G9o),e(c5,Nj),e(Nj,O9o),e(c5,X9o),e(R,z9o),e(R,f5),e(f5,pne),e(pne,V9o),e(f5,W9o),e(f5,Dj),e(Dj,Q9o),e(f5,H9o),e(R,U9o),e(R,m5),e(m5,_ne),e(_ne,J9o),e(m5,Y9o),e(m5,qj),e(qj,K9o),e(m5,Z9o),e(R,eBo),e(R,g5),e(g5,une),e(une,oBo),e(g5,rBo),e(g5,Gj),e(Gj,tBo),e(g5,aBo),e(De,nBo),e(De,h5),e(h5,sBo),e(h5,bne),e(bne,lBo),e(h5,iBo),e(h5,vne),e(vne,dBo),e(De,cBo),e(De,Tne),e(Tne,fBo),e(De,mBo),g(JE,De,null),b(d,ILe,u),b(d,_d,u),e(_d,p5),e(p5,Fne),g(YE,Fne,null),e(_d,gBo),e(_d,Cne),e(Cne,hBo),b(d,jLe,u),b(d,or,u),g(KE,or,null),e(or,pBo),e(or,ud),e(ud,_Bo),e(ud,Mne),e(Mne,uBo),e(ud,bBo),e(ud,Ene),e(Ene,vBo),e(ud,TBo),e(or,FBo),e(or,ZE),e(ZE,CBo),e(ZE,yne),e(yne,MBo),e(ZE,EBo),e(or,yBo),e(or,Hr),g(e3,Hr,null),e(Hr,wBo),e(Hr,wne),e(wne,ABo),e(Hr,LBo),e(Hr,bd),e(bd,BBo),e(bd,Ane),e(Ane,kBo),e(bd,xBo),e(bd,Lne),e(Lne,RBo),e(bd,SBo),e(Hr,PBo),e(Hr,Bne),e(Bne,$Bo),e(Hr,IBo),g(o3,Hr,null),e(or,jBo),e(or,qe),g(r3,qe,null),e(qe,NBo),e(qe,kne),e(kne,DBo),e(qe,qBo),e(qe,Ua),e(Ua,GBo),e(Ua,xne),e(xne,OBo),e(Ua,XBo),e(Ua,Rne),e(Rne,zBo),e(Ua,VBo),e(Ua,Sne),e(Sne,WBo),e(Ua,QBo),e(qe,HBo),e(qe,Pne),e(Pne,_5),e(_5,$ne),e($ne,UBo),e(_5,JBo),e(_5,Oj),e(Oj,YBo),e(_5,KBo),e(qe,ZBo),e(qe,u5),e(u5,eko),e(u5,Ine),e(Ine,oko),e(u5,rko),e(u5,jne),e(jne,tko),e(qe,ako),e(qe,Nne),e(Nne,nko),e(qe,sko),g(t3,qe,null),b(d,NLe,u),b(d,vd,u),e(vd,b5),e(b5,Dne),g(a3,Dne,null),e(vd,lko),e(vd,qne),e(qne,iko),b(d,DLe,u),b(d,rr,u),g(n3,rr,null),e(rr,dko),e(rr,Td),e(Td,cko),e(Td,Gne),e(Gne,fko),e(Td,mko),e(Td,One),e(One,gko),e(Td,hko),e(rr,pko),e(rr,s3),e(s3,_ko),e(s3,Xne),e(Xne,uko),e(s3,bko),e(rr,vko),e(rr,Ur),g(l3,Ur,null),e(Ur,Tko),e(Ur,zne),e(zne,Fko),e(Ur,Cko),e(Ur,Fd),e(Fd,Mko),e(Fd,Vne),e(Vne,Eko),e(Fd,yko),e(Fd,Wne),e(Wne,wko),e(Fd,Ako),e(Ur,Lko),e(Ur,Qne),e(Qne,Bko),e(Ur,kko),g(i3,Ur,null),e(rr,xko),e(rr,Ge),g(d3,Ge,null),e(Ge,Rko),e(Ge,Hne),e(Hne,Sko),e(Ge,Pko),e(Ge,Ja),e(Ja,$ko),e(Ja,Une),e(Une,Iko),e(Ja,jko),e(Ja,Jne),e(Jne,Nko),e(Ja,Dko),e(Ja,Yne),e(Yne,qko),e(Ja,Gko),e(Ge,Oko),e(Ge,be),e(be,v5),e(v5,Kne),e(Kne,Xko),e(v5,zko),e(v5,Xj),e(Xj,Vko),e(v5,Wko),e(be,Qko),e(be,T5),e(T5,Zne),e(Zne,Hko),e(T5,Uko),e(T5,zj),e(zj,Jko),e(T5,Yko),e(be,Kko),e(be,Rs),e(Rs,ese),e(ese,Zko),e(Rs,exo),e(Rs,Vj),e(Vj,oxo),e(Rs,rxo),e(Rs,Wj),e(Wj,txo),e(Rs,axo),e(be,nxo),e(be,F5),e(F5,ose),e(ose,sxo),e(F5,lxo),e(F5,Qj),e(Qj,ixo),e(F5,dxo),e(be,cxo),e(be,la),e(la,rse),e(rse,fxo),e(la,mxo),e(la,Hj),e(Hj,gxo),e(la,hxo),e(la,Uj),e(Uj,pxo),e(la,_xo),e(la,Jj),e(Jj,uxo),e(la,bxo),e(be,vxo),e(be,C5),e(C5,tse),e(tse,Txo),e(C5,Fxo),e(C5,Yj),e(Yj,Cxo),e(C5,Mxo),e(be,Exo),e(be,M5),e(M5,ase),e(ase,yxo),e(M5,wxo),e(M5,Kj),e(Kj,Axo),e(M5,Lxo),e(be,Bxo),e(be,E5),e(E5,nse),e(nse,kxo),e(E5,xxo),e(E5,Zj),e(Zj,Rxo),e(E5,Sxo),e(be,Pxo),e(be,y5),e(y5,sse),e(sse,$xo),e(y5,Ixo),e(y5,eN),e(eN,jxo),e(y5,Nxo),e(Ge,Dxo),e(Ge,w5),e(w5,qxo),e(w5,lse),e(lse,Gxo),e(w5,Oxo),e(w5,ise),e(ise,Xxo),e(Ge,zxo),e(Ge,dse),e(dse,Vxo),e(Ge,Wxo),g(c3,Ge,null),b(d,qLe,u),b(d,Cd,u),e(Cd,A5),e(A5,cse),g(f3,cse,null),e(Cd,Qxo),e(Cd,fse),e(fse,Hxo),b(d,GLe,u),b(d,tr,u),g(m3,tr,null),e(tr,Uxo),e(tr,Md),e(Md,Jxo),e(Md,mse),e(mse,Yxo),e(Md,Kxo),e(Md,gse),e(gse,Zxo),e(Md,eRo),e(tr,oRo),e(tr,g3),e(g3,rRo),e(g3,hse),e(hse,tRo),e(g3,aRo),e(tr,nRo),e(tr,Jr),g(h3,Jr,null),e(Jr,sRo),e(Jr,pse),e(pse,lRo),e(Jr,iRo),e(Jr,Ed),e(Ed,dRo),e(Ed,_se),e(_se,cRo),e(Ed,fRo),e(Ed,use),e(use,mRo),e(Ed,gRo),e(Jr,hRo),e(Jr,bse),e(bse,pRo),e(Jr,_Ro),g(p3,Jr,null),e(tr,uRo),e(tr,Oe),g(_3,Oe,null),e(Oe,bRo),e(Oe,vse),e(vse,vRo),e(Oe,TRo),e(Oe,Ya),e(Ya,FRo),e(Ya,Tse),e(Tse,CRo),e(Ya,MRo),e(Ya,Fse),e(Fse,ERo),e(Ya,yRo),e(Ya,Cse),e(Cse,wRo),e(Ya,ARo),e(Oe,LRo),e(Oe,Mse),e(Mse,L5),e(L5,Ese),e(Ese,BRo),e(L5,kRo),e(L5,oN),e(oN,xRo),e(L5,RRo),e(Oe,SRo),e(Oe,B5),e(B5,PRo),e(B5,yse),e(yse,$Ro),e(B5,IRo),e(B5,wse),e(wse,jRo),e(Oe,NRo),e(Oe,Ase),e(Ase,DRo),e(Oe,qRo),g(u3,Oe,null),b(d,OLe,u),b(d,yd,u),e(yd,k5),e(k5,Lse),g(b3,Lse,null),e(yd,GRo),e(yd,Bse),e(Bse,ORo),b(d,XLe,u),b(d,ar,u),g(v3,ar,null),e(ar,XRo),e(ar,wd),e(wd,zRo),e(wd,kse),e(kse,VRo),e(wd,WRo),e(wd,xse),e(xse,QRo),e(wd,HRo),e(ar,URo),e(ar,T3),e(T3,JRo),e(T3,Rse),e(Rse,YRo),e(T3,KRo),e(ar,ZRo),e(ar,Yr),g(F3,Yr,null),e(Yr,eSo),e(Yr,Sse),e(Sse,oSo),e(Yr,rSo),e(Yr,Ad),e(Ad,tSo),e(Ad,Pse),e(Pse,aSo),e(Ad,nSo),e(Ad,$se),e($se,sSo),e(Ad,lSo),e(Yr,iSo),e(Yr,Ise),e(Ise,dSo),e(Yr,cSo),g(C3,Yr,null),e(ar,fSo),e(ar,Xe),g(M3,Xe,null),e(Xe,mSo),e(Xe,jse),e(jse,gSo),e(Xe,hSo),e(Xe,Ka),e(Ka,pSo),e(Ka,Nse),e(Nse,_So),e(Ka,uSo),e(Ka,Dse),e(Dse,bSo),e(Ka,vSo),e(Ka,qse),e(qse,TSo),e(Ka,FSo),e(Xe,CSo),e(Xe,ao),e(ao,x5),e(x5,Gse),e(Gse,MSo),e(x5,ESo),e(x5,rN),e(rN,ySo),e(x5,wSo),e(ao,ASo),e(ao,R5),e(R5,Ose),e(Ose,LSo),e(R5,BSo),e(R5,tN),e(tN,kSo),e(R5,xSo),e(ao,RSo),e(ao,S5),e(S5,Xse),e(Xse,SSo),e(S5,PSo),e(S5,aN),e(aN,$So),e(S5,ISo),e(ao,jSo),e(ao,P5),e(P5,zse),e(zse,NSo),e(P5,DSo),e(P5,nN),e(nN,qSo),e(P5,GSo),e(ao,OSo),e(ao,$5),e($5,Vse),e(Vse,XSo),e($5,zSo),e($5,sN),e(sN,VSo),e($5,WSo),e(ao,QSo),e(ao,I5),e(I5,Wse),e(Wse,HSo),e(I5,USo),e(I5,lN),e(lN,JSo),e(I5,YSo),e(ao,KSo),e(ao,j5),e(j5,Qse),e(Qse,ZSo),e(j5,ePo),e(j5,iN),e(iN,oPo),e(j5,rPo),e(Xe,tPo),e(Xe,N5),e(N5,aPo),e(N5,Hse),e(Hse,nPo),e(N5,sPo),e(N5,Use),e(Use,lPo),e(Xe,iPo),e(Xe,Jse),e(Jse,dPo),e(Xe,cPo),g(E3,Xe,null),b(d,zLe,u),b(d,Ld,u),e(Ld,D5),e(D5,Yse),g(y3,Yse,null),e(Ld,fPo),e(Ld,Kse),e(Kse,mPo),b(d,VLe,u),b(d,nr,u),g(w3,nr,null),e(nr,gPo),e(nr,Bd),e(Bd,hPo),e(Bd,Zse),e(Zse,pPo),e(Bd,_Po),e(Bd,ele),e(ele,uPo),e(Bd,bPo),e(nr,vPo),e(nr,A3),e(A3,TPo),e(A3,ole),e(ole,FPo),e(A3,CPo),e(nr,MPo),e(nr,Kr),g(L3,Kr,null),e(Kr,EPo),e(Kr,rle),e(rle,yPo),e(Kr,wPo),e(Kr,kd),e(kd,APo),e(kd,tle),e(tle,LPo),e(kd,BPo),e(kd,ale),e(ale,kPo),e(kd,xPo),e(Kr,RPo),e(Kr,nle),e(nle,SPo),e(Kr,PPo),g(B3,Kr,null),e(nr,$Po),e(nr,ze),g(k3,ze,null),e(ze,IPo),e(ze,sle),e(sle,jPo),e(ze,NPo),e(ze,Za),e(Za,DPo),e(Za,lle),e(lle,qPo),e(Za,GPo),e(Za,ile),e(ile,OPo),e(Za,XPo),e(Za,dle),e(dle,zPo),e(Za,VPo),e(ze,WPo),e(ze,xd),e(xd,q5),e(q5,cle),e(cle,QPo),e(q5,HPo),e(q5,dN),e(dN,UPo),e(q5,JPo),e(xd,YPo),e(xd,G5),e(G5,fle),e(fle,KPo),e(G5,ZPo),e(G5,cN),e(cN,e$o),e(G5,o$o),e(xd,r$o),e(xd,O5),e(O5,mle),e(mle,t$o),e(O5,a$o),e(O5,fN),e(fN,n$o),e(O5,s$o),e(ze,l$o),e(ze,X5),e(X5,i$o),e(X5,gle),e(gle,d$o),e(X5,c$o),e(X5,hle),e(hle,f$o),e(ze,m$o),e(ze,ple),e(ple,g$o),e(ze,h$o),g(x3,ze,null),b(d,WLe,u),b(d,Rd,u),e(Rd,z5),e(z5,_le),g(R3,_le,null),e(Rd,p$o),e(Rd,ule),e(ule,_$o),b(d,QLe,u),b(d,sr,u),g(S3,sr,null),e(sr,u$o),e(sr,Sd),e(Sd,b$o),e(Sd,ble),e(ble,v$o),e(Sd,T$o),e(Sd,vle),e(vle,F$o),e(Sd,C$o),e(sr,M$o),e(sr,P3),e(P3,E$o),e(P3,Tle),e(Tle,y$o),e(P3,w$o),e(sr,A$o),e(sr,Zr),g($3,Zr,null),e(Zr,L$o),e(Zr,Fle),e(Fle,B$o),e(Zr,k$o),e(Zr,Pd),e(Pd,x$o),e(Pd,Cle),e(Cle,R$o),e(Pd,S$o),e(Pd,Mle),e(Mle,P$o),e(Pd,$$o),e(Zr,I$o),e(Zr,Ele),e(Ele,j$o),e(Zr,N$o),g(I3,Zr,null),e(sr,D$o),e(sr,Ve),g(j3,Ve,null),e(Ve,q$o),e(Ve,yle),e(yle,G$o),e(Ve,O$o),e(Ve,en),e(en,X$o),e(en,wle),e(wle,z$o),e(en,V$o),e(en,Ale),e(Ale,W$o),e(en,Q$o),e(en,Lle),e(Lle,H$o),e(en,U$o),e(Ve,J$o),e(Ve,no),e(no,V5),e(V5,Ble),e(Ble,Y$o),e(V5,K$o),e(V5,mN),e(mN,Z$o),e(V5,eIo),e(no,oIo),e(no,W5),e(W5,kle),e(kle,rIo),e(W5,tIo),e(W5,gN),e(gN,aIo),e(W5,nIo),e(no,sIo),e(no,Q5),e(Q5,xle),e(xle,lIo),e(Q5,iIo),e(Q5,hN),e(hN,dIo),e(Q5,cIo),e(no,fIo),e(no,H5),e(H5,Rle),e(Rle,mIo),e(H5,gIo),e(H5,pN),e(pN,hIo),e(H5,pIo),e(no,_Io),e(no,U5),e(U5,Sle),e(Sle,uIo),e(U5,bIo),e(U5,_N),e(_N,vIo),e(U5,TIo),e(no,FIo),e(no,J5),e(J5,Ple),e(Ple,CIo),e(J5,MIo),e(J5,uN),e(uN,EIo),e(J5,yIo),e(no,wIo),e(no,Y5),e(Y5,$le),e($le,AIo),e(Y5,LIo),e(Y5,bN),e(bN,BIo),e(Y5,kIo),e(Ve,xIo),e(Ve,K5),e(K5,RIo),e(K5,Ile),e(Ile,SIo),e(K5,PIo),e(K5,jle),e(jle,$Io),e(Ve,IIo),e(Ve,Nle),e(Nle,jIo),e(Ve,NIo),g(N3,Ve,null),b(d,HLe,u),b(d,$d,u),e($d,Z5),e(Z5,Dle),g(D3,Dle,null),e($d,DIo),e($d,qle),e(qle,qIo),b(d,ULe,u),b(d,lr,u),g(q3,lr,null),e(lr,GIo),e(lr,Id),e(Id,OIo),e(Id,Gle),e(Gle,XIo),e(Id,zIo),e(Id,Ole),e(Ole,VIo),e(Id,WIo),e(lr,QIo),e(lr,G3),e(G3,HIo),e(G3,Xle),e(Xle,UIo),e(G3,JIo),e(lr,YIo),e(lr,et),g(O3,et,null),e(et,KIo),e(et,zle),e(zle,ZIo),e(et,ejo),e(et,jd),e(jd,ojo),e(jd,Vle),e(Vle,rjo),e(jd,tjo),e(jd,Wle),e(Wle,ajo),e(jd,njo),e(et,sjo),e(et,Qle),e(Qle,ljo),e(et,ijo),g(X3,et,null),e(lr,djo),e(lr,We),g(z3,We,null),e(We,cjo),e(We,Hle),e(Hle,fjo),e(We,mjo),e(We,on),e(on,gjo),e(on,Ule),e(Ule,hjo),e(on,pjo),e(on,Jle),e(Jle,_jo),e(on,ujo),e(on,Yle),e(Yle,bjo),e(on,vjo),e(We,Tjo),e(We,V3),e(V3,e2),e(e2,Kle),e(Kle,Fjo),e(e2,Cjo),e(e2,vN),e(vN,Mjo),e(e2,Ejo),e(V3,yjo),e(V3,o2),e(o2,Zle),e(Zle,wjo),e(o2,Ajo),e(o2,TN),e(TN,Ljo),e(o2,Bjo),e(We,kjo),e(We,r2),e(r2,xjo),e(r2,eie),e(eie,Rjo),e(r2,Sjo),e(r2,oie),e(oie,Pjo),e(We,$jo),e(We,rie),e(rie,Ijo),e(We,jjo),g(W3,We,null),b(d,JLe,u),b(d,Nd,u),e(Nd,t2),e(t2,tie),g(Q3,tie,null),e(Nd,Njo),e(Nd,aie),e(aie,Djo),b(d,YLe,u),b(d,ir,u),g(H3,ir,null),e(ir,qjo),e(ir,Dd),e(Dd,Gjo),e(Dd,nie),e(nie,Ojo),e(Dd,Xjo),e(Dd,sie),e(sie,zjo),e(Dd,Vjo),e(ir,Wjo),e(ir,U3),e(U3,Qjo),e(U3,lie),e(lie,Hjo),e(U3,Ujo),e(ir,Jjo),e(ir,ot),g(J3,ot,null),e(ot,Yjo),e(ot,iie),e(iie,Kjo),e(ot,Zjo),e(ot,qd),e(qd,eNo),e(qd,die),e(die,oNo),e(qd,rNo),e(qd,cie),e(cie,tNo),e(qd,aNo),e(ot,nNo),e(ot,fie),e(fie,sNo),e(ot,lNo),g(Y3,ot,null),e(ir,iNo),e(ir,Qe),g(K3,Qe,null),e(Qe,dNo),e(Qe,mie),e(mie,cNo),e(Qe,fNo),e(Qe,rn),e(rn,mNo),e(rn,gie),e(gie,gNo),e(rn,hNo),e(rn,hie),e(hie,pNo),e(rn,_No),e(rn,pie),e(pie,uNo),e(rn,bNo),e(Qe,vNo),e(Qe,Gd),e(Gd,a2),e(a2,_ie),e(_ie,TNo),e(a2,FNo),e(a2,FN),e(FN,CNo),e(a2,MNo),e(Gd,ENo),e(Gd,n2),e(n2,uie),e(uie,yNo),e(n2,wNo),e(n2,CN),e(CN,ANo),e(n2,LNo),e(Gd,BNo),e(Gd,s2),e(s2,bie),e(bie,kNo),e(s2,xNo),e(s2,MN),e(MN,RNo),e(s2,SNo),e(Qe,PNo),e(Qe,l2),e(l2,$No),e(l2,vie),e(vie,INo),e(l2,jNo),e(l2,Tie),e(Tie,NNo),e(Qe,DNo),e(Qe,Fie),e(Fie,qNo),e(Qe,GNo),g(Z3,Qe,null),b(d,KLe,u),b(d,Od,u),e(Od,i2),e(i2,Cie),g(ey,Cie,null),e(Od,ONo),e(Od,Mie),e(Mie,XNo),b(d,ZLe,u),b(d,dr,u),g(oy,dr,null),e(dr,zNo),e(dr,Xd),e(Xd,VNo),e(Xd,Eie),e(Eie,WNo),e(Xd,QNo),e(Xd,yie),e(yie,HNo),e(Xd,UNo),e(dr,JNo),e(dr,ry),e(ry,YNo),e(ry,wie),e(wie,KNo),e(ry,ZNo),e(dr,eDo),e(dr,rt),g(ty,rt,null),e(rt,oDo),e(rt,Aie),e(Aie,rDo),e(rt,tDo),e(rt,zd),e(zd,aDo),e(zd,Lie),e(Lie,nDo),e(zd,sDo),e(zd,Bie),e(Bie,lDo),e(zd,iDo),e(rt,dDo),e(rt,kie),e(kie,cDo),e(rt,fDo),g(ay,rt,null),e(dr,mDo),e(dr,He),g(ny,He,null),e(He,gDo),e(He,xie),e(xie,hDo),e(He,pDo),e(He,tn),e(tn,_Do),e(tn,Rie),e(Rie,uDo),e(tn,bDo),e(tn,Sie),e(Sie,vDo),e(tn,TDo),e(tn,Pie),e(Pie,FDo),e(tn,CDo),e(He,MDo),e(He,Vd),e(Vd,d2),e(d2,$ie),e($ie,EDo),e(d2,yDo),e(d2,EN),e(EN,wDo),e(d2,ADo),e(Vd,LDo),e(Vd,c2),e(c2,Iie),e(Iie,BDo),e(c2,kDo),e(c2,yN),e(yN,xDo),e(c2,RDo),e(Vd,SDo),e(Vd,f2),e(f2,jie),e(jie,PDo),e(f2,$Do),e(f2,wN),e(wN,IDo),e(f2,jDo),e(He,NDo),e(He,m2),e(m2,DDo),e(m2,Nie),e(Nie,qDo),e(m2,GDo),e(m2,Die),e(Die,ODo),e(He,XDo),e(He,qie),e(qie,zDo),e(He,VDo),g(sy,He,null),b(d,e9e,u),b(d,Wd,u),e(Wd,g2),e(g2,Gie),g(ly,Gie,null),e(Wd,WDo),e(Wd,Oie),e(Oie,QDo),b(d,o9e,u),b(d,cr,u),g(iy,cr,null),e(cr,HDo),e(cr,Qd),e(Qd,UDo),e(Qd,Xie),e(Xie,JDo),e(Qd,YDo),e(Qd,zie),e(zie,KDo),e(Qd,ZDo),e(cr,eqo),e(cr,dy),e(dy,oqo),e(dy,Vie),e(Vie,rqo),e(dy,tqo),e(cr,aqo),e(cr,tt),g(cy,tt,null),e(tt,nqo),e(tt,Wie),e(Wie,sqo),e(tt,lqo),e(tt,Hd),e(Hd,iqo),e(Hd,Qie),e(Qie,dqo),e(Hd,cqo),e(Hd,Hie),e(Hie,fqo),e(Hd,mqo),e(tt,gqo),e(tt,Uie),e(Uie,hqo),e(tt,pqo),g(fy,tt,null),e(cr,_qo),e(cr,Ue),g(my,Ue,null),e(Ue,uqo),e(Ue,Jie),e(Jie,bqo),e(Ue,vqo),e(Ue,an),e(an,Tqo),e(an,Yie),e(Yie,Fqo),e(an,Cqo),e(an,Kie),e(Kie,Mqo),e(an,Eqo),e(an,Zie),e(Zie,yqo),e(an,wqo),e(Ue,Aqo),e(Ue,ede),e(ede,h2),e(h2,ode),e(ode,Lqo),e(h2,Bqo),e(h2,AN),e(AN,kqo),e(h2,xqo),e(Ue,Rqo),e(Ue,p2),e(p2,Sqo),e(p2,rde),e(rde,Pqo),e(p2,$qo),e(p2,tde),e(tde,Iqo),e(Ue,jqo),e(Ue,ade),e(ade,Nqo),e(Ue,Dqo),g(gy,Ue,null),b(d,r9e,u),b(d,Ud,u),e(Ud,_2),e(_2,nde),g(hy,nde,null),e(Ud,qqo),e(Ud,sde),e(sde,Gqo),b(d,t9e,u),b(d,fr,u),g(py,fr,null),e(fr,Oqo),e(fr,Jd),e(Jd,Xqo),e(Jd,lde),e(lde,zqo),e(Jd,Vqo),e(Jd,ide),e(ide,Wqo),e(Jd,Qqo),e(fr,Hqo),e(fr,_y),e(_y,Uqo),e(_y,dde),e(dde,Jqo),e(_y,Yqo),e(fr,Kqo),e(fr,at),g(uy,at,null),e(at,Zqo),e(at,cde),e(cde,eGo),e(at,oGo),e(at,Yd),e(Yd,rGo),e(Yd,fde),e(fde,tGo),e(Yd,aGo),e(Yd,mde),e(mde,nGo),e(Yd,sGo),e(at,lGo),e(at,gde),e(gde,iGo),e(at,dGo),g(by,at,null),e(fr,cGo),e(fr,Je),g(vy,Je,null),e(Je,fGo),e(Je,hde),e(hde,mGo),e(Je,gGo),e(Je,nn),e(nn,hGo),e(nn,pde),e(pde,pGo),e(nn,_Go),e(nn,_de),e(_de,uGo),e(nn,bGo),e(nn,ude),e(ude,vGo),e(nn,TGo),e(Je,FGo),e(Je,bde),e(bde,u2),e(u2,vde),e(vde,CGo),e(u2,MGo),e(u2,LN),e(LN,EGo),e(u2,yGo),e(Je,wGo),e(Je,b2),e(b2,AGo),e(b2,Tde),e(Tde,LGo),e(b2,BGo),e(b2,Fde),e(Fde,kGo),e(Je,xGo),e(Je,Cde),e(Cde,RGo),e(Je,SGo),g(Ty,Je,null),b(d,a9e,u),b(d,Kd,u),e(Kd,v2),e(v2,Mde),g(Fy,Mde,null),e(Kd,PGo),e(Kd,Ede),e(Ede,$Go),b(d,n9e,u),b(d,mr,u),g(Cy,mr,null),e(mr,IGo),e(mr,Zd),e(Zd,jGo),e(Zd,yde),e(yde,NGo),e(Zd,DGo),e(Zd,wde),e(wde,qGo),e(Zd,GGo),e(mr,OGo),e(mr,My),e(My,XGo),e(My,Ade),e(Ade,zGo),e(My,VGo),e(mr,WGo),e(mr,nt),g(Ey,nt,null),e(nt,QGo),e(nt,Lde),e(Lde,HGo),e(nt,UGo),e(nt,ec),e(ec,JGo),e(ec,Bde),e(Bde,YGo),e(ec,KGo),e(ec,kde),e(kde,ZGo),e(ec,eOo),e(nt,oOo),e(nt,xde),e(xde,rOo),e(nt,tOo),g(yy,nt,null),e(mr,aOo),e(mr,Ye),g(wy,Ye,null),e(Ye,nOo),e(Ye,Rde),e(Rde,sOo),e(Ye,lOo),e(Ye,sn),e(sn,iOo),e(sn,Sde),e(Sde,dOo),e(sn,cOo),e(sn,Pde),e(Pde,fOo),e(sn,mOo),e(sn,$de),e($de,gOo),e(sn,hOo),e(Ye,pOo),e(Ye,Ay),e(Ay,T2),e(T2,Ide),e(Ide,_Oo),e(T2,uOo),e(T2,BN),e(BN,bOo),e(T2,vOo),e(Ay,TOo),e(Ay,F2),e(F2,jde),e(jde,FOo),e(F2,COo),e(F2,kN),e(kN,MOo),e(F2,EOo),e(Ye,yOo),e(Ye,C2),e(C2,wOo),e(C2,Nde),e(Nde,AOo),e(C2,LOo),e(C2,Dde),e(Dde,BOo),e(Ye,kOo),e(Ye,qde),e(qde,xOo),e(Ye,ROo),g(Ly,Ye,null),b(d,s9e,u),b(d,oc,u),e(oc,M2),e(M2,Gde),g(By,Gde,null),e(oc,SOo),e(oc,Ode),e(Ode,POo),b(d,l9e,u),b(d,gr,u),g(ky,gr,null),e(gr,$Oo),e(gr,rc),e(rc,IOo),e(rc,Xde),e(Xde,jOo),e(rc,NOo),e(rc,zde),e(zde,DOo),e(rc,qOo),e(gr,GOo),e(gr,xy),e(xy,OOo),e(xy,Vde),e(Vde,XOo),e(xy,zOo),e(gr,VOo),e(gr,st),g(Ry,st,null),e(st,WOo),e(st,Wde),e(Wde,QOo),e(st,HOo),e(st,tc),e(tc,UOo),e(tc,Qde),e(Qde,JOo),e(tc,YOo),e(tc,Hde),e(Hde,KOo),e(tc,ZOo),e(st,eXo),e(st,Ude),e(Ude,oXo),e(st,rXo),g(Sy,st,null),e(gr,tXo),e(gr,go),g(Py,go,null),e(go,aXo),e(go,Jde),e(Jde,nXo),e(go,sXo),e(go,ln),e(ln,lXo),e(ln,Yde),e(Yde,iXo),e(ln,dXo),e(ln,Kde),e(Kde,cXo),e(ln,fXo),e(ln,Zde),e(Zde,mXo),e(ln,gXo),e(go,hXo),e(go,B),e(B,E2),e(E2,ece),e(ece,pXo),e(E2,_Xo),e(E2,xN),e(xN,uXo),e(E2,bXo),e(B,vXo),e(B,y2),e(y2,oce),e(oce,TXo),e(y2,FXo),e(y2,RN),e(RN,CXo),e(y2,MXo),e(B,EXo),e(B,w2),e(w2,rce),e(rce,yXo),e(w2,wXo),e(w2,SN),e(SN,AXo),e(w2,LXo),e(B,BXo),e(B,A2),e(A2,tce),e(tce,kXo),e(A2,xXo),e(A2,PN),e(PN,RXo),e(A2,SXo),e(B,PXo),e(B,L2),e(L2,ace),e(ace,$Xo),e(L2,IXo),e(L2,$N),e($N,jXo),e(L2,NXo),e(B,DXo),e(B,B2),e(B2,nce),e(nce,qXo),e(B2,GXo),e(B2,IN),e(IN,OXo),e(B2,XXo),e(B,zXo),e(B,k2),e(k2,sce),e(sce,VXo),e(k2,WXo),e(k2,jN),e(jN,QXo),e(k2,HXo),e(B,UXo),e(B,x2),e(x2,lce),e(lce,JXo),e(x2,YXo),e(x2,NN),e(NN,KXo),e(x2,ZXo),e(B,ezo),e(B,R2),e(R2,ice),e(ice,ozo),e(R2,rzo),e(R2,DN),e(DN,tzo),e(R2,azo),e(B,nzo),e(B,S2),e(S2,dce),e(dce,szo),e(S2,lzo),e(S2,qN),e(qN,izo),e(S2,dzo),e(B,czo),e(B,P2),e(P2,cce),e(cce,fzo),e(P2,mzo),e(P2,GN),e(GN,gzo),e(P2,hzo),e(B,pzo),e(B,$2),e($2,fce),e(fce,_zo),e($2,uzo),e($2,ON),e(ON,bzo),e($2,vzo),e(B,Tzo),e(B,I2),e(I2,mce),e(mce,Fzo),e(I2,Czo),e(I2,XN),e(XN,Mzo),e(I2,Ezo),e(B,yzo),e(B,j2),e(j2,gce),e(gce,wzo),e(j2,Azo),e(j2,zN),e(zN,Lzo),e(j2,Bzo),e(B,kzo),e(B,N2),e(N2,hce),e(hce,xzo),e(N2,Rzo),e(N2,VN),e(VN,Szo),e(N2,Pzo),e(B,$zo),e(B,Ss),e(Ss,pce),e(pce,Izo),e(Ss,jzo),e(Ss,WN),e(WN,Nzo),e(Ss,Dzo),e(Ss,QN),e(QN,qzo),e(Ss,Gzo),e(B,Ozo),e(B,D2),e(D2,_ce),e(_ce,Xzo),e(D2,zzo),e(D2,HN),e(HN,Vzo),e(D2,Wzo),e(B,Qzo),e(B,q2),e(q2,uce),e(uce,Hzo),e(q2,Uzo),e(q2,UN),e(UN,Jzo),e(q2,Yzo),e(B,Kzo),e(B,G2),e(G2,bce),e(bce,Zzo),e(G2,eVo),e(G2,JN),e(JN,oVo),e(G2,rVo),e(B,tVo),e(B,O2),e(O2,vce),e(vce,aVo),e(O2,nVo),e(O2,YN),e(YN,sVo),e(O2,lVo),e(B,iVo),e(B,X2),e(X2,Tce),e(Tce,dVo),e(X2,cVo),e(X2,KN),e(KN,fVo),e(X2,mVo),e(B,gVo),e(B,z2),e(z2,Fce),e(Fce,hVo),e(z2,pVo),e(z2,ZN),e(ZN,_Vo),e(z2,uVo),e(B,bVo),e(B,V2),e(V2,Cce),e(Cce,vVo),e(V2,TVo),e(V2,eD),e(eD,FVo),e(V2,CVo),e(B,MVo),e(B,W2),e(W2,Mce),e(Mce,EVo),e(W2,yVo),e(W2,oD),e(oD,wVo),e(W2,AVo),e(B,LVo),e(B,Q2),e(Q2,Ece),e(Ece,BVo),e(Q2,kVo),e(Q2,rD),e(rD,xVo),e(Q2,RVo),e(B,SVo),e(B,H2),e(H2,yce),e(yce,PVo),e(H2,$Vo),e(H2,tD),e(tD,IVo),e(H2,jVo),e(B,NVo),e(B,U2),e(U2,wce),e(wce,DVo),e(U2,qVo),e(U2,aD),e(aD,GVo),e(U2,OVo),e(B,XVo),e(B,J2),e(J2,Ace),e(Ace,zVo),e(J2,VVo),e(J2,nD),e(nD,WVo),e(J2,QVo),e(B,HVo),e(B,Y2),e(Y2,Lce),e(Lce,UVo),e(Y2,JVo),e(Y2,sD),e(sD,YVo),e(Y2,KVo),e(B,ZVo),e(B,K2),e(K2,Bce),e(Bce,eWo),e(K2,oWo),e(K2,lD),e(lD,rWo),e(K2,tWo),e(B,aWo),e(B,Z2),e(Z2,kce),e(kce,nWo),e(Z2,sWo),e(Z2,iD),e(iD,lWo),e(Z2,iWo),e(B,dWo),e(B,ev),e(ev,xce),e(xce,cWo),e(ev,fWo),e(ev,dD),e(dD,mWo),e(ev,gWo),e(B,hWo),e(B,ov),e(ov,Rce),e(Rce,pWo),e(ov,_Wo),e(ov,cD),e(cD,uWo),e(ov,bWo),e(B,vWo),e(B,rv),e(rv,Sce),e(Sce,TWo),e(rv,FWo),e(rv,fD),e(fD,CWo),e(rv,MWo),e(B,EWo),e(B,tv),e(tv,Pce),e(Pce,yWo),e(tv,wWo),e(tv,mD),e(mD,AWo),e(tv,LWo),e(B,BWo),e(B,av),e(av,$ce),e($ce,kWo),e(av,xWo),e(av,gD),e(gD,RWo),e(av,SWo),e(B,PWo),e(B,nv),e(nv,Ice),e(Ice,$Wo),e(nv,IWo),e(nv,hD),e(hD,jWo),e(nv,NWo),e(B,DWo),e(B,sv),e(sv,jce),e(jce,qWo),e(sv,GWo),e(sv,pD),e(pD,OWo),e(sv,XWo),e(B,zWo),e(B,lv),e(lv,Nce),e(Nce,VWo),e(lv,WWo),e(lv,_D),e(_D,QWo),e(lv,HWo),e(B,UWo),e(B,iv),e(iv,Dce),e(Dce,JWo),e(iv,YWo),e(iv,uD),e(uD,KWo),e(iv,ZWo),e(B,eQo),e(B,dv),e(dv,qce),e(qce,oQo),e(dv,rQo),e(dv,bD),e(bD,tQo),e(dv,aQo),e(go,nQo),e(go,Gce),e(Gce,sQo),e(go,lQo),g($y,go,null),b(d,i9e,u),b(d,ac,u),e(ac,cv),e(cv,Oce),g(Iy,Oce,null),e(ac,iQo),e(ac,Xce),e(Xce,dQo),b(d,d9e,u),b(d,hr,u),g(jy,hr,null),e(hr,cQo),e(hr,nc),e(nc,fQo),e(nc,zce),e(zce,mQo),e(nc,gQo),e(nc,Vce),e(Vce,hQo),e(nc,pQo),e(hr,_Qo),e(hr,Ny),e(Ny,uQo),e(Ny,Wce),e(Wce,bQo),e(Ny,vQo),e(hr,TQo),e(hr,lt),g(Dy,lt,null),e(lt,FQo),e(lt,Qce),e(Qce,CQo),e(lt,MQo),e(lt,sc),e(sc,EQo),e(sc,Hce),e(Hce,yQo),e(sc,wQo),e(sc,Uce),e(Uce,AQo),e(sc,LQo),e(lt,BQo),e(lt,Jce),e(Jce,kQo),e(lt,xQo),g(qy,lt,null),e(hr,RQo),e(hr,ho),g(Gy,ho,null),e(ho,SQo),e(ho,Yce),e(Yce,PQo),e(ho,$Qo),e(ho,dn),e(dn,IQo),e(dn,Kce),e(Kce,jQo),e(dn,NQo),e(dn,Zce),e(Zce,DQo),e(dn,qQo),e(dn,efe),e(efe,GQo),e(dn,OQo),e(ho,XQo),e(ho,H),e(H,fv),e(fv,ofe),e(ofe,zQo),e(fv,VQo),e(fv,vD),e(vD,WQo),e(fv,QQo),e(H,HQo),e(H,mv),e(mv,rfe),e(rfe,UQo),e(mv,JQo),e(mv,TD),e(TD,YQo),e(mv,KQo),e(H,ZQo),e(H,gv),e(gv,tfe),e(tfe,eHo),e(gv,oHo),e(gv,FD),e(FD,rHo),e(gv,tHo),e(H,aHo),e(H,hv),e(hv,afe),e(afe,nHo),e(hv,sHo),e(hv,CD),e(CD,lHo),e(hv,iHo),e(H,dHo),e(H,pv),e(pv,nfe),e(nfe,cHo),e(pv,fHo),e(pv,MD),e(MD,mHo),e(pv,gHo),e(H,hHo),e(H,_v),e(_v,sfe),e(sfe,pHo),e(_v,_Ho),e(_v,ED),e(ED,uHo),e(_v,bHo),e(H,vHo),e(H,uv),e(uv,lfe),e(lfe,THo),e(uv,FHo),e(uv,yD),e(yD,CHo),e(uv,MHo),e(H,EHo),e(H,bv),e(bv,ife),e(ife,yHo),e(bv,wHo),e(bv,wD),e(wD,AHo),e(bv,LHo),e(H,BHo),e(H,vv),e(vv,dfe),e(dfe,kHo),e(vv,xHo),e(vv,AD),e(AD,RHo),e(vv,SHo),e(H,PHo),e(H,Tv),e(Tv,cfe),e(cfe,$Ho),e(Tv,IHo),e(Tv,LD),e(LD,jHo),e(Tv,NHo),e(H,DHo),e(H,Fv),e(Fv,ffe),e(ffe,qHo),e(Fv,GHo),e(Fv,BD),e(BD,OHo),e(Fv,XHo),e(H,zHo),e(H,Cv),e(Cv,mfe),e(mfe,VHo),e(Cv,WHo),e(Cv,kD),e(kD,QHo),e(Cv,HHo),e(H,UHo),e(H,Mv),e(Mv,gfe),e(gfe,JHo),e(Mv,YHo),e(Mv,xD),e(xD,KHo),e(Mv,ZHo),e(H,eUo),e(H,Ev),e(Ev,hfe),e(hfe,oUo),e(Ev,rUo),e(Ev,RD),e(RD,tUo),e(Ev,aUo),e(H,nUo),e(H,yv),e(yv,pfe),e(pfe,sUo),e(yv,lUo),e(yv,SD),e(SD,iUo),e(yv,dUo),e(H,cUo),e(H,wv),e(wv,_fe),e(_fe,fUo),e(wv,mUo),e(wv,PD),e(PD,gUo),e(wv,hUo),e(H,pUo),e(H,Av),e(Av,ufe),e(ufe,_Uo),e(Av,uUo),e(Av,$D),e($D,bUo),e(Av,vUo),e(H,TUo),e(H,Lv),e(Lv,bfe),e(bfe,FUo),e(Lv,CUo),e(Lv,ID),e(ID,MUo),e(Lv,EUo),e(H,yUo),e(H,Bv),e(Bv,vfe),e(vfe,wUo),e(Bv,AUo),e(Bv,jD),e(jD,LUo),e(Bv,BUo),e(H,kUo),e(H,kv),e(kv,Tfe),e(Tfe,xUo),e(kv,RUo),e(kv,ND),e(ND,SUo),e(kv,PUo),e(H,$Uo),e(H,xv),e(xv,Ffe),e(Ffe,IUo),e(xv,jUo),e(xv,DD),e(DD,NUo),e(xv,DUo),e(H,qUo),e(H,Rv),e(Rv,Cfe),e(Cfe,GUo),e(Rv,OUo),e(Rv,qD),e(qD,XUo),e(Rv,zUo),e(ho,VUo),e(ho,Mfe),e(Mfe,WUo),e(ho,QUo),g(Oy,ho,null),b(d,c9e,u),b(d,lc,u),e(lc,Sv),e(Sv,Efe),g(Xy,Efe,null),e(lc,HUo),e(lc,yfe),e(yfe,UUo),b(d,f9e,u),b(d,pr,u),g(zy,pr,null),e(pr,JUo),e(pr,ic),e(ic,YUo),e(ic,wfe),e(wfe,KUo),e(ic,ZUo),e(ic,Afe),e(Afe,eJo),e(ic,oJo),e(pr,rJo),e(pr,Vy),e(Vy,tJo),e(Vy,Lfe),e(Lfe,aJo),e(Vy,nJo),e(pr,sJo),e(pr,it),g(Wy,it,null),e(it,lJo),e(it,Bfe),e(Bfe,iJo),e(it,dJo),e(it,dc),e(dc,cJo),e(dc,kfe),e(kfe,fJo),e(dc,mJo),e(dc,xfe),e(xfe,gJo),e(dc,hJo),e(it,pJo),e(it,Rfe),e(Rfe,_Jo),e(it,uJo),g(Qy,it,null),e(pr,bJo),e(pr,po),g(Hy,po,null),e(po,vJo),e(po,Sfe),e(Sfe,TJo),e(po,FJo),e(po,cn),e(cn,CJo),e(cn,Pfe),e(Pfe,MJo),e(cn,EJo),e(cn,$fe),e($fe,yJo),e(cn,wJo),e(cn,Ife),e(Ife,AJo),e(cn,LJo),e(po,BJo),e(po,he),e(he,Pv),e(Pv,jfe),e(jfe,kJo),e(Pv,xJo),e(Pv,GD),e(GD,RJo),e(Pv,SJo),e(he,PJo),e(he,$v),e($v,Nfe),e(Nfe,$Jo),e($v,IJo),e($v,OD),e(OD,jJo),e($v,NJo),e(he,DJo),e(he,Iv),e(Iv,Dfe),e(Dfe,qJo),e(Iv,GJo),e(Iv,XD),e(XD,OJo),e(Iv,XJo),e(he,zJo),e(he,jv),e(jv,qfe),e(qfe,VJo),e(jv,WJo),e(jv,zD),e(zD,QJo),e(jv,HJo),e(he,UJo),e(he,Nv),e(Nv,Gfe),e(Gfe,JJo),e(Nv,YJo),e(Nv,VD),e(VD,KJo),e(Nv,ZJo),e(he,eYo),e(he,Dv),e(Dv,Ofe),e(Ofe,oYo),e(Dv,rYo),e(Dv,WD),e(WD,tYo),e(Dv,aYo),e(he,nYo),e(he,qv),e(qv,Xfe),e(Xfe,sYo),e(qv,lYo),e(qv,QD),e(QD,iYo),e(qv,dYo),e(he,cYo),e(he,Gv),e(Gv,zfe),e(zfe,fYo),e(Gv,mYo),e(Gv,HD),e(HD,gYo),e(Gv,hYo),e(he,pYo),e(he,Ov),e(Ov,Vfe),e(Vfe,_Yo),e(Ov,uYo),e(Ov,UD),e(UD,bYo),e(Ov,vYo),e(he,TYo),e(he,Xv),e(Xv,Wfe),e(Wfe,FYo),e(Xv,CYo),e(Xv,JD),e(JD,MYo),e(Xv,EYo),e(po,yYo),e(po,Qfe),e(Qfe,wYo),e(po,AYo),g(Uy,po,null),b(d,m9e,u),b(d,cc,u),e(cc,zv),e(zv,Hfe),g(Jy,Hfe,null),e(cc,LYo),e(cc,Ufe),e(Ufe,BYo),b(d,g9e,u),b(d,_r,u),g(Yy,_r,null),e(_r,kYo),e(_r,fc),e(fc,xYo),e(fc,Jfe),e(Jfe,RYo),e(fc,SYo),e(fc,Yfe),e(Yfe,PYo),e(fc,$Yo),e(_r,IYo),e(_r,Ky),e(Ky,jYo),e(Ky,Kfe),e(Kfe,NYo),e(Ky,DYo),e(_r,qYo),e(_r,dt),g(Zy,dt,null),e(dt,GYo),e(dt,Zfe),e(Zfe,OYo),e(dt,XYo),e(dt,mc),e(mc,zYo),e(mc,eme),e(eme,VYo),e(mc,WYo),e(mc,ome),e(ome,QYo),e(mc,HYo),e(dt,UYo),e(dt,rme),e(rme,JYo),e(dt,YYo),g(ew,dt,null),e(_r,KYo),e(_r,_o),g(ow,_o,null),e(_o,ZYo),e(_o,tme),e(tme,eKo),e(_o,oKo),e(_o,fn),e(fn,rKo),e(fn,ame),e(ame,tKo),e(fn,aKo),e(fn,nme),e(nme,nKo),e(fn,sKo),e(fn,sme),e(sme,lKo),e(fn,iKo),e(_o,dKo),e(_o,lme),e(lme,Vv),e(Vv,ime),e(ime,cKo),e(Vv,fKo),e(Vv,YD),e(YD,mKo),e(Vv,gKo),e(_o,hKo),e(_o,dme),e(dme,pKo),e(_o,_Ko),g(rw,_o,null),b(d,h9e,u),b(d,gc,u),e(gc,Wv),e(Wv,cme),g(tw,cme,null),e(gc,uKo),e(gc,fme),e(fme,bKo),b(d,p9e,u),b(d,ur,u),g(aw,ur,null),e(ur,vKo),e(ur,hc),e(hc,TKo),e(hc,mme),e(mme,FKo),e(hc,CKo),e(hc,gme),e(gme,MKo),e(hc,EKo),e(ur,yKo),e(ur,nw),e(nw,wKo),e(nw,hme),e(hme,AKo),e(nw,LKo),e(ur,BKo),e(ur,ct),g(sw,ct,null),e(ct,kKo),e(ct,pme),e(pme,xKo),e(ct,RKo),e(ct,pc),e(pc,SKo),e(pc,_me),e(_me,PKo),e(pc,$Ko),e(pc,ume),e(ume,IKo),e(pc,jKo),e(ct,NKo),e(ct,bme),e(bme,DKo),e(ct,qKo),g(lw,ct,null),e(ur,GKo),e(ur,uo),g(iw,uo,null),e(uo,OKo),e(uo,vme),e(vme,XKo),e(uo,zKo),e(uo,mn),e(mn,VKo),e(mn,Tme),e(Tme,WKo),e(mn,QKo),e(mn,Fme),e(Fme,HKo),e(mn,UKo),e(mn,Cme),e(Cme,JKo),e(mn,YKo),e(uo,KKo),e(uo,Y),e(Y,Qv),e(Qv,Mme),e(Mme,ZKo),e(Qv,eZo),e(Qv,KD),e(KD,oZo),e(Qv,rZo),e(Y,tZo),e(Y,Hv),e(Hv,Eme),e(Eme,aZo),e(Hv,nZo),e(Hv,ZD),e(ZD,sZo),e(Hv,lZo),e(Y,iZo),e(Y,Uv),e(Uv,yme),e(yme,dZo),e(Uv,cZo),e(Uv,eq),e(eq,fZo),e(Uv,mZo),e(Y,gZo),e(Y,Jv),e(Jv,wme),e(wme,hZo),e(Jv,pZo),e(Jv,oq),e(oq,_Zo),e(Jv,uZo),e(Y,bZo),e(Y,Yv),e(Yv,Ame),e(Ame,vZo),e(Yv,TZo),e(Yv,rq),e(rq,FZo),e(Yv,CZo),e(Y,MZo),e(Y,Kv),e(Kv,Lme),e(Lme,EZo),e(Kv,yZo),e(Kv,tq),e(tq,wZo),e(Kv,AZo),e(Y,LZo),e(Y,Zv),e(Zv,Bme),e(Bme,BZo),e(Zv,kZo),e(Zv,aq),e(aq,xZo),e(Zv,RZo),e(Y,SZo),e(Y,eT),e(eT,kme),e(kme,PZo),e(eT,$Zo),e(eT,nq),e(nq,IZo),e(eT,jZo),e(Y,NZo),e(Y,oT),e(oT,xme),e(xme,DZo),e(oT,qZo),e(oT,sq),e(sq,GZo),e(oT,OZo),e(Y,XZo),e(Y,rT),e(rT,Rme),e(Rme,zZo),e(rT,VZo),e(rT,lq),e(lq,WZo),e(rT,QZo),e(Y,HZo),e(Y,tT),e(tT,Sme),e(Sme,UZo),e(tT,JZo),e(tT,iq),e(iq,YZo),e(tT,KZo),e(Y,ZZo),e(Y,aT),e(aT,Pme),e(Pme,eer),e(aT,oer),e(aT,dq),e(dq,rer),e(aT,ter),e(Y,aer),e(Y,nT),e(nT,$me),e($me,ner),e(nT,ser),e(nT,cq),e(cq,ler),e(nT,ier),e(Y,der),e(Y,sT),e(sT,Ime),e(Ime,cer),e(sT,fer),e(sT,fq),e(fq,mer),e(sT,ger),e(Y,her),e(Y,lT),e(lT,jme),e(jme,per),e(lT,_er),e(lT,mq),e(mq,uer),e(lT,ber),e(Y,ver),e(Y,iT),e(iT,Nme),e(Nme,Ter),e(iT,Fer),e(iT,gq),e(gq,Cer),e(iT,Mer),e(Y,Eer),e(Y,dT),e(dT,Dme),e(Dme,yer),e(dT,wer),e(dT,hq),e(hq,Aer),e(dT,Ler),e(Y,Ber),e(Y,cT),e(cT,qme),e(qme,ker),e(cT,xer),e(cT,pq),e(pq,Rer),e(cT,Ser),e(Y,Per),e(Y,fT),e(fT,Gme),e(Gme,$er),e(fT,Ier),e(fT,_q),e(_q,jer),e(fT,Ner),e(Y,Der),e(Y,mT),e(mT,Ome),e(Ome,qer),e(mT,Ger),e(mT,uq),e(uq,Oer),e(mT,Xer),e(uo,zer),e(uo,Xme),e(Xme,Ver),e(uo,Wer),g(dw,uo,null),b(d,_9e,u),b(d,_c,u),e(_c,gT),e(gT,zme),g(cw,zme,null),e(_c,Qer),e(_c,Vme),e(Vme,Her),b(d,u9e,u),b(d,br,u),g(fw,br,null),e(br,Uer),e(br,uc),e(uc,Jer),e(uc,Wme),e(Wme,Yer),e(uc,Ker),e(uc,Qme),e(Qme,Zer),e(uc,eor),e(br,oor),e(br,mw),e(mw,ror),e(mw,Hme),e(Hme,tor),e(mw,aor),e(br,nor),e(br,ft),g(gw,ft,null),e(ft,sor),e(ft,Ume),e(Ume,lor),e(ft,ior),e(ft,bc),e(bc,dor),e(bc,Jme),e(Jme,cor),e(bc,mor),e(bc,Yme),e(Yme,gor),e(bc,hor),e(ft,por),e(ft,Kme),e(Kme,_or),e(ft,uor),g(hw,ft,null),e(br,bor),e(br,bo),g(pw,bo,null),e(bo,vor),e(bo,Zme),e(Zme,Tor),e(bo,For),e(bo,gn),e(gn,Cor),e(gn,ege),e(ege,Mor),e(gn,Eor),e(gn,oge),e(oge,yor),e(gn,wor),e(gn,rge),e(rge,Aor),e(gn,Lor),e(bo,Bor),e(bo,pe),e(pe,hT),e(hT,tge),e(tge,kor),e(hT,xor),e(hT,bq),e(bq,Ror),e(hT,Sor),e(pe,Por),e(pe,pT),e(pT,age),e(age,$or),e(pT,Ior),e(pT,vq),e(vq,jor),e(pT,Nor),e(pe,Dor),e(pe,_T),e(_T,nge),e(nge,qor),e(_T,Gor),e(_T,Tq),e(Tq,Oor),e(_T,Xor),e(pe,zor),e(pe,uT),e(uT,sge),e(sge,Vor),e(uT,Wor),e(uT,Fq),e(Fq,Qor),e(uT,Hor),e(pe,Uor),e(pe,bT),e(bT,lge),e(lge,Jor),e(bT,Yor),e(bT,Cq),e(Cq,Kor),e(bT,Zor),e(pe,err),e(pe,vT),e(vT,ige),e(ige,orr),e(vT,rrr),e(vT,Mq),e(Mq,trr),e(vT,arr),e(pe,nrr),e(pe,TT),e(TT,dge),e(dge,srr),e(TT,lrr),e(TT,Eq),e(Eq,irr),e(TT,drr),e(pe,crr),e(pe,FT),e(FT,cge),e(cge,frr),e(FT,mrr),e(FT,yq),e(yq,grr),e(FT,hrr),e(pe,prr),e(pe,CT),e(CT,fge),e(fge,_rr),e(CT,urr),e(CT,wq),e(wq,brr),e(CT,vrr),e(pe,Trr),e(pe,MT),e(MT,mge),e(mge,Frr),e(MT,Crr),e(MT,Aq),e(Aq,Mrr),e(MT,Err),e(bo,yrr),e(bo,gge),e(gge,wrr),e(bo,Arr),g(_w,bo,null),b(d,b9e,u),b(d,vc,u),e(vc,ET),e(ET,hge),g(uw,hge,null),e(vc,Lrr),e(vc,pge),e(pge,Brr),b(d,v9e,u),b(d,vr,u),g(bw,vr,null),e(vr,krr),e(vr,Tc),e(Tc,xrr),e(Tc,_ge),e(_ge,Rrr),e(Tc,Srr),e(Tc,uge),e(uge,Prr),e(Tc,$rr),e(vr,Irr),e(vr,vw),e(vw,jrr),e(vw,bge),e(bge,Nrr),e(vw,Drr),e(vr,qrr),e(vr,mt),g(Tw,mt,null),e(mt,Grr),e(mt,vge),e(vge,Orr),e(mt,Xrr),e(mt,Fc),e(Fc,zrr),e(Fc,Tge),e(Tge,Vrr),e(Fc,Wrr),e(Fc,Fge),e(Fge,Qrr),e(Fc,Hrr),e(mt,Urr),e(mt,Cge),e(Cge,Jrr),e(mt,Yrr),g(Fw,mt,null),e(vr,Krr),e(vr,vo),g(Cw,vo,null),e(vo,Zrr),e(vo,Mge),e(Mge,etr),e(vo,otr),e(vo,hn),e(hn,rtr),e(hn,Ege),e(Ege,ttr),e(hn,atr),e(hn,yge),e(yge,ntr),e(hn,str),e(hn,wge),e(wge,ltr),e(hn,itr),e(vo,dtr),e(vo,X),e(X,yT),e(yT,Age),e(Age,ctr),e(yT,ftr),e(yT,Lq),e(Lq,mtr),e(yT,gtr),e(X,htr),e(X,wT),e(wT,Lge),e(Lge,ptr),e(wT,_tr),e(wT,Bq),e(Bq,utr),e(wT,btr),e(X,vtr),e(X,AT),e(AT,Bge),e(Bge,Ttr),e(AT,Ftr),e(AT,kq),e(kq,Ctr),e(AT,Mtr),e(X,Etr),e(X,LT),e(LT,kge),e(kge,ytr),e(LT,wtr),e(LT,xq),e(xq,Atr),e(LT,Ltr),e(X,Btr),e(X,BT),e(BT,xge),e(xge,ktr),e(BT,xtr),e(BT,Rq),e(Rq,Rtr),e(BT,Str),e(X,Ptr),e(X,kT),e(kT,Rge),e(Rge,$tr),e(kT,Itr),e(kT,Sq),e(Sq,jtr),e(kT,Ntr),e(X,Dtr),e(X,xT),e(xT,Sge),e(Sge,qtr),e(xT,Gtr),e(xT,Pq),e(Pq,Otr),e(xT,Xtr),e(X,ztr),e(X,RT),e(RT,Pge),e(Pge,Vtr),e(RT,Wtr),e(RT,$q),e($q,Qtr),e(RT,Htr),e(X,Utr),e(X,ST),e(ST,$ge),e($ge,Jtr),e(ST,Ytr),e(ST,Iq),e(Iq,Ktr),e(ST,Ztr),e(X,ear),e(X,PT),e(PT,Ige),e(Ige,oar),e(PT,rar),e(PT,jq),e(jq,tar),e(PT,aar),e(X,nar),e(X,$T),e($T,jge),e(jge,sar),e($T,lar),e($T,Nq),e(Nq,iar),e($T,dar),e(X,car),e(X,IT),e(IT,Nge),e(Nge,far),e(IT,mar),e(IT,Dq),e(Dq,gar),e(IT,har),e(X,par),e(X,jT),e(jT,Dge),e(Dge,_ar),e(jT,uar),e(jT,qq),e(qq,bar),e(jT,Tar),e(X,Far),e(X,NT),e(NT,qge),e(qge,Car),e(NT,Mar),e(NT,Gq),e(Gq,Ear),e(NT,yar),e(X,war),e(X,DT),e(DT,Gge),e(Gge,Aar),e(DT,Lar),e(DT,Oq),e(Oq,Bar),e(DT,kar),e(X,xar),e(X,qT),e(qT,Oge),e(Oge,Rar),e(qT,Sar),e(qT,Xq),e(Xq,Par),e(qT,$ar),e(X,Iar),e(X,GT),e(GT,Xge),e(Xge,jar),e(GT,Nar),e(GT,zq),e(zq,Dar),e(GT,qar),e(X,Gar),e(X,OT),e(OT,zge),e(zge,Oar),e(OT,Xar),e(OT,Vq),e(Vq,zar),e(OT,Var),e(X,War),e(X,XT),e(XT,Vge),e(Vge,Qar),e(XT,Har),e(XT,Wq),e(Wq,Uar),e(XT,Jar),e(X,Yar),e(X,zT),e(zT,Wge),e(Wge,Kar),e(zT,Zar),e(zT,Qq),e(Qq,enr),e(zT,onr),e(X,rnr),e(X,VT),e(VT,Qge),e(Qge,tnr),e(VT,anr),e(VT,Hq),e(Hq,nnr),e(VT,snr),e(X,lnr),e(X,WT),e(WT,Hge),e(Hge,inr),e(WT,dnr),e(WT,Uq),e(Uq,cnr),e(WT,fnr),e(X,mnr),e(X,QT),e(QT,Uge),e(Uge,gnr),e(QT,hnr),e(QT,Jq),e(Jq,pnr),e(QT,_nr),e(X,unr),e(X,HT),e(HT,Jge),e(Jge,bnr),e(HT,vnr),e(HT,Yq),e(Yq,Tnr),e(HT,Fnr),e(X,Cnr),e(X,UT),e(UT,Yge),e(Yge,Mnr),e(UT,Enr),e(UT,Kq),e(Kq,ynr),e(UT,wnr),e(vo,Anr),e(vo,Kge),e(Kge,Lnr),e(vo,Bnr),g(Mw,vo,null),b(d,T9e,u),b(d,Cc,u),e(Cc,JT),e(JT,Zge),g(Ew,Zge,null),e(Cc,knr),e(Cc,ehe),e(ehe,xnr),b(d,F9e,u),b(d,Tr,u),g(yw,Tr,null),e(Tr,Rnr),e(Tr,Mc),e(Mc,Snr),e(Mc,ohe),e(ohe,Pnr),e(Mc,$nr),e(Mc,rhe),e(rhe,Inr),e(Mc,jnr),e(Tr,Nnr),e(Tr,ww),e(ww,Dnr),e(ww,the),e(the,qnr),e(ww,Gnr),e(Tr,Onr),e(Tr,gt),g(Aw,gt,null),e(gt,Xnr),e(gt,ahe),e(ahe,znr),e(gt,Vnr),e(gt,Ec),e(Ec,Wnr),e(Ec,nhe),e(nhe,Qnr),e(Ec,Hnr),e(Ec,she),e(she,Unr),e(Ec,Jnr),e(gt,Ynr),e(gt,lhe),e(lhe,Knr),e(gt,Znr),g(Lw,gt,null),e(Tr,esr),e(Tr,To),g(Bw,To,null),e(To,osr),e(To,ihe),e(ihe,rsr),e(To,tsr),e(To,pn),e(pn,asr),e(pn,dhe),e(dhe,nsr),e(pn,ssr),e(pn,che),e(che,lsr),e(pn,isr),e(pn,fhe),e(fhe,dsr),e(pn,csr),e(To,fsr),e(To,te),e(te,YT),e(YT,mhe),e(mhe,msr),e(YT,gsr),e(YT,Zq),e(Zq,hsr),e(YT,psr),e(te,_sr),e(te,KT),e(KT,ghe),e(ghe,usr),e(KT,bsr),e(KT,eG),e(eG,vsr),e(KT,Tsr),e(te,Fsr),e(te,ZT),e(ZT,hhe),e(hhe,Csr),e(ZT,Msr),e(ZT,oG),e(oG,Esr),e(ZT,ysr),e(te,wsr),e(te,e7),e(e7,phe),e(phe,Asr),e(e7,Lsr),e(e7,rG),e(rG,Bsr),e(e7,ksr),e(te,xsr),e(te,o7),e(o7,_he),e(_he,Rsr),e(o7,Ssr),e(o7,tG),e(tG,Psr),e(o7,$sr),e(te,Isr),e(te,r7),e(r7,uhe),e(uhe,jsr),e(r7,Nsr),e(r7,aG),e(aG,Dsr),e(r7,qsr),e(te,Gsr),e(te,t7),e(t7,bhe),e(bhe,Osr),e(t7,Xsr),e(t7,nG),e(nG,zsr),e(t7,Vsr),e(te,Wsr),e(te,a7),e(a7,vhe),e(vhe,Qsr),e(a7,Hsr),e(a7,sG),e(sG,Usr),e(a7,Jsr),e(te,Ysr),e(te,n7),e(n7,The),e(The,Ksr),e(n7,Zsr),e(n7,lG),e(lG,elr),e(n7,olr),e(te,rlr),e(te,s7),e(s7,Fhe),e(Fhe,tlr),e(s7,alr),e(s7,iG),e(iG,nlr),e(s7,slr),e(te,llr),e(te,l7),e(l7,Che),e(Che,ilr),e(l7,dlr),e(l7,dG),e(dG,clr),e(l7,flr),e(te,mlr),e(te,i7),e(i7,Mhe),e(Mhe,glr),e(i7,hlr),e(i7,cG),e(cG,plr),e(i7,_lr),e(te,ulr),e(te,d7),e(d7,Ehe),e(Ehe,blr),e(d7,vlr),e(d7,fG),e(fG,Tlr),e(d7,Flr),e(te,Clr),e(te,c7),e(c7,yhe),e(yhe,Mlr),e(c7,Elr),e(c7,mG),e(mG,ylr),e(c7,wlr),e(te,Alr),e(te,f7),e(f7,whe),e(whe,Llr),e(f7,Blr),e(f7,gG),e(gG,klr),e(f7,xlr),e(te,Rlr),e(te,m7),e(m7,Ahe),e(Ahe,Slr),e(m7,Plr),e(m7,hG),e(hG,$lr),e(m7,Ilr),e(te,jlr),e(te,g7),e(g7,Lhe),e(Lhe,Nlr),e(g7,Dlr),e(g7,pG),e(pG,qlr),e(g7,Glr),e(To,Olr),e(To,Bhe),e(Bhe,Xlr),e(To,zlr),g(kw,To,null),b(d,C9e,u),b(d,yc,u),e(yc,h7),e(h7,khe),g(xw,khe,null),e(yc,Vlr),e(yc,xhe),e(xhe,Wlr),b(d,M9e,u),b(d,Fr,u),g(Rw,Fr,null),e(Fr,Qlr),e(Fr,wc),e(wc,Hlr),e(wc,Rhe),e(Rhe,Ulr),e(wc,Jlr),e(wc,She),e(She,Ylr),e(wc,Klr),e(Fr,Zlr),e(Fr,Sw),e(Sw,eir),e(Sw,Phe),e(Phe,oir),e(Sw,rir),e(Fr,tir),e(Fr,ht),g(Pw,ht,null),e(ht,air),e(ht,$he),e($he,nir),e(ht,sir),e(ht,Ac),e(Ac,lir),e(Ac,Ihe),e(Ihe,iir),e(Ac,dir),e(Ac,jhe),e(jhe,cir),e(Ac,fir),e(ht,mir),e(ht,Nhe),e(Nhe,gir),e(ht,hir),g($w,ht,null),e(Fr,pir),e(Fr,Fo),g(Iw,Fo,null),e(Fo,_ir),e(Fo,Dhe),e(Dhe,uir),e(Fo,bir),e(Fo,_n),e(_n,vir),e(_n,qhe),e(qhe,Tir),e(_n,Fir),e(_n,Ghe),e(Ghe,Cir),e(_n,Mir),e(_n,Ohe),e(Ohe,Eir),e(_n,yir),e(Fo,wir),e(Fo,Xhe),e(Xhe,p7),e(p7,zhe),e(zhe,Air),e(p7,Lir),e(p7,_G),e(_G,Bir),e(p7,kir),e(Fo,xir),e(Fo,Vhe),e(Vhe,Rir),e(Fo,Sir),g(jw,Fo,null),b(d,E9e,u),b(d,Lc,u),e(Lc,_7),e(_7,Whe),g(Nw,Whe,null),e(Lc,Pir),e(Lc,Qhe),e(Qhe,$ir),b(d,y9e,u),b(d,Cr,u),g(Dw,Cr,null),e(Cr,Iir),e(Cr,Bc),e(Bc,jir),e(Bc,Hhe),e(Hhe,Nir),e(Bc,Dir),e(Bc,Uhe),e(Uhe,qir),e(Bc,Gir),e(Cr,Oir),e(Cr,qw),e(qw,Xir),e(qw,Jhe),e(Jhe,zir),e(qw,Vir),e(Cr,Wir),e(Cr,pt),g(Gw,pt,null),e(pt,Qir),e(pt,Yhe),e(Yhe,Hir),e(pt,Uir),e(pt,kc),e(kc,Jir),e(kc,Khe),e(Khe,Yir),e(kc,Kir),e(kc,Zhe),e(Zhe,Zir),e(kc,edr),e(pt,odr),e(pt,epe),e(epe,rdr),e(pt,tdr),g(Ow,pt,null),e(Cr,adr),e(Cr,Co),g(Xw,Co,null),e(Co,ndr),e(Co,ope),e(ope,sdr),e(Co,ldr),e(Co,un),e(un,idr),e(un,rpe),e(rpe,ddr),e(un,cdr),e(un,tpe),e(tpe,fdr),e(un,mdr),e(un,ape),e(ape,gdr),e(un,hdr),e(Co,pdr),e(Co,K),e(K,u7),e(u7,npe),e(npe,_dr),e(u7,udr),e(u7,uG),e(uG,bdr),e(u7,vdr),e(K,Tdr),e(K,b7),e(b7,spe),e(spe,Fdr),e(b7,Cdr),e(b7,bG),e(bG,Mdr),e(b7,Edr),e(K,ydr),e(K,v7),e(v7,lpe),e(lpe,wdr),e(v7,Adr),e(v7,vG),e(vG,Ldr),e(v7,Bdr),e(K,kdr),e(K,T7),e(T7,ipe),e(ipe,xdr),e(T7,Rdr),e(T7,TG),e(TG,Sdr),e(T7,Pdr),e(K,$dr),e(K,F7),e(F7,dpe),e(dpe,Idr),e(F7,jdr),e(F7,FG),e(FG,Ndr),e(F7,Ddr),e(K,qdr),e(K,C7),e(C7,cpe),e(cpe,Gdr),e(C7,Odr),e(C7,CG),e(CG,Xdr),e(C7,zdr),e(K,Vdr),e(K,M7),e(M7,fpe),e(fpe,Wdr),e(M7,Qdr),e(M7,MG),e(MG,Hdr),e(M7,Udr),e(K,Jdr),e(K,E7),e(E7,mpe),e(mpe,Ydr),e(E7,Kdr),e(E7,EG),e(EG,Zdr),e(E7,ecr),e(K,ocr),e(K,y7),e(y7,gpe),e(gpe,rcr),e(y7,tcr),e(y7,yG),e(yG,acr),e(y7,ncr),e(K,scr),e(K,w7),e(w7,hpe),e(hpe,lcr),e(w7,icr),e(w7,wG),e(wG,dcr),e(w7,ccr),e(K,fcr),e(K,A7),e(A7,ppe),e(ppe,mcr),e(A7,gcr),e(A7,AG),e(AG,hcr),e(A7,pcr),e(K,_cr),e(K,L7),e(L7,_pe),e(_pe,ucr),e(L7,bcr),e(L7,LG),e(LG,vcr),e(L7,Tcr),e(K,Fcr),e(K,B7),e(B7,upe),e(upe,Ccr),e(B7,Mcr),e(B7,BG),e(BG,Ecr),e(B7,ycr),e(K,wcr),e(K,k7),e(k7,bpe),e(bpe,Acr),e(k7,Lcr),e(k7,kG),e(kG,Bcr),e(k7,kcr),e(K,xcr),e(K,x7),e(x7,vpe),e(vpe,Rcr),e(x7,Scr),e(x7,xG),e(xG,Pcr),e(x7,$cr),e(K,Icr),e(K,R7),e(R7,Tpe),e(Tpe,jcr),e(R7,Ncr),e(R7,RG),e(RG,Dcr),e(R7,qcr),e(K,Gcr),e(K,S7),e(S7,Fpe),e(Fpe,Ocr),e(S7,Xcr),e(S7,SG),e(SG,zcr),e(S7,Vcr),e(K,Wcr),e(K,P7),e(P7,Cpe),e(Cpe,Qcr),e(P7,Hcr),e(P7,PG),e(PG,Ucr),e(P7,Jcr),e(K,Ycr),e(K,$7),e($7,Mpe),e(Mpe,Kcr),e($7,Zcr),e($7,$G),e($G,efr),e($7,ofr),e(K,rfr),e(K,I7),e(I7,Epe),e(Epe,tfr),e(I7,afr),e(I7,IG),e(IG,nfr),e(I7,sfr),e(Co,lfr),e(Co,ype),e(ype,ifr),e(Co,dfr),g(zw,Co,null),b(d,w9e,u),b(d,xc,u),e(xc,j7),e(j7,wpe),g(Vw,wpe,null),e(xc,cfr),e(xc,Ape),e(Ape,ffr),b(d,A9e,u),b(d,Mr,u),g(Ww,Mr,null),e(Mr,mfr),e(Mr,Rc),e(Rc,gfr),e(Rc,Lpe),e(Lpe,hfr),e(Rc,pfr),e(Rc,Bpe),e(Bpe,_fr),e(Rc,ufr),e(Mr,bfr),e(Mr,Qw),e(Qw,vfr),e(Qw,kpe),e(kpe,Tfr),e(Qw,Ffr),e(Mr,Cfr),e(Mr,_t),g(Hw,_t,null),e(_t,Mfr),e(_t,xpe),e(xpe,Efr),e(_t,yfr),e(_t,Sc),e(Sc,wfr),e(Sc,Rpe),e(Rpe,Afr),e(Sc,Lfr),e(Sc,Spe),e(Spe,Bfr),e(Sc,kfr),e(_t,xfr),e(_t,Ppe),e(Ppe,Rfr),e(_t,Sfr),g(Uw,_t,null),e(Mr,Pfr),e(Mr,Mo),g(Jw,Mo,null),e(Mo,$fr),e(Mo,$pe),e($pe,Ifr),e(Mo,jfr),e(Mo,bn),e(bn,Nfr),e(bn,Ipe),e(Ipe,Dfr),e(bn,qfr),e(bn,jpe),e(jpe,Gfr),e(bn,Ofr),e(bn,Npe),e(Npe,Xfr),e(bn,zfr),e(Mo,Vfr),e(Mo,Z),e(Z,N7),e(N7,Dpe),e(Dpe,Wfr),e(N7,Qfr),e(N7,jG),e(jG,Hfr),e(N7,Ufr),e(Z,Jfr),e(Z,D7),e(D7,qpe),e(qpe,Yfr),e(D7,Kfr),e(D7,NG),e(NG,Zfr),e(D7,emr),e(Z,omr),e(Z,q7),e(q7,Gpe),e(Gpe,rmr),e(q7,tmr),e(q7,DG),e(DG,amr),e(q7,nmr),e(Z,smr),e(Z,G7),e(G7,Ope),e(Ope,lmr),e(G7,imr),e(G7,qG),e(qG,dmr),e(G7,cmr),e(Z,fmr),e(Z,O7),e(O7,Xpe),e(Xpe,mmr),e(O7,gmr),e(O7,GG),e(GG,hmr),e(O7,pmr),e(Z,_mr),e(Z,X7),e(X7,zpe),e(zpe,umr),e(X7,bmr),e(X7,OG),e(OG,vmr),e(X7,Tmr),e(Z,Fmr),e(Z,z7),e(z7,Vpe),e(Vpe,Cmr),e(z7,Mmr),e(z7,XG),e(XG,Emr),e(z7,ymr),e(Z,wmr),e(Z,V7),e(V7,Wpe),e(Wpe,Amr),e(V7,Lmr),e(V7,zG),e(zG,Bmr),e(V7,kmr),e(Z,xmr),e(Z,W7),e(W7,Qpe),e(Qpe,Rmr),e(W7,Smr),e(W7,VG),e(VG,Pmr),e(W7,$mr),e(Z,Imr),e(Z,Q7),e(Q7,Hpe),e(Hpe,jmr),e(Q7,Nmr),e(Q7,WG),e(WG,Dmr),e(Q7,qmr),e(Z,Gmr),e(Z,H7),e(H7,Upe),e(Upe,Omr),e(H7,Xmr),e(H7,QG),e(QG,zmr),e(H7,Vmr),e(Z,Wmr),e(Z,U7),e(U7,Jpe),e(Jpe,Qmr),e(U7,Hmr),e(U7,HG),e(HG,Umr),e(U7,Jmr),e(Z,Ymr),e(Z,J7),e(J7,Ype),e(Ype,Kmr),e(J7,Zmr),e(J7,UG),e(UG,egr),e(J7,ogr),e(Z,rgr),e(Z,Y7),e(Y7,Kpe),e(Kpe,tgr),e(Y7,agr),e(Y7,JG),e(JG,ngr),e(Y7,sgr),e(Z,lgr),e(Z,K7),e(K7,Zpe),e(Zpe,igr),e(K7,dgr),e(K7,YG),e(YG,cgr),e(K7,fgr),e(Z,mgr),e(Z,Z7),e(Z7,e_e),e(e_e,ggr),e(Z7,hgr),e(Z7,KG),e(KG,pgr),e(Z7,_gr),e(Z,ugr),e(Z,e8),e(e8,o_e),e(o_e,bgr),e(e8,vgr),e(e8,ZG),e(ZG,Tgr),e(e8,Fgr),e(Z,Cgr),e(Z,o8),e(o8,r_e),e(r_e,Mgr),e(o8,Egr),e(o8,eO),e(eO,ygr),e(o8,wgr),e(Z,Agr),e(Z,r8),e(r8,t_e),e(t_e,Lgr),e(r8,Bgr),e(r8,oO),e(oO,kgr),e(r8,xgr),e(Mo,Rgr),e(Mo,a_e),e(a_e,Sgr),e(Mo,Pgr),g(Yw,Mo,null),b(d,L9e,u),b(d,Pc,u),e(Pc,t8),e(t8,n_e),g(Kw,n_e,null),e(Pc,$gr),e(Pc,s_e),e(s_e,Igr),b(d,B9e,u),b(d,Er,u),g(Zw,Er,null),e(Er,jgr),e(Er,$c),e($c,Ngr),e($c,l_e),e(l_e,Dgr),e($c,qgr),e($c,i_e),e(i_e,Ggr),e($c,Ogr),e(Er,Xgr),e(Er,eA),e(eA,zgr),e(eA,d_e),e(d_e,Vgr),e(eA,Wgr),e(Er,Qgr),e(Er,ut),g(oA,ut,null),e(ut,Hgr),e(ut,c_e),e(c_e,Ugr),e(ut,Jgr),e(ut,Ic),e(Ic,Ygr),e(Ic,f_e),e(f_e,Kgr),e(Ic,Zgr),e(Ic,m_e),e(m_e,ehr),e(Ic,ohr),e(ut,rhr),e(ut,g_e),e(g_e,thr),e(ut,ahr),g(rA,ut,null),e(Er,nhr),e(Er,Eo),g(tA,Eo,null),e(Eo,shr),e(Eo,h_e),e(h_e,lhr),e(Eo,ihr),e(Eo,vn),e(vn,dhr),e(vn,p_e),e(p_e,chr),e(vn,fhr),e(vn,__e),e(__e,mhr),e(vn,ghr),e(vn,u_e),e(u_e,hhr),e(vn,phr),e(Eo,_hr),e(Eo,b_e),e(b_e,a8),e(a8,v_e),e(v_e,uhr),e(a8,bhr),e(a8,rO),e(rO,vhr),e(a8,Thr),e(Eo,Fhr),e(Eo,T_e),e(T_e,Chr),e(Eo,Mhr),g(aA,Eo,null),b(d,k9e,u),b(d,jc,u),e(jc,n8),e(n8,F_e),g(nA,F_e,null),e(jc,Ehr),e(jc,C_e),e(C_e,yhr),b(d,x9e,u),b(d,yr,u),g(sA,yr,null),e(yr,whr),e(yr,Nc),e(Nc,Ahr),e(Nc,M_e),e(M_e,Lhr),e(Nc,Bhr),e(Nc,E_e),e(E_e,khr),e(Nc,xhr),e(yr,Rhr),e(yr,lA),e(lA,Shr),e(lA,y_e),e(y_e,Phr),e(lA,$hr),e(yr,Ihr),e(yr,bt),g(iA,bt,null),e(bt,jhr),e(bt,w_e),e(w_e,Nhr),e(bt,Dhr),e(bt,Dc),e(Dc,qhr),e(Dc,A_e),e(A_e,Ghr),e(Dc,Ohr),e(Dc,L_e),e(L_e,Xhr),e(Dc,zhr),e(bt,Vhr),e(bt,B_e),e(B_e,Whr),e(bt,Qhr),g(dA,bt,null),e(yr,Hhr),e(yr,yo),g(cA,yo,null),e(yo,Uhr),e(yo,k_e),e(k_e,Jhr),e(yo,Yhr),e(yo,Tn),e(Tn,Khr),e(Tn,x_e),e(x_e,Zhr),e(Tn,epr),e(Tn,R_e),e(R_e,opr),e(Tn,rpr),e(Tn,S_e),e(S_e,tpr),e(Tn,apr),e(yo,npr),e(yo,P_e),e(P_e,s8),e(s8,$_e),e($_e,spr),e(s8,lpr),e(s8,tO),e(tO,ipr),e(s8,dpr),e(yo,cpr),e(yo,I_e),e(I_e,fpr),e(yo,mpr),g(fA,yo,null),b(d,R9e,u),b(d,qc,u),e(qc,l8),e(l8,j_e),g(mA,j_e,null),e(qc,gpr),e(qc,N_e),e(N_e,hpr),b(d,S9e,u),b(d,wr,u),g(gA,wr,null),e(wr,ppr),e(wr,Gc),e(Gc,_pr),e(Gc,D_e),e(D_e,upr),e(Gc,bpr),e(Gc,q_e),e(q_e,vpr),e(Gc,Tpr),e(wr,Fpr),e(wr,hA),e(hA,Cpr),e(hA,G_e),e(G_e,Mpr),e(hA,Epr),e(wr,ypr),e(wr,vt),g(pA,vt,null),e(vt,wpr),e(vt,O_e),e(O_e,Apr),e(vt,Lpr),e(vt,Oc),e(Oc,Bpr),e(Oc,X_e),e(X_e,kpr),e(Oc,xpr),e(Oc,z_e),e(z_e,Rpr),e(Oc,Spr),e(vt,Ppr),e(vt,V_e),e(V_e,$pr),e(vt,Ipr),g(_A,vt,null),e(wr,jpr),e(wr,wo),g(uA,wo,null),e(wo,Npr),e(wo,W_e),e(W_e,Dpr),e(wo,qpr),e(wo,Fn),e(Fn,Gpr),e(Fn,Q_e),e(Q_e,Opr),e(Fn,Xpr),e(Fn,H_e),e(H_e,zpr),e(Fn,Vpr),e(Fn,U_e),e(U_e,Wpr),e(Fn,Qpr),e(wo,Hpr),e(wo,V),e(V,i8),e(i8,J_e),e(J_e,Upr),e(i8,Jpr),e(i8,aO),e(aO,Ypr),e(i8,Kpr),e(V,Zpr),e(V,d8),e(d8,Y_e),e(Y_e,e_r),e(d8,o_r),e(d8,nO),e(nO,r_r),e(d8,t_r),e(V,a_r),e(V,c8),e(c8,K_e),e(K_e,n_r),e(c8,s_r),e(c8,sO),e(sO,l_r),e(c8,i_r),e(V,d_r),e(V,f8),e(f8,Z_e),e(Z_e,c_r),e(f8,f_r),e(f8,lO),e(lO,m_r),e(f8,g_r),e(V,h_r),e(V,m8),e(m8,eue),e(eue,p_r),e(m8,__r),e(m8,iO),e(iO,u_r),e(m8,b_r),e(V,v_r),e(V,g8),e(g8,oue),e(oue,T_r),e(g8,F_r),e(g8,dO),e(dO,C_r),e(g8,M_r),e(V,E_r),e(V,h8),e(h8,rue),e(rue,y_r),e(h8,w_r),e(h8,cO),e(cO,A_r),e(h8,L_r),e(V,B_r),e(V,p8),e(p8,tue),e(tue,k_r),e(p8,x_r),e(p8,fO),e(fO,R_r),e(p8,S_r),e(V,P_r),e(V,_8),e(_8,aue),e(aue,$_r),e(_8,I_r),e(_8,mO),e(mO,j_r),e(_8,N_r),e(V,D_r),e(V,u8),e(u8,nue),e(nue,q_r),e(u8,G_r),e(u8,gO),e(gO,O_r),e(u8,X_r),e(V,z_r),e(V,b8),e(b8,sue),e(sue,V_r),e(b8,W_r),e(b8,hO),e(hO,Q_r),e(b8,H_r),e(V,U_r),e(V,v8),e(v8,lue),e(lue,J_r),e(v8,Y_r),e(v8,pO),e(pO,K_r),e(v8,Z_r),e(V,eur),e(V,T8),e(T8,iue),e(iue,our),e(T8,rur),e(T8,_O),e(_O,tur),e(T8,aur),e(V,nur),e(V,F8),e(F8,due),e(due,sur),e(F8,lur),e(F8,uO),e(uO,iur),e(F8,dur),e(V,cur),e(V,C8),e(C8,cue),e(cue,fur),e(C8,mur),e(C8,bO),e(bO,gur),e(C8,hur),e(V,pur),e(V,M8),e(M8,fue),e(fue,_ur),e(M8,uur),e(M8,vO),e(vO,bur),e(M8,vur),e(V,Tur),e(V,E8),e(E8,mue),e(mue,Fur),e(E8,Cur),e(E8,TO),e(TO,Mur),e(E8,Eur),e(V,yur),e(V,y8),e(y8,gue),e(gue,wur),e(y8,Aur),e(y8,FO),e(FO,Lur),e(y8,Bur),e(V,kur),e(V,w8),e(w8,hue),e(hue,xur),e(w8,Rur),e(w8,CO),e(CO,Sur),e(w8,Pur),e(V,$ur),e(V,A8),e(A8,pue),e(pue,Iur),e(A8,jur),e(A8,MO),e(MO,Nur),e(A8,Dur),e(V,qur),e(V,L8),e(L8,_ue),e(_ue,Gur),e(L8,Our),e(L8,EO),e(EO,Xur),e(L8,zur),e(V,Vur),e(V,B8),e(B8,uue),e(uue,Wur),e(B8,Qur),e(B8,yO),e(yO,Hur),e(B8,Uur),e(V,Jur),e(V,k8),e(k8,bue),e(bue,Yur),e(k8,Kur),e(k8,wO),e(wO,Zur),e(k8,e1r),e(V,o1r),e(V,x8),e(x8,vue),e(vue,r1r),e(x8,t1r),e(x8,AO),e(AO,a1r),e(x8,n1r),e(wo,s1r),e(wo,Tue),e(Tue,l1r),e(wo,i1r),g(bA,wo,null),b(d,P9e,u),b(d,Xc,u),e(Xc,R8),e(R8,Fue),g(vA,Fue,null),e(Xc,d1r),e(Xc,Cue),e(Cue,c1r),b(d,$9e,u),b(d,Ar,u),g(TA,Ar,null),e(Ar,f1r),e(Ar,zc),e(zc,m1r),e(zc,Mue),e(Mue,g1r),e(zc,h1r),e(zc,Eue),e(Eue,p1r),e(zc,_1r),e(Ar,u1r),e(Ar,FA),e(FA,b1r),e(FA,yue),e(yue,v1r),e(FA,T1r),e(Ar,F1r),e(Ar,Tt),g(CA,Tt,null),e(Tt,C1r),e(Tt,wue),e(wue,M1r),e(Tt,E1r),e(Tt,Vc),e(Vc,y1r),e(Vc,Aue),e(Aue,w1r),e(Vc,A1r),e(Vc,Lue),e(Lue,L1r),e(Vc,B1r),e(Tt,k1r),e(Tt,Bue),e(Bue,x1r),e(Tt,R1r),g(MA,Tt,null),e(Ar,S1r),e(Ar,Ao),g(EA,Ao,null),e(Ao,P1r),e(Ao,kue),e(kue,$1r),e(Ao,I1r),e(Ao,Cn),e(Cn,j1r),e(Cn,xue),e(xue,N1r),e(Cn,D1r),e(Cn,Rue),e(Rue,q1r),e(Cn,G1r),e(Cn,Sue),e(Sue,O1r),e(Cn,X1r),e(Ao,z1r),e(Ao,Mn),e(Mn,S8),e(S8,Pue),e(Pue,V1r),e(S8,W1r),e(S8,LO),e(LO,Q1r),e(S8,H1r),e(Mn,U1r),e(Mn,P8),e(P8,$ue),e($ue,J1r),e(P8,Y1r),e(P8,BO),e(BO,K1r),e(P8,Z1r),e(Mn,e4r),e(Mn,$8),e($8,Iue),e(Iue,o4r),e($8,r4r),e($8,kO),e(kO,t4r),e($8,a4r),e(Mn,n4r),e(Mn,I8),e(I8,jue),e(jue,s4r),e(I8,l4r),e(I8,xO),e(xO,i4r),e(I8,d4r),e(Ao,c4r),e(Ao,Nue),e(Nue,f4r),e(Ao,m4r),g(yA,Ao,null),b(d,I9e,u),b(d,Wc,u),e(Wc,j8),e(j8,Due),g(wA,Due,null),e(Wc,g4r),e(Wc,que),e(que,h4r),b(d,j9e,u),b(d,Lr,u),g(AA,Lr,null),e(Lr,p4r),e(Lr,Qc),e(Qc,_4r),e(Qc,Gue),e(Gue,u4r),e(Qc,b4r),e(Qc,Oue),e(Oue,v4r),e(Qc,T4r),e(Lr,F4r),e(Lr,LA),e(LA,C4r),e(LA,Xue),e(Xue,M4r),e(LA,E4r),e(Lr,y4r),e(Lr,Ft),g(BA,Ft,null),e(Ft,w4r),e(Ft,zue),e(zue,A4r),e(Ft,L4r),e(Ft,Hc),e(Hc,B4r),e(Hc,Vue),e(Vue,k4r),e(Hc,x4r),e(Hc,Wue),e(Wue,R4r),e(Hc,S4r),e(Ft,P4r),e(Ft,Que),e(Que,$4r),e(Ft,I4r),g(kA,Ft,null),e(Lr,j4r),e(Lr,Lo),g(xA,Lo,null),e(Lo,N4r),e(Lo,Hue),e(Hue,D4r),e(Lo,q4r),e(Lo,En),e(En,G4r),e(En,Uue),e(Uue,O4r),e(En,X4r),e(En,Jue),e(Jue,z4r),e(En,V4r),e(En,Yue),e(Yue,W4r),e(En,Q4r),e(Lo,H4r),e(Lo,fe),e(fe,N8),e(N8,Kue),e(Kue,U4r),e(N8,J4r),e(N8,RO),e(RO,Y4r),e(N8,K4r),e(fe,Z4r),e(fe,D8),e(D8,Zue),e(Zue,ebr),e(D8,obr),e(D8,SO),e(SO,rbr),e(D8,tbr),e(fe,abr),e(fe,q8),e(q8,e1e),e(e1e,nbr),e(q8,sbr),e(q8,PO),e(PO,lbr),e(q8,ibr),e(fe,dbr),e(fe,G8),e(G8,o1e),e(o1e,cbr),e(G8,fbr),e(G8,$O),e($O,mbr),e(G8,gbr),e(fe,hbr),e(fe,O8),e(O8,r1e),e(r1e,pbr),e(O8,_br),e(O8,IO),e(IO,ubr),e(O8,bbr),e(fe,vbr),e(fe,X8),e(X8,t1e),e(t1e,Tbr),e(X8,Fbr),e(X8,jO),e(jO,Cbr),e(X8,Mbr),e(fe,Ebr),e(fe,z8),e(z8,a1e),e(a1e,ybr),e(z8,wbr),e(z8,NO),e(NO,Abr),e(z8,Lbr),e(fe,Bbr),e(fe,V8),e(V8,n1e),e(n1e,kbr),e(V8,xbr),e(V8,DO),e(DO,Rbr),e(V8,Sbr),e(fe,Pbr),e(fe,W8),e(W8,s1e),e(s1e,$br),e(W8,Ibr),e(W8,qO),e(qO,jbr),e(W8,Nbr),e(fe,Dbr),e(fe,Q8),e(Q8,l1e),e(l1e,qbr),e(Q8,Gbr),e(Q8,GO),e(GO,Obr),e(Q8,Xbr),e(fe,zbr),e(fe,H8),e(H8,i1e),e(i1e,Vbr),e(H8,Wbr),e(H8,OO),e(OO,Qbr),e(H8,Hbr),e(Lo,Ubr),e(Lo,d1e),e(d1e,Jbr),e(Lo,Ybr),g(RA,Lo,null),b(d,N9e,u),b(d,Uc,u),e(Uc,U8),e(U8,c1e),g(SA,c1e,null),e(Uc,Kbr),e(Uc,f1e),e(f1e,Zbr),b(d,D9e,u),b(d,Br,u),g(PA,Br,null),e(Br,e5r),e(Br,Jc),e(Jc,o5r),e(Jc,m1e),e(m1e,r5r),e(Jc,t5r),e(Jc,g1e),e(g1e,a5r),e(Jc,n5r),e(Br,s5r),e(Br,$A),e($A,l5r),e($A,h1e),e(h1e,i5r),e($A,d5r),e(Br,c5r),e(Br,Ct),g(IA,Ct,null),e(Ct,f5r),e(Ct,p1e),e(p1e,m5r),e(Ct,g5r),e(Ct,Yc),e(Yc,h5r),e(Yc,_1e),e(_1e,p5r),e(Yc,_5r),e(Yc,u1e),e(u1e,u5r),e(Yc,b5r),e(Ct,v5r),e(Ct,b1e),e(b1e,T5r),e(Ct,F5r),g(jA,Ct,null),e(Br,C5r),e(Br,Bo),g(NA,Bo,null),e(Bo,M5r),e(Bo,v1e),e(v1e,E5r),e(Bo,y5r),e(Bo,yn),e(yn,w5r),e(yn,T1e),e(T1e,A5r),e(yn,L5r),e(yn,F1e),e(F1e,B5r),e(yn,k5r),e(yn,C1e),e(C1e,x5r),e(yn,R5r),e(Bo,S5r),e(Bo,ve),e(ve,J8),e(J8,M1e),e(M1e,P5r),e(J8,$5r),e(J8,XO),e(XO,I5r),e(J8,j5r),e(ve,N5r),e(ve,Y8),e(Y8,E1e),e(E1e,D5r),e(Y8,q5r),e(Y8,zO),e(zO,G5r),e(Y8,O5r),e(ve,X5r),e(ve,K8),e(K8,y1e),e(y1e,z5r),e(K8,V5r),e(K8,VO),e(VO,W5r),e(K8,Q5r),e(ve,H5r),e(ve,Z8),e(Z8,w1e),e(w1e,U5r),e(Z8,J5r),e(Z8,WO),e(WO,Y5r),e(Z8,K5r),e(ve,Z5r),e(ve,eF),e(eF,A1e),e(A1e,e2r),e(eF,o2r),e(eF,QO),e(QO,r2r),e(eF,t2r),e(ve,a2r),e(ve,oF),e(oF,L1e),e(L1e,n2r),e(oF,s2r),e(oF,HO),e(HO,l2r),e(oF,i2r),e(ve,d2r),e(ve,rF),e(rF,B1e),e(B1e,c2r),e(rF,f2r),e(rF,UO),e(UO,m2r),e(rF,g2r),e(ve,h2r),e(ve,tF),e(tF,k1e),e(k1e,p2r),e(tF,_2r),e(tF,JO),e(JO,u2r),e(tF,b2r),e(ve,v2r),e(ve,aF),e(aF,x1e),e(x1e,T2r),e(aF,F2r),e(aF,YO),e(YO,C2r),e(aF,M2r),e(Bo,E2r),e(Bo,R1e),e(R1e,y2r),e(Bo,w2r),g(DA,Bo,null),b(d,q9e,u),b(d,Kc,u),e(Kc,nF),e(nF,S1e),g(qA,S1e,null),e(Kc,A2r),e(Kc,P1e),e(P1e,L2r),b(d,G9e,u),b(d,kr,u),g(GA,kr,null),e(kr,B2r),e(kr,Zc),e(Zc,k2r),e(Zc,$1e),e($1e,x2r),e(Zc,R2r),e(Zc,I1e),e(I1e,S2r),e(Zc,P2r),e(kr,$2r),e(kr,OA),e(OA,I2r),e(OA,j1e),e(j1e,j2r),e(OA,N2r),e(kr,D2r),e(kr,Mt),g(XA,Mt,null),e(Mt,q2r),e(Mt,N1e),e(N1e,G2r),e(Mt,O2r),e(Mt,ef),e(ef,X2r),e(ef,D1e),e(D1e,z2r),e(ef,V2r),e(ef,q1e),e(q1e,W2r),e(ef,Q2r),e(Mt,H2r),e(Mt,G1e),e(G1e,U2r),e(Mt,J2r),g(zA,Mt,null),e(kr,Y2r),e(kr,ko),g(VA,ko,null),e(ko,K2r),e(ko,O1e),e(O1e,Z2r),e(ko,evr),e(ko,wn),e(wn,ovr),e(wn,X1e),e(X1e,rvr),e(wn,tvr),e(wn,z1e),e(z1e,avr),e(wn,nvr),e(wn,V1e),e(V1e,svr),e(wn,lvr),e(ko,ivr),e(ko,Te),e(Te,sF),e(sF,W1e),e(W1e,dvr),e(sF,cvr),e(sF,KO),e(KO,fvr),e(sF,mvr),e(Te,gvr),e(Te,lF),e(lF,Q1e),e(Q1e,hvr),e(lF,pvr),e(lF,ZO),e(ZO,_vr),e(lF,uvr),e(Te,bvr),e(Te,iF),e(iF,H1e),e(H1e,vvr),e(iF,Tvr),e(iF,eX),e(eX,Fvr),e(iF,Cvr),e(Te,Mvr),e(Te,dF),e(dF,U1e),e(U1e,Evr),e(dF,yvr),e(dF,oX),e(oX,wvr),e(dF,Avr),e(Te,Lvr),e(Te,cF),e(cF,J1e),e(J1e,Bvr),e(cF,kvr),e(cF,rX),e(rX,xvr),e(cF,Rvr),e(Te,Svr),e(Te,fF),e(fF,Y1e),e(Y1e,Pvr),e(fF,$vr),e(fF,tX),e(tX,Ivr),e(fF,jvr),e(Te,Nvr),e(Te,mF),e(mF,K1e),e(K1e,Dvr),e(mF,qvr),e(mF,aX),e(aX,Gvr),e(mF,Ovr),e(Te,Xvr),e(Te,gF),e(gF,Z1e),e(Z1e,zvr),e(gF,Vvr),e(gF,nX),e(nX,Wvr),e(gF,Qvr),e(Te,Hvr),e(Te,hF),e(hF,e4e),e(e4e,Uvr),e(hF,Jvr),e(hF,sX),e(sX,Yvr),e(hF,Kvr),e(ko,Zvr),e(ko,o4e),e(o4e,eTr),e(ko,oTr),g(WA,ko,null),b(d,O9e,u),b(d,of,u),e(of,pF),e(pF,r4e),g(QA,r4e,null),e(of,rTr),e(of,t4e),e(t4e,tTr),b(d,X9e,u),b(d,xr,u),g(HA,xr,null),e(xr,aTr),e(xr,rf),e(rf,nTr),e(rf,a4e),e(a4e,sTr),e(rf,lTr),e(rf,n4e),e(n4e,iTr),e(rf,dTr),e(xr,cTr),e(xr,UA),e(UA,fTr),e(UA,s4e),e(s4e,mTr),e(UA,gTr),e(xr,hTr),e(xr,Et),g(JA,Et,null),e(Et,pTr),e(Et,l4e),e(l4e,_Tr),e(Et,uTr),e(Et,tf),e(tf,bTr),e(tf,i4e),e(i4e,vTr),e(tf,TTr),e(tf,d4e),e(d4e,FTr),e(tf,CTr),e(Et,MTr),e(Et,c4e),e(c4e,ETr),e(Et,yTr),g(YA,Et,null),e(xr,wTr),e(xr,xo),g(KA,xo,null),e(xo,ATr),e(xo,f4e),e(f4e,LTr),e(xo,BTr),e(xo,An),e(An,kTr),e(An,m4e),e(m4e,xTr),e(An,RTr),e(An,g4e),e(g4e,STr),e(An,PTr),e(An,h4e),e(h4e,$Tr),e(An,ITr),e(xo,jTr),e(xo,Fe),e(Fe,_F),e(_F,p4e),e(p4e,NTr),e(_F,DTr),e(_F,lX),e(lX,qTr),e(_F,GTr),e(Fe,OTr),e(Fe,uF),e(uF,_4e),e(_4e,XTr),e(uF,zTr),e(uF,iX),e(iX,VTr),e(uF,WTr),e(Fe,QTr),e(Fe,bF),e(bF,u4e),e(u4e,HTr),e(bF,UTr),e(bF,dX),e(dX,JTr),e(bF,YTr),e(Fe,KTr),e(Fe,vF),e(vF,b4e),e(b4e,ZTr),e(vF,e7r),e(vF,cX),e(cX,o7r),e(vF,r7r),e(Fe,t7r),e(Fe,TF),e(TF,v4e),e(v4e,a7r),e(TF,n7r),e(TF,fX),e(fX,s7r),e(TF,l7r),e(Fe,i7r),e(Fe,FF),e(FF,T4e),e(T4e,d7r),e(FF,c7r),e(FF,mX),e(mX,f7r),e(FF,m7r),e(Fe,g7r),e(Fe,CF),e(CF,F4e),e(F4e,h7r),e(CF,p7r),e(CF,gX),e(gX,_7r),e(CF,u7r),e(Fe,b7r),e(Fe,MF),e(MF,C4e),e(C4e,v7r),e(MF,T7r),e(MF,hX),e(hX,F7r),e(MF,C7r),e(Fe,M7r),e(Fe,EF),e(EF,M4e),e(M4e,E7r),e(EF,y7r),e(EF,pX),e(pX,w7r),e(EF,A7r),e(xo,L7r),e(xo,E4e),e(E4e,B7r),e(xo,k7r),g(ZA,xo,null),b(d,z9e,u),b(d,af,u),e(af,yF),e(yF,y4e),g(e6,y4e,null),e(af,x7r),e(af,w4e),e(w4e,R7r),b(d,V9e,u),b(d,Rr,u),g(o6,Rr,null),e(Rr,S7r),e(Rr,nf),e(nf,P7r),e(nf,A4e),e(A4e,$7r),e(nf,I7r),e(nf,L4e),e(L4e,j7r),e(nf,N7r),e(Rr,D7r),e(Rr,r6),e(r6,q7r),e(r6,B4e),e(B4e,G7r),e(r6,O7r),e(Rr,X7r),e(Rr,yt),g(t6,yt,null),e(yt,z7r),e(yt,k4e),e(k4e,V7r),e(yt,W7r),e(yt,sf),e(sf,Q7r),e(sf,x4e),e(x4e,H7r),e(sf,U7r),e(sf,R4e),e(R4e,J7r),e(sf,Y7r),e(yt,K7r),e(yt,S4e),e(S4e,Z7r),e(yt,e8r),g(a6,yt,null),e(Rr,o8r),e(Rr,Ro),g(n6,Ro,null),e(Ro,r8r),e(Ro,P4e),e(P4e,t8r),e(Ro,a8r),e(Ro,Ln),e(Ln,n8r),e(Ln,$4e),e($4e,s8r),e(Ln,l8r),e(Ln,I4e),e(I4e,i8r),e(Ln,d8r),e(Ln,j4e),e(j4e,c8r),e(Ln,f8r),e(Ro,m8r),e(Ro,Ce),e(Ce,wF),e(wF,N4e),e(N4e,g8r),e(wF,h8r),e(wF,_X),e(_X,p8r),e(wF,_8r),e(Ce,u8r),e(Ce,AF),e(AF,D4e),e(D4e,b8r),e(AF,v8r),e(AF,uX),e(uX,T8r),e(AF,F8r),e(Ce,C8r),e(Ce,LF),e(LF,q4e),e(q4e,M8r),e(LF,E8r),e(LF,bX),e(bX,y8r),e(LF,w8r),e(Ce,A8r),e(Ce,BF),e(BF,G4e),e(G4e,L8r),e(BF,B8r),e(BF,vX),e(vX,k8r),e(BF,x8r),e(Ce,R8r),e(Ce,kF),e(kF,O4e),e(O4e,S8r),e(kF,P8r),e(kF,TX),e(TX,$8r),e(kF,I8r),e(Ce,j8r),e(Ce,xF),e(xF,X4e),e(X4e,N8r),e(xF,D8r),e(xF,FX),e(FX,q8r),e(xF,G8r),e(Ce,O8r),e(Ce,RF),e(RF,z4e),e(z4e,X8r),e(RF,z8r),e(RF,CX),e(CX,V8r),e(RF,W8r),e(Ce,Q8r),e(Ce,SF),e(SF,V4e),e(V4e,H8r),e(SF,U8r),e(SF,MX),e(MX,J8r),e(SF,Y8r),e(Ce,K8r),e(Ce,PF),e(PF,W4e),e(W4e,Z8r),e(PF,eFr),e(PF,EX),e(EX,oFr),e(PF,rFr),e(Ro,tFr),e(Ro,Q4e),e(Q4e,aFr),e(Ro,nFr),g(s6,Ro,null),b(d,W9e,u),b(d,lf,u),e(lf,$F),e($F,H4e),g(l6,H4e,null),e(lf,sFr),e(lf,U4e),e(U4e,lFr),b(d,Q9e,u),b(d,Sr,u),g(i6,Sr,null),e(Sr,iFr),e(Sr,df),e(df,dFr),e(df,J4e),e(J4e,cFr),e(df,fFr),e(df,Y4e),e(Y4e,mFr),e(df,gFr),e(Sr,hFr),e(Sr,d6),e(d6,pFr),e(d6,K4e),e(K4e,_Fr),e(d6,uFr),e(Sr,bFr),e(Sr,wt),g(c6,wt,null),e(wt,vFr),e(wt,Z4e),e(Z4e,TFr),e(wt,FFr),e(wt,cf),e(cf,CFr),e(cf,ebe),e(ebe,MFr),e(cf,EFr),e(cf,obe),e(obe,yFr),e(cf,wFr),e(wt,AFr),e(wt,rbe),e(rbe,LFr),e(wt,BFr),g(f6,wt,null),e(Sr,kFr),e(Sr,So),g(m6,So,null),e(So,xFr),e(So,tbe),e(tbe,RFr),e(So,SFr),e(So,Bn),e(Bn,PFr),e(Bn,abe),e(abe,$Fr),e(Bn,IFr),e(Bn,nbe),e(nbe,jFr),e(Bn,NFr),e(Bn,sbe),e(sbe,DFr),e(Bn,qFr),e(So,GFr),e(So,so),e(so,IF),e(IF,lbe),e(lbe,OFr),e(IF,XFr),e(IF,yX),e(yX,zFr),e(IF,VFr),e(so,WFr),e(so,jF),e(jF,ibe),e(ibe,QFr),e(jF,HFr),e(jF,wX),e(wX,UFr),e(jF,JFr),e(so,YFr),e(so,NF),e(NF,dbe),e(dbe,KFr),e(NF,ZFr),e(NF,AX),e(AX,eCr),e(NF,oCr),e(so,rCr),e(so,DF),e(DF,cbe),e(cbe,tCr),e(DF,aCr),e(DF,LX),e(LX,nCr),e(DF,sCr),e(so,lCr),e(so,qF),e(qF,fbe),e(fbe,iCr),e(qF,dCr),e(qF,BX),e(BX,cCr),e(qF,fCr),e(so,mCr),e(so,GF),e(GF,mbe),e(mbe,gCr),e(GF,hCr),e(GF,kX),e(kX,pCr),e(GF,_Cr),e(so,uCr),e(so,OF),e(OF,gbe),e(gbe,bCr),e(OF,vCr),e(OF,xX),e(xX,TCr),e(OF,FCr),e(So,CCr),e(So,hbe),e(hbe,MCr),e(So,ECr),g(g6,So,null),b(d,H9e,u),b(d,ff,u),e(ff,XF),e(XF,pbe),g(h6,pbe,null),e(ff,yCr),e(ff,_be),e(_be,wCr),b(d,U9e,u),b(d,Pr,u),g(p6,Pr,null),e(Pr,ACr),e(Pr,mf),e(mf,LCr),e(mf,ube),e(ube,BCr),e(mf,kCr),e(mf,bbe),e(bbe,xCr),e(mf,RCr),e(Pr,SCr),e(Pr,_6),e(_6,PCr),e(_6,vbe),e(vbe,$Cr),e(_6,ICr),e(Pr,jCr),e(Pr,At),g(u6,At,null),e(At,NCr),e(At,Tbe),e(Tbe,DCr),e(At,qCr),e(At,gf),e(gf,GCr),e(gf,Fbe),e(Fbe,OCr),e(gf,XCr),e(gf,Cbe),e(Cbe,zCr),e(gf,VCr),e(At,WCr),e(At,Mbe),e(Mbe,QCr),e(At,HCr),g(b6,At,null),e(Pr,UCr),e(Pr,Po),g(v6,Po,null),e(Po,JCr),e(Po,Ebe),e(Ebe,YCr),e(Po,KCr),e(Po,kn),e(kn,ZCr),e(kn,ybe),e(ybe,eMr),e(kn,oMr),e(kn,wbe),e(wbe,rMr),e(kn,tMr),e(kn,Abe),e(Abe,aMr),e(kn,nMr),e(Po,sMr),e(Po,lo),e(lo,zF),e(zF,Lbe),e(Lbe,lMr),e(zF,iMr),e(zF,RX),e(RX,dMr),e(zF,cMr),e(lo,fMr),e(lo,VF),e(VF,Bbe),e(Bbe,mMr),e(VF,gMr),e(VF,SX),e(SX,hMr),e(VF,pMr),e(lo,_Mr),e(lo,WF),e(WF,kbe),e(kbe,uMr),e(WF,bMr),e(WF,PX),e(PX,vMr),e(WF,TMr),e(lo,FMr),e(lo,QF),e(QF,xbe),e(xbe,CMr),e(QF,MMr),e(QF,$X),e($X,EMr),e(QF,yMr),e(lo,wMr),e(lo,HF),e(HF,Rbe),e(Rbe,AMr),e(HF,LMr),e(HF,IX),e(IX,BMr),e(HF,kMr),e(lo,xMr),e(lo,UF),e(UF,Sbe),e(Sbe,RMr),e(UF,SMr),e(UF,jX),e(jX,PMr),e(UF,$Mr),e(lo,IMr),e(lo,JF),e(JF,Pbe),e(Pbe,jMr),e(JF,NMr),e(JF,NX),e(NX,DMr),e(JF,qMr),e(Po,GMr),e(Po,$be),e($be,OMr),e(Po,XMr),g(T6,Po,null),b(d,J9e,u),b(d,hf,u),e(hf,YF),e(YF,Ibe),g(F6,Ibe,null),e(hf,zMr),e(hf,jbe),e(jbe,VMr),b(d,Y9e,u),b(d,$r,u),g(C6,$r,null),e($r,WMr),e($r,pf),e(pf,QMr),e(pf,Nbe),e(Nbe,HMr),e(pf,UMr),e(pf,Dbe),e(Dbe,JMr),e(pf,YMr),e($r,KMr),e($r,M6),e(M6,ZMr),e(M6,qbe),e(qbe,eEr),e(M6,oEr),e($r,rEr),e($r,Lt),g(E6,Lt,null),e(Lt,tEr),e(Lt,Gbe),e(Gbe,aEr),e(Lt,nEr),e(Lt,_f),e(_f,sEr),e(_f,Obe),e(Obe,lEr),e(_f,iEr),e(_f,Xbe),e(Xbe,dEr),e(_f,cEr),e(Lt,fEr),e(Lt,zbe),e(zbe,mEr),e(Lt,gEr),g(y6,Lt,null),e($r,hEr),e($r,$o),g(w6,$o,null),e($o,pEr),e($o,Vbe),e(Vbe,_Er),e($o,uEr),e($o,xn),e(xn,bEr),e(xn,Wbe),e(Wbe,vEr),e(xn,TEr),e(xn,Qbe),e(Qbe,FEr),e(xn,CEr),e(xn,Hbe),e(Hbe,MEr),e(xn,EEr),e($o,yEr),e($o,Ube),e(Ube,KF),e(KF,Jbe),e(Jbe,wEr),e(KF,AEr),e(KF,DX),e(DX,LEr),e(KF,BEr),e($o,kEr),e($o,Ybe),e(Ybe,xEr),e($o,REr),g(A6,$o,null),b(d,K9e,u),b(d,uf,u),e(uf,ZF),e(ZF,Kbe),g(L6,Kbe,null),e(uf,SEr),e(uf,Zbe),e(Zbe,PEr),b(d,Z9e,u),b(d,Ir,u),g(B6,Ir,null),e(Ir,$Er),e(Ir,bf),e(bf,IEr),e(bf,e5e),e(e5e,jEr),e(bf,NEr),e(bf,o5e),e(o5e,DEr),e(bf,qEr),e(Ir,GEr),e(Ir,k6),e(k6,OEr),e(k6,r5e),e(r5e,XEr),e(k6,zEr),e(Ir,VEr),e(Ir,Bt),g(x6,Bt,null),e(Bt,WEr),e(Bt,t5e),e(t5e,QEr),e(Bt,HEr),e(Bt,vf),e(vf,UEr),e(vf,a5e),e(a5e,JEr),e(vf,YEr),e(vf,n5e),e(n5e,KEr),e(vf,ZEr),e(Bt,e3r),e(Bt,s5e),e(s5e,o3r),e(Bt,r3r),g(R6,Bt,null),e(Ir,t3r),e(Ir,Io),g(S6,Io,null),e(Io,a3r),e(Io,l5e),e(l5e,n3r),e(Io,s3r),e(Io,Rn),e(Rn,l3r),e(Rn,i5e),e(i5e,i3r),e(Rn,d3r),e(Rn,d5e),e(d5e,c3r),e(Rn,f3r),e(Rn,c5e),e(c5e,m3r),e(Rn,g3r),e(Io,h3r),e(Io,P6),e(P6,eC),e(eC,f5e),e(f5e,p3r),e(eC,_3r),e(eC,qX),e(qX,u3r),e(eC,b3r),e(P6,v3r),e(P6,oC),e(oC,m5e),e(m5e,T3r),e(oC,F3r),e(oC,GX),e(GX,C3r),e(oC,M3r),e(Io,E3r),e(Io,g5e),e(g5e,y3r),e(Io,w3r),g($6,Io,null),b(d,eBe,u),b(d,Tf,u),e(Tf,rC),e(rC,h5e),g(I6,h5e,null),e(Tf,A3r),e(Tf,p5e),e(p5e,L3r),b(d,oBe,u),b(d,jr,u),g(j6,jr,null),e(jr,B3r),e(jr,Ff),e(Ff,k3r),e(Ff,_5e),e(_5e,x3r),e(Ff,R3r),e(Ff,u5e),e(u5e,S3r),e(Ff,P3r),e(jr,$3r),e(jr,N6),e(N6,I3r),e(N6,b5e),e(b5e,j3r),e(N6,N3r),e(jr,D3r),e(jr,kt),g(D6,kt,null),e(kt,q3r),e(kt,v5e),e(v5e,G3r),e(kt,O3r),e(kt,Cf),e(Cf,X3r),e(Cf,T5e),e(T5e,z3r),e(Cf,V3r),e(Cf,F5e),e(F5e,W3r),e(Cf,Q3r),e(kt,H3r),e(kt,C5e),e(C5e,U3r),e(kt,J3r),g(q6,kt,null),e(jr,Y3r),e(jr,jo),g(G6,jo,null),e(jo,K3r),e(jo,M5e),e(M5e,Z3r),e(jo,eyr),e(jo,Sn),e(Sn,oyr),e(Sn,E5e),e(E5e,ryr),e(Sn,tyr),e(Sn,y5e),e(y5e,ayr),e(Sn,nyr),e(Sn,w5e),e(w5e,syr),e(Sn,lyr),e(jo,iyr),e(jo,A5e),e(A5e,tC),e(tC,L5e),e(L5e,dyr),e(tC,cyr),e(tC,OX),e(OX,fyr),e(tC,myr),e(jo,gyr),e(jo,B5e),e(B5e,hyr),e(jo,pyr),g(O6,jo,null),rBe=!0},p(d,[u]){const X6={};u&2&&(X6.$$scope={dirty:u,ctx:d}),Bf.$set(X6);const k5e={};u&2&&(k5e.$$scope={dirty:u,ctx:d}),ih.$set(k5e);const x5e={};u&2&&(x5e.$$scope={dirty:u,ctx:d}),vh.$set(x5e)},i(d){rBe||(h(ce.$$.fragment,d),h($a.$$.fragment,d),h(nM.$$.fragment,d),h(sM.$$.fragment,d),h(Bf.$$.fragment,d),h(lM.$$.fragment,d),h(iM.$$.fragment,d),h(fM.$$.fragment,d),h(mM.$$.fragment,d),h(gM.$$.fragment,d),h(hM.$$.fragment,d),h(pM.$$.fragment,d),h(bM.$$.fragment,d),h(vM.$$.fragment,d),h(TM.$$.fragment,d),h(FM.$$.fragment,d),h(CM.$$.fragment,d),h(yM.$$.fragment,d),h(ih.$$.fragment,d),h(wM.$$.fragment,d),h(AM.$$.fragment,d),h(LM.$$.fragment,d),h(BM.$$.fragment,d),h(RM.$$.fragment,d),h(vh.$$.fragment,d),h(SM.$$.fragment,d),h(PM.$$.fragment,d),h($M.$$.fragment,d),h(IM.$$.fragment,d),h(NM.$$.fragment,d),h(DM.$$.fragment,d),h(qM.$$.fragment,d),h(GM.$$.fragment,d),h(OM.$$.fragment,d),h(XM.$$.fragment,d),h(VM.$$.fragment,d),h(WM.$$.fragment,d),h(QM.$$.fragment,d),h(HM.$$.fragment,d),h(UM.$$.fragment,d),h(JM.$$.fragment,d),h(KM.$$.fragment,d),h(ZM.$$.fragment,d),h(eE.$$.fragment,d),h(oE.$$.fragment,d),h(rE.$$.fragment,d),h(tE.$$.fragment,d),h(nE.$$.fragment,d),h(sE.$$.fragment,d),h(lE.$$.fragment,d),h(iE.$$.fragment,d),h(dE.$$.fragment,d),h(cE.$$.fragment,d),h(mE.$$.fragment,d),h(gE.$$.fragment,d),h(hE.$$.fragment,d),h(pE.$$.fragment,d),h(_E.$$.fragment,d),h(uE.$$.fragment,d),h(vE.$$.fragment,d),h(TE.$$.fragment,d),h(FE.$$.fragment,d),h(CE.$$.fragment,d),h(ME.$$.fragment,d),h(EE.$$.fragment,d),h(wE.$$.fragment,d),h(AE.$$.fragment,d),h(LE.$$.fragment,d),h(BE.$$.fragment,d),h(kE.$$.fragment,d),h(xE.$$.fragment,d),h(SE.$$.fragment,d),h(PE.$$.fragment,d),h($E.$$.fragment,d),h(IE.$$.fragment,d),h(jE.$$.fragment,d),h(NE.$$.fragment,d),h(qE.$$.fragment,d),h(GE.$$.fragment,d),h(OE.$$.fragment,d),h(XE.$$.fragment,d),h(zE.$$.fragment,d),h(VE.$$.fragment,d),h(QE.$$.fragment,d),h(HE.$$.fragment,d),h(UE.$$.fragment,d),h(JE.$$.fragment,d),h(YE.$$.fragment,d),h(KE.$$.fragment,d),h(e3.$$.fragment,d),h(o3.$$.fragment,d),h(r3.$$.fragment,d),h(t3.$$.fragment,d),h(a3.$$.fragment,d),h(n3.$$.fragment,d),h(l3.$$.fragment,d),h(i3.$$.fragment,d),h(d3.$$.fragment,d),h(c3.$$.fragment,d),h(f3.$$.fragment,d),h(m3.$$.fragment,d),h(h3.$$.fragment,d),h(p3.$$.fragment,d),h(_3.$$.fragment,d),h(u3.$$.fragment,d),h(b3.$$.fragment,d),h(v3.$$.fragment,d),h(F3.$$.fragment,d),h(C3.$$.fragment,d),h(M3.$$.fragment,d),h(E3.$$.fragment,d),h(y3.$$.fragment,d),h(w3.$$.fragment,d),h(L3.$$.fragment,d),h(B3.$$.fragment,d),h(k3.$$.fragment,d),h(x3.$$.fragment,d),h(R3.$$.fragment,d),h(S3.$$.fragment,d),h($3.$$.fragment,d),h(I3.$$.fragment,d),h(j3.$$.fragment,d),h(N3.$$.fragment,d),h(D3.$$.fragment,d),h(q3.$$.fragment,d),h(O3.$$.fragment,d),h(X3.$$.fragment,d),h(z3.$$.fragment,d),h(W3.$$.fragment,d),h(Q3.$$.fragment,d),h(H3.$$.fragment,d),h(J3.$$.fragment,d),h(Y3.$$.fragment,d),h(K3.$$.fragment,d),h(Z3.$$.fragment,d),h(ey.$$.fragment,d),h(oy.$$.fragment,d),h(ty.$$.fragment,d),h(ay.$$.fragment,d),h(ny.$$.fragment,d),h(sy.$$.fragment,d),h(ly.$$.fragment,d),h(iy.$$.fragment,d),h(cy.$$.fragment,d),h(fy.$$.fragment,d),h(my.$$.fragment,d),h(gy.$$.fragment,d),h(hy.$$.fragment,d),h(py.$$.fragment,d),h(uy.$$.fragment,d),h(by.$$.fragment,d),h(vy.$$.fragment,d),h(Ty.$$.fragment,d),h(Fy.$$.fragment,d),h(Cy.$$.fragment,d),h(Ey.$$.fragment,d),h(yy.$$.fragment,d),h(wy.$$.fragment,d),h(Ly.$$.fragment,d),h(By.$$.fragment,d),h(ky.$$.fragment,d),h(Ry.$$.fragment,d),h(Sy.$$.fragment,d),h(Py.$$.fragment,d),h($y.$$.fragment,d),h(Iy.$$.fragment,d),h(jy.$$.fragment,d),h(Dy.$$.fragment,d),h(qy.$$.fragment,d),h(Gy.$$.fragment,d),h(Oy.$$.fragment,d),h(Xy.$$.fragment,d),h(zy.$$.fragment,d),h(Wy.$$.fragment,d),h(Qy.$$.fragment,d),h(Hy.$$.fragment,d),h(Uy.$$.fragment,d),h(Jy.$$.fragment,d),h(Yy.$$.fragment,d),h(Zy.$$.fragment,d),h(ew.$$.fragment,d),h(ow.$$.fragment,d),h(rw.$$.fragment,d),h(tw.$$.fragment,d),h(aw.$$.fragment,d),h(sw.$$.fragment,d),h(lw.$$.fragment,d),h(iw.$$.fragment,d),h(dw.$$.fragment,d),h(cw.$$.fragment,d),h(fw.$$.fragment,d),h(gw.$$.fragment,d),h(hw.$$.fragment,d),h(pw.$$.fragment,d),h(_w.$$.fragment,d),h(uw.$$.fragment,d),h(bw.$$.fragment,d),h(Tw.$$.fragment,d),h(Fw.$$.fragment,d),h(Cw.$$.fragment,d),h(Mw.$$.fragment,d),h(Ew.$$.fragment,d),h(yw.$$.fragment,d),h(Aw.$$.fragment,d),h(Lw.$$.fragment,d),h(Bw.$$.fragment,d),h(kw.$$.fragment,d),h(xw.$$.fragment,d),h(Rw.$$.fragment,d),h(Pw.$$.fragment,d),h($w.$$.fragment,d),h(Iw.$$.fragment,d),h(jw.$$.fragment,d),h(Nw.$$.fragment,d),h(Dw.$$.fragment,d),h(Gw.$$.fragment,d),h(Ow.$$.fragment,d),h(Xw.$$.fragment,d),h(zw.$$.fragment,d),h(Vw.$$.fragment,d),h(Ww.$$.fragment,d),h(Hw.$$.fragment,d),h(Uw.$$.fragment,d),h(Jw.$$.fragment,d),h(Yw.$$.fragment,d),h(Kw.$$.fragment,d),h(Zw.$$.fragment,d),h(oA.$$.fragment,d),h(rA.$$.fragment,d),h(tA.$$.fragment,d),h(aA.$$.fragment,d),h(nA.$$.fragment,d),h(sA.$$.fragment,d),h(iA.$$.fragment,d),h(dA.$$.fragment,d),h(cA.$$.fragment,d),h(fA.$$.fragment,d),h(mA.$$.fragment,d),h(gA.$$.fragment,d),h(pA.$$.fragment,d),h(_A.$$.fragment,d),h(uA.$$.fragment,d),h(bA.$$.fragment,d),h(vA.$$.fragment,d),h(TA.$$.fragment,d),h(CA.$$.fragment,d),h(MA.$$.fragment,d),h(EA.$$.fragment,d),h(yA.$$.fragment,d),h(wA.$$.fragment,d),h(AA.$$.fragment,d),h(BA.$$.fragment,d),h(kA.$$.fragment,d),h(xA.$$.fragment,d),h(RA.$$.fragment,d),h(SA.$$.fragment,d),h(PA.$$.fragment,d),h(IA.$$.fragment,d),h(jA.$$.fragment,d),h(NA.$$.fragment,d),h(DA.$$.fragment,d),h(qA.$$.fragment,d),h(GA.$$.fragment,d),h(XA.$$.fragment,d),h(zA.$$.fragment,d),h(VA.$$.fragment,d),h(WA.$$.fragment,d),h(QA.$$.fragment,d),h(HA.$$.fragment,d),h(JA.$$.fragment,d),h(YA.$$.fragment,d),h(KA.$$.fragment,d),h(ZA.$$.fragment,d),h(e6.$$.fragment,d),h(o6.$$.fragment,d),h(t6.$$.fragment,d),h(a6.$$.fragment,d),h(n6.$$.fragment,d),h(s6.$$.fragment,d),h(l6.$$.fragment,d),h(i6.$$.fragment,d),h(c6.$$.fragment,d),h(f6.$$.fragment,d),h(m6.$$.fragment,d),h(g6.$$.fragment,d),h(h6.$$.fragment,d),h(p6.$$.fragment,d),h(u6.$$.fragment,d),h(b6.$$.fragment,d),h(v6.$$.fragment,d),h(T6.$$.fragment,d),h(F6.$$.fragment,d),h(C6.$$.fragment,d),h(E6.$$.fragment,d),h(y6.$$.fragment,d),h(w6.$$.fragment,d),h(A6.$$.fragment,d),h(L6.$$.fragment,d),h(B6.$$.fragment,d),h(x6.$$.fragment,d),h(R6.$$.fragment,d),h(S6.$$.fragment,d),h($6.$$.fragment,d),h(I6.$$.fragment,d),h(j6.$$.fragment,d),h(D6.$$.fragment,d),h(q6.$$.fragment,d),h(G6.$$.fragment,d),h(O6.$$.fragment,d),rBe=!0)},o(d){p(ce.$$.fragment,d),p($a.$$.fragment,d),p(nM.$$.fragment,d),p(sM.$$.fragment,d),p(Bf.$$.fragment,d),p(lM.$$.fragment,d),p(iM.$$.fragment,d),p(fM.$$.fragment,d),p(mM.$$.fragment,d),p(gM.$$.fragment,d),p(hM.$$.fragment,d),p(pM.$$.fragment,d),p(bM.$$.fragment,d),p(vM.$$.fragment,d),p(TM.$$.fragment,d),p(FM.$$.fragment,d),p(CM.$$.fragment,d),p(yM.$$.fragment,d),p(ih.$$.fragment,d),p(wM.$$.fragment,d),p(AM.$$.fragment,d),p(LM.$$.fragment,d),p(BM.$$.fragment,d),p(RM.$$.fragment,d),p(vh.$$.fragment,d),p(SM.$$.fragment,d),p(PM.$$.fragment,d),p($M.$$.fragment,d),p(IM.$$.fragment,d),p(NM.$$.fragment,d),p(DM.$$.fragment,d),p(qM.$$.fragment,d),p(GM.$$.fragment,d),p(OM.$$.fragment,d),p(XM.$$.fragment,d),p(VM.$$.fragment,d),p(WM.$$.fragment,d),p(QM.$$.fragment,d),p(HM.$$.fragment,d),p(UM.$$.fragment,d),p(JM.$$.fragment,d),p(KM.$$.fragment,d),p(ZM.$$.fragment,d),p(eE.$$.fragment,d),p(oE.$$.fragment,d),p(rE.$$.fragment,d),p(tE.$$.fragment,d),p(nE.$$.fragment,d),p(sE.$$.fragment,d),p(lE.$$.fragment,d),p(iE.$$.fragment,d),p(dE.$$.fragment,d),p(cE.$$.fragment,d),p(mE.$$.fragment,d),p(gE.$$.fragment,d),p(hE.$$.fragment,d),p(pE.$$.fragment,d),p(_E.$$.fragment,d),p(uE.$$.fragment,d),p(vE.$$.fragment,d),p(TE.$$.fragment,d),p(FE.$$.fragment,d),p(CE.$$.fragment,d),p(ME.$$.fragment,d),p(EE.$$.fragment,d),p(wE.$$.fragment,d),p(AE.$$.fragment,d),p(LE.$$.fragment,d),p(BE.$$.fragment,d),p(kE.$$.fragment,d),p(xE.$$.fragment,d),p(SE.$$.fragment,d),p(PE.$$.fragment,d),p($E.$$.fragment,d),p(IE.$$.fragment,d),p(jE.$$.fragment,d),p(NE.$$.fragment,d),p(qE.$$.fragment,d),p(GE.$$.fragment,d),p(OE.$$.fragment,d),p(XE.$$.fragment,d),p(zE.$$.fragment,d),p(VE.$$.fragment,d),p(QE.$$.fragment,d),p(HE.$$.fragment,d),p(UE.$$.fragment,d),p(JE.$$.fragment,d),p(YE.$$.fragment,d),p(KE.$$.fragment,d),p(e3.$$.fragment,d),p(o3.$$.fragment,d),p(r3.$$.fragment,d),p(t3.$$.fragment,d),p(a3.$$.fragment,d),p(n3.$$.fragment,d),p(l3.$$.fragment,d),p(i3.$$.fragment,d),p(d3.$$.fragment,d),p(c3.$$.fragment,d),p(f3.$$.fragment,d),p(m3.$$.fragment,d),p(h3.$$.fragment,d),p(p3.$$.fragment,d),p(_3.$$.fragment,d),p(u3.$$.fragment,d),p(b3.$$.fragment,d),p(v3.$$.fragment,d),p(F3.$$.fragment,d),p(C3.$$.fragment,d),p(M3.$$.fragment,d),p(E3.$$.fragment,d),p(y3.$$.fragment,d),p(w3.$$.fragment,d),p(L3.$$.fragment,d),p(B3.$$.fragment,d),p(k3.$$.fragment,d),p(x3.$$.fragment,d),p(R3.$$.fragment,d),p(S3.$$.fragment,d),p($3.$$.fragment,d),p(I3.$$.fragment,d),p(j3.$$.fragment,d),p(N3.$$.fragment,d),p(D3.$$.fragment,d),p(q3.$$.fragment,d),p(O3.$$.fragment,d),p(X3.$$.fragment,d),p(z3.$$.fragment,d),p(W3.$$.fragment,d),p(Q3.$$.fragment,d),p(H3.$$.fragment,d),p(J3.$$.fragment,d),p(Y3.$$.fragment,d),p(K3.$$.fragment,d),p(Z3.$$.fragment,d),p(ey.$$.fragment,d),p(oy.$$.fragment,d),p(ty.$$.fragment,d),p(ay.$$.fragment,d),p(ny.$$.fragment,d),p(sy.$$.fragment,d),p(ly.$$.fragment,d),p(iy.$$.fragment,d),p(cy.$$.fragment,d),p(fy.$$.fragment,d),p(my.$$.fragment,d),p(gy.$$.fragment,d),p(hy.$$.fragment,d),p(py.$$.fragment,d),p(uy.$$.fragment,d),p(by.$$.fragment,d),p(vy.$$.fragment,d),p(Ty.$$.fragment,d),p(Fy.$$.fragment,d),p(Cy.$$.fragment,d),p(Ey.$$.fragment,d),p(yy.$$.fragment,d),p(wy.$$.fragment,d),p(Ly.$$.fragment,d),p(By.$$.fragment,d),p(ky.$$.fragment,d),p(Ry.$$.fragment,d),p(Sy.$$.fragment,d),p(Py.$$.fragment,d),p($y.$$.fragment,d),p(Iy.$$.fragment,d),p(jy.$$.fragment,d),p(Dy.$$.fragment,d),p(qy.$$.fragment,d),p(Gy.$$.fragment,d),p(Oy.$$.fragment,d),p(Xy.$$.fragment,d),p(zy.$$.fragment,d),p(Wy.$$.fragment,d),p(Qy.$$.fragment,d),p(Hy.$$.fragment,d),p(Uy.$$.fragment,d),p(Jy.$$.fragment,d),p(Yy.$$.fragment,d),p(Zy.$$.fragment,d),p(ew.$$.fragment,d),p(ow.$$.fragment,d),p(rw.$$.fragment,d),p(tw.$$.fragment,d),p(aw.$$.fragment,d),p(sw.$$.fragment,d),p(lw.$$.fragment,d),p(iw.$$.fragment,d),p(dw.$$.fragment,d),p(cw.$$.fragment,d),p(fw.$$.fragment,d),p(gw.$$.fragment,d),p(hw.$$.fragment,d),p(pw.$$.fragment,d),p(_w.$$.fragment,d),p(uw.$$.fragment,d),p(bw.$$.fragment,d),p(Tw.$$.fragment,d),p(Fw.$$.fragment,d),p(Cw.$$.fragment,d),p(Mw.$$.fragment,d),p(Ew.$$.fragment,d),p(yw.$$.fragment,d),p(Aw.$$.fragment,d),p(Lw.$$.fragment,d),p(Bw.$$.fragment,d),p(kw.$$.fragment,d),p(xw.$$.fragment,d),p(Rw.$$.fragment,d),p(Pw.$$.fragment,d),p($w.$$.fragment,d),p(Iw.$$.fragment,d),p(jw.$$.fragment,d),p(Nw.$$.fragment,d),p(Dw.$$.fragment,d),p(Gw.$$.fragment,d),p(Ow.$$.fragment,d),p(Xw.$$.fragment,d),p(zw.$$.fragment,d),p(Vw.$$.fragment,d),p(Ww.$$.fragment,d),p(Hw.$$.fragment,d),p(Uw.$$.fragment,d),p(Jw.$$.fragment,d),p(Yw.$$.fragment,d),p(Kw.$$.fragment,d),p(Zw.$$.fragment,d),p(oA.$$.fragment,d),p(rA.$$.fragment,d),p(tA.$$.fragment,d),p(aA.$$.fragment,d),p(nA.$$.fragment,d),p(sA.$$.fragment,d),p(iA.$$.fragment,d),p(dA.$$.fragment,d),p(cA.$$.fragment,d),p(fA.$$.fragment,d),p(mA.$$.fragment,d),p(gA.$$.fragment,d),p(pA.$$.fragment,d),p(_A.$$.fragment,d),p(uA.$$.fragment,d),p(bA.$$.fragment,d),p(vA.$$.fragment,d),p(TA.$$.fragment,d),p(CA.$$.fragment,d),p(MA.$$.fragment,d),p(EA.$$.fragment,d),p(yA.$$.fragment,d),p(wA.$$.fragment,d),p(AA.$$.fragment,d),p(BA.$$.fragment,d),p(kA.$$.fragment,d),p(xA.$$.fragment,d),p(RA.$$.fragment,d),p(SA.$$.fragment,d),p(PA.$$.fragment,d),p(IA.$$.fragment,d),p(jA.$$.fragment,d),p(NA.$$.fragment,d),p(DA.$$.fragment,d),p(qA.$$.fragment,d),p(GA.$$.fragment,d),p(XA.$$.fragment,d),p(zA.$$.fragment,d),p(VA.$$.fragment,d),p(WA.$$.fragment,d),p(QA.$$.fragment,d),p(HA.$$.fragment,d),p(JA.$$.fragment,d),p(YA.$$.fragment,d),p(KA.$$.fragment,d),p(ZA.$$.fragment,d),p(e6.$$.fragment,d),p(o6.$$.fragment,d),p(t6.$$.fragment,d),p(a6.$$.fragment,d),p(n6.$$.fragment,d),p(s6.$$.fragment,d),p(l6.$$.fragment,d),p(i6.$$.fragment,d),p(c6.$$.fragment,d),p(f6.$$.fragment,d),p(m6.$$.fragment,d),p(g6.$$.fragment,d),p(h6.$$.fragment,d),p(p6.$$.fragment,d),p(u6.$$.fragment,d),p(b6.$$.fragment,d),p(v6.$$.fragment,d),p(T6.$$.fragment,d),p(F6.$$.fragment,d),p(C6.$$.fragment,d),p(E6.$$.fragment,d),p(y6.$$.fragment,d),p(w6.$$.fragment,d),p(A6.$$.fragment,d),p(L6.$$.fragment,d),p(B6.$$.fragment,d),p(x6.$$.fragment,d),p(R6.$$.fragment,d),p(S6.$$.fragment,d),p($6.$$.fragment,d),p(I6.$$.fragment,d),p(j6.$$.fragment,d),p(D6.$$.fragment,d),p(q6.$$.fragment,d),p(G6.$$.fragment,d),p(O6.$$.fragment,d),rBe=!1},d(d){t(J),d&&t(Ae),d&&t(ie),_(ce),d&&t(Ef),d&&t(sa),d&&t(ye),d&&t(io),d&&t(wf),_($a,d),d&&t(co),d&&t(ge),d&&t(qo),d&&t(Ia),d&&t(tLe),d&&t(Si),_(nM),d&&t(aLe),d&&t(Nn),d&&t(nLe),_(sM,d),d&&t(sLe),d&&t(z0),d&&t(lLe),_(Bf,d),d&&t(iLe),d&&t(Pi),_(lM),d&&t(dLe),d&&t(Go),_(iM),_(fM),_(mM),_(gM),d&&t(cLe),d&&t(Ii),_(hM),d&&t(fLe),d&&t(Oo),_(pM),_(bM),_(vM),_(TM),d&&t(mLe),d&&t(ji),_(FM),d&&t(gLe),d&&t(Xo),_(CM),_(yM),_(ih),_(wM),_(AM),d&&t(hLe),d&&t(Ni),_(LM),d&&t(pLe),d&&t(zo),_(BM),_(RM),_(vh),_(SM),_(PM),d&&t(_Le),d&&t(qi),_($M),d&&t(uLe),d&&t(Vo),_(IM),_(NM),_(DM),_(qM),_(GM),d&&t(bLe),d&&t(Xi),_(OM),d&&t(vLe),d&&t(Wo),_(XM),_(VM),_(WM),_(QM),_(HM),d&&t(TLe),d&&t(Wi),_(UM),d&&t(FLe),d&&t(Qo),_(JM),_(KM),_(ZM),_(eE),_(oE),d&&t(CLe),d&&t(Ui),_(rE),d&&t(MLe),d&&t(Ho),_(tE),_(nE),_(sE),_(lE),_(iE),d&&t(ELe),d&&t(Ki),_(dE),d&&t(yLe),d&&t(Uo),_(cE),_(mE),_(gE),_(hE),_(pE),d&&t(wLe),d&&t(od),_(_E),d&&t(ALe),d&&t(Jo),_(uE),_(vE),_(TE),_(FE),_(CE),d&&t(LLe),d&&t(ad),_(ME),d&&t(BLe),d&&t(Yo),_(EE),_(wE),_(AE),_(LE),_(BE),d&&t(kLe),d&&t(ld),_(kE),d&&t(xLe),d&&t(Ko),_(xE),_(SE),_(PE),_($E),_(IE),d&&t(RLe),d&&t(cd),_(jE),d&&t(SLe),d&&t(Zo),_(NE),_(qE),_(GE),_(OE),_(XE),d&&t(PLe),d&&t(gd),_(zE),d&&t($Le),d&&t(er),_(VE),_(QE),_(HE),_(UE),_(JE),d&&t(ILe),d&&t(_d),_(YE),d&&t(jLe),d&&t(or),_(KE),_(e3),_(o3),_(r3),_(t3),d&&t(NLe),d&&t(vd),_(a3),d&&t(DLe),d&&t(rr),_(n3),_(l3),_(i3),_(d3),_(c3),d&&t(qLe),d&&t(Cd),_(f3),d&&t(GLe),d&&t(tr),_(m3),_(h3),_(p3),_(_3),_(u3),d&&t(OLe),d&&t(yd),_(b3),d&&t(XLe),d&&t(ar),_(v3),_(F3),_(C3),_(M3),_(E3),d&&t(zLe),d&&t(Ld),_(y3),d&&t(VLe),d&&t(nr),_(w3),_(L3),_(B3),_(k3),_(x3),d&&t(WLe),d&&t(Rd),_(R3),d&&t(QLe),d&&t(sr),_(S3),_($3),_(I3),_(j3),_(N3),d&&t(HLe),d&&t($d),_(D3),d&&t(ULe),d&&t(lr),_(q3),_(O3),_(X3),_(z3),_(W3),d&&t(JLe),d&&t(Nd),_(Q3),d&&t(YLe),d&&t(ir),_(H3),_(J3),_(Y3),_(K3),_(Z3),d&&t(KLe),d&&t(Od),_(ey),d&&t(ZLe),d&&t(dr),_(oy),_(ty),_(ay),_(ny),_(sy),d&&t(e9e),d&&t(Wd),_(ly),d&&t(o9e),d&&t(cr),_(iy),_(cy),_(fy),_(my),_(gy),d&&t(r9e),d&&t(Ud),_(hy),d&&t(t9e),d&&t(fr),_(py),_(uy),_(by),_(vy),_(Ty),d&&t(a9e),d&&t(Kd),_(Fy),d&&t(n9e),d&&t(mr),_(Cy),_(Ey),_(yy),_(wy),_(Ly),d&&t(s9e),d&&t(oc),_(By),d&&t(l9e),d&&t(gr),_(ky),_(Ry),_(Sy),_(Py),_($y),d&&t(i9e),d&&t(ac),_(Iy),d&&t(d9e),d&&t(hr),_(jy),_(Dy),_(qy),_(Gy),_(Oy),d&&t(c9e),d&&t(lc),_(Xy),d&&t(f9e),d&&t(pr),_(zy),_(Wy),_(Qy),_(Hy),_(Uy),d&&t(m9e),d&&t(cc),_(Jy),d&&t(g9e),d&&t(_r),_(Yy),_(Zy),_(ew),_(ow),_(rw),d&&t(h9e),d&&t(gc),_(tw),d&&t(p9e),d&&t(ur),_(aw),_(sw),_(lw),_(iw),_(dw),d&&t(_9e),d&&t(_c),_(cw),d&&t(u9e),d&&t(br),_(fw),_(gw),_(hw),_(pw),_(_w),d&&t(b9e),d&&t(vc),_(uw),d&&t(v9e),d&&t(vr),_(bw),_(Tw),_(Fw),_(Cw),_(Mw),d&&t(T9e),d&&t(Cc),_(Ew),d&&t(F9e),d&&t(Tr),_(yw),_(Aw),_(Lw),_(Bw),_(kw),d&&t(C9e),d&&t(yc),_(xw),d&&t(M9e),d&&t(Fr),_(Rw),_(Pw),_($w),_(Iw),_(jw),d&&t(E9e),d&&t(Lc),_(Nw),d&&t(y9e),d&&t(Cr),_(Dw),_(Gw),_(Ow),_(Xw),_(zw),d&&t(w9e),d&&t(xc),_(Vw),d&&t(A9e),d&&t(Mr),_(Ww),_(Hw),_(Uw),_(Jw),_(Yw),d&&t(L9e),d&&t(Pc),_(Kw),d&&t(B9e),d&&t(Er),_(Zw),_(oA),_(rA),_(tA),_(aA),d&&t(k9e),d&&t(jc),_(nA),d&&t(x9e),d&&t(yr),_(sA),_(iA),_(dA),_(cA),_(fA),d&&t(R9e),d&&t(qc),_(mA),d&&t(S9e),d&&t(wr),_(gA),_(pA),_(_A),_(uA),_(bA),d&&t(P9e),d&&t(Xc),_(vA),d&&t($9e),d&&t(Ar),_(TA),_(CA),_(MA),_(EA),_(yA),d&&t(I9e),d&&t(Wc),_(wA),d&&t(j9e),d&&t(Lr),_(AA),_(BA),_(kA),_(xA),_(RA),d&&t(N9e),d&&t(Uc),_(SA),d&&t(D9e),d&&t(Br),_(PA),_(IA),_(jA),_(NA),_(DA),d&&t(q9e),d&&t(Kc),_(qA),d&&t(G9e),d&&t(kr),_(GA),_(XA),_(zA),_(VA),_(WA),d&&t(O9e),d&&t(of),_(QA),d&&t(X9e),d&&t(xr),_(HA),_(JA),_(YA),_(KA),_(ZA),d&&t(z9e),d&&t(af),_(e6),d&&t(V9e),d&&t(Rr),_(o6),_(t6),_(a6),_(n6),_(s6),d&&t(W9e),d&&t(lf),_(l6),d&&t(Q9e),d&&t(Sr),_(i6),_(c6),_(f6),_(m6),_(g6),d&&t(H9e),d&&t(ff),_(h6),d&&t(U9e),d&&t(Pr),_(p6),_(u6),_(b6),_(v6),_(T6),d&&t(J9e),d&&t(hf),_(F6),d&&t(Y9e),d&&t($r),_(C6),_(E6),_(y6),_(w6),_(A6),d&&t(K9e),d&&t(uf),_(L6),d&&t(Z9e),d&&t(Ir),_(B6),_(x6),_(R6),_(S6),_($6),d&&t(eBe),d&&t(Tf),_(I6),d&&t(oBe),d&&t(jr),_(j6),_(D6),_(q6),_(G6),_(O6)}}}const y_t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function w_t(yi,J,Ae){let{fw:ie}=J;return yi.$$set=me=>{"fw"in me&&Ae(0,ie=me.fw)},[ie]}class S_t extends u_t{constructor(J){super();b_t(this,J,w_t,E_t,v_t,{fw:0})}}export{S_t as default,y_t as metadata};
