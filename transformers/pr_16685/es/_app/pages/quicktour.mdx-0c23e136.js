import{S as Cp,i as zp,s as xp,e as l,k as f,w as b,t as r,M as Pp,c as i,d as t,m as $,a as p,x as E,h as n,b as T,F as a,g as u,y as k,q as j,o as w,B as y,v as Mp,L as ze}from"../chunks/vendor-5fc3b424.js";import{T as $t}from"../chunks/Tip-12425c03.js";import{Y as Tp}from"../chunks/Youtube-22419068.js";import{I as fa}from"../chunks/IconCopyLink-13a64c4f.js";import{C as U}from"../chunks/CodeBlock-ee0b374b.js";import{D as Sp}from"../chunks/DocNotebookDropdown-d9b39aeb.js";import{F as ft,M as ge}from"../chunks/Markdown-269919ba.js";function Fp(z){let s,d;return{c(){s=l("p"),d=r(`Todos los ejemplos de c\xF3digo presentados en la documentaci\xF3n tienen un bot\xF3n arriba a la izquierda para elegir entre Pytorch y TensorFlow.
Si no fuese as\xED, se espera que el c\xF3digo funcione para ambos backends sin ning\xFAn cambio.`)},l(o){s=i(o,"P",{});var m=p(s);d=n(m,`Todos los ejemplos de c\xF3digo presentados en la documentaci\xF3n tienen un bot\xF3n arriba a la izquierda para elegir entre Pytorch y TensorFlow.
Si no fuese as\xED, se espera que el c\xF3digo funcione para ambos backends sin ning\xFAn cambio.`),m.forEach(t)},m(o,m){u(o,s,m),a(s,d)},d(o){o&&t(s)}}}function Dp(z){let s,d,o,m,h,g,C,F;return{c(){s=l("p"),d=r("Para m\xE1s detalles acerca del "),o=l("code"),m=r("pipeline()"),h=r(" y tareas asociadas, consulta la documentaci\xF3n "),g=l("a"),C=r("aqu\xED"),F=r("."),this.h()},l(x){s=i(x,"P",{});var P=p(s);d=n(P,"Para m\xE1s detalles acerca del "),o=i(P,"CODE",{});var D=p(o);m=n(D,"pipeline()"),D.forEach(t),h=n(P," y tareas asociadas, consulta la documentaci\xF3n "),g=i(P,"A",{href:!0});var A=p(g);C=n(A,"aqu\xED"),A.forEach(t),F=n(P,"."),P.forEach(t),this.h()},h(){T(g,"href","./main_classes/pipelines")},m(x,P){u(x,s,P),a(s,d),a(s,o),a(o,m),a(s,h),a(s,g),a(g,C),a(s,F)},d(x){x&&t(s)}}}function Op(z){let s,d;return s=new U({props:{code:"pip install torch",highlighted:"pip install torch"}}),{c(){b(s.$$.fragment)},l(o){E(s.$$.fragment,o)},m(o,m){k(s,o,m),d=!0},p:ze,i(o){d||(j(s.$$.fragment,o),d=!0)},o(o){w(s.$$.fragment,o),d=!1},d(o){y(s,o)}}}function Lp(z){let s,d;return s=new ge({props:{$$slots:{default:[Op]},$$scope:{ctx:z}}}),{c(){b(s.$$.fragment)},l(o){E(s.$$.fragment,o)},m(o,m){k(s,o,m),d=!0},p(o,m){const h={};m&2&&(h.$$scope={dirty:m,ctx:o}),s.$set(h)},i(o){d||(j(s.$$.fragment,o),d=!0)},o(o){w(s.$$.fragment,o),d=!1},d(o){y(s,o)}}}function Ip(z){let s,d;return s=new U({props:{code:"pip install tensorflow",highlighted:"pip install tensorflow"}}),{c(){b(s.$$.fragment)},l(o){E(s.$$.fragment,o)},m(o,m){k(s,o,m),d=!0},p:ze,i(o){d||(j(s.$$.fragment,o),d=!0)},o(o){w(s.$$.fragment,o),d=!1},d(o){y(s,o)}}}function Np(z){let s,d;return s=new ge({props:{$$slots:{default:[Ip]},$$scope:{ctx:z}}}),{c(){b(s.$$.fragment)},l(o){E(s.$$.fragment,o)},m(o,m){k(s,o,m),d=!0},p(o,m){const h={};m&2&&(h.$$scope={dirty:m,ctx:o}),s.$set(h)},i(o){d||(j(s.$$.fragment,o),d=!0)},o(o){w(s.$$.fragment,o),d=!1},d(o){y(s,o)}}}function Rp(z){let s,d,o,m,h,g,C,F,x,P,D;return P=new U({props:{code:`from transformers import AutoTokenizer, AutoModelForSequenceClassification

model = AutoModelForSequenceClassification.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(model_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_name)`}}),{c(){s=l("p"),d=r("Usa "),o=l("code"),m=r("AutoModelForSequenceClassification"),h=r(" y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),g=l("code"),C=r("AutoClass"),F=r(" debajo):"),x=f(),b(P.$$.fragment)},l(A){s=i(A,"P",{});var S=p(s);d=n(S,"Usa "),o=i(S,"CODE",{});var H=p(o);m=n(H,"AutoModelForSequenceClassification"),H.forEach(t),h=n(S," y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),g=i(S,"CODE",{});var L=p(g);C=n(L,"AutoClass"),L.forEach(t),F=n(S," debajo):"),S.forEach(t),x=$(A),E(P.$$.fragment,A)},m(A,S){u(A,s,S),a(s,d),a(s,o),a(o,m),a(s,h),a(s,g),a(g,C),a(s,F),u(A,x,S),k(P,A,S),D=!0},p:ze,i(A){D||(j(P.$$.fragment,A),D=!0)},o(A){w(P.$$.fragment,A),D=!1},d(A){A&&t(s),A&&t(x),y(P,A)}}}function Up(z){let s,d;return s=new ge({props:{$$slots:{default:[Rp]},$$scope:{ctx:z}}}),{c(){b(s.$$.fragment)},l(o){E(s.$$.fragment,o)},m(o,m){k(s,o,m),d=!0},p(o,m){const h={};m&2&&(h.$$scope={dirty:m,ctx:o}),s.$set(h)},i(o){d||(j(s.$$.fragment,o),d=!0)},o(o){w(s.$$.fragment,o),d=!1},d(o){y(s,o)}}}function Hp(z){let s,d,o,m,h,g,C,F,x,P,D;return P=new U({props:{code:`from transformers import AutoTokenizer, TFAutoModelForSequenceClassification

model = TFAutoModelForSequenceClassification.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(model_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_name)`}}),{c(){s=l("p"),d=r("Usa "),o=l("code"),m=r("TFAutoModelForSequenceClassification"),h=r(" y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),g=l("code"),C=r("TFAutoClass"),F=r(" debajo):"),x=f(),b(P.$$.fragment)},l(A){s=i(A,"P",{});var S=p(s);d=n(S,"Usa "),o=i(S,"CODE",{});var H=p(o);m=n(H,"TFAutoModelForSequenceClassification"),H.forEach(t),h=n(S," y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),g=i(S,"CODE",{});var L=p(g);C=n(L,"TFAutoClass"),L.forEach(t),F=n(S," debajo):"),S.forEach(t),x=$(A),E(P.$$.fragment,A)},m(A,S){u(A,s,S),a(s,d),a(s,o),a(o,m),a(s,h),a(s,g),a(g,C),a(s,F),u(A,x,S),k(P,A,S),D=!0},p:ze,i(A){D||(j(P.$$.fragment,A),D=!0)},o(A){w(P.$$.fragment,A),D=!1},d(A){A&&t(s),A&&t(x),y(P,A)}}}function Gp(z){let s,d;return s=new ge({props:{$$slots:{default:[Hp]},$$scope:{ctx:z}}}),{c(){b(s.$$.fragment)},l(o){E(s.$$.fragment,o)},m(o,m){k(s,o,m),d=!0},p(o,m){const h={};m&2&&(h.$$scope={dirty:m,ctx:o}),s.$set(h)},i(o){d||(j(s.$$.fragment,o),d=!0)},o(o){w(s.$$.fragment,o),d=!1},d(o){y(s,o)}}}function Vp(z){let s,d;return s=new U({props:{code:`pt_batch = tokenizer(
    ["We are very happy to show you the \u{1F917} Transformers library.", "We hope you don't hate it."],
    padding=True,
    truncation=True,
    max_length=512,
    return_tensors="pt",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pt_batch = tokenizer(
<span class="hljs-meta">... </span>    [<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>, <span class="hljs-string">&quot;We hope you don&#x27;t hate it.&quot;</span>],
<span class="hljs-meta">... </span>    padding=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    truncation=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    max_length=<span class="hljs-number">512</span>,
<span class="hljs-meta">... </span>    return_tensors=<span class="hljs-string">&quot;pt&quot;</span>,
<span class="hljs-meta">... </span>)`}}),{c(){b(s.$$.fragment)},l(o){E(s.$$.fragment,o)},m(o,m){k(s,o,m),d=!0},p:ze,i(o){d||(j(s.$$.fragment,o),d=!0)},o(o){w(s.$$.fragment,o),d=!1},d(o){y(s,o)}}}function Wp(z){let s,d;return s=new ge({props:{$$slots:{default:[Vp]},$$scope:{ctx:z}}}),{c(){b(s.$$.fragment)},l(o){E(s.$$.fragment,o)},m(o,m){k(s,o,m),d=!0},p(o,m){const h={};m&2&&(h.$$scope={dirty:m,ctx:o}),s.$set(h)},i(o){d||(j(s.$$.fragment,o),d=!0)},o(o){w(s.$$.fragment,o),d=!1},d(o){y(s,o)}}}function Qp(z){let s,d;return s=new U({props:{code:`tf_batch = tokenizer(
    ["We are very happy to show you the \u{1F917} Transformers library.", "We hope you don't hate it."],
    padding=True,
    truncation=True,
    max_length=512,
    return_tensors="tf",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tf_batch = tokenizer(
<span class="hljs-meta">... </span>    [<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>, <span class="hljs-string">&quot;We hope you don&#x27;t hate it.&quot;</span>],
<span class="hljs-meta">... </span>    padding=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    truncation=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    max_length=<span class="hljs-number">512</span>,
<span class="hljs-meta">... </span>    return_tensors=<span class="hljs-string">&quot;tf&quot;</span>,
<span class="hljs-meta">... </span>)`}}),{c(){b(s.$$.fragment)},l(o){E(s.$$.fragment,o)},m(o,m){k(s,o,m),d=!0},p:ze,i(o){d||(j(s.$$.fragment,o),d=!0)},o(o){w(s.$$.fragment,o),d=!1},d(o){y(s,o)}}}function Yp(z){let s,d;return s=new ge({props:{$$slots:{default:[Qp]},$$scope:{ctx:z}}}),{c(){b(s.$$.fragment)},l(o){E(s.$$.fragment,o)},m(o,m){k(s,o,m),d=!0},p(o,m){const h={};m&2&&(h.$$scope={dirty:m,ctx:o}),s.$set(h)},i(o){d||(j(s.$$.fragment,o),d=!0)},o(o){w(s.$$.fragment,o),d=!1},d(o){y(s,o)}}}function Bp(z){let s,d,o,m,h,g,C,F;return{c(){s=l("p"),d=r("Ve el "),o=l("a"),m=r("task summary"),h=r(" para revisar qu\xE9 clase del "),g=l("code"),C=r("AutoModel"),F=r(" deber\xEDas usar para cada tarea."),this.h()},l(x){s=i(x,"P",{});var P=p(s);d=n(P,"Ve el "),o=i(P,"A",{href:!0});var D=p(o);m=n(D,"task summary"),D.forEach(t),h=n(P," para revisar qu\xE9 clase del "),g=i(P,"CODE",{});var A=p(g);C=n(A,"AutoModel"),A.forEach(t),F=n(P," deber\xEDas usar para cada tarea."),P.forEach(t),this.h()},h(){T(o,"href","./task_summary")},m(x,P){u(x,s,P),a(s,d),a(s,o),a(o,m),a(s,h),a(s,g),a(g,C),a(s,F)},d(x){x&&t(s)}}}function Kp(z){let s,d,o,m,h,g,C,F,x,P,D,A,S,H,L,N,_,M,W,R,Y,Q,ae,B,G,ee,K,J,me,oe,$e,re,te,ne,he,q,O,le;return N=new U({props:{code:`from transformers import AutoModelForSequenceClassification

model_name = "nlptown/bert-base-multilingual-uncased-sentiment"
pt_model = AutoModelForSequenceClassification.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(model_name)`}}),M=new $t({props:{$$slots:{default:[Bp]},$$scope:{ctx:z}}}),ee=new U({props:{code:"pt_outputs = pt_model(**pt_batch)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>pt_outputs = pt_model(**pt_batch)'}}),O=new U({props:{code:`from torch import nn

pt_predictions = nn.functional.softmax(pt_outputs.logits, dim=-1)
print(pt_predictions)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn

<span class="hljs-meta">&gt;&gt;&gt; </span>pt_predictions = nn.functional.softmax(pt_outputs.logits, dim=-<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(pt_predictions)
tensor([[<span class="hljs-number">0.0021</span>, <span class="hljs-number">0.0018</span>, <span class="hljs-number">0.0115</span>, <span class="hljs-number">0.2121</span>, <span class="hljs-number">0.7725</span>],
        [<span class="hljs-number">0.2084</span>, <span class="hljs-number">0.1826</span>, <span class="hljs-number">0.1969</span>, <span class="hljs-number">0.1755</span>, <span class="hljs-number">0.2365</span>]], grad_fn=&lt;SoftmaxBackward0&gt;)`}}),{c(){s=l("p"),d=r("\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),o=l("code"),m=r("AutoModel"),h=r(" como cargar\xEDas un "),g=l("code"),C=r("AutoTokenizer"),F=r(". La \xFAnica diferencia es seleccionar el "),x=l("code"),P=r("AutoModel"),D=r(" correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),A=l("code"),S=r("AutoModelForSequenceClassification"),H=r(":"),L=f(),b(N.$$.fragment),_=f(),b(M.$$.fragment),W=f(),R=l("p"),Y=r("Ahora puedes pasar tu lote (batch) preprocesado de inputs directamente al modelo. Solo tienes que desempacar el diccionario a\xF1adiendo "),Q=l("code"),ae=r("**"),B=r(":"),G=f(),b(ee.$$.fragment),K=f(),J=l("p"),me=r("El modelo producir\xE1 las activaciones finales en el atributo "),oe=l("code"),$e=r("logits"),re=r(". Aplica la funci\xF3n softmax a "),te=l("code"),ne=r("logits"),he=r(" para obtener las probabilidades:"),q=f(),b(O.$$.fragment)},l(v){s=i(v,"P",{});var I=p(s);d=n(I,"\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),o=i(I,"CODE",{});var pe=p(o);m=n(pe,"AutoModel"),pe.forEach(t),h=n(I," como cargar\xEDas un "),g=i(I,"CODE",{});var xe=p(g);C=n(xe,"AutoTokenizer"),xe.forEach(t),F=n(I,". La \xFAnica diferencia es seleccionar el "),x=i(I,"CODE",{});var fe=p(x);P=n(fe,"AutoModel"),fe.forEach(t),D=n(I," correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),A=i(I,"CODE",{});var ve=p(A);S=n(ve,"AutoModelForSequenceClassification"),ve.forEach(t),H=n(I,":"),I.forEach(t),L=$(v),E(N.$$.fragment,v),_=$(v),E(M.$$.fragment,v),W=$(v),R=i(v,"P",{});var ie=p(R);Y=n(ie,"Ahora puedes pasar tu lote (batch) preprocesado de inputs directamente al modelo. Solo tienes que desempacar el diccionario a\xF1adiendo "),Q=i(ie,"CODE",{});var Ie=p(Q);ae=n(Ie,"**"),Ie.forEach(t),B=n(ie,":"),ie.forEach(t),G=$(v),E(ee.$$.fragment,v),K=$(v),J=i(v,"P",{});var be=p(J);me=n(be,"El modelo producir\xE1 las activaciones finales en el atributo "),oe=i(be,"CODE",{});var Va=p(oe);$e=n(Va,"logits"),Va.forEach(t),re=n(be,". Aplica la funci\xF3n softmax a "),te=i(be,"CODE",{});var $a=p(te);ne=n($a,"logits"),$a.forEach(t),he=n(be," para obtener las probabilidades:"),be.forEach(t),q=$(v),E(O.$$.fragment,v)},m(v,I){u(v,s,I),a(s,d),a(s,o),a(o,m),a(s,h),a(s,g),a(g,C),a(s,F),a(s,x),a(x,P),a(s,D),a(s,A),a(A,S),a(s,H),u(v,L,I),k(N,v,I),u(v,_,I),k(M,v,I),u(v,W,I),u(v,R,I),a(R,Y),a(R,Q),a(Q,ae),a(R,B),u(v,G,I),k(ee,v,I),u(v,K,I),u(v,J,I),a(J,me),a(J,oe),a(oe,$e),a(J,re),a(J,te),a(te,ne),a(J,he),u(v,q,I),k(O,v,I),le=!0},p(v,I){const pe={};I&2&&(pe.$$scope={dirty:I,ctx:v}),M.$set(pe)},i(v){le||(j(N.$$.fragment,v),j(M.$$.fragment,v),j(ee.$$.fragment,v),j(O.$$.fragment,v),le=!0)},o(v){w(N.$$.fragment,v),w(M.$$.fragment,v),w(ee.$$.fragment,v),w(O.$$.fragment,v),le=!1},d(v){v&&t(s),v&&t(L),y(N,v),v&&t(_),y(M,v),v&&t(W),v&&t(R),v&&t(G),y(ee,v),v&&t(K),v&&t(J),v&&t(q),y(O,v)}}}function Jp(z){let s,d;return s=new ge({props:{$$slots:{default:[Kp]},$$scope:{ctx:z}}}),{c(){b(s.$$.fragment)},l(o){E(s.$$.fragment,o)},m(o,m){k(s,o,m),d=!0},p(o,m){const h={};m&2&&(h.$$scope={dirty:m,ctx:o}),s.$set(h)},i(o){d||(j(s.$$.fragment,o),d=!0)},o(o){w(s.$$.fragment,o),d=!1},d(o){y(s,o)}}}function Zp(z){let s;return{c(){s=r("Ve el [task summary](./task_summary) para revisar qu\xE9 clase del `AutoModel`\n  deber\xEDas usar para cada tarea.")},l(d){s=n(d,"Ve el [task summary](./task_summary) para revisar qu\xE9 clase del `AutoModel`\n  deber\xEDas usar para cada tarea.")},m(d,o){u(d,s,o)},d(d){d&&t(s)}}}function Xp(z){let s,d,o,m,h,g,C,F,x,P,D,A,S,H,L,N,_,M,W,R,Y,Q,ae,B,G,ee,K,J,me,oe,$e,re,te,ne,he;return N=new U({props:{code:`from transformers import TFAutoModelForSequenceClassification

model_name = "nlptown/bert-base-multilingual-uncased-sentiment"
tf_model = TFAutoModelForSequenceClassification.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(model_name)`}}),M=new $t({props:{$$slots:{default:[Zp]},$$scope:{ctx:z}}}),ae=new U({props:{code:"tf_outputs = tf_model(tf_batch)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_outputs = tf_model(tf_batch)'}}),ne=new U({props:{code:`import tensorflow as tf

tf_predictions = tf.nn.softmax(tf_outputs.logits, axis=-1)
print(tf.math.round(tf_predictions * 10**4) / 10**4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

<span class="hljs-meta">&gt;&gt;&gt; </span>tf_predictions = tf.nn.softmax(tf_outputs.logits, axis=-<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(tf.math.<span class="hljs-built_in">round</span>(tf_predictions * <span class="hljs-number">10</span>**<span class="hljs-number">4</span>) / <span class="hljs-number">10</span>**<span class="hljs-number">4</span>)
tf.Tensor(
[[<span class="hljs-number">0.0021</span> <span class="hljs-number">0.0018</span> <span class="hljs-number">0.0116</span> <span class="hljs-number">0.2121</span> <span class="hljs-number">0.7725</span>]
 [<span class="hljs-number">0.2084</span> <span class="hljs-number">0.1826</span> <span class="hljs-number">0.1969</span> <span class="hljs-number">0.1755</span>  <span class="hljs-number">0.2365</span>]], shape=(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>), dtype=float32)`}}),{c(){s=l("p"),d=r("\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),o=l("code"),m=r("TFAutoModel"),h=r(" como cargar\xEDas un "),g=l("code"),C=r("AutoTokenizer"),F=r(". La \xFAnica diferencia es seleccionar el "),x=l("code"),P=r("TFAutoModel"),D=r(" correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),A=l("code"),S=r("TFAutoModelForSequenceClassification"),H=r(":"),L=f(),b(N.$$.fragment),_=f(),b(M.$$.fragment),W=f(),R=l("p"),Y=r("Ahora puedes pasar tu lote preprocesado de inputs directamente al modelo pasando las llaves del diccionario directamente a los tensores:"),Q=f(),b(ae.$$.fragment),B=f(),G=l("p"),ee=r("El modelo producir\xE1 las activaciones finales en el atributo "),K=l("code"),J=r("logits"),me=r(". Aplica la funci\xF3n softmax a "),oe=l("code"),$e=r("logits"),re=r(" para obtener las probabilidades:"),te=f(),b(ne.$$.fragment)},l(q){s=i(q,"P",{});var O=p(s);d=n(O,"\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),o=i(O,"CODE",{});var le=p(o);m=n(le,"TFAutoModel"),le.forEach(t),h=n(O," como cargar\xEDas un "),g=i(O,"CODE",{});var v=p(g);C=n(v,"AutoTokenizer"),v.forEach(t),F=n(O,". La \xFAnica diferencia es seleccionar el "),x=i(O,"CODE",{});var I=p(x);P=n(I,"TFAutoModel"),I.forEach(t),D=n(O," correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),A=i(O,"CODE",{});var pe=p(A);S=n(pe,"TFAutoModelForSequenceClassification"),pe.forEach(t),H=n(O,":"),O.forEach(t),L=$(q),E(N.$$.fragment,q),_=$(q),E(M.$$.fragment,q),W=$(q),R=i(q,"P",{});var xe=p(R);Y=n(xe,"Ahora puedes pasar tu lote preprocesado de inputs directamente al modelo pasando las llaves del diccionario directamente a los tensores:"),xe.forEach(t),Q=$(q),E(ae.$$.fragment,q),B=$(q),G=i(q,"P",{});var fe=p(G);ee=n(fe,"El modelo producir\xE1 las activaciones finales en el atributo "),K=i(fe,"CODE",{});var ve=p(K);J=n(ve,"logits"),ve.forEach(t),me=n(fe,". Aplica la funci\xF3n softmax a "),oe=i(fe,"CODE",{});var ie=p(oe);$e=n(ie,"logits"),ie.forEach(t),re=n(fe," para obtener las probabilidades:"),fe.forEach(t),te=$(q),E(ne.$$.fragment,q)},m(q,O){u(q,s,O),a(s,d),a(s,o),a(o,m),a(s,h),a(s,g),a(g,C),a(s,F),a(s,x),a(x,P),a(s,D),a(s,A),a(A,S),a(s,H),u(q,L,O),k(N,q,O),u(q,_,O),k(M,q,O),u(q,W,O),u(q,R,O),a(R,Y),u(q,Q,O),k(ae,q,O),u(q,B,O),u(q,G,O),a(G,ee),a(G,K),a(K,J),a(G,me),a(G,oe),a(oe,$e),a(G,re),u(q,te,O),k(ne,q,O),he=!0},p(q,O){const le={};O&2&&(le.$$scope={dirty:O,ctx:q}),M.$set(le)},i(q){he||(j(N.$$.fragment,q),j(M.$$.fragment,q),j(ae.$$.fragment,q),j(ne.$$.fragment,q),he=!0)},o(q){w(N.$$.fragment,q),w(M.$$.fragment,q),w(ae.$$.fragment,q),w(ne.$$.fragment,q),he=!1},d(q){q&&t(s),q&&t(L),y(N,q),q&&t(_),y(M,q),q&&t(W),q&&t(R),q&&t(Q),y(ae,q),q&&t(B),q&&t(G),q&&t(te),y(ne,q)}}}function ec(z){let s,d;return s=new ge({props:{$$slots:{default:[Xp]},$$scope:{ctx:z}}}),{c(){b(s.$$.fragment)},l(o){E(s.$$.fragment,o)},m(o,m){k(s,o,m),d=!0},p(o,m){const h={};m&2&&(h.$$scope={dirty:m,ctx:o}),s.$set(h)},i(o){d||(j(s.$$.fragment,o),d=!0)},o(o){w(s.$$.fragment,o),d=!1},d(o){y(s,o)}}}function ac(z){let s,d,o,m,h;return{c(){s=l("p"),d=r("Todos los modelos de \u{1F917} Transformers (PyTorch o TensorFlow) producir\xE1n los tensores "),o=l("em"),m=r("antes"),h=r(` de la funci\xF3n de activaci\xF3n
final (como softmax) porque la funci\xF3n de activaci\xF3n final es com\xFAnmente fusionada con la p\xE9rdida.`)},l(g){s=i(g,"P",{});var C=p(s);d=n(C,"Todos los modelos de \u{1F917} Transformers (PyTorch o TensorFlow) producir\xE1n los tensores "),o=i(C,"EM",{});var F=p(o);m=n(F,"antes"),F.forEach(t),h=n(C,` de la funci\xF3n de activaci\xF3n
final (como softmax) porque la funci\xF3n de activaci\xF3n final es com\xFAnmente fusionada con la p\xE9rdida.`),C.forEach(t)},m(g,C){u(g,s,C),a(s,d),a(s,o),a(o,m),a(s,h)},d(g){g&&t(s)}}}function tc(z){let s,d,o,m,h;return{c(){s=l("p"),d=r(`Los outputs del modelo de \u{1F917} Transformers son dataclasses especiales por lo que sus atributos pueden ser completados en un IDE.
Los outputs del modelo tambi\xE9n se comportan como tuplas o diccionarios (e.g., puedes indexar con un entero, un slice o una cadena) en cuyo caso los atributos que son `),o=l("code"),m=r("None"),h=r(" son ignorados.")},l(g){s=i(g,"P",{});var C=p(s);d=n(C,`Los outputs del modelo de \u{1F917} Transformers son dataclasses especiales por lo que sus atributos pueden ser completados en un IDE.
Los outputs del modelo tambi\xE9n se comportan como tuplas o diccionarios (e.g., puedes indexar con un entero, un slice o una cadena) en cuyo caso los atributos que son `),o=i(C,"CODE",{});var F=p(o);m=n(F,"None"),F.forEach(t),h=n(C," son ignorados."),C.forEach(t)},m(g,C){u(g,s,C),a(s,d),a(s,o),a(o,m),a(s,h)},d(g){g&&t(s)}}}function sc(z){let s,d,o,m,h,g,C,F,x,P,D,A,S,H,L,N;return C=new U({props:{code:`pt_save_directory = "./pt_save_pretrained"
tokenizer.save_pretrained(pt_save_directory)
pt_model.save_pretrained(pt_save_directory)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pt_save_directory = <span class="hljs-string">&quot;./pt_save_pretrained&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(pt_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model.save_pretrained(pt_save_directory)`}}),L=new U({props:{code:'pt_model = AutoModelForSequenceClassification.from_pretrained("./pt_save_pretrained")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;./pt_save_pretrained&quot;</span>)'}}),{c(){s=l("p"),d=r("Una vez que se haya hecho fine-tuning a tu modelo puedes guardarlo con tu tokenizador usando "),o=l("code"),m=r("PreTrainedModel.save_pretrained()"),h=r(":"),g=f(),b(C.$$.fragment),F=f(),x=l("p"),P=r("Cuando quieras usar el modelo otra vez c\xE1rgalo con "),D=l("code"),A=r("PreTrainedModel.from_pretrained()"),S=r(":"),H=f(),b(L.$$.fragment)},l(_){s=i(_,"P",{});var M=p(s);d=n(M,"Una vez que se haya hecho fine-tuning a tu modelo puedes guardarlo con tu tokenizador usando "),o=i(M,"CODE",{});var W=p(o);m=n(W,"PreTrainedModel.save_pretrained()"),W.forEach(t),h=n(M,":"),M.forEach(t),g=$(_),E(C.$$.fragment,_),F=$(_),x=i(_,"P",{});var R=p(x);P=n(R,"Cuando quieras usar el modelo otra vez c\xE1rgalo con "),D=i(R,"CODE",{});var Y=p(D);A=n(Y,"PreTrainedModel.from_pretrained()"),Y.forEach(t),S=n(R,":"),R.forEach(t),H=$(_),E(L.$$.fragment,_)},m(_,M){u(_,s,M),a(s,d),a(s,o),a(o,m),a(s,h),u(_,g,M),k(C,_,M),u(_,F,M),u(_,x,M),a(x,P),a(x,D),a(D,A),a(x,S),u(_,H,M),k(L,_,M),N=!0},p:ze,i(_){N||(j(C.$$.fragment,_),j(L.$$.fragment,_),N=!0)},o(_){w(C.$$.fragment,_),w(L.$$.fragment,_),N=!1},d(_){_&&t(s),_&&t(g),y(C,_),_&&t(F),_&&t(x),_&&t(H),y(L,_)}}}function oc(z){let s,d;return s=new ge({props:{$$slots:{default:[sc]},$$scope:{ctx:z}}}),{c(){b(s.$$.fragment)},l(o){E(s.$$.fragment,o)},m(o,m){k(s,o,m),d=!0},p(o,m){const h={};m&2&&(h.$$scope={dirty:m,ctx:o}),s.$set(h)},i(o){d||(j(s.$$.fragment,o),d=!0)},o(o){w(s.$$.fragment,o),d=!1},d(o){y(s,o)}}}function rc(z){let s,d,o,m,h,g,C,F,x,P,D,A,S,H,L,N;return C=new U({props:{code:`tf_save_directory = "./tf_save_pretrained"
tokenizer.save_pretrained(tf_save_directory)
tf_model.save_pretrained(tf_save_directory)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tf_save_directory = <span class="hljs-string">&quot;./tf_save_pretrained&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(tf_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model.save_pretrained(tf_save_directory)`}}),L=new U({props:{code:'tf_model = TFAutoModelForSequenceClassification.from_pretrained("./tf_save_pretrained")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;./tf_save_pretrained&quot;</span>)'}}),{c(){s=l("p"),d=r("Una vez que se haya hecho fine-tuning a tu modelo puedes guardarlo con tu tokenizador usando "),o=l("code"),m=r("TFPreTrainedModel.save_pretrained()"),h=r(":"),g=f(),b(C.$$.fragment),F=f(),x=l("p"),P=r("Cuando quieras usar el modelo otra vez c\xE1rgalo con "),D=l("code"),A=r("TFPreTrainedModel.from_pretrained()"),S=r(":"),H=f(),b(L.$$.fragment)},l(_){s=i(_,"P",{});var M=p(s);d=n(M,"Una vez que se haya hecho fine-tuning a tu modelo puedes guardarlo con tu tokenizador usando "),o=i(M,"CODE",{});var W=p(o);m=n(W,"TFPreTrainedModel.save_pretrained()"),W.forEach(t),h=n(M,":"),M.forEach(t),g=$(_),E(C.$$.fragment,_),F=$(_),x=i(_,"P",{});var R=p(x);P=n(R,"Cuando quieras usar el modelo otra vez c\xE1rgalo con "),D=i(R,"CODE",{});var Y=p(D);A=n(Y,"TFPreTrainedModel.from_pretrained()"),Y.forEach(t),S=n(R,":"),R.forEach(t),H=$(_),E(L.$$.fragment,_)},m(_,M){u(_,s,M),a(s,d),a(s,o),a(o,m),a(s,h),u(_,g,M),k(C,_,M),u(_,F,M),u(_,x,M),a(x,P),a(x,D),a(D,A),a(x,S),u(_,H,M),k(L,_,M),N=!0},p:ze,i(_){N||(j(C.$$.fragment,_),j(L.$$.fragment,_),N=!0)},o(_){w(C.$$.fragment,_),w(L.$$.fragment,_),N=!1},d(_){_&&t(s),_&&t(g),y(C,_),_&&t(F),_&&t(x),_&&t(H),y(L,_)}}}function nc(z){let s,d;return s=new ge({props:{$$slots:{default:[rc]},$$scope:{ctx:z}}}),{c(){b(s.$$.fragment)},l(o){E(s.$$.fragment,o)},m(o,m){k(s,o,m),d=!0},p(o,m){const h={};m&2&&(h.$$scope={dirty:m,ctx:o}),s.$set(h)},i(o){d||(j(s.$$.fragment,o),d=!0)},o(o){w(s.$$.fragment,o),d=!1},d(o){y(s,o)}}}function lc(z){let s,d;return s=new U({props:{code:`from transformers import AutoModel

tokenizer = AutoTokenizer.from_pretrained(tf_save_directory)
pt_model = AutoModelForSequenceClassification.from_pretrained(tf_save_directory, from_tf=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(tf_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(tf_save_directory, from_tf=<span class="hljs-literal">True</span>)`}}),{c(){b(s.$$.fragment)},l(o){E(s.$$.fragment,o)},m(o,m){k(s,o,m),d=!0},p:ze,i(o){d||(j(s.$$.fragment,o),d=!0)},o(o){w(s.$$.fragment,o),d=!1},d(o){y(s,o)}}}function ic(z){let s,d;return s=new ge({props:{$$slots:{default:[lc]},$$scope:{ctx:z}}}),{c(){b(s.$$.fragment)},l(o){E(s.$$.fragment,o)},m(o,m){k(s,o,m),d=!0},p(o,m){const h={};m&2&&(h.$$scope={dirty:m,ctx:o}),s.$set(h)},i(o){d||(j(s.$$.fragment,o),d=!0)},o(o){w(s.$$.fragment,o),d=!1},d(o){y(s,o)}}}function pc(z){let s,d;return s=new U({props:{code:`from transformers import TFAutoModel

tokenizer = AutoTokenizer.from_pretrained(pt_save_directory)
tf_model = TFAutoModelForSequenceClassification.from_pretrained(pt_save_directory, from_pt=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(pt_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(pt_save_directory, from_pt=<span class="hljs-literal">True</span>)`}}),{c(){b(s.$$.fragment)},l(o){E(s.$$.fragment,o)},m(o,m){k(s,o,m),d=!0},p:ze,i(o){d||(j(s.$$.fragment,o),d=!0)},o(o){w(s.$$.fragment,o),d=!1},d(o){y(s,o)}}}function cc(z){let s,d;return s=new ge({props:{$$slots:{default:[pc]},$$scope:{ctx:z}}}),{c(){b(s.$$.fragment)},l(o){E(s.$$.fragment,o)},m(o,m){k(s,o,m),d=!0},p(o,m){const h={};m&2&&(h.$$scope={dirty:m,ctx:o}),s.$set(h)},i(o){d||(j(s.$$.fragment,o),d=!0)},o(o){w(s.$$.fragment,o),d=!1},d(o){y(s,o)}}}function uc(z){let s,d,o,m,h,g,C,F,x,P,D,A,S,H,L,N,_,M,W,R,Y,Q,ae,B,G,ee,K,J,me,oe,$e,re,te,ne,he,q,O,le,v,I,pe,xe,fe,ve,ie,Ie,be,Va,$a,V,ht,Ko,Jo,_t,Zo,Xo,gt,er,ar,vt,tr,sr,bt,or,rr,Et,nr,lr,kt,ir,pr,jt,cr,As,ha,wt,ur,dr,Ts,Ee,yt,mr,fr,qt,$r,hr,At,_r,Cs,_a,Tt,gr,vr,zs,Ne,Ct,br,Er,zt,kr,xs,Re,Ps,Pe,Ue,xt,ga,jr,Pt,wr,Ms,He,yr,Mt,qr,Ar,Ss,Wa,Tr,Fs,Ge,Ds,Ve,Cr,St,zr,xr,Os,va,Ls,ke,Pr,ba,Mr,Sr,Ft,Fr,Dr,Is,Ea,Ns,We,Or,Dt,Lr,Ir,Rs,je,Nr,Ot,Rr,Ur,ka,Hr,Gr,Us,ja,Hs,_e,Vr,Lt,Wr,Qr,It,Yr,Br,Nt,Kr,Jr,Gs,wa,Vs,ya,Ws,Qe,Zr,Rt,Xr,en,Qs,qa,Ys,Ye,an,Ut,tn,sn,Bs,Aa,Ks,Be,on,Qa,rn,nn,Js,Me,Ke,Ht,Ta,ln,Gt,pn,Zs,ce,cn,Vt,un,dn,Ca,mn,fn,Wt,$n,hn,za,_n,gn,Xs,xa,eo,Je,ao,we,vn,Qt,bn,En,Yt,kn,jn,to,Pa,so,ye,wn,Ya,yn,qn,Ba,An,Tn,oo,Se,Ze,Bt,Ma,Cn,Kt,zn,ro,Sa,no,Z,xn,Jt,Pn,Mn,Zt,Sn,Fn,Xt,Dn,On,Ka,Ln,In,es,Nn,Rn,as,Un,Hn,lo,qe,Gn,ts,Vn,Wn,ss,Qn,Yn,io,Fe,Xe,os,Fa,Bn,rs,Kn,po,Ae,Jn,ns,Zn,Xn,Ja,el,al,co,ea,tl,ls,sl,ol,uo,Da,mo,aa,rl,is,nl,ll,fo,Za,il,$o,Oa,ho,Xa,pl,_o,ta,et,at,cl,ul,dl,tt,st,ml,fl,go,sa,$l,ps,hl,_l,vo,oa,bo,ra,gl,ot,vl,bl,Eo,De,na,cs,La,El,us,kl,ko,la,jo,ia,wo,X,jl,Ia,ds,wl,yl,Na,ms,ql,Al,fs,Tl,Cl,$s,zl,xl,Ra,Pl,Ml,rt,Sl,Fl,yo,pa,qo,Oe,ca,hs,Ua,Dl,_s,Ol,Ao,ua,To,Te,Ll,gs,Il,Nl,vs,Rl,Ul,Co,da,zo;return g=new fa({}),D=new Sp({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Mixed",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/es/quicktour.ipynb"},{label:"PyTorch",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/es/pytorch/quicktour.ipynb"},{label:"TensorFlow",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/es/tensorflow/quicktour.ipynb"},{label:"Mixed",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/es/quicktour.ipynb"},{label:"PyTorch",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/es/pytorch/quicktour.ipynb"},{label:"TensorFlow",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/es/tensorflow/quicktour.ipynb"}]}}),Q=new $t({props:{$$slots:{default:[Fp]},$$scope:{ctx:z}}}),K=new fa({}),O=new Tp({props:{id:"tiZFewofSLM"}}),Re=new $t({props:{$$slots:{default:[Dp]},$$scope:{ctx:z}}}),ga=new fa({}),Ge=new ft({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Np],pytorch:[Lp]},$$scope:{ctx:z}}}),va=new U({props:{code:`from transformers import pipeline

clasificador = pipeline('sentiment-analysis', model="pysentimiento/robertuito-sentiment-analysis")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>clasificador = pipeline(<span class="hljs-string">&#x27;sentiment-analysis&#x27;</span>, model=<span class="hljs-string">&quot;pysentimiento/robertuito-sentiment-analysis&quot;</span>)`}}),Ea=new U({props:{code:'clasificador("Estamos muy felices de mostrarte la biblioteca de \u{1F917} Transformers.")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>clasificador(<span class="hljs-string">&quot;Estamos muy felices de mostrarte la biblioteca de \u{1F917} Transformers.&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POS&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9916</span>}]`}}),ja=new U({props:{code:"pip install datasets",highlighted:"pip install datasets"}}),wa=new U({props:{code:`import torch
from transformers import pipeline

reconocedor_de_voz = pipeline("automatic-speech-recognition", model="jonatasgrosman/wav2vec2-large-xlsr-53-spanish", device=0)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>reconocedor_de_voz = pipeline(<span class="hljs-string">&quot;automatic-speech-recognition&quot;</span>, model=<span class="hljs-string">&quot;jonatasgrosman/wav2vec2-large-xlsr-53-spanish&quot;</span>, device=<span class="hljs-number">0</span>)`}}),ya=new U({props:{code:`from datasets import load_dataset, Audio

dataset = load_dataset("PolyAI/minds14", name="es-ES", split="train")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;es-ES&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)`}}),qa=new U({props:{code:'dataset = dataset.cast_column("audio", Audio(sampling_rate=reconocedor_de_voz.feature_extractor.sampling_rate))',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=reconocedor_de_voz.feature_extractor.sampling_rate))'}}),Aa=new U({props:{code:`resultado = reconocedor_de_voz(dataset[:4]["audio"])
print([d["text"] for d in resultado])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>resultado = reconocedor_de_voz(dataset[:<span class="hljs-number">4</span>][<span class="hljs-string">&quot;audio&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>([d[<span class="hljs-string">&quot;text&quot;</span>] <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> resultado])
[<span class="hljs-string">&#x27;ahora buenas e a ver  tengo un problema como vuestra aplicaci\xF3n resulta que que quiero hacer una transferencia bancaria a una cuenta conocida pero me da error la aplicaci\xF3n a ver que a ver que puede ser&#x27;</span>, <span class="hljs-string">&#x27;la aplicaci\xF3n no cargue salda de mi nueva cuenta&#x27;</span>, <span class="hljs-string">&#x27;hola tengo un problema con la aplicaci\xF3n no carga y y tampoco veo que carga el saldo de mi cuenta nueva dice que la aplicaci\xF3n est\xE1 siendo reparada y ahora no puedo aceder a mi cuenta no necesito inmediatamente&#x27;</span>, <span class="hljs-string">&#x27;ora buena la aplicaci\xF3n no se carga la viladad no carga el saldo de mi cuenta nueva dice que la villadenta siendo reparada y oro no puede hacer a mi cuenta&#x27;</span>]`}}),Ta=new fa({}),xa=new U({props:{code:'model_name = "nlptown/bert-base-multilingual-uncased-sentiment"',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>'}}),Je=new ft({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Gp],pytorch:[Up]},$$scope:{ctx:z}}}),Pa=new U({props:{code:`classifier = pipeline("sentiment-analysis", model=model, tokenizer=tokenizer)
classifier("Nous sommes tr\xE8s heureux de vous pr\xE9senter la biblioth\xE8que \u{1F917} Transformers.")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(<span class="hljs-string">&quot;sentiment-analysis&quot;</span>, model=model, tokenizer=tokenizer)
<span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;Nous sommes tr\xE8s heureux de vous pr\xE9senter la biblioth\xE8que \u{1F917} Transformers.&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;5 stars&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.7273</span>}]`}}),Ma=new fa({}),Sa=new Tp({props:{id:"AhChOFRegn4"}}),Fa=new fa({}),Da=new U({props:{code:`from transformers import AutoTokenizer

nombre_del_modelo = "nlptown/bert-base-multilingual-uncased-sentiment"
tokenizer = AutoTokenizer.from_pretrained(nombre_del_modelo)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>nombre_del_modelo = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(nombre_del_modelo)`}}),Oa=new U({props:{code:`encoding = tokenizer("Estamos muy felices de mostrarte la biblioteca de \u{1F917} Transformers.")
print(encoding)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>encoding = tokenizer(<span class="hljs-string">&quot;Estamos muy felices de mostrarte la biblioteca de \u{1F917} Transformers.&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoding)
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: [<span class="hljs-number">101</span>, <span class="hljs-number">10602</span>, <span class="hljs-number">14000</span>, <span class="hljs-number">13653</span>, <span class="hljs-number">43353</span>, <span class="hljs-number">10107</span>, <span class="hljs-number">10102</span>, <span class="hljs-number">47201</span>, <span class="hljs-number">10218</span>, <span class="hljs-number">10106</span>, <span class="hljs-number">18283</span>, <span class="hljs-number">10102</span>, <span class="hljs-number">100</span>, <span class="hljs-number">58263</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>],
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]}`}}),oa=new ft({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Yp],pytorch:[Wp]},$$scope:{ctx:z}}}),La=new fa({}),la=new ft({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[ec],pytorch:[Jp]},$$scope:{ctx:z}}}),ia=new $t({props:{$$slots:{default:[ac]},$$scope:{ctx:z}}}),pa=new $t({props:{$$slots:{default:[tc]},$$scope:{ctx:z}}}),Ua=new fa({}),ua=new ft({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[nc],pytorch:[oc]},$$scope:{ctx:z}}}),da=new ft({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[cc],pytorch:[ic]},$$scope:{ctx:z}}}),{c(){s=l("meta"),d=f(),o=l("h1"),m=l("a"),h=l("span"),b(g.$$.fragment),C=f(),F=l("span"),x=r("Quick tour"),P=f(),b(D.$$.fragment),A=f(),S=l("p"),H=r("\xA1Entra en marcha con los \u{1F917} Transformers! Comienza usando "),L=l("code"),N=r("pipeline()"),_=r(" para una inferencia veloz, carga un modelo preentrenado y un tokenizador con una "),M=l("a"),W=r("AutoClass"),R=r(" para resolver tu tarea de texto, visi\xF3n o audio."),Y=f(),b(Q.$$.fragment),ae=f(),B=l("h2"),G=l("a"),ee=l("span"),b(K.$$.fragment),J=f(),me=l("span"),oe=r("Pipeline"),$e=f(),re=l("p"),te=l("code"),ne=r("pipeline()"),he=r(" es la forma m\xE1s f\xE1cil de usar un modelo preentrenado para una tarea dada."),q=f(),b(O.$$.fragment),le=f(),v=l("p"),I=r("El "),pe=l("code"),xe=r("pipeline()"),fe=r(" soporta muchas tareas comunes listas para usar:"),ve=f(),ie=l("p"),Ie=l("strong"),be=r("Texto"),Va=r(":"),$a=f(),V=l("ul"),ht=l("li"),Ko=r("An\xE1lisis de Sentimiento (Sentiment Analysis, en ingl\xE9s): clasifica la polaridad de un texto dado."),Jo=f(),_t=l("li"),Zo=r("Generaci\xF3n de Texto (Text Generation, en ingl\xE9s): genera texto a partir de un input dado."),Xo=f(),gt=l("li"),er=r("Reconocimiento de Entidades (Name Entity Recognition o NER, en ingl\xE9s): etiqueta cada palabra con la entidad que representa (persona, fecha, ubicaci\xF3n, etc.)."),ar=f(),vt=l("li"),tr=r("Responder Preguntas (Question answering, en ingl\xE9s): extrae la respuesta del contexto dado un contexto y una pregunta."),sr=f(),bt=l("li"),or=r("Rellenar M\xE1scara (Fill-mask, en ingl\xE9s): rellena el espacio faltante dado un texto con palabras enmascaradas."),rr=f(),Et=l("li"),nr=r("Resumir (Summarization, en ingl\xE9s): genera un resumen de una secuencia larga de texto o un documento."),lr=f(),kt=l("li"),ir=r("Traducci\xF3n (Translation, en ingl\xE9s): traduce un texto a otro idioma."),pr=f(),jt=l("li"),cr=r("Extracci\xF3n de Caracter\xEDsticas (Feature Extraction, en ingl\xE9s): crea una representaci\xF3n tensorial del texto."),As=f(),ha=l("p"),wt=l("strong"),ur=r("Imagen"),dr=r(":"),Ts=f(),Ee=l("ul"),yt=l("li"),mr=r("Clasificaci\xF3n de Im\xE1genes (Image Classification, en ingl\xE9s): clasifica una imagen."),fr=f(),qt=l("li"),$r=r("Segmentaci\xF3n de Im\xE1genes (Image Segmentation, en ingl\xE9s): clasifica cada pixel de una imagen."),hr=f(),At=l("li"),_r=r("Detecci\xF3n de Objetos (Object Detection, en ingl\xE9s): detecta objetos dentro de una imagen."),Cs=f(),_a=l("p"),Tt=l("strong"),gr=r("Audio"),vr=r(":"),zs=f(),Ne=l("ul"),Ct=l("li"),br=r("Clasificaci\xF3n de Audios (Audio Classification, en ingl\xE9s): asigna una etiqueta a un segmento de audio."),Er=f(),zt=l("li"),kr=r("Reconocimiento de Voz Autom\xE1tico (Automatic Speech Recognition o ASR, en ingl\xE9s): transcribe datos de audio a un texto."),xs=f(),b(Re.$$.fragment),Ps=f(),Pe=l("h3"),Ue=l("a"),xt=l("span"),b(ga.$$.fragment),jr=f(),Pt=l("span"),wr=r("Uso del Pipeline"),Ms=f(),He=l("p"),yr=r("En el siguiente ejemplo, usar\xE1s el "),Mt=l("code"),qr=r("pipeline()"),Ar=r(" para an\xE1lisis de sentimiento."),Ss=f(),Wa=l("p"),Tr=r("Instala las siguientes dependencias si a\xFAn no lo has hecho:"),Fs=f(),b(Ge.$$.fragment),Ds=f(),Ve=l("p"),Cr=r("Importa "),St=l("code"),zr=r("pipeline()"),xr=r(" y especifica la tarea que deseas completar:"),Os=f(),b(va.$$.fragment),Ls=f(),ke=l("p"),Pr=r("El pipeline descarga y almacena en cach\xE9 el "),ba=l("a"),Mr=r("modelo preentrenado"),Sr=r(" y tokeniza para an\xE1lisis de sentimiento. Si no hubieramos elegido un modelo el pipeline habr\xEDa elegido uno por defecto. Ahora puedes usar "),Ft=l("code"),Fr=r("clasificador"),Dr=r(" en tu texto objetivo:"),Is=f(),b(Ea.$$.fragment),Ns=f(),We=l("p"),Or=r("Para m\xE1s de un enunciado, entrega una lista al "),Dt=l("code"),Lr=r("pipeline()"),Ir=r(" que devolver\xE1 una lista de diccionarios:"),Rs=f(),je=l("p"),Nr=r("El "),Ot=l("code"),Rr=r("pipeline()"),Ur=r(" tambi\xE9n puede iterar sobre un dataset entero. Comienza instalando la biblioteca "),ka=l("a"),Hr=r("\u{1F917} Datasets"),Gr=r(":"),Us=f(),b(ja.$$.fragment),Hs=f(),_e=l("p"),Vr=r("Crea un "),Lt=l("code"),Wr=r("pipeline()"),Qr=r(" con la tarea que deseas resolver y el modelo que quieres usar. Coloca el par\xE1metro "),It=l("code"),Yr=r("device"),Br=r(" a "),Nt=l("code"),Kr=r("0"),Jr=r(" para poner los tensores en un dispositivo CUDA:"),Gs=f(),b(wa.$$.fragment),Vs=f(),b(ya.$$.fragment),Ws=f(),Qe=l("p"),Zr=r("Debemos asegurarnos de que la frecuencia de muestreo del conjunto de datos coincide con la frecuencia de muestreo con la que se entren\xF3 "),Rt=l("code"),Xr=r("jonatasgrosman/wav2vec2-large-xlsr-53-spanish"),en=r("."),Qs=f(),b(qa.$$.fragment),Ys=f(),Ye=l("p"),an=r("Los archivos de audio se cargan y remuestrean autom\xE1ticamente cuando llamamos a la columna "),Ut=l("code"),tn=r('"audio"'),sn=r(`.
Extraigamos las matrices de onda cruda (raw waveform, en ingl\xE9s) de las primeras 4 muestras y pas\xE9mosla como una lista al pipeline:`),Bs=f(),b(Aa.$$.fragment),Ks=f(),Be=l("p"),on=r("Para un dataset m\xE1s grande, donde los inputs son de mayor tama\xF1o (como en habla/audio o visi\xF3n), querr\xE1s pasar un generador en lugar de una lista que carga todos los inputs en memoria. Ve la "),Qa=l("a"),rn=r("documentaci\xF3n del pipeline"),nn=r(" para m\xE1s informaci\xF3n."),Js=f(),Me=l("h3"),Ke=l("a"),Ht=l("span"),b(Ta.$$.fragment),ln=f(),Gt=l("span"),pn=r("Usa otro modelo y otro tokenizador en el pipeline"),Zs=f(),ce=l("p"),cn=r("El "),Vt=l("code"),un=r("pipeline()"),dn=r(" puede acomodarse a cualquier modelo del "),Ca=l("a"),mn=r("Model Hub"),fn=r(" haciendo m\xE1s f\xE1cil adaptar el "),Wt=l("code"),$n=r("pipeline()"),hn=r(" para otros casos de uso. Por ejemplo, si quisieras un modelo capaz de manejar texto en franc\xE9s, usa los tags en el Model Hub para filtrar entre los modelos apropiados. El resultado mejor filtrado devuelve un "),za=l("a"),_n=r("modelo BERT"),gn=r(" multilingual fine-tuned para el an\xE1lisis de sentimiento. Genial, \xA1vamos a usar este modelo!"),Xs=f(),b(xa.$$.fragment),eo=f(),b(Je.$$.fragment),ao=f(),we=l("p"),vn=r("Despu\xE9s puedes especificar el modelo y el tokenizador en el "),Qt=l("code"),bn=r("pipeline()"),En=r(", y aplicar el "),Yt=l("code"),kn=r("classifier"),jn=r(" en tu texto objetivo:"),to=f(),b(Pa.$$.fragment),so=f(),ye=l("p"),wn=r("Si no pudieras encontrar el modelo para tu caso respectivo de uso necesitar\xE1s ajustar un modelo preentrenado a tus datos. Mira nuestro "),Ya=l("a"),yn=r("tutorial de fine-tuning"),qn=r(" para aprender c\xF3mo. Finalmente, despu\xE9s de que has ajustado tu modelo preentrenado, \xA1por favor considera compartirlo (ve el tutorial "),Ba=l("a"),An=r("aqu\xED"),Tn=r(") con la comunidad en el Model Hub para democratizar el NLP! \u{1F917}"),oo=f(),Se=l("h2"),Ze=l("a"),Bt=l("span"),b(Ma.$$.fragment),Cn=f(),Kt=l("span"),zn=r("AutoClass"),ro=f(),b(Sa.$$.fragment),no=f(),Z=l("p"),xn=r("Debajo del cap\xF3, las clases "),Jt=l("code"),Pn=r("AutoModelForSequenceClassification"),Mn=r(" y "),Zt=l("code"),Sn=r("AutoTokenizer"),Fn=r(" trabajan juntas para dar poder al "),Xt=l("code"),Dn=r("pipeline()"),On=r(". Una "),Ka=l("a"),Ln=r("AutoClass"),In=r(" es un atajo que autom\xE1ticamente recupera la arquitectura de un modelo preentrenado con su nombre o el path. S\xF3lo necesitar\xE1s seleccionar el "),es=l("code"),Nn=r("AutoClass"),Rn=r(" apropiado para tu tarea y tu tokenizador asociado con "),as=l("code"),Un=r("AutoTokenizer"),Hn=r("."),lo=f(),qe=l("p"),Gn=r("Regresemos a nuestro ejemplo y veamos c\xF3mo puedes usar el "),ts=l("code"),Vn=r("AutoClass"),Wn=r(" para reproducir los resultados del "),ss=l("code"),Qn=r("pipeline()"),Yn=r("."),io=f(),Fe=l("h3"),Xe=l("a"),os=l("span"),b(Fa.$$.fragment),Bn=f(),rs=l("span"),Kn=r("AutoTokenizer"),po=f(),Ae=l("p"),Jn=r("Un tokenizador es responsable de procesar el texto a un formato que sea entendible para el modelo. Primero, el tokenizador separar\xE1 el texto en palabras llamadas "),ns=l("em"),Zn=r("tokens"),Xn=r(". Hay m\xFAltiples reglas que gobiernan el proceso de tokenizaci\xF3n incluyendo el c\xF3mo separar una palabra y en qu\xE9 nivel (aprende m\xE1s sobre tokenizaci\xF3n "),Ja=l("a"),el=r("aqu\xED"),al=r("). Lo m\xE1s importante es recordar que necesitar\xE1s instanciar el tokenizador con el mismo nombre del modelo para asegurar que est\xE1s usando las mismas reglas de tokenizaci\xF3n con las que el modelo fue preentrenado."),co=f(),ea=l("p"),tl=r("Carga un tokenizador con "),ls=l("code"),sl=r("AutoTokenizer"),ol=r(":"),uo=f(),b(Da.$$.fragment),mo=f(),aa=l("p"),rl=r("Despu\xE9s, el tokenizador convierte los tokens a n\xFAmeros para construir un tensor que servir\xE1 como input para el modelo. Esto es conocido como el "),is=l("em"),nl=r("vocabulario"),ll=r(" del modelo."),fo=f(),Za=l("p"),il=r("Pasa tu texto al tokenizador:"),$o=f(),b(Oa.$$.fragment),ho=f(),Xa=l("p"),pl=r("El tokenizador devolver\xE1 un diccionario conteniendo:"),_o=f(),ta=l("ul"),et=l("li"),at=l("a"),cl=r("input_ids"),ul=r(": representaciones num\xE9ricas de los tokens."),dl=f(),tt=l("li"),st=l("a"),ml=r("atttention_mask"),fl=r(": indica cu\xE1les tokens deben ser atendidos."),go=f(),sa=l("p"),$l=r("Como con el "),ps=l("code"),hl=r("pipeline()"),_l=r(", el tokenizador aceptar\xE1 una lista de inputs. Adem\xE1s, el tokenizador tambi\xE9n puede rellenar (pad, en ingl\xE9s) y truncar el texto para devolver un lote (batch, en ingl\xE9s) de longitud uniforme:"),vo=f(),b(oa.$$.fragment),bo=f(),ra=l("p"),gl=r("Lee el tutorial de "),ot=l("a"),vl=r("preprocessing"),bl=r(" para m\xE1s detalles acerca de la tokenizaci\xF3n."),Eo=f(),De=l("h3"),na=l("a"),cs=l("span"),b(La.$$.fragment),El=f(),us=l("span"),kl=r("AutoModel"),ko=f(),b(la.$$.fragment),jo=f(),b(ia.$$.fragment),wo=f(),X=l("p"),jl=r("Los modelos son "),Ia=l("a"),ds=l("code"),wl=r("torch.nn.Module"),yl=r(" o "),Na=l("a"),ms=l("code"),ql=r("tf.keras.Model"),Al=r(" est\xE1ndares as\xED que podr\xE1s usarlos en tu training loop usual. Sin embargo, para facilitar las cosas, \u{1F917} Transformers provee una clase "),fs=l("code"),Tl=r("Trainer"),Cl=r(" para PyTorch que a\xF1ade funcionalidades para entrenamiento distribuido, precici\xF3n mixta, y m\xE1s. Para TensorFlow, puedes usar el m\xE9todo "),$s=l("code"),zl=r("fit"),xl=r(" desde "),Ra=l("a"),Pl=r("Keras"),Ml=r(". Consulta el "),rt=l("a"),Sl=r("tutorial de entrenamiento"),Fl=r(" para m\xE1s detalles."),yo=f(),b(pa.$$.fragment),qo=f(),Oe=l("h3"),ca=l("a"),hs=l("span"),b(Ua.$$.fragment),Dl=f(),_s=l("span"),Ol=r("Guarda un modelo"),Ao=f(),b(ua.$$.fragment),To=f(),Te=l("p"),Ll=r("Una caracter\xEDstica particularmente interesante de \u{1F917} Transformers es la habilidad de guardar el modelo y cargarlo como un modelo de PyTorch o TensorFlow. El par\xE1metro "),gs=l("code"),Il=r("from_pt"),Nl=r(" o "),vs=l("code"),Rl=r("from_tf"),Ul=r(" puede convertir el modelo de un framework al otro:"),Co=f(),b(da.$$.fragment),this.h()},l(e){const c=Pp('[data-svelte="svelte-1phssyn"]',document.head);s=i(c,"META",{name:!0,content:!0}),c.forEach(t),d=$(e),o=i(e,"H1",{class:!0});var Ha=p(o);m=i(Ha,"A",{id:!0,class:!0,href:!0});var bs=p(m);h=i(bs,"SPAN",{});var Es=p(h);E(g.$$.fragment,Es),Es.forEach(t),bs.forEach(t),C=$(Ha),F=i(Ha,"SPAN",{});var ks=p(F);x=n(ks,"Quick tour"),ks.forEach(t),Ha.forEach(t),P=$(e),E(D.$$.fragment,e),A=$(e),S=i(e,"P",{});var Le=p(S);H=n(Le,"\xA1Entra en marcha con los \u{1F917} Transformers! Comienza usando "),L=i(Le,"CODE",{});var js=p(L);N=n(js,"pipeline()"),js.forEach(t),_=n(Le," para una inferencia veloz, carga un modelo preentrenado y un tokenizador con una "),M=i(Le,"A",{href:!0});var ws=p(M);W=n(ws,"AutoClass"),ws.forEach(t),R=n(Le," para resolver tu tarea de texto, visi\xF3n o audio."),Le.forEach(t),Y=$(e),E(Q.$$.fragment,e),ae=$(e),B=i(e,"H2",{class:!0});var Ga=p(B);G=i(Ga,"A",{id:!0,class:!0,href:!0});var ys=p(G);ee=i(ys,"SPAN",{});var qs=p(ee);E(K.$$.fragment,qs),qs.forEach(t),ys.forEach(t),J=$(Ga),me=i(Ga,"SPAN",{});var Bl=p(me);oe=n(Bl,"Pipeline"),Bl.forEach(t),Ga.forEach(t),$e=$(e),re=i(e,"P",{});var Hl=p(re);te=i(Hl,"CODE",{});var Kl=p(te);ne=n(Kl,"pipeline()"),Kl.forEach(t),he=n(Hl," es la forma m\xE1s f\xE1cil de usar un modelo preentrenado para una tarea dada."),Hl.forEach(t),q=$(e),E(O.$$.fragment,e),le=$(e),v=i(e,"P",{});var xo=p(v);I=n(xo,"El "),pe=i(xo,"CODE",{});var Jl=p(pe);xe=n(Jl,"pipeline()"),Jl.forEach(t),fe=n(xo," soporta muchas tareas comunes listas para usar:"),xo.forEach(t),ve=$(e),ie=i(e,"P",{});var Gl=p(ie);Ie=i(Gl,"STRONG",{});var Zl=p(Ie);be=n(Zl,"Texto"),Zl.forEach(t),Va=n(Gl,":"),Gl.forEach(t),$a=$(e),V=i(e,"UL",{});var se=p(V);ht=i(se,"LI",{});var Xl=p(ht);Ko=n(Xl,"An\xE1lisis de Sentimiento (Sentiment Analysis, en ingl\xE9s): clasifica la polaridad de un texto dado."),Xl.forEach(t),Jo=$(se),_t=i(se,"LI",{});var ei=p(_t);Zo=n(ei,"Generaci\xF3n de Texto (Text Generation, en ingl\xE9s): genera texto a partir de un input dado."),ei.forEach(t),Xo=$(se),gt=i(se,"LI",{});var ai=p(gt);er=n(ai,"Reconocimiento de Entidades (Name Entity Recognition o NER, en ingl\xE9s): etiqueta cada palabra con la entidad que representa (persona, fecha, ubicaci\xF3n, etc.)."),ai.forEach(t),ar=$(se),vt=i(se,"LI",{});var ti=p(vt);tr=n(ti,"Responder Preguntas (Question answering, en ingl\xE9s): extrae la respuesta del contexto dado un contexto y una pregunta."),ti.forEach(t),sr=$(se),bt=i(se,"LI",{});var si=p(bt);or=n(si,"Rellenar M\xE1scara (Fill-mask, en ingl\xE9s): rellena el espacio faltante dado un texto con palabras enmascaradas."),si.forEach(t),rr=$(se),Et=i(se,"LI",{});var oi=p(Et);nr=n(oi,"Resumir (Summarization, en ingl\xE9s): genera un resumen de una secuencia larga de texto o un documento."),oi.forEach(t),lr=$(se),kt=i(se,"LI",{});var ri=p(kt);ir=n(ri,"Traducci\xF3n (Translation, en ingl\xE9s): traduce un texto a otro idioma."),ri.forEach(t),pr=$(se),jt=i(se,"LI",{});var ni=p(jt);cr=n(ni,"Extracci\xF3n de Caracter\xEDsticas (Feature Extraction, en ingl\xE9s): crea una representaci\xF3n tensorial del texto."),ni.forEach(t),se.forEach(t),As=$(e),ha=i(e,"P",{});var Vl=p(ha);wt=i(Vl,"STRONG",{});var li=p(wt);ur=n(li,"Imagen"),li.forEach(t),dr=n(Vl,":"),Vl.forEach(t),Ts=$(e),Ee=i(e,"UL",{});var nt=p(Ee);yt=i(nt,"LI",{});var ii=p(yt);mr=n(ii,"Clasificaci\xF3n de Im\xE1genes (Image Classification, en ingl\xE9s): clasifica una imagen."),ii.forEach(t),fr=$(nt),qt=i(nt,"LI",{});var pi=p(qt);$r=n(pi,"Segmentaci\xF3n de Im\xE1genes (Image Segmentation, en ingl\xE9s): clasifica cada pixel de una imagen."),pi.forEach(t),hr=$(nt),At=i(nt,"LI",{});var ci=p(At);_r=n(ci,"Detecci\xF3n de Objetos (Object Detection, en ingl\xE9s): detecta objetos dentro de una imagen."),ci.forEach(t),nt.forEach(t),Cs=$(e),_a=i(e,"P",{});var Wl=p(_a);Tt=i(Wl,"STRONG",{});var ui=p(Tt);gr=n(ui,"Audio"),ui.forEach(t),vr=n(Wl,":"),Wl.forEach(t),zs=$(e),Ne=i(e,"UL",{});var Po=p(Ne);Ct=i(Po,"LI",{});var di=p(Ct);br=n(di,"Clasificaci\xF3n de Audios (Audio Classification, en ingl\xE9s): asigna una etiqueta a un segmento de audio."),di.forEach(t),Er=$(Po),zt=i(Po,"LI",{});var mi=p(zt);kr=n(mi,"Reconocimiento de Voz Autom\xE1tico (Automatic Speech Recognition o ASR, en ingl\xE9s): transcribe datos de audio a un texto."),mi.forEach(t),Po.forEach(t),xs=$(e),E(Re.$$.fragment,e),Ps=$(e),Pe=i(e,"H3",{class:!0});var Mo=p(Pe);Ue=i(Mo,"A",{id:!0,class:!0,href:!0});var fi=p(Ue);xt=i(fi,"SPAN",{});var $i=p(xt);E(ga.$$.fragment,$i),$i.forEach(t),fi.forEach(t),jr=$(Mo),Pt=i(Mo,"SPAN",{});var hi=p(Pt);wr=n(hi,"Uso del Pipeline"),hi.forEach(t),Mo.forEach(t),Ms=$(e),He=i(e,"P",{});var So=p(He);yr=n(So,"En el siguiente ejemplo, usar\xE1s el "),Mt=i(So,"CODE",{});var _i=p(Mt);qr=n(_i,"pipeline()"),_i.forEach(t),Ar=n(So," para an\xE1lisis de sentimiento."),So.forEach(t),Ss=$(e),Wa=i(e,"P",{});var gi=p(Wa);Tr=n(gi,"Instala las siguientes dependencias si a\xFAn no lo has hecho:"),gi.forEach(t),Fs=$(e),E(Ge.$$.fragment,e),Ds=$(e),Ve=i(e,"P",{});var Fo=p(Ve);Cr=n(Fo,"Importa "),St=i(Fo,"CODE",{});var vi=p(St);zr=n(vi,"pipeline()"),vi.forEach(t),xr=n(Fo," y especifica la tarea que deseas completar:"),Fo.forEach(t),Os=$(e),E(va.$$.fragment,e),Ls=$(e),ke=i(e,"P",{});var lt=p(ke);Pr=n(lt,"El pipeline descarga y almacena en cach\xE9 el "),ba=i(lt,"A",{href:!0,rel:!0});var bi=p(ba);Mr=n(bi,"modelo preentrenado"),bi.forEach(t),Sr=n(lt," y tokeniza para an\xE1lisis de sentimiento. Si no hubieramos elegido un modelo el pipeline habr\xEDa elegido uno por defecto. Ahora puedes usar "),Ft=i(lt,"CODE",{});var Ei=p(Ft);Fr=n(Ei,"clasificador"),Ei.forEach(t),Dr=n(lt," en tu texto objetivo:"),lt.forEach(t),Is=$(e),E(Ea.$$.fragment,e),Ns=$(e),We=i(e,"P",{});var Do=p(We);Or=n(Do,"Para m\xE1s de un enunciado, entrega una lista al "),Dt=i(Do,"CODE",{});var ki=p(Dt);Lr=n(ki,"pipeline()"),ki.forEach(t),Ir=n(Do," que devolver\xE1 una lista de diccionarios:"),Do.forEach(t),Rs=$(e),je=i(e,"P",{});var it=p(je);Nr=n(it,"El "),Ot=i(it,"CODE",{});var ji=p(Ot);Rr=n(ji,"pipeline()"),ji.forEach(t),Ur=n(it," tambi\xE9n puede iterar sobre un dataset entero. Comienza instalando la biblioteca "),ka=i(it,"A",{href:!0,rel:!0});var wi=p(ka);Hr=n(wi,"\u{1F917} Datasets"),wi.forEach(t),Gr=n(it,":"),it.forEach(t),Us=$(e),E(ja.$$.fragment,e),Hs=$(e),_e=i(e,"P",{});var ma=p(_e);Vr=n(ma,"Crea un "),Lt=i(ma,"CODE",{});var yi=p(Lt);Wr=n(yi,"pipeline()"),yi.forEach(t),Qr=n(ma," con la tarea que deseas resolver y el modelo que quieres usar. Coloca el par\xE1metro "),It=i(ma,"CODE",{});var qi=p(It);Yr=n(qi,"device"),qi.forEach(t),Br=n(ma," a "),Nt=i(ma,"CODE",{});var Ai=p(Nt);Kr=n(Ai,"0"),Ai.forEach(t),Jr=n(ma," para poner los tensores en un dispositivo CUDA:"),ma.forEach(t),Gs=$(e),E(wa.$$.fragment,e),Vs=$(e),E(ya.$$.fragment,e),Ws=$(e),Qe=i(e,"P",{});var Oo=p(Qe);Zr=n(Oo,"Debemos asegurarnos de que la frecuencia de muestreo del conjunto de datos coincide con la frecuencia de muestreo con la que se entren\xF3 "),Rt=i(Oo,"CODE",{});var Ti=p(Rt);Xr=n(Ti,"jonatasgrosman/wav2vec2-large-xlsr-53-spanish"),Ti.forEach(t),en=n(Oo,"."),Oo.forEach(t),Qs=$(e),E(qa.$$.fragment,e),Ys=$(e),Ye=i(e,"P",{});var Lo=p(Ye);an=n(Lo,"Los archivos de audio se cargan y remuestrean autom\xE1ticamente cuando llamamos a la columna "),Ut=i(Lo,"CODE",{});var Ci=p(Ut);tn=n(Ci,'"audio"'),Ci.forEach(t),sn=n(Lo,`.
Extraigamos las matrices de onda cruda (raw waveform, en ingl\xE9s) de las primeras 4 muestras y pas\xE9mosla como una lista al pipeline:`),Lo.forEach(t),Bs=$(e),E(Aa.$$.fragment,e),Ks=$(e),Be=i(e,"P",{});var Io=p(Be);on=n(Io,"Para un dataset m\xE1s grande, donde los inputs son de mayor tama\xF1o (como en habla/audio o visi\xF3n), querr\xE1s pasar un generador en lugar de una lista que carga todos los inputs en memoria. Ve la "),Qa=i(Io,"A",{href:!0});var zi=p(Qa);rn=n(zi,"documentaci\xF3n del pipeline"),zi.forEach(t),nn=n(Io," para m\xE1s informaci\xF3n."),Io.forEach(t),Js=$(e),Me=i(e,"H3",{class:!0});var No=p(Me);Ke=i(No,"A",{id:!0,class:!0,href:!0});var xi=p(Ke);Ht=i(xi,"SPAN",{});var Pi=p(Ht);E(Ta.$$.fragment,Pi),Pi.forEach(t),xi.forEach(t),ln=$(No),Gt=i(No,"SPAN",{});var Mi=p(Gt);pn=n(Mi,"Usa otro modelo y otro tokenizador en el pipeline"),Mi.forEach(t),No.forEach(t),Zs=$(e),ce=i(e,"P",{});var Ce=p(ce);cn=n(Ce,"El "),Vt=i(Ce,"CODE",{});var Si=p(Vt);un=n(Si,"pipeline()"),Si.forEach(t),dn=n(Ce," puede acomodarse a cualquier modelo del "),Ca=i(Ce,"A",{href:!0,rel:!0});var Fi=p(Ca);mn=n(Fi,"Model Hub"),Fi.forEach(t),fn=n(Ce," haciendo m\xE1s f\xE1cil adaptar el "),Wt=i(Ce,"CODE",{});var Di=p(Wt);$n=n(Di,"pipeline()"),Di.forEach(t),hn=n(Ce," para otros casos de uso. Por ejemplo, si quisieras un modelo capaz de manejar texto en franc\xE9s, usa los tags en el Model Hub para filtrar entre los modelos apropiados. El resultado mejor filtrado devuelve un "),za=i(Ce,"A",{href:!0,rel:!0});var Oi=p(za);_n=n(Oi,"modelo BERT"),Oi.forEach(t),gn=n(Ce," multilingual fine-tuned para el an\xE1lisis de sentimiento. Genial, \xA1vamos a usar este modelo!"),Ce.forEach(t),Xs=$(e),E(xa.$$.fragment,e),eo=$(e),E(Je.$$.fragment,e),ao=$(e),we=i(e,"P",{});var pt=p(we);vn=n(pt,"Despu\xE9s puedes especificar el modelo y el tokenizador en el "),Qt=i(pt,"CODE",{});var Li=p(Qt);bn=n(Li,"pipeline()"),Li.forEach(t),En=n(pt,", y aplicar el "),Yt=i(pt,"CODE",{});var Ii=p(Yt);kn=n(Ii,"classifier"),Ii.forEach(t),jn=n(pt," en tu texto objetivo:"),pt.forEach(t),to=$(e),E(Pa.$$.fragment,e),so=$(e),ye=i(e,"P",{});var ct=p(ye);wn=n(ct,"Si no pudieras encontrar el modelo para tu caso respectivo de uso necesitar\xE1s ajustar un modelo preentrenado a tus datos. Mira nuestro "),Ya=i(ct,"A",{href:!0});var Ni=p(Ya);yn=n(Ni,"tutorial de fine-tuning"),Ni.forEach(t),qn=n(ct," para aprender c\xF3mo. Finalmente, despu\xE9s de que has ajustado tu modelo preentrenado, \xA1por favor considera compartirlo (ve el tutorial "),Ba=i(ct,"A",{href:!0});var Ri=p(Ba);An=n(Ri,"aqu\xED"),Ri.forEach(t),Tn=n(ct,") con la comunidad en el Model Hub para democratizar el NLP! \u{1F917}"),ct.forEach(t),oo=$(e),Se=i(e,"H2",{class:!0});var Ro=p(Se);Ze=i(Ro,"A",{id:!0,class:!0,href:!0});var Ui=p(Ze);Bt=i(Ui,"SPAN",{});var Hi=p(Bt);E(Ma.$$.fragment,Hi),Hi.forEach(t),Ui.forEach(t),Cn=$(Ro),Kt=i(Ro,"SPAN",{});var Gi=p(Kt);zn=n(Gi,"AutoClass"),Gi.forEach(t),Ro.forEach(t),ro=$(e),E(Sa.$$.fragment,e),no=$(e),Z=i(e,"P",{});var ue=p(Z);xn=n(ue,"Debajo del cap\xF3, las clases "),Jt=i(ue,"CODE",{});var Vi=p(Jt);Pn=n(Vi,"AutoModelForSequenceClassification"),Vi.forEach(t),Mn=n(ue," y "),Zt=i(ue,"CODE",{});var Wi=p(Zt);Sn=n(Wi,"AutoTokenizer"),Wi.forEach(t),Fn=n(ue," trabajan juntas para dar poder al "),Xt=i(ue,"CODE",{});var Qi=p(Xt);Dn=n(Qi,"pipeline()"),Qi.forEach(t),On=n(ue,". Una "),Ka=i(ue,"A",{href:!0});var Yi=p(Ka);Ln=n(Yi,"AutoClass"),Yi.forEach(t),In=n(ue," es un atajo que autom\xE1ticamente recupera la arquitectura de un modelo preentrenado con su nombre o el path. S\xF3lo necesitar\xE1s seleccionar el "),es=i(ue,"CODE",{});var Bi=p(es);Nn=n(Bi,"AutoClass"),Bi.forEach(t),Rn=n(ue," apropiado para tu tarea y tu tokenizador asociado con "),as=i(ue,"CODE",{});var Ki=p(as);Un=n(Ki,"AutoTokenizer"),Ki.forEach(t),Hn=n(ue,"."),ue.forEach(t),lo=$(e),qe=i(e,"P",{});var ut=p(qe);Gn=n(ut,"Regresemos a nuestro ejemplo y veamos c\xF3mo puedes usar el "),ts=i(ut,"CODE",{});var Ji=p(ts);Vn=n(Ji,"AutoClass"),Ji.forEach(t),Wn=n(ut," para reproducir los resultados del "),ss=i(ut,"CODE",{});var Zi=p(ss);Qn=n(Zi,"pipeline()"),Zi.forEach(t),Yn=n(ut,"."),ut.forEach(t),io=$(e),Fe=i(e,"H3",{class:!0});var Uo=p(Fe);Xe=i(Uo,"A",{id:!0,class:!0,href:!0});var Xi=p(Xe);os=i(Xi,"SPAN",{});var ep=p(os);E(Fa.$$.fragment,ep),ep.forEach(t),Xi.forEach(t),Bn=$(Uo),rs=i(Uo,"SPAN",{});var ap=p(rs);Kn=n(ap,"AutoTokenizer"),ap.forEach(t),Uo.forEach(t),po=$(e),Ae=i(e,"P",{});var dt=p(Ae);Jn=n(dt,"Un tokenizador es responsable de procesar el texto a un formato que sea entendible para el modelo. Primero, el tokenizador separar\xE1 el texto en palabras llamadas "),ns=i(dt,"EM",{});var tp=p(ns);Zn=n(tp,"tokens"),tp.forEach(t),Xn=n(dt,". Hay m\xFAltiples reglas que gobiernan el proceso de tokenizaci\xF3n incluyendo el c\xF3mo separar una palabra y en qu\xE9 nivel (aprende m\xE1s sobre tokenizaci\xF3n "),Ja=i(dt,"A",{href:!0});var sp=p(Ja);el=n(sp,"aqu\xED"),sp.forEach(t),al=n(dt,"). Lo m\xE1s importante es recordar que necesitar\xE1s instanciar el tokenizador con el mismo nombre del modelo para asegurar que est\xE1s usando las mismas reglas de tokenizaci\xF3n con las que el modelo fue preentrenado."),dt.forEach(t),co=$(e),ea=i(e,"P",{});var Ho=p(ea);tl=n(Ho,"Carga un tokenizador con "),ls=i(Ho,"CODE",{});var op=p(ls);sl=n(op,"AutoTokenizer"),op.forEach(t),ol=n(Ho,":"),Ho.forEach(t),uo=$(e),E(Da.$$.fragment,e),mo=$(e),aa=i(e,"P",{});var Go=p(aa);rl=n(Go,"Despu\xE9s, el tokenizador convierte los tokens a n\xFAmeros para construir un tensor que servir\xE1 como input para el modelo. Esto es conocido como el "),is=i(Go,"EM",{});var rp=p(is);nl=n(rp,"vocabulario"),rp.forEach(t),ll=n(Go," del modelo."),Go.forEach(t),fo=$(e),Za=i(e,"P",{});var np=p(Za);il=n(np,"Pasa tu texto al tokenizador:"),np.forEach(t),$o=$(e),E(Oa.$$.fragment,e),ho=$(e),Xa=i(e,"P",{});var lp=p(Xa);pl=n(lp,"El tokenizador devolver\xE1 un diccionario conteniendo:"),lp.forEach(t),_o=$(e),ta=i(e,"UL",{});var Vo=p(ta);et=i(Vo,"LI",{});var Ql=p(et);at=i(Ql,"A",{href:!0});var ip=p(at);cl=n(ip,"input_ids"),ip.forEach(t),ul=n(Ql,": representaciones num\xE9ricas de los tokens."),Ql.forEach(t),dl=$(Vo),tt=i(Vo,"LI",{});var Yl=p(tt);st=i(Yl,"A",{href:!0});var pp=p(st);ml=n(pp,"atttention_mask"),pp.forEach(t),fl=n(Yl,": indica cu\xE1les tokens deben ser atendidos."),Yl.forEach(t),Vo.forEach(t),go=$(e),sa=i(e,"P",{});var Wo=p(sa);$l=n(Wo,"Como con el "),ps=i(Wo,"CODE",{});var cp=p(ps);hl=n(cp,"pipeline()"),cp.forEach(t),_l=n(Wo,", el tokenizador aceptar\xE1 una lista de inputs. Adem\xE1s, el tokenizador tambi\xE9n puede rellenar (pad, en ingl\xE9s) y truncar el texto para devolver un lote (batch, en ingl\xE9s) de longitud uniforme:"),Wo.forEach(t),vo=$(e),E(oa.$$.fragment,e),bo=$(e),ra=i(e,"P",{});var Qo=p(ra);gl=n(Qo,"Lee el tutorial de "),ot=i(Qo,"A",{href:!0});var up=p(ot);vl=n(up,"preprocessing"),up.forEach(t),bl=n(Qo," para m\xE1s detalles acerca de la tokenizaci\xF3n."),Qo.forEach(t),Eo=$(e),De=i(e,"H3",{class:!0});var Yo=p(De);na=i(Yo,"A",{id:!0,class:!0,href:!0});var dp=p(na);cs=i(dp,"SPAN",{});var mp=p(cs);E(La.$$.fragment,mp),mp.forEach(t),dp.forEach(t),El=$(Yo),us=i(Yo,"SPAN",{});var fp=p(us);kl=n(fp,"AutoModel"),fp.forEach(t),Yo.forEach(t),ko=$(e),E(la.$$.fragment,e),jo=$(e),E(ia.$$.fragment,e),wo=$(e),X=i(e,"P",{});var de=p(X);jl=n(de,"Los modelos son "),Ia=i(de,"A",{href:!0,rel:!0});var $p=p(Ia);ds=i($p,"CODE",{});var hp=p(ds);wl=n(hp,"torch.nn.Module"),hp.forEach(t),$p.forEach(t),yl=n(de," o "),Na=i(de,"A",{href:!0,rel:!0});var _p=p(Na);ms=i(_p,"CODE",{});var gp=p(ms);ql=n(gp,"tf.keras.Model"),gp.forEach(t),_p.forEach(t),Al=n(de," est\xE1ndares as\xED que podr\xE1s usarlos en tu training loop usual. Sin embargo, para facilitar las cosas, \u{1F917} Transformers provee una clase "),fs=i(de,"CODE",{});var vp=p(fs);Tl=n(vp,"Trainer"),vp.forEach(t),Cl=n(de," para PyTorch que a\xF1ade funcionalidades para entrenamiento distribuido, precici\xF3n mixta, y m\xE1s. Para TensorFlow, puedes usar el m\xE9todo "),$s=i(de,"CODE",{});var bp=p($s);zl=n(bp,"fit"),bp.forEach(t),xl=n(de," desde "),Ra=i(de,"A",{href:!0,rel:!0});var Ep=p(Ra);Pl=n(Ep,"Keras"),Ep.forEach(t),Ml=n(de,". Consulta el "),rt=i(de,"A",{href:!0});var kp=p(rt);Sl=n(kp,"tutorial de entrenamiento"),kp.forEach(t),Fl=n(de," para m\xE1s detalles."),de.forEach(t),yo=$(e),E(pa.$$.fragment,e),qo=$(e),Oe=i(e,"H3",{class:!0});var Bo=p(Oe);ca=i(Bo,"A",{id:!0,class:!0,href:!0});var jp=p(ca);hs=i(jp,"SPAN",{});var wp=p(hs);E(Ua.$$.fragment,wp),wp.forEach(t),jp.forEach(t),Dl=$(Bo),_s=i(Bo,"SPAN",{});var yp=p(_s);Ol=n(yp,"Guarda un modelo"),yp.forEach(t),Bo.forEach(t),Ao=$(e),E(ua.$$.fragment,e),To=$(e),Te=i(e,"P",{});var mt=p(Te);Ll=n(mt,"Una caracter\xEDstica particularmente interesante de \u{1F917} Transformers es la habilidad de guardar el modelo y cargarlo como un modelo de PyTorch o TensorFlow. El par\xE1metro "),gs=i(mt,"CODE",{});var qp=p(gs);Il=n(qp,"from_pt"),qp.forEach(t),Nl=n(mt," o "),vs=i(mt,"CODE",{});var Ap=p(vs);Rl=n(Ap,"from_tf"),Ap.forEach(t),Ul=n(mt," puede convertir el modelo de un framework al otro:"),mt.forEach(t),Co=$(e),E(da.$$.fragment,e),this.h()},h(){T(s,"name","hf:doc:metadata"),T(s,"content",JSON.stringify(dc)),T(m,"id","quick-tour"),T(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),T(m,"href","#quick-tour"),T(o,"class","relative group"),T(M,"href","./model_doc/auto"),T(G,"id","pipeline"),T(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),T(G,"href","#pipeline"),T(B,"class","relative group"),T(Ue,"id","uso-del-pipeline"),T(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),T(Ue,"href","#uso-del-pipeline"),T(Pe,"class","relative group"),T(ba,"href","https://huggingface.co/pysentimiento/robertuito-sentiment-analysis"),T(ba,"rel","nofollow"),T(ka,"href","https://huggingface.co/docs/datasets/"),T(ka,"rel","nofollow"),T(Qa,"href","./main_classes/pipelines"),T(Ke,"id","usa-otro-modelo-y-otro-tokenizador-en-el-pipeline"),T(Ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),T(Ke,"href","#usa-otro-modelo-y-otro-tokenizador-en-el-pipeline"),T(Me,"class","relative group"),T(Ca,"href","https://huggingface.co/models"),T(Ca,"rel","nofollow"),T(za,"href","https://huggingface.co/nlptown/bert-base-multilingual-uncased-sentiment"),T(za,"rel","nofollow"),T(Ya,"href","./training"),T(Ba,"href","./model_sharing"),T(Ze,"id","autoclass"),T(Ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),T(Ze,"href","#autoclass"),T(Se,"class","relative group"),T(Ka,"href","./model_doc/auto"),T(Xe,"id","autotokenizer"),T(Xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),T(Xe,"href","#autotokenizer"),T(Fe,"class","relative group"),T(Ja,"href","./tokenizer_summary"),T(at,"href","./glossary#input-ids"),T(st,"href",".glossary#attention-mask"),T(ot,"href","./preprocessing"),T(na,"id","automodel"),T(na,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),T(na,"href","#automodel"),T(De,"class","relative group"),T(Ia,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),T(Ia,"rel","nofollow"),T(Na,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),T(Na,"rel","nofollow"),T(Ra,"href","https://keras.io/"),T(Ra,"rel","nofollow"),T(rt,"href","./training"),T(ca,"id","guarda-un-modelo"),T(ca,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),T(ca,"href","#guarda-un-modelo"),T(Oe,"class","relative group")},m(e,c){a(document.head,s),u(e,d,c),u(e,o,c),a(o,m),a(m,h),k(g,h,null),a(o,C),a(o,F),a(F,x),u(e,P,c),k(D,e,c),u(e,A,c),u(e,S,c),a(S,H),a(S,L),a(L,N),a(S,_),a(S,M),a(M,W),a(S,R),u(e,Y,c),k(Q,e,c),u(e,ae,c),u(e,B,c),a(B,G),a(G,ee),k(K,ee,null),a(B,J),a(B,me),a(me,oe),u(e,$e,c),u(e,re,c),a(re,te),a(te,ne),a(re,he),u(e,q,c),k(O,e,c),u(e,le,c),u(e,v,c),a(v,I),a(v,pe),a(pe,xe),a(v,fe),u(e,ve,c),u(e,ie,c),a(ie,Ie),a(Ie,be),a(ie,Va),u(e,$a,c),u(e,V,c),a(V,ht),a(ht,Ko),a(V,Jo),a(V,_t),a(_t,Zo),a(V,Xo),a(V,gt),a(gt,er),a(V,ar),a(V,vt),a(vt,tr),a(V,sr),a(V,bt),a(bt,or),a(V,rr),a(V,Et),a(Et,nr),a(V,lr),a(V,kt),a(kt,ir),a(V,pr),a(V,jt),a(jt,cr),u(e,As,c),u(e,ha,c),a(ha,wt),a(wt,ur),a(ha,dr),u(e,Ts,c),u(e,Ee,c),a(Ee,yt),a(yt,mr),a(Ee,fr),a(Ee,qt),a(qt,$r),a(Ee,hr),a(Ee,At),a(At,_r),u(e,Cs,c),u(e,_a,c),a(_a,Tt),a(Tt,gr),a(_a,vr),u(e,zs,c),u(e,Ne,c),a(Ne,Ct),a(Ct,br),a(Ne,Er),a(Ne,zt),a(zt,kr),u(e,xs,c),k(Re,e,c),u(e,Ps,c),u(e,Pe,c),a(Pe,Ue),a(Ue,xt),k(ga,xt,null),a(Pe,jr),a(Pe,Pt),a(Pt,wr),u(e,Ms,c),u(e,He,c),a(He,yr),a(He,Mt),a(Mt,qr),a(He,Ar),u(e,Ss,c),u(e,Wa,c),a(Wa,Tr),u(e,Fs,c),k(Ge,e,c),u(e,Ds,c),u(e,Ve,c),a(Ve,Cr),a(Ve,St),a(St,zr),a(Ve,xr),u(e,Os,c),k(va,e,c),u(e,Ls,c),u(e,ke,c),a(ke,Pr),a(ke,ba),a(ba,Mr),a(ke,Sr),a(ke,Ft),a(Ft,Fr),a(ke,Dr),u(e,Is,c),k(Ea,e,c),u(e,Ns,c),u(e,We,c),a(We,Or),a(We,Dt),a(Dt,Lr),a(We,Ir),u(e,Rs,c),u(e,je,c),a(je,Nr),a(je,Ot),a(Ot,Rr),a(je,Ur),a(je,ka),a(ka,Hr),a(je,Gr),u(e,Us,c),k(ja,e,c),u(e,Hs,c),u(e,_e,c),a(_e,Vr),a(_e,Lt),a(Lt,Wr),a(_e,Qr),a(_e,It),a(It,Yr),a(_e,Br),a(_e,Nt),a(Nt,Kr),a(_e,Jr),u(e,Gs,c),k(wa,e,c),u(e,Vs,c),k(ya,e,c),u(e,Ws,c),u(e,Qe,c),a(Qe,Zr),a(Qe,Rt),a(Rt,Xr),a(Qe,en),u(e,Qs,c),k(qa,e,c),u(e,Ys,c),u(e,Ye,c),a(Ye,an),a(Ye,Ut),a(Ut,tn),a(Ye,sn),u(e,Bs,c),k(Aa,e,c),u(e,Ks,c),u(e,Be,c),a(Be,on),a(Be,Qa),a(Qa,rn),a(Be,nn),u(e,Js,c),u(e,Me,c),a(Me,Ke),a(Ke,Ht),k(Ta,Ht,null),a(Me,ln),a(Me,Gt),a(Gt,pn),u(e,Zs,c),u(e,ce,c),a(ce,cn),a(ce,Vt),a(Vt,un),a(ce,dn),a(ce,Ca),a(Ca,mn),a(ce,fn),a(ce,Wt),a(Wt,$n),a(ce,hn),a(ce,za),a(za,_n),a(ce,gn),u(e,Xs,c),k(xa,e,c),u(e,eo,c),k(Je,e,c),u(e,ao,c),u(e,we,c),a(we,vn),a(we,Qt),a(Qt,bn),a(we,En),a(we,Yt),a(Yt,kn),a(we,jn),u(e,to,c),k(Pa,e,c),u(e,so,c),u(e,ye,c),a(ye,wn),a(ye,Ya),a(Ya,yn),a(ye,qn),a(ye,Ba),a(Ba,An),a(ye,Tn),u(e,oo,c),u(e,Se,c),a(Se,Ze),a(Ze,Bt),k(Ma,Bt,null),a(Se,Cn),a(Se,Kt),a(Kt,zn),u(e,ro,c),k(Sa,e,c),u(e,no,c),u(e,Z,c),a(Z,xn),a(Z,Jt),a(Jt,Pn),a(Z,Mn),a(Z,Zt),a(Zt,Sn),a(Z,Fn),a(Z,Xt),a(Xt,Dn),a(Z,On),a(Z,Ka),a(Ka,Ln),a(Z,In),a(Z,es),a(es,Nn),a(Z,Rn),a(Z,as),a(as,Un),a(Z,Hn),u(e,lo,c),u(e,qe,c),a(qe,Gn),a(qe,ts),a(ts,Vn),a(qe,Wn),a(qe,ss),a(ss,Qn),a(qe,Yn),u(e,io,c),u(e,Fe,c),a(Fe,Xe),a(Xe,os),k(Fa,os,null),a(Fe,Bn),a(Fe,rs),a(rs,Kn),u(e,po,c),u(e,Ae,c),a(Ae,Jn),a(Ae,ns),a(ns,Zn),a(Ae,Xn),a(Ae,Ja),a(Ja,el),a(Ae,al),u(e,co,c),u(e,ea,c),a(ea,tl),a(ea,ls),a(ls,sl),a(ea,ol),u(e,uo,c),k(Da,e,c),u(e,mo,c),u(e,aa,c),a(aa,rl),a(aa,is),a(is,nl),a(aa,ll),u(e,fo,c),u(e,Za,c),a(Za,il),u(e,$o,c),k(Oa,e,c),u(e,ho,c),u(e,Xa,c),a(Xa,pl),u(e,_o,c),u(e,ta,c),a(ta,et),a(et,at),a(at,cl),a(et,ul),a(ta,dl),a(ta,tt),a(tt,st),a(st,ml),a(tt,fl),u(e,go,c),u(e,sa,c),a(sa,$l),a(sa,ps),a(ps,hl),a(sa,_l),u(e,vo,c),k(oa,e,c),u(e,bo,c),u(e,ra,c),a(ra,gl),a(ra,ot),a(ot,vl),a(ra,bl),u(e,Eo,c),u(e,De,c),a(De,na),a(na,cs),k(La,cs,null),a(De,El),a(De,us),a(us,kl),u(e,ko,c),k(la,e,c),u(e,jo,c),k(ia,e,c),u(e,wo,c),u(e,X,c),a(X,jl),a(X,Ia),a(Ia,ds),a(ds,wl),a(X,yl),a(X,Na),a(Na,ms),a(ms,ql),a(X,Al),a(X,fs),a(fs,Tl),a(X,Cl),a(X,$s),a($s,zl),a(X,xl),a(X,Ra),a(Ra,Pl),a(X,Ml),a(X,rt),a(rt,Sl),a(X,Fl),u(e,yo,c),k(pa,e,c),u(e,qo,c),u(e,Oe,c),a(Oe,ca),a(ca,hs),k(Ua,hs,null),a(Oe,Dl),a(Oe,_s),a(_s,Ol),u(e,Ao,c),k(ua,e,c),u(e,To,c),u(e,Te,c),a(Te,Ll),a(Te,gs),a(gs,Il),a(Te,Nl),a(Te,vs),a(vs,Rl),a(Te,Ul),u(e,Co,c),k(da,e,c),zo=!0},p(e,[c]){const Ha={};c&2&&(Ha.$$scope={dirty:c,ctx:e}),Q.$set(Ha);const bs={};c&2&&(bs.$$scope={dirty:c,ctx:e}),Re.$set(bs);const Es={};c&2&&(Es.$$scope={dirty:c,ctx:e}),Ge.$set(Es);const ks={};c&2&&(ks.$$scope={dirty:c,ctx:e}),Je.$set(ks);const Le={};c&2&&(Le.$$scope={dirty:c,ctx:e}),oa.$set(Le);const js={};c&2&&(js.$$scope={dirty:c,ctx:e}),la.$set(js);const ws={};c&2&&(ws.$$scope={dirty:c,ctx:e}),ia.$set(ws);const Ga={};c&2&&(Ga.$$scope={dirty:c,ctx:e}),pa.$set(Ga);const ys={};c&2&&(ys.$$scope={dirty:c,ctx:e}),ua.$set(ys);const qs={};c&2&&(qs.$$scope={dirty:c,ctx:e}),da.$set(qs)},i(e){zo||(j(g.$$.fragment,e),j(D.$$.fragment,e),j(Q.$$.fragment,e),j(K.$$.fragment,e),j(O.$$.fragment,e),j(Re.$$.fragment,e),j(ga.$$.fragment,e),j(Ge.$$.fragment,e),j(va.$$.fragment,e),j(Ea.$$.fragment,e),j(ja.$$.fragment,e),j(wa.$$.fragment,e),j(ya.$$.fragment,e),j(qa.$$.fragment,e),j(Aa.$$.fragment,e),j(Ta.$$.fragment,e),j(xa.$$.fragment,e),j(Je.$$.fragment,e),j(Pa.$$.fragment,e),j(Ma.$$.fragment,e),j(Sa.$$.fragment,e),j(Fa.$$.fragment,e),j(Da.$$.fragment,e),j(Oa.$$.fragment,e),j(oa.$$.fragment,e),j(La.$$.fragment,e),j(la.$$.fragment,e),j(ia.$$.fragment,e),j(pa.$$.fragment,e),j(Ua.$$.fragment,e),j(ua.$$.fragment,e),j(da.$$.fragment,e),zo=!0)},o(e){w(g.$$.fragment,e),w(D.$$.fragment,e),w(Q.$$.fragment,e),w(K.$$.fragment,e),w(O.$$.fragment,e),w(Re.$$.fragment,e),w(ga.$$.fragment,e),w(Ge.$$.fragment,e),w(va.$$.fragment,e),w(Ea.$$.fragment,e),w(ja.$$.fragment,e),w(wa.$$.fragment,e),w(ya.$$.fragment,e),w(qa.$$.fragment,e),w(Aa.$$.fragment,e),w(Ta.$$.fragment,e),w(xa.$$.fragment,e),w(Je.$$.fragment,e),w(Pa.$$.fragment,e),w(Ma.$$.fragment,e),w(Sa.$$.fragment,e),w(Fa.$$.fragment,e),w(Da.$$.fragment,e),w(Oa.$$.fragment,e),w(oa.$$.fragment,e),w(La.$$.fragment,e),w(la.$$.fragment,e),w(ia.$$.fragment,e),w(pa.$$.fragment,e),w(Ua.$$.fragment,e),w(ua.$$.fragment,e),w(da.$$.fragment,e),zo=!1},d(e){t(s),e&&t(d),e&&t(o),y(g),e&&t(P),y(D,e),e&&t(A),e&&t(S),e&&t(Y),y(Q,e),e&&t(ae),e&&t(B),y(K),e&&t($e),e&&t(re),e&&t(q),y(O,e),e&&t(le),e&&t(v),e&&t(ve),e&&t(ie),e&&t($a),e&&t(V),e&&t(As),e&&t(ha),e&&t(Ts),e&&t(Ee),e&&t(Cs),e&&t(_a),e&&t(zs),e&&t(Ne),e&&t(xs),y(Re,e),e&&t(Ps),e&&t(Pe),y(ga),e&&t(Ms),e&&t(He),e&&t(Ss),e&&t(Wa),e&&t(Fs),y(Ge,e),e&&t(Ds),e&&t(Ve),e&&t(Os),y(va,e),e&&t(Ls),e&&t(ke),e&&t(Is),y(Ea,e),e&&t(Ns),e&&t(We),e&&t(Rs),e&&t(je),e&&t(Us),y(ja,e),e&&t(Hs),e&&t(_e),e&&t(Gs),y(wa,e),e&&t(Vs),y(ya,e),e&&t(Ws),e&&t(Qe),e&&t(Qs),y(qa,e),e&&t(Ys),e&&t(Ye),e&&t(Bs),y(Aa,e),e&&t(Ks),e&&t(Be),e&&t(Js),e&&t(Me),y(Ta),e&&t(Zs),e&&t(ce),e&&t(Xs),y(xa,e),e&&t(eo),y(Je,e),e&&t(ao),e&&t(we),e&&t(to),y(Pa,e),e&&t(so),e&&t(ye),e&&t(oo),e&&t(Se),y(Ma),e&&t(ro),y(Sa,e),e&&t(no),e&&t(Z),e&&t(lo),e&&t(qe),e&&t(io),e&&t(Fe),y(Fa),e&&t(po),e&&t(Ae),e&&t(co),e&&t(ea),e&&t(uo),y(Da,e),e&&t(mo),e&&t(aa),e&&t(fo),e&&t(Za),e&&t($o),y(Oa,e),e&&t(ho),e&&t(Xa),e&&t(_o),e&&t(ta),e&&t(go),e&&t(sa),e&&t(vo),y(oa,e),e&&t(bo),e&&t(ra),e&&t(Eo),e&&t(De),y(La),e&&t(ko),y(la,e),e&&t(jo),y(ia,e),e&&t(wo),e&&t(X),e&&t(yo),y(pa,e),e&&t(qo),e&&t(Oe),y(Ua),e&&t(Ao),y(ua,e),e&&t(To),e&&t(Te),e&&t(Co),y(da,e)}}}const dc={local:"quick-tour",sections:[{local:"pipeline",sections:[{local:"uso-del-pipeline",title:"Uso del Pipeline"},{local:"usa-otro-modelo-y-otro-tokenizador-en-el-pipeline",title:"Usa otro modelo y otro tokenizador en el pipeline"}],title:"Pipeline"},{local:"autoclass",sections:[{local:"autotokenizer",title:"AutoTokenizer"},{local:"automodel",title:"AutoModel"},{local:"guarda-un-modelo",title:"Guarda un modelo"}],title:"AutoClass"}],title:"Quick tour"};function mc(z){return Mp(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ec extends Cp{constructor(s){super();zp(this,s,mc,uc,xp,{})}}export{Ec as default,dc as metadata};
