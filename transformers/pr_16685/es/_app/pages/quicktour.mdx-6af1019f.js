import{D as uc,S as Je,i as Ge,s as Ye,O,P as L,a as n,d as o,b as d,g as $,F as s,L as ne,t as i,h as p,e as u,w as M,k as v,c as f,x as D,m as b,y as P,Q as vi,q as j,o as q,B as S,n as qa,p as za,Y as fc,v as cc,Z as dr,X as dc,V as mc,H as Ns,I as Is,J as Hs,K as Rs,M as hc}from"../chunks/vendor-c570b7f7.js";import{T as Aa}from"../chunks/Tip-4965f0b6.js";import{Y as ac}from"../chunks/Youtube-ea859fc9.js";import{I as jt}from"../chunks/IconCopyLink-8ab47bfe.js";import{C as W}from"../chunks/CodeBlock-5b876388.js";import{D as $c}from"../chunks/DocNotebookDropdown-e51be72e.js";var Ne=(m=>(m.OPEN="OPEN",m.CLOSED="CLOSED",m.HASHASHLINK="HASHASHLINK",m))(Ne||{});const _i={};function gc(m){return _i[m]||(_i[m]=uc("OPEN")),_i[m]}function _c(m){let e,l,a,r,c,g;return{c(){e=O("svg"),l=O("defs"),a=O("clipPath"),r=O("rect"),c=O("g"),g=O("path"),this.h()},l(_){e=L(_,"svg",{class:!0,xmlns:!0,"xmlns:xlink":!0,"aria-hidden":!0,focusable:!0,role:!0,width:!0,height:!0,preserveAspectRatio:!0,viewBox:!0});var E=n(e);l=L(E,"defs",{});var k=n(l);a=L(k,"clipPath",{id:!0});var z=n(a);r=L(z,"rect",{x:!0,y:!0,width:!0,height:!0,fill:!0}),n(r).forEach(o),z.forEach(o),k.forEach(o),c=L(E,"g",{"clip-path":!0});var A=n(c);g=L(A,"path",{d:!0,fill:!0}),n(g).forEach(o),A.forEach(o),E.forEach(o),this.h()},h(){d(r,"x","3.05"),d(r,"y","0.5"),d(r,"width","25.73"),d(r,"height","31"),d(r,"fill","none"),d(a,"id","a"),d(g,"d","M24.94,9.51a12.81,12.81,0,0,1,0,18.16,12.68,12.68,0,0,1-18,0,12.81,12.81,0,0,1,0-18.16l9-9V5l-.84.83-6,6a9.58,9.58,0,1,0,13.55,0ZM20.44,9a1.68,1.68,0,1,1,1.67-1.67A1.68,1.68,0,0,1,20.44,9Z"),d(g,"fill","#ee4c2c"),d(c,"clip-path","url(#a)"),d(e,"class",m[0]),d(e,"xmlns","http://www.w3.org/2000/svg"),d(e,"xmlns:xlink","http://www.w3.org/1999/xlink"),d(e,"aria-hidden","true"),d(e,"focusable","false"),d(e,"role","img"),d(e,"width","1em"),d(e,"height","1em"),d(e,"preserveAspectRatio","xMidYMid meet"),d(e,"viewBox","0 0 32 32")},m(_,E){$(_,e,E),s(e,l),s(l,a),s(a,r),s(e,c),s(c,g)},p(_,[E]){E&1&&d(e,"class",_[0])},i:ne,o:ne,d(_){_&&o(e)}}}function vc(m,e,l){let{classNames:a=""}=e;return m.$$set=r=>{"classNames"in r&&l(0,a=r.classNames)},[a]}class bc extends Je{constructor(e){super();Ge(this,e,vc,_c,Ye,{classNames:0})}}function Ec(m){let e,l,a,r;return{c(){e=O("svg"),l=O("path"),a=O("path"),r=O("path"),this.h()},l(c){e=L(c,"svg",{class:!0,xmlns:!0,"xmlns:xlink":!0,"aria-hidden":!0,focusable:!0,role:!0,width:!0,height:!0,preserveAspectRatio:!0,viewBox:!0});var g=n(e);l=L(g,"path",{d:!0,fill:!0}),n(l).forEach(o),a=L(g,"path",{d:!0,fill:!0}),n(a).forEach(o),r=L(g,"path",{d:!0,fill:!0}),n(r).forEach(o),g.forEach(o),this.h()},h(){d(l,"d","M145.726 42.065v42.07l72.861 42.07v-42.07l-72.86-42.07zM0 84.135v42.07l36.43 21.03V105.17L0 84.135zm109.291 21.035l-36.43 21.034v126.2l36.43 21.035v-84.135l36.435 21.035v-42.07l-36.435-21.034V105.17z"),d(l,"fill","#E55B2D"),d(a,"d","M145.726 42.065L36.43 105.17v42.065l72.861-42.065v42.065l36.435-21.03v-84.14zM255.022 63.1l-36.435 21.035v42.07l36.435-21.035V63.1zm-72.865 84.135l-36.43 21.035v42.07l36.43-21.036v-42.07zm-36.43 63.104l-36.436-21.035v84.135l36.435-21.035V210.34z"),d(a,"fill","#ED8E24"),d(r,"d","M145.726 0L0 84.135l36.43 21.035l109.296-63.105l72.861 42.07L255.022 63.1L145.726 0zm0 126.204l-36.435 21.03l36.435 21.036l36.43-21.035l-36.43-21.03z"),d(r,"fill","#F8BF3C"),d(e,"class",m[0]),d(e,"xmlns","http://www.w3.org/2000/svg"),d(e,"xmlns:xlink","http://www.w3.org/1999/xlink"),d(e,"aria-hidden","true"),d(e,"focusable","false"),d(e,"role","img"),d(e,"width","0.94em"),d(e,"height","1em"),d(e,"preserveAspectRatio","xMidYMid meet"),d(e,"viewBox","0 0 256 274")},m(c,g){$(c,e,g),s(e,l),s(e,a),s(e,r)},p(c,[g]){g&1&&d(e,"class",c[0])},i:ne,o:ne,d(c){c&&o(e)}}}function wc(m,e,l){let{classNames:a=""}=e;return m.$$set=r=>{"classNames"in r&&l(0,a=r.classNames)},[a]}class kc extends Je{constructor(e){super();Ge(this,e,wc,Ec,Ye,{classNames:0})}}function jc(m){let e,l,a,r,c,g,_,E,k,z,A,y,C,R,N,V,w,x,G,U,I,K,Z,B,Y,re,se,oe,ue,ie,fe,le,X,pe,de,F,H,te,T,J,ce;return{c(){e=O("svg"),l=O("style"),a=i(`.J {
			stroke: #dce0df;
		}
		.K {
			stroke-linejoin: round;
		}
	`),r=O("g"),c=O("path"),g=O("path"),_=O("path"),E=O("path"),k=O("path"),z=O("path"),A=O("path"),y=O("path"),C=O("g"),R=O("path"),N=O("path"),V=O("path"),w=O("g"),x=O("path"),G=O("path"),U=O("path"),I=O("g"),K=O("path"),Z=O("path"),B=O("g"),Y=O("path"),re=O("path"),se=O("path"),oe=O("path"),ue=O("path"),ie=O("path"),fe=O("path"),le=O("path"),X=O("g"),pe=O("path"),de=O("path"),F=O("path"),H=O("path"),te=O("g"),T=O("path"),J=O("path"),ce=O("path"),this.h()},l($e){e=L($e,"svg",{class:!0,xmlns:!0,"xmlns:xlink":!0,"aria-hidden":!0,focusable:!0,role:!0,width:!0,height:!0,preserveAspectRatio:!0,viewBox:!0});var Q=n(e);l=L(Q,"style",{});var ke=n(l);a=p(ke,`.J {
			stroke: #dce0df;
		}
		.K {
			stroke-linejoin: round;
		}
	`),ke.forEach(o),r=L(Q,"g",{fill:!0,class:!0});var ae=n(r);c=L(ae,"path",{d:!0}),n(c).forEach(o),g=L(ae,"path",{d:!0}),n(g).forEach(o),_=L(ae,"path",{d:!0}),n(_).forEach(o),E=L(ae,"path",{d:!0}),n(E).forEach(o),k=L(ae,"path",{d:!0}),n(k).forEach(o),z=L(ae,"path",{d:!0}),n(z).forEach(o),A=L(ae,"path",{d:!0}),n(A).forEach(o),y=L(ae,"path",{d:!0}),n(y).forEach(o),ae.forEach(o),C=L(Q,"g",{fill:!0,class:!0});var je=n(C);R=L(je,"path",{d:!0}),n(R).forEach(o),N=L(je,"path",{d:!0}),n(N).forEach(o),V=L(je,"path",{d:!0}),n(V).forEach(o),je.forEach(o),w=L(Q,"g",{fill:!0,class:!0});var ve=n(w);x=L(ve,"path",{d:!0}),n(x).forEach(o),G=L(ve,"path",{d:!0}),n(G).forEach(o),ve.forEach(o),U=L(Q,"path",{d:!0,fill:!0,class:!0}),n(U).forEach(o),I=L(Q,"g",{fill:!0,class:!0});var qe=n(I);K=L(qe,"path",{d:!0}),n(K).forEach(o),Z=L(qe,"path",{d:!0}),n(Z).forEach(o),qe.forEach(o),B=L(Q,"g",{fill:!0,class:!0});var ge=n(B);Y=L(ge,"path",{d:!0}),n(Y).forEach(o),re=L(ge,"path",{d:!0}),n(re).forEach(o),se=L(ge,"path",{d:!0}),n(se).forEach(o),oe=L(ge,"path",{d:!0}),n(oe).forEach(o),ue=L(ge,"path",{d:!0}),n(ue).forEach(o),ie=L(ge,"path",{d:!0}),n(ie).forEach(o),fe=L(ge,"path",{d:!0}),n(fe).forEach(o),ge.forEach(o),le=L(Q,"path",{d:!0,fill:!0,class:!0}),n(le).forEach(o),X=L(Q,"g",{fill:!0,class:!0});var ee=n(X);pe=L(ee,"path",{d:!0}),n(pe).forEach(o),de=L(ee,"path",{d:!0}),n(de).forEach(o),F=L(ee,"path",{d:!0}),n(F).forEach(o),H=L(ee,"path",{d:!0}),n(H).forEach(o),ee.forEach(o),te=L(Q,"g",{fill:!0,class:!0});var ze=n(te);T=L(ze,"path",{d:!0}),n(T).forEach(o),J=L(ze,"path",{d:!0}),n(J).forEach(o),ce=L(ze,"path",{d:!0}),n(ce).forEach(o),ze.forEach(o),Q.forEach(o),this.h()},h(){d(c,"d","M50.5 130.4l-25 43.31h50l25-43.31h-50z"),d(g,"d","M.5 217.01l25-43.3h50l-25 43.3H.5z"),d(_,"d","M125.5 173.71h-50l-25 43.3h50l25-43.3z"),d(E,"d","M175.5 173.71h-50l-25 43.3h50l25-43.3z"),d(k,"d","M150.5 130.4l-25 43.31h50l25-43.31h-50z"),d(z,"d","M175.5 87.1l-25 43.3h50l25-43.3h-50z"),d(A,"d","M200.5 43.8l-25 43.3h50l25-43.3h-50z"),d(y,"d","M225.5.5l-25 43.3h50l25-43.3h-50z"),d(r,"fill","#5e97f6"),d(r,"class","J K"),d(R,"d","M.5 217.01l25 43.3h50l-25-43.3H.5z"),d(N,"d","M125.5 260.31h-50l-25-43.3h50l25 43.3z"),d(V,"d","M175.5 260.31h-50l-25-43.3h50l25 43.3z"),d(C,"fill","#2a56c6"),d(C,"class","J K"),d(x,"d","M200.5 217.01l-25-43.3-25 43.3 25 43.3 25-43.3zm50-86.61l-25-43.3-25 43.3h50z"),d(G,"d","M250.5 43.8l-25 43.3 25 43.3 25-43.3-25-43.3z"),d(w,"fill","#00796b"),d(w,"class","J K"),d(U,"d","M125.5 173.71l-25-43.31-25 43.31h50z"),d(U,"fill","#3367d6"),d(U,"class","J K"),d(K,"d","M250.5 130.4h-50l-25 43.31h50l25-43.31z"),d(Z,"d","M300.5 130.4h-50l-25 43.31h50l25-43.31z"),d(I,"fill","#26a69a"),d(I,"class","J K"),d(Y,"d","M350.5 43.8L325.5.5l-25 43.3 25 43.3 25-43.3z"),d(re,"d","M375.5 87.1l-25-43.3-25 43.3 25 43.3 25-43.3z"),d(se,"d","M400.5 130.4l-25-43.3-25 43.3 25 43.31 25-43.31z"),d(oe,"d","M425.5 173.71l-25-43.31-25 43.31 25 43.3 25-43.3z"),d(ue,"d","M450.5 217.01l-25-43.3-25 43.3 25 43.3 25-43.3zM425.5.5l-25 43.3 25 43.3 25-43.3-25-43.3z"),d(ie,"d","M375.5 87.1l25-43.3 25 43.3-25 43.3-25-43.3zm-25 43.3l-25 43.31 25 43.3 25-43.3-25-43.31z"),d(fe,"d","M325.5 260.31l-25-43.3 25-43.3 25 43.3-25 43.3z"),d(B,"fill","#9c27b0"),d(B,"class","J K"),d(le,"d","M275.5 260.31l-25-43.3h50l25 43.3h-50z"),d(le,"fill","#6a1b9a"),d(le,"class","J K"),d(pe,"d","M225.5 173.71h-50l25 43.3h50l-25-43.3z"),d(de,"d","M275.5 173.71h-50l25 43.3 25-43.3zm0-86.61l25 43.3h50l-25-43.3h-50z"),d(F,"d","M300.5 43.8h-50l25 43.3h50l-25-43.3zm125 216.51l-25-43.3h-50l25 43.3h50z"),d(H,"d","M375.5 173.71l-25 43.3h50l-25-43.3z"),d(X,"fill","#00695c"),d(X,"class","J K"),d(T,"d","M325.5.5h-50l-25 43.3h50l25-43.3zm0 173.21h-50l-25 43.3h50l25-43.3z"),d(J,"d","M350.5 130.4h-50l-25 43.31h50l25-43.31zM425.5.5h-50l-25 43.3h50l25-43.3z"),d(ce,"d","M375.5 87.1l-25-43.3h50l-25 43.3z"),d(te,"fill","#ea80fc"),d(te,"class","J K"),d(e,"class",m[0]),d(e,"xmlns","http://www.w3.org/2000/svg"),d(e,"xmlns:xlink","http://www.w3.org/1999/xlink"),d(e,"aria-hidden","true"),d(e,"focusable","false"),d(e,"role","img"),d(e,"width","1.73em"),d(e,"height","1em"),d(e,"preserveAspectRatio","xMidYMid meet"),d(e,"viewBox","0 0 451 260.81")},m($e,Q){$($e,e,Q),s(e,l),s(l,a),s(e,r),s(r,c),s(r,g),s(r,_),s(r,E),s(r,k),s(r,z),s(r,A),s(r,y),s(e,C),s(C,R),s(C,N),s(C,V),s(e,w),s(w,x),s(w,G),s(e,U),s(e,I),s(I,K),s(I,Z),s(e,B),s(B,Y),s(B,re),s(B,se),s(B,oe),s(B,ue),s(B,ie),s(B,fe),s(e,le),s(e,X),s(X,pe),s(X,de),s(X,F),s(X,H),s(e,te),s(te,T),s(te,J),s(te,ce)},p($e,[Q]){Q&1&&d(e,"class",$e[0])},i:ne,o:ne,d($e){$e&&o(e)}}}function yc(m,e,l){let{classNames:a=""}=e;return m.$$set=r=>{"classNames"in r&&l(0,a=r.classNames)},[a]}class Ac extends Je{constructor(e){super();Ge(this,e,yc,jc,Ye,{classNames:0})}}function qc(m){let e,l;return{c(){e=O("svg"),l=O("path"),this.h()},l(a){e=L(a,"svg",{class:!0,width:!0,height:!0,viewBox:!0,fill:!0,xmlns:!0});var r=n(e);l=L(r,"path",{d:!0,fill:!0}),n(l).forEach(o),r.forEach(o),this.h()},h(){d(l,"d","M0 4.50001C0.390979 2.37042 2.25728 0.756592 4.5 0.756592C6.74272 0.756592 8.60861 2.37042 9 4.50001C8.60902 6.62959 6.74272 8.24342 4.5 8.24342C2.25728 8.24342 0.391395 6.62959 0 4.50001ZM4.5 6.57968C5.05156 6.57968 5.58054 6.36057 5.97055 5.97056C6.36057 5.58054 6.57967 5.05157 6.57967 4.50001C6.57967 3.94844 6.36057 3.41947 5.97055 3.02945C5.58054 2.63944 5.05156 2.42033 4.5 2.42033C3.94844 2.42033 3.41946 2.63944 3.02945 3.02945C2.63943 3.41947 2.42033 3.94844 2.42033 4.50001C2.42033 5.05157 2.63943 5.58054 3.02945 5.97056C3.41946 6.36057 3.94844 6.57968 4.5 6.57968ZM4.5 5.74781C4.16906 5.74781 3.85168 5.61635 3.61767 5.38234C3.38366 5.14833 3.2522 4.83094 3.2522 4.50001C3.2522 4.16907 3.38366 3.85168 3.61767 3.61767C3.85168 3.38367 4.16906 3.2522 4.5 3.2522C4.83094 3.2522 5.14832 3.38367 5.38233 3.61767C5.61634 3.85168 5.7478 4.16907 5.7478 4.50001C5.7478 4.83094 5.61634 5.14833 5.38233 5.38234C5.14832 5.61635 4.83094 5.74781 4.5 5.74781Z"),d(l,"fill","currentColor"),d(e,"class",m[0]),d(e,"width",m[1]),d(e,"height",m[1]),d(e,"viewBox","0 0 9 9"),d(e,"fill","currentColor"),d(e,"xmlns","http://www.w3.org/2000/svg")},m(a,r){$(a,e,r),s(e,l)},p(a,[r]){r&1&&d(e,"class",a[0]),r&2&&d(e,"width",a[1]),r&2&&d(e,"height",a[1])},i:ne,o:ne,d(a){a&&o(e)}}}function zc(m,e,l){let{classNames:a=""}=e,{size:r="1em"}=e;return m.$$set=c=>{"classNames"in c&&l(0,a=c.classNames),"size"in c&&l(1,r=c.size)},[a,r]}class Cc extends Je{constructor(e){super();Ge(this,e,zc,qc,Ye,{classNames:0,size:1})}}function xc(m){let e,l;return{c(){e=O("svg"),l=O("path"),this.h()},l(a){e=L(a,"svg",{class:!0,width:!0,height:!0,viewBox:!0,fill:!0,xmlns:!0});var r=n(e);l=L(r,"path",{d:!0,fill:!0}),n(l).forEach(o),r.forEach(o),this.h()},h(){d(l,"d","M1.39125 1.9725L0.0883333 0.669997L0.677917 0.0804138L8.9275 8.33041L8.33792 8.91958L6.95875 7.54041C6.22592 8.00523 5.37572 8.25138 4.50792 8.25C2.26125 8.25 0.392083 6.63333 0 4.5C0.179179 3.52946 0.667345 2.64287 1.39167 1.9725H1.39125ZM5.65667 6.23833L5.04667 5.62833C4.81335 5.73996 4.55116 5.77647 4.29622 5.73282C4.04129 5.68918 3.80617 5.56752 3.62328 5.38463C3.44039 5.20175 3.31874 4.96663 3.27509 4.71169C3.23144 4.45676 3.26795 4.19456 3.37958 3.96125L2.76958 3.35125C2.50447 3.75187 2.38595 4.2318 2.4341 4.70978C2.48225 5.18777 2.6941 5.63442 3.0338 5.97411C3.37349 6.31381 3.82015 6.52567 4.29813 6.57382C4.77611 6.62197 5.25605 6.50345 5.65667 6.23833ZM2.83042 1.06666C3.35 0.862497 3.91625 0.749997 4.50792 0.749997C6.75458 0.749997 8.62375 2.36666 9.01583 4.5C8.88816 5.19404 8.60119 5.84899 8.1775 6.41333L6.56917 4.805C6.61694 4.48317 6.58868 4.15463 6.48664 3.84569C6.3846 3.53675 6.21162 3.256 5.98156 3.02594C5.7515 2.79588 5.47075 2.6229 5.16181 2.52086C4.85287 2.41882 4.52433 2.39056 4.2025 2.43833L2.83042 1.06708V1.06666Z"),d(l,"fill","currentColor"),d(e,"class",m[0]),d(e,"width",m[1]),d(e,"height",m[1]),d(e,"viewBox","0 0 10 9"),d(e,"fill","currentColor"),d(e,"xmlns","http://www.w3.org/2000/svg")},m(a,r){$(a,e,r),s(e,l)},p(a,[r]){r&1&&d(e,"class",a[0]),r&2&&d(e,"width",a[1]),r&2&&d(e,"height",a[1])},i:ne,o:ne,d(a){a&&o(e)}}}function Tc(m,e,l){let{classNames:a=""}=e,{size:r="1em"}=e;return m.$$set=c=>{"classNames"in c&&l(0,a=c.classNames),"size"in c&&l(1,r=c.size)},[a,r]}class Mc extends Je{constructor(e){super();Ge(this,e,Tc,xc,Ye,{classNames:0,size:1})}}const{window:Pc}=dc;function sc(m){let e,l,a,r,c,g,_,E,k,z;return l=new Mc({props:{size:"0.9em"}}),{c(){e=u("div"),M(l.$$.fragment),a=v(),r=u("span"),c=i("Hide "),g=i(m[3]),_=i(" content"),this.h()},l(A){e=f(A,"DIV",{class:!0});var y=n(e);D(l.$$.fragment,y),a=b(y),r=f(y,"SPAN",{});var C=n(r);c=p(C,"Hide "),g=p(C,m[3]),_=p(C," content"),C.forEach(o),y.forEach(o),this.h()},h(){d(e,"class","cursor-pointer flex items-center justify-center space-x-1 text-sm px-2 bg-white dark:bg-gray-950 hover:underline leading-none")},m(A,y){$(A,e,y),P(l,e,null),s(e,a),s(e,r),s(r,c),s(r,g),s(r,_),E=!0,k||(z=vi(e,"click",m[5]),k=!0)},p:ne,i(A){E||(j(l.$$.fragment,A),E=!0)},o(A){q(l.$$.fragment,A),E=!1},d(A){A&&o(e),S(l),k=!1,z()}}}function Sc(m){let e,l;const a=m[10].default,r=Ns(a,m,m[9],null);return{c(){e=u("div"),r&&r.c(),this.h()},l(c){e=f(c,"DIV",{class:!0});var g=n(e);r&&r.l(g),g.forEach(o),this.h()},h(){d(e,"class","framework-content")},m(c,g){$(c,e,g),r&&r.m(e,null),l=!0},p(c,g){r&&r.p&&(!l||g&512)&&Is(r,a,c,c[9],l?Rs(a,c[9],g,null):Hs(c[9]),null)},i(c){l||(j(r,c),l=!0)},o(c){q(r,c),l=!1},d(c){c&&o(e),r&&r.d(c)}}}function Dc(m){let e,l,a,r,c,g,_,E,k,z;return l=new Cc({props:{size:"0.9em"}}),{c(){e=u("div"),M(l.$$.fragment),a=v(),r=u("span"),c=i("Show "),g=i(m[3]),_=i(" content"),this.h()},l(A){e=f(A,"DIV",{class:!0});var y=n(e);D(l.$$.fragment,y),a=b(y),r=f(y,"SPAN",{});var C=n(r);c=p(C,"Show "),g=p(C,m[3]),_=p(C," content"),C.forEach(o),y.forEach(o),this.h()},h(){d(e,"class","cursor-pointer mt-[-12.5px] flex items-center justify-center space-x-1 py-4 text-sm hover:underline leading-none")},m(A,y){$(A,e,y),P(l,e,null),s(e,a),s(e,r),s(r,c),s(r,g),s(r,_),E=!0,k||(z=vi(e,"click",m[5]),k=!0)},p:ne,i(A){E||(j(l.$$.fragment,A),E=!0)},o(A){q(l.$$.fragment,A),E=!1},d(A){A&&o(e),S(l),k=!1,z()}}}function Fc(m){let e,l,a,r,c,g,_,E,k,z,A,y,C,R;var N=m[2];function V(I){return{}}N&&(r=new N(V()));let w=!m[1]&&sc(m);const x=[Dc,Sc],G=[];function U(I,K){return I[1]?0:1}return z=U(m),A=G[z]=x[z](m),{c(){e=u("div"),l=u("div"),a=u("div"),r&&M(r.$$.fragment),c=v(),g=u("span"),_=i(m[3]),E=v(),w&&w.c(),k=v(),A.c(),this.h()},l(I){e=f(I,"DIV",{class:!0});var K=n(e);l=f(K,"DIV",{class:!0});var Z=n(l);a=f(Z,"DIV",{class:!0});var B=n(a);r&&D(r.$$.fragment,B),c=b(B),g=f(B,"SPAN",{});var Y=n(g);_=p(Y,m[3]),Y.forEach(o),B.forEach(o),E=b(Z),w&&w.l(Z),Z.forEach(o),k=b(K),A.l(K),K.forEach(o),this.h()},h(){d(a,"class","flex px-1 items-center space-x-1 bg-white dark:bg-gray-950"),d(l,"class","flex h-[22px] mt-[-12.5px] justify-between leading-none"),d(e,"class","border border-gray-200 rounded-xl px-4 relative")},m(I,K){$(I,e,K),s(e,l),s(l,a),r&&P(r,a,null),s(a,c),s(a,g),s(g,_),s(l,E),w&&w.m(l,null),s(e,k),G[z].m(e,null),m[11](e),y=!0,C||(R=vi(Pc,"hashchange",m[6]),C=!0)},p(I,[K]){if(N!==(N=I[2])){if(r){qa();const B=r;q(B.$$.fragment,1,0,()=>{S(B,1)}),za()}N?(r=new N(V()),M(r.$$.fragment),j(r.$$.fragment,1),P(r,a,c)):r=null}I[1]?w&&(qa(),q(w,1,1,()=>{w=null}),za()):w?(w.p(I,K),K&2&&j(w,1)):(w=sc(I),w.c(),j(w,1),w.m(l,null));let Z=z;z=U(I),z===Z?G[z].p(I,K):(qa(),q(G[Z],1,1,()=>{G[Z]=null}),za(),A=G[z],A?A.p(I,K):(A=G[z]=x[z](I),A.c()),j(A,1),A.m(e,null))},i(I){y||(r&&j(r.$$.fragment,I),j(w),j(A),y=!0)},o(I){r&&q(r.$$.fragment,I),q(w),q(A),y=!1},d(I){I&&o(e),r&&S(r),w&&w.d(),G[z].d(),m[11](null),C=!1,R()}}}function Oc(m,e,l){let a,r,{$$slots:c={},$$scope:g}=e,{framework:_}=e,E,k=new Set;const z={pytorch:{Icon:bc,label:"Pytorch"},tensorflow:{Icon:kc,label:"TensorFlow"},jax:{Icon:Ac,label:"JAX"}},{Icon:A,label:y}=z[_],C=`hf_doc_framework_${_}_is_hidden`,R=gc(_);fc(m,R,x=>l(8,r=x));function N(){dr(R,r=r!==Ne.CLOSED?Ne.CLOSED:Ne.OPEN,r),localStorage.setItem(C,r)}function V(){const x=window.location.hash.slice(1);k.has(x)&&(dr(R,r=Ne.HASHASHLINK,r),localStorage.setItem(C,r))}cc(()=>{const x=window.location.hash.slice(1),G="header-link",U=E.querySelectorAll(`.${G}`);k=new Set([...U].map(K=>K.id));const I=localStorage.getItem(C);k.has(x)?dr(R,r=Ne.HASHASHLINK,r):I===Ne.CLOSED&&r!==Ne.HASHASHLINK&&dr(R,r=Ne.CLOSED,r)});function w(x){mc[x?"unshift":"push"](()=>{E=x,l(0,E)})}return m.$$set=x=>{"framework"in x&&l(7,_=x.framework),"$$scope"in x&&l(9,g=x.$$scope)},m.$$.update=()=>{m.$$.dirty&256&&l(1,a=r===Ne.CLOSED)},[E,a,A,y,R,N,V,_,r,g,c,w]}class bi extends Je{constructor(e){super();Ge(this,e,Oc,Fc,Ye,{framework:7})}}const Lc=m=>({}),oc=m=>({}),Nc=m=>({}),rc=m=>({}),Ic=m=>({}),lc=m=>({});function nc(m){let e,l;return e=new bi({props:{framework:"pytorch",$$slots:{default:[Hc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&16&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Hc(m){let e;const l=m[3].pytorch,a=Ns(l,m,m[4],lc);return{c(){a&&a.c()},l(r){a&&a.l(r)},m(r,c){a&&a.m(r,c),e=!0},p(r,c){a&&a.p&&(!e||c&16)&&Is(a,l,r,r[4],e?Rs(l,r[4],c,Ic):Hs(r[4]),lc)},i(r){e||(j(a,r),e=!0)},o(r){q(a,r),e=!1},d(r){a&&a.d(r)}}}function ic(m){let e,l;return e=new bi({props:{framework:"tensorflow",$$slots:{default:[Rc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&16&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Rc(m){let e;const l=m[3].tensorflow,a=Ns(l,m,m[4],rc);return{c(){a&&a.c()},l(r){a&&a.l(r)},m(r,c){a&&a.m(r,c),e=!0},p(r,c){a&&a.p&&(!e||c&16)&&Is(a,l,r,r[4],e?Rs(l,r[4],c,Nc):Hs(r[4]),rc)},i(r){e||(j(a,r),e=!0)},o(r){q(a,r),e=!1},d(r){a&&a.d(r)}}}function pc(m){let e,l;return e=new bi({props:{framework:"jax",$$slots:{default:[Uc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&16&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Uc(m){let e;const l=m[3].jax,a=Ns(l,m,m[4],oc);return{c(){a&&a.c()},l(r){a&&a.l(r)},m(r,c){a&&a.m(r,c),e=!0},p(r,c){a&&a.p&&(!e||c&16)&&Is(a,l,r,r[4],e?Rs(l,r[4],c,Lc):Hs(r[4]),oc)},i(r){e||(j(a,r),e=!0)},o(r){q(a,r),e=!1},d(r){a&&a.d(r)}}}function Vc(m){let e,l,a,r,c=m[0]&&nc(m),g=m[1]&&ic(m),_=m[2]&&pc(m);return{c(){e=u("div"),c&&c.c(),l=v(),g&&g.c(),a=v(),_&&_.c(),this.h()},l(E){e=f(E,"DIV",{class:!0});var k=n(e);c&&c.l(k),l=b(k),g&&g.l(k),a=b(k),_&&_.l(k),k.forEach(o),this.h()},h(){d(e,"class","space-y-10 py-6 2xl:py-8 2xl:-mx-4")},m(E,k){$(E,e,k),c&&c.m(e,null),s(e,l),g&&g.m(e,null),s(e,a),_&&_.m(e,null),r=!0},p(E,[k]){E[0]?c?(c.p(E,k),k&1&&j(c,1)):(c=nc(E),c.c(),j(c,1),c.m(e,l)):c&&(qa(),q(c,1,1,()=>{c=null}),za()),E[1]?g?(g.p(E,k),k&2&&j(g,1)):(g=ic(E),g.c(),j(g,1),g.m(e,a)):g&&(qa(),q(g,1,1,()=>{g=null}),za()),E[2]?_?(_.p(E,k),k&4&&j(_,1)):(_=pc(E),_.c(),j(_,1),_.m(e,null)):_&&(qa(),q(_,1,1,()=>{_=null}),za())},i(E){r||(j(c),j(g),j(_),r=!0)},o(E){q(c),q(g),q(_),r=!1},d(E){E&&o(e),c&&c.d(),g&&g.d(),_&&_.d()}}}function Kc(m,e,l){let{$$slots:a={},$$scope:r}=e,{pytorch:c=!1}=e,{tensorflow:g=!1}=e,{jax:_=!1}=e;return m.$$set=E=>{"pytorch"in E&&l(0,c=E.pytorch),"tensorflow"in E&&l(1,g=E.tensorflow),"jax"in E&&l(2,_=E.jax),"$$scope"in E&&l(4,r=E.$$scope)},[c,g,_,a,r]}class ya extends Je{constructor(e){super();Ge(this,e,Kc,Vc,Ye,{pytorch:0,tensorflow:1,jax:2})}}function Bc(m){let e;const l=m[1].default,a=Ns(l,m,m[0],null);return{c(){a&&a.c()},l(r){a&&a.l(r)},m(r,c){a&&a.m(r,c),e=!0},p(r,[c]){a&&a.p&&(!e||c&1)&&Is(a,l,r,r[0],e?Rs(l,r[0],c,null):Hs(r[0]),null)},i(r){e||(j(a,r),e=!0)},o(r){q(a,r),e=!1},d(r){a&&a.d(r)}}}function Jc(m,e,l){let{$$slots:a={},$$scope:r}=e;return m.$$set=c=>{"$$scope"in c&&l(0,r=c.$$scope)},[r,a]}class Ae extends Je{constructor(e){super();Ge(this,e,Jc,Bc,Ye,{})}}function Gc(m){let e,l;return{c(){e=u("p"),l=i(`Todos los ejemplos de c\xF3digo presentados en la documentaci\xF3n tienen un bot\xF3n arriba a la izquierda para elegir entre Pytorch y TensorFlow.
Si no fuese as\xED, se espera que el c\xF3digo funcione para ambos backends sin ning\xFAn cambio.`)},l(a){e=f(a,"P",{});var r=n(e);l=p(r,`Todos los ejemplos de c\xF3digo presentados en la documentaci\xF3n tienen un bot\xF3n arriba a la izquierda para elegir entre Pytorch y TensorFlow.
Si no fuese as\xED, se espera que el c\xF3digo funcione para ambos backends sin ning\xFAn cambio.`),r.forEach(o)},m(a,r){$(a,e,r),s(e,l)},d(a){a&&o(e)}}}function Yc(m){let e,l,a,r,c,g,_,E;return{c(){e=u("p"),l=i("Para m\xE1s detalles acerca del "),a=u("code"),r=i("pipeline()"),c=i(" y tareas asociadas, consulta la documentaci\xF3n "),g=u("a"),_=i("aqu\xED"),E=i("."),this.h()},l(k){e=f(k,"P",{});var z=n(e);l=p(z,"Para m\xE1s detalles acerca del "),a=f(z,"CODE",{});var A=n(a);r=p(A,"pipeline()"),A.forEach(o),c=p(z," y tareas asociadas, consulta la documentaci\xF3n "),g=f(z,"A",{href:!0});var y=n(g);_=p(y,"aqu\xED"),y.forEach(o),E=p(z,"."),z.forEach(o),this.h()},h(){d(g,"href","./main_classes/pipelines")},m(k,z){$(k,e,z),s(e,l),s(e,a),s(a,r),s(e,c),s(e,g),s(g,_),s(e,E)},d(k){k&&o(e)}}}function Zc(m){let e,l;return e=new W({props:{code:"pip install torch",highlighted:"pip install torch"}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Qc(m){let e,l;return e=new Ae({props:{$$slots:{default:[Zc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Wc(m){let e,l;return e=new W({props:{code:"pip install tensorflow",highlighted:"pip install tensorflow"}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Xc(m){let e,l;return e=new Ae({props:{$$slots:{default:[Wc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function eu(m){let e,l,a,r,c,g,_,E,k,z,A;return z=new W({props:{code:`from transformers import AutoTokenizer, AutoModelForSequenceClassification

model = AutoModelForSequenceClassification.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(model_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_name)`}}),{c(){e=u("p"),l=i("Usa "),a=u("code"),r=i("AutoModelForSequenceClassification"),c=i(" y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),g=u("code"),_=i("AutoClass"),E=i(" debajo):"),k=v(),M(z.$$.fragment)},l(y){e=f(y,"P",{});var C=n(e);l=p(C,"Usa "),a=f(C,"CODE",{});var R=n(a);r=p(R,"AutoModelForSequenceClassification"),R.forEach(o),c=p(C," y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),g=f(C,"CODE",{});var N=n(g);_=p(N,"AutoClass"),N.forEach(o),E=p(C," debajo):"),C.forEach(o),k=b(y),D(z.$$.fragment,y)},m(y,C){$(y,e,C),s(e,l),s(e,a),s(a,r),s(e,c),s(e,g),s(g,_),s(e,E),$(y,k,C),P(z,y,C),A=!0},p:ne,i(y){A||(j(z.$$.fragment,y),A=!0)},o(y){q(z.$$.fragment,y),A=!1},d(y){y&&o(e),y&&o(k),S(z,y)}}}function tu(m){let e,l;return e=new Ae({props:{$$slots:{default:[eu]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function au(m){let e,l,a,r,c,g,_,E,k,z,A;return z=new W({props:{code:`from transformers import AutoTokenizer, TFAutoModelForSequenceClassification

model = TFAutoModelForSequenceClassification.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(model_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_name)`}}),{c(){e=u("p"),l=i("Usa "),a=u("code"),r=i("TFAutoModelForSequenceClassification"),c=i(" y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),g=u("code"),_=i("TFAutoClass"),E=i(" debajo):"),k=v(),M(z.$$.fragment)},l(y){e=f(y,"P",{});var C=n(e);l=p(C,"Usa "),a=f(C,"CODE",{});var R=n(a);r=p(R,"TFAutoModelForSequenceClassification"),R.forEach(o),c=p(C," y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),g=f(C,"CODE",{});var N=n(g);_=p(N,"TFAutoClass"),N.forEach(o),E=p(C," debajo):"),C.forEach(o),k=b(y),D(z.$$.fragment,y)},m(y,C){$(y,e,C),s(e,l),s(e,a),s(a,r),s(e,c),s(e,g),s(g,_),s(e,E),$(y,k,C),P(z,y,C),A=!0},p:ne,i(y){A||(j(z.$$.fragment,y),A=!0)},o(y){q(z.$$.fragment,y),A=!1},d(y){y&&o(e),y&&o(k),S(z,y)}}}function su(m){let e,l;return e=new Ae({props:{$$slots:{default:[au]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function ou(m){let e,l;return e=new W({props:{code:`pt_batch = tokenizer(
    ["We are very happy to show you the \u{1F917} Transformers library.", "We hope you don't hate it."],
    padding=True,
    truncation=True,
    max_length=512,
    return_tensors="pt",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pt_batch = tokenizer(
<span class="hljs-meta">... </span>    [<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>, <span class="hljs-string">&quot;We hope you don&#x27;t hate it.&quot;</span>],
<span class="hljs-meta">... </span>    padding=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    truncation=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    max_length=<span class="hljs-number">512</span>,
<span class="hljs-meta">... </span>    return_tensors=<span class="hljs-string">&quot;pt&quot;</span>,
<span class="hljs-meta">... </span>)`}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function ru(m){let e,l;return e=new Ae({props:{$$slots:{default:[ou]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function lu(m){let e,l;return e=new W({props:{code:`tf_batch = tokenizer(
    ["We are very happy to show you the \u{1F917} Transformers library.", "We hope you don't hate it."],
    padding=True,
    truncation=True,
    max_length=512,
    return_tensors="tf",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tf_batch = tokenizer(
<span class="hljs-meta">... </span>    [<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>, <span class="hljs-string">&quot;We hope you don&#x27;t hate it.&quot;</span>],
<span class="hljs-meta">... </span>    padding=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    truncation=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    max_length=<span class="hljs-number">512</span>,
<span class="hljs-meta">... </span>    return_tensors=<span class="hljs-string">&quot;tf&quot;</span>,
<span class="hljs-meta">... </span>)`}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function nu(m){let e,l;return e=new Ae({props:{$$slots:{default:[lu]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function iu(m){let e,l,a,r,c,g,_,E;return{c(){e=u("p"),l=i("Ve el "),a=u("a"),r=i("task summary"),c=i(" para revisar qu\xE9 clase del "),g=u("code"),_=i("AutoModel"),E=i(" deber\xEDas usar para cada tarea."),this.h()},l(k){e=f(k,"P",{});var z=n(e);l=p(z,"Ve el "),a=f(z,"A",{href:!0});var A=n(a);r=p(A,"task summary"),A.forEach(o),c=p(z," para revisar qu\xE9 clase del "),g=f(z,"CODE",{});var y=n(g);_=p(y,"AutoModel"),y.forEach(o),E=p(z," deber\xEDas usar para cada tarea."),z.forEach(o),this.h()},h(){d(a,"href","./task_summary")},m(k,z){$(k,e,z),s(e,l),s(e,a),s(a,r),s(e,c),s(e,g),s(g,_),s(e,E)},d(k){k&&o(e)}}}function pu(m){let e,l,a,r,c,g,_,E,k,z,A,y,C,R,N,V,w,x,G,U,I,K,Z,B,Y,re,se,oe,ue,ie,fe,le,X,pe,de,F,H,te;return V=new W({props:{code:`from transformers import AutoModelForSequenceClassification

model_name = "nlptown/bert-base-multilingual-uncased-sentiment"
pt_model = AutoModelForSequenceClassification.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(model_name)`}}),x=new Aa({props:{$$slots:{default:[iu]},$$scope:{ctx:m}}}),re=new W({props:{code:"pt_outputs = pt_model(**pt_batch)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>pt_outputs = pt_model(**pt_batch)'}}),H=new W({props:{code:`from torch import nn

pt_predictions = nn.functional.softmax(pt_outputs.logits, dim=-1)
print(pt_predictions)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn

<span class="hljs-meta">&gt;&gt;&gt; </span>pt_predictions = nn.functional.softmax(pt_outputs.logits, dim=-<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(pt_predictions)
tensor([[<span class="hljs-number">0.0021</span>, <span class="hljs-number">0.0018</span>, <span class="hljs-number">0.0115</span>, <span class="hljs-number">0.2121</span>, <span class="hljs-number">0.7725</span>],
        [<span class="hljs-number">0.2084</span>, <span class="hljs-number">0.1826</span>, <span class="hljs-number">0.1969</span>, <span class="hljs-number">0.1755</span>, <span class="hljs-number">0.2365</span>]], grad_fn=&lt;SoftmaxBackward0&gt;)`}}),{c(){e=u("p"),l=i("\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),a=u("code"),r=i("AutoModel"),c=i(" como cargar\xEDas un "),g=u("code"),_=i("AutoTokenizer"),E=i(". La \xFAnica diferencia es seleccionar el "),k=u("code"),z=i("AutoModel"),A=i(" correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),y=u("code"),C=i("AutoModelForSequenceClassification"),R=i(":"),N=v(),M(V.$$.fragment),w=v(),M(x.$$.fragment),G=v(),U=u("p"),I=i("Ahora puedes pasar tu lote (batch) preprocesado de inputs directamente al modelo. Solo tienes que desempacar el diccionario a\xF1adiendo "),K=u("code"),Z=i("**"),B=i(":"),Y=v(),M(re.$$.fragment),se=v(),oe=u("p"),ue=i("El modelo producir\xE1 las activaciones finales en el atributo "),ie=u("code"),fe=i("logits"),le=i(". Aplica la funci\xF3n softmax a "),X=u("code"),pe=i("logits"),de=i(" para obtener las probabilidades:"),F=v(),M(H.$$.fragment)},l(T){e=f(T,"P",{});var J=n(e);l=p(J,"\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),a=f(J,"CODE",{});var ce=n(a);r=p(ce,"AutoModel"),ce.forEach(o),c=p(J," como cargar\xEDas un "),g=f(J,"CODE",{});var $e=n(g);_=p($e,"AutoTokenizer"),$e.forEach(o),E=p(J,". La \xFAnica diferencia es seleccionar el "),k=f(J,"CODE",{});var Q=n(k);z=p(Q,"AutoModel"),Q.forEach(o),A=p(J," correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),y=f(J,"CODE",{});var ke=n(y);C=p(ke,"AutoModelForSequenceClassification"),ke.forEach(o),R=p(J,":"),J.forEach(o),N=b(T),D(V.$$.fragment,T),w=b(T),D(x.$$.fragment,T),G=b(T),U=f(T,"P",{});var ae=n(U);I=p(ae,"Ahora puedes pasar tu lote (batch) preprocesado de inputs directamente al modelo. Solo tienes que desempacar el diccionario a\xF1adiendo "),K=f(ae,"CODE",{});var je=n(K);Z=p(je,"**"),je.forEach(o),B=p(ae,":"),ae.forEach(o),Y=b(T),D(re.$$.fragment,T),se=b(T),oe=f(T,"P",{});var ve=n(oe);ue=p(ve,"El modelo producir\xE1 las activaciones finales en el atributo "),ie=f(ve,"CODE",{});var qe=n(ie);fe=p(qe,"logits"),qe.forEach(o),le=p(ve,". Aplica la funci\xF3n softmax a "),X=f(ve,"CODE",{});var ge=n(X);pe=p(ge,"logits"),ge.forEach(o),de=p(ve," para obtener las probabilidades:"),ve.forEach(o),F=b(T),D(H.$$.fragment,T)},m(T,J){$(T,e,J),s(e,l),s(e,a),s(a,r),s(e,c),s(e,g),s(g,_),s(e,E),s(e,k),s(k,z),s(e,A),s(e,y),s(y,C),s(e,R),$(T,N,J),P(V,T,J),$(T,w,J),P(x,T,J),$(T,G,J),$(T,U,J),s(U,I),s(U,K),s(K,Z),s(U,B),$(T,Y,J),P(re,T,J),$(T,se,J),$(T,oe,J),s(oe,ue),s(oe,ie),s(ie,fe),s(oe,le),s(oe,X),s(X,pe),s(oe,de),$(T,F,J),P(H,T,J),te=!0},p(T,J){const ce={};J&2&&(ce.$$scope={dirty:J,ctx:T}),x.$set(ce)},i(T){te||(j(V.$$.fragment,T),j(x.$$.fragment,T),j(re.$$.fragment,T),j(H.$$.fragment,T),te=!0)},o(T){q(V.$$.fragment,T),q(x.$$.fragment,T),q(re.$$.fragment,T),q(H.$$.fragment,T),te=!1},d(T){T&&o(e),T&&o(N),S(V,T),T&&o(w),S(x,T),T&&o(G),T&&o(U),T&&o(Y),S(re,T),T&&o(se),T&&o(oe),T&&o(F),S(H,T)}}}function cu(m){let e,l;return e=new Ae({props:{$$slots:{default:[pu]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function uu(m){let e;return{c(){e=i("Ve el [task summary](./task_summary) para revisar qu\xE9 clase del `AutoModel`\n  deber\xEDas usar para cada tarea.")},l(l){e=p(l,"Ve el [task summary](./task_summary) para revisar qu\xE9 clase del `AutoModel`\n  deber\xEDas usar para cada tarea.")},m(l,a){$(l,e,a)},d(l){l&&o(e)}}}function fu(m){let e,l,a,r,c,g,_,E,k,z,A,y,C,R,N,V,w,x,G,U,I,K,Z,B,Y,re,se,oe,ue,ie,fe,le,X,pe,de;return V=new W({props:{code:`from transformers import TFAutoModelForSequenceClassification

model_name = "nlptown/bert-base-multilingual-uncased-sentiment"
tf_model = TFAutoModelForSequenceClassification.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(model_name)`}}),x=new Aa({props:{$$slots:{default:[uu]},$$scope:{ctx:m}}}),Z=new W({props:{code:"tf_outputs = tf_model(tf_batch)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_outputs = tf_model(tf_batch)'}}),pe=new W({props:{code:`import tensorflow as tf

tf_predictions = tf.nn.softmax(tf_outputs.logits, axis=-1)
print(tf.math.round(tf_predictions * 10**4) / 10**4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

<span class="hljs-meta">&gt;&gt;&gt; </span>tf_predictions = tf.nn.softmax(tf_outputs.logits, axis=-<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(tf.math.<span class="hljs-built_in">round</span>(tf_predictions * <span class="hljs-number">10</span>**<span class="hljs-number">4</span>) / <span class="hljs-number">10</span>**<span class="hljs-number">4</span>)
tf.Tensor(
[[<span class="hljs-number">0.0021</span> <span class="hljs-number">0.0018</span> <span class="hljs-number">0.0116</span> <span class="hljs-number">0.2121</span> <span class="hljs-number">0.7725</span>]
 [<span class="hljs-number">0.2084</span> <span class="hljs-number">0.1826</span> <span class="hljs-number">0.1969</span> <span class="hljs-number">0.1755</span>  <span class="hljs-number">0.2365</span>]], shape=(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>), dtype=float32)`}}),{c(){e=u("p"),l=i("\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),a=u("code"),r=i("TFAutoModel"),c=i(" como cargar\xEDas un "),g=u("code"),_=i("AutoTokenizer"),E=i(". La \xFAnica diferencia es seleccionar el "),k=u("code"),z=i("TFAutoModel"),A=i(" correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),y=u("code"),C=i("TFAutoModelForSequenceClassification"),R=i(":"),N=v(),M(V.$$.fragment),w=v(),M(x.$$.fragment),G=v(),U=u("p"),I=i("Ahora puedes pasar tu lote preprocesado de inputs directamente al modelo pasando las llaves del diccionario directamente a los tensores:"),K=v(),M(Z.$$.fragment),B=v(),Y=u("p"),re=i("El modelo producir\xE1 las activaciones finales en el atributo "),se=u("code"),oe=i("logits"),ue=i(". Aplica la funci\xF3n softmax a "),ie=u("code"),fe=i("logits"),le=i(" para obtener las probabilidades:"),X=v(),M(pe.$$.fragment)},l(F){e=f(F,"P",{});var H=n(e);l=p(H,"\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),a=f(H,"CODE",{});var te=n(a);r=p(te,"TFAutoModel"),te.forEach(o),c=p(H," como cargar\xEDas un "),g=f(H,"CODE",{});var T=n(g);_=p(T,"AutoTokenizer"),T.forEach(o),E=p(H,". La \xFAnica diferencia es seleccionar el "),k=f(H,"CODE",{});var J=n(k);z=p(J,"TFAutoModel"),J.forEach(o),A=p(H," correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),y=f(H,"CODE",{});var ce=n(y);C=p(ce,"TFAutoModelForSequenceClassification"),ce.forEach(o),R=p(H,":"),H.forEach(o),N=b(F),D(V.$$.fragment,F),w=b(F),D(x.$$.fragment,F),G=b(F),U=f(F,"P",{});var $e=n(U);I=p($e,"Ahora puedes pasar tu lote preprocesado de inputs directamente al modelo pasando las llaves del diccionario directamente a los tensores:"),$e.forEach(o),K=b(F),D(Z.$$.fragment,F),B=b(F),Y=f(F,"P",{});var Q=n(Y);re=p(Q,"El modelo producir\xE1 las activaciones finales en el atributo "),se=f(Q,"CODE",{});var ke=n(se);oe=p(ke,"logits"),ke.forEach(o),ue=p(Q,". Aplica la funci\xF3n softmax a "),ie=f(Q,"CODE",{});var ae=n(ie);fe=p(ae,"logits"),ae.forEach(o),le=p(Q," para obtener las probabilidades:"),Q.forEach(o),X=b(F),D(pe.$$.fragment,F)},m(F,H){$(F,e,H),s(e,l),s(e,a),s(a,r),s(e,c),s(e,g),s(g,_),s(e,E),s(e,k),s(k,z),s(e,A),s(e,y),s(y,C),s(e,R),$(F,N,H),P(V,F,H),$(F,w,H),P(x,F,H),$(F,G,H),$(F,U,H),s(U,I),$(F,K,H),P(Z,F,H),$(F,B,H),$(F,Y,H),s(Y,re),s(Y,se),s(se,oe),s(Y,ue),s(Y,ie),s(ie,fe),s(Y,le),$(F,X,H),P(pe,F,H),de=!0},p(F,H){const te={};H&2&&(te.$$scope={dirty:H,ctx:F}),x.$set(te)},i(F){de||(j(V.$$.fragment,F),j(x.$$.fragment,F),j(Z.$$.fragment,F),j(pe.$$.fragment,F),de=!0)},o(F){q(V.$$.fragment,F),q(x.$$.fragment,F),q(Z.$$.fragment,F),q(pe.$$.fragment,F),de=!1},d(F){F&&o(e),F&&o(N),S(V,F),F&&o(w),S(x,F),F&&o(G),F&&o(U),F&&o(K),S(Z,F),F&&o(B),F&&o(Y),F&&o(X),S(pe,F)}}}function du(m){let e,l;return e=new Ae({props:{$$slots:{default:[fu]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function mu(m){let e,l,a,r,c;return{c(){e=u("p"),l=i("Todos los modelos de \u{1F917} Transformers (PyTorch o TensorFlow) producir\xE1n los tensores "),a=u("em"),r=i("antes"),c=i(` de la funci\xF3n de activaci\xF3n
final (como softmax) porque la funci\xF3n de activaci\xF3n final es com\xFAnmente fusionada con la p\xE9rdida.`)},l(g){e=f(g,"P",{});var _=n(e);l=p(_,"Todos los modelos de \u{1F917} Transformers (PyTorch o TensorFlow) producir\xE1n los tensores "),a=f(_,"EM",{});var E=n(a);r=p(E,"antes"),E.forEach(o),c=p(_,` de la funci\xF3n de activaci\xF3n
final (como softmax) porque la funci\xF3n de activaci\xF3n final es com\xFAnmente fusionada con la p\xE9rdida.`),_.forEach(o)},m(g,_){$(g,e,_),s(e,l),s(e,a),s(a,r),s(e,c)},d(g){g&&o(e)}}}function hu(m){let e,l,a,r,c;return{c(){e=u("p"),l=i(`Los outputs del modelo de \u{1F917} Transformers son dataclasses especiales por lo que sus atributos pueden ser completados en un IDE.
Los outputs del modelo tambi\xE9n se comportan como tuplas o diccionarios (e.g., puedes indexar con un entero, un slice o una cadena) en cuyo caso los atributos que son `),a=u("code"),r=i("None"),c=i(" son ignorados.")},l(g){e=f(g,"P",{});var _=n(e);l=p(_,`Los outputs del modelo de \u{1F917} Transformers son dataclasses especiales por lo que sus atributos pueden ser completados en un IDE.
Los outputs del modelo tambi\xE9n se comportan como tuplas o diccionarios (e.g., puedes indexar con un entero, un slice o una cadena) en cuyo caso los atributos que son `),a=f(_,"CODE",{});var E=n(a);r=p(E,"None"),E.forEach(o),c=p(_," son ignorados."),_.forEach(o)},m(g,_){$(g,e,_),s(e,l),s(e,a),s(a,r),s(e,c)},d(g){g&&o(e)}}}function $u(m){let e,l,a,r,c,g,_,E,k,z,A,y,C,R,N,V;return _=new W({props:{code:`pt_save_directory = "./pt_save_pretrained"
tokenizer.save_pretrained(pt_save_directory)
pt_model.save_pretrained(pt_save_directory)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pt_save_directory = <span class="hljs-string">&quot;./pt_save_pretrained&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(pt_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model.save_pretrained(pt_save_directory)`}}),N=new W({props:{code:'pt_model = AutoModelForSequenceClassification.from_pretrained("./pt_save_pretrained")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;./pt_save_pretrained&quot;</span>)'}}),{c(){e=u("p"),l=i("Una vez que se haya hecho fine-tuning a tu modelo puedes guardarlo con tu tokenizador usando "),a=u("code"),r=i("PreTrainedModel.save_pretrained()"),c=i(":"),g=v(),M(_.$$.fragment),E=v(),k=u("p"),z=i("Cuando quieras usar el modelo otra vez c\xE1rgalo con "),A=u("code"),y=i("PreTrainedModel.from_pretrained()"),C=i(":"),R=v(),M(N.$$.fragment)},l(w){e=f(w,"P",{});var x=n(e);l=p(x,"Una vez que se haya hecho fine-tuning a tu modelo puedes guardarlo con tu tokenizador usando "),a=f(x,"CODE",{});var G=n(a);r=p(G,"PreTrainedModel.save_pretrained()"),G.forEach(o),c=p(x,":"),x.forEach(o),g=b(w),D(_.$$.fragment,w),E=b(w),k=f(w,"P",{});var U=n(k);z=p(U,"Cuando quieras usar el modelo otra vez c\xE1rgalo con "),A=f(U,"CODE",{});var I=n(A);y=p(I,"PreTrainedModel.from_pretrained()"),I.forEach(o),C=p(U,":"),U.forEach(o),R=b(w),D(N.$$.fragment,w)},m(w,x){$(w,e,x),s(e,l),s(e,a),s(a,r),s(e,c),$(w,g,x),P(_,w,x),$(w,E,x),$(w,k,x),s(k,z),s(k,A),s(A,y),s(k,C),$(w,R,x),P(N,w,x),V=!0},p:ne,i(w){V||(j(_.$$.fragment,w),j(N.$$.fragment,w),V=!0)},o(w){q(_.$$.fragment,w),q(N.$$.fragment,w),V=!1},d(w){w&&o(e),w&&o(g),S(_,w),w&&o(E),w&&o(k),w&&o(R),S(N,w)}}}function gu(m){let e,l;return e=new Ae({props:{$$slots:{default:[$u]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function _u(m){let e,l,a,r,c,g,_,E,k,z,A,y,C,R,N,V;return _=new W({props:{code:`tf_save_directory = "./tf_save_pretrained"
tokenizer.save_pretrained(tf_save_directory)
tf_model.save_pretrained(tf_save_directory)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tf_save_directory = <span class="hljs-string">&quot;./tf_save_pretrained&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(tf_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model.save_pretrained(tf_save_directory)`}}),N=new W({props:{code:'tf_model = TFAutoModelForSequenceClassification.from_pretrained("./tf_save_pretrained")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;./tf_save_pretrained&quot;</span>)'}}),{c(){e=u("p"),l=i("Una vez que se haya hecho fine-tuning a tu modelo puedes guardarlo con tu tokenizador usando "),a=u("code"),r=i("TFPreTrainedModel.save_pretrained()"),c=i(":"),g=v(),M(_.$$.fragment),E=v(),k=u("p"),z=i("Cuando quieras usar el modelo otra vez c\xE1rgalo con "),A=u("code"),y=i("TFPreTrainedModel.from_pretrained()"),C=i(":"),R=v(),M(N.$$.fragment)},l(w){e=f(w,"P",{});var x=n(e);l=p(x,"Una vez que se haya hecho fine-tuning a tu modelo puedes guardarlo con tu tokenizador usando "),a=f(x,"CODE",{});var G=n(a);r=p(G,"TFPreTrainedModel.save_pretrained()"),G.forEach(o),c=p(x,":"),x.forEach(o),g=b(w),D(_.$$.fragment,w),E=b(w),k=f(w,"P",{});var U=n(k);z=p(U,"Cuando quieras usar el modelo otra vez c\xE1rgalo con "),A=f(U,"CODE",{});var I=n(A);y=p(I,"TFPreTrainedModel.from_pretrained()"),I.forEach(o),C=p(U,":"),U.forEach(o),R=b(w),D(N.$$.fragment,w)},m(w,x){$(w,e,x),s(e,l),s(e,a),s(a,r),s(e,c),$(w,g,x),P(_,w,x),$(w,E,x),$(w,k,x),s(k,z),s(k,A),s(A,y),s(k,C),$(w,R,x),P(N,w,x),V=!0},p:ne,i(w){V||(j(_.$$.fragment,w),j(N.$$.fragment,w),V=!0)},o(w){q(_.$$.fragment,w),q(N.$$.fragment,w),V=!1},d(w){w&&o(e),w&&o(g),S(_,w),w&&o(E),w&&o(k),w&&o(R),S(N,w)}}}function vu(m){let e,l;return e=new Ae({props:{$$slots:{default:[_u]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function bu(m){let e,l;return e=new W({props:{code:`from transformers import AutoModel

tokenizer = AutoTokenizer.from_pretrained(tf_save_directory)
pt_model = AutoModelForSequenceClassification.from_pretrained(tf_save_directory, from_tf=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(tf_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(tf_save_directory, from_tf=<span class="hljs-literal">True</span>)`}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Eu(m){let e,l;return e=new Ae({props:{$$slots:{default:[bu]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function wu(m){let e,l;return e=new W({props:{code:`from transformers import TFAutoModel

tokenizer = AutoTokenizer.from_pretrained(pt_save_directory)
tf_model = TFAutoModelForSequenceClassification.from_pretrained(pt_save_directory, from_pt=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(pt_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(pt_save_directory, from_pt=<span class="hljs-literal">True</span>)`}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function ku(m){let e,l;return e=new Ae({props:{$$slots:{default:[wu]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function ju(m){let e,l,a,r,c,g,_,E,k,z,A,y,C,R,N,V,w,x,G,U,I,K,Z,B,Y,re,se,oe,ue,ie,fe,le,X,pe,de,F,H,te,T,J,ce,$e,Q,ke,ae,je,ve,qe,ge,ee,ze,mr,hr,Ca,$r,gr,xa,_r,vr,Ta,br,Er,Ma,wr,kr,Pa,jr,yr,Sa,Ar,qr,Da,zr,Us,yt,Fa,Cr,xr,Vs,Ce,Oa,Tr,Mr,La,Pr,Sr,Na,Dr,Ks,At,Ia,Fr,Or,Bs,Ze,Ha,Lr,Nr,Ra,Ir,Js,Qe,Gs,Ie,We,Ua,qt,Hr,Va,Rr,Ys,Xe,Ur,Ka,Vr,Kr,Zs,aa,Br,Qs,et,Ws,tt,Jr,Ba,Gr,Yr,Xs,zt,eo,xe,Zr,Ct,Qr,Wr,Ja,Xr,el,to,xt,ao,at,tl,Ga,al,sl,so,Te,ol,Ya,rl,ll,Tt,nl,il,oo,Mt,ro,ye,pl,Za,cl,ul,Qa,fl,dl,Wa,ml,hl,lo,Pt,no,Me,$l,St,gl,_l,Dt,vl,bl,io,Ft,po,st,El,Xa,wl,kl,co,Ot,uo,ot,jl,es,yl,Al,fo,Lt,mo,rt,ql,sa,zl,Cl,ho,He,lt,ts,Nt,xl,as,Tl,$o,be,Ml,ss,Pl,Sl,It,Dl,Fl,os,Ol,Ll,Ht,Nl,Il,go,Rt,_o,nt,vo,Pe,Hl,rs,Rl,Ul,ls,Vl,Kl,bo,Ut,Eo,Se,Bl,oa,Jl,Gl,ra,Yl,Zl,wo,Re,it,ns,Vt,Ql,is,Wl,ko,Kt,jo,me,Xl,ps,en,tn,cs,an,sn,us,on,rn,la,ln,nn,fs,pn,cn,ds,un,fn,yo,De,dn,ms,mn,hn,hs,$n,gn,Ao,Ue,pt,$s,Bt,_n,gs,vn,qo,Fe,bn,_s,En,wn,na,kn,jn,zo,ct,yn,vs,An,qn,Co,Jt,xo,ut,zn,bs,Cn,xn,To,ia,Tn,Mo,Gt,Po,pa,Mn,So,ft,ca,ua,Pn,Sn,Dn,fa,da,Fn,On,Do,dt,Ln,Es,Nn,In,Fo,mt,Oo,ht,Hn,ma,Rn,Un,Lo,Ve,$t,ws,Yt,Vn,ks,Kn,No,gt,Io,_t,Ho,he,Bn,Zt,js,Jn,Gn,Qt,ys,Yn,Zn,As,Qn,Wn,qs,Xn,ei,Wt,ti,ai,ha,si,oi,Ro,vt,Uo,Ke,bt,zs,Xt,ri,Cs,li,Vo,Et,Ko,Oe,ni,xs,ii,pi,Ts,ci,ui,Bo,wt,Jo;return g=new jt({}),A=new $c({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Mixed",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/es/quicktour.ipynb"},{label:"PyTorch",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/es/pytorch/quicktour.ipynb"},{label:"TensorFlow",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/es/tensorflow/quicktour.ipynb"},{label:"Mixed",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/es/quicktour.ipynb"},{label:"PyTorch",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/es/pytorch/quicktour.ipynb"},{label:"TensorFlow",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/es/tensorflow/quicktour.ipynb"}]}}),K=new Aa({props:{$$slots:{default:[Gc]},$$scope:{ctx:m}}}),se=new jt({}),H=new ac({props:{id:"tiZFewofSLM"}}),Qe=new Aa({props:{$$slots:{default:[Yc]},$$scope:{ctx:m}}}),qt=new jt({}),et=new ya({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Xc],pytorch:[Qc]},$$scope:{ctx:m}}}),zt=new W({props:{code:`from transformers import pipeline

clasificador = pipeline('sentiment-analysis', model="pysentimiento/robertuito-sentiment-analysis")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>clasificador = pipeline(<span class="hljs-string">&#x27;sentiment-analysis&#x27;</span>, model=<span class="hljs-string">&quot;pysentimiento/robertuito-sentiment-analysis&quot;</span>)`}}),xt=new W({props:{code:'clasificador("Estamos muy felices de mostrarte la biblioteca de \u{1F917} Transformers.")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>clasificador(<span class="hljs-string">&quot;Estamos muy felices de mostrarte la biblioteca de \u{1F917} Transformers.&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POS&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9916</span>}]`}}),Mt=new W({props:{code:"pip install datasets",highlighted:"pip install datasets"}}),Pt=new W({props:{code:`import torch
from transformers import pipeline

reconocedor_de_voz = pipeline("automatic-speech-recognition", model="jonatasgrosman/wav2vec2-large-xlsr-53-spanish", device=0)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>reconocedor_de_voz = pipeline(<span class="hljs-string">&quot;automatic-speech-recognition&quot;</span>, model=<span class="hljs-string">&quot;jonatasgrosman/wav2vec2-large-xlsr-53-spanish&quot;</span>, device=<span class="hljs-number">0</span>)`}}),Ft=new W({props:{code:`from datasets import load_dataset, Audio

dataset = load_dataset("PolyAI/minds14", name="es-ES", split="train")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;es-ES&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)`}}),Ot=new W({props:{code:'dataset = dataset.cast_column("audio", Audio(sampling_rate=reconocedor_de_voz.feature_extractor.sampling_rate))',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=reconocedor_de_voz.feature_extractor.sampling_rate))'}}),Lt=new W({props:{code:`resultado = reconocedor_de_voz(dataset[:4]["audio"])
print([d["text"] for d in resultado])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>resultado = reconocedor_de_voz(dataset[:<span class="hljs-number">4</span>][<span class="hljs-string">&quot;audio&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>([d[<span class="hljs-string">&quot;text&quot;</span>] <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> resultado])
[<span class="hljs-string">&#x27;ahora buenas e a ver  tengo un problema como vuestra aplicaci\xF3n resulta que que quiero hacer una transferencia bancaria a una cuenta conocida pero me da error la aplicaci\xF3n a ver que a ver que puede ser&#x27;</span>, <span class="hljs-string">&#x27;la aplicaci\xF3n no cargue salda de mi nueva cuenta&#x27;</span>, <span class="hljs-string">&#x27;hola tengo un problema con la aplicaci\xF3n no carga y y tampoco veo que carga el saldo de mi cuenta nueva dice que la aplicaci\xF3n est\xE1 siendo reparada y ahora no puedo aceder a mi cuenta no necesito inmediatamente&#x27;</span>, <span class="hljs-string">&#x27;ora buena la aplicaci\xF3n no se carga la viladad no carga el saldo de mi cuenta nueva dice que la villadenta siendo reparada y oro no puede hacer a mi cuenta&#x27;</span>]`}}),Nt=new jt({}),Rt=new W({props:{code:'model_name = "nlptown/bert-base-multilingual-uncased-sentiment"',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>'}}),nt=new ya({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[su],pytorch:[tu]},$$scope:{ctx:m}}}),Ut=new W({props:{code:`classifier = pipeline("sentiment-analysis", model=model, tokenizer=tokenizer)
classifier("Nous sommes tr\xE8s heureux de vous pr\xE9senter la biblioth\xE8que \u{1F917} Transformers.")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(<span class="hljs-string">&quot;sentiment-analysis&quot;</span>, model=model, tokenizer=tokenizer)
<span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;Nous sommes tr\xE8s heureux de vous pr\xE9senter la biblioth\xE8que \u{1F917} Transformers.&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;5 stars&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.7273</span>}]`}}),Vt=new jt({}),Kt=new ac({props:{id:"AhChOFRegn4"}}),Bt=new jt({}),Jt=new W({props:{code:`from transformers import AutoTokenizer

nombre_del_modelo = "nlptown/bert-base-multilingual-uncased-sentiment"
tokenizer = AutoTokenizer.from_pretrained(nombre_del_modelo)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>nombre_del_modelo = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(nombre_del_modelo)`}}),Gt=new W({props:{code:`encoding = tokenizer("Estamos muy felices de mostrarte la biblioteca de \u{1F917} Transformers.")
print(encoding)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>encoding = tokenizer(<span class="hljs-string">&quot;Estamos muy felices de mostrarte la biblioteca de \u{1F917} Transformers.&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoding)
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: [<span class="hljs-number">101</span>, <span class="hljs-number">10602</span>, <span class="hljs-number">14000</span>, <span class="hljs-number">13653</span>, <span class="hljs-number">43353</span>, <span class="hljs-number">10107</span>, <span class="hljs-number">10102</span>, <span class="hljs-number">47201</span>, <span class="hljs-number">10218</span>, <span class="hljs-number">10106</span>, <span class="hljs-number">18283</span>, <span class="hljs-number">10102</span>, <span class="hljs-number">100</span>, <span class="hljs-number">58263</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>],
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]}`}}),mt=new ya({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[nu],pytorch:[ru]},$$scope:{ctx:m}}}),Yt=new jt({}),gt=new ya({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[du],pytorch:[cu]},$$scope:{ctx:m}}}),_t=new Aa({props:{$$slots:{default:[mu]},$$scope:{ctx:m}}}),vt=new Aa({props:{$$slots:{default:[hu]},$$scope:{ctx:m}}}),Xt=new jt({}),Et=new ya({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[vu],pytorch:[gu]},$$scope:{ctx:m}}}),wt=new ya({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[ku],pytorch:[Eu]},$$scope:{ctx:m}}}),{c(){e=u("meta"),l=v(),a=u("h1"),r=u("a"),c=u("span"),M(g.$$.fragment),_=v(),E=u("span"),k=i("Quick tour"),z=v(),M(A.$$.fragment),y=v(),C=u("p"),R=i("\xA1Entra en marcha con los \u{1F917} Transformers! Comienza usando "),N=u("code"),V=i("pipeline()"),w=i(" para una inferencia veloz, carga un modelo preentrenado y un tokenizador con una "),x=u("a"),G=i("AutoClass"),U=i(" para resolver tu tarea de texto, visi\xF3n o audio."),I=v(),M(K.$$.fragment),Z=v(),B=u("h2"),Y=u("a"),re=u("span"),M(se.$$.fragment),oe=v(),ue=u("span"),ie=i("Pipeline"),fe=v(),le=u("p"),X=u("code"),pe=i("pipeline()"),de=i(" es la forma m\xE1s f\xE1cil de usar un modelo preentrenado para una tarea dada."),F=v(),M(H.$$.fragment),te=v(),T=u("p"),J=i("El "),ce=u("code"),$e=i("pipeline()"),Q=i(" soporta muchas tareas comunes listas para usar:"),ke=v(),ae=u("p"),je=u("strong"),ve=i("Texto"),qe=i(":"),ge=v(),ee=u("ul"),ze=u("li"),mr=i("An\xE1lisis de Sentimiento (Sentiment Analysis, en ingl\xE9s): clasifica la polaridad de un texto dado."),hr=v(),Ca=u("li"),$r=i("Generaci\xF3n de Texto (Text Generation, en ingl\xE9s): genera texto a partir de un input dado."),gr=v(),xa=u("li"),_r=i("Reconocimiento de Entidades (Name Entity Recognition o NER, en ingl\xE9s): etiqueta cada palabra con la entidad que representa (persona, fecha, ubicaci\xF3n, etc.)."),vr=v(),Ta=u("li"),br=i("Responder Preguntas (Question answering, en ingl\xE9s): extrae la respuesta del contexto dado un contexto y una pregunta."),Er=v(),Ma=u("li"),wr=i("Rellenar M\xE1scara (Fill-mask, en ingl\xE9s): rellena el espacio faltante dado un texto con palabras enmascaradas."),kr=v(),Pa=u("li"),jr=i("Resumir (Summarization, en ingl\xE9s): genera un resumen de una secuencia larga de texto o un documento."),yr=v(),Sa=u("li"),Ar=i("Traducci\xF3n (Translation, en ingl\xE9s): traduce un texto a otro idioma."),qr=v(),Da=u("li"),zr=i("Extracci\xF3n de Caracter\xEDsticas (Feature Extraction, en ingl\xE9s): crea una representaci\xF3n tensorial del texto."),Us=v(),yt=u("p"),Fa=u("strong"),Cr=i("Imagen"),xr=i(":"),Vs=v(),Ce=u("ul"),Oa=u("li"),Tr=i("Clasificaci\xF3n de Im\xE1genes (Image Classification, en ingl\xE9s): clasifica una imagen."),Mr=v(),La=u("li"),Pr=i("Segmentaci\xF3n de Im\xE1genes (Image Segmentation, en ingl\xE9s): clasifica cada pixel de una imagen."),Sr=v(),Na=u("li"),Dr=i("Detecci\xF3n de Objetos (Object Detection, en ingl\xE9s): detecta objetos dentro de una imagen."),Ks=v(),At=u("p"),Ia=u("strong"),Fr=i("Audio"),Or=i(":"),Bs=v(),Ze=u("ul"),Ha=u("li"),Lr=i("Clasificaci\xF3n de Audios (Audio Classification, en ingl\xE9s): asigna una etiqueta a un segmento de audio."),Nr=v(),Ra=u("li"),Ir=i("Reconocimiento de Voz Autom\xE1tico (Automatic Speech Recognition o ASR, en ingl\xE9s): transcribe datos de audio a un texto."),Js=v(),M(Qe.$$.fragment),Gs=v(),Ie=u("h3"),We=u("a"),Ua=u("span"),M(qt.$$.fragment),Hr=v(),Va=u("span"),Rr=i("Uso del Pipeline"),Ys=v(),Xe=u("p"),Ur=i("En el siguiente ejemplo, usar\xE1s el "),Ka=u("code"),Vr=i("pipeline()"),Kr=i(" para an\xE1lisis de sentimiento."),Zs=v(),aa=u("p"),Br=i("Instala las siguientes dependencias si a\xFAn no lo has hecho:"),Qs=v(),M(et.$$.fragment),Ws=v(),tt=u("p"),Jr=i("Importa "),Ba=u("code"),Gr=i("pipeline()"),Yr=i(" y especifica la tarea que deseas completar:"),Xs=v(),M(zt.$$.fragment),eo=v(),xe=u("p"),Zr=i("El pipeline descarga y almacena en cach\xE9 el "),Ct=u("a"),Qr=i("modelo preentrenado"),Wr=i(" y tokeniza para an\xE1lisis de sentimiento. Si no hubieramos elegido un modelo el pipeline habr\xEDa elegido uno por defecto. Ahora puedes usar "),Ja=u("code"),Xr=i("clasificador"),el=i(" en tu texto objetivo:"),to=v(),M(xt.$$.fragment),ao=v(),at=u("p"),tl=i("Para m\xE1s de un enunciado, entrega una lista al "),Ga=u("code"),al=i("pipeline()"),sl=i(" que devolver\xE1 una lista de diccionarios:"),so=v(),Te=u("p"),ol=i("El "),Ya=u("code"),rl=i("pipeline()"),ll=i(" tambi\xE9n puede iterar sobre un dataset entero. Comienza instalando la biblioteca "),Tt=u("a"),nl=i("\u{1F917} Datasets"),il=i(":"),oo=v(),M(Mt.$$.fragment),ro=v(),ye=u("p"),pl=i("Crea un "),Za=u("code"),cl=i("pipeline()"),ul=i(" con la tarea que deseas resolver y el modelo que quieres usar. Coloca el par\xE1metro "),Qa=u("code"),fl=i("device"),dl=i(" a "),Wa=u("code"),ml=i("0"),hl=i(" para poner los tensores en un dispositivo CUDA:"),lo=v(),M(Pt.$$.fragment),no=v(),Me=u("p"),$l=i("A continuaci\xF3n, carga el dataset (ve \u{1F917} Datasets "),St=u("a"),gl=i("Quick Start"),_l=i(" para m\xE1s detalles) sobre el que quisieras iterar. Por ejemplo, vamos a cargar el dataset "),Dt=u("a"),vl=i("MInDS-14"),bl=i(":"),io=v(),M(Ft.$$.fragment),po=v(),st=u("p"),El=i("Debemos asegurarnos de que la frecuencia de muestreo del conjunto de datos coincide con la frecuencia de muestreo con la que se entren\xF3 "),Xa=u("code"),wl=i("jonatasgrosman/wav2vec2-large-xlsr-53-spanish"),kl=i("."),co=v(),M(Ot.$$.fragment),uo=v(),ot=u("p"),jl=i("Los archivos de audio se cargan y remuestrean autom\xE1ticamente cuando llamamos a la columna "),es=u("code"),yl=i('"audio"'),Al=i(`.
Extraigamos las matrices de onda cruda (raw waveform, en ingl\xE9s) de las primeras 4 muestras y pas\xE9mosla como una lista al pipeline:`),fo=v(),M(Lt.$$.fragment),mo=v(),rt=u("p"),ql=i("Para un dataset m\xE1s grande, donde los inputs son de mayor tama\xF1o (como en habla/audio o visi\xF3n), querr\xE1s pasar un generador en lugar de una lista que carga todos los inputs en memoria. Ve la "),sa=u("a"),zl=i("documentaci\xF3n del pipeline"),Cl=i(" para m\xE1s informaci\xF3n."),ho=v(),He=u("h3"),lt=u("a"),ts=u("span"),M(Nt.$$.fragment),xl=v(),as=u("span"),Tl=i("Usa otro modelo y otro tokenizador en el pipeline"),$o=v(),be=u("p"),Ml=i("El "),ss=u("code"),Pl=i("pipeline()"),Sl=i(" puede acomodarse a cualquier modelo del "),It=u("a"),Dl=i("Model Hub"),Fl=i(" haciendo m\xE1s f\xE1cil adaptar el "),os=u("code"),Ol=i("pipeline()"),Ll=i(" para otros casos de uso. Por ejemplo, si quisieras un modelo capaz de manejar texto en franc\xE9s, usa los tags en el Model Hub para filtrar entre los modelos apropiados. El resultado mejor filtrado devuelve un "),Ht=u("a"),Nl=i("modelo BERT"),Il=i(" multilingual fine-tuned para el an\xE1lisis de sentimiento. Genial, \xA1vamos a usar este modelo!"),go=v(),M(Rt.$$.fragment),_o=v(),M(nt.$$.fragment),vo=v(),Pe=u("p"),Hl=i("Despu\xE9s puedes especificar el modelo y el tokenizador en el "),rs=u("code"),Rl=i("pipeline()"),Ul=i(", y aplicar el "),ls=u("code"),Vl=i("classifier"),Kl=i(" en tu texto objetivo:"),bo=v(),M(Ut.$$.fragment),Eo=v(),Se=u("p"),Bl=i("Si no pudieras encontrar el modelo para tu caso respectivo de uso necesitar\xE1s ajustar un modelo preentrenado a tus datos. Mira nuestro "),oa=u("a"),Jl=i("tutorial de fine-tuning"),Gl=i(" para aprender c\xF3mo. Finalmente, despu\xE9s de que has ajustado tu modelo preentrenado, \xA1por favor considera compartirlo (ve el tutorial "),ra=u("a"),Yl=i("aqu\xED"),Zl=i(") con la comunidad en el Model Hub para democratizar el NLP! \u{1F917}"),wo=v(),Re=u("h2"),it=u("a"),ns=u("span"),M(Vt.$$.fragment),Ql=v(),is=u("span"),Wl=i("AutoClass"),ko=v(),M(Kt.$$.fragment),jo=v(),me=u("p"),Xl=i("Debajo del cap\xF3, las clases "),ps=u("code"),en=i("AutoModelForSequenceClassification"),tn=i(" y "),cs=u("code"),an=i("AutoTokenizer"),sn=i(" trabajan juntas para dar poder al "),us=u("code"),on=i("pipeline()"),rn=i(". Una "),la=u("a"),ln=i("AutoClass"),nn=i(" es un atajo que autom\xE1ticamente recupera la arquitectura de un modelo preentrenado con su nombre o el path. S\xF3lo necesitar\xE1s seleccionar el "),fs=u("code"),pn=i("AutoClass"),cn=i(" apropiado para tu tarea y tu tokenizador asociado con "),ds=u("code"),un=i("AutoTokenizer"),fn=i("."),yo=v(),De=u("p"),dn=i("Regresemos a nuestro ejemplo y veamos c\xF3mo puedes usar el "),ms=u("code"),mn=i("AutoClass"),hn=i(" para reproducir los resultados del "),hs=u("code"),$n=i("pipeline()"),gn=i("."),Ao=v(),Ue=u("h3"),pt=u("a"),$s=u("span"),M(Bt.$$.fragment),_n=v(),gs=u("span"),vn=i("AutoTokenizer"),qo=v(),Fe=u("p"),bn=i("Un tokenizador es responsable de procesar el texto a un formato que sea entendible para el modelo. Primero, el tokenizador separar\xE1 el texto en palabras llamadas "),_s=u("em"),En=i("tokens"),wn=i(". Hay m\xFAltiples reglas que gobiernan el proceso de tokenizaci\xF3n incluyendo el c\xF3mo separar una palabra y en qu\xE9 nivel (aprende m\xE1s sobre tokenizaci\xF3n "),na=u("a"),kn=i("aqu\xED"),jn=i("). Lo m\xE1s importante es recordar que necesitar\xE1s instanciar el tokenizador con el mismo nombre del modelo para asegurar que est\xE1s usando las mismas reglas de tokenizaci\xF3n con las que el modelo fue preentrenado."),zo=v(),ct=u("p"),yn=i("Carga un tokenizador con "),vs=u("code"),An=i("AutoTokenizer"),qn=i(":"),Co=v(),M(Jt.$$.fragment),xo=v(),ut=u("p"),zn=i("Despu\xE9s, el tokenizador convierte los tokens a n\xFAmeros para construir un tensor que servir\xE1 como input para el modelo. Esto es conocido como el "),bs=u("em"),Cn=i("vocabulario"),xn=i(" del modelo."),To=v(),ia=u("p"),Tn=i("Pasa tu texto al tokenizador:"),Mo=v(),M(Gt.$$.fragment),Po=v(),pa=u("p"),Mn=i("El tokenizador devolver\xE1 un diccionario conteniendo:"),So=v(),ft=u("ul"),ca=u("li"),ua=u("a"),Pn=i("input_ids"),Sn=i(": representaciones num\xE9ricas de los tokens."),Dn=v(),fa=u("li"),da=u("a"),Fn=i("atttention_mask"),On=i(": indica cu\xE1les tokens deben ser atendidos."),Do=v(),dt=u("p"),Ln=i("Como con el "),Es=u("code"),Nn=i("pipeline()"),In=i(", el tokenizador aceptar\xE1 una lista de inputs. Adem\xE1s, el tokenizador tambi\xE9n puede rellenar (pad, en ingl\xE9s) y truncar el texto para devolver un lote (batch, en ingl\xE9s) de longitud uniforme:"),Fo=v(),M(mt.$$.fragment),Oo=v(),ht=u("p"),Hn=i("Lee el tutorial de "),ma=u("a"),Rn=i("preprocessing"),Un=i(" para m\xE1s detalles acerca de la tokenizaci\xF3n."),Lo=v(),Ve=u("h3"),$t=u("a"),ws=u("span"),M(Yt.$$.fragment),Vn=v(),ks=u("span"),Kn=i("AutoModel"),No=v(),M(gt.$$.fragment),Io=v(),M(_t.$$.fragment),Ho=v(),he=u("p"),Bn=i("Los modelos son "),Zt=u("a"),js=u("code"),Jn=i("torch.nn.Module"),Gn=i(" o "),Qt=u("a"),ys=u("code"),Yn=i("tf.keras.Model"),Zn=i(" est\xE1ndares as\xED que podr\xE1s usarlos en tu training loop usual. Sin embargo, para facilitar las cosas, \u{1F917} Transformers provee una clase "),As=u("code"),Qn=i("Trainer"),Wn=i(" para PyTorch que a\xF1ade funcionalidades para entrenamiento distribuido, precici\xF3n mixta, y m\xE1s. Para TensorFlow, puedes usar el m\xE9todo "),qs=u("code"),Xn=i("fit"),ei=i(" desde "),Wt=u("a"),ti=i("Keras"),ai=i(". Consulta el "),ha=u("a"),si=i("tutorial de entrenamiento"),oi=i(" para m\xE1s detalles."),Ro=v(),M(vt.$$.fragment),Uo=v(),Ke=u("h3"),bt=u("a"),zs=u("span"),M(Xt.$$.fragment),ri=v(),Cs=u("span"),li=i("Guarda un modelo"),Vo=v(),M(Et.$$.fragment),Ko=v(),Oe=u("p"),ni=i("Una caracter\xEDstica particularmente interesante de \u{1F917} Transformers es la habilidad de guardar el modelo y cargarlo como un modelo de PyTorch o TensorFlow. El par\xE1metro "),xs=u("code"),ii=i("from_pt"),pi=i(" o "),Ts=u("code"),ci=i("from_tf"),ui=i(" puede convertir el modelo de un framework al otro:"),Bo=v(),M(wt.$$.fragment),this.h()},l(t){const h=hc('[data-svelte="svelte-1phssyn"]',document.head);e=f(h,"META",{name:!0,content:!0}),h.forEach(o),l=b(t),a=f(t,"H1",{class:!0});var ea=n(a);r=f(ea,"A",{id:!0,class:!0,href:!0});var Ms=n(r);c=f(Ms,"SPAN",{});var Ps=n(c);D(g.$$.fragment,Ps),Ps.forEach(o),Ms.forEach(o),_=b(ea),E=f(ea,"SPAN",{});var Ss=n(E);k=p(Ss,"Quick tour"),Ss.forEach(o),ea.forEach(o),z=b(t),D(A.$$.fragment,t),y=b(t),C=f(t,"P",{});var Be=n(C);R=p(Be,"\xA1Entra en marcha con los \u{1F917} Transformers! Comienza usando "),N=f(Be,"CODE",{});var Ds=n(N);V=p(Ds,"pipeline()"),Ds.forEach(o),w=p(Be," para una inferencia veloz, carga un modelo preentrenado y un tokenizador con una "),x=f(Be,"A",{href:!0});var Fs=n(x);G=p(Fs,"AutoClass"),Fs.forEach(o),U=p(Be," para resolver tu tarea de texto, visi\xF3n o audio."),Be.forEach(o),I=b(t),D(K.$$.fragment,t),Z=b(t),B=f(t,"H2",{class:!0});var ta=n(B);Y=f(ta,"A",{id:!0,class:!0,href:!0});var Os=n(Y);re=f(Os,"SPAN",{});var Ls=n(re);D(se.$$.fragment,Ls),Ls.forEach(o),Os.forEach(o),oe=b(ta),ue=f(ta,"SPAN",{});var Ei=n(ue);ie=p(Ei,"Pipeline"),Ei.forEach(o),ta.forEach(o),fe=b(t),le=f(t,"P",{});var fi=n(le);X=f(fi,"CODE",{});var wi=n(X);pe=p(wi,"pipeline()"),wi.forEach(o),de=p(fi," es la forma m\xE1s f\xE1cil de usar un modelo preentrenado para una tarea dada."),fi.forEach(o),F=b(t),D(H.$$.fragment,t),te=b(t),T=f(t,"P",{});var Go=n(T);J=p(Go,"El "),ce=f(Go,"CODE",{});var ki=n(ce);$e=p(ki,"pipeline()"),ki.forEach(o),Q=p(Go," soporta muchas tareas comunes listas para usar:"),Go.forEach(o),ke=b(t),ae=f(t,"P",{});var di=n(ae);je=f(di,"STRONG",{});var ji=n(je);ve=p(ji,"Texto"),ji.forEach(o),qe=p(di,":"),di.forEach(o),ge=b(t),ee=f(t,"UL",{});var _e=n(ee);ze=f(_e,"LI",{});var yi=n(ze);mr=p(yi,"An\xE1lisis de Sentimiento (Sentiment Analysis, en ingl\xE9s): clasifica la polaridad de un texto dado."),yi.forEach(o),hr=b(_e),Ca=f(_e,"LI",{});var Ai=n(Ca);$r=p(Ai,"Generaci\xF3n de Texto (Text Generation, en ingl\xE9s): genera texto a partir de un input dado."),Ai.forEach(o),gr=b(_e),xa=f(_e,"LI",{});var qi=n(xa);_r=p(qi,"Reconocimiento de Entidades (Name Entity Recognition o NER, en ingl\xE9s): etiqueta cada palabra con la entidad que representa (persona, fecha, ubicaci\xF3n, etc.)."),qi.forEach(o),vr=b(_e),Ta=f(_e,"LI",{});var zi=n(Ta);br=p(zi,"Responder Preguntas (Question answering, en ingl\xE9s): extrae la respuesta del contexto dado un contexto y una pregunta."),zi.forEach(o),Er=b(_e),Ma=f(_e,"LI",{});var Ci=n(Ma);wr=p(Ci,"Rellenar M\xE1scara (Fill-mask, en ingl\xE9s): rellena el espacio faltante dado un texto con palabras enmascaradas."),Ci.forEach(o),kr=b(_e),Pa=f(_e,"LI",{});var xi=n(Pa);jr=p(xi,"Resumir (Summarization, en ingl\xE9s): genera un resumen de una secuencia larga de texto o un documento."),xi.forEach(o),yr=b(_e),Sa=f(_e,"LI",{});var Ti=n(Sa);Ar=p(Ti,"Traducci\xF3n (Translation, en ingl\xE9s): traduce un texto a otro idioma."),Ti.forEach(o),qr=b(_e),Da=f(_e,"LI",{});var Mi=n(Da);zr=p(Mi,"Extracci\xF3n de Caracter\xEDsticas (Feature Extraction, en ingl\xE9s): crea una representaci\xF3n tensorial del texto."),Mi.forEach(o),_e.forEach(o),Us=b(t),yt=f(t,"P",{});var mi=n(yt);Fa=f(mi,"STRONG",{});var Pi=n(Fa);Cr=p(Pi,"Imagen"),Pi.forEach(o),xr=p(mi,":"),mi.forEach(o),Vs=b(t),Ce=f(t,"UL",{});var $a=n(Ce);Oa=f($a,"LI",{});var Si=n(Oa);Tr=p(Si,"Clasificaci\xF3n de Im\xE1genes (Image Classification, en ingl\xE9s): clasifica una imagen."),Si.forEach(o),Mr=b($a),La=f($a,"LI",{});var Di=n(La);Pr=p(Di,"Segmentaci\xF3n de Im\xE1genes (Image Segmentation, en ingl\xE9s): clasifica cada pixel de una imagen."),Di.forEach(o),Sr=b($a),Na=f($a,"LI",{});var Fi=n(Na);Dr=p(Fi,"Detecci\xF3n de Objetos (Object Detection, en ingl\xE9s): detecta objetos dentro de una imagen."),Fi.forEach(o),$a.forEach(o),Ks=b(t),At=f(t,"P",{});var hi=n(At);Ia=f(hi,"STRONG",{});var Oi=n(Ia);Fr=p(Oi,"Audio"),Oi.forEach(o),Or=p(hi,":"),hi.forEach(o),Bs=b(t),Ze=f(t,"UL",{});var Yo=n(Ze);Ha=f(Yo,"LI",{});var Li=n(Ha);Lr=p(Li,"Clasificaci\xF3n de Audios (Audio Classification, en ingl\xE9s): asigna una etiqueta a un segmento de audio."),Li.forEach(o),Nr=b(Yo),Ra=f(Yo,"LI",{});var Ni=n(Ra);Ir=p(Ni,"Reconocimiento de Voz Autom\xE1tico (Automatic Speech Recognition o ASR, en ingl\xE9s): transcribe datos de audio a un texto."),Ni.forEach(o),Yo.forEach(o),Js=b(t),D(Qe.$$.fragment,t),Gs=b(t),Ie=f(t,"H3",{class:!0});var Zo=n(Ie);We=f(Zo,"A",{id:!0,class:!0,href:!0});var Ii=n(We);Ua=f(Ii,"SPAN",{});var Hi=n(Ua);D(qt.$$.fragment,Hi),Hi.forEach(o),Ii.forEach(o),Hr=b(Zo),Va=f(Zo,"SPAN",{});var Ri=n(Va);Rr=p(Ri,"Uso del Pipeline"),Ri.forEach(o),Zo.forEach(o),Ys=b(t),Xe=f(t,"P",{});var Qo=n(Xe);Ur=p(Qo,"En el siguiente ejemplo, usar\xE1s el "),Ka=f(Qo,"CODE",{});var Ui=n(Ka);Vr=p(Ui,"pipeline()"),Ui.forEach(o),Kr=p(Qo," para an\xE1lisis de sentimiento."),Qo.forEach(o),Zs=b(t),aa=f(t,"P",{});var Vi=n(aa);Br=p(Vi,"Instala las siguientes dependencias si a\xFAn no lo has hecho:"),Vi.forEach(o),Qs=b(t),D(et.$$.fragment,t),Ws=b(t),tt=f(t,"P",{});var Wo=n(tt);Jr=p(Wo,"Importa "),Ba=f(Wo,"CODE",{});var Ki=n(Ba);Gr=p(Ki,"pipeline()"),Ki.forEach(o),Yr=p(Wo," y especifica la tarea que deseas completar:"),Wo.forEach(o),Xs=b(t),D(zt.$$.fragment,t),eo=b(t),xe=f(t,"P",{});var ga=n(xe);Zr=p(ga,"El pipeline descarga y almacena en cach\xE9 el "),Ct=f(ga,"A",{href:!0,rel:!0});var Bi=n(Ct);Qr=p(Bi,"modelo preentrenado"),Bi.forEach(o),Wr=p(ga," y tokeniza para an\xE1lisis de sentimiento. Si no hubieramos elegido un modelo el pipeline habr\xEDa elegido uno por defecto. Ahora puedes usar "),Ja=f(ga,"CODE",{});var Ji=n(Ja);Xr=p(Ji,"clasificador"),Ji.forEach(o),el=p(ga," en tu texto objetivo:"),ga.forEach(o),to=b(t),D(xt.$$.fragment,t),ao=b(t),at=f(t,"P",{});var Xo=n(at);tl=p(Xo,"Para m\xE1s de un enunciado, entrega una lista al "),Ga=f(Xo,"CODE",{});var Gi=n(Ga);al=p(Gi,"pipeline()"),Gi.forEach(o),sl=p(Xo," que devolver\xE1 una lista de diccionarios:"),Xo.forEach(o),so=b(t),Te=f(t,"P",{});var _a=n(Te);ol=p(_a,"El "),Ya=f(_a,"CODE",{});var Yi=n(Ya);rl=p(Yi,"pipeline()"),Yi.forEach(o),ll=p(_a," tambi\xE9n puede iterar sobre un dataset entero. Comienza instalando la biblioteca "),Tt=f(_a,"A",{href:!0,rel:!0});var Zi=n(Tt);nl=p(Zi,"\u{1F917} Datasets"),Zi.forEach(o),il=p(_a,":"),_a.forEach(o),oo=b(t),D(Mt.$$.fragment,t),ro=b(t),ye=f(t,"P",{});var kt=n(ye);pl=p(kt,"Crea un "),Za=f(kt,"CODE",{});var Qi=n(Za);cl=p(Qi,"pipeline()"),Qi.forEach(o),ul=p(kt," con la tarea que deseas resolver y el modelo que quieres usar. Coloca el par\xE1metro "),Qa=f(kt,"CODE",{});var Wi=n(Qa);fl=p(Wi,"device"),Wi.forEach(o),dl=p(kt," a "),Wa=f(kt,"CODE",{});var Xi=n(Wa);ml=p(Xi,"0"),Xi.forEach(o),hl=p(kt," para poner los tensores en un dispositivo CUDA:"),kt.forEach(o),lo=b(t),D(Pt.$$.fragment,t),no=b(t),Me=f(t,"P",{});var va=n(Me);$l=p(va,"A continuaci\xF3n, carga el dataset (ve \u{1F917} Datasets "),St=f(va,"A",{href:!0,rel:!0});var ep=n(St);gl=p(ep,"Quick Start"),ep.forEach(o),_l=p(va," para m\xE1s detalles) sobre el que quisieras iterar. Por ejemplo, vamos a cargar el dataset "),Dt=f(va,"A",{href:!0,rel:!0});var tp=n(Dt);vl=p(tp,"MInDS-14"),tp.forEach(o),bl=p(va,":"),va.forEach(o),io=b(t),D(Ft.$$.fragment,t),po=b(t),st=f(t,"P",{});var er=n(st);El=p(er,"Debemos asegurarnos de que la frecuencia de muestreo del conjunto de datos coincide con la frecuencia de muestreo con la que se entren\xF3 "),Xa=f(er,"CODE",{});var ap=n(Xa);wl=p(ap,"jonatasgrosman/wav2vec2-large-xlsr-53-spanish"),ap.forEach(o),kl=p(er,"."),er.forEach(o),co=b(t),D(Ot.$$.fragment,t),uo=b(t),ot=f(t,"P",{});var tr=n(ot);jl=p(tr,"Los archivos de audio se cargan y remuestrean autom\xE1ticamente cuando llamamos a la columna "),es=f(tr,"CODE",{});var sp=n(es);yl=p(sp,'"audio"'),sp.forEach(o),Al=p(tr,`.
Extraigamos las matrices de onda cruda (raw waveform, en ingl\xE9s) de las primeras 4 muestras y pas\xE9mosla como una lista al pipeline:`),tr.forEach(o),fo=b(t),D(Lt.$$.fragment,t),mo=b(t),rt=f(t,"P",{});var ar=n(rt);ql=p(ar,"Para un dataset m\xE1s grande, donde los inputs son de mayor tama\xF1o (como en habla/audio o visi\xF3n), querr\xE1s pasar un generador en lugar de una lista que carga todos los inputs en memoria. Ve la "),sa=f(ar,"A",{href:!0});var op=n(sa);zl=p(op,"documentaci\xF3n del pipeline"),op.forEach(o),Cl=p(ar," para m\xE1s informaci\xF3n."),ar.forEach(o),ho=b(t),He=f(t,"H3",{class:!0});var sr=n(He);lt=f(sr,"A",{id:!0,class:!0,href:!0});var rp=n(lt);ts=f(rp,"SPAN",{});var lp=n(ts);D(Nt.$$.fragment,lp),lp.forEach(o),rp.forEach(o),xl=b(sr),as=f(sr,"SPAN",{});var np=n(as);Tl=p(np,"Usa otro modelo y otro tokenizador en el pipeline"),np.forEach(o),sr.forEach(o),$o=b(t),be=f(t,"P",{});var Le=n(be);Ml=p(Le,"El "),ss=f(Le,"CODE",{});var ip=n(ss);Pl=p(ip,"pipeline()"),ip.forEach(o),Sl=p(Le," puede acomodarse a cualquier modelo del "),It=f(Le,"A",{href:!0,rel:!0});var pp=n(It);Dl=p(pp,"Model Hub"),pp.forEach(o),Fl=p(Le," haciendo m\xE1s f\xE1cil adaptar el "),os=f(Le,"CODE",{});var cp=n(os);Ol=p(cp,"pipeline()"),cp.forEach(o),Ll=p(Le," para otros casos de uso. Por ejemplo, si quisieras un modelo capaz de manejar texto en franc\xE9s, usa los tags en el Model Hub para filtrar entre los modelos apropiados. El resultado mejor filtrado devuelve un "),Ht=f(Le,"A",{href:!0,rel:!0});var up=n(Ht);Nl=p(up,"modelo BERT"),up.forEach(o),Il=p(Le," multilingual fine-tuned para el an\xE1lisis de sentimiento. Genial, \xA1vamos a usar este modelo!"),Le.forEach(o),go=b(t),D(Rt.$$.fragment,t),_o=b(t),D(nt.$$.fragment,t),vo=b(t),Pe=f(t,"P",{});var ba=n(Pe);Hl=p(ba,"Despu\xE9s puedes especificar el modelo y el tokenizador en el "),rs=f(ba,"CODE",{});var fp=n(rs);Rl=p(fp,"pipeline()"),fp.forEach(o),Ul=p(ba,", y aplicar el "),ls=f(ba,"CODE",{});var dp=n(ls);Vl=p(dp,"classifier"),dp.forEach(o),Kl=p(ba," en tu texto objetivo:"),ba.forEach(o),bo=b(t),D(Ut.$$.fragment,t),Eo=b(t),Se=f(t,"P",{});var Ea=n(Se);Bl=p(Ea,"Si no pudieras encontrar el modelo para tu caso respectivo de uso necesitar\xE1s ajustar un modelo preentrenado a tus datos. Mira nuestro "),oa=f(Ea,"A",{href:!0});var mp=n(oa);Jl=p(mp,"tutorial de fine-tuning"),mp.forEach(o),Gl=p(Ea," para aprender c\xF3mo. Finalmente, despu\xE9s de que has ajustado tu modelo preentrenado, \xA1por favor considera compartirlo (ve el tutorial "),ra=f(Ea,"A",{href:!0});var hp=n(ra);Yl=p(hp,"aqu\xED"),hp.forEach(o),Zl=p(Ea,") con la comunidad en el Model Hub para democratizar el NLP! \u{1F917}"),Ea.forEach(o),wo=b(t),Re=f(t,"H2",{class:!0});var or=n(Re);it=f(or,"A",{id:!0,class:!0,href:!0});var $p=n(it);ns=f($p,"SPAN",{});var gp=n(ns);D(Vt.$$.fragment,gp),gp.forEach(o),$p.forEach(o),Ql=b(or),is=f(or,"SPAN",{});var _p=n(is);Wl=p(_p,"AutoClass"),_p.forEach(o),or.forEach(o),ko=b(t),D(Kt.$$.fragment,t),jo=b(t),me=f(t,"P",{});var Ee=n(me);Xl=p(Ee,"Debajo del cap\xF3, las clases "),ps=f(Ee,"CODE",{});var vp=n(ps);en=p(vp,"AutoModelForSequenceClassification"),vp.forEach(o),tn=p(Ee," y "),cs=f(Ee,"CODE",{});var bp=n(cs);an=p(bp,"AutoTokenizer"),bp.forEach(o),sn=p(Ee," trabajan juntas para dar poder al "),us=f(Ee,"CODE",{});var Ep=n(us);on=p(Ep,"pipeline()"),Ep.forEach(o),rn=p(Ee,". Una "),la=f(Ee,"A",{href:!0});var wp=n(la);ln=p(wp,"AutoClass"),wp.forEach(o),nn=p(Ee," es un atajo que autom\xE1ticamente recupera la arquitectura de un modelo preentrenado con su nombre o el path. S\xF3lo necesitar\xE1s seleccionar el "),fs=f(Ee,"CODE",{});var kp=n(fs);pn=p(kp,"AutoClass"),kp.forEach(o),cn=p(Ee," apropiado para tu tarea y tu tokenizador asociado con "),ds=f(Ee,"CODE",{});var jp=n(ds);un=p(jp,"AutoTokenizer"),jp.forEach(o),fn=p(Ee,"."),Ee.forEach(o),yo=b(t),De=f(t,"P",{});var wa=n(De);dn=p(wa,"Regresemos a nuestro ejemplo y veamos c\xF3mo puedes usar el "),ms=f(wa,"CODE",{});var yp=n(ms);mn=p(yp,"AutoClass"),yp.forEach(o),hn=p(wa," para reproducir los resultados del "),hs=f(wa,"CODE",{});var Ap=n(hs);$n=p(Ap,"pipeline()"),Ap.forEach(o),gn=p(wa,"."),wa.forEach(o),Ao=b(t),Ue=f(t,"H3",{class:!0});var rr=n(Ue);pt=f(rr,"A",{id:!0,class:!0,href:!0});var qp=n(pt);$s=f(qp,"SPAN",{});var zp=n($s);D(Bt.$$.fragment,zp),zp.forEach(o),qp.forEach(o),_n=b(rr),gs=f(rr,"SPAN",{});var Cp=n(gs);vn=p(Cp,"AutoTokenizer"),Cp.forEach(o),rr.forEach(o),qo=b(t),Fe=f(t,"P",{});var ka=n(Fe);bn=p(ka,"Un tokenizador es responsable de procesar el texto a un formato que sea entendible para el modelo. Primero, el tokenizador separar\xE1 el texto en palabras llamadas "),_s=f(ka,"EM",{});var xp=n(_s);En=p(xp,"tokens"),xp.forEach(o),wn=p(ka,". Hay m\xFAltiples reglas que gobiernan el proceso de tokenizaci\xF3n incluyendo el c\xF3mo separar una palabra y en qu\xE9 nivel (aprende m\xE1s sobre tokenizaci\xF3n "),na=f(ka,"A",{href:!0});var Tp=n(na);kn=p(Tp,"aqu\xED"),Tp.forEach(o),jn=p(ka,"). Lo m\xE1s importante es recordar que necesitar\xE1s instanciar el tokenizador con el mismo nombre del modelo para asegurar que est\xE1s usando las mismas reglas de tokenizaci\xF3n con las que el modelo fue preentrenado."),ka.forEach(o),zo=b(t),ct=f(t,"P",{});var lr=n(ct);yn=p(lr,"Carga un tokenizador con "),vs=f(lr,"CODE",{});var Mp=n(vs);An=p(Mp,"AutoTokenizer"),Mp.forEach(o),qn=p(lr,":"),lr.forEach(o),Co=b(t),D(Jt.$$.fragment,t),xo=b(t),ut=f(t,"P",{});var nr=n(ut);zn=p(nr,"Despu\xE9s, el tokenizador convierte los tokens a n\xFAmeros para construir un tensor que servir\xE1 como input para el modelo. Esto es conocido como el "),bs=f(nr,"EM",{});var Pp=n(bs);Cn=p(Pp,"vocabulario"),Pp.forEach(o),xn=p(nr," del modelo."),nr.forEach(o),To=b(t),ia=f(t,"P",{});var Sp=n(ia);Tn=p(Sp,"Pasa tu texto al tokenizador:"),Sp.forEach(o),Mo=b(t),D(Gt.$$.fragment,t),Po=b(t),pa=f(t,"P",{});var Dp=n(pa);Mn=p(Dp,"El tokenizador devolver\xE1 un diccionario conteniendo:"),Dp.forEach(o),So=b(t),ft=f(t,"UL",{});var ir=n(ft);ca=f(ir,"LI",{});var $i=n(ca);ua=f($i,"A",{href:!0});var Fp=n(ua);Pn=p(Fp,"input_ids"),Fp.forEach(o),Sn=p($i,": representaciones num\xE9ricas de los tokens."),$i.forEach(o),Dn=b(ir),fa=f(ir,"LI",{});var gi=n(fa);da=f(gi,"A",{href:!0});var Op=n(da);Fn=p(Op,"atttention_mask"),Op.forEach(o),On=p(gi,": indica cu\xE1les tokens deben ser atendidos."),gi.forEach(o),ir.forEach(o),Do=b(t),dt=f(t,"P",{});var pr=n(dt);Ln=p(pr,"Como con el "),Es=f(pr,"CODE",{});var Lp=n(Es);Nn=p(Lp,"pipeline()"),Lp.forEach(o),In=p(pr,", el tokenizador aceptar\xE1 una lista de inputs. Adem\xE1s, el tokenizador tambi\xE9n puede rellenar (pad, en ingl\xE9s) y truncar el texto para devolver un lote (batch, en ingl\xE9s) de longitud uniforme:"),pr.forEach(o),Fo=b(t),D(mt.$$.fragment,t),Oo=b(t),ht=f(t,"P",{});var cr=n(ht);Hn=p(cr,"Lee el tutorial de "),ma=f(cr,"A",{href:!0});var Np=n(ma);Rn=p(Np,"preprocessing"),Np.forEach(o),Un=p(cr," para m\xE1s detalles acerca de la tokenizaci\xF3n."),cr.forEach(o),Lo=b(t),Ve=f(t,"H3",{class:!0});var ur=n(Ve);$t=f(ur,"A",{id:!0,class:!0,href:!0});var Ip=n($t);ws=f(Ip,"SPAN",{});var Hp=n(ws);D(Yt.$$.fragment,Hp),Hp.forEach(o),Ip.forEach(o),Vn=b(ur),ks=f(ur,"SPAN",{});var Rp=n(ks);Kn=p(Rp,"AutoModel"),Rp.forEach(o),ur.forEach(o),No=b(t),D(gt.$$.fragment,t),Io=b(t),D(_t.$$.fragment,t),Ho=b(t),he=f(t,"P",{});var we=n(he);Bn=p(we,"Los modelos son "),Zt=f(we,"A",{href:!0,rel:!0});var Up=n(Zt);js=f(Up,"CODE",{});var Vp=n(js);Jn=p(Vp,"torch.nn.Module"),Vp.forEach(o),Up.forEach(o),Gn=p(we," o "),Qt=f(we,"A",{href:!0,rel:!0});var Kp=n(Qt);ys=f(Kp,"CODE",{});var Bp=n(ys);Yn=p(Bp,"tf.keras.Model"),Bp.forEach(o),Kp.forEach(o),Zn=p(we," est\xE1ndares as\xED que podr\xE1s usarlos en tu training loop usual. Sin embargo, para facilitar las cosas, \u{1F917} Transformers provee una clase "),As=f(we,"CODE",{});var Jp=n(As);Qn=p(Jp,"Trainer"),Jp.forEach(o),Wn=p(we," para PyTorch que a\xF1ade funcionalidades para entrenamiento distribuido, precici\xF3n mixta, y m\xE1s. Para TensorFlow, puedes usar el m\xE9todo "),qs=f(we,"CODE",{});var Gp=n(qs);Xn=p(Gp,"fit"),Gp.forEach(o),ei=p(we," desde "),Wt=f(we,"A",{href:!0,rel:!0});var Yp=n(Wt);ti=p(Yp,"Keras"),Yp.forEach(o),ai=p(we,". Consulta el "),ha=f(we,"A",{href:!0});var Zp=n(ha);si=p(Zp,"tutorial de entrenamiento"),Zp.forEach(o),oi=p(we," para m\xE1s detalles."),we.forEach(o),Ro=b(t),D(vt.$$.fragment,t),Uo=b(t),Ke=f(t,"H3",{class:!0});var fr=n(Ke);bt=f(fr,"A",{id:!0,class:!0,href:!0});var Qp=n(bt);zs=f(Qp,"SPAN",{});var Wp=n(zs);D(Xt.$$.fragment,Wp),Wp.forEach(o),Qp.forEach(o),ri=b(fr),Cs=f(fr,"SPAN",{});var Xp=n(Cs);li=p(Xp,"Guarda un modelo"),Xp.forEach(o),fr.forEach(o),Vo=b(t),D(Et.$$.fragment,t),Ko=b(t),Oe=f(t,"P",{});var ja=n(Oe);ni=p(ja,"Una caracter\xEDstica particularmente interesante de \u{1F917} Transformers es la habilidad de guardar el modelo y cargarlo como un modelo de PyTorch o TensorFlow. El par\xE1metro "),xs=f(ja,"CODE",{});var ec=n(xs);ii=p(ec,"from_pt"),ec.forEach(o),pi=p(ja," o "),Ts=f(ja,"CODE",{});var tc=n(Ts);ci=p(tc,"from_tf"),tc.forEach(o),ui=p(ja," puede convertir el modelo de un framework al otro:"),ja.forEach(o),Bo=b(t),D(wt.$$.fragment,t),this.h()},h(){d(e,"name","hf:doc:metadata"),d(e,"content",JSON.stringify(yu)),d(r,"id","quick-tour"),d(r,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r,"href","#quick-tour"),d(a,"class","relative group"),d(x,"href","./model_doc/auto"),d(Y,"id","pipeline"),d(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y,"href","#pipeline"),d(B,"class","relative group"),d(We,"id","uso-del-pipeline"),d(We,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(We,"href","#uso-del-pipeline"),d(Ie,"class","relative group"),d(Ct,"href","https://huggingface.co/pysentimiento/robertuito-sentiment-analysis"),d(Ct,"rel","nofollow"),d(Tt,"href","https://huggingface.co/docs/datasets/"),d(Tt,"rel","nofollow"),d(St,"href","https://huggingface.co/docs/datasets/quickstart.html"),d(St,"rel","nofollow"),d(Dt,"href","https://huggingface.co/datasets/PolyAI/minds14"),d(Dt,"rel","nofollow"),d(sa,"href","./main_classes/pipelines"),d(lt,"id","usa-otro-modelo-y-otro-tokenizador-en-el-pipeline"),d(lt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lt,"href","#usa-otro-modelo-y-otro-tokenizador-en-el-pipeline"),d(He,"class","relative group"),d(It,"href","https://huggingface.co/models"),d(It,"rel","nofollow"),d(Ht,"href","https://huggingface.co/nlptown/bert-base-multilingual-uncased-sentiment"),d(Ht,"rel","nofollow"),d(oa,"href","./training"),d(ra,"href","./model_sharing"),d(it,"id","autoclass"),d(it,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(it,"href","#autoclass"),d(Re,"class","relative group"),d(la,"href","./model_doc/auto"),d(pt,"id","autotokenizer"),d(pt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pt,"href","#autotokenizer"),d(Ue,"class","relative group"),d(na,"href","./tokenizer_summary"),d(ua,"href","./glossary#input-ids"),d(da,"href",".glossary#attention-mask"),d(ma,"href","./preprocessing"),d($t,"id","automodel"),d($t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($t,"href","#automodel"),d(Ve,"class","relative group"),d(Zt,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(Zt,"rel","nofollow"),d(Qt,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),d(Qt,"rel","nofollow"),d(Wt,"href","https://keras.io/"),d(Wt,"rel","nofollow"),d(ha,"href","./training"),d(bt,"id","guarda-un-modelo"),d(bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bt,"href","#guarda-un-modelo"),d(Ke,"class","relative group")},m(t,h){s(document.head,e),$(t,l,h),$(t,a,h),s(a,r),s(r,c),P(g,c,null),s(a,_),s(a,E),s(E,k),$(t,z,h),P(A,t,h),$(t,y,h),$(t,C,h),s(C,R),s(C,N),s(N,V),s(C,w),s(C,x),s(x,G),s(C,U),$(t,I,h),P(K,t,h),$(t,Z,h),$(t,B,h),s(B,Y),s(Y,re),P(se,re,null),s(B,oe),s(B,ue),s(ue,ie),$(t,fe,h),$(t,le,h),s(le,X),s(X,pe),s(le,de),$(t,F,h),P(H,t,h),$(t,te,h),$(t,T,h),s(T,J),s(T,ce),s(ce,$e),s(T,Q),$(t,ke,h),$(t,ae,h),s(ae,je),s(je,ve),s(ae,qe),$(t,ge,h),$(t,ee,h),s(ee,ze),s(ze,mr),s(ee,hr),s(ee,Ca),s(Ca,$r),s(ee,gr),s(ee,xa),s(xa,_r),s(ee,vr),s(ee,Ta),s(Ta,br),s(ee,Er),s(ee,Ma),s(Ma,wr),s(ee,kr),s(ee,Pa),s(Pa,jr),s(ee,yr),s(ee,Sa),s(Sa,Ar),s(ee,qr),s(ee,Da),s(Da,zr),$(t,Us,h),$(t,yt,h),s(yt,Fa),s(Fa,Cr),s(yt,xr),$(t,Vs,h),$(t,Ce,h),s(Ce,Oa),s(Oa,Tr),s(Ce,Mr),s(Ce,La),s(La,Pr),s(Ce,Sr),s(Ce,Na),s(Na,Dr),$(t,Ks,h),$(t,At,h),s(At,Ia),s(Ia,Fr),s(At,Or),$(t,Bs,h),$(t,Ze,h),s(Ze,Ha),s(Ha,Lr),s(Ze,Nr),s(Ze,Ra),s(Ra,Ir),$(t,Js,h),P(Qe,t,h),$(t,Gs,h),$(t,Ie,h),s(Ie,We),s(We,Ua),P(qt,Ua,null),s(Ie,Hr),s(Ie,Va),s(Va,Rr),$(t,Ys,h),$(t,Xe,h),s(Xe,Ur),s(Xe,Ka),s(Ka,Vr),s(Xe,Kr),$(t,Zs,h),$(t,aa,h),s(aa,Br),$(t,Qs,h),P(et,t,h),$(t,Ws,h),$(t,tt,h),s(tt,Jr),s(tt,Ba),s(Ba,Gr),s(tt,Yr),$(t,Xs,h),P(zt,t,h),$(t,eo,h),$(t,xe,h),s(xe,Zr),s(xe,Ct),s(Ct,Qr),s(xe,Wr),s(xe,Ja),s(Ja,Xr),s(xe,el),$(t,to,h),P(xt,t,h),$(t,ao,h),$(t,at,h),s(at,tl),s(at,Ga),s(Ga,al),s(at,sl),$(t,so,h),$(t,Te,h),s(Te,ol),s(Te,Ya),s(Ya,rl),s(Te,ll),s(Te,Tt),s(Tt,nl),s(Te,il),$(t,oo,h),P(Mt,t,h),$(t,ro,h),$(t,ye,h),s(ye,pl),s(ye,Za),s(Za,cl),s(ye,ul),s(ye,Qa),s(Qa,fl),s(ye,dl),s(ye,Wa),s(Wa,ml),s(ye,hl),$(t,lo,h),P(Pt,t,h),$(t,no,h),$(t,Me,h),s(Me,$l),s(Me,St),s(St,gl),s(Me,_l),s(Me,Dt),s(Dt,vl),s(Me,bl),$(t,io,h),P(Ft,t,h),$(t,po,h),$(t,st,h),s(st,El),s(st,Xa),s(Xa,wl),s(st,kl),$(t,co,h),P(Ot,t,h),$(t,uo,h),$(t,ot,h),s(ot,jl),s(ot,es),s(es,yl),s(ot,Al),$(t,fo,h),P(Lt,t,h),$(t,mo,h),$(t,rt,h),s(rt,ql),s(rt,sa),s(sa,zl),s(rt,Cl),$(t,ho,h),$(t,He,h),s(He,lt),s(lt,ts),P(Nt,ts,null),s(He,xl),s(He,as),s(as,Tl),$(t,$o,h),$(t,be,h),s(be,Ml),s(be,ss),s(ss,Pl),s(be,Sl),s(be,It),s(It,Dl),s(be,Fl),s(be,os),s(os,Ol),s(be,Ll),s(be,Ht),s(Ht,Nl),s(be,Il),$(t,go,h),P(Rt,t,h),$(t,_o,h),P(nt,t,h),$(t,vo,h),$(t,Pe,h),s(Pe,Hl),s(Pe,rs),s(rs,Rl),s(Pe,Ul),s(Pe,ls),s(ls,Vl),s(Pe,Kl),$(t,bo,h),P(Ut,t,h),$(t,Eo,h),$(t,Se,h),s(Se,Bl),s(Se,oa),s(oa,Jl),s(Se,Gl),s(Se,ra),s(ra,Yl),s(Se,Zl),$(t,wo,h),$(t,Re,h),s(Re,it),s(it,ns),P(Vt,ns,null),s(Re,Ql),s(Re,is),s(is,Wl),$(t,ko,h),P(Kt,t,h),$(t,jo,h),$(t,me,h),s(me,Xl),s(me,ps),s(ps,en),s(me,tn),s(me,cs),s(cs,an),s(me,sn),s(me,us),s(us,on),s(me,rn),s(me,la),s(la,ln),s(me,nn),s(me,fs),s(fs,pn),s(me,cn),s(me,ds),s(ds,un),s(me,fn),$(t,yo,h),$(t,De,h),s(De,dn),s(De,ms),s(ms,mn),s(De,hn),s(De,hs),s(hs,$n),s(De,gn),$(t,Ao,h),$(t,Ue,h),s(Ue,pt),s(pt,$s),P(Bt,$s,null),s(Ue,_n),s(Ue,gs),s(gs,vn),$(t,qo,h),$(t,Fe,h),s(Fe,bn),s(Fe,_s),s(_s,En),s(Fe,wn),s(Fe,na),s(na,kn),s(Fe,jn),$(t,zo,h),$(t,ct,h),s(ct,yn),s(ct,vs),s(vs,An),s(ct,qn),$(t,Co,h),P(Jt,t,h),$(t,xo,h),$(t,ut,h),s(ut,zn),s(ut,bs),s(bs,Cn),s(ut,xn),$(t,To,h),$(t,ia,h),s(ia,Tn),$(t,Mo,h),P(Gt,t,h),$(t,Po,h),$(t,pa,h),s(pa,Mn),$(t,So,h),$(t,ft,h),s(ft,ca),s(ca,ua),s(ua,Pn),s(ca,Sn),s(ft,Dn),s(ft,fa),s(fa,da),s(da,Fn),s(fa,On),$(t,Do,h),$(t,dt,h),s(dt,Ln),s(dt,Es),s(Es,Nn),s(dt,In),$(t,Fo,h),P(mt,t,h),$(t,Oo,h),$(t,ht,h),s(ht,Hn),s(ht,ma),s(ma,Rn),s(ht,Un),$(t,Lo,h),$(t,Ve,h),s(Ve,$t),s($t,ws),P(Yt,ws,null),s(Ve,Vn),s(Ve,ks),s(ks,Kn),$(t,No,h),P(gt,t,h),$(t,Io,h),P(_t,t,h),$(t,Ho,h),$(t,he,h),s(he,Bn),s(he,Zt),s(Zt,js),s(js,Jn),s(he,Gn),s(he,Qt),s(Qt,ys),s(ys,Yn),s(he,Zn),s(he,As),s(As,Qn),s(he,Wn),s(he,qs),s(qs,Xn),s(he,ei),s(he,Wt),s(Wt,ti),s(he,ai),s(he,ha),s(ha,si),s(he,oi),$(t,Ro,h),P(vt,t,h),$(t,Uo,h),$(t,Ke,h),s(Ke,bt),s(bt,zs),P(Xt,zs,null),s(Ke,ri),s(Ke,Cs),s(Cs,li),$(t,Vo,h),P(Et,t,h),$(t,Ko,h),$(t,Oe,h),s(Oe,ni),s(Oe,xs),s(xs,ii),s(Oe,pi),s(Oe,Ts),s(Ts,ci),s(Oe,ui),$(t,Bo,h),P(wt,t,h),Jo=!0},p(t,[h]){const ea={};h&2&&(ea.$$scope={dirty:h,ctx:t}),K.$set(ea);const Ms={};h&2&&(Ms.$$scope={dirty:h,ctx:t}),Qe.$set(Ms);const Ps={};h&2&&(Ps.$$scope={dirty:h,ctx:t}),et.$set(Ps);const Ss={};h&2&&(Ss.$$scope={dirty:h,ctx:t}),nt.$set(Ss);const Be={};h&2&&(Be.$$scope={dirty:h,ctx:t}),mt.$set(Be);const Ds={};h&2&&(Ds.$$scope={dirty:h,ctx:t}),gt.$set(Ds);const Fs={};h&2&&(Fs.$$scope={dirty:h,ctx:t}),_t.$set(Fs);const ta={};h&2&&(ta.$$scope={dirty:h,ctx:t}),vt.$set(ta);const Os={};h&2&&(Os.$$scope={dirty:h,ctx:t}),Et.$set(Os);const Ls={};h&2&&(Ls.$$scope={dirty:h,ctx:t}),wt.$set(Ls)},i(t){Jo||(j(g.$$.fragment,t),j(A.$$.fragment,t),j(K.$$.fragment,t),j(se.$$.fragment,t),j(H.$$.fragment,t),j(Qe.$$.fragment,t),j(qt.$$.fragment,t),j(et.$$.fragment,t),j(zt.$$.fragment,t),j(xt.$$.fragment,t),j(Mt.$$.fragment,t),j(Pt.$$.fragment,t),j(Ft.$$.fragment,t),j(Ot.$$.fragment,t),j(Lt.$$.fragment,t),j(Nt.$$.fragment,t),j(Rt.$$.fragment,t),j(nt.$$.fragment,t),j(Ut.$$.fragment,t),j(Vt.$$.fragment,t),j(Kt.$$.fragment,t),j(Bt.$$.fragment,t),j(Jt.$$.fragment,t),j(Gt.$$.fragment,t),j(mt.$$.fragment,t),j(Yt.$$.fragment,t),j(gt.$$.fragment,t),j(_t.$$.fragment,t),j(vt.$$.fragment,t),j(Xt.$$.fragment,t),j(Et.$$.fragment,t),j(wt.$$.fragment,t),Jo=!0)},o(t){q(g.$$.fragment,t),q(A.$$.fragment,t),q(K.$$.fragment,t),q(se.$$.fragment,t),q(H.$$.fragment,t),q(Qe.$$.fragment,t),q(qt.$$.fragment,t),q(et.$$.fragment,t),q(zt.$$.fragment,t),q(xt.$$.fragment,t),q(Mt.$$.fragment,t),q(Pt.$$.fragment,t),q(Ft.$$.fragment,t),q(Ot.$$.fragment,t),q(Lt.$$.fragment,t),q(Nt.$$.fragment,t),q(Rt.$$.fragment,t),q(nt.$$.fragment,t),q(Ut.$$.fragment,t),q(Vt.$$.fragment,t),q(Kt.$$.fragment,t),q(Bt.$$.fragment,t),q(Jt.$$.fragment,t),q(Gt.$$.fragment,t),q(mt.$$.fragment,t),q(Yt.$$.fragment,t),q(gt.$$.fragment,t),q(_t.$$.fragment,t),q(vt.$$.fragment,t),q(Xt.$$.fragment,t),q(Et.$$.fragment,t),q(wt.$$.fragment,t),Jo=!1},d(t){o(e),t&&o(l),t&&o(a),S(g),t&&o(z),S(A,t),t&&o(y),t&&o(C),t&&o(I),S(K,t),t&&o(Z),t&&o(B),S(se),t&&o(fe),t&&o(le),t&&o(F),S(H,t),t&&o(te),t&&o(T),t&&o(ke),t&&o(ae),t&&o(ge),t&&o(ee),t&&o(Us),t&&o(yt),t&&o(Vs),t&&o(Ce),t&&o(Ks),t&&o(At),t&&o(Bs),t&&o(Ze),t&&o(Js),S(Qe,t),t&&o(Gs),t&&o(Ie),S(qt),t&&o(Ys),t&&o(Xe),t&&o(Zs),t&&o(aa),t&&o(Qs),S(et,t),t&&o(Ws),t&&o(tt),t&&o(Xs),S(zt,t),t&&o(eo),t&&o(xe),t&&o(to),S(xt,t),t&&o(ao),t&&o(at),t&&o(so),t&&o(Te),t&&o(oo),S(Mt,t),t&&o(ro),t&&o(ye),t&&o(lo),S(Pt,t),t&&o(no),t&&o(Me),t&&o(io),S(Ft,t),t&&o(po),t&&o(st),t&&o(co),S(Ot,t),t&&o(uo),t&&o(ot),t&&o(fo),S(Lt,t),t&&o(mo),t&&o(rt),t&&o(ho),t&&o(He),S(Nt),t&&o($o),t&&o(be),t&&o(go),S(Rt,t),t&&o(_o),S(nt,t),t&&o(vo),t&&o(Pe),t&&o(bo),S(Ut,t),t&&o(Eo),t&&o(Se),t&&o(wo),t&&o(Re),S(Vt),t&&o(ko),S(Kt,t),t&&o(jo),t&&o(me),t&&o(yo),t&&o(De),t&&o(Ao),t&&o(Ue),S(Bt),t&&o(qo),t&&o(Fe),t&&o(zo),t&&o(ct),t&&o(Co),S(Jt,t),t&&o(xo),t&&o(ut),t&&o(To),t&&o(ia),t&&o(Mo),S(Gt,t),t&&o(Po),t&&o(pa),t&&o(So),t&&o(ft),t&&o(Do),t&&o(dt),t&&o(Fo),S(mt,t),t&&o(Oo),t&&o(ht),t&&o(Lo),t&&o(Ve),S(Yt),t&&o(No),S(gt,t),t&&o(Io),S(_t,t),t&&o(Ho),t&&o(he),t&&o(Ro),S(vt,t),t&&o(Uo),t&&o(Ke),S(Xt),t&&o(Vo),S(Et,t),t&&o(Ko),t&&o(Oe),t&&o(Bo),S(wt,t)}}}const yu={local:"quick-tour",sections:[{local:"pipeline",sections:[{local:"uso-del-pipeline",title:"Uso del Pipeline"},{local:"usa-otro-modelo-y-otro-tokenizador-en-el-pipeline",title:"Usa otro modelo y otro tokenizador en el pipeline"}],title:"Pipeline"},{local:"autoclass",sections:[{local:"autotokenizer",title:"AutoTokenizer"},{local:"automodel",title:"AutoModel"},{local:"guarda-un-modelo",title:"Guarda un modelo"}],title:"AutoClass"}],title:"Quick tour"};function Au(m){return cc(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Pu extends Je{constructor(e){super();Ge(this,e,Au,ju,Ye,{})}}export{Pu as default,yu as metadata};
