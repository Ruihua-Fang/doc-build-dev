import{D as Xp,S as Je,i as Ge,s as Ye,O,P as L,a as n,d as o,b as d,g as $,F as s,L as ne,t as i,h as p,e as u,w as M,k as v,c as f,x as D,m as b,y as P,Q as ii,q as j,o as A,B as S,n as qa,p as Aa,Y as ec,v as Wp,Z as nr,X as tc,V as ac,H as Fs,I as Os,J as Ls,K as Ns,M as sc}from"../chunks/vendor-c570b7f7.js";import{T as ya}from"../chunks/Tip-4965f0b6.js";import{Y as Vp}from"../chunks/Youtube-ea859fc9.js";import{I as wt}from"../chunks/IconCopyLink-8ab47bfe.js";import{C as W}from"../chunks/CodeBlock-5b876388.js";import{D as oc}from"../chunks/DocNotebookDropdown-e51be72e.js";var Ne=(m=>(m.OPEN="OPEN",m.CLOSED="CLOSED",m.HASHASHLINK="HASHASHLINK",m))(Ne||{});const ni={};function rc(m){return ni[m]||(ni[m]=Xp("OPEN")),ni[m]}function lc(m){let e,l,a,r,c,g;return{c(){e=O("svg"),l=O("defs"),a=O("clipPath"),r=O("rect"),c=O("g"),g=O("path"),this.h()},l(_){e=L(_,"svg",{class:!0,xmlns:!0,"xmlns:xlink":!0,"aria-hidden":!0,focusable:!0,role:!0,width:!0,height:!0,preserveAspectRatio:!0,viewBox:!0});var E=n(e);l=L(E,"defs",{});var k=n(l);a=L(k,"clipPath",{id:!0});var z=n(a);r=L(z,"rect",{x:!0,y:!0,width:!0,height:!0,fill:!0}),n(r).forEach(o),z.forEach(o),k.forEach(o),c=L(E,"g",{"clip-path":!0});var q=n(c);g=L(q,"path",{d:!0,fill:!0}),n(g).forEach(o),q.forEach(o),E.forEach(o),this.h()},h(){d(r,"x","3.05"),d(r,"y","0.5"),d(r,"width","25.73"),d(r,"height","31"),d(r,"fill","none"),d(a,"id","a"),d(g,"d","M24.94,9.51a12.81,12.81,0,0,1,0,18.16,12.68,12.68,0,0,1-18,0,12.81,12.81,0,0,1,0-18.16l9-9V5l-.84.83-6,6a9.58,9.58,0,1,0,13.55,0ZM20.44,9a1.68,1.68,0,1,1,1.67-1.67A1.68,1.68,0,0,1,20.44,9Z"),d(g,"fill","#ee4c2c"),d(c,"clip-path","url(#a)"),d(e,"class",m[0]),d(e,"xmlns","http://www.w3.org/2000/svg"),d(e,"xmlns:xlink","http://www.w3.org/1999/xlink"),d(e,"aria-hidden","true"),d(e,"focusable","false"),d(e,"role","img"),d(e,"width","1em"),d(e,"height","1em"),d(e,"preserveAspectRatio","xMidYMid meet"),d(e,"viewBox","0 0 32 32")},m(_,E){$(_,e,E),s(e,l),s(l,a),s(a,r),s(e,c),s(c,g)},p(_,[E]){E&1&&d(e,"class",_[0])},i:ne,o:ne,d(_){_&&o(e)}}}function nc(m,e,l){let{classNames:a=""}=e;return m.$$set=r=>{"classNames"in r&&l(0,a=r.classNames)},[a]}class ic extends Je{constructor(e){super();Ge(this,e,nc,lc,Ye,{classNames:0})}}function pc(m){let e,l,a,r;return{c(){e=O("svg"),l=O("path"),a=O("path"),r=O("path"),this.h()},l(c){e=L(c,"svg",{class:!0,xmlns:!0,"xmlns:xlink":!0,"aria-hidden":!0,focusable:!0,role:!0,width:!0,height:!0,preserveAspectRatio:!0,viewBox:!0});var g=n(e);l=L(g,"path",{d:!0,fill:!0}),n(l).forEach(o),a=L(g,"path",{d:!0,fill:!0}),n(a).forEach(o),r=L(g,"path",{d:!0,fill:!0}),n(r).forEach(o),g.forEach(o),this.h()},h(){d(l,"d","M145.726 42.065v42.07l72.861 42.07v-42.07l-72.86-42.07zM0 84.135v42.07l36.43 21.03V105.17L0 84.135zm109.291 21.035l-36.43 21.034v126.2l36.43 21.035v-84.135l36.435 21.035v-42.07l-36.435-21.034V105.17z"),d(l,"fill","#E55B2D"),d(a,"d","M145.726 42.065L36.43 105.17v42.065l72.861-42.065v42.065l36.435-21.03v-84.14zM255.022 63.1l-36.435 21.035v42.07l36.435-21.035V63.1zm-72.865 84.135l-36.43 21.035v42.07l36.43-21.036v-42.07zm-36.43 63.104l-36.436-21.035v84.135l36.435-21.035V210.34z"),d(a,"fill","#ED8E24"),d(r,"d","M145.726 0L0 84.135l36.43 21.035l109.296-63.105l72.861 42.07L255.022 63.1L145.726 0zm0 126.204l-36.435 21.03l36.435 21.036l36.43-21.035l-36.43-21.03z"),d(r,"fill","#F8BF3C"),d(e,"class",m[0]),d(e,"xmlns","http://www.w3.org/2000/svg"),d(e,"xmlns:xlink","http://www.w3.org/1999/xlink"),d(e,"aria-hidden","true"),d(e,"focusable","false"),d(e,"role","img"),d(e,"width","0.94em"),d(e,"height","1em"),d(e,"preserveAspectRatio","xMidYMid meet"),d(e,"viewBox","0 0 256 274")},m(c,g){$(c,e,g),s(e,l),s(e,a),s(e,r)},p(c,[g]){g&1&&d(e,"class",c[0])},i:ne,o:ne,d(c){c&&o(e)}}}function cc(m,e,l){let{classNames:a=""}=e;return m.$$set=r=>{"classNames"in r&&l(0,a=r.classNames)},[a]}class uc extends Je{constructor(e){super();Ge(this,e,cc,pc,Ye,{classNames:0})}}function fc(m){let e,l,a,r,c,g,_,E,k,z,q,y,C,R,N,V,w,x,G,U,I,K,Z,B,Y,re,se,oe,ue,ie,fe,le,X,pe,de,F,H,te,T,J,ce;return{c(){e=O("svg"),l=O("style"),a=i(`.J {
			stroke: #dce0df;
		}
		.K {
			stroke-linejoin: round;
		}
	`),r=O("g"),c=O("path"),g=O("path"),_=O("path"),E=O("path"),k=O("path"),z=O("path"),q=O("path"),y=O("path"),C=O("g"),R=O("path"),N=O("path"),V=O("path"),w=O("g"),x=O("path"),G=O("path"),U=O("path"),I=O("g"),K=O("path"),Z=O("path"),B=O("g"),Y=O("path"),re=O("path"),se=O("path"),oe=O("path"),ue=O("path"),ie=O("path"),fe=O("path"),le=O("path"),X=O("g"),pe=O("path"),de=O("path"),F=O("path"),H=O("path"),te=O("g"),T=O("path"),J=O("path"),ce=O("path"),this.h()},l($e){e=L($e,"svg",{class:!0,xmlns:!0,"xmlns:xlink":!0,"aria-hidden":!0,focusable:!0,role:!0,width:!0,height:!0,preserveAspectRatio:!0,viewBox:!0});var Q=n(e);l=L(Q,"style",{});var ke=n(l);a=p(ke,`.J {
			stroke: #dce0df;
		}
		.K {
			stroke-linejoin: round;
		}
	`),ke.forEach(o),r=L(Q,"g",{fill:!0,class:!0});var ae=n(r);c=L(ae,"path",{d:!0}),n(c).forEach(o),g=L(ae,"path",{d:!0}),n(g).forEach(o),_=L(ae,"path",{d:!0}),n(_).forEach(o),E=L(ae,"path",{d:!0}),n(E).forEach(o),k=L(ae,"path",{d:!0}),n(k).forEach(o),z=L(ae,"path",{d:!0}),n(z).forEach(o),q=L(ae,"path",{d:!0}),n(q).forEach(o),y=L(ae,"path",{d:!0}),n(y).forEach(o),ae.forEach(o),C=L(Q,"g",{fill:!0,class:!0});var je=n(C);R=L(je,"path",{d:!0}),n(R).forEach(o),N=L(je,"path",{d:!0}),n(N).forEach(o),V=L(je,"path",{d:!0}),n(V).forEach(o),je.forEach(o),w=L(Q,"g",{fill:!0,class:!0});var ve=n(w);x=L(ve,"path",{d:!0}),n(x).forEach(o),G=L(ve,"path",{d:!0}),n(G).forEach(o),ve.forEach(o),U=L(Q,"path",{d:!0,fill:!0,class:!0}),n(U).forEach(o),I=L(Q,"g",{fill:!0,class:!0});var Ae=n(I);K=L(Ae,"path",{d:!0}),n(K).forEach(o),Z=L(Ae,"path",{d:!0}),n(Z).forEach(o),Ae.forEach(o),B=L(Q,"g",{fill:!0,class:!0});var ge=n(B);Y=L(ge,"path",{d:!0}),n(Y).forEach(o),re=L(ge,"path",{d:!0}),n(re).forEach(o),se=L(ge,"path",{d:!0}),n(se).forEach(o),oe=L(ge,"path",{d:!0}),n(oe).forEach(o),ue=L(ge,"path",{d:!0}),n(ue).forEach(o),ie=L(ge,"path",{d:!0}),n(ie).forEach(o),fe=L(ge,"path",{d:!0}),n(fe).forEach(o),ge.forEach(o),le=L(Q,"path",{d:!0,fill:!0,class:!0}),n(le).forEach(o),X=L(Q,"g",{fill:!0,class:!0});var ee=n(X);pe=L(ee,"path",{d:!0}),n(pe).forEach(o),de=L(ee,"path",{d:!0}),n(de).forEach(o),F=L(ee,"path",{d:!0}),n(F).forEach(o),H=L(ee,"path",{d:!0}),n(H).forEach(o),ee.forEach(o),te=L(Q,"g",{fill:!0,class:!0});var ze=n(te);T=L(ze,"path",{d:!0}),n(T).forEach(o),J=L(ze,"path",{d:!0}),n(J).forEach(o),ce=L(ze,"path",{d:!0}),n(ce).forEach(o),ze.forEach(o),Q.forEach(o),this.h()},h(){d(c,"d","M50.5 130.4l-25 43.31h50l25-43.31h-50z"),d(g,"d","M.5 217.01l25-43.3h50l-25 43.3H.5z"),d(_,"d","M125.5 173.71h-50l-25 43.3h50l25-43.3z"),d(E,"d","M175.5 173.71h-50l-25 43.3h50l25-43.3z"),d(k,"d","M150.5 130.4l-25 43.31h50l25-43.31h-50z"),d(z,"d","M175.5 87.1l-25 43.3h50l25-43.3h-50z"),d(q,"d","M200.5 43.8l-25 43.3h50l25-43.3h-50z"),d(y,"d","M225.5.5l-25 43.3h50l25-43.3h-50z"),d(r,"fill","#5e97f6"),d(r,"class","J K"),d(R,"d","M.5 217.01l25 43.3h50l-25-43.3H.5z"),d(N,"d","M125.5 260.31h-50l-25-43.3h50l25 43.3z"),d(V,"d","M175.5 260.31h-50l-25-43.3h50l25 43.3z"),d(C,"fill","#2a56c6"),d(C,"class","J K"),d(x,"d","M200.5 217.01l-25-43.3-25 43.3 25 43.3 25-43.3zm50-86.61l-25-43.3-25 43.3h50z"),d(G,"d","M250.5 43.8l-25 43.3 25 43.3 25-43.3-25-43.3z"),d(w,"fill","#00796b"),d(w,"class","J K"),d(U,"d","M125.5 173.71l-25-43.31-25 43.31h50z"),d(U,"fill","#3367d6"),d(U,"class","J K"),d(K,"d","M250.5 130.4h-50l-25 43.31h50l25-43.31z"),d(Z,"d","M300.5 130.4h-50l-25 43.31h50l25-43.31z"),d(I,"fill","#26a69a"),d(I,"class","J K"),d(Y,"d","M350.5 43.8L325.5.5l-25 43.3 25 43.3 25-43.3z"),d(re,"d","M375.5 87.1l-25-43.3-25 43.3 25 43.3 25-43.3z"),d(se,"d","M400.5 130.4l-25-43.3-25 43.3 25 43.31 25-43.31z"),d(oe,"d","M425.5 173.71l-25-43.31-25 43.31 25 43.3 25-43.3z"),d(ue,"d","M450.5 217.01l-25-43.3-25 43.3 25 43.3 25-43.3zM425.5.5l-25 43.3 25 43.3 25-43.3-25-43.3z"),d(ie,"d","M375.5 87.1l25-43.3 25 43.3-25 43.3-25-43.3zm-25 43.3l-25 43.31 25 43.3 25-43.3-25-43.31z"),d(fe,"d","M325.5 260.31l-25-43.3 25-43.3 25 43.3-25 43.3z"),d(B,"fill","#9c27b0"),d(B,"class","J K"),d(le,"d","M275.5 260.31l-25-43.3h50l25 43.3h-50z"),d(le,"fill","#6a1b9a"),d(le,"class","J K"),d(pe,"d","M225.5 173.71h-50l25 43.3h50l-25-43.3z"),d(de,"d","M275.5 173.71h-50l25 43.3 25-43.3zm0-86.61l25 43.3h50l-25-43.3h-50z"),d(F,"d","M300.5 43.8h-50l25 43.3h50l-25-43.3zm125 216.51l-25-43.3h-50l25 43.3h50z"),d(H,"d","M375.5 173.71l-25 43.3h50l-25-43.3z"),d(X,"fill","#00695c"),d(X,"class","J K"),d(T,"d","M325.5.5h-50l-25 43.3h50l25-43.3zm0 173.21h-50l-25 43.3h50l25-43.3z"),d(J,"d","M350.5 130.4h-50l-25 43.31h50l25-43.31zM425.5.5h-50l-25 43.3h50l25-43.3z"),d(ce,"d","M375.5 87.1l-25-43.3h50l-25 43.3z"),d(te,"fill","#ea80fc"),d(te,"class","J K"),d(e,"class",m[0]),d(e,"xmlns","http://www.w3.org/2000/svg"),d(e,"xmlns:xlink","http://www.w3.org/1999/xlink"),d(e,"aria-hidden","true"),d(e,"focusable","false"),d(e,"role","img"),d(e,"width","1.73em"),d(e,"height","1em"),d(e,"preserveAspectRatio","xMidYMid meet"),d(e,"viewBox","0 0 451 260.81")},m($e,Q){$($e,e,Q),s(e,l),s(l,a),s(e,r),s(r,c),s(r,g),s(r,_),s(r,E),s(r,k),s(r,z),s(r,q),s(r,y),s(e,C),s(C,R),s(C,N),s(C,V),s(e,w),s(w,x),s(w,G),s(e,U),s(e,I),s(I,K),s(I,Z),s(e,B),s(B,Y),s(B,re),s(B,se),s(B,oe),s(B,ue),s(B,ie),s(B,fe),s(e,le),s(e,X),s(X,pe),s(X,de),s(X,F),s(X,H),s(e,te),s(te,T),s(te,J),s(te,ce)},p($e,[Q]){Q&1&&d(e,"class",$e[0])},i:ne,o:ne,d($e){$e&&o(e)}}}function dc(m,e,l){let{classNames:a=""}=e;return m.$$set=r=>{"classNames"in r&&l(0,a=r.classNames)},[a]}class mc extends Je{constructor(e){super();Ge(this,e,dc,fc,Ye,{classNames:0})}}function hc(m){let e,l;return{c(){e=O("svg"),l=O("path"),this.h()},l(a){e=L(a,"svg",{class:!0,width:!0,height:!0,viewBox:!0,fill:!0,xmlns:!0});var r=n(e);l=L(r,"path",{d:!0,fill:!0}),n(l).forEach(o),r.forEach(o),this.h()},h(){d(l,"d","M0 4.50001C0.390979 2.37042 2.25728 0.756592 4.5 0.756592C6.74272 0.756592 8.60861 2.37042 9 4.50001C8.60902 6.62959 6.74272 8.24342 4.5 8.24342C2.25728 8.24342 0.391395 6.62959 0 4.50001ZM4.5 6.57968C5.05156 6.57968 5.58054 6.36057 5.97055 5.97056C6.36057 5.58054 6.57967 5.05157 6.57967 4.50001C6.57967 3.94844 6.36057 3.41947 5.97055 3.02945C5.58054 2.63944 5.05156 2.42033 4.5 2.42033C3.94844 2.42033 3.41946 2.63944 3.02945 3.02945C2.63943 3.41947 2.42033 3.94844 2.42033 4.50001C2.42033 5.05157 2.63943 5.58054 3.02945 5.97056C3.41946 6.36057 3.94844 6.57968 4.5 6.57968ZM4.5 5.74781C4.16906 5.74781 3.85168 5.61635 3.61767 5.38234C3.38366 5.14833 3.2522 4.83094 3.2522 4.50001C3.2522 4.16907 3.38366 3.85168 3.61767 3.61767C3.85168 3.38367 4.16906 3.2522 4.5 3.2522C4.83094 3.2522 5.14832 3.38367 5.38233 3.61767C5.61634 3.85168 5.7478 4.16907 5.7478 4.50001C5.7478 4.83094 5.61634 5.14833 5.38233 5.38234C5.14832 5.61635 4.83094 5.74781 4.5 5.74781Z"),d(l,"fill","currentColor"),d(e,"class",m[0]),d(e,"width",m[1]),d(e,"height",m[1]),d(e,"viewBox","0 0 9 9"),d(e,"fill","currentColor"),d(e,"xmlns","http://www.w3.org/2000/svg")},m(a,r){$(a,e,r),s(e,l)},p(a,[r]){r&1&&d(e,"class",a[0]),r&2&&d(e,"width",a[1]),r&2&&d(e,"height",a[1])},i:ne,o:ne,d(a){a&&o(e)}}}function $c(m,e,l){let{classNames:a=""}=e,{size:r="1em"}=e;return m.$$set=c=>{"classNames"in c&&l(0,a=c.classNames),"size"in c&&l(1,r=c.size)},[a,r]}class gc extends Je{constructor(e){super();Ge(this,e,$c,hc,Ye,{classNames:0,size:1})}}function _c(m){let e,l;return{c(){e=O("svg"),l=O("path"),this.h()},l(a){e=L(a,"svg",{class:!0,width:!0,height:!0,viewBox:!0,fill:!0,xmlns:!0});var r=n(e);l=L(r,"path",{d:!0,fill:!0}),n(l).forEach(o),r.forEach(o),this.h()},h(){d(l,"d","M1.39125 1.9725L0.0883333 0.669997L0.677917 0.0804138L8.9275 8.33041L8.33792 8.91958L6.95875 7.54041C6.22592 8.00523 5.37572 8.25138 4.50792 8.25C2.26125 8.25 0.392083 6.63333 0 4.5C0.179179 3.52946 0.667345 2.64287 1.39167 1.9725H1.39125ZM5.65667 6.23833L5.04667 5.62833C4.81335 5.73996 4.55116 5.77647 4.29622 5.73282C4.04129 5.68918 3.80617 5.56752 3.62328 5.38463C3.44039 5.20175 3.31874 4.96663 3.27509 4.71169C3.23144 4.45676 3.26795 4.19456 3.37958 3.96125L2.76958 3.35125C2.50447 3.75187 2.38595 4.2318 2.4341 4.70978C2.48225 5.18777 2.6941 5.63442 3.0338 5.97411C3.37349 6.31381 3.82015 6.52567 4.29813 6.57382C4.77611 6.62197 5.25605 6.50345 5.65667 6.23833ZM2.83042 1.06666C3.35 0.862497 3.91625 0.749997 4.50792 0.749997C6.75458 0.749997 8.62375 2.36666 9.01583 4.5C8.88816 5.19404 8.60119 5.84899 8.1775 6.41333L6.56917 4.805C6.61694 4.48317 6.58868 4.15463 6.48664 3.84569C6.3846 3.53675 6.21162 3.256 5.98156 3.02594C5.7515 2.79588 5.47075 2.6229 5.16181 2.52086C4.85287 2.41882 4.52433 2.39056 4.2025 2.43833L2.83042 1.06708V1.06666Z"),d(l,"fill","currentColor"),d(e,"class",m[0]),d(e,"width",m[1]),d(e,"height",m[1]),d(e,"viewBox","0 0 10 9"),d(e,"fill","currentColor"),d(e,"xmlns","http://www.w3.org/2000/svg")},m(a,r){$(a,e,r),s(e,l)},p(a,[r]){r&1&&d(e,"class",a[0]),r&2&&d(e,"width",a[1]),r&2&&d(e,"height",a[1])},i:ne,o:ne,d(a){a&&o(e)}}}function vc(m,e,l){let{classNames:a=""}=e,{size:r="1em"}=e;return m.$$set=c=>{"classNames"in c&&l(0,a=c.classNames),"size"in c&&l(1,r=c.size)},[a,r]}class bc extends Je{constructor(e){super();Ge(this,e,vc,_c,Ye,{classNames:0,size:1})}}const{window:Ec}=tc;function Kp(m){let e,l,a,r,c,g,_,E,k,z;return l=new bc({props:{size:"0.9em"}}),{c(){e=u("div"),M(l.$$.fragment),a=v(),r=u("span"),c=i("Hide "),g=i(m[3]),_=i(" content"),this.h()},l(q){e=f(q,"DIV",{class:!0});var y=n(e);D(l.$$.fragment,y),a=b(y),r=f(y,"SPAN",{});var C=n(r);c=p(C,"Hide "),g=p(C,m[3]),_=p(C," content"),C.forEach(o),y.forEach(o),this.h()},h(){d(e,"class","cursor-pointer flex items-center justify-center space-x-1 text-sm px-2 bg-white dark:bg-gray-950 hover:underline leading-none")},m(q,y){$(q,e,y),P(l,e,null),s(e,a),s(e,r),s(r,c),s(r,g),s(r,_),E=!0,k||(z=ii(e,"click",m[5]),k=!0)},p:ne,i(q){E||(j(l.$$.fragment,q),E=!0)},o(q){A(l.$$.fragment,q),E=!1},d(q){q&&o(e),S(l),k=!1,z()}}}function wc(m){let e,l;const a=m[10].default,r=Fs(a,m,m[9],null);return{c(){e=u("div"),r&&r.c(),this.h()},l(c){e=f(c,"DIV",{class:!0});var g=n(e);r&&r.l(g),g.forEach(o),this.h()},h(){d(e,"class","framework-content")},m(c,g){$(c,e,g),r&&r.m(e,null),l=!0},p(c,g){r&&r.p&&(!l||g&512)&&Os(r,a,c,c[9],l?Ns(a,c[9],g,null):Ls(c[9]),null)},i(c){l||(j(r,c),l=!0)},o(c){A(r,c),l=!1},d(c){c&&o(e),r&&r.d(c)}}}function kc(m){let e,l,a,r,c,g,_,E,k,z;return l=new gc({props:{size:"0.9em"}}),{c(){e=u("div"),M(l.$$.fragment),a=v(),r=u("span"),c=i("Show "),g=i(m[3]),_=i(" content"),this.h()},l(q){e=f(q,"DIV",{class:!0});var y=n(e);D(l.$$.fragment,y),a=b(y),r=f(y,"SPAN",{});var C=n(r);c=p(C,"Show "),g=p(C,m[3]),_=p(C," content"),C.forEach(o),y.forEach(o),this.h()},h(){d(e,"class","cursor-pointer mt-[-12.5px] flex items-center justify-center space-x-1 py-4 text-sm hover:underline leading-none")},m(q,y){$(q,e,y),P(l,e,null),s(e,a),s(e,r),s(r,c),s(r,g),s(r,_),E=!0,k||(z=ii(e,"click",m[5]),k=!0)},p:ne,i(q){E||(j(l.$$.fragment,q),E=!0)},o(q){A(l.$$.fragment,q),E=!1},d(q){q&&o(e),S(l),k=!1,z()}}}function jc(m){let e,l,a,r,c,g,_,E,k,z,q,y,C,R;var N=m[2];function V(I){return{}}N&&(r=new N(V()));let w=!m[1]&&Kp(m);const x=[kc,wc],G=[];function U(I,K){return I[1]?0:1}return z=U(m),q=G[z]=x[z](m),{c(){e=u("div"),l=u("div"),a=u("div"),r&&M(r.$$.fragment),c=v(),g=u("span"),_=i(m[3]),E=v(),w&&w.c(),k=v(),q.c(),this.h()},l(I){e=f(I,"DIV",{class:!0});var K=n(e);l=f(K,"DIV",{class:!0});var Z=n(l);a=f(Z,"DIV",{class:!0});var B=n(a);r&&D(r.$$.fragment,B),c=b(B),g=f(B,"SPAN",{});var Y=n(g);_=p(Y,m[3]),Y.forEach(o),B.forEach(o),E=b(Z),w&&w.l(Z),Z.forEach(o),k=b(K),q.l(K),K.forEach(o),this.h()},h(){d(a,"class","flex px-1 items-center space-x-1 bg-white dark:bg-gray-950"),d(l,"class","flex h-[22px] mt-[-12.5px] justify-between leading-none"),d(e,"class","border border-gray-200 rounded-xl px-4 relative")},m(I,K){$(I,e,K),s(e,l),s(l,a),r&&P(r,a,null),s(a,c),s(a,g),s(g,_),s(l,E),w&&w.m(l,null),s(e,k),G[z].m(e,null),m[11](e),y=!0,C||(R=ii(Ec,"hashchange",m[6]),C=!0)},p(I,[K]){if(N!==(N=I[2])){if(r){qa();const B=r;A(B.$$.fragment,1,0,()=>{S(B,1)}),Aa()}N?(r=new N(V()),M(r.$$.fragment),j(r.$$.fragment,1),P(r,a,c)):r=null}I[1]?w&&(qa(),A(w,1,1,()=>{w=null}),Aa()):w?(w.p(I,K),K&2&&j(w,1)):(w=Kp(I),w.c(),j(w,1),w.m(l,null));let Z=z;z=U(I),z===Z?G[z].p(I,K):(qa(),A(G[Z],1,1,()=>{G[Z]=null}),Aa(),q=G[z],q?q.p(I,K):(q=G[z]=x[z](I),q.c()),j(q,1),q.m(e,null))},i(I){y||(r&&j(r.$$.fragment,I),j(w),j(q),y=!0)},o(I){r&&A(r.$$.fragment,I),A(w),A(q),y=!1},d(I){I&&o(e),r&&S(r),w&&w.d(),G[z].d(),m[11](null),C=!1,R()}}}function yc(m,e,l){let a,r,{$$slots:c={},$$scope:g}=e,{framework:_}=e,E,k=new Set;const z={pytorch:{Icon:ic,label:"Pytorch"},tensorflow:{Icon:uc,label:"TensorFlow"},jax:{Icon:mc,label:"JAX"}},{Icon:q,label:y}=z[_],C=`hf_doc_framework_${_}_is_hidden`,R=rc(_);ec(m,R,x=>l(8,r=x));function N(){nr(R,r=r!==Ne.CLOSED?Ne.CLOSED:Ne.OPEN,r),localStorage.setItem(C,r)}function V(){const x=window.location.hash.slice(1);k.has(x)&&(nr(R,r=Ne.HASHASHLINK,r),localStorage.setItem(C,r))}Wp(()=>{const x=window.location.hash.slice(1),G="header-link",U=E.querySelectorAll(`.${G}`);k=new Set([...U].map(K=>K.id));const I=localStorage.getItem(C);k.has(x)?nr(R,r=Ne.HASHASHLINK,r):I===Ne.CLOSED&&r!==Ne.HASHASHLINK&&nr(R,r=Ne.CLOSED,r)});function w(x){ac[x?"unshift":"push"](()=>{E=x,l(0,E)})}return m.$$set=x=>{"framework"in x&&l(7,_=x.framework),"$$scope"in x&&l(9,g=x.$$scope)},m.$$.update=()=>{m.$$.dirty&256&&l(1,a=r===Ne.CLOSED)},[E,a,q,y,R,N,V,_,r,g,c,w]}class pi extends Je{constructor(e){super();Ge(this,e,yc,jc,Ye,{framework:7})}}const qc=m=>({}),Bp=m=>({}),Ac=m=>({}),Jp=m=>({}),zc=m=>({}),Gp=m=>({});function Yp(m){let e,l;return e=new pi({props:{framework:"pytorch",$$slots:{default:[Cc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&16&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Cc(m){let e;const l=m[3].pytorch,a=Fs(l,m,m[4],Gp);return{c(){a&&a.c()},l(r){a&&a.l(r)},m(r,c){a&&a.m(r,c),e=!0},p(r,c){a&&a.p&&(!e||c&16)&&Os(a,l,r,r[4],e?Ns(l,r[4],c,zc):Ls(r[4]),Gp)},i(r){e||(j(a,r),e=!0)},o(r){A(a,r),e=!1},d(r){a&&a.d(r)}}}function Zp(m){let e,l;return e=new pi({props:{framework:"tensorflow",$$slots:{default:[xc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&16&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function xc(m){let e;const l=m[3].tensorflow,a=Fs(l,m,m[4],Jp);return{c(){a&&a.c()},l(r){a&&a.l(r)},m(r,c){a&&a.m(r,c),e=!0},p(r,c){a&&a.p&&(!e||c&16)&&Os(a,l,r,r[4],e?Ns(l,r[4],c,Ac):Ls(r[4]),Jp)},i(r){e||(j(a,r),e=!0)},o(r){A(a,r),e=!1},d(r){a&&a.d(r)}}}function Qp(m){let e,l;return e=new pi({props:{framework:"jax",$$slots:{default:[Tc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&16&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Tc(m){let e;const l=m[3].jax,a=Fs(l,m,m[4],Bp);return{c(){a&&a.c()},l(r){a&&a.l(r)},m(r,c){a&&a.m(r,c),e=!0},p(r,c){a&&a.p&&(!e||c&16)&&Os(a,l,r,r[4],e?Ns(l,r[4],c,qc):Ls(r[4]),Bp)},i(r){e||(j(a,r),e=!0)},o(r){A(a,r),e=!1},d(r){a&&a.d(r)}}}function Mc(m){let e,l,a,r,c=m[0]&&Yp(m),g=m[1]&&Zp(m),_=m[2]&&Qp(m);return{c(){e=u("div"),c&&c.c(),l=v(),g&&g.c(),a=v(),_&&_.c(),this.h()},l(E){e=f(E,"DIV",{class:!0});var k=n(e);c&&c.l(k),l=b(k),g&&g.l(k),a=b(k),_&&_.l(k),k.forEach(o),this.h()},h(){d(e,"class","space-y-10 py-6 2xl:py-8 2xl:-mx-4")},m(E,k){$(E,e,k),c&&c.m(e,null),s(e,l),g&&g.m(e,null),s(e,a),_&&_.m(e,null),r=!0},p(E,[k]){E[0]?c?(c.p(E,k),k&1&&j(c,1)):(c=Yp(E),c.c(),j(c,1),c.m(e,l)):c&&(qa(),A(c,1,1,()=>{c=null}),Aa()),E[1]?g?(g.p(E,k),k&2&&j(g,1)):(g=Zp(E),g.c(),j(g,1),g.m(e,a)):g&&(qa(),A(g,1,1,()=>{g=null}),Aa()),E[2]?_?(_.p(E,k),k&4&&j(_,1)):(_=Qp(E),_.c(),j(_,1),_.m(e,null)):_&&(qa(),A(_,1,1,()=>{_=null}),Aa())},i(E){r||(j(c),j(g),j(_),r=!0)},o(E){A(c),A(g),A(_),r=!1},d(E){E&&o(e),c&&c.d(),g&&g.d(),_&&_.d()}}}function Pc(m,e,l){let{$$slots:a={},$$scope:r}=e,{pytorch:c=!1}=e,{tensorflow:g=!1}=e,{jax:_=!1}=e;return m.$$set=E=>{"pytorch"in E&&l(0,c=E.pytorch),"tensorflow"in E&&l(1,g=E.tensorflow),"jax"in E&&l(2,_=E.jax),"$$scope"in E&&l(4,r=E.$$scope)},[c,g,_,a,r]}class ja extends Je{constructor(e){super();Ge(this,e,Pc,Mc,Ye,{pytorch:0,tensorflow:1,jax:2})}}function Sc(m){let e;const l=m[1].default,a=Fs(l,m,m[0],null);return{c(){a&&a.c()},l(r){a&&a.l(r)},m(r,c){a&&a.m(r,c),e=!0},p(r,[c]){a&&a.p&&(!e||c&1)&&Os(a,l,r,r[0],e?Ns(l,r[0],c,null):Ls(r[0]),null)},i(r){e||(j(a,r),e=!0)},o(r){A(a,r),e=!1},d(r){a&&a.d(r)}}}function Dc(m,e,l){let{$$slots:a={},$$scope:r}=e;return m.$$set=c=>{"$$scope"in c&&l(0,r=c.$$scope)},[r,a]}class qe extends Je{constructor(e){super();Ge(this,e,Dc,Sc,Ye,{})}}function Fc(m){let e,l;return{c(){e=u("p"),l=i(`Todos los ejemplos de c\xF3digo presentados en la documentaci\xF3n tienen un bot\xF3n arriba a la izquierda para elegir entre Pytorch y TensorFlow.
Si no fuese as\xED, se espera que el c\xF3digo funcione para ambos backends sin ning\xFAn cambio.`)},l(a){e=f(a,"P",{});var r=n(e);l=p(r,`Todos los ejemplos de c\xF3digo presentados en la documentaci\xF3n tienen un bot\xF3n arriba a la izquierda para elegir entre Pytorch y TensorFlow.
Si no fuese as\xED, se espera que el c\xF3digo funcione para ambos backends sin ning\xFAn cambio.`),r.forEach(o)},m(a,r){$(a,e,r),s(e,l)},d(a){a&&o(e)}}}function Oc(m){let e,l,a,r,c,g,_,E;return{c(){e=u("p"),l=i("Para m\xE1s detalles acerca del "),a=u("code"),r=i("pipeline()"),c=i(" y tareas asociadas, consulta la documentaci\xF3n "),g=u("a"),_=i("aqu\xED"),E=i("."),this.h()},l(k){e=f(k,"P",{});var z=n(e);l=p(z,"Para m\xE1s detalles acerca del "),a=f(z,"CODE",{});var q=n(a);r=p(q,"pipeline()"),q.forEach(o),c=p(z," y tareas asociadas, consulta la documentaci\xF3n "),g=f(z,"A",{href:!0});var y=n(g);_=p(y,"aqu\xED"),y.forEach(o),E=p(z,"."),z.forEach(o),this.h()},h(){d(g,"href","./main_classes/pipelines")},m(k,z){$(k,e,z),s(e,l),s(e,a),s(a,r),s(e,c),s(e,g),s(g,_),s(e,E)},d(k){k&&o(e)}}}function Lc(m){let e,l;return e=new W({props:{code:"pip install torch",highlighted:"pip install torch"}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Nc(m){let e,l;return e=new qe({props:{$$slots:{default:[Lc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Ic(m){let e,l;return e=new W({props:{code:"pip install tensorflow",highlighted:"pip install tensorflow"}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Hc(m){let e,l;return e=new qe({props:{$$slots:{default:[Ic]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Rc(m){let e,l,a,r,c,g,_,E,k,z,q;return z=new W({props:{code:`from transformers import AutoTokenizer, AutoModelForSequenceClassification

model = AutoModelForSequenceClassification.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(model_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_name)`}}),{c(){e=u("p"),l=i("Usa "),a=u("code"),r=i("AutoModelForSequenceClassification"),c=i(" y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),g=u("code"),_=i("AutoClass"),E=i(" debajo):"),k=v(),M(z.$$.fragment)},l(y){e=f(y,"P",{});var C=n(e);l=p(C,"Usa "),a=f(C,"CODE",{});var R=n(a);r=p(R,"AutoModelForSequenceClassification"),R.forEach(o),c=p(C," y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),g=f(C,"CODE",{});var N=n(g);_=p(N,"AutoClass"),N.forEach(o),E=p(C," debajo):"),C.forEach(o),k=b(y),D(z.$$.fragment,y)},m(y,C){$(y,e,C),s(e,l),s(e,a),s(a,r),s(e,c),s(e,g),s(g,_),s(e,E),$(y,k,C),P(z,y,C),q=!0},p:ne,i(y){q||(j(z.$$.fragment,y),q=!0)},o(y){A(z.$$.fragment,y),q=!1},d(y){y&&o(e),y&&o(k),S(z,y)}}}function Uc(m){let e,l;return e=new qe({props:{$$slots:{default:[Rc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Vc(m){let e,l,a,r,c,g,_,E,k,z,q;return z=new W({props:{code:`from transformers import AutoTokenizer, TFAutoModelForSequenceClassification

model = TFAutoModelForSequenceClassification.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(model_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_name)`}}),{c(){e=u("p"),l=i("Usa "),a=u("code"),r=i("TFAutoModelForSequenceClassification"),c=i(" y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),g=u("code"),_=i("TFAutoClass"),E=i(" debajo):"),k=v(),M(z.$$.fragment)},l(y){e=f(y,"P",{});var C=n(e);l=p(C,"Usa "),a=f(C,"CODE",{});var R=n(a);r=p(R,"TFAutoModelForSequenceClassification"),R.forEach(o),c=p(C," y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),g=f(C,"CODE",{});var N=n(g);_=p(N,"TFAutoClass"),N.forEach(o),E=p(C," debajo):"),C.forEach(o),k=b(y),D(z.$$.fragment,y)},m(y,C){$(y,e,C),s(e,l),s(e,a),s(a,r),s(e,c),s(e,g),s(g,_),s(e,E),$(y,k,C),P(z,y,C),q=!0},p:ne,i(y){q||(j(z.$$.fragment,y),q=!0)},o(y){A(z.$$.fragment,y),q=!1},d(y){y&&o(e),y&&o(k),S(z,y)}}}function Kc(m){let e,l;return e=new qe({props:{$$slots:{default:[Vc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Bc(m){let e,l;return e=new W({props:{code:`pt_batch = tokenizer(
    ["We are very happy to show you the \u{1F917} Transformers library.", "We hope you don't hate it."],
    padding=True,
    truncation=True,
    max_length=512,
    return_tensors="pt",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pt_batch = tokenizer(
<span class="hljs-meta">... </span>    [<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>, <span class="hljs-string">&quot;We hope you don&#x27;t hate it.&quot;</span>],
<span class="hljs-meta">... </span>    padding=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    truncation=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    max_length=<span class="hljs-number">512</span>,
<span class="hljs-meta">... </span>    return_tensors=<span class="hljs-string">&quot;pt&quot;</span>,
<span class="hljs-meta">... </span>)`}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Jc(m){let e,l;return e=new qe({props:{$$slots:{default:[Bc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Gc(m){let e,l;return e=new W({props:{code:`tf_batch = tokenizer(
    ["We are very happy to show you the \u{1F917} Transformers library.", "We hope you don't hate it."],
    padding=True,
    truncation=True,
    max_length=512,
    return_tensors="tf",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tf_batch = tokenizer(
<span class="hljs-meta">... </span>    [<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>, <span class="hljs-string">&quot;We hope you don&#x27;t hate it.&quot;</span>],
<span class="hljs-meta">... </span>    padding=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    truncation=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    max_length=<span class="hljs-number">512</span>,
<span class="hljs-meta">... </span>    return_tensors=<span class="hljs-string">&quot;tf&quot;</span>,
<span class="hljs-meta">... </span>)`}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Yc(m){let e,l;return e=new qe({props:{$$slots:{default:[Gc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Zc(m){let e,l,a,r,c,g,_,E;return{c(){e=u("p"),l=i("Ve el "),a=u("a"),r=i("task summary"),c=i(" para revisar qu\xE9 clase del "),g=u("code"),_=i("AutoModel"),E=i(" deber\xEDas usar para cada tarea."),this.h()},l(k){e=f(k,"P",{});var z=n(e);l=p(z,"Ve el "),a=f(z,"A",{href:!0});var q=n(a);r=p(q,"task summary"),q.forEach(o),c=p(z," para revisar qu\xE9 clase del "),g=f(z,"CODE",{});var y=n(g);_=p(y,"AutoModel"),y.forEach(o),E=p(z," deber\xEDas usar para cada tarea."),z.forEach(o),this.h()},h(){d(a,"href","./task_summary")},m(k,z){$(k,e,z),s(e,l),s(e,a),s(a,r),s(e,c),s(e,g),s(g,_),s(e,E)},d(k){k&&o(e)}}}function Qc(m){let e,l,a,r,c,g,_,E,k,z,q,y,C,R,N,V,w,x,G,U,I,K,Z,B,Y,re,se,oe,ue,ie,fe,le,X,pe,de,F,H,te;return V=new W({props:{code:`from transformers import AutoModelForSequenceClassification

model_name = "nlptown/bert-base-multilingual-uncased-sentiment"
pt_model = AutoModelForSequenceClassification.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(model_name)`}}),x=new ya({props:{$$slots:{default:[Zc]},$$scope:{ctx:m}}}),re=new W({props:{code:"pt_outputs = pt_model(**pt_batch)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>pt_outputs = pt_model(**pt_batch)'}}),H=new W({props:{code:`from torch import nn

pt_predictions = nn.functional.softmax(pt_outputs.logits, dim=-1)
print(pt_predictions)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn

<span class="hljs-meta">&gt;&gt;&gt; </span>pt_predictions = nn.functional.softmax(pt_outputs.logits, dim=-<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(pt_predictions)
tensor([[<span class="hljs-number">0.0021</span>, <span class="hljs-number">0.0018</span>, <span class="hljs-number">0.0115</span>, <span class="hljs-number">0.2121</span>, <span class="hljs-number">0.7725</span>],
        [<span class="hljs-number">0.2084</span>, <span class="hljs-number">0.1826</span>, <span class="hljs-number">0.1969</span>, <span class="hljs-number">0.1755</span>, <span class="hljs-number">0.2365</span>]], grad_fn=&lt;SoftmaxBackward0&gt;)`}}),{c(){e=u("p"),l=i("\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),a=u("code"),r=i("AutoModel"),c=i(" como cargar\xEDas un "),g=u("code"),_=i("AutoTokenizer"),E=i(". La \xFAnica diferencia es seleccionar el "),k=u("code"),z=i("AutoModel"),q=i(" correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),y=u("code"),C=i("AutoModelForSequenceClassification"),R=i(":"),N=v(),M(V.$$.fragment),w=v(),M(x.$$.fragment),G=v(),U=u("p"),I=i("Ahora puedes pasar tu lote (batch) preprocesado de inputs directamente al modelo. Solo tienes que desempacar el diccionario a\xF1adiendo "),K=u("code"),Z=i("**"),B=i(":"),Y=v(),M(re.$$.fragment),se=v(),oe=u("p"),ue=i("El modelo producir\xE1 las activaciones finales en el atributo "),ie=u("code"),fe=i("logits"),le=i(". Aplica la funci\xF3n softmax a "),X=u("code"),pe=i("logits"),de=i(" para obtener las probabilidades:"),F=v(),M(H.$$.fragment)},l(T){e=f(T,"P",{});var J=n(e);l=p(J,"\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),a=f(J,"CODE",{});var ce=n(a);r=p(ce,"AutoModel"),ce.forEach(o),c=p(J," como cargar\xEDas un "),g=f(J,"CODE",{});var $e=n(g);_=p($e,"AutoTokenizer"),$e.forEach(o),E=p(J,". La \xFAnica diferencia es seleccionar el "),k=f(J,"CODE",{});var Q=n(k);z=p(Q,"AutoModel"),Q.forEach(o),q=p(J," correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),y=f(J,"CODE",{});var ke=n(y);C=p(ke,"AutoModelForSequenceClassification"),ke.forEach(o),R=p(J,":"),J.forEach(o),N=b(T),D(V.$$.fragment,T),w=b(T),D(x.$$.fragment,T),G=b(T),U=f(T,"P",{});var ae=n(U);I=p(ae,"Ahora puedes pasar tu lote (batch) preprocesado de inputs directamente al modelo. Solo tienes que desempacar el diccionario a\xF1adiendo "),K=f(ae,"CODE",{});var je=n(K);Z=p(je,"**"),je.forEach(o),B=p(ae,":"),ae.forEach(o),Y=b(T),D(re.$$.fragment,T),se=b(T),oe=f(T,"P",{});var ve=n(oe);ue=p(ve,"El modelo producir\xE1 las activaciones finales en el atributo "),ie=f(ve,"CODE",{});var Ae=n(ie);fe=p(Ae,"logits"),Ae.forEach(o),le=p(ve,". Aplica la funci\xF3n softmax a "),X=f(ve,"CODE",{});var ge=n(X);pe=p(ge,"logits"),ge.forEach(o),de=p(ve," para obtener las probabilidades:"),ve.forEach(o),F=b(T),D(H.$$.fragment,T)},m(T,J){$(T,e,J),s(e,l),s(e,a),s(a,r),s(e,c),s(e,g),s(g,_),s(e,E),s(e,k),s(k,z),s(e,q),s(e,y),s(y,C),s(e,R),$(T,N,J),P(V,T,J),$(T,w,J),P(x,T,J),$(T,G,J),$(T,U,J),s(U,I),s(U,K),s(K,Z),s(U,B),$(T,Y,J),P(re,T,J),$(T,se,J),$(T,oe,J),s(oe,ue),s(oe,ie),s(ie,fe),s(oe,le),s(oe,X),s(X,pe),s(oe,de),$(T,F,J),P(H,T,J),te=!0},p(T,J){const ce={};J&2&&(ce.$$scope={dirty:J,ctx:T}),x.$set(ce)},i(T){te||(j(V.$$.fragment,T),j(x.$$.fragment,T),j(re.$$.fragment,T),j(H.$$.fragment,T),te=!0)},o(T){A(V.$$.fragment,T),A(x.$$.fragment,T),A(re.$$.fragment,T),A(H.$$.fragment,T),te=!1},d(T){T&&o(e),T&&o(N),S(V,T),T&&o(w),S(x,T),T&&o(G),T&&o(U),T&&o(Y),S(re,T),T&&o(se),T&&o(oe),T&&o(F),S(H,T)}}}function Wc(m){let e,l;return e=new qe({props:{$$slots:{default:[Qc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Xc(m){let e;return{c(){e=i("Ve el [task summary](./task_summary) para revisar qu\xE9 clase del `AutoModel`\n  deber\xEDas usar para cada tarea.")},l(l){e=p(l,"Ve el [task summary](./task_summary) para revisar qu\xE9 clase del `AutoModel`\n  deber\xEDas usar para cada tarea.")},m(l,a){$(l,e,a)},d(l){l&&o(e)}}}function eu(m){let e,l,a,r,c,g,_,E,k,z,q,y,C,R,N,V,w,x,G,U,I,K,Z,B,Y,re,se,oe,ue,ie,fe,le,X,pe,de;return V=new W({props:{code:`from transformers import TFAutoModelForSequenceClassification

model_name = "nlptown/bert-base-multilingual-uncased-sentiment"
tf_model = TFAutoModelForSequenceClassification.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(model_name)`}}),x=new ya({props:{$$slots:{default:[Xc]},$$scope:{ctx:m}}}),Z=new W({props:{code:"tf_outputs = tf_model(tf_batch)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_outputs = tf_model(tf_batch)'}}),pe=new W({props:{code:`import tensorflow as tf

tf_predictions = tf.nn.softmax(tf_outputs.logits, axis=-1)
print(tf.math.round(tf_predictions * 10**4) / 10**4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

<span class="hljs-meta">&gt;&gt;&gt; </span>tf_predictions = tf.nn.softmax(tf_outputs.logits, axis=-<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(tf.math.<span class="hljs-built_in">round</span>(tf_predictions * <span class="hljs-number">10</span>**<span class="hljs-number">4</span>) / <span class="hljs-number">10</span>**<span class="hljs-number">4</span>)
tf.Tensor(
[[<span class="hljs-number">0.0021</span> <span class="hljs-number">0.0018</span> <span class="hljs-number">0.0116</span> <span class="hljs-number">0.2121</span> <span class="hljs-number">0.7725</span>]
 [<span class="hljs-number">0.2084</span> <span class="hljs-number">0.1826</span> <span class="hljs-number">0.1969</span> <span class="hljs-number">0.1755</span>  <span class="hljs-number">0.2365</span>]], shape=(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>), dtype=float32)`}}),{c(){e=u("p"),l=i("\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),a=u("code"),r=i("TFAutoModel"),c=i(" como cargar\xEDas un "),g=u("code"),_=i("AutoTokenizer"),E=i(". La \xFAnica diferencia es seleccionar el "),k=u("code"),z=i("TFAutoModel"),q=i(" correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),y=u("code"),C=i("TFAutoModelForSequenceClassification"),R=i(":"),N=v(),M(V.$$.fragment),w=v(),M(x.$$.fragment),G=v(),U=u("p"),I=i("Ahora puedes pasar tu lote preprocesado de inputs directamente al modelo pasando las llaves del diccionario directamente a los tensores:"),K=v(),M(Z.$$.fragment),B=v(),Y=u("p"),re=i("El modelo producir\xE1 las activaciones finales en el atributo "),se=u("code"),oe=i("logits"),ue=i(". Aplica la funci\xF3n softmax a "),ie=u("code"),fe=i("logits"),le=i(" para obtener las probabilidades:"),X=v(),M(pe.$$.fragment)},l(F){e=f(F,"P",{});var H=n(e);l=p(H,"\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),a=f(H,"CODE",{});var te=n(a);r=p(te,"TFAutoModel"),te.forEach(o),c=p(H," como cargar\xEDas un "),g=f(H,"CODE",{});var T=n(g);_=p(T,"AutoTokenizer"),T.forEach(o),E=p(H,". La \xFAnica diferencia es seleccionar el "),k=f(H,"CODE",{});var J=n(k);z=p(J,"TFAutoModel"),J.forEach(o),q=p(H," correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),y=f(H,"CODE",{});var ce=n(y);C=p(ce,"TFAutoModelForSequenceClassification"),ce.forEach(o),R=p(H,":"),H.forEach(o),N=b(F),D(V.$$.fragment,F),w=b(F),D(x.$$.fragment,F),G=b(F),U=f(F,"P",{});var $e=n(U);I=p($e,"Ahora puedes pasar tu lote preprocesado de inputs directamente al modelo pasando las llaves del diccionario directamente a los tensores:"),$e.forEach(o),K=b(F),D(Z.$$.fragment,F),B=b(F),Y=f(F,"P",{});var Q=n(Y);re=p(Q,"El modelo producir\xE1 las activaciones finales en el atributo "),se=f(Q,"CODE",{});var ke=n(se);oe=p(ke,"logits"),ke.forEach(o),ue=p(Q,". Aplica la funci\xF3n softmax a "),ie=f(Q,"CODE",{});var ae=n(ie);fe=p(ae,"logits"),ae.forEach(o),le=p(Q," para obtener las probabilidades:"),Q.forEach(o),X=b(F),D(pe.$$.fragment,F)},m(F,H){$(F,e,H),s(e,l),s(e,a),s(a,r),s(e,c),s(e,g),s(g,_),s(e,E),s(e,k),s(k,z),s(e,q),s(e,y),s(y,C),s(e,R),$(F,N,H),P(V,F,H),$(F,w,H),P(x,F,H),$(F,G,H),$(F,U,H),s(U,I),$(F,K,H),P(Z,F,H),$(F,B,H),$(F,Y,H),s(Y,re),s(Y,se),s(se,oe),s(Y,ue),s(Y,ie),s(ie,fe),s(Y,le),$(F,X,H),P(pe,F,H),de=!0},p(F,H){const te={};H&2&&(te.$$scope={dirty:H,ctx:F}),x.$set(te)},i(F){de||(j(V.$$.fragment,F),j(x.$$.fragment,F),j(Z.$$.fragment,F),j(pe.$$.fragment,F),de=!0)},o(F){A(V.$$.fragment,F),A(x.$$.fragment,F),A(Z.$$.fragment,F),A(pe.$$.fragment,F),de=!1},d(F){F&&o(e),F&&o(N),S(V,F),F&&o(w),S(x,F),F&&o(G),F&&o(U),F&&o(K),S(Z,F),F&&o(B),F&&o(Y),F&&o(X),S(pe,F)}}}function tu(m){let e,l;return e=new qe({props:{$$slots:{default:[eu]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function au(m){let e,l,a,r,c;return{c(){e=u("p"),l=i("Todos los modelos de \u{1F917} Transformers (PyTorch o TensorFlow) producir\xE1n los tensores "),a=u("em"),r=i("antes"),c=i(` de la funci\xF3n de activaci\xF3n
final (como softmax) porque la funci\xF3n de activaci\xF3n final es com\xFAnmente fusionada con la p\xE9rdida.`)},l(g){e=f(g,"P",{});var _=n(e);l=p(_,"Todos los modelos de \u{1F917} Transformers (PyTorch o TensorFlow) producir\xE1n los tensores "),a=f(_,"EM",{});var E=n(a);r=p(E,"antes"),E.forEach(o),c=p(_,` de la funci\xF3n de activaci\xF3n
final (como softmax) porque la funci\xF3n de activaci\xF3n final es com\xFAnmente fusionada con la p\xE9rdida.`),_.forEach(o)},m(g,_){$(g,e,_),s(e,l),s(e,a),s(a,r),s(e,c)},d(g){g&&o(e)}}}function su(m){let e,l,a,r,c;return{c(){e=u("p"),l=i(`Los outputs del modelo de \u{1F917} Transformers son dataclasses especiales por lo que sus atributos pueden ser completados en un IDE.
Los outputs del modelo tambi\xE9n se comportan como tuplas o diccionarios (e.g., puedes indexar con un entero, un slice o una cadena) en cuyo caso los atributos que son `),a=u("code"),r=i("None"),c=i(" son ignorados.")},l(g){e=f(g,"P",{});var _=n(e);l=p(_,`Los outputs del modelo de \u{1F917} Transformers son dataclasses especiales por lo que sus atributos pueden ser completados en un IDE.
Los outputs del modelo tambi\xE9n se comportan como tuplas o diccionarios (e.g., puedes indexar con un entero, un slice o una cadena) en cuyo caso los atributos que son `),a=f(_,"CODE",{});var E=n(a);r=p(E,"None"),E.forEach(o),c=p(_," son ignorados."),_.forEach(o)},m(g,_){$(g,e,_),s(e,l),s(e,a),s(a,r),s(e,c)},d(g){g&&o(e)}}}function ou(m){let e,l,a,r,c,g,_,E,k,z,q,y,C,R,N,V;return _=new W({props:{code:`pt_save_directory = "./pt_save_pretrained"
tokenizer.save_pretrained(pt_save_directory)
pt_model.save_pretrained(pt_save_directory)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pt_save_directory = <span class="hljs-string">&quot;./pt_save_pretrained&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(pt_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model.save_pretrained(pt_save_directory)`}}),N=new W({props:{code:'pt_model = AutoModelForSequenceClassification.from_pretrained("./pt_save_pretrained")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;./pt_save_pretrained&quot;</span>)'}}),{c(){e=u("p"),l=i("Una vez que se haya hecho fine-tuning a tu modelo puedes guardarlo con tu tokenizador usando "),a=u("code"),r=i("PreTrainedModel.save_pretrained()"),c=i(":"),g=v(),M(_.$$.fragment),E=v(),k=u("p"),z=i("Cuando quieras usar el modelo otra vez c\xE1rgalo con "),q=u("code"),y=i("PreTrainedModel.from_pretrained()"),C=i(":"),R=v(),M(N.$$.fragment)},l(w){e=f(w,"P",{});var x=n(e);l=p(x,"Una vez que se haya hecho fine-tuning a tu modelo puedes guardarlo con tu tokenizador usando "),a=f(x,"CODE",{});var G=n(a);r=p(G,"PreTrainedModel.save_pretrained()"),G.forEach(o),c=p(x,":"),x.forEach(o),g=b(w),D(_.$$.fragment,w),E=b(w),k=f(w,"P",{});var U=n(k);z=p(U,"Cuando quieras usar el modelo otra vez c\xE1rgalo con "),q=f(U,"CODE",{});var I=n(q);y=p(I,"PreTrainedModel.from_pretrained()"),I.forEach(o),C=p(U,":"),U.forEach(o),R=b(w),D(N.$$.fragment,w)},m(w,x){$(w,e,x),s(e,l),s(e,a),s(a,r),s(e,c),$(w,g,x),P(_,w,x),$(w,E,x),$(w,k,x),s(k,z),s(k,q),s(q,y),s(k,C),$(w,R,x),P(N,w,x),V=!0},p:ne,i(w){V||(j(_.$$.fragment,w),j(N.$$.fragment,w),V=!0)},o(w){A(_.$$.fragment,w),A(N.$$.fragment,w),V=!1},d(w){w&&o(e),w&&o(g),S(_,w),w&&o(E),w&&o(k),w&&o(R),S(N,w)}}}function ru(m){let e,l;return e=new qe({props:{$$slots:{default:[ou]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function lu(m){let e,l,a,r,c,g,_,E,k,z,q,y,C,R,N,V;return _=new W({props:{code:`tf_save_directory = "./tf_save_pretrained"
tokenizer.save_pretrained(tf_save_directory)
tf_model.save_pretrained(tf_save_directory)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tf_save_directory = <span class="hljs-string">&quot;./tf_save_pretrained&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(tf_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model.save_pretrained(tf_save_directory)`}}),N=new W({props:{code:'tf_model = TFAutoModelForSequenceClassification.from_pretrained("./tf_save_pretrained")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;./tf_save_pretrained&quot;</span>)'}}),{c(){e=u("p"),l=i("Una vez que se haya hecho fine-tuning a tu modelo puedes guardarlo con tu tokenizador usando "),a=u("code"),r=i("TFPreTrainedModel.save_pretrained()"),c=i(":"),g=v(),M(_.$$.fragment),E=v(),k=u("p"),z=i("Cuando quieras usar el modelo otra vez c\xE1rgalo con "),q=u("code"),y=i("TFPreTrainedModel.from_pretrained()"),C=i(":"),R=v(),M(N.$$.fragment)},l(w){e=f(w,"P",{});var x=n(e);l=p(x,"Una vez que se haya hecho fine-tuning a tu modelo puedes guardarlo con tu tokenizador usando "),a=f(x,"CODE",{});var G=n(a);r=p(G,"TFPreTrainedModel.save_pretrained()"),G.forEach(o),c=p(x,":"),x.forEach(o),g=b(w),D(_.$$.fragment,w),E=b(w),k=f(w,"P",{});var U=n(k);z=p(U,"Cuando quieras usar el modelo otra vez c\xE1rgalo con "),q=f(U,"CODE",{});var I=n(q);y=p(I,"TFPreTrainedModel.from_pretrained()"),I.forEach(o),C=p(U,":"),U.forEach(o),R=b(w),D(N.$$.fragment,w)},m(w,x){$(w,e,x),s(e,l),s(e,a),s(a,r),s(e,c),$(w,g,x),P(_,w,x),$(w,E,x),$(w,k,x),s(k,z),s(k,q),s(q,y),s(k,C),$(w,R,x),P(N,w,x),V=!0},p:ne,i(w){V||(j(_.$$.fragment,w),j(N.$$.fragment,w),V=!0)},o(w){A(_.$$.fragment,w),A(N.$$.fragment,w),V=!1},d(w){w&&o(e),w&&o(g),S(_,w),w&&o(E),w&&o(k),w&&o(R),S(N,w)}}}function nu(m){let e,l;return e=new qe({props:{$$slots:{default:[lu]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function iu(m){let e,l;return e=new W({props:{code:`from transformers import AutoModel

tokenizer = AutoTokenizer.from_pretrained(tf_save_directory)
pt_model = AutoModelForSequenceClassification.from_pretrained(tf_save_directory, from_tf=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(tf_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(tf_save_directory, from_tf=<span class="hljs-literal">True</span>)`}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function pu(m){let e,l;return e=new qe({props:{$$slots:{default:[iu]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function cu(m){let e,l;return e=new W({props:{code:`from transformers import TFAutoModel

tokenizer = AutoTokenizer.from_pretrained(pt_save_directory)
tf_model = TFAutoModelForSequenceClassification.from_pretrained(pt_save_directory, from_pt=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(pt_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(pt_save_directory, from_pt=<span class="hljs-literal">True</span>)`}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function uu(m){let e,l;return e=new qe({props:{$$slots:{default:[cu]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){D(e.$$.fragment,a)},m(a,r){P(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){A(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function fu(m){let e,l,a,r,c,g,_,E,k,z,q,y,C,R,N,V,w,x,G,U,I,K,Z,B,Y,re,se,oe,ue,ie,fe,le,X,pe,de,F,H,te,T,J,ce,$e,Q,ke,ae,je,ve,Ae,ge,ee,ze,ir,pr,za,cr,ur,Ca,fr,dr,xa,mr,hr,Ta,$r,gr,Ma,_r,vr,Pa,br,Er,Sa,wr,Is,kt,Da,kr,jr,Hs,Ce,Fa,yr,qr,Oa,Ar,zr,La,Cr,Rs,jt,Na,xr,Tr,Us,Ze,Ia,Mr,Pr,Ha,Sr,Vs,Qe,Ks,Ie,We,Ra,yt,Dr,Ua,Fr,Bs,Xe,Or,Va,Lr,Nr,Js,ea,Ir,Gs,et,Ys,tt,Hr,Ka,Rr,Ur,Zs,qt,Qs,xe,Vr,At,Kr,Br,Ba,Jr,Gr,Ws,zt,Xs,at,Yr,Ja,Zr,Qr,eo,Ct,to,Te,Wr,Ga,Xr,el,xt,tl,al,ao,Tt,so,ye,sl,Ya,ol,rl,Za,ll,nl,Qa,il,pl,oo,Mt,ro,Me,cl,Pt,ul,fl,St,dl,ml,lo,Dt,no,ta,hl,io,Ft,po,st,$l,aa,gl,_l,co,He,ot,Wa,Ot,vl,Xa,bl,uo,be,El,es,wl,kl,Lt,jl,yl,ts,ql,Al,Nt,zl,Cl,fo,It,mo,rt,ho,Pe,xl,as,Tl,Ml,ss,Pl,Sl,$o,Ht,go,Se,Dl,sa,Fl,Ol,oa,Ll,Nl,_o,Re,lt,os,Rt,Il,rs,Hl,vo,Ut,bo,me,Rl,ls,Ul,Vl,ns,Kl,Bl,is,Jl,Gl,ra,Yl,Zl,ps,Ql,Wl,cs,Xl,en,Eo,De,tn,us,an,sn,fs,on,rn,wo,Ue,nt,ds,Vt,ln,ms,nn,ko,Fe,pn,hs,cn,un,la,fn,dn,jo,it,mn,$s,hn,$n,yo,Kt,qo,pt,gn,gs,_n,vn,Ao,na,bn,zo,Bt,Co,ia,En,xo,ct,pa,ca,wn,kn,jn,ua,fa,yn,qn,To,ut,An,_s,zn,Cn,Mo,ft,Po,dt,xn,da,Tn,Mn,So,Ve,mt,vs,Jt,Pn,bs,Sn,Do,ht,Fo,$t,Oo,he,Dn,Gt,Es,Fn,On,Yt,ws,Ln,Nn,ks,In,Hn,js,Rn,Un,Zt,Vn,Kn,ma,Bn,Jn,Lo,gt,No,Ke,_t,ys,Qt,Gn,qs,Yn,Io,vt,Ho,Oe,Zn,As,Qn,Wn,zs,Xn,ei,Ro,bt,Uo;return g=new wt({}),q=new oc({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Mixed",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/es/quicktour.ipynb"},{label:"PyTorch",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/es/pytorch/quicktour.ipynb"},{label:"TensorFlow",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/es/tensorflow/quicktour.ipynb"},{label:"Mixed",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/es/quicktour.ipynb"},{label:"PyTorch",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/es/pytorch/quicktour.ipynb"},{label:"TensorFlow",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/es/tensorflow/quicktour.ipynb"}]}}),K=new ya({props:{$$slots:{default:[Fc]},$$scope:{ctx:m}}}),se=new wt({}),H=new Vp({props:{id:"tiZFewofSLM"}}),Qe=new ya({props:{$$slots:{default:[Oc]},$$scope:{ctx:m}}}),yt=new wt({}),et=new ja({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Hc],pytorch:[Nc]},$$scope:{ctx:m}}}),qt=new W({props:{code:`from transformers import pipeline

clasificador = pipeline('sentiment-analysis', model="pysentimiento/robertuito-sentiment-analysis")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>clasificador = pipeline(<span class="hljs-string">&#x27;sentiment-analysis&#x27;</span>, model=<span class="hljs-string">&quot;pysentimiento/robertuito-sentiment-analysis&quot;</span>)`}}),zt=new W({props:{code:'clasificador("Estamos muy felices de mostrarte la biblioteca de \u{1F917} Transformers.")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>clasificador(<span class="hljs-string">&quot;Estamos muy felices de mostrarte la biblioteca de \u{1F917} Transformers.&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POS&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9916</span>}]`}}),Ct=new W({props:{code:`resultados = clasificador(["Estamos muy felices de mostrarte la biblioteca de \u{1F917} Transformers.", ""Esperamos que odies lo mucho que te gusta \u{1F608}."])
for resultado in resultados:
    print(f"label: {resultado['label']}, con score: {round(resultado['score'], 4)}")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>resultados = clasificador([<span class="hljs-string">&quot;Estamos muy felices de mostrarte la biblioteca de \u{1F917} Transformers.&quot;</span>, <span class="hljs-string">&quot;&quot;</span>Esperamos que odies lo mucho que te gusta \u{1F608}.<span class="hljs-string">&quot;])
&gt;&gt;&gt; for resultado in resultados:
...     print(f&quot;</span>label: {resultado[<span class="hljs-string">&#x27;label&#x27;</span>]}, con score: {<span class="hljs-built_in">round</span>(resultado[<span class="hljs-string">&#x27;score&#x27;</span>], <span class="hljs-number">4</span>)}<span class="hljs-string">&quot;)
label: POS, con score: 0.9917
label: NEG, con score: 0.9981</span>`}}),Tt=new W({props:{code:"pip install datasets",highlighted:"pip install datasets"}}),Mt=new W({props:{code:`import torch
from transformers import pipeline

reconocedor_de_voz = pipeline("automatic-speech-recognition", model="jonatasgrosman/wav2vec2-large-xlsr-53-spanish", device=0)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>reconocedor_de_voz = pipeline(<span class="hljs-string">&quot;automatic-speech-recognition&quot;</span>, model=<span class="hljs-string">&quot;jonatasgrosman/wav2vec2-large-xlsr-53-spanish&quot;</span>, device=<span class="hljs-number">0</span>)`}}),Dt=new W({props:{code:`import datasets

dataset = datasets.load_dataset("PolyAI/minds14", name="es-ES", split="train")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = datasets.load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;es-ES&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)`}}),Ft=new W({props:{code:`archivos = dataset["path"]
reconocedor_de_voz(archivos[:4])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>archivos = dataset[<span class="hljs-string">&quot;path&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>reconocedor_de_voz(archivos[:<span class="hljs-number">4</span>])
[{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;ahora buenas e a ver  tengo un problema como vuestra aplicaci\xF3n resulta que que quiero hacer una transferencia bancaria a una cuenta conocida pero me da error la aplicaci\xF3n a ver que a ver que puede ser&#x27;</span>},
 {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;la aplicaci\xF3n no cargue salda de mi nueva cuenta&#x27;</span>},
 {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;hola tengo un problema con la aplicaci\xF3n no carga y y tampoco veo que carga el saldo de mi cuenta nueva dice que la aplicaci\xF3n est\xE1 siendo reparada y ahora no puedo aceder a mi cuenta no necesito inmediatamente&#x27;</span>},
 {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;ora buena la aplicaci\xF3n no se carga la viladad no carga el saldo de mi cuenta nueva dice que la villadenta siendo reparada y oro no puede hacer a mi cuenta&#x27;</span>}]`}}),Ot=new wt({}),It=new W({props:{code:'model_name = "nlptown/bert-base-multilingual-uncased-sentiment"',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>'}}),rt=new ja({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Kc],pytorch:[Uc]},$$scope:{ctx:m}}}),Ht=new W({props:{code:`classifier = pipeline("sentiment-analysis", model=model, tokenizer=tokenizer)
classifier("Nous sommes tr\xE8s heureux de vous pr\xE9senter la biblioth\xE8que \u{1F917} Transformers.")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(<span class="hljs-string">&quot;sentiment-analysis&quot;</span>, model=model, tokenizer=tokenizer)
<span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;Nous sommes tr\xE8s heureux de vous pr\xE9senter la biblioth\xE8que \u{1F917} Transformers.&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;5 stars&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.7273</span>}]`}}),Rt=new wt({}),Ut=new Vp({props:{id:"AhChOFRegn4"}}),Vt=new wt({}),Kt=new W({props:{code:`from transformers import AutoTokenizer

nombre_del_modelo = "nlptown/bert-base-multilingual-uncased-sentiment"
tokenizer = AutoTokenizer.from_pretrained(nombre_del_modelo)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>nombre_del_modelo = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(nombre_del_modelo)`}}),Bt=new W({props:{code:`encoding = tokenizer("Estamos muy felices de mostrarte la biblioteca de \u{1F917} Transformers.")
print(encoding)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>encoding = tokenizer(<span class="hljs-string">&quot;Estamos muy felices de mostrarte la biblioteca de \u{1F917} Transformers.&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoding)
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: [<span class="hljs-number">101</span>, <span class="hljs-number">10602</span>, <span class="hljs-number">14000</span>, <span class="hljs-number">13653</span>, <span class="hljs-number">43353</span>, <span class="hljs-number">10107</span>, <span class="hljs-number">10102</span>, <span class="hljs-number">47201</span>, <span class="hljs-number">10218</span>, <span class="hljs-number">10106</span>, <span class="hljs-number">18283</span>, <span class="hljs-number">10102</span>, <span class="hljs-number">100</span>, <span class="hljs-number">58263</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>],
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]}`}}),ft=new ja({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Yc],pytorch:[Jc]},$$scope:{ctx:m}}}),Jt=new wt({}),ht=new ja({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[tu],pytorch:[Wc]},$$scope:{ctx:m}}}),$t=new ya({props:{$$slots:{default:[au]},$$scope:{ctx:m}}}),gt=new ya({props:{$$slots:{default:[su]},$$scope:{ctx:m}}}),Qt=new wt({}),vt=new ja({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[nu],pytorch:[ru]},$$scope:{ctx:m}}}),bt=new ja({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[uu],pytorch:[pu]},$$scope:{ctx:m}}}),{c(){e=u("meta"),l=v(),a=u("h1"),r=u("a"),c=u("span"),M(g.$$.fragment),_=v(),E=u("span"),k=i("Quick tour"),z=v(),M(q.$$.fragment),y=v(),C=u("p"),R=i("\xA1Entra en marcha con los \u{1F917} Transformers! Comienza usando "),N=u("code"),V=i("pipeline()"),w=i(" para una inferencia veloz, carga un modelo preentrenado y un tokenizador con una "),x=u("a"),G=i("AutoClass"),U=i(" para resolver tu tarea de texto, visi\xF3n o audio."),I=v(),M(K.$$.fragment),Z=v(),B=u("h2"),Y=u("a"),re=u("span"),M(se.$$.fragment),oe=v(),ue=u("span"),ie=i("Pipeline"),fe=v(),le=u("p"),X=u("code"),pe=i("pipeline()"),de=i(" es la forma m\xE1s f\xE1cil de usar un modelo preentrenado para una tarea dada."),F=v(),M(H.$$.fragment),te=v(),T=u("p"),J=i("El "),ce=u("code"),$e=i("pipeline()"),Q=i(" soporta muchas tareas comunes listas para usar:"),ke=v(),ae=u("p"),je=u("strong"),ve=i("Texto"),Ae=i(":"),ge=v(),ee=u("ul"),ze=u("li"),ir=i("An\xE1lisis de Sentimiento (Sentiment Analysis, en ingl\xE9s): clasifica la polaridad de un texto dado."),pr=v(),za=u("li"),cr=i("Generaci\xF3n de Texto (Text Generation, en ingl\xE9s): genera texto a partir de un input dado."),ur=v(),Ca=u("li"),fr=i("Reconocimiento de Entidades (Name Entity Recognition o NER, en ingl\xE9s): etiqueta cada palabra con la entidad que representa (persona, fecha, ubicaci\xF3n, etc.)."),dr=v(),xa=u("li"),mr=i("Responder Preguntas (Question answering, en ingl\xE9s): extrae la respuesta del contexto dado un contexto y una pregunta."),hr=v(),Ta=u("li"),$r=i("Rellenar M\xE1scara (Fill-mask, en ingl\xE9s): rellena el espacio faltante dado un texto con palabras enmascaradas."),gr=v(),Ma=u("li"),_r=i("Resumir (Summarization, en ingl\xE9s): genera un resumen de una secuencia larga de texto o un documento."),vr=v(),Pa=u("li"),br=i("Traducci\xF3n (Translation, en ingl\xE9s): traduce un texto a otro idioma."),Er=v(),Sa=u("li"),wr=i("Extracci\xF3n de Caracter\xEDsticas (Feature Extraction, en ingl\xE9s): crea una representaci\xF3n tensorial del texto."),Is=v(),kt=u("p"),Da=u("strong"),kr=i("Imagen"),jr=i(":"),Hs=v(),Ce=u("ul"),Fa=u("li"),yr=i("Clasificaci\xF3n de Im\xE1genes (Image Classification, en ingl\xE9s): clasifica una imagen."),qr=v(),Oa=u("li"),Ar=i("Segmentaci\xF3n de Im\xE1genes (Image Segmentation, en ingl\xE9s): clasifica cada pixel de una imagen."),zr=v(),La=u("li"),Cr=i("Detecci\xF3n de Objetos (Object Detection, en ingl\xE9s): detecta objetos dentro de una imagen."),Rs=v(),jt=u("p"),Na=u("strong"),xr=i("Audio"),Tr=i(":"),Us=v(),Ze=u("ul"),Ia=u("li"),Mr=i("Clasificaci\xF3n de Audios (Audio Classification, en ingl\xE9s): asigna una etiqueta a un segmento de audio."),Pr=v(),Ha=u("li"),Sr=i("Reconocimiento de Voz Autom\xE1tico (Automatic Speech Recognition o ASR, en ingl\xE9s): transcribe datos de audio a un texto."),Vs=v(),M(Qe.$$.fragment),Ks=v(),Ie=u("h3"),We=u("a"),Ra=u("span"),M(yt.$$.fragment),Dr=v(),Ua=u("span"),Fr=i("Uso del Pipeline"),Bs=v(),Xe=u("p"),Or=i("En el siguiente ejemplo, usar\xE1s el "),Va=u("code"),Lr=i("pipeline()"),Nr=i(" para an\xE1lisis de sentimiento."),Js=v(),ea=u("p"),Ir=i("Instala las siguientes dependencias si a\xFAn no lo has hecho:"),Gs=v(),M(et.$$.fragment),Ys=v(),tt=u("p"),Hr=i("Importa "),Ka=u("code"),Rr=i("pipeline()"),Ur=i(" y especifica la tarea que deseas completar:"),Zs=v(),M(qt.$$.fragment),Qs=v(),xe=u("p"),Vr=i("El pipeline descarga y almacena en cach\xE9 el "),At=u("a"),Kr=i("modelo preentrenado"),Br=i(" y tokeniza para an\xE1lisis de sentimiento. Si no hubieramos elegido un modelo el pipeline habr\xEDa elegido uno por defecto. Ahora puedes usar "),Ba=u("code"),Jr=i("clasificador"),Gr=i(" en tu texto objetivo:"),Ws=v(),M(zt.$$.fragment),Xs=v(),at=u("p"),Yr=i("Para m\xE1s de un enunciado, entrega una lista al "),Ja=u("code"),Zr=i("pipeline()"),Qr=i(" que devolver\xE1 una lista de diccionarios:"),eo=v(),M(Ct.$$.fragment),to=v(),Te=u("p"),Wr=i("El "),Ga=u("code"),Xr=i("pipeline()"),el=i(" tambi\xE9n puede iterar sobre un dataset entero. Comienza instalando la biblioteca "),xt=u("a"),tl=i("\u{1F917} Datasets"),al=i(":"),ao=v(),M(Tt.$$.fragment),so=v(),ye=u("p"),sl=i("Crea un "),Ya=u("code"),ol=i("pipeline()"),rl=i(" con la tarea que deseas resolver y el modelo que quieres usar. Coloca el par\xE1metro "),Za=u("code"),ll=i("device"),nl=i(" a "),Qa=u("code"),il=i("0"),pl=i(" para poner los tensores en un dispositivo CUDA:"),oo=v(),M(Mt.$$.fragment),ro=v(),Me=u("p"),cl=i("A continuaci\xF3n, carga el dataset (ve \u{1F917} Datasets "),Pt=u("a"),ul=i("Quick Start"),fl=i(" para m\xE1s detalles) sobre el que quisieras iterar. Por ejemplo, vamos a cargar el dataset "),St=u("a"),dl=i("MInDS-14"),ml=i(":"),lo=v(),M(Dt.$$.fragment),no=v(),ta=u("p"),hl=i("Puedes pasar el dataset entero al pipeline:"),io=v(),M(Ft.$$.fragment),po=v(),st=u("p"),$l=i("Para un dataset m\xE1s grande, donde los inputs son de mayor tama\xF1o (como en habla/audio o visi\xF3n), querr\xE1s pasar un generador en lugar de una lista que carga todos los inputs en memoria. Ve la "),aa=u("a"),gl=i("documentaci\xF3n del pipeline"),_l=i(" para m\xE1s informaci\xF3n."),co=v(),He=u("h3"),ot=u("a"),Wa=u("span"),M(Ot.$$.fragment),vl=v(),Xa=u("span"),bl=i("Usa otro modelo y otro tokenizador en el pipeline"),uo=v(),be=u("p"),El=i("El "),es=u("code"),wl=i("pipeline()"),kl=i(" puede acomodarse a cualquier modelo del "),Lt=u("a"),jl=i("Model Hub"),yl=i(" haciendo m\xE1s f\xE1cil adaptar el "),ts=u("code"),ql=i("pipeline()"),Al=i(" para otros casos de uso. Por ejemplo, si quisieras un modelo capaz de manejar texto en franc\xE9s, usa los tags en el Model Hub para filtrar entre los modelos apropiados. El resultado mejor filtrado devuelve un "),Nt=u("a"),zl=i("modelo BERT"),Cl=i(" multilingual fine-tuned para el an\xE1lisis de sentimiento. Genial, \xA1vamos a usar este modelo!"),fo=v(),M(It.$$.fragment),mo=v(),M(rt.$$.fragment),ho=v(),Pe=u("p"),xl=i("Despu\xE9s puedes especificar el modelo y el tokenizador en el "),as=u("code"),Tl=i("pipeline()"),Ml=i(", y aplicar el "),ss=u("code"),Pl=i("classifier"),Sl=i(" en tu texto objetivo:"),$o=v(),M(Ht.$$.fragment),go=v(),Se=u("p"),Dl=i("Si no pudieras encontrar el modelo para tu caso respectivo de uso necesitar\xE1s ajustar un modelo preentrenado a tus datos. Mira nuestro "),sa=u("a"),Fl=i("tutorial de fine-tuning"),Ol=i(" para aprender c\xF3mo. Finalmente, despu\xE9s de que has ajustado tu modelo preentrenado, \xA1por favor considera compartirlo (ve el tutorial "),oa=u("a"),Ll=i("aqu\xED"),Nl=i(") con la comunidad en el Model Hub para democratizar el NLP! \u{1F917}"),_o=v(),Re=u("h2"),lt=u("a"),os=u("span"),M(Rt.$$.fragment),Il=v(),rs=u("span"),Hl=i("AutoClass"),vo=v(),M(Ut.$$.fragment),bo=v(),me=u("p"),Rl=i("Debajo del cap\xF3, las clases "),ls=u("code"),Ul=i("AutoModelForSequenceClassification"),Vl=i(" y "),ns=u("code"),Kl=i("AutoTokenizer"),Bl=i(" trabajan juntas para dar poder al "),is=u("code"),Jl=i("pipeline()"),Gl=i(". Una "),ra=u("a"),Yl=i("AutoClass"),Zl=i(" es un atajo que autom\xE1ticamente recupera la arquitectura de un modelo preentrenado con su nombre o el path. S\xF3lo necesitar\xE1s seleccionar el "),ps=u("code"),Ql=i("AutoClass"),Wl=i(" apropiado para tu tarea y tu tokenizador asociado con "),cs=u("code"),Xl=i("AutoTokenizer"),en=i("."),Eo=v(),De=u("p"),tn=i("Regresemos a nuestro ejemplo y veamos c\xF3mo puedes usar el "),us=u("code"),an=i("AutoClass"),sn=i(" para reproducir los resultados del "),fs=u("code"),on=i("pipeline()"),rn=i("."),wo=v(),Ue=u("h3"),nt=u("a"),ds=u("span"),M(Vt.$$.fragment),ln=v(),ms=u("span"),nn=i("AutoTokenizer"),ko=v(),Fe=u("p"),pn=i("Un tokenizador es responsable de procesar el texto a un formato que sea entendible para el modelo. Primero, el tokenizador separar\xE1 el texto en palabras llamadas "),hs=u("em"),cn=i("tokens"),un=i(". Hay m\xFAltiples reglas que gobiernan el proceso de tokenizaci\xF3n incluyendo el c\xF3mo separar una palabra y en qu\xE9 nivel (aprende m\xE1s sobre tokenizaci\xF3n "),la=u("a"),fn=i("aqu\xED"),dn=i("). Lo m\xE1s importante es recordar que necesitar\xE1s instanciar el tokenizador con el mismo nombre del modelo para asegurar que est\xE1s usando las mismas reglas de tokenizaci\xF3n con las que el modelo fue preentrenado."),jo=v(),it=u("p"),mn=i("Carga un tokenizador con "),$s=u("code"),hn=i("AutoTokenizer"),$n=i(":"),yo=v(),M(Kt.$$.fragment),qo=v(),pt=u("p"),gn=i("Despu\xE9s, el tokenizador convierte los tokens a n\xFAmeros para construir un tensor que servir\xE1 como input para el modelo. Esto es conocido como el "),gs=u("em"),_n=i("vocabulario"),vn=i(" del modelo."),Ao=v(),na=u("p"),bn=i("Pasa tu texto al tokenizador:"),zo=v(),M(Bt.$$.fragment),Co=v(),ia=u("p"),En=i("El tokenizador devolver\xE1 un diccionario conteniendo:"),xo=v(),ct=u("ul"),pa=u("li"),ca=u("a"),wn=i("input_ids"),kn=i(": representaciones num\xE9ricas de los tokens."),jn=v(),ua=u("li"),fa=u("a"),yn=i("atttention_mask"),qn=i(": indica cu\xE1les tokens deben ser atendidos."),To=v(),ut=u("p"),An=i("Como con el "),_s=u("code"),zn=i("pipeline()"),Cn=i(", el tokenizador aceptar\xE1 una lista de inputs. Adem\xE1s, el tokenizador tambi\xE9n puede rellenar (pad, en ingl\xE9s) y truncar el texto para devolver un lote (batch, en ingl\xE9s) de longitud uniforme:"),Mo=v(),M(ft.$$.fragment),Po=v(),dt=u("p"),xn=i("Lee el tutorial de "),da=u("a"),Tn=i("preprocessing"),Mn=i(" para m\xE1s detalles acerca de la tokenizaci\xF3n."),So=v(),Ve=u("h3"),mt=u("a"),vs=u("span"),M(Jt.$$.fragment),Pn=v(),bs=u("span"),Sn=i("AutoModel"),Do=v(),M(ht.$$.fragment),Fo=v(),M($t.$$.fragment),Oo=v(),he=u("p"),Dn=i("Los modelos son "),Gt=u("a"),Es=u("code"),Fn=i("torch.nn.Module"),On=i(" o "),Yt=u("a"),ws=u("code"),Ln=i("tf.keras.Model"),Nn=i(" est\xE1ndares as\xED que podr\xE1s usarlos en tu training loop usual. Sin embargo, para facilitar las cosas, \u{1F917} Transformers provee una clase "),ks=u("code"),In=i("Trainer"),Hn=i(" para PyTorch que a\xF1ade funcionalidades para entrenamiento distribuido, precici\xF3n mixta, y m\xE1s. Para TensorFlow, puedes usar el m\xE9todo "),js=u("code"),Rn=i("fit"),Un=i(" desde "),Zt=u("a"),Vn=i("Keras"),Kn=i(". Consulta el "),ma=u("a"),Bn=i("tutorial de entrenamiento"),Jn=i(" para m\xE1s detalles."),Lo=v(),M(gt.$$.fragment),No=v(),Ke=u("h3"),_t=u("a"),ys=u("span"),M(Qt.$$.fragment),Gn=v(),qs=u("span"),Yn=i("Guarda un modelo"),Io=v(),M(vt.$$.fragment),Ho=v(),Oe=u("p"),Zn=i("Una caracter\xEDstica particularmente interesante de \u{1F917} Transformers es la habilidad de guardar el modelo y cargarlo como un modelo de PyTorch o TensorFlow. El par\xE1metro "),As=u("code"),Qn=i("from_pt"),Wn=i(" o "),zs=u("code"),Xn=i("from_tf"),ei=i(" puede convertir el modelo de un framework al otro:"),Ro=v(),M(bt.$$.fragment),this.h()},l(t){const h=sc('[data-svelte="svelte-1phssyn"]',document.head);e=f(h,"META",{name:!0,content:!0}),h.forEach(o),l=b(t),a=f(t,"H1",{class:!0});var Wt=n(a);r=f(Wt,"A",{id:!0,class:!0,href:!0});var Cs=n(r);c=f(Cs,"SPAN",{});var xs=n(c);D(g.$$.fragment,xs),xs.forEach(o),Cs.forEach(o),_=b(Wt),E=f(Wt,"SPAN",{});var Ts=n(E);k=p(Ts,"Quick tour"),Ts.forEach(o),Wt.forEach(o),z=b(t),D(q.$$.fragment,t),y=b(t),C=f(t,"P",{});var Be=n(C);R=p(Be,"\xA1Entra en marcha con los \u{1F917} Transformers! Comienza usando "),N=f(Be,"CODE",{});var Ms=n(N);V=p(Ms,"pipeline()"),Ms.forEach(o),w=p(Be," para una inferencia veloz, carga un modelo preentrenado y un tokenizador con una "),x=f(Be,"A",{href:!0});var Ps=n(x);G=p(Ps,"AutoClass"),Ps.forEach(o),U=p(Be," para resolver tu tarea de texto, visi\xF3n o audio."),Be.forEach(o),I=b(t),D(K.$$.fragment,t),Z=b(t),B=f(t,"H2",{class:!0});var Xt=n(B);Y=f(Xt,"A",{id:!0,class:!0,href:!0});var Ss=n(Y);re=f(Ss,"SPAN",{});var Ds=n(re);D(se.$$.fragment,Ds),Ds.forEach(o),Ss.forEach(o),oe=b(Xt),ue=f(Xt,"SPAN",{});var ci=n(ue);ie=p(ci,"Pipeline"),ci.forEach(o),Xt.forEach(o),fe=b(t),le=f(t,"P",{});var ti=n(le);X=f(ti,"CODE",{});var ui=n(X);pe=p(ui,"pipeline()"),ui.forEach(o),de=p(ti," es la forma m\xE1s f\xE1cil de usar un modelo preentrenado para una tarea dada."),ti.forEach(o),F=b(t),D(H.$$.fragment,t),te=b(t),T=f(t,"P",{});var Vo=n(T);J=p(Vo,"El "),ce=f(Vo,"CODE",{});var fi=n(ce);$e=p(fi,"pipeline()"),fi.forEach(o),Q=p(Vo," soporta muchas tareas comunes listas para usar:"),Vo.forEach(o),ke=b(t),ae=f(t,"P",{});var ai=n(ae);je=f(ai,"STRONG",{});var di=n(je);ve=p(di,"Texto"),di.forEach(o),Ae=p(ai,":"),ai.forEach(o),ge=b(t),ee=f(t,"UL",{});var _e=n(ee);ze=f(_e,"LI",{});var mi=n(ze);ir=p(mi,"An\xE1lisis de Sentimiento (Sentiment Analysis, en ingl\xE9s): clasifica la polaridad de un texto dado."),mi.forEach(o),pr=b(_e),za=f(_e,"LI",{});var hi=n(za);cr=p(hi,"Generaci\xF3n de Texto (Text Generation, en ingl\xE9s): genera texto a partir de un input dado."),hi.forEach(o),ur=b(_e),Ca=f(_e,"LI",{});var $i=n(Ca);fr=p($i,"Reconocimiento de Entidades (Name Entity Recognition o NER, en ingl\xE9s): etiqueta cada palabra con la entidad que representa (persona, fecha, ubicaci\xF3n, etc.)."),$i.forEach(o),dr=b(_e),xa=f(_e,"LI",{});var gi=n(xa);mr=p(gi,"Responder Preguntas (Question answering, en ingl\xE9s): extrae la respuesta del contexto dado un contexto y una pregunta."),gi.forEach(o),hr=b(_e),Ta=f(_e,"LI",{});var _i=n(Ta);$r=p(_i,"Rellenar M\xE1scara (Fill-mask, en ingl\xE9s): rellena el espacio faltante dado un texto con palabras enmascaradas."),_i.forEach(o),gr=b(_e),Ma=f(_e,"LI",{});var vi=n(Ma);_r=p(vi,"Resumir (Summarization, en ingl\xE9s): genera un resumen de una secuencia larga de texto o un documento."),vi.forEach(o),vr=b(_e),Pa=f(_e,"LI",{});var bi=n(Pa);br=p(bi,"Traducci\xF3n (Translation, en ingl\xE9s): traduce un texto a otro idioma."),bi.forEach(o),Er=b(_e),Sa=f(_e,"LI",{});var Ei=n(Sa);wr=p(Ei,"Extracci\xF3n de Caracter\xEDsticas (Feature Extraction, en ingl\xE9s): crea una representaci\xF3n tensorial del texto."),Ei.forEach(o),_e.forEach(o),Is=b(t),kt=f(t,"P",{});var si=n(kt);Da=f(si,"STRONG",{});var wi=n(Da);kr=p(wi,"Imagen"),wi.forEach(o),jr=p(si,":"),si.forEach(o),Hs=b(t),Ce=f(t,"UL",{});var ha=n(Ce);Fa=f(ha,"LI",{});var ki=n(Fa);yr=p(ki,"Clasificaci\xF3n de Im\xE1genes (Image Classification, en ingl\xE9s): clasifica una imagen."),ki.forEach(o),qr=b(ha),Oa=f(ha,"LI",{});var ji=n(Oa);Ar=p(ji,"Segmentaci\xF3n de Im\xE1genes (Image Segmentation, en ingl\xE9s): clasifica cada pixel de una imagen."),ji.forEach(o),zr=b(ha),La=f(ha,"LI",{});var yi=n(La);Cr=p(yi,"Detecci\xF3n de Objetos (Object Detection, en ingl\xE9s): detecta objetos dentro de una imagen."),yi.forEach(o),ha.forEach(o),Rs=b(t),jt=f(t,"P",{});var oi=n(jt);Na=f(oi,"STRONG",{});var qi=n(Na);xr=p(qi,"Audio"),qi.forEach(o),Tr=p(oi,":"),oi.forEach(o),Us=b(t),Ze=f(t,"UL",{});var Ko=n(Ze);Ia=f(Ko,"LI",{});var Ai=n(Ia);Mr=p(Ai,"Clasificaci\xF3n de Audios (Audio Classification, en ingl\xE9s): asigna una etiqueta a un segmento de audio."),Ai.forEach(o),Pr=b(Ko),Ha=f(Ko,"LI",{});var zi=n(Ha);Sr=p(zi,"Reconocimiento de Voz Autom\xE1tico (Automatic Speech Recognition o ASR, en ingl\xE9s): transcribe datos de audio a un texto."),zi.forEach(o),Ko.forEach(o),Vs=b(t),D(Qe.$$.fragment,t),Ks=b(t),Ie=f(t,"H3",{class:!0});var Bo=n(Ie);We=f(Bo,"A",{id:!0,class:!0,href:!0});var Ci=n(We);Ra=f(Ci,"SPAN",{});var xi=n(Ra);D(yt.$$.fragment,xi),xi.forEach(o),Ci.forEach(o),Dr=b(Bo),Ua=f(Bo,"SPAN",{});var Ti=n(Ua);Fr=p(Ti,"Uso del Pipeline"),Ti.forEach(o),Bo.forEach(o),Bs=b(t),Xe=f(t,"P",{});var Jo=n(Xe);Or=p(Jo,"En el siguiente ejemplo, usar\xE1s el "),Va=f(Jo,"CODE",{});var Mi=n(Va);Lr=p(Mi,"pipeline()"),Mi.forEach(o),Nr=p(Jo," para an\xE1lisis de sentimiento."),Jo.forEach(o),Js=b(t),ea=f(t,"P",{});var Pi=n(ea);Ir=p(Pi,"Instala las siguientes dependencias si a\xFAn no lo has hecho:"),Pi.forEach(o),Gs=b(t),D(et.$$.fragment,t),Ys=b(t),tt=f(t,"P",{});var Go=n(tt);Hr=p(Go,"Importa "),Ka=f(Go,"CODE",{});var Si=n(Ka);Rr=p(Si,"pipeline()"),Si.forEach(o),Ur=p(Go," y especifica la tarea que deseas completar:"),Go.forEach(o),Zs=b(t),D(qt.$$.fragment,t),Qs=b(t),xe=f(t,"P",{});var $a=n(xe);Vr=p($a,"El pipeline descarga y almacena en cach\xE9 el "),At=f($a,"A",{href:!0,rel:!0});var Di=n(At);Kr=p(Di,"modelo preentrenado"),Di.forEach(o),Br=p($a," y tokeniza para an\xE1lisis de sentimiento. Si no hubieramos elegido un modelo el pipeline habr\xEDa elegido uno por defecto. Ahora puedes usar "),Ba=f($a,"CODE",{});var Fi=n(Ba);Jr=p(Fi,"clasificador"),Fi.forEach(o),Gr=p($a," en tu texto objetivo:"),$a.forEach(o),Ws=b(t),D(zt.$$.fragment,t),Xs=b(t),at=f(t,"P",{});var Yo=n(at);Yr=p(Yo,"Para m\xE1s de un enunciado, entrega una lista al "),Ja=f(Yo,"CODE",{});var Oi=n(Ja);Zr=p(Oi,"pipeline()"),Oi.forEach(o),Qr=p(Yo," que devolver\xE1 una lista de diccionarios:"),Yo.forEach(o),eo=b(t),D(Ct.$$.fragment,t),to=b(t),Te=f(t,"P",{});var ga=n(Te);Wr=p(ga,"El "),Ga=f(ga,"CODE",{});var Li=n(Ga);Xr=p(Li,"pipeline()"),Li.forEach(o),el=p(ga," tambi\xE9n puede iterar sobre un dataset entero. Comienza instalando la biblioteca "),xt=f(ga,"A",{href:!0,rel:!0});var Ni=n(xt);tl=p(Ni,"\u{1F917} Datasets"),Ni.forEach(o),al=p(ga,":"),ga.forEach(o),ao=b(t),D(Tt.$$.fragment,t),so=b(t),ye=f(t,"P",{});var Et=n(ye);sl=p(Et,"Crea un "),Ya=f(Et,"CODE",{});var Ii=n(Ya);ol=p(Ii,"pipeline()"),Ii.forEach(o),rl=p(Et," con la tarea que deseas resolver y el modelo que quieres usar. Coloca el par\xE1metro "),Za=f(Et,"CODE",{});var Hi=n(Za);ll=p(Hi,"device"),Hi.forEach(o),nl=p(Et," a "),Qa=f(Et,"CODE",{});var Ri=n(Qa);il=p(Ri,"0"),Ri.forEach(o),pl=p(Et," para poner los tensores en un dispositivo CUDA:"),Et.forEach(o),oo=b(t),D(Mt.$$.fragment,t),ro=b(t),Me=f(t,"P",{});var _a=n(Me);cl=p(_a,"A continuaci\xF3n, carga el dataset (ve \u{1F917} Datasets "),Pt=f(_a,"A",{href:!0,rel:!0});var Ui=n(Pt);ul=p(Ui,"Quick Start"),Ui.forEach(o),fl=p(_a," para m\xE1s detalles) sobre el que quisieras iterar. Por ejemplo, vamos a cargar el dataset "),St=f(_a,"A",{href:!0,rel:!0});var Vi=n(St);dl=p(Vi,"MInDS-14"),Vi.forEach(o),ml=p(_a,":"),_a.forEach(o),lo=b(t),D(Dt.$$.fragment,t),no=b(t),ta=f(t,"P",{});var Ki=n(ta);hl=p(Ki,"Puedes pasar el dataset entero al pipeline:"),Ki.forEach(o),io=b(t),D(Ft.$$.fragment,t),po=b(t),st=f(t,"P",{});var Zo=n(st);$l=p(Zo,"Para un dataset m\xE1s grande, donde los inputs son de mayor tama\xF1o (como en habla/audio o visi\xF3n), querr\xE1s pasar un generador en lugar de una lista que carga todos los inputs en memoria. Ve la "),aa=f(Zo,"A",{href:!0});var Bi=n(aa);gl=p(Bi,"documentaci\xF3n del pipeline"),Bi.forEach(o),_l=p(Zo," para m\xE1s informaci\xF3n."),Zo.forEach(o),co=b(t),He=f(t,"H3",{class:!0});var Qo=n(He);ot=f(Qo,"A",{id:!0,class:!0,href:!0});var Ji=n(ot);Wa=f(Ji,"SPAN",{});var Gi=n(Wa);D(Ot.$$.fragment,Gi),Gi.forEach(o),Ji.forEach(o),vl=b(Qo),Xa=f(Qo,"SPAN",{});var Yi=n(Xa);bl=p(Yi,"Usa otro modelo y otro tokenizador en el pipeline"),Yi.forEach(o),Qo.forEach(o),uo=b(t),be=f(t,"P",{});var Le=n(be);El=p(Le,"El "),es=f(Le,"CODE",{});var Zi=n(es);wl=p(Zi,"pipeline()"),Zi.forEach(o),kl=p(Le," puede acomodarse a cualquier modelo del "),Lt=f(Le,"A",{href:!0,rel:!0});var Qi=n(Lt);jl=p(Qi,"Model Hub"),Qi.forEach(o),yl=p(Le," haciendo m\xE1s f\xE1cil adaptar el "),ts=f(Le,"CODE",{});var Wi=n(ts);ql=p(Wi,"pipeline()"),Wi.forEach(o),Al=p(Le," para otros casos de uso. Por ejemplo, si quisieras un modelo capaz de manejar texto en franc\xE9s, usa los tags en el Model Hub para filtrar entre los modelos apropiados. El resultado mejor filtrado devuelve un "),Nt=f(Le,"A",{href:!0,rel:!0});var Xi=n(Nt);zl=p(Xi,"modelo BERT"),Xi.forEach(o),Cl=p(Le," multilingual fine-tuned para el an\xE1lisis de sentimiento. Genial, \xA1vamos a usar este modelo!"),Le.forEach(o),fo=b(t),D(It.$$.fragment,t),mo=b(t),D(rt.$$.fragment,t),ho=b(t),Pe=f(t,"P",{});var va=n(Pe);xl=p(va,"Despu\xE9s puedes especificar el modelo y el tokenizador en el "),as=f(va,"CODE",{});var ep=n(as);Tl=p(ep,"pipeline()"),ep.forEach(o),Ml=p(va,", y aplicar el "),ss=f(va,"CODE",{});var tp=n(ss);Pl=p(tp,"classifier"),tp.forEach(o),Sl=p(va," en tu texto objetivo:"),va.forEach(o),$o=b(t),D(Ht.$$.fragment,t),go=b(t),Se=f(t,"P",{});var ba=n(Se);Dl=p(ba,"Si no pudieras encontrar el modelo para tu caso respectivo de uso necesitar\xE1s ajustar un modelo preentrenado a tus datos. Mira nuestro "),sa=f(ba,"A",{href:!0});var ap=n(sa);Fl=p(ap,"tutorial de fine-tuning"),ap.forEach(o),Ol=p(ba," para aprender c\xF3mo. Finalmente, despu\xE9s de que has ajustado tu modelo preentrenado, \xA1por favor considera compartirlo (ve el tutorial "),oa=f(ba,"A",{href:!0});var sp=n(oa);Ll=p(sp,"aqu\xED"),sp.forEach(o),Nl=p(ba,") con la comunidad en el Model Hub para democratizar el NLP! \u{1F917}"),ba.forEach(o),_o=b(t),Re=f(t,"H2",{class:!0});var Wo=n(Re);lt=f(Wo,"A",{id:!0,class:!0,href:!0});var op=n(lt);os=f(op,"SPAN",{});var rp=n(os);D(Rt.$$.fragment,rp),rp.forEach(o),op.forEach(o),Il=b(Wo),rs=f(Wo,"SPAN",{});var lp=n(rs);Hl=p(lp,"AutoClass"),lp.forEach(o),Wo.forEach(o),vo=b(t),D(Ut.$$.fragment,t),bo=b(t),me=f(t,"P",{});var Ee=n(me);Rl=p(Ee,"Debajo del cap\xF3, las clases "),ls=f(Ee,"CODE",{});var np=n(ls);Ul=p(np,"AutoModelForSequenceClassification"),np.forEach(o),Vl=p(Ee," y "),ns=f(Ee,"CODE",{});var ip=n(ns);Kl=p(ip,"AutoTokenizer"),ip.forEach(o),Bl=p(Ee," trabajan juntas para dar poder al "),is=f(Ee,"CODE",{});var pp=n(is);Jl=p(pp,"pipeline()"),pp.forEach(o),Gl=p(Ee,". Una "),ra=f(Ee,"A",{href:!0});var cp=n(ra);Yl=p(cp,"AutoClass"),cp.forEach(o),Zl=p(Ee," es un atajo que autom\xE1ticamente recupera la arquitectura de un modelo preentrenado con su nombre o el path. S\xF3lo necesitar\xE1s seleccionar el "),ps=f(Ee,"CODE",{});var up=n(ps);Ql=p(up,"AutoClass"),up.forEach(o),Wl=p(Ee," apropiado para tu tarea y tu tokenizador asociado con "),cs=f(Ee,"CODE",{});var fp=n(cs);Xl=p(fp,"AutoTokenizer"),fp.forEach(o),en=p(Ee,"."),Ee.forEach(o),Eo=b(t),De=f(t,"P",{});var Ea=n(De);tn=p(Ea,"Regresemos a nuestro ejemplo y veamos c\xF3mo puedes usar el "),us=f(Ea,"CODE",{});var dp=n(us);an=p(dp,"AutoClass"),dp.forEach(o),sn=p(Ea," para reproducir los resultados del "),fs=f(Ea,"CODE",{});var mp=n(fs);on=p(mp,"pipeline()"),mp.forEach(o),rn=p(Ea,"."),Ea.forEach(o),wo=b(t),Ue=f(t,"H3",{class:!0});var Xo=n(Ue);nt=f(Xo,"A",{id:!0,class:!0,href:!0});var hp=n(nt);ds=f(hp,"SPAN",{});var $p=n(ds);D(Vt.$$.fragment,$p),$p.forEach(o),hp.forEach(o),ln=b(Xo),ms=f(Xo,"SPAN",{});var gp=n(ms);nn=p(gp,"AutoTokenizer"),gp.forEach(o),Xo.forEach(o),ko=b(t),Fe=f(t,"P",{});var wa=n(Fe);pn=p(wa,"Un tokenizador es responsable de procesar el texto a un formato que sea entendible para el modelo. Primero, el tokenizador separar\xE1 el texto en palabras llamadas "),hs=f(wa,"EM",{});var _p=n(hs);cn=p(_p,"tokens"),_p.forEach(o),un=p(wa,". Hay m\xFAltiples reglas que gobiernan el proceso de tokenizaci\xF3n incluyendo el c\xF3mo separar una palabra y en qu\xE9 nivel (aprende m\xE1s sobre tokenizaci\xF3n "),la=f(wa,"A",{href:!0});var vp=n(la);fn=p(vp,"aqu\xED"),vp.forEach(o),dn=p(wa,"). Lo m\xE1s importante es recordar que necesitar\xE1s instanciar el tokenizador con el mismo nombre del modelo para asegurar que est\xE1s usando las mismas reglas de tokenizaci\xF3n con las que el modelo fue preentrenado."),wa.forEach(o),jo=b(t),it=f(t,"P",{});var er=n(it);mn=p(er,"Carga un tokenizador con "),$s=f(er,"CODE",{});var bp=n($s);hn=p(bp,"AutoTokenizer"),bp.forEach(o),$n=p(er,":"),er.forEach(o),yo=b(t),D(Kt.$$.fragment,t),qo=b(t),pt=f(t,"P",{});var tr=n(pt);gn=p(tr,"Despu\xE9s, el tokenizador convierte los tokens a n\xFAmeros para construir un tensor que servir\xE1 como input para el modelo. Esto es conocido como el "),gs=f(tr,"EM",{});var Ep=n(gs);_n=p(Ep,"vocabulario"),Ep.forEach(o),vn=p(tr," del modelo."),tr.forEach(o),Ao=b(t),na=f(t,"P",{});var wp=n(na);bn=p(wp,"Pasa tu texto al tokenizador:"),wp.forEach(o),zo=b(t),D(Bt.$$.fragment,t),Co=b(t),ia=f(t,"P",{});var kp=n(ia);En=p(kp,"El tokenizador devolver\xE1 un diccionario conteniendo:"),kp.forEach(o),xo=b(t),ct=f(t,"UL",{});var ar=n(ct);pa=f(ar,"LI",{});var ri=n(pa);ca=f(ri,"A",{href:!0});var jp=n(ca);wn=p(jp,"input_ids"),jp.forEach(o),kn=p(ri,": representaciones num\xE9ricas de los tokens."),ri.forEach(o),jn=b(ar),ua=f(ar,"LI",{});var li=n(ua);fa=f(li,"A",{href:!0});var yp=n(fa);yn=p(yp,"atttention_mask"),yp.forEach(o),qn=p(li,": indica cu\xE1les tokens deben ser atendidos."),li.forEach(o),ar.forEach(o),To=b(t),ut=f(t,"P",{});var sr=n(ut);An=p(sr,"Como con el "),_s=f(sr,"CODE",{});var qp=n(_s);zn=p(qp,"pipeline()"),qp.forEach(o),Cn=p(sr,", el tokenizador aceptar\xE1 una lista de inputs. Adem\xE1s, el tokenizador tambi\xE9n puede rellenar (pad, en ingl\xE9s) y truncar el texto para devolver un lote (batch, en ingl\xE9s) de longitud uniforme:"),sr.forEach(o),Mo=b(t),D(ft.$$.fragment,t),Po=b(t),dt=f(t,"P",{});var or=n(dt);xn=p(or,"Lee el tutorial de "),da=f(or,"A",{href:!0});var Ap=n(da);Tn=p(Ap,"preprocessing"),Ap.forEach(o),Mn=p(or," para m\xE1s detalles acerca de la tokenizaci\xF3n."),or.forEach(o),So=b(t),Ve=f(t,"H3",{class:!0});var rr=n(Ve);mt=f(rr,"A",{id:!0,class:!0,href:!0});var zp=n(mt);vs=f(zp,"SPAN",{});var Cp=n(vs);D(Jt.$$.fragment,Cp),Cp.forEach(o),zp.forEach(o),Pn=b(rr),bs=f(rr,"SPAN",{});var xp=n(bs);Sn=p(xp,"AutoModel"),xp.forEach(o),rr.forEach(o),Do=b(t),D(ht.$$.fragment,t),Fo=b(t),D($t.$$.fragment,t),Oo=b(t),he=f(t,"P",{});var we=n(he);Dn=p(we,"Los modelos son "),Gt=f(we,"A",{href:!0,rel:!0});var Tp=n(Gt);Es=f(Tp,"CODE",{});var Mp=n(Es);Fn=p(Mp,"torch.nn.Module"),Mp.forEach(o),Tp.forEach(o),On=p(we," o "),Yt=f(we,"A",{href:!0,rel:!0});var Pp=n(Yt);ws=f(Pp,"CODE",{});var Sp=n(ws);Ln=p(Sp,"tf.keras.Model"),Sp.forEach(o),Pp.forEach(o),Nn=p(we," est\xE1ndares as\xED que podr\xE1s usarlos en tu training loop usual. Sin embargo, para facilitar las cosas, \u{1F917} Transformers provee una clase "),ks=f(we,"CODE",{});var Dp=n(ks);In=p(Dp,"Trainer"),Dp.forEach(o),Hn=p(we," para PyTorch que a\xF1ade funcionalidades para entrenamiento distribuido, precici\xF3n mixta, y m\xE1s. Para TensorFlow, puedes usar el m\xE9todo "),js=f(we,"CODE",{});var Fp=n(js);Rn=p(Fp,"fit"),Fp.forEach(o),Un=p(we," desde "),Zt=f(we,"A",{href:!0,rel:!0});var Op=n(Zt);Vn=p(Op,"Keras"),Op.forEach(o),Kn=p(we,". Consulta el "),ma=f(we,"A",{href:!0});var Lp=n(ma);Bn=p(Lp,"tutorial de entrenamiento"),Lp.forEach(o),Jn=p(we," para m\xE1s detalles."),we.forEach(o),Lo=b(t),D(gt.$$.fragment,t),No=b(t),Ke=f(t,"H3",{class:!0});var lr=n(Ke);_t=f(lr,"A",{id:!0,class:!0,href:!0});var Np=n(_t);ys=f(Np,"SPAN",{});var Ip=n(ys);D(Qt.$$.fragment,Ip),Ip.forEach(o),Np.forEach(o),Gn=b(lr),qs=f(lr,"SPAN",{});var Hp=n(qs);Yn=p(Hp,"Guarda un modelo"),Hp.forEach(o),lr.forEach(o),Io=b(t),D(vt.$$.fragment,t),Ho=b(t),Oe=f(t,"P",{});var ka=n(Oe);Zn=p(ka,"Una caracter\xEDstica particularmente interesante de \u{1F917} Transformers es la habilidad de guardar el modelo y cargarlo como un modelo de PyTorch o TensorFlow. El par\xE1metro "),As=f(ka,"CODE",{});var Rp=n(As);Qn=p(Rp,"from_pt"),Rp.forEach(o),Wn=p(ka," o "),zs=f(ka,"CODE",{});var Up=n(zs);Xn=p(Up,"from_tf"),Up.forEach(o),ei=p(ka," puede convertir el modelo de un framework al otro:"),ka.forEach(o),Ro=b(t),D(bt.$$.fragment,t),this.h()},h(){d(e,"name","hf:doc:metadata"),d(e,"content",JSON.stringify(du)),d(r,"id","quick-tour"),d(r,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r,"href","#quick-tour"),d(a,"class","relative group"),d(x,"href","./model_doc/auto"),d(Y,"id","pipeline"),d(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y,"href","#pipeline"),d(B,"class","relative group"),d(We,"id","uso-del-pipeline"),d(We,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(We,"href","#uso-del-pipeline"),d(Ie,"class","relative group"),d(At,"href","https://huggingface.co/pysentimiento/robertuito-sentiment-analysis"),d(At,"rel","nofollow"),d(xt,"href","https://huggingface.co/docs/datasets/"),d(xt,"rel","nofollow"),d(Pt,"href","https://huggingface.co/docs/datasets/quickstart.html"),d(Pt,"rel","nofollow"),d(St,"href","https://huggingface.co/datasets/PolyAI/minds14"),d(St,"rel","nofollow"),d(aa,"href","./main_classes/pipelines"),d(ot,"id","usa-otro-modelo-y-otro-tokenizador-en-el-pipeline"),d(ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ot,"href","#usa-otro-modelo-y-otro-tokenizador-en-el-pipeline"),d(He,"class","relative group"),d(Lt,"href","https://huggingface.co/models"),d(Lt,"rel","nofollow"),d(Nt,"href","https://huggingface.co/nlptown/bert-base-multilingual-uncased-sentiment"),d(Nt,"rel","nofollow"),d(sa,"href","./training"),d(oa,"href","./model_sharing"),d(lt,"id","autoclass"),d(lt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lt,"href","#autoclass"),d(Re,"class","relative group"),d(ra,"href","./model_doc/auto"),d(nt,"id","autotokenizer"),d(nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nt,"href","#autotokenizer"),d(Ue,"class","relative group"),d(la,"href","./tokenizer_summary"),d(ca,"href","./glossary#input-ids"),d(fa,"href",".glossary#attention-mask"),d(da,"href","./preprocessing"),d(mt,"id","automodel"),d(mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mt,"href","#automodel"),d(Ve,"class","relative group"),d(Gt,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(Gt,"rel","nofollow"),d(Yt,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),d(Yt,"rel","nofollow"),d(Zt,"href","https://keras.io/"),d(Zt,"rel","nofollow"),d(ma,"href","./training"),d(_t,"id","guarda-un-modelo"),d(_t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_t,"href","#guarda-un-modelo"),d(Ke,"class","relative group")},m(t,h){s(document.head,e),$(t,l,h),$(t,a,h),s(a,r),s(r,c),P(g,c,null),s(a,_),s(a,E),s(E,k),$(t,z,h),P(q,t,h),$(t,y,h),$(t,C,h),s(C,R),s(C,N),s(N,V),s(C,w),s(C,x),s(x,G),s(C,U),$(t,I,h),P(K,t,h),$(t,Z,h),$(t,B,h),s(B,Y),s(Y,re),P(se,re,null),s(B,oe),s(B,ue),s(ue,ie),$(t,fe,h),$(t,le,h),s(le,X),s(X,pe),s(le,de),$(t,F,h),P(H,t,h),$(t,te,h),$(t,T,h),s(T,J),s(T,ce),s(ce,$e),s(T,Q),$(t,ke,h),$(t,ae,h),s(ae,je),s(je,ve),s(ae,Ae),$(t,ge,h),$(t,ee,h),s(ee,ze),s(ze,ir),s(ee,pr),s(ee,za),s(za,cr),s(ee,ur),s(ee,Ca),s(Ca,fr),s(ee,dr),s(ee,xa),s(xa,mr),s(ee,hr),s(ee,Ta),s(Ta,$r),s(ee,gr),s(ee,Ma),s(Ma,_r),s(ee,vr),s(ee,Pa),s(Pa,br),s(ee,Er),s(ee,Sa),s(Sa,wr),$(t,Is,h),$(t,kt,h),s(kt,Da),s(Da,kr),s(kt,jr),$(t,Hs,h),$(t,Ce,h),s(Ce,Fa),s(Fa,yr),s(Ce,qr),s(Ce,Oa),s(Oa,Ar),s(Ce,zr),s(Ce,La),s(La,Cr),$(t,Rs,h),$(t,jt,h),s(jt,Na),s(Na,xr),s(jt,Tr),$(t,Us,h),$(t,Ze,h),s(Ze,Ia),s(Ia,Mr),s(Ze,Pr),s(Ze,Ha),s(Ha,Sr),$(t,Vs,h),P(Qe,t,h),$(t,Ks,h),$(t,Ie,h),s(Ie,We),s(We,Ra),P(yt,Ra,null),s(Ie,Dr),s(Ie,Ua),s(Ua,Fr),$(t,Bs,h),$(t,Xe,h),s(Xe,Or),s(Xe,Va),s(Va,Lr),s(Xe,Nr),$(t,Js,h),$(t,ea,h),s(ea,Ir),$(t,Gs,h),P(et,t,h),$(t,Ys,h),$(t,tt,h),s(tt,Hr),s(tt,Ka),s(Ka,Rr),s(tt,Ur),$(t,Zs,h),P(qt,t,h),$(t,Qs,h),$(t,xe,h),s(xe,Vr),s(xe,At),s(At,Kr),s(xe,Br),s(xe,Ba),s(Ba,Jr),s(xe,Gr),$(t,Ws,h),P(zt,t,h),$(t,Xs,h),$(t,at,h),s(at,Yr),s(at,Ja),s(Ja,Zr),s(at,Qr),$(t,eo,h),P(Ct,t,h),$(t,to,h),$(t,Te,h),s(Te,Wr),s(Te,Ga),s(Ga,Xr),s(Te,el),s(Te,xt),s(xt,tl),s(Te,al),$(t,ao,h),P(Tt,t,h),$(t,so,h),$(t,ye,h),s(ye,sl),s(ye,Ya),s(Ya,ol),s(ye,rl),s(ye,Za),s(Za,ll),s(ye,nl),s(ye,Qa),s(Qa,il),s(ye,pl),$(t,oo,h),P(Mt,t,h),$(t,ro,h),$(t,Me,h),s(Me,cl),s(Me,Pt),s(Pt,ul),s(Me,fl),s(Me,St),s(St,dl),s(Me,ml),$(t,lo,h),P(Dt,t,h),$(t,no,h),$(t,ta,h),s(ta,hl),$(t,io,h),P(Ft,t,h),$(t,po,h),$(t,st,h),s(st,$l),s(st,aa),s(aa,gl),s(st,_l),$(t,co,h),$(t,He,h),s(He,ot),s(ot,Wa),P(Ot,Wa,null),s(He,vl),s(He,Xa),s(Xa,bl),$(t,uo,h),$(t,be,h),s(be,El),s(be,es),s(es,wl),s(be,kl),s(be,Lt),s(Lt,jl),s(be,yl),s(be,ts),s(ts,ql),s(be,Al),s(be,Nt),s(Nt,zl),s(be,Cl),$(t,fo,h),P(It,t,h),$(t,mo,h),P(rt,t,h),$(t,ho,h),$(t,Pe,h),s(Pe,xl),s(Pe,as),s(as,Tl),s(Pe,Ml),s(Pe,ss),s(ss,Pl),s(Pe,Sl),$(t,$o,h),P(Ht,t,h),$(t,go,h),$(t,Se,h),s(Se,Dl),s(Se,sa),s(sa,Fl),s(Se,Ol),s(Se,oa),s(oa,Ll),s(Se,Nl),$(t,_o,h),$(t,Re,h),s(Re,lt),s(lt,os),P(Rt,os,null),s(Re,Il),s(Re,rs),s(rs,Hl),$(t,vo,h),P(Ut,t,h),$(t,bo,h),$(t,me,h),s(me,Rl),s(me,ls),s(ls,Ul),s(me,Vl),s(me,ns),s(ns,Kl),s(me,Bl),s(me,is),s(is,Jl),s(me,Gl),s(me,ra),s(ra,Yl),s(me,Zl),s(me,ps),s(ps,Ql),s(me,Wl),s(me,cs),s(cs,Xl),s(me,en),$(t,Eo,h),$(t,De,h),s(De,tn),s(De,us),s(us,an),s(De,sn),s(De,fs),s(fs,on),s(De,rn),$(t,wo,h),$(t,Ue,h),s(Ue,nt),s(nt,ds),P(Vt,ds,null),s(Ue,ln),s(Ue,ms),s(ms,nn),$(t,ko,h),$(t,Fe,h),s(Fe,pn),s(Fe,hs),s(hs,cn),s(Fe,un),s(Fe,la),s(la,fn),s(Fe,dn),$(t,jo,h),$(t,it,h),s(it,mn),s(it,$s),s($s,hn),s(it,$n),$(t,yo,h),P(Kt,t,h),$(t,qo,h),$(t,pt,h),s(pt,gn),s(pt,gs),s(gs,_n),s(pt,vn),$(t,Ao,h),$(t,na,h),s(na,bn),$(t,zo,h),P(Bt,t,h),$(t,Co,h),$(t,ia,h),s(ia,En),$(t,xo,h),$(t,ct,h),s(ct,pa),s(pa,ca),s(ca,wn),s(pa,kn),s(ct,jn),s(ct,ua),s(ua,fa),s(fa,yn),s(ua,qn),$(t,To,h),$(t,ut,h),s(ut,An),s(ut,_s),s(_s,zn),s(ut,Cn),$(t,Mo,h),P(ft,t,h),$(t,Po,h),$(t,dt,h),s(dt,xn),s(dt,da),s(da,Tn),s(dt,Mn),$(t,So,h),$(t,Ve,h),s(Ve,mt),s(mt,vs),P(Jt,vs,null),s(Ve,Pn),s(Ve,bs),s(bs,Sn),$(t,Do,h),P(ht,t,h),$(t,Fo,h),P($t,t,h),$(t,Oo,h),$(t,he,h),s(he,Dn),s(he,Gt),s(Gt,Es),s(Es,Fn),s(he,On),s(he,Yt),s(Yt,ws),s(ws,Ln),s(he,Nn),s(he,ks),s(ks,In),s(he,Hn),s(he,js),s(js,Rn),s(he,Un),s(he,Zt),s(Zt,Vn),s(he,Kn),s(he,ma),s(ma,Bn),s(he,Jn),$(t,Lo,h),P(gt,t,h),$(t,No,h),$(t,Ke,h),s(Ke,_t),s(_t,ys),P(Qt,ys,null),s(Ke,Gn),s(Ke,qs),s(qs,Yn),$(t,Io,h),P(vt,t,h),$(t,Ho,h),$(t,Oe,h),s(Oe,Zn),s(Oe,As),s(As,Qn),s(Oe,Wn),s(Oe,zs),s(zs,Xn),s(Oe,ei),$(t,Ro,h),P(bt,t,h),Uo=!0},p(t,[h]){const Wt={};h&2&&(Wt.$$scope={dirty:h,ctx:t}),K.$set(Wt);const Cs={};h&2&&(Cs.$$scope={dirty:h,ctx:t}),Qe.$set(Cs);const xs={};h&2&&(xs.$$scope={dirty:h,ctx:t}),et.$set(xs);const Ts={};h&2&&(Ts.$$scope={dirty:h,ctx:t}),rt.$set(Ts);const Be={};h&2&&(Be.$$scope={dirty:h,ctx:t}),ft.$set(Be);const Ms={};h&2&&(Ms.$$scope={dirty:h,ctx:t}),ht.$set(Ms);const Ps={};h&2&&(Ps.$$scope={dirty:h,ctx:t}),$t.$set(Ps);const Xt={};h&2&&(Xt.$$scope={dirty:h,ctx:t}),gt.$set(Xt);const Ss={};h&2&&(Ss.$$scope={dirty:h,ctx:t}),vt.$set(Ss);const Ds={};h&2&&(Ds.$$scope={dirty:h,ctx:t}),bt.$set(Ds)},i(t){Uo||(j(g.$$.fragment,t),j(q.$$.fragment,t),j(K.$$.fragment,t),j(se.$$.fragment,t),j(H.$$.fragment,t),j(Qe.$$.fragment,t),j(yt.$$.fragment,t),j(et.$$.fragment,t),j(qt.$$.fragment,t),j(zt.$$.fragment,t),j(Ct.$$.fragment,t),j(Tt.$$.fragment,t),j(Mt.$$.fragment,t),j(Dt.$$.fragment,t),j(Ft.$$.fragment,t),j(Ot.$$.fragment,t),j(It.$$.fragment,t),j(rt.$$.fragment,t),j(Ht.$$.fragment,t),j(Rt.$$.fragment,t),j(Ut.$$.fragment,t),j(Vt.$$.fragment,t),j(Kt.$$.fragment,t),j(Bt.$$.fragment,t),j(ft.$$.fragment,t),j(Jt.$$.fragment,t),j(ht.$$.fragment,t),j($t.$$.fragment,t),j(gt.$$.fragment,t),j(Qt.$$.fragment,t),j(vt.$$.fragment,t),j(bt.$$.fragment,t),Uo=!0)},o(t){A(g.$$.fragment,t),A(q.$$.fragment,t),A(K.$$.fragment,t),A(se.$$.fragment,t),A(H.$$.fragment,t),A(Qe.$$.fragment,t),A(yt.$$.fragment,t),A(et.$$.fragment,t),A(qt.$$.fragment,t),A(zt.$$.fragment,t),A(Ct.$$.fragment,t),A(Tt.$$.fragment,t),A(Mt.$$.fragment,t),A(Dt.$$.fragment,t),A(Ft.$$.fragment,t),A(Ot.$$.fragment,t),A(It.$$.fragment,t),A(rt.$$.fragment,t),A(Ht.$$.fragment,t),A(Rt.$$.fragment,t),A(Ut.$$.fragment,t),A(Vt.$$.fragment,t),A(Kt.$$.fragment,t),A(Bt.$$.fragment,t),A(ft.$$.fragment,t),A(Jt.$$.fragment,t),A(ht.$$.fragment,t),A($t.$$.fragment,t),A(gt.$$.fragment,t),A(Qt.$$.fragment,t),A(vt.$$.fragment,t),A(bt.$$.fragment,t),Uo=!1},d(t){o(e),t&&o(l),t&&o(a),S(g),t&&o(z),S(q,t),t&&o(y),t&&o(C),t&&o(I),S(K,t),t&&o(Z),t&&o(B),S(se),t&&o(fe),t&&o(le),t&&o(F),S(H,t),t&&o(te),t&&o(T),t&&o(ke),t&&o(ae),t&&o(ge),t&&o(ee),t&&o(Is),t&&o(kt),t&&o(Hs),t&&o(Ce),t&&o(Rs),t&&o(jt),t&&o(Us),t&&o(Ze),t&&o(Vs),S(Qe,t),t&&o(Ks),t&&o(Ie),S(yt),t&&o(Bs),t&&o(Xe),t&&o(Js),t&&o(ea),t&&o(Gs),S(et,t),t&&o(Ys),t&&o(tt),t&&o(Zs),S(qt,t),t&&o(Qs),t&&o(xe),t&&o(Ws),S(zt,t),t&&o(Xs),t&&o(at),t&&o(eo),S(Ct,t),t&&o(to),t&&o(Te),t&&o(ao),S(Tt,t),t&&o(so),t&&o(ye),t&&o(oo),S(Mt,t),t&&o(ro),t&&o(Me),t&&o(lo),S(Dt,t),t&&o(no),t&&o(ta),t&&o(io),S(Ft,t),t&&o(po),t&&o(st),t&&o(co),t&&o(He),S(Ot),t&&o(uo),t&&o(be),t&&o(fo),S(It,t),t&&o(mo),S(rt,t),t&&o(ho),t&&o(Pe),t&&o($o),S(Ht,t),t&&o(go),t&&o(Se),t&&o(_o),t&&o(Re),S(Rt),t&&o(vo),S(Ut,t),t&&o(bo),t&&o(me),t&&o(Eo),t&&o(De),t&&o(wo),t&&o(Ue),S(Vt),t&&o(ko),t&&o(Fe),t&&o(jo),t&&o(it),t&&o(yo),S(Kt,t),t&&o(qo),t&&o(pt),t&&o(Ao),t&&o(na),t&&o(zo),S(Bt,t),t&&o(Co),t&&o(ia),t&&o(xo),t&&o(ct),t&&o(To),t&&o(ut),t&&o(Mo),S(ft,t),t&&o(Po),t&&o(dt),t&&o(So),t&&o(Ve),S(Jt),t&&o(Do),S(ht,t),t&&o(Fo),S($t,t),t&&o(Oo),t&&o(he),t&&o(Lo),S(gt,t),t&&o(No),t&&o(Ke),S(Qt),t&&o(Io),S(vt,t),t&&o(Ho),t&&o(Oe),t&&o(Ro),S(bt,t)}}}const du={local:"quick-tour",sections:[{local:"pipeline",sections:[{local:"uso-del-pipeline",title:"Uso del Pipeline"},{local:"usa-otro-modelo-y-otro-tokenizador-en-el-pipeline",title:"Usa otro modelo y otro tokenizador en el pipeline"}],title:"Pipeline"},{local:"autoclass",sections:[{local:"autotokenizer",title:"AutoTokenizer"},{local:"automodel",title:"AutoModel"},{local:"guarda-un-modelo",title:"Guarda un modelo"}],title:"AutoClass"}],title:"Quick tour"};function mu(m){return Wp(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Eu extends Je{constructor(e){super();Ge(this,e,mu,fu,Ye,{})}}export{Eu as default,du as metadata};
