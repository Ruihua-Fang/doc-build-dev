import{S as U1,i as V1,s as G1,e as n,k as d,w as g,t as r,M as J1,c as s,d as o,m as h,a,x as _,h as l,b as f,F as t,g as p,y as v,q as w,o as E,B as $,L as W1}from"../chunks/vendor-6b77c823.js";import{T as cs}from"../chunks/Tip-39098574.js";import{I as B}from"../chunks/IconCopyLink-7a11ce68.js";import{C as z}from"../chunks/CodeBlock-3a8b25a8.js";import{F as Y1,M as K1}from"../chunks/Markdown-4489c441.js";function Q1(M){let c,y,u,b,T,x,P,D,A,N,S,C,q;return c=new z({props:{code:`from transformers import AutoTokenizer, AutoModelForSequenceClassification

# Load tokenizer and PyTorch weights form the Hub
tokenizer = tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased")
pt_model = AutoModelForSequenceClassification.from_pretrained("distilbert-base-uncased")
# Save to disk
tokenizer.save_pretrained("local-pt-checkpoint")
pt_model.save_pretrained("local-pt-checkpoint")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load tokenizer and PyTorch weights form the Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Save to disk</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(<span class="hljs-string">&quot;local-pt-checkpoint&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model.save_pretrained(<span class="hljs-string">&quot;local-pt-checkpoint&quot;</span>)`}}),C=new z({props:{code:"python -m transformers.onnx --model=local-pt-checkpoint onnx/",highlighted:"python -m transformers.onnx --model=local-pt-checkpoint onnx/"}}),{c(){g(c.$$.fragment),y=d(),u=n("p"),b=r("Once the checkpoint is saved, we can export it to ONNX by pointing the "),T=n("code"),x=r("--model"),P=r(`
argument of the `),D=n("code"),A=r("transformers.onnx"),N=r(" package to the desired directory:"),S=d(),g(C.$$.fragment)},l(m){_(c.$$.fragment,m),y=h(m),u=s(m,"P",{});var j=a(u);b=l(j,"Once the checkpoint is saved, we can export it to ONNX by pointing the "),T=s(j,"CODE",{});var L=a(T);x=l(L,"--model"),L.forEach(o),P=l(j,`
argument of the `),D=s(j,"CODE",{});var V=a(D);A=l(V,"transformers.onnx"),V.forEach(o),N=l(j," package to the desired directory:"),j.forEach(o),S=h(m),_(C.$$.fragment,m)},m(m,j){v(c,m,j),p(m,y,j),p(m,u,j),t(u,b),t(u,T),t(T,x),t(u,P),t(u,D),t(D,A),t(u,N),p(m,S,j),v(C,m,j),q=!0},p:W1,i(m){q||(w(c.$$.fragment,m),w(C.$$.fragment,m),q=!0)},o(m){E(c.$$.fragment,m),E(C.$$.fragment,m),q=!1},d(m){$(c,m),m&&o(y),m&&o(u),m&&o(S),$(C,m)}}}function Z1(M){let c,y;return c=new K1({props:{$$slots:{default:[Q1]},$$scope:{ctx:M}}}),{c(){g(c.$$.fragment)},l(u){_(c.$$.fragment,u)},m(u,b){v(c,u,b),y=!0},p(u,b){const T={};b&2&&(T.$$scope={dirty:b,ctx:u}),c.$set(T)},i(u){y||(w(c.$$.fragment,u),y=!0)},o(u){E(c.$$.fragment,u),y=!1},d(u){$(c,u)}}}function eE(M){let c,y,u,b,T,x,P,D,A,N,S,C,q;return c=new z({props:{code:`from transformers import AutoTokenizer, TFAutoModelForSequenceClassification

# Load tokenizer and TensorFlow weights from the Hub
tokenizer = tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased")
tf_model = TFAutoModelForSequenceClassification.from_pretrained("distilbert-base-uncased")
# Save to disk
tokenizer.save_pretrained("local-tf-checkpoint")
tf_model.save_pretrained("local-tf-checkpoint")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load tokenizer and TensorFlow weights from the Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Save to disk</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(<span class="hljs-string">&quot;local-tf-checkpoint&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model.save_pretrained(<span class="hljs-string">&quot;local-tf-checkpoint&quot;</span>)`}}),C=new z({props:{code:"python -m transformers.onnx --model=local-tf-checkpoint onnx/",highlighted:"python -m transformers.onnx --model=local-tf-checkpoint onnx/"}}),{c(){g(c.$$.fragment),y=d(),u=n("p"),b=r("Once the checkpoint is saved, we can export it to ONNX by pointing the "),T=n("code"),x=r("--model"),P=r(`
argument of the `),D=n("code"),A=r("transformers.onnx"),N=r(" package to the desired directory:"),S=d(),g(C.$$.fragment)},l(m){_(c.$$.fragment,m),y=h(m),u=s(m,"P",{});var j=a(u);b=l(j,"Once the checkpoint is saved, we can export it to ONNX by pointing the "),T=s(j,"CODE",{});var L=a(T);x=l(L,"--model"),L.forEach(o),P=l(j,`
argument of the `),D=s(j,"CODE",{});var V=a(D);A=l(V,"transformers.onnx"),V.forEach(o),N=l(j," package to the desired directory:"),j.forEach(o),S=h(m),_(C.$$.fragment,m)},m(m,j){v(c,m,j),p(m,y,j),p(m,u,j),t(u,b),t(u,T),t(T,x),t(u,P),t(u,D),t(D,A),t(u,N),p(m,S,j),v(C,m,j),q=!0},p:W1,i(m){q||(w(c.$$.fragment,m),w(C.$$.fragment,m),q=!0)},o(m){E(c.$$.fragment,m),E(C.$$.fragment,m),q=!1},d(m){$(c,m),m&&o(y),m&&o(u),m&&o(S),$(C,m)}}}function tE(M){let c,y;return c=new K1({props:{$$slots:{default:[eE]},$$scope:{ctx:M}}}),{c(){g(c.$$.fragment)},l(u){_(c.$$.fragment,u)},m(u,b){v(c,u,b),y=!0},p(u,b){const T={};b&2&&(T.$$scope={dirty:b,ctx:u}),c.$set(T)},i(u){y||(w(c.$$.fragment,u),y=!0)},o(u){E(c.$$.fragment,u),y=!1},d(u){$(c,u)}}}function oE(M){let c,y,u,b,T,x,P,D;return{c(){c=n("p"),y=r("The features that have a "),u=n("code"),b=r("with-past"),T=r(" suffix (e.g. "),x=n("code"),P=r("causal-lm-with-past"),D=r(`)
correspond to model topologies with precomputed hidden states (key and values
in the attention blocks) that can be used for fast autoregressive decoding.`)},l(A){c=s(A,"P",{});var N=a(c);y=l(N,"The features that have a "),u=s(N,"CODE",{});var S=a(u);b=l(S,"with-past"),S.forEach(o),T=l(N," suffix (e.g. "),x=s(N,"CODE",{});var C=a(x);P=l(C,"causal-lm-with-past"),C.forEach(o),D=l(N,`)
correspond to model topologies with precomputed hidden states (key and values
in the attention blocks) that can be used for fast autoregressive decoding.`),N.forEach(o)},m(A,N){p(A,c,N),t(c,y),t(c,u),t(u,b),t(c,T),t(c,x),t(x,P),t(c,D)},d(A){A&&o(c)}}}function nE(M){let c,y,u,b,T;return{c(){c=n("p"),y=r(`A good way to implement a custom ONNX configuration is to look at the existing
implementation in the `),u=n("code"),b=r("configuration_<model_name>.py"),T=r(" file of a similar architecture.")},l(x){c=s(x,"P",{});var P=a(c);y=l(P,`A good way to implement a custom ONNX configuration is to look at the existing
implementation in the `),u=s(P,"CODE",{});var D=a(u);b=l(D,"configuration_<model_name>.py"),D.forEach(o),T=l(P," file of a similar architecture."),P.forEach(o)},m(x,P){p(x,c,P),t(c,y),t(c,u),t(u,b),t(c,T)},d(x){x&&o(c)}}}function sE(M){let c,y,u,b,T,x,P,D,A,N,S,C,q,m,j,L,V,we,He,G,H,Ee,se;return{c(){c=n("p"),y=r("Notice that "),u=n("code"),b=r("inputs"),T=r(" property for "),x=n("code"),P=r("DistilBertOnnxConfig"),D=r(` returns an
`),A=n("code"),N=r("OrderedDict"),S=r(`. This ensures that the inputs are matched with their relative
position within the `),C=n("code"),q=r("PreTrainedModel.forward()"),m=r(` method when tracing the graph.
We recommend using an `),j=n("code"),L=r("OrderedDict"),V=r(" for the "),we=n("code"),He=r("inputs"),G=r(" and "),H=n("code"),Ee=r("outputs"),se=r(` properties
when implementing custom ONNX configurations.`)},l($e){c=s($e,"P",{});var I=a(c);y=l(I,"Notice that "),u=s(I,"CODE",{});var dn=a(u);b=l(dn,"inputs"),dn.forEach(o),T=l(I," property for "),x=s(I,"CODE",{});var It=a(x);P=l(It,"DistilBertOnnxConfig"),It.forEach(o),D=l(I,` returns an
`),A=s(I,"CODE",{});var J=a(A);N=l(J,"OrderedDict"),J.forEach(o),S=l(I,`. This ensures that the inputs are matched with their relative
position within the `),C=s(I,"CODE",{});var hn=a(C);q=l(hn,"PreTrainedModel.forward()"),hn.forEach(o),m=l(I,` method when tracing the graph.
We recommend using an `),j=s(I,"CODE",{});var ae=a(j);L=l(ae,"OrderedDict"),ae.forEach(o),V=l(I," for the "),we=s(I,"CODE",{});var fn=a(we);He=l(fn,"inputs"),fn.forEach(o),G=l(I," and "),H=s(I,"CODE",{});var cn=a(H);Ee=l(cn,"outputs"),cn.forEach(o),se=l(I,` properties
when implementing custom ONNX configurations.`),I.forEach(o)},m($e,I){p($e,c,I),t(c,y),t(c,u),t(u,b),t(c,T),t(c,x),t(x,P),t(c,D),t(c,A),t(A,N),t(c,S),t(c,C),t(C,q),t(c,m),t(c,j),t(j,L),t(c,V),t(c,we),t(we,He),t(c,G),t(c,H),t(H,Ee),t(c,se)},d($e){$e&&o(c)}}}function aE(M){let c,y,u,b,T,x,P,D;return{c(){c=n("p"),y=r("All of the base properties and methods associated with "),u=n("a"),b=r("OnnxConfig"),T=r(` and the
other configuration classes can be overriden if needed. Check out
`),x=n("code"),P=r("BartOnnxConfig"),D=r(" for an advanced example."),this.h()},l(A){c=s(A,"P",{});var N=a(c);y=l(N,"All of the base properties and methods associated with "),u=s(N,"A",{href:!0});var S=a(u);b=l(S,"OnnxConfig"),S.forEach(o),T=l(N,` and the
other configuration classes can be overriden if needed. Check out
`),x=s(N,"CODE",{});var C=a(x);P=l(C,"BartOnnxConfig"),C.forEach(o),D=l(N," for an advanced example."),N.forEach(o),this.h()},h(){f(u,"href","/docs/transformers/pr_16181/en/main_classes/onnx#transformers.onnx.OnnxConfig")},m(A,N){p(A,c,N),t(c,y),t(c,u),t(u,b),t(c,T),t(c,x),t(x,P),t(c,D)},d(A){A&&o(c)}}}function rE(M){let c,y,u,b,T,x,P,D,A,N,S;return{c(){c=n("p"),y=r(`If your model is larger than 2GB, you will see that many additional files are
created during the export. This is `),u=n("em"),b=r("expected"),T=r(" because ONNX uses "),x=n("a"),P=r(`Protocol
Buffers`),D=r(` to store the model and
these have a size limit of 2GB. See the `),A=n("a"),N=r(`ONNX
documentation`),S=r(`
for instructions on how to load models with external data.`),this.h()},l(C){c=s(C,"P",{});var q=a(c);y=l(q,`If your model is larger than 2GB, you will see that many additional files are
created during the export. This is `),u=s(q,"EM",{});var m=a(u);b=l(m,"expected"),m.forEach(o),T=l(q," because ONNX uses "),x=s(q,"A",{href:!0,rel:!0});var j=a(x);P=l(j,`Protocol
Buffers`),j.forEach(o),D=l(q,` to store the model and
these have a size limit of 2GB. See the `),A=s(q,"A",{href:!0,rel:!0});var L=a(A);N=l(L,`ONNX
documentation`),L.forEach(o),S=l(q,`
for instructions on how to load models with external data.`),q.forEach(o),this.h()},h(){f(x,"href","https://developers.google.com/protocol-buffers/"),f(x,"rel","nofollow"),f(A,"href","https://github.com/onnx/onnx/blob/master/docs/ExternalData.md"),f(A,"rel","nofollow")},m(C,q){p(C,c,q),t(c,y),t(c,u),t(u,b),t(c,T),t(c,x),t(x,P),t(c,D),t(c,A),t(A,N),t(c,S)},d(C){C&&o(c)}}}function lE(M){let c,y;return{c(){c=n("p"),y=r(`This is the very beginning of our experiments with TorchScript and we are still exploring its capabilities with
variable-input-size models. It is a focus of interest to us and we will deepen our analysis in upcoming releases,
with more code examples, a more flexible implementation, and benchmarks comparing python-based codes with compiled
TorchScript.`)},l(u){c=s(u,"P",{});var b=a(c);y=l(b,`This is the very beginning of our experiments with TorchScript and we are still exploring its capabilities with
variable-input-size models. It is a focus of interest to us and we will deepen our analysis in upcoming releases,
with more code examples, a more flexible implementation, and benchmarks comparing python-based codes with compiled
TorchScript.`),b.forEach(o)},m(u,b){p(u,c,b),t(c,y)},d(u){u&&o(c)}}}function iE(M){let c,y,u,b,T,x,P,D,A,N,S,C,q,m,j,L,V,we,He,G,H,Ee,se,$e,I,dn,It,J,hn,ae,fn,cn,us,fd,cd,rl,un,ud,ll,We,md,ms,gd,_d,il,mn,vd,pl,k,gs,wd,Ed,_s,$d,bd,vs,yd,xd,ws,kd,Td,Es,Od,Nd,$s,jd,Ad,bs,Cd,Dd,ys,Pd,Sd,xs,qd,zd,ks,Id,Md,Ts,Bd,Ld,Os,Xd,Fd,Ns,Rd,Hd,js,Wd,Kd,As,Ud,Vd,Cs,Gd,Jd,Ds,Yd,Qd,Ps,Zd,eh,Ss,th,oh,qs,nh,dl,gn,sh,hl,Ke,Mt,ah,zs,rh,lh,ih,Is,ph,fl,be,Ue,Ms,Bt,dh,Bs,hh,cl,_n,fh,ul,Lt,ml,Ve,ch,Ls,uh,mh,gl,Xt,_l,vn,gh,vl,Ft,wl,wn,_h,El,Rt,$l,re,vh,Xs,wh,Eh,Fs,$h,bh,bl,Q,yh,Rs,xh,kh,Ht,Th,Oh,Wt,Nh,jh,yl,Kt,xl,Ge,Ah,Hs,Ch,Dh,kl,Ut,Tl,Je,Ph,Vt,Sh,qh,Ol,Gt,Nl,En,zh,jl,Ye,Al,ye,Qe,Ws,Jt,Ih,Ks,Mh,Cl,Ze,Bh,Us,Lh,Xh,Dl,et,Vs,Yt,Gs,Fh,Rh,Js,Hh,Wh,X,Qt,Zt,Ys,Kh,Uh,Qs,Vh,Gh,Zs,ea,Jh,Yh,eo,to,ta,Qh,Zh,oa,ef,tf,na,sa,of,nf,oo,aa,ra,sf,af,la,ia,rf,lf,no,pa,da,pf,df,ha,fa,hf,ff,so,ao,ca,cf,uf,ua,mf,gf,ma,ga,_f,vf,ro,_a,va,wf,Ef,wa,Ea,$f,bf,lo,$a,ba,yf,xf,ya,xa,kf,Pl,tt,Tf,ka,Of,Nf,Sl,io,ql,le,jf,Ta,Af,Cf,Oa,Df,Pf,zl,po,Il,$n,Sf,Ml,ho,Bl,Z,qf,Na,zf,If,ja,Mf,Bf,Aa,Lf,Xf,Ll,ot,Xl,xe,nt,Ca,fo,Ff,Da,Rf,Fl,bn,Hf,Rl,ie,Pa,Wf,Kf,Sa,Uf,Vf,qa,Gf,Hl,yn,Jf,Wl,ke,st,za,co,Yf,Ia,Qf,Kl,xn,Zf,Ul,pe,kn,ec,Tn,tc,oc,On,nc,Nn,sc,ac,jn,rc,An,lc,Vl,at,Gl,rt,ic,Ma,pc,dc,Jl,uo,Yl,W,hc,Ba,fc,cc,La,uc,mc,Xa,gc,_c,Fa,vc,wc,Ql,lt,Zl,Cn,Ec,ei,mo,ti,Dn,$c,oi,go,ni,Pn,bc,si,_o,ai,K,yc,Ra,xc,kc,Ha,Tc,Oc,Wa,Nc,jc,Ka,Ac,Cc,ri,vo,li,it,ii,Te,pt,Ua,wo,Dc,Va,Pc,pi,de,Sc,Ga,qc,zc,Ja,Ic,Mc,di,Eo,hi,F,Bc,Ya,Lc,Xc,Qa,Fc,Rc,Za,Hc,Wc,er,Kc,Uc,tr,Vc,Gc,fi,$o,ci,dt,ui,Oe,ht,or,bo,Jc,nr,Yc,mi,he,Qc,sr,Zc,eu,ar,tu,ou,gi,yo,_i,ft,nu,rr,su,au,vi,Ne,ct,lr,xo,ru,ir,lu,wi,Sn,iu,Ei,fe,ko,pu,pr,du,hu,fu,qn,cu,dr,uu,mu,zn,gu,hr,_u,$i,ut,vu,To,wu,Eu,bi,je,mt,fr,Oo,$u,cr,bu,yi,gt,xi,_t,yu,No,xu,ku,ki,In,Tu,Ti,Mn,Ou,Oi,vt,ur,Nu,ju,jo,Au,mr,Cu,Du,Ni,Bn,Pu,ji,Ae,wt,gr,Ao,Su,_r,qu,Ai,Ce,Et,vr,Co,zu,wr,Iu,Ci,ce,Mu,Er,Bu,Lu,$r,Xu,Fu,Di,ee,Ru,br,Hu,Wu,yr,Ku,Uu,xr,Vu,Gu,Pi,$t,Ju,kr,Yu,Qu,Si,De,bt,Tr,Do,Zu,Or,em,qi,Ln,tm,zi,Xn,om,Ii,Fn,Nr,nm,Mi,Rn,sm,Bi,Hn,am,Li,Pe,yt,jr,Po,rm,Ar,lm,Xi,Wn,im,Fi,Se,xt,Cr,So,pm,Dr,dm,Ri,Y,hm,Pr,fm,cm,Sr,um,mm,qr,gm,_m,zr,vm,Hi,qo,Wi,qe,kt,Ir,zo,wm,Mr,Em,Ki,te,$m,Br,bm,ym,Lr,xm,km,Xr,Tm,Om,Ui,Io,Vi,ze,Tt,Fr,Mo,Nm,Rr,jm,Gi,Ot,Am,Hr,Cm,Dm,Ji,Bo,Yi,Ie,Nt,Wr,Lo,Pm,Kr,Sm,Qi,ue,qm,Xo,zm,Im,Fo,Mm,Bm,Zi,me,Ur,Lm,Xm,Kn,Fm,Ro,Rm,Hm,Me,Wm,Ho,Km,Um,Wo,Vm,Gm,ep,Be,jt,Vr,Ko,Jm,Gr,Ym,tp,R,Qm,Uo,Zm,eg,Vo,tg,og,Go,ng,sg,Jo,ag,rg,Yo,lg,ig,op,Le,At,Jr,Qo,pg,Yr,dg,np,Un,hg,sp,Vn,Xe,fg,Zo,cg,ug,en,mg,gg,ap,Fe,Ct,Qr,tn,_g,Zr,vg,rp,ge,wg,on,Eg,$g,el,bg,yg,lp,nn,ip,Gn,xg,pp,Jn,kg,dp,sn,hp,Yn,Tg,fp,an,cp,Qn,Og,up,Dt,Ng,rn,jg,Ag,mp;return x=new B({}),se=new B({}),Bt=new B({}),Lt=new z({props:{code:"pip install transformers[onnx]",highlighted:"pip install transformers[onnx]"}}),Xt=new z({props:{code:`python -m transformers.onnx --help

usage: Hugging Face Transformers ONNX exporter [-h] -m MODEL [--feature {causal-lm, ...}] [--opset OPSET] [--atol ATOL] output

positional arguments:
  output                Path indicating where to store generated ONNX model.

optional arguments:
  -h, --help            show this help message and exit
  -m MODEL, --model MODEL
                        Model ID on huggingface.co or path on disk to load model from.
  --feature {causal-lm, ...}
                        The type of features to export the model with.
  --opset OPSET         ONNX opset version to export the model with.
  --atol ATOL           Absolute difference tolerence when validating the model.`,highlighted:`python -m transformers.onnx --<span class="hljs-built_in">help</span>

usage: Hugging Face Transformers ONNX exporter [-h] -m MODEL [--feature {causal-lm, ...}] [--opset OPSET] [--atol ATOL] output

positional arguments:
  output                Path indicating <span class="hljs-built_in">where</span> to store generated ONNX model.

optional arguments:
  -h, --<span class="hljs-built_in">help</span>            show this <span class="hljs-built_in">help</span> message and <span class="hljs-built_in">exit</span>
  -m MODEL, --model MODEL
                        Model ID on huggingface.co or path on disk to load model from.
  --feature {causal-lm, ...}
                        The <span class="hljs-built_in">type</span> of features to <span class="hljs-built_in">export</span> the model with.
  --opset OPSET         ONNX opset version to <span class="hljs-built_in">export</span> the model with.
  --atol ATOL           Absolute difference tolerence when validating the model.`}}),Ft=new z({props:{code:"python -m transformers.onnx --model=distilbert-base-uncased onnx/",highlighted:"python -m transformers.onnx --model=distilbert-base-uncased onnx/"}}),Rt=new z({props:{code:`Validating ONNX model...
        -[\u2713] ONNX model output names match reference model ({'last_hidden_state'})
        - Validating ONNX Model output "last_hidden_state":
                -[\u2713] (2, 8, 768) matches (2, 8, 768)
                -[\u2713] all values close (atol: 1e-05)
All good, model saved at: onnx/model.onnx`,highlighted:`Validating ONNX model...
        -[\u2713] ONNX model output names match reference model ({<span class="hljs-string">&#x27;last_hidden_state&#x27;</span>})
        - Validating ONNX Model output <span class="hljs-string">&quot;last_hidden_state&quot;</span>:
                -[\u2713] (2, 8, 768) matches (2, 8, 768)
                -[\u2713] all values close (atol: 1e-05)
All good, model saved at: onnx/model.onnx`}}),Kt=new z({props:{code:`from transformers import AutoTokenizer
from onnxruntime import InferenceSession

tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased")
session = InferenceSession("onnx/model.onnx")
# ONNX Runtime expects NumPy arrays as input
inputs = tokenizer("Using DistilBERT with ONNX Runtime!", return_tensors="np")
outputs = session.run(output_names=["last_hidden_state"], input_feed=dict(inputs))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> onnxruntime <span class="hljs-keyword">import</span> InferenceSession

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>session = InferenceSession(<span class="hljs-string">&quot;onnx/model.onnx&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># ONNX Runtime expects NumPy arrays as input</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Using DistilBERT with ONNX Runtime!&quot;</span>, return_tensors=<span class="hljs-string">&quot;np&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = session.run(output_names=[<span class="hljs-string">&quot;last_hidden_state&quot;</span>], input_feed=<span class="hljs-built_in">dict</span>(inputs))`}}),Ut=new z({props:{code:`from transformers.models.distilbert import DistilBertConfig, DistilBertOnnxConfig

config = DistilBertConfig()
onnx_config = DistilBertOnnxConfig(config)
print(list(onnx_config.outputs.keys()))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.models.distilbert <span class="hljs-keyword">import</span> DistilBertConfig, DistilBertOnnxConfig

<span class="hljs-meta">&gt;&gt;&gt; </span>config = DistilBertConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_config = DistilBertOnnxConfig(config)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(onnx_config.outputs.keys()))
[<span class="hljs-string">&quot;last_hidden_state&quot;</span>]`}}),Gt=new z({props:{code:"python -m transformers.onnx --model=keras-io/transformers-qa onnx/",highlighted:"python -m transformers.onnx --model=keras-io/transformers-qa onnx/"}}),Ye=new Y1({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[tE],pytorch:[Z1]},$$scope:{ctx:M}}}),Jt=new B({}),io=new z({props:{code:`from transformers.onnx.features import FeaturesManager

distilbert_features = list(FeaturesManager.get_supported_features_for_model_type("distilbert").keys())
print(distilbert_features)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.onnx.features <span class="hljs-keyword">import</span> FeaturesManager

<span class="hljs-meta">&gt;&gt;&gt; </span>distilbert_features = <span class="hljs-built_in">list</span>(FeaturesManager.get_supported_features_for_model_type(<span class="hljs-string">&quot;distilbert&quot;</span>).keys())
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(distilbert_features)
[<span class="hljs-string">&quot;default&quot;</span>, <span class="hljs-string">&quot;masked-lm&quot;</span>, <span class="hljs-string">&quot;causal-lm&quot;</span>, <span class="hljs-string">&quot;sequence-classification&quot;</span>, <span class="hljs-string">&quot;token-classification&quot;</span>, <span class="hljs-string">&quot;question-answering&quot;</span>]`}}),po=new z({props:{code:`python -m transformers.onnx --model=distilbert-base-uncased-finetuned-sst-2-english \\
                            --feature=sequence-classification onnx/`,highlighted:`python -m transformers.onnx --model=distilbert-base-uncased-finetuned-sst-2-english \\
                            --feature=sequence-classification onnx/`}}),ho=new z({props:{code:`Validating ONNX model...
        -[\u2713] ONNX model output names match reference model ({'logits'})
        - Validating ONNX Model output "logits":
                -[\u2713] (2, 2) matches (2, 2)
                -[\u2713] all values close (atol: 1e-05)
All good, model saved at: onnx/model.onnx`,highlighted:`Validating ONNX model...
        -[\u2713] ONNX model output names match reference model ({<span class="hljs-string">&#x27;logits&#x27;</span>})
        - Validating ONNX Model output <span class="hljs-string">&quot;logits&quot;</span>:
                -[\u2713] (2, 2) matches (2, 2)
                -[\u2713] all values close (atol: 1e-05)
All good, model saved at: onnx/model.onnx`}}),ot=new cs({props:{$$slots:{default:[oE]},$$scope:{ctx:M}}}),fo=new B({}),co=new B({}),at=new cs({props:{$$slots:{default:[nE]},$$scope:{ctx:M}}}),uo=new z({props:{code:`from typing import Mapping, OrderedDict
from transformers.onnx import OnnxConfig


class DistilBertOnnxConfig(OnnxConfig):
    @property
    def inputs(self) -> Mapping[str, Mapping[int, str]]:
        return OrderedDict(
            [
                ("input_ids", {0: "batch", 1: "sequence"}),
                ("attention_mask", {0: "batch", 1: "sequence"}),
            ]
        )`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> Mapping, OrderedDict
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.onnx <span class="hljs-keyword">import</span> OnnxConfig


<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">DistilBertOnnxConfig</span>(<span class="hljs-title class_ inherited__">OnnxConfig</span>):
<span class="hljs-meta">... </span>    @<span class="hljs-built_in">property</span>
<span class="hljs-meta">... </span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inputs</span>(<span class="hljs-params">self</span>) -&gt; Mapping[<span class="hljs-built_in">str</span>, Mapping[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">str</span>]]:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> OrderedDict(
<span class="hljs-meta">... </span>            [
<span class="hljs-meta">... </span>                (<span class="hljs-string">&quot;input_ids&quot;</span>, {<span class="hljs-number">0</span>: <span class="hljs-string">&quot;batch&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;sequence&quot;</span>}),
<span class="hljs-meta">... </span>                (<span class="hljs-string">&quot;attention_mask&quot;</span>, {<span class="hljs-number">0</span>: <span class="hljs-string">&quot;batch&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;sequence&quot;</span>}),
<span class="hljs-meta">... </span>            ]
<span class="hljs-meta">... </span>        )`}}),lt=new cs({props:{$$slots:{default:[sE]},$$scope:{ctx:M}}}),mo=new z({props:{code:`from transformers import AutoConfig

config = AutoConfig.from_pretrained("distilbert-base-uncased")
onnx_config = DistilBertOnnxConfig(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_config = DistilBertOnnxConfig(config)`}}),go=new z({props:{code:"print(onnx_config.default_onnx_opset)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(onnx_config.default_onnx_opset)
<span class="hljs-number">11</span>`}}),_o=new z({props:{code:"print(onnx_config.outputs)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(onnx_config.outputs)
OrderedDict([(<span class="hljs-string">&quot;last_hidden_state&quot;</span>, {<span class="hljs-number">0</span>: <span class="hljs-string">&quot;batch&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;sequence&quot;</span>})])`}}),vo=new z({props:{code:`from transformers import AutoConfig

config = AutoConfig.from_pretrained("distilbert-base-uncased")
onnx_config_for_seq_clf = DistilBertOnnxConfig(config, task="sequence-classification")
print(onnx_config_for_seq_clf.outputs)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_config_for_seq_clf = DistilBertOnnxConfig(config, task=<span class="hljs-string">&quot;sequence-classification&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(onnx_config_for_seq_clf.outputs)
OrderedDict([(<span class="hljs-string">&#x27;logits&#x27;</span>, {<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;batch&#x27;</span>})])`}}),it=new cs({props:{$$slots:{default:[aE]},$$scope:{ctx:M}}}),wo=new B({}),Eo=new z({props:{code:`from pathlib import Path
from transformers.onnx import export
from transformers import AutoTokenizer, AutoModel

onnx_path = Path("model.onnx")
model_ckpt = "distilbert-base-uncased"
base_model = AutoModel.from_pretrained(model_ckpt)
tokenizer = AutoTokenizer.from_pretrained(model_ckpt)

onnx_inputs, onnx_outputs = export(tokenizer, base_model, onnx_config, onnx_config.default_onnx_opset, onnx_path)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.onnx <span class="hljs-keyword">import</span> export
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_path = Path(<span class="hljs-string">&quot;model.onnx&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model_ckpt = <span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>base_model = AutoModel.from_pretrained(model_ckpt)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_ckpt)

<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_inputs, onnx_outputs = export(tokenizer, base_model, onnx_config, onnx_config.default_onnx_opset, onnx_path)`}}),$o=new z({props:{code:`import onnx

onnx_model = onnx.load("model.onnx")
onnx.checker.check_model(onnx_model)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> onnx

<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_model = onnx.load(<span class="hljs-string">&quot;model.onnx&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx.checker.check_model(onnx_model)`}}),dt=new cs({props:{$$slots:{default:[rE]},$$scope:{ctx:M}}}),bo=new B({}),yo=new z({props:{code:`from transformers.onnx import validate_model_outputs

validate_model_outputs(
    onnx_config, tokenizer, base_model, onnx_path, onnx_outputs, onnx_config.atol_for_validation
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.onnx <span class="hljs-keyword">import</span> validate_model_outputs

<span class="hljs-meta">&gt;&gt;&gt; </span>validate_model_outputs(
<span class="hljs-meta">... </span>    onnx_config, tokenizer, base_model, onnx_path, onnx_outputs, onnx_config.atol_for_validation
<span class="hljs-meta">... </span>)`}}),xo=new B({}),Oo=new B({}),gt=new cs({props:{$$slots:{default:[lE]},$$scope:{ctx:M}}}),Ao=new B({}),Co=new B({}),Do=new B({}),Po=new B({}),So=new B({}),qo=new z({props:{code:`from transformers import BertModel, BertTokenizer, BertConfig
import torch

enc = BertTokenizer.from_pretrained("bert-base-uncased")

# Tokenizing input text
text = "[CLS] Who was Jim Henson ? [SEP] Jim Henson was a puppeteer [SEP]"
tokenized_text = enc.tokenize(text)

# Masking one of the input tokens
masked_index = 8
tokenized_text[masked_index] = "[MASK]"
indexed_tokens = enc.convert_tokens_to_ids(tokenized_text)
segments_ids = [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1]

# Creating a dummy input
tokens_tensor = torch.tensor([indexed_tokens])
segments_tensors = torch.tensor([segments_ids])
dummy_input = [tokens_tensor, segments_tensors]

# Initializing the model with the torchscript flag
# Flag set to True even though it is not necessary as this model does not have an LM Head.
config = BertConfig(
    vocab_size_or_config_json_file=32000,
    hidden_size=768,
    num_hidden_layers=12,
    num_attention_heads=12,
    intermediate_size=3072,
    torchscript=True,
)

# Instantiating the model
model = BertModel(config)

# The model needs to be in evaluation mode
model.eval()

# If you are instantiating the model with *from_pretrained* you can also easily set the TorchScript flag
model = BertModel.from_pretrained("bert-base-uncased", torchscript=True)

# Creating the trace
traced_model = torch.jit.trace(model, [tokens_tensor, segments_tensors])
torch.jit.save(traced_model, "traced_bert.pt")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertModel, BertTokenizer, BertConfig
<span class="hljs-keyword">import</span> torch

enc = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-comment"># Tokenizing input text</span>
text = <span class="hljs-string">&quot;[CLS] Who was Jim Henson ? [SEP] Jim Henson was a puppeteer [SEP]&quot;</span>
tokenized_text = enc.tokenize(text)

<span class="hljs-comment"># Masking one of the input tokens</span>
masked_index = <span class="hljs-number">8</span>
tokenized_text[masked_index] = <span class="hljs-string">&quot;[MASK]&quot;</span>
indexed_tokens = enc.convert_tokens_to_ids(tokenized_text)
segments_ids = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]

<span class="hljs-comment"># Creating a dummy input</span>
tokens_tensor = torch.tensor([indexed_tokens])
segments_tensors = torch.tensor([segments_ids])
dummy_input = [tokens_tensor, segments_tensors]

<span class="hljs-comment"># Initializing the model with the torchscript flag</span>
<span class="hljs-comment"># Flag set to True even though it is not necessary as this model does not have an LM Head.</span>
config = BertConfig(
    vocab_size_or_config_json_file=<span class="hljs-number">32000</span>,
    hidden_size=<span class="hljs-number">768</span>,
    num_hidden_layers=<span class="hljs-number">12</span>,
    num_attention_heads=<span class="hljs-number">12</span>,
    intermediate_size=<span class="hljs-number">3072</span>,
    torchscript=<span class="hljs-literal">True</span>,
)

<span class="hljs-comment"># Instantiating the model</span>
model = BertModel(config)

<span class="hljs-comment"># The model needs to be in evaluation mode</span>
model.<span class="hljs-built_in">eval</span>()

<span class="hljs-comment"># If you are instantiating the model with *from_pretrained* you can also easily set the TorchScript flag</span>
model = BertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, torchscript=<span class="hljs-literal">True</span>)

<span class="hljs-comment"># Creating the trace</span>
traced_model = torch.jit.trace(model, [tokens_tensor, segments_tensors])
torch.jit.save(traced_model, <span class="hljs-string">&quot;traced_bert.pt&quot;</span>)`}}),zo=new B({}),Io=new z({props:{code:`loaded_model = torch.jit.load("traced_bert.pt")
loaded_model.eval()

all_encoder_layers, pooled_output = loaded_model(*dummy_input)`,highlighted:`loaded_model = torch.jit.load(<span class="hljs-string">&quot;traced_bert.pt&quot;</span>)
loaded_model.<span class="hljs-built_in">eval</span>()

all_encoder_layers, pooled_output = loaded_model(*dummy_input)`}}),Mo=new B({}),Bo=new z({props:{code:"traced_model(tokens_tensor, segments_tensors)",highlighted:"traced_model(tokens_tensor, segments_tensors)"}}),Lo=new B({}),Ko=new B({}),Qo=new B({}),tn=new B({}),nn=new z({props:{code:`from transformers import BertModel, BertTokenizer, BertConfig
import torch
import torch.neuron`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertModel, BertTokenizer, BertConfig
<span class="hljs-keyword">import</span> torch
<span class="hljs-keyword">import</span> torch.neuron`}}),sn=new z({props:{code:"torch.jit.trace(model, [tokens_tensor, segments_tensors])",highlighted:"torch.jit.trace(model, [tokens_tensor, segments_tensors])"}}),an=new z({props:{code:"torch.neuron.trace(model, [token_tensor, segments_tensors])",highlighted:"torch.neuron.trace(model, [token_tensor, segments_tensors])"}}),{c(){c=n("meta"),y=d(),u=n("h1"),b=n("a"),T=n("span"),g(x.$$.fragment),P=d(),D=n("span"),A=r("Exporting \u{1F917} Transformers Models"),N=d(),S=n("p"),C=r(`If you need to deploy \u{1F917} Transformers models in production environments, we
recommend exporting them to a serialized format that can be loaded and executed
on specialized runtimes and hardware. In this guide, we\u2019ll show you how to
export \u{1F917} Transformers models in two widely used formats: ONNX and TorchScript.`),q=d(),m=n("p"),j=r(`Once exported, a model can optimized for inference via techniques such as
quantization and pruning. If you are interested in optimizing your models to run
with maximum efficiency, check out the `),L=n("a"),V=r(`\u{1F917} Optimum
library`),we=r("."),He=d(),G=n("h2"),H=n("a"),Ee=n("span"),g(se.$$.fragment),$e=d(),I=n("span"),dn=r("ONNX"),It=d(),J=n("p"),hn=r("The "),ae=n("a"),fn=r("ONNX (Open Neural Network eXchange)"),cn=r(` project is an open
standard that defines a common set of operators and a common file format to
represent deep learning models in a wide variety of frameworks, including
PyTorch and TensorFlow. When a model is exported to the ONNX format, these
operators are used to construct a computational graph (often called an
`),us=n("em"),fd=r("intermediate representation"),cd=r(`) which represents the flow of data through the
neural network.`),rl=d(),un=n("p"),ud=r(`By exposing a graph with standardized operators and data types, ONNX makes it
easy to switch between frameworks. For example, a model trained in PyTorch can
be exported to ONNX format and then imported in TensorFlow (and vice versa).`),ll=d(),We=n("p"),md=r("\u{1F917} Transformers provides a "),ms=n("code"),gd=r("transformers.onnx"),_d=r(` package that enables you to
convert model checkpoints to an ONNX graph by leveraging configuration objects.
These configuration objects come ready made for a number of model architectures,
and are designed to be easily extendable to other architectures.`),il=d(),mn=n("p"),vd=r("Ready-made configurations include the following architectures:"),pl=d(),k=n("ul"),gs=n("li"),wd=r("ALBERT"),Ed=d(),_s=n("li"),$d=r("BART"),bd=d(),vs=n("li"),yd=r("BERT"),xd=d(),ws=n("li"),kd=r("CamemBERT"),Td=d(),Es=n("li"),Od=r("Data2VecText"),Nd=d(),$s=n("li"),jd=r("DistilBERT"),Ad=d(),bs=n("li"),Cd=r("ELECTRA"),Dd=d(),ys=n("li"),Pd=r("GPT Neo"),Sd=d(),xs=n("li"),qd=r("I-BERT"),zd=d(),ks=n("li"),Id=r("LayoutLM"),Md=d(),Ts=n("li"),Bd=r("M2M100"),Ld=d(),Os=n("li"),Xd=r("Marian"),Fd=d(),Ns=n("li"),Rd=r("mBART"),Hd=d(),js=n("li"),Wd=r("OpenAI GPT-2"),Kd=d(),As=n("li"),Ud=r("PLBart"),Vd=d(),Cs=n("li"),Gd=r("RoBERTa"),Jd=d(),Ds=n("li"),Yd=r("T5"),Qd=d(),Ps=n("li"),Zd=r("ViT"),eh=d(),Ss=n("li"),th=r("XLM-RoBERTa"),oh=d(),qs=n("li"),nh=r("XLM-RoBERTa-XL"),dl=d(),gn=n("p"),sh=r("In the next two sections, we\u2019ll show you how to:"),hl=d(),Ke=n("ul"),Mt=n("li"),ah=r("Export a supported model using the "),zs=n("code"),rh=r("transformers.onnx"),lh=r(" package."),ih=d(),Is=n("li"),ph=r("Export a custom model for an unsupported architecture."),fl=d(),be=n("h3"),Ue=n("a"),Ms=n("span"),g(Bt.$$.fragment),dh=d(),Bs=n("span"),hh=r("Exporting a model to ONNX"),cl=d(),_n=n("p"),fh=r(`To export a \u{1F917} Transformers model to ONNX, you\u2019ll first need to install some
extra dependencies:`),ul=d(),g(Lt.$$.fragment),ml=d(),Ve=n("p"),ch=r("The "),Ls=n("code"),uh=r("transformers.onnx"),mh=r(" package can then be used as a Python module:"),gl=d(),g(Xt.$$.fragment),_l=d(),vn=n("p"),gh=r("Exporting a checkpoint using a ready-made configuration can be done as follows:"),vl=d(),g(Ft.$$.fragment),wl=d(),wn=n("p"),_h=r("which should show the following logs:"),El=d(),g(Rt.$$.fragment),$l=d(),re=n("p"),vh=r("This exports an ONNX graph of the checkpoint defined by the "),Xs=n("code"),wh=r("--model"),Eh=r(` argument.
In this example it is `),Fs=n("code"),$h=r("distilbert-base-uncased"),bh=r(`, but it can be any checkpoint on
the Hugging Face Hub or one that\u2019s stored locally.`),bl=d(),Q=n("p"),yh=r("The resulting "),Rs=n("code"),xh=r("model.onnx"),kh=r(" file can then be run on one of the "),Ht=n("a"),Th=r(`many
accelerators`),Oh=r(` that support the
ONNX standard. For example, we can load and run the model with `),Wt=n("a"),Nh=r(`ONNX
Runtime`),jh=r(" as follows:"),yl=d(),g(Kt.$$.fragment),xl=d(),Ge=n("p"),Ah=r("The required output names (i.e. "),Hs=n("code"),Ch=r('["last_hidden_state"]'),Dh=r(`) can be obtained by
taking a look at the ONNX configuration of each model. For example, for
DistilBERT we have:`),kl=d(),g(Ut.$$.fragment),Tl=d(),Je=n("p"),Ph=r(`The process is identical for TensorFlow checkpoints on the Hub. For example, we
can export a pure TensorFlow checkpoint from the `),Vt=n("a"),Sh=r(`Keras
organization`),qh=r(" as follows:"),Ol=d(),g(Gt.$$.fragment),Nl=d(),En=n("p"),zh=r(`To export a model that\u2019s stored locally, you\u2019ll need to have the model\u2019s weights
and tokenizer files stored in a directory. For example, we can load and save a
checkpoint as follows:`),jl=d(),g(Ye.$$.fragment),Al=d(),ye=n("h3"),Qe=n("a"),Ws=n("span"),g(Jt.$$.fragment),Ih=d(),Ks=n("span"),Mh=r("Selecting features for different model topologies"),Cl=d(),Ze=n("p"),Bh=r("Each ready-made configuration comes with a set of "),Us=n("em"),Lh=r("features"),Xh=r(` that enable you to
export models for different types of topologies or tasks. As shown in the table
below, each feature is associated with a different auto class:`),Dl=d(),et=n("table"),Vs=n("thead"),Yt=n("tr"),Gs=n("th"),Fh=r("Feature"),Rh=d(),Js=n("th"),Hh=r("Auto Class"),Wh=d(),X=n("tbody"),Qt=n("tr"),Zt=n("td"),Ys=n("code"),Kh=r("causal-lm"),Uh=r(", "),Qs=n("code"),Vh=r("causal-lm-with-past"),Gh=d(),Zs=n("td"),ea=n("code"),Jh=r("AutoModelForCausalLM"),Yh=d(),eo=n("tr"),to=n("td"),ta=n("code"),Qh=r("default"),Zh=r(", "),oa=n("code"),ef=r("default-with-past"),tf=d(),na=n("td"),sa=n("code"),of=r("AutoModel"),nf=d(),oo=n("tr"),aa=n("td"),ra=n("code"),sf=r("masked-lm"),af=d(),la=n("td"),ia=n("code"),rf=r("AutoModelForMaskedLM"),lf=d(),no=n("tr"),pa=n("td"),da=n("code"),pf=r("question-answering"),df=d(),ha=n("td"),fa=n("code"),hf=r("AutoModelForQuestionAnswering"),ff=d(),so=n("tr"),ao=n("td"),ca=n("code"),cf=r("seq2seq-lm"),uf=r(", "),ua=n("code"),mf=r("seq2seq-lm-with-past"),gf=d(),ma=n("td"),ga=n("code"),_f=r("AutoModelForSeq2SeqLM"),vf=d(),ro=n("tr"),_a=n("td"),va=n("code"),wf=r("sequence-classification"),Ef=d(),wa=n("td"),Ea=n("code"),$f=r("AutoModelForSequenceClassification"),bf=d(),lo=n("tr"),$a=n("td"),ba=n("code"),yf=r("token-classification"),xf=d(),ya=n("td"),xa=n("code"),kf=r("AutoModelForTokenClassification"),Pl=d(),tt=n("p"),Tf=r(`For each configuration, you can find the list of supported features via the
`),ka=n("code"),Of=r("FeaturesManager"),Nf=r(". For example, for DistilBERT we have:"),Sl=d(),g(io.$$.fragment),ql=d(),le=n("p"),jf=r("You can then pass one of these features to the "),Ta=n("code"),Af=r("--feature"),Cf=r(` argument in the
`),Oa=n("code"),Df=r("transformers.onnx"),Pf=r(` package. For example, to export a text-classification model
we can pick a fine-tuned model from the Hub and run:`),zl=d(),g(po.$$.fragment),Il=d(),$n=n("p"),Sf=r("which will display the following logs:"),Ml=d(),g(ho.$$.fragment),Bl=d(),Z=n("p"),qf=r(`Notice that in this case, the output names from the fine-tuned model are
`),Na=n("code"),zf=r("logits"),If=r(" instead of the "),ja=n("code"),Mf=r("last_hidden_state"),Bf=r(` we saw with the
`),Aa=n("code"),Lf=r("distilbert-base-uncased"),Xf=r(` checkpoint earlier. This is expected since the
fine-tuned model has a sequence classification head.`),Ll=d(),g(ot.$$.fragment),Xl=d(),xe=n("h3"),nt=n("a"),Ca=n("span"),g(fo.$$.fragment),Ff=d(),Da=n("span"),Rf=r("Exporting a model for an unsupported architecture"),Fl=d(),bn=n("p"),Hf=r(`If you wish to export a model whose architecture is not natively supported by
the library, there are three main steps to follow:`),Rl=d(),ie=n("ol"),Pa=n("li"),Wf=r("Implement a custom ONNX configuration."),Kf=d(),Sa=n("li"),Uf=r("Export the model to ONNX."),Vf=d(),qa=n("li"),Gf=r("Validate the outputs of the PyTorch and exported models."),Hl=d(),yn=n("p"),Jf=r(`In this section, we\u2019ll look at how DistilBERT was implemented to show what\u2019s
involved with each step.`),Wl=d(),ke=n("h4"),st=n("a"),za=n("span"),g(co.$$.fragment),Yf=d(),Ia=n("span"),Qf=r("Implementing a custom ONNX configuration"),Kl=d(),xn=n("p"),Zf=r(`Let\u2019s start with the ONNX configuration object. We provide three abstract
classes that you should inherit from, depending on the type of model
architecture you wish to export:`),Ul=d(),pe=n("ul"),kn=n("li"),ec=r("Encoder-based models inherit from "),Tn=n("a"),tc=r("OnnxConfig"),oc=d(),On=n("li"),nc=r("Decoder-based models inherit from "),Nn=n("a"),sc=r("OnnxConfigWithPast"),ac=d(),jn=n("li"),rc=r("Encoder-decoder models inherit from "),An=n("a"),lc=r("OnnxSeq2SeqConfigWithPast"),Vl=d(),g(at.$$.fragment),Gl=d(),rt=n("p"),ic=r(`Since DistilBERT is an encoder-based model, its configuration inherits from
`),Ma=n("code"),pc=r("OnnxConfig"),dc=r(":"),Jl=d(),g(uo.$$.fragment),Yl=d(),W=n("p"),hc=r("Every configuration object must implement the "),Ba=n("code"),fc=r("inputs"),cc=r(` property and return a
mapping, where each key corresponds to an expected input, and each value
indicates the axis of that input. For DistilBERT, we can see that two inputs are
required: `),La=n("code"),uc=r("input_ids"),mc=r(" and "),Xa=n("code"),gc=r("attention_mask"),_c=r(`. These inputs have the same shape of
`),Fa=n("code"),vc=r("(batch_size, sequence_length)"),wc=r(` which is why we see the same axes used in the
configuration.`),Ql=d(),g(lt.$$.fragment),Zl=d(),Cn=n("p"),Ec=r(`Once you have implemented an ONNX configuration, you can instantiate it by
providing the base model\u2019s configuration as follows:`),ei=d(),g(mo.$$.fragment),ti=d(),Dn=n("p"),$c=r(`The resulting object has several useful properties. For example you can view the
ONNX operator set that will be used during the export:`),oi=d(),g(go.$$.fragment),ni=d(),Pn=n("p"),bc=r("You can also view the outputs associated with the model as follows:"),si=d(),g(_o.$$.fragment),ai=d(),K=n("p"),yc=r(`Notice that the outputs property follows the same structure as the inputs; it
returns an `),Ra=n("code"),xc=r("OrderedDict"),kc=r(` of named outputs and their shapes. The output structure
is linked to the choice of feature that the configuration is initialised with.
By default, the ONNX configuration is initialized with the `),Ha=n("code"),Tc=r("default"),Oc=r(` feature
that corresponds to exporting a model loaded with the `),Wa=n("code"),Nc=r("AutoModel"),jc=r(` class. If you
want to export a different model topology, just provide a different feature to
the `),Ka=n("code"),Ac=r("task"),Cc=r(` argument when you initialize the ONNX configuration. For example, if
we wished to export DistilBERT with a sequence classification head, we could
use:`),ri=d(),g(vo.$$.fragment),li=d(),g(it.$$.fragment),ii=d(),Te=n("h4"),pt=n("a"),Ua=n("span"),g(wo.$$.fragment),Dc=d(),Va=n("span"),Pc=r("Exporting the model"),pi=d(),de=n("p"),Sc=r(`Once you have implemented the ONNX configuration, the next step is to export the
model. Here we can use the `),Ga=n("code"),qc=r("export()"),zc=r(` function provided by the
`),Ja=n("code"),Ic=r("transformers.onnx"),Mc=r(` package. This function expects the ONNX configuration, along
with the base model and tokenizer, and the path to save the exported file:`),di=d(),g(Eo.$$.fragment),hi=d(),F=n("p"),Bc=r("The "),Ya=n("code"),Lc=r("onnx_inputs"),Xc=r(" and "),Qa=n("code"),Fc=r("onnx_outputs"),Rc=r(" returned by the "),Za=n("code"),Hc=r("export()"),Wc=r(` function are
lists of the keys defined in the `),er=n("code"),Kc=r("inputs"),Uc=r(" and "),tr=n("code"),Vc=r("outputs"),Gc=r(` properties of the
configuration. Once the model is exported, you can test that the model is well
formed as follows:`),fi=d(),g($o.$$.fragment),ci=d(),g(dt.$$.fragment),ui=d(),Oe=n("h4"),ht=n("a"),or=n("span"),g(bo.$$.fragment),Jc=d(),nr=n("span"),Yc=r("Validating the model outputs"),mi=d(),he=n("p"),Qc=r(`The final step is to validate that the outputs from the base and exported model
agree within some absolute tolerance. Here we can use the
`),sr=n("code"),Zc=r("validate_model_outputs()"),eu=r(" function provided by the "),ar=n("code"),tu=r("transformers.onnx"),ou=r(` package
as follows:`),gi=d(),g(yo.$$.fragment),_i=d(),ft=n("p"),nu=r("This function uses the "),rr=n("code"),su=r("OnnxConfig.generate_dummy_inputs()"),au=r(` method to generate
inputs for the base and exported model, and the absolute tolerance can be
defined in the configuration. We generally find numerical agreement in the 1e-6
to 1e-4 range, although anything smaller than 1e-3 is likely to be OK.`),vi=d(),Ne=n("h3"),ct=n("a"),lr=n("span"),g(xo.$$.fragment),ru=d(),ir=n("span"),lu=r("Contributing a new configuration to \u{1F917} Transformers"),wi=d(),Sn=n("p"),iu=r(`We are looking to expand the set of ready-made configurations and welcome
contributions from the community! If you would like to contribute your addition
to the library, you will need to:`),Ei=d(),fe=n("ul"),ko=n("li"),pu=r("Implement the ONNX configuration in the corresponding "),pr=n("code"),du=r("configuration_<model_name>.py"),hu=r(`
file`),fu=d(),qn=n("li"),cu=r("Include the model architecture and corresponding features in "),dr=n("code"),uu=r("FeatureManager"),mu=d(),zn=n("li"),gu=r("Add your model architecture to the tests in "),hr=n("code"),_u=r("test_onnx_v2.py"),$i=d(),ut=n("p"),vu=r("Check out how the configuration for "),To=n("a"),wu=r(`IBERT was
contributed`),Eu=r(` to
get an idea of what\u2019s involved.`),bi=d(),je=n("h2"),mt=n("a"),fr=n("span"),g(Oo.$$.fragment),$u=d(),cr=n("span"),bu=r("TorchScript"),yi=d(),g(gt.$$.fragment),xi=d(),_t=n("p"),yu=r(`According to Pytorch\u2019s documentation: \u201CTorchScript is a way to create serializable and optimizable models from PyTorch
code\u201D. Pytorch\u2019s two modules `),No=n("a"),xu=r("JIT and TRACE"),ku=r(` allow the developer to export
their model to be re-used in other programs, such as efficiency-oriented C++ programs.`),ki=d(),In=n("p"),Tu=r(`We have provided an interface that allows the export of \u{1F917} Transformers models to TorchScript so that they can be reused
in a different environment than a Pytorch-based python program. Here we explain how to export and use our models using
TorchScript.`),Ti=d(),Mn=n("p"),Ou=r("Exporting a model requires two things:"),Oi=d(),vt=n("ul"),ur=n("li"),Nu=r("a forward pass with dummy inputs."),ju=d(),jo=n("li"),Au=r("model instantiation with the "),mr=n("code"),Cu=r("torchscript"),Du=r(" flag."),Ni=d(),Bn=n("p"),Pu=r("These necessities imply several things developers should be careful about. These are detailed below."),ji=d(),Ae=n("h3"),wt=n("a"),gr=n("span"),g(Ao.$$.fragment),Su=d(),_r=n("span"),qu=r("Implications"),Ai=d(),Ce=n("h3"),Et=n("a"),vr=n("span"),g(Co.$$.fragment),zu=d(),wr=n("span"),Iu=r("TorchScript flag and tied weights"),Ci=d(),ce=n("p"),Mu=r(`This flag is necessary because most of the language models in this repository have tied weights between their
`),Er=n("code"),Bu=r("Embedding"),Lu=r(" layer and their "),$r=n("code"),Xu=r("Decoding"),Fu=r(` layer. TorchScript does not allow the export of models that have tied
weights, therefore it is necessary to untie and clone the weights beforehand.`),Di=d(),ee=n("p"),Ru=r("This implies that models instantiated with the "),br=n("code"),Hu=r("torchscript"),Wu=r(" flag have their "),yr=n("code"),Ku=r("Embedding"),Uu=r(" layer and "),xr=n("code"),Vu=r("Decoding"),Gu=r(`
layer separate, which means that they should not be trained down the line. Training would de-synchronize the two
layers, leading to unexpected results.`),Pi=d(),$t=n("p"),Ju=r(`This is not the case for models that do not have a Language Model head, as those do not have tied weights. These models
can be safely exported without the `),kr=n("code"),Yu=r("torchscript"),Qu=r(" flag."),Si=d(),De=n("h3"),bt=n("a"),Tr=n("span"),g(Do.$$.fragment),Zu=d(),Or=n("span"),em=r("Dummy inputs and standard lengths"),qi=d(),Ln=n("p"),tm=r(`The dummy inputs are used to do a model forward pass. While the inputs\u2019 values are propagating through the layers,
Pytorch keeps track of the different operations executed on each tensor. These recorded operations are then used to
create the \u201Ctrace\u201D of the model.`),zi=d(),Xn=n("p"),om=r(`The trace is created relatively to the inputs\u2019 dimensions. It is therefore constrained by the dimensions of the dummy
input, and will not work for any other sequence length or batch size. When trying with a different size, an error such
as:`),Ii=d(),Fn=n("p"),Nr=n("code"),nm=r("The expanded size of the tensor (3) must match the existing size (7) at non-singleton dimension 2"),Mi=d(),Rn=n("p"),sm=r(`will be raised. It is therefore recommended to trace the model with a dummy input size at least as large as the largest
input that will be fed to the model during inference. Padding can be performed to fill the missing values. As the model
will have been traced with a large input size however, the dimensions of the different matrix will be large as well,
resulting in more calculations.`),Bi=d(),Hn=n("p"),am=r(`It is recommended to be careful of the total number of operations done on each input and to follow performance closely
when exporting varying sequence-length models.`),Li=d(),Pe=n("h3"),yt=n("a"),jr=n("span"),g(Po.$$.fragment),rm=d(),Ar=n("span"),lm=r("Using TorchScript in Python"),Xi=d(),Wn=n("p"),im=r("Below is an example, showing how to save, load models as well as how to use the trace for inference."),Fi=d(),Se=n("h4"),xt=n("a"),Cr=n("span"),g(So.$$.fragment),pm=d(),Dr=n("span"),dm=r("Saving a model"),Ri=d(),Y=n("p"),hm=r("This snippet shows how to use TorchScript to export a "),Pr=n("code"),fm=r("BertModel"),cm=r(". Here the "),Sr=n("code"),um=r("BertModel"),mm=r(` is instantiated according
to a `),qr=n("code"),gm=r("BertConfig"),_m=r(" class and then saved to disk under the filename "),zr=n("code"),vm=r("traced_bert.pt"),Hi=d(),g(qo.$$.fragment),Wi=d(),qe=n("h4"),kt=n("a"),Ir=n("span"),g(zo.$$.fragment),wm=d(),Mr=n("span"),Em=r("Loading a model"),Ki=d(),te=n("p"),$m=r("This snippet shows how to load the "),Br=n("code"),bm=r("BertModel"),ym=r(" that was previously saved to disk under the name "),Lr=n("code"),xm=r("traced_bert.pt"),km=r(`.
We are re-using the previously initialised `),Xr=n("code"),Tm=r("dummy_input"),Om=r("."),Ui=d(),g(Io.$$.fragment),Vi=d(),ze=n("h4"),Tt=n("a"),Fr=n("span"),g(Mo.$$.fragment),Nm=d(),Rr=n("span"),jm=r("Using a traced model for inference"),Gi=d(),Ot=n("p"),Am=r("Using the traced model for inference is as simple as using its "),Hr=n("code"),Cm=r("__call__"),Dm=r(" dunder method:"),Ji=d(),g(Bo.$$.fragment),Yi=d(),Ie=n("h3"),Nt=n("a"),Wr=n("span"),g(Lo.$$.fragment),Pm=d(),Kr=n("span"),Sm=r("Deploying HuggingFace TorchScript models on AWS using the Neuron SDK"),Qi=d(),ue=n("p"),qm=r("AWS introduced the "),Xo=n("a"),zm=r("Amazon EC2 Inf1"),Im=r(`
instance family for low cost, high performance machine learning inference in the cloud.
The Inf1 instances are powered by the AWS Inferentia chip, a custom-built hardware accelerator,
specializing in deep learning inferencing workloads.
`),Fo=n("a"),Mm=r("AWS Neuron"),Bm=r(`
is the SDK for Inferentia that supports tracing and optimizing transformers models for
deployment on Inf1. The Neuron SDK provides:`),Zi=d(),me=n("ol"),Ur=n("li"),Lm=r("Easy-to-use API with one line of code change to trace and optimize a TorchScript model for inference in the cloud."),Xm=d(),Kn=n("li"),Fm=r("Out of the box performance optimizations for "),Ro=n("a"),Rm=r("improved cost-performance"),Hm=d(),Me=n("li"),Wm=r("Support for HuggingFace transformers models built with either "),Ho=n("a"),Km=r("PyTorch"),Um=r(`
or `),Wo=n("a"),Vm=r("TensorFlow"),Gm=r("."),ep=d(),Be=n("h4"),jt=n("a"),Vr=n("span"),g(Ko.$$.fragment),Jm=d(),Gr=n("span"),Ym=r("Implications"),tp=d(),R=n("p"),Qm=r("Transformers Models based on the "),Uo=n("a"),Zm=r("BERT (Bidirectional Encoder Representations from Transformers)"),eg=r(`
architecture, or its variants such as `),Vo=n("a"),tg=r("distilBERT"),og=r(`
and `),Go=n("a"),ng=r("roBERTa"),sg=r(`
will run best on Inf1 for non-generative tasks such as Extractive Question Answering,
Sequence Classification, Token Classification. Alternatively, text generation
tasks can be adapted to run on Inf1, according to this `),Jo=n("a"),ag=r("AWS Neuron MarianMT tutorial"),rg=r(`.
More information about models that can be converted out of the box on Inferentia can be
found in the `),Yo=n("a"),lg=r("Model Architecture Fit section of the Neuron documentation"),ig=r("."),op=d(),Le=n("h4"),At=n("a"),Jr=n("span"),g(Qo.$$.fragment),pg=d(),Yr=n("span"),dg=r("Dependencies"),np=d(),Un=n("p"),hg=r("Using AWS Neuron to convert models requires the following dependencies and environment:"),sp=d(),Vn=n("ul"),Xe=n("li"),fg=r("A "),Zo=n("a"),cg=r("Neuron SDK environment"),ug=r(`,
which comes pre-configured on `),en=n("a"),mg=r("AWS Deep Learning AMI"),gg=r("."),ap=d(),Fe=n("h4"),Ct=n("a"),Qr=n("span"),g(tn.$$.fragment),_g=d(),Zr=n("span"),vg=r("Converting a Model for AWS Neuron"),rp=d(),ge=n("p"),wg=r("Using the same script as in "),on=n("a"),Eg=r("Using TorchScript in Python"),$g=r(`
to trace a \u201CBertModel\u201D, you import `),el=n("code"),bg=r("torch.neuron"),yg=r(` framework extension to access
the components of the Neuron SDK through a Python API.`),lp=d(),g(nn.$$.fragment),ip=d(),Gn=n("p"),xg=r("And only modify the tracing line of code"),pp=d(),Jn=n("p"),kg=r("from:"),dp=d(),g(sn.$$.fragment),hp=d(),Yn=n("p"),Tg=r("to:"),fp=d(),g(an.$$.fragment),cp=d(),Qn=n("p"),Og=r("This change enables Neuron SDK to trace the model and optimize it to run in Inf1 instances."),up=d(),Dt=n("p"),Ng=r(`To learn more about AWS Neuron SDK features, tools, example tutorials and latest updates,
please see the `),rn=n("a"),jg=r("AWS NeuronSDK documentation"),Ag=r("."),this.h()},l(e){const i=J1('[data-svelte="svelte-1phssyn"]',document.head);c=s(i,"META",{name:!0,content:!0}),i.forEach(o),y=h(e),u=s(e,"H1",{class:!0});var ln=a(u);b=s(ln,"A",{id:!0,class:!0,href:!0});var tl=a(b);T=s(tl,"SPAN",{});var ol=a(T);_(x.$$.fragment,ol),ol.forEach(o),tl.forEach(o),P=h(ln),D=s(ln,"SPAN",{});var nl=a(D);A=l(nl,"Exporting \u{1F917} Transformers Models"),nl.forEach(o),ln.forEach(o),N=h(e),S=s(e,"P",{});var sl=a(S);C=l(sl,`If you need to deploy \u{1F917} Transformers models in production environments, we
recommend exporting them to a serialized format that can be loaded and executed
on specialized runtimes and hardware. In this guide, we\u2019ll show you how to
export \u{1F917} Transformers models in two widely used formats: ONNX and TorchScript.`),sl.forEach(o),q=h(e),m=s(e,"P",{});var pn=a(m);j=l(pn,`Once exported, a model can optimized for inference via techniques such as
quantization and pruning. If you are interested in optimizing your models to run
with maximum efficiency, check out the `),L=s(pn,"A",{href:!0,rel:!0});var al=a(L);V=l(al,`\u{1F917} Optimum
library`),al.forEach(o),we=l(pn,"."),pn.forEach(o),He=h(e),G=s(e,"H2",{class:!0});var gp=a(G);H=s(gp,"A",{id:!0,class:!0,href:!0});var Ig=a(H);Ee=s(Ig,"SPAN",{});var Mg=a(Ee);_(se.$$.fragment,Mg),Mg.forEach(o),Ig.forEach(o),$e=h(gp),I=s(gp,"SPAN",{});var Bg=a(I);dn=l(Bg,"ONNX"),Bg.forEach(o),gp.forEach(o),It=h(e),J=s(e,"P",{});var Zn=a(J);hn=l(Zn,"The "),ae=s(Zn,"A",{href:!0,rel:!0});var Lg=a(ae);fn=l(Lg,"ONNX (Open Neural Network eXchange)"),Lg.forEach(o),cn=l(Zn,` project is an open
standard that defines a common set of operators and a common file format to
represent deep learning models in a wide variety of frameworks, including
PyTorch and TensorFlow. When a model is exported to the ONNX format, these
operators are used to construct a computational graph (often called an
`),us=s(Zn,"EM",{});var Xg=a(us);fd=l(Xg,"intermediate representation"),Xg.forEach(o),cd=l(Zn,`) which represents the flow of data through the
neural network.`),Zn.forEach(o),rl=h(e),un=s(e,"P",{});var Fg=a(un);ud=l(Fg,`By exposing a graph with standardized operators and data types, ONNX makes it
easy to switch between frameworks. For example, a model trained in PyTorch can
be exported to ONNX format and then imported in TensorFlow (and vice versa).`),Fg.forEach(o),ll=h(e),We=s(e,"P",{});var _p=a(We);md=l(_p,"\u{1F917} Transformers provides a "),ms=s(_p,"CODE",{});var Rg=a(ms);gd=l(Rg,"transformers.onnx"),Rg.forEach(o),_d=l(_p,` package that enables you to
convert model checkpoints to an ONNX graph by leveraging configuration objects.
These configuration objects come ready made for a number of model architectures,
and are designed to be easily extendable to other architectures.`),_p.forEach(o),il=h(e),mn=s(e,"P",{});var Hg=a(mn);vd=l(Hg,"Ready-made configurations include the following architectures:"),Hg.forEach(o),pl=h(e),k=s(e,"UL",{});var O=a(k);gs=s(O,"LI",{});var Wg=a(gs);wd=l(Wg,"ALBERT"),Wg.forEach(o),Ed=h(O),_s=s(O,"LI",{});var Kg=a(_s);$d=l(Kg,"BART"),Kg.forEach(o),bd=h(O),vs=s(O,"LI",{});var Ug=a(vs);yd=l(Ug,"BERT"),Ug.forEach(o),xd=h(O),ws=s(O,"LI",{});var Vg=a(ws);kd=l(Vg,"CamemBERT"),Vg.forEach(o),Td=h(O),Es=s(O,"LI",{});var Gg=a(Es);Od=l(Gg,"Data2VecText"),Gg.forEach(o),Nd=h(O),$s=s(O,"LI",{});var Jg=a($s);jd=l(Jg,"DistilBERT"),Jg.forEach(o),Ad=h(O),bs=s(O,"LI",{});var Yg=a(bs);Cd=l(Yg,"ELECTRA"),Yg.forEach(o),Dd=h(O),ys=s(O,"LI",{});var Qg=a(ys);Pd=l(Qg,"GPT Neo"),Qg.forEach(o),Sd=h(O),xs=s(O,"LI",{});var Zg=a(xs);qd=l(Zg,"I-BERT"),Zg.forEach(o),zd=h(O),ks=s(O,"LI",{});var e_=a(ks);Id=l(e_,"LayoutLM"),e_.forEach(o),Md=h(O),Ts=s(O,"LI",{});var t_=a(Ts);Bd=l(t_,"M2M100"),t_.forEach(o),Ld=h(O),Os=s(O,"LI",{});var o_=a(Os);Xd=l(o_,"Marian"),o_.forEach(o),Fd=h(O),Ns=s(O,"LI",{});var n_=a(Ns);Rd=l(n_,"mBART"),n_.forEach(o),Hd=h(O),js=s(O,"LI",{});var s_=a(js);Wd=l(s_,"OpenAI GPT-2"),s_.forEach(o),Kd=h(O),As=s(O,"LI",{});var a_=a(As);Ud=l(a_,"PLBart"),a_.forEach(o),Vd=h(O),Cs=s(O,"LI",{});var r_=a(Cs);Gd=l(r_,"RoBERTa"),r_.forEach(o),Jd=h(O),Ds=s(O,"LI",{});var l_=a(Ds);Yd=l(l_,"T5"),l_.forEach(o),Qd=h(O),Ps=s(O,"LI",{});var i_=a(Ps);Zd=l(i_,"ViT"),i_.forEach(o),eh=h(O),Ss=s(O,"LI",{});var p_=a(Ss);th=l(p_,"XLM-RoBERTa"),p_.forEach(o),oh=h(O),qs=s(O,"LI",{});var d_=a(qs);nh=l(d_,"XLM-RoBERTa-XL"),d_.forEach(o),O.forEach(o),dl=h(e),gn=s(e,"P",{});var h_=a(gn);sh=l(h_,"In the next two sections, we\u2019ll show you how to:"),h_.forEach(o),hl=h(e),Ke=s(e,"UL",{});var vp=a(Ke);Mt=s(vp,"LI",{});var wp=a(Mt);ah=l(wp,"Export a supported model using the "),zs=s(wp,"CODE",{});var f_=a(zs);rh=l(f_,"transformers.onnx"),f_.forEach(o),lh=l(wp," package."),wp.forEach(o),ih=h(vp),Is=s(vp,"LI",{});var c_=a(Is);ph=l(c_,"Export a custom model for an unsupported architecture."),c_.forEach(o),vp.forEach(o),fl=h(e),be=s(e,"H3",{class:!0});var Ep=a(be);Ue=s(Ep,"A",{id:!0,class:!0,href:!0});var u_=a(Ue);Ms=s(u_,"SPAN",{});var m_=a(Ms);_(Bt.$$.fragment,m_),m_.forEach(o),u_.forEach(o),dh=h(Ep),Bs=s(Ep,"SPAN",{});var g_=a(Bs);hh=l(g_,"Exporting a model to ONNX"),g_.forEach(o),Ep.forEach(o),cl=h(e),_n=s(e,"P",{});var __=a(_n);fh=l(__,`To export a \u{1F917} Transformers model to ONNX, you\u2019ll first need to install some
extra dependencies:`),__.forEach(o),ul=h(e),_(Lt.$$.fragment,e),ml=h(e),Ve=s(e,"P",{});var $p=a(Ve);ch=l($p,"The "),Ls=s($p,"CODE",{});var v_=a(Ls);uh=l(v_,"transformers.onnx"),v_.forEach(o),mh=l($p," package can then be used as a Python module:"),$p.forEach(o),gl=h(e),_(Xt.$$.fragment,e),_l=h(e),vn=s(e,"P",{});var w_=a(vn);gh=l(w_,"Exporting a checkpoint using a ready-made configuration can be done as follows:"),w_.forEach(o),vl=h(e),_(Ft.$$.fragment,e),wl=h(e),wn=s(e,"P",{});var E_=a(wn);_h=l(E_,"which should show the following logs:"),E_.forEach(o),El=h(e),_(Rt.$$.fragment,e),$l=h(e),re=s(e,"P",{});var es=a(re);vh=l(es,"This exports an ONNX graph of the checkpoint defined by the "),Xs=s(es,"CODE",{});var $_=a(Xs);wh=l($_,"--model"),$_.forEach(o),Eh=l(es,` argument.
In this example it is `),Fs=s(es,"CODE",{});var b_=a(Fs);$h=l(b_,"distilbert-base-uncased"),b_.forEach(o),bh=l(es,`, but it can be any checkpoint on
the Hugging Face Hub or one that\u2019s stored locally.`),es.forEach(o),bl=h(e),Q=s(e,"P",{});var Pt=a(Q);yh=l(Pt,"The resulting "),Rs=s(Pt,"CODE",{});var y_=a(Rs);xh=l(y_,"model.onnx"),y_.forEach(o),kh=l(Pt," file can then be run on one of the "),Ht=s(Pt,"A",{href:!0,rel:!0});var x_=a(Ht);Th=l(x_,`many
accelerators`),x_.forEach(o),Oh=l(Pt,` that support the
ONNX standard. For example, we can load and run the model with `),Wt=s(Pt,"A",{href:!0,rel:!0});var k_=a(Wt);Nh=l(k_,`ONNX
Runtime`),k_.forEach(o),jh=l(Pt," as follows:"),Pt.forEach(o),yl=h(e),_(Kt.$$.fragment,e),xl=h(e),Ge=s(e,"P",{});var bp=a(Ge);Ah=l(bp,"The required output names (i.e. "),Hs=s(bp,"CODE",{});var T_=a(Hs);Ch=l(T_,'["last_hidden_state"]'),T_.forEach(o),Dh=l(bp,`) can be obtained by
taking a look at the ONNX configuration of each model. For example, for
DistilBERT we have:`),bp.forEach(o),kl=h(e),_(Ut.$$.fragment,e),Tl=h(e),Je=s(e,"P",{});var yp=a(Je);Ph=l(yp,`The process is identical for TensorFlow checkpoints on the Hub. For example, we
can export a pure TensorFlow checkpoint from the `),Vt=s(yp,"A",{href:!0,rel:!0});var O_=a(Vt);Sh=l(O_,`Keras
organization`),O_.forEach(o),qh=l(yp," as follows:"),yp.forEach(o),Ol=h(e),_(Gt.$$.fragment,e),Nl=h(e),En=s(e,"P",{});var N_=a(En);zh=l(N_,`To export a model that\u2019s stored locally, you\u2019ll need to have the model\u2019s weights
and tokenizer files stored in a directory. For example, we can load and save a
checkpoint as follows:`),N_.forEach(o),jl=h(e),_(Ye.$$.fragment,e),Al=h(e),ye=s(e,"H3",{class:!0});var xp=a(ye);Qe=s(xp,"A",{id:!0,class:!0,href:!0});var j_=a(Qe);Ws=s(j_,"SPAN",{});var A_=a(Ws);_(Jt.$$.fragment,A_),A_.forEach(o),j_.forEach(o),Ih=h(xp),Ks=s(xp,"SPAN",{});var C_=a(Ks);Mh=l(C_,"Selecting features for different model topologies"),C_.forEach(o),xp.forEach(o),Cl=h(e),Ze=s(e,"P",{});var kp=a(Ze);Bh=l(kp,"Each ready-made configuration comes with a set of "),Us=s(kp,"EM",{});var D_=a(Us);Lh=l(D_,"features"),D_.forEach(o),Xh=l(kp,` that enable you to
export models for different types of topologies or tasks. As shown in the table
below, each feature is associated with a different auto class:`),kp.forEach(o),Dl=h(e),et=s(e,"TABLE",{});var Tp=a(et);Vs=s(Tp,"THEAD",{});var P_=a(Vs);Yt=s(P_,"TR",{});var Op=a(Yt);Gs=s(Op,"TH",{});var S_=a(Gs);Fh=l(S_,"Feature"),S_.forEach(o),Rh=h(Op),Js=s(Op,"TH",{});var q_=a(Js);Hh=l(q_,"Auto Class"),q_.forEach(o),Op.forEach(o),P_.forEach(o),Wh=h(Tp),X=s(Tp,"TBODY",{});var U=a(X);Qt=s(U,"TR",{});var Np=a(Qt);Zt=s(Np,"TD",{});var jp=a(Zt);Ys=s(jp,"CODE",{});var z_=a(Ys);Kh=l(z_,"causal-lm"),z_.forEach(o),Uh=l(jp,", "),Qs=s(jp,"CODE",{});var I_=a(Qs);Vh=l(I_,"causal-lm-with-past"),I_.forEach(o),jp.forEach(o),Gh=h(Np),Zs=s(Np,"TD",{});var M_=a(Zs);ea=s(M_,"CODE",{});var B_=a(ea);Jh=l(B_,"AutoModelForCausalLM"),B_.forEach(o),M_.forEach(o),Np.forEach(o),Yh=h(U),eo=s(U,"TR",{});var Ap=a(eo);to=s(Ap,"TD",{});var Cp=a(to);ta=s(Cp,"CODE",{});var L_=a(ta);Qh=l(L_,"default"),L_.forEach(o),Zh=l(Cp,", "),oa=s(Cp,"CODE",{});var X_=a(oa);ef=l(X_,"default-with-past"),X_.forEach(o),Cp.forEach(o),tf=h(Ap),na=s(Ap,"TD",{});var F_=a(na);sa=s(F_,"CODE",{});var R_=a(sa);of=l(R_,"AutoModel"),R_.forEach(o),F_.forEach(o),Ap.forEach(o),nf=h(U),oo=s(U,"TR",{});var Dp=a(oo);aa=s(Dp,"TD",{});var H_=a(aa);ra=s(H_,"CODE",{});var W_=a(ra);sf=l(W_,"masked-lm"),W_.forEach(o),H_.forEach(o),af=h(Dp),la=s(Dp,"TD",{});var K_=a(la);ia=s(K_,"CODE",{});var U_=a(ia);rf=l(U_,"AutoModelForMaskedLM"),U_.forEach(o),K_.forEach(o),Dp.forEach(o),lf=h(U),no=s(U,"TR",{});var Pp=a(no);pa=s(Pp,"TD",{});var V_=a(pa);da=s(V_,"CODE",{});var G_=a(da);pf=l(G_,"question-answering"),G_.forEach(o),V_.forEach(o),df=h(Pp),ha=s(Pp,"TD",{});var J_=a(ha);fa=s(J_,"CODE",{});var Y_=a(fa);hf=l(Y_,"AutoModelForQuestionAnswering"),Y_.forEach(o),J_.forEach(o),Pp.forEach(o),ff=h(U),so=s(U,"TR",{});var Sp=a(so);ao=s(Sp,"TD",{});var qp=a(ao);ca=s(qp,"CODE",{});var Q_=a(ca);cf=l(Q_,"seq2seq-lm"),Q_.forEach(o),uf=l(qp,", "),ua=s(qp,"CODE",{});var Z_=a(ua);mf=l(Z_,"seq2seq-lm-with-past"),Z_.forEach(o),qp.forEach(o),gf=h(Sp),ma=s(Sp,"TD",{});var ev=a(ma);ga=s(ev,"CODE",{});var tv=a(ga);_f=l(tv,"AutoModelForSeq2SeqLM"),tv.forEach(o),ev.forEach(o),Sp.forEach(o),vf=h(U),ro=s(U,"TR",{});var zp=a(ro);_a=s(zp,"TD",{});var ov=a(_a);va=s(ov,"CODE",{});var nv=a(va);wf=l(nv,"sequence-classification"),nv.forEach(o),ov.forEach(o),Ef=h(zp),wa=s(zp,"TD",{});var sv=a(wa);Ea=s(sv,"CODE",{});var av=a(Ea);$f=l(av,"AutoModelForSequenceClassification"),av.forEach(o),sv.forEach(o),zp.forEach(o),bf=h(U),lo=s(U,"TR",{});var Ip=a(lo);$a=s(Ip,"TD",{});var rv=a($a);ba=s(rv,"CODE",{});var lv=a(ba);yf=l(lv,"token-classification"),lv.forEach(o),rv.forEach(o),xf=h(Ip),ya=s(Ip,"TD",{});var iv=a(ya);xa=s(iv,"CODE",{});var pv=a(xa);kf=l(pv,"AutoModelForTokenClassification"),pv.forEach(o),iv.forEach(o),Ip.forEach(o),U.forEach(o),Tp.forEach(o),Pl=h(e),tt=s(e,"P",{});var Mp=a(tt);Tf=l(Mp,`For each configuration, you can find the list of supported features via the
`),ka=s(Mp,"CODE",{});var dv=a(ka);Of=l(dv,"FeaturesManager"),dv.forEach(o),Nf=l(Mp,". For example, for DistilBERT we have:"),Mp.forEach(o),Sl=h(e),_(io.$$.fragment,e),ql=h(e),le=s(e,"P",{});var ts=a(le);jf=l(ts,"You can then pass one of these features to the "),Ta=s(ts,"CODE",{});var hv=a(Ta);Af=l(hv,"--feature"),hv.forEach(o),Cf=l(ts,` argument in the
`),Oa=s(ts,"CODE",{});var fv=a(Oa);Df=l(fv,"transformers.onnx"),fv.forEach(o),Pf=l(ts,` package. For example, to export a text-classification model
we can pick a fine-tuned model from the Hub and run:`),ts.forEach(o),zl=h(e),_(po.$$.fragment,e),Il=h(e),$n=s(e,"P",{});var cv=a($n);Sf=l(cv,"which will display the following logs:"),cv.forEach(o),Ml=h(e),_(ho.$$.fragment,e),Bl=h(e),Z=s(e,"P",{});var St=a(Z);qf=l(St,`Notice that in this case, the output names from the fine-tuned model are
`),Na=s(St,"CODE",{});var uv=a(Na);zf=l(uv,"logits"),uv.forEach(o),If=l(St," instead of the "),ja=s(St,"CODE",{});var mv=a(ja);Mf=l(mv,"last_hidden_state"),mv.forEach(o),Bf=l(St,` we saw with the
`),Aa=s(St,"CODE",{});var gv=a(Aa);Lf=l(gv,"distilbert-base-uncased"),gv.forEach(o),Xf=l(St,` checkpoint earlier. This is expected since the
fine-tuned model has a sequence classification head.`),St.forEach(o),Ll=h(e),_(ot.$$.fragment,e),Xl=h(e),xe=s(e,"H3",{class:!0});var Bp=a(xe);nt=s(Bp,"A",{id:!0,class:!0,href:!0});var _v=a(nt);Ca=s(_v,"SPAN",{});var vv=a(Ca);_(fo.$$.fragment,vv),vv.forEach(o),_v.forEach(o),Ff=h(Bp),Da=s(Bp,"SPAN",{});var wv=a(Da);Rf=l(wv,"Exporting a model for an unsupported architecture"),wv.forEach(o),Bp.forEach(o),Fl=h(e),bn=s(e,"P",{});var Ev=a(bn);Hf=l(Ev,`If you wish to export a model whose architecture is not natively supported by
the library, there are three main steps to follow:`),Ev.forEach(o),Rl=h(e),ie=s(e,"OL",{});var os=a(ie);Pa=s(os,"LI",{});var $v=a(Pa);Wf=l($v,"Implement a custom ONNX configuration."),$v.forEach(o),Kf=h(os),Sa=s(os,"LI",{});var bv=a(Sa);Uf=l(bv,"Export the model to ONNX."),bv.forEach(o),Vf=h(os),qa=s(os,"LI",{});var yv=a(qa);Gf=l(yv,"Validate the outputs of the PyTorch and exported models."),yv.forEach(o),os.forEach(o),Hl=h(e),yn=s(e,"P",{});var xv=a(yn);Jf=l(xv,`In this section, we\u2019ll look at how DistilBERT was implemented to show what\u2019s
involved with each step.`),xv.forEach(o),Wl=h(e),ke=s(e,"H4",{class:!0});var Lp=a(ke);st=s(Lp,"A",{id:!0,class:!0,href:!0});var kv=a(st);za=s(kv,"SPAN",{});var Tv=a(za);_(co.$$.fragment,Tv),Tv.forEach(o),kv.forEach(o),Yf=h(Lp),Ia=s(Lp,"SPAN",{});var Ov=a(Ia);Qf=l(Ov,"Implementing a custom ONNX configuration"),Ov.forEach(o),Lp.forEach(o),Kl=h(e),xn=s(e,"P",{});var Nv=a(xn);Zf=l(Nv,`Let\u2019s start with the ONNX configuration object. We provide three abstract
classes that you should inherit from, depending on the type of model
architecture you wish to export:`),Nv.forEach(o),Ul=h(e),pe=s(e,"UL",{});var ns=a(pe);kn=s(ns,"LI",{});var Cg=a(kn);ec=l(Cg,"Encoder-based models inherit from "),Tn=s(Cg,"A",{href:!0});var jv=a(Tn);tc=l(jv,"OnnxConfig"),jv.forEach(o),Cg.forEach(o),oc=h(ns),On=s(ns,"LI",{});var Dg=a(On);nc=l(Dg,"Decoder-based models inherit from "),Nn=s(Dg,"A",{href:!0});var Av=a(Nn);sc=l(Av,"OnnxConfigWithPast"),Av.forEach(o),Dg.forEach(o),ac=h(ns),jn=s(ns,"LI",{});var Pg=a(jn);rc=l(Pg,"Encoder-decoder models inherit from "),An=s(Pg,"A",{href:!0});var Cv=a(An);lc=l(Cv,"OnnxSeq2SeqConfigWithPast"),Cv.forEach(o),Pg.forEach(o),ns.forEach(o),Vl=h(e),_(at.$$.fragment,e),Gl=h(e),rt=s(e,"P",{});var Xp=a(rt);ic=l(Xp,`Since DistilBERT is an encoder-based model, its configuration inherits from
`),Ma=s(Xp,"CODE",{});var Dv=a(Ma);pc=l(Dv,"OnnxConfig"),Dv.forEach(o),dc=l(Xp,":"),Xp.forEach(o),Jl=h(e),_(uo.$$.fragment,e),Yl=h(e),W=s(e,"P",{});var _e=a(W);hc=l(_e,"Every configuration object must implement the "),Ba=s(_e,"CODE",{});var Pv=a(Ba);fc=l(Pv,"inputs"),Pv.forEach(o),cc=l(_e,` property and return a
mapping, where each key corresponds to an expected input, and each value
indicates the axis of that input. For DistilBERT, we can see that two inputs are
required: `),La=s(_e,"CODE",{});var Sv=a(La);uc=l(Sv,"input_ids"),Sv.forEach(o),mc=l(_e," and "),Xa=s(_e,"CODE",{});var qv=a(Xa);gc=l(qv,"attention_mask"),qv.forEach(o),_c=l(_e,`. These inputs have the same shape of
`),Fa=s(_e,"CODE",{});var zv=a(Fa);vc=l(zv,"(batch_size, sequence_length)"),zv.forEach(o),wc=l(_e,` which is why we see the same axes used in the
configuration.`),_e.forEach(o),Ql=h(e),_(lt.$$.fragment,e),Zl=h(e),Cn=s(e,"P",{});var Iv=a(Cn);Ec=l(Iv,`Once you have implemented an ONNX configuration, you can instantiate it by
providing the base model\u2019s configuration as follows:`),Iv.forEach(o),ei=h(e),_(mo.$$.fragment,e),ti=h(e),Dn=s(e,"P",{});var Mv=a(Dn);$c=l(Mv,`The resulting object has several useful properties. For example you can view the
ONNX operator set that will be used during the export:`),Mv.forEach(o),oi=h(e),_(go.$$.fragment,e),ni=h(e),Pn=s(e,"P",{});var Bv=a(Pn);bc=l(Bv,"You can also view the outputs associated with the model as follows:"),Bv.forEach(o),si=h(e),_(_o.$$.fragment,e),ai=h(e),K=s(e,"P",{});var ve=a(K);yc=l(ve,`Notice that the outputs property follows the same structure as the inputs; it
returns an `),Ra=s(ve,"CODE",{});var Lv=a(Ra);xc=l(Lv,"OrderedDict"),Lv.forEach(o),kc=l(ve,` of named outputs and their shapes. The output structure
is linked to the choice of feature that the configuration is initialised with.
By default, the ONNX configuration is initialized with the `),Ha=s(ve,"CODE",{});var Xv=a(Ha);Tc=l(Xv,"default"),Xv.forEach(o),Oc=l(ve,` feature
that corresponds to exporting a model loaded with the `),Wa=s(ve,"CODE",{});var Fv=a(Wa);Nc=l(Fv,"AutoModel"),Fv.forEach(o),jc=l(ve,` class. If you
want to export a different model topology, just provide a different feature to
the `),Ka=s(ve,"CODE",{});var Rv=a(Ka);Ac=l(Rv,"task"),Rv.forEach(o),Cc=l(ve,` argument when you initialize the ONNX configuration. For example, if
we wished to export DistilBERT with a sequence classification head, we could
use:`),ve.forEach(o),ri=h(e),_(vo.$$.fragment,e),li=h(e),_(it.$$.fragment,e),ii=h(e),Te=s(e,"H4",{class:!0});var Fp=a(Te);pt=s(Fp,"A",{id:!0,class:!0,href:!0});var Hv=a(pt);Ua=s(Hv,"SPAN",{});var Wv=a(Ua);_(wo.$$.fragment,Wv),Wv.forEach(o),Hv.forEach(o),Dc=h(Fp),Va=s(Fp,"SPAN",{});var Kv=a(Va);Pc=l(Kv,"Exporting the model"),Kv.forEach(o),Fp.forEach(o),pi=h(e),de=s(e,"P",{});var ss=a(de);Sc=l(ss,`Once you have implemented the ONNX configuration, the next step is to export the
model. Here we can use the `),Ga=s(ss,"CODE",{});var Uv=a(Ga);qc=l(Uv,"export()"),Uv.forEach(o),zc=l(ss,` function provided by the
`),Ja=s(ss,"CODE",{});var Vv=a(Ja);Ic=l(Vv,"transformers.onnx"),Vv.forEach(o),Mc=l(ss,` package. This function expects the ONNX configuration, along
with the base model and tokenizer, and the path to save the exported file:`),ss.forEach(o),di=h(e),_(Eo.$$.fragment,e),hi=h(e),F=s(e,"P",{});var oe=a(F);Bc=l(oe,"The "),Ya=s(oe,"CODE",{});var Gv=a(Ya);Lc=l(Gv,"onnx_inputs"),Gv.forEach(o),Xc=l(oe," and "),Qa=s(oe,"CODE",{});var Jv=a(Qa);Fc=l(Jv,"onnx_outputs"),Jv.forEach(o),Rc=l(oe," returned by the "),Za=s(oe,"CODE",{});var Yv=a(Za);Hc=l(Yv,"export()"),Yv.forEach(o),Wc=l(oe,` function are
lists of the keys defined in the `),er=s(oe,"CODE",{});var Qv=a(er);Kc=l(Qv,"inputs"),Qv.forEach(o),Uc=l(oe," and "),tr=s(oe,"CODE",{});var Zv=a(tr);Vc=l(Zv,"outputs"),Zv.forEach(o),Gc=l(oe,` properties of the
configuration. Once the model is exported, you can test that the model is well
formed as follows:`),oe.forEach(o),fi=h(e),_($o.$$.fragment,e),ci=h(e),_(dt.$$.fragment,e),ui=h(e),Oe=s(e,"H4",{class:!0});var Rp=a(Oe);ht=s(Rp,"A",{id:!0,class:!0,href:!0});var ew=a(ht);or=s(ew,"SPAN",{});var tw=a(or);_(bo.$$.fragment,tw),tw.forEach(o),ew.forEach(o),Jc=h(Rp),nr=s(Rp,"SPAN",{});var ow=a(nr);Yc=l(ow,"Validating the model outputs"),ow.forEach(o),Rp.forEach(o),mi=h(e),he=s(e,"P",{});var as=a(he);Qc=l(as,`The final step is to validate that the outputs from the base and exported model
agree within some absolute tolerance. Here we can use the
`),sr=s(as,"CODE",{});var nw=a(sr);Zc=l(nw,"validate_model_outputs()"),nw.forEach(o),eu=l(as," function provided by the "),ar=s(as,"CODE",{});var sw=a(ar);tu=l(sw,"transformers.onnx"),sw.forEach(o),ou=l(as,` package
as follows:`),as.forEach(o),gi=h(e),_(yo.$$.fragment,e),_i=h(e),ft=s(e,"P",{});var Hp=a(ft);nu=l(Hp,"This function uses the "),rr=s(Hp,"CODE",{});var aw=a(rr);su=l(aw,"OnnxConfig.generate_dummy_inputs()"),aw.forEach(o),au=l(Hp,` method to generate
inputs for the base and exported model, and the absolute tolerance can be
defined in the configuration. We generally find numerical agreement in the 1e-6
to 1e-4 range, although anything smaller than 1e-3 is likely to be OK.`),Hp.forEach(o),vi=h(e),Ne=s(e,"H3",{class:!0});var Wp=a(Ne);ct=s(Wp,"A",{id:!0,class:!0,href:!0});var rw=a(ct);lr=s(rw,"SPAN",{});var lw=a(lr);_(xo.$$.fragment,lw),lw.forEach(o),rw.forEach(o),ru=h(Wp),ir=s(Wp,"SPAN",{});var iw=a(ir);lu=l(iw,"Contributing a new configuration to \u{1F917} Transformers"),iw.forEach(o),Wp.forEach(o),wi=h(e),Sn=s(e,"P",{});var pw=a(Sn);iu=l(pw,`We are looking to expand the set of ready-made configurations and welcome
contributions from the community! If you would like to contribute your addition
to the library, you will need to:`),pw.forEach(o),Ei=h(e),fe=s(e,"UL",{});var rs=a(fe);ko=s(rs,"LI",{});var Kp=a(ko);pu=l(Kp,"Implement the ONNX configuration in the corresponding "),pr=s(Kp,"CODE",{});var dw=a(pr);du=l(dw,"configuration_<model_name>.py"),dw.forEach(o),hu=l(Kp,`
file`),Kp.forEach(o),fu=h(rs),qn=s(rs,"LI",{});var Sg=a(qn);cu=l(Sg,"Include the model architecture and corresponding features in "),dr=s(Sg,"CODE",{});var hw=a(dr);uu=l(hw,"FeatureManager"),hw.forEach(o),Sg.forEach(o),mu=h(rs),zn=s(rs,"LI",{});var qg=a(zn);gu=l(qg,"Add your model architecture to the tests in "),hr=s(qg,"CODE",{});var fw=a(hr);_u=l(fw,"test_onnx_v2.py"),fw.forEach(o),qg.forEach(o),rs.forEach(o),$i=h(e),ut=s(e,"P",{});var Up=a(ut);vu=l(Up,"Check out how the configuration for "),To=s(Up,"A",{href:!0,rel:!0});var cw=a(To);wu=l(cw,`IBERT was
contributed`),cw.forEach(o),Eu=l(Up,` to
get an idea of what\u2019s involved.`),Up.forEach(o),bi=h(e),je=s(e,"H2",{class:!0});var Vp=a(je);mt=s(Vp,"A",{id:!0,class:!0,href:!0});var uw=a(mt);fr=s(uw,"SPAN",{});var mw=a(fr);_(Oo.$$.fragment,mw),mw.forEach(o),uw.forEach(o),$u=h(Vp),cr=s(Vp,"SPAN",{});var gw=a(cr);bu=l(gw,"TorchScript"),gw.forEach(o),Vp.forEach(o),yi=h(e),_(gt.$$.fragment,e),xi=h(e),_t=s(e,"P",{});var Gp=a(_t);yu=l(Gp,`According to Pytorch\u2019s documentation: \u201CTorchScript is a way to create serializable and optimizable models from PyTorch
code\u201D. Pytorch\u2019s two modules `),No=s(Gp,"A",{href:!0,rel:!0});var _w=a(No);xu=l(_w,"JIT and TRACE"),_w.forEach(o),ku=l(Gp,` allow the developer to export
their model to be re-used in other programs, such as efficiency-oriented C++ programs.`),Gp.forEach(o),ki=h(e),In=s(e,"P",{});var vw=a(In);Tu=l(vw,`We have provided an interface that allows the export of \u{1F917} Transformers models to TorchScript so that they can be reused
in a different environment than a Pytorch-based python program. Here we explain how to export and use our models using
TorchScript.`),vw.forEach(o),Ti=h(e),Mn=s(e,"P",{});var ww=a(Mn);Ou=l(ww,"Exporting a model requires two things:"),ww.forEach(o),Oi=h(e),vt=s(e,"UL",{});var Jp=a(vt);ur=s(Jp,"LI",{});var Ew=a(ur);Nu=l(Ew,"a forward pass with dummy inputs."),Ew.forEach(o),ju=h(Jp),jo=s(Jp,"LI",{});var Yp=a(jo);Au=l(Yp,"model instantiation with the "),mr=s(Yp,"CODE",{});var $w=a(mr);Cu=l($w,"torchscript"),$w.forEach(o),Du=l(Yp," flag."),Yp.forEach(o),Jp.forEach(o),Ni=h(e),Bn=s(e,"P",{});var bw=a(Bn);Pu=l(bw,"These necessities imply several things developers should be careful about. These are detailed below."),bw.forEach(o),ji=h(e),Ae=s(e,"H3",{class:!0});var Qp=a(Ae);wt=s(Qp,"A",{id:!0,class:!0,href:!0});var yw=a(wt);gr=s(yw,"SPAN",{});var xw=a(gr);_(Ao.$$.fragment,xw),xw.forEach(o),yw.forEach(o),Su=h(Qp),_r=s(Qp,"SPAN",{});var kw=a(_r);qu=l(kw,"Implications"),kw.forEach(o),Qp.forEach(o),Ai=h(e),Ce=s(e,"H3",{class:!0});var Zp=a(Ce);Et=s(Zp,"A",{id:!0,class:!0,href:!0});var Tw=a(Et);vr=s(Tw,"SPAN",{});var Ow=a(vr);_(Co.$$.fragment,Ow),Ow.forEach(o),Tw.forEach(o),zu=h(Zp),wr=s(Zp,"SPAN",{});var Nw=a(wr);Iu=l(Nw,"TorchScript flag and tied weights"),Nw.forEach(o),Zp.forEach(o),Ci=h(e),ce=s(e,"P",{});var ls=a(ce);Mu=l(ls,`This flag is necessary because most of the language models in this repository have tied weights between their
`),Er=s(ls,"CODE",{});var jw=a(Er);Bu=l(jw,"Embedding"),jw.forEach(o),Lu=l(ls," layer and their "),$r=s(ls,"CODE",{});var Aw=a($r);Xu=l(Aw,"Decoding"),Aw.forEach(o),Fu=l(ls,` layer. TorchScript does not allow the export of models that have tied
weights, therefore it is necessary to untie and clone the weights beforehand.`),ls.forEach(o),Di=h(e),ee=s(e,"P",{});var qt=a(ee);Ru=l(qt,"This implies that models instantiated with the "),br=s(qt,"CODE",{});var Cw=a(br);Hu=l(Cw,"torchscript"),Cw.forEach(o),Wu=l(qt," flag have their "),yr=s(qt,"CODE",{});var Dw=a(yr);Ku=l(Dw,"Embedding"),Dw.forEach(o),Uu=l(qt," layer and "),xr=s(qt,"CODE",{});var Pw=a(xr);Vu=l(Pw,"Decoding"),Pw.forEach(o),Gu=l(qt,`
layer separate, which means that they should not be trained down the line. Training would de-synchronize the two
layers, leading to unexpected results.`),qt.forEach(o),Pi=h(e),$t=s(e,"P",{});var ed=a($t);Ju=l(ed,`This is not the case for models that do not have a Language Model head, as those do not have tied weights. These models
can be safely exported without the `),kr=s(ed,"CODE",{});var Sw=a(kr);Yu=l(Sw,"torchscript"),Sw.forEach(o),Qu=l(ed," flag."),ed.forEach(o),Si=h(e),De=s(e,"H3",{class:!0});var td=a(De);bt=s(td,"A",{id:!0,class:!0,href:!0});var qw=a(bt);Tr=s(qw,"SPAN",{});var zw=a(Tr);_(Do.$$.fragment,zw),zw.forEach(o),qw.forEach(o),Zu=h(td),Or=s(td,"SPAN",{});var Iw=a(Or);em=l(Iw,"Dummy inputs and standard lengths"),Iw.forEach(o),td.forEach(o),qi=h(e),Ln=s(e,"P",{});var Mw=a(Ln);tm=l(Mw,`The dummy inputs are used to do a model forward pass. While the inputs\u2019 values are propagating through the layers,
Pytorch keeps track of the different operations executed on each tensor. These recorded operations are then used to
create the \u201Ctrace\u201D of the model.`),Mw.forEach(o),zi=h(e),Xn=s(e,"P",{});var Bw=a(Xn);om=l(Bw,`The trace is created relatively to the inputs\u2019 dimensions. It is therefore constrained by the dimensions of the dummy
input, and will not work for any other sequence length or batch size. When trying with a different size, an error such
as:`),Bw.forEach(o),Ii=h(e),Fn=s(e,"P",{});var Lw=a(Fn);Nr=s(Lw,"CODE",{});var Xw=a(Nr);nm=l(Xw,"The expanded size of the tensor (3) must match the existing size (7) at non-singleton dimension 2"),Xw.forEach(o),Lw.forEach(o),Mi=h(e),Rn=s(e,"P",{});var Fw=a(Rn);sm=l(Fw,`will be raised. It is therefore recommended to trace the model with a dummy input size at least as large as the largest
input that will be fed to the model during inference. Padding can be performed to fill the missing values. As the model
will have been traced with a large input size however, the dimensions of the different matrix will be large as well,
resulting in more calculations.`),Fw.forEach(o),Bi=h(e),Hn=s(e,"P",{});var Rw=a(Hn);am=l(Rw,`It is recommended to be careful of the total number of operations done on each input and to follow performance closely
when exporting varying sequence-length models.`),Rw.forEach(o),Li=h(e),Pe=s(e,"H3",{class:!0});var od=a(Pe);yt=s(od,"A",{id:!0,class:!0,href:!0});var Hw=a(yt);jr=s(Hw,"SPAN",{});var Ww=a(jr);_(Po.$$.fragment,Ww),Ww.forEach(o),Hw.forEach(o),rm=h(od),Ar=s(od,"SPAN",{});var Kw=a(Ar);lm=l(Kw,"Using TorchScript in Python"),Kw.forEach(o),od.forEach(o),Xi=h(e),Wn=s(e,"P",{});var Uw=a(Wn);im=l(Uw,"Below is an example, showing how to save, load models as well as how to use the trace for inference."),Uw.forEach(o),Fi=h(e),Se=s(e,"H4",{class:!0});var nd=a(Se);xt=s(nd,"A",{id:!0,class:!0,href:!0});var Vw=a(xt);Cr=s(Vw,"SPAN",{});var Gw=a(Cr);_(So.$$.fragment,Gw),Gw.forEach(o),Vw.forEach(o),pm=h(nd),Dr=s(nd,"SPAN",{});var Jw=a(Dr);dm=l(Jw,"Saving a model"),Jw.forEach(o),nd.forEach(o),Ri=h(e),Y=s(e,"P",{});var Re=a(Y);hm=l(Re,"This snippet shows how to use TorchScript to export a "),Pr=s(Re,"CODE",{});var Yw=a(Pr);fm=l(Yw,"BertModel"),Yw.forEach(o),cm=l(Re,". Here the "),Sr=s(Re,"CODE",{});var Qw=a(Sr);um=l(Qw,"BertModel"),Qw.forEach(o),mm=l(Re,` is instantiated according
to a `),qr=s(Re,"CODE",{});var Zw=a(qr);gm=l(Zw,"BertConfig"),Zw.forEach(o),_m=l(Re," class and then saved to disk under the filename "),zr=s(Re,"CODE",{});var e1=a(zr);vm=l(e1,"traced_bert.pt"),e1.forEach(o),Re.forEach(o),Hi=h(e),_(qo.$$.fragment,e),Wi=h(e),qe=s(e,"H4",{class:!0});var sd=a(qe);kt=s(sd,"A",{id:!0,class:!0,href:!0});var t1=a(kt);Ir=s(t1,"SPAN",{});var o1=a(Ir);_(zo.$$.fragment,o1),o1.forEach(o),t1.forEach(o),wm=h(sd),Mr=s(sd,"SPAN",{});var n1=a(Mr);Em=l(n1,"Loading a model"),n1.forEach(o),sd.forEach(o),Ki=h(e),te=s(e,"P",{});var zt=a(te);$m=l(zt,"This snippet shows how to load the "),Br=s(zt,"CODE",{});var s1=a(Br);bm=l(s1,"BertModel"),s1.forEach(o),ym=l(zt," that was previously saved to disk under the name "),Lr=s(zt,"CODE",{});var a1=a(Lr);xm=l(a1,"traced_bert.pt"),a1.forEach(o),km=l(zt,`.
We are re-using the previously initialised `),Xr=s(zt,"CODE",{});var r1=a(Xr);Tm=l(r1,"dummy_input"),r1.forEach(o),Om=l(zt,"."),zt.forEach(o),Ui=h(e),_(Io.$$.fragment,e),Vi=h(e),ze=s(e,"H4",{class:!0});var ad=a(ze);Tt=s(ad,"A",{id:!0,class:!0,href:!0});var l1=a(Tt);Fr=s(l1,"SPAN",{});var i1=a(Fr);_(Mo.$$.fragment,i1),i1.forEach(o),l1.forEach(o),Nm=h(ad),Rr=s(ad,"SPAN",{});var p1=a(Rr);jm=l(p1,"Using a traced model for inference"),p1.forEach(o),ad.forEach(o),Gi=h(e),Ot=s(e,"P",{});var rd=a(Ot);Am=l(rd,"Using the traced model for inference is as simple as using its "),Hr=s(rd,"CODE",{});var d1=a(Hr);Cm=l(d1,"__call__"),d1.forEach(o),Dm=l(rd," dunder method:"),rd.forEach(o),Ji=h(e),_(Bo.$$.fragment,e),Yi=h(e),Ie=s(e,"H3",{class:!0});var ld=a(Ie);Nt=s(ld,"A",{id:!0,class:!0,href:!0});var h1=a(Nt);Wr=s(h1,"SPAN",{});var f1=a(Wr);_(Lo.$$.fragment,f1),f1.forEach(o),h1.forEach(o),Pm=h(ld),Kr=s(ld,"SPAN",{});var c1=a(Kr);Sm=l(c1,"Deploying HuggingFace TorchScript models on AWS using the Neuron SDK"),c1.forEach(o),ld.forEach(o),Qi=h(e),ue=s(e,"P",{});var is=a(ue);qm=l(is,"AWS introduced the "),Xo=s(is,"A",{href:!0,rel:!0});var u1=a(Xo);zm=l(u1,"Amazon EC2 Inf1"),u1.forEach(o),Im=l(is,`
instance family for low cost, high performance machine learning inference in the cloud.
The Inf1 instances are powered by the AWS Inferentia chip, a custom-built hardware accelerator,
specializing in deep learning inferencing workloads.
`),Fo=s(is,"A",{href:!0,rel:!0});var m1=a(Fo);Mm=l(m1,"AWS Neuron"),m1.forEach(o),Bm=l(is,`
is the SDK for Inferentia that supports tracing and optimizing transformers models for
deployment on Inf1. The Neuron SDK provides:`),is.forEach(o),Zi=h(e),me=s(e,"OL",{});var ps=a(me);Ur=s(ps,"LI",{});var g1=a(Ur);Lm=l(g1,"Easy-to-use API with one line of code change to trace and optimize a TorchScript model for inference in the cloud."),g1.forEach(o),Xm=h(ps),Kn=s(ps,"LI",{});var zg=a(Kn);Fm=l(zg,"Out of the box performance optimizations for "),Ro=s(zg,"A",{href:!0,rel:!0});var _1=a(Ro);Rm=l(_1,"improved cost-performance"),_1.forEach(o),zg.forEach(o),Hm=h(ps),Me=s(ps,"LI",{});var ds=a(Me);Wm=l(ds,"Support for HuggingFace transformers models built with either "),Ho=s(ds,"A",{href:!0,rel:!0});var v1=a(Ho);Km=l(v1,"PyTorch"),v1.forEach(o),Um=l(ds,`
or `),Wo=s(ds,"A",{href:!0,rel:!0});var w1=a(Wo);Vm=l(w1,"TensorFlow"),w1.forEach(o),Gm=l(ds,"."),ds.forEach(o),ps.forEach(o),ep=h(e),Be=s(e,"H4",{class:!0});var id=a(Be);jt=s(id,"A",{id:!0,class:!0,href:!0});var E1=a(jt);Vr=s(E1,"SPAN",{});var $1=a(Vr);_(Ko.$$.fragment,$1),$1.forEach(o),E1.forEach(o),Jm=h(id),Gr=s(id,"SPAN",{});var b1=a(Gr);Ym=l(b1,"Implications"),b1.forEach(o),id.forEach(o),tp=h(e),R=s(e,"P",{});var ne=a(R);Qm=l(ne,"Transformers Models based on the "),Uo=s(ne,"A",{href:!0,rel:!0});var y1=a(Uo);Zm=l(y1,"BERT (Bidirectional Encoder Representations from Transformers)"),y1.forEach(o),eg=l(ne,`
architecture, or its variants such as `),Vo=s(ne,"A",{href:!0,rel:!0});var x1=a(Vo);tg=l(x1,"distilBERT"),x1.forEach(o),og=l(ne,`
and `),Go=s(ne,"A",{href:!0,rel:!0});var k1=a(Go);ng=l(k1,"roBERTa"),k1.forEach(o),sg=l(ne,`
will run best on Inf1 for non-generative tasks such as Extractive Question Answering,
Sequence Classification, Token Classification. Alternatively, text generation
tasks can be adapted to run on Inf1, according to this `),Jo=s(ne,"A",{href:!0,rel:!0});var T1=a(Jo);ag=l(T1,"AWS Neuron MarianMT tutorial"),T1.forEach(o),rg=l(ne,`.
More information about models that can be converted out of the box on Inferentia can be
found in the `),Yo=s(ne,"A",{href:!0,rel:!0});var O1=a(Yo);lg=l(O1,"Model Architecture Fit section of the Neuron documentation"),O1.forEach(o),ig=l(ne,"."),ne.forEach(o),op=h(e),Le=s(e,"H4",{class:!0});var pd=a(Le);At=s(pd,"A",{id:!0,class:!0,href:!0});var N1=a(At);Jr=s(N1,"SPAN",{});var j1=a(Jr);_(Qo.$$.fragment,j1),j1.forEach(o),N1.forEach(o),pg=h(pd),Yr=s(pd,"SPAN",{});var A1=a(Yr);dg=l(A1,"Dependencies"),A1.forEach(o),pd.forEach(o),np=h(e),Un=s(e,"P",{});var C1=a(Un);hg=l(C1,"Using AWS Neuron to convert models requires the following dependencies and environment:"),C1.forEach(o),sp=h(e),Vn=s(e,"UL",{});var D1=a(Vn);Xe=s(D1,"LI",{});var hs=a(Xe);fg=l(hs,"A "),Zo=s(hs,"A",{href:!0,rel:!0});var P1=a(Zo);cg=l(P1,"Neuron SDK environment"),P1.forEach(o),ug=l(hs,`,
which comes pre-configured on `),en=s(hs,"A",{href:!0,rel:!0});var S1=a(en);mg=l(S1,"AWS Deep Learning AMI"),S1.forEach(o),gg=l(hs,"."),hs.forEach(o),D1.forEach(o),ap=h(e),Fe=s(e,"H4",{class:!0});var dd=a(Fe);Ct=s(dd,"A",{id:!0,class:!0,href:!0});var q1=a(Ct);Qr=s(q1,"SPAN",{});var z1=a(Qr);_(tn.$$.fragment,z1),z1.forEach(o),q1.forEach(o),_g=h(dd),Zr=s(dd,"SPAN",{});var I1=a(Zr);vg=l(I1,"Converting a Model for AWS Neuron"),I1.forEach(o),dd.forEach(o),rp=h(e),ge=s(e,"P",{});var fs=a(ge);wg=l(fs,"Using the same script as in "),on=s(fs,"A",{href:!0,rel:!0});var M1=a(on);Eg=l(M1,"Using TorchScript in Python"),M1.forEach(o),$g=l(fs,`
to trace a \u201CBertModel\u201D, you import `),el=s(fs,"CODE",{});var B1=a(el);bg=l(B1,"torch.neuron"),B1.forEach(o),yg=l(fs,` framework extension to access
the components of the Neuron SDK through a Python API.`),fs.forEach(o),lp=h(e),_(nn.$$.fragment,e),ip=h(e),Gn=s(e,"P",{});var L1=a(Gn);xg=l(L1,"And only modify the tracing line of code"),L1.forEach(o),pp=h(e),Jn=s(e,"P",{});var X1=a(Jn);kg=l(X1,"from:"),X1.forEach(o),dp=h(e),_(sn.$$.fragment,e),hp=h(e),Yn=s(e,"P",{});var F1=a(Yn);Tg=l(F1,"to:"),F1.forEach(o),fp=h(e),_(an.$$.fragment,e),cp=h(e),Qn=s(e,"P",{});var R1=a(Qn);Og=l(R1,"This change enables Neuron SDK to trace the model and optimize it to run in Inf1 instances."),R1.forEach(o),up=h(e),Dt=s(e,"P",{});var hd=a(Dt);Ng=l(hd,`To learn more about AWS Neuron SDK features, tools, example tutorials and latest updates,
please see the `),rn=s(hd,"A",{href:!0,rel:!0});var H1=a(rn);jg=l(H1,"AWS NeuronSDK documentation"),H1.forEach(o),Ag=l(hd,"."),hd.forEach(o),this.h()},h(){f(c,"name","hf:doc:metadata"),f(c,"content",JSON.stringify(pE)),f(b,"id","exporting-transformers-models"),f(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(b,"href","#exporting-transformers-models"),f(u,"class","relative group"),f(L,"href","https://github.com/huggingface/optimum"),f(L,"rel","nofollow"),f(H,"id","onnx"),f(H,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(H,"href","#onnx"),f(G,"class","relative group"),f(ae,"href","http://onnx.ai"),f(ae,"rel","nofollow"),f(Ue,"id","exporting-a-model-to-onnx"),f(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ue,"href","#exporting-a-model-to-onnx"),f(be,"class","relative group"),f(Ht,"href","https://onnx.ai/supported-tools.html#deployModel"),f(Ht,"rel","nofollow"),f(Wt,"href","https://onnxruntime.ai/"),f(Wt,"rel","nofollow"),f(Vt,"href","https://huggingface.co/keras-io"),f(Vt,"rel","nofollow"),f(Qe,"id","selecting-features-for-different-model-topologies"),f(Qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Qe,"href","#selecting-features-for-different-model-topologies"),f(ye,"class","relative group"),f(nt,"id","exporting-a-model-for-an-unsupported-architecture"),f(nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(nt,"href","#exporting-a-model-for-an-unsupported-architecture"),f(xe,"class","relative group"),f(st,"id","implementing-a-custom-onnx-configuration"),f(st,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(st,"href","#implementing-a-custom-onnx-configuration"),f(ke,"class","relative group"),f(Tn,"href","/docs/transformers/pr_16181/en/main_classes/onnx#transformers.onnx.OnnxConfig"),f(Nn,"href","/docs/transformers/pr_16181/en/main_classes/onnx#transformers.onnx.OnnxConfigWithPast"),f(An,"href","/docs/transformers/pr_16181/en/main_classes/onnx#transformers.onnx.OnnxSeq2SeqConfigWithPast"),f(pt,"id","exporting-the-model"),f(pt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(pt,"href","#exporting-the-model"),f(Te,"class","relative group"),f(ht,"id","validating-the-model-outputs"),f(ht,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ht,"href","#validating-the-model-outputs"),f(Oe,"class","relative group"),f(ct,"id","contributing-a-new-configuration-to-transformers"),f(ct,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ct,"href","#contributing-a-new-configuration-to-transformers"),f(Ne,"class","relative group"),f(To,"href","https://github.com/huggingface/transformers/pull/14868/files"),f(To,"rel","nofollow"),f(mt,"id","torchscript"),f(mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(mt,"href","#torchscript"),f(je,"class","relative group"),f(No,"href","https://pytorch.org/docs/stable/jit.html"),f(No,"rel","nofollow"),f(wt,"id","implications"),f(wt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(wt,"href","#implications"),f(Ae,"class","relative group"),f(Et,"id","torchscript-flag-and-tied-weights"),f(Et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Et,"href","#torchscript-flag-and-tied-weights"),f(Ce,"class","relative group"),f(bt,"id","dummy-inputs-and-standard-lengths"),f(bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(bt,"href","#dummy-inputs-and-standard-lengths"),f(De,"class","relative group"),f(yt,"id","using-torchscript-in-python"),f(yt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(yt,"href","#using-torchscript-in-python"),f(Pe,"class","relative group"),f(xt,"id","saving-a-model"),f(xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(xt,"href","#saving-a-model"),f(Se,"class","relative group"),f(kt,"id","loading-a-model"),f(kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(kt,"href","#loading-a-model"),f(qe,"class","relative group"),f(Tt,"id","using-a-traced-model-for-inference"),f(Tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Tt,"href","#using-a-traced-model-for-inference"),f(ze,"class","relative group"),f(Nt,"id","deploying-huggingface-torchscript-models-on-aws-using-the-neuron-sdk"),f(Nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Nt,"href","#deploying-huggingface-torchscript-models-on-aws-using-the-neuron-sdk"),f(Ie,"class","relative group"),f(Xo,"href","https://aws.amazon.com/ec2/instance-types/inf1/"),f(Xo,"rel","nofollow"),f(Fo,"href","https://awsdocs-neuron.readthedocs-hosted.com/en/latest/#"),f(Fo,"rel","nofollow"),f(Ro,"href","https://awsdocs-neuron.readthedocs-hosted.com/en/latest/neuron-guide/benchmark/%3E"),f(Ro,"rel","nofollow"),f(Ho,"href","https://awsdocs-neuron.readthedocs-hosted.com/en/latest/src/examples/pytorch/bert_tutorial/tutorial_pretrained_bert.html"),f(Ho,"rel","nofollow"),f(Wo,"href","https://awsdocs-neuron.readthedocs-hosted.com/en/latest/src/examples/tensorflow/huggingface_bert/huggingface_bert.html"),f(Wo,"rel","nofollow"),f(jt,"id","implications"),f(jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(jt,"href","#implications"),f(Be,"class","relative group"),f(Uo,"href","https://huggingface.co/docs/transformers/master/model_doc/bert"),f(Uo,"rel","nofollow"),f(Vo,"href","https://huggingface.co/docs/transformers/master/model_doc/distilbert"),f(Vo,"rel","nofollow"),f(Go,"href","https://huggingface.co/docs/transformers/master/model_doc/roberta"),f(Go,"rel","nofollow"),f(Jo,"href","https://awsdocs-neuron.readthedocs-hosted.com/en/latest/src/examples/pytorch/transformers-marianmt.html"),f(Jo,"rel","nofollow"),f(Yo,"href","https://awsdocs-neuron.readthedocs-hosted.com/en/latest/neuron-guide/models/models-inferentia.html#models-inferentia"),f(Yo,"rel","nofollow"),f(At,"id","dependencies"),f(At,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(At,"href","#dependencies"),f(Le,"class","relative group"),f(Zo,"href","https://awsdocs-neuron.readthedocs-hosted.com/en/latest/neuron-guide/neuron-frameworks/pytorch-neuron/index.html#installation-guide"),f(Zo,"rel","nofollow"),f(en,"href","https://docs.aws.amazon.com/dlami/latest/devguide/tutorial-inferentia-launching.html"),f(en,"rel","nofollow"),f(Ct,"id","converting-a-model-for-aws-neuron"),f(Ct,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ct,"href","#converting-a-model-for-aws-neuron"),f(Fe,"class","relative group"),f(on,"href","https://huggingface.co/docs/transformers/master/en/serialization#using-torchscript-in-python"),f(on,"rel","nofollow"),f(rn,"href","https://awsdocs-neuron.readthedocs-hosted.com/en/latest/index.html"),f(rn,"rel","nofollow")},m(e,i){t(document.head,c),p(e,y,i),p(e,u,i),t(u,b),t(b,T),v(x,T,null),t(u,P),t(u,D),t(D,A),p(e,N,i),p(e,S,i),t(S,C),p(e,q,i),p(e,m,i),t(m,j),t(m,L),t(L,V),t(m,we),p(e,He,i),p(e,G,i),t(G,H),t(H,Ee),v(se,Ee,null),t(G,$e),t(G,I),t(I,dn),p(e,It,i),p(e,J,i),t(J,hn),t(J,ae),t(ae,fn),t(J,cn),t(J,us),t(us,fd),t(J,cd),p(e,rl,i),p(e,un,i),t(un,ud),p(e,ll,i),p(e,We,i),t(We,md),t(We,ms),t(ms,gd),t(We,_d),p(e,il,i),p(e,mn,i),t(mn,vd),p(e,pl,i),p(e,k,i),t(k,gs),t(gs,wd),t(k,Ed),t(k,_s),t(_s,$d),t(k,bd),t(k,vs),t(vs,yd),t(k,xd),t(k,ws),t(ws,kd),t(k,Td),t(k,Es),t(Es,Od),t(k,Nd),t(k,$s),t($s,jd),t(k,Ad),t(k,bs),t(bs,Cd),t(k,Dd),t(k,ys),t(ys,Pd),t(k,Sd),t(k,xs),t(xs,qd),t(k,zd),t(k,ks),t(ks,Id),t(k,Md),t(k,Ts),t(Ts,Bd),t(k,Ld),t(k,Os),t(Os,Xd),t(k,Fd),t(k,Ns),t(Ns,Rd),t(k,Hd),t(k,js),t(js,Wd),t(k,Kd),t(k,As),t(As,Ud),t(k,Vd),t(k,Cs),t(Cs,Gd),t(k,Jd),t(k,Ds),t(Ds,Yd),t(k,Qd),t(k,Ps),t(Ps,Zd),t(k,eh),t(k,Ss),t(Ss,th),t(k,oh),t(k,qs),t(qs,nh),p(e,dl,i),p(e,gn,i),t(gn,sh),p(e,hl,i),p(e,Ke,i),t(Ke,Mt),t(Mt,ah),t(Mt,zs),t(zs,rh),t(Mt,lh),t(Ke,ih),t(Ke,Is),t(Is,ph),p(e,fl,i),p(e,be,i),t(be,Ue),t(Ue,Ms),v(Bt,Ms,null),t(be,dh),t(be,Bs),t(Bs,hh),p(e,cl,i),p(e,_n,i),t(_n,fh),p(e,ul,i),v(Lt,e,i),p(e,ml,i),p(e,Ve,i),t(Ve,ch),t(Ve,Ls),t(Ls,uh),t(Ve,mh),p(e,gl,i),v(Xt,e,i),p(e,_l,i),p(e,vn,i),t(vn,gh),p(e,vl,i),v(Ft,e,i),p(e,wl,i),p(e,wn,i),t(wn,_h),p(e,El,i),v(Rt,e,i),p(e,$l,i),p(e,re,i),t(re,vh),t(re,Xs),t(Xs,wh),t(re,Eh),t(re,Fs),t(Fs,$h),t(re,bh),p(e,bl,i),p(e,Q,i),t(Q,yh),t(Q,Rs),t(Rs,xh),t(Q,kh),t(Q,Ht),t(Ht,Th),t(Q,Oh),t(Q,Wt),t(Wt,Nh),t(Q,jh),p(e,yl,i),v(Kt,e,i),p(e,xl,i),p(e,Ge,i),t(Ge,Ah),t(Ge,Hs),t(Hs,Ch),t(Ge,Dh),p(e,kl,i),v(Ut,e,i),p(e,Tl,i),p(e,Je,i),t(Je,Ph),t(Je,Vt),t(Vt,Sh),t(Je,qh),p(e,Ol,i),v(Gt,e,i),p(e,Nl,i),p(e,En,i),t(En,zh),p(e,jl,i),v(Ye,e,i),p(e,Al,i),p(e,ye,i),t(ye,Qe),t(Qe,Ws),v(Jt,Ws,null),t(ye,Ih),t(ye,Ks),t(Ks,Mh),p(e,Cl,i),p(e,Ze,i),t(Ze,Bh),t(Ze,Us),t(Us,Lh),t(Ze,Xh),p(e,Dl,i),p(e,et,i),t(et,Vs),t(Vs,Yt),t(Yt,Gs),t(Gs,Fh),t(Yt,Rh),t(Yt,Js),t(Js,Hh),t(et,Wh),t(et,X),t(X,Qt),t(Qt,Zt),t(Zt,Ys),t(Ys,Kh),t(Zt,Uh),t(Zt,Qs),t(Qs,Vh),t(Qt,Gh),t(Qt,Zs),t(Zs,ea),t(ea,Jh),t(X,Yh),t(X,eo),t(eo,to),t(to,ta),t(ta,Qh),t(to,Zh),t(to,oa),t(oa,ef),t(eo,tf),t(eo,na),t(na,sa),t(sa,of),t(X,nf),t(X,oo),t(oo,aa),t(aa,ra),t(ra,sf),t(oo,af),t(oo,la),t(la,ia),t(ia,rf),t(X,lf),t(X,no),t(no,pa),t(pa,da),t(da,pf),t(no,df),t(no,ha),t(ha,fa),t(fa,hf),t(X,ff),t(X,so),t(so,ao),t(ao,ca),t(ca,cf),t(ao,uf),t(ao,ua),t(ua,mf),t(so,gf),t(so,ma),t(ma,ga),t(ga,_f),t(X,vf),t(X,ro),t(ro,_a),t(_a,va),t(va,wf),t(ro,Ef),t(ro,wa),t(wa,Ea),t(Ea,$f),t(X,bf),t(X,lo),t(lo,$a),t($a,ba),t(ba,yf),t(lo,xf),t(lo,ya),t(ya,xa),t(xa,kf),p(e,Pl,i),p(e,tt,i),t(tt,Tf),t(tt,ka),t(ka,Of),t(tt,Nf),p(e,Sl,i),v(io,e,i),p(e,ql,i),p(e,le,i),t(le,jf),t(le,Ta),t(Ta,Af),t(le,Cf),t(le,Oa),t(Oa,Df),t(le,Pf),p(e,zl,i),v(po,e,i),p(e,Il,i),p(e,$n,i),t($n,Sf),p(e,Ml,i),v(ho,e,i),p(e,Bl,i),p(e,Z,i),t(Z,qf),t(Z,Na),t(Na,zf),t(Z,If),t(Z,ja),t(ja,Mf),t(Z,Bf),t(Z,Aa),t(Aa,Lf),t(Z,Xf),p(e,Ll,i),v(ot,e,i),p(e,Xl,i),p(e,xe,i),t(xe,nt),t(nt,Ca),v(fo,Ca,null),t(xe,Ff),t(xe,Da),t(Da,Rf),p(e,Fl,i),p(e,bn,i),t(bn,Hf),p(e,Rl,i),p(e,ie,i),t(ie,Pa),t(Pa,Wf),t(ie,Kf),t(ie,Sa),t(Sa,Uf),t(ie,Vf),t(ie,qa),t(qa,Gf),p(e,Hl,i),p(e,yn,i),t(yn,Jf),p(e,Wl,i),p(e,ke,i),t(ke,st),t(st,za),v(co,za,null),t(ke,Yf),t(ke,Ia),t(Ia,Qf),p(e,Kl,i),p(e,xn,i),t(xn,Zf),p(e,Ul,i),p(e,pe,i),t(pe,kn),t(kn,ec),t(kn,Tn),t(Tn,tc),t(pe,oc),t(pe,On),t(On,nc),t(On,Nn),t(Nn,sc),t(pe,ac),t(pe,jn),t(jn,rc),t(jn,An),t(An,lc),p(e,Vl,i),v(at,e,i),p(e,Gl,i),p(e,rt,i),t(rt,ic),t(rt,Ma),t(Ma,pc),t(rt,dc),p(e,Jl,i),v(uo,e,i),p(e,Yl,i),p(e,W,i),t(W,hc),t(W,Ba),t(Ba,fc),t(W,cc),t(W,La),t(La,uc),t(W,mc),t(W,Xa),t(Xa,gc),t(W,_c),t(W,Fa),t(Fa,vc),t(W,wc),p(e,Ql,i),v(lt,e,i),p(e,Zl,i),p(e,Cn,i),t(Cn,Ec),p(e,ei,i),v(mo,e,i),p(e,ti,i),p(e,Dn,i),t(Dn,$c),p(e,oi,i),v(go,e,i),p(e,ni,i),p(e,Pn,i),t(Pn,bc),p(e,si,i),v(_o,e,i),p(e,ai,i),p(e,K,i),t(K,yc),t(K,Ra),t(Ra,xc),t(K,kc),t(K,Ha),t(Ha,Tc),t(K,Oc),t(K,Wa),t(Wa,Nc),t(K,jc),t(K,Ka),t(Ka,Ac),t(K,Cc),p(e,ri,i),v(vo,e,i),p(e,li,i),v(it,e,i),p(e,ii,i),p(e,Te,i),t(Te,pt),t(pt,Ua),v(wo,Ua,null),t(Te,Dc),t(Te,Va),t(Va,Pc),p(e,pi,i),p(e,de,i),t(de,Sc),t(de,Ga),t(Ga,qc),t(de,zc),t(de,Ja),t(Ja,Ic),t(de,Mc),p(e,di,i),v(Eo,e,i),p(e,hi,i),p(e,F,i),t(F,Bc),t(F,Ya),t(Ya,Lc),t(F,Xc),t(F,Qa),t(Qa,Fc),t(F,Rc),t(F,Za),t(Za,Hc),t(F,Wc),t(F,er),t(er,Kc),t(F,Uc),t(F,tr),t(tr,Vc),t(F,Gc),p(e,fi,i),v($o,e,i),p(e,ci,i),v(dt,e,i),p(e,ui,i),p(e,Oe,i),t(Oe,ht),t(ht,or),v(bo,or,null),t(Oe,Jc),t(Oe,nr),t(nr,Yc),p(e,mi,i),p(e,he,i),t(he,Qc),t(he,sr),t(sr,Zc),t(he,eu),t(he,ar),t(ar,tu),t(he,ou),p(e,gi,i),v(yo,e,i),p(e,_i,i),p(e,ft,i),t(ft,nu),t(ft,rr),t(rr,su),t(ft,au),p(e,vi,i),p(e,Ne,i),t(Ne,ct),t(ct,lr),v(xo,lr,null),t(Ne,ru),t(Ne,ir),t(ir,lu),p(e,wi,i),p(e,Sn,i),t(Sn,iu),p(e,Ei,i),p(e,fe,i),t(fe,ko),t(ko,pu),t(ko,pr),t(pr,du),t(ko,hu),t(fe,fu),t(fe,qn),t(qn,cu),t(qn,dr),t(dr,uu),t(fe,mu),t(fe,zn),t(zn,gu),t(zn,hr),t(hr,_u),p(e,$i,i),p(e,ut,i),t(ut,vu),t(ut,To),t(To,wu),t(ut,Eu),p(e,bi,i),p(e,je,i),t(je,mt),t(mt,fr),v(Oo,fr,null),t(je,$u),t(je,cr),t(cr,bu),p(e,yi,i),v(gt,e,i),p(e,xi,i),p(e,_t,i),t(_t,yu),t(_t,No),t(No,xu),t(_t,ku),p(e,ki,i),p(e,In,i),t(In,Tu),p(e,Ti,i),p(e,Mn,i),t(Mn,Ou),p(e,Oi,i),p(e,vt,i),t(vt,ur),t(ur,Nu),t(vt,ju),t(vt,jo),t(jo,Au),t(jo,mr),t(mr,Cu),t(jo,Du),p(e,Ni,i),p(e,Bn,i),t(Bn,Pu),p(e,ji,i),p(e,Ae,i),t(Ae,wt),t(wt,gr),v(Ao,gr,null),t(Ae,Su),t(Ae,_r),t(_r,qu),p(e,Ai,i),p(e,Ce,i),t(Ce,Et),t(Et,vr),v(Co,vr,null),t(Ce,zu),t(Ce,wr),t(wr,Iu),p(e,Ci,i),p(e,ce,i),t(ce,Mu),t(ce,Er),t(Er,Bu),t(ce,Lu),t(ce,$r),t($r,Xu),t(ce,Fu),p(e,Di,i),p(e,ee,i),t(ee,Ru),t(ee,br),t(br,Hu),t(ee,Wu),t(ee,yr),t(yr,Ku),t(ee,Uu),t(ee,xr),t(xr,Vu),t(ee,Gu),p(e,Pi,i),p(e,$t,i),t($t,Ju),t($t,kr),t(kr,Yu),t($t,Qu),p(e,Si,i),p(e,De,i),t(De,bt),t(bt,Tr),v(Do,Tr,null),t(De,Zu),t(De,Or),t(Or,em),p(e,qi,i),p(e,Ln,i),t(Ln,tm),p(e,zi,i),p(e,Xn,i),t(Xn,om),p(e,Ii,i),p(e,Fn,i),t(Fn,Nr),t(Nr,nm),p(e,Mi,i),p(e,Rn,i),t(Rn,sm),p(e,Bi,i),p(e,Hn,i),t(Hn,am),p(e,Li,i),p(e,Pe,i),t(Pe,yt),t(yt,jr),v(Po,jr,null),t(Pe,rm),t(Pe,Ar),t(Ar,lm),p(e,Xi,i),p(e,Wn,i),t(Wn,im),p(e,Fi,i),p(e,Se,i),t(Se,xt),t(xt,Cr),v(So,Cr,null),t(Se,pm),t(Se,Dr),t(Dr,dm),p(e,Ri,i),p(e,Y,i),t(Y,hm),t(Y,Pr),t(Pr,fm),t(Y,cm),t(Y,Sr),t(Sr,um),t(Y,mm),t(Y,qr),t(qr,gm),t(Y,_m),t(Y,zr),t(zr,vm),p(e,Hi,i),v(qo,e,i),p(e,Wi,i),p(e,qe,i),t(qe,kt),t(kt,Ir),v(zo,Ir,null),t(qe,wm),t(qe,Mr),t(Mr,Em),p(e,Ki,i),p(e,te,i),t(te,$m),t(te,Br),t(Br,bm),t(te,ym),t(te,Lr),t(Lr,xm),t(te,km),t(te,Xr),t(Xr,Tm),t(te,Om),p(e,Ui,i),v(Io,e,i),p(e,Vi,i),p(e,ze,i),t(ze,Tt),t(Tt,Fr),v(Mo,Fr,null),t(ze,Nm),t(ze,Rr),t(Rr,jm),p(e,Gi,i),p(e,Ot,i),t(Ot,Am),t(Ot,Hr),t(Hr,Cm),t(Ot,Dm),p(e,Ji,i),v(Bo,e,i),p(e,Yi,i),p(e,Ie,i),t(Ie,Nt),t(Nt,Wr),v(Lo,Wr,null),t(Ie,Pm),t(Ie,Kr),t(Kr,Sm),p(e,Qi,i),p(e,ue,i),t(ue,qm),t(ue,Xo),t(Xo,zm),t(ue,Im),t(ue,Fo),t(Fo,Mm),t(ue,Bm),p(e,Zi,i),p(e,me,i),t(me,Ur),t(Ur,Lm),t(me,Xm),t(me,Kn),t(Kn,Fm),t(Kn,Ro),t(Ro,Rm),t(me,Hm),t(me,Me),t(Me,Wm),t(Me,Ho),t(Ho,Km),t(Me,Um),t(Me,Wo),t(Wo,Vm),t(Me,Gm),p(e,ep,i),p(e,Be,i),t(Be,jt),t(jt,Vr),v(Ko,Vr,null),t(Be,Jm),t(Be,Gr),t(Gr,Ym),p(e,tp,i),p(e,R,i),t(R,Qm),t(R,Uo),t(Uo,Zm),t(R,eg),t(R,Vo),t(Vo,tg),t(R,og),t(R,Go),t(Go,ng),t(R,sg),t(R,Jo),t(Jo,ag),t(R,rg),t(R,Yo),t(Yo,lg),t(R,ig),p(e,op,i),p(e,Le,i),t(Le,At),t(At,Jr),v(Qo,Jr,null),t(Le,pg),t(Le,Yr),t(Yr,dg),p(e,np,i),p(e,Un,i),t(Un,hg),p(e,sp,i),p(e,Vn,i),t(Vn,Xe),t(Xe,fg),t(Xe,Zo),t(Zo,cg),t(Xe,ug),t(Xe,en),t(en,mg),t(Xe,gg),p(e,ap,i),p(e,Fe,i),t(Fe,Ct),t(Ct,Qr),v(tn,Qr,null),t(Fe,_g),t(Fe,Zr),t(Zr,vg),p(e,rp,i),p(e,ge,i),t(ge,wg),t(ge,on),t(on,Eg),t(ge,$g),t(ge,el),t(el,bg),t(ge,yg),p(e,lp,i),v(nn,e,i),p(e,ip,i),p(e,Gn,i),t(Gn,xg),p(e,pp,i),p(e,Jn,i),t(Jn,kg),p(e,dp,i),v(sn,e,i),p(e,hp,i),p(e,Yn,i),t(Yn,Tg),p(e,fp,i),v(an,e,i),p(e,cp,i),p(e,Qn,i),t(Qn,Og),p(e,up,i),p(e,Dt,i),t(Dt,Ng),t(Dt,rn),t(rn,jg),t(Dt,Ag),mp=!0},p(e,[i]){const ln={};i&2&&(ln.$$scope={dirty:i,ctx:e}),Ye.$set(ln);const tl={};i&2&&(tl.$$scope={dirty:i,ctx:e}),ot.$set(tl);const ol={};i&2&&(ol.$$scope={dirty:i,ctx:e}),at.$set(ol);const nl={};i&2&&(nl.$$scope={dirty:i,ctx:e}),lt.$set(nl);const sl={};i&2&&(sl.$$scope={dirty:i,ctx:e}),it.$set(sl);const pn={};i&2&&(pn.$$scope={dirty:i,ctx:e}),dt.$set(pn);const al={};i&2&&(al.$$scope={dirty:i,ctx:e}),gt.$set(al)},i(e){mp||(w(x.$$.fragment,e),w(se.$$.fragment,e),w(Bt.$$.fragment,e),w(Lt.$$.fragment,e),w(Xt.$$.fragment,e),w(Ft.$$.fragment,e),w(Rt.$$.fragment,e),w(Kt.$$.fragment,e),w(Ut.$$.fragment,e),w(Gt.$$.fragment,e),w(Ye.$$.fragment,e),w(Jt.$$.fragment,e),w(io.$$.fragment,e),w(po.$$.fragment,e),w(ho.$$.fragment,e),w(ot.$$.fragment,e),w(fo.$$.fragment,e),w(co.$$.fragment,e),w(at.$$.fragment,e),w(uo.$$.fragment,e),w(lt.$$.fragment,e),w(mo.$$.fragment,e),w(go.$$.fragment,e),w(_o.$$.fragment,e),w(vo.$$.fragment,e),w(it.$$.fragment,e),w(wo.$$.fragment,e),w(Eo.$$.fragment,e),w($o.$$.fragment,e),w(dt.$$.fragment,e),w(bo.$$.fragment,e),w(yo.$$.fragment,e),w(xo.$$.fragment,e),w(Oo.$$.fragment,e),w(gt.$$.fragment,e),w(Ao.$$.fragment,e),w(Co.$$.fragment,e),w(Do.$$.fragment,e),w(Po.$$.fragment,e),w(So.$$.fragment,e),w(qo.$$.fragment,e),w(zo.$$.fragment,e),w(Io.$$.fragment,e),w(Mo.$$.fragment,e),w(Bo.$$.fragment,e),w(Lo.$$.fragment,e),w(Ko.$$.fragment,e),w(Qo.$$.fragment,e),w(tn.$$.fragment,e),w(nn.$$.fragment,e),w(sn.$$.fragment,e),w(an.$$.fragment,e),mp=!0)},o(e){E(x.$$.fragment,e),E(se.$$.fragment,e),E(Bt.$$.fragment,e),E(Lt.$$.fragment,e),E(Xt.$$.fragment,e),E(Ft.$$.fragment,e),E(Rt.$$.fragment,e),E(Kt.$$.fragment,e),E(Ut.$$.fragment,e),E(Gt.$$.fragment,e),E(Ye.$$.fragment,e),E(Jt.$$.fragment,e),E(io.$$.fragment,e),E(po.$$.fragment,e),E(ho.$$.fragment,e),E(ot.$$.fragment,e),E(fo.$$.fragment,e),E(co.$$.fragment,e),E(at.$$.fragment,e),E(uo.$$.fragment,e),E(lt.$$.fragment,e),E(mo.$$.fragment,e),E(go.$$.fragment,e),E(_o.$$.fragment,e),E(vo.$$.fragment,e),E(it.$$.fragment,e),E(wo.$$.fragment,e),E(Eo.$$.fragment,e),E($o.$$.fragment,e),E(dt.$$.fragment,e),E(bo.$$.fragment,e),E(yo.$$.fragment,e),E(xo.$$.fragment,e),E(Oo.$$.fragment,e),E(gt.$$.fragment,e),E(Ao.$$.fragment,e),E(Co.$$.fragment,e),E(Do.$$.fragment,e),E(Po.$$.fragment,e),E(So.$$.fragment,e),E(qo.$$.fragment,e),E(zo.$$.fragment,e),E(Io.$$.fragment,e),E(Mo.$$.fragment,e),E(Bo.$$.fragment,e),E(Lo.$$.fragment,e),E(Ko.$$.fragment,e),E(Qo.$$.fragment,e),E(tn.$$.fragment,e),E(nn.$$.fragment,e),E(sn.$$.fragment,e),E(an.$$.fragment,e),mp=!1},d(e){o(c),e&&o(y),e&&o(u),$(x),e&&o(N),e&&o(S),e&&o(q),e&&o(m),e&&o(He),e&&o(G),$(se),e&&o(It),e&&o(J),e&&o(rl),e&&o(un),e&&o(ll),e&&o(We),e&&o(il),e&&o(mn),e&&o(pl),e&&o(k),e&&o(dl),e&&o(gn),e&&o(hl),e&&o(Ke),e&&o(fl),e&&o(be),$(Bt),e&&o(cl),e&&o(_n),e&&o(ul),$(Lt,e),e&&o(ml),e&&o(Ve),e&&o(gl),$(Xt,e),e&&o(_l),e&&o(vn),e&&o(vl),$(Ft,e),e&&o(wl),e&&o(wn),e&&o(El),$(Rt,e),e&&o($l),e&&o(re),e&&o(bl),e&&o(Q),e&&o(yl),$(Kt,e),e&&o(xl),e&&o(Ge),e&&o(kl),$(Ut,e),e&&o(Tl),e&&o(Je),e&&o(Ol),$(Gt,e),e&&o(Nl),e&&o(En),e&&o(jl),$(Ye,e),e&&o(Al),e&&o(ye),$(Jt),e&&o(Cl),e&&o(Ze),e&&o(Dl),e&&o(et),e&&o(Pl),e&&o(tt),e&&o(Sl),$(io,e),e&&o(ql),e&&o(le),e&&o(zl),$(po,e),e&&o(Il),e&&o($n),e&&o(Ml),$(ho,e),e&&o(Bl),e&&o(Z),e&&o(Ll),$(ot,e),e&&o(Xl),e&&o(xe),$(fo),e&&o(Fl),e&&o(bn),e&&o(Rl),e&&o(ie),e&&o(Hl),e&&o(yn),e&&o(Wl),e&&o(ke),$(co),e&&o(Kl),e&&o(xn),e&&o(Ul),e&&o(pe),e&&o(Vl),$(at,e),e&&o(Gl),e&&o(rt),e&&o(Jl),$(uo,e),e&&o(Yl),e&&o(W),e&&o(Ql),$(lt,e),e&&o(Zl),e&&o(Cn),e&&o(ei),$(mo,e),e&&o(ti),e&&o(Dn),e&&o(oi),$(go,e),e&&o(ni),e&&o(Pn),e&&o(si),$(_o,e),e&&o(ai),e&&o(K),e&&o(ri),$(vo,e),e&&o(li),$(it,e),e&&o(ii),e&&o(Te),$(wo),e&&o(pi),e&&o(de),e&&o(di),$(Eo,e),e&&o(hi),e&&o(F),e&&o(fi),$($o,e),e&&o(ci),$(dt,e),e&&o(ui),e&&o(Oe),$(bo),e&&o(mi),e&&o(he),e&&o(gi),$(yo,e),e&&o(_i),e&&o(ft),e&&o(vi),e&&o(Ne),$(xo),e&&o(wi),e&&o(Sn),e&&o(Ei),e&&o(fe),e&&o($i),e&&o(ut),e&&o(bi),e&&o(je),$(Oo),e&&o(yi),$(gt,e),e&&o(xi),e&&o(_t),e&&o(ki),e&&o(In),e&&o(Ti),e&&o(Mn),e&&o(Oi),e&&o(vt),e&&o(Ni),e&&o(Bn),e&&o(ji),e&&o(Ae),$(Ao),e&&o(Ai),e&&o(Ce),$(Co),e&&o(Ci),e&&o(ce),e&&o(Di),e&&o(ee),e&&o(Pi),e&&o($t),e&&o(Si),e&&o(De),$(Do),e&&o(qi),e&&o(Ln),e&&o(zi),e&&o(Xn),e&&o(Ii),e&&o(Fn),e&&o(Mi),e&&o(Rn),e&&o(Bi),e&&o(Hn),e&&o(Li),e&&o(Pe),$(Po),e&&o(Xi),e&&o(Wn),e&&o(Fi),e&&o(Se),$(So),e&&o(Ri),e&&o(Y),e&&o(Hi),$(qo,e),e&&o(Wi),e&&o(qe),$(zo),e&&o(Ki),e&&o(te),e&&o(Ui),$(Io,e),e&&o(Vi),e&&o(ze),$(Mo),e&&o(Gi),e&&o(Ot),e&&o(Ji),$(Bo,e),e&&o(Yi),e&&o(Ie),$(Lo),e&&o(Qi),e&&o(ue),e&&o(Zi),e&&o(me),e&&o(ep),e&&o(Be),$(Ko),e&&o(tp),e&&o(R),e&&o(op),e&&o(Le),$(Qo),e&&o(np),e&&o(Un),e&&o(sp),e&&o(Vn),e&&o(ap),e&&o(Fe),$(tn),e&&o(rp),e&&o(ge),e&&o(lp),$(nn,e),e&&o(ip),e&&o(Gn),e&&o(pp),e&&o(Jn),e&&o(dp),$(sn,e),e&&o(hp),e&&o(Yn),e&&o(fp),$(an,e),e&&o(cp),e&&o(Qn),e&&o(up),e&&o(Dt)}}}const pE={local:"exporting-transformers-models",sections:[{local:"onnx",sections:[{local:"exporting-a-model-to-onnx",title:"Exporting a model to ONNX"},{local:"selecting-features-for-different-model-topologies",title:"Selecting features for different model topologies"},{local:"exporting-a-model-for-an-unsupported-architecture",sections:[{local:"implementing-a-custom-onnx-configuration",title:"Implementing a custom ONNX configuration"},{local:"exporting-the-model",title:"Exporting the model"},{local:"validating-the-model-outputs",title:"Validating the model outputs"}],title:"Exporting a model for an unsupported architecture"},{local:"contributing-a-new-configuration-to-transformers",title:"Contributing a new configuration to \u{1F917} Transformers"}],title:"ONNX"},{local:"torchscript",sections:[{local:"implications",title:"Implications"},{local:"torchscript-flag-and-tied-weights",title:"TorchScript flag and tied weights"},{local:"dummy-inputs-and-standard-lengths",title:"Dummy inputs and standard lengths"},{local:"using-torchscript-in-python",sections:[{local:"saving-a-model",title:"Saving a model"},{local:"loading-a-model",title:"Loading a model"},{local:"using-a-traced-model-for-inference",title:"Using a traced model for inference"}],title:"Using TorchScript in Python"},{local:"deploying-huggingface-torchscript-models-on-aws-using-the-neuron-sdk",sections:[{local:"implications",title:"Implications"},{local:"dependencies",title:"Dependencies"},{local:"converting-a-model-for-aws-neuron",title:"Converting a Model for AWS Neuron"}],title:"Deploying HuggingFace TorchScript models on AWS using the Neuron SDK"}],title:"TorchScript"}],title:"Exporting \u{1F917} Transformers Models"};function dE(M,c,y){let{fw:u}=c;return M.$$set=b=>{"fw"in b&&y(0,u=b.fw)},[u]}class gE extends U1{constructor(c){super();V1(this,c,dE,iE,G1,{fw:0})}}export{gE as default,pE as metadata};
