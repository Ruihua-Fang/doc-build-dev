import{S as gTt,i as hTt,s as pTt,e as a,k as l,w as f,t as o,M as _Tt,c as n,d as t,m as i,a as s,x as m,h as r,b as c,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-4833417e.js";import{T as V9r}from"../../chunks/Tip-fffd6df1.js";import{D as M}from"../../chunks/Docstring-7b52c3d4.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as X}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function uTt($i){let J,Pe,de,ge,io,fe,Te,Vo,Ii,$f,ca,ji,Di,z4,If,Le,co,Ni,On,W4,Gn,Xn,Q4,qi,Vn,H4,Oi,jf,Na;return{c(){J=a("p"),Pe=o("If your "),de=a("code"),ge=o("NewModelConfig"),io=o(" is a subclass of "),fe=a("code"),Te=o("PretrainedConfig"),Vo=o(`, make sure its
`),Ii=a("code"),$f=o("model_type"),ca=o(" attribute is set to the same key you use when registering the config (here "),ji=a("code"),Di=o('"new-model"'),z4=o(")."),If=l(),Le=a("p"),co=o("Likewise, if your "),Ni=a("code"),On=o("NewModel"),W4=o(" is a subclass of "),Gn=a("a"),Xn=o("PreTrainedModel"),Q4=o(`, make sure its
`),qi=a("code"),Vn=o("config_class"),H4=o(` attribute is set to the same class you use when registering the model (here
`),Oi=a("code"),jf=o("NewModelConfig"),Na=o(")."),this.h()},l(fo){J=n(fo,"P",{});var he=s(J);Pe=r(he,"If your "),de=n(he,"CODE",{});var D7=s(de);ge=r(D7,"NewModelConfig"),D7.forEach(t),io=r(he," is a subclass of "),fe=n(he,"CODE",{});var Gi=s(fe);Te=r(Gi,"PretrainedConfig"),Gi.forEach(t),Vo=r(he,`, make sure its
`),Ii=n(he,"CODE",{});var N7=s(Ii);$f=r(N7,"model_type"),N7.forEach(t),ca=r(he," attribute is set to the same key you use when registering the config (here "),ji=n(he,"CODE",{});var q7=s(ji);Di=r(q7,'"new-model"'),q7.forEach(t),z4=r(he,")."),he.forEach(t),If=i(fo),Le=n(fo,"P",{});var zo=s(Le);co=r(zo,"Likewise, if your "),Ni=n(zo,"CODE",{});var qa=s(Ni);On=r(qa,"NewModel"),qa.forEach(t),W4=r(zo," is a subclass of "),Gn=n(zo,"A",{href:!0});var O7=s(Gn);Xn=r(O7,"PreTrainedModel"),O7.forEach(t),Q4=r(zo,`, make sure its
`),qi=n(zo,"CODE",{});var Df=s(qi);Vn=r(Df,"config_class"),Df.forEach(t),H4=r(zo,` attribute is set to the same class you use when registering the model (here
`),Oi=n(zo,"CODE",{});var G7=s(Oi);jf=r(G7,"NewModelConfig"),G7.forEach(t),Na=r(zo,")."),zo.forEach(t),this.h()},h(){c(Gn,"href","/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel")},m(fo,he){b(fo,J,he),e(J,Pe),e(J,de),e(de,ge),e(J,io),e(J,fe),e(fe,Te),e(J,Vo),e(J,Ii),e(Ii,$f),e(J,ca),e(J,ji),e(ji,Di),e(J,z4),b(fo,If,he),b(fo,Le,he),e(Le,co),e(Le,Ni),e(Ni,On),e(Le,W4),e(Le,Gn),e(Gn,Xn),e(Le,Q4),e(Le,qi),e(qi,Vn),e(Le,H4),e(Le,Oi),e(Oi,jf),e(Le,Na)},d(fo){fo&&t(J),fo&&t(If),fo&&t(Le)}}}function bTt($i){let J,Pe,de,ge,io;return{c(){J=a("p"),Pe=o("Passing "),de=a("code"),ge=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Te=s(J);Pe=r(Te,"Passing "),de=n(Te,"CODE",{});var Vo=s(de);ge=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Te," is required when you want to use a private model."),Te.forEach(t)},m(fe,Te){b(fe,J,Te),e(J,Pe),e(J,de),e(de,ge),e(J,io)},d(fe){fe&&t(J)}}}function vTt($i){let J,Pe,de,ge,io;return{c(){J=a("p"),Pe=o("Passing "),de=a("code"),ge=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Te=s(J);Pe=r(Te,"Passing "),de=n(Te,"CODE",{});var Vo=s(de);ge=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Te," is required when you want to use a private model."),Te.forEach(t)},m(fe,Te){b(fe,J,Te),e(J,Pe),e(J,de),e(de,ge),e(J,io)},d(fe){fe&&t(J)}}}function TTt($i){let J,Pe,de,ge,io,fe,Te,Vo,Ii,$f,ca,ji,Di,z4,If,Le,co,Ni,On,W4,Gn,Xn,Q4,qi,Vn,H4,Oi,jf,Na,fo,he,D7,Gi,N7,q7,zo,qa,O7,Df,G7,mPe,KBe,Xi,Nf,cQ,U4,gPe,fQ,hPe,ZBe,zn,pPe,mQ,_Pe,uPe,gQ,bPe,vPe,exe,J4,oxe,X7,TPe,rxe,qf,txe,Vi,Of,hQ,Y4,FPe,pQ,CPe,axe,Wo,K4,MPe,Z4,EPe,V7,yPe,wPe,APe,eE,LPe,_Q,BPe,xPe,kPe,mo,oE,RPe,uQ,SPe,PPe,zi,$Pe,bQ,IPe,jPe,vQ,DPe,NPe,qPe,v,Gf,TQ,OPe,GPe,z7,XPe,VPe,zPe,Xf,FQ,WPe,QPe,W7,HPe,UPe,JPe,Vf,CQ,YPe,KPe,Q7,ZPe,e$e,o$e,zf,MQ,r$e,t$e,H7,a$e,n$e,s$e,Wf,EQ,l$e,i$e,U7,d$e,c$e,f$e,Qf,yQ,m$e,g$e,J7,h$e,p$e,_$e,Hf,wQ,u$e,b$e,Y7,v$e,T$e,F$e,Uf,AQ,C$e,M$e,K7,E$e,y$e,w$e,Jf,LQ,A$e,L$e,Z7,B$e,x$e,k$e,Yf,BQ,R$e,S$e,e9,P$e,$$e,I$e,Kf,xQ,j$e,D$e,o9,N$e,q$e,O$e,Zf,kQ,G$e,X$e,r9,V$e,z$e,W$e,em,RQ,Q$e,H$e,t9,U$e,J$e,Y$e,om,SQ,K$e,Z$e,a9,eIe,oIe,rIe,rm,PQ,tIe,aIe,n9,nIe,sIe,lIe,tm,$Q,iIe,dIe,s9,cIe,fIe,mIe,am,IQ,gIe,hIe,l9,pIe,_Ie,uIe,nm,jQ,bIe,vIe,i9,TIe,FIe,CIe,sm,DQ,MIe,EIe,d9,yIe,wIe,AIe,lm,NQ,LIe,BIe,c9,xIe,kIe,RIe,im,qQ,SIe,PIe,f9,$Ie,IIe,jIe,dm,OQ,DIe,NIe,m9,qIe,OIe,GIe,cm,GQ,XIe,VIe,g9,zIe,WIe,QIe,fm,XQ,HIe,UIe,h9,JIe,YIe,KIe,mm,VQ,ZIe,eje,p9,oje,rje,tje,gm,zQ,aje,nje,_9,sje,lje,ije,hm,WQ,dje,cje,u9,fje,mje,gje,pm,QQ,hje,pje,b9,_je,uje,bje,_m,HQ,vje,Tje,v9,Fje,Cje,Mje,um,UQ,Eje,yje,T9,wje,Aje,Lje,bm,JQ,Bje,xje,F9,kje,Rje,Sje,vm,YQ,Pje,$je,C9,Ije,jje,Dje,Tm,KQ,Nje,qje,M9,Oje,Gje,Xje,Fm,ZQ,Vje,zje,E9,Wje,Qje,Hje,Cm,eH,Uje,Jje,y9,Yje,Kje,Zje,Mm,oH,eDe,oDe,w9,rDe,tDe,aDe,Em,rH,nDe,sDe,A9,lDe,iDe,dDe,ym,tH,cDe,fDe,L9,mDe,gDe,hDe,wm,aH,pDe,_De,B9,uDe,bDe,vDe,Am,nH,TDe,FDe,x9,CDe,MDe,EDe,Lm,sH,yDe,wDe,k9,ADe,LDe,BDe,Bm,lH,xDe,kDe,R9,RDe,SDe,PDe,xm,iH,$De,IDe,S9,jDe,DDe,NDe,km,dH,qDe,ODe,P9,GDe,XDe,VDe,Rm,cH,zDe,WDe,$9,QDe,HDe,UDe,Sm,fH,JDe,YDe,I9,KDe,ZDe,eNe,Pm,mH,oNe,rNe,j9,tNe,aNe,nNe,$m,gH,sNe,lNe,D9,iNe,dNe,cNe,Im,hH,fNe,mNe,N9,gNe,hNe,pNe,jm,pH,_Ne,uNe,q9,bNe,vNe,TNe,Dm,_H,FNe,CNe,O9,MNe,ENe,yNe,Nm,uH,wNe,ANe,G9,LNe,BNe,xNe,qm,bH,kNe,RNe,X9,SNe,PNe,$Ne,Om,vH,INe,jNe,V9,DNe,NNe,qNe,Gm,TH,ONe,GNe,z9,XNe,VNe,zNe,Xm,FH,WNe,QNe,W9,HNe,UNe,JNe,Vm,CH,YNe,KNe,Q9,ZNe,eqe,oqe,zm,MH,rqe,tqe,H9,aqe,nqe,sqe,Wm,EH,lqe,iqe,U9,dqe,cqe,fqe,Qm,yH,mqe,gqe,J9,hqe,pqe,_qe,Hm,wH,uqe,bqe,Y9,vqe,Tqe,Fqe,Um,AH,Cqe,Mqe,K9,Eqe,yqe,wqe,Jm,LH,Aqe,Lqe,Z9,Bqe,xqe,kqe,Ym,BH,Rqe,Sqe,eB,Pqe,$qe,Iqe,Km,xH,jqe,Dqe,oB,Nqe,qqe,Oqe,Zm,kH,Gqe,Xqe,rB,Vqe,zqe,Wqe,eg,RH,Qqe,Hqe,tB,Uqe,Jqe,Yqe,og,SH,Kqe,Zqe,aB,eOe,oOe,rOe,rg,PH,tOe,aOe,nB,nOe,sOe,lOe,tg,$H,iOe,dOe,sB,cOe,fOe,mOe,ag,IH,gOe,hOe,lB,pOe,_Oe,uOe,ng,jH,bOe,vOe,iB,TOe,FOe,COe,sg,DH,MOe,EOe,dB,yOe,wOe,AOe,lg,NH,LOe,BOe,cB,xOe,kOe,ROe,ig,qH,SOe,POe,fB,$Oe,IOe,jOe,dg,OH,DOe,NOe,mB,qOe,OOe,GOe,cg,GH,XOe,VOe,gB,zOe,WOe,QOe,fg,XH,HOe,UOe,hB,JOe,YOe,KOe,mg,VH,ZOe,eGe,pB,oGe,rGe,tGe,gg,zH,aGe,nGe,_B,sGe,lGe,iGe,hg,WH,dGe,cGe,uB,fGe,mGe,gGe,pg,QH,hGe,pGe,bB,_Ge,uGe,bGe,_g,HH,vGe,TGe,vB,FGe,CGe,MGe,ug,UH,EGe,yGe,TB,wGe,AGe,LGe,bg,JH,BGe,xGe,FB,kGe,RGe,SGe,vg,YH,PGe,$Ge,CB,IGe,jGe,DGe,Tg,KH,NGe,qGe,MB,OGe,GGe,XGe,Fg,ZH,VGe,zGe,EB,WGe,QGe,HGe,Cg,eU,UGe,JGe,yB,YGe,KGe,ZGe,Mg,oU,eXe,oXe,wB,rXe,tXe,aXe,Eg,rU,nXe,sXe,AB,lXe,iXe,dXe,yg,tU,cXe,fXe,LB,mXe,gXe,hXe,wg,aU,pXe,_Xe,BB,uXe,bXe,vXe,Ag,nU,TXe,FXe,xB,CXe,MXe,EXe,sU,yXe,wXe,rE,AXe,Lg,tE,LXe,lU,BXe,nxe,Wi,Bg,iU,aE,xXe,dU,kXe,sxe,Qo,nE,RXe,sE,SXe,kB,PXe,$Xe,IXe,lE,jXe,cU,DXe,NXe,qXe,go,iE,OXe,fU,GXe,XXe,Oa,VXe,mU,zXe,WXe,gU,QXe,HXe,hU,UXe,JXe,YXe,E,Wn,pU,KXe,ZXe,RB,eVe,oVe,SB,rVe,tVe,aVe,Qn,_U,nVe,sVe,PB,lVe,iVe,$B,dVe,cVe,fVe,Hn,uU,mVe,gVe,IB,hVe,pVe,jB,_Ve,uVe,bVe,xg,bU,vVe,TVe,DB,FVe,CVe,MVe,Un,vU,EVe,yVe,NB,wVe,AVe,qB,LVe,BVe,xVe,kg,TU,kVe,RVe,OB,SVe,PVe,$Ve,Rg,FU,IVe,jVe,GB,DVe,NVe,qVe,Sg,CU,OVe,GVe,XB,XVe,VVe,zVe,Jn,MU,WVe,QVe,VB,HVe,UVe,zB,JVe,YVe,KVe,Yn,EU,ZVe,eze,WB,oze,rze,QB,tze,aze,nze,Kn,yU,sze,lze,HB,ize,dze,UB,cze,fze,mze,Pg,wU,gze,hze,JB,pze,_ze,uze,$g,AU,bze,vze,YB,Tze,Fze,Cze,Zn,LU,Mze,Eze,KB,yze,wze,ZB,Aze,Lze,Bze,Ig,BU,xze,kze,ex,Rze,Sze,Pze,es,xU,$ze,Ize,ox,jze,Dze,rx,Nze,qze,Oze,os,kU,Gze,Xze,tx,Vze,zze,ax,Wze,Qze,Hze,rs,RU,Uze,Jze,nx,Yze,Kze,SU,Zze,eWe,oWe,jg,PU,rWe,tWe,sx,aWe,nWe,sWe,ts,$U,lWe,iWe,lx,dWe,cWe,ix,fWe,mWe,gWe,Dg,IU,hWe,pWe,dx,_We,uWe,bWe,as,jU,vWe,TWe,cx,FWe,CWe,fx,MWe,EWe,yWe,ns,DU,wWe,AWe,mx,LWe,BWe,gx,xWe,kWe,RWe,ss,NU,SWe,PWe,hx,$We,IWe,px,jWe,DWe,NWe,Ng,qU,qWe,OWe,_x,GWe,XWe,VWe,ls,OU,zWe,WWe,ux,QWe,HWe,bx,UWe,JWe,YWe,qg,GU,KWe,ZWe,vx,eQe,oQe,rQe,is,XU,tQe,aQe,Tx,nQe,sQe,Fx,lQe,iQe,dQe,ds,VU,cQe,fQe,Cx,mQe,gQe,Mx,hQe,pQe,_Qe,cs,zU,uQe,bQe,Ex,vQe,TQe,yx,FQe,CQe,MQe,fs,WU,EQe,yQe,wx,wQe,AQe,Ax,LQe,BQe,xQe,Og,QU,kQe,RQe,Lx,SQe,PQe,$Qe,ms,HU,IQe,jQe,Bx,DQe,NQe,xx,qQe,OQe,GQe,gs,UU,XQe,VQe,kx,zQe,WQe,Rx,QQe,HQe,UQe,hs,JU,JQe,YQe,Sx,KQe,ZQe,Px,eHe,oHe,rHe,ps,YU,tHe,aHe,$x,nHe,sHe,Ix,lHe,iHe,dHe,_s,KU,cHe,fHe,jx,mHe,gHe,Dx,hHe,pHe,_He,us,ZU,uHe,bHe,Nx,vHe,THe,qx,FHe,CHe,MHe,Gg,eJ,EHe,yHe,Ox,wHe,AHe,LHe,bs,oJ,BHe,xHe,Gx,kHe,RHe,Xx,SHe,PHe,$He,Xg,rJ,IHe,jHe,Vx,DHe,NHe,qHe,Vg,tJ,OHe,GHe,zx,XHe,VHe,zHe,vs,aJ,WHe,QHe,Wx,HHe,UHe,Qx,JHe,YHe,KHe,Ts,nJ,ZHe,eUe,Hx,oUe,rUe,Ux,tUe,aUe,nUe,zg,sJ,sUe,lUe,Jx,iUe,dUe,cUe,Fs,lJ,fUe,mUe,Yx,gUe,hUe,Kx,pUe,_Ue,uUe,Cs,iJ,bUe,vUe,Zx,TUe,FUe,ek,CUe,MUe,EUe,Ms,dJ,yUe,wUe,ok,AUe,LUe,rk,BUe,xUe,kUe,Es,cJ,RUe,SUe,tk,PUe,$Ue,ak,IUe,jUe,DUe,ys,fJ,NUe,qUe,nk,OUe,GUe,sk,XUe,VUe,zUe,Wg,mJ,WUe,QUe,lk,HUe,UUe,JUe,Qg,gJ,YUe,KUe,ik,ZUe,eJe,oJe,Hg,hJ,rJe,tJe,dk,aJe,nJe,sJe,Ug,pJ,lJe,iJe,ck,dJe,cJe,fJe,ws,_J,mJe,gJe,fk,hJe,pJe,mk,_Je,uJe,bJe,Jg,uJ,vJe,TJe,gk,FJe,CJe,MJe,As,bJ,EJe,yJe,hk,wJe,AJe,pk,LJe,BJe,xJe,Ls,vJ,kJe,RJe,_k,SJe,PJe,uk,$Je,IJe,jJe,Bs,TJ,DJe,NJe,bk,qJe,OJe,vk,GJe,XJe,VJe,xs,FJ,zJe,WJe,Tk,QJe,HJe,Fk,UJe,JJe,YJe,ks,CJ,KJe,ZJe,Ck,eYe,oYe,Mk,rYe,tYe,aYe,Rs,MJ,nYe,sYe,Ek,lYe,iYe,yk,dYe,cYe,fYe,Yg,EJ,mYe,gYe,wk,hYe,pYe,_Ye,Kg,yJ,uYe,bYe,Ak,vYe,TYe,FYe,Ss,wJ,CYe,MYe,Lk,EYe,yYe,Bk,wYe,AYe,LYe,Ps,AJ,BYe,xYe,xk,kYe,RYe,kk,SYe,PYe,$Ye,$s,LJ,IYe,jYe,Rk,DYe,NYe,Sk,qYe,OYe,GYe,Zg,BJ,XYe,VYe,Pk,zYe,WYe,QYe,eh,xJ,HYe,UYe,$k,JYe,YYe,KYe,oh,kJ,ZYe,eKe,Ik,oKe,rKe,tKe,rh,RJ,aKe,nKe,jk,sKe,lKe,iKe,Is,SJ,dKe,cKe,Dk,fKe,mKe,Nk,gKe,hKe,pKe,th,PJ,_Ke,uKe,qk,bKe,vKe,TKe,ah,$J,FKe,CKe,Ok,MKe,EKe,yKe,js,IJ,wKe,AKe,Gk,LKe,BKe,Xk,xKe,kKe,RKe,Ds,jJ,SKe,PKe,Vk,$Ke,IKe,zk,jKe,DKe,NKe,DJ,qKe,OKe,dE,GKe,nh,cE,XKe,NJ,VKe,lxe,Qi,sh,qJ,fE,zKe,OJ,WKe,ixe,Ho,mE,QKe,gE,HKe,Wk,UKe,JKe,YKe,hE,KKe,GJ,ZKe,eZe,oZe,$e,pE,rZe,XJ,tZe,aZe,Ga,nZe,VJ,sZe,lZe,zJ,iZe,dZe,WJ,cZe,fZe,mZe,ae,lh,QJ,gZe,hZe,Qk,pZe,_Ze,uZe,ih,HJ,bZe,vZe,Hk,TZe,FZe,CZe,dh,UJ,MZe,EZe,Uk,yZe,wZe,AZe,ch,JJ,LZe,BZe,Jk,xZe,kZe,RZe,fh,YJ,SZe,PZe,Yk,$Ze,IZe,jZe,mh,KJ,DZe,NZe,Kk,qZe,OZe,GZe,gh,ZJ,XZe,VZe,Zk,zZe,WZe,QZe,hh,eY,HZe,UZe,eR,JZe,YZe,KZe,ph,oY,ZZe,eeo,oR,oeo,reo,teo,_h,rY,aeo,neo,rR,seo,leo,ieo,uh,tY,deo,ceo,tR,feo,meo,geo,bh,aY,heo,peo,aR,_eo,ueo,beo,vh,nY,veo,Teo,nR,Feo,Ceo,Meo,Th,sY,Eeo,yeo,sR,weo,Aeo,Leo,Fh,lY,Beo,xeo,lR,keo,Reo,Seo,Ch,iY,Peo,$eo,iR,Ieo,jeo,Deo,Mh,Neo,dY,qeo,Oeo,_E,Geo,Eh,uE,Xeo,cY,Veo,dxe,Hi,yh,fY,bE,zeo,mY,Weo,cxe,Uo,vE,Qeo,TE,Heo,dR,Ueo,Jeo,Yeo,FE,Keo,gY,Zeo,eoo,ooo,Ie,CE,roo,hY,too,aoo,Ui,noo,pY,soo,loo,_Y,ioo,doo,coo,Be,wh,uY,foo,moo,cR,goo,hoo,poo,Ah,bY,_oo,uoo,fR,boo,voo,Too,Lh,vY,Foo,Coo,mR,Moo,Eoo,yoo,Bh,TY,woo,Aoo,gR,Loo,Boo,xoo,xh,FY,koo,Roo,hR,Soo,Poo,$oo,kh,CY,Ioo,joo,pR,Doo,Noo,qoo,Rh,MY,Ooo,Goo,_R,Xoo,Voo,zoo,Sh,EY,Woo,Qoo,uR,Hoo,Uoo,Joo,Ph,Yoo,yY,Koo,Zoo,ME,ero,$h,EE,oro,wY,rro,fxe,Ji,Ih,AY,yE,tro,LY,aro,mxe,Jo,wE,nro,Yi,sro,BY,lro,iro,xY,dro,cro,fro,AE,mro,kY,gro,hro,pro,Vr,LE,_ro,RY,uro,bro,Ki,vro,SY,Tro,Fro,PY,Cro,Mro,Ero,$Y,yro,wro,BE,Aro,je,xE,Lro,IY,Bro,xro,Xa,kro,jY,Rro,Sro,DY,Pro,$ro,NY,Iro,jro,Dro,F,jh,qY,Nro,qro,bR,Oro,Gro,Xro,Dh,OY,Vro,zro,vR,Wro,Qro,Hro,Nh,GY,Uro,Jro,TR,Yro,Kro,Zro,qh,XY,eto,oto,FR,rto,tto,ato,Oh,VY,nto,sto,CR,lto,ito,dto,Gh,zY,cto,fto,MR,mto,gto,hto,Xh,WY,pto,_to,ER,uto,bto,vto,Vh,QY,Tto,Fto,yR,Cto,Mto,Eto,zh,HY,yto,wto,wR,Ato,Lto,Bto,Wh,UY,xto,kto,AR,Rto,Sto,Pto,Qh,JY,$to,Ito,LR,jto,Dto,Nto,Hh,YY,qto,Oto,BR,Gto,Xto,Vto,Uh,KY,zto,Wto,xR,Qto,Hto,Uto,Jh,ZY,Jto,Yto,kR,Kto,Zto,eao,Yh,eK,oao,rao,RR,tao,aao,nao,Kh,oK,sao,lao,SR,iao,dao,cao,Zh,rK,fao,mao,PR,gao,hao,pao,ep,tK,_ao,uao,$R,bao,vao,Tao,op,aK,Fao,Cao,IR,Mao,Eao,yao,rp,nK,wao,Aao,jR,Lao,Bao,xao,tp,sK,kao,Rao,DR,Sao,Pao,$ao,ap,lK,Iao,jao,NR,Dao,Nao,qao,np,iK,Oao,Gao,qR,Xao,Vao,zao,sp,dK,Wao,Qao,OR,Hao,Uao,Jao,lp,cK,Yao,Kao,GR,Zao,eno,ono,ip,fK,rno,tno,XR,ano,nno,sno,dp,mK,lno,ino,VR,dno,cno,fno,Ns,gK,mno,gno,zR,hno,pno,WR,_no,uno,bno,cp,hK,vno,Tno,QR,Fno,Cno,Mno,fp,pK,Eno,yno,HR,wno,Ano,Lno,mp,_K,Bno,xno,UR,kno,Rno,Sno,gp,uK,Pno,$no,JR,Ino,jno,Dno,hp,bK,Nno,qno,YR,Ono,Gno,Xno,pp,vK,Vno,zno,KR,Wno,Qno,Hno,_p,TK,Uno,Jno,ZR,Yno,Kno,Zno,up,FK,eso,oso,eS,rso,tso,aso,bp,CK,nso,sso,oS,lso,iso,dso,vp,MK,cso,fso,rS,mso,gso,hso,Tp,EK,pso,_so,tS,uso,bso,vso,Fp,yK,Tso,Fso,aS,Cso,Mso,Eso,Cp,wK,yso,wso,nS,Aso,Lso,Bso,Mp,AK,xso,kso,sS,Rso,Sso,Pso,Ep,LK,$so,Iso,lS,jso,Dso,Nso,yp,BK,qso,Oso,iS,Gso,Xso,Vso,wp,xK,zso,Wso,dS,Qso,Hso,Uso,Ap,kK,Jso,Yso,cS,Kso,Zso,elo,Lp,RK,olo,rlo,fS,tlo,alo,nlo,Bp,SK,slo,llo,mS,ilo,dlo,clo,xp,PK,flo,mlo,gS,glo,hlo,plo,kp,$K,_lo,ulo,hS,blo,vlo,Tlo,Rp,IK,Flo,Clo,pS,Mlo,Elo,ylo,Sp,jK,wlo,Alo,_S,Llo,Blo,xlo,Pp,DK,klo,Rlo,uS,Slo,Plo,$lo,$p,NK,Ilo,jlo,bS,Dlo,Nlo,qlo,Ip,qK,Olo,Glo,vS,Xlo,Vlo,zlo,jp,OK,Wlo,Qlo,TS,Hlo,Ulo,Jlo,Dp,GK,Ylo,Klo,FS,Zlo,eio,oio,Np,XK,rio,tio,CS,aio,nio,sio,qp,VK,lio,iio,MS,dio,cio,fio,Op,zK,mio,gio,ES,hio,pio,_io,Gp,WK,uio,bio,yS,vio,Tio,Fio,Xp,QK,Cio,Mio,wS,Eio,yio,wio,Vp,HK,Aio,Lio,AS,Bio,xio,kio,zp,UK,Rio,Sio,LS,Pio,$io,Iio,Wp,JK,jio,Dio,BS,Nio,qio,Oio,Qp,YK,Gio,Xio,xS,Vio,zio,Wio,Hp,KK,Qio,Hio,kS,Uio,Jio,Yio,Up,ZK,Kio,Zio,RS,edo,odo,rdo,Jp,eZ,tdo,ado,SS,ndo,sdo,ldo,Yp,oZ,ido,ddo,PS,cdo,fdo,mdo,Kp,rZ,gdo,hdo,$S,pdo,_do,udo,Zp,tZ,bdo,vdo,IS,Tdo,Fdo,Cdo,e_,aZ,Mdo,Edo,jS,ydo,wdo,Ado,o_,nZ,Ldo,Bdo,DS,xdo,kdo,Rdo,r_,sZ,Sdo,Pdo,NS,$do,Ido,jdo,t_,lZ,Ddo,Ndo,qS,qdo,Odo,Gdo,a_,iZ,Xdo,Vdo,OS,zdo,Wdo,Qdo,n_,dZ,Hdo,Udo,GS,Jdo,Ydo,Kdo,s_,cZ,Zdo,eco,XS,oco,rco,tco,l_,fZ,aco,nco,VS,sco,lco,ico,i_,mZ,dco,cco,zS,fco,mco,gco,d_,gZ,hco,pco,WS,_co,uco,bco,c_,hZ,vco,Tco,QS,Fco,Cco,Mco,f_,pZ,Eco,yco,HS,wco,Aco,Lco,m_,_Z,Bco,xco,US,kco,Rco,Sco,g_,uZ,Pco,$co,JS,Ico,jco,Dco,h_,bZ,Nco,qco,YS,Oco,Gco,Xco,p_,Vco,vZ,zco,Wco,TZ,Qco,Hco,FZ,Uco,Jco,kE,gxe,Zi,__,CZ,RE,Yco,MZ,Kco,hxe,Yo,SE,Zco,ed,efo,EZ,ofo,rfo,yZ,tfo,afo,nfo,PE,sfo,wZ,lfo,ifo,dfo,zr,$E,cfo,AZ,ffo,mfo,od,gfo,LZ,hfo,pfo,BZ,_fo,ufo,bfo,xZ,vfo,Tfo,IE,Ffo,De,jE,Cfo,kZ,Mfo,Efo,Va,yfo,RZ,wfo,Afo,SZ,Lfo,Bfo,PZ,xfo,kfo,Rfo,k,u_,$Z,Sfo,Pfo,KS,$fo,Ifo,jfo,b_,IZ,Dfo,Nfo,ZS,qfo,Ofo,Gfo,v_,jZ,Xfo,Vfo,eP,zfo,Wfo,Qfo,T_,DZ,Hfo,Ufo,oP,Jfo,Yfo,Kfo,F_,NZ,Zfo,emo,rP,omo,rmo,tmo,C_,qZ,amo,nmo,tP,smo,lmo,imo,M_,OZ,dmo,cmo,aP,fmo,mmo,gmo,E_,GZ,hmo,pmo,nP,_mo,umo,bmo,y_,XZ,vmo,Tmo,sP,Fmo,Cmo,Mmo,w_,VZ,Emo,ymo,lP,wmo,Amo,Lmo,A_,zZ,Bmo,xmo,iP,kmo,Rmo,Smo,L_,WZ,Pmo,$mo,dP,Imo,jmo,Dmo,B_,QZ,Nmo,qmo,cP,Omo,Gmo,Xmo,x_,HZ,Vmo,zmo,fP,Wmo,Qmo,Hmo,k_,UZ,Umo,Jmo,mP,Ymo,Kmo,Zmo,R_,JZ,ego,ogo,gP,rgo,tgo,ago,S_,YZ,ngo,sgo,hP,lgo,igo,dgo,P_,KZ,cgo,fgo,pP,mgo,ggo,hgo,$_,ZZ,pgo,_go,_P,ugo,bgo,vgo,I_,eee,Tgo,Fgo,uP,Cgo,Mgo,Ego,j_,oee,ygo,wgo,bP,Ago,Lgo,Bgo,D_,ree,xgo,kgo,vP,Rgo,Sgo,Pgo,N_,tee,$go,Igo,TP,jgo,Dgo,Ngo,q_,aee,qgo,Ogo,FP,Ggo,Xgo,Vgo,O_,nee,zgo,Wgo,CP,Qgo,Hgo,Ugo,G_,see,Jgo,Ygo,MP,Kgo,Zgo,eho,X_,lee,oho,rho,EP,tho,aho,nho,V_,iee,sho,lho,yP,iho,dho,cho,z_,dee,fho,mho,wP,gho,hho,pho,W_,cee,_ho,uho,AP,bho,vho,Tho,Q_,fee,Fho,Cho,LP,Mho,Eho,yho,H_,mee,who,Aho,BP,Lho,Bho,xho,U_,gee,kho,Rho,xP,Sho,Pho,$ho,J_,hee,Iho,jho,kP,Dho,Nho,qho,Y_,pee,Oho,Gho,RP,Xho,Vho,zho,K_,_ee,Who,Qho,SP,Hho,Uho,Jho,Z_,uee,Yho,Kho,PP,Zho,epo,opo,eu,bee,rpo,tpo,$P,apo,npo,spo,ou,vee,lpo,ipo,IP,dpo,cpo,fpo,ru,mpo,Tee,gpo,hpo,Fee,ppo,_po,Cee,upo,bpo,DE,pxe,rd,tu,Mee,NE,vpo,Eee,Tpo,_xe,Ko,qE,Fpo,td,Cpo,yee,Mpo,Epo,wee,ypo,wpo,Apo,OE,Lpo,Aee,Bpo,xpo,kpo,Wr,GE,Rpo,Lee,Spo,Ppo,ad,$po,Bee,Ipo,jpo,xee,Dpo,Npo,qpo,kee,Opo,Gpo,XE,Xpo,Ne,VE,Vpo,Ree,zpo,Wpo,za,Qpo,See,Hpo,Upo,Pee,Jpo,Ypo,$ee,Kpo,Zpo,e_o,$,au,Iee,o_o,r_o,jP,t_o,a_o,n_o,nu,jee,s_o,l_o,DP,i_o,d_o,c_o,su,Dee,f_o,m_o,NP,g_o,h_o,p_o,lu,Nee,__o,u_o,qP,b_o,v_o,T_o,iu,qee,F_o,C_o,OP,M_o,E_o,y_o,du,Oee,w_o,A_o,GP,L_o,B_o,x_o,cu,Gee,k_o,R_o,XP,S_o,P_o,$_o,fu,Xee,I_o,j_o,VP,D_o,N_o,q_o,mu,Vee,O_o,G_o,zP,X_o,V_o,z_o,gu,zee,W_o,Q_o,WP,H_o,U_o,J_o,hu,Wee,Y_o,K_o,QP,Z_o,euo,ouo,pu,Qee,ruo,tuo,HP,auo,nuo,suo,_u,Hee,luo,iuo,UP,duo,cuo,fuo,uu,Uee,muo,guo,JP,huo,puo,_uo,bu,Jee,uuo,buo,YP,vuo,Tuo,Fuo,vu,Yee,Cuo,Muo,KP,Euo,yuo,wuo,Tu,Kee,Auo,Luo,ZP,Buo,xuo,kuo,Fu,Zee,Ruo,Suo,e$,Puo,$uo,Iuo,Cu,eoe,juo,Duo,o$,Nuo,quo,Ouo,Mu,ooe,Guo,Xuo,r$,Vuo,zuo,Wuo,Eu,roe,Quo,Huo,t$,Uuo,Juo,Yuo,yu,toe,Kuo,Zuo,a$,e1o,o1o,r1o,wu,aoe,t1o,a1o,n$,n1o,s1o,l1o,Au,noe,i1o,d1o,s$,c1o,f1o,m1o,Lu,soe,g1o,h1o,l$,p1o,_1o,u1o,Bu,loe,b1o,v1o,i$,T1o,F1o,C1o,xu,ioe,M1o,E1o,d$,y1o,w1o,A1o,ku,doe,L1o,B1o,c$,x1o,k1o,R1o,Ru,coe,S1o,P1o,f$,$1o,I1o,j1o,Su,foe,D1o,N1o,m$,q1o,O1o,G1o,Pu,moe,X1o,V1o,g$,z1o,W1o,Q1o,$u,goe,H1o,U1o,h$,J1o,Y1o,K1o,Iu,hoe,Z1o,ebo,p$,obo,rbo,tbo,ju,poe,abo,nbo,_$,sbo,lbo,ibo,Du,_oe,dbo,cbo,u$,fbo,mbo,gbo,Nu,hbo,uoe,pbo,_bo,boe,ubo,bbo,voe,vbo,Tbo,zE,uxe,nd,qu,Toe,WE,Fbo,Foe,Cbo,bxe,Zo,QE,Mbo,sd,Ebo,Coe,ybo,wbo,Moe,Abo,Lbo,Bbo,HE,xbo,Eoe,kbo,Rbo,Sbo,Qr,UE,Pbo,yoe,$bo,Ibo,ld,jbo,woe,Dbo,Nbo,Aoe,qbo,Obo,Gbo,Loe,Xbo,Vbo,JE,zbo,qe,YE,Wbo,Boe,Qbo,Hbo,Wa,Ubo,xoe,Jbo,Ybo,koe,Kbo,Zbo,Roe,e3o,o3o,r3o,I,Ou,Soe,t3o,a3o,b$,n3o,s3o,l3o,Gu,Poe,i3o,d3o,v$,c3o,f3o,m3o,Xu,$oe,g3o,h3o,T$,p3o,_3o,u3o,Vu,Ioe,b3o,v3o,F$,T3o,F3o,C3o,zu,joe,M3o,E3o,C$,y3o,w3o,A3o,Wu,Doe,L3o,B3o,M$,x3o,k3o,R3o,Qu,Noe,S3o,P3o,E$,$3o,I3o,j3o,Hu,qoe,D3o,N3o,y$,q3o,O3o,G3o,Uu,Ooe,X3o,V3o,w$,z3o,W3o,Q3o,Ju,Goe,H3o,U3o,A$,J3o,Y3o,K3o,Yu,Xoe,Z3o,e5o,L$,o5o,r5o,t5o,Ku,Voe,a5o,n5o,B$,s5o,l5o,i5o,Zu,zoe,d5o,c5o,x$,f5o,m5o,g5o,e1,Woe,h5o,p5o,k$,_5o,u5o,b5o,o1,Qoe,v5o,T5o,R$,F5o,C5o,M5o,r1,Hoe,E5o,y5o,S$,w5o,A5o,L5o,t1,Uoe,B5o,x5o,P$,k5o,R5o,S5o,a1,Joe,P5o,$5o,$$,I5o,j5o,D5o,n1,Yoe,N5o,q5o,I$,O5o,G5o,X5o,s1,Koe,V5o,z5o,j$,W5o,Q5o,H5o,l1,Zoe,U5o,J5o,D$,Y5o,K5o,Z5o,i1,ere,e2o,o2o,N$,r2o,t2o,a2o,d1,ore,n2o,s2o,q$,l2o,i2o,d2o,c1,rre,c2o,f2o,O$,m2o,g2o,h2o,f1,tre,p2o,_2o,G$,u2o,b2o,v2o,m1,are,T2o,F2o,X$,C2o,M2o,E2o,g1,nre,y2o,w2o,V$,A2o,L2o,B2o,h1,sre,x2o,k2o,z$,R2o,S2o,P2o,p1,lre,$2o,I2o,W$,j2o,D2o,N2o,_1,ire,q2o,O2o,Q$,G2o,X2o,V2o,u1,dre,z2o,W2o,cre,Q2o,H2o,U2o,b1,fre,J2o,Y2o,H$,K2o,Z2o,evo,v1,mre,ovo,rvo,U$,tvo,avo,nvo,T1,gre,svo,lvo,J$,ivo,dvo,cvo,F1,hre,fvo,mvo,Y$,gvo,hvo,pvo,C1,_vo,pre,uvo,bvo,_re,vvo,Tvo,ure,Fvo,Cvo,KE,vxe,id,M1,bre,ZE,Mvo,vre,Evo,Txe,er,ey,yvo,dd,wvo,Tre,Avo,Lvo,Fre,Bvo,xvo,kvo,oy,Rvo,Cre,Svo,Pvo,$vo,Hr,ry,Ivo,Mre,jvo,Dvo,cd,Nvo,Ere,qvo,Ovo,yre,Gvo,Xvo,Vvo,wre,zvo,Wvo,ty,Qvo,Oe,ay,Hvo,Are,Uvo,Jvo,Qa,Yvo,Lre,Kvo,Zvo,Bre,eTo,oTo,xre,rTo,tTo,aTo,ne,E1,kre,nTo,sTo,K$,lTo,iTo,dTo,y1,Rre,cTo,fTo,Z$,mTo,gTo,hTo,w1,Sre,pTo,_To,eI,uTo,bTo,vTo,A1,Pre,TTo,FTo,oI,CTo,MTo,ETo,L1,$re,yTo,wTo,rI,ATo,LTo,BTo,B1,Ire,xTo,kTo,tI,RTo,STo,PTo,x1,jre,$To,ITo,aI,jTo,DTo,NTo,k1,Dre,qTo,OTo,nI,GTo,XTo,VTo,R1,Nre,zTo,WTo,sI,QTo,HTo,UTo,S1,qre,JTo,YTo,lI,KTo,ZTo,e8o,P1,Ore,o8o,r8o,iI,t8o,a8o,n8o,$1,Gre,s8o,l8o,dI,i8o,d8o,c8o,I1,Xre,f8o,m8o,cI,g8o,h8o,p8o,j1,Vre,_8o,u8o,fI,b8o,v8o,T8o,D1,zre,F8o,C8o,mI,M8o,E8o,y8o,N1,Wre,w8o,A8o,gI,L8o,B8o,x8o,q1,k8o,Qre,R8o,S8o,Hre,P8o,$8o,Ure,I8o,j8o,ny,Fxe,fd,O1,Jre,sy,D8o,Yre,N8o,Cxe,or,ly,q8o,md,O8o,Kre,G8o,X8o,Zre,V8o,z8o,W8o,iy,Q8o,ete,H8o,U8o,J8o,Ur,dy,Y8o,ote,K8o,Z8o,gd,eFo,rte,oFo,rFo,tte,tFo,aFo,nFo,ate,sFo,lFo,cy,iFo,Ge,fy,dFo,nte,cFo,fFo,Ha,mFo,ste,gFo,hFo,lte,pFo,_Fo,ite,uFo,bFo,vFo,A,G1,dte,TFo,FFo,hI,CFo,MFo,EFo,X1,cte,yFo,wFo,pI,AFo,LFo,BFo,V1,fte,xFo,kFo,_I,RFo,SFo,PFo,z1,mte,$Fo,IFo,uI,jFo,DFo,NFo,W1,gte,qFo,OFo,bI,GFo,XFo,VFo,Q1,hte,zFo,WFo,vI,QFo,HFo,UFo,H1,pte,JFo,YFo,TI,KFo,ZFo,eCo,U1,_te,oCo,rCo,FI,tCo,aCo,nCo,J1,ute,sCo,lCo,CI,iCo,dCo,cCo,Y1,bte,fCo,mCo,MI,gCo,hCo,pCo,K1,vte,_Co,uCo,EI,bCo,vCo,TCo,Z1,Tte,FCo,CCo,yI,MCo,ECo,yCo,eb,Fte,wCo,ACo,wI,LCo,BCo,xCo,ob,Cte,kCo,RCo,AI,SCo,PCo,$Co,rb,Mte,ICo,jCo,LI,DCo,NCo,qCo,tb,Ete,OCo,GCo,BI,XCo,VCo,zCo,ab,yte,WCo,QCo,xI,HCo,UCo,JCo,nb,wte,YCo,KCo,kI,ZCo,eMo,oMo,sb,Ate,rMo,tMo,RI,aMo,nMo,sMo,lb,Lte,lMo,iMo,SI,dMo,cMo,fMo,ib,Bte,mMo,gMo,PI,hMo,pMo,_Mo,db,xte,uMo,bMo,$I,vMo,TMo,FMo,cb,kte,CMo,MMo,II,EMo,yMo,wMo,fb,Rte,AMo,LMo,jI,BMo,xMo,kMo,mb,Ste,RMo,SMo,DI,PMo,$Mo,IMo,gb,Pte,jMo,DMo,NI,NMo,qMo,OMo,hb,$te,GMo,XMo,qI,VMo,zMo,WMo,pb,Ite,QMo,HMo,OI,UMo,JMo,YMo,_b,jte,KMo,ZMo,GI,e4o,o4o,r4o,ub,Dte,t4o,a4o,XI,n4o,s4o,l4o,bb,Nte,i4o,d4o,VI,c4o,f4o,m4o,vb,qte,g4o,h4o,zI,p4o,_4o,u4o,Tb,Ote,b4o,v4o,WI,T4o,F4o,C4o,Fb,Gte,M4o,E4o,QI,y4o,w4o,A4o,Cb,Xte,L4o,B4o,HI,x4o,k4o,R4o,Mb,Vte,S4o,P4o,UI,$4o,I4o,j4o,Eb,zte,D4o,N4o,JI,q4o,O4o,G4o,yb,Wte,X4o,V4o,YI,z4o,W4o,Q4o,wb,Qte,H4o,U4o,KI,J4o,Y4o,K4o,Ab,Hte,Z4o,eEo,ZI,oEo,rEo,tEo,Lb,Ute,aEo,nEo,ej,sEo,lEo,iEo,Bb,Jte,dEo,cEo,oj,fEo,mEo,gEo,xb,Yte,hEo,pEo,rj,_Eo,uEo,bEo,kb,Kte,vEo,TEo,tj,FEo,CEo,MEo,Rb,Zte,EEo,yEo,aj,wEo,AEo,LEo,Sb,eae,BEo,xEo,nj,kEo,REo,SEo,Pb,PEo,oae,$Eo,IEo,rae,jEo,DEo,tae,NEo,qEo,my,Mxe,hd,$b,aae,gy,OEo,nae,GEo,Exe,rr,hy,XEo,pd,VEo,sae,zEo,WEo,lae,QEo,HEo,UEo,py,JEo,iae,YEo,KEo,ZEo,Jr,_y,eyo,dae,oyo,ryo,_d,tyo,cae,ayo,nyo,fae,syo,lyo,iyo,mae,dyo,cyo,uy,fyo,Xe,by,myo,gae,gyo,hyo,Ua,pyo,hae,_yo,uyo,pae,byo,vyo,_ae,Tyo,Fyo,Cyo,O,Ib,uae,Myo,Eyo,sj,yyo,wyo,Ayo,jb,bae,Lyo,Byo,lj,xyo,kyo,Ryo,Db,vae,Syo,Pyo,ij,$yo,Iyo,jyo,Nb,Tae,Dyo,Nyo,dj,qyo,Oyo,Gyo,qb,Fae,Xyo,Vyo,cj,zyo,Wyo,Qyo,Ob,Cae,Hyo,Uyo,fj,Jyo,Yyo,Kyo,Gb,Mae,Zyo,ewo,mj,owo,rwo,two,Xb,Eae,awo,nwo,gj,swo,lwo,iwo,Vb,yae,dwo,cwo,hj,fwo,mwo,gwo,zb,wae,hwo,pwo,pj,_wo,uwo,bwo,Wb,Aae,vwo,Two,_j,Fwo,Cwo,Mwo,Qb,Lae,Ewo,ywo,uj,wwo,Awo,Lwo,Hb,Bae,Bwo,xwo,bj,kwo,Rwo,Swo,Ub,xae,Pwo,$wo,vj,Iwo,jwo,Dwo,Jb,kae,Nwo,qwo,Tj,Owo,Gwo,Xwo,Yb,Rae,Vwo,zwo,Fj,Wwo,Qwo,Hwo,Kb,Sae,Uwo,Jwo,Cj,Ywo,Kwo,Zwo,Zb,Pae,e6o,o6o,Mj,r6o,t6o,a6o,e3,$ae,n6o,s6o,Ej,l6o,i6o,d6o,o3,Iae,c6o,f6o,yj,m6o,g6o,h6o,r3,jae,p6o,_6o,wj,u6o,b6o,v6o,t3,Dae,T6o,F6o,Aj,C6o,M6o,E6o,a3,Nae,y6o,w6o,Lj,A6o,L6o,B6o,n3,qae,x6o,k6o,Bj,R6o,S6o,P6o,s3,Oae,$6o,I6o,xj,j6o,D6o,N6o,l3,Gae,q6o,O6o,kj,G6o,X6o,V6o,i3,Xae,z6o,W6o,Rj,Q6o,H6o,U6o,d3,Vae,J6o,Y6o,Sj,K6o,Z6o,eAo,c3,oAo,zae,rAo,tAo,Wae,aAo,nAo,Qae,sAo,lAo,vy,yxe,ud,f3,Hae,Ty,iAo,Uae,dAo,wxe,tr,Fy,cAo,bd,fAo,Jae,mAo,gAo,Yae,hAo,pAo,_Ao,Cy,uAo,Kae,bAo,vAo,TAo,Yr,My,FAo,Zae,CAo,MAo,vd,EAo,ene,yAo,wAo,one,AAo,LAo,BAo,rne,xAo,kAo,Ey,RAo,Ve,yy,SAo,tne,PAo,$Ao,Ja,IAo,ane,jAo,DAo,nne,NAo,qAo,sne,OAo,GAo,XAo,da,m3,lne,VAo,zAo,Pj,WAo,QAo,HAo,g3,ine,UAo,JAo,$j,YAo,KAo,ZAo,h3,dne,e0o,o0o,Ij,r0o,t0o,a0o,p3,cne,n0o,s0o,jj,l0o,i0o,d0o,_3,fne,c0o,f0o,Dj,m0o,g0o,h0o,u3,p0o,mne,_0o,u0o,gne,b0o,v0o,hne,T0o,F0o,wy,Axe,Td,b3,pne,Ay,C0o,_ne,M0o,Lxe,ar,Ly,E0o,Fd,y0o,une,w0o,A0o,bne,L0o,B0o,x0o,By,k0o,vne,R0o,S0o,P0o,Kr,xy,$0o,Tne,I0o,j0o,Cd,D0o,Fne,N0o,q0o,Cne,O0o,G0o,X0o,Mne,V0o,z0o,ky,W0o,ze,Ry,Q0o,Ene,H0o,U0o,Ya,J0o,yne,Y0o,K0o,wne,Z0o,eLo,Ane,oLo,rLo,tLo,N,v3,Lne,aLo,nLo,Nj,sLo,lLo,iLo,T3,Bne,dLo,cLo,qj,fLo,mLo,gLo,F3,xne,hLo,pLo,Oj,_Lo,uLo,bLo,C3,kne,vLo,TLo,Gj,FLo,CLo,MLo,M3,Rne,ELo,yLo,Xj,wLo,ALo,LLo,E3,Sne,BLo,xLo,Vj,kLo,RLo,SLo,y3,Pne,PLo,$Lo,zj,ILo,jLo,DLo,w3,$ne,NLo,qLo,Wj,OLo,GLo,XLo,A3,Ine,VLo,zLo,Qj,WLo,QLo,HLo,L3,jne,ULo,JLo,Hj,YLo,KLo,ZLo,B3,Dne,e7o,o7o,Uj,r7o,t7o,a7o,x3,Nne,n7o,s7o,Jj,l7o,i7o,d7o,k3,qne,c7o,f7o,Yj,m7o,g7o,h7o,R3,One,p7o,_7o,Kj,u7o,b7o,v7o,S3,Gne,T7o,F7o,Zj,C7o,M7o,E7o,P3,Xne,y7o,w7o,eD,A7o,L7o,B7o,$3,Vne,x7o,k7o,oD,R7o,S7o,P7o,I3,zne,$7o,I7o,rD,j7o,D7o,N7o,j3,Wne,q7o,O7o,tD,G7o,X7o,V7o,D3,Qne,z7o,W7o,aD,Q7o,H7o,U7o,N3,Hne,J7o,Y7o,nD,K7o,Z7o,e9o,q3,Une,o9o,r9o,sD,t9o,a9o,n9o,O3,Jne,s9o,l9o,lD,i9o,d9o,c9o,G3,Yne,f9o,m9o,iD,g9o,h9o,p9o,X3,Kne,_9o,u9o,dD,b9o,v9o,T9o,V3,Zne,F9o,C9o,cD,M9o,E9o,y9o,z3,ese,w9o,A9o,fD,L9o,B9o,x9o,W3,ose,k9o,R9o,mD,S9o,P9o,$9o,Q3,rse,I9o,j9o,gD,D9o,N9o,q9o,H3,tse,O9o,G9o,hD,X9o,V9o,z9o,U3,ase,W9o,Q9o,pD,H9o,U9o,J9o,J3,nse,Y9o,K9o,_D,Z9o,eBo,oBo,Y3,sse,rBo,tBo,uD,aBo,nBo,sBo,K3,lBo,lse,iBo,dBo,ise,cBo,fBo,dse,mBo,gBo,Sy,Bxe,Md,Z3,cse,Py,hBo,fse,pBo,xxe,nr,$y,_Bo,Ed,uBo,mse,bBo,vBo,gse,TBo,FBo,CBo,Iy,MBo,hse,EBo,yBo,wBo,Zr,jy,ABo,pse,LBo,BBo,yd,xBo,_se,kBo,RBo,use,SBo,PBo,$Bo,bse,IBo,jBo,Dy,DBo,We,Ny,NBo,vse,qBo,OBo,Ka,GBo,Tse,XBo,VBo,Fse,zBo,WBo,Cse,QBo,HBo,UBo,R,e5,Mse,JBo,YBo,bD,KBo,ZBo,exo,o5,Ese,oxo,rxo,vD,txo,axo,nxo,r5,yse,sxo,lxo,TD,ixo,dxo,cxo,t5,wse,fxo,mxo,FD,gxo,hxo,pxo,a5,Ase,_xo,uxo,CD,bxo,vxo,Txo,n5,Lse,Fxo,Cxo,MD,Mxo,Exo,yxo,s5,Bse,wxo,Axo,ED,Lxo,Bxo,xxo,l5,xse,kxo,Rxo,yD,Sxo,Pxo,$xo,i5,kse,Ixo,jxo,wD,Dxo,Nxo,qxo,d5,Rse,Oxo,Gxo,AD,Xxo,Vxo,zxo,c5,Sse,Wxo,Qxo,LD,Hxo,Uxo,Jxo,f5,Pse,Yxo,Kxo,BD,Zxo,eko,oko,m5,$se,rko,tko,xD,ako,nko,sko,g5,Ise,lko,iko,kD,dko,cko,fko,h5,jse,mko,gko,RD,hko,pko,_ko,p5,Dse,uko,bko,SD,vko,Tko,Fko,_5,Nse,Cko,Mko,PD,Eko,yko,wko,u5,qse,Ako,Lko,$D,Bko,xko,kko,b5,Ose,Rko,Sko,ID,Pko,$ko,Iko,v5,Gse,jko,Dko,jD,Nko,qko,Oko,T5,Xse,Gko,Xko,DD,Vko,zko,Wko,F5,Vse,Qko,Hko,ND,Uko,Jko,Yko,C5,zse,Kko,Zko,qD,eRo,oRo,rRo,M5,Wse,tRo,aRo,OD,nRo,sRo,lRo,E5,Qse,iRo,dRo,GD,cRo,fRo,mRo,y5,Hse,gRo,hRo,XD,pRo,_Ro,uRo,w5,Use,bRo,vRo,VD,TRo,FRo,CRo,A5,Jse,MRo,ERo,zD,yRo,wRo,ARo,L5,Yse,LRo,BRo,WD,xRo,kRo,RRo,B5,Kse,SRo,PRo,QD,$Ro,IRo,jRo,x5,Zse,DRo,NRo,HD,qRo,ORo,GRo,k5,ele,XRo,VRo,UD,zRo,WRo,QRo,R5,ole,HRo,URo,JD,JRo,YRo,KRo,S5,rle,ZRo,eSo,YD,oSo,rSo,tSo,P5,tle,aSo,nSo,KD,sSo,lSo,iSo,$5,ale,dSo,cSo,ZD,fSo,mSo,gSo,I5,nle,hSo,pSo,eN,_So,uSo,bSo,j5,sle,vSo,TSo,oN,FSo,CSo,MSo,D5,lle,ESo,ySo,rN,wSo,ASo,LSo,N5,BSo,ile,xSo,kSo,dle,RSo,SSo,cle,PSo,$So,qy,kxe,wd,q5,fle,Oy,ISo,mle,jSo,Rxe,sr,Gy,DSo,Ad,NSo,gle,qSo,OSo,hle,GSo,XSo,VSo,Xy,zSo,ple,WSo,QSo,HSo,et,Vy,USo,_le,JSo,YSo,Ld,KSo,ule,ZSo,ePo,ble,oPo,rPo,tPo,vle,aPo,nPo,zy,sPo,Qe,Wy,lPo,Tle,iPo,dPo,Za,cPo,Fle,fPo,mPo,Cle,gPo,hPo,Mle,pPo,_Po,uPo,Ele,O5,yle,bPo,vPo,tN,TPo,FPo,CPo,G5,MPo,wle,EPo,yPo,Ale,wPo,APo,Lle,LPo,BPo,Qy,Sxe,Bd,X5,Ble,Hy,xPo,xle,kPo,Pxe,lr,Uy,RPo,xd,SPo,kle,PPo,$Po,Rle,IPo,jPo,DPo,Jy,NPo,Sle,qPo,OPo,GPo,ot,Yy,XPo,Ple,VPo,zPo,kd,WPo,$le,QPo,HPo,Ile,UPo,JPo,YPo,jle,KPo,ZPo,Ky,e$o,He,Zy,o$o,Dle,r$o,t$o,en,a$o,Nle,n$o,s$o,qle,l$o,i$o,Ole,d$o,c$o,f$o,Fe,V5,Gle,m$o,g$o,aN,h$o,p$o,_$o,z5,Xle,u$o,b$o,nN,v$o,T$o,F$o,qs,Vle,C$o,M$o,sN,E$o,y$o,lN,w$o,A$o,L$o,W5,zle,B$o,x$o,iN,k$o,R$o,S$o,fa,Wle,P$o,$$o,dN,I$o,j$o,cN,D$o,N$o,fN,q$o,O$o,G$o,Q5,Qle,X$o,V$o,mN,z$o,W$o,Q$o,H5,Hle,H$o,U$o,gN,J$o,Y$o,K$o,U5,Ule,Z$o,eIo,hN,oIo,rIo,tIo,J5,Jle,aIo,nIo,pN,sIo,lIo,iIo,Y5,dIo,Yle,cIo,fIo,Kle,mIo,gIo,Zle,hIo,pIo,ew,$xe,Rd,K5,eie,ow,_Io,oie,uIo,Ixe,ir,rw,bIo,Sd,vIo,rie,TIo,FIo,tie,CIo,MIo,EIo,tw,yIo,aie,wIo,AIo,LIo,rt,aw,BIo,nie,xIo,kIo,Pd,RIo,sie,SIo,PIo,lie,$Io,IIo,jIo,iie,DIo,NIo,nw,qIo,Ue,sw,OIo,die,GIo,XIo,on,VIo,cie,zIo,WIo,fie,QIo,HIo,mie,UIo,JIo,YIo,gie,Z5,hie,KIo,ZIo,_N,ejo,ojo,rjo,e2,tjo,pie,ajo,njo,_ie,sjo,ljo,uie,ijo,djo,lw,jxe,$d,o2,bie,iw,cjo,vie,fjo,Dxe,dr,dw,mjo,Id,gjo,Tie,hjo,pjo,Fie,_jo,ujo,bjo,cw,vjo,Cie,Tjo,Fjo,Cjo,tt,fw,Mjo,Mie,Ejo,yjo,jd,wjo,Eie,Ajo,Ljo,yie,Bjo,xjo,kjo,wie,Rjo,Sjo,mw,Pjo,Je,gw,$jo,Aie,Ijo,jjo,rn,Djo,Lie,Njo,qjo,Bie,Ojo,Gjo,xie,Xjo,Vjo,zjo,xe,r2,kie,Wjo,Qjo,uN,Hjo,Ujo,Jjo,t2,Rie,Yjo,Kjo,bN,Zjo,eDo,oDo,a2,Sie,rDo,tDo,vN,aDo,nDo,sDo,n2,Pie,lDo,iDo,TN,dDo,cDo,fDo,s2,$ie,mDo,gDo,FN,hDo,pDo,_Do,l2,Iie,uDo,bDo,CN,vDo,TDo,FDo,i2,jie,CDo,MDo,MN,EDo,yDo,wDo,d2,Die,ADo,LDo,EN,BDo,xDo,kDo,c2,RDo,Nie,SDo,PDo,qie,$Do,IDo,Oie,jDo,DDo,hw,Nxe,Dd,f2,Gie,pw,NDo,Xie,qDo,qxe,cr,_w,ODo,Nd,GDo,Vie,XDo,VDo,zie,zDo,WDo,QDo,uw,HDo,Wie,UDo,JDo,YDo,at,bw,KDo,Qie,ZDo,eNo,qd,oNo,Hie,rNo,tNo,Uie,aNo,nNo,sNo,Jie,lNo,iNo,vw,dNo,Ye,Tw,cNo,Yie,fNo,mNo,tn,gNo,Kie,hNo,pNo,Zie,_No,uNo,ede,bNo,vNo,TNo,an,m2,ode,FNo,CNo,yN,MNo,ENo,yNo,g2,rde,wNo,ANo,wN,LNo,BNo,xNo,h2,tde,kNo,RNo,AN,SNo,PNo,$No,p2,ade,INo,jNo,LN,DNo,NNo,qNo,_2,ONo,nde,GNo,XNo,sde,VNo,zNo,lde,WNo,QNo,Fw,Oxe,Od,u2,ide,Cw,HNo,dde,UNo,Gxe,fr,Mw,JNo,Gd,YNo,cde,KNo,ZNo,fde,eqo,oqo,rqo,Ew,tqo,mde,aqo,nqo,sqo,nt,yw,lqo,gde,iqo,dqo,Xd,cqo,hde,fqo,mqo,pde,gqo,hqo,pqo,_de,_qo,uqo,ww,bqo,Ke,Aw,vqo,ude,Tqo,Fqo,nn,Cqo,bde,Mqo,Eqo,vde,yqo,wqo,Tde,Aqo,Lqo,Bqo,ke,b2,Fde,xqo,kqo,BN,Rqo,Sqo,Pqo,v2,Cde,$qo,Iqo,xN,jqo,Dqo,Nqo,T2,Mde,qqo,Oqo,kN,Gqo,Xqo,Vqo,F2,Ede,zqo,Wqo,RN,Qqo,Hqo,Uqo,C2,yde,Jqo,Yqo,SN,Kqo,Zqo,eOo,M2,wde,oOo,rOo,PN,tOo,aOo,nOo,E2,Ade,sOo,lOo,$N,iOo,dOo,cOo,y2,Lde,fOo,mOo,IN,gOo,hOo,pOo,w2,_Oo,Bde,uOo,bOo,xde,vOo,TOo,kde,FOo,COo,Lw,Xxe,Vd,A2,Rde,Bw,MOo,Sde,EOo,Vxe,mr,xw,yOo,zd,wOo,Pde,AOo,LOo,$de,BOo,xOo,kOo,kw,ROo,Ide,SOo,POo,$Oo,st,Rw,IOo,jde,jOo,DOo,Wd,NOo,Dde,qOo,OOo,Nde,GOo,XOo,VOo,qde,zOo,WOo,Sw,QOo,Ze,Pw,HOo,Ode,UOo,JOo,sn,YOo,Gde,KOo,ZOo,Xde,eGo,oGo,Vde,rGo,tGo,aGo,$w,L2,zde,nGo,sGo,jN,lGo,iGo,dGo,B2,Wde,cGo,fGo,DN,mGo,gGo,hGo,x2,pGo,Qde,_Go,uGo,Hde,bGo,vGo,Ude,TGo,FGo,Iw,zxe,Qd,k2,Jde,jw,CGo,Yde,MGo,Wxe,gr,Dw,EGo,Hd,yGo,Kde,wGo,AGo,Zde,LGo,BGo,xGo,Nw,kGo,ece,RGo,SGo,PGo,lt,qw,$Go,oce,IGo,jGo,Ud,DGo,rce,NGo,qGo,tce,OGo,GGo,XGo,ace,VGo,zGo,Ow,WGo,eo,Gw,QGo,nce,HGo,UGo,ln,JGo,sce,YGo,KGo,lce,ZGo,eXo,ice,oXo,rXo,tXo,dn,R2,dce,aXo,nXo,NN,sXo,lXo,iXo,S2,cce,dXo,cXo,qN,fXo,mXo,gXo,P2,fce,hXo,pXo,ON,_Xo,uXo,bXo,$2,mce,vXo,TXo,GN,FXo,CXo,MXo,I2,EXo,gce,yXo,wXo,hce,AXo,LXo,pce,BXo,xXo,Xw,Qxe,Jd,j2,_ce,Vw,kXo,uce,RXo,Hxe,hr,zw,SXo,Yd,PXo,bce,$Xo,IXo,vce,jXo,DXo,NXo,Ww,qXo,Tce,OXo,GXo,XXo,it,Qw,VXo,Fce,zXo,WXo,Kd,QXo,Cce,HXo,UXo,Mce,JXo,YXo,KXo,Ece,ZXo,eVo,Hw,oVo,oo,Uw,rVo,yce,tVo,aVo,cn,nVo,wce,sVo,lVo,Ace,iVo,dVo,Lce,cVo,fVo,mVo,Zd,D2,Bce,gVo,hVo,XN,pVo,_Vo,uVo,N2,xce,bVo,vVo,VN,TVo,FVo,CVo,q2,kce,MVo,EVo,zN,yVo,wVo,AVo,O2,LVo,Rce,BVo,xVo,Sce,kVo,RVo,Pce,SVo,PVo,Jw,Uxe,ec,G2,$ce,Yw,$Vo,Ice,IVo,Jxe,pr,Kw,jVo,oc,DVo,jce,NVo,qVo,Dce,OVo,GVo,XVo,Zw,VVo,Nce,zVo,WVo,QVo,dt,e6,HVo,qce,UVo,JVo,rc,YVo,Oce,KVo,ZVo,Gce,ezo,ozo,rzo,Xce,tzo,azo,o6,nzo,ro,r6,szo,Vce,lzo,izo,fn,dzo,zce,czo,fzo,Wce,mzo,gzo,Qce,hzo,pzo,_zo,Hce,X2,Uce,uzo,bzo,WN,vzo,Tzo,Fzo,V2,Czo,Jce,Mzo,Ezo,Yce,yzo,wzo,Kce,Azo,Lzo,t6,Yxe,tc,z2,Zce,a6,Bzo,efe,xzo,Kxe,_r,n6,kzo,ac,Rzo,ofe,Szo,Pzo,rfe,$zo,Izo,jzo,s6,Dzo,tfe,Nzo,qzo,Ozo,ct,l6,Gzo,afe,Xzo,Vzo,nc,zzo,nfe,Wzo,Qzo,sfe,Hzo,Uzo,Jzo,lfe,Yzo,Kzo,i6,Zzo,to,d6,eWo,ife,oWo,rWo,mn,tWo,dfe,aWo,nWo,cfe,sWo,lWo,ffe,iWo,dWo,cWo,mfe,W2,gfe,fWo,mWo,QN,gWo,hWo,pWo,Q2,_Wo,hfe,uWo,bWo,pfe,vWo,TWo,_fe,FWo,CWo,c6,Zxe,sc,H2,ufe,f6,MWo,bfe,EWo,eke,ur,m6,yWo,lc,wWo,vfe,AWo,LWo,Tfe,BWo,xWo,kWo,g6,RWo,Ffe,SWo,PWo,$Wo,ft,h6,IWo,Cfe,jWo,DWo,ic,NWo,Mfe,qWo,OWo,Efe,GWo,XWo,VWo,yfe,zWo,WWo,p6,QWo,ao,_6,HWo,wfe,UWo,JWo,gn,YWo,Afe,KWo,ZWo,Lfe,eQo,oQo,Bfe,rQo,tQo,aQo,u6,U2,xfe,nQo,sQo,HN,lQo,iQo,dQo,J2,kfe,cQo,fQo,UN,mQo,gQo,hQo,Y2,pQo,Rfe,_Qo,uQo,Sfe,bQo,vQo,Pfe,TQo,FQo,b6,oke,dc,K2,$fe,v6,CQo,Ife,MQo,rke,br,T6,EQo,cc,yQo,jfe,wQo,AQo,Dfe,LQo,BQo,xQo,F6,kQo,Nfe,RQo,SQo,PQo,mt,C6,$Qo,qfe,IQo,jQo,fc,DQo,Ofe,NQo,qQo,Gfe,OQo,GQo,XQo,Xfe,VQo,zQo,M6,WQo,no,E6,QQo,Vfe,HQo,UQo,hn,JQo,zfe,YQo,KQo,Wfe,ZQo,eHo,Qfe,oHo,rHo,tHo,Hfe,Z2,Ufe,aHo,nHo,JN,sHo,lHo,iHo,ev,dHo,Jfe,cHo,fHo,Yfe,mHo,gHo,Kfe,hHo,pHo,y6,tke,mc,ov,Zfe,w6,_Ho,eme,uHo,ake,vr,A6,bHo,gc,vHo,ome,THo,FHo,rme,CHo,MHo,EHo,L6,yHo,tme,wHo,AHo,LHo,gt,B6,BHo,ame,xHo,kHo,hc,RHo,nme,SHo,PHo,sme,$Ho,IHo,jHo,lme,DHo,NHo,x6,qHo,ho,k6,OHo,ime,GHo,XHo,pn,VHo,dme,zHo,WHo,cme,QHo,HHo,fme,UHo,JHo,YHo,B,rv,mme,KHo,ZHo,YN,eUo,oUo,rUo,tv,gme,tUo,aUo,KN,nUo,sUo,lUo,av,hme,iUo,dUo,ZN,cUo,fUo,mUo,nv,pme,gUo,hUo,eq,pUo,_Uo,uUo,sv,_me,bUo,vUo,oq,TUo,FUo,CUo,lv,ume,MUo,EUo,rq,yUo,wUo,AUo,iv,bme,LUo,BUo,tq,xUo,kUo,RUo,dv,vme,SUo,PUo,aq,$Uo,IUo,jUo,cv,Tme,DUo,NUo,nq,qUo,OUo,GUo,fv,Fme,XUo,VUo,sq,zUo,WUo,QUo,mv,Cme,HUo,UUo,lq,JUo,YUo,KUo,gv,Mme,ZUo,eJo,iq,oJo,rJo,tJo,hv,Eme,aJo,nJo,dq,sJo,lJo,iJo,pv,yme,dJo,cJo,cq,fJo,mJo,gJo,_v,wme,hJo,pJo,fq,_Jo,uJo,bJo,uv,Ame,vJo,TJo,mq,FJo,CJo,MJo,Os,Lme,EJo,yJo,gq,wJo,AJo,hq,LJo,BJo,xJo,bv,Bme,kJo,RJo,pq,SJo,PJo,$Jo,vv,xme,IJo,jJo,_q,DJo,NJo,qJo,Tv,kme,OJo,GJo,uq,XJo,VJo,zJo,Fv,Rme,WJo,QJo,bq,HJo,UJo,JJo,Cv,Sme,YJo,KJo,vq,ZJo,eYo,oYo,Mv,Pme,rYo,tYo,Tq,aYo,nYo,sYo,Ev,$me,lYo,iYo,Fq,dYo,cYo,fYo,yv,Ime,mYo,gYo,Cq,hYo,pYo,_Yo,wv,jme,uYo,bYo,Mq,vYo,TYo,FYo,Av,Dme,CYo,MYo,Eq,EYo,yYo,wYo,Lv,Nme,AYo,LYo,yq,BYo,xYo,kYo,Bv,qme,RYo,SYo,wq,PYo,$Yo,IYo,xv,Ome,jYo,DYo,Aq,NYo,qYo,OYo,kv,Gme,GYo,XYo,Lq,VYo,zYo,WYo,Rv,Xme,QYo,HYo,Bq,UYo,JYo,YYo,Sv,Vme,KYo,ZYo,xq,eKo,oKo,rKo,Pv,zme,tKo,aKo,kq,nKo,sKo,lKo,$v,Wme,iKo,dKo,Rq,cKo,fKo,mKo,Iv,Qme,gKo,hKo,Sq,pKo,_Ko,uKo,jv,Hme,bKo,vKo,Pq,TKo,FKo,CKo,Dv,Ume,MKo,EKo,$q,yKo,wKo,AKo,Nv,Jme,LKo,BKo,Iq,xKo,kKo,RKo,qv,Yme,SKo,PKo,jq,$Ko,IKo,jKo,Ov,Kme,DKo,NKo,Dq,qKo,OKo,GKo,Gv,Zme,XKo,VKo,Nq,zKo,WKo,QKo,ege,HKo,UKo,R6,nke,pc,Xv,oge,S6,JKo,rge,YKo,ske,Tr,P6,KKo,_c,ZKo,tge,eZo,oZo,age,rZo,tZo,aZo,$6,nZo,nge,sZo,lZo,iZo,ht,I6,dZo,sge,cZo,fZo,uc,mZo,lge,gZo,hZo,ige,pZo,_Zo,uZo,dge,bZo,vZo,j6,TZo,po,D6,FZo,cge,CZo,MZo,_n,EZo,fge,yZo,wZo,mge,AZo,LZo,gge,BZo,xZo,kZo,H,Vv,hge,RZo,SZo,qq,PZo,$Zo,IZo,zv,pge,jZo,DZo,Oq,NZo,qZo,OZo,Wv,_ge,GZo,XZo,Gq,VZo,zZo,WZo,Qv,uge,QZo,HZo,Xq,UZo,JZo,YZo,Hv,bge,KZo,ZZo,Vq,eer,oer,rer,Uv,vge,ter,aer,zq,ner,ser,ler,Jv,Tge,ier,der,Wq,cer,fer,mer,Yv,Fge,ger,her,Qq,per,_er,uer,Kv,Cge,ber,ver,Hq,Ter,Fer,Cer,Zv,Mge,Mer,Eer,Uq,yer,wer,Aer,eT,Ege,Ler,Ber,Jq,xer,ker,Rer,oT,yge,Ser,Per,Yq,$er,Ier,jer,rT,wge,Der,Ner,Kq,qer,Oer,Ger,tT,Age,Xer,Ver,Zq,zer,Wer,Qer,aT,Lge,Her,Uer,eO,Jer,Yer,Ker,nT,Bge,Zer,eor,oO,oor,ror,tor,sT,xge,aor,nor,rO,sor,lor,ior,lT,kge,dor,cor,tO,mor,gor,hor,iT,Rge,por,_or,aO,uor,bor,vor,dT,Sge,Tor,For,nO,Cor,Mor,Eor,cT,Pge,yor,wor,sO,Aor,Lor,Bor,fT,$ge,xor,kor,lO,Ror,Sor,Por,Ige,$or,Ior,N6,lke,bc,mT,jge,q6,jor,Dge,Dor,ike,Fr,O6,Nor,vc,qor,Nge,Oor,Gor,qge,Xor,Vor,zor,G6,Wor,Oge,Qor,Hor,Uor,pt,X6,Jor,Gge,Yor,Kor,Tc,Zor,Xge,err,orr,Vge,rrr,trr,arr,zge,nrr,srr,V6,lrr,_o,z6,irr,Wge,drr,crr,un,frr,Qge,mrr,grr,Hge,hrr,prr,Uge,_rr,urr,brr,pe,gT,Jge,vrr,Trr,iO,Frr,Crr,Mrr,hT,Yge,Err,yrr,dO,wrr,Arr,Lrr,pT,Kge,Brr,xrr,cO,krr,Rrr,Srr,_T,Zge,Prr,$rr,fO,Irr,jrr,Drr,uT,ehe,Nrr,qrr,mO,Orr,Grr,Xrr,bT,ohe,Vrr,zrr,gO,Wrr,Qrr,Hrr,vT,rhe,Urr,Jrr,hO,Yrr,Krr,Zrr,TT,the,etr,otr,pO,rtr,ttr,atr,FT,ahe,ntr,str,_O,ltr,itr,dtr,CT,nhe,ctr,ftr,uO,mtr,gtr,htr,she,ptr,_tr,W6,dke,Fc,MT,lhe,Q6,utr,ihe,btr,cke,Cr,H6,vtr,Cc,Ttr,dhe,Ftr,Ctr,che,Mtr,Etr,ytr,U6,wtr,fhe,Atr,Ltr,Btr,_t,J6,xtr,mhe,ktr,Rtr,Mc,Str,ghe,Ptr,$tr,hhe,Itr,jtr,Dtr,phe,Ntr,qtr,Y6,Otr,uo,K6,Gtr,_he,Xtr,Vtr,bn,ztr,uhe,Wtr,Qtr,bhe,Htr,Utr,vhe,Jtr,Ytr,Ktr,Z6,ET,The,Ztr,ear,bO,oar,rar,tar,yT,Fhe,aar,nar,vO,sar,lar,iar,Che,dar,car,eA,fke,Ec,wT,Mhe,oA,far,Ehe,mar,mke,Mr,rA,gar,yc,har,yhe,par,_ar,whe,uar,bar,Tar,tA,Far,Ahe,Car,Mar,Ear,ut,aA,yar,Lhe,war,Aar,wc,Lar,Bhe,Bar,xar,xhe,kar,Rar,Sar,khe,Par,$ar,nA,Iar,bo,sA,jar,Rhe,Dar,Nar,vn,qar,She,Oar,Gar,Phe,Xar,Var,$he,zar,War,Qar,Y,AT,Ihe,Har,Uar,TO,Jar,Yar,Kar,LT,jhe,Zar,enr,FO,onr,rnr,tnr,BT,Dhe,anr,nnr,CO,snr,lnr,inr,xT,Nhe,dnr,cnr,MO,fnr,mnr,gnr,kT,qhe,hnr,pnr,EO,_nr,unr,bnr,RT,Ohe,vnr,Tnr,yO,Fnr,Cnr,Mnr,ST,Ghe,Enr,ynr,wO,wnr,Anr,Lnr,PT,Xhe,Bnr,xnr,AO,knr,Rnr,Snr,$T,Vhe,Pnr,$nr,LO,Inr,jnr,Dnr,IT,zhe,Nnr,qnr,BO,Onr,Gnr,Xnr,jT,Whe,Vnr,znr,xO,Wnr,Qnr,Hnr,DT,Qhe,Unr,Jnr,kO,Ynr,Knr,Znr,NT,Hhe,esr,osr,RO,rsr,tsr,asr,qT,Uhe,nsr,ssr,SO,lsr,isr,dsr,OT,Jhe,csr,fsr,PO,msr,gsr,hsr,GT,Yhe,psr,_sr,$O,usr,bsr,vsr,XT,Khe,Tsr,Fsr,IO,Csr,Msr,Esr,VT,Zhe,ysr,wsr,jO,Asr,Lsr,Bsr,zT,epe,xsr,ksr,DO,Rsr,Ssr,Psr,WT,ope,$sr,Isr,NO,jsr,Dsr,Nsr,rpe,qsr,Osr,lA,gke,Ac,QT,tpe,iA,Gsr,ape,Xsr,hke,Er,dA,Vsr,Lc,zsr,npe,Wsr,Qsr,spe,Hsr,Usr,Jsr,cA,Ysr,lpe,Ksr,Zsr,elr,bt,fA,olr,ipe,rlr,tlr,Bc,alr,dpe,nlr,slr,cpe,llr,ilr,dlr,fpe,clr,flr,mA,mlr,vo,gA,glr,mpe,hlr,plr,Tn,_lr,gpe,ulr,blr,hpe,vlr,Tlr,ppe,Flr,Clr,Mlr,_e,HT,_pe,Elr,ylr,qO,wlr,Alr,Llr,UT,upe,Blr,xlr,OO,klr,Rlr,Slr,JT,bpe,Plr,$lr,GO,Ilr,jlr,Dlr,YT,vpe,Nlr,qlr,XO,Olr,Glr,Xlr,KT,Tpe,Vlr,zlr,VO,Wlr,Qlr,Hlr,ZT,Fpe,Ulr,Jlr,zO,Ylr,Klr,Zlr,e8,Cpe,eir,oir,WO,rir,tir,air,o8,Mpe,nir,sir,QO,lir,iir,dir,r8,Epe,cir,fir,HO,mir,gir,hir,t8,ype,pir,_ir,UO,uir,bir,vir,wpe,Tir,Fir,hA,pke,xc,a8,Ape,pA,Cir,Lpe,Mir,_ke,yr,_A,Eir,kc,yir,Bpe,wir,Air,xpe,Lir,Bir,xir,uA,kir,kpe,Rir,Sir,Pir,vt,bA,$ir,Rpe,Iir,jir,Rc,Dir,Spe,Nir,qir,Ppe,Oir,Gir,Xir,$pe,Vir,zir,vA,Wir,To,TA,Qir,Ipe,Hir,Uir,Fn,Jir,jpe,Yir,Kir,Dpe,Zir,edr,Npe,odr,rdr,tdr,V,n8,qpe,adr,ndr,JO,sdr,ldr,idr,s8,Ope,ddr,cdr,YO,fdr,mdr,gdr,l8,Gpe,hdr,pdr,KO,_dr,udr,bdr,i8,Xpe,vdr,Tdr,ZO,Fdr,Cdr,Mdr,d8,Vpe,Edr,ydr,eG,wdr,Adr,Ldr,c8,zpe,Bdr,xdr,oG,kdr,Rdr,Sdr,f8,Wpe,Pdr,$dr,rG,Idr,jdr,Ddr,m8,Qpe,Ndr,qdr,tG,Odr,Gdr,Xdr,g8,Hpe,Vdr,zdr,aG,Wdr,Qdr,Hdr,h8,Upe,Udr,Jdr,nG,Ydr,Kdr,Zdr,p8,Jpe,ecr,ocr,sG,rcr,tcr,acr,_8,Ype,ncr,scr,lG,lcr,icr,dcr,u8,Kpe,ccr,fcr,iG,mcr,gcr,hcr,b8,Zpe,pcr,_cr,dG,ucr,bcr,vcr,v8,e_e,Tcr,Fcr,cG,Ccr,Mcr,Ecr,T8,o_e,ycr,wcr,fG,Acr,Lcr,Bcr,F8,r_e,xcr,kcr,mG,Rcr,Scr,Pcr,C8,t_e,$cr,Icr,gG,jcr,Dcr,Ncr,M8,a_e,qcr,Ocr,hG,Gcr,Xcr,Vcr,E8,n_e,zcr,Wcr,pG,Qcr,Hcr,Ucr,y8,s_e,Jcr,Ycr,_G,Kcr,Zcr,efr,w8,l_e,ofr,rfr,uG,tfr,afr,nfr,A8,i_e,sfr,lfr,bG,ifr,dfr,cfr,L8,d_e,ffr,mfr,vG,gfr,hfr,pfr,B8,c_e,_fr,ufr,TG,bfr,vfr,Tfr,f_e,Ffr,Cfr,FA,uke,Sc,x8,m_e,CA,Mfr,g_e,Efr,bke,wr,MA,yfr,Pc,wfr,h_e,Afr,Lfr,p_e,Bfr,xfr,kfr,EA,Rfr,__e,Sfr,Pfr,$fr,Tt,yA,Ifr,u_e,jfr,Dfr,$c,Nfr,b_e,qfr,Ofr,v_e,Gfr,Xfr,Vfr,T_e,zfr,Wfr,wA,Qfr,Fo,AA,Hfr,F_e,Ufr,Jfr,Cn,Yfr,C_e,Kfr,Zfr,M_e,emr,omr,E_e,rmr,tmr,amr,te,k8,y_e,nmr,smr,FG,lmr,imr,dmr,R8,w_e,cmr,fmr,CG,mmr,gmr,hmr,S8,A_e,pmr,_mr,MG,umr,bmr,vmr,P8,L_e,Tmr,Fmr,EG,Cmr,Mmr,Emr,$8,B_e,ymr,wmr,yG,Amr,Lmr,Bmr,I8,x_e,xmr,kmr,wG,Rmr,Smr,Pmr,j8,k_e,$mr,Imr,AG,jmr,Dmr,Nmr,D8,R_e,qmr,Omr,LG,Gmr,Xmr,Vmr,N8,S_e,zmr,Wmr,BG,Qmr,Hmr,Umr,q8,P_e,Jmr,Ymr,xG,Kmr,Zmr,egr,O8,$_e,ogr,rgr,kG,tgr,agr,ngr,G8,I_e,sgr,lgr,RG,igr,dgr,cgr,X8,j_e,fgr,mgr,SG,ggr,hgr,pgr,V8,D_e,_gr,ugr,PG,bgr,vgr,Tgr,z8,N_e,Fgr,Cgr,$G,Mgr,Egr,ygr,W8,q_e,wgr,Agr,IG,Lgr,Bgr,xgr,Q8,O_e,kgr,Rgr,jG,Sgr,Pgr,$gr,G_e,Igr,jgr,LA,vke,Ic,H8,X_e,BA,Dgr,V_e,Ngr,Tke,Ar,xA,qgr,jc,Ogr,z_e,Ggr,Xgr,W_e,Vgr,zgr,Wgr,kA,Qgr,Q_e,Hgr,Ugr,Jgr,Ft,RA,Ygr,H_e,Kgr,Zgr,Dc,ehr,U_e,ohr,rhr,J_e,thr,ahr,nhr,Y_e,shr,lhr,SA,ihr,Co,PA,dhr,K_e,chr,fhr,Mn,mhr,Z_e,ghr,hhr,eue,phr,_hr,oue,uhr,bhr,vhr,rue,U8,tue,Thr,Fhr,DG,Chr,Mhr,Ehr,aue,yhr,whr,$A,Fke,Nc,J8,nue,IA,Ahr,sue,Lhr,Cke,Lr,jA,Bhr,qc,xhr,lue,khr,Rhr,iue,Shr,Phr,$hr,DA,Ihr,due,jhr,Dhr,Nhr,Ct,NA,qhr,cue,Ohr,Ghr,Oc,Xhr,fue,Vhr,zhr,mue,Whr,Qhr,Hhr,gue,Uhr,Jhr,qA,Yhr,Mo,OA,Khr,hue,Zhr,epr,En,opr,pue,rpr,tpr,_ue,apr,npr,uue,spr,lpr,ipr,K,Y8,bue,dpr,cpr,NG,fpr,mpr,gpr,K8,vue,hpr,ppr,qG,_pr,upr,bpr,Z8,Tue,vpr,Tpr,OG,Fpr,Cpr,Mpr,eF,Fue,Epr,ypr,GG,wpr,Apr,Lpr,oF,Cue,Bpr,xpr,XG,kpr,Rpr,Spr,rF,Mue,Ppr,$pr,VG,Ipr,jpr,Dpr,tF,Eue,Npr,qpr,zG,Opr,Gpr,Xpr,aF,yue,Vpr,zpr,WG,Wpr,Qpr,Hpr,nF,wue,Upr,Jpr,QG,Ypr,Kpr,Zpr,sF,Aue,e_r,o_r,HG,r_r,t_r,a_r,lF,Lue,n_r,s_r,UG,l_r,i_r,d_r,iF,Bue,c_r,f_r,JG,m_r,g_r,h_r,dF,xue,p_r,__r,YG,u_r,b_r,v_r,cF,kue,T_r,F_r,KG,C_r,M_r,E_r,fF,Rue,y_r,w_r,ZG,A_r,L_r,B_r,mF,Sue,x_r,k_r,eX,R_r,S_r,P_r,gF,Pue,$_r,I_r,oX,j_r,D_r,N_r,hF,$ue,q_r,O_r,rX,G_r,X_r,V_r,pF,Iue,z_r,W_r,tX,Q_r,H_r,U_r,_F,jue,J_r,Y_r,aX,K_r,Z_r,eur,Due,our,rur,GA,Mke,Gc,uF,Nue,XA,tur,que,aur,Eke,Br,VA,nur,Xc,sur,Oue,lur,iur,Gue,dur,cur,fur,zA,mur,Xue,gur,hur,pur,Mt,WA,_ur,Vue,uur,bur,Vc,vur,zue,Tur,Fur,Wue,Cur,Mur,Eur,Que,yur,wur,QA,Aur,Eo,HA,Lur,Hue,Bur,xur,yn,kur,Uue,Rur,Sur,Jue,Pur,$ur,Yue,Iur,jur,Dur,Z,bF,Kue,Nur,qur,nX,Our,Gur,Xur,vF,Zue,Vur,zur,sX,Wur,Qur,Hur,TF,e1e,Uur,Jur,lX,Yur,Kur,Zur,FF,o1e,e1r,o1r,iX,r1r,t1r,a1r,CF,r1e,n1r,s1r,dX,l1r,i1r,d1r,MF,t1e,c1r,f1r,cX,m1r,g1r,h1r,EF,a1e,p1r,_1r,fX,u1r,b1r,v1r,yF,n1e,T1r,F1r,mX,C1r,M1r,E1r,wF,s1e,y1r,w1r,gX,A1r,L1r,B1r,AF,l1e,x1r,k1r,hX,R1r,S1r,P1r,LF,i1e,$1r,I1r,pX,j1r,D1r,N1r,BF,d1e,q1r,O1r,_X,G1r,X1r,V1r,xF,c1e,z1r,W1r,uX,Q1r,H1r,U1r,kF,f1e,J1r,Y1r,bX,K1r,Z1r,ebr,RF,m1e,obr,rbr,vX,tbr,abr,nbr,SF,g1e,sbr,lbr,TX,ibr,dbr,cbr,PF,h1e,fbr,mbr,FX,gbr,hbr,pbr,$F,p1e,_br,ubr,CX,bbr,vbr,Tbr,IF,_1e,Fbr,Cbr,MX,Mbr,Ebr,ybr,u1e,wbr,Abr,UA,yke,zc,jF,b1e,JA,Lbr,v1e,Bbr,wke,xr,YA,xbr,Wc,kbr,T1e,Rbr,Sbr,F1e,Pbr,$br,Ibr,KA,jbr,C1e,Dbr,Nbr,qbr,Et,ZA,Obr,M1e,Gbr,Xbr,Qc,Vbr,E1e,zbr,Wbr,y1e,Qbr,Hbr,Ubr,w1e,Jbr,Ybr,e0,Kbr,yo,o0,Zbr,A1e,e3r,o3r,wn,r3r,L1e,t3r,a3r,B1e,n3r,s3r,x1e,l3r,i3r,d3r,k1e,DF,R1e,c3r,f3r,EX,m3r,g3r,h3r,S1e,p3r,_3r,r0,Ake,Hc,NF,P1e,t0,u3r,$1e,b3r,Lke,kr,a0,v3r,Uc,T3r,I1e,F3r,C3r,j1e,M3r,E3r,y3r,n0,w3r,D1e,A3r,L3r,B3r,yt,s0,x3r,N1e,k3r,R3r,Jc,S3r,q1e,P3r,$3r,O1e,I3r,j3r,D3r,G1e,N3r,q3r,l0,O3r,wo,i0,G3r,X1e,X3r,V3r,An,z3r,V1e,W3r,Q3r,z1e,H3r,U3r,W1e,J3r,Y3r,K3r,Q1e,qF,H1e,Z3r,e5r,yX,o5r,r5r,t5r,U1e,a5r,n5r,d0,Bke,Yc,OF,J1e,c0,s5r,Y1e,l5r,xke,Rr,f0,i5r,Kc,d5r,K1e,c5r,f5r,Z1e,m5r,g5r,h5r,m0,p5r,ebe,_5r,u5r,b5r,wt,g0,v5r,obe,T5r,F5r,Zc,C5r,rbe,M5r,E5r,tbe,y5r,w5r,A5r,abe,L5r,B5r,h0,x5r,Ao,p0,k5r,nbe,R5r,S5r,Ln,P5r,sbe,$5r,I5r,lbe,j5r,D5r,ibe,N5r,q5r,O5r,z,GF,dbe,G5r,X5r,wX,V5r,z5r,W5r,XF,cbe,Q5r,H5r,AX,U5r,J5r,Y5r,VF,fbe,K5r,Z5r,LX,e2r,o2r,r2r,zF,mbe,t2r,a2r,BX,n2r,s2r,l2r,WF,gbe,i2r,d2r,xX,c2r,f2r,m2r,QF,hbe,g2r,h2r,kX,p2r,_2r,u2r,HF,pbe,b2r,v2r,RX,T2r,F2r,C2r,UF,_be,M2r,E2r,SX,y2r,w2r,A2r,JF,ube,L2r,B2r,PX,x2r,k2r,R2r,YF,bbe,S2r,P2r,$X,$2r,I2r,j2r,KF,vbe,D2r,N2r,IX,q2r,O2r,G2r,ZF,Tbe,X2r,V2r,jX,z2r,W2r,Q2r,eC,Fbe,H2r,U2r,DX,J2r,Y2r,K2r,oC,Cbe,Z2r,evr,NX,ovr,rvr,tvr,rC,Mbe,avr,nvr,qX,svr,lvr,ivr,tC,Ebe,dvr,cvr,OX,fvr,mvr,gvr,aC,ybe,hvr,pvr,GX,_vr,uvr,bvr,nC,wbe,vvr,Tvr,XX,Fvr,Cvr,Mvr,sC,Abe,Evr,yvr,VX,wvr,Avr,Lvr,lC,Lbe,Bvr,xvr,zX,kvr,Rvr,Svr,iC,Bbe,Pvr,$vr,WX,Ivr,jvr,Dvr,dC,xbe,Nvr,qvr,QX,Ovr,Gvr,Xvr,cC,kbe,Vvr,zvr,HX,Wvr,Qvr,Hvr,fC,Rbe,Uvr,Jvr,UX,Yvr,Kvr,Zvr,mC,Sbe,eTr,oTr,JX,rTr,tTr,aTr,Pbe,nTr,sTr,_0,kke,ef,gC,$be,u0,lTr,Ibe,iTr,Rke,Sr,b0,dTr,of,cTr,jbe,fTr,mTr,Dbe,gTr,hTr,pTr,v0,_Tr,Nbe,uTr,bTr,vTr,At,T0,TTr,qbe,FTr,CTr,rf,MTr,Obe,ETr,yTr,Gbe,wTr,ATr,LTr,Xbe,BTr,xTr,F0,kTr,Lo,C0,RTr,Vbe,STr,PTr,Bn,$Tr,zbe,ITr,jTr,Wbe,DTr,NTr,Qbe,qTr,OTr,GTr,xn,hC,Hbe,XTr,VTr,YX,zTr,WTr,QTr,pC,Ube,HTr,UTr,KX,JTr,YTr,KTr,_C,Jbe,ZTr,e8r,ZX,o8r,r8r,t8r,uC,Ybe,a8r,n8r,eV,s8r,l8r,i8r,Kbe,d8r,c8r,M0,Ske,tf,bC,Zbe,E0,f8r,e3e,m8r,Pke,Pr,y0,g8r,af,h8r,o3e,p8r,_8r,r3e,u8r,b8r,v8r,w0,T8r,t3e,F8r,C8r,M8r,Lt,A0,E8r,a3e,y8r,w8r,nf,A8r,n3e,L8r,B8r,s3e,x8r,k8r,R8r,l3e,S8r,P8r,L0,$8r,Bo,B0,I8r,i3e,j8r,D8r,kn,N8r,d3e,q8r,O8r,c3e,G8r,X8r,f3e,V8r,z8r,W8r,ce,vC,m3e,Q8r,H8r,oV,U8r,J8r,Y8r,TC,g3e,K8r,Z8r,rV,eFr,oFr,rFr,FC,h3e,tFr,aFr,tV,nFr,sFr,lFr,CC,p3e,iFr,dFr,aV,cFr,fFr,mFr,MC,_3e,gFr,hFr,nV,pFr,_Fr,uFr,EC,u3e,bFr,vFr,sV,TFr,FFr,CFr,yC,b3e,MFr,EFr,lV,yFr,wFr,AFr,wC,v3e,LFr,BFr,iV,xFr,kFr,RFr,AC,T3e,SFr,PFr,dV,$Fr,IFr,jFr,LC,F3e,DFr,NFr,cV,qFr,OFr,GFr,BC,C3e,XFr,VFr,fV,zFr,WFr,QFr,xC,M3e,HFr,UFr,mV,JFr,YFr,KFr,E3e,ZFr,eCr,x0,$ke,sf,kC,y3e,k0,oCr,w3e,rCr,Ike,$r,R0,tCr,lf,aCr,A3e,nCr,sCr,L3e,lCr,iCr,dCr,S0,cCr,B3e,fCr,mCr,gCr,Bt,P0,hCr,x3e,pCr,_Cr,df,uCr,k3e,bCr,vCr,R3e,TCr,FCr,CCr,S3e,MCr,ECr,$0,yCr,xo,I0,wCr,P3e,ACr,LCr,Rn,BCr,$3e,xCr,kCr,I3e,RCr,SCr,j3e,PCr,$Cr,ICr,ue,RC,D3e,jCr,DCr,gV,NCr,qCr,OCr,SC,N3e,GCr,XCr,hV,VCr,zCr,WCr,PC,q3e,QCr,HCr,pV,UCr,JCr,YCr,$C,O3e,KCr,ZCr,_V,eMr,oMr,rMr,IC,G3e,tMr,aMr,uV,nMr,sMr,lMr,jC,X3e,iMr,dMr,bV,cMr,fMr,mMr,DC,V3e,gMr,hMr,vV,pMr,_Mr,uMr,NC,z3e,bMr,vMr,TV,TMr,FMr,CMr,qC,W3e,MMr,EMr,FV,yMr,wMr,AMr,OC,Q3e,LMr,BMr,CV,xMr,kMr,RMr,H3e,SMr,PMr,j0,jke,cf,GC,U3e,D0,$Mr,J3e,IMr,Dke,Ir,N0,jMr,ff,DMr,Y3e,NMr,qMr,K3e,OMr,GMr,XMr,q0,VMr,Z3e,zMr,WMr,QMr,xt,O0,HMr,e5e,UMr,JMr,mf,YMr,o5e,KMr,ZMr,r5e,e4r,o4r,r4r,t5e,t4r,a4r,G0,n4r,ko,X0,s4r,a5e,l4r,i4r,Sn,d4r,n5e,c4r,f4r,s5e,m4r,g4r,l5e,h4r,p4r,_4r,Ce,XC,i5e,u4r,b4r,MV,v4r,T4r,F4r,VC,d5e,C4r,M4r,EV,E4r,y4r,w4r,zC,c5e,A4r,L4r,yV,B4r,x4r,k4r,WC,f5e,R4r,S4r,wV,P4r,$4r,I4r,QC,m5e,j4r,D4r,AV,N4r,q4r,O4r,HC,g5e,G4r,X4r,LV,V4r,z4r,W4r,UC,h5e,Q4r,H4r,BV,U4r,J4r,Y4r,JC,p5e,K4r,Z4r,xV,eEr,oEr,rEr,YC,_5e,tEr,aEr,kV,nEr,sEr,lEr,u5e,iEr,dEr,V0,Nke,gf,KC,b5e,z0,cEr,v5e,fEr,qke,jr,W0,mEr,hf,gEr,T5e,hEr,pEr,F5e,_Er,uEr,bEr,Q0,vEr,C5e,TEr,FEr,CEr,kt,H0,MEr,M5e,EEr,yEr,pf,wEr,E5e,AEr,LEr,y5e,BEr,xEr,kEr,w5e,REr,SEr,U0,PEr,Ro,J0,$Er,A5e,IEr,jEr,Pn,DEr,L5e,NEr,qEr,B5e,OEr,GEr,x5e,XEr,VEr,zEr,be,ZC,k5e,WEr,QEr,RV,HEr,UEr,JEr,eM,R5e,YEr,KEr,SV,ZEr,eyr,oyr,oM,S5e,ryr,tyr,PV,ayr,nyr,syr,rM,P5e,lyr,iyr,$V,dyr,cyr,fyr,tM,$5e,myr,gyr,IV,hyr,pyr,_yr,aM,I5e,uyr,byr,jV,vyr,Tyr,Fyr,nM,j5e,Cyr,Myr,DV,Eyr,yyr,wyr,sM,D5e,Ayr,Lyr,NV,Byr,xyr,kyr,lM,N5e,Ryr,Syr,qV,Pyr,$yr,Iyr,iM,q5e,jyr,Dyr,OV,Nyr,qyr,Oyr,O5e,Gyr,Xyr,Y0,Oke,_f,dM,G5e,K0,Vyr,X5e,zyr,Gke,Dr,Z0,Wyr,uf,Qyr,V5e,Hyr,Uyr,z5e,Jyr,Yyr,Kyr,eL,Zyr,W5e,ewr,owr,rwr,Rt,oL,twr,Q5e,awr,nwr,bf,swr,H5e,lwr,iwr,U5e,dwr,cwr,fwr,J5e,mwr,gwr,rL,hwr,So,tL,pwr,Y5e,_wr,uwr,$n,bwr,K5e,vwr,Twr,Z5e,Fwr,Cwr,e2e,Mwr,Ewr,ywr,ve,cM,o2e,wwr,Awr,GV,Lwr,Bwr,xwr,fM,r2e,kwr,Rwr,XV,Swr,Pwr,$wr,mM,t2e,Iwr,jwr,VV,Dwr,Nwr,qwr,gM,a2e,Owr,Gwr,zV,Xwr,Vwr,zwr,hM,n2e,Wwr,Qwr,WV,Hwr,Uwr,Jwr,pM,s2e,Ywr,Kwr,QV,Zwr,e6r,o6r,_M,l2e,r6r,t6r,HV,a6r,n6r,s6r,uM,i2e,l6r,i6r,UV,d6r,c6r,f6r,bM,d2e,m6r,g6r,JV,h6r,p6r,_6r,vM,c2e,u6r,b6r,YV,v6r,T6r,F6r,f2e,C6r,M6r,aL,Xke,vf,TM,m2e,nL,E6r,g2e,y6r,Vke,Nr,sL,w6r,Tf,A6r,h2e,L6r,B6r,p2e,x6r,k6r,R6r,lL,S6r,_2e,P6r,$6r,I6r,St,iL,j6r,u2e,D6r,N6r,Ff,q6r,b2e,O6r,G6r,v2e,X6r,V6r,z6r,T2e,W6r,Q6r,dL,H6r,Po,cL,U6r,F2e,J6r,Y6r,In,K6r,C2e,Z6r,eAr,M2e,oAr,rAr,E2e,tAr,aAr,nAr,Re,FM,y2e,sAr,lAr,KV,iAr,dAr,cAr,CM,w2e,fAr,mAr,ZV,gAr,hAr,pAr,MM,A2e,_Ar,uAr,ez,bAr,vAr,TAr,EM,L2e,FAr,CAr,oz,MAr,EAr,yAr,yM,B2e,wAr,AAr,rz,LAr,BAr,xAr,wM,x2e,kAr,RAr,tz,SAr,PAr,$Ar,AM,k2e,IAr,jAr,az,DAr,NAr,qAr,LM,R2e,OAr,GAr,nz,XAr,VAr,zAr,S2e,WAr,QAr,fL,zke,Cf,BM,P2e,mL,HAr,$2e,UAr,Wke,qr,gL,JAr,Mf,YAr,I2e,KAr,ZAr,j2e,e0r,o0r,r0r,hL,t0r,D2e,a0r,n0r,s0r,Pt,pL,l0r,N2e,i0r,d0r,Ef,c0r,q2e,f0r,m0r,O2e,g0r,h0r,p0r,G2e,_0r,u0r,_L,b0r,$o,uL,v0r,X2e,T0r,F0r,jn,C0r,V2e,M0r,E0r,z2e,y0r,w0r,W2e,A0r,L0r,B0r,Se,xM,Q2e,x0r,k0r,sz,R0r,S0r,P0r,kM,H2e,$0r,I0r,lz,j0r,D0r,N0r,RM,U2e,q0r,O0r,iz,G0r,X0r,V0r,SM,J2e,z0r,W0r,dz,Q0r,H0r,U0r,PM,Y2e,J0r,Y0r,cz,K0r,Z0r,eLr,$M,K2e,oLr,rLr,fz,tLr,aLr,nLr,IM,Z2e,sLr,lLr,mz,iLr,dLr,cLr,jM,eve,fLr,mLr,gz,gLr,hLr,pLr,ove,_Lr,uLr,bL,Qke,yf,DM,rve,vL,bLr,tve,vLr,Hke,Or,TL,TLr,wf,FLr,ave,CLr,MLr,nve,ELr,yLr,wLr,FL,ALr,sve,LLr,BLr,xLr,$t,CL,kLr,lve,RLr,SLr,Af,PLr,ive,$Lr,ILr,dve,jLr,DLr,NLr,cve,qLr,OLr,ML,GLr,Io,EL,XLr,fve,VLr,zLr,Dn,WLr,mve,QLr,HLr,gve,ULr,JLr,hve,YLr,KLr,ZLr,pve,NM,_ve,e7r,o7r,hz,r7r,t7r,a7r,uve,n7r,s7r,yL,Uke,Lf,qM,bve,wL,l7r,vve,i7r,Jke,Gr,AL,d7r,Bf,c7r,Tve,f7r,m7r,Fve,g7r,h7r,p7r,LL,_7r,Cve,u7r,b7r,v7r,It,BL,T7r,Mve,F7r,C7r,xf,M7r,Eve,E7r,y7r,yve,w7r,A7r,L7r,wve,B7r,x7r,xL,k7r,jo,kL,R7r,Ave,S7r,P7r,Nn,$7r,Lve,I7r,j7r,Bve,D7r,N7r,xve,q7r,O7r,G7r,RL,OM,kve,X7r,V7r,pz,z7r,W7r,Q7r,GM,Rve,H7r,U7r,_z,J7r,Y7r,K7r,Sve,Z7r,e9r,SL,Yke,kf,XM,Pve,PL,o9r,$ve,r9r,Kke,Xr,$L,t9r,Rf,a9r,Ive,n9r,s9r,jve,l9r,i9r,d9r,IL,c9r,Dve,f9r,m9r,g9r,jt,jL,h9r,Nve,p9r,_9r,Sf,u9r,qve,b9r,v9r,Ove,T9r,F9r,C9r,Gve,M9r,E9r,DL,y9r,Do,NL,w9r,Xve,A9r,L9r,qn,B9r,Vve,x9r,k9r,zve,R9r,S9r,Wve,P9r,$9r,I9r,Qve,VM,Hve,j9r,D9r,uz,N9r,q9r,O9r,Uve,G9r,X9r,qL,Zke;return fe=new X({}),Na=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),U4=new X({}),J4=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qf=new V9r({props:{warning:"&lcub;true}",$$slots:{default:[uTt]},$$scope:{ctx:$i}}}),Y4=new X({}),K4=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/configuration_auto.py#L526"}}),oE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/configuration_auto.py#L549",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),rE=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),tE=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/configuration_auto.py#L671",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),aE=new X({}),nE=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/tokenization_auto.py#L352"}}),iE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15831/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),dE=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),cE=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),fE=new X({}),mE=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/feature_extraction_auto.py#L170"}}),pE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/feature_extraction_auto.py#L184",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15831/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Mh=new V9r({props:{$$slots:{default:[bTt]},$$scope:{ctx:$i}}}),_E=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),uE=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/feature_extraction_auto.py#L311",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),bE=new X({}),vE=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/processing_auto.py#L71"}}),CE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Ph=new V9r({props:{$$slots:{default:[vTt]},$$scope:{ctx:$i}}}),ME=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),EE=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),yE=new X({}),wE=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L697"}}),LE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),BE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),xE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RE=new X({}),SE=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L704"}}),$E=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),IE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),jE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),DE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NE=new X({}),qE=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L719"}}),GE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),XE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),VE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WE=new X({}),QE=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L726"}}),UE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),JE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),YE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),KE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZE=new X({}),ey=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L733"}}),ry=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),ay=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sy=new X({}),ly=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L742"}}),dy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),fy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),my=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gy=new X({}),hy=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L776"}}),_y=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),by=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ty=new X({}),Fy=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L783"}}),My=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),Ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),yy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ay=new X({}),Ly=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L769"}}),xy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),Ry=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Py=new X({}),$y=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L751"}}),jy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),Ny=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Oy=new X({}),Gy=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L758"}}),Vy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),zy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),Wy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hy=new X({}),Uy=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L792"}}),Yy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15831/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15831/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15831/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),Zy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ow=new X({}),rw=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L831"}}),aw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),sw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iw=new X({}),dw=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L838"}}),fw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),mw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),gw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pw=new X({}),_w=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L861"}}),bw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Tw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Fw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cw=new X({}),Mw=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L845"}}),yw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),Aw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Lw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Bw=new X({}),xw=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L852"}}),Rw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),Pw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Iw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jw=new X({}),Dw=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L870"}}),qw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Ow=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),Gw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Xw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vw=new X({}),zw=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L877"}}),Qw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),Uw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yw=new X({}),Kw=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L824"}}),e6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),o6=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),r6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t6=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a6=new X({}),n6=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L799"}}),l6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),i6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),d6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f6=new X({}),m6=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L806"}}),h6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),p6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),_6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v6=new X({}),T6=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_auto.py#L815"}}),C6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),M6=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),E6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),y6=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w6=new X({}),A6=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_tf_auto.py#L373"}}),B6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),x6=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),k6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),R6=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S6=new X({}),P6=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_tf_auto.py#L380"}}),I6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),j6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),D6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q6=new X({}),O6=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_tf_auto.py#L395"}}),X6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),V6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),z6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),W6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q6=new X({}),H6=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_tf_auto.py#L402"}}),J6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Y6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),K6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oA=new X({}),rA=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),aA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),nA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),sA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iA=new X({}),dA=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),fA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),mA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),gA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new X({}),_A=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),bA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),vA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),TA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CA=new X({}),MA=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),yA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),wA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),AA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BA=new X({}),xA=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),RA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),SA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),PA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IA=new X({}),jA=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),NA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),qA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),OA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XA=new X({}),VA=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),WA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),QA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),HA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JA=new X({}),YA=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),ZA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),e0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),o0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t0=new X({}),a0=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),s0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),l0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),i0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c0=new X({}),f0=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_flax_auto.py#L236"}}),g0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),h0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),p0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u0=new X({}),b0=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),T0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),F0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),C0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E0=new X({}),y0=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),A0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),L0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),B0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k0=new X({}),R0=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),P0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),$0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),I0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),j0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D0=new X({}),N0=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),O0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),G0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),X0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),V0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z0=new X({}),W0=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_flax_auto.py#L273"}}),H0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),U0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),J0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K0=new X({}),Z0=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),oL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),rL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),tL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nL=new X({}),sL=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),iL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),dL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),cL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mL=new X({}),gL=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),pL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),_L=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),uL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vL=new X({}),TL=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),CL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),ML=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),EL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wL=new X({}),AL=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_flax_auto.py#L314"}}),BL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15831/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),xL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),kL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),SL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PL=new X({}),$L=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/modeling_flax_auto.py#L323"}}),jL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15831/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15831/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),DL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),NL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15831/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15831/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15831/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Pe=l(),de=a("h1"),ge=a("a"),io=a("span"),f(fe.$$.fragment),Te=l(),Vo=a("span"),Ii=o("Auto Classes"),$f=l(),ca=a("p"),ji=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=a("code"),z4=o("from_pretrained()"),If=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Le=l(),co=a("p"),Ni=o("Instantiating one of "),On=a("a"),W4=o("AutoConfig"),Gn=o(", "),Xn=a("a"),Q4=o("AutoModel"),qi=o(`, and
`),Vn=a("a"),H4=o("AutoTokenizer"),Oi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Na.$$.fragment),fo=l(),he=a("p"),D7=o("will create a model that is an instance of "),Gi=a("a"),N7=o("BertModel"),q7=o("."),zo=l(),qa=a("p"),O7=o("There is one class of "),Df=a("code"),G7=o("AutoModel"),mPe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),KBe=l(),Xi=a("h2"),Nf=a("a"),cQ=a("span"),f(U4.$$.fragment),gPe=l(),fQ=a("span"),hPe=o("Extending the Auto Classes"),ZBe=l(),zn=a("p"),pPe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),mQ=a("code"),_Pe=o("NewModel"),uPe=o(", make sure you have a "),gQ=a("code"),bPe=o("NewModelConfig"),vPe=o(` then you can add those to the auto
classes like this:`),exe=l(),f(J4.$$.fragment),oxe=l(),X7=a("p"),TPe=o("You will then be able to use the auto classes like you would usually do!"),rxe=l(),f(qf.$$.fragment),txe=l(),Vi=a("h2"),Of=a("a"),hQ=a("span"),f(Y4.$$.fragment),FPe=l(),pQ=a("span"),CPe=o("AutoConfig"),axe=l(),Wo=a("div"),f(K4.$$.fragment),MPe=l(),Z4=a("p"),EPe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),V7=a("a"),yPe=o("from_pretrained()"),wPe=o(" class method."),APe=l(),eE=a("p"),LPe=o("This class cannot be instantiated directly using "),_Q=a("code"),BPe=o("__init__()"),xPe=o(" (throws an error)."),kPe=l(),mo=a("div"),f(oE.$$.fragment),RPe=l(),uQ=a("p"),SPe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),PPe=l(),zi=a("p"),$Pe=o("The configuration class to instantiate is selected based on the "),bQ=a("code"),IPe=o("model_type"),jPe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),vQ=a("code"),DPe=o("pretrained_model_name_or_path"),NPe=o(":"),qPe=l(),v=a("ul"),Gf=a("li"),TQ=a("strong"),OPe=o("albert"),GPe=o(" \u2014 "),z7=a("a"),XPe=o("AlbertConfig"),VPe=o(" (ALBERT model)"),zPe=l(),Xf=a("li"),FQ=a("strong"),WPe=o("bart"),QPe=o(" \u2014 "),W7=a("a"),HPe=o("BartConfig"),UPe=o(" (BART model)"),JPe=l(),Vf=a("li"),CQ=a("strong"),YPe=o("beit"),KPe=o(" \u2014 "),Q7=a("a"),ZPe=o("BeitConfig"),e$e=o(" (BEiT model)"),o$e=l(),zf=a("li"),MQ=a("strong"),r$e=o("bert"),t$e=o(" \u2014 "),H7=a("a"),a$e=o("BertConfig"),n$e=o(" (BERT model)"),s$e=l(),Wf=a("li"),EQ=a("strong"),l$e=o("bert-generation"),i$e=o(" \u2014 "),U7=a("a"),d$e=o("BertGenerationConfig"),c$e=o(" (Bert Generation model)"),f$e=l(),Qf=a("li"),yQ=a("strong"),m$e=o("big_bird"),g$e=o(" \u2014 "),J7=a("a"),h$e=o("BigBirdConfig"),p$e=o(" (BigBird model)"),_$e=l(),Hf=a("li"),wQ=a("strong"),u$e=o("bigbird_pegasus"),b$e=o(" \u2014 "),Y7=a("a"),v$e=o("BigBirdPegasusConfig"),T$e=o(" (BigBirdPegasus model)"),F$e=l(),Uf=a("li"),AQ=a("strong"),C$e=o("blenderbot"),M$e=o(" \u2014 "),K7=a("a"),E$e=o("BlenderbotConfig"),y$e=o(" (Blenderbot model)"),w$e=l(),Jf=a("li"),LQ=a("strong"),A$e=o("blenderbot-small"),L$e=o(" \u2014 "),Z7=a("a"),B$e=o("BlenderbotSmallConfig"),x$e=o(" (BlenderbotSmall model)"),k$e=l(),Yf=a("li"),BQ=a("strong"),R$e=o("camembert"),S$e=o(" \u2014 "),e9=a("a"),P$e=o("CamembertConfig"),$$e=o(" (CamemBERT model)"),I$e=l(),Kf=a("li"),xQ=a("strong"),j$e=o("canine"),D$e=o(" \u2014 "),o9=a("a"),N$e=o("CanineConfig"),q$e=o(" (Canine model)"),O$e=l(),Zf=a("li"),kQ=a("strong"),G$e=o("clip"),X$e=o(" \u2014 "),r9=a("a"),V$e=o("CLIPConfig"),z$e=o(" (CLIP model)"),W$e=l(),em=a("li"),RQ=a("strong"),Q$e=o("convbert"),H$e=o(" \u2014 "),t9=a("a"),U$e=o("ConvBertConfig"),J$e=o(" (ConvBERT model)"),Y$e=l(),om=a("li"),SQ=a("strong"),K$e=o("convnext"),Z$e=o(" \u2014 "),a9=a("a"),eIe=o("ConvNextConfig"),oIe=o(" (ConvNext model)"),rIe=l(),rm=a("li"),PQ=a("strong"),tIe=o("ctrl"),aIe=o(" \u2014 "),n9=a("a"),nIe=o("CTRLConfig"),sIe=o(" (CTRL model)"),lIe=l(),tm=a("li"),$Q=a("strong"),iIe=o("data2vec-audio"),dIe=o(" \u2014 "),s9=a("a"),cIe=o("Data2VecAudioConfig"),fIe=o(" (Data2VecAudio model)"),mIe=l(),am=a("li"),IQ=a("strong"),gIe=o("data2vec-text"),hIe=o(" \u2014 "),l9=a("a"),pIe=o("Data2VecTextConfig"),_Ie=o(" (Data2VecText model)"),uIe=l(),nm=a("li"),jQ=a("strong"),bIe=o("deberta"),vIe=o(" \u2014 "),i9=a("a"),TIe=o("DebertaConfig"),FIe=o(" (DeBERTa model)"),CIe=l(),sm=a("li"),DQ=a("strong"),MIe=o("deberta-v2"),EIe=o(" \u2014 "),d9=a("a"),yIe=o("DebertaV2Config"),wIe=o(" (DeBERTa-v2 model)"),AIe=l(),lm=a("li"),NQ=a("strong"),LIe=o("deit"),BIe=o(" \u2014 "),c9=a("a"),xIe=o("DeiTConfig"),kIe=o(" (DeiT model)"),RIe=l(),im=a("li"),qQ=a("strong"),SIe=o("detr"),PIe=o(" \u2014 "),f9=a("a"),$Ie=o("DetrConfig"),IIe=o(" (DETR model)"),jIe=l(),dm=a("li"),OQ=a("strong"),DIe=o("distilbert"),NIe=o(" \u2014 "),m9=a("a"),qIe=o("DistilBertConfig"),OIe=o(" (DistilBERT model)"),GIe=l(),cm=a("li"),GQ=a("strong"),XIe=o("dpr"),VIe=o(" \u2014 "),g9=a("a"),zIe=o("DPRConfig"),WIe=o(" (DPR model)"),QIe=l(),fm=a("li"),XQ=a("strong"),HIe=o("electra"),UIe=o(" \u2014 "),h9=a("a"),JIe=o("ElectraConfig"),YIe=o(" (ELECTRA model)"),KIe=l(),mm=a("li"),VQ=a("strong"),ZIe=o("encoder-decoder"),eje=o(" \u2014 "),p9=a("a"),oje=o("EncoderDecoderConfig"),rje=o(" (Encoder decoder model)"),tje=l(),gm=a("li"),zQ=a("strong"),aje=o("flaubert"),nje=o(" \u2014 "),_9=a("a"),sje=o("FlaubertConfig"),lje=o(" (FlauBERT model)"),ije=l(),hm=a("li"),WQ=a("strong"),dje=o("fnet"),cje=o(" \u2014 "),u9=a("a"),fje=o("FNetConfig"),mje=o(" (FNet model)"),gje=l(),pm=a("li"),QQ=a("strong"),hje=o("fsmt"),pje=o(" \u2014 "),b9=a("a"),_je=o("FSMTConfig"),uje=o(" (FairSeq Machine-Translation model)"),bje=l(),_m=a("li"),HQ=a("strong"),vje=o("funnel"),Tje=o(" \u2014 "),v9=a("a"),Fje=o("FunnelConfig"),Cje=o(" (Funnel Transformer model)"),Mje=l(),um=a("li"),UQ=a("strong"),Eje=o("gpt2"),yje=o(" \u2014 "),T9=a("a"),wje=o("GPT2Config"),Aje=o(" (OpenAI GPT-2 model)"),Lje=l(),bm=a("li"),JQ=a("strong"),Bje=o("gpt_neo"),xje=o(" \u2014 "),F9=a("a"),kje=o("GPTNeoConfig"),Rje=o(" (GPT Neo model)"),Sje=l(),vm=a("li"),YQ=a("strong"),Pje=o("gptj"),$je=o(" \u2014 "),C9=a("a"),Ije=o("GPTJConfig"),jje=o(" (GPT-J model)"),Dje=l(),Tm=a("li"),KQ=a("strong"),Nje=o("hubert"),qje=o(" \u2014 "),M9=a("a"),Oje=o("HubertConfig"),Gje=o(" (Hubert model)"),Xje=l(),Fm=a("li"),ZQ=a("strong"),Vje=o("ibert"),zje=o(" \u2014 "),E9=a("a"),Wje=o("IBertConfig"),Qje=o(" (I-BERT model)"),Hje=l(),Cm=a("li"),eH=a("strong"),Uje=o("imagegpt"),Jje=o(" \u2014 "),y9=a("a"),Yje=o("ImageGPTConfig"),Kje=o(" (ImageGPT model)"),Zje=l(),Mm=a("li"),oH=a("strong"),eDe=o("layoutlm"),oDe=o(" \u2014 "),w9=a("a"),rDe=o("LayoutLMConfig"),tDe=o(" (LayoutLM model)"),aDe=l(),Em=a("li"),rH=a("strong"),nDe=o("layoutlmv2"),sDe=o(" \u2014 "),A9=a("a"),lDe=o("LayoutLMv2Config"),iDe=o(" (LayoutLMv2 model)"),dDe=l(),ym=a("li"),tH=a("strong"),cDe=o("led"),fDe=o(" \u2014 "),L9=a("a"),mDe=o("LEDConfig"),gDe=o(" (LED model)"),hDe=l(),wm=a("li"),aH=a("strong"),pDe=o("longformer"),_De=o(" \u2014 "),B9=a("a"),uDe=o("LongformerConfig"),bDe=o(" (Longformer model)"),vDe=l(),Am=a("li"),nH=a("strong"),TDe=o("luke"),FDe=o(" \u2014 "),x9=a("a"),CDe=o("LukeConfig"),MDe=o(" (LUKE model)"),EDe=l(),Lm=a("li"),sH=a("strong"),yDe=o("lxmert"),wDe=o(" \u2014 "),k9=a("a"),ADe=o("LxmertConfig"),LDe=o(" (LXMERT model)"),BDe=l(),Bm=a("li"),lH=a("strong"),xDe=o("m2m_100"),kDe=o(" \u2014 "),R9=a("a"),RDe=o("M2M100Config"),SDe=o(" (M2M100 model)"),PDe=l(),xm=a("li"),iH=a("strong"),$De=o("marian"),IDe=o(" \u2014 "),S9=a("a"),jDe=o("MarianConfig"),DDe=o(" (Marian model)"),NDe=l(),km=a("li"),dH=a("strong"),qDe=o("maskformer"),ODe=o(" \u2014 "),P9=a("a"),GDe=o("MaskFormerConfig"),XDe=o(" (MaskFormer model)"),VDe=l(),Rm=a("li"),cH=a("strong"),zDe=o("mbart"),WDe=o(" \u2014 "),$9=a("a"),QDe=o("MBartConfig"),HDe=o(" (mBART model)"),UDe=l(),Sm=a("li"),fH=a("strong"),JDe=o("megatron-bert"),YDe=o(" \u2014 "),I9=a("a"),KDe=o("MegatronBertConfig"),ZDe=o(" (MegatronBert model)"),eNe=l(),Pm=a("li"),mH=a("strong"),oNe=o("mobilebert"),rNe=o(" \u2014 "),j9=a("a"),tNe=o("MobileBertConfig"),aNe=o(" (MobileBERT model)"),nNe=l(),$m=a("li"),gH=a("strong"),sNe=o("mpnet"),lNe=o(" \u2014 "),D9=a("a"),iNe=o("MPNetConfig"),dNe=o(" (MPNet model)"),cNe=l(),Im=a("li"),hH=a("strong"),fNe=o("mt5"),mNe=o(" \u2014 "),N9=a("a"),gNe=o("MT5Config"),hNe=o(" (mT5 model)"),pNe=l(),jm=a("li"),pH=a("strong"),_Ne=o("nystromformer"),uNe=o(" \u2014 "),q9=a("a"),bNe=o("NystromformerConfig"),vNe=o(" (Nystromformer model)"),TNe=l(),Dm=a("li"),_H=a("strong"),FNe=o("openai-gpt"),CNe=o(" \u2014 "),O9=a("a"),MNe=o("OpenAIGPTConfig"),ENe=o(" (OpenAI GPT model)"),yNe=l(),Nm=a("li"),uH=a("strong"),wNe=o("pegasus"),ANe=o(" \u2014 "),G9=a("a"),LNe=o("PegasusConfig"),BNe=o(" (Pegasus model)"),xNe=l(),qm=a("li"),bH=a("strong"),kNe=o("perceiver"),RNe=o(" \u2014 "),X9=a("a"),SNe=o("PerceiverConfig"),PNe=o(" (Perceiver model)"),$Ne=l(),Om=a("li"),vH=a("strong"),INe=o("plbart"),jNe=o(" \u2014 "),V9=a("a"),DNe=o("PLBartConfig"),NNe=o(" (PLBart model)"),qNe=l(),Gm=a("li"),TH=a("strong"),ONe=o("poolformer"),GNe=o(" \u2014 "),z9=a("a"),XNe=o("PoolFormerConfig"),VNe=o(" (PoolFormer model)"),zNe=l(),Xm=a("li"),FH=a("strong"),WNe=o("prophetnet"),QNe=o(" \u2014 "),W9=a("a"),HNe=o("ProphetNetConfig"),UNe=o(" (ProphetNet model)"),JNe=l(),Vm=a("li"),CH=a("strong"),YNe=o("qdqbert"),KNe=o(" \u2014 "),Q9=a("a"),ZNe=o("QDQBertConfig"),eqe=o(" (QDQBert model)"),oqe=l(),zm=a("li"),MH=a("strong"),rqe=o("rag"),tqe=o(" \u2014 "),H9=a("a"),aqe=o("RagConfig"),nqe=o(" (RAG model)"),sqe=l(),Wm=a("li"),EH=a("strong"),lqe=o("realm"),iqe=o(" \u2014 "),U9=a("a"),dqe=o("RealmConfig"),cqe=o(" (Realm model)"),fqe=l(),Qm=a("li"),yH=a("strong"),mqe=o("reformer"),gqe=o(" \u2014 "),J9=a("a"),hqe=o("ReformerConfig"),pqe=o(" (Reformer model)"),_qe=l(),Hm=a("li"),wH=a("strong"),uqe=o("rembert"),bqe=o(" \u2014 "),Y9=a("a"),vqe=o("RemBertConfig"),Tqe=o(" (RemBERT model)"),Fqe=l(),Um=a("li"),AH=a("strong"),Cqe=o("retribert"),Mqe=o(" \u2014 "),K9=a("a"),Eqe=o("RetriBertConfig"),yqe=o(" (RetriBERT model)"),wqe=l(),Jm=a("li"),LH=a("strong"),Aqe=o("roberta"),Lqe=o(" \u2014 "),Z9=a("a"),Bqe=o("RobertaConfig"),xqe=o(" (RoBERTa model)"),kqe=l(),Ym=a("li"),BH=a("strong"),Rqe=o("roformer"),Sqe=o(" \u2014 "),eB=a("a"),Pqe=o("RoFormerConfig"),$qe=o(" (RoFormer model)"),Iqe=l(),Km=a("li"),xH=a("strong"),jqe=o("segformer"),Dqe=o(" \u2014 "),oB=a("a"),Nqe=o("SegformerConfig"),qqe=o(" (SegFormer model)"),Oqe=l(),Zm=a("li"),kH=a("strong"),Gqe=o("sew"),Xqe=o(" \u2014 "),rB=a("a"),Vqe=o("SEWConfig"),zqe=o(" (SEW model)"),Wqe=l(),eg=a("li"),RH=a("strong"),Qqe=o("sew-d"),Hqe=o(" \u2014 "),tB=a("a"),Uqe=o("SEWDConfig"),Jqe=o(" (SEW-D model)"),Yqe=l(),og=a("li"),SH=a("strong"),Kqe=o("speech-encoder-decoder"),Zqe=o(" \u2014 "),aB=a("a"),eOe=o("SpeechEncoderDecoderConfig"),oOe=o(" (Speech Encoder decoder model)"),rOe=l(),rg=a("li"),PH=a("strong"),tOe=o("speech_to_text"),aOe=o(" \u2014 "),nB=a("a"),nOe=o("Speech2TextConfig"),sOe=o(" (Speech2Text model)"),lOe=l(),tg=a("li"),$H=a("strong"),iOe=o("speech_to_text_2"),dOe=o(" \u2014 "),sB=a("a"),cOe=o("Speech2Text2Config"),fOe=o(" (Speech2Text2 model)"),mOe=l(),ag=a("li"),IH=a("strong"),gOe=o("splinter"),hOe=o(" \u2014 "),lB=a("a"),pOe=o("SplinterConfig"),_Oe=o(" (Splinter model)"),uOe=l(),ng=a("li"),jH=a("strong"),bOe=o("squeezebert"),vOe=o(" \u2014 "),iB=a("a"),TOe=o("SqueezeBertConfig"),FOe=o(" (SqueezeBERT model)"),COe=l(),sg=a("li"),DH=a("strong"),MOe=o("swin"),EOe=o(" \u2014 "),dB=a("a"),yOe=o("SwinConfig"),wOe=o(" (Swin model)"),AOe=l(),lg=a("li"),NH=a("strong"),LOe=o("t5"),BOe=o(" \u2014 "),cB=a("a"),xOe=o("T5Config"),kOe=o(" (T5 model)"),ROe=l(),ig=a("li"),qH=a("strong"),SOe=o("tapas"),POe=o(" \u2014 "),fB=a("a"),$Oe=o("TapasConfig"),IOe=o(" (TAPAS model)"),jOe=l(),dg=a("li"),OH=a("strong"),DOe=o("transfo-xl"),NOe=o(" \u2014 "),mB=a("a"),qOe=o("TransfoXLConfig"),OOe=o(" (Transformer-XL model)"),GOe=l(),cg=a("li"),GH=a("strong"),XOe=o("trocr"),VOe=o(" \u2014 "),gB=a("a"),zOe=o("TrOCRConfig"),WOe=o(" (TrOCR model)"),QOe=l(),fg=a("li"),XH=a("strong"),HOe=o("unispeech"),UOe=o(" \u2014 "),hB=a("a"),JOe=o("UniSpeechConfig"),YOe=o(" (UniSpeech model)"),KOe=l(),mg=a("li"),VH=a("strong"),ZOe=o("unispeech-sat"),eGe=o(" \u2014 "),pB=a("a"),oGe=o("UniSpeechSatConfig"),rGe=o(" (UniSpeechSat model)"),tGe=l(),gg=a("li"),zH=a("strong"),aGe=o("vilt"),nGe=o(" \u2014 "),_B=a("a"),sGe=o("ViltConfig"),lGe=o(" (ViLT model)"),iGe=l(),hg=a("li"),WH=a("strong"),dGe=o("vision-encoder-decoder"),cGe=o(" \u2014 "),uB=a("a"),fGe=o("VisionEncoderDecoderConfig"),mGe=o(" (Vision Encoder decoder model)"),gGe=l(),pg=a("li"),QH=a("strong"),hGe=o("vision-text-dual-encoder"),pGe=o(" \u2014 "),bB=a("a"),_Ge=o("VisionTextDualEncoderConfig"),uGe=o(" (VisionTextDualEncoder model)"),bGe=l(),_g=a("li"),HH=a("strong"),vGe=o("visual_bert"),TGe=o(" \u2014 "),vB=a("a"),FGe=o("VisualBertConfig"),CGe=o(" (VisualBert model)"),MGe=l(),ug=a("li"),UH=a("strong"),EGe=o("vit"),yGe=o(" \u2014 "),TB=a("a"),wGe=o("ViTConfig"),AGe=o(" (ViT model)"),LGe=l(),bg=a("li"),JH=a("strong"),BGe=o("vit_mae"),xGe=o(" \u2014 "),FB=a("a"),kGe=o("ViTMAEConfig"),RGe=o(" (ViTMAE model)"),SGe=l(),vg=a("li"),YH=a("strong"),PGe=o("wav2vec2"),$Ge=o(" \u2014 "),CB=a("a"),IGe=o("Wav2Vec2Config"),jGe=o(" (Wav2Vec2 model)"),DGe=l(),Tg=a("li"),KH=a("strong"),NGe=o("wavlm"),qGe=o(" \u2014 "),MB=a("a"),OGe=o("WavLMConfig"),GGe=o(" (WavLM model)"),XGe=l(),Fg=a("li"),ZH=a("strong"),VGe=o("xglm"),zGe=o(" \u2014 "),EB=a("a"),WGe=o("XGLMConfig"),QGe=o(" (XGLM model)"),HGe=l(),Cg=a("li"),eU=a("strong"),UGe=o("xlm"),JGe=o(" \u2014 "),yB=a("a"),YGe=o("XLMConfig"),KGe=o(" (XLM model)"),ZGe=l(),Mg=a("li"),oU=a("strong"),eXe=o("xlm-prophetnet"),oXe=o(" \u2014 "),wB=a("a"),rXe=o("XLMProphetNetConfig"),tXe=o(" (XLMProphetNet model)"),aXe=l(),Eg=a("li"),rU=a("strong"),nXe=o("xlm-roberta"),sXe=o(" \u2014 "),AB=a("a"),lXe=o("XLMRobertaConfig"),iXe=o(" (XLM-RoBERTa model)"),dXe=l(),yg=a("li"),tU=a("strong"),cXe=o("xlm-roberta-xl"),fXe=o(" \u2014 "),LB=a("a"),mXe=o("XLMRobertaXLConfig"),gXe=o(" (XLM-RoBERTa-XL model)"),hXe=l(),wg=a("li"),aU=a("strong"),pXe=o("xlnet"),_Xe=o(" \u2014 "),BB=a("a"),uXe=o("XLNetConfig"),bXe=o(" (XLNet model)"),vXe=l(),Ag=a("li"),nU=a("strong"),TXe=o("yoso"),FXe=o(" \u2014 "),xB=a("a"),CXe=o("YosoConfig"),MXe=o(" (YOSO model)"),EXe=l(),sU=a("p"),yXe=o("Examples:"),wXe=l(),f(rE.$$.fragment),AXe=l(),Lg=a("div"),f(tE.$$.fragment),LXe=l(),lU=a("p"),BXe=o("Register a new configuration for this class."),nxe=l(),Wi=a("h2"),Bg=a("a"),iU=a("span"),f(aE.$$.fragment),xXe=l(),dU=a("span"),kXe=o("AutoTokenizer"),sxe=l(),Qo=a("div"),f(nE.$$.fragment),RXe=l(),sE=a("p"),SXe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),kB=a("a"),PXe=o("AutoTokenizer.from_pretrained()"),$Xe=o(" class method."),IXe=l(),lE=a("p"),jXe=o("This class cannot be instantiated directly using "),cU=a("code"),DXe=o("__init__()"),NXe=o(" (throws an error)."),qXe=l(),go=a("div"),f(iE.$$.fragment),OXe=l(),fU=a("p"),GXe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),XXe=l(),Oa=a("p"),VXe=o("The tokenizer class to instantiate is selected based on the "),mU=a("code"),zXe=o("model_type"),WXe=o(` property of the config object (either
passed as an argument or loaded from `),gU=a("code"),QXe=o("pretrained_model_name_or_path"),HXe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hU=a("code"),UXe=o("pretrained_model_name_or_path"),JXe=o(":"),YXe=l(),E=a("ul"),Wn=a("li"),pU=a("strong"),KXe=o("albert"),ZXe=o(" \u2014 "),RB=a("a"),eVe=o("AlbertTokenizer"),oVe=o(" or "),SB=a("a"),rVe=o("AlbertTokenizerFast"),tVe=o(" (ALBERT model)"),aVe=l(),Qn=a("li"),_U=a("strong"),nVe=o("bart"),sVe=o(" \u2014 "),PB=a("a"),lVe=o("BartTokenizer"),iVe=o(" or "),$B=a("a"),dVe=o("BartTokenizerFast"),cVe=o(" (BART model)"),fVe=l(),Hn=a("li"),uU=a("strong"),mVe=o("barthez"),gVe=o(" \u2014 "),IB=a("a"),hVe=o("BarthezTokenizer"),pVe=o(" or "),jB=a("a"),_Ve=o("BarthezTokenizerFast"),uVe=o(" (BARThez model)"),bVe=l(),xg=a("li"),bU=a("strong"),vVe=o("bartpho"),TVe=o(" \u2014 "),DB=a("a"),FVe=o("BartphoTokenizer"),CVe=o(" (BARTpho model)"),MVe=l(),Un=a("li"),vU=a("strong"),EVe=o("bert"),yVe=o(" \u2014 "),NB=a("a"),wVe=o("BertTokenizer"),AVe=o(" or "),qB=a("a"),LVe=o("BertTokenizerFast"),BVe=o(" (BERT model)"),xVe=l(),kg=a("li"),TU=a("strong"),kVe=o("bert-generation"),RVe=o(" \u2014 "),OB=a("a"),SVe=o("BertGenerationTokenizer"),PVe=o(" (Bert Generation model)"),$Ve=l(),Rg=a("li"),FU=a("strong"),IVe=o("bert-japanese"),jVe=o(" \u2014 "),GB=a("a"),DVe=o("BertJapaneseTokenizer"),NVe=o(" (BertJapanese model)"),qVe=l(),Sg=a("li"),CU=a("strong"),OVe=o("bertweet"),GVe=o(" \u2014 "),XB=a("a"),XVe=o("BertweetTokenizer"),VVe=o(" (Bertweet model)"),zVe=l(),Jn=a("li"),MU=a("strong"),WVe=o("big_bird"),QVe=o(" \u2014 "),VB=a("a"),HVe=o("BigBirdTokenizer"),UVe=o(" or "),zB=a("a"),JVe=o("BigBirdTokenizerFast"),YVe=o(" (BigBird model)"),KVe=l(),Yn=a("li"),EU=a("strong"),ZVe=o("bigbird_pegasus"),eze=o(" \u2014 "),WB=a("a"),oze=o("PegasusTokenizer"),rze=o(" or "),QB=a("a"),tze=o("PegasusTokenizerFast"),aze=o(" (BigBirdPegasus model)"),nze=l(),Kn=a("li"),yU=a("strong"),sze=o("blenderbot"),lze=o(" \u2014 "),HB=a("a"),ize=o("BlenderbotTokenizer"),dze=o(" or "),UB=a("a"),cze=o("BlenderbotTokenizerFast"),fze=o(" (Blenderbot model)"),mze=l(),Pg=a("li"),wU=a("strong"),gze=o("blenderbot-small"),hze=o(" \u2014 "),JB=a("a"),pze=o("BlenderbotSmallTokenizer"),_ze=o(" (BlenderbotSmall model)"),uze=l(),$g=a("li"),AU=a("strong"),bze=o("byt5"),vze=o(" \u2014 "),YB=a("a"),Tze=o("ByT5Tokenizer"),Fze=o(" (ByT5 model)"),Cze=l(),Zn=a("li"),LU=a("strong"),Mze=o("camembert"),Eze=o(" \u2014 "),KB=a("a"),yze=o("CamembertTokenizer"),wze=o(" or "),ZB=a("a"),Aze=o("CamembertTokenizerFast"),Lze=o(" (CamemBERT model)"),Bze=l(),Ig=a("li"),BU=a("strong"),xze=o("canine"),kze=o(" \u2014 "),ex=a("a"),Rze=o("CanineTokenizer"),Sze=o(" (Canine model)"),Pze=l(),es=a("li"),xU=a("strong"),$ze=o("clip"),Ize=o(" \u2014 "),ox=a("a"),jze=o("CLIPTokenizer"),Dze=o(" or "),rx=a("a"),Nze=o("CLIPTokenizerFast"),qze=o(" (CLIP model)"),Oze=l(),os=a("li"),kU=a("strong"),Gze=o("convbert"),Xze=o(" \u2014 "),tx=a("a"),Vze=o("ConvBertTokenizer"),zze=o(" or "),ax=a("a"),Wze=o("ConvBertTokenizerFast"),Qze=o(" (ConvBERT model)"),Hze=l(),rs=a("li"),RU=a("strong"),Uze=o("cpm"),Jze=o(" \u2014 "),nx=a("a"),Yze=o("CpmTokenizer"),Kze=o(" or "),SU=a("code"),Zze=o("CpmTokenizerFast"),eWe=o(" (CPM model)"),oWe=l(),jg=a("li"),PU=a("strong"),rWe=o("ctrl"),tWe=o(" \u2014 "),sx=a("a"),aWe=o("CTRLTokenizer"),nWe=o(" (CTRL model)"),sWe=l(),ts=a("li"),$U=a("strong"),lWe=o("deberta"),iWe=o(" \u2014 "),lx=a("a"),dWe=o("DebertaTokenizer"),cWe=o(" or "),ix=a("a"),fWe=o("DebertaTokenizerFast"),mWe=o(" (DeBERTa model)"),gWe=l(),Dg=a("li"),IU=a("strong"),hWe=o("deberta-v2"),pWe=o(" \u2014 "),dx=a("a"),_We=o("DebertaV2Tokenizer"),uWe=o(" (DeBERTa-v2 model)"),bWe=l(),as=a("li"),jU=a("strong"),vWe=o("distilbert"),TWe=o(" \u2014 "),cx=a("a"),FWe=o("DistilBertTokenizer"),CWe=o(" or "),fx=a("a"),MWe=o("DistilBertTokenizerFast"),EWe=o(" (DistilBERT model)"),yWe=l(),ns=a("li"),DU=a("strong"),wWe=o("dpr"),AWe=o(" \u2014 "),mx=a("a"),LWe=o("DPRQuestionEncoderTokenizer"),BWe=o(" or "),gx=a("a"),xWe=o("DPRQuestionEncoderTokenizerFast"),kWe=o(" (DPR model)"),RWe=l(),ss=a("li"),NU=a("strong"),SWe=o("electra"),PWe=o(" \u2014 "),hx=a("a"),$We=o("ElectraTokenizer"),IWe=o(" or "),px=a("a"),jWe=o("ElectraTokenizerFast"),DWe=o(" (ELECTRA model)"),NWe=l(),Ng=a("li"),qU=a("strong"),qWe=o("flaubert"),OWe=o(" \u2014 "),_x=a("a"),GWe=o("FlaubertTokenizer"),XWe=o(" (FlauBERT model)"),VWe=l(),ls=a("li"),OU=a("strong"),zWe=o("fnet"),WWe=o(" \u2014 "),ux=a("a"),QWe=o("FNetTokenizer"),HWe=o(" or "),bx=a("a"),UWe=o("FNetTokenizerFast"),JWe=o(" (FNet model)"),YWe=l(),qg=a("li"),GU=a("strong"),KWe=o("fsmt"),ZWe=o(" \u2014 "),vx=a("a"),eQe=o("FSMTTokenizer"),oQe=o(" (FairSeq Machine-Translation model)"),rQe=l(),is=a("li"),XU=a("strong"),tQe=o("funnel"),aQe=o(" \u2014 "),Tx=a("a"),nQe=o("FunnelTokenizer"),sQe=o(" or "),Fx=a("a"),lQe=o("FunnelTokenizerFast"),iQe=o(" (Funnel Transformer model)"),dQe=l(),ds=a("li"),VU=a("strong"),cQe=o("gpt2"),fQe=o(" \u2014 "),Cx=a("a"),mQe=o("GPT2Tokenizer"),gQe=o(" or "),Mx=a("a"),hQe=o("GPT2TokenizerFast"),pQe=o(" (OpenAI GPT-2 model)"),_Qe=l(),cs=a("li"),zU=a("strong"),uQe=o("gpt_neo"),bQe=o(" \u2014 "),Ex=a("a"),vQe=o("GPT2Tokenizer"),TQe=o(" or "),yx=a("a"),FQe=o("GPT2TokenizerFast"),CQe=o(" (GPT Neo model)"),MQe=l(),fs=a("li"),WU=a("strong"),EQe=o("herbert"),yQe=o(" \u2014 "),wx=a("a"),wQe=o("HerbertTokenizer"),AQe=o(" or "),Ax=a("a"),LQe=o("HerbertTokenizerFast"),BQe=o(" (HerBERT model)"),xQe=l(),Og=a("li"),QU=a("strong"),kQe=o("hubert"),RQe=o(" \u2014 "),Lx=a("a"),SQe=o("Wav2Vec2CTCTokenizer"),PQe=o(" (Hubert model)"),$Qe=l(),ms=a("li"),HU=a("strong"),IQe=o("ibert"),jQe=o(" \u2014 "),Bx=a("a"),DQe=o("RobertaTokenizer"),NQe=o(" or "),xx=a("a"),qQe=o("RobertaTokenizerFast"),OQe=o(" (I-BERT model)"),GQe=l(),gs=a("li"),UU=a("strong"),XQe=o("layoutlm"),VQe=o(" \u2014 "),kx=a("a"),zQe=o("LayoutLMTokenizer"),WQe=o(" or "),Rx=a("a"),QQe=o("LayoutLMTokenizerFast"),HQe=o(" (LayoutLM model)"),UQe=l(),hs=a("li"),JU=a("strong"),JQe=o("layoutlmv2"),YQe=o(" \u2014 "),Sx=a("a"),KQe=o("LayoutLMv2Tokenizer"),ZQe=o(" or "),Px=a("a"),eHe=o("LayoutLMv2TokenizerFast"),oHe=o(" (LayoutLMv2 model)"),rHe=l(),ps=a("li"),YU=a("strong"),tHe=o("layoutxlm"),aHe=o(" \u2014 "),$x=a("a"),nHe=o("LayoutXLMTokenizer"),sHe=o(" or "),Ix=a("a"),lHe=o("LayoutXLMTokenizerFast"),iHe=o(" (LayoutXLM model)"),dHe=l(),_s=a("li"),KU=a("strong"),cHe=o("led"),fHe=o(" \u2014 "),jx=a("a"),mHe=o("LEDTokenizer"),gHe=o(" or "),Dx=a("a"),hHe=o("LEDTokenizerFast"),pHe=o(" (LED model)"),_He=l(),us=a("li"),ZU=a("strong"),uHe=o("longformer"),bHe=o(" \u2014 "),Nx=a("a"),vHe=o("LongformerTokenizer"),THe=o(" or "),qx=a("a"),FHe=o("LongformerTokenizerFast"),CHe=o(" (Longformer model)"),MHe=l(),Gg=a("li"),eJ=a("strong"),EHe=o("luke"),yHe=o(" \u2014 "),Ox=a("a"),wHe=o("LukeTokenizer"),AHe=o(" (LUKE model)"),LHe=l(),bs=a("li"),oJ=a("strong"),BHe=o("lxmert"),xHe=o(" \u2014 "),Gx=a("a"),kHe=o("LxmertTokenizer"),RHe=o(" or "),Xx=a("a"),SHe=o("LxmertTokenizerFast"),PHe=o(" (LXMERT model)"),$He=l(),Xg=a("li"),rJ=a("strong"),IHe=o("m2m_100"),jHe=o(" \u2014 "),Vx=a("a"),DHe=o("M2M100Tokenizer"),NHe=o(" (M2M100 model)"),qHe=l(),Vg=a("li"),tJ=a("strong"),OHe=o("marian"),GHe=o(" \u2014 "),zx=a("a"),XHe=o("MarianTokenizer"),VHe=o(" (Marian model)"),zHe=l(),vs=a("li"),aJ=a("strong"),WHe=o("mbart"),QHe=o(" \u2014 "),Wx=a("a"),HHe=o("MBartTokenizer"),UHe=o(" or "),Qx=a("a"),JHe=o("MBartTokenizerFast"),YHe=o(" (mBART model)"),KHe=l(),Ts=a("li"),nJ=a("strong"),ZHe=o("mbart50"),eUe=o(" \u2014 "),Hx=a("a"),oUe=o("MBart50Tokenizer"),rUe=o(" or "),Ux=a("a"),tUe=o("MBart50TokenizerFast"),aUe=o(" (mBART-50 model)"),nUe=l(),zg=a("li"),sJ=a("strong"),sUe=o("mluke"),lUe=o(" \u2014 "),Jx=a("a"),iUe=o("MLukeTokenizer"),dUe=o(" (mLUKE model)"),cUe=l(),Fs=a("li"),lJ=a("strong"),fUe=o("mobilebert"),mUe=o(" \u2014 "),Yx=a("a"),gUe=o("MobileBertTokenizer"),hUe=o(" or "),Kx=a("a"),pUe=o("MobileBertTokenizerFast"),_Ue=o(" (MobileBERT model)"),uUe=l(),Cs=a("li"),iJ=a("strong"),bUe=o("mpnet"),vUe=o(" \u2014 "),Zx=a("a"),TUe=o("MPNetTokenizer"),FUe=o(" or "),ek=a("a"),CUe=o("MPNetTokenizerFast"),MUe=o(" (MPNet model)"),EUe=l(),Ms=a("li"),dJ=a("strong"),yUe=o("mt5"),wUe=o(" \u2014 "),ok=a("a"),AUe=o("MT5Tokenizer"),LUe=o(" or "),rk=a("a"),BUe=o("MT5TokenizerFast"),xUe=o(" (mT5 model)"),kUe=l(),Es=a("li"),cJ=a("strong"),RUe=o("openai-gpt"),SUe=o(" \u2014 "),tk=a("a"),PUe=o("OpenAIGPTTokenizer"),$Ue=o(" or "),ak=a("a"),IUe=o("OpenAIGPTTokenizerFast"),jUe=o(" (OpenAI GPT model)"),DUe=l(),ys=a("li"),fJ=a("strong"),NUe=o("pegasus"),qUe=o(" \u2014 "),nk=a("a"),OUe=o("PegasusTokenizer"),GUe=o(" or "),sk=a("a"),XUe=o("PegasusTokenizerFast"),VUe=o(" (Pegasus model)"),zUe=l(),Wg=a("li"),mJ=a("strong"),WUe=o("perceiver"),QUe=o(" \u2014 "),lk=a("a"),HUe=o("PerceiverTokenizer"),UUe=o(" (Perceiver model)"),JUe=l(),Qg=a("li"),gJ=a("strong"),YUe=o("phobert"),KUe=o(" \u2014 "),ik=a("a"),ZUe=o("PhobertTokenizer"),eJe=o(" (PhoBERT model)"),oJe=l(),Hg=a("li"),hJ=a("strong"),rJe=o("plbart"),tJe=o(" \u2014 "),dk=a("a"),aJe=o("PLBartTokenizer"),nJe=o(" (PLBart model)"),sJe=l(),Ug=a("li"),pJ=a("strong"),lJe=o("prophetnet"),iJe=o(" \u2014 "),ck=a("a"),dJe=o("ProphetNetTokenizer"),cJe=o(" (ProphetNet model)"),fJe=l(),ws=a("li"),_J=a("strong"),mJe=o("qdqbert"),gJe=o(" \u2014 "),fk=a("a"),hJe=o("BertTokenizer"),pJe=o(" or "),mk=a("a"),_Je=o("BertTokenizerFast"),uJe=o(" (QDQBert model)"),bJe=l(),Jg=a("li"),uJ=a("strong"),vJe=o("rag"),TJe=o(" \u2014 "),gk=a("a"),FJe=o("RagTokenizer"),CJe=o(" (RAG model)"),MJe=l(),As=a("li"),bJ=a("strong"),EJe=o("realm"),yJe=o(" \u2014 "),hk=a("a"),wJe=o("RealmTokenizer"),AJe=o(" or "),pk=a("a"),LJe=o("RealmTokenizerFast"),BJe=o(" (Realm model)"),xJe=l(),Ls=a("li"),vJ=a("strong"),kJe=o("reformer"),RJe=o(" \u2014 "),_k=a("a"),SJe=o("ReformerTokenizer"),PJe=o(" or "),uk=a("a"),$Je=o("ReformerTokenizerFast"),IJe=o(" (Reformer model)"),jJe=l(),Bs=a("li"),TJ=a("strong"),DJe=o("rembert"),NJe=o(" \u2014 "),bk=a("a"),qJe=o("RemBertTokenizer"),OJe=o(" or "),vk=a("a"),GJe=o("RemBertTokenizerFast"),XJe=o(" (RemBERT model)"),VJe=l(),xs=a("li"),FJ=a("strong"),zJe=o("retribert"),WJe=o(" \u2014 "),Tk=a("a"),QJe=o("RetriBertTokenizer"),HJe=o(" or "),Fk=a("a"),UJe=o("RetriBertTokenizerFast"),JJe=o(" (RetriBERT model)"),YJe=l(),ks=a("li"),CJ=a("strong"),KJe=o("roberta"),ZJe=o(" \u2014 "),Ck=a("a"),eYe=o("RobertaTokenizer"),oYe=o(" or "),Mk=a("a"),rYe=o("RobertaTokenizerFast"),tYe=o(" (RoBERTa model)"),aYe=l(),Rs=a("li"),MJ=a("strong"),nYe=o("roformer"),sYe=o(" \u2014 "),Ek=a("a"),lYe=o("RoFormerTokenizer"),iYe=o(" or "),yk=a("a"),dYe=o("RoFormerTokenizerFast"),cYe=o(" (RoFormer model)"),fYe=l(),Yg=a("li"),EJ=a("strong"),mYe=o("speech_to_text"),gYe=o(" \u2014 "),wk=a("a"),hYe=o("Speech2TextTokenizer"),pYe=o(" (Speech2Text model)"),_Ye=l(),Kg=a("li"),yJ=a("strong"),uYe=o("speech_to_text_2"),bYe=o(" \u2014 "),Ak=a("a"),vYe=o("Speech2Text2Tokenizer"),TYe=o(" (Speech2Text2 model)"),FYe=l(),Ss=a("li"),wJ=a("strong"),CYe=o("splinter"),MYe=o(" \u2014 "),Lk=a("a"),EYe=o("SplinterTokenizer"),yYe=o(" or "),Bk=a("a"),wYe=o("SplinterTokenizerFast"),AYe=o(" (Splinter model)"),LYe=l(),Ps=a("li"),AJ=a("strong"),BYe=o("squeezebert"),xYe=o(" \u2014 "),xk=a("a"),kYe=o("SqueezeBertTokenizer"),RYe=o(" or "),kk=a("a"),SYe=o("SqueezeBertTokenizerFast"),PYe=o(" (SqueezeBERT model)"),$Ye=l(),$s=a("li"),LJ=a("strong"),IYe=o("t5"),jYe=o(" \u2014 "),Rk=a("a"),DYe=o("T5Tokenizer"),NYe=o(" or "),Sk=a("a"),qYe=o("T5TokenizerFast"),OYe=o(" (T5 model)"),GYe=l(),Zg=a("li"),BJ=a("strong"),XYe=o("tapas"),VYe=o(" \u2014 "),Pk=a("a"),zYe=o("TapasTokenizer"),WYe=o(" (TAPAS model)"),QYe=l(),eh=a("li"),xJ=a("strong"),HYe=o("transfo-xl"),UYe=o(" \u2014 "),$k=a("a"),JYe=o("TransfoXLTokenizer"),YYe=o(" (Transformer-XL model)"),KYe=l(),oh=a("li"),kJ=a("strong"),ZYe=o("wav2vec2"),eKe=o(" \u2014 "),Ik=a("a"),oKe=o("Wav2Vec2CTCTokenizer"),rKe=o(" (Wav2Vec2 model)"),tKe=l(),rh=a("li"),RJ=a("strong"),aKe=o("wav2vec2_phoneme"),nKe=o(" \u2014 "),jk=a("a"),sKe=o("Wav2Vec2PhonemeCTCTokenizer"),lKe=o(" (Wav2Vec2Phoneme model)"),iKe=l(),Is=a("li"),SJ=a("strong"),dKe=o("xglm"),cKe=o(" \u2014 "),Dk=a("a"),fKe=o("XGLMTokenizer"),mKe=o(" or "),Nk=a("a"),gKe=o("XGLMTokenizerFast"),hKe=o(" (XGLM model)"),pKe=l(),th=a("li"),PJ=a("strong"),_Ke=o("xlm"),uKe=o(" \u2014 "),qk=a("a"),bKe=o("XLMTokenizer"),vKe=o(" (XLM model)"),TKe=l(),ah=a("li"),$J=a("strong"),FKe=o("xlm-prophetnet"),CKe=o(" \u2014 "),Ok=a("a"),MKe=o("XLMProphetNetTokenizer"),EKe=o(" (XLMProphetNet model)"),yKe=l(),js=a("li"),IJ=a("strong"),wKe=o("xlm-roberta"),AKe=o(" \u2014 "),Gk=a("a"),LKe=o("XLMRobertaTokenizer"),BKe=o(" or "),Xk=a("a"),xKe=o("XLMRobertaTokenizerFast"),kKe=o(" (XLM-RoBERTa model)"),RKe=l(),Ds=a("li"),jJ=a("strong"),SKe=o("xlnet"),PKe=o(" \u2014 "),Vk=a("a"),$Ke=o("XLNetTokenizer"),IKe=o(" or "),zk=a("a"),jKe=o("XLNetTokenizerFast"),DKe=o(" (XLNet model)"),NKe=l(),DJ=a("p"),qKe=o("Examples:"),OKe=l(),f(dE.$$.fragment),GKe=l(),nh=a("div"),f(cE.$$.fragment),XKe=l(),NJ=a("p"),VKe=o("Register a new tokenizer in this mapping."),lxe=l(),Qi=a("h2"),sh=a("a"),qJ=a("span"),f(fE.$$.fragment),zKe=l(),OJ=a("span"),WKe=o("AutoFeatureExtractor"),ixe=l(),Ho=a("div"),f(mE.$$.fragment),QKe=l(),gE=a("p"),HKe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Wk=a("a"),UKe=o("AutoFeatureExtractor.from_pretrained()"),JKe=o(" class method."),YKe=l(),hE=a("p"),KKe=o("This class cannot be instantiated directly using "),GJ=a("code"),ZKe=o("__init__()"),eZe=o(" (throws an error)."),oZe=l(),$e=a("div"),f(pE.$$.fragment),rZe=l(),XJ=a("p"),tZe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),aZe=l(),Ga=a("p"),nZe=o("The feature extractor class to instantiate is selected based on the "),VJ=a("code"),sZe=o("model_type"),lZe=o(` property of the config object
(either passed as an argument or loaded from `),zJ=a("code"),iZe=o("pretrained_model_name_or_path"),dZe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),WJ=a("code"),cZe=o("pretrained_model_name_or_path"),fZe=o(":"),mZe=l(),ae=a("ul"),lh=a("li"),QJ=a("strong"),gZe=o("beit"),hZe=o(" \u2014 "),Qk=a("a"),pZe=o("BeitFeatureExtractor"),_Ze=o(" (BEiT model)"),uZe=l(),ih=a("li"),HJ=a("strong"),bZe=o("clip"),vZe=o(" \u2014 "),Hk=a("a"),TZe=o("CLIPFeatureExtractor"),FZe=o(" (CLIP model)"),CZe=l(),dh=a("li"),UJ=a("strong"),MZe=o("convnext"),EZe=o(" \u2014 "),Uk=a("a"),yZe=o("ConvNextFeatureExtractor"),wZe=o(" (ConvNext model)"),AZe=l(),ch=a("li"),JJ=a("strong"),LZe=o("deit"),BZe=o(" \u2014 "),Jk=a("a"),xZe=o("DeiTFeatureExtractor"),kZe=o(" (DeiT model)"),RZe=l(),fh=a("li"),YJ=a("strong"),SZe=o("detr"),PZe=o(" \u2014 "),Yk=a("a"),$Ze=o("DetrFeatureExtractor"),IZe=o(" (DETR model)"),jZe=l(),mh=a("li"),KJ=a("strong"),DZe=o("hubert"),NZe=o(" \u2014 "),Kk=a("a"),qZe=o("Wav2Vec2FeatureExtractor"),OZe=o(" (Hubert model)"),GZe=l(),gh=a("li"),ZJ=a("strong"),XZe=o("layoutlmv2"),VZe=o(" \u2014 "),Zk=a("a"),zZe=o("LayoutLMv2FeatureExtractor"),WZe=o(" (LayoutLMv2 model)"),QZe=l(),hh=a("li"),eY=a("strong"),HZe=o("maskformer"),UZe=o(" \u2014 "),eR=a("a"),JZe=o("MaskFormerFeatureExtractor"),YZe=o(" (MaskFormer model)"),KZe=l(),ph=a("li"),oY=a("strong"),ZZe=o("perceiver"),eeo=o(" \u2014 "),oR=a("a"),oeo=o("PerceiverFeatureExtractor"),reo=o(" (Perceiver model)"),teo=l(),_h=a("li"),rY=a("strong"),aeo=o("poolformer"),neo=o(" \u2014 "),rR=a("a"),seo=o("PoolFormerFeatureExtractor"),leo=o(" (PoolFormer model)"),ieo=l(),uh=a("li"),tY=a("strong"),deo=o("segformer"),ceo=o(" \u2014 "),tR=a("a"),feo=o("SegformerFeatureExtractor"),meo=o(" (SegFormer model)"),geo=l(),bh=a("li"),aY=a("strong"),heo=o("speech_to_text"),peo=o(" \u2014 "),aR=a("a"),_eo=o("Speech2TextFeatureExtractor"),ueo=o(" (Speech2Text model)"),beo=l(),vh=a("li"),nY=a("strong"),veo=o("swin"),Teo=o(" \u2014 "),nR=a("a"),Feo=o("ViTFeatureExtractor"),Ceo=o(" (Swin model)"),Meo=l(),Th=a("li"),sY=a("strong"),Eeo=o("vit"),yeo=o(" \u2014 "),sR=a("a"),weo=o("ViTFeatureExtractor"),Aeo=o(" (ViT model)"),Leo=l(),Fh=a("li"),lY=a("strong"),Beo=o("vit_mae"),xeo=o(" \u2014 "),lR=a("a"),keo=o("ViTFeatureExtractor"),Reo=o(" (ViTMAE model)"),Seo=l(),Ch=a("li"),iY=a("strong"),Peo=o("wav2vec2"),$eo=o(" \u2014 "),iR=a("a"),Ieo=o("Wav2Vec2FeatureExtractor"),jeo=o(" (Wav2Vec2 model)"),Deo=l(),f(Mh.$$.fragment),Neo=l(),dY=a("p"),qeo=o("Examples:"),Oeo=l(),f(_E.$$.fragment),Geo=l(),Eh=a("div"),f(uE.$$.fragment),Xeo=l(),cY=a("p"),Veo=o("Register a new feature extractor for this class."),dxe=l(),Hi=a("h2"),yh=a("a"),fY=a("span"),f(bE.$$.fragment),zeo=l(),mY=a("span"),Weo=o("AutoProcessor"),cxe=l(),Uo=a("div"),f(vE.$$.fragment),Qeo=l(),TE=a("p"),Heo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dR=a("a"),Ueo=o("AutoProcessor.from_pretrained()"),Jeo=o(" class method."),Yeo=l(),FE=a("p"),Keo=o("This class cannot be instantiated directly using "),gY=a("code"),Zeo=o("__init__()"),eoo=o(" (throws an error)."),ooo=l(),Ie=a("div"),f(CE.$$.fragment),roo=l(),hY=a("p"),too=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),aoo=l(),Ui=a("p"),noo=o("The processor class to instantiate is selected based on the "),pY=a("code"),soo=o("model_type"),loo=o(` property of the config object (either
passed as an argument or loaded from `),_Y=a("code"),ioo=o("pretrained_model_name_or_path"),doo=o(" if possible):"),coo=l(),Be=a("ul"),wh=a("li"),uY=a("strong"),foo=o("clip"),moo=o(" \u2014 "),cR=a("a"),goo=o("CLIPProcessor"),hoo=o(" (CLIP model)"),poo=l(),Ah=a("li"),bY=a("strong"),_oo=o("layoutlmv2"),uoo=o(" \u2014 "),fR=a("a"),boo=o("LayoutLMv2Processor"),voo=o(" (LayoutLMv2 model)"),Too=l(),Lh=a("li"),vY=a("strong"),Foo=o("layoutxlm"),Coo=o(" \u2014 "),mR=a("a"),Moo=o("LayoutXLMProcessor"),Eoo=o(" (LayoutXLM model)"),yoo=l(),Bh=a("li"),TY=a("strong"),woo=o("speech_to_text"),Aoo=o(" \u2014 "),gR=a("a"),Loo=o("Speech2TextProcessor"),Boo=o(" (Speech2Text model)"),xoo=l(),xh=a("li"),FY=a("strong"),koo=o("speech_to_text_2"),Roo=o(" \u2014 "),hR=a("a"),Soo=o("Speech2Text2Processor"),Poo=o(" (Speech2Text2 model)"),$oo=l(),kh=a("li"),CY=a("strong"),Ioo=o("trocr"),joo=o(" \u2014 "),pR=a("a"),Doo=o("TrOCRProcessor"),Noo=o(" (TrOCR model)"),qoo=l(),Rh=a("li"),MY=a("strong"),Ooo=o("vision-text-dual-encoder"),Goo=o(" \u2014 "),_R=a("a"),Xoo=o("VisionTextDualEncoderProcessor"),Voo=o(" (VisionTextDualEncoder model)"),zoo=l(),Sh=a("li"),EY=a("strong"),Woo=o("wav2vec2"),Qoo=o(" \u2014 "),uR=a("a"),Hoo=o("Wav2Vec2Processor"),Uoo=o(" (Wav2Vec2 model)"),Joo=l(),f(Ph.$$.fragment),Yoo=l(),yY=a("p"),Koo=o("Examples:"),Zoo=l(),f(ME.$$.fragment),ero=l(),$h=a("div"),f(EE.$$.fragment),oro=l(),wY=a("p"),rro=o("Register a new processor for this class."),fxe=l(),Ji=a("h2"),Ih=a("a"),AY=a("span"),f(yE.$$.fragment),tro=l(),LY=a("span"),aro=o("AutoModel"),mxe=l(),Jo=a("div"),f(wE.$$.fragment),nro=l(),Yi=a("p"),sro=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BY=a("code"),lro=o("from_pretrained()"),iro=o("class method or the "),xY=a("code"),dro=o("from_config()"),cro=o(`class
method.`),fro=l(),AE=a("p"),mro=o("This class cannot be instantiated directly using "),kY=a("code"),gro=o("__init__()"),hro=o(" (throws an error)."),pro=l(),Vr=a("div"),f(LE.$$.fragment),_ro=l(),RY=a("p"),uro=o("Instantiates one of the base model classes of the library from a configuration."),bro=l(),Ki=a("p"),vro=o(`Note:
Loading a model from its configuration file does `),SY=a("strong"),Tro=o("not"),Fro=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=a("code"),Cro=o("from_pretrained()"),Mro=o("to load the model weights."),Ero=l(),$Y=a("p"),yro=o("Examples:"),wro=l(),f(BE.$$.fragment),Aro=l(),je=a("div"),f(xE.$$.fragment),Lro=l(),IY=a("p"),Bro=o("Instantiate one of the base model classes of the library from a pretrained model."),xro=l(),Xa=a("p"),kro=o("The model class to instantiate is selected based on the "),jY=a("code"),Rro=o("model_type"),Sro=o(` property of the config object (either
passed as an argument or loaded from `),DY=a("code"),Pro=o("pretrained_model_name_or_path"),$ro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NY=a("code"),Iro=o("pretrained_model_name_or_path"),jro=o(":"),Dro=l(),F=a("ul"),jh=a("li"),qY=a("strong"),Nro=o("albert"),qro=o(" \u2014 "),bR=a("a"),Oro=o("AlbertModel"),Gro=o(" (ALBERT model)"),Xro=l(),Dh=a("li"),OY=a("strong"),Vro=o("bart"),zro=o(" \u2014 "),vR=a("a"),Wro=o("BartModel"),Qro=o(" (BART model)"),Hro=l(),Nh=a("li"),GY=a("strong"),Uro=o("beit"),Jro=o(" \u2014 "),TR=a("a"),Yro=o("BeitModel"),Kro=o(" (BEiT model)"),Zro=l(),qh=a("li"),XY=a("strong"),eto=o("bert"),oto=o(" \u2014 "),FR=a("a"),rto=o("BertModel"),tto=o(" (BERT model)"),ato=l(),Oh=a("li"),VY=a("strong"),nto=o("bert-generation"),sto=o(" \u2014 "),CR=a("a"),lto=o("BertGenerationEncoder"),ito=o(" (Bert Generation model)"),dto=l(),Gh=a("li"),zY=a("strong"),cto=o("big_bird"),fto=o(" \u2014 "),MR=a("a"),mto=o("BigBirdModel"),gto=o(" (BigBird model)"),hto=l(),Xh=a("li"),WY=a("strong"),pto=o("bigbird_pegasus"),_to=o(" \u2014 "),ER=a("a"),uto=o("BigBirdPegasusModel"),bto=o(" (BigBirdPegasus model)"),vto=l(),Vh=a("li"),QY=a("strong"),Tto=o("blenderbot"),Fto=o(" \u2014 "),yR=a("a"),Cto=o("BlenderbotModel"),Mto=o(" (Blenderbot model)"),Eto=l(),zh=a("li"),HY=a("strong"),yto=o("blenderbot-small"),wto=o(" \u2014 "),wR=a("a"),Ato=o("BlenderbotSmallModel"),Lto=o(" (BlenderbotSmall model)"),Bto=l(),Wh=a("li"),UY=a("strong"),xto=o("camembert"),kto=o(" \u2014 "),AR=a("a"),Rto=o("CamembertModel"),Sto=o(" (CamemBERT model)"),Pto=l(),Qh=a("li"),JY=a("strong"),$to=o("canine"),Ito=o(" \u2014 "),LR=a("a"),jto=o("CanineModel"),Dto=o(" (Canine model)"),Nto=l(),Hh=a("li"),YY=a("strong"),qto=o("clip"),Oto=o(" \u2014 "),BR=a("a"),Gto=o("CLIPModel"),Xto=o(" (CLIP model)"),Vto=l(),Uh=a("li"),KY=a("strong"),zto=o("convbert"),Wto=o(" \u2014 "),xR=a("a"),Qto=o("ConvBertModel"),Hto=o(" (ConvBERT model)"),Uto=l(),Jh=a("li"),ZY=a("strong"),Jto=o("convnext"),Yto=o(" \u2014 "),kR=a("a"),Kto=o("ConvNextModel"),Zto=o(" (ConvNext model)"),eao=l(),Yh=a("li"),eK=a("strong"),oao=o("ctrl"),rao=o(" \u2014 "),RR=a("a"),tao=o("CTRLModel"),aao=o(" (CTRL model)"),nao=l(),Kh=a("li"),oK=a("strong"),sao=o("data2vec-audio"),lao=o(" \u2014 "),SR=a("a"),iao=o("Data2VecAudioModel"),dao=o(" (Data2VecAudio model)"),cao=l(),Zh=a("li"),rK=a("strong"),fao=o("data2vec-text"),mao=o(" \u2014 "),PR=a("a"),gao=o("Data2VecTextModel"),hao=o(" (Data2VecText model)"),pao=l(),ep=a("li"),tK=a("strong"),_ao=o("deberta"),uao=o(" \u2014 "),$R=a("a"),bao=o("DebertaModel"),vao=o(" (DeBERTa model)"),Tao=l(),op=a("li"),aK=a("strong"),Fao=o("deberta-v2"),Cao=o(" \u2014 "),IR=a("a"),Mao=o("DebertaV2Model"),Eao=o(" (DeBERTa-v2 model)"),yao=l(),rp=a("li"),nK=a("strong"),wao=o("deit"),Aao=o(" \u2014 "),jR=a("a"),Lao=o("DeiTModel"),Bao=o(" (DeiT model)"),xao=l(),tp=a("li"),sK=a("strong"),kao=o("detr"),Rao=o(" \u2014 "),DR=a("a"),Sao=o("DetrModel"),Pao=o(" (DETR model)"),$ao=l(),ap=a("li"),lK=a("strong"),Iao=o("distilbert"),jao=o(" \u2014 "),NR=a("a"),Dao=o("DistilBertModel"),Nao=o(" (DistilBERT model)"),qao=l(),np=a("li"),iK=a("strong"),Oao=o("dpr"),Gao=o(" \u2014 "),qR=a("a"),Xao=o("DPRQuestionEncoder"),Vao=o(" (DPR model)"),zao=l(),sp=a("li"),dK=a("strong"),Wao=o("electra"),Qao=o(" \u2014 "),OR=a("a"),Hao=o("ElectraModel"),Uao=o(" (ELECTRA model)"),Jao=l(),lp=a("li"),cK=a("strong"),Yao=o("flaubert"),Kao=o(" \u2014 "),GR=a("a"),Zao=o("FlaubertModel"),eno=o(" (FlauBERT model)"),ono=l(),ip=a("li"),fK=a("strong"),rno=o("fnet"),tno=o(" \u2014 "),XR=a("a"),ano=o("FNetModel"),nno=o(" (FNet model)"),sno=l(),dp=a("li"),mK=a("strong"),lno=o("fsmt"),ino=o(" \u2014 "),VR=a("a"),dno=o("FSMTModel"),cno=o(" (FairSeq Machine-Translation model)"),fno=l(),Ns=a("li"),gK=a("strong"),mno=o("funnel"),gno=o(" \u2014 "),zR=a("a"),hno=o("FunnelModel"),pno=o(" or "),WR=a("a"),_no=o("FunnelBaseModel"),uno=o(" (Funnel Transformer model)"),bno=l(),cp=a("li"),hK=a("strong"),vno=o("gpt2"),Tno=o(" \u2014 "),QR=a("a"),Fno=o("GPT2Model"),Cno=o(" (OpenAI GPT-2 model)"),Mno=l(),fp=a("li"),pK=a("strong"),Eno=o("gpt_neo"),yno=o(" \u2014 "),HR=a("a"),wno=o("GPTNeoModel"),Ano=o(" (GPT Neo model)"),Lno=l(),mp=a("li"),_K=a("strong"),Bno=o("gptj"),xno=o(" \u2014 "),UR=a("a"),kno=o("GPTJModel"),Rno=o(" (GPT-J model)"),Sno=l(),gp=a("li"),uK=a("strong"),Pno=o("hubert"),$no=o(" \u2014 "),JR=a("a"),Ino=o("HubertModel"),jno=o(" (Hubert model)"),Dno=l(),hp=a("li"),bK=a("strong"),Nno=o("ibert"),qno=o(" \u2014 "),YR=a("a"),Ono=o("IBertModel"),Gno=o(" (I-BERT model)"),Xno=l(),pp=a("li"),vK=a("strong"),Vno=o("imagegpt"),zno=o(" \u2014 "),KR=a("a"),Wno=o("ImageGPTModel"),Qno=o(" (ImageGPT model)"),Hno=l(),_p=a("li"),TK=a("strong"),Uno=o("layoutlm"),Jno=o(" \u2014 "),ZR=a("a"),Yno=o("LayoutLMModel"),Kno=o(" (LayoutLM model)"),Zno=l(),up=a("li"),FK=a("strong"),eso=o("layoutlmv2"),oso=o(" \u2014 "),eS=a("a"),rso=o("LayoutLMv2Model"),tso=o(" (LayoutLMv2 model)"),aso=l(),bp=a("li"),CK=a("strong"),nso=o("led"),sso=o(" \u2014 "),oS=a("a"),lso=o("LEDModel"),iso=o(" (LED model)"),dso=l(),vp=a("li"),MK=a("strong"),cso=o("longformer"),fso=o(" \u2014 "),rS=a("a"),mso=o("LongformerModel"),gso=o(" (Longformer model)"),hso=l(),Tp=a("li"),EK=a("strong"),pso=o("luke"),_so=o(" \u2014 "),tS=a("a"),uso=o("LukeModel"),bso=o(" (LUKE model)"),vso=l(),Fp=a("li"),yK=a("strong"),Tso=o("lxmert"),Fso=o(" \u2014 "),aS=a("a"),Cso=o("LxmertModel"),Mso=o(" (LXMERT model)"),Eso=l(),Cp=a("li"),wK=a("strong"),yso=o("m2m_100"),wso=o(" \u2014 "),nS=a("a"),Aso=o("M2M100Model"),Lso=o(" (M2M100 model)"),Bso=l(),Mp=a("li"),AK=a("strong"),xso=o("marian"),kso=o(" \u2014 "),sS=a("a"),Rso=o("MarianModel"),Sso=o(" (Marian model)"),Pso=l(),Ep=a("li"),LK=a("strong"),$so=o("maskformer"),Iso=o(" \u2014 "),lS=a("a"),jso=o("MaskFormerModel"),Dso=o(" (MaskFormer model)"),Nso=l(),yp=a("li"),BK=a("strong"),qso=o("mbart"),Oso=o(" \u2014 "),iS=a("a"),Gso=o("MBartModel"),Xso=o(" (mBART model)"),Vso=l(),wp=a("li"),xK=a("strong"),zso=o("megatron-bert"),Wso=o(" \u2014 "),dS=a("a"),Qso=o("MegatronBertModel"),Hso=o(" (MegatronBert model)"),Uso=l(),Ap=a("li"),kK=a("strong"),Jso=o("mobilebert"),Yso=o(" \u2014 "),cS=a("a"),Kso=o("MobileBertModel"),Zso=o(" (MobileBERT model)"),elo=l(),Lp=a("li"),RK=a("strong"),olo=o("mpnet"),rlo=o(" \u2014 "),fS=a("a"),tlo=o("MPNetModel"),alo=o(" (MPNet model)"),nlo=l(),Bp=a("li"),SK=a("strong"),slo=o("mt5"),llo=o(" \u2014 "),mS=a("a"),ilo=o("MT5Model"),dlo=o(" (mT5 model)"),clo=l(),xp=a("li"),PK=a("strong"),flo=o("nystromformer"),mlo=o(" \u2014 "),gS=a("a"),glo=o("NystromformerModel"),hlo=o(" (Nystromformer model)"),plo=l(),kp=a("li"),$K=a("strong"),_lo=o("openai-gpt"),ulo=o(" \u2014 "),hS=a("a"),blo=o("OpenAIGPTModel"),vlo=o(" (OpenAI GPT model)"),Tlo=l(),Rp=a("li"),IK=a("strong"),Flo=o("pegasus"),Clo=o(" \u2014 "),pS=a("a"),Mlo=o("PegasusModel"),Elo=o(" (Pegasus model)"),ylo=l(),Sp=a("li"),jK=a("strong"),wlo=o("perceiver"),Alo=o(" \u2014 "),_S=a("a"),Llo=o("PerceiverModel"),Blo=o(" (Perceiver model)"),xlo=l(),Pp=a("li"),DK=a("strong"),klo=o("plbart"),Rlo=o(" \u2014 "),uS=a("a"),Slo=o("PLBartModel"),Plo=o(" (PLBart model)"),$lo=l(),$p=a("li"),NK=a("strong"),Ilo=o("poolformer"),jlo=o(" \u2014 "),bS=a("a"),Dlo=o("PoolFormerModel"),Nlo=o(" (PoolFormer model)"),qlo=l(),Ip=a("li"),qK=a("strong"),Olo=o("prophetnet"),Glo=o(" \u2014 "),vS=a("a"),Xlo=o("ProphetNetModel"),Vlo=o(" (ProphetNet model)"),zlo=l(),jp=a("li"),OK=a("strong"),Wlo=o("qdqbert"),Qlo=o(" \u2014 "),TS=a("a"),Hlo=o("QDQBertModel"),Ulo=o(" (QDQBert model)"),Jlo=l(),Dp=a("li"),GK=a("strong"),Ylo=o("reformer"),Klo=o(" \u2014 "),FS=a("a"),Zlo=o("ReformerModel"),eio=o(" (Reformer model)"),oio=l(),Np=a("li"),XK=a("strong"),rio=o("rembert"),tio=o(" \u2014 "),CS=a("a"),aio=o("RemBertModel"),nio=o(" (RemBERT model)"),sio=l(),qp=a("li"),VK=a("strong"),lio=o("retribert"),iio=o(" \u2014 "),MS=a("a"),dio=o("RetriBertModel"),cio=o(" (RetriBERT model)"),fio=l(),Op=a("li"),zK=a("strong"),mio=o("roberta"),gio=o(" \u2014 "),ES=a("a"),hio=o("RobertaModel"),pio=o(" (RoBERTa model)"),_io=l(),Gp=a("li"),WK=a("strong"),uio=o("roformer"),bio=o(" \u2014 "),yS=a("a"),vio=o("RoFormerModel"),Tio=o(" (RoFormer model)"),Fio=l(),Xp=a("li"),QK=a("strong"),Cio=o("segformer"),Mio=o(" \u2014 "),wS=a("a"),Eio=o("SegformerModel"),yio=o(" (SegFormer model)"),wio=l(),Vp=a("li"),HK=a("strong"),Aio=o("sew"),Lio=o(" \u2014 "),AS=a("a"),Bio=o("SEWModel"),xio=o(" (SEW model)"),kio=l(),zp=a("li"),UK=a("strong"),Rio=o("sew-d"),Sio=o(" \u2014 "),LS=a("a"),Pio=o("SEWDModel"),$io=o(" (SEW-D model)"),Iio=l(),Wp=a("li"),JK=a("strong"),jio=o("speech_to_text"),Dio=o(" \u2014 "),BS=a("a"),Nio=o("Speech2TextModel"),qio=o(" (Speech2Text model)"),Oio=l(),Qp=a("li"),YK=a("strong"),Gio=o("splinter"),Xio=o(" \u2014 "),xS=a("a"),Vio=o("SplinterModel"),zio=o(" (Splinter model)"),Wio=l(),Hp=a("li"),KK=a("strong"),Qio=o("squeezebert"),Hio=o(" \u2014 "),kS=a("a"),Uio=o("SqueezeBertModel"),Jio=o(" (SqueezeBERT model)"),Yio=l(),Up=a("li"),ZK=a("strong"),Kio=o("swin"),Zio=o(" \u2014 "),RS=a("a"),edo=o("SwinModel"),odo=o(" (Swin model)"),rdo=l(),Jp=a("li"),eZ=a("strong"),tdo=o("t5"),ado=o(" \u2014 "),SS=a("a"),ndo=o("T5Model"),sdo=o(" (T5 model)"),ldo=l(),Yp=a("li"),oZ=a("strong"),ido=o("tapas"),ddo=o(" \u2014 "),PS=a("a"),cdo=o("TapasModel"),fdo=o(" (TAPAS model)"),mdo=l(),Kp=a("li"),rZ=a("strong"),gdo=o("transfo-xl"),hdo=o(" \u2014 "),$S=a("a"),pdo=o("TransfoXLModel"),_do=o(" (Transformer-XL model)"),udo=l(),Zp=a("li"),tZ=a("strong"),bdo=o("unispeech"),vdo=o(" \u2014 "),IS=a("a"),Tdo=o("UniSpeechModel"),Fdo=o(" (UniSpeech model)"),Cdo=l(),e_=a("li"),aZ=a("strong"),Mdo=o("unispeech-sat"),Edo=o(" \u2014 "),jS=a("a"),ydo=o("UniSpeechSatModel"),wdo=o(" (UniSpeechSat model)"),Ado=l(),o_=a("li"),nZ=a("strong"),Ldo=o("vilt"),Bdo=o(" \u2014 "),DS=a("a"),xdo=o("ViltModel"),kdo=o(" (ViLT model)"),Rdo=l(),r_=a("li"),sZ=a("strong"),Sdo=o("vision-text-dual-encoder"),Pdo=o(" \u2014 "),NS=a("a"),$do=o("VisionTextDualEncoderModel"),Ido=o(" (VisionTextDualEncoder model)"),jdo=l(),t_=a("li"),lZ=a("strong"),Ddo=o("visual_bert"),Ndo=o(" \u2014 "),qS=a("a"),qdo=o("VisualBertModel"),Odo=o(" (VisualBert model)"),Gdo=l(),a_=a("li"),iZ=a("strong"),Xdo=o("vit"),Vdo=o(" \u2014 "),OS=a("a"),zdo=o("ViTModel"),Wdo=o(" (ViT model)"),Qdo=l(),n_=a("li"),dZ=a("strong"),Hdo=o("vit_mae"),Udo=o(" \u2014 "),GS=a("a"),Jdo=o("ViTMAEModel"),Ydo=o(" (ViTMAE model)"),Kdo=l(),s_=a("li"),cZ=a("strong"),Zdo=o("wav2vec2"),eco=o(" \u2014 "),XS=a("a"),oco=o("Wav2Vec2Model"),rco=o(" (Wav2Vec2 model)"),tco=l(),l_=a("li"),fZ=a("strong"),aco=o("wavlm"),nco=o(" \u2014 "),VS=a("a"),sco=o("WavLMModel"),lco=o(" (WavLM model)"),ico=l(),i_=a("li"),mZ=a("strong"),dco=o("xglm"),cco=o(" \u2014 "),zS=a("a"),fco=o("XGLMModel"),mco=o(" (XGLM model)"),gco=l(),d_=a("li"),gZ=a("strong"),hco=o("xlm"),pco=o(" \u2014 "),WS=a("a"),_co=o("XLMModel"),uco=o(" (XLM model)"),bco=l(),c_=a("li"),hZ=a("strong"),vco=o("xlm-prophetnet"),Tco=o(" \u2014 "),QS=a("a"),Fco=o("XLMProphetNetModel"),Cco=o(" (XLMProphetNet model)"),Mco=l(),f_=a("li"),pZ=a("strong"),Eco=o("xlm-roberta"),yco=o(" \u2014 "),HS=a("a"),wco=o("XLMRobertaModel"),Aco=o(" (XLM-RoBERTa model)"),Lco=l(),m_=a("li"),_Z=a("strong"),Bco=o("xlm-roberta-xl"),xco=o(" \u2014 "),US=a("a"),kco=o("XLMRobertaXLModel"),Rco=o(" (XLM-RoBERTa-XL model)"),Sco=l(),g_=a("li"),uZ=a("strong"),Pco=o("xlnet"),$co=o(" \u2014 "),JS=a("a"),Ico=o("XLNetModel"),jco=o(" (XLNet model)"),Dco=l(),h_=a("li"),bZ=a("strong"),Nco=o("yoso"),qco=o(" \u2014 "),YS=a("a"),Oco=o("YosoModel"),Gco=o(" (YOSO model)"),Xco=l(),p_=a("p"),Vco=o("The model is set in evaluation mode by default using "),vZ=a("code"),zco=o("model.eval()"),Wco=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TZ=a("code"),Qco=o("model.train()"),Hco=l(),FZ=a("p"),Uco=o("Examples:"),Jco=l(),f(kE.$$.fragment),gxe=l(),Zi=a("h2"),__=a("a"),CZ=a("span"),f(RE.$$.fragment),Yco=l(),MZ=a("span"),Kco=o("AutoModelForPreTraining"),hxe=l(),Yo=a("div"),f(SE.$$.fragment),Zco=l(),ed=a("p"),efo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EZ=a("code"),ofo=o("from_pretrained()"),rfo=o("class method or the "),yZ=a("code"),tfo=o("from_config()"),afo=o(`class
method.`),nfo=l(),PE=a("p"),sfo=o("This class cannot be instantiated directly using "),wZ=a("code"),lfo=o("__init__()"),ifo=o(" (throws an error)."),dfo=l(),zr=a("div"),f($E.$$.fragment),cfo=l(),AZ=a("p"),ffo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mfo=l(),od=a("p"),gfo=o(`Note:
Loading a model from its configuration file does `),LZ=a("strong"),hfo=o("not"),pfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BZ=a("code"),_fo=o("from_pretrained()"),ufo=o("to load the model weights."),bfo=l(),xZ=a("p"),vfo=o("Examples:"),Tfo=l(),f(IE.$$.fragment),Ffo=l(),De=a("div"),f(jE.$$.fragment),Cfo=l(),kZ=a("p"),Mfo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Efo=l(),Va=a("p"),yfo=o("The model class to instantiate is selected based on the "),RZ=a("code"),wfo=o("model_type"),Afo=o(` property of the config object (either
passed as an argument or loaded from `),SZ=a("code"),Lfo=o("pretrained_model_name_or_path"),Bfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PZ=a("code"),xfo=o("pretrained_model_name_or_path"),kfo=o(":"),Rfo=l(),k=a("ul"),u_=a("li"),$Z=a("strong"),Sfo=o("albert"),Pfo=o(" \u2014 "),KS=a("a"),$fo=o("AlbertForPreTraining"),Ifo=o(" (ALBERT model)"),jfo=l(),b_=a("li"),IZ=a("strong"),Dfo=o("bart"),Nfo=o(" \u2014 "),ZS=a("a"),qfo=o("BartForConditionalGeneration"),Ofo=o(" (BART model)"),Gfo=l(),v_=a("li"),jZ=a("strong"),Xfo=o("bert"),Vfo=o(" \u2014 "),eP=a("a"),zfo=o("BertForPreTraining"),Wfo=o(" (BERT model)"),Qfo=l(),T_=a("li"),DZ=a("strong"),Hfo=o("big_bird"),Ufo=o(" \u2014 "),oP=a("a"),Jfo=o("BigBirdForPreTraining"),Yfo=o(" (BigBird model)"),Kfo=l(),F_=a("li"),NZ=a("strong"),Zfo=o("camembert"),emo=o(" \u2014 "),rP=a("a"),omo=o("CamembertForMaskedLM"),rmo=o(" (CamemBERT model)"),tmo=l(),C_=a("li"),qZ=a("strong"),amo=o("ctrl"),nmo=o(" \u2014 "),tP=a("a"),smo=o("CTRLLMHeadModel"),lmo=o(" (CTRL model)"),imo=l(),M_=a("li"),OZ=a("strong"),dmo=o("data2vec-text"),cmo=o(" \u2014 "),aP=a("a"),fmo=o("Data2VecTextForMaskedLM"),mmo=o(" (Data2VecText model)"),gmo=l(),E_=a("li"),GZ=a("strong"),hmo=o("deberta"),pmo=o(" \u2014 "),nP=a("a"),_mo=o("DebertaForMaskedLM"),umo=o(" (DeBERTa model)"),bmo=l(),y_=a("li"),XZ=a("strong"),vmo=o("deberta-v2"),Tmo=o(" \u2014 "),sP=a("a"),Fmo=o("DebertaV2ForMaskedLM"),Cmo=o(" (DeBERTa-v2 model)"),Mmo=l(),w_=a("li"),VZ=a("strong"),Emo=o("distilbert"),ymo=o(" \u2014 "),lP=a("a"),wmo=o("DistilBertForMaskedLM"),Amo=o(" (DistilBERT model)"),Lmo=l(),A_=a("li"),zZ=a("strong"),Bmo=o("electra"),xmo=o(" \u2014 "),iP=a("a"),kmo=o("ElectraForPreTraining"),Rmo=o(" (ELECTRA model)"),Smo=l(),L_=a("li"),WZ=a("strong"),Pmo=o("flaubert"),$mo=o(" \u2014 "),dP=a("a"),Imo=o("FlaubertWithLMHeadModel"),jmo=o(" (FlauBERT model)"),Dmo=l(),B_=a("li"),QZ=a("strong"),Nmo=o("fnet"),qmo=o(" \u2014 "),cP=a("a"),Omo=o("FNetForPreTraining"),Gmo=o(" (FNet model)"),Xmo=l(),x_=a("li"),HZ=a("strong"),Vmo=o("fsmt"),zmo=o(" \u2014 "),fP=a("a"),Wmo=o("FSMTForConditionalGeneration"),Qmo=o(" (FairSeq Machine-Translation model)"),Hmo=l(),k_=a("li"),UZ=a("strong"),Umo=o("funnel"),Jmo=o(" \u2014 "),mP=a("a"),Ymo=o("FunnelForPreTraining"),Kmo=o(" (Funnel Transformer model)"),Zmo=l(),R_=a("li"),JZ=a("strong"),ego=o("gpt2"),ogo=o(" \u2014 "),gP=a("a"),rgo=o("GPT2LMHeadModel"),tgo=o(" (OpenAI GPT-2 model)"),ago=l(),S_=a("li"),YZ=a("strong"),ngo=o("ibert"),sgo=o(" \u2014 "),hP=a("a"),lgo=o("IBertForMaskedLM"),igo=o(" (I-BERT model)"),dgo=l(),P_=a("li"),KZ=a("strong"),cgo=o("layoutlm"),fgo=o(" \u2014 "),pP=a("a"),mgo=o("LayoutLMForMaskedLM"),ggo=o(" (LayoutLM model)"),hgo=l(),$_=a("li"),ZZ=a("strong"),pgo=o("longformer"),_go=o(" \u2014 "),_P=a("a"),ugo=o("LongformerForMaskedLM"),bgo=o(" (Longformer model)"),vgo=l(),I_=a("li"),eee=a("strong"),Tgo=o("lxmert"),Fgo=o(" \u2014 "),uP=a("a"),Cgo=o("LxmertForPreTraining"),Mgo=o(" (LXMERT model)"),Ego=l(),j_=a("li"),oee=a("strong"),ygo=o("megatron-bert"),wgo=o(" \u2014 "),bP=a("a"),Ago=o("MegatronBertForPreTraining"),Lgo=o(" (MegatronBert model)"),Bgo=l(),D_=a("li"),ree=a("strong"),xgo=o("mobilebert"),kgo=o(" \u2014 "),vP=a("a"),Rgo=o("MobileBertForPreTraining"),Sgo=o(" (MobileBERT model)"),Pgo=l(),N_=a("li"),tee=a("strong"),$go=o("mpnet"),Igo=o(" \u2014 "),TP=a("a"),jgo=o("MPNetForMaskedLM"),Dgo=o(" (MPNet model)"),Ngo=l(),q_=a("li"),aee=a("strong"),qgo=o("openai-gpt"),Ogo=o(" \u2014 "),FP=a("a"),Ggo=o("OpenAIGPTLMHeadModel"),Xgo=o(" (OpenAI GPT model)"),Vgo=l(),O_=a("li"),nee=a("strong"),zgo=o("retribert"),Wgo=o(" \u2014 "),CP=a("a"),Qgo=o("RetriBertModel"),Hgo=o(" (RetriBERT model)"),Ugo=l(),G_=a("li"),see=a("strong"),Jgo=o("roberta"),Ygo=o(" \u2014 "),MP=a("a"),Kgo=o("RobertaForMaskedLM"),Zgo=o(" (RoBERTa model)"),eho=l(),X_=a("li"),lee=a("strong"),oho=o("squeezebert"),rho=o(" \u2014 "),EP=a("a"),tho=o("SqueezeBertForMaskedLM"),aho=o(" (SqueezeBERT model)"),nho=l(),V_=a("li"),iee=a("strong"),sho=o("t5"),lho=o(" \u2014 "),yP=a("a"),iho=o("T5ForConditionalGeneration"),dho=o(" (T5 model)"),cho=l(),z_=a("li"),dee=a("strong"),fho=o("tapas"),mho=o(" \u2014 "),wP=a("a"),gho=o("TapasForMaskedLM"),hho=o(" (TAPAS model)"),pho=l(),W_=a("li"),cee=a("strong"),_ho=o("transfo-xl"),uho=o(" \u2014 "),AP=a("a"),bho=o("TransfoXLLMHeadModel"),vho=o(" (Transformer-XL model)"),Tho=l(),Q_=a("li"),fee=a("strong"),Fho=o("unispeech"),Cho=o(" \u2014 "),LP=a("a"),Mho=o("UniSpeechForPreTraining"),Eho=o(" (UniSpeech model)"),yho=l(),H_=a("li"),mee=a("strong"),who=o("unispeech-sat"),Aho=o(" \u2014 "),BP=a("a"),Lho=o("UniSpeechSatForPreTraining"),Bho=o(" (UniSpeechSat model)"),xho=l(),U_=a("li"),gee=a("strong"),kho=o("visual_bert"),Rho=o(" \u2014 "),xP=a("a"),Sho=o("VisualBertForPreTraining"),Pho=o(" (VisualBert model)"),$ho=l(),J_=a("li"),hee=a("strong"),Iho=o("vit_mae"),jho=o(" \u2014 "),kP=a("a"),Dho=o("ViTMAEForPreTraining"),Nho=o(" (ViTMAE model)"),qho=l(),Y_=a("li"),pee=a("strong"),Oho=o("wav2vec2"),Gho=o(" \u2014 "),RP=a("a"),Xho=o("Wav2Vec2ForPreTraining"),Vho=o(" (Wav2Vec2 model)"),zho=l(),K_=a("li"),_ee=a("strong"),Who=o("xlm"),Qho=o(" \u2014 "),SP=a("a"),Hho=o("XLMWithLMHeadModel"),Uho=o(" (XLM model)"),Jho=l(),Z_=a("li"),uee=a("strong"),Yho=o("xlm-roberta"),Kho=o(" \u2014 "),PP=a("a"),Zho=o("XLMRobertaForMaskedLM"),epo=o(" (XLM-RoBERTa model)"),opo=l(),eu=a("li"),bee=a("strong"),rpo=o("xlm-roberta-xl"),tpo=o(" \u2014 "),$P=a("a"),apo=o("XLMRobertaXLForMaskedLM"),npo=o(" (XLM-RoBERTa-XL model)"),spo=l(),ou=a("li"),vee=a("strong"),lpo=o("xlnet"),ipo=o(" \u2014 "),IP=a("a"),dpo=o("XLNetLMHeadModel"),cpo=o(" (XLNet model)"),fpo=l(),ru=a("p"),mpo=o("The model is set in evaluation mode by default using "),Tee=a("code"),gpo=o("model.eval()"),hpo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fee=a("code"),ppo=o("model.train()"),_po=l(),Cee=a("p"),upo=o("Examples:"),bpo=l(),f(DE.$$.fragment),pxe=l(),rd=a("h2"),tu=a("a"),Mee=a("span"),f(NE.$$.fragment),vpo=l(),Eee=a("span"),Tpo=o("AutoModelForCausalLM"),_xe=l(),Ko=a("div"),f(qE.$$.fragment),Fpo=l(),td=a("p"),Cpo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yee=a("code"),Mpo=o("from_pretrained()"),Epo=o("class method or the "),wee=a("code"),ypo=o("from_config()"),wpo=o(`class
method.`),Apo=l(),OE=a("p"),Lpo=o("This class cannot be instantiated directly using "),Aee=a("code"),Bpo=o("__init__()"),xpo=o(" (throws an error)."),kpo=l(),Wr=a("div"),f(GE.$$.fragment),Rpo=l(),Lee=a("p"),Spo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ppo=l(),ad=a("p"),$po=o(`Note:
Loading a model from its configuration file does `),Bee=a("strong"),Ipo=o("not"),jpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xee=a("code"),Dpo=o("from_pretrained()"),Npo=o("to load the model weights."),qpo=l(),kee=a("p"),Opo=o("Examples:"),Gpo=l(),f(XE.$$.fragment),Xpo=l(),Ne=a("div"),f(VE.$$.fragment),Vpo=l(),Ree=a("p"),zpo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wpo=l(),za=a("p"),Qpo=o("The model class to instantiate is selected based on the "),See=a("code"),Hpo=o("model_type"),Upo=o(` property of the config object (either
passed as an argument or loaded from `),Pee=a("code"),Jpo=o("pretrained_model_name_or_path"),Ypo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ee=a("code"),Kpo=o("pretrained_model_name_or_path"),Zpo=o(":"),e_o=l(),$=a("ul"),au=a("li"),Iee=a("strong"),o_o=o("bart"),r_o=o(" \u2014 "),jP=a("a"),t_o=o("BartForCausalLM"),a_o=o(" (BART model)"),n_o=l(),nu=a("li"),jee=a("strong"),s_o=o("bert"),l_o=o(" \u2014 "),DP=a("a"),i_o=o("BertLMHeadModel"),d_o=o(" (BERT model)"),c_o=l(),su=a("li"),Dee=a("strong"),f_o=o("bert-generation"),m_o=o(" \u2014 "),NP=a("a"),g_o=o("BertGenerationDecoder"),h_o=o(" (Bert Generation model)"),p_o=l(),lu=a("li"),Nee=a("strong"),__o=o("big_bird"),u_o=o(" \u2014 "),qP=a("a"),b_o=o("BigBirdForCausalLM"),v_o=o(" (BigBird model)"),T_o=l(),iu=a("li"),qee=a("strong"),F_o=o("bigbird_pegasus"),C_o=o(" \u2014 "),OP=a("a"),M_o=o("BigBirdPegasusForCausalLM"),E_o=o(" (BigBirdPegasus model)"),y_o=l(),du=a("li"),Oee=a("strong"),w_o=o("blenderbot"),A_o=o(" \u2014 "),GP=a("a"),L_o=o("BlenderbotForCausalLM"),B_o=o(" (Blenderbot model)"),x_o=l(),cu=a("li"),Gee=a("strong"),k_o=o("blenderbot-small"),R_o=o(" \u2014 "),XP=a("a"),S_o=o("BlenderbotSmallForCausalLM"),P_o=o(" (BlenderbotSmall model)"),$_o=l(),fu=a("li"),Xee=a("strong"),I_o=o("camembert"),j_o=o(" \u2014 "),VP=a("a"),D_o=o("CamembertForCausalLM"),N_o=o(" (CamemBERT model)"),q_o=l(),mu=a("li"),Vee=a("strong"),O_o=o("ctrl"),G_o=o(" \u2014 "),zP=a("a"),X_o=o("CTRLLMHeadModel"),V_o=o(" (CTRL model)"),z_o=l(),gu=a("li"),zee=a("strong"),W_o=o("data2vec-text"),Q_o=o(" \u2014 "),WP=a("a"),H_o=o("Data2VecTextForCausalLM"),U_o=o(" (Data2VecText model)"),J_o=l(),hu=a("li"),Wee=a("strong"),Y_o=o("electra"),K_o=o(" \u2014 "),QP=a("a"),Z_o=o("ElectraForCausalLM"),euo=o(" (ELECTRA model)"),ouo=l(),pu=a("li"),Qee=a("strong"),ruo=o("gpt2"),tuo=o(" \u2014 "),HP=a("a"),auo=o("GPT2LMHeadModel"),nuo=o(" (OpenAI GPT-2 model)"),suo=l(),_u=a("li"),Hee=a("strong"),luo=o("gpt_neo"),iuo=o(" \u2014 "),UP=a("a"),duo=o("GPTNeoForCausalLM"),cuo=o(" (GPT Neo model)"),fuo=l(),uu=a("li"),Uee=a("strong"),muo=o("gptj"),guo=o(" \u2014 "),JP=a("a"),huo=o("GPTJForCausalLM"),puo=o(" (GPT-J model)"),_uo=l(),bu=a("li"),Jee=a("strong"),uuo=o("marian"),buo=o(" \u2014 "),YP=a("a"),vuo=o("MarianForCausalLM"),Tuo=o(" (Marian model)"),Fuo=l(),vu=a("li"),Yee=a("strong"),Cuo=o("mbart"),Muo=o(" \u2014 "),KP=a("a"),Euo=o("MBartForCausalLM"),yuo=o(" (mBART model)"),wuo=l(),Tu=a("li"),Kee=a("strong"),Auo=o("megatron-bert"),Luo=o(" \u2014 "),ZP=a("a"),Buo=o("MegatronBertForCausalLM"),xuo=o(" (MegatronBert model)"),kuo=l(),Fu=a("li"),Zee=a("strong"),Ruo=o("openai-gpt"),Suo=o(" \u2014 "),e$=a("a"),Puo=o("OpenAIGPTLMHeadModel"),$uo=o(" (OpenAI GPT model)"),Iuo=l(),Cu=a("li"),eoe=a("strong"),juo=o("pegasus"),Duo=o(" \u2014 "),o$=a("a"),Nuo=o("PegasusForCausalLM"),quo=o(" (Pegasus model)"),Ouo=l(),Mu=a("li"),ooe=a("strong"),Guo=o("plbart"),Xuo=o(" \u2014 "),r$=a("a"),Vuo=o("PLBartForCausalLM"),zuo=o(" (PLBart model)"),Wuo=l(),Eu=a("li"),roe=a("strong"),Quo=o("prophetnet"),Huo=o(" \u2014 "),t$=a("a"),Uuo=o("ProphetNetForCausalLM"),Juo=o(" (ProphetNet model)"),Yuo=l(),yu=a("li"),toe=a("strong"),Kuo=o("qdqbert"),Zuo=o(" \u2014 "),a$=a("a"),e1o=o("QDQBertLMHeadModel"),o1o=o(" (QDQBert model)"),r1o=l(),wu=a("li"),aoe=a("strong"),t1o=o("reformer"),a1o=o(" \u2014 "),n$=a("a"),n1o=o("ReformerModelWithLMHead"),s1o=o(" (Reformer model)"),l1o=l(),Au=a("li"),noe=a("strong"),i1o=o("rembert"),d1o=o(" \u2014 "),s$=a("a"),c1o=o("RemBertForCausalLM"),f1o=o(" (RemBERT model)"),m1o=l(),Lu=a("li"),soe=a("strong"),g1o=o("roberta"),h1o=o(" \u2014 "),l$=a("a"),p1o=o("RobertaForCausalLM"),_1o=o(" (RoBERTa model)"),u1o=l(),Bu=a("li"),loe=a("strong"),b1o=o("roformer"),v1o=o(" \u2014 "),i$=a("a"),T1o=o("RoFormerForCausalLM"),F1o=o(" (RoFormer model)"),C1o=l(),xu=a("li"),ioe=a("strong"),M1o=o("speech_to_text_2"),E1o=o(" \u2014 "),d$=a("a"),y1o=o("Speech2Text2ForCausalLM"),w1o=o(" (Speech2Text2 model)"),A1o=l(),ku=a("li"),doe=a("strong"),L1o=o("transfo-xl"),B1o=o(" \u2014 "),c$=a("a"),x1o=o("TransfoXLLMHeadModel"),k1o=o(" (Transformer-XL model)"),R1o=l(),Ru=a("li"),coe=a("strong"),S1o=o("trocr"),P1o=o(" \u2014 "),f$=a("a"),$1o=o("TrOCRForCausalLM"),I1o=o(" (TrOCR model)"),j1o=l(),Su=a("li"),foe=a("strong"),D1o=o("xglm"),N1o=o(" \u2014 "),m$=a("a"),q1o=o("XGLMForCausalLM"),O1o=o(" (XGLM model)"),G1o=l(),Pu=a("li"),moe=a("strong"),X1o=o("xlm"),V1o=o(" \u2014 "),g$=a("a"),z1o=o("XLMWithLMHeadModel"),W1o=o(" (XLM model)"),Q1o=l(),$u=a("li"),goe=a("strong"),H1o=o("xlm-prophetnet"),U1o=o(" \u2014 "),h$=a("a"),J1o=o("XLMProphetNetForCausalLM"),Y1o=o(" (XLMProphetNet model)"),K1o=l(),Iu=a("li"),hoe=a("strong"),Z1o=o("xlm-roberta"),ebo=o(" \u2014 "),p$=a("a"),obo=o("XLMRobertaForCausalLM"),rbo=o(" (XLM-RoBERTa model)"),tbo=l(),ju=a("li"),poe=a("strong"),abo=o("xlm-roberta-xl"),nbo=o(" \u2014 "),_$=a("a"),sbo=o("XLMRobertaXLForCausalLM"),lbo=o(" (XLM-RoBERTa-XL model)"),ibo=l(),Du=a("li"),_oe=a("strong"),dbo=o("xlnet"),cbo=o(" \u2014 "),u$=a("a"),fbo=o("XLNetLMHeadModel"),mbo=o(" (XLNet model)"),gbo=l(),Nu=a("p"),hbo=o("The model is set in evaluation mode by default using "),uoe=a("code"),pbo=o("model.eval()"),_bo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),boe=a("code"),ubo=o("model.train()"),bbo=l(),voe=a("p"),vbo=o("Examples:"),Tbo=l(),f(zE.$$.fragment),uxe=l(),nd=a("h2"),qu=a("a"),Toe=a("span"),f(WE.$$.fragment),Fbo=l(),Foe=a("span"),Cbo=o("AutoModelForMaskedLM"),bxe=l(),Zo=a("div"),f(QE.$$.fragment),Mbo=l(),sd=a("p"),Ebo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Coe=a("code"),ybo=o("from_pretrained()"),wbo=o("class method or the "),Moe=a("code"),Abo=o("from_config()"),Lbo=o(`class
method.`),Bbo=l(),HE=a("p"),xbo=o("This class cannot be instantiated directly using "),Eoe=a("code"),kbo=o("__init__()"),Rbo=o(" (throws an error)."),Sbo=l(),Qr=a("div"),f(UE.$$.fragment),Pbo=l(),yoe=a("p"),$bo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ibo=l(),ld=a("p"),jbo=o(`Note:
Loading a model from its configuration file does `),woe=a("strong"),Dbo=o("not"),Nbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=a("code"),qbo=o("from_pretrained()"),Obo=o("to load the model weights."),Gbo=l(),Loe=a("p"),Xbo=o("Examples:"),Vbo=l(),f(JE.$$.fragment),zbo=l(),qe=a("div"),f(YE.$$.fragment),Wbo=l(),Boe=a("p"),Qbo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Hbo=l(),Wa=a("p"),Ubo=o("The model class to instantiate is selected based on the "),xoe=a("code"),Jbo=o("model_type"),Ybo=o(` property of the config object (either
passed as an argument or loaded from `),koe=a("code"),Kbo=o("pretrained_model_name_or_path"),Zbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Roe=a("code"),e3o=o("pretrained_model_name_or_path"),o3o=o(":"),r3o=l(),I=a("ul"),Ou=a("li"),Soe=a("strong"),t3o=o("albert"),a3o=o(" \u2014 "),b$=a("a"),n3o=o("AlbertForMaskedLM"),s3o=o(" (ALBERT model)"),l3o=l(),Gu=a("li"),Poe=a("strong"),i3o=o("bart"),d3o=o(" \u2014 "),v$=a("a"),c3o=o("BartForConditionalGeneration"),f3o=o(" (BART model)"),m3o=l(),Xu=a("li"),$oe=a("strong"),g3o=o("bert"),h3o=o(" \u2014 "),T$=a("a"),p3o=o("BertForMaskedLM"),_3o=o(" (BERT model)"),u3o=l(),Vu=a("li"),Ioe=a("strong"),b3o=o("big_bird"),v3o=o(" \u2014 "),F$=a("a"),T3o=o("BigBirdForMaskedLM"),F3o=o(" (BigBird model)"),C3o=l(),zu=a("li"),joe=a("strong"),M3o=o("camembert"),E3o=o(" \u2014 "),C$=a("a"),y3o=o("CamembertForMaskedLM"),w3o=o(" (CamemBERT model)"),A3o=l(),Wu=a("li"),Doe=a("strong"),L3o=o("convbert"),B3o=o(" \u2014 "),M$=a("a"),x3o=o("ConvBertForMaskedLM"),k3o=o(" (ConvBERT model)"),R3o=l(),Qu=a("li"),Noe=a("strong"),S3o=o("data2vec-text"),P3o=o(" \u2014 "),E$=a("a"),$3o=o("Data2VecTextForMaskedLM"),I3o=o(" (Data2VecText model)"),j3o=l(),Hu=a("li"),qoe=a("strong"),D3o=o("deberta"),N3o=o(" \u2014 "),y$=a("a"),q3o=o("DebertaForMaskedLM"),O3o=o(" (DeBERTa model)"),G3o=l(),Uu=a("li"),Ooe=a("strong"),X3o=o("deberta-v2"),V3o=o(" \u2014 "),w$=a("a"),z3o=o("DebertaV2ForMaskedLM"),W3o=o(" (DeBERTa-v2 model)"),Q3o=l(),Ju=a("li"),Goe=a("strong"),H3o=o("distilbert"),U3o=o(" \u2014 "),A$=a("a"),J3o=o("DistilBertForMaskedLM"),Y3o=o(" (DistilBERT model)"),K3o=l(),Yu=a("li"),Xoe=a("strong"),Z3o=o("electra"),e5o=o(" \u2014 "),L$=a("a"),o5o=o("ElectraForMaskedLM"),r5o=o(" (ELECTRA model)"),t5o=l(),Ku=a("li"),Voe=a("strong"),a5o=o("flaubert"),n5o=o(" \u2014 "),B$=a("a"),s5o=o("FlaubertWithLMHeadModel"),l5o=o(" (FlauBERT model)"),i5o=l(),Zu=a("li"),zoe=a("strong"),d5o=o("fnet"),c5o=o(" \u2014 "),x$=a("a"),f5o=o("FNetForMaskedLM"),m5o=o(" (FNet model)"),g5o=l(),e1=a("li"),Woe=a("strong"),h5o=o("funnel"),p5o=o(" \u2014 "),k$=a("a"),_5o=o("FunnelForMaskedLM"),u5o=o(" (Funnel Transformer model)"),b5o=l(),o1=a("li"),Qoe=a("strong"),v5o=o("ibert"),T5o=o(" \u2014 "),R$=a("a"),F5o=o("IBertForMaskedLM"),C5o=o(" (I-BERT model)"),M5o=l(),r1=a("li"),Hoe=a("strong"),E5o=o("layoutlm"),y5o=o(" \u2014 "),S$=a("a"),w5o=o("LayoutLMForMaskedLM"),A5o=o(" (LayoutLM model)"),L5o=l(),t1=a("li"),Uoe=a("strong"),B5o=o("longformer"),x5o=o(" \u2014 "),P$=a("a"),k5o=o("LongformerForMaskedLM"),R5o=o(" (Longformer model)"),S5o=l(),a1=a("li"),Joe=a("strong"),P5o=o("mbart"),$5o=o(" \u2014 "),$$=a("a"),I5o=o("MBartForConditionalGeneration"),j5o=o(" (mBART model)"),D5o=l(),n1=a("li"),Yoe=a("strong"),N5o=o("megatron-bert"),q5o=o(" \u2014 "),I$=a("a"),O5o=o("MegatronBertForMaskedLM"),G5o=o(" (MegatronBert model)"),X5o=l(),s1=a("li"),Koe=a("strong"),V5o=o("mobilebert"),z5o=o(" \u2014 "),j$=a("a"),W5o=o("MobileBertForMaskedLM"),Q5o=o(" (MobileBERT model)"),H5o=l(),l1=a("li"),Zoe=a("strong"),U5o=o("mpnet"),J5o=o(" \u2014 "),D$=a("a"),Y5o=o("MPNetForMaskedLM"),K5o=o(" (MPNet model)"),Z5o=l(),i1=a("li"),ere=a("strong"),e2o=o("nystromformer"),o2o=o(" \u2014 "),N$=a("a"),r2o=o("NystromformerForMaskedLM"),t2o=o(" (Nystromformer model)"),a2o=l(),d1=a("li"),ore=a("strong"),n2o=o("perceiver"),s2o=o(" \u2014 "),q$=a("a"),l2o=o("PerceiverForMaskedLM"),i2o=o(" (Perceiver model)"),d2o=l(),c1=a("li"),rre=a("strong"),c2o=o("qdqbert"),f2o=o(" \u2014 "),O$=a("a"),m2o=o("QDQBertForMaskedLM"),g2o=o(" (QDQBert model)"),h2o=l(),f1=a("li"),tre=a("strong"),p2o=o("reformer"),_2o=o(" \u2014 "),G$=a("a"),u2o=o("ReformerForMaskedLM"),b2o=o(" (Reformer model)"),v2o=l(),m1=a("li"),are=a("strong"),T2o=o("rembert"),F2o=o(" \u2014 "),X$=a("a"),C2o=o("RemBertForMaskedLM"),M2o=o(" (RemBERT model)"),E2o=l(),g1=a("li"),nre=a("strong"),y2o=o("roberta"),w2o=o(" \u2014 "),V$=a("a"),A2o=o("RobertaForMaskedLM"),L2o=o(" (RoBERTa model)"),B2o=l(),h1=a("li"),sre=a("strong"),x2o=o("roformer"),k2o=o(" \u2014 "),z$=a("a"),R2o=o("RoFormerForMaskedLM"),S2o=o(" (RoFormer model)"),P2o=l(),p1=a("li"),lre=a("strong"),$2o=o("squeezebert"),I2o=o(" \u2014 "),W$=a("a"),j2o=o("SqueezeBertForMaskedLM"),D2o=o(" (SqueezeBERT model)"),N2o=l(),_1=a("li"),ire=a("strong"),q2o=o("tapas"),O2o=o(" \u2014 "),Q$=a("a"),G2o=o("TapasForMaskedLM"),X2o=o(" (TAPAS model)"),V2o=l(),u1=a("li"),dre=a("strong"),z2o=o("wav2vec2"),W2o=o(" \u2014 "),cre=a("code"),Q2o=o("Wav2Vec2ForMaskedLM"),H2o=o("(Wav2Vec2 model)"),U2o=l(),b1=a("li"),fre=a("strong"),J2o=o("xlm"),Y2o=o(" \u2014 "),H$=a("a"),K2o=o("XLMWithLMHeadModel"),Z2o=o(" (XLM model)"),evo=l(),v1=a("li"),mre=a("strong"),ovo=o("xlm-roberta"),rvo=o(" \u2014 "),U$=a("a"),tvo=o("XLMRobertaForMaskedLM"),avo=o(" (XLM-RoBERTa model)"),nvo=l(),T1=a("li"),gre=a("strong"),svo=o("xlm-roberta-xl"),lvo=o(" \u2014 "),J$=a("a"),ivo=o("XLMRobertaXLForMaskedLM"),dvo=o(" (XLM-RoBERTa-XL model)"),cvo=l(),F1=a("li"),hre=a("strong"),fvo=o("yoso"),mvo=o(" \u2014 "),Y$=a("a"),gvo=o("YosoForMaskedLM"),hvo=o(" (YOSO model)"),pvo=l(),C1=a("p"),_vo=o("The model is set in evaluation mode by default using "),pre=a("code"),uvo=o("model.eval()"),bvo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_re=a("code"),vvo=o("model.train()"),Tvo=l(),ure=a("p"),Fvo=o("Examples:"),Cvo=l(),f(KE.$$.fragment),vxe=l(),id=a("h2"),M1=a("a"),bre=a("span"),f(ZE.$$.fragment),Mvo=l(),vre=a("span"),Evo=o("AutoModelForSeq2SeqLM"),Txe=l(),er=a("div"),f(ey.$$.fragment),yvo=l(),dd=a("p"),wvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Tre=a("code"),Avo=o("from_pretrained()"),Lvo=o("class method or the "),Fre=a("code"),Bvo=o("from_config()"),xvo=o(`class
method.`),kvo=l(),oy=a("p"),Rvo=o("This class cannot be instantiated directly using "),Cre=a("code"),Svo=o("__init__()"),Pvo=o(" (throws an error)."),$vo=l(),Hr=a("div"),f(ry.$$.fragment),Ivo=l(),Mre=a("p"),jvo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Dvo=l(),cd=a("p"),Nvo=o(`Note:
Loading a model from its configuration file does `),Ere=a("strong"),qvo=o("not"),Ovo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=a("code"),Gvo=o("from_pretrained()"),Xvo=o("to load the model weights."),Vvo=l(),wre=a("p"),zvo=o("Examples:"),Wvo=l(),f(ty.$$.fragment),Qvo=l(),Oe=a("div"),f(ay.$$.fragment),Hvo=l(),Are=a("p"),Uvo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Jvo=l(),Qa=a("p"),Yvo=o("The model class to instantiate is selected based on the "),Lre=a("code"),Kvo=o("model_type"),Zvo=o(` property of the config object (either
passed as an argument or loaded from `),Bre=a("code"),eTo=o("pretrained_model_name_or_path"),oTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xre=a("code"),rTo=o("pretrained_model_name_or_path"),tTo=o(":"),aTo=l(),ne=a("ul"),E1=a("li"),kre=a("strong"),nTo=o("bart"),sTo=o(" \u2014 "),K$=a("a"),lTo=o("BartForConditionalGeneration"),iTo=o(" (BART model)"),dTo=l(),y1=a("li"),Rre=a("strong"),cTo=o("bigbird_pegasus"),fTo=o(" \u2014 "),Z$=a("a"),mTo=o("BigBirdPegasusForConditionalGeneration"),gTo=o(" (BigBirdPegasus model)"),hTo=l(),w1=a("li"),Sre=a("strong"),pTo=o("blenderbot"),_To=o(" \u2014 "),eI=a("a"),uTo=o("BlenderbotForConditionalGeneration"),bTo=o(" (Blenderbot model)"),vTo=l(),A1=a("li"),Pre=a("strong"),TTo=o("blenderbot-small"),FTo=o(" \u2014 "),oI=a("a"),CTo=o("BlenderbotSmallForConditionalGeneration"),MTo=o(" (BlenderbotSmall model)"),ETo=l(),L1=a("li"),$re=a("strong"),yTo=o("encoder-decoder"),wTo=o(" \u2014 "),rI=a("a"),ATo=o("EncoderDecoderModel"),LTo=o(" (Encoder decoder model)"),BTo=l(),B1=a("li"),Ire=a("strong"),xTo=o("fsmt"),kTo=o(" \u2014 "),tI=a("a"),RTo=o("FSMTForConditionalGeneration"),STo=o(" (FairSeq Machine-Translation model)"),PTo=l(),x1=a("li"),jre=a("strong"),$To=o("led"),ITo=o(" \u2014 "),aI=a("a"),jTo=o("LEDForConditionalGeneration"),DTo=o(" (LED model)"),NTo=l(),k1=a("li"),Dre=a("strong"),qTo=o("m2m_100"),OTo=o(" \u2014 "),nI=a("a"),GTo=o("M2M100ForConditionalGeneration"),XTo=o(" (M2M100 model)"),VTo=l(),R1=a("li"),Nre=a("strong"),zTo=o("marian"),WTo=o(" \u2014 "),sI=a("a"),QTo=o("MarianMTModel"),HTo=o(" (Marian model)"),UTo=l(),S1=a("li"),qre=a("strong"),JTo=o("mbart"),YTo=o(" \u2014 "),lI=a("a"),KTo=o("MBartForConditionalGeneration"),ZTo=o(" (mBART model)"),e8o=l(),P1=a("li"),Ore=a("strong"),o8o=o("mt5"),r8o=o(" \u2014 "),iI=a("a"),t8o=o("MT5ForConditionalGeneration"),a8o=o(" (mT5 model)"),n8o=l(),$1=a("li"),Gre=a("strong"),s8o=o("pegasus"),l8o=o(" \u2014 "),dI=a("a"),i8o=o("PegasusForConditionalGeneration"),d8o=o(" (Pegasus model)"),c8o=l(),I1=a("li"),Xre=a("strong"),f8o=o("plbart"),m8o=o(" \u2014 "),cI=a("a"),g8o=o("PLBartForConditionalGeneration"),h8o=o(" (PLBart model)"),p8o=l(),j1=a("li"),Vre=a("strong"),_8o=o("prophetnet"),u8o=o(" \u2014 "),fI=a("a"),b8o=o("ProphetNetForConditionalGeneration"),v8o=o(" (ProphetNet model)"),T8o=l(),D1=a("li"),zre=a("strong"),F8o=o("t5"),C8o=o(" \u2014 "),mI=a("a"),M8o=o("T5ForConditionalGeneration"),E8o=o(" (T5 model)"),y8o=l(),N1=a("li"),Wre=a("strong"),w8o=o("xlm-prophetnet"),A8o=o(" \u2014 "),gI=a("a"),L8o=o("XLMProphetNetForConditionalGeneration"),B8o=o(" (XLMProphetNet model)"),x8o=l(),q1=a("p"),k8o=o("The model is set in evaluation mode by default using "),Qre=a("code"),R8o=o("model.eval()"),S8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hre=a("code"),P8o=o("model.train()"),$8o=l(),Ure=a("p"),I8o=o("Examples:"),j8o=l(),f(ny.$$.fragment),Fxe=l(),fd=a("h2"),O1=a("a"),Jre=a("span"),f(sy.$$.fragment),D8o=l(),Yre=a("span"),N8o=o("AutoModelForSequenceClassification"),Cxe=l(),or=a("div"),f(ly.$$.fragment),q8o=l(),md=a("p"),O8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Kre=a("code"),G8o=o("from_pretrained()"),X8o=o("class method or the "),Zre=a("code"),V8o=o("from_config()"),z8o=o(`class
method.`),W8o=l(),iy=a("p"),Q8o=o("This class cannot be instantiated directly using "),ete=a("code"),H8o=o("__init__()"),U8o=o(" (throws an error)."),J8o=l(),Ur=a("div"),f(dy.$$.fragment),Y8o=l(),ote=a("p"),K8o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Z8o=l(),gd=a("p"),eFo=o(`Note:
Loading a model from its configuration file does `),rte=a("strong"),oFo=o("not"),rFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tte=a("code"),tFo=o("from_pretrained()"),aFo=o("to load the model weights."),nFo=l(),ate=a("p"),sFo=o("Examples:"),lFo=l(),f(cy.$$.fragment),iFo=l(),Ge=a("div"),f(fy.$$.fragment),dFo=l(),nte=a("p"),cFo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fFo=l(),Ha=a("p"),mFo=o("The model class to instantiate is selected based on the "),ste=a("code"),gFo=o("model_type"),hFo=o(` property of the config object (either
passed as an argument or loaded from `),lte=a("code"),pFo=o("pretrained_model_name_or_path"),_Fo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ite=a("code"),uFo=o("pretrained_model_name_or_path"),bFo=o(":"),vFo=l(),A=a("ul"),G1=a("li"),dte=a("strong"),TFo=o("albert"),FFo=o(" \u2014 "),hI=a("a"),CFo=o("AlbertForSequenceClassification"),MFo=o(" (ALBERT model)"),EFo=l(),X1=a("li"),cte=a("strong"),yFo=o("bart"),wFo=o(" \u2014 "),pI=a("a"),AFo=o("BartForSequenceClassification"),LFo=o(" (BART model)"),BFo=l(),V1=a("li"),fte=a("strong"),xFo=o("bert"),kFo=o(" \u2014 "),_I=a("a"),RFo=o("BertForSequenceClassification"),SFo=o(" (BERT model)"),PFo=l(),z1=a("li"),mte=a("strong"),$Fo=o("big_bird"),IFo=o(" \u2014 "),uI=a("a"),jFo=o("BigBirdForSequenceClassification"),DFo=o(" (BigBird model)"),NFo=l(),W1=a("li"),gte=a("strong"),qFo=o("bigbird_pegasus"),OFo=o(" \u2014 "),bI=a("a"),GFo=o("BigBirdPegasusForSequenceClassification"),XFo=o(" (BigBirdPegasus model)"),VFo=l(),Q1=a("li"),hte=a("strong"),zFo=o("camembert"),WFo=o(" \u2014 "),vI=a("a"),QFo=o("CamembertForSequenceClassification"),HFo=o(" (CamemBERT model)"),UFo=l(),H1=a("li"),pte=a("strong"),JFo=o("canine"),YFo=o(" \u2014 "),TI=a("a"),KFo=o("CanineForSequenceClassification"),ZFo=o(" (Canine model)"),eCo=l(),U1=a("li"),_te=a("strong"),oCo=o("convbert"),rCo=o(" \u2014 "),FI=a("a"),tCo=o("ConvBertForSequenceClassification"),aCo=o(" (ConvBERT model)"),nCo=l(),J1=a("li"),ute=a("strong"),sCo=o("ctrl"),lCo=o(" \u2014 "),CI=a("a"),iCo=o("CTRLForSequenceClassification"),dCo=o(" (CTRL model)"),cCo=l(),Y1=a("li"),bte=a("strong"),fCo=o("data2vec-text"),mCo=o(" \u2014 "),MI=a("a"),gCo=o("Data2VecTextForSequenceClassification"),hCo=o(" (Data2VecText model)"),pCo=l(),K1=a("li"),vte=a("strong"),_Co=o("deberta"),uCo=o(" \u2014 "),EI=a("a"),bCo=o("DebertaForSequenceClassification"),vCo=o(" (DeBERTa model)"),TCo=l(),Z1=a("li"),Tte=a("strong"),FCo=o("deberta-v2"),CCo=o(" \u2014 "),yI=a("a"),MCo=o("DebertaV2ForSequenceClassification"),ECo=o(" (DeBERTa-v2 model)"),yCo=l(),eb=a("li"),Fte=a("strong"),wCo=o("distilbert"),ACo=o(" \u2014 "),wI=a("a"),LCo=o("DistilBertForSequenceClassification"),BCo=o(" (DistilBERT model)"),xCo=l(),ob=a("li"),Cte=a("strong"),kCo=o("electra"),RCo=o(" \u2014 "),AI=a("a"),SCo=o("ElectraForSequenceClassification"),PCo=o(" (ELECTRA model)"),$Co=l(),rb=a("li"),Mte=a("strong"),ICo=o("flaubert"),jCo=o(" \u2014 "),LI=a("a"),DCo=o("FlaubertForSequenceClassification"),NCo=o(" (FlauBERT model)"),qCo=l(),tb=a("li"),Ete=a("strong"),OCo=o("fnet"),GCo=o(" \u2014 "),BI=a("a"),XCo=o("FNetForSequenceClassification"),VCo=o(" (FNet model)"),zCo=l(),ab=a("li"),yte=a("strong"),WCo=o("funnel"),QCo=o(" \u2014 "),xI=a("a"),HCo=o("FunnelForSequenceClassification"),UCo=o(" (Funnel Transformer model)"),JCo=l(),nb=a("li"),wte=a("strong"),YCo=o("gpt2"),KCo=o(" \u2014 "),kI=a("a"),ZCo=o("GPT2ForSequenceClassification"),eMo=o(" (OpenAI GPT-2 model)"),oMo=l(),sb=a("li"),Ate=a("strong"),rMo=o("gpt_neo"),tMo=o(" \u2014 "),RI=a("a"),aMo=o("GPTNeoForSequenceClassification"),nMo=o(" (GPT Neo model)"),sMo=l(),lb=a("li"),Lte=a("strong"),lMo=o("gptj"),iMo=o(" \u2014 "),SI=a("a"),dMo=o("GPTJForSequenceClassification"),cMo=o(" (GPT-J model)"),fMo=l(),ib=a("li"),Bte=a("strong"),mMo=o("ibert"),gMo=o(" \u2014 "),PI=a("a"),hMo=o("IBertForSequenceClassification"),pMo=o(" (I-BERT model)"),_Mo=l(),db=a("li"),xte=a("strong"),uMo=o("layoutlm"),bMo=o(" \u2014 "),$I=a("a"),vMo=o("LayoutLMForSequenceClassification"),TMo=o(" (LayoutLM model)"),FMo=l(),cb=a("li"),kte=a("strong"),CMo=o("layoutlmv2"),MMo=o(" \u2014 "),II=a("a"),EMo=o("LayoutLMv2ForSequenceClassification"),yMo=o(" (LayoutLMv2 model)"),wMo=l(),fb=a("li"),Rte=a("strong"),AMo=o("led"),LMo=o(" \u2014 "),jI=a("a"),BMo=o("LEDForSequenceClassification"),xMo=o(" (LED model)"),kMo=l(),mb=a("li"),Ste=a("strong"),RMo=o("longformer"),SMo=o(" \u2014 "),DI=a("a"),PMo=o("LongformerForSequenceClassification"),$Mo=o(" (Longformer model)"),IMo=l(),gb=a("li"),Pte=a("strong"),jMo=o("mbart"),DMo=o(" \u2014 "),NI=a("a"),NMo=o("MBartForSequenceClassification"),qMo=o(" (mBART model)"),OMo=l(),hb=a("li"),$te=a("strong"),GMo=o("megatron-bert"),XMo=o(" \u2014 "),qI=a("a"),VMo=o("MegatronBertForSequenceClassification"),zMo=o(" (MegatronBert model)"),WMo=l(),pb=a("li"),Ite=a("strong"),QMo=o("mobilebert"),HMo=o(" \u2014 "),OI=a("a"),UMo=o("MobileBertForSequenceClassification"),JMo=o(" (MobileBERT model)"),YMo=l(),_b=a("li"),jte=a("strong"),KMo=o("mpnet"),ZMo=o(" \u2014 "),GI=a("a"),e4o=o("MPNetForSequenceClassification"),o4o=o(" (MPNet model)"),r4o=l(),ub=a("li"),Dte=a("strong"),t4o=o("nystromformer"),a4o=o(" \u2014 "),XI=a("a"),n4o=o("NystromformerForSequenceClassification"),s4o=o(" (Nystromformer model)"),l4o=l(),bb=a("li"),Nte=a("strong"),i4o=o("openai-gpt"),d4o=o(" \u2014 "),VI=a("a"),c4o=o("OpenAIGPTForSequenceClassification"),f4o=o(" (OpenAI GPT model)"),m4o=l(),vb=a("li"),qte=a("strong"),g4o=o("perceiver"),h4o=o(" \u2014 "),zI=a("a"),p4o=o("PerceiverForSequenceClassification"),_4o=o(" (Perceiver model)"),u4o=l(),Tb=a("li"),Ote=a("strong"),b4o=o("plbart"),v4o=o(" \u2014 "),WI=a("a"),T4o=o("PLBartForSequenceClassification"),F4o=o(" (PLBart model)"),C4o=l(),Fb=a("li"),Gte=a("strong"),M4o=o("qdqbert"),E4o=o(" \u2014 "),QI=a("a"),y4o=o("QDQBertForSequenceClassification"),w4o=o(" (QDQBert model)"),A4o=l(),Cb=a("li"),Xte=a("strong"),L4o=o("reformer"),B4o=o(" \u2014 "),HI=a("a"),x4o=o("ReformerForSequenceClassification"),k4o=o(" (Reformer model)"),R4o=l(),Mb=a("li"),Vte=a("strong"),S4o=o("rembert"),P4o=o(" \u2014 "),UI=a("a"),$4o=o("RemBertForSequenceClassification"),I4o=o(" (RemBERT model)"),j4o=l(),Eb=a("li"),zte=a("strong"),D4o=o("roberta"),N4o=o(" \u2014 "),JI=a("a"),q4o=o("RobertaForSequenceClassification"),O4o=o(" (RoBERTa model)"),G4o=l(),yb=a("li"),Wte=a("strong"),X4o=o("roformer"),V4o=o(" \u2014 "),YI=a("a"),z4o=o("RoFormerForSequenceClassification"),W4o=o(" (RoFormer model)"),Q4o=l(),wb=a("li"),Qte=a("strong"),H4o=o("squeezebert"),U4o=o(" \u2014 "),KI=a("a"),J4o=o("SqueezeBertForSequenceClassification"),Y4o=o(" (SqueezeBERT model)"),K4o=l(),Ab=a("li"),Hte=a("strong"),Z4o=o("tapas"),eEo=o(" \u2014 "),ZI=a("a"),oEo=o("TapasForSequenceClassification"),rEo=o(" (TAPAS model)"),tEo=l(),Lb=a("li"),Ute=a("strong"),aEo=o("transfo-xl"),nEo=o(" \u2014 "),ej=a("a"),sEo=o("TransfoXLForSequenceClassification"),lEo=o(" (Transformer-XL model)"),iEo=l(),Bb=a("li"),Jte=a("strong"),dEo=o("xlm"),cEo=o(" \u2014 "),oj=a("a"),fEo=o("XLMForSequenceClassification"),mEo=o(" (XLM model)"),gEo=l(),xb=a("li"),Yte=a("strong"),hEo=o("xlm-roberta"),pEo=o(" \u2014 "),rj=a("a"),_Eo=o("XLMRobertaForSequenceClassification"),uEo=o(" (XLM-RoBERTa model)"),bEo=l(),kb=a("li"),Kte=a("strong"),vEo=o("xlm-roberta-xl"),TEo=o(" \u2014 "),tj=a("a"),FEo=o("XLMRobertaXLForSequenceClassification"),CEo=o(" (XLM-RoBERTa-XL model)"),MEo=l(),Rb=a("li"),Zte=a("strong"),EEo=o("xlnet"),yEo=o(" \u2014 "),aj=a("a"),wEo=o("XLNetForSequenceClassification"),AEo=o(" (XLNet model)"),LEo=l(),Sb=a("li"),eae=a("strong"),BEo=o("yoso"),xEo=o(" \u2014 "),nj=a("a"),kEo=o("YosoForSequenceClassification"),REo=o(" (YOSO model)"),SEo=l(),Pb=a("p"),PEo=o("The model is set in evaluation mode by default using "),oae=a("code"),$Eo=o("model.eval()"),IEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rae=a("code"),jEo=o("model.train()"),DEo=l(),tae=a("p"),NEo=o("Examples:"),qEo=l(),f(my.$$.fragment),Mxe=l(),hd=a("h2"),$b=a("a"),aae=a("span"),f(gy.$$.fragment),OEo=l(),nae=a("span"),GEo=o("AutoModelForMultipleChoice"),Exe=l(),rr=a("div"),f(hy.$$.fragment),XEo=l(),pd=a("p"),VEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sae=a("code"),zEo=o("from_pretrained()"),WEo=o("class method or the "),lae=a("code"),QEo=o("from_config()"),HEo=o(`class
method.`),UEo=l(),py=a("p"),JEo=o("This class cannot be instantiated directly using "),iae=a("code"),YEo=o("__init__()"),KEo=o(" (throws an error)."),ZEo=l(),Jr=a("div"),f(_y.$$.fragment),eyo=l(),dae=a("p"),oyo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ryo=l(),_d=a("p"),tyo=o(`Note:
Loading a model from its configuration file does `),cae=a("strong"),ayo=o("not"),nyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fae=a("code"),syo=o("from_pretrained()"),lyo=o("to load the model weights."),iyo=l(),mae=a("p"),dyo=o("Examples:"),cyo=l(),f(uy.$$.fragment),fyo=l(),Xe=a("div"),f(by.$$.fragment),myo=l(),gae=a("p"),gyo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hyo=l(),Ua=a("p"),pyo=o("The model class to instantiate is selected based on the "),hae=a("code"),_yo=o("model_type"),uyo=o(` property of the config object (either
passed as an argument or loaded from `),pae=a("code"),byo=o("pretrained_model_name_or_path"),vyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ae=a("code"),Tyo=o("pretrained_model_name_or_path"),Fyo=o(":"),Cyo=l(),O=a("ul"),Ib=a("li"),uae=a("strong"),Myo=o("albert"),Eyo=o(" \u2014 "),sj=a("a"),yyo=o("AlbertForMultipleChoice"),wyo=o(" (ALBERT model)"),Ayo=l(),jb=a("li"),bae=a("strong"),Lyo=o("bert"),Byo=o(" \u2014 "),lj=a("a"),xyo=o("BertForMultipleChoice"),kyo=o(" (BERT model)"),Ryo=l(),Db=a("li"),vae=a("strong"),Syo=o("big_bird"),Pyo=o(" \u2014 "),ij=a("a"),$yo=o("BigBirdForMultipleChoice"),Iyo=o(" (BigBird model)"),jyo=l(),Nb=a("li"),Tae=a("strong"),Dyo=o("camembert"),Nyo=o(" \u2014 "),dj=a("a"),qyo=o("CamembertForMultipleChoice"),Oyo=o(" (CamemBERT model)"),Gyo=l(),qb=a("li"),Fae=a("strong"),Xyo=o("canine"),Vyo=o(" \u2014 "),cj=a("a"),zyo=o("CanineForMultipleChoice"),Wyo=o(" (Canine model)"),Qyo=l(),Ob=a("li"),Cae=a("strong"),Hyo=o("convbert"),Uyo=o(" \u2014 "),fj=a("a"),Jyo=o("ConvBertForMultipleChoice"),Yyo=o(" (ConvBERT model)"),Kyo=l(),Gb=a("li"),Mae=a("strong"),Zyo=o("data2vec-text"),ewo=o(" \u2014 "),mj=a("a"),owo=o("Data2VecTextForMultipleChoice"),rwo=o(" (Data2VecText model)"),two=l(),Xb=a("li"),Eae=a("strong"),awo=o("distilbert"),nwo=o(" \u2014 "),gj=a("a"),swo=o("DistilBertForMultipleChoice"),lwo=o(" (DistilBERT model)"),iwo=l(),Vb=a("li"),yae=a("strong"),dwo=o("electra"),cwo=o(" \u2014 "),hj=a("a"),fwo=o("ElectraForMultipleChoice"),mwo=o(" (ELECTRA model)"),gwo=l(),zb=a("li"),wae=a("strong"),hwo=o("flaubert"),pwo=o(" \u2014 "),pj=a("a"),_wo=o("FlaubertForMultipleChoice"),uwo=o(" (FlauBERT model)"),bwo=l(),Wb=a("li"),Aae=a("strong"),vwo=o("fnet"),Two=o(" \u2014 "),_j=a("a"),Fwo=o("FNetForMultipleChoice"),Cwo=o(" (FNet model)"),Mwo=l(),Qb=a("li"),Lae=a("strong"),Ewo=o("funnel"),ywo=o(" \u2014 "),uj=a("a"),wwo=o("FunnelForMultipleChoice"),Awo=o(" (Funnel Transformer model)"),Lwo=l(),Hb=a("li"),Bae=a("strong"),Bwo=o("ibert"),xwo=o(" \u2014 "),bj=a("a"),kwo=o("IBertForMultipleChoice"),Rwo=o(" (I-BERT model)"),Swo=l(),Ub=a("li"),xae=a("strong"),Pwo=o("longformer"),$wo=o(" \u2014 "),vj=a("a"),Iwo=o("LongformerForMultipleChoice"),jwo=o(" (Longformer model)"),Dwo=l(),Jb=a("li"),kae=a("strong"),Nwo=o("megatron-bert"),qwo=o(" \u2014 "),Tj=a("a"),Owo=o("MegatronBertForMultipleChoice"),Gwo=o(" (MegatronBert model)"),Xwo=l(),Yb=a("li"),Rae=a("strong"),Vwo=o("mobilebert"),zwo=o(" \u2014 "),Fj=a("a"),Wwo=o("MobileBertForMultipleChoice"),Qwo=o(" (MobileBERT model)"),Hwo=l(),Kb=a("li"),Sae=a("strong"),Uwo=o("mpnet"),Jwo=o(" \u2014 "),Cj=a("a"),Ywo=o("MPNetForMultipleChoice"),Kwo=o(" (MPNet model)"),Zwo=l(),Zb=a("li"),Pae=a("strong"),e6o=o("nystromformer"),o6o=o(" \u2014 "),Mj=a("a"),r6o=o("NystromformerForMultipleChoice"),t6o=o(" (Nystromformer model)"),a6o=l(),e3=a("li"),$ae=a("strong"),n6o=o("qdqbert"),s6o=o(" \u2014 "),Ej=a("a"),l6o=o("QDQBertForMultipleChoice"),i6o=o(" (QDQBert model)"),d6o=l(),o3=a("li"),Iae=a("strong"),c6o=o("rembert"),f6o=o(" \u2014 "),yj=a("a"),m6o=o("RemBertForMultipleChoice"),g6o=o(" (RemBERT model)"),h6o=l(),r3=a("li"),jae=a("strong"),p6o=o("roberta"),_6o=o(" \u2014 "),wj=a("a"),u6o=o("RobertaForMultipleChoice"),b6o=o(" (RoBERTa model)"),v6o=l(),t3=a("li"),Dae=a("strong"),T6o=o("roformer"),F6o=o(" \u2014 "),Aj=a("a"),C6o=o("RoFormerForMultipleChoice"),M6o=o(" (RoFormer model)"),E6o=l(),a3=a("li"),Nae=a("strong"),y6o=o("squeezebert"),w6o=o(" \u2014 "),Lj=a("a"),A6o=o("SqueezeBertForMultipleChoice"),L6o=o(" (SqueezeBERT model)"),B6o=l(),n3=a("li"),qae=a("strong"),x6o=o("xlm"),k6o=o(" \u2014 "),Bj=a("a"),R6o=o("XLMForMultipleChoice"),S6o=o(" (XLM model)"),P6o=l(),s3=a("li"),Oae=a("strong"),$6o=o("xlm-roberta"),I6o=o(" \u2014 "),xj=a("a"),j6o=o("XLMRobertaForMultipleChoice"),D6o=o(" (XLM-RoBERTa model)"),N6o=l(),l3=a("li"),Gae=a("strong"),q6o=o("xlm-roberta-xl"),O6o=o(" \u2014 "),kj=a("a"),G6o=o("XLMRobertaXLForMultipleChoice"),X6o=o(" (XLM-RoBERTa-XL model)"),V6o=l(),i3=a("li"),Xae=a("strong"),z6o=o("xlnet"),W6o=o(" \u2014 "),Rj=a("a"),Q6o=o("XLNetForMultipleChoice"),H6o=o(" (XLNet model)"),U6o=l(),d3=a("li"),Vae=a("strong"),J6o=o("yoso"),Y6o=o(" \u2014 "),Sj=a("a"),K6o=o("YosoForMultipleChoice"),Z6o=o(" (YOSO model)"),eAo=l(),c3=a("p"),oAo=o("The model is set in evaluation mode by default using "),zae=a("code"),rAo=o("model.eval()"),tAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wae=a("code"),aAo=o("model.train()"),nAo=l(),Qae=a("p"),sAo=o("Examples:"),lAo=l(),f(vy.$$.fragment),yxe=l(),ud=a("h2"),f3=a("a"),Hae=a("span"),f(Ty.$$.fragment),iAo=l(),Uae=a("span"),dAo=o("AutoModelForNextSentencePrediction"),wxe=l(),tr=a("div"),f(Fy.$$.fragment),cAo=l(),bd=a("p"),fAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Jae=a("code"),mAo=o("from_pretrained()"),gAo=o("class method or the "),Yae=a("code"),hAo=o("from_config()"),pAo=o(`class
method.`),_Ao=l(),Cy=a("p"),uAo=o("This class cannot be instantiated directly using "),Kae=a("code"),bAo=o("__init__()"),vAo=o(" (throws an error)."),TAo=l(),Yr=a("div"),f(My.$$.fragment),FAo=l(),Zae=a("p"),CAo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),MAo=l(),vd=a("p"),EAo=o(`Note:
Loading a model from its configuration file does `),ene=a("strong"),yAo=o("not"),wAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),one=a("code"),AAo=o("from_pretrained()"),LAo=o("to load the model weights."),BAo=l(),rne=a("p"),xAo=o("Examples:"),kAo=l(),f(Ey.$$.fragment),RAo=l(),Ve=a("div"),f(yy.$$.fragment),SAo=l(),tne=a("p"),PAo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$Ao=l(),Ja=a("p"),IAo=o("The model class to instantiate is selected based on the "),ane=a("code"),jAo=o("model_type"),DAo=o(` property of the config object (either
passed as an argument or loaded from `),nne=a("code"),NAo=o("pretrained_model_name_or_path"),qAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sne=a("code"),OAo=o("pretrained_model_name_or_path"),GAo=o(":"),XAo=l(),da=a("ul"),m3=a("li"),lne=a("strong"),VAo=o("bert"),zAo=o(" \u2014 "),Pj=a("a"),WAo=o("BertForNextSentencePrediction"),QAo=o(" (BERT model)"),HAo=l(),g3=a("li"),ine=a("strong"),UAo=o("fnet"),JAo=o(" \u2014 "),$j=a("a"),YAo=o("FNetForNextSentencePrediction"),KAo=o(" (FNet model)"),ZAo=l(),h3=a("li"),dne=a("strong"),e0o=o("megatron-bert"),o0o=o(" \u2014 "),Ij=a("a"),r0o=o("MegatronBertForNextSentencePrediction"),t0o=o(" (MegatronBert model)"),a0o=l(),p3=a("li"),cne=a("strong"),n0o=o("mobilebert"),s0o=o(" \u2014 "),jj=a("a"),l0o=o("MobileBertForNextSentencePrediction"),i0o=o(" (MobileBERT model)"),d0o=l(),_3=a("li"),fne=a("strong"),c0o=o("qdqbert"),f0o=o(" \u2014 "),Dj=a("a"),m0o=o("QDQBertForNextSentencePrediction"),g0o=o(" (QDQBert model)"),h0o=l(),u3=a("p"),p0o=o("The model is set in evaluation mode by default using "),mne=a("code"),_0o=o("model.eval()"),u0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gne=a("code"),b0o=o("model.train()"),v0o=l(),hne=a("p"),T0o=o("Examples:"),F0o=l(),f(wy.$$.fragment),Axe=l(),Td=a("h2"),b3=a("a"),pne=a("span"),f(Ay.$$.fragment),C0o=l(),_ne=a("span"),M0o=o("AutoModelForTokenClassification"),Lxe=l(),ar=a("div"),f(Ly.$$.fragment),E0o=l(),Fd=a("p"),y0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),une=a("code"),w0o=o("from_pretrained()"),A0o=o("class method or the "),bne=a("code"),L0o=o("from_config()"),B0o=o(`class
method.`),x0o=l(),By=a("p"),k0o=o("This class cannot be instantiated directly using "),vne=a("code"),R0o=o("__init__()"),S0o=o(" (throws an error)."),P0o=l(),Kr=a("div"),f(xy.$$.fragment),$0o=l(),Tne=a("p"),I0o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),j0o=l(),Cd=a("p"),D0o=o(`Note:
Loading a model from its configuration file does `),Fne=a("strong"),N0o=o("not"),q0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cne=a("code"),O0o=o("from_pretrained()"),G0o=o("to load the model weights."),X0o=l(),Mne=a("p"),V0o=o("Examples:"),z0o=l(),f(ky.$$.fragment),W0o=l(),ze=a("div"),f(Ry.$$.fragment),Q0o=l(),Ene=a("p"),H0o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),U0o=l(),Ya=a("p"),J0o=o("The model class to instantiate is selected based on the "),yne=a("code"),Y0o=o("model_type"),K0o=o(` property of the config object (either
passed as an argument or loaded from `),wne=a("code"),Z0o=o("pretrained_model_name_or_path"),eLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ane=a("code"),oLo=o("pretrained_model_name_or_path"),rLo=o(":"),tLo=l(),N=a("ul"),v3=a("li"),Lne=a("strong"),aLo=o("albert"),nLo=o(" \u2014 "),Nj=a("a"),sLo=o("AlbertForTokenClassification"),lLo=o(" (ALBERT model)"),iLo=l(),T3=a("li"),Bne=a("strong"),dLo=o("bert"),cLo=o(" \u2014 "),qj=a("a"),fLo=o("BertForTokenClassification"),mLo=o(" (BERT model)"),gLo=l(),F3=a("li"),xne=a("strong"),hLo=o("big_bird"),pLo=o(" \u2014 "),Oj=a("a"),_Lo=o("BigBirdForTokenClassification"),uLo=o(" (BigBird model)"),bLo=l(),C3=a("li"),kne=a("strong"),vLo=o("camembert"),TLo=o(" \u2014 "),Gj=a("a"),FLo=o("CamembertForTokenClassification"),CLo=o(" (CamemBERT model)"),MLo=l(),M3=a("li"),Rne=a("strong"),ELo=o("canine"),yLo=o(" \u2014 "),Xj=a("a"),wLo=o("CanineForTokenClassification"),ALo=o(" (Canine model)"),LLo=l(),E3=a("li"),Sne=a("strong"),BLo=o("convbert"),xLo=o(" \u2014 "),Vj=a("a"),kLo=o("ConvBertForTokenClassification"),RLo=o(" (ConvBERT model)"),SLo=l(),y3=a("li"),Pne=a("strong"),PLo=o("data2vec-text"),$Lo=o(" \u2014 "),zj=a("a"),ILo=o("Data2VecTextForTokenClassification"),jLo=o(" (Data2VecText model)"),DLo=l(),w3=a("li"),$ne=a("strong"),NLo=o("deberta"),qLo=o(" \u2014 "),Wj=a("a"),OLo=o("DebertaForTokenClassification"),GLo=o(" (DeBERTa model)"),XLo=l(),A3=a("li"),Ine=a("strong"),VLo=o("deberta-v2"),zLo=o(" \u2014 "),Qj=a("a"),WLo=o("DebertaV2ForTokenClassification"),QLo=o(" (DeBERTa-v2 model)"),HLo=l(),L3=a("li"),jne=a("strong"),ULo=o("distilbert"),JLo=o(" \u2014 "),Hj=a("a"),YLo=o("DistilBertForTokenClassification"),KLo=o(" (DistilBERT model)"),ZLo=l(),B3=a("li"),Dne=a("strong"),e7o=o("electra"),o7o=o(" \u2014 "),Uj=a("a"),r7o=o("ElectraForTokenClassification"),t7o=o(" (ELECTRA model)"),a7o=l(),x3=a("li"),Nne=a("strong"),n7o=o("flaubert"),s7o=o(" \u2014 "),Jj=a("a"),l7o=o("FlaubertForTokenClassification"),i7o=o(" (FlauBERT model)"),d7o=l(),k3=a("li"),qne=a("strong"),c7o=o("fnet"),f7o=o(" \u2014 "),Yj=a("a"),m7o=o("FNetForTokenClassification"),g7o=o(" (FNet model)"),h7o=l(),R3=a("li"),One=a("strong"),p7o=o("funnel"),_7o=o(" \u2014 "),Kj=a("a"),u7o=o("FunnelForTokenClassification"),b7o=o(" (Funnel Transformer model)"),v7o=l(),S3=a("li"),Gne=a("strong"),T7o=o("gpt2"),F7o=o(" \u2014 "),Zj=a("a"),C7o=o("GPT2ForTokenClassification"),M7o=o(" (OpenAI GPT-2 model)"),E7o=l(),P3=a("li"),Xne=a("strong"),y7o=o("ibert"),w7o=o(" \u2014 "),eD=a("a"),A7o=o("IBertForTokenClassification"),L7o=o(" (I-BERT model)"),B7o=l(),$3=a("li"),Vne=a("strong"),x7o=o("layoutlm"),k7o=o(" \u2014 "),oD=a("a"),R7o=o("LayoutLMForTokenClassification"),S7o=o(" (LayoutLM model)"),P7o=l(),I3=a("li"),zne=a("strong"),$7o=o("layoutlmv2"),I7o=o(" \u2014 "),rD=a("a"),j7o=o("LayoutLMv2ForTokenClassification"),D7o=o(" (LayoutLMv2 model)"),N7o=l(),j3=a("li"),Wne=a("strong"),q7o=o("longformer"),O7o=o(" \u2014 "),tD=a("a"),G7o=o("LongformerForTokenClassification"),X7o=o(" (Longformer model)"),V7o=l(),D3=a("li"),Qne=a("strong"),z7o=o("megatron-bert"),W7o=o(" \u2014 "),aD=a("a"),Q7o=o("MegatronBertForTokenClassification"),H7o=o(" (MegatronBert model)"),U7o=l(),N3=a("li"),Hne=a("strong"),J7o=o("mobilebert"),Y7o=o(" \u2014 "),nD=a("a"),K7o=o("MobileBertForTokenClassification"),Z7o=o(" (MobileBERT model)"),e9o=l(),q3=a("li"),Une=a("strong"),o9o=o("mpnet"),r9o=o(" \u2014 "),sD=a("a"),t9o=o("MPNetForTokenClassification"),a9o=o(" (MPNet model)"),n9o=l(),O3=a("li"),Jne=a("strong"),s9o=o("nystromformer"),l9o=o(" \u2014 "),lD=a("a"),i9o=o("NystromformerForTokenClassification"),d9o=o(" (Nystromformer model)"),c9o=l(),G3=a("li"),Yne=a("strong"),f9o=o("qdqbert"),m9o=o(" \u2014 "),iD=a("a"),g9o=o("QDQBertForTokenClassification"),h9o=o(" (QDQBert model)"),p9o=l(),X3=a("li"),Kne=a("strong"),_9o=o("rembert"),u9o=o(" \u2014 "),dD=a("a"),b9o=o("RemBertForTokenClassification"),v9o=o(" (RemBERT model)"),T9o=l(),V3=a("li"),Zne=a("strong"),F9o=o("roberta"),C9o=o(" \u2014 "),cD=a("a"),M9o=o("RobertaForTokenClassification"),E9o=o(" (RoBERTa model)"),y9o=l(),z3=a("li"),ese=a("strong"),w9o=o("roformer"),A9o=o(" \u2014 "),fD=a("a"),L9o=o("RoFormerForTokenClassification"),B9o=o(" (RoFormer model)"),x9o=l(),W3=a("li"),ose=a("strong"),k9o=o("squeezebert"),R9o=o(" \u2014 "),mD=a("a"),S9o=o("SqueezeBertForTokenClassification"),P9o=o(" (SqueezeBERT model)"),$9o=l(),Q3=a("li"),rse=a("strong"),I9o=o("xlm"),j9o=o(" \u2014 "),gD=a("a"),D9o=o("XLMForTokenClassification"),N9o=o(" (XLM model)"),q9o=l(),H3=a("li"),tse=a("strong"),O9o=o("xlm-roberta"),G9o=o(" \u2014 "),hD=a("a"),X9o=o("XLMRobertaForTokenClassification"),V9o=o(" (XLM-RoBERTa model)"),z9o=l(),U3=a("li"),ase=a("strong"),W9o=o("xlm-roberta-xl"),Q9o=o(" \u2014 "),pD=a("a"),H9o=o("XLMRobertaXLForTokenClassification"),U9o=o(" (XLM-RoBERTa-XL model)"),J9o=l(),J3=a("li"),nse=a("strong"),Y9o=o("xlnet"),K9o=o(" \u2014 "),_D=a("a"),Z9o=o("XLNetForTokenClassification"),eBo=o(" (XLNet model)"),oBo=l(),Y3=a("li"),sse=a("strong"),rBo=o("yoso"),tBo=o(" \u2014 "),uD=a("a"),aBo=o("YosoForTokenClassification"),nBo=o(" (YOSO model)"),sBo=l(),K3=a("p"),lBo=o("The model is set in evaluation mode by default using "),lse=a("code"),iBo=o("model.eval()"),dBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ise=a("code"),cBo=o("model.train()"),fBo=l(),dse=a("p"),mBo=o("Examples:"),gBo=l(),f(Sy.$$.fragment),Bxe=l(),Md=a("h2"),Z3=a("a"),cse=a("span"),f(Py.$$.fragment),hBo=l(),fse=a("span"),pBo=o("AutoModelForQuestionAnswering"),xxe=l(),nr=a("div"),f($y.$$.fragment),_Bo=l(),Ed=a("p"),uBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mse=a("code"),bBo=o("from_pretrained()"),vBo=o("class method or the "),gse=a("code"),TBo=o("from_config()"),FBo=o(`class
method.`),CBo=l(),Iy=a("p"),MBo=o("This class cannot be instantiated directly using "),hse=a("code"),EBo=o("__init__()"),yBo=o(" (throws an error)."),wBo=l(),Zr=a("div"),f(jy.$$.fragment),ABo=l(),pse=a("p"),LBo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),BBo=l(),yd=a("p"),xBo=o(`Note:
Loading a model from its configuration file does `),_se=a("strong"),kBo=o("not"),RBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),use=a("code"),SBo=o("from_pretrained()"),PBo=o("to load the model weights."),$Bo=l(),bse=a("p"),IBo=o("Examples:"),jBo=l(),f(Dy.$$.fragment),DBo=l(),We=a("div"),f(Ny.$$.fragment),NBo=l(),vse=a("p"),qBo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),OBo=l(),Ka=a("p"),GBo=o("The model class to instantiate is selected based on the "),Tse=a("code"),XBo=o("model_type"),VBo=o(` property of the config object (either
passed as an argument or loaded from `),Fse=a("code"),zBo=o("pretrained_model_name_or_path"),WBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cse=a("code"),QBo=o("pretrained_model_name_or_path"),HBo=o(":"),UBo=l(),R=a("ul"),e5=a("li"),Mse=a("strong"),JBo=o("albert"),YBo=o(" \u2014 "),bD=a("a"),KBo=o("AlbertForQuestionAnswering"),ZBo=o(" (ALBERT model)"),exo=l(),o5=a("li"),Ese=a("strong"),oxo=o("bart"),rxo=o(" \u2014 "),vD=a("a"),txo=o("BartForQuestionAnswering"),axo=o(" (BART model)"),nxo=l(),r5=a("li"),yse=a("strong"),sxo=o("bert"),lxo=o(" \u2014 "),TD=a("a"),ixo=o("BertForQuestionAnswering"),dxo=o(" (BERT model)"),cxo=l(),t5=a("li"),wse=a("strong"),fxo=o("big_bird"),mxo=o(" \u2014 "),FD=a("a"),gxo=o("BigBirdForQuestionAnswering"),hxo=o(" (BigBird model)"),pxo=l(),a5=a("li"),Ase=a("strong"),_xo=o("bigbird_pegasus"),uxo=o(" \u2014 "),CD=a("a"),bxo=o("BigBirdPegasusForQuestionAnswering"),vxo=o(" (BigBirdPegasus model)"),Txo=l(),n5=a("li"),Lse=a("strong"),Fxo=o("camembert"),Cxo=o(" \u2014 "),MD=a("a"),Mxo=o("CamembertForQuestionAnswering"),Exo=o(" (CamemBERT model)"),yxo=l(),s5=a("li"),Bse=a("strong"),wxo=o("canine"),Axo=o(" \u2014 "),ED=a("a"),Lxo=o("CanineForQuestionAnswering"),Bxo=o(" (Canine model)"),xxo=l(),l5=a("li"),xse=a("strong"),kxo=o("convbert"),Rxo=o(" \u2014 "),yD=a("a"),Sxo=o("ConvBertForQuestionAnswering"),Pxo=o(" (ConvBERT model)"),$xo=l(),i5=a("li"),kse=a("strong"),Ixo=o("data2vec-text"),jxo=o(" \u2014 "),wD=a("a"),Dxo=o("Data2VecTextForQuestionAnswering"),Nxo=o(" (Data2VecText model)"),qxo=l(),d5=a("li"),Rse=a("strong"),Oxo=o("deberta"),Gxo=o(" \u2014 "),AD=a("a"),Xxo=o("DebertaForQuestionAnswering"),Vxo=o(" (DeBERTa model)"),zxo=l(),c5=a("li"),Sse=a("strong"),Wxo=o("deberta-v2"),Qxo=o(" \u2014 "),LD=a("a"),Hxo=o("DebertaV2ForQuestionAnswering"),Uxo=o(" (DeBERTa-v2 model)"),Jxo=l(),f5=a("li"),Pse=a("strong"),Yxo=o("distilbert"),Kxo=o(" \u2014 "),BD=a("a"),Zxo=o("DistilBertForQuestionAnswering"),eko=o(" (DistilBERT model)"),oko=l(),m5=a("li"),$se=a("strong"),rko=o("electra"),tko=o(" \u2014 "),xD=a("a"),ako=o("ElectraForQuestionAnswering"),nko=o(" (ELECTRA model)"),sko=l(),g5=a("li"),Ise=a("strong"),lko=o("flaubert"),iko=o(" \u2014 "),kD=a("a"),dko=o("FlaubertForQuestionAnsweringSimple"),cko=o(" (FlauBERT model)"),fko=l(),h5=a("li"),jse=a("strong"),mko=o("fnet"),gko=o(" \u2014 "),RD=a("a"),hko=o("FNetForQuestionAnswering"),pko=o(" (FNet model)"),_ko=l(),p5=a("li"),Dse=a("strong"),uko=o("funnel"),bko=o(" \u2014 "),SD=a("a"),vko=o("FunnelForQuestionAnswering"),Tko=o(" (Funnel Transformer model)"),Fko=l(),_5=a("li"),Nse=a("strong"),Cko=o("gptj"),Mko=o(" \u2014 "),PD=a("a"),Eko=o("GPTJForQuestionAnswering"),yko=o(" (GPT-J model)"),wko=l(),u5=a("li"),qse=a("strong"),Ako=o("ibert"),Lko=o(" \u2014 "),$D=a("a"),Bko=o("IBertForQuestionAnswering"),xko=o(" (I-BERT model)"),kko=l(),b5=a("li"),Ose=a("strong"),Rko=o("layoutlmv2"),Sko=o(" \u2014 "),ID=a("a"),Pko=o("LayoutLMv2ForQuestionAnswering"),$ko=o(" (LayoutLMv2 model)"),Iko=l(),v5=a("li"),Gse=a("strong"),jko=o("led"),Dko=o(" \u2014 "),jD=a("a"),Nko=o("LEDForQuestionAnswering"),qko=o(" (LED model)"),Oko=l(),T5=a("li"),Xse=a("strong"),Gko=o("longformer"),Xko=o(" \u2014 "),DD=a("a"),Vko=o("LongformerForQuestionAnswering"),zko=o(" (Longformer model)"),Wko=l(),F5=a("li"),Vse=a("strong"),Qko=o("lxmert"),Hko=o(" \u2014 "),ND=a("a"),Uko=o("LxmertForQuestionAnswering"),Jko=o(" (LXMERT model)"),Yko=l(),C5=a("li"),zse=a("strong"),Kko=o("mbart"),Zko=o(" \u2014 "),qD=a("a"),eRo=o("MBartForQuestionAnswering"),oRo=o(" (mBART model)"),rRo=l(),M5=a("li"),Wse=a("strong"),tRo=o("megatron-bert"),aRo=o(" \u2014 "),OD=a("a"),nRo=o("MegatronBertForQuestionAnswering"),sRo=o(" (MegatronBert model)"),lRo=l(),E5=a("li"),Qse=a("strong"),iRo=o("mobilebert"),dRo=o(" \u2014 "),GD=a("a"),cRo=o("MobileBertForQuestionAnswering"),fRo=o(" (MobileBERT model)"),mRo=l(),y5=a("li"),Hse=a("strong"),gRo=o("mpnet"),hRo=o(" \u2014 "),XD=a("a"),pRo=o("MPNetForQuestionAnswering"),_Ro=o(" (MPNet model)"),uRo=l(),w5=a("li"),Use=a("strong"),bRo=o("nystromformer"),vRo=o(" \u2014 "),VD=a("a"),TRo=o("NystromformerForQuestionAnswering"),FRo=o(" (Nystromformer model)"),CRo=l(),A5=a("li"),Jse=a("strong"),MRo=o("qdqbert"),ERo=o(" \u2014 "),zD=a("a"),yRo=o("QDQBertForQuestionAnswering"),wRo=o(" (QDQBert model)"),ARo=l(),L5=a("li"),Yse=a("strong"),LRo=o("reformer"),BRo=o(" \u2014 "),WD=a("a"),xRo=o("ReformerForQuestionAnswering"),kRo=o(" (Reformer model)"),RRo=l(),B5=a("li"),Kse=a("strong"),SRo=o("rembert"),PRo=o(" \u2014 "),QD=a("a"),$Ro=o("RemBertForQuestionAnswering"),IRo=o(" (RemBERT model)"),jRo=l(),x5=a("li"),Zse=a("strong"),DRo=o("roberta"),NRo=o(" \u2014 "),HD=a("a"),qRo=o("RobertaForQuestionAnswering"),ORo=o(" (RoBERTa model)"),GRo=l(),k5=a("li"),ele=a("strong"),XRo=o("roformer"),VRo=o(" \u2014 "),UD=a("a"),zRo=o("RoFormerForQuestionAnswering"),WRo=o(" (RoFormer model)"),QRo=l(),R5=a("li"),ole=a("strong"),HRo=o("splinter"),URo=o(" \u2014 "),JD=a("a"),JRo=o("SplinterForQuestionAnswering"),YRo=o(" (Splinter model)"),KRo=l(),S5=a("li"),rle=a("strong"),ZRo=o("squeezebert"),eSo=o(" \u2014 "),YD=a("a"),oSo=o("SqueezeBertForQuestionAnswering"),rSo=o(" (SqueezeBERT model)"),tSo=l(),P5=a("li"),tle=a("strong"),aSo=o("xlm"),nSo=o(" \u2014 "),KD=a("a"),sSo=o("XLMForQuestionAnsweringSimple"),lSo=o(" (XLM model)"),iSo=l(),$5=a("li"),ale=a("strong"),dSo=o("xlm-roberta"),cSo=o(" \u2014 "),ZD=a("a"),fSo=o("XLMRobertaForQuestionAnswering"),mSo=o(" (XLM-RoBERTa model)"),gSo=l(),I5=a("li"),nle=a("strong"),hSo=o("xlm-roberta-xl"),pSo=o(" \u2014 "),eN=a("a"),_So=o("XLMRobertaXLForQuestionAnswering"),uSo=o(" (XLM-RoBERTa-XL model)"),bSo=l(),j5=a("li"),sle=a("strong"),vSo=o("xlnet"),TSo=o(" \u2014 "),oN=a("a"),FSo=o("XLNetForQuestionAnsweringSimple"),CSo=o(" (XLNet model)"),MSo=l(),D5=a("li"),lle=a("strong"),ESo=o("yoso"),ySo=o(" \u2014 "),rN=a("a"),wSo=o("YosoForQuestionAnswering"),ASo=o(" (YOSO model)"),LSo=l(),N5=a("p"),BSo=o("The model is set in evaluation mode by default using "),ile=a("code"),xSo=o("model.eval()"),kSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dle=a("code"),RSo=o("model.train()"),SSo=l(),cle=a("p"),PSo=o("Examples:"),$So=l(),f(qy.$$.fragment),kxe=l(),wd=a("h2"),q5=a("a"),fle=a("span"),f(Oy.$$.fragment),ISo=l(),mle=a("span"),jSo=o("AutoModelForTableQuestionAnswering"),Rxe=l(),sr=a("div"),f(Gy.$$.fragment),DSo=l(),Ad=a("p"),NSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gle=a("code"),qSo=o("from_pretrained()"),OSo=o("class method or the "),hle=a("code"),GSo=o("from_config()"),XSo=o(`class
method.`),VSo=l(),Xy=a("p"),zSo=o("This class cannot be instantiated directly using "),ple=a("code"),WSo=o("__init__()"),QSo=o(" (throws an error)."),HSo=l(),et=a("div"),f(Vy.$$.fragment),USo=l(),_le=a("p"),JSo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),YSo=l(),Ld=a("p"),KSo=o(`Note:
Loading a model from its configuration file does `),ule=a("strong"),ZSo=o("not"),ePo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ble=a("code"),oPo=o("from_pretrained()"),rPo=o("to load the model weights."),tPo=l(),vle=a("p"),aPo=o("Examples:"),nPo=l(),f(zy.$$.fragment),sPo=l(),Qe=a("div"),f(Wy.$$.fragment),lPo=l(),Tle=a("p"),iPo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dPo=l(),Za=a("p"),cPo=o("The model class to instantiate is selected based on the "),Fle=a("code"),fPo=o("model_type"),mPo=o(` property of the config object (either
passed as an argument or loaded from `),Cle=a("code"),gPo=o("pretrained_model_name_or_path"),hPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mle=a("code"),pPo=o("pretrained_model_name_or_path"),_Po=o(":"),uPo=l(),Ele=a("ul"),O5=a("li"),yle=a("strong"),bPo=o("tapas"),vPo=o(" \u2014 "),tN=a("a"),TPo=o("TapasForQuestionAnswering"),FPo=o(" (TAPAS model)"),CPo=l(),G5=a("p"),MPo=o("The model is set in evaluation mode by default using "),wle=a("code"),EPo=o("model.eval()"),yPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ale=a("code"),wPo=o("model.train()"),APo=l(),Lle=a("p"),LPo=o("Examples:"),BPo=l(),f(Qy.$$.fragment),Sxe=l(),Bd=a("h2"),X5=a("a"),Ble=a("span"),f(Hy.$$.fragment),xPo=l(),xle=a("span"),kPo=o("AutoModelForImageClassification"),Pxe=l(),lr=a("div"),f(Uy.$$.fragment),RPo=l(),xd=a("p"),SPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kle=a("code"),PPo=o("from_pretrained()"),$Po=o("class method or the "),Rle=a("code"),IPo=o("from_config()"),jPo=o(`class
method.`),DPo=l(),Jy=a("p"),NPo=o("This class cannot be instantiated directly using "),Sle=a("code"),qPo=o("__init__()"),OPo=o(" (throws an error)."),GPo=l(),ot=a("div"),f(Yy.$$.fragment),XPo=l(),Ple=a("p"),VPo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zPo=l(),kd=a("p"),WPo=o(`Note:
Loading a model from its configuration file does `),$le=a("strong"),QPo=o("not"),HPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ile=a("code"),UPo=o("from_pretrained()"),JPo=o("to load the model weights."),YPo=l(),jle=a("p"),KPo=o("Examples:"),ZPo=l(),f(Ky.$$.fragment),e$o=l(),He=a("div"),f(Zy.$$.fragment),o$o=l(),Dle=a("p"),r$o=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),t$o=l(),en=a("p"),a$o=o("The model class to instantiate is selected based on the "),Nle=a("code"),n$o=o("model_type"),s$o=o(` property of the config object (either
passed as an argument or loaded from `),qle=a("code"),l$o=o("pretrained_model_name_or_path"),i$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ole=a("code"),d$o=o("pretrained_model_name_or_path"),c$o=o(":"),f$o=l(),Fe=a("ul"),V5=a("li"),Gle=a("strong"),m$o=o("beit"),g$o=o(" \u2014 "),aN=a("a"),h$o=o("BeitForImageClassification"),p$o=o(" (BEiT model)"),_$o=l(),z5=a("li"),Xle=a("strong"),u$o=o("convnext"),b$o=o(" \u2014 "),nN=a("a"),v$o=o("ConvNextForImageClassification"),T$o=o(" (ConvNext model)"),F$o=l(),qs=a("li"),Vle=a("strong"),C$o=o("deit"),M$o=o(" \u2014 "),sN=a("a"),E$o=o("DeiTForImageClassification"),y$o=o(" or "),lN=a("a"),w$o=o("DeiTForImageClassificationWithTeacher"),A$o=o(" (DeiT model)"),L$o=l(),W5=a("li"),zle=a("strong"),B$o=o("imagegpt"),x$o=o(" \u2014 "),iN=a("a"),k$o=o("ImageGPTForImageClassification"),R$o=o(" (ImageGPT model)"),S$o=l(),fa=a("li"),Wle=a("strong"),P$o=o("perceiver"),$$o=o(" \u2014 "),dN=a("a"),I$o=o("PerceiverForImageClassificationLearned"),j$o=o(" or "),cN=a("a"),D$o=o("PerceiverForImageClassificationFourier"),N$o=o(" or "),fN=a("a"),q$o=o("PerceiverForImageClassificationConvProcessing"),O$o=o(" (Perceiver model)"),G$o=l(),Q5=a("li"),Qle=a("strong"),X$o=o("poolformer"),V$o=o(" \u2014 "),mN=a("a"),z$o=o("PoolFormerForImageClassification"),W$o=o(" (PoolFormer model)"),Q$o=l(),H5=a("li"),Hle=a("strong"),H$o=o("segformer"),U$o=o(" \u2014 "),gN=a("a"),J$o=o("SegformerForImageClassification"),Y$o=o(" (SegFormer model)"),K$o=l(),U5=a("li"),Ule=a("strong"),Z$o=o("swin"),eIo=o(" \u2014 "),hN=a("a"),oIo=o("SwinForImageClassification"),rIo=o(" (Swin model)"),tIo=l(),J5=a("li"),Jle=a("strong"),aIo=o("vit"),nIo=o(" \u2014 "),pN=a("a"),sIo=o("ViTForImageClassification"),lIo=o(" (ViT model)"),iIo=l(),Y5=a("p"),dIo=o("The model is set in evaluation mode by default using "),Yle=a("code"),cIo=o("model.eval()"),fIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kle=a("code"),mIo=o("model.train()"),gIo=l(),Zle=a("p"),hIo=o("Examples:"),pIo=l(),f(ew.$$.fragment),$xe=l(),Rd=a("h2"),K5=a("a"),eie=a("span"),f(ow.$$.fragment),_Io=l(),oie=a("span"),uIo=o("AutoModelForVision2Seq"),Ixe=l(),ir=a("div"),f(rw.$$.fragment),bIo=l(),Sd=a("p"),vIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rie=a("code"),TIo=o("from_pretrained()"),FIo=o("class method or the "),tie=a("code"),CIo=o("from_config()"),MIo=o(`class
method.`),EIo=l(),tw=a("p"),yIo=o("This class cannot be instantiated directly using "),aie=a("code"),wIo=o("__init__()"),AIo=o(" (throws an error)."),LIo=l(),rt=a("div"),f(aw.$$.fragment),BIo=l(),nie=a("p"),xIo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),kIo=l(),Pd=a("p"),RIo=o(`Note:
Loading a model from its configuration file does `),sie=a("strong"),SIo=o("not"),PIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lie=a("code"),$Io=o("from_pretrained()"),IIo=o("to load the model weights."),jIo=l(),iie=a("p"),DIo=o("Examples:"),NIo=l(),f(nw.$$.fragment),qIo=l(),Ue=a("div"),f(sw.$$.fragment),OIo=l(),die=a("p"),GIo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),XIo=l(),on=a("p"),VIo=o("The model class to instantiate is selected based on the "),cie=a("code"),zIo=o("model_type"),WIo=o(` property of the config object (either
passed as an argument or loaded from `),fie=a("code"),QIo=o("pretrained_model_name_or_path"),HIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mie=a("code"),UIo=o("pretrained_model_name_or_path"),JIo=o(":"),YIo=l(),gie=a("ul"),Z5=a("li"),hie=a("strong"),KIo=o("vision-encoder-decoder"),ZIo=o(" \u2014 "),_N=a("a"),ejo=o("VisionEncoderDecoderModel"),ojo=o(" (Vision Encoder decoder model)"),rjo=l(),e2=a("p"),tjo=o("The model is set in evaluation mode by default using "),pie=a("code"),ajo=o("model.eval()"),njo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ie=a("code"),sjo=o("model.train()"),ljo=l(),uie=a("p"),ijo=o("Examples:"),djo=l(),f(lw.$$.fragment),jxe=l(),$d=a("h2"),o2=a("a"),bie=a("span"),f(iw.$$.fragment),cjo=l(),vie=a("span"),fjo=o("AutoModelForAudioClassification"),Dxe=l(),dr=a("div"),f(dw.$$.fragment),mjo=l(),Id=a("p"),gjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Tie=a("code"),hjo=o("from_pretrained()"),pjo=o("class method or the "),Fie=a("code"),_jo=o("from_config()"),ujo=o(`class
method.`),bjo=l(),cw=a("p"),vjo=o("This class cannot be instantiated directly using "),Cie=a("code"),Tjo=o("__init__()"),Fjo=o(" (throws an error)."),Cjo=l(),tt=a("div"),f(fw.$$.fragment),Mjo=l(),Mie=a("p"),Ejo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),yjo=l(),jd=a("p"),wjo=o(`Note:
Loading a model from its configuration file does `),Eie=a("strong"),Ajo=o("not"),Ljo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yie=a("code"),Bjo=o("from_pretrained()"),xjo=o("to load the model weights."),kjo=l(),wie=a("p"),Rjo=o("Examples:"),Sjo=l(),f(mw.$$.fragment),Pjo=l(),Je=a("div"),f(gw.$$.fragment),$jo=l(),Aie=a("p"),Ijo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),jjo=l(),rn=a("p"),Djo=o("The model class to instantiate is selected based on the "),Lie=a("code"),Njo=o("model_type"),qjo=o(` property of the config object (either
passed as an argument or loaded from `),Bie=a("code"),Ojo=o("pretrained_model_name_or_path"),Gjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xie=a("code"),Xjo=o("pretrained_model_name_or_path"),Vjo=o(":"),zjo=l(),xe=a("ul"),r2=a("li"),kie=a("strong"),Wjo=o("data2vec-audio"),Qjo=o(" \u2014 "),uN=a("a"),Hjo=o("Data2VecAudioForSequenceClassification"),Ujo=o(" (Data2VecAudio model)"),Jjo=l(),t2=a("li"),Rie=a("strong"),Yjo=o("hubert"),Kjo=o(" \u2014 "),bN=a("a"),Zjo=o("HubertForSequenceClassification"),eDo=o(" (Hubert model)"),oDo=l(),a2=a("li"),Sie=a("strong"),rDo=o("sew"),tDo=o(" \u2014 "),vN=a("a"),aDo=o("SEWForSequenceClassification"),nDo=o(" (SEW model)"),sDo=l(),n2=a("li"),Pie=a("strong"),lDo=o("sew-d"),iDo=o(" \u2014 "),TN=a("a"),dDo=o("SEWDForSequenceClassification"),cDo=o(" (SEW-D model)"),fDo=l(),s2=a("li"),$ie=a("strong"),mDo=o("unispeech"),gDo=o(" \u2014 "),FN=a("a"),hDo=o("UniSpeechForSequenceClassification"),pDo=o(" (UniSpeech model)"),_Do=l(),l2=a("li"),Iie=a("strong"),uDo=o("unispeech-sat"),bDo=o(" \u2014 "),CN=a("a"),vDo=o("UniSpeechSatForSequenceClassification"),TDo=o(" (UniSpeechSat model)"),FDo=l(),i2=a("li"),jie=a("strong"),CDo=o("wav2vec2"),MDo=o(" \u2014 "),MN=a("a"),EDo=o("Wav2Vec2ForSequenceClassification"),yDo=o(" (Wav2Vec2 model)"),wDo=l(),d2=a("li"),Die=a("strong"),ADo=o("wavlm"),LDo=o(" \u2014 "),EN=a("a"),BDo=o("WavLMForSequenceClassification"),xDo=o(" (WavLM model)"),kDo=l(),c2=a("p"),RDo=o("The model is set in evaluation mode by default using "),Nie=a("code"),SDo=o("model.eval()"),PDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qie=a("code"),$Do=o("model.train()"),IDo=l(),Oie=a("p"),jDo=o("Examples:"),DDo=l(),f(hw.$$.fragment),Nxe=l(),Dd=a("h2"),f2=a("a"),Gie=a("span"),f(pw.$$.fragment),NDo=l(),Xie=a("span"),qDo=o("AutoModelForAudioFrameClassification"),qxe=l(),cr=a("div"),f(_w.$$.fragment),ODo=l(),Nd=a("p"),GDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Vie=a("code"),XDo=o("from_pretrained()"),VDo=o("class method or the "),zie=a("code"),zDo=o("from_config()"),WDo=o(`class
method.`),QDo=l(),uw=a("p"),HDo=o("This class cannot be instantiated directly using "),Wie=a("code"),UDo=o("__init__()"),JDo=o(" (throws an error)."),YDo=l(),at=a("div"),f(bw.$$.fragment),KDo=l(),Qie=a("p"),ZDo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),eNo=l(),qd=a("p"),oNo=o(`Note:
Loading a model from its configuration file does `),Hie=a("strong"),rNo=o("not"),tNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uie=a("code"),aNo=o("from_pretrained()"),nNo=o("to load the model weights."),sNo=l(),Jie=a("p"),lNo=o("Examples:"),iNo=l(),f(vw.$$.fragment),dNo=l(),Ye=a("div"),f(Tw.$$.fragment),cNo=l(),Yie=a("p"),fNo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),mNo=l(),tn=a("p"),gNo=o("The model class to instantiate is selected based on the "),Kie=a("code"),hNo=o("model_type"),pNo=o(` property of the config object (either
passed as an argument or loaded from `),Zie=a("code"),_No=o("pretrained_model_name_or_path"),uNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ede=a("code"),bNo=o("pretrained_model_name_or_path"),vNo=o(":"),TNo=l(),an=a("ul"),m2=a("li"),ode=a("strong"),FNo=o("data2vec-audio"),CNo=o(" \u2014 "),yN=a("a"),MNo=o("Data2VecAudioForAudioFrameClassification"),ENo=o(" (Data2VecAudio model)"),yNo=l(),g2=a("li"),rde=a("strong"),wNo=o("unispeech-sat"),ANo=o(" \u2014 "),wN=a("a"),LNo=o("UniSpeechSatForAudioFrameClassification"),BNo=o(" (UniSpeechSat model)"),xNo=l(),h2=a("li"),tde=a("strong"),kNo=o("wav2vec2"),RNo=o(" \u2014 "),AN=a("a"),SNo=o("Wav2Vec2ForAudioFrameClassification"),PNo=o(" (Wav2Vec2 model)"),$No=l(),p2=a("li"),ade=a("strong"),INo=o("wavlm"),jNo=o(" \u2014 "),LN=a("a"),DNo=o("WavLMForAudioFrameClassification"),NNo=o(" (WavLM model)"),qNo=l(),_2=a("p"),ONo=o("The model is set in evaluation mode by default using "),nde=a("code"),GNo=o("model.eval()"),XNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sde=a("code"),VNo=o("model.train()"),zNo=l(),lde=a("p"),WNo=o("Examples:"),QNo=l(),f(Fw.$$.fragment),Oxe=l(),Od=a("h2"),u2=a("a"),ide=a("span"),f(Cw.$$.fragment),HNo=l(),dde=a("span"),UNo=o("AutoModelForCTC"),Gxe=l(),fr=a("div"),f(Mw.$$.fragment),JNo=l(),Gd=a("p"),YNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cde=a("code"),KNo=o("from_pretrained()"),ZNo=o("class method or the "),fde=a("code"),eqo=o("from_config()"),oqo=o(`class
method.`),rqo=l(),Ew=a("p"),tqo=o("This class cannot be instantiated directly using "),mde=a("code"),aqo=o("__init__()"),nqo=o(" (throws an error)."),sqo=l(),nt=a("div"),f(yw.$$.fragment),lqo=l(),gde=a("p"),iqo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),dqo=l(),Xd=a("p"),cqo=o(`Note:
Loading a model from its configuration file does `),hde=a("strong"),fqo=o("not"),mqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pde=a("code"),gqo=o("from_pretrained()"),hqo=o("to load the model weights."),pqo=l(),_de=a("p"),_qo=o("Examples:"),uqo=l(),f(ww.$$.fragment),bqo=l(),Ke=a("div"),f(Aw.$$.fragment),vqo=l(),ude=a("p"),Tqo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Fqo=l(),nn=a("p"),Cqo=o("The model class to instantiate is selected based on the "),bde=a("code"),Mqo=o("model_type"),Eqo=o(` property of the config object (either
passed as an argument or loaded from `),vde=a("code"),yqo=o("pretrained_model_name_or_path"),wqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tde=a("code"),Aqo=o("pretrained_model_name_or_path"),Lqo=o(":"),Bqo=l(),ke=a("ul"),b2=a("li"),Fde=a("strong"),xqo=o("data2vec-audio"),kqo=o(" \u2014 "),BN=a("a"),Rqo=o("Data2VecAudioForCTC"),Sqo=o(" (Data2VecAudio model)"),Pqo=l(),v2=a("li"),Cde=a("strong"),$qo=o("hubert"),Iqo=o(" \u2014 "),xN=a("a"),jqo=o("HubertForCTC"),Dqo=o(" (Hubert model)"),Nqo=l(),T2=a("li"),Mde=a("strong"),qqo=o("sew"),Oqo=o(" \u2014 "),kN=a("a"),Gqo=o("SEWForCTC"),Xqo=o(" (SEW model)"),Vqo=l(),F2=a("li"),Ede=a("strong"),zqo=o("sew-d"),Wqo=o(" \u2014 "),RN=a("a"),Qqo=o("SEWDForCTC"),Hqo=o(" (SEW-D model)"),Uqo=l(),C2=a("li"),yde=a("strong"),Jqo=o("unispeech"),Yqo=o(" \u2014 "),SN=a("a"),Kqo=o("UniSpeechForCTC"),Zqo=o(" (UniSpeech model)"),eOo=l(),M2=a("li"),wde=a("strong"),oOo=o("unispeech-sat"),rOo=o(" \u2014 "),PN=a("a"),tOo=o("UniSpeechSatForCTC"),aOo=o(" (UniSpeechSat model)"),nOo=l(),E2=a("li"),Ade=a("strong"),sOo=o("wav2vec2"),lOo=o(" \u2014 "),$N=a("a"),iOo=o("Wav2Vec2ForCTC"),dOo=o(" (Wav2Vec2 model)"),cOo=l(),y2=a("li"),Lde=a("strong"),fOo=o("wavlm"),mOo=o(" \u2014 "),IN=a("a"),gOo=o("WavLMForCTC"),hOo=o(" (WavLM model)"),pOo=l(),w2=a("p"),_Oo=o("The model is set in evaluation mode by default using "),Bde=a("code"),uOo=o("model.eval()"),bOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xde=a("code"),vOo=o("model.train()"),TOo=l(),kde=a("p"),FOo=o("Examples:"),COo=l(),f(Lw.$$.fragment),Xxe=l(),Vd=a("h2"),A2=a("a"),Rde=a("span"),f(Bw.$$.fragment),MOo=l(),Sde=a("span"),EOo=o("AutoModelForSpeechSeq2Seq"),Vxe=l(),mr=a("div"),f(xw.$$.fragment),yOo=l(),zd=a("p"),wOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Pde=a("code"),AOo=o("from_pretrained()"),LOo=o("class method or the "),$de=a("code"),BOo=o("from_config()"),xOo=o(`class
method.`),kOo=l(),kw=a("p"),ROo=o("This class cannot be instantiated directly using "),Ide=a("code"),SOo=o("__init__()"),POo=o(" (throws an error)."),$Oo=l(),st=a("div"),f(Rw.$$.fragment),IOo=l(),jde=a("p"),jOo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),DOo=l(),Wd=a("p"),NOo=o(`Note:
Loading a model from its configuration file does `),Dde=a("strong"),qOo=o("not"),OOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nde=a("code"),GOo=o("from_pretrained()"),XOo=o("to load the model weights."),VOo=l(),qde=a("p"),zOo=o("Examples:"),WOo=l(),f(Sw.$$.fragment),QOo=l(),Ze=a("div"),f(Pw.$$.fragment),HOo=l(),Ode=a("p"),UOo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),JOo=l(),sn=a("p"),YOo=o("The model class to instantiate is selected based on the "),Gde=a("code"),KOo=o("model_type"),ZOo=o(` property of the config object (either
passed as an argument or loaded from `),Xde=a("code"),eGo=o("pretrained_model_name_or_path"),oGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vde=a("code"),rGo=o("pretrained_model_name_or_path"),tGo=o(":"),aGo=l(),$w=a("ul"),L2=a("li"),zde=a("strong"),nGo=o("speech-encoder-decoder"),sGo=o(" \u2014 "),jN=a("a"),lGo=o("SpeechEncoderDecoderModel"),iGo=o(" (Speech Encoder decoder model)"),dGo=l(),B2=a("li"),Wde=a("strong"),cGo=o("speech_to_text"),fGo=o(" \u2014 "),DN=a("a"),mGo=o("Speech2TextForConditionalGeneration"),gGo=o(" (Speech2Text model)"),hGo=l(),x2=a("p"),pGo=o("The model is set in evaluation mode by default using "),Qde=a("code"),_Go=o("model.eval()"),uGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hde=a("code"),bGo=o("model.train()"),vGo=l(),Ude=a("p"),TGo=o("Examples:"),FGo=l(),f(Iw.$$.fragment),zxe=l(),Qd=a("h2"),k2=a("a"),Jde=a("span"),f(jw.$$.fragment),CGo=l(),Yde=a("span"),MGo=o("AutoModelForAudioXVector"),Wxe=l(),gr=a("div"),f(Dw.$$.fragment),EGo=l(),Hd=a("p"),yGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Kde=a("code"),wGo=o("from_pretrained()"),AGo=o("class method or the "),Zde=a("code"),LGo=o("from_config()"),BGo=o(`class
method.`),xGo=l(),Nw=a("p"),kGo=o("This class cannot be instantiated directly using "),ece=a("code"),RGo=o("__init__()"),SGo=o(" (throws an error)."),PGo=l(),lt=a("div"),f(qw.$$.fragment),$Go=l(),oce=a("p"),IGo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),jGo=l(),Ud=a("p"),DGo=o(`Note:
Loading a model from its configuration file does `),rce=a("strong"),NGo=o("not"),qGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tce=a("code"),OGo=o("from_pretrained()"),GGo=o("to load the model weights."),XGo=l(),ace=a("p"),VGo=o("Examples:"),zGo=l(),f(Ow.$$.fragment),WGo=l(),eo=a("div"),f(Gw.$$.fragment),QGo=l(),nce=a("p"),HGo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),UGo=l(),ln=a("p"),JGo=o("The model class to instantiate is selected based on the "),sce=a("code"),YGo=o("model_type"),KGo=o(` property of the config object (either
passed as an argument or loaded from `),lce=a("code"),ZGo=o("pretrained_model_name_or_path"),eXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=a("code"),oXo=o("pretrained_model_name_or_path"),rXo=o(":"),tXo=l(),dn=a("ul"),R2=a("li"),dce=a("strong"),aXo=o("data2vec-audio"),nXo=o(" \u2014 "),NN=a("a"),sXo=o("Data2VecAudioForXVector"),lXo=o(" (Data2VecAudio model)"),iXo=l(),S2=a("li"),cce=a("strong"),dXo=o("unispeech-sat"),cXo=o(" \u2014 "),qN=a("a"),fXo=o("UniSpeechSatForXVector"),mXo=o(" (UniSpeechSat model)"),gXo=l(),P2=a("li"),fce=a("strong"),hXo=o("wav2vec2"),pXo=o(" \u2014 "),ON=a("a"),_Xo=o("Wav2Vec2ForXVector"),uXo=o(" (Wav2Vec2 model)"),bXo=l(),$2=a("li"),mce=a("strong"),vXo=o("wavlm"),TXo=o(" \u2014 "),GN=a("a"),FXo=o("WavLMForXVector"),CXo=o(" (WavLM model)"),MXo=l(),I2=a("p"),EXo=o("The model is set in evaluation mode by default using "),gce=a("code"),yXo=o("model.eval()"),wXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hce=a("code"),AXo=o("model.train()"),LXo=l(),pce=a("p"),BXo=o("Examples:"),xXo=l(),f(Xw.$$.fragment),Qxe=l(),Jd=a("h2"),j2=a("a"),_ce=a("span"),f(Vw.$$.fragment),kXo=l(),uce=a("span"),RXo=o("AutoModelForMaskedImageModeling"),Hxe=l(),hr=a("div"),f(zw.$$.fragment),SXo=l(),Yd=a("p"),PXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),bce=a("code"),$Xo=o("from_pretrained()"),IXo=o("class method or the "),vce=a("code"),jXo=o("from_config()"),DXo=o(`class
method.`),NXo=l(),Ww=a("p"),qXo=o("This class cannot be instantiated directly using "),Tce=a("code"),OXo=o("__init__()"),GXo=o(" (throws an error)."),XXo=l(),it=a("div"),f(Qw.$$.fragment),VXo=l(),Fce=a("p"),zXo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),WXo=l(),Kd=a("p"),QXo=o(`Note:
Loading a model from its configuration file does `),Cce=a("strong"),HXo=o("not"),UXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mce=a("code"),JXo=o("from_pretrained()"),YXo=o("to load the model weights."),KXo=l(),Ece=a("p"),ZXo=o("Examples:"),eVo=l(),f(Hw.$$.fragment),oVo=l(),oo=a("div"),f(Uw.$$.fragment),rVo=l(),yce=a("p"),tVo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),aVo=l(),cn=a("p"),nVo=o("The model class to instantiate is selected based on the "),wce=a("code"),sVo=o("model_type"),lVo=o(` property of the config object (either
passed as an argument or loaded from `),Ace=a("code"),iVo=o("pretrained_model_name_or_path"),dVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lce=a("code"),cVo=o("pretrained_model_name_or_path"),fVo=o(":"),mVo=l(),Zd=a("ul"),D2=a("li"),Bce=a("strong"),gVo=o("deit"),hVo=o(" \u2014 "),XN=a("a"),pVo=o("DeiTForMaskedImageModeling"),_Vo=o(" (DeiT model)"),uVo=l(),N2=a("li"),xce=a("strong"),bVo=o("swin"),vVo=o(" \u2014 "),VN=a("a"),TVo=o("SwinForMaskedImageModeling"),FVo=o(" (Swin model)"),CVo=l(),q2=a("li"),kce=a("strong"),MVo=o("vit"),EVo=o(" \u2014 "),zN=a("a"),yVo=o("ViTForMaskedImageModeling"),wVo=o(" (ViT model)"),AVo=l(),O2=a("p"),LVo=o("The model is set in evaluation mode by default using "),Rce=a("code"),BVo=o("model.eval()"),xVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sce=a("code"),kVo=o("model.train()"),RVo=l(),Pce=a("p"),SVo=o("Examples:"),PVo=l(),f(Jw.$$.fragment),Uxe=l(),ec=a("h2"),G2=a("a"),$ce=a("span"),f(Yw.$$.fragment),$Vo=l(),Ice=a("span"),IVo=o("AutoModelForObjectDetection"),Jxe=l(),pr=a("div"),f(Kw.$$.fragment),jVo=l(),oc=a("p"),DVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jce=a("code"),NVo=o("from_pretrained()"),qVo=o("class method or the "),Dce=a("code"),OVo=o("from_config()"),GVo=o(`class
method.`),XVo=l(),Zw=a("p"),VVo=o("This class cannot be instantiated directly using "),Nce=a("code"),zVo=o("__init__()"),WVo=o(" (throws an error)."),QVo=l(),dt=a("div"),f(e6.$$.fragment),HVo=l(),qce=a("p"),UVo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),JVo=l(),rc=a("p"),YVo=o(`Note:
Loading a model from its configuration file does `),Oce=a("strong"),KVo=o("not"),ZVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gce=a("code"),ezo=o("from_pretrained()"),ozo=o("to load the model weights."),rzo=l(),Xce=a("p"),tzo=o("Examples:"),azo=l(),f(o6.$$.fragment),nzo=l(),ro=a("div"),f(r6.$$.fragment),szo=l(),Vce=a("p"),lzo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),izo=l(),fn=a("p"),dzo=o("The model class to instantiate is selected based on the "),zce=a("code"),czo=o("model_type"),fzo=o(` property of the config object (either
passed as an argument or loaded from `),Wce=a("code"),mzo=o("pretrained_model_name_or_path"),gzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qce=a("code"),hzo=o("pretrained_model_name_or_path"),pzo=o(":"),_zo=l(),Hce=a("ul"),X2=a("li"),Uce=a("strong"),uzo=o("detr"),bzo=o(" \u2014 "),WN=a("a"),vzo=o("DetrForObjectDetection"),Tzo=o(" (DETR model)"),Fzo=l(),V2=a("p"),Czo=o("The model is set in evaluation mode by default using "),Jce=a("code"),Mzo=o("model.eval()"),Ezo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yce=a("code"),yzo=o("model.train()"),wzo=l(),Kce=a("p"),Azo=o("Examples:"),Lzo=l(),f(t6.$$.fragment),Yxe=l(),tc=a("h2"),z2=a("a"),Zce=a("span"),f(a6.$$.fragment),Bzo=l(),efe=a("span"),xzo=o("AutoModelForImageSegmentation"),Kxe=l(),_r=a("div"),f(n6.$$.fragment),kzo=l(),ac=a("p"),Rzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ofe=a("code"),Szo=o("from_pretrained()"),Pzo=o("class method or the "),rfe=a("code"),$zo=o("from_config()"),Izo=o(`class
method.`),jzo=l(),s6=a("p"),Dzo=o("This class cannot be instantiated directly using "),tfe=a("code"),Nzo=o("__init__()"),qzo=o(" (throws an error)."),Ozo=l(),ct=a("div"),f(l6.$$.fragment),Gzo=l(),afe=a("p"),Xzo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Vzo=l(),nc=a("p"),zzo=o(`Note:
Loading a model from its configuration file does `),nfe=a("strong"),Wzo=o("not"),Qzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sfe=a("code"),Hzo=o("from_pretrained()"),Uzo=o("to load the model weights."),Jzo=l(),lfe=a("p"),Yzo=o("Examples:"),Kzo=l(),f(i6.$$.fragment),Zzo=l(),to=a("div"),f(d6.$$.fragment),eWo=l(),ife=a("p"),oWo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),rWo=l(),mn=a("p"),tWo=o("The model class to instantiate is selected based on the "),dfe=a("code"),aWo=o("model_type"),nWo=o(` property of the config object (either
passed as an argument or loaded from `),cfe=a("code"),sWo=o("pretrained_model_name_or_path"),lWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ffe=a("code"),iWo=o("pretrained_model_name_or_path"),dWo=o(":"),cWo=l(),mfe=a("ul"),W2=a("li"),gfe=a("strong"),fWo=o("detr"),mWo=o(" \u2014 "),QN=a("a"),gWo=o("DetrForSegmentation"),hWo=o(" (DETR model)"),pWo=l(),Q2=a("p"),_Wo=o("The model is set in evaluation mode by default using "),hfe=a("code"),uWo=o("model.eval()"),bWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pfe=a("code"),vWo=o("model.train()"),TWo=l(),_fe=a("p"),FWo=o("Examples:"),CWo=l(),f(c6.$$.fragment),Zxe=l(),sc=a("h2"),H2=a("a"),ufe=a("span"),f(f6.$$.fragment),MWo=l(),bfe=a("span"),EWo=o("AutoModelForSemanticSegmentation"),eke=l(),ur=a("div"),f(m6.$$.fragment),yWo=l(),lc=a("p"),wWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),vfe=a("code"),AWo=o("from_pretrained()"),LWo=o("class method or the "),Tfe=a("code"),BWo=o("from_config()"),xWo=o(`class
method.`),kWo=l(),g6=a("p"),RWo=o("This class cannot be instantiated directly using "),Ffe=a("code"),SWo=o("__init__()"),PWo=o(" (throws an error)."),$Wo=l(),ft=a("div"),f(h6.$$.fragment),IWo=l(),Cfe=a("p"),jWo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),DWo=l(),ic=a("p"),NWo=o(`Note:
Loading a model from its configuration file does `),Mfe=a("strong"),qWo=o("not"),OWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Efe=a("code"),GWo=o("from_pretrained()"),XWo=o("to load the model weights."),VWo=l(),yfe=a("p"),zWo=o("Examples:"),WWo=l(),f(p6.$$.fragment),QWo=l(),ao=a("div"),f(_6.$$.fragment),HWo=l(),wfe=a("p"),UWo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),JWo=l(),gn=a("p"),YWo=o("The model class to instantiate is selected based on the "),Afe=a("code"),KWo=o("model_type"),ZWo=o(` property of the config object (either
passed as an argument or loaded from `),Lfe=a("code"),eQo=o("pretrained_model_name_or_path"),oQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bfe=a("code"),rQo=o("pretrained_model_name_or_path"),tQo=o(":"),aQo=l(),u6=a("ul"),U2=a("li"),xfe=a("strong"),nQo=o("beit"),sQo=o(" \u2014 "),HN=a("a"),lQo=o("BeitForSemanticSegmentation"),iQo=o(" (BEiT model)"),dQo=l(),J2=a("li"),kfe=a("strong"),cQo=o("segformer"),fQo=o(" \u2014 "),UN=a("a"),mQo=o("SegformerForSemanticSegmentation"),gQo=o(" (SegFormer model)"),hQo=l(),Y2=a("p"),pQo=o("The model is set in evaluation mode by default using "),Rfe=a("code"),_Qo=o("model.eval()"),uQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sfe=a("code"),bQo=o("model.train()"),vQo=l(),Pfe=a("p"),TQo=o("Examples:"),FQo=l(),f(b6.$$.fragment),oke=l(),dc=a("h2"),K2=a("a"),$fe=a("span"),f(v6.$$.fragment),CQo=l(),Ife=a("span"),MQo=o("AutoModelForInstanceSegmentation"),rke=l(),br=a("div"),f(T6.$$.fragment),EQo=l(),cc=a("p"),yQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),jfe=a("code"),wQo=o("from_pretrained()"),AQo=o("class method or the "),Dfe=a("code"),LQo=o("from_config()"),BQo=o(`class
method.`),xQo=l(),F6=a("p"),kQo=o("This class cannot be instantiated directly using "),Nfe=a("code"),RQo=o("__init__()"),SQo=o(" (throws an error)."),PQo=l(),mt=a("div"),f(C6.$$.fragment),$Qo=l(),qfe=a("p"),IQo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),jQo=l(),fc=a("p"),DQo=o(`Note:
Loading a model from its configuration file does `),Ofe=a("strong"),NQo=o("not"),qQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gfe=a("code"),OQo=o("from_pretrained()"),GQo=o("to load the model weights."),XQo=l(),Xfe=a("p"),VQo=o("Examples:"),zQo=l(),f(M6.$$.fragment),WQo=l(),no=a("div"),f(E6.$$.fragment),QQo=l(),Vfe=a("p"),HQo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),UQo=l(),hn=a("p"),JQo=o("The model class to instantiate is selected based on the "),zfe=a("code"),YQo=o("model_type"),KQo=o(` property of the config object (either
passed as an argument or loaded from `),Wfe=a("code"),ZQo=o("pretrained_model_name_or_path"),eHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qfe=a("code"),oHo=o("pretrained_model_name_or_path"),rHo=o(":"),tHo=l(),Hfe=a("ul"),Z2=a("li"),Ufe=a("strong"),aHo=o("maskformer"),nHo=o(" \u2014 "),JN=a("a"),sHo=o("MaskFormerForInstanceSegmentation"),lHo=o(" (MaskFormer model)"),iHo=l(),ev=a("p"),dHo=o("The model is set in evaluation mode by default using "),Jfe=a("code"),cHo=o("model.eval()"),fHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yfe=a("code"),mHo=o("model.train()"),gHo=l(),Kfe=a("p"),hHo=o("Examples:"),pHo=l(),f(y6.$$.fragment),tke=l(),mc=a("h2"),ov=a("a"),Zfe=a("span"),f(w6.$$.fragment),_Ho=l(),eme=a("span"),uHo=o("TFAutoModel"),ake=l(),vr=a("div"),f(A6.$$.fragment),bHo=l(),gc=a("p"),vHo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ome=a("code"),THo=o("from_pretrained()"),FHo=o("class method or the "),rme=a("code"),CHo=o("from_config()"),MHo=o(`class
method.`),EHo=l(),L6=a("p"),yHo=o("This class cannot be instantiated directly using "),tme=a("code"),wHo=o("__init__()"),AHo=o(" (throws an error)."),LHo=l(),gt=a("div"),f(B6.$$.fragment),BHo=l(),ame=a("p"),xHo=o("Instantiates one of the base model classes of the library from a configuration."),kHo=l(),hc=a("p"),RHo=o(`Note:
Loading a model from its configuration file does `),nme=a("strong"),SHo=o("not"),PHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sme=a("code"),$Ho=o("from_pretrained()"),IHo=o("to load the model weights."),jHo=l(),lme=a("p"),DHo=o("Examples:"),NHo=l(),f(x6.$$.fragment),qHo=l(),ho=a("div"),f(k6.$$.fragment),OHo=l(),ime=a("p"),GHo=o("Instantiate one of the base model classes of the library from a pretrained model."),XHo=l(),pn=a("p"),VHo=o("The model class to instantiate is selected based on the "),dme=a("code"),zHo=o("model_type"),WHo=o(` property of the config object (either
passed as an argument or loaded from `),cme=a("code"),QHo=o("pretrained_model_name_or_path"),HHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fme=a("code"),UHo=o("pretrained_model_name_or_path"),JHo=o(":"),YHo=l(),B=a("ul"),rv=a("li"),mme=a("strong"),KHo=o("albert"),ZHo=o(" \u2014 "),YN=a("a"),eUo=o("TFAlbertModel"),oUo=o(" (ALBERT model)"),rUo=l(),tv=a("li"),gme=a("strong"),tUo=o("bart"),aUo=o(" \u2014 "),KN=a("a"),nUo=o("TFBartModel"),sUo=o(" (BART model)"),lUo=l(),av=a("li"),hme=a("strong"),iUo=o("bert"),dUo=o(" \u2014 "),ZN=a("a"),cUo=o("TFBertModel"),fUo=o(" (BERT model)"),mUo=l(),nv=a("li"),pme=a("strong"),gUo=o("blenderbot"),hUo=o(" \u2014 "),eq=a("a"),pUo=o("TFBlenderbotModel"),_Uo=o(" (Blenderbot model)"),uUo=l(),sv=a("li"),_me=a("strong"),bUo=o("blenderbot-small"),vUo=o(" \u2014 "),oq=a("a"),TUo=o("TFBlenderbotSmallModel"),FUo=o(" (BlenderbotSmall model)"),CUo=l(),lv=a("li"),ume=a("strong"),MUo=o("camembert"),EUo=o(" \u2014 "),rq=a("a"),yUo=o("TFCamembertModel"),wUo=o(" (CamemBERT model)"),AUo=l(),iv=a("li"),bme=a("strong"),LUo=o("clip"),BUo=o(" \u2014 "),tq=a("a"),xUo=o("TFCLIPModel"),kUo=o(" (CLIP model)"),RUo=l(),dv=a("li"),vme=a("strong"),SUo=o("convbert"),PUo=o(" \u2014 "),aq=a("a"),$Uo=o("TFConvBertModel"),IUo=o(" (ConvBERT model)"),jUo=l(),cv=a("li"),Tme=a("strong"),DUo=o("convnext"),NUo=o(" \u2014 "),nq=a("a"),qUo=o("TFConvNextModel"),OUo=o(" (ConvNext model)"),GUo=l(),fv=a("li"),Fme=a("strong"),XUo=o("ctrl"),VUo=o(" \u2014 "),sq=a("a"),zUo=o("TFCTRLModel"),WUo=o(" (CTRL model)"),QUo=l(),mv=a("li"),Cme=a("strong"),HUo=o("deberta"),UUo=o(" \u2014 "),lq=a("a"),JUo=o("TFDebertaModel"),YUo=o(" (DeBERTa model)"),KUo=l(),gv=a("li"),Mme=a("strong"),ZUo=o("deberta-v2"),eJo=o(" \u2014 "),iq=a("a"),oJo=o("TFDebertaV2Model"),rJo=o(" (DeBERTa-v2 model)"),tJo=l(),hv=a("li"),Eme=a("strong"),aJo=o("distilbert"),nJo=o(" \u2014 "),dq=a("a"),sJo=o("TFDistilBertModel"),lJo=o(" (DistilBERT model)"),iJo=l(),pv=a("li"),yme=a("strong"),dJo=o("dpr"),cJo=o(" \u2014 "),cq=a("a"),fJo=o("TFDPRQuestionEncoder"),mJo=o(" (DPR model)"),gJo=l(),_v=a("li"),wme=a("strong"),hJo=o("electra"),pJo=o(" \u2014 "),fq=a("a"),_Jo=o("TFElectraModel"),uJo=o(" (ELECTRA model)"),bJo=l(),uv=a("li"),Ame=a("strong"),vJo=o("flaubert"),TJo=o(" \u2014 "),mq=a("a"),FJo=o("TFFlaubertModel"),CJo=o(" (FlauBERT model)"),MJo=l(),Os=a("li"),Lme=a("strong"),EJo=o("funnel"),yJo=o(" \u2014 "),gq=a("a"),wJo=o("TFFunnelModel"),AJo=o(" or "),hq=a("a"),LJo=o("TFFunnelBaseModel"),BJo=o(" (Funnel Transformer model)"),xJo=l(),bv=a("li"),Bme=a("strong"),kJo=o("gpt2"),RJo=o(" \u2014 "),pq=a("a"),SJo=o("TFGPT2Model"),PJo=o(" (OpenAI GPT-2 model)"),$Jo=l(),vv=a("li"),xme=a("strong"),IJo=o("hubert"),jJo=o(" \u2014 "),_q=a("a"),DJo=o("TFHubertModel"),NJo=o(" (Hubert model)"),qJo=l(),Tv=a("li"),kme=a("strong"),OJo=o("layoutlm"),GJo=o(" \u2014 "),uq=a("a"),XJo=o("TFLayoutLMModel"),VJo=o(" (LayoutLM model)"),zJo=l(),Fv=a("li"),Rme=a("strong"),WJo=o("led"),QJo=o(" \u2014 "),bq=a("a"),HJo=o("TFLEDModel"),UJo=o(" (LED model)"),JJo=l(),Cv=a("li"),Sme=a("strong"),YJo=o("longformer"),KJo=o(" \u2014 "),vq=a("a"),ZJo=o("TFLongformerModel"),eYo=o(" (Longformer model)"),oYo=l(),Mv=a("li"),Pme=a("strong"),rYo=o("lxmert"),tYo=o(" \u2014 "),Tq=a("a"),aYo=o("TFLxmertModel"),nYo=o(" (LXMERT model)"),sYo=l(),Ev=a("li"),$me=a("strong"),lYo=o("marian"),iYo=o(" \u2014 "),Fq=a("a"),dYo=o("TFMarianModel"),cYo=o(" (Marian model)"),fYo=l(),yv=a("li"),Ime=a("strong"),mYo=o("mbart"),gYo=o(" \u2014 "),Cq=a("a"),hYo=o("TFMBartModel"),pYo=o(" (mBART model)"),_Yo=l(),wv=a("li"),jme=a("strong"),uYo=o("mobilebert"),bYo=o(" \u2014 "),Mq=a("a"),vYo=o("TFMobileBertModel"),TYo=o(" (MobileBERT model)"),FYo=l(),Av=a("li"),Dme=a("strong"),CYo=o("mpnet"),MYo=o(" \u2014 "),Eq=a("a"),EYo=o("TFMPNetModel"),yYo=o(" (MPNet model)"),wYo=l(),Lv=a("li"),Nme=a("strong"),AYo=o("mt5"),LYo=o(" \u2014 "),yq=a("a"),BYo=o("TFMT5Model"),xYo=o(" (mT5 model)"),kYo=l(),Bv=a("li"),qme=a("strong"),RYo=o("openai-gpt"),SYo=o(" \u2014 "),wq=a("a"),PYo=o("TFOpenAIGPTModel"),$Yo=o(" (OpenAI GPT model)"),IYo=l(),xv=a("li"),Ome=a("strong"),jYo=o("pegasus"),DYo=o(" \u2014 "),Aq=a("a"),NYo=o("TFPegasusModel"),qYo=o(" (Pegasus model)"),OYo=l(),kv=a("li"),Gme=a("strong"),GYo=o("rembert"),XYo=o(" \u2014 "),Lq=a("a"),VYo=o("TFRemBertModel"),zYo=o(" (RemBERT model)"),WYo=l(),Rv=a("li"),Xme=a("strong"),QYo=o("roberta"),HYo=o(" \u2014 "),Bq=a("a"),UYo=o("TFRobertaModel"),JYo=o(" (RoBERTa model)"),YYo=l(),Sv=a("li"),Vme=a("strong"),KYo=o("roformer"),ZYo=o(" \u2014 "),xq=a("a"),eKo=o("TFRoFormerModel"),oKo=o(" (RoFormer model)"),rKo=l(),Pv=a("li"),zme=a("strong"),tKo=o("speech_to_text"),aKo=o(" \u2014 "),kq=a("a"),nKo=o("TFSpeech2TextModel"),sKo=o(" (Speech2Text model)"),lKo=l(),$v=a("li"),Wme=a("strong"),iKo=o("t5"),dKo=o(" \u2014 "),Rq=a("a"),cKo=o("TFT5Model"),fKo=o(" (T5 model)"),mKo=l(),Iv=a("li"),Qme=a("strong"),gKo=o("tapas"),hKo=o(" \u2014 "),Sq=a("a"),pKo=o("TFTapasModel"),_Ko=o(" (TAPAS model)"),uKo=l(),jv=a("li"),Hme=a("strong"),bKo=o("transfo-xl"),vKo=o(" \u2014 "),Pq=a("a"),TKo=o("TFTransfoXLModel"),FKo=o(" (Transformer-XL model)"),CKo=l(),Dv=a("li"),Ume=a("strong"),MKo=o("vit"),EKo=o(" \u2014 "),$q=a("a"),yKo=o("TFViTModel"),wKo=o(" (ViT model)"),AKo=l(),Nv=a("li"),Jme=a("strong"),LKo=o("wav2vec2"),BKo=o(" \u2014 "),Iq=a("a"),xKo=o("TFWav2Vec2Model"),kKo=o(" (Wav2Vec2 model)"),RKo=l(),qv=a("li"),Yme=a("strong"),SKo=o("xlm"),PKo=o(" \u2014 "),jq=a("a"),$Ko=o("TFXLMModel"),IKo=o(" (XLM model)"),jKo=l(),Ov=a("li"),Kme=a("strong"),DKo=o("xlm-roberta"),NKo=o(" \u2014 "),Dq=a("a"),qKo=o("TFXLMRobertaModel"),OKo=o(" (XLM-RoBERTa model)"),GKo=l(),Gv=a("li"),Zme=a("strong"),XKo=o("xlnet"),VKo=o(" \u2014 "),Nq=a("a"),zKo=o("TFXLNetModel"),WKo=o(" (XLNet model)"),QKo=l(),ege=a("p"),HKo=o("Examples:"),UKo=l(),f(R6.$$.fragment),nke=l(),pc=a("h2"),Xv=a("a"),oge=a("span"),f(S6.$$.fragment),JKo=l(),rge=a("span"),YKo=o("TFAutoModelForPreTraining"),ske=l(),Tr=a("div"),f(P6.$$.fragment),KKo=l(),_c=a("p"),ZKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tge=a("code"),eZo=o("from_pretrained()"),oZo=o("class method or the "),age=a("code"),rZo=o("from_config()"),tZo=o(`class
method.`),aZo=l(),$6=a("p"),nZo=o("This class cannot be instantiated directly using "),nge=a("code"),sZo=o("__init__()"),lZo=o(" (throws an error)."),iZo=l(),ht=a("div"),f(I6.$$.fragment),dZo=l(),sge=a("p"),cZo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fZo=l(),uc=a("p"),mZo=o(`Note:
Loading a model from its configuration file does `),lge=a("strong"),gZo=o("not"),hZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ige=a("code"),pZo=o("from_pretrained()"),_Zo=o("to load the model weights."),uZo=l(),dge=a("p"),bZo=o("Examples:"),vZo=l(),f(j6.$$.fragment),TZo=l(),po=a("div"),f(D6.$$.fragment),FZo=l(),cge=a("p"),CZo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),MZo=l(),_n=a("p"),EZo=o("The model class to instantiate is selected based on the "),fge=a("code"),yZo=o("model_type"),wZo=o(` property of the config object (either
passed as an argument or loaded from `),mge=a("code"),AZo=o("pretrained_model_name_or_path"),LZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gge=a("code"),BZo=o("pretrained_model_name_or_path"),xZo=o(":"),kZo=l(),H=a("ul"),Vv=a("li"),hge=a("strong"),RZo=o("albert"),SZo=o(" \u2014 "),qq=a("a"),PZo=o("TFAlbertForPreTraining"),$Zo=o(" (ALBERT model)"),IZo=l(),zv=a("li"),pge=a("strong"),jZo=o("bart"),DZo=o(" \u2014 "),Oq=a("a"),NZo=o("TFBartForConditionalGeneration"),qZo=o(" (BART model)"),OZo=l(),Wv=a("li"),_ge=a("strong"),GZo=o("bert"),XZo=o(" \u2014 "),Gq=a("a"),VZo=o("TFBertForPreTraining"),zZo=o(" (BERT model)"),WZo=l(),Qv=a("li"),uge=a("strong"),QZo=o("camembert"),HZo=o(" \u2014 "),Xq=a("a"),UZo=o("TFCamembertForMaskedLM"),JZo=o(" (CamemBERT model)"),YZo=l(),Hv=a("li"),bge=a("strong"),KZo=o("ctrl"),ZZo=o(" \u2014 "),Vq=a("a"),eer=o("TFCTRLLMHeadModel"),oer=o(" (CTRL model)"),rer=l(),Uv=a("li"),vge=a("strong"),ter=o("distilbert"),aer=o(" \u2014 "),zq=a("a"),ner=o("TFDistilBertForMaskedLM"),ser=o(" (DistilBERT model)"),ler=l(),Jv=a("li"),Tge=a("strong"),ier=o("electra"),der=o(" \u2014 "),Wq=a("a"),cer=o("TFElectraForPreTraining"),fer=o(" (ELECTRA model)"),mer=l(),Yv=a("li"),Fge=a("strong"),ger=o("flaubert"),her=o(" \u2014 "),Qq=a("a"),per=o("TFFlaubertWithLMHeadModel"),_er=o(" (FlauBERT model)"),uer=l(),Kv=a("li"),Cge=a("strong"),ber=o("funnel"),ver=o(" \u2014 "),Hq=a("a"),Ter=o("TFFunnelForPreTraining"),Fer=o(" (Funnel Transformer model)"),Cer=l(),Zv=a("li"),Mge=a("strong"),Mer=o("gpt2"),Eer=o(" \u2014 "),Uq=a("a"),yer=o("TFGPT2LMHeadModel"),wer=o(" (OpenAI GPT-2 model)"),Aer=l(),eT=a("li"),Ege=a("strong"),Ler=o("layoutlm"),Ber=o(" \u2014 "),Jq=a("a"),xer=o("TFLayoutLMForMaskedLM"),ker=o(" (LayoutLM model)"),Rer=l(),oT=a("li"),yge=a("strong"),Ser=o("lxmert"),Per=o(" \u2014 "),Yq=a("a"),$er=o("TFLxmertForPreTraining"),Ier=o(" (LXMERT model)"),jer=l(),rT=a("li"),wge=a("strong"),Der=o("mobilebert"),Ner=o(" \u2014 "),Kq=a("a"),qer=o("TFMobileBertForPreTraining"),Oer=o(" (MobileBERT model)"),Ger=l(),tT=a("li"),Age=a("strong"),Xer=o("mpnet"),Ver=o(" \u2014 "),Zq=a("a"),zer=o("TFMPNetForMaskedLM"),Wer=o(" (MPNet model)"),Qer=l(),aT=a("li"),Lge=a("strong"),Her=o("openai-gpt"),Uer=o(" \u2014 "),eO=a("a"),Jer=o("TFOpenAIGPTLMHeadModel"),Yer=o(" (OpenAI GPT model)"),Ker=l(),nT=a("li"),Bge=a("strong"),Zer=o("roberta"),eor=o(" \u2014 "),oO=a("a"),oor=o("TFRobertaForMaskedLM"),ror=o(" (RoBERTa model)"),tor=l(),sT=a("li"),xge=a("strong"),aor=o("t5"),nor=o(" \u2014 "),rO=a("a"),sor=o("TFT5ForConditionalGeneration"),lor=o(" (T5 model)"),ior=l(),lT=a("li"),kge=a("strong"),dor=o("tapas"),cor=o(" \u2014 "),tO=a("a"),mor=o("TFTapasForMaskedLM"),gor=o(" (TAPAS model)"),hor=l(),iT=a("li"),Rge=a("strong"),por=o("transfo-xl"),_or=o(" \u2014 "),aO=a("a"),uor=o("TFTransfoXLLMHeadModel"),bor=o(" (Transformer-XL model)"),vor=l(),dT=a("li"),Sge=a("strong"),Tor=o("xlm"),For=o(" \u2014 "),nO=a("a"),Cor=o("TFXLMWithLMHeadModel"),Mor=o(" (XLM model)"),Eor=l(),cT=a("li"),Pge=a("strong"),yor=o("xlm-roberta"),wor=o(" \u2014 "),sO=a("a"),Aor=o("TFXLMRobertaForMaskedLM"),Lor=o(" (XLM-RoBERTa model)"),Bor=l(),fT=a("li"),$ge=a("strong"),xor=o("xlnet"),kor=o(" \u2014 "),lO=a("a"),Ror=o("TFXLNetLMHeadModel"),Sor=o(" (XLNet model)"),Por=l(),Ige=a("p"),$or=o("Examples:"),Ior=l(),f(N6.$$.fragment),lke=l(),bc=a("h2"),mT=a("a"),jge=a("span"),f(q6.$$.fragment),jor=l(),Dge=a("span"),Dor=o("TFAutoModelForCausalLM"),ike=l(),Fr=a("div"),f(O6.$$.fragment),Nor=l(),vc=a("p"),qor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Nge=a("code"),Oor=o("from_pretrained()"),Gor=o("class method or the "),qge=a("code"),Xor=o("from_config()"),Vor=o(`class
method.`),zor=l(),G6=a("p"),Wor=o("This class cannot be instantiated directly using "),Oge=a("code"),Qor=o("__init__()"),Hor=o(" (throws an error)."),Uor=l(),pt=a("div"),f(X6.$$.fragment),Jor=l(),Gge=a("p"),Yor=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Kor=l(),Tc=a("p"),Zor=o(`Note:
Loading a model from its configuration file does `),Xge=a("strong"),err=o("not"),orr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vge=a("code"),rrr=o("from_pretrained()"),trr=o("to load the model weights."),arr=l(),zge=a("p"),nrr=o("Examples:"),srr=l(),f(V6.$$.fragment),lrr=l(),_o=a("div"),f(z6.$$.fragment),irr=l(),Wge=a("p"),drr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),crr=l(),un=a("p"),frr=o("The model class to instantiate is selected based on the "),Qge=a("code"),mrr=o("model_type"),grr=o(` property of the config object (either
passed as an argument or loaded from `),Hge=a("code"),hrr=o("pretrained_model_name_or_path"),prr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=a("code"),_rr=o("pretrained_model_name_or_path"),urr=o(":"),brr=l(),pe=a("ul"),gT=a("li"),Jge=a("strong"),vrr=o("bert"),Trr=o(" \u2014 "),iO=a("a"),Frr=o("TFBertLMHeadModel"),Crr=o(" (BERT model)"),Mrr=l(),hT=a("li"),Yge=a("strong"),Err=o("ctrl"),yrr=o(" \u2014 "),dO=a("a"),wrr=o("TFCTRLLMHeadModel"),Arr=o(" (CTRL model)"),Lrr=l(),pT=a("li"),Kge=a("strong"),Brr=o("gpt2"),xrr=o(" \u2014 "),cO=a("a"),krr=o("TFGPT2LMHeadModel"),Rrr=o(" (OpenAI GPT-2 model)"),Srr=l(),_T=a("li"),Zge=a("strong"),Prr=o("openai-gpt"),$rr=o(" \u2014 "),fO=a("a"),Irr=o("TFOpenAIGPTLMHeadModel"),jrr=o(" (OpenAI GPT model)"),Drr=l(),uT=a("li"),ehe=a("strong"),Nrr=o("rembert"),qrr=o(" \u2014 "),mO=a("a"),Orr=o("TFRemBertForCausalLM"),Grr=o(" (RemBERT model)"),Xrr=l(),bT=a("li"),ohe=a("strong"),Vrr=o("roberta"),zrr=o(" \u2014 "),gO=a("a"),Wrr=o("TFRobertaForCausalLM"),Qrr=o(" (RoBERTa model)"),Hrr=l(),vT=a("li"),rhe=a("strong"),Urr=o("roformer"),Jrr=o(" \u2014 "),hO=a("a"),Yrr=o("TFRoFormerForCausalLM"),Krr=o(" (RoFormer model)"),Zrr=l(),TT=a("li"),the=a("strong"),etr=o("transfo-xl"),otr=o(" \u2014 "),pO=a("a"),rtr=o("TFTransfoXLLMHeadModel"),ttr=o(" (Transformer-XL model)"),atr=l(),FT=a("li"),ahe=a("strong"),ntr=o("xlm"),str=o(" \u2014 "),_O=a("a"),ltr=o("TFXLMWithLMHeadModel"),itr=o(" (XLM model)"),dtr=l(),CT=a("li"),nhe=a("strong"),ctr=o("xlnet"),ftr=o(" \u2014 "),uO=a("a"),mtr=o("TFXLNetLMHeadModel"),gtr=o(" (XLNet model)"),htr=l(),she=a("p"),ptr=o("Examples:"),_tr=l(),f(W6.$$.fragment),dke=l(),Fc=a("h2"),MT=a("a"),lhe=a("span"),f(Q6.$$.fragment),utr=l(),ihe=a("span"),btr=o("TFAutoModelForImageClassification"),cke=l(),Cr=a("div"),f(H6.$$.fragment),vtr=l(),Cc=a("p"),Ttr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dhe=a("code"),Ftr=o("from_pretrained()"),Ctr=o("class method or the "),che=a("code"),Mtr=o("from_config()"),Etr=o(`class
method.`),ytr=l(),U6=a("p"),wtr=o("This class cannot be instantiated directly using "),fhe=a("code"),Atr=o("__init__()"),Ltr=o(" (throws an error)."),Btr=l(),_t=a("div"),f(J6.$$.fragment),xtr=l(),mhe=a("p"),ktr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Rtr=l(),Mc=a("p"),Str=o(`Note:
Loading a model from its configuration file does `),ghe=a("strong"),Ptr=o("not"),$tr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hhe=a("code"),Itr=o("from_pretrained()"),jtr=o("to load the model weights."),Dtr=l(),phe=a("p"),Ntr=o("Examples:"),qtr=l(),f(Y6.$$.fragment),Otr=l(),uo=a("div"),f(K6.$$.fragment),Gtr=l(),_he=a("p"),Xtr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Vtr=l(),bn=a("p"),ztr=o("The model class to instantiate is selected based on the "),uhe=a("code"),Wtr=o("model_type"),Qtr=o(` property of the config object (either
passed as an argument or loaded from `),bhe=a("code"),Htr=o("pretrained_model_name_or_path"),Utr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vhe=a("code"),Jtr=o("pretrained_model_name_or_path"),Ytr=o(":"),Ktr=l(),Z6=a("ul"),ET=a("li"),The=a("strong"),Ztr=o("convnext"),ear=o(" \u2014 "),bO=a("a"),oar=o("TFConvNextForImageClassification"),rar=o(" (ConvNext model)"),tar=l(),yT=a("li"),Fhe=a("strong"),aar=o("vit"),nar=o(" \u2014 "),vO=a("a"),sar=o("TFViTForImageClassification"),lar=o(" (ViT model)"),iar=l(),Che=a("p"),dar=o("Examples:"),car=l(),f(eA.$$.fragment),fke=l(),Ec=a("h2"),wT=a("a"),Mhe=a("span"),f(oA.$$.fragment),far=l(),Ehe=a("span"),mar=o("TFAutoModelForMaskedLM"),mke=l(),Mr=a("div"),f(rA.$$.fragment),gar=l(),yc=a("p"),har=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yhe=a("code"),par=o("from_pretrained()"),_ar=o("class method or the "),whe=a("code"),uar=o("from_config()"),bar=o(`class
method.`),Tar=l(),tA=a("p"),Far=o("This class cannot be instantiated directly using "),Ahe=a("code"),Car=o("__init__()"),Mar=o(" (throws an error)."),Ear=l(),ut=a("div"),f(aA.$$.fragment),yar=l(),Lhe=a("p"),war=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Aar=l(),wc=a("p"),Lar=o(`Note:
Loading a model from its configuration file does `),Bhe=a("strong"),Bar=o("not"),xar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xhe=a("code"),kar=o("from_pretrained()"),Rar=o("to load the model weights."),Sar=l(),khe=a("p"),Par=o("Examples:"),$ar=l(),f(nA.$$.fragment),Iar=l(),bo=a("div"),f(sA.$$.fragment),jar=l(),Rhe=a("p"),Dar=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Nar=l(),vn=a("p"),qar=o("The model class to instantiate is selected based on the "),She=a("code"),Oar=o("model_type"),Gar=o(` property of the config object (either
passed as an argument or loaded from `),Phe=a("code"),Xar=o("pretrained_model_name_or_path"),Var=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=a("code"),zar=o("pretrained_model_name_or_path"),War=o(":"),Qar=l(),Y=a("ul"),AT=a("li"),Ihe=a("strong"),Har=o("albert"),Uar=o(" \u2014 "),TO=a("a"),Jar=o("TFAlbertForMaskedLM"),Yar=o(" (ALBERT model)"),Kar=l(),LT=a("li"),jhe=a("strong"),Zar=o("bert"),enr=o(" \u2014 "),FO=a("a"),onr=o("TFBertForMaskedLM"),rnr=o(" (BERT model)"),tnr=l(),BT=a("li"),Dhe=a("strong"),anr=o("camembert"),nnr=o(" \u2014 "),CO=a("a"),snr=o("TFCamembertForMaskedLM"),lnr=o(" (CamemBERT model)"),inr=l(),xT=a("li"),Nhe=a("strong"),dnr=o("convbert"),cnr=o(" \u2014 "),MO=a("a"),fnr=o("TFConvBertForMaskedLM"),mnr=o(" (ConvBERT model)"),gnr=l(),kT=a("li"),qhe=a("strong"),hnr=o("deberta"),pnr=o(" \u2014 "),EO=a("a"),_nr=o("TFDebertaForMaskedLM"),unr=o(" (DeBERTa model)"),bnr=l(),RT=a("li"),Ohe=a("strong"),vnr=o("deberta-v2"),Tnr=o(" \u2014 "),yO=a("a"),Fnr=o("TFDebertaV2ForMaskedLM"),Cnr=o(" (DeBERTa-v2 model)"),Mnr=l(),ST=a("li"),Ghe=a("strong"),Enr=o("distilbert"),ynr=o(" \u2014 "),wO=a("a"),wnr=o("TFDistilBertForMaskedLM"),Anr=o(" (DistilBERT model)"),Lnr=l(),PT=a("li"),Xhe=a("strong"),Bnr=o("electra"),xnr=o(" \u2014 "),AO=a("a"),knr=o("TFElectraForMaskedLM"),Rnr=o(" (ELECTRA model)"),Snr=l(),$T=a("li"),Vhe=a("strong"),Pnr=o("flaubert"),$nr=o(" \u2014 "),LO=a("a"),Inr=o("TFFlaubertWithLMHeadModel"),jnr=o(" (FlauBERT model)"),Dnr=l(),IT=a("li"),zhe=a("strong"),Nnr=o("funnel"),qnr=o(" \u2014 "),BO=a("a"),Onr=o("TFFunnelForMaskedLM"),Gnr=o(" (Funnel Transformer model)"),Xnr=l(),jT=a("li"),Whe=a("strong"),Vnr=o("layoutlm"),znr=o(" \u2014 "),xO=a("a"),Wnr=o("TFLayoutLMForMaskedLM"),Qnr=o(" (LayoutLM model)"),Hnr=l(),DT=a("li"),Qhe=a("strong"),Unr=o("longformer"),Jnr=o(" \u2014 "),kO=a("a"),Ynr=o("TFLongformerForMaskedLM"),Knr=o(" (Longformer model)"),Znr=l(),NT=a("li"),Hhe=a("strong"),esr=o("mobilebert"),osr=o(" \u2014 "),RO=a("a"),rsr=o("TFMobileBertForMaskedLM"),tsr=o(" (MobileBERT model)"),asr=l(),qT=a("li"),Uhe=a("strong"),nsr=o("mpnet"),ssr=o(" \u2014 "),SO=a("a"),lsr=o("TFMPNetForMaskedLM"),isr=o(" (MPNet model)"),dsr=l(),OT=a("li"),Jhe=a("strong"),csr=o("rembert"),fsr=o(" \u2014 "),PO=a("a"),msr=o("TFRemBertForMaskedLM"),gsr=o(" (RemBERT model)"),hsr=l(),GT=a("li"),Yhe=a("strong"),psr=o("roberta"),_sr=o(" \u2014 "),$O=a("a"),usr=o("TFRobertaForMaskedLM"),bsr=o(" (RoBERTa model)"),vsr=l(),XT=a("li"),Khe=a("strong"),Tsr=o("roformer"),Fsr=o(" \u2014 "),IO=a("a"),Csr=o("TFRoFormerForMaskedLM"),Msr=o(" (RoFormer model)"),Esr=l(),VT=a("li"),Zhe=a("strong"),ysr=o("tapas"),wsr=o(" \u2014 "),jO=a("a"),Asr=o("TFTapasForMaskedLM"),Lsr=o(" (TAPAS model)"),Bsr=l(),zT=a("li"),epe=a("strong"),xsr=o("xlm"),ksr=o(" \u2014 "),DO=a("a"),Rsr=o("TFXLMWithLMHeadModel"),Ssr=o(" (XLM model)"),Psr=l(),WT=a("li"),ope=a("strong"),$sr=o("xlm-roberta"),Isr=o(" \u2014 "),NO=a("a"),jsr=o("TFXLMRobertaForMaskedLM"),Dsr=o(" (XLM-RoBERTa model)"),Nsr=l(),rpe=a("p"),qsr=o("Examples:"),Osr=l(),f(lA.$$.fragment),gke=l(),Ac=a("h2"),QT=a("a"),tpe=a("span"),f(iA.$$.fragment),Gsr=l(),ape=a("span"),Xsr=o("TFAutoModelForSeq2SeqLM"),hke=l(),Er=a("div"),f(dA.$$.fragment),Vsr=l(),Lc=a("p"),zsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),npe=a("code"),Wsr=o("from_pretrained()"),Qsr=o("class method or the "),spe=a("code"),Hsr=o("from_config()"),Usr=o(`class
method.`),Jsr=l(),cA=a("p"),Ysr=o("This class cannot be instantiated directly using "),lpe=a("code"),Ksr=o("__init__()"),Zsr=o(" (throws an error)."),elr=l(),bt=a("div"),f(fA.$$.fragment),olr=l(),ipe=a("p"),rlr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tlr=l(),Bc=a("p"),alr=o(`Note:
Loading a model from its configuration file does `),dpe=a("strong"),nlr=o("not"),slr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cpe=a("code"),llr=o("from_pretrained()"),ilr=o("to load the model weights."),dlr=l(),fpe=a("p"),clr=o("Examples:"),flr=l(),f(mA.$$.fragment),mlr=l(),vo=a("div"),f(gA.$$.fragment),glr=l(),mpe=a("p"),hlr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),plr=l(),Tn=a("p"),_lr=o("The model class to instantiate is selected based on the "),gpe=a("code"),ulr=o("model_type"),blr=o(` property of the config object (either
passed as an argument or loaded from `),hpe=a("code"),vlr=o("pretrained_model_name_or_path"),Tlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ppe=a("code"),Flr=o("pretrained_model_name_or_path"),Clr=o(":"),Mlr=l(),_e=a("ul"),HT=a("li"),_pe=a("strong"),Elr=o("bart"),ylr=o(" \u2014 "),qO=a("a"),wlr=o("TFBartForConditionalGeneration"),Alr=o(" (BART model)"),Llr=l(),UT=a("li"),upe=a("strong"),Blr=o("blenderbot"),xlr=o(" \u2014 "),OO=a("a"),klr=o("TFBlenderbotForConditionalGeneration"),Rlr=o(" (Blenderbot model)"),Slr=l(),JT=a("li"),bpe=a("strong"),Plr=o("blenderbot-small"),$lr=o(" \u2014 "),GO=a("a"),Ilr=o("TFBlenderbotSmallForConditionalGeneration"),jlr=o(" (BlenderbotSmall model)"),Dlr=l(),YT=a("li"),vpe=a("strong"),Nlr=o("encoder-decoder"),qlr=o(" \u2014 "),XO=a("a"),Olr=o("TFEncoderDecoderModel"),Glr=o(" (Encoder decoder model)"),Xlr=l(),KT=a("li"),Tpe=a("strong"),Vlr=o("led"),zlr=o(" \u2014 "),VO=a("a"),Wlr=o("TFLEDForConditionalGeneration"),Qlr=o(" (LED model)"),Hlr=l(),ZT=a("li"),Fpe=a("strong"),Ulr=o("marian"),Jlr=o(" \u2014 "),zO=a("a"),Ylr=o("TFMarianMTModel"),Klr=o(" (Marian model)"),Zlr=l(),e8=a("li"),Cpe=a("strong"),eir=o("mbart"),oir=o(" \u2014 "),WO=a("a"),rir=o("TFMBartForConditionalGeneration"),tir=o(" (mBART model)"),air=l(),o8=a("li"),Mpe=a("strong"),nir=o("mt5"),sir=o(" \u2014 "),QO=a("a"),lir=o("TFMT5ForConditionalGeneration"),iir=o(" (mT5 model)"),dir=l(),r8=a("li"),Epe=a("strong"),cir=o("pegasus"),fir=o(" \u2014 "),HO=a("a"),mir=o("TFPegasusForConditionalGeneration"),gir=o(" (Pegasus model)"),hir=l(),t8=a("li"),ype=a("strong"),pir=o("t5"),_ir=o(" \u2014 "),UO=a("a"),uir=o("TFT5ForConditionalGeneration"),bir=o(" (T5 model)"),vir=l(),wpe=a("p"),Tir=o("Examples:"),Fir=l(),f(hA.$$.fragment),pke=l(),xc=a("h2"),a8=a("a"),Ape=a("span"),f(pA.$$.fragment),Cir=l(),Lpe=a("span"),Mir=o("TFAutoModelForSequenceClassification"),_ke=l(),yr=a("div"),f(_A.$$.fragment),Eir=l(),kc=a("p"),yir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Bpe=a("code"),wir=o("from_pretrained()"),Air=o("class method or the "),xpe=a("code"),Lir=o("from_config()"),Bir=o(`class
method.`),xir=l(),uA=a("p"),kir=o("This class cannot be instantiated directly using "),kpe=a("code"),Rir=o("__init__()"),Sir=o(" (throws an error)."),Pir=l(),vt=a("div"),f(bA.$$.fragment),$ir=l(),Rpe=a("p"),Iir=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jir=l(),Rc=a("p"),Dir=o(`Note:
Loading a model from its configuration file does `),Spe=a("strong"),Nir=o("not"),qir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ppe=a("code"),Oir=o("from_pretrained()"),Gir=o("to load the model weights."),Xir=l(),$pe=a("p"),Vir=o("Examples:"),zir=l(),f(vA.$$.fragment),Wir=l(),To=a("div"),f(TA.$$.fragment),Qir=l(),Ipe=a("p"),Hir=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Uir=l(),Fn=a("p"),Jir=o("The model class to instantiate is selected based on the "),jpe=a("code"),Yir=o("model_type"),Kir=o(` property of the config object (either
passed as an argument or loaded from `),Dpe=a("code"),Zir=o("pretrained_model_name_or_path"),edr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=a("code"),odr=o("pretrained_model_name_or_path"),rdr=o(":"),tdr=l(),V=a("ul"),n8=a("li"),qpe=a("strong"),adr=o("albert"),ndr=o(" \u2014 "),JO=a("a"),sdr=o("TFAlbertForSequenceClassification"),ldr=o(" (ALBERT model)"),idr=l(),s8=a("li"),Ope=a("strong"),ddr=o("bert"),cdr=o(" \u2014 "),YO=a("a"),fdr=o("TFBertForSequenceClassification"),mdr=o(" (BERT model)"),gdr=l(),l8=a("li"),Gpe=a("strong"),hdr=o("camembert"),pdr=o(" \u2014 "),KO=a("a"),_dr=o("TFCamembertForSequenceClassification"),udr=o(" (CamemBERT model)"),bdr=l(),i8=a("li"),Xpe=a("strong"),vdr=o("convbert"),Tdr=o(" \u2014 "),ZO=a("a"),Fdr=o("TFConvBertForSequenceClassification"),Cdr=o(" (ConvBERT model)"),Mdr=l(),d8=a("li"),Vpe=a("strong"),Edr=o("ctrl"),ydr=o(" \u2014 "),eG=a("a"),wdr=o("TFCTRLForSequenceClassification"),Adr=o(" (CTRL model)"),Ldr=l(),c8=a("li"),zpe=a("strong"),Bdr=o("deberta"),xdr=o(" \u2014 "),oG=a("a"),kdr=o("TFDebertaForSequenceClassification"),Rdr=o(" (DeBERTa model)"),Sdr=l(),f8=a("li"),Wpe=a("strong"),Pdr=o("deberta-v2"),$dr=o(" \u2014 "),rG=a("a"),Idr=o("TFDebertaV2ForSequenceClassification"),jdr=o(" (DeBERTa-v2 model)"),Ddr=l(),m8=a("li"),Qpe=a("strong"),Ndr=o("distilbert"),qdr=o(" \u2014 "),tG=a("a"),Odr=o("TFDistilBertForSequenceClassification"),Gdr=o(" (DistilBERT model)"),Xdr=l(),g8=a("li"),Hpe=a("strong"),Vdr=o("electra"),zdr=o(" \u2014 "),aG=a("a"),Wdr=o("TFElectraForSequenceClassification"),Qdr=o(" (ELECTRA model)"),Hdr=l(),h8=a("li"),Upe=a("strong"),Udr=o("flaubert"),Jdr=o(" \u2014 "),nG=a("a"),Ydr=o("TFFlaubertForSequenceClassification"),Kdr=o(" (FlauBERT model)"),Zdr=l(),p8=a("li"),Jpe=a("strong"),ecr=o("funnel"),ocr=o(" \u2014 "),sG=a("a"),rcr=o("TFFunnelForSequenceClassification"),tcr=o(" (Funnel Transformer model)"),acr=l(),_8=a("li"),Ype=a("strong"),ncr=o("gpt2"),scr=o(" \u2014 "),lG=a("a"),lcr=o("TFGPT2ForSequenceClassification"),icr=o(" (OpenAI GPT-2 model)"),dcr=l(),u8=a("li"),Kpe=a("strong"),ccr=o("layoutlm"),fcr=o(" \u2014 "),iG=a("a"),mcr=o("TFLayoutLMForSequenceClassification"),gcr=o(" (LayoutLM model)"),hcr=l(),b8=a("li"),Zpe=a("strong"),pcr=o("longformer"),_cr=o(" \u2014 "),dG=a("a"),ucr=o("TFLongformerForSequenceClassification"),bcr=o(" (Longformer model)"),vcr=l(),v8=a("li"),e_e=a("strong"),Tcr=o("mobilebert"),Fcr=o(" \u2014 "),cG=a("a"),Ccr=o("TFMobileBertForSequenceClassification"),Mcr=o(" (MobileBERT model)"),Ecr=l(),T8=a("li"),o_e=a("strong"),ycr=o("mpnet"),wcr=o(" \u2014 "),fG=a("a"),Acr=o("TFMPNetForSequenceClassification"),Lcr=o(" (MPNet model)"),Bcr=l(),F8=a("li"),r_e=a("strong"),xcr=o("openai-gpt"),kcr=o(" \u2014 "),mG=a("a"),Rcr=o("TFOpenAIGPTForSequenceClassification"),Scr=o(" (OpenAI GPT model)"),Pcr=l(),C8=a("li"),t_e=a("strong"),$cr=o("rembert"),Icr=o(" \u2014 "),gG=a("a"),jcr=o("TFRemBertForSequenceClassification"),Dcr=o(" (RemBERT model)"),Ncr=l(),M8=a("li"),a_e=a("strong"),qcr=o("roberta"),Ocr=o(" \u2014 "),hG=a("a"),Gcr=o("TFRobertaForSequenceClassification"),Xcr=o(" (RoBERTa model)"),Vcr=l(),E8=a("li"),n_e=a("strong"),zcr=o("roformer"),Wcr=o(" \u2014 "),pG=a("a"),Qcr=o("TFRoFormerForSequenceClassification"),Hcr=o(" (RoFormer model)"),Ucr=l(),y8=a("li"),s_e=a("strong"),Jcr=o("tapas"),Ycr=o(" \u2014 "),_G=a("a"),Kcr=o("TFTapasForSequenceClassification"),Zcr=o(" (TAPAS model)"),efr=l(),w8=a("li"),l_e=a("strong"),ofr=o("transfo-xl"),rfr=o(" \u2014 "),uG=a("a"),tfr=o("TFTransfoXLForSequenceClassification"),afr=o(" (Transformer-XL model)"),nfr=l(),A8=a("li"),i_e=a("strong"),sfr=o("xlm"),lfr=o(" \u2014 "),bG=a("a"),ifr=o("TFXLMForSequenceClassification"),dfr=o(" (XLM model)"),cfr=l(),L8=a("li"),d_e=a("strong"),ffr=o("xlm-roberta"),mfr=o(" \u2014 "),vG=a("a"),gfr=o("TFXLMRobertaForSequenceClassification"),hfr=o(" (XLM-RoBERTa model)"),pfr=l(),B8=a("li"),c_e=a("strong"),_fr=o("xlnet"),ufr=o(" \u2014 "),TG=a("a"),bfr=o("TFXLNetForSequenceClassification"),vfr=o(" (XLNet model)"),Tfr=l(),f_e=a("p"),Ffr=o("Examples:"),Cfr=l(),f(FA.$$.fragment),uke=l(),Sc=a("h2"),x8=a("a"),m_e=a("span"),f(CA.$$.fragment),Mfr=l(),g_e=a("span"),Efr=o("TFAutoModelForMultipleChoice"),bke=l(),wr=a("div"),f(MA.$$.fragment),yfr=l(),Pc=a("p"),wfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),h_e=a("code"),Afr=o("from_pretrained()"),Lfr=o("class method or the "),p_e=a("code"),Bfr=o("from_config()"),xfr=o(`class
method.`),kfr=l(),EA=a("p"),Rfr=o("This class cannot be instantiated directly using "),__e=a("code"),Sfr=o("__init__()"),Pfr=o(" (throws an error)."),$fr=l(),Tt=a("div"),f(yA.$$.fragment),Ifr=l(),u_e=a("p"),jfr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Dfr=l(),$c=a("p"),Nfr=o(`Note:
Loading a model from its configuration file does `),b_e=a("strong"),qfr=o("not"),Ofr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),v_e=a("code"),Gfr=o("from_pretrained()"),Xfr=o("to load the model weights."),Vfr=l(),T_e=a("p"),zfr=o("Examples:"),Wfr=l(),f(wA.$$.fragment),Qfr=l(),Fo=a("div"),f(AA.$$.fragment),Hfr=l(),F_e=a("p"),Ufr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Jfr=l(),Cn=a("p"),Yfr=o("The model class to instantiate is selected based on the "),C_e=a("code"),Kfr=o("model_type"),Zfr=o(` property of the config object (either
passed as an argument or loaded from `),M_e=a("code"),emr=o("pretrained_model_name_or_path"),omr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=a("code"),rmr=o("pretrained_model_name_or_path"),tmr=o(":"),amr=l(),te=a("ul"),k8=a("li"),y_e=a("strong"),nmr=o("albert"),smr=o(" \u2014 "),FG=a("a"),lmr=o("TFAlbertForMultipleChoice"),imr=o(" (ALBERT model)"),dmr=l(),R8=a("li"),w_e=a("strong"),cmr=o("bert"),fmr=o(" \u2014 "),CG=a("a"),mmr=o("TFBertForMultipleChoice"),gmr=o(" (BERT model)"),hmr=l(),S8=a("li"),A_e=a("strong"),pmr=o("camembert"),_mr=o(" \u2014 "),MG=a("a"),umr=o("TFCamembertForMultipleChoice"),bmr=o(" (CamemBERT model)"),vmr=l(),P8=a("li"),L_e=a("strong"),Tmr=o("convbert"),Fmr=o(" \u2014 "),EG=a("a"),Cmr=o("TFConvBertForMultipleChoice"),Mmr=o(" (ConvBERT model)"),Emr=l(),$8=a("li"),B_e=a("strong"),ymr=o("distilbert"),wmr=o(" \u2014 "),yG=a("a"),Amr=o("TFDistilBertForMultipleChoice"),Lmr=o(" (DistilBERT model)"),Bmr=l(),I8=a("li"),x_e=a("strong"),xmr=o("electra"),kmr=o(" \u2014 "),wG=a("a"),Rmr=o("TFElectraForMultipleChoice"),Smr=o(" (ELECTRA model)"),Pmr=l(),j8=a("li"),k_e=a("strong"),$mr=o("flaubert"),Imr=o(" \u2014 "),AG=a("a"),jmr=o("TFFlaubertForMultipleChoice"),Dmr=o(" (FlauBERT model)"),Nmr=l(),D8=a("li"),R_e=a("strong"),qmr=o("funnel"),Omr=o(" \u2014 "),LG=a("a"),Gmr=o("TFFunnelForMultipleChoice"),Xmr=o(" (Funnel Transformer model)"),Vmr=l(),N8=a("li"),S_e=a("strong"),zmr=o("longformer"),Wmr=o(" \u2014 "),BG=a("a"),Qmr=o("TFLongformerForMultipleChoice"),Hmr=o(" (Longformer model)"),Umr=l(),q8=a("li"),P_e=a("strong"),Jmr=o("mobilebert"),Ymr=o(" \u2014 "),xG=a("a"),Kmr=o("TFMobileBertForMultipleChoice"),Zmr=o(" (MobileBERT model)"),egr=l(),O8=a("li"),$_e=a("strong"),ogr=o("mpnet"),rgr=o(" \u2014 "),kG=a("a"),tgr=o("TFMPNetForMultipleChoice"),agr=o(" (MPNet model)"),ngr=l(),G8=a("li"),I_e=a("strong"),sgr=o("rembert"),lgr=o(" \u2014 "),RG=a("a"),igr=o("TFRemBertForMultipleChoice"),dgr=o(" (RemBERT model)"),cgr=l(),X8=a("li"),j_e=a("strong"),fgr=o("roberta"),mgr=o(" \u2014 "),SG=a("a"),ggr=o("TFRobertaForMultipleChoice"),hgr=o(" (RoBERTa model)"),pgr=l(),V8=a("li"),D_e=a("strong"),_gr=o("roformer"),ugr=o(" \u2014 "),PG=a("a"),bgr=o("TFRoFormerForMultipleChoice"),vgr=o(" (RoFormer model)"),Tgr=l(),z8=a("li"),N_e=a("strong"),Fgr=o("xlm"),Cgr=o(" \u2014 "),$G=a("a"),Mgr=o("TFXLMForMultipleChoice"),Egr=o(" (XLM model)"),ygr=l(),W8=a("li"),q_e=a("strong"),wgr=o("xlm-roberta"),Agr=o(" \u2014 "),IG=a("a"),Lgr=o("TFXLMRobertaForMultipleChoice"),Bgr=o(" (XLM-RoBERTa model)"),xgr=l(),Q8=a("li"),O_e=a("strong"),kgr=o("xlnet"),Rgr=o(" \u2014 "),jG=a("a"),Sgr=o("TFXLNetForMultipleChoice"),Pgr=o(" (XLNet model)"),$gr=l(),G_e=a("p"),Igr=o("Examples:"),jgr=l(),f(LA.$$.fragment),vke=l(),Ic=a("h2"),H8=a("a"),X_e=a("span"),f(BA.$$.fragment),Dgr=l(),V_e=a("span"),Ngr=o("TFAutoModelForTableQuestionAnswering"),Tke=l(),Ar=a("div"),f(xA.$$.fragment),qgr=l(),jc=a("p"),Ogr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),z_e=a("code"),Ggr=o("from_pretrained()"),Xgr=o("class method or the "),W_e=a("code"),Vgr=o("from_config()"),zgr=o(`class
method.`),Wgr=l(),kA=a("p"),Qgr=o("This class cannot be instantiated directly using "),Q_e=a("code"),Hgr=o("__init__()"),Ugr=o(" (throws an error)."),Jgr=l(),Ft=a("div"),f(RA.$$.fragment),Ygr=l(),H_e=a("p"),Kgr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Zgr=l(),Dc=a("p"),ehr=o(`Note:
Loading a model from its configuration file does `),U_e=a("strong"),ohr=o("not"),rhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),J_e=a("code"),thr=o("from_pretrained()"),ahr=o("to load the model weights."),nhr=l(),Y_e=a("p"),shr=o("Examples:"),lhr=l(),f(SA.$$.fragment),ihr=l(),Co=a("div"),f(PA.$$.fragment),dhr=l(),K_e=a("p"),chr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fhr=l(),Mn=a("p"),mhr=o("The model class to instantiate is selected based on the "),Z_e=a("code"),ghr=o("model_type"),hhr=o(` property of the config object (either
passed as an argument or loaded from `),eue=a("code"),phr=o("pretrained_model_name_or_path"),_hr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=a("code"),uhr=o("pretrained_model_name_or_path"),bhr=o(":"),vhr=l(),rue=a("ul"),U8=a("li"),tue=a("strong"),Thr=o("tapas"),Fhr=o(" \u2014 "),DG=a("a"),Chr=o("TFTapasForQuestionAnswering"),Mhr=o(" (TAPAS model)"),Ehr=l(),aue=a("p"),yhr=o("Examples:"),whr=l(),f($A.$$.fragment),Fke=l(),Nc=a("h2"),J8=a("a"),nue=a("span"),f(IA.$$.fragment),Ahr=l(),sue=a("span"),Lhr=o("TFAutoModelForTokenClassification"),Cke=l(),Lr=a("div"),f(jA.$$.fragment),Bhr=l(),qc=a("p"),xhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lue=a("code"),khr=o("from_pretrained()"),Rhr=o("class method or the "),iue=a("code"),Shr=o("from_config()"),Phr=o(`class
method.`),$hr=l(),DA=a("p"),Ihr=o("This class cannot be instantiated directly using "),due=a("code"),jhr=o("__init__()"),Dhr=o(" (throws an error)."),Nhr=l(),Ct=a("div"),f(NA.$$.fragment),qhr=l(),cue=a("p"),Ohr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ghr=l(),Oc=a("p"),Xhr=o(`Note:
Loading a model from its configuration file does `),fue=a("strong"),Vhr=o("not"),zhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mue=a("code"),Whr=o("from_pretrained()"),Qhr=o("to load the model weights."),Hhr=l(),gue=a("p"),Uhr=o("Examples:"),Jhr=l(),f(qA.$$.fragment),Yhr=l(),Mo=a("div"),f(OA.$$.fragment),Khr=l(),hue=a("p"),Zhr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),epr=l(),En=a("p"),opr=o("The model class to instantiate is selected based on the "),pue=a("code"),rpr=o("model_type"),tpr=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),apr=o("pretrained_model_name_or_path"),npr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),spr=o("pretrained_model_name_or_path"),lpr=o(":"),ipr=l(),K=a("ul"),Y8=a("li"),bue=a("strong"),dpr=o("albert"),cpr=o(" \u2014 "),NG=a("a"),fpr=o("TFAlbertForTokenClassification"),mpr=o(" (ALBERT model)"),gpr=l(),K8=a("li"),vue=a("strong"),hpr=o("bert"),ppr=o(" \u2014 "),qG=a("a"),_pr=o("TFBertForTokenClassification"),upr=o(" (BERT model)"),bpr=l(),Z8=a("li"),Tue=a("strong"),vpr=o("camembert"),Tpr=o(" \u2014 "),OG=a("a"),Fpr=o("TFCamembertForTokenClassification"),Cpr=o(" (CamemBERT model)"),Mpr=l(),eF=a("li"),Fue=a("strong"),Epr=o("convbert"),ypr=o(" \u2014 "),GG=a("a"),wpr=o("TFConvBertForTokenClassification"),Apr=o(" (ConvBERT model)"),Lpr=l(),oF=a("li"),Cue=a("strong"),Bpr=o("deberta"),xpr=o(" \u2014 "),XG=a("a"),kpr=o("TFDebertaForTokenClassification"),Rpr=o(" (DeBERTa model)"),Spr=l(),rF=a("li"),Mue=a("strong"),Ppr=o("deberta-v2"),$pr=o(" \u2014 "),VG=a("a"),Ipr=o("TFDebertaV2ForTokenClassification"),jpr=o(" (DeBERTa-v2 model)"),Dpr=l(),tF=a("li"),Eue=a("strong"),Npr=o("distilbert"),qpr=o(" \u2014 "),zG=a("a"),Opr=o("TFDistilBertForTokenClassification"),Gpr=o(" (DistilBERT model)"),Xpr=l(),aF=a("li"),yue=a("strong"),Vpr=o("electra"),zpr=o(" \u2014 "),WG=a("a"),Wpr=o("TFElectraForTokenClassification"),Qpr=o(" (ELECTRA model)"),Hpr=l(),nF=a("li"),wue=a("strong"),Upr=o("flaubert"),Jpr=o(" \u2014 "),QG=a("a"),Ypr=o("TFFlaubertForTokenClassification"),Kpr=o(" (FlauBERT model)"),Zpr=l(),sF=a("li"),Aue=a("strong"),e_r=o("funnel"),o_r=o(" \u2014 "),HG=a("a"),r_r=o("TFFunnelForTokenClassification"),t_r=o(" (Funnel Transformer model)"),a_r=l(),lF=a("li"),Lue=a("strong"),n_r=o("layoutlm"),s_r=o(" \u2014 "),UG=a("a"),l_r=o("TFLayoutLMForTokenClassification"),i_r=o(" (LayoutLM model)"),d_r=l(),iF=a("li"),Bue=a("strong"),c_r=o("longformer"),f_r=o(" \u2014 "),JG=a("a"),m_r=o("TFLongformerForTokenClassification"),g_r=o(" (Longformer model)"),h_r=l(),dF=a("li"),xue=a("strong"),p_r=o("mobilebert"),__r=o(" \u2014 "),YG=a("a"),u_r=o("TFMobileBertForTokenClassification"),b_r=o(" (MobileBERT model)"),v_r=l(),cF=a("li"),kue=a("strong"),T_r=o("mpnet"),F_r=o(" \u2014 "),KG=a("a"),C_r=o("TFMPNetForTokenClassification"),M_r=o(" (MPNet model)"),E_r=l(),fF=a("li"),Rue=a("strong"),y_r=o("rembert"),w_r=o(" \u2014 "),ZG=a("a"),A_r=o("TFRemBertForTokenClassification"),L_r=o(" (RemBERT model)"),B_r=l(),mF=a("li"),Sue=a("strong"),x_r=o("roberta"),k_r=o(" \u2014 "),eX=a("a"),R_r=o("TFRobertaForTokenClassification"),S_r=o(" (RoBERTa model)"),P_r=l(),gF=a("li"),Pue=a("strong"),$_r=o("roformer"),I_r=o(" \u2014 "),oX=a("a"),j_r=o("TFRoFormerForTokenClassification"),D_r=o(" (RoFormer model)"),N_r=l(),hF=a("li"),$ue=a("strong"),q_r=o("xlm"),O_r=o(" \u2014 "),rX=a("a"),G_r=o("TFXLMForTokenClassification"),X_r=o(" (XLM model)"),V_r=l(),pF=a("li"),Iue=a("strong"),z_r=o("xlm-roberta"),W_r=o(" \u2014 "),tX=a("a"),Q_r=o("TFXLMRobertaForTokenClassification"),H_r=o(" (XLM-RoBERTa model)"),U_r=l(),_F=a("li"),jue=a("strong"),J_r=o("xlnet"),Y_r=o(" \u2014 "),aX=a("a"),K_r=o("TFXLNetForTokenClassification"),Z_r=o(" (XLNet model)"),eur=l(),Due=a("p"),our=o("Examples:"),rur=l(),f(GA.$$.fragment),Mke=l(),Gc=a("h2"),uF=a("a"),Nue=a("span"),f(XA.$$.fragment),tur=l(),que=a("span"),aur=o("TFAutoModelForQuestionAnswering"),Eke=l(),Br=a("div"),f(VA.$$.fragment),nur=l(),Xc=a("p"),sur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Oue=a("code"),lur=o("from_pretrained()"),iur=o("class method or the "),Gue=a("code"),dur=o("from_config()"),cur=o(`class
method.`),fur=l(),zA=a("p"),mur=o("This class cannot be instantiated directly using "),Xue=a("code"),gur=o("__init__()"),hur=o(" (throws an error)."),pur=l(),Mt=a("div"),f(WA.$$.fragment),_ur=l(),Vue=a("p"),uur=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bur=l(),Vc=a("p"),vur=o(`Note:
Loading a model from its configuration file does `),zue=a("strong"),Tur=o("not"),Fur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wue=a("code"),Cur=o("from_pretrained()"),Mur=o("to load the model weights."),Eur=l(),Que=a("p"),yur=o("Examples:"),wur=l(),f(QA.$$.fragment),Aur=l(),Eo=a("div"),f(HA.$$.fragment),Lur=l(),Hue=a("p"),Bur=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xur=l(),yn=a("p"),kur=o("The model class to instantiate is selected based on the "),Uue=a("code"),Rur=o("model_type"),Sur=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),Pur=o("pretrained_model_name_or_path"),$ur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),Iur=o("pretrained_model_name_or_path"),jur=o(":"),Dur=l(),Z=a("ul"),bF=a("li"),Kue=a("strong"),Nur=o("albert"),qur=o(" \u2014 "),nX=a("a"),Our=o("TFAlbertForQuestionAnswering"),Gur=o(" (ALBERT model)"),Xur=l(),vF=a("li"),Zue=a("strong"),Vur=o("bert"),zur=o(" \u2014 "),sX=a("a"),Wur=o("TFBertForQuestionAnswering"),Qur=o(" (BERT model)"),Hur=l(),TF=a("li"),e1e=a("strong"),Uur=o("camembert"),Jur=o(" \u2014 "),lX=a("a"),Yur=o("TFCamembertForQuestionAnswering"),Kur=o(" (CamemBERT model)"),Zur=l(),FF=a("li"),o1e=a("strong"),e1r=o("convbert"),o1r=o(" \u2014 "),iX=a("a"),r1r=o("TFConvBertForQuestionAnswering"),t1r=o(" (ConvBERT model)"),a1r=l(),CF=a("li"),r1e=a("strong"),n1r=o("deberta"),s1r=o(" \u2014 "),dX=a("a"),l1r=o("TFDebertaForQuestionAnswering"),i1r=o(" (DeBERTa model)"),d1r=l(),MF=a("li"),t1e=a("strong"),c1r=o("deberta-v2"),f1r=o(" \u2014 "),cX=a("a"),m1r=o("TFDebertaV2ForQuestionAnswering"),g1r=o(" (DeBERTa-v2 model)"),h1r=l(),EF=a("li"),a1e=a("strong"),p1r=o("distilbert"),_1r=o(" \u2014 "),fX=a("a"),u1r=o("TFDistilBertForQuestionAnswering"),b1r=o(" (DistilBERT model)"),v1r=l(),yF=a("li"),n1e=a("strong"),T1r=o("electra"),F1r=o(" \u2014 "),mX=a("a"),C1r=o("TFElectraForQuestionAnswering"),M1r=o(" (ELECTRA model)"),E1r=l(),wF=a("li"),s1e=a("strong"),y1r=o("flaubert"),w1r=o(" \u2014 "),gX=a("a"),A1r=o("TFFlaubertForQuestionAnsweringSimple"),L1r=o(" (FlauBERT model)"),B1r=l(),AF=a("li"),l1e=a("strong"),x1r=o("funnel"),k1r=o(" \u2014 "),hX=a("a"),R1r=o("TFFunnelForQuestionAnswering"),S1r=o(" (Funnel Transformer model)"),P1r=l(),LF=a("li"),i1e=a("strong"),$1r=o("longformer"),I1r=o(" \u2014 "),pX=a("a"),j1r=o("TFLongformerForQuestionAnswering"),D1r=o(" (Longformer model)"),N1r=l(),BF=a("li"),d1e=a("strong"),q1r=o("mobilebert"),O1r=o(" \u2014 "),_X=a("a"),G1r=o("TFMobileBertForQuestionAnswering"),X1r=o(" (MobileBERT model)"),V1r=l(),xF=a("li"),c1e=a("strong"),z1r=o("mpnet"),W1r=o(" \u2014 "),uX=a("a"),Q1r=o("TFMPNetForQuestionAnswering"),H1r=o(" (MPNet model)"),U1r=l(),kF=a("li"),f1e=a("strong"),J1r=o("rembert"),Y1r=o(" \u2014 "),bX=a("a"),K1r=o("TFRemBertForQuestionAnswering"),Z1r=o(" (RemBERT model)"),ebr=l(),RF=a("li"),m1e=a("strong"),obr=o("roberta"),rbr=o(" \u2014 "),vX=a("a"),tbr=o("TFRobertaForQuestionAnswering"),abr=o(" (RoBERTa model)"),nbr=l(),SF=a("li"),g1e=a("strong"),sbr=o("roformer"),lbr=o(" \u2014 "),TX=a("a"),ibr=o("TFRoFormerForQuestionAnswering"),dbr=o(" (RoFormer model)"),cbr=l(),PF=a("li"),h1e=a("strong"),fbr=o("xlm"),mbr=o(" \u2014 "),FX=a("a"),gbr=o("TFXLMForQuestionAnsweringSimple"),hbr=o(" (XLM model)"),pbr=l(),$F=a("li"),p1e=a("strong"),_br=o("xlm-roberta"),ubr=o(" \u2014 "),CX=a("a"),bbr=o("TFXLMRobertaForQuestionAnswering"),vbr=o(" (XLM-RoBERTa model)"),Tbr=l(),IF=a("li"),_1e=a("strong"),Fbr=o("xlnet"),Cbr=o(" \u2014 "),MX=a("a"),Mbr=o("TFXLNetForQuestionAnsweringSimple"),Ebr=o(" (XLNet model)"),ybr=l(),u1e=a("p"),wbr=o("Examples:"),Abr=l(),f(UA.$$.fragment),yke=l(),zc=a("h2"),jF=a("a"),b1e=a("span"),f(JA.$$.fragment),Lbr=l(),v1e=a("span"),Bbr=o("TFAutoModelForVision2Seq"),wke=l(),xr=a("div"),f(YA.$$.fragment),xbr=l(),Wc=a("p"),kbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),T1e=a("code"),Rbr=o("from_pretrained()"),Sbr=o("class method or the "),F1e=a("code"),Pbr=o("from_config()"),$br=o(`class
method.`),Ibr=l(),KA=a("p"),jbr=o("This class cannot be instantiated directly using "),C1e=a("code"),Dbr=o("__init__()"),Nbr=o(" (throws an error)."),qbr=l(),Et=a("div"),f(ZA.$$.fragment),Obr=l(),M1e=a("p"),Gbr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xbr=l(),Qc=a("p"),Vbr=o(`Note:
Loading a model from its configuration file does `),E1e=a("strong"),zbr=o("not"),Wbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),y1e=a("code"),Qbr=o("from_pretrained()"),Hbr=o("to load the model weights."),Ubr=l(),w1e=a("p"),Jbr=o("Examples:"),Ybr=l(),f(e0.$$.fragment),Kbr=l(),yo=a("div"),f(o0.$$.fragment),Zbr=l(),A1e=a("p"),e3r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),o3r=l(),wn=a("p"),r3r=o("The model class to instantiate is selected based on the "),L1e=a("code"),t3r=o("model_type"),a3r=o(` property of the config object (either
passed as an argument or loaded from `),B1e=a("code"),n3r=o("pretrained_model_name_or_path"),s3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=a("code"),l3r=o("pretrained_model_name_or_path"),i3r=o(":"),d3r=l(),k1e=a("ul"),DF=a("li"),R1e=a("strong"),c3r=o("vision-encoder-decoder"),f3r=o(" \u2014 "),EX=a("a"),m3r=o("TFVisionEncoderDecoderModel"),g3r=o(" (Vision Encoder decoder model)"),h3r=l(),S1e=a("p"),p3r=o("Examples:"),_3r=l(),f(r0.$$.fragment),Ake=l(),Hc=a("h2"),NF=a("a"),P1e=a("span"),f(t0.$$.fragment),u3r=l(),$1e=a("span"),b3r=o("TFAutoModelForSpeechSeq2Seq"),Lke=l(),kr=a("div"),f(a0.$$.fragment),v3r=l(),Uc=a("p"),T3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),I1e=a("code"),F3r=o("from_pretrained()"),C3r=o("class method or the "),j1e=a("code"),M3r=o("from_config()"),E3r=o(`class
method.`),y3r=l(),n0=a("p"),w3r=o("This class cannot be instantiated directly using "),D1e=a("code"),A3r=o("__init__()"),L3r=o(" (throws an error)."),B3r=l(),yt=a("div"),f(s0.$$.fragment),x3r=l(),N1e=a("p"),k3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),R3r=l(),Jc=a("p"),S3r=o(`Note:
Loading a model from its configuration file does `),q1e=a("strong"),P3r=o("not"),$3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),O1e=a("code"),I3r=o("from_pretrained()"),j3r=o("to load the model weights."),D3r=l(),G1e=a("p"),N3r=o("Examples:"),q3r=l(),f(l0.$$.fragment),O3r=l(),wo=a("div"),f(i0.$$.fragment),G3r=l(),X1e=a("p"),X3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),V3r=l(),An=a("p"),z3r=o("The model class to instantiate is selected based on the "),V1e=a("code"),W3r=o("model_type"),Q3r=o(` property of the config object (either
passed as an argument or loaded from `),z1e=a("code"),H3r=o("pretrained_model_name_or_path"),U3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=a("code"),J3r=o("pretrained_model_name_or_path"),Y3r=o(":"),K3r=l(),Q1e=a("ul"),qF=a("li"),H1e=a("strong"),Z3r=o("speech_to_text"),e5r=o(" \u2014 "),yX=a("a"),o5r=o("TFSpeech2TextForConditionalGeneration"),r5r=o(" (Speech2Text model)"),t5r=l(),U1e=a("p"),a5r=o("Examples:"),n5r=l(),f(d0.$$.fragment),Bke=l(),Yc=a("h2"),OF=a("a"),J1e=a("span"),f(c0.$$.fragment),s5r=l(),Y1e=a("span"),l5r=o("FlaxAutoModel"),xke=l(),Rr=a("div"),f(f0.$$.fragment),i5r=l(),Kc=a("p"),d5r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),K1e=a("code"),c5r=o("from_pretrained()"),f5r=o("class method or the "),Z1e=a("code"),m5r=o("from_config()"),g5r=o(`class
method.`),h5r=l(),m0=a("p"),p5r=o("This class cannot be instantiated directly using "),ebe=a("code"),_5r=o("__init__()"),u5r=o(" (throws an error)."),b5r=l(),wt=a("div"),f(g0.$$.fragment),v5r=l(),obe=a("p"),T5r=o("Instantiates one of the base model classes of the library from a configuration."),F5r=l(),Zc=a("p"),C5r=o(`Note:
Loading a model from its configuration file does `),rbe=a("strong"),M5r=o("not"),E5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tbe=a("code"),y5r=o("from_pretrained()"),w5r=o("to load the model weights."),A5r=l(),abe=a("p"),L5r=o("Examples:"),B5r=l(),f(h0.$$.fragment),x5r=l(),Ao=a("div"),f(p0.$$.fragment),k5r=l(),nbe=a("p"),R5r=o("Instantiate one of the base model classes of the library from a pretrained model."),S5r=l(),Ln=a("p"),P5r=o("The model class to instantiate is selected based on the "),sbe=a("code"),$5r=o("model_type"),I5r=o(` property of the config object (either
passed as an argument or loaded from `),lbe=a("code"),j5r=o("pretrained_model_name_or_path"),D5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=a("code"),N5r=o("pretrained_model_name_or_path"),q5r=o(":"),O5r=l(),z=a("ul"),GF=a("li"),dbe=a("strong"),G5r=o("albert"),X5r=o(" \u2014 "),wX=a("a"),V5r=o("FlaxAlbertModel"),z5r=o(" (ALBERT model)"),W5r=l(),XF=a("li"),cbe=a("strong"),Q5r=o("bart"),H5r=o(" \u2014 "),AX=a("a"),U5r=o("FlaxBartModel"),J5r=o(" (BART model)"),Y5r=l(),VF=a("li"),fbe=a("strong"),K5r=o("beit"),Z5r=o(" \u2014 "),LX=a("a"),e2r=o("FlaxBeitModel"),o2r=o(" (BEiT model)"),r2r=l(),zF=a("li"),mbe=a("strong"),t2r=o("bert"),a2r=o(" \u2014 "),BX=a("a"),n2r=o("FlaxBertModel"),s2r=o(" (BERT model)"),l2r=l(),WF=a("li"),gbe=a("strong"),i2r=o("big_bird"),d2r=o(" \u2014 "),xX=a("a"),c2r=o("FlaxBigBirdModel"),f2r=o(" (BigBird model)"),m2r=l(),QF=a("li"),hbe=a("strong"),g2r=o("blenderbot"),h2r=o(" \u2014 "),kX=a("a"),p2r=o("FlaxBlenderbotModel"),_2r=o(" (Blenderbot model)"),u2r=l(),HF=a("li"),pbe=a("strong"),b2r=o("blenderbot-small"),v2r=o(" \u2014 "),RX=a("a"),T2r=o("FlaxBlenderbotSmallModel"),F2r=o(" (BlenderbotSmall model)"),C2r=l(),UF=a("li"),_be=a("strong"),M2r=o("clip"),E2r=o(" \u2014 "),SX=a("a"),y2r=o("FlaxCLIPModel"),w2r=o(" (CLIP model)"),A2r=l(),JF=a("li"),ube=a("strong"),L2r=o("distilbert"),B2r=o(" \u2014 "),PX=a("a"),x2r=o("FlaxDistilBertModel"),k2r=o(" (DistilBERT model)"),R2r=l(),YF=a("li"),bbe=a("strong"),S2r=o("electra"),P2r=o(" \u2014 "),$X=a("a"),$2r=o("FlaxElectraModel"),I2r=o(" (ELECTRA model)"),j2r=l(),KF=a("li"),vbe=a("strong"),D2r=o("gpt2"),N2r=o(" \u2014 "),IX=a("a"),q2r=o("FlaxGPT2Model"),O2r=o(" (OpenAI GPT-2 model)"),G2r=l(),ZF=a("li"),Tbe=a("strong"),X2r=o("gpt_neo"),V2r=o(" \u2014 "),jX=a("a"),z2r=o("FlaxGPTNeoModel"),W2r=o(" (GPT Neo model)"),Q2r=l(),eC=a("li"),Fbe=a("strong"),H2r=o("gptj"),U2r=o(" \u2014 "),DX=a("a"),J2r=o("FlaxGPTJModel"),Y2r=o(" (GPT-J model)"),K2r=l(),oC=a("li"),Cbe=a("strong"),Z2r=o("marian"),evr=o(" \u2014 "),NX=a("a"),ovr=o("FlaxMarianModel"),rvr=o(" (Marian model)"),tvr=l(),rC=a("li"),Mbe=a("strong"),avr=o("mbart"),nvr=o(" \u2014 "),qX=a("a"),svr=o("FlaxMBartModel"),lvr=o(" (mBART model)"),ivr=l(),tC=a("li"),Ebe=a("strong"),dvr=o("mt5"),cvr=o(" \u2014 "),OX=a("a"),fvr=o("FlaxMT5Model"),mvr=o(" (mT5 model)"),gvr=l(),aC=a("li"),ybe=a("strong"),hvr=o("pegasus"),pvr=o(" \u2014 "),GX=a("a"),_vr=o("FlaxPegasusModel"),uvr=o(" (Pegasus model)"),bvr=l(),nC=a("li"),wbe=a("strong"),vvr=o("roberta"),Tvr=o(" \u2014 "),XX=a("a"),Fvr=o("FlaxRobertaModel"),Cvr=o(" (RoBERTa model)"),Mvr=l(),sC=a("li"),Abe=a("strong"),Evr=o("roformer"),yvr=o(" \u2014 "),VX=a("a"),wvr=o("FlaxRoFormerModel"),Avr=o(" (RoFormer model)"),Lvr=l(),lC=a("li"),Lbe=a("strong"),Bvr=o("t5"),xvr=o(" \u2014 "),zX=a("a"),kvr=o("FlaxT5Model"),Rvr=o(" (T5 model)"),Svr=l(),iC=a("li"),Bbe=a("strong"),Pvr=o("vision-text-dual-encoder"),$vr=o(" \u2014 "),WX=a("a"),Ivr=o("FlaxVisionTextDualEncoderModel"),jvr=o(" (VisionTextDualEncoder model)"),Dvr=l(),dC=a("li"),xbe=a("strong"),Nvr=o("vit"),qvr=o(" \u2014 "),QX=a("a"),Ovr=o("FlaxViTModel"),Gvr=o(" (ViT model)"),Xvr=l(),cC=a("li"),kbe=a("strong"),Vvr=o("wav2vec2"),zvr=o(" \u2014 "),HX=a("a"),Wvr=o("FlaxWav2Vec2Model"),Qvr=o(" (Wav2Vec2 model)"),Hvr=l(),fC=a("li"),Rbe=a("strong"),Uvr=o("xglm"),Jvr=o(" \u2014 "),UX=a("a"),Yvr=o("FlaxXGLMModel"),Kvr=o(" (XGLM model)"),Zvr=l(),mC=a("li"),Sbe=a("strong"),eTr=o("xlm-roberta"),oTr=o(" \u2014 "),JX=a("a"),rTr=o("FlaxXLMRobertaModel"),tTr=o(" (XLM-RoBERTa model)"),aTr=l(),Pbe=a("p"),nTr=o("Examples:"),sTr=l(),f(_0.$$.fragment),kke=l(),ef=a("h2"),gC=a("a"),$be=a("span"),f(u0.$$.fragment),lTr=l(),Ibe=a("span"),iTr=o("FlaxAutoModelForCausalLM"),Rke=l(),Sr=a("div"),f(b0.$$.fragment),dTr=l(),of=a("p"),cTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jbe=a("code"),fTr=o("from_pretrained()"),mTr=o("class method or the "),Dbe=a("code"),gTr=o("from_config()"),hTr=o(`class
method.`),pTr=l(),v0=a("p"),_Tr=o("This class cannot be instantiated directly using "),Nbe=a("code"),uTr=o("__init__()"),bTr=o(" (throws an error)."),vTr=l(),At=a("div"),f(T0.$$.fragment),TTr=l(),qbe=a("p"),FTr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),CTr=l(),rf=a("p"),MTr=o(`Note:
Loading a model from its configuration file does `),Obe=a("strong"),ETr=o("not"),yTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gbe=a("code"),wTr=o("from_pretrained()"),ATr=o("to load the model weights."),LTr=l(),Xbe=a("p"),BTr=o("Examples:"),xTr=l(),f(F0.$$.fragment),kTr=l(),Lo=a("div"),f(C0.$$.fragment),RTr=l(),Vbe=a("p"),STr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),PTr=l(),Bn=a("p"),$Tr=o("The model class to instantiate is selected based on the "),zbe=a("code"),ITr=o("model_type"),jTr=o(` property of the config object (either
passed as an argument or loaded from `),Wbe=a("code"),DTr=o("pretrained_model_name_or_path"),NTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=a("code"),qTr=o("pretrained_model_name_or_path"),OTr=o(":"),GTr=l(),xn=a("ul"),hC=a("li"),Hbe=a("strong"),XTr=o("gpt2"),VTr=o(" \u2014 "),YX=a("a"),zTr=o("FlaxGPT2LMHeadModel"),WTr=o(" (OpenAI GPT-2 model)"),QTr=l(),pC=a("li"),Ube=a("strong"),HTr=o("gpt_neo"),UTr=o(" \u2014 "),KX=a("a"),JTr=o("FlaxGPTNeoForCausalLM"),YTr=o(" (GPT Neo model)"),KTr=l(),_C=a("li"),Jbe=a("strong"),ZTr=o("gptj"),e8r=o(" \u2014 "),ZX=a("a"),o8r=o("FlaxGPTJForCausalLM"),r8r=o(" (GPT-J model)"),t8r=l(),uC=a("li"),Ybe=a("strong"),a8r=o("xglm"),n8r=o(" \u2014 "),eV=a("a"),s8r=o("FlaxXGLMForCausalLM"),l8r=o(" (XGLM model)"),i8r=l(),Kbe=a("p"),d8r=o("Examples:"),c8r=l(),f(M0.$$.fragment),Ske=l(),tf=a("h2"),bC=a("a"),Zbe=a("span"),f(E0.$$.fragment),f8r=l(),e3e=a("span"),m8r=o("FlaxAutoModelForPreTraining"),Pke=l(),Pr=a("div"),f(y0.$$.fragment),g8r=l(),af=a("p"),h8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),o3e=a("code"),p8r=o("from_pretrained()"),_8r=o("class method or the "),r3e=a("code"),u8r=o("from_config()"),b8r=o(`class
method.`),v8r=l(),w0=a("p"),T8r=o("This class cannot be instantiated directly using "),t3e=a("code"),F8r=o("__init__()"),C8r=o(" (throws an error)."),M8r=l(),Lt=a("div"),f(A0.$$.fragment),E8r=l(),a3e=a("p"),y8r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),w8r=l(),nf=a("p"),A8r=o(`Note:
Loading a model from its configuration file does `),n3e=a("strong"),L8r=o("not"),B8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),s3e=a("code"),x8r=o("from_pretrained()"),k8r=o("to load the model weights."),R8r=l(),l3e=a("p"),S8r=o("Examples:"),P8r=l(),f(L0.$$.fragment),$8r=l(),Bo=a("div"),f(B0.$$.fragment),I8r=l(),i3e=a("p"),j8r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),D8r=l(),kn=a("p"),N8r=o("The model class to instantiate is selected based on the "),d3e=a("code"),q8r=o("model_type"),O8r=o(` property of the config object (either
passed as an argument or loaded from `),c3e=a("code"),G8r=o("pretrained_model_name_or_path"),X8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=a("code"),V8r=o("pretrained_model_name_or_path"),z8r=o(":"),W8r=l(),ce=a("ul"),vC=a("li"),m3e=a("strong"),Q8r=o("albert"),H8r=o(" \u2014 "),oV=a("a"),U8r=o("FlaxAlbertForPreTraining"),J8r=o(" (ALBERT model)"),Y8r=l(),TC=a("li"),g3e=a("strong"),K8r=o("bart"),Z8r=o(" \u2014 "),rV=a("a"),eFr=o("FlaxBartForConditionalGeneration"),oFr=o(" (BART model)"),rFr=l(),FC=a("li"),h3e=a("strong"),tFr=o("bert"),aFr=o(" \u2014 "),tV=a("a"),nFr=o("FlaxBertForPreTraining"),sFr=o(" (BERT model)"),lFr=l(),CC=a("li"),p3e=a("strong"),iFr=o("big_bird"),dFr=o(" \u2014 "),aV=a("a"),cFr=o("FlaxBigBirdForPreTraining"),fFr=o(" (BigBird model)"),mFr=l(),MC=a("li"),_3e=a("strong"),gFr=o("electra"),hFr=o(" \u2014 "),nV=a("a"),pFr=o("FlaxElectraForPreTraining"),_Fr=o(" (ELECTRA model)"),uFr=l(),EC=a("li"),u3e=a("strong"),bFr=o("mbart"),vFr=o(" \u2014 "),sV=a("a"),TFr=o("FlaxMBartForConditionalGeneration"),FFr=o(" (mBART model)"),CFr=l(),yC=a("li"),b3e=a("strong"),MFr=o("mt5"),EFr=o(" \u2014 "),lV=a("a"),yFr=o("FlaxMT5ForConditionalGeneration"),wFr=o(" (mT5 model)"),AFr=l(),wC=a("li"),v3e=a("strong"),LFr=o("roberta"),BFr=o(" \u2014 "),iV=a("a"),xFr=o("FlaxRobertaForMaskedLM"),kFr=o(" (RoBERTa model)"),RFr=l(),AC=a("li"),T3e=a("strong"),SFr=o("roformer"),PFr=o(" \u2014 "),dV=a("a"),$Fr=o("FlaxRoFormerForMaskedLM"),IFr=o(" (RoFormer model)"),jFr=l(),LC=a("li"),F3e=a("strong"),DFr=o("t5"),NFr=o(" \u2014 "),cV=a("a"),qFr=o("FlaxT5ForConditionalGeneration"),OFr=o(" (T5 model)"),GFr=l(),BC=a("li"),C3e=a("strong"),XFr=o("wav2vec2"),VFr=o(" \u2014 "),fV=a("a"),zFr=o("FlaxWav2Vec2ForPreTraining"),WFr=o(" (Wav2Vec2 model)"),QFr=l(),xC=a("li"),M3e=a("strong"),HFr=o("xlm-roberta"),UFr=o(" \u2014 "),mV=a("a"),JFr=o("FlaxXLMRobertaForMaskedLM"),YFr=o(" (XLM-RoBERTa model)"),KFr=l(),E3e=a("p"),ZFr=o("Examples:"),eCr=l(),f(x0.$$.fragment),$ke=l(),sf=a("h2"),kC=a("a"),y3e=a("span"),f(k0.$$.fragment),oCr=l(),w3e=a("span"),rCr=o("FlaxAutoModelForMaskedLM"),Ike=l(),$r=a("div"),f(R0.$$.fragment),tCr=l(),lf=a("p"),aCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),A3e=a("code"),nCr=o("from_pretrained()"),sCr=o("class method or the "),L3e=a("code"),lCr=o("from_config()"),iCr=o(`class
method.`),dCr=l(),S0=a("p"),cCr=o("This class cannot be instantiated directly using "),B3e=a("code"),fCr=o("__init__()"),mCr=o(" (throws an error)."),gCr=l(),Bt=a("div"),f(P0.$$.fragment),hCr=l(),x3e=a("p"),pCr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Cr=l(),df=a("p"),uCr=o(`Note:
Loading a model from its configuration file does `),k3e=a("strong"),bCr=o("not"),vCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),R3e=a("code"),TCr=o("from_pretrained()"),FCr=o("to load the model weights."),CCr=l(),S3e=a("p"),MCr=o("Examples:"),ECr=l(),f($0.$$.fragment),yCr=l(),xo=a("div"),f(I0.$$.fragment),wCr=l(),P3e=a("p"),ACr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),LCr=l(),Rn=a("p"),BCr=o("The model class to instantiate is selected based on the "),$3e=a("code"),xCr=o("model_type"),kCr=o(` property of the config object (either
passed as an argument or loaded from `),I3e=a("code"),RCr=o("pretrained_model_name_or_path"),SCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=a("code"),PCr=o("pretrained_model_name_or_path"),$Cr=o(":"),ICr=l(),ue=a("ul"),RC=a("li"),D3e=a("strong"),jCr=o("albert"),DCr=o(" \u2014 "),gV=a("a"),NCr=o("FlaxAlbertForMaskedLM"),qCr=o(" (ALBERT model)"),OCr=l(),SC=a("li"),N3e=a("strong"),GCr=o("bart"),XCr=o(" \u2014 "),hV=a("a"),VCr=o("FlaxBartForConditionalGeneration"),zCr=o(" (BART model)"),WCr=l(),PC=a("li"),q3e=a("strong"),QCr=o("bert"),HCr=o(" \u2014 "),pV=a("a"),UCr=o("FlaxBertForMaskedLM"),JCr=o(" (BERT model)"),YCr=l(),$C=a("li"),O3e=a("strong"),KCr=o("big_bird"),ZCr=o(" \u2014 "),_V=a("a"),eMr=o("FlaxBigBirdForMaskedLM"),oMr=o(" (BigBird model)"),rMr=l(),IC=a("li"),G3e=a("strong"),tMr=o("distilbert"),aMr=o(" \u2014 "),uV=a("a"),nMr=o("FlaxDistilBertForMaskedLM"),sMr=o(" (DistilBERT model)"),lMr=l(),jC=a("li"),X3e=a("strong"),iMr=o("electra"),dMr=o(" \u2014 "),bV=a("a"),cMr=o("FlaxElectraForMaskedLM"),fMr=o(" (ELECTRA model)"),mMr=l(),DC=a("li"),V3e=a("strong"),gMr=o("mbart"),hMr=o(" \u2014 "),vV=a("a"),pMr=o("FlaxMBartForConditionalGeneration"),_Mr=o(" (mBART model)"),uMr=l(),NC=a("li"),z3e=a("strong"),bMr=o("roberta"),vMr=o(" \u2014 "),TV=a("a"),TMr=o("FlaxRobertaForMaskedLM"),FMr=o(" (RoBERTa model)"),CMr=l(),qC=a("li"),W3e=a("strong"),MMr=o("roformer"),EMr=o(" \u2014 "),FV=a("a"),yMr=o("FlaxRoFormerForMaskedLM"),wMr=o(" (RoFormer model)"),AMr=l(),OC=a("li"),Q3e=a("strong"),LMr=o("xlm-roberta"),BMr=o(" \u2014 "),CV=a("a"),xMr=o("FlaxXLMRobertaForMaskedLM"),kMr=o(" (XLM-RoBERTa model)"),RMr=l(),H3e=a("p"),SMr=o("Examples:"),PMr=l(),f(j0.$$.fragment),jke=l(),cf=a("h2"),GC=a("a"),U3e=a("span"),f(D0.$$.fragment),$Mr=l(),J3e=a("span"),IMr=o("FlaxAutoModelForSeq2SeqLM"),Dke=l(),Ir=a("div"),f(N0.$$.fragment),jMr=l(),ff=a("p"),DMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Y3e=a("code"),NMr=o("from_pretrained()"),qMr=o("class method or the "),K3e=a("code"),OMr=o("from_config()"),GMr=o(`class
method.`),XMr=l(),q0=a("p"),VMr=o("This class cannot be instantiated directly using "),Z3e=a("code"),zMr=o("__init__()"),WMr=o(" (throws an error)."),QMr=l(),xt=a("div"),f(O0.$$.fragment),HMr=l(),e5e=a("p"),UMr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JMr=l(),mf=a("p"),YMr=o(`Note:
Loading a model from its configuration file does `),o5e=a("strong"),KMr=o("not"),ZMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),r5e=a("code"),e4r=o("from_pretrained()"),o4r=o("to load the model weights."),r4r=l(),t5e=a("p"),t4r=o("Examples:"),a4r=l(),f(G0.$$.fragment),n4r=l(),ko=a("div"),f(X0.$$.fragment),s4r=l(),a5e=a("p"),l4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),i4r=l(),Sn=a("p"),d4r=o("The model class to instantiate is selected based on the "),n5e=a("code"),c4r=o("model_type"),f4r=o(` property of the config object (either
passed as an argument or loaded from `),s5e=a("code"),m4r=o("pretrained_model_name_or_path"),g4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l5e=a("code"),h4r=o("pretrained_model_name_or_path"),p4r=o(":"),_4r=l(),Ce=a("ul"),XC=a("li"),i5e=a("strong"),u4r=o("bart"),b4r=o(" \u2014 "),MV=a("a"),v4r=o("FlaxBartForConditionalGeneration"),T4r=o(" (BART model)"),F4r=l(),VC=a("li"),d5e=a("strong"),C4r=o("blenderbot"),M4r=o(" \u2014 "),EV=a("a"),E4r=o("FlaxBlenderbotForConditionalGeneration"),y4r=o(" (Blenderbot model)"),w4r=l(),zC=a("li"),c5e=a("strong"),A4r=o("blenderbot-small"),L4r=o(" \u2014 "),yV=a("a"),B4r=o("FlaxBlenderbotSmallForConditionalGeneration"),x4r=o(" (BlenderbotSmall model)"),k4r=l(),WC=a("li"),f5e=a("strong"),R4r=o("encoder-decoder"),S4r=o(" \u2014 "),wV=a("a"),P4r=o("FlaxEncoderDecoderModel"),$4r=o(" (Encoder decoder model)"),I4r=l(),QC=a("li"),m5e=a("strong"),j4r=o("marian"),D4r=o(" \u2014 "),AV=a("a"),N4r=o("FlaxMarianMTModel"),q4r=o(" (Marian model)"),O4r=l(),HC=a("li"),g5e=a("strong"),G4r=o("mbart"),X4r=o(" \u2014 "),LV=a("a"),V4r=o("FlaxMBartForConditionalGeneration"),z4r=o(" (mBART model)"),W4r=l(),UC=a("li"),h5e=a("strong"),Q4r=o("mt5"),H4r=o(" \u2014 "),BV=a("a"),U4r=o("FlaxMT5ForConditionalGeneration"),J4r=o(" (mT5 model)"),Y4r=l(),JC=a("li"),p5e=a("strong"),K4r=o("pegasus"),Z4r=o(" \u2014 "),xV=a("a"),eEr=o("FlaxPegasusForConditionalGeneration"),oEr=o(" (Pegasus model)"),rEr=l(),YC=a("li"),_5e=a("strong"),tEr=o("t5"),aEr=o(" \u2014 "),kV=a("a"),nEr=o("FlaxT5ForConditionalGeneration"),sEr=o(" (T5 model)"),lEr=l(),u5e=a("p"),iEr=o("Examples:"),dEr=l(),f(V0.$$.fragment),Nke=l(),gf=a("h2"),KC=a("a"),b5e=a("span"),f(z0.$$.fragment),cEr=l(),v5e=a("span"),fEr=o("FlaxAutoModelForSequenceClassification"),qke=l(),jr=a("div"),f(W0.$$.fragment),mEr=l(),hf=a("p"),gEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),T5e=a("code"),hEr=o("from_pretrained()"),pEr=o("class method or the "),F5e=a("code"),_Er=o("from_config()"),uEr=o(`class
method.`),bEr=l(),Q0=a("p"),vEr=o("This class cannot be instantiated directly using "),C5e=a("code"),TEr=o("__init__()"),FEr=o(" (throws an error)."),CEr=l(),kt=a("div"),f(H0.$$.fragment),MEr=l(),M5e=a("p"),EEr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yEr=l(),pf=a("p"),wEr=o(`Note:
Loading a model from its configuration file does `),E5e=a("strong"),AEr=o("not"),LEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),y5e=a("code"),BEr=o("from_pretrained()"),xEr=o("to load the model weights."),kEr=l(),w5e=a("p"),REr=o("Examples:"),SEr=l(),f(U0.$$.fragment),PEr=l(),Ro=a("div"),f(J0.$$.fragment),$Er=l(),A5e=a("p"),IEr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jEr=l(),Pn=a("p"),DEr=o("The model class to instantiate is selected based on the "),L5e=a("code"),NEr=o("model_type"),qEr=o(` property of the config object (either
passed as an argument or loaded from `),B5e=a("code"),OEr=o("pretrained_model_name_or_path"),GEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=a("code"),XEr=o("pretrained_model_name_or_path"),VEr=o(":"),zEr=l(),be=a("ul"),ZC=a("li"),k5e=a("strong"),WEr=o("albert"),QEr=o(" \u2014 "),RV=a("a"),HEr=o("FlaxAlbertForSequenceClassification"),UEr=o(" (ALBERT model)"),JEr=l(),eM=a("li"),R5e=a("strong"),YEr=o("bart"),KEr=o(" \u2014 "),SV=a("a"),ZEr=o("FlaxBartForSequenceClassification"),eyr=o(" (BART model)"),oyr=l(),oM=a("li"),S5e=a("strong"),ryr=o("bert"),tyr=o(" \u2014 "),PV=a("a"),ayr=o("FlaxBertForSequenceClassification"),nyr=o(" (BERT model)"),syr=l(),rM=a("li"),P5e=a("strong"),lyr=o("big_bird"),iyr=o(" \u2014 "),$V=a("a"),dyr=o("FlaxBigBirdForSequenceClassification"),cyr=o(" (BigBird model)"),fyr=l(),tM=a("li"),$5e=a("strong"),myr=o("distilbert"),gyr=o(" \u2014 "),IV=a("a"),hyr=o("FlaxDistilBertForSequenceClassification"),pyr=o(" (DistilBERT model)"),_yr=l(),aM=a("li"),I5e=a("strong"),uyr=o("electra"),byr=o(" \u2014 "),jV=a("a"),vyr=o("FlaxElectraForSequenceClassification"),Tyr=o(" (ELECTRA model)"),Fyr=l(),nM=a("li"),j5e=a("strong"),Cyr=o("mbart"),Myr=o(" \u2014 "),DV=a("a"),Eyr=o("FlaxMBartForSequenceClassification"),yyr=o(" (mBART model)"),wyr=l(),sM=a("li"),D5e=a("strong"),Ayr=o("roberta"),Lyr=o(" \u2014 "),NV=a("a"),Byr=o("FlaxRobertaForSequenceClassification"),xyr=o(" (RoBERTa model)"),kyr=l(),lM=a("li"),N5e=a("strong"),Ryr=o("roformer"),Syr=o(" \u2014 "),qV=a("a"),Pyr=o("FlaxRoFormerForSequenceClassification"),$yr=o(" (RoFormer model)"),Iyr=l(),iM=a("li"),q5e=a("strong"),jyr=o("xlm-roberta"),Dyr=o(" \u2014 "),OV=a("a"),Nyr=o("FlaxXLMRobertaForSequenceClassification"),qyr=o(" (XLM-RoBERTa model)"),Oyr=l(),O5e=a("p"),Gyr=o("Examples:"),Xyr=l(),f(Y0.$$.fragment),Oke=l(),_f=a("h2"),dM=a("a"),G5e=a("span"),f(K0.$$.fragment),Vyr=l(),X5e=a("span"),zyr=o("FlaxAutoModelForQuestionAnswering"),Gke=l(),Dr=a("div"),f(Z0.$$.fragment),Wyr=l(),uf=a("p"),Qyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),V5e=a("code"),Hyr=o("from_pretrained()"),Uyr=o("class method or the "),z5e=a("code"),Jyr=o("from_config()"),Yyr=o(`class
method.`),Kyr=l(),eL=a("p"),Zyr=o("This class cannot be instantiated directly using "),W5e=a("code"),ewr=o("__init__()"),owr=o(" (throws an error)."),rwr=l(),Rt=a("div"),f(oL.$$.fragment),twr=l(),Q5e=a("p"),awr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nwr=l(),bf=a("p"),swr=o(`Note:
Loading a model from its configuration file does `),H5e=a("strong"),lwr=o("not"),iwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),U5e=a("code"),dwr=o("from_pretrained()"),cwr=o("to load the model weights."),fwr=l(),J5e=a("p"),mwr=o("Examples:"),gwr=l(),f(rL.$$.fragment),hwr=l(),So=a("div"),f(tL.$$.fragment),pwr=l(),Y5e=a("p"),_wr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uwr=l(),$n=a("p"),bwr=o("The model class to instantiate is selected based on the "),K5e=a("code"),vwr=o("model_type"),Twr=o(` property of the config object (either
passed as an argument or loaded from `),Z5e=a("code"),Fwr=o("pretrained_model_name_or_path"),Cwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=a("code"),Mwr=o("pretrained_model_name_or_path"),Ewr=o(":"),ywr=l(),ve=a("ul"),cM=a("li"),o2e=a("strong"),wwr=o("albert"),Awr=o(" \u2014 "),GV=a("a"),Lwr=o("FlaxAlbertForQuestionAnswering"),Bwr=o(" (ALBERT model)"),xwr=l(),fM=a("li"),r2e=a("strong"),kwr=o("bart"),Rwr=o(" \u2014 "),XV=a("a"),Swr=o("FlaxBartForQuestionAnswering"),Pwr=o(" (BART model)"),$wr=l(),mM=a("li"),t2e=a("strong"),Iwr=o("bert"),jwr=o(" \u2014 "),VV=a("a"),Dwr=o("FlaxBertForQuestionAnswering"),Nwr=o(" (BERT model)"),qwr=l(),gM=a("li"),a2e=a("strong"),Owr=o("big_bird"),Gwr=o(" \u2014 "),zV=a("a"),Xwr=o("FlaxBigBirdForQuestionAnswering"),Vwr=o(" (BigBird model)"),zwr=l(),hM=a("li"),n2e=a("strong"),Wwr=o("distilbert"),Qwr=o(" \u2014 "),WV=a("a"),Hwr=o("FlaxDistilBertForQuestionAnswering"),Uwr=o(" (DistilBERT model)"),Jwr=l(),pM=a("li"),s2e=a("strong"),Ywr=o("electra"),Kwr=o(" \u2014 "),QV=a("a"),Zwr=o("FlaxElectraForQuestionAnswering"),e6r=o(" (ELECTRA model)"),o6r=l(),_M=a("li"),l2e=a("strong"),r6r=o("mbart"),t6r=o(" \u2014 "),HV=a("a"),a6r=o("FlaxMBartForQuestionAnswering"),n6r=o(" (mBART model)"),s6r=l(),uM=a("li"),i2e=a("strong"),l6r=o("roberta"),i6r=o(" \u2014 "),UV=a("a"),d6r=o("FlaxRobertaForQuestionAnswering"),c6r=o(" (RoBERTa model)"),f6r=l(),bM=a("li"),d2e=a("strong"),m6r=o("roformer"),g6r=o(" \u2014 "),JV=a("a"),h6r=o("FlaxRoFormerForQuestionAnswering"),p6r=o(" (RoFormer model)"),_6r=l(),vM=a("li"),c2e=a("strong"),u6r=o("xlm-roberta"),b6r=o(" \u2014 "),YV=a("a"),v6r=o("FlaxXLMRobertaForQuestionAnswering"),T6r=o(" (XLM-RoBERTa model)"),F6r=l(),f2e=a("p"),C6r=o("Examples:"),M6r=l(),f(aL.$$.fragment),Xke=l(),vf=a("h2"),TM=a("a"),m2e=a("span"),f(nL.$$.fragment),E6r=l(),g2e=a("span"),y6r=o("FlaxAutoModelForTokenClassification"),Vke=l(),Nr=a("div"),f(sL.$$.fragment),w6r=l(),Tf=a("p"),A6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),h2e=a("code"),L6r=o("from_pretrained()"),B6r=o("class method or the "),p2e=a("code"),x6r=o("from_config()"),k6r=o(`class
method.`),R6r=l(),lL=a("p"),S6r=o("This class cannot be instantiated directly using "),_2e=a("code"),P6r=o("__init__()"),$6r=o(" (throws an error)."),I6r=l(),St=a("div"),f(iL.$$.fragment),j6r=l(),u2e=a("p"),D6r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),N6r=l(),Ff=a("p"),q6r=o(`Note:
Loading a model from its configuration file does `),b2e=a("strong"),O6r=o("not"),G6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),v2e=a("code"),X6r=o("from_pretrained()"),V6r=o("to load the model weights."),z6r=l(),T2e=a("p"),W6r=o("Examples:"),Q6r=l(),f(dL.$$.fragment),H6r=l(),Po=a("div"),f(cL.$$.fragment),U6r=l(),F2e=a("p"),J6r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Y6r=l(),In=a("p"),K6r=o("The model class to instantiate is selected based on the "),C2e=a("code"),Z6r=o("model_type"),eAr=o(` property of the config object (either
passed as an argument or loaded from `),M2e=a("code"),oAr=o("pretrained_model_name_or_path"),rAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=a("code"),tAr=o("pretrained_model_name_or_path"),aAr=o(":"),nAr=l(),Re=a("ul"),FM=a("li"),y2e=a("strong"),sAr=o("albert"),lAr=o(" \u2014 "),KV=a("a"),iAr=o("FlaxAlbertForTokenClassification"),dAr=o(" (ALBERT model)"),cAr=l(),CM=a("li"),w2e=a("strong"),fAr=o("bert"),mAr=o(" \u2014 "),ZV=a("a"),gAr=o("FlaxBertForTokenClassification"),hAr=o(" (BERT model)"),pAr=l(),MM=a("li"),A2e=a("strong"),_Ar=o("big_bird"),uAr=o(" \u2014 "),ez=a("a"),bAr=o("FlaxBigBirdForTokenClassification"),vAr=o(" (BigBird model)"),TAr=l(),EM=a("li"),L2e=a("strong"),FAr=o("distilbert"),CAr=o(" \u2014 "),oz=a("a"),MAr=o("FlaxDistilBertForTokenClassification"),EAr=o(" (DistilBERT model)"),yAr=l(),yM=a("li"),B2e=a("strong"),wAr=o("electra"),AAr=o(" \u2014 "),rz=a("a"),LAr=o("FlaxElectraForTokenClassification"),BAr=o(" (ELECTRA model)"),xAr=l(),wM=a("li"),x2e=a("strong"),kAr=o("roberta"),RAr=o(" \u2014 "),tz=a("a"),SAr=o("FlaxRobertaForTokenClassification"),PAr=o(" (RoBERTa model)"),$Ar=l(),AM=a("li"),k2e=a("strong"),IAr=o("roformer"),jAr=o(" \u2014 "),az=a("a"),DAr=o("FlaxRoFormerForTokenClassification"),NAr=o(" (RoFormer model)"),qAr=l(),LM=a("li"),R2e=a("strong"),OAr=o("xlm-roberta"),GAr=o(" \u2014 "),nz=a("a"),XAr=o("FlaxXLMRobertaForTokenClassification"),VAr=o(" (XLM-RoBERTa model)"),zAr=l(),S2e=a("p"),WAr=o("Examples:"),QAr=l(),f(fL.$$.fragment),zke=l(),Cf=a("h2"),BM=a("a"),P2e=a("span"),f(mL.$$.fragment),HAr=l(),$2e=a("span"),UAr=o("FlaxAutoModelForMultipleChoice"),Wke=l(),qr=a("div"),f(gL.$$.fragment),JAr=l(),Mf=a("p"),YAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),I2e=a("code"),KAr=o("from_pretrained()"),ZAr=o("class method or the "),j2e=a("code"),e0r=o("from_config()"),o0r=o(`class
method.`),r0r=l(),hL=a("p"),t0r=o("This class cannot be instantiated directly using "),D2e=a("code"),a0r=o("__init__()"),n0r=o(" (throws an error)."),s0r=l(),Pt=a("div"),f(pL.$$.fragment),l0r=l(),N2e=a("p"),i0r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),d0r=l(),Ef=a("p"),c0r=o(`Note:
Loading a model from its configuration file does `),q2e=a("strong"),f0r=o("not"),m0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),O2e=a("code"),g0r=o("from_pretrained()"),h0r=o("to load the model weights."),p0r=l(),G2e=a("p"),_0r=o("Examples:"),u0r=l(),f(_L.$$.fragment),b0r=l(),$o=a("div"),f(uL.$$.fragment),v0r=l(),X2e=a("p"),T0r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),F0r=l(),jn=a("p"),C0r=o("The model class to instantiate is selected based on the "),V2e=a("code"),M0r=o("model_type"),E0r=o(` property of the config object (either
passed as an argument or loaded from `),z2e=a("code"),y0r=o("pretrained_model_name_or_path"),w0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=a("code"),A0r=o("pretrained_model_name_or_path"),L0r=o(":"),B0r=l(),Se=a("ul"),xM=a("li"),Q2e=a("strong"),x0r=o("albert"),k0r=o(" \u2014 "),sz=a("a"),R0r=o("FlaxAlbertForMultipleChoice"),S0r=o(" (ALBERT model)"),P0r=l(),kM=a("li"),H2e=a("strong"),$0r=o("bert"),I0r=o(" \u2014 "),lz=a("a"),j0r=o("FlaxBertForMultipleChoice"),D0r=o(" (BERT model)"),N0r=l(),RM=a("li"),U2e=a("strong"),q0r=o("big_bird"),O0r=o(" \u2014 "),iz=a("a"),G0r=o("FlaxBigBirdForMultipleChoice"),X0r=o(" (BigBird model)"),V0r=l(),SM=a("li"),J2e=a("strong"),z0r=o("distilbert"),W0r=o(" \u2014 "),dz=a("a"),Q0r=o("FlaxDistilBertForMultipleChoice"),H0r=o(" (DistilBERT model)"),U0r=l(),PM=a("li"),Y2e=a("strong"),J0r=o("electra"),Y0r=o(" \u2014 "),cz=a("a"),K0r=o("FlaxElectraForMultipleChoice"),Z0r=o(" (ELECTRA model)"),eLr=l(),$M=a("li"),K2e=a("strong"),oLr=o("roberta"),rLr=o(" \u2014 "),fz=a("a"),tLr=o("FlaxRobertaForMultipleChoice"),aLr=o(" (RoBERTa model)"),nLr=l(),IM=a("li"),Z2e=a("strong"),sLr=o("roformer"),lLr=o(" \u2014 "),mz=a("a"),iLr=o("FlaxRoFormerForMultipleChoice"),dLr=o(" (RoFormer model)"),cLr=l(),jM=a("li"),eve=a("strong"),fLr=o("xlm-roberta"),mLr=o(" \u2014 "),gz=a("a"),gLr=o("FlaxXLMRobertaForMultipleChoice"),hLr=o(" (XLM-RoBERTa model)"),pLr=l(),ove=a("p"),_Lr=o("Examples:"),uLr=l(),f(bL.$$.fragment),Qke=l(),yf=a("h2"),DM=a("a"),rve=a("span"),f(vL.$$.fragment),bLr=l(),tve=a("span"),vLr=o("FlaxAutoModelForNextSentencePrediction"),Hke=l(),Or=a("div"),f(TL.$$.fragment),TLr=l(),wf=a("p"),FLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ave=a("code"),CLr=o("from_pretrained()"),MLr=o("class method or the "),nve=a("code"),ELr=o("from_config()"),yLr=o(`class
method.`),wLr=l(),FL=a("p"),ALr=o("This class cannot be instantiated directly using "),sve=a("code"),LLr=o("__init__()"),BLr=o(" (throws an error)."),xLr=l(),$t=a("div"),f(CL.$$.fragment),kLr=l(),lve=a("p"),RLr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),SLr=l(),Af=a("p"),PLr=o(`Note:
Loading a model from its configuration file does `),ive=a("strong"),$Lr=o("not"),ILr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dve=a("code"),jLr=o("from_pretrained()"),DLr=o("to load the model weights."),NLr=l(),cve=a("p"),qLr=o("Examples:"),OLr=l(),f(ML.$$.fragment),GLr=l(),Io=a("div"),f(EL.$$.fragment),XLr=l(),fve=a("p"),VLr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zLr=l(),Dn=a("p"),WLr=o("The model class to instantiate is selected based on the "),mve=a("code"),QLr=o("model_type"),HLr=o(` property of the config object (either
passed as an argument or loaded from `),gve=a("code"),ULr=o("pretrained_model_name_or_path"),JLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=a("code"),YLr=o("pretrained_model_name_or_path"),KLr=o(":"),ZLr=l(),pve=a("ul"),NM=a("li"),_ve=a("strong"),e7r=o("bert"),o7r=o(" \u2014 "),hz=a("a"),r7r=o("FlaxBertForNextSentencePrediction"),t7r=o(" (BERT model)"),a7r=l(),uve=a("p"),n7r=o("Examples:"),s7r=l(),f(yL.$$.fragment),Uke=l(),Lf=a("h2"),qM=a("a"),bve=a("span"),f(wL.$$.fragment),l7r=l(),vve=a("span"),i7r=o("FlaxAutoModelForImageClassification"),Jke=l(),Gr=a("div"),f(AL.$$.fragment),d7r=l(),Bf=a("p"),c7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Tve=a("code"),f7r=o("from_pretrained()"),m7r=o("class method or the "),Fve=a("code"),g7r=o("from_config()"),h7r=o(`class
method.`),p7r=l(),LL=a("p"),_7r=o("This class cannot be instantiated directly using "),Cve=a("code"),u7r=o("__init__()"),b7r=o(" (throws an error)."),v7r=l(),It=a("div"),f(BL.$$.fragment),T7r=l(),Mve=a("p"),F7r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),C7r=l(),xf=a("p"),M7r=o(`Note:
Loading a model from its configuration file does `),Eve=a("strong"),E7r=o("not"),y7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yve=a("code"),w7r=o("from_pretrained()"),A7r=o("to load the model weights."),L7r=l(),wve=a("p"),B7r=o("Examples:"),x7r=l(),f(xL.$$.fragment),k7r=l(),jo=a("div"),f(kL.$$.fragment),R7r=l(),Ave=a("p"),S7r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),P7r=l(),Nn=a("p"),$7r=o("The model class to instantiate is selected based on the "),Lve=a("code"),I7r=o("model_type"),j7r=o(` property of the config object (either
passed as an argument or loaded from `),Bve=a("code"),D7r=o("pretrained_model_name_or_path"),N7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=a("code"),q7r=o("pretrained_model_name_or_path"),O7r=o(":"),G7r=l(),RL=a("ul"),OM=a("li"),kve=a("strong"),X7r=o("beit"),V7r=o(" \u2014 "),pz=a("a"),z7r=o("FlaxBeitForImageClassification"),W7r=o(" (BEiT model)"),Q7r=l(),GM=a("li"),Rve=a("strong"),H7r=o("vit"),U7r=o(" \u2014 "),_z=a("a"),J7r=o("FlaxViTForImageClassification"),Y7r=o(" (ViT model)"),K7r=l(),Sve=a("p"),Z7r=o("Examples:"),e9r=l(),f(SL.$$.fragment),Yke=l(),kf=a("h2"),XM=a("a"),Pve=a("span"),f(PL.$$.fragment),o9r=l(),$ve=a("span"),r9r=o("FlaxAutoModelForVision2Seq"),Kke=l(),Xr=a("div"),f($L.$$.fragment),t9r=l(),Rf=a("p"),a9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Ive=a("code"),n9r=o("from_pretrained()"),s9r=o("class method or the "),jve=a("code"),l9r=o("from_config()"),i9r=o(`class
method.`),d9r=l(),IL=a("p"),c9r=o("This class cannot be instantiated directly using "),Dve=a("code"),f9r=o("__init__()"),m9r=o(" (throws an error)."),g9r=l(),jt=a("div"),f(jL.$$.fragment),h9r=l(),Nve=a("p"),p9r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_9r=l(),Sf=a("p"),u9r=o(`Note:
Loading a model from its configuration file does `),qve=a("strong"),b9r=o("not"),v9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ove=a("code"),T9r=o("from_pretrained()"),F9r=o("to load the model weights."),C9r=l(),Gve=a("p"),M9r=o("Examples:"),E9r=l(),f(DL.$$.fragment),y9r=l(),Do=a("div"),f(NL.$$.fragment),w9r=l(),Xve=a("p"),A9r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),L9r=l(),qn=a("p"),B9r=o("The model class to instantiate is selected based on the "),Vve=a("code"),x9r=o("model_type"),k9r=o(` property of the config object (either
passed as an argument or loaded from `),zve=a("code"),R9r=o("pretrained_model_name_or_path"),S9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=a("code"),P9r=o("pretrained_model_name_or_path"),$9r=o(":"),I9r=l(),Qve=a("ul"),VM=a("li"),Hve=a("strong"),j9r=o("vision-encoder-decoder"),D9r=o(" \u2014 "),uz=a("a"),N9r=o("FlaxVisionEncoderDecoderModel"),q9r=o(" (Vision Encoder decoder model)"),O9r=l(),Uve=a("p"),G9r=o("Examples:"),X9r=l(),f(qL.$$.fragment),this.h()},l(d){const u=_Tt('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),Pe=i(d),de=n(d,"H1",{class:!0});var OL=s(de);ge=n(OL,"A",{id:!0,class:!0,href:!0});var Jve=s(ge);io=n(Jve,"SPAN",{});var Yve=s(io);m(fe.$$.fragment,Yve),Yve.forEach(t),Jve.forEach(t),Te=i(OL),Vo=n(OL,"SPAN",{});var z9r=s(Vo);Ii=r(z9r,"Auto Classes"),z9r.forEach(t),OL.forEach(t),$f=i(d),ca=n(d,"P",{});var eRe=s(ca);ji=r(eRe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=n(eRe,"CODE",{});var W9r=s(Di);z4=r(W9r,"from_pretrained()"),W9r.forEach(t),If=r(eRe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),eRe.forEach(t),Le=i(d),co=n(d,"P",{});var zM=s(co);Ni=r(zM,"Instantiating one of "),On=n(zM,"A",{href:!0});var Q9r=s(On);W4=r(Q9r,"AutoConfig"),Q9r.forEach(t),Gn=r(zM,", "),Xn=n(zM,"A",{href:!0});var H9r=s(Xn);Q4=r(H9r,"AutoModel"),H9r.forEach(t),qi=r(zM,`, and
`),Vn=n(zM,"A",{href:!0});var U9r=s(Vn);H4=r(U9r,"AutoTokenizer"),U9r.forEach(t),Oi=r(zM," will directly create a class of the relevant architecture. For instance"),zM.forEach(t),jf=i(d),m(Na.$$.fragment,d),fo=i(d),he=n(d,"P",{});var oRe=s(he);D7=r(oRe,"will create a model that is an instance of "),Gi=n(oRe,"A",{href:!0});var J9r=s(Gi);N7=r(J9r,"BertModel"),J9r.forEach(t),q7=r(oRe,"."),oRe.forEach(t),zo=i(d),qa=n(d,"P",{});var rRe=s(qa);O7=r(rRe,"There is one class of "),Df=n(rRe,"CODE",{});var Y9r=s(Df);G7=r(Y9r,"AutoModel"),Y9r.forEach(t),mPe=r(rRe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),rRe.forEach(t),KBe=i(d),Xi=n(d,"H2",{class:!0});var tRe=s(Xi);Nf=n(tRe,"A",{id:!0,class:!0,href:!0});var K9r=s(Nf);cQ=n(K9r,"SPAN",{});var Z9r=s(cQ);m(U4.$$.fragment,Z9r),Z9r.forEach(t),K9r.forEach(t),gPe=i(tRe),fQ=n(tRe,"SPAN",{});var eBr=s(fQ);hPe=r(eBr,"Extending the Auto Classes"),eBr.forEach(t),tRe.forEach(t),ZBe=i(d),zn=n(d,"P",{});var bz=s(zn);pPe=r(bz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),mQ=n(bz,"CODE",{});var oBr=s(mQ);_Pe=r(oBr,"NewModel"),oBr.forEach(t),uPe=r(bz,", make sure you have a "),gQ=n(bz,"CODE",{});var rBr=s(gQ);bPe=r(rBr,"NewModelConfig"),rBr.forEach(t),vPe=r(bz,` then you can add those to the auto
classes like this:`),bz.forEach(t),exe=i(d),m(J4.$$.fragment,d),oxe=i(d),X7=n(d,"P",{});var tBr=s(X7);TPe=r(tBr,"You will then be able to use the auto classes like you would usually do!"),tBr.forEach(t),rxe=i(d),m(qf.$$.fragment,d),txe=i(d),Vi=n(d,"H2",{class:!0});var aRe=s(Vi);Of=n(aRe,"A",{id:!0,class:!0,href:!0});var aBr=s(Of);hQ=n(aBr,"SPAN",{});var nBr=s(hQ);m(Y4.$$.fragment,nBr),nBr.forEach(t),aBr.forEach(t),FPe=i(aRe),pQ=n(aRe,"SPAN",{});var sBr=s(pQ);CPe=r(sBr,"AutoConfig"),sBr.forEach(t),aRe.forEach(t),axe=i(d),Wo=n(d,"DIV",{class:!0});var Gs=s(Wo);m(K4.$$.fragment,Gs),MPe=i(Gs),Z4=n(Gs,"P",{});var nRe=s(Z4);EPe=r(nRe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),V7=n(nRe,"A",{href:!0});var lBr=s(V7);yPe=r(lBr,"from_pretrained()"),lBr.forEach(t),wPe=r(nRe," class method."),nRe.forEach(t),APe=i(Gs),eE=n(Gs,"P",{});var sRe=s(eE);LPe=r(sRe,"This class cannot be instantiated directly using "),_Q=n(sRe,"CODE",{});var iBr=s(_Q);BPe=r(iBr,"__init__()"),iBr.forEach(t),xPe=r(sRe," (throws an error)."),sRe.forEach(t),kPe=i(Gs),mo=n(Gs,"DIV",{class:!0});var ma=s(mo);m(oE.$$.fragment,ma),RPe=i(ma),uQ=n(ma,"P",{});var dBr=s(uQ);SPe=r(dBr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),dBr.forEach(t),PPe=i(ma),zi=n(ma,"P",{});var vz=s(zi);$Pe=r(vz,"The configuration class to instantiate is selected based on the "),bQ=n(vz,"CODE",{});var cBr=s(bQ);IPe=r(cBr,"model_type"),cBr.forEach(t),jPe=r(vz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),vQ=n(vz,"CODE",{});var fBr=s(vQ);DPe=r(fBr,"pretrained_model_name_or_path"),fBr.forEach(t),NPe=r(vz,":"),vz.forEach(t),qPe=i(ma),v=n(ma,"UL",{});var T=s(v);Gf=n(T,"LI",{});var Kve=s(Gf);TQ=n(Kve,"STRONG",{});var mBr=s(TQ);OPe=r(mBr,"albert"),mBr.forEach(t),GPe=r(Kve," \u2014 "),z7=n(Kve,"A",{href:!0});var gBr=s(z7);XPe=r(gBr,"AlbertConfig"),gBr.forEach(t),VPe=r(Kve," (ALBERT model)"),Kve.forEach(t),zPe=i(T),Xf=n(T,"LI",{});var Zve=s(Xf);FQ=n(Zve,"STRONG",{});var hBr=s(FQ);WPe=r(hBr,"bart"),hBr.forEach(t),QPe=r(Zve," \u2014 "),W7=n(Zve,"A",{href:!0});var pBr=s(W7);HPe=r(pBr,"BartConfig"),pBr.forEach(t),UPe=r(Zve," (BART model)"),Zve.forEach(t),JPe=i(T),Vf=n(T,"LI",{});var eTe=s(Vf);CQ=n(eTe,"STRONG",{});var _Br=s(CQ);YPe=r(_Br,"beit"),_Br.forEach(t),KPe=r(eTe," \u2014 "),Q7=n(eTe,"A",{href:!0});var uBr=s(Q7);ZPe=r(uBr,"BeitConfig"),uBr.forEach(t),e$e=r(eTe," (BEiT model)"),eTe.forEach(t),o$e=i(T),zf=n(T,"LI",{});var oTe=s(zf);MQ=n(oTe,"STRONG",{});var bBr=s(MQ);r$e=r(bBr,"bert"),bBr.forEach(t),t$e=r(oTe," \u2014 "),H7=n(oTe,"A",{href:!0});var vBr=s(H7);a$e=r(vBr,"BertConfig"),vBr.forEach(t),n$e=r(oTe," (BERT model)"),oTe.forEach(t),s$e=i(T),Wf=n(T,"LI",{});var rTe=s(Wf);EQ=n(rTe,"STRONG",{});var TBr=s(EQ);l$e=r(TBr,"bert-generation"),TBr.forEach(t),i$e=r(rTe," \u2014 "),U7=n(rTe,"A",{href:!0});var FBr=s(U7);d$e=r(FBr,"BertGenerationConfig"),FBr.forEach(t),c$e=r(rTe," (Bert Generation model)"),rTe.forEach(t),f$e=i(T),Qf=n(T,"LI",{});var tTe=s(Qf);yQ=n(tTe,"STRONG",{});var CBr=s(yQ);m$e=r(CBr,"big_bird"),CBr.forEach(t),g$e=r(tTe," \u2014 "),J7=n(tTe,"A",{href:!0});var MBr=s(J7);h$e=r(MBr,"BigBirdConfig"),MBr.forEach(t),p$e=r(tTe," (BigBird model)"),tTe.forEach(t),_$e=i(T),Hf=n(T,"LI",{});var aTe=s(Hf);wQ=n(aTe,"STRONG",{});var EBr=s(wQ);u$e=r(EBr,"bigbird_pegasus"),EBr.forEach(t),b$e=r(aTe," \u2014 "),Y7=n(aTe,"A",{href:!0});var yBr=s(Y7);v$e=r(yBr,"BigBirdPegasusConfig"),yBr.forEach(t),T$e=r(aTe," (BigBirdPegasus model)"),aTe.forEach(t),F$e=i(T),Uf=n(T,"LI",{});var nTe=s(Uf);AQ=n(nTe,"STRONG",{});var wBr=s(AQ);C$e=r(wBr,"blenderbot"),wBr.forEach(t),M$e=r(nTe," \u2014 "),K7=n(nTe,"A",{href:!0});var ABr=s(K7);E$e=r(ABr,"BlenderbotConfig"),ABr.forEach(t),y$e=r(nTe," (Blenderbot model)"),nTe.forEach(t),w$e=i(T),Jf=n(T,"LI",{});var sTe=s(Jf);LQ=n(sTe,"STRONG",{});var LBr=s(LQ);A$e=r(LBr,"blenderbot-small"),LBr.forEach(t),L$e=r(sTe," \u2014 "),Z7=n(sTe,"A",{href:!0});var BBr=s(Z7);B$e=r(BBr,"BlenderbotSmallConfig"),BBr.forEach(t),x$e=r(sTe," (BlenderbotSmall model)"),sTe.forEach(t),k$e=i(T),Yf=n(T,"LI",{});var lTe=s(Yf);BQ=n(lTe,"STRONG",{});var xBr=s(BQ);R$e=r(xBr,"camembert"),xBr.forEach(t),S$e=r(lTe," \u2014 "),e9=n(lTe,"A",{href:!0});var kBr=s(e9);P$e=r(kBr,"CamembertConfig"),kBr.forEach(t),$$e=r(lTe," (CamemBERT model)"),lTe.forEach(t),I$e=i(T),Kf=n(T,"LI",{});var iTe=s(Kf);xQ=n(iTe,"STRONG",{});var RBr=s(xQ);j$e=r(RBr,"canine"),RBr.forEach(t),D$e=r(iTe," \u2014 "),o9=n(iTe,"A",{href:!0});var SBr=s(o9);N$e=r(SBr,"CanineConfig"),SBr.forEach(t),q$e=r(iTe," (Canine model)"),iTe.forEach(t),O$e=i(T),Zf=n(T,"LI",{});var dTe=s(Zf);kQ=n(dTe,"STRONG",{});var PBr=s(kQ);G$e=r(PBr,"clip"),PBr.forEach(t),X$e=r(dTe," \u2014 "),r9=n(dTe,"A",{href:!0});var $Br=s(r9);V$e=r($Br,"CLIPConfig"),$Br.forEach(t),z$e=r(dTe," (CLIP model)"),dTe.forEach(t),W$e=i(T),em=n(T,"LI",{});var cTe=s(em);RQ=n(cTe,"STRONG",{});var IBr=s(RQ);Q$e=r(IBr,"convbert"),IBr.forEach(t),H$e=r(cTe," \u2014 "),t9=n(cTe,"A",{href:!0});var jBr=s(t9);U$e=r(jBr,"ConvBertConfig"),jBr.forEach(t),J$e=r(cTe," (ConvBERT model)"),cTe.forEach(t),Y$e=i(T),om=n(T,"LI",{});var fTe=s(om);SQ=n(fTe,"STRONG",{});var DBr=s(SQ);K$e=r(DBr,"convnext"),DBr.forEach(t),Z$e=r(fTe," \u2014 "),a9=n(fTe,"A",{href:!0});var NBr=s(a9);eIe=r(NBr,"ConvNextConfig"),NBr.forEach(t),oIe=r(fTe," (ConvNext model)"),fTe.forEach(t),rIe=i(T),rm=n(T,"LI",{});var mTe=s(rm);PQ=n(mTe,"STRONG",{});var qBr=s(PQ);tIe=r(qBr,"ctrl"),qBr.forEach(t),aIe=r(mTe," \u2014 "),n9=n(mTe,"A",{href:!0});var OBr=s(n9);nIe=r(OBr,"CTRLConfig"),OBr.forEach(t),sIe=r(mTe," (CTRL model)"),mTe.forEach(t),lIe=i(T),tm=n(T,"LI",{});var gTe=s(tm);$Q=n(gTe,"STRONG",{});var GBr=s($Q);iIe=r(GBr,"data2vec-audio"),GBr.forEach(t),dIe=r(gTe," \u2014 "),s9=n(gTe,"A",{href:!0});var XBr=s(s9);cIe=r(XBr,"Data2VecAudioConfig"),XBr.forEach(t),fIe=r(gTe," (Data2VecAudio model)"),gTe.forEach(t),mIe=i(T),am=n(T,"LI",{});var hTe=s(am);IQ=n(hTe,"STRONG",{});var VBr=s(IQ);gIe=r(VBr,"data2vec-text"),VBr.forEach(t),hIe=r(hTe," \u2014 "),l9=n(hTe,"A",{href:!0});var zBr=s(l9);pIe=r(zBr,"Data2VecTextConfig"),zBr.forEach(t),_Ie=r(hTe," (Data2VecText model)"),hTe.forEach(t),uIe=i(T),nm=n(T,"LI",{});var pTe=s(nm);jQ=n(pTe,"STRONG",{});var WBr=s(jQ);bIe=r(WBr,"deberta"),WBr.forEach(t),vIe=r(pTe," \u2014 "),i9=n(pTe,"A",{href:!0});var QBr=s(i9);TIe=r(QBr,"DebertaConfig"),QBr.forEach(t),FIe=r(pTe," (DeBERTa model)"),pTe.forEach(t),CIe=i(T),sm=n(T,"LI",{});var _Te=s(sm);DQ=n(_Te,"STRONG",{});var HBr=s(DQ);MIe=r(HBr,"deberta-v2"),HBr.forEach(t),EIe=r(_Te," \u2014 "),d9=n(_Te,"A",{href:!0});var UBr=s(d9);yIe=r(UBr,"DebertaV2Config"),UBr.forEach(t),wIe=r(_Te," (DeBERTa-v2 model)"),_Te.forEach(t),AIe=i(T),lm=n(T,"LI",{});var uTe=s(lm);NQ=n(uTe,"STRONG",{});var JBr=s(NQ);LIe=r(JBr,"deit"),JBr.forEach(t),BIe=r(uTe," \u2014 "),c9=n(uTe,"A",{href:!0});var YBr=s(c9);xIe=r(YBr,"DeiTConfig"),YBr.forEach(t),kIe=r(uTe," (DeiT model)"),uTe.forEach(t),RIe=i(T),im=n(T,"LI",{});var bTe=s(im);qQ=n(bTe,"STRONG",{});var KBr=s(qQ);SIe=r(KBr,"detr"),KBr.forEach(t),PIe=r(bTe," \u2014 "),f9=n(bTe,"A",{href:!0});var ZBr=s(f9);$Ie=r(ZBr,"DetrConfig"),ZBr.forEach(t),IIe=r(bTe," (DETR model)"),bTe.forEach(t),jIe=i(T),dm=n(T,"LI",{});var vTe=s(dm);OQ=n(vTe,"STRONG",{});var exr=s(OQ);DIe=r(exr,"distilbert"),exr.forEach(t),NIe=r(vTe," \u2014 "),m9=n(vTe,"A",{href:!0});var oxr=s(m9);qIe=r(oxr,"DistilBertConfig"),oxr.forEach(t),OIe=r(vTe," (DistilBERT model)"),vTe.forEach(t),GIe=i(T),cm=n(T,"LI",{});var TTe=s(cm);GQ=n(TTe,"STRONG",{});var rxr=s(GQ);XIe=r(rxr,"dpr"),rxr.forEach(t),VIe=r(TTe," \u2014 "),g9=n(TTe,"A",{href:!0});var txr=s(g9);zIe=r(txr,"DPRConfig"),txr.forEach(t),WIe=r(TTe," (DPR model)"),TTe.forEach(t),QIe=i(T),fm=n(T,"LI",{});var FTe=s(fm);XQ=n(FTe,"STRONG",{});var axr=s(XQ);HIe=r(axr,"electra"),axr.forEach(t),UIe=r(FTe," \u2014 "),h9=n(FTe,"A",{href:!0});var nxr=s(h9);JIe=r(nxr,"ElectraConfig"),nxr.forEach(t),YIe=r(FTe," (ELECTRA model)"),FTe.forEach(t),KIe=i(T),mm=n(T,"LI",{});var CTe=s(mm);VQ=n(CTe,"STRONG",{});var sxr=s(VQ);ZIe=r(sxr,"encoder-decoder"),sxr.forEach(t),eje=r(CTe," \u2014 "),p9=n(CTe,"A",{href:!0});var lxr=s(p9);oje=r(lxr,"EncoderDecoderConfig"),lxr.forEach(t),rje=r(CTe," (Encoder decoder model)"),CTe.forEach(t),tje=i(T),gm=n(T,"LI",{});var MTe=s(gm);zQ=n(MTe,"STRONG",{});var ixr=s(zQ);aje=r(ixr,"flaubert"),ixr.forEach(t),nje=r(MTe," \u2014 "),_9=n(MTe,"A",{href:!0});var dxr=s(_9);sje=r(dxr,"FlaubertConfig"),dxr.forEach(t),lje=r(MTe," (FlauBERT model)"),MTe.forEach(t),ije=i(T),hm=n(T,"LI",{});var ETe=s(hm);WQ=n(ETe,"STRONG",{});var cxr=s(WQ);dje=r(cxr,"fnet"),cxr.forEach(t),cje=r(ETe," \u2014 "),u9=n(ETe,"A",{href:!0});var fxr=s(u9);fje=r(fxr,"FNetConfig"),fxr.forEach(t),mje=r(ETe," (FNet model)"),ETe.forEach(t),gje=i(T),pm=n(T,"LI",{});var yTe=s(pm);QQ=n(yTe,"STRONG",{});var mxr=s(QQ);hje=r(mxr,"fsmt"),mxr.forEach(t),pje=r(yTe," \u2014 "),b9=n(yTe,"A",{href:!0});var gxr=s(b9);_je=r(gxr,"FSMTConfig"),gxr.forEach(t),uje=r(yTe," (FairSeq Machine-Translation model)"),yTe.forEach(t),bje=i(T),_m=n(T,"LI",{});var wTe=s(_m);HQ=n(wTe,"STRONG",{});var hxr=s(HQ);vje=r(hxr,"funnel"),hxr.forEach(t),Tje=r(wTe," \u2014 "),v9=n(wTe,"A",{href:!0});var pxr=s(v9);Fje=r(pxr,"FunnelConfig"),pxr.forEach(t),Cje=r(wTe," (Funnel Transformer model)"),wTe.forEach(t),Mje=i(T),um=n(T,"LI",{});var ATe=s(um);UQ=n(ATe,"STRONG",{});var _xr=s(UQ);Eje=r(_xr,"gpt2"),_xr.forEach(t),yje=r(ATe," \u2014 "),T9=n(ATe,"A",{href:!0});var uxr=s(T9);wje=r(uxr,"GPT2Config"),uxr.forEach(t),Aje=r(ATe," (OpenAI GPT-2 model)"),ATe.forEach(t),Lje=i(T),bm=n(T,"LI",{});var LTe=s(bm);JQ=n(LTe,"STRONG",{});var bxr=s(JQ);Bje=r(bxr,"gpt_neo"),bxr.forEach(t),xje=r(LTe," \u2014 "),F9=n(LTe,"A",{href:!0});var vxr=s(F9);kje=r(vxr,"GPTNeoConfig"),vxr.forEach(t),Rje=r(LTe," (GPT Neo model)"),LTe.forEach(t),Sje=i(T),vm=n(T,"LI",{});var BTe=s(vm);YQ=n(BTe,"STRONG",{});var Txr=s(YQ);Pje=r(Txr,"gptj"),Txr.forEach(t),$je=r(BTe," \u2014 "),C9=n(BTe,"A",{href:!0});var Fxr=s(C9);Ije=r(Fxr,"GPTJConfig"),Fxr.forEach(t),jje=r(BTe," (GPT-J model)"),BTe.forEach(t),Dje=i(T),Tm=n(T,"LI",{});var xTe=s(Tm);KQ=n(xTe,"STRONG",{});var Cxr=s(KQ);Nje=r(Cxr,"hubert"),Cxr.forEach(t),qje=r(xTe," \u2014 "),M9=n(xTe,"A",{href:!0});var Mxr=s(M9);Oje=r(Mxr,"HubertConfig"),Mxr.forEach(t),Gje=r(xTe," (Hubert model)"),xTe.forEach(t),Xje=i(T),Fm=n(T,"LI",{});var kTe=s(Fm);ZQ=n(kTe,"STRONG",{});var Exr=s(ZQ);Vje=r(Exr,"ibert"),Exr.forEach(t),zje=r(kTe," \u2014 "),E9=n(kTe,"A",{href:!0});var yxr=s(E9);Wje=r(yxr,"IBertConfig"),yxr.forEach(t),Qje=r(kTe," (I-BERT model)"),kTe.forEach(t),Hje=i(T),Cm=n(T,"LI",{});var RTe=s(Cm);eH=n(RTe,"STRONG",{});var wxr=s(eH);Uje=r(wxr,"imagegpt"),wxr.forEach(t),Jje=r(RTe," \u2014 "),y9=n(RTe,"A",{href:!0});var Axr=s(y9);Yje=r(Axr,"ImageGPTConfig"),Axr.forEach(t),Kje=r(RTe," (ImageGPT model)"),RTe.forEach(t),Zje=i(T),Mm=n(T,"LI",{});var STe=s(Mm);oH=n(STe,"STRONG",{});var Lxr=s(oH);eDe=r(Lxr,"layoutlm"),Lxr.forEach(t),oDe=r(STe," \u2014 "),w9=n(STe,"A",{href:!0});var Bxr=s(w9);rDe=r(Bxr,"LayoutLMConfig"),Bxr.forEach(t),tDe=r(STe," (LayoutLM model)"),STe.forEach(t),aDe=i(T),Em=n(T,"LI",{});var PTe=s(Em);rH=n(PTe,"STRONG",{});var xxr=s(rH);nDe=r(xxr,"layoutlmv2"),xxr.forEach(t),sDe=r(PTe," \u2014 "),A9=n(PTe,"A",{href:!0});var kxr=s(A9);lDe=r(kxr,"LayoutLMv2Config"),kxr.forEach(t),iDe=r(PTe," (LayoutLMv2 model)"),PTe.forEach(t),dDe=i(T),ym=n(T,"LI",{});var $Te=s(ym);tH=n($Te,"STRONG",{});var Rxr=s(tH);cDe=r(Rxr,"led"),Rxr.forEach(t),fDe=r($Te," \u2014 "),L9=n($Te,"A",{href:!0});var Sxr=s(L9);mDe=r(Sxr,"LEDConfig"),Sxr.forEach(t),gDe=r($Te," (LED model)"),$Te.forEach(t),hDe=i(T),wm=n(T,"LI",{});var ITe=s(wm);aH=n(ITe,"STRONG",{});var Pxr=s(aH);pDe=r(Pxr,"longformer"),Pxr.forEach(t),_De=r(ITe," \u2014 "),B9=n(ITe,"A",{href:!0});var $xr=s(B9);uDe=r($xr,"LongformerConfig"),$xr.forEach(t),bDe=r(ITe," (Longformer model)"),ITe.forEach(t),vDe=i(T),Am=n(T,"LI",{});var jTe=s(Am);nH=n(jTe,"STRONG",{});var Ixr=s(nH);TDe=r(Ixr,"luke"),Ixr.forEach(t),FDe=r(jTe," \u2014 "),x9=n(jTe,"A",{href:!0});var jxr=s(x9);CDe=r(jxr,"LukeConfig"),jxr.forEach(t),MDe=r(jTe," (LUKE model)"),jTe.forEach(t),EDe=i(T),Lm=n(T,"LI",{});var DTe=s(Lm);sH=n(DTe,"STRONG",{});var Dxr=s(sH);yDe=r(Dxr,"lxmert"),Dxr.forEach(t),wDe=r(DTe," \u2014 "),k9=n(DTe,"A",{href:!0});var Nxr=s(k9);ADe=r(Nxr,"LxmertConfig"),Nxr.forEach(t),LDe=r(DTe," (LXMERT model)"),DTe.forEach(t),BDe=i(T),Bm=n(T,"LI",{});var NTe=s(Bm);lH=n(NTe,"STRONG",{});var qxr=s(lH);xDe=r(qxr,"m2m_100"),qxr.forEach(t),kDe=r(NTe," \u2014 "),R9=n(NTe,"A",{href:!0});var Oxr=s(R9);RDe=r(Oxr,"M2M100Config"),Oxr.forEach(t),SDe=r(NTe," (M2M100 model)"),NTe.forEach(t),PDe=i(T),xm=n(T,"LI",{});var qTe=s(xm);iH=n(qTe,"STRONG",{});var Gxr=s(iH);$De=r(Gxr,"marian"),Gxr.forEach(t),IDe=r(qTe," \u2014 "),S9=n(qTe,"A",{href:!0});var Xxr=s(S9);jDe=r(Xxr,"MarianConfig"),Xxr.forEach(t),DDe=r(qTe," (Marian model)"),qTe.forEach(t),NDe=i(T),km=n(T,"LI",{});var OTe=s(km);dH=n(OTe,"STRONG",{});var Vxr=s(dH);qDe=r(Vxr,"maskformer"),Vxr.forEach(t),ODe=r(OTe," \u2014 "),P9=n(OTe,"A",{href:!0});var zxr=s(P9);GDe=r(zxr,"MaskFormerConfig"),zxr.forEach(t),XDe=r(OTe," (MaskFormer model)"),OTe.forEach(t),VDe=i(T),Rm=n(T,"LI",{});var GTe=s(Rm);cH=n(GTe,"STRONG",{});var Wxr=s(cH);zDe=r(Wxr,"mbart"),Wxr.forEach(t),WDe=r(GTe," \u2014 "),$9=n(GTe,"A",{href:!0});var Qxr=s($9);QDe=r(Qxr,"MBartConfig"),Qxr.forEach(t),HDe=r(GTe," (mBART model)"),GTe.forEach(t),UDe=i(T),Sm=n(T,"LI",{});var XTe=s(Sm);fH=n(XTe,"STRONG",{});var Hxr=s(fH);JDe=r(Hxr,"megatron-bert"),Hxr.forEach(t),YDe=r(XTe," \u2014 "),I9=n(XTe,"A",{href:!0});var Uxr=s(I9);KDe=r(Uxr,"MegatronBertConfig"),Uxr.forEach(t),ZDe=r(XTe," (MegatronBert model)"),XTe.forEach(t),eNe=i(T),Pm=n(T,"LI",{});var VTe=s(Pm);mH=n(VTe,"STRONG",{});var Jxr=s(mH);oNe=r(Jxr,"mobilebert"),Jxr.forEach(t),rNe=r(VTe," \u2014 "),j9=n(VTe,"A",{href:!0});var Yxr=s(j9);tNe=r(Yxr,"MobileBertConfig"),Yxr.forEach(t),aNe=r(VTe," (MobileBERT model)"),VTe.forEach(t),nNe=i(T),$m=n(T,"LI",{});var zTe=s($m);gH=n(zTe,"STRONG",{});var Kxr=s(gH);sNe=r(Kxr,"mpnet"),Kxr.forEach(t),lNe=r(zTe," \u2014 "),D9=n(zTe,"A",{href:!0});var Zxr=s(D9);iNe=r(Zxr,"MPNetConfig"),Zxr.forEach(t),dNe=r(zTe," (MPNet model)"),zTe.forEach(t),cNe=i(T),Im=n(T,"LI",{});var WTe=s(Im);hH=n(WTe,"STRONG",{});var ekr=s(hH);fNe=r(ekr,"mt5"),ekr.forEach(t),mNe=r(WTe," \u2014 "),N9=n(WTe,"A",{href:!0});var okr=s(N9);gNe=r(okr,"MT5Config"),okr.forEach(t),hNe=r(WTe," (mT5 model)"),WTe.forEach(t),pNe=i(T),jm=n(T,"LI",{});var QTe=s(jm);pH=n(QTe,"STRONG",{});var rkr=s(pH);_Ne=r(rkr,"nystromformer"),rkr.forEach(t),uNe=r(QTe," \u2014 "),q9=n(QTe,"A",{href:!0});var tkr=s(q9);bNe=r(tkr,"NystromformerConfig"),tkr.forEach(t),vNe=r(QTe," (Nystromformer model)"),QTe.forEach(t),TNe=i(T),Dm=n(T,"LI",{});var HTe=s(Dm);_H=n(HTe,"STRONG",{});var akr=s(_H);FNe=r(akr,"openai-gpt"),akr.forEach(t),CNe=r(HTe," \u2014 "),O9=n(HTe,"A",{href:!0});var nkr=s(O9);MNe=r(nkr,"OpenAIGPTConfig"),nkr.forEach(t),ENe=r(HTe," (OpenAI GPT model)"),HTe.forEach(t),yNe=i(T),Nm=n(T,"LI",{});var UTe=s(Nm);uH=n(UTe,"STRONG",{});var skr=s(uH);wNe=r(skr,"pegasus"),skr.forEach(t),ANe=r(UTe," \u2014 "),G9=n(UTe,"A",{href:!0});var lkr=s(G9);LNe=r(lkr,"PegasusConfig"),lkr.forEach(t),BNe=r(UTe," (Pegasus model)"),UTe.forEach(t),xNe=i(T),qm=n(T,"LI",{});var JTe=s(qm);bH=n(JTe,"STRONG",{});var ikr=s(bH);kNe=r(ikr,"perceiver"),ikr.forEach(t),RNe=r(JTe," \u2014 "),X9=n(JTe,"A",{href:!0});var dkr=s(X9);SNe=r(dkr,"PerceiverConfig"),dkr.forEach(t),PNe=r(JTe," (Perceiver model)"),JTe.forEach(t),$Ne=i(T),Om=n(T,"LI",{});var YTe=s(Om);vH=n(YTe,"STRONG",{});var ckr=s(vH);INe=r(ckr,"plbart"),ckr.forEach(t),jNe=r(YTe," \u2014 "),V9=n(YTe,"A",{href:!0});var fkr=s(V9);DNe=r(fkr,"PLBartConfig"),fkr.forEach(t),NNe=r(YTe," (PLBart model)"),YTe.forEach(t),qNe=i(T),Gm=n(T,"LI",{});var KTe=s(Gm);TH=n(KTe,"STRONG",{});var mkr=s(TH);ONe=r(mkr,"poolformer"),mkr.forEach(t),GNe=r(KTe," \u2014 "),z9=n(KTe,"A",{href:!0});var gkr=s(z9);XNe=r(gkr,"PoolFormerConfig"),gkr.forEach(t),VNe=r(KTe," (PoolFormer model)"),KTe.forEach(t),zNe=i(T),Xm=n(T,"LI",{});var ZTe=s(Xm);FH=n(ZTe,"STRONG",{});var hkr=s(FH);WNe=r(hkr,"prophetnet"),hkr.forEach(t),QNe=r(ZTe," \u2014 "),W9=n(ZTe,"A",{href:!0});var pkr=s(W9);HNe=r(pkr,"ProphetNetConfig"),pkr.forEach(t),UNe=r(ZTe," (ProphetNet model)"),ZTe.forEach(t),JNe=i(T),Vm=n(T,"LI",{});var e8e=s(Vm);CH=n(e8e,"STRONG",{});var _kr=s(CH);YNe=r(_kr,"qdqbert"),_kr.forEach(t),KNe=r(e8e," \u2014 "),Q9=n(e8e,"A",{href:!0});var ukr=s(Q9);ZNe=r(ukr,"QDQBertConfig"),ukr.forEach(t),eqe=r(e8e," (QDQBert model)"),e8e.forEach(t),oqe=i(T),zm=n(T,"LI",{});var o8e=s(zm);MH=n(o8e,"STRONG",{});var bkr=s(MH);rqe=r(bkr,"rag"),bkr.forEach(t),tqe=r(o8e," \u2014 "),H9=n(o8e,"A",{href:!0});var vkr=s(H9);aqe=r(vkr,"RagConfig"),vkr.forEach(t),nqe=r(o8e," (RAG model)"),o8e.forEach(t),sqe=i(T),Wm=n(T,"LI",{});var r8e=s(Wm);EH=n(r8e,"STRONG",{});var Tkr=s(EH);lqe=r(Tkr,"realm"),Tkr.forEach(t),iqe=r(r8e," \u2014 "),U9=n(r8e,"A",{href:!0});var Fkr=s(U9);dqe=r(Fkr,"RealmConfig"),Fkr.forEach(t),cqe=r(r8e," (Realm model)"),r8e.forEach(t),fqe=i(T),Qm=n(T,"LI",{});var t8e=s(Qm);yH=n(t8e,"STRONG",{});var Ckr=s(yH);mqe=r(Ckr,"reformer"),Ckr.forEach(t),gqe=r(t8e," \u2014 "),J9=n(t8e,"A",{href:!0});var Mkr=s(J9);hqe=r(Mkr,"ReformerConfig"),Mkr.forEach(t),pqe=r(t8e," (Reformer model)"),t8e.forEach(t),_qe=i(T),Hm=n(T,"LI",{});var a8e=s(Hm);wH=n(a8e,"STRONG",{});var Ekr=s(wH);uqe=r(Ekr,"rembert"),Ekr.forEach(t),bqe=r(a8e," \u2014 "),Y9=n(a8e,"A",{href:!0});var ykr=s(Y9);vqe=r(ykr,"RemBertConfig"),ykr.forEach(t),Tqe=r(a8e," (RemBERT model)"),a8e.forEach(t),Fqe=i(T),Um=n(T,"LI",{});var n8e=s(Um);AH=n(n8e,"STRONG",{});var wkr=s(AH);Cqe=r(wkr,"retribert"),wkr.forEach(t),Mqe=r(n8e," \u2014 "),K9=n(n8e,"A",{href:!0});var Akr=s(K9);Eqe=r(Akr,"RetriBertConfig"),Akr.forEach(t),yqe=r(n8e," (RetriBERT model)"),n8e.forEach(t),wqe=i(T),Jm=n(T,"LI",{});var s8e=s(Jm);LH=n(s8e,"STRONG",{});var Lkr=s(LH);Aqe=r(Lkr,"roberta"),Lkr.forEach(t),Lqe=r(s8e," \u2014 "),Z9=n(s8e,"A",{href:!0});var Bkr=s(Z9);Bqe=r(Bkr,"RobertaConfig"),Bkr.forEach(t),xqe=r(s8e," (RoBERTa model)"),s8e.forEach(t),kqe=i(T),Ym=n(T,"LI",{});var l8e=s(Ym);BH=n(l8e,"STRONG",{});var xkr=s(BH);Rqe=r(xkr,"roformer"),xkr.forEach(t),Sqe=r(l8e," \u2014 "),eB=n(l8e,"A",{href:!0});var kkr=s(eB);Pqe=r(kkr,"RoFormerConfig"),kkr.forEach(t),$qe=r(l8e," (RoFormer model)"),l8e.forEach(t),Iqe=i(T),Km=n(T,"LI",{});var i8e=s(Km);xH=n(i8e,"STRONG",{});var Rkr=s(xH);jqe=r(Rkr,"segformer"),Rkr.forEach(t),Dqe=r(i8e," \u2014 "),oB=n(i8e,"A",{href:!0});var Skr=s(oB);Nqe=r(Skr,"SegformerConfig"),Skr.forEach(t),qqe=r(i8e," (SegFormer model)"),i8e.forEach(t),Oqe=i(T),Zm=n(T,"LI",{});var d8e=s(Zm);kH=n(d8e,"STRONG",{});var Pkr=s(kH);Gqe=r(Pkr,"sew"),Pkr.forEach(t),Xqe=r(d8e," \u2014 "),rB=n(d8e,"A",{href:!0});var $kr=s(rB);Vqe=r($kr,"SEWConfig"),$kr.forEach(t),zqe=r(d8e," (SEW model)"),d8e.forEach(t),Wqe=i(T),eg=n(T,"LI",{});var c8e=s(eg);RH=n(c8e,"STRONG",{});var Ikr=s(RH);Qqe=r(Ikr,"sew-d"),Ikr.forEach(t),Hqe=r(c8e," \u2014 "),tB=n(c8e,"A",{href:!0});var jkr=s(tB);Uqe=r(jkr,"SEWDConfig"),jkr.forEach(t),Jqe=r(c8e," (SEW-D model)"),c8e.forEach(t),Yqe=i(T),og=n(T,"LI",{});var f8e=s(og);SH=n(f8e,"STRONG",{});var Dkr=s(SH);Kqe=r(Dkr,"speech-encoder-decoder"),Dkr.forEach(t),Zqe=r(f8e," \u2014 "),aB=n(f8e,"A",{href:!0});var Nkr=s(aB);eOe=r(Nkr,"SpeechEncoderDecoderConfig"),Nkr.forEach(t),oOe=r(f8e," (Speech Encoder decoder model)"),f8e.forEach(t),rOe=i(T),rg=n(T,"LI",{});var m8e=s(rg);PH=n(m8e,"STRONG",{});var qkr=s(PH);tOe=r(qkr,"speech_to_text"),qkr.forEach(t),aOe=r(m8e," \u2014 "),nB=n(m8e,"A",{href:!0});var Okr=s(nB);nOe=r(Okr,"Speech2TextConfig"),Okr.forEach(t),sOe=r(m8e," (Speech2Text model)"),m8e.forEach(t),lOe=i(T),tg=n(T,"LI",{});var g8e=s(tg);$H=n(g8e,"STRONG",{});var Gkr=s($H);iOe=r(Gkr,"speech_to_text_2"),Gkr.forEach(t),dOe=r(g8e," \u2014 "),sB=n(g8e,"A",{href:!0});var Xkr=s(sB);cOe=r(Xkr,"Speech2Text2Config"),Xkr.forEach(t),fOe=r(g8e," (Speech2Text2 model)"),g8e.forEach(t),mOe=i(T),ag=n(T,"LI",{});var h8e=s(ag);IH=n(h8e,"STRONG",{});var Vkr=s(IH);gOe=r(Vkr,"splinter"),Vkr.forEach(t),hOe=r(h8e," \u2014 "),lB=n(h8e,"A",{href:!0});var zkr=s(lB);pOe=r(zkr,"SplinterConfig"),zkr.forEach(t),_Oe=r(h8e," (Splinter model)"),h8e.forEach(t),uOe=i(T),ng=n(T,"LI",{});var p8e=s(ng);jH=n(p8e,"STRONG",{});var Wkr=s(jH);bOe=r(Wkr,"squeezebert"),Wkr.forEach(t),vOe=r(p8e," \u2014 "),iB=n(p8e,"A",{href:!0});var Qkr=s(iB);TOe=r(Qkr,"SqueezeBertConfig"),Qkr.forEach(t),FOe=r(p8e," (SqueezeBERT model)"),p8e.forEach(t),COe=i(T),sg=n(T,"LI",{});var _8e=s(sg);DH=n(_8e,"STRONG",{});var Hkr=s(DH);MOe=r(Hkr,"swin"),Hkr.forEach(t),EOe=r(_8e," \u2014 "),dB=n(_8e,"A",{href:!0});var Ukr=s(dB);yOe=r(Ukr,"SwinConfig"),Ukr.forEach(t),wOe=r(_8e," (Swin model)"),_8e.forEach(t),AOe=i(T),lg=n(T,"LI",{});var u8e=s(lg);NH=n(u8e,"STRONG",{});var Jkr=s(NH);LOe=r(Jkr,"t5"),Jkr.forEach(t),BOe=r(u8e," \u2014 "),cB=n(u8e,"A",{href:!0});var Ykr=s(cB);xOe=r(Ykr,"T5Config"),Ykr.forEach(t),kOe=r(u8e," (T5 model)"),u8e.forEach(t),ROe=i(T),ig=n(T,"LI",{});var b8e=s(ig);qH=n(b8e,"STRONG",{});var Kkr=s(qH);SOe=r(Kkr,"tapas"),Kkr.forEach(t),POe=r(b8e," \u2014 "),fB=n(b8e,"A",{href:!0});var Zkr=s(fB);$Oe=r(Zkr,"TapasConfig"),Zkr.forEach(t),IOe=r(b8e," (TAPAS model)"),b8e.forEach(t),jOe=i(T),dg=n(T,"LI",{});var v8e=s(dg);OH=n(v8e,"STRONG",{});var eRr=s(OH);DOe=r(eRr,"transfo-xl"),eRr.forEach(t),NOe=r(v8e," \u2014 "),mB=n(v8e,"A",{href:!0});var oRr=s(mB);qOe=r(oRr,"TransfoXLConfig"),oRr.forEach(t),OOe=r(v8e," (Transformer-XL model)"),v8e.forEach(t),GOe=i(T),cg=n(T,"LI",{});var T8e=s(cg);GH=n(T8e,"STRONG",{});var rRr=s(GH);XOe=r(rRr,"trocr"),rRr.forEach(t),VOe=r(T8e," \u2014 "),gB=n(T8e,"A",{href:!0});var tRr=s(gB);zOe=r(tRr,"TrOCRConfig"),tRr.forEach(t),WOe=r(T8e," (TrOCR model)"),T8e.forEach(t),QOe=i(T),fg=n(T,"LI",{});var F8e=s(fg);XH=n(F8e,"STRONG",{});var aRr=s(XH);HOe=r(aRr,"unispeech"),aRr.forEach(t),UOe=r(F8e," \u2014 "),hB=n(F8e,"A",{href:!0});var nRr=s(hB);JOe=r(nRr,"UniSpeechConfig"),nRr.forEach(t),YOe=r(F8e," (UniSpeech model)"),F8e.forEach(t),KOe=i(T),mg=n(T,"LI",{});var C8e=s(mg);VH=n(C8e,"STRONG",{});var sRr=s(VH);ZOe=r(sRr,"unispeech-sat"),sRr.forEach(t),eGe=r(C8e," \u2014 "),pB=n(C8e,"A",{href:!0});var lRr=s(pB);oGe=r(lRr,"UniSpeechSatConfig"),lRr.forEach(t),rGe=r(C8e," (UniSpeechSat model)"),C8e.forEach(t),tGe=i(T),gg=n(T,"LI",{});var M8e=s(gg);zH=n(M8e,"STRONG",{});var iRr=s(zH);aGe=r(iRr,"vilt"),iRr.forEach(t),nGe=r(M8e," \u2014 "),_B=n(M8e,"A",{href:!0});var dRr=s(_B);sGe=r(dRr,"ViltConfig"),dRr.forEach(t),lGe=r(M8e," (ViLT model)"),M8e.forEach(t),iGe=i(T),hg=n(T,"LI",{});var E8e=s(hg);WH=n(E8e,"STRONG",{});var cRr=s(WH);dGe=r(cRr,"vision-encoder-decoder"),cRr.forEach(t),cGe=r(E8e," \u2014 "),uB=n(E8e,"A",{href:!0});var fRr=s(uB);fGe=r(fRr,"VisionEncoderDecoderConfig"),fRr.forEach(t),mGe=r(E8e," (Vision Encoder decoder model)"),E8e.forEach(t),gGe=i(T),pg=n(T,"LI",{});var y8e=s(pg);QH=n(y8e,"STRONG",{});var mRr=s(QH);hGe=r(mRr,"vision-text-dual-encoder"),mRr.forEach(t),pGe=r(y8e," \u2014 "),bB=n(y8e,"A",{href:!0});var gRr=s(bB);_Ge=r(gRr,"VisionTextDualEncoderConfig"),gRr.forEach(t),uGe=r(y8e," (VisionTextDualEncoder model)"),y8e.forEach(t),bGe=i(T),_g=n(T,"LI",{});var w8e=s(_g);HH=n(w8e,"STRONG",{});var hRr=s(HH);vGe=r(hRr,"visual_bert"),hRr.forEach(t),TGe=r(w8e," \u2014 "),vB=n(w8e,"A",{href:!0});var pRr=s(vB);FGe=r(pRr,"VisualBertConfig"),pRr.forEach(t),CGe=r(w8e," (VisualBert model)"),w8e.forEach(t),MGe=i(T),ug=n(T,"LI",{});var A8e=s(ug);UH=n(A8e,"STRONG",{});var _Rr=s(UH);EGe=r(_Rr,"vit"),_Rr.forEach(t),yGe=r(A8e," \u2014 "),TB=n(A8e,"A",{href:!0});var uRr=s(TB);wGe=r(uRr,"ViTConfig"),uRr.forEach(t),AGe=r(A8e," (ViT model)"),A8e.forEach(t),LGe=i(T),bg=n(T,"LI",{});var L8e=s(bg);JH=n(L8e,"STRONG",{});var bRr=s(JH);BGe=r(bRr,"vit_mae"),bRr.forEach(t),xGe=r(L8e," \u2014 "),FB=n(L8e,"A",{href:!0});var vRr=s(FB);kGe=r(vRr,"ViTMAEConfig"),vRr.forEach(t),RGe=r(L8e," (ViTMAE model)"),L8e.forEach(t),SGe=i(T),vg=n(T,"LI",{});var B8e=s(vg);YH=n(B8e,"STRONG",{});var TRr=s(YH);PGe=r(TRr,"wav2vec2"),TRr.forEach(t),$Ge=r(B8e," \u2014 "),CB=n(B8e,"A",{href:!0});var FRr=s(CB);IGe=r(FRr,"Wav2Vec2Config"),FRr.forEach(t),jGe=r(B8e," (Wav2Vec2 model)"),B8e.forEach(t),DGe=i(T),Tg=n(T,"LI",{});var x8e=s(Tg);KH=n(x8e,"STRONG",{});var CRr=s(KH);NGe=r(CRr,"wavlm"),CRr.forEach(t),qGe=r(x8e," \u2014 "),MB=n(x8e,"A",{href:!0});var MRr=s(MB);OGe=r(MRr,"WavLMConfig"),MRr.forEach(t),GGe=r(x8e," (WavLM model)"),x8e.forEach(t),XGe=i(T),Fg=n(T,"LI",{});var k8e=s(Fg);ZH=n(k8e,"STRONG",{});var ERr=s(ZH);VGe=r(ERr,"xglm"),ERr.forEach(t),zGe=r(k8e," \u2014 "),EB=n(k8e,"A",{href:!0});var yRr=s(EB);WGe=r(yRr,"XGLMConfig"),yRr.forEach(t),QGe=r(k8e," (XGLM model)"),k8e.forEach(t),HGe=i(T),Cg=n(T,"LI",{});var R8e=s(Cg);eU=n(R8e,"STRONG",{});var wRr=s(eU);UGe=r(wRr,"xlm"),wRr.forEach(t),JGe=r(R8e," \u2014 "),yB=n(R8e,"A",{href:!0});var ARr=s(yB);YGe=r(ARr,"XLMConfig"),ARr.forEach(t),KGe=r(R8e," (XLM model)"),R8e.forEach(t),ZGe=i(T),Mg=n(T,"LI",{});var S8e=s(Mg);oU=n(S8e,"STRONG",{});var LRr=s(oU);eXe=r(LRr,"xlm-prophetnet"),LRr.forEach(t),oXe=r(S8e," \u2014 "),wB=n(S8e,"A",{href:!0});var BRr=s(wB);rXe=r(BRr,"XLMProphetNetConfig"),BRr.forEach(t),tXe=r(S8e," (XLMProphetNet model)"),S8e.forEach(t),aXe=i(T),Eg=n(T,"LI",{});var P8e=s(Eg);rU=n(P8e,"STRONG",{});var xRr=s(rU);nXe=r(xRr,"xlm-roberta"),xRr.forEach(t),sXe=r(P8e," \u2014 "),AB=n(P8e,"A",{href:!0});var kRr=s(AB);lXe=r(kRr,"XLMRobertaConfig"),kRr.forEach(t),iXe=r(P8e," (XLM-RoBERTa model)"),P8e.forEach(t),dXe=i(T),yg=n(T,"LI",{});var $8e=s(yg);tU=n($8e,"STRONG",{});var RRr=s(tU);cXe=r(RRr,"xlm-roberta-xl"),RRr.forEach(t),fXe=r($8e," \u2014 "),LB=n($8e,"A",{href:!0});var SRr=s(LB);mXe=r(SRr,"XLMRobertaXLConfig"),SRr.forEach(t),gXe=r($8e," (XLM-RoBERTa-XL model)"),$8e.forEach(t),hXe=i(T),wg=n(T,"LI",{});var I8e=s(wg);aU=n(I8e,"STRONG",{});var PRr=s(aU);pXe=r(PRr,"xlnet"),PRr.forEach(t),_Xe=r(I8e," \u2014 "),BB=n(I8e,"A",{href:!0});var $Rr=s(BB);uXe=r($Rr,"XLNetConfig"),$Rr.forEach(t),bXe=r(I8e," (XLNet model)"),I8e.forEach(t),vXe=i(T),Ag=n(T,"LI",{});var j8e=s(Ag);nU=n(j8e,"STRONG",{});var IRr=s(nU);TXe=r(IRr,"yoso"),IRr.forEach(t),FXe=r(j8e," \u2014 "),xB=n(j8e,"A",{href:!0});var jRr=s(xB);CXe=r(jRr,"YosoConfig"),jRr.forEach(t),MXe=r(j8e," (YOSO model)"),j8e.forEach(t),T.forEach(t),EXe=i(ma),sU=n(ma,"P",{});var DRr=s(sU);yXe=r(DRr,"Examples:"),DRr.forEach(t),wXe=i(ma),m(rE.$$.fragment,ma),ma.forEach(t),AXe=i(Gs),Lg=n(Gs,"DIV",{class:!0});var lRe=s(Lg);m(tE.$$.fragment,lRe),LXe=i(lRe),lU=n(lRe,"P",{});var NRr=s(lU);BXe=r(NRr,"Register a new configuration for this class."),NRr.forEach(t),lRe.forEach(t),Gs.forEach(t),nxe=i(d),Wi=n(d,"H2",{class:!0});var iRe=s(Wi);Bg=n(iRe,"A",{id:!0,class:!0,href:!0});var qRr=s(Bg);iU=n(qRr,"SPAN",{});var ORr=s(iU);m(aE.$$.fragment,ORr),ORr.forEach(t),qRr.forEach(t),xXe=i(iRe),dU=n(iRe,"SPAN",{});var GRr=s(dU);kXe=r(GRr,"AutoTokenizer"),GRr.forEach(t),iRe.forEach(t),sxe=i(d),Qo=n(d,"DIV",{class:!0});var Xs=s(Qo);m(nE.$$.fragment,Xs),RXe=i(Xs),sE=n(Xs,"P",{});var dRe=s(sE);SXe=r(dRe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),kB=n(dRe,"A",{href:!0});var XRr=s(kB);PXe=r(XRr,"AutoTokenizer.from_pretrained()"),XRr.forEach(t),$Xe=r(dRe," class method."),dRe.forEach(t),IXe=i(Xs),lE=n(Xs,"P",{});var cRe=s(lE);jXe=r(cRe,"This class cannot be instantiated directly using "),cU=n(cRe,"CODE",{});var VRr=s(cU);DXe=r(VRr,"__init__()"),VRr.forEach(t),NXe=r(cRe," (throws an error)."),cRe.forEach(t),qXe=i(Xs),go=n(Xs,"DIV",{class:!0});var ga=s(go);m(iE.$$.fragment,ga),OXe=i(ga),fU=n(ga,"P",{});var zRr=s(fU);GXe=r(zRr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),zRr.forEach(t),XXe=i(ga),Oa=n(ga,"P",{});var WM=s(Oa);VXe=r(WM,"The tokenizer class to instantiate is selected based on the "),mU=n(WM,"CODE",{});var WRr=s(mU);zXe=r(WRr,"model_type"),WRr.forEach(t),WXe=r(WM,` property of the config object (either
passed as an argument or loaded from `),gU=n(WM,"CODE",{});var QRr=s(gU);QXe=r(QRr,"pretrained_model_name_or_path"),QRr.forEach(t),HXe=r(WM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hU=n(WM,"CODE",{});var HRr=s(hU);UXe=r(HRr,"pretrained_model_name_or_path"),HRr.forEach(t),JXe=r(WM,":"),WM.forEach(t),YXe=i(ga),E=n(ga,"UL",{});var y=s(E);Wn=n(y,"LI",{});var GL=s(Wn);pU=n(GL,"STRONG",{});var URr=s(pU);KXe=r(URr,"albert"),URr.forEach(t),ZXe=r(GL," \u2014 "),RB=n(GL,"A",{href:!0});var JRr=s(RB);eVe=r(JRr,"AlbertTokenizer"),JRr.forEach(t),oVe=r(GL," or "),SB=n(GL,"A",{href:!0});var YRr=s(SB);rVe=r(YRr,"AlbertTokenizerFast"),YRr.forEach(t),tVe=r(GL," (ALBERT model)"),GL.forEach(t),aVe=i(y),Qn=n(y,"LI",{});var XL=s(Qn);_U=n(XL,"STRONG",{});var KRr=s(_U);nVe=r(KRr,"bart"),KRr.forEach(t),sVe=r(XL," \u2014 "),PB=n(XL,"A",{href:!0});var ZRr=s(PB);lVe=r(ZRr,"BartTokenizer"),ZRr.forEach(t),iVe=r(XL," or "),$B=n(XL,"A",{href:!0});var eSr=s($B);dVe=r(eSr,"BartTokenizerFast"),eSr.forEach(t),cVe=r(XL," (BART model)"),XL.forEach(t),fVe=i(y),Hn=n(y,"LI",{});var VL=s(Hn);uU=n(VL,"STRONG",{});var oSr=s(uU);mVe=r(oSr,"barthez"),oSr.forEach(t),gVe=r(VL," \u2014 "),IB=n(VL,"A",{href:!0});var rSr=s(IB);hVe=r(rSr,"BarthezTokenizer"),rSr.forEach(t),pVe=r(VL," or "),jB=n(VL,"A",{href:!0});var tSr=s(jB);_Ve=r(tSr,"BarthezTokenizerFast"),tSr.forEach(t),uVe=r(VL," (BARThez model)"),VL.forEach(t),bVe=i(y),xg=n(y,"LI",{});var D8e=s(xg);bU=n(D8e,"STRONG",{});var aSr=s(bU);vVe=r(aSr,"bartpho"),aSr.forEach(t),TVe=r(D8e," \u2014 "),DB=n(D8e,"A",{href:!0});var nSr=s(DB);FVe=r(nSr,"BartphoTokenizer"),nSr.forEach(t),CVe=r(D8e," (BARTpho model)"),D8e.forEach(t),MVe=i(y),Un=n(y,"LI",{});var zL=s(Un);vU=n(zL,"STRONG",{});var sSr=s(vU);EVe=r(sSr,"bert"),sSr.forEach(t),yVe=r(zL," \u2014 "),NB=n(zL,"A",{href:!0});var lSr=s(NB);wVe=r(lSr,"BertTokenizer"),lSr.forEach(t),AVe=r(zL," or "),qB=n(zL,"A",{href:!0});var iSr=s(qB);LVe=r(iSr,"BertTokenizerFast"),iSr.forEach(t),BVe=r(zL," (BERT model)"),zL.forEach(t),xVe=i(y),kg=n(y,"LI",{});var N8e=s(kg);TU=n(N8e,"STRONG",{});var dSr=s(TU);kVe=r(dSr,"bert-generation"),dSr.forEach(t),RVe=r(N8e," \u2014 "),OB=n(N8e,"A",{href:!0});var cSr=s(OB);SVe=r(cSr,"BertGenerationTokenizer"),cSr.forEach(t),PVe=r(N8e," (Bert Generation model)"),N8e.forEach(t),$Ve=i(y),Rg=n(y,"LI",{});var q8e=s(Rg);FU=n(q8e,"STRONG",{});var fSr=s(FU);IVe=r(fSr,"bert-japanese"),fSr.forEach(t),jVe=r(q8e," \u2014 "),GB=n(q8e,"A",{href:!0});var mSr=s(GB);DVe=r(mSr,"BertJapaneseTokenizer"),mSr.forEach(t),NVe=r(q8e," (BertJapanese model)"),q8e.forEach(t),qVe=i(y),Sg=n(y,"LI",{});var O8e=s(Sg);CU=n(O8e,"STRONG",{});var gSr=s(CU);OVe=r(gSr,"bertweet"),gSr.forEach(t),GVe=r(O8e," \u2014 "),XB=n(O8e,"A",{href:!0});var hSr=s(XB);XVe=r(hSr,"BertweetTokenizer"),hSr.forEach(t),VVe=r(O8e," (Bertweet model)"),O8e.forEach(t),zVe=i(y),Jn=n(y,"LI",{});var WL=s(Jn);MU=n(WL,"STRONG",{});var pSr=s(MU);WVe=r(pSr,"big_bird"),pSr.forEach(t),QVe=r(WL," \u2014 "),VB=n(WL,"A",{href:!0});var _Sr=s(VB);HVe=r(_Sr,"BigBirdTokenizer"),_Sr.forEach(t),UVe=r(WL," or "),zB=n(WL,"A",{href:!0});var uSr=s(zB);JVe=r(uSr,"BigBirdTokenizerFast"),uSr.forEach(t),YVe=r(WL," (BigBird model)"),WL.forEach(t),KVe=i(y),Yn=n(y,"LI",{});var QL=s(Yn);EU=n(QL,"STRONG",{});var bSr=s(EU);ZVe=r(bSr,"bigbird_pegasus"),bSr.forEach(t),eze=r(QL," \u2014 "),WB=n(QL,"A",{href:!0});var vSr=s(WB);oze=r(vSr,"PegasusTokenizer"),vSr.forEach(t),rze=r(QL," or "),QB=n(QL,"A",{href:!0});var TSr=s(QB);tze=r(TSr,"PegasusTokenizerFast"),TSr.forEach(t),aze=r(QL," (BigBirdPegasus model)"),QL.forEach(t),nze=i(y),Kn=n(y,"LI",{});var HL=s(Kn);yU=n(HL,"STRONG",{});var FSr=s(yU);sze=r(FSr,"blenderbot"),FSr.forEach(t),lze=r(HL," \u2014 "),HB=n(HL,"A",{href:!0});var CSr=s(HB);ize=r(CSr,"BlenderbotTokenizer"),CSr.forEach(t),dze=r(HL," or "),UB=n(HL,"A",{href:!0});var MSr=s(UB);cze=r(MSr,"BlenderbotTokenizerFast"),MSr.forEach(t),fze=r(HL," (Blenderbot model)"),HL.forEach(t),mze=i(y),Pg=n(y,"LI",{});var G8e=s(Pg);wU=n(G8e,"STRONG",{});var ESr=s(wU);gze=r(ESr,"blenderbot-small"),ESr.forEach(t),hze=r(G8e," \u2014 "),JB=n(G8e,"A",{href:!0});var ySr=s(JB);pze=r(ySr,"BlenderbotSmallTokenizer"),ySr.forEach(t),_ze=r(G8e," (BlenderbotSmall model)"),G8e.forEach(t),uze=i(y),$g=n(y,"LI",{});var X8e=s($g);AU=n(X8e,"STRONG",{});var wSr=s(AU);bze=r(wSr,"byt5"),wSr.forEach(t),vze=r(X8e," \u2014 "),YB=n(X8e,"A",{href:!0});var ASr=s(YB);Tze=r(ASr,"ByT5Tokenizer"),ASr.forEach(t),Fze=r(X8e," (ByT5 model)"),X8e.forEach(t),Cze=i(y),Zn=n(y,"LI",{});var UL=s(Zn);LU=n(UL,"STRONG",{});var LSr=s(LU);Mze=r(LSr,"camembert"),LSr.forEach(t),Eze=r(UL," \u2014 "),KB=n(UL,"A",{href:!0});var BSr=s(KB);yze=r(BSr,"CamembertTokenizer"),BSr.forEach(t),wze=r(UL," or "),ZB=n(UL,"A",{href:!0});var xSr=s(ZB);Aze=r(xSr,"CamembertTokenizerFast"),xSr.forEach(t),Lze=r(UL," (CamemBERT model)"),UL.forEach(t),Bze=i(y),Ig=n(y,"LI",{});var V8e=s(Ig);BU=n(V8e,"STRONG",{});var kSr=s(BU);xze=r(kSr,"canine"),kSr.forEach(t),kze=r(V8e," \u2014 "),ex=n(V8e,"A",{href:!0});var RSr=s(ex);Rze=r(RSr,"CanineTokenizer"),RSr.forEach(t),Sze=r(V8e," (Canine model)"),V8e.forEach(t),Pze=i(y),es=n(y,"LI",{});var JL=s(es);xU=n(JL,"STRONG",{});var SSr=s(xU);$ze=r(SSr,"clip"),SSr.forEach(t),Ize=r(JL," \u2014 "),ox=n(JL,"A",{href:!0});var PSr=s(ox);jze=r(PSr,"CLIPTokenizer"),PSr.forEach(t),Dze=r(JL," or "),rx=n(JL,"A",{href:!0});var $Sr=s(rx);Nze=r($Sr,"CLIPTokenizerFast"),$Sr.forEach(t),qze=r(JL," (CLIP model)"),JL.forEach(t),Oze=i(y),os=n(y,"LI",{});var YL=s(os);kU=n(YL,"STRONG",{});var ISr=s(kU);Gze=r(ISr,"convbert"),ISr.forEach(t),Xze=r(YL," \u2014 "),tx=n(YL,"A",{href:!0});var jSr=s(tx);Vze=r(jSr,"ConvBertTokenizer"),jSr.forEach(t),zze=r(YL," or "),ax=n(YL,"A",{href:!0});var DSr=s(ax);Wze=r(DSr,"ConvBertTokenizerFast"),DSr.forEach(t),Qze=r(YL," (ConvBERT model)"),YL.forEach(t),Hze=i(y),rs=n(y,"LI",{});var KL=s(rs);RU=n(KL,"STRONG",{});var NSr=s(RU);Uze=r(NSr,"cpm"),NSr.forEach(t),Jze=r(KL," \u2014 "),nx=n(KL,"A",{href:!0});var qSr=s(nx);Yze=r(qSr,"CpmTokenizer"),qSr.forEach(t),Kze=r(KL," or "),SU=n(KL,"CODE",{});var OSr=s(SU);Zze=r(OSr,"CpmTokenizerFast"),OSr.forEach(t),eWe=r(KL," (CPM model)"),KL.forEach(t),oWe=i(y),jg=n(y,"LI",{});var z8e=s(jg);PU=n(z8e,"STRONG",{});var GSr=s(PU);rWe=r(GSr,"ctrl"),GSr.forEach(t),tWe=r(z8e," \u2014 "),sx=n(z8e,"A",{href:!0});var XSr=s(sx);aWe=r(XSr,"CTRLTokenizer"),XSr.forEach(t),nWe=r(z8e," (CTRL model)"),z8e.forEach(t),sWe=i(y),ts=n(y,"LI",{});var ZL=s(ts);$U=n(ZL,"STRONG",{});var VSr=s($U);lWe=r(VSr,"deberta"),VSr.forEach(t),iWe=r(ZL," \u2014 "),lx=n(ZL,"A",{href:!0});var zSr=s(lx);dWe=r(zSr,"DebertaTokenizer"),zSr.forEach(t),cWe=r(ZL," or "),ix=n(ZL,"A",{href:!0});var WSr=s(ix);fWe=r(WSr,"DebertaTokenizerFast"),WSr.forEach(t),mWe=r(ZL," (DeBERTa model)"),ZL.forEach(t),gWe=i(y),Dg=n(y,"LI",{});var W8e=s(Dg);IU=n(W8e,"STRONG",{});var QSr=s(IU);hWe=r(QSr,"deberta-v2"),QSr.forEach(t),pWe=r(W8e," \u2014 "),dx=n(W8e,"A",{href:!0});var HSr=s(dx);_We=r(HSr,"DebertaV2Tokenizer"),HSr.forEach(t),uWe=r(W8e," (DeBERTa-v2 model)"),W8e.forEach(t),bWe=i(y),as=n(y,"LI",{});var e7=s(as);jU=n(e7,"STRONG",{});var USr=s(jU);vWe=r(USr,"distilbert"),USr.forEach(t),TWe=r(e7," \u2014 "),cx=n(e7,"A",{href:!0});var JSr=s(cx);FWe=r(JSr,"DistilBertTokenizer"),JSr.forEach(t),CWe=r(e7," or "),fx=n(e7,"A",{href:!0});var YSr=s(fx);MWe=r(YSr,"DistilBertTokenizerFast"),YSr.forEach(t),EWe=r(e7," (DistilBERT model)"),e7.forEach(t),yWe=i(y),ns=n(y,"LI",{});var o7=s(ns);DU=n(o7,"STRONG",{});var KSr=s(DU);wWe=r(KSr,"dpr"),KSr.forEach(t),AWe=r(o7," \u2014 "),mx=n(o7,"A",{href:!0});var ZSr=s(mx);LWe=r(ZSr,"DPRQuestionEncoderTokenizer"),ZSr.forEach(t),BWe=r(o7," or "),gx=n(o7,"A",{href:!0});var ePr=s(gx);xWe=r(ePr,"DPRQuestionEncoderTokenizerFast"),ePr.forEach(t),kWe=r(o7," (DPR model)"),o7.forEach(t),RWe=i(y),ss=n(y,"LI",{});var r7=s(ss);NU=n(r7,"STRONG",{});var oPr=s(NU);SWe=r(oPr,"electra"),oPr.forEach(t),PWe=r(r7," \u2014 "),hx=n(r7,"A",{href:!0});var rPr=s(hx);$We=r(rPr,"ElectraTokenizer"),rPr.forEach(t),IWe=r(r7," or "),px=n(r7,"A",{href:!0});var tPr=s(px);jWe=r(tPr,"ElectraTokenizerFast"),tPr.forEach(t),DWe=r(r7," (ELECTRA model)"),r7.forEach(t),NWe=i(y),Ng=n(y,"LI",{});var Q8e=s(Ng);qU=n(Q8e,"STRONG",{});var aPr=s(qU);qWe=r(aPr,"flaubert"),aPr.forEach(t),OWe=r(Q8e," \u2014 "),_x=n(Q8e,"A",{href:!0});var nPr=s(_x);GWe=r(nPr,"FlaubertTokenizer"),nPr.forEach(t),XWe=r(Q8e," (FlauBERT model)"),Q8e.forEach(t),VWe=i(y),ls=n(y,"LI",{});var t7=s(ls);OU=n(t7,"STRONG",{});var sPr=s(OU);zWe=r(sPr,"fnet"),sPr.forEach(t),WWe=r(t7," \u2014 "),ux=n(t7,"A",{href:!0});var lPr=s(ux);QWe=r(lPr,"FNetTokenizer"),lPr.forEach(t),HWe=r(t7," or "),bx=n(t7,"A",{href:!0});var iPr=s(bx);UWe=r(iPr,"FNetTokenizerFast"),iPr.forEach(t),JWe=r(t7," (FNet model)"),t7.forEach(t),YWe=i(y),qg=n(y,"LI",{});var H8e=s(qg);GU=n(H8e,"STRONG",{});var dPr=s(GU);KWe=r(dPr,"fsmt"),dPr.forEach(t),ZWe=r(H8e," \u2014 "),vx=n(H8e,"A",{href:!0});var cPr=s(vx);eQe=r(cPr,"FSMTTokenizer"),cPr.forEach(t),oQe=r(H8e," (FairSeq Machine-Translation model)"),H8e.forEach(t),rQe=i(y),is=n(y,"LI",{});var a7=s(is);XU=n(a7,"STRONG",{});var fPr=s(XU);tQe=r(fPr,"funnel"),fPr.forEach(t),aQe=r(a7," \u2014 "),Tx=n(a7,"A",{href:!0});var mPr=s(Tx);nQe=r(mPr,"FunnelTokenizer"),mPr.forEach(t),sQe=r(a7," or "),Fx=n(a7,"A",{href:!0});var gPr=s(Fx);lQe=r(gPr,"FunnelTokenizerFast"),gPr.forEach(t),iQe=r(a7," (Funnel Transformer model)"),a7.forEach(t),dQe=i(y),ds=n(y,"LI",{});var n7=s(ds);VU=n(n7,"STRONG",{});var hPr=s(VU);cQe=r(hPr,"gpt2"),hPr.forEach(t),fQe=r(n7," \u2014 "),Cx=n(n7,"A",{href:!0});var pPr=s(Cx);mQe=r(pPr,"GPT2Tokenizer"),pPr.forEach(t),gQe=r(n7," or "),Mx=n(n7,"A",{href:!0});var _Pr=s(Mx);hQe=r(_Pr,"GPT2TokenizerFast"),_Pr.forEach(t),pQe=r(n7," (OpenAI GPT-2 model)"),n7.forEach(t),_Qe=i(y),cs=n(y,"LI",{});var s7=s(cs);zU=n(s7,"STRONG",{});var uPr=s(zU);uQe=r(uPr,"gpt_neo"),uPr.forEach(t),bQe=r(s7," \u2014 "),Ex=n(s7,"A",{href:!0});var bPr=s(Ex);vQe=r(bPr,"GPT2Tokenizer"),bPr.forEach(t),TQe=r(s7," or "),yx=n(s7,"A",{href:!0});var vPr=s(yx);FQe=r(vPr,"GPT2TokenizerFast"),vPr.forEach(t),CQe=r(s7," (GPT Neo model)"),s7.forEach(t),MQe=i(y),fs=n(y,"LI",{});var l7=s(fs);WU=n(l7,"STRONG",{});var TPr=s(WU);EQe=r(TPr,"herbert"),TPr.forEach(t),yQe=r(l7," \u2014 "),wx=n(l7,"A",{href:!0});var FPr=s(wx);wQe=r(FPr,"HerbertTokenizer"),FPr.forEach(t),AQe=r(l7," or "),Ax=n(l7,"A",{href:!0});var CPr=s(Ax);LQe=r(CPr,"HerbertTokenizerFast"),CPr.forEach(t),BQe=r(l7," (HerBERT model)"),l7.forEach(t),xQe=i(y),Og=n(y,"LI",{});var U8e=s(Og);QU=n(U8e,"STRONG",{});var MPr=s(QU);kQe=r(MPr,"hubert"),MPr.forEach(t),RQe=r(U8e," \u2014 "),Lx=n(U8e,"A",{href:!0});var EPr=s(Lx);SQe=r(EPr,"Wav2Vec2CTCTokenizer"),EPr.forEach(t),PQe=r(U8e," (Hubert model)"),U8e.forEach(t),$Qe=i(y),ms=n(y,"LI",{});var i7=s(ms);HU=n(i7,"STRONG",{});var yPr=s(HU);IQe=r(yPr,"ibert"),yPr.forEach(t),jQe=r(i7," \u2014 "),Bx=n(i7,"A",{href:!0});var wPr=s(Bx);DQe=r(wPr,"RobertaTokenizer"),wPr.forEach(t),NQe=r(i7," or "),xx=n(i7,"A",{href:!0});var APr=s(xx);qQe=r(APr,"RobertaTokenizerFast"),APr.forEach(t),OQe=r(i7," (I-BERT model)"),i7.forEach(t),GQe=i(y),gs=n(y,"LI",{});var d7=s(gs);UU=n(d7,"STRONG",{});var LPr=s(UU);XQe=r(LPr,"layoutlm"),LPr.forEach(t),VQe=r(d7," \u2014 "),kx=n(d7,"A",{href:!0});var BPr=s(kx);zQe=r(BPr,"LayoutLMTokenizer"),BPr.forEach(t),WQe=r(d7," or "),Rx=n(d7,"A",{href:!0});var xPr=s(Rx);QQe=r(xPr,"LayoutLMTokenizerFast"),xPr.forEach(t),HQe=r(d7," (LayoutLM model)"),d7.forEach(t),UQe=i(y),hs=n(y,"LI",{});var c7=s(hs);JU=n(c7,"STRONG",{});var kPr=s(JU);JQe=r(kPr,"layoutlmv2"),kPr.forEach(t),YQe=r(c7," \u2014 "),Sx=n(c7,"A",{href:!0});var RPr=s(Sx);KQe=r(RPr,"LayoutLMv2Tokenizer"),RPr.forEach(t),ZQe=r(c7," or "),Px=n(c7,"A",{href:!0});var SPr=s(Px);eHe=r(SPr,"LayoutLMv2TokenizerFast"),SPr.forEach(t),oHe=r(c7," (LayoutLMv2 model)"),c7.forEach(t),rHe=i(y),ps=n(y,"LI",{});var f7=s(ps);YU=n(f7,"STRONG",{});var PPr=s(YU);tHe=r(PPr,"layoutxlm"),PPr.forEach(t),aHe=r(f7," \u2014 "),$x=n(f7,"A",{href:!0});var $Pr=s($x);nHe=r($Pr,"LayoutXLMTokenizer"),$Pr.forEach(t),sHe=r(f7," or "),Ix=n(f7,"A",{href:!0});var IPr=s(Ix);lHe=r(IPr,"LayoutXLMTokenizerFast"),IPr.forEach(t),iHe=r(f7," (LayoutXLM model)"),f7.forEach(t),dHe=i(y),_s=n(y,"LI",{});var m7=s(_s);KU=n(m7,"STRONG",{});var jPr=s(KU);cHe=r(jPr,"led"),jPr.forEach(t),fHe=r(m7," \u2014 "),jx=n(m7,"A",{href:!0});var DPr=s(jx);mHe=r(DPr,"LEDTokenizer"),DPr.forEach(t),gHe=r(m7," or "),Dx=n(m7,"A",{href:!0});var NPr=s(Dx);hHe=r(NPr,"LEDTokenizerFast"),NPr.forEach(t),pHe=r(m7," (LED model)"),m7.forEach(t),_He=i(y),us=n(y,"LI",{});var g7=s(us);ZU=n(g7,"STRONG",{});var qPr=s(ZU);uHe=r(qPr,"longformer"),qPr.forEach(t),bHe=r(g7," \u2014 "),Nx=n(g7,"A",{href:!0});var OPr=s(Nx);vHe=r(OPr,"LongformerTokenizer"),OPr.forEach(t),THe=r(g7," or "),qx=n(g7,"A",{href:!0});var GPr=s(qx);FHe=r(GPr,"LongformerTokenizerFast"),GPr.forEach(t),CHe=r(g7," (Longformer model)"),g7.forEach(t),MHe=i(y),Gg=n(y,"LI",{});var J8e=s(Gg);eJ=n(J8e,"STRONG",{});var XPr=s(eJ);EHe=r(XPr,"luke"),XPr.forEach(t),yHe=r(J8e," \u2014 "),Ox=n(J8e,"A",{href:!0});var VPr=s(Ox);wHe=r(VPr,"LukeTokenizer"),VPr.forEach(t),AHe=r(J8e," (LUKE model)"),J8e.forEach(t),LHe=i(y),bs=n(y,"LI",{});var h7=s(bs);oJ=n(h7,"STRONG",{});var zPr=s(oJ);BHe=r(zPr,"lxmert"),zPr.forEach(t),xHe=r(h7," \u2014 "),Gx=n(h7,"A",{href:!0});var WPr=s(Gx);kHe=r(WPr,"LxmertTokenizer"),WPr.forEach(t),RHe=r(h7," or "),Xx=n(h7,"A",{href:!0});var QPr=s(Xx);SHe=r(QPr,"LxmertTokenizerFast"),QPr.forEach(t),PHe=r(h7," (LXMERT model)"),h7.forEach(t),$He=i(y),Xg=n(y,"LI",{});var Y8e=s(Xg);rJ=n(Y8e,"STRONG",{});var HPr=s(rJ);IHe=r(HPr,"m2m_100"),HPr.forEach(t),jHe=r(Y8e," \u2014 "),Vx=n(Y8e,"A",{href:!0});var UPr=s(Vx);DHe=r(UPr,"M2M100Tokenizer"),UPr.forEach(t),NHe=r(Y8e," (M2M100 model)"),Y8e.forEach(t),qHe=i(y),Vg=n(y,"LI",{});var K8e=s(Vg);tJ=n(K8e,"STRONG",{});var JPr=s(tJ);OHe=r(JPr,"marian"),JPr.forEach(t),GHe=r(K8e," \u2014 "),zx=n(K8e,"A",{href:!0});var YPr=s(zx);XHe=r(YPr,"MarianTokenizer"),YPr.forEach(t),VHe=r(K8e," (Marian model)"),K8e.forEach(t),zHe=i(y),vs=n(y,"LI",{});var p7=s(vs);aJ=n(p7,"STRONG",{});var KPr=s(aJ);WHe=r(KPr,"mbart"),KPr.forEach(t),QHe=r(p7," \u2014 "),Wx=n(p7,"A",{href:!0});var ZPr=s(Wx);HHe=r(ZPr,"MBartTokenizer"),ZPr.forEach(t),UHe=r(p7," or "),Qx=n(p7,"A",{href:!0});var e$r=s(Qx);JHe=r(e$r,"MBartTokenizerFast"),e$r.forEach(t),YHe=r(p7," (mBART model)"),p7.forEach(t),KHe=i(y),Ts=n(y,"LI",{});var _7=s(Ts);nJ=n(_7,"STRONG",{});var o$r=s(nJ);ZHe=r(o$r,"mbart50"),o$r.forEach(t),eUe=r(_7," \u2014 "),Hx=n(_7,"A",{href:!0});var r$r=s(Hx);oUe=r(r$r,"MBart50Tokenizer"),r$r.forEach(t),rUe=r(_7," or "),Ux=n(_7,"A",{href:!0});var t$r=s(Ux);tUe=r(t$r,"MBart50TokenizerFast"),t$r.forEach(t),aUe=r(_7," (mBART-50 model)"),_7.forEach(t),nUe=i(y),zg=n(y,"LI",{});var Z8e=s(zg);sJ=n(Z8e,"STRONG",{});var a$r=s(sJ);sUe=r(a$r,"mluke"),a$r.forEach(t),lUe=r(Z8e," \u2014 "),Jx=n(Z8e,"A",{href:!0});var n$r=s(Jx);iUe=r(n$r,"MLukeTokenizer"),n$r.forEach(t),dUe=r(Z8e," (mLUKE model)"),Z8e.forEach(t),cUe=i(y),Fs=n(y,"LI",{});var u7=s(Fs);lJ=n(u7,"STRONG",{});var s$r=s(lJ);fUe=r(s$r,"mobilebert"),s$r.forEach(t),mUe=r(u7," \u2014 "),Yx=n(u7,"A",{href:!0});var l$r=s(Yx);gUe=r(l$r,"MobileBertTokenizer"),l$r.forEach(t),hUe=r(u7," or "),Kx=n(u7,"A",{href:!0});var i$r=s(Kx);pUe=r(i$r,"MobileBertTokenizerFast"),i$r.forEach(t),_Ue=r(u7," (MobileBERT model)"),u7.forEach(t),uUe=i(y),Cs=n(y,"LI",{});var b7=s(Cs);iJ=n(b7,"STRONG",{});var d$r=s(iJ);bUe=r(d$r,"mpnet"),d$r.forEach(t),vUe=r(b7," \u2014 "),Zx=n(b7,"A",{href:!0});var c$r=s(Zx);TUe=r(c$r,"MPNetTokenizer"),c$r.forEach(t),FUe=r(b7," or "),ek=n(b7,"A",{href:!0});var f$r=s(ek);CUe=r(f$r,"MPNetTokenizerFast"),f$r.forEach(t),MUe=r(b7," (MPNet model)"),b7.forEach(t),EUe=i(y),Ms=n(y,"LI",{});var v7=s(Ms);dJ=n(v7,"STRONG",{});var m$r=s(dJ);yUe=r(m$r,"mt5"),m$r.forEach(t),wUe=r(v7," \u2014 "),ok=n(v7,"A",{href:!0});var g$r=s(ok);AUe=r(g$r,"MT5Tokenizer"),g$r.forEach(t),LUe=r(v7," or "),rk=n(v7,"A",{href:!0});var h$r=s(rk);BUe=r(h$r,"MT5TokenizerFast"),h$r.forEach(t),xUe=r(v7," (mT5 model)"),v7.forEach(t),kUe=i(y),Es=n(y,"LI",{});var T7=s(Es);cJ=n(T7,"STRONG",{});var p$r=s(cJ);RUe=r(p$r,"openai-gpt"),p$r.forEach(t),SUe=r(T7," \u2014 "),tk=n(T7,"A",{href:!0});var _$r=s(tk);PUe=r(_$r,"OpenAIGPTTokenizer"),_$r.forEach(t),$Ue=r(T7," or "),ak=n(T7,"A",{href:!0});var u$r=s(ak);IUe=r(u$r,"OpenAIGPTTokenizerFast"),u$r.forEach(t),jUe=r(T7," (OpenAI GPT model)"),T7.forEach(t),DUe=i(y),ys=n(y,"LI",{});var F7=s(ys);fJ=n(F7,"STRONG",{});var b$r=s(fJ);NUe=r(b$r,"pegasus"),b$r.forEach(t),qUe=r(F7," \u2014 "),nk=n(F7,"A",{href:!0});var v$r=s(nk);OUe=r(v$r,"PegasusTokenizer"),v$r.forEach(t),GUe=r(F7," or "),sk=n(F7,"A",{href:!0});var T$r=s(sk);XUe=r(T$r,"PegasusTokenizerFast"),T$r.forEach(t),VUe=r(F7," (Pegasus model)"),F7.forEach(t),zUe=i(y),Wg=n(y,"LI",{});var eFe=s(Wg);mJ=n(eFe,"STRONG",{});var F$r=s(mJ);WUe=r(F$r,"perceiver"),F$r.forEach(t),QUe=r(eFe," \u2014 "),lk=n(eFe,"A",{href:!0});var C$r=s(lk);HUe=r(C$r,"PerceiverTokenizer"),C$r.forEach(t),UUe=r(eFe," (Perceiver model)"),eFe.forEach(t),JUe=i(y),Qg=n(y,"LI",{});var oFe=s(Qg);gJ=n(oFe,"STRONG",{});var M$r=s(gJ);YUe=r(M$r,"phobert"),M$r.forEach(t),KUe=r(oFe," \u2014 "),ik=n(oFe,"A",{href:!0});var E$r=s(ik);ZUe=r(E$r,"PhobertTokenizer"),E$r.forEach(t),eJe=r(oFe," (PhoBERT model)"),oFe.forEach(t),oJe=i(y),Hg=n(y,"LI",{});var rFe=s(Hg);hJ=n(rFe,"STRONG",{});var y$r=s(hJ);rJe=r(y$r,"plbart"),y$r.forEach(t),tJe=r(rFe," \u2014 "),dk=n(rFe,"A",{href:!0});var w$r=s(dk);aJe=r(w$r,"PLBartTokenizer"),w$r.forEach(t),nJe=r(rFe," (PLBart model)"),rFe.forEach(t),sJe=i(y),Ug=n(y,"LI",{});var tFe=s(Ug);pJ=n(tFe,"STRONG",{});var A$r=s(pJ);lJe=r(A$r,"prophetnet"),A$r.forEach(t),iJe=r(tFe," \u2014 "),ck=n(tFe,"A",{href:!0});var L$r=s(ck);dJe=r(L$r,"ProphetNetTokenizer"),L$r.forEach(t),cJe=r(tFe," (ProphetNet model)"),tFe.forEach(t),fJe=i(y),ws=n(y,"LI",{});var C7=s(ws);_J=n(C7,"STRONG",{});var B$r=s(_J);mJe=r(B$r,"qdqbert"),B$r.forEach(t),gJe=r(C7," \u2014 "),fk=n(C7,"A",{href:!0});var x$r=s(fk);hJe=r(x$r,"BertTokenizer"),x$r.forEach(t),pJe=r(C7," or "),mk=n(C7,"A",{href:!0});var k$r=s(mk);_Je=r(k$r,"BertTokenizerFast"),k$r.forEach(t),uJe=r(C7," (QDQBert model)"),C7.forEach(t),bJe=i(y),Jg=n(y,"LI",{});var aFe=s(Jg);uJ=n(aFe,"STRONG",{});var R$r=s(uJ);vJe=r(R$r,"rag"),R$r.forEach(t),TJe=r(aFe," \u2014 "),gk=n(aFe,"A",{href:!0});var S$r=s(gk);FJe=r(S$r,"RagTokenizer"),S$r.forEach(t),CJe=r(aFe," (RAG model)"),aFe.forEach(t),MJe=i(y),As=n(y,"LI",{});var M7=s(As);bJ=n(M7,"STRONG",{});var P$r=s(bJ);EJe=r(P$r,"realm"),P$r.forEach(t),yJe=r(M7," \u2014 "),hk=n(M7,"A",{href:!0});var $$r=s(hk);wJe=r($$r,"RealmTokenizer"),$$r.forEach(t),AJe=r(M7," or "),pk=n(M7,"A",{href:!0});var I$r=s(pk);LJe=r(I$r,"RealmTokenizerFast"),I$r.forEach(t),BJe=r(M7," (Realm model)"),M7.forEach(t),xJe=i(y),Ls=n(y,"LI",{});var E7=s(Ls);vJ=n(E7,"STRONG",{});var j$r=s(vJ);kJe=r(j$r,"reformer"),j$r.forEach(t),RJe=r(E7," \u2014 "),_k=n(E7,"A",{href:!0});var D$r=s(_k);SJe=r(D$r,"ReformerTokenizer"),D$r.forEach(t),PJe=r(E7," or "),uk=n(E7,"A",{href:!0});var N$r=s(uk);$Je=r(N$r,"ReformerTokenizerFast"),N$r.forEach(t),IJe=r(E7," (Reformer model)"),E7.forEach(t),jJe=i(y),Bs=n(y,"LI",{});var y7=s(Bs);TJ=n(y7,"STRONG",{});var q$r=s(TJ);DJe=r(q$r,"rembert"),q$r.forEach(t),NJe=r(y7," \u2014 "),bk=n(y7,"A",{href:!0});var O$r=s(bk);qJe=r(O$r,"RemBertTokenizer"),O$r.forEach(t),OJe=r(y7," or "),vk=n(y7,"A",{href:!0});var G$r=s(vk);GJe=r(G$r,"RemBertTokenizerFast"),G$r.forEach(t),XJe=r(y7," (RemBERT model)"),y7.forEach(t),VJe=i(y),xs=n(y,"LI",{});var w7=s(xs);FJ=n(w7,"STRONG",{});var X$r=s(FJ);zJe=r(X$r,"retribert"),X$r.forEach(t),WJe=r(w7," \u2014 "),Tk=n(w7,"A",{href:!0});var V$r=s(Tk);QJe=r(V$r,"RetriBertTokenizer"),V$r.forEach(t),HJe=r(w7," or "),Fk=n(w7,"A",{href:!0});var z$r=s(Fk);UJe=r(z$r,"RetriBertTokenizerFast"),z$r.forEach(t),JJe=r(w7," (RetriBERT model)"),w7.forEach(t),YJe=i(y),ks=n(y,"LI",{});var A7=s(ks);CJ=n(A7,"STRONG",{});var W$r=s(CJ);KJe=r(W$r,"roberta"),W$r.forEach(t),ZJe=r(A7," \u2014 "),Ck=n(A7,"A",{href:!0});var Q$r=s(Ck);eYe=r(Q$r,"RobertaTokenizer"),Q$r.forEach(t),oYe=r(A7," or "),Mk=n(A7,"A",{href:!0});var H$r=s(Mk);rYe=r(H$r,"RobertaTokenizerFast"),H$r.forEach(t),tYe=r(A7," (RoBERTa model)"),A7.forEach(t),aYe=i(y),Rs=n(y,"LI",{});var L7=s(Rs);MJ=n(L7,"STRONG",{});var U$r=s(MJ);nYe=r(U$r,"roformer"),U$r.forEach(t),sYe=r(L7," \u2014 "),Ek=n(L7,"A",{href:!0});var J$r=s(Ek);lYe=r(J$r,"RoFormerTokenizer"),J$r.forEach(t),iYe=r(L7," or "),yk=n(L7,"A",{href:!0});var Y$r=s(yk);dYe=r(Y$r,"RoFormerTokenizerFast"),Y$r.forEach(t),cYe=r(L7," (RoFormer model)"),L7.forEach(t),fYe=i(y),Yg=n(y,"LI",{});var nFe=s(Yg);EJ=n(nFe,"STRONG",{});var K$r=s(EJ);mYe=r(K$r,"speech_to_text"),K$r.forEach(t),gYe=r(nFe," \u2014 "),wk=n(nFe,"A",{href:!0});var Z$r=s(wk);hYe=r(Z$r,"Speech2TextTokenizer"),Z$r.forEach(t),pYe=r(nFe," (Speech2Text model)"),nFe.forEach(t),_Ye=i(y),Kg=n(y,"LI",{});var sFe=s(Kg);yJ=n(sFe,"STRONG",{});var eIr=s(yJ);uYe=r(eIr,"speech_to_text_2"),eIr.forEach(t),bYe=r(sFe," \u2014 "),Ak=n(sFe,"A",{href:!0});var oIr=s(Ak);vYe=r(oIr,"Speech2Text2Tokenizer"),oIr.forEach(t),TYe=r(sFe," (Speech2Text2 model)"),sFe.forEach(t),FYe=i(y),Ss=n(y,"LI",{});var B7=s(Ss);wJ=n(B7,"STRONG",{});var rIr=s(wJ);CYe=r(rIr,"splinter"),rIr.forEach(t),MYe=r(B7," \u2014 "),Lk=n(B7,"A",{href:!0});var tIr=s(Lk);EYe=r(tIr,"SplinterTokenizer"),tIr.forEach(t),yYe=r(B7," or "),Bk=n(B7,"A",{href:!0});var aIr=s(Bk);wYe=r(aIr,"SplinterTokenizerFast"),aIr.forEach(t),AYe=r(B7," (Splinter model)"),B7.forEach(t),LYe=i(y),Ps=n(y,"LI",{});var x7=s(Ps);AJ=n(x7,"STRONG",{});var nIr=s(AJ);BYe=r(nIr,"squeezebert"),nIr.forEach(t),xYe=r(x7," \u2014 "),xk=n(x7,"A",{href:!0});var sIr=s(xk);kYe=r(sIr,"SqueezeBertTokenizer"),sIr.forEach(t),RYe=r(x7," or "),kk=n(x7,"A",{href:!0});var lIr=s(kk);SYe=r(lIr,"SqueezeBertTokenizerFast"),lIr.forEach(t),PYe=r(x7," (SqueezeBERT model)"),x7.forEach(t),$Ye=i(y),$s=n(y,"LI",{});var k7=s($s);LJ=n(k7,"STRONG",{});var iIr=s(LJ);IYe=r(iIr,"t5"),iIr.forEach(t),jYe=r(k7," \u2014 "),Rk=n(k7,"A",{href:!0});var dIr=s(Rk);DYe=r(dIr,"T5Tokenizer"),dIr.forEach(t),NYe=r(k7," or "),Sk=n(k7,"A",{href:!0});var cIr=s(Sk);qYe=r(cIr,"T5TokenizerFast"),cIr.forEach(t),OYe=r(k7," (T5 model)"),k7.forEach(t),GYe=i(y),Zg=n(y,"LI",{});var lFe=s(Zg);BJ=n(lFe,"STRONG",{});var fIr=s(BJ);XYe=r(fIr,"tapas"),fIr.forEach(t),VYe=r(lFe," \u2014 "),Pk=n(lFe,"A",{href:!0});var mIr=s(Pk);zYe=r(mIr,"TapasTokenizer"),mIr.forEach(t),WYe=r(lFe," (TAPAS model)"),lFe.forEach(t),QYe=i(y),eh=n(y,"LI",{});var iFe=s(eh);xJ=n(iFe,"STRONG",{});var gIr=s(xJ);HYe=r(gIr,"transfo-xl"),gIr.forEach(t),UYe=r(iFe," \u2014 "),$k=n(iFe,"A",{href:!0});var hIr=s($k);JYe=r(hIr,"TransfoXLTokenizer"),hIr.forEach(t),YYe=r(iFe," (Transformer-XL model)"),iFe.forEach(t),KYe=i(y),oh=n(y,"LI",{});var dFe=s(oh);kJ=n(dFe,"STRONG",{});var pIr=s(kJ);ZYe=r(pIr,"wav2vec2"),pIr.forEach(t),eKe=r(dFe," \u2014 "),Ik=n(dFe,"A",{href:!0});var _Ir=s(Ik);oKe=r(_Ir,"Wav2Vec2CTCTokenizer"),_Ir.forEach(t),rKe=r(dFe," (Wav2Vec2 model)"),dFe.forEach(t),tKe=i(y),rh=n(y,"LI",{});var cFe=s(rh);RJ=n(cFe,"STRONG",{});var uIr=s(RJ);aKe=r(uIr,"wav2vec2_phoneme"),uIr.forEach(t),nKe=r(cFe," \u2014 "),jk=n(cFe,"A",{href:!0});var bIr=s(jk);sKe=r(bIr,"Wav2Vec2PhonemeCTCTokenizer"),bIr.forEach(t),lKe=r(cFe," (Wav2Vec2Phoneme model)"),cFe.forEach(t),iKe=i(y),Is=n(y,"LI",{});var R7=s(Is);SJ=n(R7,"STRONG",{});var vIr=s(SJ);dKe=r(vIr,"xglm"),vIr.forEach(t),cKe=r(R7," \u2014 "),Dk=n(R7,"A",{href:!0});var TIr=s(Dk);fKe=r(TIr,"XGLMTokenizer"),TIr.forEach(t),mKe=r(R7," or "),Nk=n(R7,"A",{href:!0});var FIr=s(Nk);gKe=r(FIr,"XGLMTokenizerFast"),FIr.forEach(t),hKe=r(R7," (XGLM model)"),R7.forEach(t),pKe=i(y),th=n(y,"LI",{});var fFe=s(th);PJ=n(fFe,"STRONG",{});var CIr=s(PJ);_Ke=r(CIr,"xlm"),CIr.forEach(t),uKe=r(fFe," \u2014 "),qk=n(fFe,"A",{href:!0});var MIr=s(qk);bKe=r(MIr,"XLMTokenizer"),MIr.forEach(t),vKe=r(fFe," (XLM model)"),fFe.forEach(t),TKe=i(y),ah=n(y,"LI",{});var mFe=s(ah);$J=n(mFe,"STRONG",{});var EIr=s($J);FKe=r(EIr,"xlm-prophetnet"),EIr.forEach(t),CKe=r(mFe," \u2014 "),Ok=n(mFe,"A",{href:!0});var yIr=s(Ok);MKe=r(yIr,"XLMProphetNetTokenizer"),yIr.forEach(t),EKe=r(mFe," (XLMProphetNet model)"),mFe.forEach(t),yKe=i(y),js=n(y,"LI",{});var S7=s(js);IJ=n(S7,"STRONG",{});var wIr=s(IJ);wKe=r(wIr,"xlm-roberta"),wIr.forEach(t),AKe=r(S7," \u2014 "),Gk=n(S7,"A",{href:!0});var AIr=s(Gk);LKe=r(AIr,"XLMRobertaTokenizer"),AIr.forEach(t),BKe=r(S7," or "),Xk=n(S7,"A",{href:!0});var LIr=s(Xk);xKe=r(LIr,"XLMRobertaTokenizerFast"),LIr.forEach(t),kKe=r(S7," (XLM-RoBERTa model)"),S7.forEach(t),RKe=i(y),Ds=n(y,"LI",{});var P7=s(Ds);jJ=n(P7,"STRONG",{});var BIr=s(jJ);SKe=r(BIr,"xlnet"),BIr.forEach(t),PKe=r(P7," \u2014 "),Vk=n(P7,"A",{href:!0});var xIr=s(Vk);$Ke=r(xIr,"XLNetTokenizer"),xIr.forEach(t),IKe=r(P7," or "),zk=n(P7,"A",{href:!0});var kIr=s(zk);jKe=r(kIr,"XLNetTokenizerFast"),kIr.forEach(t),DKe=r(P7," (XLNet model)"),P7.forEach(t),y.forEach(t),NKe=i(ga),DJ=n(ga,"P",{});var RIr=s(DJ);qKe=r(RIr,"Examples:"),RIr.forEach(t),OKe=i(ga),m(dE.$$.fragment,ga),ga.forEach(t),GKe=i(Xs),nh=n(Xs,"DIV",{class:!0});var fRe=s(nh);m(cE.$$.fragment,fRe),XKe=i(fRe),NJ=n(fRe,"P",{});var SIr=s(NJ);VKe=r(SIr,"Register a new tokenizer in this mapping."),SIr.forEach(t),fRe.forEach(t),Xs.forEach(t),lxe=i(d),Qi=n(d,"H2",{class:!0});var mRe=s(Qi);sh=n(mRe,"A",{id:!0,class:!0,href:!0});var PIr=s(sh);qJ=n(PIr,"SPAN",{});var $Ir=s(qJ);m(fE.$$.fragment,$Ir),$Ir.forEach(t),PIr.forEach(t),zKe=i(mRe),OJ=n(mRe,"SPAN",{});var IIr=s(OJ);WKe=r(IIr,"AutoFeatureExtractor"),IIr.forEach(t),mRe.forEach(t),ixe=i(d),Ho=n(d,"DIV",{class:!0});var Vs=s(Ho);m(mE.$$.fragment,Vs),QKe=i(Vs),gE=n(Vs,"P",{});var gRe=s(gE);HKe=r(gRe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Wk=n(gRe,"A",{href:!0});var jIr=s(Wk);UKe=r(jIr,"AutoFeatureExtractor.from_pretrained()"),jIr.forEach(t),JKe=r(gRe," class method."),gRe.forEach(t),YKe=i(Vs),hE=n(Vs,"P",{});var hRe=s(hE);KKe=r(hRe,"This class cannot be instantiated directly using "),GJ=n(hRe,"CODE",{});var DIr=s(GJ);ZKe=r(DIr,"__init__()"),DIr.forEach(t),eZe=r(hRe," (throws an error)."),hRe.forEach(t),oZe=i(Vs),$e=n(Vs,"DIV",{class:!0});var Dt=s($e);m(pE.$$.fragment,Dt),rZe=i(Dt),XJ=n(Dt,"P",{});var NIr=s(XJ);tZe=r(NIr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),NIr.forEach(t),aZe=i(Dt),Ga=n(Dt,"P",{});var QM=s(Ga);nZe=r(QM,"The feature extractor class to instantiate is selected based on the "),VJ=n(QM,"CODE",{});var qIr=s(VJ);sZe=r(qIr,"model_type"),qIr.forEach(t),lZe=r(QM,` property of the config object
(either passed as an argument or loaded from `),zJ=n(QM,"CODE",{});var OIr=s(zJ);iZe=r(OIr,"pretrained_model_name_or_path"),OIr.forEach(t),dZe=r(QM,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),WJ=n(QM,"CODE",{});var GIr=s(WJ);cZe=r(GIr,"pretrained_model_name_or_path"),GIr.forEach(t),fZe=r(QM,":"),QM.forEach(t),mZe=i(Dt),ae=n(Dt,"UL",{});var le=s(ae);lh=n(le,"LI",{});var gFe=s(lh);QJ=n(gFe,"STRONG",{});var XIr=s(QJ);gZe=r(XIr,"beit"),XIr.forEach(t),hZe=r(gFe," \u2014 "),Qk=n(gFe,"A",{href:!0});var VIr=s(Qk);pZe=r(VIr,"BeitFeatureExtractor"),VIr.forEach(t),_Ze=r(gFe," (BEiT model)"),gFe.forEach(t),uZe=i(le),ih=n(le,"LI",{});var hFe=s(ih);HJ=n(hFe,"STRONG",{});var zIr=s(HJ);bZe=r(zIr,"clip"),zIr.forEach(t),vZe=r(hFe," \u2014 "),Hk=n(hFe,"A",{href:!0});var WIr=s(Hk);TZe=r(WIr,"CLIPFeatureExtractor"),WIr.forEach(t),FZe=r(hFe," (CLIP model)"),hFe.forEach(t),CZe=i(le),dh=n(le,"LI",{});var pFe=s(dh);UJ=n(pFe,"STRONG",{});var QIr=s(UJ);MZe=r(QIr,"convnext"),QIr.forEach(t),EZe=r(pFe," \u2014 "),Uk=n(pFe,"A",{href:!0});var HIr=s(Uk);yZe=r(HIr,"ConvNextFeatureExtractor"),HIr.forEach(t),wZe=r(pFe," (ConvNext model)"),pFe.forEach(t),AZe=i(le),ch=n(le,"LI",{});var _Fe=s(ch);JJ=n(_Fe,"STRONG",{});var UIr=s(JJ);LZe=r(UIr,"deit"),UIr.forEach(t),BZe=r(_Fe," \u2014 "),Jk=n(_Fe,"A",{href:!0});var JIr=s(Jk);xZe=r(JIr,"DeiTFeatureExtractor"),JIr.forEach(t),kZe=r(_Fe," (DeiT model)"),_Fe.forEach(t),RZe=i(le),fh=n(le,"LI",{});var uFe=s(fh);YJ=n(uFe,"STRONG",{});var YIr=s(YJ);SZe=r(YIr,"detr"),YIr.forEach(t),PZe=r(uFe," \u2014 "),Yk=n(uFe,"A",{href:!0});var KIr=s(Yk);$Ze=r(KIr,"DetrFeatureExtractor"),KIr.forEach(t),IZe=r(uFe," (DETR model)"),uFe.forEach(t),jZe=i(le),mh=n(le,"LI",{});var bFe=s(mh);KJ=n(bFe,"STRONG",{});var ZIr=s(KJ);DZe=r(ZIr,"hubert"),ZIr.forEach(t),NZe=r(bFe," \u2014 "),Kk=n(bFe,"A",{href:!0});var ejr=s(Kk);qZe=r(ejr,"Wav2Vec2FeatureExtractor"),ejr.forEach(t),OZe=r(bFe," (Hubert model)"),bFe.forEach(t),GZe=i(le),gh=n(le,"LI",{});var vFe=s(gh);ZJ=n(vFe,"STRONG",{});var ojr=s(ZJ);XZe=r(ojr,"layoutlmv2"),ojr.forEach(t),VZe=r(vFe," \u2014 "),Zk=n(vFe,"A",{href:!0});var rjr=s(Zk);zZe=r(rjr,"LayoutLMv2FeatureExtractor"),rjr.forEach(t),WZe=r(vFe," (LayoutLMv2 model)"),vFe.forEach(t),QZe=i(le),hh=n(le,"LI",{});var TFe=s(hh);eY=n(TFe,"STRONG",{});var tjr=s(eY);HZe=r(tjr,"maskformer"),tjr.forEach(t),UZe=r(TFe," \u2014 "),eR=n(TFe,"A",{href:!0});var ajr=s(eR);JZe=r(ajr,"MaskFormerFeatureExtractor"),ajr.forEach(t),YZe=r(TFe," (MaskFormer model)"),TFe.forEach(t),KZe=i(le),ph=n(le,"LI",{});var FFe=s(ph);oY=n(FFe,"STRONG",{});var njr=s(oY);ZZe=r(njr,"perceiver"),njr.forEach(t),eeo=r(FFe," \u2014 "),oR=n(FFe,"A",{href:!0});var sjr=s(oR);oeo=r(sjr,"PerceiverFeatureExtractor"),sjr.forEach(t),reo=r(FFe," (Perceiver model)"),FFe.forEach(t),teo=i(le),_h=n(le,"LI",{});var CFe=s(_h);rY=n(CFe,"STRONG",{});var ljr=s(rY);aeo=r(ljr,"poolformer"),ljr.forEach(t),neo=r(CFe," \u2014 "),rR=n(CFe,"A",{href:!0});var ijr=s(rR);seo=r(ijr,"PoolFormerFeatureExtractor"),ijr.forEach(t),leo=r(CFe," (PoolFormer model)"),CFe.forEach(t),ieo=i(le),uh=n(le,"LI",{});var MFe=s(uh);tY=n(MFe,"STRONG",{});var djr=s(tY);deo=r(djr,"segformer"),djr.forEach(t),ceo=r(MFe," \u2014 "),tR=n(MFe,"A",{href:!0});var cjr=s(tR);feo=r(cjr,"SegformerFeatureExtractor"),cjr.forEach(t),meo=r(MFe," (SegFormer model)"),MFe.forEach(t),geo=i(le),bh=n(le,"LI",{});var EFe=s(bh);aY=n(EFe,"STRONG",{});var fjr=s(aY);heo=r(fjr,"speech_to_text"),fjr.forEach(t),peo=r(EFe," \u2014 "),aR=n(EFe,"A",{href:!0});var mjr=s(aR);_eo=r(mjr,"Speech2TextFeatureExtractor"),mjr.forEach(t),ueo=r(EFe," (Speech2Text model)"),EFe.forEach(t),beo=i(le),vh=n(le,"LI",{});var yFe=s(vh);nY=n(yFe,"STRONG",{});var gjr=s(nY);veo=r(gjr,"swin"),gjr.forEach(t),Teo=r(yFe," \u2014 "),nR=n(yFe,"A",{href:!0});var hjr=s(nR);Feo=r(hjr,"ViTFeatureExtractor"),hjr.forEach(t),Ceo=r(yFe," (Swin model)"),yFe.forEach(t),Meo=i(le),Th=n(le,"LI",{});var wFe=s(Th);sY=n(wFe,"STRONG",{});var pjr=s(sY);Eeo=r(pjr,"vit"),pjr.forEach(t),yeo=r(wFe," \u2014 "),sR=n(wFe,"A",{href:!0});var _jr=s(sR);weo=r(_jr,"ViTFeatureExtractor"),_jr.forEach(t),Aeo=r(wFe," (ViT model)"),wFe.forEach(t),Leo=i(le),Fh=n(le,"LI",{});var AFe=s(Fh);lY=n(AFe,"STRONG",{});var ujr=s(lY);Beo=r(ujr,"vit_mae"),ujr.forEach(t),xeo=r(AFe," \u2014 "),lR=n(AFe,"A",{href:!0});var bjr=s(lR);keo=r(bjr,"ViTFeatureExtractor"),bjr.forEach(t),Reo=r(AFe," (ViTMAE model)"),AFe.forEach(t),Seo=i(le),Ch=n(le,"LI",{});var LFe=s(Ch);iY=n(LFe,"STRONG",{});var vjr=s(iY);Peo=r(vjr,"wav2vec2"),vjr.forEach(t),$eo=r(LFe," \u2014 "),iR=n(LFe,"A",{href:!0});var Tjr=s(iR);Ieo=r(Tjr,"Wav2Vec2FeatureExtractor"),Tjr.forEach(t),jeo=r(LFe," (Wav2Vec2 model)"),LFe.forEach(t),le.forEach(t),Deo=i(Dt),m(Mh.$$.fragment,Dt),Neo=i(Dt),dY=n(Dt,"P",{});var Fjr=s(dY);qeo=r(Fjr,"Examples:"),Fjr.forEach(t),Oeo=i(Dt),m(_E.$$.fragment,Dt),Dt.forEach(t),Geo=i(Vs),Eh=n(Vs,"DIV",{class:!0});var pRe=s(Eh);m(uE.$$.fragment,pRe),Xeo=i(pRe),cY=n(pRe,"P",{});var Cjr=s(cY);Veo=r(Cjr,"Register a new feature extractor for this class."),Cjr.forEach(t),pRe.forEach(t),Vs.forEach(t),dxe=i(d),Hi=n(d,"H2",{class:!0});var _Re=s(Hi);yh=n(_Re,"A",{id:!0,class:!0,href:!0});var Mjr=s(yh);fY=n(Mjr,"SPAN",{});var Ejr=s(fY);m(bE.$$.fragment,Ejr),Ejr.forEach(t),Mjr.forEach(t),zeo=i(_Re),mY=n(_Re,"SPAN",{});var yjr=s(mY);Weo=r(yjr,"AutoProcessor"),yjr.forEach(t),_Re.forEach(t),cxe=i(d),Uo=n(d,"DIV",{class:!0});var zs=s(Uo);m(vE.$$.fragment,zs),Qeo=i(zs),TE=n(zs,"P",{});var uRe=s(TE);Heo=r(uRe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dR=n(uRe,"A",{href:!0});var wjr=s(dR);Ueo=r(wjr,"AutoProcessor.from_pretrained()"),wjr.forEach(t),Jeo=r(uRe," class method."),uRe.forEach(t),Yeo=i(zs),FE=n(zs,"P",{});var bRe=s(FE);Keo=r(bRe,"This class cannot be instantiated directly using "),gY=n(bRe,"CODE",{});var Ajr=s(gY);Zeo=r(Ajr,"__init__()"),Ajr.forEach(t),eoo=r(bRe," (throws an error)."),bRe.forEach(t),ooo=i(zs),Ie=n(zs,"DIV",{class:!0});var Nt=s(Ie);m(CE.$$.fragment,Nt),roo=i(Nt),hY=n(Nt,"P",{});var Ljr=s(hY);too=r(Ljr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ljr.forEach(t),aoo=i(Nt),Ui=n(Nt,"P",{});var Tz=s(Ui);noo=r(Tz,"The processor class to instantiate is selected based on the "),pY=n(Tz,"CODE",{});var Bjr=s(pY);soo=r(Bjr,"model_type"),Bjr.forEach(t),loo=r(Tz,` property of the config object (either
passed as an argument or loaded from `),_Y=n(Tz,"CODE",{});var xjr=s(_Y);ioo=r(xjr,"pretrained_model_name_or_path"),xjr.forEach(t),doo=r(Tz," if possible):"),Tz.forEach(t),coo=i(Nt),Be=n(Nt,"UL",{});var No=s(Be);wh=n(No,"LI",{});var BFe=s(wh);uY=n(BFe,"STRONG",{});var kjr=s(uY);foo=r(kjr,"clip"),kjr.forEach(t),moo=r(BFe," \u2014 "),cR=n(BFe,"A",{href:!0});var Rjr=s(cR);goo=r(Rjr,"CLIPProcessor"),Rjr.forEach(t),hoo=r(BFe," (CLIP model)"),BFe.forEach(t),poo=i(No),Ah=n(No,"LI",{});var xFe=s(Ah);bY=n(xFe,"STRONG",{});var Sjr=s(bY);_oo=r(Sjr,"layoutlmv2"),Sjr.forEach(t),uoo=r(xFe," \u2014 "),fR=n(xFe,"A",{href:!0});var Pjr=s(fR);boo=r(Pjr,"LayoutLMv2Processor"),Pjr.forEach(t),voo=r(xFe," (LayoutLMv2 model)"),xFe.forEach(t),Too=i(No),Lh=n(No,"LI",{});var kFe=s(Lh);vY=n(kFe,"STRONG",{});var $jr=s(vY);Foo=r($jr,"layoutxlm"),$jr.forEach(t),Coo=r(kFe," \u2014 "),mR=n(kFe,"A",{href:!0});var Ijr=s(mR);Moo=r(Ijr,"LayoutXLMProcessor"),Ijr.forEach(t),Eoo=r(kFe," (LayoutXLM model)"),kFe.forEach(t),yoo=i(No),Bh=n(No,"LI",{});var RFe=s(Bh);TY=n(RFe,"STRONG",{});var jjr=s(TY);woo=r(jjr,"speech_to_text"),jjr.forEach(t),Aoo=r(RFe," \u2014 "),gR=n(RFe,"A",{href:!0});var Djr=s(gR);Loo=r(Djr,"Speech2TextProcessor"),Djr.forEach(t),Boo=r(RFe," (Speech2Text model)"),RFe.forEach(t),xoo=i(No),xh=n(No,"LI",{});var SFe=s(xh);FY=n(SFe,"STRONG",{});var Njr=s(FY);koo=r(Njr,"speech_to_text_2"),Njr.forEach(t),Roo=r(SFe," \u2014 "),hR=n(SFe,"A",{href:!0});var qjr=s(hR);Soo=r(qjr,"Speech2Text2Processor"),qjr.forEach(t),Poo=r(SFe," (Speech2Text2 model)"),SFe.forEach(t),$oo=i(No),kh=n(No,"LI",{});var PFe=s(kh);CY=n(PFe,"STRONG",{});var Ojr=s(CY);Ioo=r(Ojr,"trocr"),Ojr.forEach(t),joo=r(PFe," \u2014 "),pR=n(PFe,"A",{href:!0});var Gjr=s(pR);Doo=r(Gjr,"TrOCRProcessor"),Gjr.forEach(t),Noo=r(PFe," (TrOCR model)"),PFe.forEach(t),qoo=i(No),Rh=n(No,"LI",{});var $Fe=s(Rh);MY=n($Fe,"STRONG",{});var Xjr=s(MY);Ooo=r(Xjr,"vision-text-dual-encoder"),Xjr.forEach(t),Goo=r($Fe," \u2014 "),_R=n($Fe,"A",{href:!0});var Vjr=s(_R);Xoo=r(Vjr,"VisionTextDualEncoderProcessor"),Vjr.forEach(t),Voo=r($Fe," (VisionTextDualEncoder model)"),$Fe.forEach(t),zoo=i(No),Sh=n(No,"LI",{});var IFe=s(Sh);EY=n(IFe,"STRONG",{});var zjr=s(EY);Woo=r(zjr,"wav2vec2"),zjr.forEach(t),Qoo=r(IFe," \u2014 "),uR=n(IFe,"A",{href:!0});var Wjr=s(uR);Hoo=r(Wjr,"Wav2Vec2Processor"),Wjr.forEach(t),Uoo=r(IFe," (Wav2Vec2 model)"),IFe.forEach(t),No.forEach(t),Joo=i(Nt),m(Ph.$$.fragment,Nt),Yoo=i(Nt),yY=n(Nt,"P",{});var Qjr=s(yY);Koo=r(Qjr,"Examples:"),Qjr.forEach(t),Zoo=i(Nt),m(ME.$$.fragment,Nt),Nt.forEach(t),ero=i(zs),$h=n(zs,"DIV",{class:!0});var vRe=s($h);m(EE.$$.fragment,vRe),oro=i(vRe),wY=n(vRe,"P",{});var Hjr=s(wY);rro=r(Hjr,"Register a new processor for this class."),Hjr.forEach(t),vRe.forEach(t),zs.forEach(t),fxe=i(d),Ji=n(d,"H2",{class:!0});var TRe=s(Ji);Ih=n(TRe,"A",{id:!0,class:!0,href:!0});var Ujr=s(Ih);AY=n(Ujr,"SPAN",{});var Jjr=s(AY);m(yE.$$.fragment,Jjr),Jjr.forEach(t),Ujr.forEach(t),tro=i(TRe),LY=n(TRe,"SPAN",{});var Yjr=s(LY);aro=r(Yjr,"AutoModel"),Yjr.forEach(t),TRe.forEach(t),mxe=i(d),Jo=n(d,"DIV",{class:!0});var Ws=s(Jo);m(wE.$$.fragment,Ws),nro=i(Ws),Yi=n(Ws,"P",{});var Fz=s(Yi);sro=r(Fz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BY=n(Fz,"CODE",{});var Kjr=s(BY);lro=r(Kjr,"from_pretrained()"),Kjr.forEach(t),iro=r(Fz,"class method or the "),xY=n(Fz,"CODE",{});var Zjr=s(xY);dro=r(Zjr,"from_config()"),Zjr.forEach(t),cro=r(Fz,`class
method.`),Fz.forEach(t),fro=i(Ws),AE=n(Ws,"P",{});var FRe=s(AE);mro=r(FRe,"This class cannot be instantiated directly using "),kY=n(FRe,"CODE",{});var eDr=s(kY);gro=r(eDr,"__init__()"),eDr.forEach(t),hro=r(FRe," (throws an error)."),FRe.forEach(t),pro=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);m(LE.$$.fragment,Qs),_ro=i(Qs),RY=n(Qs,"P",{});var oDr=s(RY);uro=r(oDr,"Instantiates one of the base model classes of the library from a configuration."),oDr.forEach(t),bro=i(Qs),Ki=n(Qs,"P",{});var Cz=s(Ki);vro=r(Cz,`Note:
Loading a model from its configuration file does `),SY=n(Cz,"STRONG",{});var rDr=s(SY);Tro=r(rDr,"not"),rDr.forEach(t),Fro=r(Cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=n(Cz,"CODE",{});var tDr=s(PY);Cro=r(tDr,"from_pretrained()"),tDr.forEach(t),Mro=r(Cz,"to load the model weights."),Cz.forEach(t),Ero=i(Qs),$Y=n(Qs,"P",{});var aDr=s($Y);yro=r(aDr,"Examples:"),aDr.forEach(t),wro=i(Qs),m(BE.$$.fragment,Qs),Qs.forEach(t),Aro=i(Ws),je=n(Ws,"DIV",{class:!0});var qt=s(je);m(xE.$$.fragment,qt),Lro=i(qt),IY=n(qt,"P",{});var nDr=s(IY);Bro=r(nDr,"Instantiate one of the base model classes of the library from a pretrained model."),nDr.forEach(t),xro=i(qt),Xa=n(qt,"P",{});var HM=s(Xa);kro=r(HM,"The model class to instantiate is selected based on the "),jY=n(HM,"CODE",{});var sDr=s(jY);Rro=r(sDr,"model_type"),sDr.forEach(t),Sro=r(HM,` property of the config object (either
passed as an argument or loaded from `),DY=n(HM,"CODE",{});var lDr=s(DY);Pro=r(lDr,"pretrained_model_name_or_path"),lDr.forEach(t),$ro=r(HM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NY=n(HM,"CODE",{});var iDr=s(NY);Iro=r(iDr,"pretrained_model_name_or_path"),iDr.forEach(t),jro=r(HM,":"),HM.forEach(t),Dro=i(qt),F=n(qt,"UL",{});var C=s(F);jh=n(C,"LI",{});var jFe=s(jh);qY=n(jFe,"STRONG",{});var dDr=s(qY);Nro=r(dDr,"albert"),dDr.forEach(t),qro=r(jFe," \u2014 "),bR=n(jFe,"A",{href:!0});var cDr=s(bR);Oro=r(cDr,"AlbertModel"),cDr.forEach(t),Gro=r(jFe," (ALBERT model)"),jFe.forEach(t),Xro=i(C),Dh=n(C,"LI",{});var DFe=s(Dh);OY=n(DFe,"STRONG",{});var fDr=s(OY);Vro=r(fDr,"bart"),fDr.forEach(t),zro=r(DFe," \u2014 "),vR=n(DFe,"A",{href:!0});var mDr=s(vR);Wro=r(mDr,"BartModel"),mDr.forEach(t),Qro=r(DFe," (BART model)"),DFe.forEach(t),Hro=i(C),Nh=n(C,"LI",{});var NFe=s(Nh);GY=n(NFe,"STRONG",{});var gDr=s(GY);Uro=r(gDr,"beit"),gDr.forEach(t),Jro=r(NFe," \u2014 "),TR=n(NFe,"A",{href:!0});var hDr=s(TR);Yro=r(hDr,"BeitModel"),hDr.forEach(t),Kro=r(NFe," (BEiT model)"),NFe.forEach(t),Zro=i(C),qh=n(C,"LI",{});var qFe=s(qh);XY=n(qFe,"STRONG",{});var pDr=s(XY);eto=r(pDr,"bert"),pDr.forEach(t),oto=r(qFe," \u2014 "),FR=n(qFe,"A",{href:!0});var _Dr=s(FR);rto=r(_Dr,"BertModel"),_Dr.forEach(t),tto=r(qFe," (BERT model)"),qFe.forEach(t),ato=i(C),Oh=n(C,"LI",{});var OFe=s(Oh);VY=n(OFe,"STRONG",{});var uDr=s(VY);nto=r(uDr,"bert-generation"),uDr.forEach(t),sto=r(OFe," \u2014 "),CR=n(OFe,"A",{href:!0});var bDr=s(CR);lto=r(bDr,"BertGenerationEncoder"),bDr.forEach(t),ito=r(OFe," (Bert Generation model)"),OFe.forEach(t),dto=i(C),Gh=n(C,"LI",{});var GFe=s(Gh);zY=n(GFe,"STRONG",{});var vDr=s(zY);cto=r(vDr,"big_bird"),vDr.forEach(t),fto=r(GFe," \u2014 "),MR=n(GFe,"A",{href:!0});var TDr=s(MR);mto=r(TDr,"BigBirdModel"),TDr.forEach(t),gto=r(GFe," (BigBird model)"),GFe.forEach(t),hto=i(C),Xh=n(C,"LI",{});var XFe=s(Xh);WY=n(XFe,"STRONG",{});var FDr=s(WY);pto=r(FDr,"bigbird_pegasus"),FDr.forEach(t),_to=r(XFe," \u2014 "),ER=n(XFe,"A",{href:!0});var CDr=s(ER);uto=r(CDr,"BigBirdPegasusModel"),CDr.forEach(t),bto=r(XFe," (BigBirdPegasus model)"),XFe.forEach(t),vto=i(C),Vh=n(C,"LI",{});var VFe=s(Vh);QY=n(VFe,"STRONG",{});var MDr=s(QY);Tto=r(MDr,"blenderbot"),MDr.forEach(t),Fto=r(VFe," \u2014 "),yR=n(VFe,"A",{href:!0});var EDr=s(yR);Cto=r(EDr,"BlenderbotModel"),EDr.forEach(t),Mto=r(VFe," (Blenderbot model)"),VFe.forEach(t),Eto=i(C),zh=n(C,"LI",{});var zFe=s(zh);HY=n(zFe,"STRONG",{});var yDr=s(HY);yto=r(yDr,"blenderbot-small"),yDr.forEach(t),wto=r(zFe," \u2014 "),wR=n(zFe,"A",{href:!0});var wDr=s(wR);Ato=r(wDr,"BlenderbotSmallModel"),wDr.forEach(t),Lto=r(zFe," (BlenderbotSmall model)"),zFe.forEach(t),Bto=i(C),Wh=n(C,"LI",{});var WFe=s(Wh);UY=n(WFe,"STRONG",{});var ADr=s(UY);xto=r(ADr,"camembert"),ADr.forEach(t),kto=r(WFe," \u2014 "),AR=n(WFe,"A",{href:!0});var LDr=s(AR);Rto=r(LDr,"CamembertModel"),LDr.forEach(t),Sto=r(WFe," (CamemBERT model)"),WFe.forEach(t),Pto=i(C),Qh=n(C,"LI",{});var QFe=s(Qh);JY=n(QFe,"STRONG",{});var BDr=s(JY);$to=r(BDr,"canine"),BDr.forEach(t),Ito=r(QFe," \u2014 "),LR=n(QFe,"A",{href:!0});var xDr=s(LR);jto=r(xDr,"CanineModel"),xDr.forEach(t),Dto=r(QFe," (Canine model)"),QFe.forEach(t),Nto=i(C),Hh=n(C,"LI",{});var HFe=s(Hh);YY=n(HFe,"STRONG",{});var kDr=s(YY);qto=r(kDr,"clip"),kDr.forEach(t),Oto=r(HFe," \u2014 "),BR=n(HFe,"A",{href:!0});var RDr=s(BR);Gto=r(RDr,"CLIPModel"),RDr.forEach(t),Xto=r(HFe," (CLIP model)"),HFe.forEach(t),Vto=i(C),Uh=n(C,"LI",{});var UFe=s(Uh);KY=n(UFe,"STRONG",{});var SDr=s(KY);zto=r(SDr,"convbert"),SDr.forEach(t),Wto=r(UFe," \u2014 "),xR=n(UFe,"A",{href:!0});var PDr=s(xR);Qto=r(PDr,"ConvBertModel"),PDr.forEach(t),Hto=r(UFe," (ConvBERT model)"),UFe.forEach(t),Uto=i(C),Jh=n(C,"LI",{});var JFe=s(Jh);ZY=n(JFe,"STRONG",{});var $Dr=s(ZY);Jto=r($Dr,"convnext"),$Dr.forEach(t),Yto=r(JFe," \u2014 "),kR=n(JFe,"A",{href:!0});var IDr=s(kR);Kto=r(IDr,"ConvNextModel"),IDr.forEach(t),Zto=r(JFe," (ConvNext model)"),JFe.forEach(t),eao=i(C),Yh=n(C,"LI",{});var YFe=s(Yh);eK=n(YFe,"STRONG",{});var jDr=s(eK);oao=r(jDr,"ctrl"),jDr.forEach(t),rao=r(YFe," \u2014 "),RR=n(YFe,"A",{href:!0});var DDr=s(RR);tao=r(DDr,"CTRLModel"),DDr.forEach(t),aao=r(YFe," (CTRL model)"),YFe.forEach(t),nao=i(C),Kh=n(C,"LI",{});var KFe=s(Kh);oK=n(KFe,"STRONG",{});var NDr=s(oK);sao=r(NDr,"data2vec-audio"),NDr.forEach(t),lao=r(KFe," \u2014 "),SR=n(KFe,"A",{href:!0});var qDr=s(SR);iao=r(qDr,"Data2VecAudioModel"),qDr.forEach(t),dao=r(KFe," (Data2VecAudio model)"),KFe.forEach(t),cao=i(C),Zh=n(C,"LI",{});var ZFe=s(Zh);rK=n(ZFe,"STRONG",{});var ODr=s(rK);fao=r(ODr,"data2vec-text"),ODr.forEach(t),mao=r(ZFe," \u2014 "),PR=n(ZFe,"A",{href:!0});var GDr=s(PR);gao=r(GDr,"Data2VecTextModel"),GDr.forEach(t),hao=r(ZFe," (Data2VecText model)"),ZFe.forEach(t),pao=i(C),ep=n(C,"LI",{});var eCe=s(ep);tK=n(eCe,"STRONG",{});var XDr=s(tK);_ao=r(XDr,"deberta"),XDr.forEach(t),uao=r(eCe," \u2014 "),$R=n(eCe,"A",{href:!0});var VDr=s($R);bao=r(VDr,"DebertaModel"),VDr.forEach(t),vao=r(eCe," (DeBERTa model)"),eCe.forEach(t),Tao=i(C),op=n(C,"LI",{});var oCe=s(op);aK=n(oCe,"STRONG",{});var zDr=s(aK);Fao=r(zDr,"deberta-v2"),zDr.forEach(t),Cao=r(oCe," \u2014 "),IR=n(oCe,"A",{href:!0});var WDr=s(IR);Mao=r(WDr,"DebertaV2Model"),WDr.forEach(t),Eao=r(oCe," (DeBERTa-v2 model)"),oCe.forEach(t),yao=i(C),rp=n(C,"LI",{});var rCe=s(rp);nK=n(rCe,"STRONG",{});var QDr=s(nK);wao=r(QDr,"deit"),QDr.forEach(t),Aao=r(rCe," \u2014 "),jR=n(rCe,"A",{href:!0});var HDr=s(jR);Lao=r(HDr,"DeiTModel"),HDr.forEach(t),Bao=r(rCe," (DeiT model)"),rCe.forEach(t),xao=i(C),tp=n(C,"LI",{});var tCe=s(tp);sK=n(tCe,"STRONG",{});var UDr=s(sK);kao=r(UDr,"detr"),UDr.forEach(t),Rao=r(tCe," \u2014 "),DR=n(tCe,"A",{href:!0});var JDr=s(DR);Sao=r(JDr,"DetrModel"),JDr.forEach(t),Pao=r(tCe," (DETR model)"),tCe.forEach(t),$ao=i(C),ap=n(C,"LI",{});var aCe=s(ap);lK=n(aCe,"STRONG",{});var YDr=s(lK);Iao=r(YDr,"distilbert"),YDr.forEach(t),jao=r(aCe," \u2014 "),NR=n(aCe,"A",{href:!0});var KDr=s(NR);Dao=r(KDr,"DistilBertModel"),KDr.forEach(t),Nao=r(aCe," (DistilBERT model)"),aCe.forEach(t),qao=i(C),np=n(C,"LI",{});var nCe=s(np);iK=n(nCe,"STRONG",{});var ZDr=s(iK);Oao=r(ZDr,"dpr"),ZDr.forEach(t),Gao=r(nCe," \u2014 "),qR=n(nCe,"A",{href:!0});var eNr=s(qR);Xao=r(eNr,"DPRQuestionEncoder"),eNr.forEach(t),Vao=r(nCe," (DPR model)"),nCe.forEach(t),zao=i(C),sp=n(C,"LI",{});var sCe=s(sp);dK=n(sCe,"STRONG",{});var oNr=s(dK);Wao=r(oNr,"electra"),oNr.forEach(t),Qao=r(sCe," \u2014 "),OR=n(sCe,"A",{href:!0});var rNr=s(OR);Hao=r(rNr,"ElectraModel"),rNr.forEach(t),Uao=r(sCe," (ELECTRA model)"),sCe.forEach(t),Jao=i(C),lp=n(C,"LI",{});var lCe=s(lp);cK=n(lCe,"STRONG",{});var tNr=s(cK);Yao=r(tNr,"flaubert"),tNr.forEach(t),Kao=r(lCe," \u2014 "),GR=n(lCe,"A",{href:!0});var aNr=s(GR);Zao=r(aNr,"FlaubertModel"),aNr.forEach(t),eno=r(lCe," (FlauBERT model)"),lCe.forEach(t),ono=i(C),ip=n(C,"LI",{});var iCe=s(ip);fK=n(iCe,"STRONG",{});var nNr=s(fK);rno=r(nNr,"fnet"),nNr.forEach(t),tno=r(iCe," \u2014 "),XR=n(iCe,"A",{href:!0});var sNr=s(XR);ano=r(sNr,"FNetModel"),sNr.forEach(t),nno=r(iCe," (FNet model)"),iCe.forEach(t),sno=i(C),dp=n(C,"LI",{});var dCe=s(dp);mK=n(dCe,"STRONG",{});var lNr=s(mK);lno=r(lNr,"fsmt"),lNr.forEach(t),ino=r(dCe," \u2014 "),VR=n(dCe,"A",{href:!0});var iNr=s(VR);dno=r(iNr,"FSMTModel"),iNr.forEach(t),cno=r(dCe," (FairSeq Machine-Translation model)"),dCe.forEach(t),fno=i(C),Ns=n(C,"LI",{});var $7=s(Ns);gK=n($7,"STRONG",{});var dNr=s(gK);mno=r(dNr,"funnel"),dNr.forEach(t),gno=r($7," \u2014 "),zR=n($7,"A",{href:!0});var cNr=s(zR);hno=r(cNr,"FunnelModel"),cNr.forEach(t),pno=r($7," or "),WR=n($7,"A",{href:!0});var fNr=s(WR);_no=r(fNr,"FunnelBaseModel"),fNr.forEach(t),uno=r($7," (Funnel Transformer model)"),$7.forEach(t),bno=i(C),cp=n(C,"LI",{});var cCe=s(cp);hK=n(cCe,"STRONG",{});var mNr=s(hK);vno=r(mNr,"gpt2"),mNr.forEach(t),Tno=r(cCe," \u2014 "),QR=n(cCe,"A",{href:!0});var gNr=s(QR);Fno=r(gNr,"GPT2Model"),gNr.forEach(t),Cno=r(cCe," (OpenAI GPT-2 model)"),cCe.forEach(t),Mno=i(C),fp=n(C,"LI",{});var fCe=s(fp);pK=n(fCe,"STRONG",{});var hNr=s(pK);Eno=r(hNr,"gpt_neo"),hNr.forEach(t),yno=r(fCe," \u2014 "),HR=n(fCe,"A",{href:!0});var pNr=s(HR);wno=r(pNr,"GPTNeoModel"),pNr.forEach(t),Ano=r(fCe," (GPT Neo model)"),fCe.forEach(t),Lno=i(C),mp=n(C,"LI",{});var mCe=s(mp);_K=n(mCe,"STRONG",{});var _Nr=s(_K);Bno=r(_Nr,"gptj"),_Nr.forEach(t),xno=r(mCe," \u2014 "),UR=n(mCe,"A",{href:!0});var uNr=s(UR);kno=r(uNr,"GPTJModel"),uNr.forEach(t),Rno=r(mCe," (GPT-J model)"),mCe.forEach(t),Sno=i(C),gp=n(C,"LI",{});var gCe=s(gp);uK=n(gCe,"STRONG",{});var bNr=s(uK);Pno=r(bNr,"hubert"),bNr.forEach(t),$no=r(gCe," \u2014 "),JR=n(gCe,"A",{href:!0});var vNr=s(JR);Ino=r(vNr,"HubertModel"),vNr.forEach(t),jno=r(gCe," (Hubert model)"),gCe.forEach(t),Dno=i(C),hp=n(C,"LI",{});var hCe=s(hp);bK=n(hCe,"STRONG",{});var TNr=s(bK);Nno=r(TNr,"ibert"),TNr.forEach(t),qno=r(hCe," \u2014 "),YR=n(hCe,"A",{href:!0});var FNr=s(YR);Ono=r(FNr,"IBertModel"),FNr.forEach(t),Gno=r(hCe," (I-BERT model)"),hCe.forEach(t),Xno=i(C),pp=n(C,"LI",{});var pCe=s(pp);vK=n(pCe,"STRONG",{});var CNr=s(vK);Vno=r(CNr,"imagegpt"),CNr.forEach(t),zno=r(pCe," \u2014 "),KR=n(pCe,"A",{href:!0});var MNr=s(KR);Wno=r(MNr,"ImageGPTModel"),MNr.forEach(t),Qno=r(pCe," (ImageGPT model)"),pCe.forEach(t),Hno=i(C),_p=n(C,"LI",{});var _Ce=s(_p);TK=n(_Ce,"STRONG",{});var ENr=s(TK);Uno=r(ENr,"layoutlm"),ENr.forEach(t),Jno=r(_Ce," \u2014 "),ZR=n(_Ce,"A",{href:!0});var yNr=s(ZR);Yno=r(yNr,"LayoutLMModel"),yNr.forEach(t),Kno=r(_Ce," (LayoutLM model)"),_Ce.forEach(t),Zno=i(C),up=n(C,"LI",{});var uCe=s(up);FK=n(uCe,"STRONG",{});var wNr=s(FK);eso=r(wNr,"layoutlmv2"),wNr.forEach(t),oso=r(uCe," \u2014 "),eS=n(uCe,"A",{href:!0});var ANr=s(eS);rso=r(ANr,"LayoutLMv2Model"),ANr.forEach(t),tso=r(uCe," (LayoutLMv2 model)"),uCe.forEach(t),aso=i(C),bp=n(C,"LI",{});var bCe=s(bp);CK=n(bCe,"STRONG",{});var LNr=s(CK);nso=r(LNr,"led"),LNr.forEach(t),sso=r(bCe," \u2014 "),oS=n(bCe,"A",{href:!0});var BNr=s(oS);lso=r(BNr,"LEDModel"),BNr.forEach(t),iso=r(bCe," (LED model)"),bCe.forEach(t),dso=i(C),vp=n(C,"LI",{});var vCe=s(vp);MK=n(vCe,"STRONG",{});var xNr=s(MK);cso=r(xNr,"longformer"),xNr.forEach(t),fso=r(vCe," \u2014 "),rS=n(vCe,"A",{href:!0});var kNr=s(rS);mso=r(kNr,"LongformerModel"),kNr.forEach(t),gso=r(vCe," (Longformer model)"),vCe.forEach(t),hso=i(C),Tp=n(C,"LI",{});var TCe=s(Tp);EK=n(TCe,"STRONG",{});var RNr=s(EK);pso=r(RNr,"luke"),RNr.forEach(t),_so=r(TCe," \u2014 "),tS=n(TCe,"A",{href:!0});var SNr=s(tS);uso=r(SNr,"LukeModel"),SNr.forEach(t),bso=r(TCe," (LUKE model)"),TCe.forEach(t),vso=i(C),Fp=n(C,"LI",{});var FCe=s(Fp);yK=n(FCe,"STRONG",{});var PNr=s(yK);Tso=r(PNr,"lxmert"),PNr.forEach(t),Fso=r(FCe," \u2014 "),aS=n(FCe,"A",{href:!0});var $Nr=s(aS);Cso=r($Nr,"LxmertModel"),$Nr.forEach(t),Mso=r(FCe," (LXMERT model)"),FCe.forEach(t),Eso=i(C),Cp=n(C,"LI",{});var CCe=s(Cp);wK=n(CCe,"STRONG",{});var INr=s(wK);yso=r(INr,"m2m_100"),INr.forEach(t),wso=r(CCe," \u2014 "),nS=n(CCe,"A",{href:!0});var jNr=s(nS);Aso=r(jNr,"M2M100Model"),jNr.forEach(t),Lso=r(CCe," (M2M100 model)"),CCe.forEach(t),Bso=i(C),Mp=n(C,"LI",{});var MCe=s(Mp);AK=n(MCe,"STRONG",{});var DNr=s(AK);xso=r(DNr,"marian"),DNr.forEach(t),kso=r(MCe," \u2014 "),sS=n(MCe,"A",{href:!0});var NNr=s(sS);Rso=r(NNr,"MarianModel"),NNr.forEach(t),Sso=r(MCe," (Marian model)"),MCe.forEach(t),Pso=i(C),Ep=n(C,"LI",{});var ECe=s(Ep);LK=n(ECe,"STRONG",{});var qNr=s(LK);$so=r(qNr,"maskformer"),qNr.forEach(t),Iso=r(ECe," \u2014 "),lS=n(ECe,"A",{href:!0});var ONr=s(lS);jso=r(ONr,"MaskFormerModel"),ONr.forEach(t),Dso=r(ECe," (MaskFormer model)"),ECe.forEach(t),Nso=i(C),yp=n(C,"LI",{});var yCe=s(yp);BK=n(yCe,"STRONG",{});var GNr=s(BK);qso=r(GNr,"mbart"),GNr.forEach(t),Oso=r(yCe," \u2014 "),iS=n(yCe,"A",{href:!0});var XNr=s(iS);Gso=r(XNr,"MBartModel"),XNr.forEach(t),Xso=r(yCe," (mBART model)"),yCe.forEach(t),Vso=i(C),wp=n(C,"LI",{});var wCe=s(wp);xK=n(wCe,"STRONG",{});var VNr=s(xK);zso=r(VNr,"megatron-bert"),VNr.forEach(t),Wso=r(wCe," \u2014 "),dS=n(wCe,"A",{href:!0});var zNr=s(dS);Qso=r(zNr,"MegatronBertModel"),zNr.forEach(t),Hso=r(wCe," (MegatronBert model)"),wCe.forEach(t),Uso=i(C),Ap=n(C,"LI",{});var ACe=s(Ap);kK=n(ACe,"STRONG",{});var WNr=s(kK);Jso=r(WNr,"mobilebert"),WNr.forEach(t),Yso=r(ACe," \u2014 "),cS=n(ACe,"A",{href:!0});var QNr=s(cS);Kso=r(QNr,"MobileBertModel"),QNr.forEach(t),Zso=r(ACe," (MobileBERT model)"),ACe.forEach(t),elo=i(C),Lp=n(C,"LI",{});var LCe=s(Lp);RK=n(LCe,"STRONG",{});var HNr=s(RK);olo=r(HNr,"mpnet"),HNr.forEach(t),rlo=r(LCe," \u2014 "),fS=n(LCe,"A",{href:!0});var UNr=s(fS);tlo=r(UNr,"MPNetModel"),UNr.forEach(t),alo=r(LCe," (MPNet model)"),LCe.forEach(t),nlo=i(C),Bp=n(C,"LI",{});var BCe=s(Bp);SK=n(BCe,"STRONG",{});var JNr=s(SK);slo=r(JNr,"mt5"),JNr.forEach(t),llo=r(BCe," \u2014 "),mS=n(BCe,"A",{href:!0});var YNr=s(mS);ilo=r(YNr,"MT5Model"),YNr.forEach(t),dlo=r(BCe," (mT5 model)"),BCe.forEach(t),clo=i(C),xp=n(C,"LI",{});var xCe=s(xp);PK=n(xCe,"STRONG",{});var KNr=s(PK);flo=r(KNr,"nystromformer"),KNr.forEach(t),mlo=r(xCe," \u2014 "),gS=n(xCe,"A",{href:!0});var ZNr=s(gS);glo=r(ZNr,"NystromformerModel"),ZNr.forEach(t),hlo=r(xCe," (Nystromformer model)"),xCe.forEach(t),plo=i(C),kp=n(C,"LI",{});var kCe=s(kp);$K=n(kCe,"STRONG",{});var eqr=s($K);_lo=r(eqr,"openai-gpt"),eqr.forEach(t),ulo=r(kCe," \u2014 "),hS=n(kCe,"A",{href:!0});var oqr=s(hS);blo=r(oqr,"OpenAIGPTModel"),oqr.forEach(t),vlo=r(kCe," (OpenAI GPT model)"),kCe.forEach(t),Tlo=i(C),Rp=n(C,"LI",{});var RCe=s(Rp);IK=n(RCe,"STRONG",{});var rqr=s(IK);Flo=r(rqr,"pegasus"),rqr.forEach(t),Clo=r(RCe," \u2014 "),pS=n(RCe,"A",{href:!0});var tqr=s(pS);Mlo=r(tqr,"PegasusModel"),tqr.forEach(t),Elo=r(RCe," (Pegasus model)"),RCe.forEach(t),ylo=i(C),Sp=n(C,"LI",{});var SCe=s(Sp);jK=n(SCe,"STRONG",{});var aqr=s(jK);wlo=r(aqr,"perceiver"),aqr.forEach(t),Alo=r(SCe," \u2014 "),_S=n(SCe,"A",{href:!0});var nqr=s(_S);Llo=r(nqr,"PerceiverModel"),nqr.forEach(t),Blo=r(SCe," (Perceiver model)"),SCe.forEach(t),xlo=i(C),Pp=n(C,"LI",{});var PCe=s(Pp);DK=n(PCe,"STRONG",{});var sqr=s(DK);klo=r(sqr,"plbart"),sqr.forEach(t),Rlo=r(PCe," \u2014 "),uS=n(PCe,"A",{href:!0});var lqr=s(uS);Slo=r(lqr,"PLBartModel"),lqr.forEach(t),Plo=r(PCe," (PLBart model)"),PCe.forEach(t),$lo=i(C),$p=n(C,"LI",{});var $Ce=s($p);NK=n($Ce,"STRONG",{});var iqr=s(NK);Ilo=r(iqr,"poolformer"),iqr.forEach(t),jlo=r($Ce," \u2014 "),bS=n($Ce,"A",{href:!0});var dqr=s(bS);Dlo=r(dqr,"PoolFormerModel"),dqr.forEach(t),Nlo=r($Ce," (PoolFormer model)"),$Ce.forEach(t),qlo=i(C),Ip=n(C,"LI",{});var ICe=s(Ip);qK=n(ICe,"STRONG",{});var cqr=s(qK);Olo=r(cqr,"prophetnet"),cqr.forEach(t),Glo=r(ICe," \u2014 "),vS=n(ICe,"A",{href:!0});var fqr=s(vS);Xlo=r(fqr,"ProphetNetModel"),fqr.forEach(t),Vlo=r(ICe," (ProphetNet model)"),ICe.forEach(t),zlo=i(C),jp=n(C,"LI",{});var jCe=s(jp);OK=n(jCe,"STRONG",{});var mqr=s(OK);Wlo=r(mqr,"qdqbert"),mqr.forEach(t),Qlo=r(jCe," \u2014 "),TS=n(jCe,"A",{href:!0});var gqr=s(TS);Hlo=r(gqr,"QDQBertModel"),gqr.forEach(t),Ulo=r(jCe," (QDQBert model)"),jCe.forEach(t),Jlo=i(C),Dp=n(C,"LI",{});var DCe=s(Dp);GK=n(DCe,"STRONG",{});var hqr=s(GK);Ylo=r(hqr,"reformer"),hqr.forEach(t),Klo=r(DCe," \u2014 "),FS=n(DCe,"A",{href:!0});var pqr=s(FS);Zlo=r(pqr,"ReformerModel"),pqr.forEach(t),eio=r(DCe," (Reformer model)"),DCe.forEach(t),oio=i(C),Np=n(C,"LI",{});var NCe=s(Np);XK=n(NCe,"STRONG",{});var _qr=s(XK);rio=r(_qr,"rembert"),_qr.forEach(t),tio=r(NCe," \u2014 "),CS=n(NCe,"A",{href:!0});var uqr=s(CS);aio=r(uqr,"RemBertModel"),uqr.forEach(t),nio=r(NCe," (RemBERT model)"),NCe.forEach(t),sio=i(C),qp=n(C,"LI",{});var qCe=s(qp);VK=n(qCe,"STRONG",{});var bqr=s(VK);lio=r(bqr,"retribert"),bqr.forEach(t),iio=r(qCe," \u2014 "),MS=n(qCe,"A",{href:!0});var vqr=s(MS);dio=r(vqr,"RetriBertModel"),vqr.forEach(t),cio=r(qCe," (RetriBERT model)"),qCe.forEach(t),fio=i(C),Op=n(C,"LI",{});var OCe=s(Op);zK=n(OCe,"STRONG",{});var Tqr=s(zK);mio=r(Tqr,"roberta"),Tqr.forEach(t),gio=r(OCe," \u2014 "),ES=n(OCe,"A",{href:!0});var Fqr=s(ES);hio=r(Fqr,"RobertaModel"),Fqr.forEach(t),pio=r(OCe," (RoBERTa model)"),OCe.forEach(t),_io=i(C),Gp=n(C,"LI",{});var GCe=s(Gp);WK=n(GCe,"STRONG",{});var Cqr=s(WK);uio=r(Cqr,"roformer"),Cqr.forEach(t),bio=r(GCe," \u2014 "),yS=n(GCe,"A",{href:!0});var Mqr=s(yS);vio=r(Mqr,"RoFormerModel"),Mqr.forEach(t),Tio=r(GCe," (RoFormer model)"),GCe.forEach(t),Fio=i(C),Xp=n(C,"LI",{});var XCe=s(Xp);QK=n(XCe,"STRONG",{});var Eqr=s(QK);Cio=r(Eqr,"segformer"),Eqr.forEach(t),Mio=r(XCe," \u2014 "),wS=n(XCe,"A",{href:!0});var yqr=s(wS);Eio=r(yqr,"SegformerModel"),yqr.forEach(t),yio=r(XCe," (SegFormer model)"),XCe.forEach(t),wio=i(C),Vp=n(C,"LI",{});var VCe=s(Vp);HK=n(VCe,"STRONG",{});var wqr=s(HK);Aio=r(wqr,"sew"),wqr.forEach(t),Lio=r(VCe," \u2014 "),AS=n(VCe,"A",{href:!0});var Aqr=s(AS);Bio=r(Aqr,"SEWModel"),Aqr.forEach(t),xio=r(VCe," (SEW model)"),VCe.forEach(t),kio=i(C),zp=n(C,"LI",{});var zCe=s(zp);UK=n(zCe,"STRONG",{});var Lqr=s(UK);Rio=r(Lqr,"sew-d"),Lqr.forEach(t),Sio=r(zCe," \u2014 "),LS=n(zCe,"A",{href:!0});var Bqr=s(LS);Pio=r(Bqr,"SEWDModel"),Bqr.forEach(t),$io=r(zCe," (SEW-D model)"),zCe.forEach(t),Iio=i(C),Wp=n(C,"LI",{});var WCe=s(Wp);JK=n(WCe,"STRONG",{});var xqr=s(JK);jio=r(xqr,"speech_to_text"),xqr.forEach(t),Dio=r(WCe," \u2014 "),BS=n(WCe,"A",{href:!0});var kqr=s(BS);Nio=r(kqr,"Speech2TextModel"),kqr.forEach(t),qio=r(WCe," (Speech2Text model)"),WCe.forEach(t),Oio=i(C),Qp=n(C,"LI",{});var QCe=s(Qp);YK=n(QCe,"STRONG",{});var Rqr=s(YK);Gio=r(Rqr,"splinter"),Rqr.forEach(t),Xio=r(QCe," \u2014 "),xS=n(QCe,"A",{href:!0});var Sqr=s(xS);Vio=r(Sqr,"SplinterModel"),Sqr.forEach(t),zio=r(QCe," (Splinter model)"),QCe.forEach(t),Wio=i(C),Hp=n(C,"LI",{});var HCe=s(Hp);KK=n(HCe,"STRONG",{});var Pqr=s(KK);Qio=r(Pqr,"squeezebert"),Pqr.forEach(t),Hio=r(HCe," \u2014 "),kS=n(HCe,"A",{href:!0});var $qr=s(kS);Uio=r($qr,"SqueezeBertModel"),$qr.forEach(t),Jio=r(HCe," (SqueezeBERT model)"),HCe.forEach(t),Yio=i(C),Up=n(C,"LI",{});var UCe=s(Up);ZK=n(UCe,"STRONG",{});var Iqr=s(ZK);Kio=r(Iqr,"swin"),Iqr.forEach(t),Zio=r(UCe," \u2014 "),RS=n(UCe,"A",{href:!0});var jqr=s(RS);edo=r(jqr,"SwinModel"),jqr.forEach(t),odo=r(UCe," (Swin model)"),UCe.forEach(t),rdo=i(C),Jp=n(C,"LI",{});var JCe=s(Jp);eZ=n(JCe,"STRONG",{});var Dqr=s(eZ);tdo=r(Dqr,"t5"),Dqr.forEach(t),ado=r(JCe," \u2014 "),SS=n(JCe,"A",{href:!0});var Nqr=s(SS);ndo=r(Nqr,"T5Model"),Nqr.forEach(t),sdo=r(JCe," (T5 model)"),JCe.forEach(t),ldo=i(C),Yp=n(C,"LI",{});var YCe=s(Yp);oZ=n(YCe,"STRONG",{});var qqr=s(oZ);ido=r(qqr,"tapas"),qqr.forEach(t),ddo=r(YCe," \u2014 "),PS=n(YCe,"A",{href:!0});var Oqr=s(PS);cdo=r(Oqr,"TapasModel"),Oqr.forEach(t),fdo=r(YCe," (TAPAS model)"),YCe.forEach(t),mdo=i(C),Kp=n(C,"LI",{});var KCe=s(Kp);rZ=n(KCe,"STRONG",{});var Gqr=s(rZ);gdo=r(Gqr,"transfo-xl"),Gqr.forEach(t),hdo=r(KCe," \u2014 "),$S=n(KCe,"A",{href:!0});var Xqr=s($S);pdo=r(Xqr,"TransfoXLModel"),Xqr.forEach(t),_do=r(KCe," (Transformer-XL model)"),KCe.forEach(t),udo=i(C),Zp=n(C,"LI",{});var ZCe=s(Zp);tZ=n(ZCe,"STRONG",{});var Vqr=s(tZ);bdo=r(Vqr,"unispeech"),Vqr.forEach(t),vdo=r(ZCe," \u2014 "),IS=n(ZCe,"A",{href:!0});var zqr=s(IS);Tdo=r(zqr,"UniSpeechModel"),zqr.forEach(t),Fdo=r(ZCe," (UniSpeech model)"),ZCe.forEach(t),Cdo=i(C),e_=n(C,"LI",{});var eMe=s(e_);aZ=n(eMe,"STRONG",{});var Wqr=s(aZ);Mdo=r(Wqr,"unispeech-sat"),Wqr.forEach(t),Edo=r(eMe," \u2014 "),jS=n(eMe,"A",{href:!0});var Qqr=s(jS);ydo=r(Qqr,"UniSpeechSatModel"),Qqr.forEach(t),wdo=r(eMe," (UniSpeechSat model)"),eMe.forEach(t),Ado=i(C),o_=n(C,"LI",{});var oMe=s(o_);nZ=n(oMe,"STRONG",{});var Hqr=s(nZ);Ldo=r(Hqr,"vilt"),Hqr.forEach(t),Bdo=r(oMe," \u2014 "),DS=n(oMe,"A",{href:!0});var Uqr=s(DS);xdo=r(Uqr,"ViltModel"),Uqr.forEach(t),kdo=r(oMe," (ViLT model)"),oMe.forEach(t),Rdo=i(C),r_=n(C,"LI",{});var rMe=s(r_);sZ=n(rMe,"STRONG",{});var Jqr=s(sZ);Sdo=r(Jqr,"vision-text-dual-encoder"),Jqr.forEach(t),Pdo=r(rMe," \u2014 "),NS=n(rMe,"A",{href:!0});var Yqr=s(NS);$do=r(Yqr,"VisionTextDualEncoderModel"),Yqr.forEach(t),Ido=r(rMe," (VisionTextDualEncoder model)"),rMe.forEach(t),jdo=i(C),t_=n(C,"LI",{});var tMe=s(t_);lZ=n(tMe,"STRONG",{});var Kqr=s(lZ);Ddo=r(Kqr,"visual_bert"),Kqr.forEach(t),Ndo=r(tMe," \u2014 "),qS=n(tMe,"A",{href:!0});var Zqr=s(qS);qdo=r(Zqr,"VisualBertModel"),Zqr.forEach(t),Odo=r(tMe," (VisualBert model)"),tMe.forEach(t),Gdo=i(C),a_=n(C,"LI",{});var aMe=s(a_);iZ=n(aMe,"STRONG",{});var eOr=s(iZ);Xdo=r(eOr,"vit"),eOr.forEach(t),Vdo=r(aMe," \u2014 "),OS=n(aMe,"A",{href:!0});var oOr=s(OS);zdo=r(oOr,"ViTModel"),oOr.forEach(t),Wdo=r(aMe," (ViT model)"),aMe.forEach(t),Qdo=i(C),n_=n(C,"LI",{});var nMe=s(n_);dZ=n(nMe,"STRONG",{});var rOr=s(dZ);Hdo=r(rOr,"vit_mae"),rOr.forEach(t),Udo=r(nMe," \u2014 "),GS=n(nMe,"A",{href:!0});var tOr=s(GS);Jdo=r(tOr,"ViTMAEModel"),tOr.forEach(t),Ydo=r(nMe," (ViTMAE model)"),nMe.forEach(t),Kdo=i(C),s_=n(C,"LI",{});var sMe=s(s_);cZ=n(sMe,"STRONG",{});var aOr=s(cZ);Zdo=r(aOr,"wav2vec2"),aOr.forEach(t),eco=r(sMe," \u2014 "),XS=n(sMe,"A",{href:!0});var nOr=s(XS);oco=r(nOr,"Wav2Vec2Model"),nOr.forEach(t),rco=r(sMe," (Wav2Vec2 model)"),sMe.forEach(t),tco=i(C),l_=n(C,"LI",{});var lMe=s(l_);fZ=n(lMe,"STRONG",{});var sOr=s(fZ);aco=r(sOr,"wavlm"),sOr.forEach(t),nco=r(lMe," \u2014 "),VS=n(lMe,"A",{href:!0});var lOr=s(VS);sco=r(lOr,"WavLMModel"),lOr.forEach(t),lco=r(lMe," (WavLM model)"),lMe.forEach(t),ico=i(C),i_=n(C,"LI",{});var iMe=s(i_);mZ=n(iMe,"STRONG",{});var iOr=s(mZ);dco=r(iOr,"xglm"),iOr.forEach(t),cco=r(iMe," \u2014 "),zS=n(iMe,"A",{href:!0});var dOr=s(zS);fco=r(dOr,"XGLMModel"),dOr.forEach(t),mco=r(iMe," (XGLM model)"),iMe.forEach(t),gco=i(C),d_=n(C,"LI",{});var dMe=s(d_);gZ=n(dMe,"STRONG",{});var cOr=s(gZ);hco=r(cOr,"xlm"),cOr.forEach(t),pco=r(dMe," \u2014 "),WS=n(dMe,"A",{href:!0});var fOr=s(WS);_co=r(fOr,"XLMModel"),fOr.forEach(t),uco=r(dMe," (XLM model)"),dMe.forEach(t),bco=i(C),c_=n(C,"LI",{});var cMe=s(c_);hZ=n(cMe,"STRONG",{});var mOr=s(hZ);vco=r(mOr,"xlm-prophetnet"),mOr.forEach(t),Tco=r(cMe," \u2014 "),QS=n(cMe,"A",{href:!0});var gOr=s(QS);Fco=r(gOr,"XLMProphetNetModel"),gOr.forEach(t),Cco=r(cMe," (XLMProphetNet model)"),cMe.forEach(t),Mco=i(C),f_=n(C,"LI",{});var fMe=s(f_);pZ=n(fMe,"STRONG",{});var hOr=s(pZ);Eco=r(hOr,"xlm-roberta"),hOr.forEach(t),yco=r(fMe," \u2014 "),HS=n(fMe,"A",{href:!0});var pOr=s(HS);wco=r(pOr,"XLMRobertaModel"),pOr.forEach(t),Aco=r(fMe," (XLM-RoBERTa model)"),fMe.forEach(t),Lco=i(C),m_=n(C,"LI",{});var mMe=s(m_);_Z=n(mMe,"STRONG",{});var _Or=s(_Z);Bco=r(_Or,"xlm-roberta-xl"),_Or.forEach(t),xco=r(mMe," \u2014 "),US=n(mMe,"A",{href:!0});var uOr=s(US);kco=r(uOr,"XLMRobertaXLModel"),uOr.forEach(t),Rco=r(mMe," (XLM-RoBERTa-XL model)"),mMe.forEach(t),Sco=i(C),g_=n(C,"LI",{});var gMe=s(g_);uZ=n(gMe,"STRONG",{});var bOr=s(uZ);Pco=r(bOr,"xlnet"),bOr.forEach(t),$co=r(gMe," \u2014 "),JS=n(gMe,"A",{href:!0});var vOr=s(JS);Ico=r(vOr,"XLNetModel"),vOr.forEach(t),jco=r(gMe," (XLNet model)"),gMe.forEach(t),Dco=i(C),h_=n(C,"LI",{});var hMe=s(h_);bZ=n(hMe,"STRONG",{});var TOr=s(bZ);Nco=r(TOr,"yoso"),TOr.forEach(t),qco=r(hMe," \u2014 "),YS=n(hMe,"A",{href:!0});var FOr=s(YS);Oco=r(FOr,"YosoModel"),FOr.forEach(t),Gco=r(hMe," (YOSO model)"),hMe.forEach(t),C.forEach(t),Xco=i(qt),p_=n(qt,"P",{});var pMe=s(p_);Vco=r(pMe,"The model is set in evaluation mode by default using "),vZ=n(pMe,"CODE",{});var COr=s(vZ);zco=r(COr,"model.eval()"),COr.forEach(t),Wco=r(pMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TZ=n(pMe,"CODE",{});var MOr=s(TZ);Qco=r(MOr,"model.train()"),MOr.forEach(t),pMe.forEach(t),Hco=i(qt),FZ=n(qt,"P",{});var EOr=s(FZ);Uco=r(EOr,"Examples:"),EOr.forEach(t),Jco=i(qt),m(kE.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),gxe=i(d),Zi=n(d,"H2",{class:!0});var CRe=s(Zi);__=n(CRe,"A",{id:!0,class:!0,href:!0});var yOr=s(__);CZ=n(yOr,"SPAN",{});var wOr=s(CZ);m(RE.$$.fragment,wOr),wOr.forEach(t),yOr.forEach(t),Yco=i(CRe),MZ=n(CRe,"SPAN",{});var AOr=s(MZ);Kco=r(AOr,"AutoModelForPreTraining"),AOr.forEach(t),CRe.forEach(t),hxe=i(d),Yo=n(d,"DIV",{class:!0});var Hs=s(Yo);m(SE.$$.fragment,Hs),Zco=i(Hs),ed=n(Hs,"P",{});var Mz=s(ed);efo=r(Mz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EZ=n(Mz,"CODE",{});var LOr=s(EZ);ofo=r(LOr,"from_pretrained()"),LOr.forEach(t),rfo=r(Mz,"class method or the "),yZ=n(Mz,"CODE",{});var BOr=s(yZ);tfo=r(BOr,"from_config()"),BOr.forEach(t),afo=r(Mz,`class
method.`),Mz.forEach(t),nfo=i(Hs),PE=n(Hs,"P",{});var MRe=s(PE);sfo=r(MRe,"This class cannot be instantiated directly using "),wZ=n(MRe,"CODE",{});var xOr=s(wZ);lfo=r(xOr,"__init__()"),xOr.forEach(t),ifo=r(MRe," (throws an error)."),MRe.forEach(t),dfo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m($E.$$.fragment,Us),cfo=i(Us),AZ=n(Us,"P",{});var kOr=s(AZ);ffo=r(kOr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kOr.forEach(t),mfo=i(Us),od=n(Us,"P",{});var Ez=s(od);gfo=r(Ez,`Note:
Loading a model from its configuration file does `),LZ=n(Ez,"STRONG",{});var ROr=s(LZ);hfo=r(ROr,"not"),ROr.forEach(t),pfo=r(Ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),BZ=n(Ez,"CODE",{});var SOr=s(BZ);_fo=r(SOr,"from_pretrained()"),SOr.forEach(t),ufo=r(Ez,"to load the model weights."),Ez.forEach(t),bfo=i(Us),xZ=n(Us,"P",{});var POr=s(xZ);vfo=r(POr,"Examples:"),POr.forEach(t),Tfo=i(Us),m(IE.$$.fragment,Us),Us.forEach(t),Ffo=i(Hs),De=n(Hs,"DIV",{class:!0});var Ot=s(De);m(jE.$$.fragment,Ot),Cfo=i(Ot),kZ=n(Ot,"P",{});var $Or=s(kZ);Mfo=r($Or,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$Or.forEach(t),Efo=i(Ot),Va=n(Ot,"P",{});var UM=s(Va);yfo=r(UM,"The model class to instantiate is selected based on the "),RZ=n(UM,"CODE",{});var IOr=s(RZ);wfo=r(IOr,"model_type"),IOr.forEach(t),Afo=r(UM,` property of the config object (either
passed as an argument or loaded from `),SZ=n(UM,"CODE",{});var jOr=s(SZ);Lfo=r(jOr,"pretrained_model_name_or_path"),jOr.forEach(t),Bfo=r(UM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PZ=n(UM,"CODE",{});var DOr=s(PZ);xfo=r(DOr,"pretrained_model_name_or_path"),DOr.forEach(t),kfo=r(UM,":"),UM.forEach(t),Rfo=i(Ot),k=n(Ot,"UL",{});var S=s(k);u_=n(S,"LI",{});var _Me=s(u_);$Z=n(_Me,"STRONG",{});var NOr=s($Z);Sfo=r(NOr,"albert"),NOr.forEach(t),Pfo=r(_Me," \u2014 "),KS=n(_Me,"A",{href:!0});var qOr=s(KS);$fo=r(qOr,"AlbertForPreTraining"),qOr.forEach(t),Ifo=r(_Me," (ALBERT model)"),_Me.forEach(t),jfo=i(S),b_=n(S,"LI",{});var uMe=s(b_);IZ=n(uMe,"STRONG",{});var OOr=s(IZ);Dfo=r(OOr,"bart"),OOr.forEach(t),Nfo=r(uMe," \u2014 "),ZS=n(uMe,"A",{href:!0});var GOr=s(ZS);qfo=r(GOr,"BartForConditionalGeneration"),GOr.forEach(t),Ofo=r(uMe," (BART model)"),uMe.forEach(t),Gfo=i(S),v_=n(S,"LI",{});var bMe=s(v_);jZ=n(bMe,"STRONG",{});var XOr=s(jZ);Xfo=r(XOr,"bert"),XOr.forEach(t),Vfo=r(bMe," \u2014 "),eP=n(bMe,"A",{href:!0});var VOr=s(eP);zfo=r(VOr,"BertForPreTraining"),VOr.forEach(t),Wfo=r(bMe," (BERT model)"),bMe.forEach(t),Qfo=i(S),T_=n(S,"LI",{});var vMe=s(T_);DZ=n(vMe,"STRONG",{});var zOr=s(DZ);Hfo=r(zOr,"big_bird"),zOr.forEach(t),Ufo=r(vMe," \u2014 "),oP=n(vMe,"A",{href:!0});var WOr=s(oP);Jfo=r(WOr,"BigBirdForPreTraining"),WOr.forEach(t),Yfo=r(vMe," (BigBird model)"),vMe.forEach(t),Kfo=i(S),F_=n(S,"LI",{});var TMe=s(F_);NZ=n(TMe,"STRONG",{});var QOr=s(NZ);Zfo=r(QOr,"camembert"),QOr.forEach(t),emo=r(TMe," \u2014 "),rP=n(TMe,"A",{href:!0});var HOr=s(rP);omo=r(HOr,"CamembertForMaskedLM"),HOr.forEach(t),rmo=r(TMe," (CamemBERT model)"),TMe.forEach(t),tmo=i(S),C_=n(S,"LI",{});var FMe=s(C_);qZ=n(FMe,"STRONG",{});var UOr=s(qZ);amo=r(UOr,"ctrl"),UOr.forEach(t),nmo=r(FMe," \u2014 "),tP=n(FMe,"A",{href:!0});var JOr=s(tP);smo=r(JOr,"CTRLLMHeadModel"),JOr.forEach(t),lmo=r(FMe," (CTRL model)"),FMe.forEach(t),imo=i(S),M_=n(S,"LI",{});var CMe=s(M_);OZ=n(CMe,"STRONG",{});var YOr=s(OZ);dmo=r(YOr,"data2vec-text"),YOr.forEach(t),cmo=r(CMe," \u2014 "),aP=n(CMe,"A",{href:!0});var KOr=s(aP);fmo=r(KOr,"Data2VecTextForMaskedLM"),KOr.forEach(t),mmo=r(CMe," (Data2VecText model)"),CMe.forEach(t),gmo=i(S),E_=n(S,"LI",{});var MMe=s(E_);GZ=n(MMe,"STRONG",{});var ZOr=s(GZ);hmo=r(ZOr,"deberta"),ZOr.forEach(t),pmo=r(MMe," \u2014 "),nP=n(MMe,"A",{href:!0});var eGr=s(nP);_mo=r(eGr,"DebertaForMaskedLM"),eGr.forEach(t),umo=r(MMe," (DeBERTa model)"),MMe.forEach(t),bmo=i(S),y_=n(S,"LI",{});var EMe=s(y_);XZ=n(EMe,"STRONG",{});var oGr=s(XZ);vmo=r(oGr,"deberta-v2"),oGr.forEach(t),Tmo=r(EMe," \u2014 "),sP=n(EMe,"A",{href:!0});var rGr=s(sP);Fmo=r(rGr,"DebertaV2ForMaskedLM"),rGr.forEach(t),Cmo=r(EMe," (DeBERTa-v2 model)"),EMe.forEach(t),Mmo=i(S),w_=n(S,"LI",{});var yMe=s(w_);VZ=n(yMe,"STRONG",{});var tGr=s(VZ);Emo=r(tGr,"distilbert"),tGr.forEach(t),ymo=r(yMe," \u2014 "),lP=n(yMe,"A",{href:!0});var aGr=s(lP);wmo=r(aGr,"DistilBertForMaskedLM"),aGr.forEach(t),Amo=r(yMe," (DistilBERT model)"),yMe.forEach(t),Lmo=i(S),A_=n(S,"LI",{});var wMe=s(A_);zZ=n(wMe,"STRONG",{});var nGr=s(zZ);Bmo=r(nGr,"electra"),nGr.forEach(t),xmo=r(wMe," \u2014 "),iP=n(wMe,"A",{href:!0});var sGr=s(iP);kmo=r(sGr,"ElectraForPreTraining"),sGr.forEach(t),Rmo=r(wMe," (ELECTRA model)"),wMe.forEach(t),Smo=i(S),L_=n(S,"LI",{});var AMe=s(L_);WZ=n(AMe,"STRONG",{});var lGr=s(WZ);Pmo=r(lGr,"flaubert"),lGr.forEach(t),$mo=r(AMe," \u2014 "),dP=n(AMe,"A",{href:!0});var iGr=s(dP);Imo=r(iGr,"FlaubertWithLMHeadModel"),iGr.forEach(t),jmo=r(AMe," (FlauBERT model)"),AMe.forEach(t),Dmo=i(S),B_=n(S,"LI",{});var LMe=s(B_);QZ=n(LMe,"STRONG",{});var dGr=s(QZ);Nmo=r(dGr,"fnet"),dGr.forEach(t),qmo=r(LMe," \u2014 "),cP=n(LMe,"A",{href:!0});var cGr=s(cP);Omo=r(cGr,"FNetForPreTraining"),cGr.forEach(t),Gmo=r(LMe," (FNet model)"),LMe.forEach(t),Xmo=i(S),x_=n(S,"LI",{});var BMe=s(x_);HZ=n(BMe,"STRONG",{});var fGr=s(HZ);Vmo=r(fGr,"fsmt"),fGr.forEach(t),zmo=r(BMe," \u2014 "),fP=n(BMe,"A",{href:!0});var mGr=s(fP);Wmo=r(mGr,"FSMTForConditionalGeneration"),mGr.forEach(t),Qmo=r(BMe," (FairSeq Machine-Translation model)"),BMe.forEach(t),Hmo=i(S),k_=n(S,"LI",{});var xMe=s(k_);UZ=n(xMe,"STRONG",{});var gGr=s(UZ);Umo=r(gGr,"funnel"),gGr.forEach(t),Jmo=r(xMe," \u2014 "),mP=n(xMe,"A",{href:!0});var hGr=s(mP);Ymo=r(hGr,"FunnelForPreTraining"),hGr.forEach(t),Kmo=r(xMe," (Funnel Transformer model)"),xMe.forEach(t),Zmo=i(S),R_=n(S,"LI",{});var kMe=s(R_);JZ=n(kMe,"STRONG",{});var pGr=s(JZ);ego=r(pGr,"gpt2"),pGr.forEach(t),ogo=r(kMe," \u2014 "),gP=n(kMe,"A",{href:!0});var _Gr=s(gP);rgo=r(_Gr,"GPT2LMHeadModel"),_Gr.forEach(t),tgo=r(kMe," (OpenAI GPT-2 model)"),kMe.forEach(t),ago=i(S),S_=n(S,"LI",{});var RMe=s(S_);YZ=n(RMe,"STRONG",{});var uGr=s(YZ);ngo=r(uGr,"ibert"),uGr.forEach(t),sgo=r(RMe," \u2014 "),hP=n(RMe,"A",{href:!0});var bGr=s(hP);lgo=r(bGr,"IBertForMaskedLM"),bGr.forEach(t),igo=r(RMe," (I-BERT model)"),RMe.forEach(t),dgo=i(S),P_=n(S,"LI",{});var SMe=s(P_);KZ=n(SMe,"STRONG",{});var vGr=s(KZ);cgo=r(vGr,"layoutlm"),vGr.forEach(t),fgo=r(SMe," \u2014 "),pP=n(SMe,"A",{href:!0});var TGr=s(pP);mgo=r(TGr,"LayoutLMForMaskedLM"),TGr.forEach(t),ggo=r(SMe," (LayoutLM model)"),SMe.forEach(t),hgo=i(S),$_=n(S,"LI",{});var PMe=s($_);ZZ=n(PMe,"STRONG",{});var FGr=s(ZZ);pgo=r(FGr,"longformer"),FGr.forEach(t),_go=r(PMe," \u2014 "),_P=n(PMe,"A",{href:!0});var CGr=s(_P);ugo=r(CGr,"LongformerForMaskedLM"),CGr.forEach(t),bgo=r(PMe," (Longformer model)"),PMe.forEach(t),vgo=i(S),I_=n(S,"LI",{});var $Me=s(I_);eee=n($Me,"STRONG",{});var MGr=s(eee);Tgo=r(MGr,"lxmert"),MGr.forEach(t),Fgo=r($Me," \u2014 "),uP=n($Me,"A",{href:!0});var EGr=s(uP);Cgo=r(EGr,"LxmertForPreTraining"),EGr.forEach(t),Mgo=r($Me," (LXMERT model)"),$Me.forEach(t),Ego=i(S),j_=n(S,"LI",{});var IMe=s(j_);oee=n(IMe,"STRONG",{});var yGr=s(oee);ygo=r(yGr,"megatron-bert"),yGr.forEach(t),wgo=r(IMe," \u2014 "),bP=n(IMe,"A",{href:!0});var wGr=s(bP);Ago=r(wGr,"MegatronBertForPreTraining"),wGr.forEach(t),Lgo=r(IMe," (MegatronBert model)"),IMe.forEach(t),Bgo=i(S),D_=n(S,"LI",{});var jMe=s(D_);ree=n(jMe,"STRONG",{});var AGr=s(ree);xgo=r(AGr,"mobilebert"),AGr.forEach(t),kgo=r(jMe," \u2014 "),vP=n(jMe,"A",{href:!0});var LGr=s(vP);Rgo=r(LGr,"MobileBertForPreTraining"),LGr.forEach(t),Sgo=r(jMe," (MobileBERT model)"),jMe.forEach(t),Pgo=i(S),N_=n(S,"LI",{});var DMe=s(N_);tee=n(DMe,"STRONG",{});var BGr=s(tee);$go=r(BGr,"mpnet"),BGr.forEach(t),Igo=r(DMe," \u2014 "),TP=n(DMe,"A",{href:!0});var xGr=s(TP);jgo=r(xGr,"MPNetForMaskedLM"),xGr.forEach(t),Dgo=r(DMe," (MPNet model)"),DMe.forEach(t),Ngo=i(S),q_=n(S,"LI",{});var NMe=s(q_);aee=n(NMe,"STRONG",{});var kGr=s(aee);qgo=r(kGr,"openai-gpt"),kGr.forEach(t),Ogo=r(NMe," \u2014 "),FP=n(NMe,"A",{href:!0});var RGr=s(FP);Ggo=r(RGr,"OpenAIGPTLMHeadModel"),RGr.forEach(t),Xgo=r(NMe," (OpenAI GPT model)"),NMe.forEach(t),Vgo=i(S),O_=n(S,"LI",{});var qMe=s(O_);nee=n(qMe,"STRONG",{});var SGr=s(nee);zgo=r(SGr,"retribert"),SGr.forEach(t),Wgo=r(qMe," \u2014 "),CP=n(qMe,"A",{href:!0});var PGr=s(CP);Qgo=r(PGr,"RetriBertModel"),PGr.forEach(t),Hgo=r(qMe," (RetriBERT model)"),qMe.forEach(t),Ugo=i(S),G_=n(S,"LI",{});var OMe=s(G_);see=n(OMe,"STRONG",{});var $Gr=s(see);Jgo=r($Gr,"roberta"),$Gr.forEach(t),Ygo=r(OMe," \u2014 "),MP=n(OMe,"A",{href:!0});var IGr=s(MP);Kgo=r(IGr,"RobertaForMaskedLM"),IGr.forEach(t),Zgo=r(OMe," (RoBERTa model)"),OMe.forEach(t),eho=i(S),X_=n(S,"LI",{});var GMe=s(X_);lee=n(GMe,"STRONG",{});var jGr=s(lee);oho=r(jGr,"squeezebert"),jGr.forEach(t),rho=r(GMe," \u2014 "),EP=n(GMe,"A",{href:!0});var DGr=s(EP);tho=r(DGr,"SqueezeBertForMaskedLM"),DGr.forEach(t),aho=r(GMe," (SqueezeBERT model)"),GMe.forEach(t),nho=i(S),V_=n(S,"LI",{});var XMe=s(V_);iee=n(XMe,"STRONG",{});var NGr=s(iee);sho=r(NGr,"t5"),NGr.forEach(t),lho=r(XMe," \u2014 "),yP=n(XMe,"A",{href:!0});var qGr=s(yP);iho=r(qGr,"T5ForConditionalGeneration"),qGr.forEach(t),dho=r(XMe," (T5 model)"),XMe.forEach(t),cho=i(S),z_=n(S,"LI",{});var VMe=s(z_);dee=n(VMe,"STRONG",{});var OGr=s(dee);fho=r(OGr,"tapas"),OGr.forEach(t),mho=r(VMe," \u2014 "),wP=n(VMe,"A",{href:!0});var GGr=s(wP);gho=r(GGr,"TapasForMaskedLM"),GGr.forEach(t),hho=r(VMe," (TAPAS model)"),VMe.forEach(t),pho=i(S),W_=n(S,"LI",{});var zMe=s(W_);cee=n(zMe,"STRONG",{});var XGr=s(cee);_ho=r(XGr,"transfo-xl"),XGr.forEach(t),uho=r(zMe," \u2014 "),AP=n(zMe,"A",{href:!0});var VGr=s(AP);bho=r(VGr,"TransfoXLLMHeadModel"),VGr.forEach(t),vho=r(zMe," (Transformer-XL model)"),zMe.forEach(t),Tho=i(S),Q_=n(S,"LI",{});var WMe=s(Q_);fee=n(WMe,"STRONG",{});var zGr=s(fee);Fho=r(zGr,"unispeech"),zGr.forEach(t),Cho=r(WMe," \u2014 "),LP=n(WMe,"A",{href:!0});var WGr=s(LP);Mho=r(WGr,"UniSpeechForPreTraining"),WGr.forEach(t),Eho=r(WMe," (UniSpeech model)"),WMe.forEach(t),yho=i(S),H_=n(S,"LI",{});var QMe=s(H_);mee=n(QMe,"STRONG",{});var QGr=s(mee);who=r(QGr,"unispeech-sat"),QGr.forEach(t),Aho=r(QMe," \u2014 "),BP=n(QMe,"A",{href:!0});var HGr=s(BP);Lho=r(HGr,"UniSpeechSatForPreTraining"),HGr.forEach(t),Bho=r(QMe," (UniSpeechSat model)"),QMe.forEach(t),xho=i(S),U_=n(S,"LI",{});var HMe=s(U_);gee=n(HMe,"STRONG",{});var UGr=s(gee);kho=r(UGr,"visual_bert"),UGr.forEach(t),Rho=r(HMe," \u2014 "),xP=n(HMe,"A",{href:!0});var JGr=s(xP);Sho=r(JGr,"VisualBertForPreTraining"),JGr.forEach(t),Pho=r(HMe," (VisualBert model)"),HMe.forEach(t),$ho=i(S),J_=n(S,"LI",{});var UMe=s(J_);hee=n(UMe,"STRONG",{});var YGr=s(hee);Iho=r(YGr,"vit_mae"),YGr.forEach(t),jho=r(UMe," \u2014 "),kP=n(UMe,"A",{href:!0});var KGr=s(kP);Dho=r(KGr,"ViTMAEForPreTraining"),KGr.forEach(t),Nho=r(UMe," (ViTMAE model)"),UMe.forEach(t),qho=i(S),Y_=n(S,"LI",{});var JMe=s(Y_);pee=n(JMe,"STRONG",{});var ZGr=s(pee);Oho=r(ZGr,"wav2vec2"),ZGr.forEach(t),Gho=r(JMe," \u2014 "),RP=n(JMe,"A",{href:!0});var eXr=s(RP);Xho=r(eXr,"Wav2Vec2ForPreTraining"),eXr.forEach(t),Vho=r(JMe," (Wav2Vec2 model)"),JMe.forEach(t),zho=i(S),K_=n(S,"LI",{});var YMe=s(K_);_ee=n(YMe,"STRONG",{});var oXr=s(_ee);Who=r(oXr,"xlm"),oXr.forEach(t),Qho=r(YMe," \u2014 "),SP=n(YMe,"A",{href:!0});var rXr=s(SP);Hho=r(rXr,"XLMWithLMHeadModel"),rXr.forEach(t),Uho=r(YMe," (XLM model)"),YMe.forEach(t),Jho=i(S),Z_=n(S,"LI",{});var KMe=s(Z_);uee=n(KMe,"STRONG",{});var tXr=s(uee);Yho=r(tXr,"xlm-roberta"),tXr.forEach(t),Kho=r(KMe," \u2014 "),PP=n(KMe,"A",{href:!0});var aXr=s(PP);Zho=r(aXr,"XLMRobertaForMaskedLM"),aXr.forEach(t),epo=r(KMe," (XLM-RoBERTa model)"),KMe.forEach(t),opo=i(S),eu=n(S,"LI",{});var ZMe=s(eu);bee=n(ZMe,"STRONG",{});var nXr=s(bee);rpo=r(nXr,"xlm-roberta-xl"),nXr.forEach(t),tpo=r(ZMe," \u2014 "),$P=n(ZMe,"A",{href:!0});var sXr=s($P);apo=r(sXr,"XLMRobertaXLForMaskedLM"),sXr.forEach(t),npo=r(ZMe," (XLM-RoBERTa-XL model)"),ZMe.forEach(t),spo=i(S),ou=n(S,"LI",{});var e4e=s(ou);vee=n(e4e,"STRONG",{});var lXr=s(vee);lpo=r(lXr,"xlnet"),lXr.forEach(t),ipo=r(e4e," \u2014 "),IP=n(e4e,"A",{href:!0});var iXr=s(IP);dpo=r(iXr,"XLNetLMHeadModel"),iXr.forEach(t),cpo=r(e4e," (XLNet model)"),e4e.forEach(t),S.forEach(t),fpo=i(Ot),ru=n(Ot,"P",{});var o4e=s(ru);mpo=r(o4e,"The model is set in evaluation mode by default using "),Tee=n(o4e,"CODE",{});var dXr=s(Tee);gpo=r(dXr,"model.eval()"),dXr.forEach(t),hpo=r(o4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fee=n(o4e,"CODE",{});var cXr=s(Fee);ppo=r(cXr,"model.train()"),cXr.forEach(t),o4e.forEach(t),_po=i(Ot),Cee=n(Ot,"P",{});var fXr=s(Cee);upo=r(fXr,"Examples:"),fXr.forEach(t),bpo=i(Ot),m(DE.$$.fragment,Ot),Ot.forEach(t),Hs.forEach(t),pxe=i(d),rd=n(d,"H2",{class:!0});var ERe=s(rd);tu=n(ERe,"A",{id:!0,class:!0,href:!0});var mXr=s(tu);Mee=n(mXr,"SPAN",{});var gXr=s(Mee);m(NE.$$.fragment,gXr),gXr.forEach(t),mXr.forEach(t),vpo=i(ERe),Eee=n(ERe,"SPAN",{});var hXr=s(Eee);Tpo=r(hXr,"AutoModelForCausalLM"),hXr.forEach(t),ERe.forEach(t),_xe=i(d),Ko=n(d,"DIV",{class:!0});var Js=s(Ko);m(qE.$$.fragment,Js),Fpo=i(Js),td=n(Js,"P",{});var yz=s(td);Cpo=r(yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yee=n(yz,"CODE",{});var pXr=s(yee);Mpo=r(pXr,"from_pretrained()"),pXr.forEach(t),Epo=r(yz,"class method or the "),wee=n(yz,"CODE",{});var _Xr=s(wee);ypo=r(_Xr,"from_config()"),_Xr.forEach(t),wpo=r(yz,`class
method.`),yz.forEach(t),Apo=i(Js),OE=n(Js,"P",{});var yRe=s(OE);Lpo=r(yRe,"This class cannot be instantiated directly using "),Aee=n(yRe,"CODE",{});var uXr=s(Aee);Bpo=r(uXr,"__init__()"),uXr.forEach(t),xpo=r(yRe," (throws an error)."),yRe.forEach(t),kpo=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);m(GE.$$.fragment,Ys),Rpo=i(Ys),Lee=n(Ys,"P",{});var bXr=s(Lee);Spo=r(bXr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),bXr.forEach(t),Ppo=i(Ys),ad=n(Ys,"P",{});var wz=s(ad);$po=r(wz,`Note:
Loading a model from its configuration file does `),Bee=n(wz,"STRONG",{});var vXr=s(Bee);Ipo=r(vXr,"not"),vXr.forEach(t),jpo=r(wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),xee=n(wz,"CODE",{});var TXr=s(xee);Dpo=r(TXr,"from_pretrained()"),TXr.forEach(t),Npo=r(wz,"to load the model weights."),wz.forEach(t),qpo=i(Ys),kee=n(Ys,"P",{});var FXr=s(kee);Opo=r(FXr,"Examples:"),FXr.forEach(t),Gpo=i(Ys),m(XE.$$.fragment,Ys),Ys.forEach(t),Xpo=i(Js),Ne=n(Js,"DIV",{class:!0});var Gt=s(Ne);m(VE.$$.fragment,Gt),Vpo=i(Gt),Ree=n(Gt,"P",{});var CXr=s(Ree);zpo=r(CXr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),CXr.forEach(t),Wpo=i(Gt),za=n(Gt,"P",{});var JM=s(za);Qpo=r(JM,"The model class to instantiate is selected based on the "),See=n(JM,"CODE",{});var MXr=s(See);Hpo=r(MXr,"model_type"),MXr.forEach(t),Upo=r(JM,` property of the config object (either
passed as an argument or loaded from `),Pee=n(JM,"CODE",{});var EXr=s(Pee);Jpo=r(EXr,"pretrained_model_name_or_path"),EXr.forEach(t),Ypo=r(JM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ee=n(JM,"CODE",{});var yXr=s($ee);Kpo=r(yXr,"pretrained_model_name_or_path"),yXr.forEach(t),Zpo=r(JM,":"),JM.forEach(t),e_o=i(Gt),$=n(Gt,"UL",{});var j=s($);au=n(j,"LI",{});var r4e=s(au);Iee=n(r4e,"STRONG",{});var wXr=s(Iee);o_o=r(wXr,"bart"),wXr.forEach(t),r_o=r(r4e," \u2014 "),jP=n(r4e,"A",{href:!0});var AXr=s(jP);t_o=r(AXr,"BartForCausalLM"),AXr.forEach(t),a_o=r(r4e," (BART model)"),r4e.forEach(t),n_o=i(j),nu=n(j,"LI",{});var t4e=s(nu);jee=n(t4e,"STRONG",{});var LXr=s(jee);s_o=r(LXr,"bert"),LXr.forEach(t),l_o=r(t4e," \u2014 "),DP=n(t4e,"A",{href:!0});var BXr=s(DP);i_o=r(BXr,"BertLMHeadModel"),BXr.forEach(t),d_o=r(t4e," (BERT model)"),t4e.forEach(t),c_o=i(j),su=n(j,"LI",{});var a4e=s(su);Dee=n(a4e,"STRONG",{});var xXr=s(Dee);f_o=r(xXr,"bert-generation"),xXr.forEach(t),m_o=r(a4e," \u2014 "),NP=n(a4e,"A",{href:!0});var kXr=s(NP);g_o=r(kXr,"BertGenerationDecoder"),kXr.forEach(t),h_o=r(a4e," (Bert Generation model)"),a4e.forEach(t),p_o=i(j),lu=n(j,"LI",{});var n4e=s(lu);Nee=n(n4e,"STRONG",{});var RXr=s(Nee);__o=r(RXr,"big_bird"),RXr.forEach(t),u_o=r(n4e," \u2014 "),qP=n(n4e,"A",{href:!0});var SXr=s(qP);b_o=r(SXr,"BigBirdForCausalLM"),SXr.forEach(t),v_o=r(n4e," (BigBird model)"),n4e.forEach(t),T_o=i(j),iu=n(j,"LI",{});var s4e=s(iu);qee=n(s4e,"STRONG",{});var PXr=s(qee);F_o=r(PXr,"bigbird_pegasus"),PXr.forEach(t),C_o=r(s4e," \u2014 "),OP=n(s4e,"A",{href:!0});var $Xr=s(OP);M_o=r($Xr,"BigBirdPegasusForCausalLM"),$Xr.forEach(t),E_o=r(s4e," (BigBirdPegasus model)"),s4e.forEach(t),y_o=i(j),du=n(j,"LI",{});var l4e=s(du);Oee=n(l4e,"STRONG",{});var IXr=s(Oee);w_o=r(IXr,"blenderbot"),IXr.forEach(t),A_o=r(l4e," \u2014 "),GP=n(l4e,"A",{href:!0});var jXr=s(GP);L_o=r(jXr,"BlenderbotForCausalLM"),jXr.forEach(t),B_o=r(l4e," (Blenderbot model)"),l4e.forEach(t),x_o=i(j),cu=n(j,"LI",{});var i4e=s(cu);Gee=n(i4e,"STRONG",{});var DXr=s(Gee);k_o=r(DXr,"blenderbot-small"),DXr.forEach(t),R_o=r(i4e," \u2014 "),XP=n(i4e,"A",{href:!0});var NXr=s(XP);S_o=r(NXr,"BlenderbotSmallForCausalLM"),NXr.forEach(t),P_o=r(i4e," (BlenderbotSmall model)"),i4e.forEach(t),$_o=i(j),fu=n(j,"LI",{});var d4e=s(fu);Xee=n(d4e,"STRONG",{});var qXr=s(Xee);I_o=r(qXr,"camembert"),qXr.forEach(t),j_o=r(d4e," \u2014 "),VP=n(d4e,"A",{href:!0});var OXr=s(VP);D_o=r(OXr,"CamembertForCausalLM"),OXr.forEach(t),N_o=r(d4e," (CamemBERT model)"),d4e.forEach(t),q_o=i(j),mu=n(j,"LI",{});var c4e=s(mu);Vee=n(c4e,"STRONG",{});var GXr=s(Vee);O_o=r(GXr,"ctrl"),GXr.forEach(t),G_o=r(c4e," \u2014 "),zP=n(c4e,"A",{href:!0});var XXr=s(zP);X_o=r(XXr,"CTRLLMHeadModel"),XXr.forEach(t),V_o=r(c4e," (CTRL model)"),c4e.forEach(t),z_o=i(j),gu=n(j,"LI",{});var f4e=s(gu);zee=n(f4e,"STRONG",{});var VXr=s(zee);W_o=r(VXr,"data2vec-text"),VXr.forEach(t),Q_o=r(f4e," \u2014 "),WP=n(f4e,"A",{href:!0});var zXr=s(WP);H_o=r(zXr,"Data2VecTextForCausalLM"),zXr.forEach(t),U_o=r(f4e," (Data2VecText model)"),f4e.forEach(t),J_o=i(j),hu=n(j,"LI",{});var m4e=s(hu);Wee=n(m4e,"STRONG",{});var WXr=s(Wee);Y_o=r(WXr,"electra"),WXr.forEach(t),K_o=r(m4e," \u2014 "),QP=n(m4e,"A",{href:!0});var QXr=s(QP);Z_o=r(QXr,"ElectraForCausalLM"),QXr.forEach(t),euo=r(m4e," (ELECTRA model)"),m4e.forEach(t),ouo=i(j),pu=n(j,"LI",{});var g4e=s(pu);Qee=n(g4e,"STRONG",{});var HXr=s(Qee);ruo=r(HXr,"gpt2"),HXr.forEach(t),tuo=r(g4e," \u2014 "),HP=n(g4e,"A",{href:!0});var UXr=s(HP);auo=r(UXr,"GPT2LMHeadModel"),UXr.forEach(t),nuo=r(g4e," (OpenAI GPT-2 model)"),g4e.forEach(t),suo=i(j),_u=n(j,"LI",{});var h4e=s(_u);Hee=n(h4e,"STRONG",{});var JXr=s(Hee);luo=r(JXr,"gpt_neo"),JXr.forEach(t),iuo=r(h4e," \u2014 "),UP=n(h4e,"A",{href:!0});var YXr=s(UP);duo=r(YXr,"GPTNeoForCausalLM"),YXr.forEach(t),cuo=r(h4e," (GPT Neo model)"),h4e.forEach(t),fuo=i(j),uu=n(j,"LI",{});var p4e=s(uu);Uee=n(p4e,"STRONG",{});var KXr=s(Uee);muo=r(KXr,"gptj"),KXr.forEach(t),guo=r(p4e," \u2014 "),JP=n(p4e,"A",{href:!0});var ZXr=s(JP);huo=r(ZXr,"GPTJForCausalLM"),ZXr.forEach(t),puo=r(p4e," (GPT-J model)"),p4e.forEach(t),_uo=i(j),bu=n(j,"LI",{});var _4e=s(bu);Jee=n(_4e,"STRONG",{});var eVr=s(Jee);uuo=r(eVr,"marian"),eVr.forEach(t),buo=r(_4e," \u2014 "),YP=n(_4e,"A",{href:!0});var oVr=s(YP);vuo=r(oVr,"MarianForCausalLM"),oVr.forEach(t),Tuo=r(_4e," (Marian model)"),_4e.forEach(t),Fuo=i(j),vu=n(j,"LI",{});var u4e=s(vu);Yee=n(u4e,"STRONG",{});var rVr=s(Yee);Cuo=r(rVr,"mbart"),rVr.forEach(t),Muo=r(u4e," \u2014 "),KP=n(u4e,"A",{href:!0});var tVr=s(KP);Euo=r(tVr,"MBartForCausalLM"),tVr.forEach(t),yuo=r(u4e," (mBART model)"),u4e.forEach(t),wuo=i(j),Tu=n(j,"LI",{});var b4e=s(Tu);Kee=n(b4e,"STRONG",{});var aVr=s(Kee);Auo=r(aVr,"megatron-bert"),aVr.forEach(t),Luo=r(b4e," \u2014 "),ZP=n(b4e,"A",{href:!0});var nVr=s(ZP);Buo=r(nVr,"MegatronBertForCausalLM"),nVr.forEach(t),xuo=r(b4e," (MegatronBert model)"),b4e.forEach(t),kuo=i(j),Fu=n(j,"LI",{});var v4e=s(Fu);Zee=n(v4e,"STRONG",{});var sVr=s(Zee);Ruo=r(sVr,"openai-gpt"),sVr.forEach(t),Suo=r(v4e," \u2014 "),e$=n(v4e,"A",{href:!0});var lVr=s(e$);Puo=r(lVr,"OpenAIGPTLMHeadModel"),lVr.forEach(t),$uo=r(v4e," (OpenAI GPT model)"),v4e.forEach(t),Iuo=i(j),Cu=n(j,"LI",{});var T4e=s(Cu);eoe=n(T4e,"STRONG",{});var iVr=s(eoe);juo=r(iVr,"pegasus"),iVr.forEach(t),Duo=r(T4e," \u2014 "),o$=n(T4e,"A",{href:!0});var dVr=s(o$);Nuo=r(dVr,"PegasusForCausalLM"),dVr.forEach(t),quo=r(T4e," (Pegasus model)"),T4e.forEach(t),Ouo=i(j),Mu=n(j,"LI",{});var F4e=s(Mu);ooe=n(F4e,"STRONG",{});var cVr=s(ooe);Guo=r(cVr,"plbart"),cVr.forEach(t),Xuo=r(F4e," \u2014 "),r$=n(F4e,"A",{href:!0});var fVr=s(r$);Vuo=r(fVr,"PLBartForCausalLM"),fVr.forEach(t),zuo=r(F4e," (PLBart model)"),F4e.forEach(t),Wuo=i(j),Eu=n(j,"LI",{});var C4e=s(Eu);roe=n(C4e,"STRONG",{});var mVr=s(roe);Quo=r(mVr,"prophetnet"),mVr.forEach(t),Huo=r(C4e," \u2014 "),t$=n(C4e,"A",{href:!0});var gVr=s(t$);Uuo=r(gVr,"ProphetNetForCausalLM"),gVr.forEach(t),Juo=r(C4e," (ProphetNet model)"),C4e.forEach(t),Yuo=i(j),yu=n(j,"LI",{});var M4e=s(yu);toe=n(M4e,"STRONG",{});var hVr=s(toe);Kuo=r(hVr,"qdqbert"),hVr.forEach(t),Zuo=r(M4e," \u2014 "),a$=n(M4e,"A",{href:!0});var pVr=s(a$);e1o=r(pVr,"QDQBertLMHeadModel"),pVr.forEach(t),o1o=r(M4e," (QDQBert model)"),M4e.forEach(t),r1o=i(j),wu=n(j,"LI",{});var E4e=s(wu);aoe=n(E4e,"STRONG",{});var _Vr=s(aoe);t1o=r(_Vr,"reformer"),_Vr.forEach(t),a1o=r(E4e," \u2014 "),n$=n(E4e,"A",{href:!0});var uVr=s(n$);n1o=r(uVr,"ReformerModelWithLMHead"),uVr.forEach(t),s1o=r(E4e," (Reformer model)"),E4e.forEach(t),l1o=i(j),Au=n(j,"LI",{});var y4e=s(Au);noe=n(y4e,"STRONG",{});var bVr=s(noe);i1o=r(bVr,"rembert"),bVr.forEach(t),d1o=r(y4e," \u2014 "),s$=n(y4e,"A",{href:!0});var vVr=s(s$);c1o=r(vVr,"RemBertForCausalLM"),vVr.forEach(t),f1o=r(y4e," (RemBERT model)"),y4e.forEach(t),m1o=i(j),Lu=n(j,"LI",{});var w4e=s(Lu);soe=n(w4e,"STRONG",{});var TVr=s(soe);g1o=r(TVr,"roberta"),TVr.forEach(t),h1o=r(w4e," \u2014 "),l$=n(w4e,"A",{href:!0});var FVr=s(l$);p1o=r(FVr,"RobertaForCausalLM"),FVr.forEach(t),_1o=r(w4e," (RoBERTa model)"),w4e.forEach(t),u1o=i(j),Bu=n(j,"LI",{});var A4e=s(Bu);loe=n(A4e,"STRONG",{});var CVr=s(loe);b1o=r(CVr,"roformer"),CVr.forEach(t),v1o=r(A4e," \u2014 "),i$=n(A4e,"A",{href:!0});var MVr=s(i$);T1o=r(MVr,"RoFormerForCausalLM"),MVr.forEach(t),F1o=r(A4e," (RoFormer model)"),A4e.forEach(t),C1o=i(j),xu=n(j,"LI",{});var L4e=s(xu);ioe=n(L4e,"STRONG",{});var EVr=s(ioe);M1o=r(EVr,"speech_to_text_2"),EVr.forEach(t),E1o=r(L4e," \u2014 "),d$=n(L4e,"A",{href:!0});var yVr=s(d$);y1o=r(yVr,"Speech2Text2ForCausalLM"),yVr.forEach(t),w1o=r(L4e," (Speech2Text2 model)"),L4e.forEach(t),A1o=i(j),ku=n(j,"LI",{});var B4e=s(ku);doe=n(B4e,"STRONG",{});var wVr=s(doe);L1o=r(wVr,"transfo-xl"),wVr.forEach(t),B1o=r(B4e," \u2014 "),c$=n(B4e,"A",{href:!0});var AVr=s(c$);x1o=r(AVr,"TransfoXLLMHeadModel"),AVr.forEach(t),k1o=r(B4e," (Transformer-XL model)"),B4e.forEach(t),R1o=i(j),Ru=n(j,"LI",{});var x4e=s(Ru);coe=n(x4e,"STRONG",{});var LVr=s(coe);S1o=r(LVr,"trocr"),LVr.forEach(t),P1o=r(x4e," \u2014 "),f$=n(x4e,"A",{href:!0});var BVr=s(f$);$1o=r(BVr,"TrOCRForCausalLM"),BVr.forEach(t),I1o=r(x4e," (TrOCR model)"),x4e.forEach(t),j1o=i(j),Su=n(j,"LI",{});var k4e=s(Su);foe=n(k4e,"STRONG",{});var xVr=s(foe);D1o=r(xVr,"xglm"),xVr.forEach(t),N1o=r(k4e," \u2014 "),m$=n(k4e,"A",{href:!0});var kVr=s(m$);q1o=r(kVr,"XGLMForCausalLM"),kVr.forEach(t),O1o=r(k4e," (XGLM model)"),k4e.forEach(t),G1o=i(j),Pu=n(j,"LI",{});var R4e=s(Pu);moe=n(R4e,"STRONG",{});var RVr=s(moe);X1o=r(RVr,"xlm"),RVr.forEach(t),V1o=r(R4e," \u2014 "),g$=n(R4e,"A",{href:!0});var SVr=s(g$);z1o=r(SVr,"XLMWithLMHeadModel"),SVr.forEach(t),W1o=r(R4e," (XLM model)"),R4e.forEach(t),Q1o=i(j),$u=n(j,"LI",{});var S4e=s($u);goe=n(S4e,"STRONG",{});var PVr=s(goe);H1o=r(PVr,"xlm-prophetnet"),PVr.forEach(t),U1o=r(S4e," \u2014 "),h$=n(S4e,"A",{href:!0});var $Vr=s(h$);J1o=r($Vr,"XLMProphetNetForCausalLM"),$Vr.forEach(t),Y1o=r(S4e," (XLMProphetNet model)"),S4e.forEach(t),K1o=i(j),Iu=n(j,"LI",{});var P4e=s(Iu);hoe=n(P4e,"STRONG",{});var IVr=s(hoe);Z1o=r(IVr,"xlm-roberta"),IVr.forEach(t),ebo=r(P4e," \u2014 "),p$=n(P4e,"A",{href:!0});var jVr=s(p$);obo=r(jVr,"XLMRobertaForCausalLM"),jVr.forEach(t),rbo=r(P4e," (XLM-RoBERTa model)"),P4e.forEach(t),tbo=i(j),ju=n(j,"LI",{});var $4e=s(ju);poe=n($4e,"STRONG",{});var DVr=s(poe);abo=r(DVr,"xlm-roberta-xl"),DVr.forEach(t),nbo=r($4e," \u2014 "),_$=n($4e,"A",{href:!0});var NVr=s(_$);sbo=r(NVr,"XLMRobertaXLForCausalLM"),NVr.forEach(t),lbo=r($4e," (XLM-RoBERTa-XL model)"),$4e.forEach(t),ibo=i(j),Du=n(j,"LI",{});var I4e=s(Du);_oe=n(I4e,"STRONG",{});var qVr=s(_oe);dbo=r(qVr,"xlnet"),qVr.forEach(t),cbo=r(I4e," \u2014 "),u$=n(I4e,"A",{href:!0});var OVr=s(u$);fbo=r(OVr,"XLNetLMHeadModel"),OVr.forEach(t),mbo=r(I4e," (XLNet model)"),I4e.forEach(t),j.forEach(t),gbo=i(Gt),Nu=n(Gt,"P",{});var j4e=s(Nu);hbo=r(j4e,"The model is set in evaluation mode by default using "),uoe=n(j4e,"CODE",{});var GVr=s(uoe);pbo=r(GVr,"model.eval()"),GVr.forEach(t),_bo=r(j4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),boe=n(j4e,"CODE",{});var XVr=s(boe);ubo=r(XVr,"model.train()"),XVr.forEach(t),j4e.forEach(t),bbo=i(Gt),voe=n(Gt,"P",{});var VVr=s(voe);vbo=r(VVr,"Examples:"),VVr.forEach(t),Tbo=i(Gt),m(zE.$$.fragment,Gt),Gt.forEach(t),Js.forEach(t),uxe=i(d),nd=n(d,"H2",{class:!0});var wRe=s(nd);qu=n(wRe,"A",{id:!0,class:!0,href:!0});var zVr=s(qu);Toe=n(zVr,"SPAN",{});var WVr=s(Toe);m(WE.$$.fragment,WVr),WVr.forEach(t),zVr.forEach(t),Fbo=i(wRe),Foe=n(wRe,"SPAN",{});var QVr=s(Foe);Cbo=r(QVr,"AutoModelForMaskedLM"),QVr.forEach(t),wRe.forEach(t),bxe=i(d),Zo=n(d,"DIV",{class:!0});var Ks=s(Zo);m(QE.$$.fragment,Ks),Mbo=i(Ks),sd=n(Ks,"P",{});var Az=s(sd);Ebo=r(Az,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Coe=n(Az,"CODE",{});var HVr=s(Coe);ybo=r(HVr,"from_pretrained()"),HVr.forEach(t),wbo=r(Az,"class method or the "),Moe=n(Az,"CODE",{});var UVr=s(Moe);Abo=r(UVr,"from_config()"),UVr.forEach(t),Lbo=r(Az,`class
method.`),Az.forEach(t),Bbo=i(Ks),HE=n(Ks,"P",{});var ARe=s(HE);xbo=r(ARe,"This class cannot be instantiated directly using "),Eoe=n(ARe,"CODE",{});var JVr=s(Eoe);kbo=r(JVr,"__init__()"),JVr.forEach(t),Rbo=r(ARe," (throws an error)."),ARe.forEach(t),Sbo=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(UE.$$.fragment,Zs),Pbo=i(Zs),yoe=n(Zs,"P",{});var YVr=s(yoe);$bo=r(YVr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),YVr.forEach(t),Ibo=i(Zs),ld=n(Zs,"P",{});var Lz=s(ld);jbo=r(Lz,`Note:
Loading a model from its configuration file does `),woe=n(Lz,"STRONG",{});var KVr=s(woe);Dbo=r(KVr,"not"),KVr.forEach(t),Nbo=r(Lz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=n(Lz,"CODE",{});var ZVr=s(Aoe);qbo=r(ZVr,"from_pretrained()"),ZVr.forEach(t),Obo=r(Lz,"to load the model weights."),Lz.forEach(t),Gbo=i(Zs),Loe=n(Zs,"P",{});var ezr=s(Loe);Xbo=r(ezr,"Examples:"),ezr.forEach(t),Vbo=i(Zs),m(JE.$$.fragment,Zs),Zs.forEach(t),zbo=i(Ks),qe=n(Ks,"DIV",{class:!0});var Xt=s(qe);m(YE.$$.fragment,Xt),Wbo=i(Xt),Boe=n(Xt,"P",{});var ozr=s(Boe);Qbo=r(ozr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ozr.forEach(t),Hbo=i(Xt),Wa=n(Xt,"P",{});var YM=s(Wa);Ubo=r(YM,"The model class to instantiate is selected based on the "),xoe=n(YM,"CODE",{});var rzr=s(xoe);Jbo=r(rzr,"model_type"),rzr.forEach(t),Ybo=r(YM,` property of the config object (either
passed as an argument or loaded from `),koe=n(YM,"CODE",{});var tzr=s(koe);Kbo=r(tzr,"pretrained_model_name_or_path"),tzr.forEach(t),Zbo=r(YM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Roe=n(YM,"CODE",{});var azr=s(Roe);e3o=r(azr,"pretrained_model_name_or_path"),azr.forEach(t),o3o=r(YM,":"),YM.forEach(t),r3o=i(Xt),I=n(Xt,"UL",{});var D=s(I);Ou=n(D,"LI",{});var D4e=s(Ou);Soe=n(D4e,"STRONG",{});var nzr=s(Soe);t3o=r(nzr,"albert"),nzr.forEach(t),a3o=r(D4e," \u2014 "),b$=n(D4e,"A",{href:!0});var szr=s(b$);n3o=r(szr,"AlbertForMaskedLM"),szr.forEach(t),s3o=r(D4e," (ALBERT model)"),D4e.forEach(t),l3o=i(D),Gu=n(D,"LI",{});var N4e=s(Gu);Poe=n(N4e,"STRONG",{});var lzr=s(Poe);i3o=r(lzr,"bart"),lzr.forEach(t),d3o=r(N4e," \u2014 "),v$=n(N4e,"A",{href:!0});var izr=s(v$);c3o=r(izr,"BartForConditionalGeneration"),izr.forEach(t),f3o=r(N4e," (BART model)"),N4e.forEach(t),m3o=i(D),Xu=n(D,"LI",{});var q4e=s(Xu);$oe=n(q4e,"STRONG",{});var dzr=s($oe);g3o=r(dzr,"bert"),dzr.forEach(t),h3o=r(q4e," \u2014 "),T$=n(q4e,"A",{href:!0});var czr=s(T$);p3o=r(czr,"BertForMaskedLM"),czr.forEach(t),_3o=r(q4e," (BERT model)"),q4e.forEach(t),u3o=i(D),Vu=n(D,"LI",{});var O4e=s(Vu);Ioe=n(O4e,"STRONG",{});var fzr=s(Ioe);b3o=r(fzr,"big_bird"),fzr.forEach(t),v3o=r(O4e," \u2014 "),F$=n(O4e,"A",{href:!0});var mzr=s(F$);T3o=r(mzr,"BigBirdForMaskedLM"),mzr.forEach(t),F3o=r(O4e," (BigBird model)"),O4e.forEach(t),C3o=i(D),zu=n(D,"LI",{});var G4e=s(zu);joe=n(G4e,"STRONG",{});var gzr=s(joe);M3o=r(gzr,"camembert"),gzr.forEach(t),E3o=r(G4e," \u2014 "),C$=n(G4e,"A",{href:!0});var hzr=s(C$);y3o=r(hzr,"CamembertForMaskedLM"),hzr.forEach(t),w3o=r(G4e," (CamemBERT model)"),G4e.forEach(t),A3o=i(D),Wu=n(D,"LI",{});var X4e=s(Wu);Doe=n(X4e,"STRONG",{});var pzr=s(Doe);L3o=r(pzr,"convbert"),pzr.forEach(t),B3o=r(X4e," \u2014 "),M$=n(X4e,"A",{href:!0});var _zr=s(M$);x3o=r(_zr,"ConvBertForMaskedLM"),_zr.forEach(t),k3o=r(X4e," (ConvBERT model)"),X4e.forEach(t),R3o=i(D),Qu=n(D,"LI",{});var V4e=s(Qu);Noe=n(V4e,"STRONG",{});var uzr=s(Noe);S3o=r(uzr,"data2vec-text"),uzr.forEach(t),P3o=r(V4e," \u2014 "),E$=n(V4e,"A",{href:!0});var bzr=s(E$);$3o=r(bzr,"Data2VecTextForMaskedLM"),bzr.forEach(t),I3o=r(V4e," (Data2VecText model)"),V4e.forEach(t),j3o=i(D),Hu=n(D,"LI",{});var z4e=s(Hu);qoe=n(z4e,"STRONG",{});var vzr=s(qoe);D3o=r(vzr,"deberta"),vzr.forEach(t),N3o=r(z4e," \u2014 "),y$=n(z4e,"A",{href:!0});var Tzr=s(y$);q3o=r(Tzr,"DebertaForMaskedLM"),Tzr.forEach(t),O3o=r(z4e," (DeBERTa model)"),z4e.forEach(t),G3o=i(D),Uu=n(D,"LI",{});var W4e=s(Uu);Ooe=n(W4e,"STRONG",{});var Fzr=s(Ooe);X3o=r(Fzr,"deberta-v2"),Fzr.forEach(t),V3o=r(W4e," \u2014 "),w$=n(W4e,"A",{href:!0});var Czr=s(w$);z3o=r(Czr,"DebertaV2ForMaskedLM"),Czr.forEach(t),W3o=r(W4e," (DeBERTa-v2 model)"),W4e.forEach(t),Q3o=i(D),Ju=n(D,"LI",{});var Q4e=s(Ju);Goe=n(Q4e,"STRONG",{});var Mzr=s(Goe);H3o=r(Mzr,"distilbert"),Mzr.forEach(t),U3o=r(Q4e," \u2014 "),A$=n(Q4e,"A",{href:!0});var Ezr=s(A$);J3o=r(Ezr,"DistilBertForMaskedLM"),Ezr.forEach(t),Y3o=r(Q4e," (DistilBERT model)"),Q4e.forEach(t),K3o=i(D),Yu=n(D,"LI",{});var H4e=s(Yu);Xoe=n(H4e,"STRONG",{});var yzr=s(Xoe);Z3o=r(yzr,"electra"),yzr.forEach(t),e5o=r(H4e," \u2014 "),L$=n(H4e,"A",{href:!0});var wzr=s(L$);o5o=r(wzr,"ElectraForMaskedLM"),wzr.forEach(t),r5o=r(H4e," (ELECTRA model)"),H4e.forEach(t),t5o=i(D),Ku=n(D,"LI",{});var U4e=s(Ku);Voe=n(U4e,"STRONG",{});var Azr=s(Voe);a5o=r(Azr,"flaubert"),Azr.forEach(t),n5o=r(U4e," \u2014 "),B$=n(U4e,"A",{href:!0});var Lzr=s(B$);s5o=r(Lzr,"FlaubertWithLMHeadModel"),Lzr.forEach(t),l5o=r(U4e," (FlauBERT model)"),U4e.forEach(t),i5o=i(D),Zu=n(D,"LI",{});var J4e=s(Zu);zoe=n(J4e,"STRONG",{});var Bzr=s(zoe);d5o=r(Bzr,"fnet"),Bzr.forEach(t),c5o=r(J4e," \u2014 "),x$=n(J4e,"A",{href:!0});var xzr=s(x$);f5o=r(xzr,"FNetForMaskedLM"),xzr.forEach(t),m5o=r(J4e," (FNet model)"),J4e.forEach(t),g5o=i(D),e1=n(D,"LI",{});var Y4e=s(e1);Woe=n(Y4e,"STRONG",{});var kzr=s(Woe);h5o=r(kzr,"funnel"),kzr.forEach(t),p5o=r(Y4e," \u2014 "),k$=n(Y4e,"A",{href:!0});var Rzr=s(k$);_5o=r(Rzr,"FunnelForMaskedLM"),Rzr.forEach(t),u5o=r(Y4e," (Funnel Transformer model)"),Y4e.forEach(t),b5o=i(D),o1=n(D,"LI",{});var K4e=s(o1);Qoe=n(K4e,"STRONG",{});var Szr=s(Qoe);v5o=r(Szr,"ibert"),Szr.forEach(t),T5o=r(K4e," \u2014 "),R$=n(K4e,"A",{href:!0});var Pzr=s(R$);F5o=r(Pzr,"IBertForMaskedLM"),Pzr.forEach(t),C5o=r(K4e," (I-BERT model)"),K4e.forEach(t),M5o=i(D),r1=n(D,"LI",{});var Z4e=s(r1);Hoe=n(Z4e,"STRONG",{});var $zr=s(Hoe);E5o=r($zr,"layoutlm"),$zr.forEach(t),y5o=r(Z4e," \u2014 "),S$=n(Z4e,"A",{href:!0});var Izr=s(S$);w5o=r(Izr,"LayoutLMForMaskedLM"),Izr.forEach(t),A5o=r(Z4e," (LayoutLM model)"),Z4e.forEach(t),L5o=i(D),t1=n(D,"LI",{});var eEe=s(t1);Uoe=n(eEe,"STRONG",{});var jzr=s(Uoe);B5o=r(jzr,"longformer"),jzr.forEach(t),x5o=r(eEe," \u2014 "),P$=n(eEe,"A",{href:!0});var Dzr=s(P$);k5o=r(Dzr,"LongformerForMaskedLM"),Dzr.forEach(t),R5o=r(eEe," (Longformer model)"),eEe.forEach(t),S5o=i(D),a1=n(D,"LI",{});var oEe=s(a1);Joe=n(oEe,"STRONG",{});var Nzr=s(Joe);P5o=r(Nzr,"mbart"),Nzr.forEach(t),$5o=r(oEe," \u2014 "),$$=n(oEe,"A",{href:!0});var qzr=s($$);I5o=r(qzr,"MBartForConditionalGeneration"),qzr.forEach(t),j5o=r(oEe," (mBART model)"),oEe.forEach(t),D5o=i(D),n1=n(D,"LI",{});var rEe=s(n1);Yoe=n(rEe,"STRONG",{});var Ozr=s(Yoe);N5o=r(Ozr,"megatron-bert"),Ozr.forEach(t),q5o=r(rEe," \u2014 "),I$=n(rEe,"A",{href:!0});var Gzr=s(I$);O5o=r(Gzr,"MegatronBertForMaskedLM"),Gzr.forEach(t),G5o=r(rEe," (MegatronBert model)"),rEe.forEach(t),X5o=i(D),s1=n(D,"LI",{});var tEe=s(s1);Koe=n(tEe,"STRONG",{});var Xzr=s(Koe);V5o=r(Xzr,"mobilebert"),Xzr.forEach(t),z5o=r(tEe," \u2014 "),j$=n(tEe,"A",{href:!0});var Vzr=s(j$);W5o=r(Vzr,"MobileBertForMaskedLM"),Vzr.forEach(t),Q5o=r(tEe," (MobileBERT model)"),tEe.forEach(t),H5o=i(D),l1=n(D,"LI",{});var aEe=s(l1);Zoe=n(aEe,"STRONG",{});var zzr=s(Zoe);U5o=r(zzr,"mpnet"),zzr.forEach(t),J5o=r(aEe," \u2014 "),D$=n(aEe,"A",{href:!0});var Wzr=s(D$);Y5o=r(Wzr,"MPNetForMaskedLM"),Wzr.forEach(t),K5o=r(aEe," (MPNet model)"),aEe.forEach(t),Z5o=i(D),i1=n(D,"LI",{});var nEe=s(i1);ere=n(nEe,"STRONG",{});var Qzr=s(ere);e2o=r(Qzr,"nystromformer"),Qzr.forEach(t),o2o=r(nEe," \u2014 "),N$=n(nEe,"A",{href:!0});var Hzr=s(N$);r2o=r(Hzr,"NystromformerForMaskedLM"),Hzr.forEach(t),t2o=r(nEe," (Nystromformer model)"),nEe.forEach(t),a2o=i(D),d1=n(D,"LI",{});var sEe=s(d1);ore=n(sEe,"STRONG",{});var Uzr=s(ore);n2o=r(Uzr,"perceiver"),Uzr.forEach(t),s2o=r(sEe," \u2014 "),q$=n(sEe,"A",{href:!0});var Jzr=s(q$);l2o=r(Jzr,"PerceiverForMaskedLM"),Jzr.forEach(t),i2o=r(sEe," (Perceiver model)"),sEe.forEach(t),d2o=i(D),c1=n(D,"LI",{});var lEe=s(c1);rre=n(lEe,"STRONG",{});var Yzr=s(rre);c2o=r(Yzr,"qdqbert"),Yzr.forEach(t),f2o=r(lEe," \u2014 "),O$=n(lEe,"A",{href:!0});var Kzr=s(O$);m2o=r(Kzr,"QDQBertForMaskedLM"),Kzr.forEach(t),g2o=r(lEe," (QDQBert model)"),lEe.forEach(t),h2o=i(D),f1=n(D,"LI",{});var iEe=s(f1);tre=n(iEe,"STRONG",{});var Zzr=s(tre);p2o=r(Zzr,"reformer"),Zzr.forEach(t),_2o=r(iEe," \u2014 "),G$=n(iEe,"A",{href:!0});var eWr=s(G$);u2o=r(eWr,"ReformerForMaskedLM"),eWr.forEach(t),b2o=r(iEe," (Reformer model)"),iEe.forEach(t),v2o=i(D),m1=n(D,"LI",{});var dEe=s(m1);are=n(dEe,"STRONG",{});var oWr=s(are);T2o=r(oWr,"rembert"),oWr.forEach(t),F2o=r(dEe," \u2014 "),X$=n(dEe,"A",{href:!0});var rWr=s(X$);C2o=r(rWr,"RemBertForMaskedLM"),rWr.forEach(t),M2o=r(dEe," (RemBERT model)"),dEe.forEach(t),E2o=i(D),g1=n(D,"LI",{});var cEe=s(g1);nre=n(cEe,"STRONG",{});var tWr=s(nre);y2o=r(tWr,"roberta"),tWr.forEach(t),w2o=r(cEe," \u2014 "),V$=n(cEe,"A",{href:!0});var aWr=s(V$);A2o=r(aWr,"RobertaForMaskedLM"),aWr.forEach(t),L2o=r(cEe," (RoBERTa model)"),cEe.forEach(t),B2o=i(D),h1=n(D,"LI",{});var fEe=s(h1);sre=n(fEe,"STRONG",{});var nWr=s(sre);x2o=r(nWr,"roformer"),nWr.forEach(t),k2o=r(fEe," \u2014 "),z$=n(fEe,"A",{href:!0});var sWr=s(z$);R2o=r(sWr,"RoFormerForMaskedLM"),sWr.forEach(t),S2o=r(fEe," (RoFormer model)"),fEe.forEach(t),P2o=i(D),p1=n(D,"LI",{});var mEe=s(p1);lre=n(mEe,"STRONG",{});var lWr=s(lre);$2o=r(lWr,"squeezebert"),lWr.forEach(t),I2o=r(mEe," \u2014 "),W$=n(mEe,"A",{href:!0});var iWr=s(W$);j2o=r(iWr,"SqueezeBertForMaskedLM"),iWr.forEach(t),D2o=r(mEe," (SqueezeBERT model)"),mEe.forEach(t),N2o=i(D),_1=n(D,"LI",{});var gEe=s(_1);ire=n(gEe,"STRONG",{});var dWr=s(ire);q2o=r(dWr,"tapas"),dWr.forEach(t),O2o=r(gEe," \u2014 "),Q$=n(gEe,"A",{href:!0});var cWr=s(Q$);G2o=r(cWr,"TapasForMaskedLM"),cWr.forEach(t),X2o=r(gEe," (TAPAS model)"),gEe.forEach(t),V2o=i(D),u1=n(D,"LI",{});var hEe=s(u1);dre=n(hEe,"STRONG",{});var fWr=s(dre);z2o=r(fWr,"wav2vec2"),fWr.forEach(t),W2o=r(hEe," \u2014 "),cre=n(hEe,"CODE",{});var mWr=s(cre);Q2o=r(mWr,"Wav2Vec2ForMaskedLM"),mWr.forEach(t),H2o=r(hEe,"(Wav2Vec2 model)"),hEe.forEach(t),U2o=i(D),b1=n(D,"LI",{});var pEe=s(b1);fre=n(pEe,"STRONG",{});var gWr=s(fre);J2o=r(gWr,"xlm"),gWr.forEach(t),Y2o=r(pEe," \u2014 "),H$=n(pEe,"A",{href:!0});var hWr=s(H$);K2o=r(hWr,"XLMWithLMHeadModel"),hWr.forEach(t),Z2o=r(pEe," (XLM model)"),pEe.forEach(t),evo=i(D),v1=n(D,"LI",{});var _Ee=s(v1);mre=n(_Ee,"STRONG",{});var pWr=s(mre);ovo=r(pWr,"xlm-roberta"),pWr.forEach(t),rvo=r(_Ee," \u2014 "),U$=n(_Ee,"A",{href:!0});var _Wr=s(U$);tvo=r(_Wr,"XLMRobertaForMaskedLM"),_Wr.forEach(t),avo=r(_Ee," (XLM-RoBERTa model)"),_Ee.forEach(t),nvo=i(D),T1=n(D,"LI",{});var uEe=s(T1);gre=n(uEe,"STRONG",{});var uWr=s(gre);svo=r(uWr,"xlm-roberta-xl"),uWr.forEach(t),lvo=r(uEe," \u2014 "),J$=n(uEe,"A",{href:!0});var bWr=s(J$);ivo=r(bWr,"XLMRobertaXLForMaskedLM"),bWr.forEach(t),dvo=r(uEe," (XLM-RoBERTa-XL model)"),uEe.forEach(t),cvo=i(D),F1=n(D,"LI",{});var bEe=s(F1);hre=n(bEe,"STRONG",{});var vWr=s(hre);fvo=r(vWr,"yoso"),vWr.forEach(t),mvo=r(bEe," \u2014 "),Y$=n(bEe,"A",{href:!0});var TWr=s(Y$);gvo=r(TWr,"YosoForMaskedLM"),TWr.forEach(t),hvo=r(bEe," (YOSO model)"),bEe.forEach(t),D.forEach(t),pvo=i(Xt),C1=n(Xt,"P",{});var vEe=s(C1);_vo=r(vEe,"The model is set in evaluation mode by default using "),pre=n(vEe,"CODE",{});var FWr=s(pre);uvo=r(FWr,"model.eval()"),FWr.forEach(t),bvo=r(vEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_re=n(vEe,"CODE",{});var CWr=s(_re);vvo=r(CWr,"model.train()"),CWr.forEach(t),vEe.forEach(t),Tvo=i(Xt),ure=n(Xt,"P",{});var MWr=s(ure);Fvo=r(MWr,"Examples:"),MWr.forEach(t),Cvo=i(Xt),m(KE.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),vxe=i(d),id=n(d,"H2",{class:!0});var LRe=s(id);M1=n(LRe,"A",{id:!0,class:!0,href:!0});var EWr=s(M1);bre=n(EWr,"SPAN",{});var yWr=s(bre);m(ZE.$$.fragment,yWr),yWr.forEach(t),EWr.forEach(t),Mvo=i(LRe),vre=n(LRe,"SPAN",{});var wWr=s(vre);Evo=r(wWr,"AutoModelForSeq2SeqLM"),wWr.forEach(t),LRe.forEach(t),Txe=i(d),er=n(d,"DIV",{class:!0});var el=s(er);m(ey.$$.fragment,el),yvo=i(el),dd=n(el,"P",{});var Bz=s(dd);wvo=r(Bz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Tre=n(Bz,"CODE",{});var AWr=s(Tre);Avo=r(AWr,"from_pretrained()"),AWr.forEach(t),Lvo=r(Bz,"class method or the "),Fre=n(Bz,"CODE",{});var LWr=s(Fre);Bvo=r(LWr,"from_config()"),LWr.forEach(t),xvo=r(Bz,`class
method.`),Bz.forEach(t),kvo=i(el),oy=n(el,"P",{});var BRe=s(oy);Rvo=r(BRe,"This class cannot be instantiated directly using "),Cre=n(BRe,"CODE",{});var BWr=s(Cre);Svo=r(BWr,"__init__()"),BWr.forEach(t),Pvo=r(BRe," (throws an error)."),BRe.forEach(t),$vo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(ry.$$.fragment,ol),Ivo=i(ol),Mre=n(ol,"P",{});var xWr=s(Mre);jvo=r(xWr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xWr.forEach(t),Dvo=i(ol),cd=n(ol,"P",{});var xz=s(cd);Nvo=r(xz,`Note:
Loading a model from its configuration file does `),Ere=n(xz,"STRONG",{});var kWr=s(Ere);qvo=r(kWr,"not"),kWr.forEach(t),Ovo=r(xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=n(xz,"CODE",{});var RWr=s(yre);Gvo=r(RWr,"from_pretrained()"),RWr.forEach(t),Xvo=r(xz,"to load the model weights."),xz.forEach(t),Vvo=i(ol),wre=n(ol,"P",{});var SWr=s(wre);zvo=r(SWr,"Examples:"),SWr.forEach(t),Wvo=i(ol),m(ty.$$.fragment,ol),ol.forEach(t),Qvo=i(el),Oe=n(el,"DIV",{class:!0});var Vt=s(Oe);m(ay.$$.fragment,Vt),Hvo=i(Vt),Are=n(Vt,"P",{});var PWr=s(Are);Uvo=r(PWr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),PWr.forEach(t),Jvo=i(Vt),Qa=n(Vt,"P",{});var KM=s(Qa);Yvo=r(KM,"The model class to instantiate is selected based on the "),Lre=n(KM,"CODE",{});var $Wr=s(Lre);Kvo=r($Wr,"model_type"),$Wr.forEach(t),Zvo=r(KM,` property of the config object (either
passed as an argument or loaded from `),Bre=n(KM,"CODE",{});var IWr=s(Bre);eTo=r(IWr,"pretrained_model_name_or_path"),IWr.forEach(t),oTo=r(KM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xre=n(KM,"CODE",{});var jWr=s(xre);rTo=r(jWr,"pretrained_model_name_or_path"),jWr.forEach(t),tTo=r(KM,":"),KM.forEach(t),aTo=i(Vt),ne=n(Vt,"UL",{});var ie=s(ne);E1=n(ie,"LI",{});var TEe=s(E1);kre=n(TEe,"STRONG",{});var DWr=s(kre);nTo=r(DWr,"bart"),DWr.forEach(t),sTo=r(TEe," \u2014 "),K$=n(TEe,"A",{href:!0});var NWr=s(K$);lTo=r(NWr,"BartForConditionalGeneration"),NWr.forEach(t),iTo=r(TEe," (BART model)"),TEe.forEach(t),dTo=i(ie),y1=n(ie,"LI",{});var FEe=s(y1);Rre=n(FEe,"STRONG",{});var qWr=s(Rre);cTo=r(qWr,"bigbird_pegasus"),qWr.forEach(t),fTo=r(FEe," \u2014 "),Z$=n(FEe,"A",{href:!0});var OWr=s(Z$);mTo=r(OWr,"BigBirdPegasusForConditionalGeneration"),OWr.forEach(t),gTo=r(FEe," (BigBirdPegasus model)"),FEe.forEach(t),hTo=i(ie),w1=n(ie,"LI",{});var CEe=s(w1);Sre=n(CEe,"STRONG",{});var GWr=s(Sre);pTo=r(GWr,"blenderbot"),GWr.forEach(t),_To=r(CEe," \u2014 "),eI=n(CEe,"A",{href:!0});var XWr=s(eI);uTo=r(XWr,"BlenderbotForConditionalGeneration"),XWr.forEach(t),bTo=r(CEe," (Blenderbot model)"),CEe.forEach(t),vTo=i(ie),A1=n(ie,"LI",{});var MEe=s(A1);Pre=n(MEe,"STRONG",{});var VWr=s(Pre);TTo=r(VWr,"blenderbot-small"),VWr.forEach(t),FTo=r(MEe," \u2014 "),oI=n(MEe,"A",{href:!0});var zWr=s(oI);CTo=r(zWr,"BlenderbotSmallForConditionalGeneration"),zWr.forEach(t),MTo=r(MEe," (BlenderbotSmall model)"),MEe.forEach(t),ETo=i(ie),L1=n(ie,"LI",{});var EEe=s(L1);$re=n(EEe,"STRONG",{});var WWr=s($re);yTo=r(WWr,"encoder-decoder"),WWr.forEach(t),wTo=r(EEe," \u2014 "),rI=n(EEe,"A",{href:!0});var QWr=s(rI);ATo=r(QWr,"EncoderDecoderModel"),QWr.forEach(t),LTo=r(EEe," (Encoder decoder model)"),EEe.forEach(t),BTo=i(ie),B1=n(ie,"LI",{});var yEe=s(B1);Ire=n(yEe,"STRONG",{});var HWr=s(Ire);xTo=r(HWr,"fsmt"),HWr.forEach(t),kTo=r(yEe," \u2014 "),tI=n(yEe,"A",{href:!0});var UWr=s(tI);RTo=r(UWr,"FSMTForConditionalGeneration"),UWr.forEach(t),STo=r(yEe," (FairSeq Machine-Translation model)"),yEe.forEach(t),PTo=i(ie),x1=n(ie,"LI",{});var wEe=s(x1);jre=n(wEe,"STRONG",{});var JWr=s(jre);$To=r(JWr,"led"),JWr.forEach(t),ITo=r(wEe," \u2014 "),aI=n(wEe,"A",{href:!0});var YWr=s(aI);jTo=r(YWr,"LEDForConditionalGeneration"),YWr.forEach(t),DTo=r(wEe," (LED model)"),wEe.forEach(t),NTo=i(ie),k1=n(ie,"LI",{});var AEe=s(k1);Dre=n(AEe,"STRONG",{});var KWr=s(Dre);qTo=r(KWr,"m2m_100"),KWr.forEach(t),OTo=r(AEe," \u2014 "),nI=n(AEe,"A",{href:!0});var ZWr=s(nI);GTo=r(ZWr,"M2M100ForConditionalGeneration"),ZWr.forEach(t),XTo=r(AEe," (M2M100 model)"),AEe.forEach(t),VTo=i(ie),R1=n(ie,"LI",{});var LEe=s(R1);Nre=n(LEe,"STRONG",{});var eQr=s(Nre);zTo=r(eQr,"marian"),eQr.forEach(t),WTo=r(LEe," \u2014 "),sI=n(LEe,"A",{href:!0});var oQr=s(sI);QTo=r(oQr,"MarianMTModel"),oQr.forEach(t),HTo=r(LEe," (Marian model)"),LEe.forEach(t),UTo=i(ie),S1=n(ie,"LI",{});var BEe=s(S1);qre=n(BEe,"STRONG",{});var rQr=s(qre);JTo=r(rQr,"mbart"),rQr.forEach(t),YTo=r(BEe," \u2014 "),lI=n(BEe,"A",{href:!0});var tQr=s(lI);KTo=r(tQr,"MBartForConditionalGeneration"),tQr.forEach(t),ZTo=r(BEe," (mBART model)"),BEe.forEach(t),e8o=i(ie),P1=n(ie,"LI",{});var xEe=s(P1);Ore=n(xEe,"STRONG",{});var aQr=s(Ore);o8o=r(aQr,"mt5"),aQr.forEach(t),r8o=r(xEe," \u2014 "),iI=n(xEe,"A",{href:!0});var nQr=s(iI);t8o=r(nQr,"MT5ForConditionalGeneration"),nQr.forEach(t),a8o=r(xEe," (mT5 model)"),xEe.forEach(t),n8o=i(ie),$1=n(ie,"LI",{});var kEe=s($1);Gre=n(kEe,"STRONG",{});var sQr=s(Gre);s8o=r(sQr,"pegasus"),sQr.forEach(t),l8o=r(kEe," \u2014 "),dI=n(kEe,"A",{href:!0});var lQr=s(dI);i8o=r(lQr,"PegasusForConditionalGeneration"),lQr.forEach(t),d8o=r(kEe," (Pegasus model)"),kEe.forEach(t),c8o=i(ie),I1=n(ie,"LI",{});var REe=s(I1);Xre=n(REe,"STRONG",{});var iQr=s(Xre);f8o=r(iQr,"plbart"),iQr.forEach(t),m8o=r(REe," \u2014 "),cI=n(REe,"A",{href:!0});var dQr=s(cI);g8o=r(dQr,"PLBartForConditionalGeneration"),dQr.forEach(t),h8o=r(REe," (PLBart model)"),REe.forEach(t),p8o=i(ie),j1=n(ie,"LI",{});var SEe=s(j1);Vre=n(SEe,"STRONG",{});var cQr=s(Vre);_8o=r(cQr,"prophetnet"),cQr.forEach(t),u8o=r(SEe," \u2014 "),fI=n(SEe,"A",{href:!0});var fQr=s(fI);b8o=r(fQr,"ProphetNetForConditionalGeneration"),fQr.forEach(t),v8o=r(SEe," (ProphetNet model)"),SEe.forEach(t),T8o=i(ie),D1=n(ie,"LI",{});var PEe=s(D1);zre=n(PEe,"STRONG",{});var mQr=s(zre);F8o=r(mQr,"t5"),mQr.forEach(t),C8o=r(PEe," \u2014 "),mI=n(PEe,"A",{href:!0});var gQr=s(mI);M8o=r(gQr,"T5ForConditionalGeneration"),gQr.forEach(t),E8o=r(PEe," (T5 model)"),PEe.forEach(t),y8o=i(ie),N1=n(ie,"LI",{});var $Ee=s(N1);Wre=n($Ee,"STRONG",{});var hQr=s(Wre);w8o=r(hQr,"xlm-prophetnet"),hQr.forEach(t),A8o=r($Ee," \u2014 "),gI=n($Ee,"A",{href:!0});var pQr=s(gI);L8o=r(pQr,"XLMProphetNetForConditionalGeneration"),pQr.forEach(t),B8o=r($Ee," (XLMProphetNet model)"),$Ee.forEach(t),ie.forEach(t),x8o=i(Vt),q1=n(Vt,"P",{});var IEe=s(q1);k8o=r(IEe,"The model is set in evaluation mode by default using "),Qre=n(IEe,"CODE",{});var _Qr=s(Qre);R8o=r(_Qr,"model.eval()"),_Qr.forEach(t),S8o=r(IEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hre=n(IEe,"CODE",{});var uQr=s(Hre);P8o=r(uQr,"model.train()"),uQr.forEach(t),IEe.forEach(t),$8o=i(Vt),Ure=n(Vt,"P",{});var bQr=s(Ure);I8o=r(bQr,"Examples:"),bQr.forEach(t),j8o=i(Vt),m(ny.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),Fxe=i(d),fd=n(d,"H2",{class:!0});var xRe=s(fd);O1=n(xRe,"A",{id:!0,class:!0,href:!0});var vQr=s(O1);Jre=n(vQr,"SPAN",{});var TQr=s(Jre);m(sy.$$.fragment,TQr),TQr.forEach(t),vQr.forEach(t),D8o=i(xRe),Yre=n(xRe,"SPAN",{});var FQr=s(Yre);N8o=r(FQr,"AutoModelForSequenceClassification"),FQr.forEach(t),xRe.forEach(t),Cxe=i(d),or=n(d,"DIV",{class:!0});var rl=s(or);m(ly.$$.fragment,rl),q8o=i(rl),md=n(rl,"P",{});var kz=s(md);O8o=r(kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Kre=n(kz,"CODE",{});var CQr=s(Kre);G8o=r(CQr,"from_pretrained()"),CQr.forEach(t),X8o=r(kz,"class method or the "),Zre=n(kz,"CODE",{});var MQr=s(Zre);V8o=r(MQr,"from_config()"),MQr.forEach(t),z8o=r(kz,`class
method.`),kz.forEach(t),W8o=i(rl),iy=n(rl,"P",{});var kRe=s(iy);Q8o=r(kRe,"This class cannot be instantiated directly using "),ete=n(kRe,"CODE",{});var EQr=s(ete);H8o=r(EQr,"__init__()"),EQr.forEach(t),U8o=r(kRe," (throws an error)."),kRe.forEach(t),J8o=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(dy.$$.fragment,tl),Y8o=i(tl),ote=n(tl,"P",{});var yQr=s(ote);K8o=r(yQr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yQr.forEach(t),Z8o=i(tl),gd=n(tl,"P",{});var Rz=s(gd);eFo=r(Rz,`Note:
Loading a model from its configuration file does `),rte=n(Rz,"STRONG",{});var wQr=s(rte);oFo=r(wQr,"not"),wQr.forEach(t),rFo=r(Rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),tte=n(Rz,"CODE",{});var AQr=s(tte);tFo=r(AQr,"from_pretrained()"),AQr.forEach(t),aFo=r(Rz,"to load the model weights."),Rz.forEach(t),nFo=i(tl),ate=n(tl,"P",{});var LQr=s(ate);sFo=r(LQr,"Examples:"),LQr.forEach(t),lFo=i(tl),m(cy.$$.fragment,tl),tl.forEach(t),iFo=i(rl),Ge=n(rl,"DIV",{class:!0});var zt=s(Ge);m(fy.$$.fragment,zt),dFo=i(zt),nte=n(zt,"P",{});var BQr=s(nte);cFo=r(BQr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),BQr.forEach(t),fFo=i(zt),Ha=n(zt,"P",{});var ZM=s(Ha);mFo=r(ZM,"The model class to instantiate is selected based on the "),ste=n(ZM,"CODE",{});var xQr=s(ste);gFo=r(xQr,"model_type"),xQr.forEach(t),hFo=r(ZM,` property of the config object (either
passed as an argument or loaded from `),lte=n(ZM,"CODE",{});var kQr=s(lte);pFo=r(kQr,"pretrained_model_name_or_path"),kQr.forEach(t),_Fo=r(ZM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ite=n(ZM,"CODE",{});var RQr=s(ite);uFo=r(RQr,"pretrained_model_name_or_path"),RQr.forEach(t),bFo=r(ZM,":"),ZM.forEach(t),vFo=i(zt),A=n(zt,"UL",{});var L=s(A);G1=n(L,"LI",{});var jEe=s(G1);dte=n(jEe,"STRONG",{});var SQr=s(dte);TFo=r(SQr,"albert"),SQr.forEach(t),FFo=r(jEe," \u2014 "),hI=n(jEe,"A",{href:!0});var PQr=s(hI);CFo=r(PQr,"AlbertForSequenceClassification"),PQr.forEach(t),MFo=r(jEe," (ALBERT model)"),jEe.forEach(t),EFo=i(L),X1=n(L,"LI",{});var DEe=s(X1);cte=n(DEe,"STRONG",{});var $Qr=s(cte);yFo=r($Qr,"bart"),$Qr.forEach(t),wFo=r(DEe," \u2014 "),pI=n(DEe,"A",{href:!0});var IQr=s(pI);AFo=r(IQr,"BartForSequenceClassification"),IQr.forEach(t),LFo=r(DEe," (BART model)"),DEe.forEach(t),BFo=i(L),V1=n(L,"LI",{});var NEe=s(V1);fte=n(NEe,"STRONG",{});var jQr=s(fte);xFo=r(jQr,"bert"),jQr.forEach(t),kFo=r(NEe," \u2014 "),_I=n(NEe,"A",{href:!0});var DQr=s(_I);RFo=r(DQr,"BertForSequenceClassification"),DQr.forEach(t),SFo=r(NEe," (BERT model)"),NEe.forEach(t),PFo=i(L),z1=n(L,"LI",{});var qEe=s(z1);mte=n(qEe,"STRONG",{});var NQr=s(mte);$Fo=r(NQr,"big_bird"),NQr.forEach(t),IFo=r(qEe," \u2014 "),uI=n(qEe,"A",{href:!0});var qQr=s(uI);jFo=r(qQr,"BigBirdForSequenceClassification"),qQr.forEach(t),DFo=r(qEe," (BigBird model)"),qEe.forEach(t),NFo=i(L),W1=n(L,"LI",{});var OEe=s(W1);gte=n(OEe,"STRONG",{});var OQr=s(gte);qFo=r(OQr,"bigbird_pegasus"),OQr.forEach(t),OFo=r(OEe," \u2014 "),bI=n(OEe,"A",{href:!0});var GQr=s(bI);GFo=r(GQr,"BigBirdPegasusForSequenceClassification"),GQr.forEach(t),XFo=r(OEe," (BigBirdPegasus model)"),OEe.forEach(t),VFo=i(L),Q1=n(L,"LI",{});var GEe=s(Q1);hte=n(GEe,"STRONG",{});var XQr=s(hte);zFo=r(XQr,"camembert"),XQr.forEach(t),WFo=r(GEe," \u2014 "),vI=n(GEe,"A",{href:!0});var VQr=s(vI);QFo=r(VQr,"CamembertForSequenceClassification"),VQr.forEach(t),HFo=r(GEe," (CamemBERT model)"),GEe.forEach(t),UFo=i(L),H1=n(L,"LI",{});var XEe=s(H1);pte=n(XEe,"STRONG",{});var zQr=s(pte);JFo=r(zQr,"canine"),zQr.forEach(t),YFo=r(XEe," \u2014 "),TI=n(XEe,"A",{href:!0});var WQr=s(TI);KFo=r(WQr,"CanineForSequenceClassification"),WQr.forEach(t),ZFo=r(XEe," (Canine model)"),XEe.forEach(t),eCo=i(L),U1=n(L,"LI",{});var VEe=s(U1);_te=n(VEe,"STRONG",{});var QQr=s(_te);oCo=r(QQr,"convbert"),QQr.forEach(t),rCo=r(VEe," \u2014 "),FI=n(VEe,"A",{href:!0});var HQr=s(FI);tCo=r(HQr,"ConvBertForSequenceClassification"),HQr.forEach(t),aCo=r(VEe," (ConvBERT model)"),VEe.forEach(t),nCo=i(L),J1=n(L,"LI",{});var zEe=s(J1);ute=n(zEe,"STRONG",{});var UQr=s(ute);sCo=r(UQr,"ctrl"),UQr.forEach(t),lCo=r(zEe," \u2014 "),CI=n(zEe,"A",{href:!0});var JQr=s(CI);iCo=r(JQr,"CTRLForSequenceClassification"),JQr.forEach(t),dCo=r(zEe," (CTRL model)"),zEe.forEach(t),cCo=i(L),Y1=n(L,"LI",{});var WEe=s(Y1);bte=n(WEe,"STRONG",{});var YQr=s(bte);fCo=r(YQr,"data2vec-text"),YQr.forEach(t),mCo=r(WEe," \u2014 "),MI=n(WEe,"A",{href:!0});var KQr=s(MI);gCo=r(KQr,"Data2VecTextForSequenceClassification"),KQr.forEach(t),hCo=r(WEe," (Data2VecText model)"),WEe.forEach(t),pCo=i(L),K1=n(L,"LI",{});var QEe=s(K1);vte=n(QEe,"STRONG",{});var ZQr=s(vte);_Co=r(ZQr,"deberta"),ZQr.forEach(t),uCo=r(QEe," \u2014 "),EI=n(QEe,"A",{href:!0});var eHr=s(EI);bCo=r(eHr,"DebertaForSequenceClassification"),eHr.forEach(t),vCo=r(QEe," (DeBERTa model)"),QEe.forEach(t),TCo=i(L),Z1=n(L,"LI",{});var HEe=s(Z1);Tte=n(HEe,"STRONG",{});var oHr=s(Tte);FCo=r(oHr,"deberta-v2"),oHr.forEach(t),CCo=r(HEe," \u2014 "),yI=n(HEe,"A",{href:!0});var rHr=s(yI);MCo=r(rHr,"DebertaV2ForSequenceClassification"),rHr.forEach(t),ECo=r(HEe," (DeBERTa-v2 model)"),HEe.forEach(t),yCo=i(L),eb=n(L,"LI",{});var UEe=s(eb);Fte=n(UEe,"STRONG",{});var tHr=s(Fte);wCo=r(tHr,"distilbert"),tHr.forEach(t),ACo=r(UEe," \u2014 "),wI=n(UEe,"A",{href:!0});var aHr=s(wI);LCo=r(aHr,"DistilBertForSequenceClassification"),aHr.forEach(t),BCo=r(UEe," (DistilBERT model)"),UEe.forEach(t),xCo=i(L),ob=n(L,"LI",{});var JEe=s(ob);Cte=n(JEe,"STRONG",{});var nHr=s(Cte);kCo=r(nHr,"electra"),nHr.forEach(t),RCo=r(JEe," \u2014 "),AI=n(JEe,"A",{href:!0});var sHr=s(AI);SCo=r(sHr,"ElectraForSequenceClassification"),sHr.forEach(t),PCo=r(JEe," (ELECTRA model)"),JEe.forEach(t),$Co=i(L),rb=n(L,"LI",{});var YEe=s(rb);Mte=n(YEe,"STRONG",{});var lHr=s(Mte);ICo=r(lHr,"flaubert"),lHr.forEach(t),jCo=r(YEe," \u2014 "),LI=n(YEe,"A",{href:!0});var iHr=s(LI);DCo=r(iHr,"FlaubertForSequenceClassification"),iHr.forEach(t),NCo=r(YEe," (FlauBERT model)"),YEe.forEach(t),qCo=i(L),tb=n(L,"LI",{});var KEe=s(tb);Ete=n(KEe,"STRONG",{});var dHr=s(Ete);OCo=r(dHr,"fnet"),dHr.forEach(t),GCo=r(KEe," \u2014 "),BI=n(KEe,"A",{href:!0});var cHr=s(BI);XCo=r(cHr,"FNetForSequenceClassification"),cHr.forEach(t),VCo=r(KEe," (FNet model)"),KEe.forEach(t),zCo=i(L),ab=n(L,"LI",{});var ZEe=s(ab);yte=n(ZEe,"STRONG",{});var fHr=s(yte);WCo=r(fHr,"funnel"),fHr.forEach(t),QCo=r(ZEe," \u2014 "),xI=n(ZEe,"A",{href:!0});var mHr=s(xI);HCo=r(mHr,"FunnelForSequenceClassification"),mHr.forEach(t),UCo=r(ZEe," (Funnel Transformer model)"),ZEe.forEach(t),JCo=i(L),nb=n(L,"LI",{});var eye=s(nb);wte=n(eye,"STRONG",{});var gHr=s(wte);YCo=r(gHr,"gpt2"),gHr.forEach(t),KCo=r(eye," \u2014 "),kI=n(eye,"A",{href:!0});var hHr=s(kI);ZCo=r(hHr,"GPT2ForSequenceClassification"),hHr.forEach(t),eMo=r(eye," (OpenAI GPT-2 model)"),eye.forEach(t),oMo=i(L),sb=n(L,"LI",{});var oye=s(sb);Ate=n(oye,"STRONG",{});var pHr=s(Ate);rMo=r(pHr,"gpt_neo"),pHr.forEach(t),tMo=r(oye," \u2014 "),RI=n(oye,"A",{href:!0});var _Hr=s(RI);aMo=r(_Hr,"GPTNeoForSequenceClassification"),_Hr.forEach(t),nMo=r(oye," (GPT Neo model)"),oye.forEach(t),sMo=i(L),lb=n(L,"LI",{});var rye=s(lb);Lte=n(rye,"STRONG",{});var uHr=s(Lte);lMo=r(uHr,"gptj"),uHr.forEach(t),iMo=r(rye," \u2014 "),SI=n(rye,"A",{href:!0});var bHr=s(SI);dMo=r(bHr,"GPTJForSequenceClassification"),bHr.forEach(t),cMo=r(rye," (GPT-J model)"),rye.forEach(t),fMo=i(L),ib=n(L,"LI",{});var tye=s(ib);Bte=n(tye,"STRONG",{});var vHr=s(Bte);mMo=r(vHr,"ibert"),vHr.forEach(t),gMo=r(tye," \u2014 "),PI=n(tye,"A",{href:!0});var THr=s(PI);hMo=r(THr,"IBertForSequenceClassification"),THr.forEach(t),pMo=r(tye," (I-BERT model)"),tye.forEach(t),_Mo=i(L),db=n(L,"LI",{});var aye=s(db);xte=n(aye,"STRONG",{});var FHr=s(xte);uMo=r(FHr,"layoutlm"),FHr.forEach(t),bMo=r(aye," \u2014 "),$I=n(aye,"A",{href:!0});var CHr=s($I);vMo=r(CHr,"LayoutLMForSequenceClassification"),CHr.forEach(t),TMo=r(aye," (LayoutLM model)"),aye.forEach(t),FMo=i(L),cb=n(L,"LI",{});var nye=s(cb);kte=n(nye,"STRONG",{});var MHr=s(kte);CMo=r(MHr,"layoutlmv2"),MHr.forEach(t),MMo=r(nye," \u2014 "),II=n(nye,"A",{href:!0});var EHr=s(II);EMo=r(EHr,"LayoutLMv2ForSequenceClassification"),EHr.forEach(t),yMo=r(nye," (LayoutLMv2 model)"),nye.forEach(t),wMo=i(L),fb=n(L,"LI",{});var sye=s(fb);Rte=n(sye,"STRONG",{});var yHr=s(Rte);AMo=r(yHr,"led"),yHr.forEach(t),LMo=r(sye," \u2014 "),jI=n(sye,"A",{href:!0});var wHr=s(jI);BMo=r(wHr,"LEDForSequenceClassification"),wHr.forEach(t),xMo=r(sye," (LED model)"),sye.forEach(t),kMo=i(L),mb=n(L,"LI",{});var lye=s(mb);Ste=n(lye,"STRONG",{});var AHr=s(Ste);RMo=r(AHr,"longformer"),AHr.forEach(t),SMo=r(lye," \u2014 "),DI=n(lye,"A",{href:!0});var LHr=s(DI);PMo=r(LHr,"LongformerForSequenceClassification"),LHr.forEach(t),$Mo=r(lye," (Longformer model)"),lye.forEach(t),IMo=i(L),gb=n(L,"LI",{});var iye=s(gb);Pte=n(iye,"STRONG",{});var BHr=s(Pte);jMo=r(BHr,"mbart"),BHr.forEach(t),DMo=r(iye," \u2014 "),NI=n(iye,"A",{href:!0});var xHr=s(NI);NMo=r(xHr,"MBartForSequenceClassification"),xHr.forEach(t),qMo=r(iye," (mBART model)"),iye.forEach(t),OMo=i(L),hb=n(L,"LI",{});var dye=s(hb);$te=n(dye,"STRONG",{});var kHr=s($te);GMo=r(kHr,"megatron-bert"),kHr.forEach(t),XMo=r(dye," \u2014 "),qI=n(dye,"A",{href:!0});var RHr=s(qI);VMo=r(RHr,"MegatronBertForSequenceClassification"),RHr.forEach(t),zMo=r(dye," (MegatronBert model)"),dye.forEach(t),WMo=i(L),pb=n(L,"LI",{});var cye=s(pb);Ite=n(cye,"STRONG",{});var SHr=s(Ite);QMo=r(SHr,"mobilebert"),SHr.forEach(t),HMo=r(cye," \u2014 "),OI=n(cye,"A",{href:!0});var PHr=s(OI);UMo=r(PHr,"MobileBertForSequenceClassification"),PHr.forEach(t),JMo=r(cye," (MobileBERT model)"),cye.forEach(t),YMo=i(L),_b=n(L,"LI",{});var fye=s(_b);jte=n(fye,"STRONG",{});var $Hr=s(jte);KMo=r($Hr,"mpnet"),$Hr.forEach(t),ZMo=r(fye," \u2014 "),GI=n(fye,"A",{href:!0});var IHr=s(GI);e4o=r(IHr,"MPNetForSequenceClassification"),IHr.forEach(t),o4o=r(fye," (MPNet model)"),fye.forEach(t),r4o=i(L),ub=n(L,"LI",{});var mye=s(ub);Dte=n(mye,"STRONG",{});var jHr=s(Dte);t4o=r(jHr,"nystromformer"),jHr.forEach(t),a4o=r(mye," \u2014 "),XI=n(mye,"A",{href:!0});var DHr=s(XI);n4o=r(DHr,"NystromformerForSequenceClassification"),DHr.forEach(t),s4o=r(mye," (Nystromformer model)"),mye.forEach(t),l4o=i(L),bb=n(L,"LI",{});var gye=s(bb);Nte=n(gye,"STRONG",{});var NHr=s(Nte);i4o=r(NHr,"openai-gpt"),NHr.forEach(t),d4o=r(gye," \u2014 "),VI=n(gye,"A",{href:!0});var qHr=s(VI);c4o=r(qHr,"OpenAIGPTForSequenceClassification"),qHr.forEach(t),f4o=r(gye," (OpenAI GPT model)"),gye.forEach(t),m4o=i(L),vb=n(L,"LI",{});var hye=s(vb);qte=n(hye,"STRONG",{});var OHr=s(qte);g4o=r(OHr,"perceiver"),OHr.forEach(t),h4o=r(hye," \u2014 "),zI=n(hye,"A",{href:!0});var GHr=s(zI);p4o=r(GHr,"PerceiverForSequenceClassification"),GHr.forEach(t),_4o=r(hye," (Perceiver model)"),hye.forEach(t),u4o=i(L),Tb=n(L,"LI",{});var pye=s(Tb);Ote=n(pye,"STRONG",{});var XHr=s(Ote);b4o=r(XHr,"plbart"),XHr.forEach(t),v4o=r(pye," \u2014 "),WI=n(pye,"A",{href:!0});var VHr=s(WI);T4o=r(VHr,"PLBartForSequenceClassification"),VHr.forEach(t),F4o=r(pye," (PLBart model)"),pye.forEach(t),C4o=i(L),Fb=n(L,"LI",{});var _ye=s(Fb);Gte=n(_ye,"STRONG",{});var zHr=s(Gte);M4o=r(zHr,"qdqbert"),zHr.forEach(t),E4o=r(_ye," \u2014 "),QI=n(_ye,"A",{href:!0});var WHr=s(QI);y4o=r(WHr,"QDQBertForSequenceClassification"),WHr.forEach(t),w4o=r(_ye," (QDQBert model)"),_ye.forEach(t),A4o=i(L),Cb=n(L,"LI",{});var uye=s(Cb);Xte=n(uye,"STRONG",{});var QHr=s(Xte);L4o=r(QHr,"reformer"),QHr.forEach(t),B4o=r(uye," \u2014 "),HI=n(uye,"A",{href:!0});var HHr=s(HI);x4o=r(HHr,"ReformerForSequenceClassification"),HHr.forEach(t),k4o=r(uye," (Reformer model)"),uye.forEach(t),R4o=i(L),Mb=n(L,"LI",{});var bye=s(Mb);Vte=n(bye,"STRONG",{});var UHr=s(Vte);S4o=r(UHr,"rembert"),UHr.forEach(t),P4o=r(bye," \u2014 "),UI=n(bye,"A",{href:!0});var JHr=s(UI);$4o=r(JHr,"RemBertForSequenceClassification"),JHr.forEach(t),I4o=r(bye," (RemBERT model)"),bye.forEach(t),j4o=i(L),Eb=n(L,"LI",{});var vye=s(Eb);zte=n(vye,"STRONG",{});var YHr=s(zte);D4o=r(YHr,"roberta"),YHr.forEach(t),N4o=r(vye," \u2014 "),JI=n(vye,"A",{href:!0});var KHr=s(JI);q4o=r(KHr,"RobertaForSequenceClassification"),KHr.forEach(t),O4o=r(vye," (RoBERTa model)"),vye.forEach(t),G4o=i(L),yb=n(L,"LI",{});var Tye=s(yb);Wte=n(Tye,"STRONG",{});var ZHr=s(Wte);X4o=r(ZHr,"roformer"),ZHr.forEach(t),V4o=r(Tye," \u2014 "),YI=n(Tye,"A",{href:!0});var eUr=s(YI);z4o=r(eUr,"RoFormerForSequenceClassification"),eUr.forEach(t),W4o=r(Tye," (RoFormer model)"),Tye.forEach(t),Q4o=i(L),wb=n(L,"LI",{});var Fye=s(wb);Qte=n(Fye,"STRONG",{});var oUr=s(Qte);H4o=r(oUr,"squeezebert"),oUr.forEach(t),U4o=r(Fye," \u2014 "),KI=n(Fye,"A",{href:!0});var rUr=s(KI);J4o=r(rUr,"SqueezeBertForSequenceClassification"),rUr.forEach(t),Y4o=r(Fye," (SqueezeBERT model)"),Fye.forEach(t),K4o=i(L),Ab=n(L,"LI",{});var Cye=s(Ab);Hte=n(Cye,"STRONG",{});var tUr=s(Hte);Z4o=r(tUr,"tapas"),tUr.forEach(t),eEo=r(Cye," \u2014 "),ZI=n(Cye,"A",{href:!0});var aUr=s(ZI);oEo=r(aUr,"TapasForSequenceClassification"),aUr.forEach(t),rEo=r(Cye," (TAPAS model)"),Cye.forEach(t),tEo=i(L),Lb=n(L,"LI",{});var Mye=s(Lb);Ute=n(Mye,"STRONG",{});var nUr=s(Ute);aEo=r(nUr,"transfo-xl"),nUr.forEach(t),nEo=r(Mye," \u2014 "),ej=n(Mye,"A",{href:!0});var sUr=s(ej);sEo=r(sUr,"TransfoXLForSequenceClassification"),sUr.forEach(t),lEo=r(Mye," (Transformer-XL model)"),Mye.forEach(t),iEo=i(L),Bb=n(L,"LI",{});var Eye=s(Bb);Jte=n(Eye,"STRONG",{});var lUr=s(Jte);dEo=r(lUr,"xlm"),lUr.forEach(t),cEo=r(Eye," \u2014 "),oj=n(Eye,"A",{href:!0});var iUr=s(oj);fEo=r(iUr,"XLMForSequenceClassification"),iUr.forEach(t),mEo=r(Eye," (XLM model)"),Eye.forEach(t),gEo=i(L),xb=n(L,"LI",{});var yye=s(xb);Yte=n(yye,"STRONG",{});var dUr=s(Yte);hEo=r(dUr,"xlm-roberta"),dUr.forEach(t),pEo=r(yye," \u2014 "),rj=n(yye,"A",{href:!0});var cUr=s(rj);_Eo=r(cUr,"XLMRobertaForSequenceClassification"),cUr.forEach(t),uEo=r(yye," (XLM-RoBERTa model)"),yye.forEach(t),bEo=i(L),kb=n(L,"LI",{});var wye=s(kb);Kte=n(wye,"STRONG",{});var fUr=s(Kte);vEo=r(fUr,"xlm-roberta-xl"),fUr.forEach(t),TEo=r(wye," \u2014 "),tj=n(wye,"A",{href:!0});var mUr=s(tj);FEo=r(mUr,"XLMRobertaXLForSequenceClassification"),mUr.forEach(t),CEo=r(wye," (XLM-RoBERTa-XL model)"),wye.forEach(t),MEo=i(L),Rb=n(L,"LI",{});var Aye=s(Rb);Zte=n(Aye,"STRONG",{});var gUr=s(Zte);EEo=r(gUr,"xlnet"),gUr.forEach(t),yEo=r(Aye," \u2014 "),aj=n(Aye,"A",{href:!0});var hUr=s(aj);wEo=r(hUr,"XLNetForSequenceClassification"),hUr.forEach(t),AEo=r(Aye," (XLNet model)"),Aye.forEach(t),LEo=i(L),Sb=n(L,"LI",{});var Lye=s(Sb);eae=n(Lye,"STRONG",{});var pUr=s(eae);BEo=r(pUr,"yoso"),pUr.forEach(t),xEo=r(Lye," \u2014 "),nj=n(Lye,"A",{href:!0});var _Ur=s(nj);kEo=r(_Ur,"YosoForSequenceClassification"),_Ur.forEach(t),REo=r(Lye," (YOSO model)"),Lye.forEach(t),L.forEach(t),SEo=i(zt),Pb=n(zt,"P",{});var Bye=s(Pb);PEo=r(Bye,"The model is set in evaluation mode by default using "),oae=n(Bye,"CODE",{});var uUr=s(oae);$Eo=r(uUr,"model.eval()"),uUr.forEach(t),IEo=r(Bye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rae=n(Bye,"CODE",{});var bUr=s(rae);jEo=r(bUr,"model.train()"),bUr.forEach(t),Bye.forEach(t),DEo=i(zt),tae=n(zt,"P",{});var vUr=s(tae);NEo=r(vUr,"Examples:"),vUr.forEach(t),qEo=i(zt),m(my.$$.fragment,zt),zt.forEach(t),rl.forEach(t),Mxe=i(d),hd=n(d,"H2",{class:!0});var RRe=s(hd);$b=n(RRe,"A",{id:!0,class:!0,href:!0});var TUr=s($b);aae=n(TUr,"SPAN",{});var FUr=s(aae);m(gy.$$.fragment,FUr),FUr.forEach(t),TUr.forEach(t),OEo=i(RRe),nae=n(RRe,"SPAN",{});var CUr=s(nae);GEo=r(CUr,"AutoModelForMultipleChoice"),CUr.forEach(t),RRe.forEach(t),Exe=i(d),rr=n(d,"DIV",{class:!0});var al=s(rr);m(hy.$$.fragment,al),XEo=i(al),pd=n(al,"P",{});var Sz=s(pd);VEo=r(Sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sae=n(Sz,"CODE",{});var MUr=s(sae);zEo=r(MUr,"from_pretrained()"),MUr.forEach(t),WEo=r(Sz,"class method or the "),lae=n(Sz,"CODE",{});var EUr=s(lae);QEo=r(EUr,"from_config()"),EUr.forEach(t),HEo=r(Sz,`class
method.`),Sz.forEach(t),UEo=i(al),py=n(al,"P",{});var SRe=s(py);JEo=r(SRe,"This class cannot be instantiated directly using "),iae=n(SRe,"CODE",{});var yUr=s(iae);YEo=r(yUr,"__init__()"),yUr.forEach(t),KEo=r(SRe," (throws an error)."),SRe.forEach(t),ZEo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(_y.$$.fragment,nl),eyo=i(nl),dae=n(nl,"P",{});var wUr=s(dae);oyo=r(wUr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wUr.forEach(t),ryo=i(nl),_d=n(nl,"P",{});var Pz=s(_d);tyo=r(Pz,`Note:
Loading a model from its configuration file does `),cae=n(Pz,"STRONG",{});var AUr=s(cae);ayo=r(AUr,"not"),AUr.forEach(t),nyo=r(Pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),fae=n(Pz,"CODE",{});var LUr=s(fae);syo=r(LUr,"from_pretrained()"),LUr.forEach(t),lyo=r(Pz,"to load the model weights."),Pz.forEach(t),iyo=i(nl),mae=n(nl,"P",{});var BUr=s(mae);dyo=r(BUr,"Examples:"),BUr.forEach(t),cyo=i(nl),m(uy.$$.fragment,nl),nl.forEach(t),fyo=i(al),Xe=n(al,"DIV",{class:!0});var Wt=s(Xe);m(by.$$.fragment,Wt),myo=i(Wt),gae=n(Wt,"P",{});var xUr=s(gae);gyo=r(xUr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xUr.forEach(t),hyo=i(Wt),Ua=n(Wt,"P",{});var e4=s(Ua);pyo=r(e4,"The model class to instantiate is selected based on the "),hae=n(e4,"CODE",{});var kUr=s(hae);_yo=r(kUr,"model_type"),kUr.forEach(t),uyo=r(e4,` property of the config object (either
passed as an argument or loaded from `),pae=n(e4,"CODE",{});var RUr=s(pae);byo=r(RUr,"pretrained_model_name_or_path"),RUr.forEach(t),vyo=r(e4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ae=n(e4,"CODE",{});var SUr=s(_ae);Tyo=r(SUr,"pretrained_model_name_or_path"),SUr.forEach(t),Fyo=r(e4,":"),e4.forEach(t),Cyo=i(Wt),O=n(Wt,"UL",{});var G=s(O);Ib=n(G,"LI",{});var xye=s(Ib);uae=n(xye,"STRONG",{});var PUr=s(uae);Myo=r(PUr,"albert"),PUr.forEach(t),Eyo=r(xye," \u2014 "),sj=n(xye,"A",{href:!0});var $Ur=s(sj);yyo=r($Ur,"AlbertForMultipleChoice"),$Ur.forEach(t),wyo=r(xye," (ALBERT model)"),xye.forEach(t),Ayo=i(G),jb=n(G,"LI",{});var kye=s(jb);bae=n(kye,"STRONG",{});var IUr=s(bae);Lyo=r(IUr,"bert"),IUr.forEach(t),Byo=r(kye," \u2014 "),lj=n(kye,"A",{href:!0});var jUr=s(lj);xyo=r(jUr,"BertForMultipleChoice"),jUr.forEach(t),kyo=r(kye," (BERT model)"),kye.forEach(t),Ryo=i(G),Db=n(G,"LI",{});var Rye=s(Db);vae=n(Rye,"STRONG",{});var DUr=s(vae);Syo=r(DUr,"big_bird"),DUr.forEach(t),Pyo=r(Rye," \u2014 "),ij=n(Rye,"A",{href:!0});var NUr=s(ij);$yo=r(NUr,"BigBirdForMultipleChoice"),NUr.forEach(t),Iyo=r(Rye," (BigBird model)"),Rye.forEach(t),jyo=i(G),Nb=n(G,"LI",{});var Sye=s(Nb);Tae=n(Sye,"STRONG",{});var qUr=s(Tae);Dyo=r(qUr,"camembert"),qUr.forEach(t),Nyo=r(Sye," \u2014 "),dj=n(Sye,"A",{href:!0});var OUr=s(dj);qyo=r(OUr,"CamembertForMultipleChoice"),OUr.forEach(t),Oyo=r(Sye," (CamemBERT model)"),Sye.forEach(t),Gyo=i(G),qb=n(G,"LI",{});var Pye=s(qb);Fae=n(Pye,"STRONG",{});var GUr=s(Fae);Xyo=r(GUr,"canine"),GUr.forEach(t),Vyo=r(Pye," \u2014 "),cj=n(Pye,"A",{href:!0});var XUr=s(cj);zyo=r(XUr,"CanineForMultipleChoice"),XUr.forEach(t),Wyo=r(Pye," (Canine model)"),Pye.forEach(t),Qyo=i(G),Ob=n(G,"LI",{});var $ye=s(Ob);Cae=n($ye,"STRONG",{});var VUr=s(Cae);Hyo=r(VUr,"convbert"),VUr.forEach(t),Uyo=r($ye," \u2014 "),fj=n($ye,"A",{href:!0});var zUr=s(fj);Jyo=r(zUr,"ConvBertForMultipleChoice"),zUr.forEach(t),Yyo=r($ye," (ConvBERT model)"),$ye.forEach(t),Kyo=i(G),Gb=n(G,"LI",{});var Iye=s(Gb);Mae=n(Iye,"STRONG",{});var WUr=s(Mae);Zyo=r(WUr,"data2vec-text"),WUr.forEach(t),ewo=r(Iye," \u2014 "),mj=n(Iye,"A",{href:!0});var QUr=s(mj);owo=r(QUr,"Data2VecTextForMultipleChoice"),QUr.forEach(t),rwo=r(Iye," (Data2VecText model)"),Iye.forEach(t),two=i(G),Xb=n(G,"LI",{});var jye=s(Xb);Eae=n(jye,"STRONG",{});var HUr=s(Eae);awo=r(HUr,"distilbert"),HUr.forEach(t),nwo=r(jye," \u2014 "),gj=n(jye,"A",{href:!0});var UUr=s(gj);swo=r(UUr,"DistilBertForMultipleChoice"),UUr.forEach(t),lwo=r(jye," (DistilBERT model)"),jye.forEach(t),iwo=i(G),Vb=n(G,"LI",{});var Dye=s(Vb);yae=n(Dye,"STRONG",{});var JUr=s(yae);dwo=r(JUr,"electra"),JUr.forEach(t),cwo=r(Dye," \u2014 "),hj=n(Dye,"A",{href:!0});var YUr=s(hj);fwo=r(YUr,"ElectraForMultipleChoice"),YUr.forEach(t),mwo=r(Dye," (ELECTRA model)"),Dye.forEach(t),gwo=i(G),zb=n(G,"LI",{});var Nye=s(zb);wae=n(Nye,"STRONG",{});var KUr=s(wae);hwo=r(KUr,"flaubert"),KUr.forEach(t),pwo=r(Nye," \u2014 "),pj=n(Nye,"A",{href:!0});var ZUr=s(pj);_wo=r(ZUr,"FlaubertForMultipleChoice"),ZUr.forEach(t),uwo=r(Nye," (FlauBERT model)"),Nye.forEach(t),bwo=i(G),Wb=n(G,"LI",{});var qye=s(Wb);Aae=n(qye,"STRONG",{});var eJr=s(Aae);vwo=r(eJr,"fnet"),eJr.forEach(t),Two=r(qye," \u2014 "),_j=n(qye,"A",{href:!0});var oJr=s(_j);Fwo=r(oJr,"FNetForMultipleChoice"),oJr.forEach(t),Cwo=r(qye," (FNet model)"),qye.forEach(t),Mwo=i(G),Qb=n(G,"LI",{});var Oye=s(Qb);Lae=n(Oye,"STRONG",{});var rJr=s(Lae);Ewo=r(rJr,"funnel"),rJr.forEach(t),ywo=r(Oye," \u2014 "),uj=n(Oye,"A",{href:!0});var tJr=s(uj);wwo=r(tJr,"FunnelForMultipleChoice"),tJr.forEach(t),Awo=r(Oye," (Funnel Transformer model)"),Oye.forEach(t),Lwo=i(G),Hb=n(G,"LI",{});var Gye=s(Hb);Bae=n(Gye,"STRONG",{});var aJr=s(Bae);Bwo=r(aJr,"ibert"),aJr.forEach(t),xwo=r(Gye," \u2014 "),bj=n(Gye,"A",{href:!0});var nJr=s(bj);kwo=r(nJr,"IBertForMultipleChoice"),nJr.forEach(t),Rwo=r(Gye," (I-BERT model)"),Gye.forEach(t),Swo=i(G),Ub=n(G,"LI",{});var Xye=s(Ub);xae=n(Xye,"STRONG",{});var sJr=s(xae);Pwo=r(sJr,"longformer"),sJr.forEach(t),$wo=r(Xye," \u2014 "),vj=n(Xye,"A",{href:!0});var lJr=s(vj);Iwo=r(lJr,"LongformerForMultipleChoice"),lJr.forEach(t),jwo=r(Xye," (Longformer model)"),Xye.forEach(t),Dwo=i(G),Jb=n(G,"LI",{});var Vye=s(Jb);kae=n(Vye,"STRONG",{});var iJr=s(kae);Nwo=r(iJr,"megatron-bert"),iJr.forEach(t),qwo=r(Vye," \u2014 "),Tj=n(Vye,"A",{href:!0});var dJr=s(Tj);Owo=r(dJr,"MegatronBertForMultipleChoice"),dJr.forEach(t),Gwo=r(Vye," (MegatronBert model)"),Vye.forEach(t),Xwo=i(G),Yb=n(G,"LI",{});var zye=s(Yb);Rae=n(zye,"STRONG",{});var cJr=s(Rae);Vwo=r(cJr,"mobilebert"),cJr.forEach(t),zwo=r(zye," \u2014 "),Fj=n(zye,"A",{href:!0});var fJr=s(Fj);Wwo=r(fJr,"MobileBertForMultipleChoice"),fJr.forEach(t),Qwo=r(zye," (MobileBERT model)"),zye.forEach(t),Hwo=i(G),Kb=n(G,"LI",{});var Wye=s(Kb);Sae=n(Wye,"STRONG",{});var mJr=s(Sae);Uwo=r(mJr,"mpnet"),mJr.forEach(t),Jwo=r(Wye," \u2014 "),Cj=n(Wye,"A",{href:!0});var gJr=s(Cj);Ywo=r(gJr,"MPNetForMultipleChoice"),gJr.forEach(t),Kwo=r(Wye," (MPNet model)"),Wye.forEach(t),Zwo=i(G),Zb=n(G,"LI",{});var Qye=s(Zb);Pae=n(Qye,"STRONG",{});var hJr=s(Pae);e6o=r(hJr,"nystromformer"),hJr.forEach(t),o6o=r(Qye," \u2014 "),Mj=n(Qye,"A",{href:!0});var pJr=s(Mj);r6o=r(pJr,"NystromformerForMultipleChoice"),pJr.forEach(t),t6o=r(Qye," (Nystromformer model)"),Qye.forEach(t),a6o=i(G),e3=n(G,"LI",{});var Hye=s(e3);$ae=n(Hye,"STRONG",{});var _Jr=s($ae);n6o=r(_Jr,"qdqbert"),_Jr.forEach(t),s6o=r(Hye," \u2014 "),Ej=n(Hye,"A",{href:!0});var uJr=s(Ej);l6o=r(uJr,"QDQBertForMultipleChoice"),uJr.forEach(t),i6o=r(Hye," (QDQBert model)"),Hye.forEach(t),d6o=i(G),o3=n(G,"LI",{});var Uye=s(o3);Iae=n(Uye,"STRONG",{});var bJr=s(Iae);c6o=r(bJr,"rembert"),bJr.forEach(t),f6o=r(Uye," \u2014 "),yj=n(Uye,"A",{href:!0});var vJr=s(yj);m6o=r(vJr,"RemBertForMultipleChoice"),vJr.forEach(t),g6o=r(Uye," (RemBERT model)"),Uye.forEach(t),h6o=i(G),r3=n(G,"LI",{});var Jye=s(r3);jae=n(Jye,"STRONG",{});var TJr=s(jae);p6o=r(TJr,"roberta"),TJr.forEach(t),_6o=r(Jye," \u2014 "),wj=n(Jye,"A",{href:!0});var FJr=s(wj);u6o=r(FJr,"RobertaForMultipleChoice"),FJr.forEach(t),b6o=r(Jye," (RoBERTa model)"),Jye.forEach(t),v6o=i(G),t3=n(G,"LI",{});var Yye=s(t3);Dae=n(Yye,"STRONG",{});var CJr=s(Dae);T6o=r(CJr,"roformer"),CJr.forEach(t),F6o=r(Yye," \u2014 "),Aj=n(Yye,"A",{href:!0});var MJr=s(Aj);C6o=r(MJr,"RoFormerForMultipleChoice"),MJr.forEach(t),M6o=r(Yye," (RoFormer model)"),Yye.forEach(t),E6o=i(G),a3=n(G,"LI",{});var Kye=s(a3);Nae=n(Kye,"STRONG",{});var EJr=s(Nae);y6o=r(EJr,"squeezebert"),EJr.forEach(t),w6o=r(Kye," \u2014 "),Lj=n(Kye,"A",{href:!0});var yJr=s(Lj);A6o=r(yJr,"SqueezeBertForMultipleChoice"),yJr.forEach(t),L6o=r(Kye," (SqueezeBERT model)"),Kye.forEach(t),B6o=i(G),n3=n(G,"LI",{});var Zye=s(n3);qae=n(Zye,"STRONG",{});var wJr=s(qae);x6o=r(wJr,"xlm"),wJr.forEach(t),k6o=r(Zye," \u2014 "),Bj=n(Zye,"A",{href:!0});var AJr=s(Bj);R6o=r(AJr,"XLMForMultipleChoice"),AJr.forEach(t),S6o=r(Zye," (XLM model)"),Zye.forEach(t),P6o=i(G),s3=n(G,"LI",{});var ewe=s(s3);Oae=n(ewe,"STRONG",{});var LJr=s(Oae);$6o=r(LJr,"xlm-roberta"),LJr.forEach(t),I6o=r(ewe," \u2014 "),xj=n(ewe,"A",{href:!0});var BJr=s(xj);j6o=r(BJr,"XLMRobertaForMultipleChoice"),BJr.forEach(t),D6o=r(ewe," (XLM-RoBERTa model)"),ewe.forEach(t),N6o=i(G),l3=n(G,"LI",{});var owe=s(l3);Gae=n(owe,"STRONG",{});var xJr=s(Gae);q6o=r(xJr,"xlm-roberta-xl"),xJr.forEach(t),O6o=r(owe," \u2014 "),kj=n(owe,"A",{href:!0});var kJr=s(kj);G6o=r(kJr,"XLMRobertaXLForMultipleChoice"),kJr.forEach(t),X6o=r(owe," (XLM-RoBERTa-XL model)"),owe.forEach(t),V6o=i(G),i3=n(G,"LI",{});var rwe=s(i3);Xae=n(rwe,"STRONG",{});var RJr=s(Xae);z6o=r(RJr,"xlnet"),RJr.forEach(t),W6o=r(rwe," \u2014 "),Rj=n(rwe,"A",{href:!0});var SJr=s(Rj);Q6o=r(SJr,"XLNetForMultipleChoice"),SJr.forEach(t),H6o=r(rwe," (XLNet model)"),rwe.forEach(t),U6o=i(G),d3=n(G,"LI",{});var twe=s(d3);Vae=n(twe,"STRONG",{});var PJr=s(Vae);J6o=r(PJr,"yoso"),PJr.forEach(t),Y6o=r(twe," \u2014 "),Sj=n(twe,"A",{href:!0});var $Jr=s(Sj);K6o=r($Jr,"YosoForMultipleChoice"),$Jr.forEach(t),Z6o=r(twe," (YOSO model)"),twe.forEach(t),G.forEach(t),eAo=i(Wt),c3=n(Wt,"P",{});var awe=s(c3);oAo=r(awe,"The model is set in evaluation mode by default using "),zae=n(awe,"CODE",{});var IJr=s(zae);rAo=r(IJr,"model.eval()"),IJr.forEach(t),tAo=r(awe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wae=n(awe,"CODE",{});var jJr=s(Wae);aAo=r(jJr,"model.train()"),jJr.forEach(t),awe.forEach(t),nAo=i(Wt),Qae=n(Wt,"P",{});var DJr=s(Qae);sAo=r(DJr,"Examples:"),DJr.forEach(t),lAo=i(Wt),m(vy.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),yxe=i(d),ud=n(d,"H2",{class:!0});var PRe=s(ud);f3=n(PRe,"A",{id:!0,class:!0,href:!0});var NJr=s(f3);Hae=n(NJr,"SPAN",{});var qJr=s(Hae);m(Ty.$$.fragment,qJr),qJr.forEach(t),NJr.forEach(t),iAo=i(PRe),Uae=n(PRe,"SPAN",{});var OJr=s(Uae);dAo=r(OJr,"AutoModelForNextSentencePrediction"),OJr.forEach(t),PRe.forEach(t),wxe=i(d),tr=n(d,"DIV",{class:!0});var sl=s(tr);m(Fy.$$.fragment,sl),cAo=i(sl),bd=n(sl,"P",{});var $z=s(bd);fAo=r($z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Jae=n($z,"CODE",{});var GJr=s(Jae);mAo=r(GJr,"from_pretrained()"),GJr.forEach(t),gAo=r($z,"class method or the "),Yae=n($z,"CODE",{});var XJr=s(Yae);hAo=r(XJr,"from_config()"),XJr.forEach(t),pAo=r($z,`class
method.`),$z.forEach(t),_Ao=i(sl),Cy=n(sl,"P",{});var $Re=s(Cy);uAo=r($Re,"This class cannot be instantiated directly using "),Kae=n($Re,"CODE",{});var VJr=s(Kae);bAo=r(VJr,"__init__()"),VJr.forEach(t),vAo=r($Re," (throws an error)."),$Re.forEach(t),TAo=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(My.$$.fragment,ll),FAo=i(ll),Zae=n(ll,"P",{});var zJr=s(Zae);CAo=r(zJr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zJr.forEach(t),MAo=i(ll),vd=n(ll,"P",{});var Iz=s(vd);EAo=r(Iz,`Note:
Loading a model from its configuration file does `),ene=n(Iz,"STRONG",{});var WJr=s(ene);yAo=r(WJr,"not"),WJr.forEach(t),wAo=r(Iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),one=n(Iz,"CODE",{});var QJr=s(one);AAo=r(QJr,"from_pretrained()"),QJr.forEach(t),LAo=r(Iz,"to load the model weights."),Iz.forEach(t),BAo=i(ll),rne=n(ll,"P",{});var HJr=s(rne);xAo=r(HJr,"Examples:"),HJr.forEach(t),kAo=i(ll),m(Ey.$$.fragment,ll),ll.forEach(t),RAo=i(sl),Ve=n(sl,"DIV",{class:!0});var Qt=s(Ve);m(yy.$$.fragment,Qt),SAo=i(Qt),tne=n(Qt,"P",{});var UJr=s(tne);PAo=r(UJr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),UJr.forEach(t),$Ao=i(Qt),Ja=n(Qt,"P",{});var o4=s(Ja);IAo=r(o4,"The model class to instantiate is selected based on the "),ane=n(o4,"CODE",{});var JJr=s(ane);jAo=r(JJr,"model_type"),JJr.forEach(t),DAo=r(o4,` property of the config object (either
passed as an argument or loaded from `),nne=n(o4,"CODE",{});var YJr=s(nne);NAo=r(YJr,"pretrained_model_name_or_path"),YJr.forEach(t),qAo=r(o4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sne=n(o4,"CODE",{});var KJr=s(sne);OAo=r(KJr,"pretrained_model_name_or_path"),KJr.forEach(t),GAo=r(o4,":"),o4.forEach(t),XAo=i(Qt),da=n(Qt,"UL",{});var il=s(da);m3=n(il,"LI",{});var nwe=s(m3);lne=n(nwe,"STRONG",{});var ZJr=s(lne);VAo=r(ZJr,"bert"),ZJr.forEach(t),zAo=r(nwe," \u2014 "),Pj=n(nwe,"A",{href:!0});var eYr=s(Pj);WAo=r(eYr,"BertForNextSentencePrediction"),eYr.forEach(t),QAo=r(nwe," (BERT model)"),nwe.forEach(t),HAo=i(il),g3=n(il,"LI",{});var swe=s(g3);ine=n(swe,"STRONG",{});var oYr=s(ine);UAo=r(oYr,"fnet"),oYr.forEach(t),JAo=r(swe," \u2014 "),$j=n(swe,"A",{href:!0});var rYr=s($j);YAo=r(rYr,"FNetForNextSentencePrediction"),rYr.forEach(t),KAo=r(swe," (FNet model)"),swe.forEach(t),ZAo=i(il),h3=n(il,"LI",{});var lwe=s(h3);dne=n(lwe,"STRONG",{});var tYr=s(dne);e0o=r(tYr,"megatron-bert"),tYr.forEach(t),o0o=r(lwe," \u2014 "),Ij=n(lwe,"A",{href:!0});var aYr=s(Ij);r0o=r(aYr,"MegatronBertForNextSentencePrediction"),aYr.forEach(t),t0o=r(lwe," (MegatronBert model)"),lwe.forEach(t),a0o=i(il),p3=n(il,"LI",{});var iwe=s(p3);cne=n(iwe,"STRONG",{});var nYr=s(cne);n0o=r(nYr,"mobilebert"),nYr.forEach(t),s0o=r(iwe," \u2014 "),jj=n(iwe,"A",{href:!0});var sYr=s(jj);l0o=r(sYr,"MobileBertForNextSentencePrediction"),sYr.forEach(t),i0o=r(iwe," (MobileBERT model)"),iwe.forEach(t),d0o=i(il),_3=n(il,"LI",{});var dwe=s(_3);fne=n(dwe,"STRONG",{});var lYr=s(fne);c0o=r(lYr,"qdqbert"),lYr.forEach(t),f0o=r(dwe," \u2014 "),Dj=n(dwe,"A",{href:!0});var iYr=s(Dj);m0o=r(iYr,"QDQBertForNextSentencePrediction"),iYr.forEach(t),g0o=r(dwe," (QDQBert model)"),dwe.forEach(t),il.forEach(t),h0o=i(Qt),u3=n(Qt,"P",{});var cwe=s(u3);p0o=r(cwe,"The model is set in evaluation mode by default using "),mne=n(cwe,"CODE",{});var dYr=s(mne);_0o=r(dYr,"model.eval()"),dYr.forEach(t),u0o=r(cwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gne=n(cwe,"CODE",{});var cYr=s(gne);b0o=r(cYr,"model.train()"),cYr.forEach(t),cwe.forEach(t),v0o=i(Qt),hne=n(Qt,"P",{});var fYr=s(hne);T0o=r(fYr,"Examples:"),fYr.forEach(t),F0o=i(Qt),m(wy.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),Axe=i(d),Td=n(d,"H2",{class:!0});var IRe=s(Td);b3=n(IRe,"A",{id:!0,class:!0,href:!0});var mYr=s(b3);pne=n(mYr,"SPAN",{});var gYr=s(pne);m(Ay.$$.fragment,gYr),gYr.forEach(t),mYr.forEach(t),C0o=i(IRe),_ne=n(IRe,"SPAN",{});var hYr=s(_ne);M0o=r(hYr,"AutoModelForTokenClassification"),hYr.forEach(t),IRe.forEach(t),Lxe=i(d),ar=n(d,"DIV",{class:!0});var dl=s(ar);m(Ly.$$.fragment,dl),E0o=i(dl),Fd=n(dl,"P",{});var jz=s(Fd);y0o=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),une=n(jz,"CODE",{});var pYr=s(une);w0o=r(pYr,"from_pretrained()"),pYr.forEach(t),A0o=r(jz,"class method or the "),bne=n(jz,"CODE",{});var _Yr=s(bne);L0o=r(_Yr,"from_config()"),_Yr.forEach(t),B0o=r(jz,`class
method.`),jz.forEach(t),x0o=i(dl),By=n(dl,"P",{});var jRe=s(By);k0o=r(jRe,"This class cannot be instantiated directly using "),vne=n(jRe,"CODE",{});var uYr=s(vne);R0o=r(uYr,"__init__()"),uYr.forEach(t),S0o=r(jRe," (throws an error)."),jRe.forEach(t),P0o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(xy.$$.fragment,cl),$0o=i(cl),Tne=n(cl,"P",{});var bYr=s(Tne);I0o=r(bYr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bYr.forEach(t),j0o=i(cl),Cd=n(cl,"P",{});var Dz=s(Cd);D0o=r(Dz,`Note:
Loading a model from its configuration file does `),Fne=n(Dz,"STRONG",{});var vYr=s(Fne);N0o=r(vYr,"not"),vYr.forEach(t),q0o=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cne=n(Dz,"CODE",{});var TYr=s(Cne);O0o=r(TYr,"from_pretrained()"),TYr.forEach(t),G0o=r(Dz,"to load the model weights."),Dz.forEach(t),X0o=i(cl),Mne=n(cl,"P",{});var FYr=s(Mne);V0o=r(FYr,"Examples:"),FYr.forEach(t),z0o=i(cl),m(ky.$$.fragment,cl),cl.forEach(t),W0o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(Ry.$$.fragment,Ht),Q0o=i(Ht),Ene=n(Ht,"P",{});var CYr=s(Ene);H0o=r(CYr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CYr.forEach(t),U0o=i(Ht),Ya=n(Ht,"P",{});var r4=s(Ya);J0o=r(r4,"The model class to instantiate is selected based on the "),yne=n(r4,"CODE",{});var MYr=s(yne);Y0o=r(MYr,"model_type"),MYr.forEach(t),K0o=r(r4,` property of the config object (either
passed as an argument or loaded from `),wne=n(r4,"CODE",{});var EYr=s(wne);Z0o=r(EYr,"pretrained_model_name_or_path"),EYr.forEach(t),eLo=r(r4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ane=n(r4,"CODE",{});var yYr=s(Ane);oLo=r(yYr,"pretrained_model_name_or_path"),yYr.forEach(t),rLo=r(r4,":"),r4.forEach(t),tLo=i(Ht),N=n(Ht,"UL",{});var q=s(N);v3=n(q,"LI",{});var fwe=s(v3);Lne=n(fwe,"STRONG",{});var wYr=s(Lne);aLo=r(wYr,"albert"),wYr.forEach(t),nLo=r(fwe," \u2014 "),Nj=n(fwe,"A",{href:!0});var AYr=s(Nj);sLo=r(AYr,"AlbertForTokenClassification"),AYr.forEach(t),lLo=r(fwe," (ALBERT model)"),fwe.forEach(t),iLo=i(q),T3=n(q,"LI",{});var mwe=s(T3);Bne=n(mwe,"STRONG",{});var LYr=s(Bne);dLo=r(LYr,"bert"),LYr.forEach(t),cLo=r(mwe," \u2014 "),qj=n(mwe,"A",{href:!0});var BYr=s(qj);fLo=r(BYr,"BertForTokenClassification"),BYr.forEach(t),mLo=r(mwe," (BERT model)"),mwe.forEach(t),gLo=i(q),F3=n(q,"LI",{});var gwe=s(F3);xne=n(gwe,"STRONG",{});var xYr=s(xne);hLo=r(xYr,"big_bird"),xYr.forEach(t),pLo=r(gwe," \u2014 "),Oj=n(gwe,"A",{href:!0});var kYr=s(Oj);_Lo=r(kYr,"BigBirdForTokenClassification"),kYr.forEach(t),uLo=r(gwe," (BigBird model)"),gwe.forEach(t),bLo=i(q),C3=n(q,"LI",{});var hwe=s(C3);kne=n(hwe,"STRONG",{});var RYr=s(kne);vLo=r(RYr,"camembert"),RYr.forEach(t),TLo=r(hwe," \u2014 "),Gj=n(hwe,"A",{href:!0});var SYr=s(Gj);FLo=r(SYr,"CamembertForTokenClassification"),SYr.forEach(t),CLo=r(hwe," (CamemBERT model)"),hwe.forEach(t),MLo=i(q),M3=n(q,"LI",{});var pwe=s(M3);Rne=n(pwe,"STRONG",{});var PYr=s(Rne);ELo=r(PYr,"canine"),PYr.forEach(t),yLo=r(pwe," \u2014 "),Xj=n(pwe,"A",{href:!0});var $Yr=s(Xj);wLo=r($Yr,"CanineForTokenClassification"),$Yr.forEach(t),ALo=r(pwe," (Canine model)"),pwe.forEach(t),LLo=i(q),E3=n(q,"LI",{});var _we=s(E3);Sne=n(_we,"STRONG",{});var IYr=s(Sne);BLo=r(IYr,"convbert"),IYr.forEach(t),xLo=r(_we," \u2014 "),Vj=n(_we,"A",{href:!0});var jYr=s(Vj);kLo=r(jYr,"ConvBertForTokenClassification"),jYr.forEach(t),RLo=r(_we," (ConvBERT model)"),_we.forEach(t),SLo=i(q),y3=n(q,"LI",{});var uwe=s(y3);Pne=n(uwe,"STRONG",{});var DYr=s(Pne);PLo=r(DYr,"data2vec-text"),DYr.forEach(t),$Lo=r(uwe," \u2014 "),zj=n(uwe,"A",{href:!0});var NYr=s(zj);ILo=r(NYr,"Data2VecTextForTokenClassification"),NYr.forEach(t),jLo=r(uwe," (Data2VecText model)"),uwe.forEach(t),DLo=i(q),w3=n(q,"LI",{});var bwe=s(w3);$ne=n(bwe,"STRONG",{});var qYr=s($ne);NLo=r(qYr,"deberta"),qYr.forEach(t),qLo=r(bwe," \u2014 "),Wj=n(bwe,"A",{href:!0});var OYr=s(Wj);OLo=r(OYr,"DebertaForTokenClassification"),OYr.forEach(t),GLo=r(bwe," (DeBERTa model)"),bwe.forEach(t),XLo=i(q),A3=n(q,"LI",{});var vwe=s(A3);Ine=n(vwe,"STRONG",{});var GYr=s(Ine);VLo=r(GYr,"deberta-v2"),GYr.forEach(t),zLo=r(vwe," \u2014 "),Qj=n(vwe,"A",{href:!0});var XYr=s(Qj);WLo=r(XYr,"DebertaV2ForTokenClassification"),XYr.forEach(t),QLo=r(vwe," (DeBERTa-v2 model)"),vwe.forEach(t),HLo=i(q),L3=n(q,"LI",{});var Twe=s(L3);jne=n(Twe,"STRONG",{});var VYr=s(jne);ULo=r(VYr,"distilbert"),VYr.forEach(t),JLo=r(Twe," \u2014 "),Hj=n(Twe,"A",{href:!0});var zYr=s(Hj);YLo=r(zYr,"DistilBertForTokenClassification"),zYr.forEach(t),KLo=r(Twe," (DistilBERT model)"),Twe.forEach(t),ZLo=i(q),B3=n(q,"LI",{});var Fwe=s(B3);Dne=n(Fwe,"STRONG",{});var WYr=s(Dne);e7o=r(WYr,"electra"),WYr.forEach(t),o7o=r(Fwe," \u2014 "),Uj=n(Fwe,"A",{href:!0});var QYr=s(Uj);r7o=r(QYr,"ElectraForTokenClassification"),QYr.forEach(t),t7o=r(Fwe," (ELECTRA model)"),Fwe.forEach(t),a7o=i(q),x3=n(q,"LI",{});var Cwe=s(x3);Nne=n(Cwe,"STRONG",{});var HYr=s(Nne);n7o=r(HYr,"flaubert"),HYr.forEach(t),s7o=r(Cwe," \u2014 "),Jj=n(Cwe,"A",{href:!0});var UYr=s(Jj);l7o=r(UYr,"FlaubertForTokenClassification"),UYr.forEach(t),i7o=r(Cwe," (FlauBERT model)"),Cwe.forEach(t),d7o=i(q),k3=n(q,"LI",{});var Mwe=s(k3);qne=n(Mwe,"STRONG",{});var JYr=s(qne);c7o=r(JYr,"fnet"),JYr.forEach(t),f7o=r(Mwe," \u2014 "),Yj=n(Mwe,"A",{href:!0});var YYr=s(Yj);m7o=r(YYr,"FNetForTokenClassification"),YYr.forEach(t),g7o=r(Mwe," (FNet model)"),Mwe.forEach(t),h7o=i(q),R3=n(q,"LI",{});var Ewe=s(R3);One=n(Ewe,"STRONG",{});var KYr=s(One);p7o=r(KYr,"funnel"),KYr.forEach(t),_7o=r(Ewe," \u2014 "),Kj=n(Ewe,"A",{href:!0});var ZYr=s(Kj);u7o=r(ZYr,"FunnelForTokenClassification"),ZYr.forEach(t),b7o=r(Ewe," (Funnel Transformer model)"),Ewe.forEach(t),v7o=i(q),S3=n(q,"LI",{});var ywe=s(S3);Gne=n(ywe,"STRONG",{});var eKr=s(Gne);T7o=r(eKr,"gpt2"),eKr.forEach(t),F7o=r(ywe," \u2014 "),Zj=n(ywe,"A",{href:!0});var oKr=s(Zj);C7o=r(oKr,"GPT2ForTokenClassification"),oKr.forEach(t),M7o=r(ywe," (OpenAI GPT-2 model)"),ywe.forEach(t),E7o=i(q),P3=n(q,"LI",{});var wwe=s(P3);Xne=n(wwe,"STRONG",{});var rKr=s(Xne);y7o=r(rKr,"ibert"),rKr.forEach(t),w7o=r(wwe," \u2014 "),eD=n(wwe,"A",{href:!0});var tKr=s(eD);A7o=r(tKr,"IBertForTokenClassification"),tKr.forEach(t),L7o=r(wwe," (I-BERT model)"),wwe.forEach(t),B7o=i(q),$3=n(q,"LI",{});var Awe=s($3);Vne=n(Awe,"STRONG",{});var aKr=s(Vne);x7o=r(aKr,"layoutlm"),aKr.forEach(t),k7o=r(Awe," \u2014 "),oD=n(Awe,"A",{href:!0});var nKr=s(oD);R7o=r(nKr,"LayoutLMForTokenClassification"),nKr.forEach(t),S7o=r(Awe," (LayoutLM model)"),Awe.forEach(t),P7o=i(q),I3=n(q,"LI",{});var Lwe=s(I3);zne=n(Lwe,"STRONG",{});var sKr=s(zne);$7o=r(sKr,"layoutlmv2"),sKr.forEach(t),I7o=r(Lwe," \u2014 "),rD=n(Lwe,"A",{href:!0});var lKr=s(rD);j7o=r(lKr,"LayoutLMv2ForTokenClassification"),lKr.forEach(t),D7o=r(Lwe," (LayoutLMv2 model)"),Lwe.forEach(t),N7o=i(q),j3=n(q,"LI",{});var Bwe=s(j3);Wne=n(Bwe,"STRONG",{});var iKr=s(Wne);q7o=r(iKr,"longformer"),iKr.forEach(t),O7o=r(Bwe," \u2014 "),tD=n(Bwe,"A",{href:!0});var dKr=s(tD);G7o=r(dKr,"LongformerForTokenClassification"),dKr.forEach(t),X7o=r(Bwe," (Longformer model)"),Bwe.forEach(t),V7o=i(q),D3=n(q,"LI",{});var xwe=s(D3);Qne=n(xwe,"STRONG",{});var cKr=s(Qne);z7o=r(cKr,"megatron-bert"),cKr.forEach(t),W7o=r(xwe," \u2014 "),aD=n(xwe,"A",{href:!0});var fKr=s(aD);Q7o=r(fKr,"MegatronBertForTokenClassification"),fKr.forEach(t),H7o=r(xwe," (MegatronBert model)"),xwe.forEach(t),U7o=i(q),N3=n(q,"LI",{});var kwe=s(N3);Hne=n(kwe,"STRONG",{});var mKr=s(Hne);J7o=r(mKr,"mobilebert"),mKr.forEach(t),Y7o=r(kwe," \u2014 "),nD=n(kwe,"A",{href:!0});var gKr=s(nD);K7o=r(gKr,"MobileBertForTokenClassification"),gKr.forEach(t),Z7o=r(kwe," (MobileBERT model)"),kwe.forEach(t),e9o=i(q),q3=n(q,"LI",{});var Rwe=s(q3);Une=n(Rwe,"STRONG",{});var hKr=s(Une);o9o=r(hKr,"mpnet"),hKr.forEach(t),r9o=r(Rwe," \u2014 "),sD=n(Rwe,"A",{href:!0});var pKr=s(sD);t9o=r(pKr,"MPNetForTokenClassification"),pKr.forEach(t),a9o=r(Rwe," (MPNet model)"),Rwe.forEach(t),n9o=i(q),O3=n(q,"LI",{});var Swe=s(O3);Jne=n(Swe,"STRONG",{});var _Kr=s(Jne);s9o=r(_Kr,"nystromformer"),_Kr.forEach(t),l9o=r(Swe," \u2014 "),lD=n(Swe,"A",{href:!0});var uKr=s(lD);i9o=r(uKr,"NystromformerForTokenClassification"),uKr.forEach(t),d9o=r(Swe," (Nystromformer model)"),Swe.forEach(t),c9o=i(q),G3=n(q,"LI",{});var Pwe=s(G3);Yne=n(Pwe,"STRONG",{});var bKr=s(Yne);f9o=r(bKr,"qdqbert"),bKr.forEach(t),m9o=r(Pwe," \u2014 "),iD=n(Pwe,"A",{href:!0});var vKr=s(iD);g9o=r(vKr,"QDQBertForTokenClassification"),vKr.forEach(t),h9o=r(Pwe," (QDQBert model)"),Pwe.forEach(t),p9o=i(q),X3=n(q,"LI",{});var $we=s(X3);Kne=n($we,"STRONG",{});var TKr=s(Kne);_9o=r(TKr,"rembert"),TKr.forEach(t),u9o=r($we," \u2014 "),dD=n($we,"A",{href:!0});var FKr=s(dD);b9o=r(FKr,"RemBertForTokenClassification"),FKr.forEach(t),v9o=r($we," (RemBERT model)"),$we.forEach(t),T9o=i(q),V3=n(q,"LI",{});var Iwe=s(V3);Zne=n(Iwe,"STRONG",{});var CKr=s(Zne);F9o=r(CKr,"roberta"),CKr.forEach(t),C9o=r(Iwe," \u2014 "),cD=n(Iwe,"A",{href:!0});var MKr=s(cD);M9o=r(MKr,"RobertaForTokenClassification"),MKr.forEach(t),E9o=r(Iwe," (RoBERTa model)"),Iwe.forEach(t),y9o=i(q),z3=n(q,"LI",{});var jwe=s(z3);ese=n(jwe,"STRONG",{});var EKr=s(ese);w9o=r(EKr,"roformer"),EKr.forEach(t),A9o=r(jwe," \u2014 "),fD=n(jwe,"A",{href:!0});var yKr=s(fD);L9o=r(yKr,"RoFormerForTokenClassification"),yKr.forEach(t),B9o=r(jwe," (RoFormer model)"),jwe.forEach(t),x9o=i(q),W3=n(q,"LI",{});var Dwe=s(W3);ose=n(Dwe,"STRONG",{});var wKr=s(ose);k9o=r(wKr,"squeezebert"),wKr.forEach(t),R9o=r(Dwe," \u2014 "),mD=n(Dwe,"A",{href:!0});var AKr=s(mD);S9o=r(AKr,"SqueezeBertForTokenClassification"),AKr.forEach(t),P9o=r(Dwe," (SqueezeBERT model)"),Dwe.forEach(t),$9o=i(q),Q3=n(q,"LI",{});var Nwe=s(Q3);rse=n(Nwe,"STRONG",{});var LKr=s(rse);I9o=r(LKr,"xlm"),LKr.forEach(t),j9o=r(Nwe," \u2014 "),gD=n(Nwe,"A",{href:!0});var BKr=s(gD);D9o=r(BKr,"XLMForTokenClassification"),BKr.forEach(t),N9o=r(Nwe," (XLM model)"),Nwe.forEach(t),q9o=i(q),H3=n(q,"LI",{});var qwe=s(H3);tse=n(qwe,"STRONG",{});var xKr=s(tse);O9o=r(xKr,"xlm-roberta"),xKr.forEach(t),G9o=r(qwe," \u2014 "),hD=n(qwe,"A",{href:!0});var kKr=s(hD);X9o=r(kKr,"XLMRobertaForTokenClassification"),kKr.forEach(t),V9o=r(qwe," (XLM-RoBERTa model)"),qwe.forEach(t),z9o=i(q),U3=n(q,"LI",{});var Owe=s(U3);ase=n(Owe,"STRONG",{});var RKr=s(ase);W9o=r(RKr,"xlm-roberta-xl"),RKr.forEach(t),Q9o=r(Owe," \u2014 "),pD=n(Owe,"A",{href:!0});var SKr=s(pD);H9o=r(SKr,"XLMRobertaXLForTokenClassification"),SKr.forEach(t),U9o=r(Owe," (XLM-RoBERTa-XL model)"),Owe.forEach(t),J9o=i(q),J3=n(q,"LI",{});var Gwe=s(J3);nse=n(Gwe,"STRONG",{});var PKr=s(nse);Y9o=r(PKr,"xlnet"),PKr.forEach(t),K9o=r(Gwe," \u2014 "),_D=n(Gwe,"A",{href:!0});var $Kr=s(_D);Z9o=r($Kr,"XLNetForTokenClassification"),$Kr.forEach(t),eBo=r(Gwe," (XLNet model)"),Gwe.forEach(t),oBo=i(q),Y3=n(q,"LI",{});var Xwe=s(Y3);sse=n(Xwe,"STRONG",{});var IKr=s(sse);rBo=r(IKr,"yoso"),IKr.forEach(t),tBo=r(Xwe," \u2014 "),uD=n(Xwe,"A",{href:!0});var jKr=s(uD);aBo=r(jKr,"YosoForTokenClassification"),jKr.forEach(t),nBo=r(Xwe," (YOSO model)"),Xwe.forEach(t),q.forEach(t),sBo=i(Ht),K3=n(Ht,"P",{});var Vwe=s(K3);lBo=r(Vwe,"The model is set in evaluation mode by default using "),lse=n(Vwe,"CODE",{});var DKr=s(lse);iBo=r(DKr,"model.eval()"),DKr.forEach(t),dBo=r(Vwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ise=n(Vwe,"CODE",{});var NKr=s(ise);cBo=r(NKr,"model.train()"),NKr.forEach(t),Vwe.forEach(t),fBo=i(Ht),dse=n(Ht,"P",{});var qKr=s(dse);mBo=r(qKr,"Examples:"),qKr.forEach(t),gBo=i(Ht),m(Sy.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),Bxe=i(d),Md=n(d,"H2",{class:!0});var DRe=s(Md);Z3=n(DRe,"A",{id:!0,class:!0,href:!0});var OKr=s(Z3);cse=n(OKr,"SPAN",{});var GKr=s(cse);m(Py.$$.fragment,GKr),GKr.forEach(t),OKr.forEach(t),hBo=i(DRe),fse=n(DRe,"SPAN",{});var XKr=s(fse);pBo=r(XKr,"AutoModelForQuestionAnswering"),XKr.forEach(t),DRe.forEach(t),xxe=i(d),nr=n(d,"DIV",{class:!0});var fl=s(nr);m($y.$$.fragment,fl),_Bo=i(fl),Ed=n(fl,"P",{});var Nz=s(Ed);uBo=r(Nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mse=n(Nz,"CODE",{});var VKr=s(mse);bBo=r(VKr,"from_pretrained()"),VKr.forEach(t),vBo=r(Nz,"class method or the "),gse=n(Nz,"CODE",{});var zKr=s(gse);TBo=r(zKr,"from_config()"),zKr.forEach(t),FBo=r(Nz,`class
method.`),Nz.forEach(t),CBo=i(fl),Iy=n(fl,"P",{});var NRe=s(Iy);MBo=r(NRe,"This class cannot be instantiated directly using "),hse=n(NRe,"CODE",{});var WKr=s(hse);EBo=r(WKr,"__init__()"),WKr.forEach(t),yBo=r(NRe," (throws an error)."),NRe.forEach(t),wBo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(jy.$$.fragment,ml),ABo=i(ml),pse=n(ml,"P",{});var QKr=s(pse);LBo=r(QKr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),QKr.forEach(t),BBo=i(ml),yd=n(ml,"P",{});var qz=s(yd);xBo=r(qz,`Note:
Loading a model from its configuration file does `),_se=n(qz,"STRONG",{});var HKr=s(_se);kBo=r(HKr,"not"),HKr.forEach(t),RBo=r(qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),use=n(qz,"CODE",{});var UKr=s(use);SBo=r(UKr,"from_pretrained()"),UKr.forEach(t),PBo=r(qz,"to load the model weights."),qz.forEach(t),$Bo=i(ml),bse=n(ml,"P",{});var JKr=s(bse);IBo=r(JKr,"Examples:"),JKr.forEach(t),jBo=i(ml),m(Dy.$$.fragment,ml),ml.forEach(t),DBo=i(fl),We=n(fl,"DIV",{class:!0});var Ut=s(We);m(Ny.$$.fragment,Ut),NBo=i(Ut),vse=n(Ut,"P",{});var YKr=s(vse);qBo=r(YKr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),YKr.forEach(t),OBo=i(Ut),Ka=n(Ut,"P",{});var t4=s(Ka);GBo=r(t4,"The model class to instantiate is selected based on the "),Tse=n(t4,"CODE",{});var KKr=s(Tse);XBo=r(KKr,"model_type"),KKr.forEach(t),VBo=r(t4,` property of the config object (either
passed as an argument or loaded from `),Fse=n(t4,"CODE",{});var ZKr=s(Fse);zBo=r(ZKr,"pretrained_model_name_or_path"),ZKr.forEach(t),WBo=r(t4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cse=n(t4,"CODE",{});var eZr=s(Cse);QBo=r(eZr,"pretrained_model_name_or_path"),eZr.forEach(t),HBo=r(t4,":"),t4.forEach(t),UBo=i(Ut),R=n(Ut,"UL",{});var P=s(R);e5=n(P,"LI",{});var zwe=s(e5);Mse=n(zwe,"STRONG",{});var oZr=s(Mse);JBo=r(oZr,"albert"),oZr.forEach(t),YBo=r(zwe," \u2014 "),bD=n(zwe,"A",{href:!0});var rZr=s(bD);KBo=r(rZr,"AlbertForQuestionAnswering"),rZr.forEach(t),ZBo=r(zwe," (ALBERT model)"),zwe.forEach(t),exo=i(P),o5=n(P,"LI",{});var Wwe=s(o5);Ese=n(Wwe,"STRONG",{});var tZr=s(Ese);oxo=r(tZr,"bart"),tZr.forEach(t),rxo=r(Wwe," \u2014 "),vD=n(Wwe,"A",{href:!0});var aZr=s(vD);txo=r(aZr,"BartForQuestionAnswering"),aZr.forEach(t),axo=r(Wwe," (BART model)"),Wwe.forEach(t),nxo=i(P),r5=n(P,"LI",{});var Qwe=s(r5);yse=n(Qwe,"STRONG",{});var nZr=s(yse);sxo=r(nZr,"bert"),nZr.forEach(t),lxo=r(Qwe," \u2014 "),TD=n(Qwe,"A",{href:!0});var sZr=s(TD);ixo=r(sZr,"BertForQuestionAnswering"),sZr.forEach(t),dxo=r(Qwe," (BERT model)"),Qwe.forEach(t),cxo=i(P),t5=n(P,"LI",{});var Hwe=s(t5);wse=n(Hwe,"STRONG",{});var lZr=s(wse);fxo=r(lZr,"big_bird"),lZr.forEach(t),mxo=r(Hwe," \u2014 "),FD=n(Hwe,"A",{href:!0});var iZr=s(FD);gxo=r(iZr,"BigBirdForQuestionAnswering"),iZr.forEach(t),hxo=r(Hwe," (BigBird model)"),Hwe.forEach(t),pxo=i(P),a5=n(P,"LI",{});var Uwe=s(a5);Ase=n(Uwe,"STRONG",{});var dZr=s(Ase);_xo=r(dZr,"bigbird_pegasus"),dZr.forEach(t),uxo=r(Uwe," \u2014 "),CD=n(Uwe,"A",{href:!0});var cZr=s(CD);bxo=r(cZr,"BigBirdPegasusForQuestionAnswering"),cZr.forEach(t),vxo=r(Uwe," (BigBirdPegasus model)"),Uwe.forEach(t),Txo=i(P),n5=n(P,"LI",{});var Jwe=s(n5);Lse=n(Jwe,"STRONG",{});var fZr=s(Lse);Fxo=r(fZr,"camembert"),fZr.forEach(t),Cxo=r(Jwe," \u2014 "),MD=n(Jwe,"A",{href:!0});var mZr=s(MD);Mxo=r(mZr,"CamembertForQuestionAnswering"),mZr.forEach(t),Exo=r(Jwe," (CamemBERT model)"),Jwe.forEach(t),yxo=i(P),s5=n(P,"LI",{});var Ywe=s(s5);Bse=n(Ywe,"STRONG",{});var gZr=s(Bse);wxo=r(gZr,"canine"),gZr.forEach(t),Axo=r(Ywe," \u2014 "),ED=n(Ywe,"A",{href:!0});var hZr=s(ED);Lxo=r(hZr,"CanineForQuestionAnswering"),hZr.forEach(t),Bxo=r(Ywe," (Canine model)"),Ywe.forEach(t),xxo=i(P),l5=n(P,"LI",{});var Kwe=s(l5);xse=n(Kwe,"STRONG",{});var pZr=s(xse);kxo=r(pZr,"convbert"),pZr.forEach(t),Rxo=r(Kwe," \u2014 "),yD=n(Kwe,"A",{href:!0});var _Zr=s(yD);Sxo=r(_Zr,"ConvBertForQuestionAnswering"),_Zr.forEach(t),Pxo=r(Kwe," (ConvBERT model)"),Kwe.forEach(t),$xo=i(P),i5=n(P,"LI",{});var Zwe=s(i5);kse=n(Zwe,"STRONG",{});var uZr=s(kse);Ixo=r(uZr,"data2vec-text"),uZr.forEach(t),jxo=r(Zwe," \u2014 "),wD=n(Zwe,"A",{href:!0});var bZr=s(wD);Dxo=r(bZr,"Data2VecTextForQuestionAnswering"),bZr.forEach(t),Nxo=r(Zwe," (Data2VecText model)"),Zwe.forEach(t),qxo=i(P),d5=n(P,"LI",{});var e6e=s(d5);Rse=n(e6e,"STRONG",{});var vZr=s(Rse);Oxo=r(vZr,"deberta"),vZr.forEach(t),Gxo=r(e6e," \u2014 "),AD=n(e6e,"A",{href:!0});var TZr=s(AD);Xxo=r(TZr,"DebertaForQuestionAnswering"),TZr.forEach(t),Vxo=r(e6e," (DeBERTa model)"),e6e.forEach(t),zxo=i(P),c5=n(P,"LI",{});var o6e=s(c5);Sse=n(o6e,"STRONG",{});var FZr=s(Sse);Wxo=r(FZr,"deberta-v2"),FZr.forEach(t),Qxo=r(o6e," \u2014 "),LD=n(o6e,"A",{href:!0});var CZr=s(LD);Hxo=r(CZr,"DebertaV2ForQuestionAnswering"),CZr.forEach(t),Uxo=r(o6e," (DeBERTa-v2 model)"),o6e.forEach(t),Jxo=i(P),f5=n(P,"LI",{});var r6e=s(f5);Pse=n(r6e,"STRONG",{});var MZr=s(Pse);Yxo=r(MZr,"distilbert"),MZr.forEach(t),Kxo=r(r6e," \u2014 "),BD=n(r6e,"A",{href:!0});var EZr=s(BD);Zxo=r(EZr,"DistilBertForQuestionAnswering"),EZr.forEach(t),eko=r(r6e," (DistilBERT model)"),r6e.forEach(t),oko=i(P),m5=n(P,"LI",{});var t6e=s(m5);$se=n(t6e,"STRONG",{});var yZr=s($se);rko=r(yZr,"electra"),yZr.forEach(t),tko=r(t6e," \u2014 "),xD=n(t6e,"A",{href:!0});var wZr=s(xD);ako=r(wZr,"ElectraForQuestionAnswering"),wZr.forEach(t),nko=r(t6e," (ELECTRA model)"),t6e.forEach(t),sko=i(P),g5=n(P,"LI",{});var a6e=s(g5);Ise=n(a6e,"STRONG",{});var AZr=s(Ise);lko=r(AZr,"flaubert"),AZr.forEach(t),iko=r(a6e," \u2014 "),kD=n(a6e,"A",{href:!0});var LZr=s(kD);dko=r(LZr,"FlaubertForQuestionAnsweringSimple"),LZr.forEach(t),cko=r(a6e," (FlauBERT model)"),a6e.forEach(t),fko=i(P),h5=n(P,"LI",{});var n6e=s(h5);jse=n(n6e,"STRONG",{});var BZr=s(jse);mko=r(BZr,"fnet"),BZr.forEach(t),gko=r(n6e," \u2014 "),RD=n(n6e,"A",{href:!0});var xZr=s(RD);hko=r(xZr,"FNetForQuestionAnswering"),xZr.forEach(t),pko=r(n6e," (FNet model)"),n6e.forEach(t),_ko=i(P),p5=n(P,"LI",{});var s6e=s(p5);Dse=n(s6e,"STRONG",{});var kZr=s(Dse);uko=r(kZr,"funnel"),kZr.forEach(t),bko=r(s6e," \u2014 "),SD=n(s6e,"A",{href:!0});var RZr=s(SD);vko=r(RZr,"FunnelForQuestionAnswering"),RZr.forEach(t),Tko=r(s6e," (Funnel Transformer model)"),s6e.forEach(t),Fko=i(P),_5=n(P,"LI",{});var l6e=s(_5);Nse=n(l6e,"STRONG",{});var SZr=s(Nse);Cko=r(SZr,"gptj"),SZr.forEach(t),Mko=r(l6e," \u2014 "),PD=n(l6e,"A",{href:!0});var PZr=s(PD);Eko=r(PZr,"GPTJForQuestionAnswering"),PZr.forEach(t),yko=r(l6e," (GPT-J model)"),l6e.forEach(t),wko=i(P),u5=n(P,"LI",{});var i6e=s(u5);qse=n(i6e,"STRONG",{});var $Zr=s(qse);Ako=r($Zr,"ibert"),$Zr.forEach(t),Lko=r(i6e," \u2014 "),$D=n(i6e,"A",{href:!0});var IZr=s($D);Bko=r(IZr,"IBertForQuestionAnswering"),IZr.forEach(t),xko=r(i6e," (I-BERT model)"),i6e.forEach(t),kko=i(P),b5=n(P,"LI",{});var d6e=s(b5);Ose=n(d6e,"STRONG",{});var jZr=s(Ose);Rko=r(jZr,"layoutlmv2"),jZr.forEach(t),Sko=r(d6e," \u2014 "),ID=n(d6e,"A",{href:!0});var DZr=s(ID);Pko=r(DZr,"LayoutLMv2ForQuestionAnswering"),DZr.forEach(t),$ko=r(d6e," (LayoutLMv2 model)"),d6e.forEach(t),Iko=i(P),v5=n(P,"LI",{});var c6e=s(v5);Gse=n(c6e,"STRONG",{});var NZr=s(Gse);jko=r(NZr,"led"),NZr.forEach(t),Dko=r(c6e," \u2014 "),jD=n(c6e,"A",{href:!0});var qZr=s(jD);Nko=r(qZr,"LEDForQuestionAnswering"),qZr.forEach(t),qko=r(c6e," (LED model)"),c6e.forEach(t),Oko=i(P),T5=n(P,"LI",{});var f6e=s(T5);Xse=n(f6e,"STRONG",{});var OZr=s(Xse);Gko=r(OZr,"longformer"),OZr.forEach(t),Xko=r(f6e," \u2014 "),DD=n(f6e,"A",{href:!0});var GZr=s(DD);Vko=r(GZr,"LongformerForQuestionAnswering"),GZr.forEach(t),zko=r(f6e," (Longformer model)"),f6e.forEach(t),Wko=i(P),F5=n(P,"LI",{});var m6e=s(F5);Vse=n(m6e,"STRONG",{});var XZr=s(Vse);Qko=r(XZr,"lxmert"),XZr.forEach(t),Hko=r(m6e," \u2014 "),ND=n(m6e,"A",{href:!0});var VZr=s(ND);Uko=r(VZr,"LxmertForQuestionAnswering"),VZr.forEach(t),Jko=r(m6e," (LXMERT model)"),m6e.forEach(t),Yko=i(P),C5=n(P,"LI",{});var g6e=s(C5);zse=n(g6e,"STRONG",{});var zZr=s(zse);Kko=r(zZr,"mbart"),zZr.forEach(t),Zko=r(g6e," \u2014 "),qD=n(g6e,"A",{href:!0});var WZr=s(qD);eRo=r(WZr,"MBartForQuestionAnswering"),WZr.forEach(t),oRo=r(g6e," (mBART model)"),g6e.forEach(t),rRo=i(P),M5=n(P,"LI",{});var h6e=s(M5);Wse=n(h6e,"STRONG",{});var QZr=s(Wse);tRo=r(QZr,"megatron-bert"),QZr.forEach(t),aRo=r(h6e," \u2014 "),OD=n(h6e,"A",{href:!0});var HZr=s(OD);nRo=r(HZr,"MegatronBertForQuestionAnswering"),HZr.forEach(t),sRo=r(h6e," (MegatronBert model)"),h6e.forEach(t),lRo=i(P),E5=n(P,"LI",{});var p6e=s(E5);Qse=n(p6e,"STRONG",{});var UZr=s(Qse);iRo=r(UZr,"mobilebert"),UZr.forEach(t),dRo=r(p6e," \u2014 "),GD=n(p6e,"A",{href:!0});var JZr=s(GD);cRo=r(JZr,"MobileBertForQuestionAnswering"),JZr.forEach(t),fRo=r(p6e," (MobileBERT model)"),p6e.forEach(t),mRo=i(P),y5=n(P,"LI",{});var _6e=s(y5);Hse=n(_6e,"STRONG",{});var YZr=s(Hse);gRo=r(YZr,"mpnet"),YZr.forEach(t),hRo=r(_6e," \u2014 "),XD=n(_6e,"A",{href:!0});var KZr=s(XD);pRo=r(KZr,"MPNetForQuestionAnswering"),KZr.forEach(t),_Ro=r(_6e," (MPNet model)"),_6e.forEach(t),uRo=i(P),w5=n(P,"LI",{});var u6e=s(w5);Use=n(u6e,"STRONG",{});var ZZr=s(Use);bRo=r(ZZr,"nystromformer"),ZZr.forEach(t),vRo=r(u6e," \u2014 "),VD=n(u6e,"A",{href:!0});var eet=s(VD);TRo=r(eet,"NystromformerForQuestionAnswering"),eet.forEach(t),FRo=r(u6e," (Nystromformer model)"),u6e.forEach(t),CRo=i(P),A5=n(P,"LI",{});var b6e=s(A5);Jse=n(b6e,"STRONG",{});var oet=s(Jse);MRo=r(oet,"qdqbert"),oet.forEach(t),ERo=r(b6e," \u2014 "),zD=n(b6e,"A",{href:!0});var ret=s(zD);yRo=r(ret,"QDQBertForQuestionAnswering"),ret.forEach(t),wRo=r(b6e," (QDQBert model)"),b6e.forEach(t),ARo=i(P),L5=n(P,"LI",{});var v6e=s(L5);Yse=n(v6e,"STRONG",{});var tet=s(Yse);LRo=r(tet,"reformer"),tet.forEach(t),BRo=r(v6e," \u2014 "),WD=n(v6e,"A",{href:!0});var aet=s(WD);xRo=r(aet,"ReformerForQuestionAnswering"),aet.forEach(t),kRo=r(v6e," (Reformer model)"),v6e.forEach(t),RRo=i(P),B5=n(P,"LI",{});var T6e=s(B5);Kse=n(T6e,"STRONG",{});var net=s(Kse);SRo=r(net,"rembert"),net.forEach(t),PRo=r(T6e," \u2014 "),QD=n(T6e,"A",{href:!0});var set=s(QD);$Ro=r(set,"RemBertForQuestionAnswering"),set.forEach(t),IRo=r(T6e," (RemBERT model)"),T6e.forEach(t),jRo=i(P),x5=n(P,"LI",{});var F6e=s(x5);Zse=n(F6e,"STRONG",{});var iet=s(Zse);DRo=r(iet,"roberta"),iet.forEach(t),NRo=r(F6e," \u2014 "),HD=n(F6e,"A",{href:!0});var det=s(HD);qRo=r(det,"RobertaForQuestionAnswering"),det.forEach(t),ORo=r(F6e," (RoBERTa model)"),F6e.forEach(t),GRo=i(P),k5=n(P,"LI",{});var C6e=s(k5);ele=n(C6e,"STRONG",{});var cet=s(ele);XRo=r(cet,"roformer"),cet.forEach(t),VRo=r(C6e," \u2014 "),UD=n(C6e,"A",{href:!0});var fet=s(UD);zRo=r(fet,"RoFormerForQuestionAnswering"),fet.forEach(t),WRo=r(C6e," (RoFormer model)"),C6e.forEach(t),QRo=i(P),R5=n(P,"LI",{});var M6e=s(R5);ole=n(M6e,"STRONG",{});var met=s(ole);HRo=r(met,"splinter"),met.forEach(t),URo=r(M6e," \u2014 "),JD=n(M6e,"A",{href:!0});var get=s(JD);JRo=r(get,"SplinterForQuestionAnswering"),get.forEach(t),YRo=r(M6e," (Splinter model)"),M6e.forEach(t),KRo=i(P),S5=n(P,"LI",{});var E6e=s(S5);rle=n(E6e,"STRONG",{});var het=s(rle);ZRo=r(het,"squeezebert"),het.forEach(t),eSo=r(E6e," \u2014 "),YD=n(E6e,"A",{href:!0});var pet=s(YD);oSo=r(pet,"SqueezeBertForQuestionAnswering"),pet.forEach(t),rSo=r(E6e," (SqueezeBERT model)"),E6e.forEach(t),tSo=i(P),P5=n(P,"LI",{});var y6e=s(P5);tle=n(y6e,"STRONG",{});var _et=s(tle);aSo=r(_et,"xlm"),_et.forEach(t),nSo=r(y6e," \u2014 "),KD=n(y6e,"A",{href:!0});var uet=s(KD);sSo=r(uet,"XLMForQuestionAnsweringSimple"),uet.forEach(t),lSo=r(y6e," (XLM model)"),y6e.forEach(t),iSo=i(P),$5=n(P,"LI",{});var w6e=s($5);ale=n(w6e,"STRONG",{});var bet=s(ale);dSo=r(bet,"xlm-roberta"),bet.forEach(t),cSo=r(w6e," \u2014 "),ZD=n(w6e,"A",{href:!0});var vet=s(ZD);fSo=r(vet,"XLMRobertaForQuestionAnswering"),vet.forEach(t),mSo=r(w6e," (XLM-RoBERTa model)"),w6e.forEach(t),gSo=i(P),I5=n(P,"LI",{});var A6e=s(I5);nle=n(A6e,"STRONG",{});var Tet=s(nle);hSo=r(Tet,"xlm-roberta-xl"),Tet.forEach(t),pSo=r(A6e," \u2014 "),eN=n(A6e,"A",{href:!0});var Fet=s(eN);_So=r(Fet,"XLMRobertaXLForQuestionAnswering"),Fet.forEach(t),uSo=r(A6e," (XLM-RoBERTa-XL model)"),A6e.forEach(t),bSo=i(P),j5=n(P,"LI",{});var L6e=s(j5);sle=n(L6e,"STRONG",{});var Cet=s(sle);vSo=r(Cet,"xlnet"),Cet.forEach(t),TSo=r(L6e," \u2014 "),oN=n(L6e,"A",{href:!0});var Met=s(oN);FSo=r(Met,"XLNetForQuestionAnsweringSimple"),Met.forEach(t),CSo=r(L6e," (XLNet model)"),L6e.forEach(t),MSo=i(P),D5=n(P,"LI",{});var B6e=s(D5);lle=n(B6e,"STRONG",{});var Eet=s(lle);ESo=r(Eet,"yoso"),Eet.forEach(t),ySo=r(B6e," \u2014 "),rN=n(B6e,"A",{href:!0});var yet=s(rN);wSo=r(yet,"YosoForQuestionAnswering"),yet.forEach(t),ASo=r(B6e," (YOSO model)"),B6e.forEach(t),P.forEach(t),LSo=i(Ut),N5=n(Ut,"P",{});var x6e=s(N5);BSo=r(x6e,"The model is set in evaluation mode by default using "),ile=n(x6e,"CODE",{});var wet=s(ile);xSo=r(wet,"model.eval()"),wet.forEach(t),kSo=r(x6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dle=n(x6e,"CODE",{});var Aet=s(dle);RSo=r(Aet,"model.train()"),Aet.forEach(t),x6e.forEach(t),SSo=i(Ut),cle=n(Ut,"P",{});var Let=s(cle);PSo=r(Let,"Examples:"),Let.forEach(t),$So=i(Ut),m(qy.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),kxe=i(d),wd=n(d,"H2",{class:!0});var qRe=s(wd);q5=n(qRe,"A",{id:!0,class:!0,href:!0});var Bet=s(q5);fle=n(Bet,"SPAN",{});var xet=s(fle);m(Oy.$$.fragment,xet),xet.forEach(t),Bet.forEach(t),ISo=i(qRe),mle=n(qRe,"SPAN",{});var ket=s(mle);jSo=r(ket,"AutoModelForTableQuestionAnswering"),ket.forEach(t),qRe.forEach(t),Rxe=i(d),sr=n(d,"DIV",{class:!0});var gl=s(sr);m(Gy.$$.fragment,gl),DSo=i(gl),Ad=n(gl,"P",{});var Oz=s(Ad);NSo=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gle=n(Oz,"CODE",{});var Ret=s(gle);qSo=r(Ret,"from_pretrained()"),Ret.forEach(t),OSo=r(Oz,"class method or the "),hle=n(Oz,"CODE",{});var Set=s(hle);GSo=r(Set,"from_config()"),Set.forEach(t),XSo=r(Oz,`class
method.`),Oz.forEach(t),VSo=i(gl),Xy=n(gl,"P",{});var ORe=s(Xy);zSo=r(ORe,"This class cannot be instantiated directly using "),ple=n(ORe,"CODE",{});var Pet=s(ple);WSo=r(Pet,"__init__()"),Pet.forEach(t),QSo=r(ORe," (throws an error)."),ORe.forEach(t),HSo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(Vy.$$.fragment,hl),USo=i(hl),_le=n(hl,"P",{});var $et=s(_le);JSo=r($et,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$et.forEach(t),YSo=i(hl),Ld=n(hl,"P",{});var Gz=s(Ld);KSo=r(Gz,`Note:
Loading a model from its configuration file does `),ule=n(Gz,"STRONG",{});var Iet=s(ule);ZSo=r(Iet,"not"),Iet.forEach(t),ePo=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ble=n(Gz,"CODE",{});var jet=s(ble);oPo=r(jet,"from_pretrained()"),jet.forEach(t),rPo=r(Gz,"to load the model weights."),Gz.forEach(t),tPo=i(hl),vle=n(hl,"P",{});var Det=s(vle);aPo=r(Det,"Examples:"),Det.forEach(t),nPo=i(hl),m(zy.$$.fragment,hl),hl.forEach(t),sPo=i(gl),Qe=n(gl,"DIV",{class:!0});var Jt=s(Qe);m(Wy.$$.fragment,Jt),lPo=i(Jt),Tle=n(Jt,"P",{});var Net=s(Tle);iPo=r(Net,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Net.forEach(t),dPo=i(Jt),Za=n(Jt,"P",{});var a4=s(Za);cPo=r(a4,"The model class to instantiate is selected based on the "),Fle=n(a4,"CODE",{});var qet=s(Fle);fPo=r(qet,"model_type"),qet.forEach(t),mPo=r(a4,` property of the config object (either
passed as an argument or loaded from `),Cle=n(a4,"CODE",{});var Oet=s(Cle);gPo=r(Oet,"pretrained_model_name_or_path"),Oet.forEach(t),hPo=r(a4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mle=n(a4,"CODE",{});var Get=s(Mle);pPo=r(Get,"pretrained_model_name_or_path"),Get.forEach(t),_Po=r(a4,":"),a4.forEach(t),uPo=i(Jt),Ele=n(Jt,"UL",{});var Xet=s(Ele);O5=n(Xet,"LI",{});var k6e=s(O5);yle=n(k6e,"STRONG",{});var Vet=s(yle);bPo=r(Vet,"tapas"),Vet.forEach(t),vPo=r(k6e," \u2014 "),tN=n(k6e,"A",{href:!0});var zet=s(tN);TPo=r(zet,"TapasForQuestionAnswering"),zet.forEach(t),FPo=r(k6e," (TAPAS model)"),k6e.forEach(t),Xet.forEach(t),CPo=i(Jt),G5=n(Jt,"P",{});var R6e=s(G5);MPo=r(R6e,"The model is set in evaluation mode by default using "),wle=n(R6e,"CODE",{});var Wet=s(wle);EPo=r(Wet,"model.eval()"),Wet.forEach(t),yPo=r(R6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ale=n(R6e,"CODE",{});var Qet=s(Ale);wPo=r(Qet,"model.train()"),Qet.forEach(t),R6e.forEach(t),APo=i(Jt),Lle=n(Jt,"P",{});var Het=s(Lle);LPo=r(Het,"Examples:"),Het.forEach(t),BPo=i(Jt),m(Qy.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),Sxe=i(d),Bd=n(d,"H2",{class:!0});var GRe=s(Bd);X5=n(GRe,"A",{id:!0,class:!0,href:!0});var Uet=s(X5);Ble=n(Uet,"SPAN",{});var Jet=s(Ble);m(Hy.$$.fragment,Jet),Jet.forEach(t),Uet.forEach(t),xPo=i(GRe),xle=n(GRe,"SPAN",{});var Yet=s(xle);kPo=r(Yet,"AutoModelForImageClassification"),Yet.forEach(t),GRe.forEach(t),Pxe=i(d),lr=n(d,"DIV",{class:!0});var pl=s(lr);m(Uy.$$.fragment,pl),RPo=i(pl),xd=n(pl,"P",{});var Xz=s(xd);SPo=r(Xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kle=n(Xz,"CODE",{});var Ket=s(kle);PPo=r(Ket,"from_pretrained()"),Ket.forEach(t),$Po=r(Xz,"class method or the "),Rle=n(Xz,"CODE",{});var Zet=s(Rle);IPo=r(Zet,"from_config()"),Zet.forEach(t),jPo=r(Xz,`class
method.`),Xz.forEach(t),DPo=i(pl),Jy=n(pl,"P",{});var XRe=s(Jy);NPo=r(XRe,"This class cannot be instantiated directly using "),Sle=n(XRe,"CODE",{});var eot=s(Sle);qPo=r(eot,"__init__()"),eot.forEach(t),OPo=r(XRe," (throws an error)."),XRe.forEach(t),GPo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(Yy.$$.fragment,_l),XPo=i(_l),Ple=n(_l,"P",{});var oot=s(Ple);VPo=r(oot,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),oot.forEach(t),zPo=i(_l),kd=n(_l,"P",{});var Vz=s(kd);WPo=r(Vz,`Note:
Loading a model from its configuration file does `),$le=n(Vz,"STRONG",{});var rot=s($le);QPo=r(rot,"not"),rot.forEach(t),HPo=r(Vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ile=n(Vz,"CODE",{});var tot=s(Ile);UPo=r(tot,"from_pretrained()"),tot.forEach(t),JPo=r(Vz,"to load the model weights."),Vz.forEach(t),YPo=i(_l),jle=n(_l,"P",{});var aot=s(jle);KPo=r(aot,"Examples:"),aot.forEach(t),ZPo=i(_l),m(Ky.$$.fragment,_l),_l.forEach(t),e$o=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(Zy.$$.fragment,Yt),o$o=i(Yt),Dle=n(Yt,"P",{});var not=s(Dle);r$o=r(not,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),not.forEach(t),t$o=i(Yt),en=n(Yt,"P",{});var n4=s(en);a$o=r(n4,"The model class to instantiate is selected based on the "),Nle=n(n4,"CODE",{});var sot=s(Nle);n$o=r(sot,"model_type"),sot.forEach(t),s$o=r(n4,` property of the config object (either
passed as an argument or loaded from `),qle=n(n4,"CODE",{});var lot=s(qle);l$o=r(lot,"pretrained_model_name_or_path"),lot.forEach(t),i$o=r(n4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ole=n(n4,"CODE",{});var iot=s(Ole);d$o=r(iot,"pretrained_model_name_or_path"),iot.forEach(t),c$o=r(n4,":"),n4.forEach(t),f$o=i(Yt),Fe=n(Yt,"UL",{});var so=s(Fe);V5=n(so,"LI",{});var S6e=s(V5);Gle=n(S6e,"STRONG",{});var dot=s(Gle);m$o=r(dot,"beit"),dot.forEach(t),g$o=r(S6e," \u2014 "),aN=n(S6e,"A",{href:!0});var cot=s(aN);h$o=r(cot,"BeitForImageClassification"),cot.forEach(t),p$o=r(S6e," (BEiT model)"),S6e.forEach(t),_$o=i(so),z5=n(so,"LI",{});var P6e=s(z5);Xle=n(P6e,"STRONG",{});var fot=s(Xle);u$o=r(fot,"convnext"),fot.forEach(t),b$o=r(P6e," \u2014 "),nN=n(P6e,"A",{href:!0});var mot=s(nN);v$o=r(mot,"ConvNextForImageClassification"),mot.forEach(t),T$o=r(P6e," (ConvNext model)"),P6e.forEach(t),F$o=i(so),qs=n(so,"LI",{});var I7=s(qs);Vle=n(I7,"STRONG",{});var got=s(Vle);C$o=r(got,"deit"),got.forEach(t),M$o=r(I7," \u2014 "),sN=n(I7,"A",{href:!0});var hot=s(sN);E$o=r(hot,"DeiTForImageClassification"),hot.forEach(t),y$o=r(I7," or "),lN=n(I7,"A",{href:!0});var pot=s(lN);w$o=r(pot,"DeiTForImageClassificationWithTeacher"),pot.forEach(t),A$o=r(I7," (DeiT model)"),I7.forEach(t),L$o=i(so),W5=n(so,"LI",{});var $6e=s(W5);zle=n($6e,"STRONG",{});var _ot=s(zle);B$o=r(_ot,"imagegpt"),_ot.forEach(t),x$o=r($6e," \u2014 "),iN=n($6e,"A",{href:!0});var uot=s(iN);k$o=r(uot,"ImageGPTForImageClassification"),uot.forEach(t),R$o=r($6e," (ImageGPT model)"),$6e.forEach(t),S$o=i(so),fa=n(so,"LI",{});var Pf=s(fa);Wle=n(Pf,"STRONG",{});var bot=s(Wle);P$o=r(bot,"perceiver"),bot.forEach(t),$$o=r(Pf," \u2014 "),dN=n(Pf,"A",{href:!0});var vot=s(dN);I$o=r(vot,"PerceiverForImageClassificationLearned"),vot.forEach(t),j$o=r(Pf," or "),cN=n(Pf,"A",{href:!0});var Tot=s(cN);D$o=r(Tot,"PerceiverForImageClassificationFourier"),Tot.forEach(t),N$o=r(Pf," or "),fN=n(Pf,"A",{href:!0});var Fot=s(fN);q$o=r(Fot,"PerceiverForImageClassificationConvProcessing"),Fot.forEach(t),O$o=r(Pf," (Perceiver model)"),Pf.forEach(t),G$o=i(so),Q5=n(so,"LI",{});var I6e=s(Q5);Qle=n(I6e,"STRONG",{});var Cot=s(Qle);X$o=r(Cot,"poolformer"),Cot.forEach(t),V$o=r(I6e," \u2014 "),mN=n(I6e,"A",{href:!0});var Mot=s(mN);z$o=r(Mot,"PoolFormerForImageClassification"),Mot.forEach(t),W$o=r(I6e," (PoolFormer model)"),I6e.forEach(t),Q$o=i(so),H5=n(so,"LI",{});var j6e=s(H5);Hle=n(j6e,"STRONG",{});var Eot=s(Hle);H$o=r(Eot,"segformer"),Eot.forEach(t),U$o=r(j6e," \u2014 "),gN=n(j6e,"A",{href:!0});var yot=s(gN);J$o=r(yot,"SegformerForImageClassification"),yot.forEach(t),Y$o=r(j6e," (SegFormer model)"),j6e.forEach(t),K$o=i(so),U5=n(so,"LI",{});var D6e=s(U5);Ule=n(D6e,"STRONG",{});var wot=s(Ule);Z$o=r(wot,"swin"),wot.forEach(t),eIo=r(D6e," \u2014 "),hN=n(D6e,"A",{href:!0});var Aot=s(hN);oIo=r(Aot,"SwinForImageClassification"),Aot.forEach(t),rIo=r(D6e," (Swin model)"),D6e.forEach(t),tIo=i(so),J5=n(so,"LI",{});var N6e=s(J5);Jle=n(N6e,"STRONG",{});var Lot=s(Jle);aIo=r(Lot,"vit"),Lot.forEach(t),nIo=r(N6e," \u2014 "),pN=n(N6e,"A",{href:!0});var Bot=s(pN);sIo=r(Bot,"ViTForImageClassification"),Bot.forEach(t),lIo=r(N6e," (ViT model)"),N6e.forEach(t),so.forEach(t),iIo=i(Yt),Y5=n(Yt,"P",{});var q6e=s(Y5);dIo=r(q6e,"The model is set in evaluation mode by default using "),Yle=n(q6e,"CODE",{});var xot=s(Yle);cIo=r(xot,"model.eval()"),xot.forEach(t),fIo=r(q6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kle=n(q6e,"CODE",{});var kot=s(Kle);mIo=r(kot,"model.train()"),kot.forEach(t),q6e.forEach(t),gIo=i(Yt),Zle=n(Yt,"P",{});var Rot=s(Zle);hIo=r(Rot,"Examples:"),Rot.forEach(t),pIo=i(Yt),m(ew.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),$xe=i(d),Rd=n(d,"H2",{class:!0});var VRe=s(Rd);K5=n(VRe,"A",{id:!0,class:!0,href:!0});var Sot=s(K5);eie=n(Sot,"SPAN",{});var Pot=s(eie);m(ow.$$.fragment,Pot),Pot.forEach(t),Sot.forEach(t),_Io=i(VRe),oie=n(VRe,"SPAN",{});var $ot=s(oie);uIo=r($ot,"AutoModelForVision2Seq"),$ot.forEach(t),VRe.forEach(t),Ixe=i(d),ir=n(d,"DIV",{class:!0});var ul=s(ir);m(rw.$$.fragment,ul),bIo=i(ul),Sd=n(ul,"P",{});var zz=s(Sd);vIo=r(zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rie=n(zz,"CODE",{});var Iot=s(rie);TIo=r(Iot,"from_pretrained()"),Iot.forEach(t),FIo=r(zz,"class method or the "),tie=n(zz,"CODE",{});var jot=s(tie);CIo=r(jot,"from_config()"),jot.forEach(t),MIo=r(zz,`class
method.`),zz.forEach(t),EIo=i(ul),tw=n(ul,"P",{});var zRe=s(tw);yIo=r(zRe,"This class cannot be instantiated directly using "),aie=n(zRe,"CODE",{});var Dot=s(aie);wIo=r(Dot,"__init__()"),Dot.forEach(t),AIo=r(zRe," (throws an error)."),zRe.forEach(t),LIo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(aw.$$.fragment,bl),BIo=i(bl),nie=n(bl,"P",{});var Not=s(nie);xIo=r(Not,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Not.forEach(t),kIo=i(bl),Pd=n(bl,"P",{});var Wz=s(Pd);RIo=r(Wz,`Note:
Loading a model from its configuration file does `),sie=n(Wz,"STRONG",{});var qot=s(sie);SIo=r(qot,"not"),qot.forEach(t),PIo=r(Wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),lie=n(Wz,"CODE",{});var Oot=s(lie);$Io=r(Oot,"from_pretrained()"),Oot.forEach(t),IIo=r(Wz,"to load the model weights."),Wz.forEach(t),jIo=i(bl),iie=n(bl,"P",{});var Got=s(iie);DIo=r(Got,"Examples:"),Got.forEach(t),NIo=i(bl),m(nw.$$.fragment,bl),bl.forEach(t),qIo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(sw.$$.fragment,Kt),OIo=i(Kt),die=n(Kt,"P",{});var Xot=s(die);GIo=r(Xot,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xot.forEach(t),XIo=i(Kt),on=n(Kt,"P",{});var s4=s(on);VIo=r(s4,"The model class to instantiate is selected based on the "),cie=n(s4,"CODE",{});var Vot=s(cie);zIo=r(Vot,"model_type"),Vot.forEach(t),WIo=r(s4,` property of the config object (either
passed as an argument or loaded from `),fie=n(s4,"CODE",{});var zot=s(fie);QIo=r(zot,"pretrained_model_name_or_path"),zot.forEach(t),HIo=r(s4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mie=n(s4,"CODE",{});var Wot=s(mie);UIo=r(Wot,"pretrained_model_name_or_path"),Wot.forEach(t),JIo=r(s4,":"),s4.forEach(t),YIo=i(Kt),gie=n(Kt,"UL",{});var Qot=s(gie);Z5=n(Qot,"LI",{});var O6e=s(Z5);hie=n(O6e,"STRONG",{});var Hot=s(hie);KIo=r(Hot,"vision-encoder-decoder"),Hot.forEach(t),ZIo=r(O6e," \u2014 "),_N=n(O6e,"A",{href:!0});var Uot=s(_N);ejo=r(Uot,"VisionEncoderDecoderModel"),Uot.forEach(t),ojo=r(O6e," (Vision Encoder decoder model)"),O6e.forEach(t),Qot.forEach(t),rjo=i(Kt),e2=n(Kt,"P",{});var G6e=s(e2);tjo=r(G6e,"The model is set in evaluation mode by default using "),pie=n(G6e,"CODE",{});var Jot=s(pie);ajo=r(Jot,"model.eval()"),Jot.forEach(t),njo=r(G6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ie=n(G6e,"CODE",{});var Yot=s(_ie);sjo=r(Yot,"model.train()"),Yot.forEach(t),G6e.forEach(t),ljo=i(Kt),uie=n(Kt,"P",{});var Kot=s(uie);ijo=r(Kot,"Examples:"),Kot.forEach(t),djo=i(Kt),m(lw.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),jxe=i(d),$d=n(d,"H2",{class:!0});var WRe=s($d);o2=n(WRe,"A",{id:!0,class:!0,href:!0});var Zot=s(o2);bie=n(Zot,"SPAN",{});var ert=s(bie);m(iw.$$.fragment,ert),ert.forEach(t),Zot.forEach(t),cjo=i(WRe),vie=n(WRe,"SPAN",{});var ort=s(vie);fjo=r(ort,"AutoModelForAudioClassification"),ort.forEach(t),WRe.forEach(t),Dxe=i(d),dr=n(d,"DIV",{class:!0});var vl=s(dr);m(dw.$$.fragment,vl),mjo=i(vl),Id=n(vl,"P",{});var Qz=s(Id);gjo=r(Qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Tie=n(Qz,"CODE",{});var rrt=s(Tie);hjo=r(rrt,"from_pretrained()"),rrt.forEach(t),pjo=r(Qz,"class method or the "),Fie=n(Qz,"CODE",{});var trt=s(Fie);_jo=r(trt,"from_config()"),trt.forEach(t),ujo=r(Qz,`class
method.`),Qz.forEach(t),bjo=i(vl),cw=n(vl,"P",{});var QRe=s(cw);vjo=r(QRe,"This class cannot be instantiated directly using "),Cie=n(QRe,"CODE",{});var art=s(Cie);Tjo=r(art,"__init__()"),art.forEach(t),Fjo=r(QRe," (throws an error)."),QRe.forEach(t),Cjo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(fw.$$.fragment,Tl),Mjo=i(Tl),Mie=n(Tl,"P",{});var nrt=s(Mie);Ejo=r(nrt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),nrt.forEach(t),yjo=i(Tl),jd=n(Tl,"P",{});var Hz=s(jd);wjo=r(Hz,`Note:
Loading a model from its configuration file does `),Eie=n(Hz,"STRONG",{});var srt=s(Eie);Ajo=r(srt,"not"),srt.forEach(t),Ljo=r(Hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),yie=n(Hz,"CODE",{});var lrt=s(yie);Bjo=r(lrt,"from_pretrained()"),lrt.forEach(t),xjo=r(Hz,"to load the model weights."),Hz.forEach(t),kjo=i(Tl),wie=n(Tl,"P",{});var irt=s(wie);Rjo=r(irt,"Examples:"),irt.forEach(t),Sjo=i(Tl),m(mw.$$.fragment,Tl),Tl.forEach(t),Pjo=i(vl),Je=n(vl,"DIV",{class:!0});var Zt=s(Je);m(gw.$$.fragment,Zt),$jo=i(Zt),Aie=n(Zt,"P",{});var drt=s(Aie);Ijo=r(drt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),drt.forEach(t),jjo=i(Zt),rn=n(Zt,"P",{});var l4=s(rn);Djo=r(l4,"The model class to instantiate is selected based on the "),Lie=n(l4,"CODE",{});var crt=s(Lie);Njo=r(crt,"model_type"),crt.forEach(t),qjo=r(l4,` property of the config object (either
passed as an argument or loaded from `),Bie=n(l4,"CODE",{});var frt=s(Bie);Ojo=r(frt,"pretrained_model_name_or_path"),frt.forEach(t),Gjo=r(l4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xie=n(l4,"CODE",{});var mrt=s(xie);Xjo=r(mrt,"pretrained_model_name_or_path"),mrt.forEach(t),Vjo=r(l4,":"),l4.forEach(t),zjo=i(Zt),xe=n(Zt,"UL",{});var qo=s(xe);r2=n(qo,"LI",{});var X6e=s(r2);kie=n(X6e,"STRONG",{});var grt=s(kie);Wjo=r(grt,"data2vec-audio"),grt.forEach(t),Qjo=r(X6e," \u2014 "),uN=n(X6e,"A",{href:!0});var hrt=s(uN);Hjo=r(hrt,"Data2VecAudioForSequenceClassification"),hrt.forEach(t),Ujo=r(X6e," (Data2VecAudio model)"),X6e.forEach(t),Jjo=i(qo),t2=n(qo,"LI",{});var V6e=s(t2);Rie=n(V6e,"STRONG",{});var prt=s(Rie);Yjo=r(prt,"hubert"),prt.forEach(t),Kjo=r(V6e," \u2014 "),bN=n(V6e,"A",{href:!0});var _rt=s(bN);Zjo=r(_rt,"HubertForSequenceClassification"),_rt.forEach(t),eDo=r(V6e," (Hubert model)"),V6e.forEach(t),oDo=i(qo),a2=n(qo,"LI",{});var z6e=s(a2);Sie=n(z6e,"STRONG",{});var urt=s(Sie);rDo=r(urt,"sew"),urt.forEach(t),tDo=r(z6e," \u2014 "),vN=n(z6e,"A",{href:!0});var brt=s(vN);aDo=r(brt,"SEWForSequenceClassification"),brt.forEach(t),nDo=r(z6e," (SEW model)"),z6e.forEach(t),sDo=i(qo),n2=n(qo,"LI",{});var W6e=s(n2);Pie=n(W6e,"STRONG",{});var vrt=s(Pie);lDo=r(vrt,"sew-d"),vrt.forEach(t),iDo=r(W6e," \u2014 "),TN=n(W6e,"A",{href:!0});var Trt=s(TN);dDo=r(Trt,"SEWDForSequenceClassification"),Trt.forEach(t),cDo=r(W6e," (SEW-D model)"),W6e.forEach(t),fDo=i(qo),s2=n(qo,"LI",{});var Q6e=s(s2);$ie=n(Q6e,"STRONG",{});var Frt=s($ie);mDo=r(Frt,"unispeech"),Frt.forEach(t),gDo=r(Q6e," \u2014 "),FN=n(Q6e,"A",{href:!0});var Crt=s(FN);hDo=r(Crt,"UniSpeechForSequenceClassification"),Crt.forEach(t),pDo=r(Q6e," (UniSpeech model)"),Q6e.forEach(t),_Do=i(qo),l2=n(qo,"LI",{});var H6e=s(l2);Iie=n(H6e,"STRONG",{});var Mrt=s(Iie);uDo=r(Mrt,"unispeech-sat"),Mrt.forEach(t),bDo=r(H6e," \u2014 "),CN=n(H6e,"A",{href:!0});var Ert=s(CN);vDo=r(Ert,"UniSpeechSatForSequenceClassification"),Ert.forEach(t),TDo=r(H6e," (UniSpeechSat model)"),H6e.forEach(t),FDo=i(qo),i2=n(qo,"LI",{});var U6e=s(i2);jie=n(U6e,"STRONG",{});var yrt=s(jie);CDo=r(yrt,"wav2vec2"),yrt.forEach(t),MDo=r(U6e," \u2014 "),MN=n(U6e,"A",{href:!0});var wrt=s(MN);EDo=r(wrt,"Wav2Vec2ForSequenceClassification"),wrt.forEach(t),yDo=r(U6e," (Wav2Vec2 model)"),U6e.forEach(t),wDo=i(qo),d2=n(qo,"LI",{});var J6e=s(d2);Die=n(J6e,"STRONG",{});var Art=s(Die);ADo=r(Art,"wavlm"),Art.forEach(t),LDo=r(J6e," \u2014 "),EN=n(J6e,"A",{href:!0});var Lrt=s(EN);BDo=r(Lrt,"WavLMForSequenceClassification"),Lrt.forEach(t),xDo=r(J6e," (WavLM model)"),J6e.forEach(t),qo.forEach(t),kDo=i(Zt),c2=n(Zt,"P",{});var Y6e=s(c2);RDo=r(Y6e,"The model is set in evaluation mode by default using "),Nie=n(Y6e,"CODE",{});var Brt=s(Nie);SDo=r(Brt,"model.eval()"),Brt.forEach(t),PDo=r(Y6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qie=n(Y6e,"CODE",{});var xrt=s(qie);$Do=r(xrt,"model.train()"),xrt.forEach(t),Y6e.forEach(t),IDo=i(Zt),Oie=n(Zt,"P",{});var krt=s(Oie);jDo=r(krt,"Examples:"),krt.forEach(t),DDo=i(Zt),m(hw.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),Nxe=i(d),Dd=n(d,"H2",{class:!0});var HRe=s(Dd);f2=n(HRe,"A",{id:!0,class:!0,href:!0});var Rrt=s(f2);Gie=n(Rrt,"SPAN",{});var Srt=s(Gie);m(pw.$$.fragment,Srt),Srt.forEach(t),Rrt.forEach(t),NDo=i(HRe),Xie=n(HRe,"SPAN",{});var Prt=s(Xie);qDo=r(Prt,"AutoModelForAudioFrameClassification"),Prt.forEach(t),HRe.forEach(t),qxe=i(d),cr=n(d,"DIV",{class:!0});var Fl=s(cr);m(_w.$$.fragment,Fl),ODo=i(Fl),Nd=n(Fl,"P",{});var Uz=s(Nd);GDo=r(Uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Vie=n(Uz,"CODE",{});var $rt=s(Vie);XDo=r($rt,"from_pretrained()"),$rt.forEach(t),VDo=r(Uz,"class method or the "),zie=n(Uz,"CODE",{});var Irt=s(zie);zDo=r(Irt,"from_config()"),Irt.forEach(t),WDo=r(Uz,`class
method.`),Uz.forEach(t),QDo=i(Fl),uw=n(Fl,"P",{});var URe=s(uw);HDo=r(URe,"This class cannot be instantiated directly using "),Wie=n(URe,"CODE",{});var jrt=s(Wie);UDo=r(jrt,"__init__()"),jrt.forEach(t),JDo=r(URe," (throws an error)."),URe.forEach(t),YDo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);m(bw.$$.fragment,Cl),KDo=i(Cl),Qie=n(Cl,"P",{});var Drt=s(Qie);ZDo=r(Drt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Drt.forEach(t),eNo=i(Cl),qd=n(Cl,"P",{});var Jz=s(qd);oNo=r(Jz,`Note:
Loading a model from its configuration file does `),Hie=n(Jz,"STRONG",{});var Nrt=s(Hie);rNo=r(Nrt,"not"),Nrt.forEach(t),tNo=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uie=n(Jz,"CODE",{});var qrt=s(Uie);aNo=r(qrt,"from_pretrained()"),qrt.forEach(t),nNo=r(Jz,"to load the model weights."),Jz.forEach(t),sNo=i(Cl),Jie=n(Cl,"P",{});var Ort=s(Jie);lNo=r(Ort,"Examples:"),Ort.forEach(t),iNo=i(Cl),m(vw.$$.fragment,Cl),Cl.forEach(t),dNo=i(Fl),Ye=n(Fl,"DIV",{class:!0});var ea=s(Ye);m(Tw.$$.fragment,ea),cNo=i(ea),Yie=n(ea,"P",{});var Grt=s(Yie);fNo=r(Grt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Grt.forEach(t),mNo=i(ea),tn=n(ea,"P",{});var i4=s(tn);gNo=r(i4,"The model class to instantiate is selected based on the "),Kie=n(i4,"CODE",{});var Xrt=s(Kie);hNo=r(Xrt,"model_type"),Xrt.forEach(t),pNo=r(i4,` property of the config object (either
passed as an argument or loaded from `),Zie=n(i4,"CODE",{});var Vrt=s(Zie);_No=r(Vrt,"pretrained_model_name_or_path"),Vrt.forEach(t),uNo=r(i4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ede=n(i4,"CODE",{});var zrt=s(ede);bNo=r(zrt,"pretrained_model_name_or_path"),zrt.forEach(t),vNo=r(i4,":"),i4.forEach(t),TNo=i(ea),an=n(ea,"UL",{});var d4=s(an);m2=n(d4,"LI",{});var K6e=s(m2);ode=n(K6e,"STRONG",{});var Wrt=s(ode);FNo=r(Wrt,"data2vec-audio"),Wrt.forEach(t),CNo=r(K6e," \u2014 "),yN=n(K6e,"A",{href:!0});var Qrt=s(yN);MNo=r(Qrt,"Data2VecAudioForAudioFrameClassification"),Qrt.forEach(t),ENo=r(K6e," (Data2VecAudio model)"),K6e.forEach(t),yNo=i(d4),g2=n(d4,"LI",{});var Z6e=s(g2);rde=n(Z6e,"STRONG",{});var Hrt=s(rde);wNo=r(Hrt,"unispeech-sat"),Hrt.forEach(t),ANo=r(Z6e," \u2014 "),wN=n(Z6e,"A",{href:!0});var Urt=s(wN);LNo=r(Urt,"UniSpeechSatForAudioFrameClassification"),Urt.forEach(t),BNo=r(Z6e," (UniSpeechSat model)"),Z6e.forEach(t),xNo=i(d4),h2=n(d4,"LI",{});var eAe=s(h2);tde=n(eAe,"STRONG",{});var Jrt=s(tde);kNo=r(Jrt,"wav2vec2"),Jrt.forEach(t),RNo=r(eAe," \u2014 "),AN=n(eAe,"A",{href:!0});var Yrt=s(AN);SNo=r(Yrt,"Wav2Vec2ForAudioFrameClassification"),Yrt.forEach(t),PNo=r(eAe," (Wav2Vec2 model)"),eAe.forEach(t),$No=i(d4),p2=n(d4,"LI",{});var oAe=s(p2);ade=n(oAe,"STRONG",{});var Krt=s(ade);INo=r(Krt,"wavlm"),Krt.forEach(t),jNo=r(oAe," \u2014 "),LN=n(oAe,"A",{href:!0});var Zrt=s(LN);DNo=r(Zrt,"WavLMForAudioFrameClassification"),Zrt.forEach(t),NNo=r(oAe," (WavLM model)"),oAe.forEach(t),d4.forEach(t),qNo=i(ea),_2=n(ea,"P",{});var rAe=s(_2);ONo=r(rAe,"The model is set in evaluation mode by default using "),nde=n(rAe,"CODE",{});var ett=s(nde);GNo=r(ett,"model.eval()"),ett.forEach(t),XNo=r(rAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sde=n(rAe,"CODE",{});var ott=s(sde);VNo=r(ott,"model.train()"),ott.forEach(t),rAe.forEach(t),zNo=i(ea),lde=n(ea,"P",{});var rtt=s(lde);WNo=r(rtt,"Examples:"),rtt.forEach(t),QNo=i(ea),m(Fw.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),Oxe=i(d),Od=n(d,"H2",{class:!0});var JRe=s(Od);u2=n(JRe,"A",{id:!0,class:!0,href:!0});var ttt=s(u2);ide=n(ttt,"SPAN",{});var att=s(ide);m(Cw.$$.fragment,att),att.forEach(t),ttt.forEach(t),HNo=i(JRe),dde=n(JRe,"SPAN",{});var ntt=s(dde);UNo=r(ntt,"AutoModelForCTC"),ntt.forEach(t),JRe.forEach(t),Gxe=i(d),fr=n(d,"DIV",{class:!0});var Ml=s(fr);m(Mw.$$.fragment,Ml),JNo=i(Ml),Gd=n(Ml,"P",{});var Yz=s(Gd);YNo=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cde=n(Yz,"CODE",{});var stt=s(cde);KNo=r(stt,"from_pretrained()"),stt.forEach(t),ZNo=r(Yz,"class method or the "),fde=n(Yz,"CODE",{});var ltt=s(fde);eqo=r(ltt,"from_config()"),ltt.forEach(t),oqo=r(Yz,`class
method.`),Yz.forEach(t),rqo=i(Ml),Ew=n(Ml,"P",{});var YRe=s(Ew);tqo=r(YRe,"This class cannot be instantiated directly using "),mde=n(YRe,"CODE",{});var itt=s(mde);aqo=r(itt,"__init__()"),itt.forEach(t),nqo=r(YRe," (throws an error)."),YRe.forEach(t),sqo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);m(yw.$$.fragment,El),lqo=i(El),gde=n(El,"P",{});var dtt=s(gde);iqo=r(dtt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),dtt.forEach(t),dqo=i(El),Xd=n(El,"P",{});var Kz=s(Xd);cqo=r(Kz,`Note:
Loading a model from its configuration file does `),hde=n(Kz,"STRONG",{});var ctt=s(hde);fqo=r(ctt,"not"),ctt.forEach(t),mqo=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),pde=n(Kz,"CODE",{});var ftt=s(pde);gqo=r(ftt,"from_pretrained()"),ftt.forEach(t),hqo=r(Kz,"to load the model weights."),Kz.forEach(t),pqo=i(El),_de=n(El,"P",{});var mtt=s(_de);_qo=r(mtt,"Examples:"),mtt.forEach(t),uqo=i(El),m(ww.$$.fragment,El),El.forEach(t),bqo=i(Ml),Ke=n(Ml,"DIV",{class:!0});var oa=s(Ke);m(Aw.$$.fragment,oa),vqo=i(oa),ude=n(oa,"P",{});var gtt=s(ude);Tqo=r(gtt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),gtt.forEach(t),Fqo=i(oa),nn=n(oa,"P",{});var c4=s(nn);Cqo=r(c4,"The model class to instantiate is selected based on the "),bde=n(c4,"CODE",{});var htt=s(bde);Mqo=r(htt,"model_type"),htt.forEach(t),Eqo=r(c4,` property of the config object (either
passed as an argument or loaded from `),vde=n(c4,"CODE",{});var ptt=s(vde);yqo=r(ptt,"pretrained_model_name_or_path"),ptt.forEach(t),wqo=r(c4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tde=n(c4,"CODE",{});var _tt=s(Tde);Aqo=r(_tt,"pretrained_model_name_or_path"),_tt.forEach(t),Lqo=r(c4,":"),c4.forEach(t),Bqo=i(oa),ke=n(oa,"UL",{});var Oo=s(ke);b2=n(Oo,"LI",{});var tAe=s(b2);Fde=n(tAe,"STRONG",{});var utt=s(Fde);xqo=r(utt,"data2vec-audio"),utt.forEach(t),kqo=r(tAe," \u2014 "),BN=n(tAe,"A",{href:!0});var btt=s(BN);Rqo=r(btt,"Data2VecAudioForCTC"),btt.forEach(t),Sqo=r(tAe," (Data2VecAudio model)"),tAe.forEach(t),Pqo=i(Oo),v2=n(Oo,"LI",{});var aAe=s(v2);Cde=n(aAe,"STRONG",{});var vtt=s(Cde);$qo=r(vtt,"hubert"),vtt.forEach(t),Iqo=r(aAe," \u2014 "),xN=n(aAe,"A",{href:!0});var Ttt=s(xN);jqo=r(Ttt,"HubertForCTC"),Ttt.forEach(t),Dqo=r(aAe," (Hubert model)"),aAe.forEach(t),Nqo=i(Oo),T2=n(Oo,"LI",{});var nAe=s(T2);Mde=n(nAe,"STRONG",{});var Ftt=s(Mde);qqo=r(Ftt,"sew"),Ftt.forEach(t),Oqo=r(nAe," \u2014 "),kN=n(nAe,"A",{href:!0});var Ctt=s(kN);Gqo=r(Ctt,"SEWForCTC"),Ctt.forEach(t),Xqo=r(nAe," (SEW model)"),nAe.forEach(t),Vqo=i(Oo),F2=n(Oo,"LI",{});var sAe=s(F2);Ede=n(sAe,"STRONG",{});var Mtt=s(Ede);zqo=r(Mtt,"sew-d"),Mtt.forEach(t),Wqo=r(sAe," \u2014 "),RN=n(sAe,"A",{href:!0});var Ett=s(RN);Qqo=r(Ett,"SEWDForCTC"),Ett.forEach(t),Hqo=r(sAe," (SEW-D model)"),sAe.forEach(t),Uqo=i(Oo),C2=n(Oo,"LI",{});var lAe=s(C2);yde=n(lAe,"STRONG",{});var ytt=s(yde);Jqo=r(ytt,"unispeech"),ytt.forEach(t),Yqo=r(lAe," \u2014 "),SN=n(lAe,"A",{href:!0});var wtt=s(SN);Kqo=r(wtt,"UniSpeechForCTC"),wtt.forEach(t),Zqo=r(lAe," (UniSpeech model)"),lAe.forEach(t),eOo=i(Oo),M2=n(Oo,"LI",{});var iAe=s(M2);wde=n(iAe,"STRONG",{});var Att=s(wde);oOo=r(Att,"unispeech-sat"),Att.forEach(t),rOo=r(iAe," \u2014 "),PN=n(iAe,"A",{href:!0});var Ltt=s(PN);tOo=r(Ltt,"UniSpeechSatForCTC"),Ltt.forEach(t),aOo=r(iAe," (UniSpeechSat model)"),iAe.forEach(t),nOo=i(Oo),E2=n(Oo,"LI",{});var dAe=s(E2);Ade=n(dAe,"STRONG",{});var Btt=s(Ade);sOo=r(Btt,"wav2vec2"),Btt.forEach(t),lOo=r(dAe," \u2014 "),$N=n(dAe,"A",{href:!0});var xtt=s($N);iOo=r(xtt,"Wav2Vec2ForCTC"),xtt.forEach(t),dOo=r(dAe," (Wav2Vec2 model)"),dAe.forEach(t),cOo=i(Oo),y2=n(Oo,"LI",{});var cAe=s(y2);Lde=n(cAe,"STRONG",{});var ktt=s(Lde);fOo=r(ktt,"wavlm"),ktt.forEach(t),mOo=r(cAe," \u2014 "),IN=n(cAe,"A",{href:!0});var Rtt=s(IN);gOo=r(Rtt,"WavLMForCTC"),Rtt.forEach(t),hOo=r(cAe," (WavLM model)"),cAe.forEach(t),Oo.forEach(t),pOo=i(oa),w2=n(oa,"P",{});var fAe=s(w2);_Oo=r(fAe,"The model is set in evaluation mode by default using "),Bde=n(fAe,"CODE",{});var Stt=s(Bde);uOo=r(Stt,"model.eval()"),Stt.forEach(t),bOo=r(fAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xde=n(fAe,"CODE",{});var Ptt=s(xde);vOo=r(Ptt,"model.train()"),Ptt.forEach(t),fAe.forEach(t),TOo=i(oa),kde=n(oa,"P",{});var $tt=s(kde);FOo=r($tt,"Examples:"),$tt.forEach(t),COo=i(oa),m(Lw.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),Xxe=i(d),Vd=n(d,"H2",{class:!0});var KRe=s(Vd);A2=n(KRe,"A",{id:!0,class:!0,href:!0});var Itt=s(A2);Rde=n(Itt,"SPAN",{});var jtt=s(Rde);m(Bw.$$.fragment,jtt),jtt.forEach(t),Itt.forEach(t),MOo=i(KRe),Sde=n(KRe,"SPAN",{});var Dtt=s(Sde);EOo=r(Dtt,"AutoModelForSpeechSeq2Seq"),Dtt.forEach(t),KRe.forEach(t),Vxe=i(d),mr=n(d,"DIV",{class:!0});var yl=s(mr);m(xw.$$.fragment,yl),yOo=i(yl),zd=n(yl,"P",{});var Zz=s(zd);wOo=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Pde=n(Zz,"CODE",{});var Ntt=s(Pde);AOo=r(Ntt,"from_pretrained()"),Ntt.forEach(t),LOo=r(Zz,"class method or the "),$de=n(Zz,"CODE",{});var qtt=s($de);BOo=r(qtt,"from_config()"),qtt.forEach(t),xOo=r(Zz,`class
method.`),Zz.forEach(t),kOo=i(yl),kw=n(yl,"P",{});var ZRe=s(kw);ROo=r(ZRe,"This class cannot be instantiated directly using "),Ide=n(ZRe,"CODE",{});var Ott=s(Ide);SOo=r(Ott,"__init__()"),Ott.forEach(t),POo=r(ZRe," (throws an error)."),ZRe.forEach(t),$Oo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);m(Rw.$$.fragment,wl),IOo=i(wl),jde=n(wl,"P",{});var Gtt=s(jde);jOo=r(Gtt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Gtt.forEach(t),DOo=i(wl),Wd=n(wl,"P",{});var eW=s(Wd);NOo=r(eW,`Note:
Loading a model from its configuration file does `),Dde=n(eW,"STRONG",{});var Xtt=s(Dde);qOo=r(Xtt,"not"),Xtt.forEach(t),OOo=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nde=n(eW,"CODE",{});var Vtt=s(Nde);GOo=r(Vtt,"from_pretrained()"),Vtt.forEach(t),XOo=r(eW,"to load the model weights."),eW.forEach(t),VOo=i(wl),qde=n(wl,"P",{});var ztt=s(qde);zOo=r(ztt,"Examples:"),ztt.forEach(t),WOo=i(wl),m(Sw.$$.fragment,wl),wl.forEach(t),QOo=i(yl),Ze=n(yl,"DIV",{class:!0});var ra=s(Ze);m(Pw.$$.fragment,ra),HOo=i(ra),Ode=n(ra,"P",{});var Wtt=s(Ode);UOo=r(Wtt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Wtt.forEach(t),JOo=i(ra),sn=n(ra,"P",{});var f4=s(sn);YOo=r(f4,"The model class to instantiate is selected based on the "),Gde=n(f4,"CODE",{});var Qtt=s(Gde);KOo=r(Qtt,"model_type"),Qtt.forEach(t),ZOo=r(f4,` property of the config object (either
passed as an argument or loaded from `),Xde=n(f4,"CODE",{});var Htt=s(Xde);eGo=r(Htt,"pretrained_model_name_or_path"),Htt.forEach(t),oGo=r(f4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vde=n(f4,"CODE",{});var Utt=s(Vde);rGo=r(Utt,"pretrained_model_name_or_path"),Utt.forEach(t),tGo=r(f4,":"),f4.forEach(t),aGo=i(ra),$w=n(ra,"UL",{});var eSe=s($w);L2=n(eSe,"LI",{});var mAe=s(L2);zde=n(mAe,"STRONG",{});var Jtt=s(zde);nGo=r(Jtt,"speech-encoder-decoder"),Jtt.forEach(t),sGo=r(mAe," \u2014 "),jN=n(mAe,"A",{href:!0});var Ytt=s(jN);lGo=r(Ytt,"SpeechEncoderDecoderModel"),Ytt.forEach(t),iGo=r(mAe," (Speech Encoder decoder model)"),mAe.forEach(t),dGo=i(eSe),B2=n(eSe,"LI",{});var gAe=s(B2);Wde=n(gAe,"STRONG",{});var Ktt=s(Wde);cGo=r(Ktt,"speech_to_text"),Ktt.forEach(t),fGo=r(gAe," \u2014 "),DN=n(gAe,"A",{href:!0});var Ztt=s(DN);mGo=r(Ztt,"Speech2TextForConditionalGeneration"),Ztt.forEach(t),gGo=r(gAe," (Speech2Text model)"),gAe.forEach(t),eSe.forEach(t),hGo=i(ra),x2=n(ra,"P",{});var hAe=s(x2);pGo=r(hAe,"The model is set in evaluation mode by default using "),Qde=n(hAe,"CODE",{});var eat=s(Qde);_Go=r(eat,"model.eval()"),eat.forEach(t),uGo=r(hAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hde=n(hAe,"CODE",{});var oat=s(Hde);bGo=r(oat,"model.train()"),oat.forEach(t),hAe.forEach(t),vGo=i(ra),Ude=n(ra,"P",{});var rat=s(Ude);TGo=r(rat,"Examples:"),rat.forEach(t),FGo=i(ra),m(Iw.$$.fragment,ra),ra.forEach(t),yl.forEach(t),zxe=i(d),Qd=n(d,"H2",{class:!0});var oSe=s(Qd);k2=n(oSe,"A",{id:!0,class:!0,href:!0});var tat=s(k2);Jde=n(tat,"SPAN",{});var aat=s(Jde);m(jw.$$.fragment,aat),aat.forEach(t),tat.forEach(t),CGo=i(oSe),Yde=n(oSe,"SPAN",{});var nat=s(Yde);MGo=r(nat,"AutoModelForAudioXVector"),nat.forEach(t),oSe.forEach(t),Wxe=i(d),gr=n(d,"DIV",{class:!0});var Al=s(gr);m(Dw.$$.fragment,Al),EGo=i(Al),Hd=n(Al,"P",{});var oW=s(Hd);yGo=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Kde=n(oW,"CODE",{});var sat=s(Kde);wGo=r(sat,"from_pretrained()"),sat.forEach(t),AGo=r(oW,"class method or the "),Zde=n(oW,"CODE",{});var lat=s(Zde);LGo=r(lat,"from_config()"),lat.forEach(t),BGo=r(oW,`class
method.`),oW.forEach(t),xGo=i(Al),Nw=n(Al,"P",{});var rSe=s(Nw);kGo=r(rSe,"This class cannot be instantiated directly using "),ece=n(rSe,"CODE",{});var iat=s(ece);RGo=r(iat,"__init__()"),iat.forEach(t),SGo=r(rSe," (throws an error)."),rSe.forEach(t),PGo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);m(qw.$$.fragment,Ll),$Go=i(Ll),oce=n(Ll,"P",{});var dat=s(oce);IGo=r(dat,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),dat.forEach(t),jGo=i(Ll),Ud=n(Ll,"P",{});var rW=s(Ud);DGo=r(rW,`Note:
Loading a model from its configuration file does `),rce=n(rW,"STRONG",{});var cat=s(rce);NGo=r(cat,"not"),cat.forEach(t),qGo=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),tce=n(rW,"CODE",{});var fat=s(tce);OGo=r(fat,"from_pretrained()"),fat.forEach(t),GGo=r(rW,"to load the model weights."),rW.forEach(t),XGo=i(Ll),ace=n(Ll,"P",{});var mat=s(ace);VGo=r(mat,"Examples:"),mat.forEach(t),zGo=i(Ll),m(Ow.$$.fragment,Ll),Ll.forEach(t),WGo=i(Al),eo=n(Al,"DIV",{class:!0});var ta=s(eo);m(Gw.$$.fragment,ta),QGo=i(ta),nce=n(ta,"P",{});var gat=s(nce);HGo=r(gat,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),gat.forEach(t),UGo=i(ta),ln=n(ta,"P",{});var m4=s(ln);JGo=r(m4,"The model class to instantiate is selected based on the "),sce=n(m4,"CODE",{});var hat=s(sce);YGo=r(hat,"model_type"),hat.forEach(t),KGo=r(m4,` property of the config object (either
passed as an argument or loaded from `),lce=n(m4,"CODE",{});var pat=s(lce);ZGo=r(pat,"pretrained_model_name_or_path"),pat.forEach(t),eXo=r(m4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=n(m4,"CODE",{});var _at=s(ice);oXo=r(_at,"pretrained_model_name_or_path"),_at.forEach(t),rXo=r(m4,":"),m4.forEach(t),tXo=i(ta),dn=n(ta,"UL",{});var g4=s(dn);R2=n(g4,"LI",{});var pAe=s(R2);dce=n(pAe,"STRONG",{});var uat=s(dce);aXo=r(uat,"data2vec-audio"),uat.forEach(t),nXo=r(pAe," \u2014 "),NN=n(pAe,"A",{href:!0});var bat=s(NN);sXo=r(bat,"Data2VecAudioForXVector"),bat.forEach(t),lXo=r(pAe," (Data2VecAudio model)"),pAe.forEach(t),iXo=i(g4),S2=n(g4,"LI",{});var _Ae=s(S2);cce=n(_Ae,"STRONG",{});var vat=s(cce);dXo=r(vat,"unispeech-sat"),vat.forEach(t),cXo=r(_Ae," \u2014 "),qN=n(_Ae,"A",{href:!0});var Tat=s(qN);fXo=r(Tat,"UniSpeechSatForXVector"),Tat.forEach(t),mXo=r(_Ae," (UniSpeechSat model)"),_Ae.forEach(t),gXo=i(g4),P2=n(g4,"LI",{});var uAe=s(P2);fce=n(uAe,"STRONG",{});var Fat=s(fce);hXo=r(Fat,"wav2vec2"),Fat.forEach(t),pXo=r(uAe," \u2014 "),ON=n(uAe,"A",{href:!0});var Cat=s(ON);_Xo=r(Cat,"Wav2Vec2ForXVector"),Cat.forEach(t),uXo=r(uAe," (Wav2Vec2 model)"),uAe.forEach(t),bXo=i(g4),$2=n(g4,"LI",{});var bAe=s($2);mce=n(bAe,"STRONG",{});var Mat=s(mce);vXo=r(Mat,"wavlm"),Mat.forEach(t),TXo=r(bAe," \u2014 "),GN=n(bAe,"A",{href:!0});var Eat=s(GN);FXo=r(Eat,"WavLMForXVector"),Eat.forEach(t),CXo=r(bAe," (WavLM model)"),bAe.forEach(t),g4.forEach(t),MXo=i(ta),I2=n(ta,"P",{});var vAe=s(I2);EXo=r(vAe,"The model is set in evaluation mode by default using "),gce=n(vAe,"CODE",{});var yat=s(gce);yXo=r(yat,"model.eval()"),yat.forEach(t),wXo=r(vAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hce=n(vAe,"CODE",{});var wat=s(hce);AXo=r(wat,"model.train()"),wat.forEach(t),vAe.forEach(t),LXo=i(ta),pce=n(ta,"P",{});var Aat=s(pce);BXo=r(Aat,"Examples:"),Aat.forEach(t),xXo=i(ta),m(Xw.$$.fragment,ta),ta.forEach(t),Al.forEach(t),Qxe=i(d),Jd=n(d,"H2",{class:!0});var tSe=s(Jd);j2=n(tSe,"A",{id:!0,class:!0,href:!0});var Lat=s(j2);_ce=n(Lat,"SPAN",{});var Bat=s(_ce);m(Vw.$$.fragment,Bat),Bat.forEach(t),Lat.forEach(t),kXo=i(tSe),uce=n(tSe,"SPAN",{});var xat=s(uce);RXo=r(xat,"AutoModelForMaskedImageModeling"),xat.forEach(t),tSe.forEach(t),Hxe=i(d),hr=n(d,"DIV",{class:!0});var Bl=s(hr);m(zw.$$.fragment,Bl),SXo=i(Bl),Yd=n(Bl,"P",{});var tW=s(Yd);PXo=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),bce=n(tW,"CODE",{});var kat=s(bce);$Xo=r(kat,"from_pretrained()"),kat.forEach(t),IXo=r(tW,"class method or the "),vce=n(tW,"CODE",{});var Rat=s(vce);jXo=r(Rat,"from_config()"),Rat.forEach(t),DXo=r(tW,`class
method.`),tW.forEach(t),NXo=i(Bl),Ww=n(Bl,"P",{});var aSe=s(Ww);qXo=r(aSe,"This class cannot be instantiated directly using "),Tce=n(aSe,"CODE",{});var Sat=s(Tce);OXo=r(Sat,"__init__()"),Sat.forEach(t),GXo=r(aSe," (throws an error)."),aSe.forEach(t),XXo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);m(Qw.$$.fragment,xl),VXo=i(xl),Fce=n(xl,"P",{});var Pat=s(Fce);zXo=r(Pat,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Pat.forEach(t),WXo=i(xl),Kd=n(xl,"P",{});var aW=s(Kd);QXo=r(aW,`Note:
Loading a model from its configuration file does `),Cce=n(aW,"STRONG",{});var $at=s(Cce);HXo=r($at,"not"),$at.forEach(t),UXo=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mce=n(aW,"CODE",{});var Iat=s(Mce);JXo=r(Iat,"from_pretrained()"),Iat.forEach(t),YXo=r(aW,"to load the model weights."),aW.forEach(t),KXo=i(xl),Ece=n(xl,"P",{});var jat=s(Ece);ZXo=r(jat,"Examples:"),jat.forEach(t),eVo=i(xl),m(Hw.$$.fragment,xl),xl.forEach(t),oVo=i(Bl),oo=n(Bl,"DIV",{class:!0});var aa=s(oo);m(Uw.$$.fragment,aa),rVo=i(aa),yce=n(aa,"P",{});var Dat=s(yce);tVo=r(Dat,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Dat.forEach(t),aVo=i(aa),cn=n(aa,"P",{});var h4=s(cn);nVo=r(h4,"The model class to instantiate is selected based on the "),wce=n(h4,"CODE",{});var Nat=s(wce);sVo=r(Nat,"model_type"),Nat.forEach(t),lVo=r(h4,` property of the config object (either
passed as an argument or loaded from `),Ace=n(h4,"CODE",{});var qat=s(Ace);iVo=r(qat,"pretrained_model_name_or_path"),qat.forEach(t),dVo=r(h4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lce=n(h4,"CODE",{});var Oat=s(Lce);cVo=r(Oat,"pretrained_model_name_or_path"),Oat.forEach(t),fVo=r(h4,":"),h4.forEach(t),mVo=i(aa),Zd=n(aa,"UL",{});var nW=s(Zd);D2=n(nW,"LI",{});var TAe=s(D2);Bce=n(TAe,"STRONG",{});var Gat=s(Bce);gVo=r(Gat,"deit"),Gat.forEach(t),hVo=r(TAe," \u2014 "),XN=n(TAe,"A",{href:!0});var Xat=s(XN);pVo=r(Xat,"DeiTForMaskedImageModeling"),Xat.forEach(t),_Vo=r(TAe," (DeiT model)"),TAe.forEach(t),uVo=i(nW),N2=n(nW,"LI",{});var FAe=s(N2);xce=n(FAe,"STRONG",{});var Vat=s(xce);bVo=r(Vat,"swin"),Vat.forEach(t),vVo=r(FAe," \u2014 "),VN=n(FAe,"A",{href:!0});var zat=s(VN);TVo=r(zat,"SwinForMaskedImageModeling"),zat.forEach(t),FVo=r(FAe," (Swin model)"),FAe.forEach(t),CVo=i(nW),q2=n(nW,"LI",{});var CAe=s(q2);kce=n(CAe,"STRONG",{});var Wat=s(kce);MVo=r(Wat,"vit"),Wat.forEach(t),EVo=r(CAe," \u2014 "),zN=n(CAe,"A",{href:!0});var Qat=s(zN);yVo=r(Qat,"ViTForMaskedImageModeling"),Qat.forEach(t),wVo=r(CAe," (ViT model)"),CAe.forEach(t),nW.forEach(t),AVo=i(aa),O2=n(aa,"P",{});var MAe=s(O2);LVo=r(MAe,"The model is set in evaluation mode by default using "),Rce=n(MAe,"CODE",{});var Hat=s(Rce);BVo=r(Hat,"model.eval()"),Hat.forEach(t),xVo=r(MAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sce=n(MAe,"CODE",{});var Uat=s(Sce);kVo=r(Uat,"model.train()"),Uat.forEach(t),MAe.forEach(t),RVo=i(aa),Pce=n(aa,"P",{});var Jat=s(Pce);SVo=r(Jat,"Examples:"),Jat.forEach(t),PVo=i(aa),m(Jw.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),Uxe=i(d),ec=n(d,"H2",{class:!0});var nSe=s(ec);G2=n(nSe,"A",{id:!0,class:!0,href:!0});var Yat=s(G2);$ce=n(Yat,"SPAN",{});var Kat=s($ce);m(Yw.$$.fragment,Kat),Kat.forEach(t),Yat.forEach(t),$Vo=i(nSe),Ice=n(nSe,"SPAN",{});var Zat=s(Ice);IVo=r(Zat,"AutoModelForObjectDetection"),Zat.forEach(t),nSe.forEach(t),Jxe=i(d),pr=n(d,"DIV",{class:!0});var kl=s(pr);m(Kw.$$.fragment,kl),jVo=i(kl),oc=n(kl,"P",{});var sW=s(oc);DVo=r(sW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jce=n(sW,"CODE",{});var ent=s(jce);NVo=r(ent,"from_pretrained()"),ent.forEach(t),qVo=r(sW,"class method or the "),Dce=n(sW,"CODE",{});var ont=s(Dce);OVo=r(ont,"from_config()"),ont.forEach(t),GVo=r(sW,`class
method.`),sW.forEach(t),XVo=i(kl),Zw=n(kl,"P",{});var sSe=s(Zw);VVo=r(sSe,"This class cannot be instantiated directly using "),Nce=n(sSe,"CODE",{});var rnt=s(Nce);zVo=r(rnt,"__init__()"),rnt.forEach(t),WVo=r(sSe," (throws an error)."),sSe.forEach(t),QVo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);m(e6.$$.fragment,Rl),HVo=i(Rl),qce=n(Rl,"P",{});var tnt=s(qce);UVo=r(tnt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),tnt.forEach(t),JVo=i(Rl),rc=n(Rl,"P",{});var lW=s(rc);YVo=r(lW,`Note:
Loading a model from its configuration file does `),Oce=n(lW,"STRONG",{});var ant=s(Oce);KVo=r(ant,"not"),ant.forEach(t),ZVo=r(lW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gce=n(lW,"CODE",{});var nnt=s(Gce);ezo=r(nnt,"from_pretrained()"),nnt.forEach(t),ozo=r(lW,"to load the model weights."),lW.forEach(t),rzo=i(Rl),Xce=n(Rl,"P",{});var snt=s(Xce);tzo=r(snt,"Examples:"),snt.forEach(t),azo=i(Rl),m(o6.$$.fragment,Rl),Rl.forEach(t),nzo=i(kl),ro=n(kl,"DIV",{class:!0});var na=s(ro);m(r6.$$.fragment,na),szo=i(na),Vce=n(na,"P",{});var lnt=s(Vce);lzo=r(lnt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),lnt.forEach(t),izo=i(na),fn=n(na,"P",{});var p4=s(fn);dzo=r(p4,"The model class to instantiate is selected based on the "),zce=n(p4,"CODE",{});var int=s(zce);czo=r(int,"model_type"),int.forEach(t),fzo=r(p4,` property of the config object (either
passed as an argument or loaded from `),Wce=n(p4,"CODE",{});var dnt=s(Wce);mzo=r(dnt,"pretrained_model_name_or_path"),dnt.forEach(t),gzo=r(p4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qce=n(p4,"CODE",{});var cnt=s(Qce);hzo=r(cnt,"pretrained_model_name_or_path"),cnt.forEach(t),pzo=r(p4,":"),p4.forEach(t),_zo=i(na),Hce=n(na,"UL",{});var fnt=s(Hce);X2=n(fnt,"LI",{});var EAe=s(X2);Uce=n(EAe,"STRONG",{});var mnt=s(Uce);uzo=r(mnt,"detr"),mnt.forEach(t),bzo=r(EAe," \u2014 "),WN=n(EAe,"A",{href:!0});var gnt=s(WN);vzo=r(gnt,"DetrForObjectDetection"),gnt.forEach(t),Tzo=r(EAe," (DETR model)"),EAe.forEach(t),fnt.forEach(t),Fzo=i(na),V2=n(na,"P",{});var yAe=s(V2);Czo=r(yAe,"The model is set in evaluation mode by default using "),Jce=n(yAe,"CODE",{});var hnt=s(Jce);Mzo=r(hnt,"model.eval()"),hnt.forEach(t),Ezo=r(yAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yce=n(yAe,"CODE",{});var pnt=s(Yce);yzo=r(pnt,"model.train()"),pnt.forEach(t),yAe.forEach(t),wzo=i(na),Kce=n(na,"P",{});var _nt=s(Kce);Azo=r(_nt,"Examples:"),_nt.forEach(t),Lzo=i(na),m(t6.$$.fragment,na),na.forEach(t),kl.forEach(t),Yxe=i(d),tc=n(d,"H2",{class:!0});var lSe=s(tc);z2=n(lSe,"A",{id:!0,class:!0,href:!0});var unt=s(z2);Zce=n(unt,"SPAN",{});var bnt=s(Zce);m(a6.$$.fragment,bnt),bnt.forEach(t),unt.forEach(t),Bzo=i(lSe),efe=n(lSe,"SPAN",{});var vnt=s(efe);xzo=r(vnt,"AutoModelForImageSegmentation"),vnt.forEach(t),lSe.forEach(t),Kxe=i(d),_r=n(d,"DIV",{class:!0});var Sl=s(_r);m(n6.$$.fragment,Sl),kzo=i(Sl),ac=n(Sl,"P",{});var iW=s(ac);Rzo=r(iW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ofe=n(iW,"CODE",{});var Tnt=s(ofe);Szo=r(Tnt,"from_pretrained()"),Tnt.forEach(t),Pzo=r(iW,"class method or the "),rfe=n(iW,"CODE",{});var Fnt=s(rfe);$zo=r(Fnt,"from_config()"),Fnt.forEach(t),Izo=r(iW,`class
method.`),iW.forEach(t),jzo=i(Sl),s6=n(Sl,"P",{});var iSe=s(s6);Dzo=r(iSe,"This class cannot be instantiated directly using "),tfe=n(iSe,"CODE",{});var Cnt=s(tfe);Nzo=r(Cnt,"__init__()"),Cnt.forEach(t),qzo=r(iSe," (throws an error)."),iSe.forEach(t),Ozo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);m(l6.$$.fragment,Pl),Gzo=i(Pl),afe=n(Pl,"P",{});var Mnt=s(afe);Xzo=r(Mnt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Mnt.forEach(t),Vzo=i(Pl),nc=n(Pl,"P",{});var dW=s(nc);zzo=r(dW,`Note:
Loading a model from its configuration file does `),nfe=n(dW,"STRONG",{});var Ent=s(nfe);Wzo=r(Ent,"not"),Ent.forEach(t),Qzo=r(dW,` load the model weights. It only affects the
model\u2019s configuration. Use `),sfe=n(dW,"CODE",{});var ynt=s(sfe);Hzo=r(ynt,"from_pretrained()"),ynt.forEach(t),Uzo=r(dW,"to load the model weights."),dW.forEach(t),Jzo=i(Pl),lfe=n(Pl,"P",{});var wnt=s(lfe);Yzo=r(wnt,"Examples:"),wnt.forEach(t),Kzo=i(Pl),m(i6.$$.fragment,Pl),Pl.forEach(t),Zzo=i(Sl),to=n(Sl,"DIV",{class:!0});var sa=s(to);m(d6.$$.fragment,sa),eWo=i(sa),ife=n(sa,"P",{});var Ant=s(ife);oWo=r(Ant,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Ant.forEach(t),rWo=i(sa),mn=n(sa,"P",{});var _4=s(mn);tWo=r(_4,"The model class to instantiate is selected based on the "),dfe=n(_4,"CODE",{});var Lnt=s(dfe);aWo=r(Lnt,"model_type"),Lnt.forEach(t),nWo=r(_4,` property of the config object (either
passed as an argument or loaded from `),cfe=n(_4,"CODE",{});var Bnt=s(cfe);sWo=r(Bnt,"pretrained_model_name_or_path"),Bnt.forEach(t),lWo=r(_4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ffe=n(_4,"CODE",{});var xnt=s(ffe);iWo=r(xnt,"pretrained_model_name_or_path"),xnt.forEach(t),dWo=r(_4,":"),_4.forEach(t),cWo=i(sa),mfe=n(sa,"UL",{});var knt=s(mfe);W2=n(knt,"LI",{});var wAe=s(W2);gfe=n(wAe,"STRONG",{});var Rnt=s(gfe);fWo=r(Rnt,"detr"),Rnt.forEach(t),mWo=r(wAe," \u2014 "),QN=n(wAe,"A",{href:!0});var Snt=s(QN);gWo=r(Snt,"DetrForSegmentation"),Snt.forEach(t),hWo=r(wAe," (DETR model)"),wAe.forEach(t),knt.forEach(t),pWo=i(sa),Q2=n(sa,"P",{});var AAe=s(Q2);_Wo=r(AAe,"The model is set in evaluation mode by default using "),hfe=n(AAe,"CODE",{});var Pnt=s(hfe);uWo=r(Pnt,"model.eval()"),Pnt.forEach(t),bWo=r(AAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pfe=n(AAe,"CODE",{});var $nt=s(pfe);vWo=r($nt,"model.train()"),$nt.forEach(t),AAe.forEach(t),TWo=i(sa),_fe=n(sa,"P",{});var Int=s(_fe);FWo=r(Int,"Examples:"),Int.forEach(t),CWo=i(sa),m(c6.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),Zxe=i(d),sc=n(d,"H2",{class:!0});var dSe=s(sc);H2=n(dSe,"A",{id:!0,class:!0,href:!0});var jnt=s(H2);ufe=n(jnt,"SPAN",{});var Dnt=s(ufe);m(f6.$$.fragment,Dnt),Dnt.forEach(t),jnt.forEach(t),MWo=i(dSe),bfe=n(dSe,"SPAN",{});var Nnt=s(bfe);EWo=r(Nnt,"AutoModelForSemanticSegmentation"),Nnt.forEach(t),dSe.forEach(t),eke=i(d),ur=n(d,"DIV",{class:!0});var $l=s(ur);m(m6.$$.fragment,$l),yWo=i($l),lc=n($l,"P",{});var cW=s(lc);wWo=r(cW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),vfe=n(cW,"CODE",{});var qnt=s(vfe);AWo=r(qnt,"from_pretrained()"),qnt.forEach(t),LWo=r(cW,"class method or the "),Tfe=n(cW,"CODE",{});var Ont=s(Tfe);BWo=r(Ont,"from_config()"),Ont.forEach(t),xWo=r(cW,`class
method.`),cW.forEach(t),kWo=i($l),g6=n($l,"P",{});var cSe=s(g6);RWo=r(cSe,"This class cannot be instantiated directly using "),Ffe=n(cSe,"CODE",{});var Gnt=s(Ffe);SWo=r(Gnt,"__init__()"),Gnt.forEach(t),PWo=r(cSe," (throws an error)."),cSe.forEach(t),$Wo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(h6.$$.fragment,Il),IWo=i(Il),Cfe=n(Il,"P",{});var Xnt=s(Cfe);jWo=r(Xnt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Xnt.forEach(t),DWo=i(Il),ic=n(Il,"P",{});var fW=s(ic);NWo=r(fW,`Note:
Loading a model from its configuration file does `),Mfe=n(fW,"STRONG",{});var Vnt=s(Mfe);qWo=r(Vnt,"not"),Vnt.forEach(t),OWo=r(fW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Efe=n(fW,"CODE",{});var znt=s(Efe);GWo=r(znt,"from_pretrained()"),znt.forEach(t),XWo=r(fW,"to load the model weights."),fW.forEach(t),VWo=i(Il),yfe=n(Il,"P",{});var Wnt=s(yfe);zWo=r(Wnt,"Examples:"),Wnt.forEach(t),WWo=i(Il),m(p6.$$.fragment,Il),Il.forEach(t),QWo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(_6.$$.fragment,la),HWo=i(la),wfe=n(la,"P",{});var Qnt=s(wfe);UWo=r(Qnt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Qnt.forEach(t),JWo=i(la),gn=n(la,"P",{});var u4=s(gn);YWo=r(u4,"The model class to instantiate is selected based on the "),Afe=n(u4,"CODE",{});var Hnt=s(Afe);KWo=r(Hnt,"model_type"),Hnt.forEach(t),ZWo=r(u4,` property of the config object (either
passed as an argument or loaded from `),Lfe=n(u4,"CODE",{});var Unt=s(Lfe);eQo=r(Unt,"pretrained_model_name_or_path"),Unt.forEach(t),oQo=r(u4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bfe=n(u4,"CODE",{});var Jnt=s(Bfe);rQo=r(Jnt,"pretrained_model_name_or_path"),Jnt.forEach(t),tQo=r(u4,":"),u4.forEach(t),aQo=i(la),u6=n(la,"UL",{});var fSe=s(u6);U2=n(fSe,"LI",{});var LAe=s(U2);xfe=n(LAe,"STRONG",{});var Ynt=s(xfe);nQo=r(Ynt,"beit"),Ynt.forEach(t),sQo=r(LAe," \u2014 "),HN=n(LAe,"A",{href:!0});var Knt=s(HN);lQo=r(Knt,"BeitForSemanticSegmentation"),Knt.forEach(t),iQo=r(LAe," (BEiT model)"),LAe.forEach(t),dQo=i(fSe),J2=n(fSe,"LI",{});var BAe=s(J2);kfe=n(BAe,"STRONG",{});var Znt=s(kfe);cQo=r(Znt,"segformer"),Znt.forEach(t),fQo=r(BAe," \u2014 "),UN=n(BAe,"A",{href:!0});var est=s(UN);mQo=r(est,"SegformerForSemanticSegmentation"),est.forEach(t),gQo=r(BAe," (SegFormer model)"),BAe.forEach(t),fSe.forEach(t),hQo=i(la),Y2=n(la,"P",{});var xAe=s(Y2);pQo=r(xAe,"The model is set in evaluation mode by default using "),Rfe=n(xAe,"CODE",{});var ost=s(Rfe);_Qo=r(ost,"model.eval()"),ost.forEach(t),uQo=r(xAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sfe=n(xAe,"CODE",{});var rst=s(Sfe);bQo=r(rst,"model.train()"),rst.forEach(t),xAe.forEach(t),vQo=i(la),Pfe=n(la,"P",{});var tst=s(Pfe);TQo=r(tst,"Examples:"),tst.forEach(t),FQo=i(la),m(b6.$$.fragment,la),la.forEach(t),$l.forEach(t),oke=i(d),dc=n(d,"H2",{class:!0});var mSe=s(dc);K2=n(mSe,"A",{id:!0,class:!0,href:!0});var ast=s(K2);$fe=n(ast,"SPAN",{});var nst=s($fe);m(v6.$$.fragment,nst),nst.forEach(t),ast.forEach(t),CQo=i(mSe),Ife=n(mSe,"SPAN",{});var sst=s(Ife);MQo=r(sst,"AutoModelForInstanceSegmentation"),sst.forEach(t),mSe.forEach(t),rke=i(d),br=n(d,"DIV",{class:!0});var jl=s(br);m(T6.$$.fragment,jl),EQo=i(jl),cc=n(jl,"P",{});var mW=s(cc);yQo=r(mW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),jfe=n(mW,"CODE",{});var lst=s(jfe);wQo=r(lst,"from_pretrained()"),lst.forEach(t),AQo=r(mW,"class method or the "),Dfe=n(mW,"CODE",{});var ist=s(Dfe);LQo=r(ist,"from_config()"),ist.forEach(t),BQo=r(mW,`class
method.`),mW.forEach(t),xQo=i(jl),F6=n(jl,"P",{});var gSe=s(F6);kQo=r(gSe,"This class cannot be instantiated directly using "),Nfe=n(gSe,"CODE",{});var dst=s(Nfe);RQo=r(dst,"__init__()"),dst.forEach(t),SQo=r(gSe," (throws an error)."),gSe.forEach(t),PQo=i(jl),mt=n(jl,"DIV",{class:!0});var Dl=s(mt);m(C6.$$.fragment,Dl),$Qo=i(Dl),qfe=n(Dl,"P",{});var cst=s(qfe);IQo=r(cst,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),cst.forEach(t),jQo=i(Dl),fc=n(Dl,"P",{});var gW=s(fc);DQo=r(gW,`Note:
Loading a model from its configuration file does `),Ofe=n(gW,"STRONG",{});var fst=s(Ofe);NQo=r(fst,"not"),fst.forEach(t),qQo=r(gW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gfe=n(gW,"CODE",{});var mst=s(Gfe);OQo=r(mst,"from_pretrained()"),mst.forEach(t),GQo=r(gW,"to load the model weights."),gW.forEach(t),XQo=i(Dl),Xfe=n(Dl,"P",{});var gst=s(Xfe);VQo=r(gst,"Examples:"),gst.forEach(t),zQo=i(Dl),m(M6.$$.fragment,Dl),Dl.forEach(t),WQo=i(jl),no=n(jl,"DIV",{class:!0});var ia=s(no);m(E6.$$.fragment,ia),QQo=i(ia),Vfe=n(ia,"P",{});var hst=s(Vfe);HQo=r(hst,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),hst.forEach(t),UQo=i(ia),hn=n(ia,"P",{});var b4=s(hn);JQo=r(b4,"The model class to instantiate is selected based on the "),zfe=n(b4,"CODE",{});var pst=s(zfe);YQo=r(pst,"model_type"),pst.forEach(t),KQo=r(b4,` property of the config object (either
passed as an argument or loaded from `),Wfe=n(b4,"CODE",{});var _st=s(Wfe);ZQo=r(_st,"pretrained_model_name_or_path"),_st.forEach(t),eHo=r(b4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qfe=n(b4,"CODE",{});var ust=s(Qfe);oHo=r(ust,"pretrained_model_name_or_path"),ust.forEach(t),rHo=r(b4,":"),b4.forEach(t),tHo=i(ia),Hfe=n(ia,"UL",{});var bst=s(Hfe);Z2=n(bst,"LI",{});var kAe=s(Z2);Ufe=n(kAe,"STRONG",{});var vst=s(Ufe);aHo=r(vst,"maskformer"),vst.forEach(t),nHo=r(kAe," \u2014 "),JN=n(kAe,"A",{href:!0});var Tst=s(JN);sHo=r(Tst,"MaskFormerForInstanceSegmentation"),Tst.forEach(t),lHo=r(kAe," (MaskFormer model)"),kAe.forEach(t),bst.forEach(t),iHo=i(ia),ev=n(ia,"P",{});var RAe=s(ev);dHo=r(RAe,"The model is set in evaluation mode by default using "),Jfe=n(RAe,"CODE",{});var Fst=s(Jfe);cHo=r(Fst,"model.eval()"),Fst.forEach(t),fHo=r(RAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yfe=n(RAe,"CODE",{});var Cst=s(Yfe);mHo=r(Cst,"model.train()"),Cst.forEach(t),RAe.forEach(t),gHo=i(ia),Kfe=n(ia,"P",{});var Mst=s(Kfe);hHo=r(Mst,"Examples:"),Mst.forEach(t),pHo=i(ia),m(y6.$$.fragment,ia),ia.forEach(t),jl.forEach(t),tke=i(d),mc=n(d,"H2",{class:!0});var hSe=s(mc);ov=n(hSe,"A",{id:!0,class:!0,href:!0});var Est=s(ov);Zfe=n(Est,"SPAN",{});var yst=s(Zfe);m(w6.$$.fragment,yst),yst.forEach(t),Est.forEach(t),_Ho=i(hSe),eme=n(hSe,"SPAN",{});var wst=s(eme);uHo=r(wst,"TFAutoModel"),wst.forEach(t),hSe.forEach(t),ake=i(d),vr=n(d,"DIV",{class:!0});var Nl=s(vr);m(A6.$$.fragment,Nl),bHo=i(Nl),gc=n(Nl,"P",{});var hW=s(gc);vHo=r(hW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ome=n(hW,"CODE",{});var Ast=s(ome);THo=r(Ast,"from_pretrained()"),Ast.forEach(t),FHo=r(hW,"class method or the "),rme=n(hW,"CODE",{});var Lst=s(rme);CHo=r(Lst,"from_config()"),Lst.forEach(t),MHo=r(hW,`class
method.`),hW.forEach(t),EHo=i(Nl),L6=n(Nl,"P",{});var pSe=s(L6);yHo=r(pSe,"This class cannot be instantiated directly using "),tme=n(pSe,"CODE",{});var Bst=s(tme);wHo=r(Bst,"__init__()"),Bst.forEach(t),AHo=r(pSe," (throws an error)."),pSe.forEach(t),LHo=i(Nl),gt=n(Nl,"DIV",{class:!0});var ql=s(gt);m(B6.$$.fragment,ql),BHo=i(ql),ame=n(ql,"P",{});var xst=s(ame);xHo=r(xst,"Instantiates one of the base model classes of the library from a configuration."),xst.forEach(t),kHo=i(ql),hc=n(ql,"P",{});var pW=s(hc);RHo=r(pW,`Note:
Loading a model from its configuration file does `),nme=n(pW,"STRONG",{});var kst=s(nme);SHo=r(kst,"not"),kst.forEach(t),PHo=r(pW,` load the model weights. It only affects the
model\u2019s configuration. Use `),sme=n(pW,"CODE",{});var Rst=s(sme);$Ho=r(Rst,"from_pretrained()"),Rst.forEach(t),IHo=r(pW,"to load the model weights."),pW.forEach(t),jHo=i(ql),lme=n(ql,"P",{});var Sst=s(lme);DHo=r(Sst,"Examples:"),Sst.forEach(t),NHo=i(ql),m(x6.$$.fragment,ql),ql.forEach(t),qHo=i(Nl),ho=n(Nl,"DIV",{class:!0});var ha=s(ho);m(k6.$$.fragment,ha),OHo=i(ha),ime=n(ha,"P",{});var Pst=s(ime);GHo=r(Pst,"Instantiate one of the base model classes of the library from a pretrained model."),Pst.forEach(t),XHo=i(ha),pn=n(ha,"P",{});var v4=s(pn);VHo=r(v4,"The model class to instantiate is selected based on the "),dme=n(v4,"CODE",{});var $st=s(dme);zHo=r($st,"model_type"),$st.forEach(t),WHo=r(v4,` property of the config object (either
passed as an argument or loaded from `),cme=n(v4,"CODE",{});var Ist=s(cme);QHo=r(Ist,"pretrained_model_name_or_path"),Ist.forEach(t),HHo=r(v4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fme=n(v4,"CODE",{});var jst=s(fme);UHo=r(jst,"pretrained_model_name_or_path"),jst.forEach(t),JHo=r(v4,":"),v4.forEach(t),YHo=i(ha),B=n(ha,"UL",{});var x=s(B);rv=n(x,"LI",{});var SAe=s(rv);mme=n(SAe,"STRONG",{});var Dst=s(mme);KHo=r(Dst,"albert"),Dst.forEach(t),ZHo=r(SAe," \u2014 "),YN=n(SAe,"A",{href:!0});var Nst=s(YN);eUo=r(Nst,"TFAlbertModel"),Nst.forEach(t),oUo=r(SAe," (ALBERT model)"),SAe.forEach(t),rUo=i(x),tv=n(x,"LI",{});var PAe=s(tv);gme=n(PAe,"STRONG",{});var qst=s(gme);tUo=r(qst,"bart"),qst.forEach(t),aUo=r(PAe," \u2014 "),KN=n(PAe,"A",{href:!0});var Ost=s(KN);nUo=r(Ost,"TFBartModel"),Ost.forEach(t),sUo=r(PAe," (BART model)"),PAe.forEach(t),lUo=i(x),av=n(x,"LI",{});var $Ae=s(av);hme=n($Ae,"STRONG",{});var Gst=s(hme);iUo=r(Gst,"bert"),Gst.forEach(t),dUo=r($Ae," \u2014 "),ZN=n($Ae,"A",{href:!0});var Xst=s(ZN);cUo=r(Xst,"TFBertModel"),Xst.forEach(t),fUo=r($Ae," (BERT model)"),$Ae.forEach(t),mUo=i(x),nv=n(x,"LI",{});var IAe=s(nv);pme=n(IAe,"STRONG",{});var Vst=s(pme);gUo=r(Vst,"blenderbot"),Vst.forEach(t),hUo=r(IAe," \u2014 "),eq=n(IAe,"A",{href:!0});var zst=s(eq);pUo=r(zst,"TFBlenderbotModel"),zst.forEach(t),_Uo=r(IAe," (Blenderbot model)"),IAe.forEach(t),uUo=i(x),sv=n(x,"LI",{});var jAe=s(sv);_me=n(jAe,"STRONG",{});var Wst=s(_me);bUo=r(Wst,"blenderbot-small"),Wst.forEach(t),vUo=r(jAe," \u2014 "),oq=n(jAe,"A",{href:!0});var Qst=s(oq);TUo=r(Qst,"TFBlenderbotSmallModel"),Qst.forEach(t),FUo=r(jAe," (BlenderbotSmall model)"),jAe.forEach(t),CUo=i(x),lv=n(x,"LI",{});var DAe=s(lv);ume=n(DAe,"STRONG",{});var Hst=s(ume);MUo=r(Hst,"camembert"),Hst.forEach(t),EUo=r(DAe," \u2014 "),rq=n(DAe,"A",{href:!0});var Ust=s(rq);yUo=r(Ust,"TFCamembertModel"),Ust.forEach(t),wUo=r(DAe," (CamemBERT model)"),DAe.forEach(t),AUo=i(x),iv=n(x,"LI",{});var NAe=s(iv);bme=n(NAe,"STRONG",{});var Jst=s(bme);LUo=r(Jst,"clip"),Jst.forEach(t),BUo=r(NAe," \u2014 "),tq=n(NAe,"A",{href:!0});var Yst=s(tq);xUo=r(Yst,"TFCLIPModel"),Yst.forEach(t),kUo=r(NAe," (CLIP model)"),NAe.forEach(t),RUo=i(x),dv=n(x,"LI",{});var qAe=s(dv);vme=n(qAe,"STRONG",{});var Kst=s(vme);SUo=r(Kst,"convbert"),Kst.forEach(t),PUo=r(qAe," \u2014 "),aq=n(qAe,"A",{href:!0});var Zst=s(aq);$Uo=r(Zst,"TFConvBertModel"),Zst.forEach(t),IUo=r(qAe," (ConvBERT model)"),qAe.forEach(t),jUo=i(x),cv=n(x,"LI",{});var OAe=s(cv);Tme=n(OAe,"STRONG",{});var elt=s(Tme);DUo=r(elt,"convnext"),elt.forEach(t),NUo=r(OAe," \u2014 "),nq=n(OAe,"A",{href:!0});var olt=s(nq);qUo=r(olt,"TFConvNextModel"),olt.forEach(t),OUo=r(OAe," (ConvNext model)"),OAe.forEach(t),GUo=i(x),fv=n(x,"LI",{});var GAe=s(fv);Fme=n(GAe,"STRONG",{});var rlt=s(Fme);XUo=r(rlt,"ctrl"),rlt.forEach(t),VUo=r(GAe," \u2014 "),sq=n(GAe,"A",{href:!0});var tlt=s(sq);zUo=r(tlt,"TFCTRLModel"),tlt.forEach(t),WUo=r(GAe," (CTRL model)"),GAe.forEach(t),QUo=i(x),mv=n(x,"LI",{});var XAe=s(mv);Cme=n(XAe,"STRONG",{});var alt=s(Cme);HUo=r(alt,"deberta"),alt.forEach(t),UUo=r(XAe," \u2014 "),lq=n(XAe,"A",{href:!0});var nlt=s(lq);JUo=r(nlt,"TFDebertaModel"),nlt.forEach(t),YUo=r(XAe," (DeBERTa model)"),XAe.forEach(t),KUo=i(x),gv=n(x,"LI",{});var VAe=s(gv);Mme=n(VAe,"STRONG",{});var slt=s(Mme);ZUo=r(slt,"deberta-v2"),slt.forEach(t),eJo=r(VAe," \u2014 "),iq=n(VAe,"A",{href:!0});var llt=s(iq);oJo=r(llt,"TFDebertaV2Model"),llt.forEach(t),rJo=r(VAe," (DeBERTa-v2 model)"),VAe.forEach(t),tJo=i(x),hv=n(x,"LI",{});var zAe=s(hv);Eme=n(zAe,"STRONG",{});var ilt=s(Eme);aJo=r(ilt,"distilbert"),ilt.forEach(t),nJo=r(zAe," \u2014 "),dq=n(zAe,"A",{href:!0});var dlt=s(dq);sJo=r(dlt,"TFDistilBertModel"),dlt.forEach(t),lJo=r(zAe," (DistilBERT model)"),zAe.forEach(t),iJo=i(x),pv=n(x,"LI",{});var WAe=s(pv);yme=n(WAe,"STRONG",{});var clt=s(yme);dJo=r(clt,"dpr"),clt.forEach(t),cJo=r(WAe," \u2014 "),cq=n(WAe,"A",{href:!0});var flt=s(cq);fJo=r(flt,"TFDPRQuestionEncoder"),flt.forEach(t),mJo=r(WAe," (DPR model)"),WAe.forEach(t),gJo=i(x),_v=n(x,"LI",{});var QAe=s(_v);wme=n(QAe,"STRONG",{});var mlt=s(wme);hJo=r(mlt,"electra"),mlt.forEach(t),pJo=r(QAe," \u2014 "),fq=n(QAe,"A",{href:!0});var glt=s(fq);_Jo=r(glt,"TFElectraModel"),glt.forEach(t),uJo=r(QAe," (ELECTRA model)"),QAe.forEach(t),bJo=i(x),uv=n(x,"LI",{});var HAe=s(uv);Ame=n(HAe,"STRONG",{});var hlt=s(Ame);vJo=r(hlt,"flaubert"),hlt.forEach(t),TJo=r(HAe," \u2014 "),mq=n(HAe,"A",{href:!0});var plt=s(mq);FJo=r(plt,"TFFlaubertModel"),plt.forEach(t),CJo=r(HAe," (FlauBERT model)"),HAe.forEach(t),MJo=i(x),Os=n(x,"LI",{});var j7=s(Os);Lme=n(j7,"STRONG",{});var _lt=s(Lme);EJo=r(_lt,"funnel"),_lt.forEach(t),yJo=r(j7," \u2014 "),gq=n(j7,"A",{href:!0});var ult=s(gq);wJo=r(ult,"TFFunnelModel"),ult.forEach(t),AJo=r(j7," or "),hq=n(j7,"A",{href:!0});var blt=s(hq);LJo=r(blt,"TFFunnelBaseModel"),blt.forEach(t),BJo=r(j7," (Funnel Transformer model)"),j7.forEach(t),xJo=i(x),bv=n(x,"LI",{});var UAe=s(bv);Bme=n(UAe,"STRONG",{});var vlt=s(Bme);kJo=r(vlt,"gpt2"),vlt.forEach(t),RJo=r(UAe," \u2014 "),pq=n(UAe,"A",{href:!0});var Tlt=s(pq);SJo=r(Tlt,"TFGPT2Model"),Tlt.forEach(t),PJo=r(UAe," (OpenAI GPT-2 model)"),UAe.forEach(t),$Jo=i(x),vv=n(x,"LI",{});var JAe=s(vv);xme=n(JAe,"STRONG",{});var Flt=s(xme);IJo=r(Flt,"hubert"),Flt.forEach(t),jJo=r(JAe," \u2014 "),_q=n(JAe,"A",{href:!0});var Clt=s(_q);DJo=r(Clt,"TFHubertModel"),Clt.forEach(t),NJo=r(JAe," (Hubert model)"),JAe.forEach(t),qJo=i(x),Tv=n(x,"LI",{});var YAe=s(Tv);kme=n(YAe,"STRONG",{});var Mlt=s(kme);OJo=r(Mlt,"layoutlm"),Mlt.forEach(t),GJo=r(YAe," \u2014 "),uq=n(YAe,"A",{href:!0});var Elt=s(uq);XJo=r(Elt,"TFLayoutLMModel"),Elt.forEach(t),VJo=r(YAe," (LayoutLM model)"),YAe.forEach(t),zJo=i(x),Fv=n(x,"LI",{});var KAe=s(Fv);Rme=n(KAe,"STRONG",{});var ylt=s(Rme);WJo=r(ylt,"led"),ylt.forEach(t),QJo=r(KAe," \u2014 "),bq=n(KAe,"A",{href:!0});var wlt=s(bq);HJo=r(wlt,"TFLEDModel"),wlt.forEach(t),UJo=r(KAe," (LED model)"),KAe.forEach(t),JJo=i(x),Cv=n(x,"LI",{});var ZAe=s(Cv);Sme=n(ZAe,"STRONG",{});var Alt=s(Sme);YJo=r(Alt,"longformer"),Alt.forEach(t),KJo=r(ZAe," \u2014 "),vq=n(ZAe,"A",{href:!0});var Llt=s(vq);ZJo=r(Llt,"TFLongformerModel"),Llt.forEach(t),eYo=r(ZAe," (Longformer model)"),ZAe.forEach(t),oYo=i(x),Mv=n(x,"LI",{});var e0e=s(Mv);Pme=n(e0e,"STRONG",{});var Blt=s(Pme);rYo=r(Blt,"lxmert"),Blt.forEach(t),tYo=r(e0e," \u2014 "),Tq=n(e0e,"A",{href:!0});var xlt=s(Tq);aYo=r(xlt,"TFLxmertModel"),xlt.forEach(t),nYo=r(e0e," (LXMERT model)"),e0e.forEach(t),sYo=i(x),Ev=n(x,"LI",{});var o0e=s(Ev);$me=n(o0e,"STRONG",{});var klt=s($me);lYo=r(klt,"marian"),klt.forEach(t),iYo=r(o0e," \u2014 "),Fq=n(o0e,"A",{href:!0});var Rlt=s(Fq);dYo=r(Rlt,"TFMarianModel"),Rlt.forEach(t),cYo=r(o0e," (Marian model)"),o0e.forEach(t),fYo=i(x),yv=n(x,"LI",{});var r0e=s(yv);Ime=n(r0e,"STRONG",{});var Slt=s(Ime);mYo=r(Slt,"mbart"),Slt.forEach(t),gYo=r(r0e," \u2014 "),Cq=n(r0e,"A",{href:!0});var Plt=s(Cq);hYo=r(Plt,"TFMBartModel"),Plt.forEach(t),pYo=r(r0e," (mBART model)"),r0e.forEach(t),_Yo=i(x),wv=n(x,"LI",{});var t0e=s(wv);jme=n(t0e,"STRONG",{});var $lt=s(jme);uYo=r($lt,"mobilebert"),$lt.forEach(t),bYo=r(t0e," \u2014 "),Mq=n(t0e,"A",{href:!0});var Ilt=s(Mq);vYo=r(Ilt,"TFMobileBertModel"),Ilt.forEach(t),TYo=r(t0e," (MobileBERT model)"),t0e.forEach(t),FYo=i(x),Av=n(x,"LI",{});var a0e=s(Av);Dme=n(a0e,"STRONG",{});var jlt=s(Dme);CYo=r(jlt,"mpnet"),jlt.forEach(t),MYo=r(a0e," \u2014 "),Eq=n(a0e,"A",{href:!0});var Dlt=s(Eq);EYo=r(Dlt,"TFMPNetModel"),Dlt.forEach(t),yYo=r(a0e," (MPNet model)"),a0e.forEach(t),wYo=i(x),Lv=n(x,"LI",{});var n0e=s(Lv);Nme=n(n0e,"STRONG",{});var Nlt=s(Nme);AYo=r(Nlt,"mt5"),Nlt.forEach(t),LYo=r(n0e," \u2014 "),yq=n(n0e,"A",{href:!0});var qlt=s(yq);BYo=r(qlt,"TFMT5Model"),qlt.forEach(t),xYo=r(n0e," (mT5 model)"),n0e.forEach(t),kYo=i(x),Bv=n(x,"LI",{});var s0e=s(Bv);qme=n(s0e,"STRONG",{});var Olt=s(qme);RYo=r(Olt,"openai-gpt"),Olt.forEach(t),SYo=r(s0e," \u2014 "),wq=n(s0e,"A",{href:!0});var Glt=s(wq);PYo=r(Glt,"TFOpenAIGPTModel"),Glt.forEach(t),$Yo=r(s0e," (OpenAI GPT model)"),s0e.forEach(t),IYo=i(x),xv=n(x,"LI",{});var l0e=s(xv);Ome=n(l0e,"STRONG",{});var Xlt=s(Ome);jYo=r(Xlt,"pegasus"),Xlt.forEach(t),DYo=r(l0e," \u2014 "),Aq=n(l0e,"A",{href:!0});var Vlt=s(Aq);NYo=r(Vlt,"TFPegasusModel"),Vlt.forEach(t),qYo=r(l0e," (Pegasus model)"),l0e.forEach(t),OYo=i(x),kv=n(x,"LI",{});var i0e=s(kv);Gme=n(i0e,"STRONG",{});var zlt=s(Gme);GYo=r(zlt,"rembert"),zlt.forEach(t),XYo=r(i0e," \u2014 "),Lq=n(i0e,"A",{href:!0});var Wlt=s(Lq);VYo=r(Wlt,"TFRemBertModel"),Wlt.forEach(t),zYo=r(i0e," (RemBERT model)"),i0e.forEach(t),WYo=i(x),Rv=n(x,"LI",{});var d0e=s(Rv);Xme=n(d0e,"STRONG",{});var Qlt=s(Xme);QYo=r(Qlt,"roberta"),Qlt.forEach(t),HYo=r(d0e," \u2014 "),Bq=n(d0e,"A",{href:!0});var Hlt=s(Bq);UYo=r(Hlt,"TFRobertaModel"),Hlt.forEach(t),JYo=r(d0e," (RoBERTa model)"),d0e.forEach(t),YYo=i(x),Sv=n(x,"LI",{});var c0e=s(Sv);Vme=n(c0e,"STRONG",{});var Ult=s(Vme);KYo=r(Ult,"roformer"),Ult.forEach(t),ZYo=r(c0e," \u2014 "),xq=n(c0e,"A",{href:!0});var Jlt=s(xq);eKo=r(Jlt,"TFRoFormerModel"),Jlt.forEach(t),oKo=r(c0e," (RoFormer model)"),c0e.forEach(t),rKo=i(x),Pv=n(x,"LI",{});var f0e=s(Pv);zme=n(f0e,"STRONG",{});var Ylt=s(zme);tKo=r(Ylt,"speech_to_text"),Ylt.forEach(t),aKo=r(f0e," \u2014 "),kq=n(f0e,"A",{href:!0});var Klt=s(kq);nKo=r(Klt,"TFSpeech2TextModel"),Klt.forEach(t),sKo=r(f0e," (Speech2Text model)"),f0e.forEach(t),lKo=i(x),$v=n(x,"LI",{});var m0e=s($v);Wme=n(m0e,"STRONG",{});var Zlt=s(Wme);iKo=r(Zlt,"t5"),Zlt.forEach(t),dKo=r(m0e," \u2014 "),Rq=n(m0e,"A",{href:!0});var eit=s(Rq);cKo=r(eit,"TFT5Model"),eit.forEach(t),fKo=r(m0e," (T5 model)"),m0e.forEach(t),mKo=i(x),Iv=n(x,"LI",{});var g0e=s(Iv);Qme=n(g0e,"STRONG",{});var oit=s(Qme);gKo=r(oit,"tapas"),oit.forEach(t),hKo=r(g0e," \u2014 "),Sq=n(g0e,"A",{href:!0});var rit=s(Sq);pKo=r(rit,"TFTapasModel"),rit.forEach(t),_Ko=r(g0e," (TAPAS model)"),g0e.forEach(t),uKo=i(x),jv=n(x,"LI",{});var h0e=s(jv);Hme=n(h0e,"STRONG",{});var tit=s(Hme);bKo=r(tit,"transfo-xl"),tit.forEach(t),vKo=r(h0e," \u2014 "),Pq=n(h0e,"A",{href:!0});var ait=s(Pq);TKo=r(ait,"TFTransfoXLModel"),ait.forEach(t),FKo=r(h0e," (Transformer-XL model)"),h0e.forEach(t),CKo=i(x),Dv=n(x,"LI",{});var p0e=s(Dv);Ume=n(p0e,"STRONG",{});var nit=s(Ume);MKo=r(nit,"vit"),nit.forEach(t),EKo=r(p0e," \u2014 "),$q=n(p0e,"A",{href:!0});var sit=s($q);yKo=r(sit,"TFViTModel"),sit.forEach(t),wKo=r(p0e," (ViT model)"),p0e.forEach(t),AKo=i(x),Nv=n(x,"LI",{});var _0e=s(Nv);Jme=n(_0e,"STRONG",{});var lit=s(Jme);LKo=r(lit,"wav2vec2"),lit.forEach(t),BKo=r(_0e," \u2014 "),Iq=n(_0e,"A",{href:!0});var iit=s(Iq);xKo=r(iit,"TFWav2Vec2Model"),iit.forEach(t),kKo=r(_0e," (Wav2Vec2 model)"),_0e.forEach(t),RKo=i(x),qv=n(x,"LI",{});var u0e=s(qv);Yme=n(u0e,"STRONG",{});var dit=s(Yme);SKo=r(dit,"xlm"),dit.forEach(t),PKo=r(u0e," \u2014 "),jq=n(u0e,"A",{href:!0});var cit=s(jq);$Ko=r(cit,"TFXLMModel"),cit.forEach(t),IKo=r(u0e," (XLM model)"),u0e.forEach(t),jKo=i(x),Ov=n(x,"LI",{});var b0e=s(Ov);Kme=n(b0e,"STRONG",{});var fit=s(Kme);DKo=r(fit,"xlm-roberta"),fit.forEach(t),NKo=r(b0e," \u2014 "),Dq=n(b0e,"A",{href:!0});var mit=s(Dq);qKo=r(mit,"TFXLMRobertaModel"),mit.forEach(t),OKo=r(b0e," (XLM-RoBERTa model)"),b0e.forEach(t),GKo=i(x),Gv=n(x,"LI",{});var v0e=s(Gv);Zme=n(v0e,"STRONG",{});var git=s(Zme);XKo=r(git,"xlnet"),git.forEach(t),VKo=r(v0e," \u2014 "),Nq=n(v0e,"A",{href:!0});var hit=s(Nq);zKo=r(hit,"TFXLNetModel"),hit.forEach(t),WKo=r(v0e," (XLNet model)"),v0e.forEach(t),x.forEach(t),QKo=i(ha),ege=n(ha,"P",{});var pit=s(ege);HKo=r(pit,"Examples:"),pit.forEach(t),UKo=i(ha),m(R6.$$.fragment,ha),ha.forEach(t),Nl.forEach(t),nke=i(d),pc=n(d,"H2",{class:!0});var _Se=s(pc);Xv=n(_Se,"A",{id:!0,class:!0,href:!0});var _it=s(Xv);oge=n(_it,"SPAN",{});var uit=s(oge);m(S6.$$.fragment,uit),uit.forEach(t),_it.forEach(t),JKo=i(_Se),rge=n(_Se,"SPAN",{});var bit=s(rge);YKo=r(bit,"TFAutoModelForPreTraining"),bit.forEach(t),_Se.forEach(t),ske=i(d),Tr=n(d,"DIV",{class:!0});var Ol=s(Tr);m(P6.$$.fragment,Ol),KKo=i(Ol),_c=n(Ol,"P",{});var _W=s(_c);ZKo=r(_W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tge=n(_W,"CODE",{});var vit=s(tge);eZo=r(vit,"from_pretrained()"),vit.forEach(t),oZo=r(_W,"class method or the "),age=n(_W,"CODE",{});var Tit=s(age);rZo=r(Tit,"from_config()"),Tit.forEach(t),tZo=r(_W,`class
method.`),_W.forEach(t),aZo=i(Ol),$6=n(Ol,"P",{});var uSe=s($6);nZo=r(uSe,"This class cannot be instantiated directly using "),nge=n(uSe,"CODE",{});var Fit=s(nge);sZo=r(Fit,"__init__()"),Fit.forEach(t),lZo=r(uSe," (throws an error)."),uSe.forEach(t),iZo=i(Ol),ht=n(Ol,"DIV",{class:!0});var Gl=s(ht);m(I6.$$.fragment,Gl),dZo=i(Gl),sge=n(Gl,"P",{});var Cit=s(sge);cZo=r(Cit,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Cit.forEach(t),fZo=i(Gl),uc=n(Gl,"P",{});var uW=s(uc);mZo=r(uW,`Note:
Loading a model from its configuration file does `),lge=n(uW,"STRONG",{});var Mit=s(lge);gZo=r(Mit,"not"),Mit.forEach(t),hZo=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ige=n(uW,"CODE",{});var Eit=s(ige);pZo=r(Eit,"from_pretrained()"),Eit.forEach(t),_Zo=r(uW,"to load the model weights."),uW.forEach(t),uZo=i(Gl),dge=n(Gl,"P",{});var yit=s(dge);bZo=r(yit,"Examples:"),yit.forEach(t),vZo=i(Gl),m(j6.$$.fragment,Gl),Gl.forEach(t),TZo=i(Ol),po=n(Ol,"DIV",{class:!0});var pa=s(po);m(D6.$$.fragment,pa),FZo=i(pa),cge=n(pa,"P",{});var wit=s(cge);CZo=r(wit,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wit.forEach(t),MZo=i(pa),_n=n(pa,"P",{});var T4=s(_n);EZo=r(T4,"The model class to instantiate is selected based on the "),fge=n(T4,"CODE",{});var Ait=s(fge);yZo=r(Ait,"model_type"),Ait.forEach(t),wZo=r(T4,` property of the config object (either
passed as an argument or loaded from `),mge=n(T4,"CODE",{});var Lit=s(mge);AZo=r(Lit,"pretrained_model_name_or_path"),Lit.forEach(t),LZo=r(T4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gge=n(T4,"CODE",{});var Bit=s(gge);BZo=r(Bit,"pretrained_model_name_or_path"),Bit.forEach(t),xZo=r(T4,":"),T4.forEach(t),kZo=i(pa),H=n(pa,"UL",{});var U=s(H);Vv=n(U,"LI",{});var T0e=s(Vv);hge=n(T0e,"STRONG",{});var xit=s(hge);RZo=r(xit,"albert"),xit.forEach(t),SZo=r(T0e," \u2014 "),qq=n(T0e,"A",{href:!0});var kit=s(qq);PZo=r(kit,"TFAlbertForPreTraining"),kit.forEach(t),$Zo=r(T0e," (ALBERT model)"),T0e.forEach(t),IZo=i(U),zv=n(U,"LI",{});var F0e=s(zv);pge=n(F0e,"STRONG",{});var Rit=s(pge);jZo=r(Rit,"bart"),Rit.forEach(t),DZo=r(F0e," \u2014 "),Oq=n(F0e,"A",{href:!0});var Sit=s(Oq);NZo=r(Sit,"TFBartForConditionalGeneration"),Sit.forEach(t),qZo=r(F0e," (BART model)"),F0e.forEach(t),OZo=i(U),Wv=n(U,"LI",{});var C0e=s(Wv);_ge=n(C0e,"STRONG",{});var Pit=s(_ge);GZo=r(Pit,"bert"),Pit.forEach(t),XZo=r(C0e," \u2014 "),Gq=n(C0e,"A",{href:!0});var $it=s(Gq);VZo=r($it,"TFBertForPreTraining"),$it.forEach(t),zZo=r(C0e," (BERT model)"),C0e.forEach(t),WZo=i(U),Qv=n(U,"LI",{});var M0e=s(Qv);uge=n(M0e,"STRONG",{});var Iit=s(uge);QZo=r(Iit,"camembert"),Iit.forEach(t),HZo=r(M0e," \u2014 "),Xq=n(M0e,"A",{href:!0});var jit=s(Xq);UZo=r(jit,"TFCamembertForMaskedLM"),jit.forEach(t),JZo=r(M0e," (CamemBERT model)"),M0e.forEach(t),YZo=i(U),Hv=n(U,"LI",{});var E0e=s(Hv);bge=n(E0e,"STRONG",{});var Dit=s(bge);KZo=r(Dit,"ctrl"),Dit.forEach(t),ZZo=r(E0e," \u2014 "),Vq=n(E0e,"A",{href:!0});var Nit=s(Vq);eer=r(Nit,"TFCTRLLMHeadModel"),Nit.forEach(t),oer=r(E0e," (CTRL model)"),E0e.forEach(t),rer=i(U),Uv=n(U,"LI",{});var y0e=s(Uv);vge=n(y0e,"STRONG",{});var qit=s(vge);ter=r(qit,"distilbert"),qit.forEach(t),aer=r(y0e," \u2014 "),zq=n(y0e,"A",{href:!0});var Oit=s(zq);ner=r(Oit,"TFDistilBertForMaskedLM"),Oit.forEach(t),ser=r(y0e," (DistilBERT model)"),y0e.forEach(t),ler=i(U),Jv=n(U,"LI",{});var w0e=s(Jv);Tge=n(w0e,"STRONG",{});var Git=s(Tge);ier=r(Git,"electra"),Git.forEach(t),der=r(w0e," \u2014 "),Wq=n(w0e,"A",{href:!0});var Xit=s(Wq);cer=r(Xit,"TFElectraForPreTraining"),Xit.forEach(t),fer=r(w0e," (ELECTRA model)"),w0e.forEach(t),mer=i(U),Yv=n(U,"LI",{});var A0e=s(Yv);Fge=n(A0e,"STRONG",{});var Vit=s(Fge);ger=r(Vit,"flaubert"),Vit.forEach(t),her=r(A0e," \u2014 "),Qq=n(A0e,"A",{href:!0});var zit=s(Qq);per=r(zit,"TFFlaubertWithLMHeadModel"),zit.forEach(t),_er=r(A0e," (FlauBERT model)"),A0e.forEach(t),uer=i(U),Kv=n(U,"LI",{});var L0e=s(Kv);Cge=n(L0e,"STRONG",{});var Wit=s(Cge);ber=r(Wit,"funnel"),Wit.forEach(t),ver=r(L0e," \u2014 "),Hq=n(L0e,"A",{href:!0});var Qit=s(Hq);Ter=r(Qit,"TFFunnelForPreTraining"),Qit.forEach(t),Fer=r(L0e," (Funnel Transformer model)"),L0e.forEach(t),Cer=i(U),Zv=n(U,"LI",{});var B0e=s(Zv);Mge=n(B0e,"STRONG",{});var Hit=s(Mge);Mer=r(Hit,"gpt2"),Hit.forEach(t),Eer=r(B0e," \u2014 "),Uq=n(B0e,"A",{href:!0});var Uit=s(Uq);yer=r(Uit,"TFGPT2LMHeadModel"),Uit.forEach(t),wer=r(B0e," (OpenAI GPT-2 model)"),B0e.forEach(t),Aer=i(U),eT=n(U,"LI",{});var x0e=s(eT);Ege=n(x0e,"STRONG",{});var Jit=s(Ege);Ler=r(Jit,"layoutlm"),Jit.forEach(t),Ber=r(x0e," \u2014 "),Jq=n(x0e,"A",{href:!0});var Yit=s(Jq);xer=r(Yit,"TFLayoutLMForMaskedLM"),Yit.forEach(t),ker=r(x0e," (LayoutLM model)"),x0e.forEach(t),Rer=i(U),oT=n(U,"LI",{});var k0e=s(oT);yge=n(k0e,"STRONG",{});var Kit=s(yge);Ser=r(Kit,"lxmert"),Kit.forEach(t),Per=r(k0e," \u2014 "),Yq=n(k0e,"A",{href:!0});var Zit=s(Yq);$er=r(Zit,"TFLxmertForPreTraining"),Zit.forEach(t),Ier=r(k0e," (LXMERT model)"),k0e.forEach(t),jer=i(U),rT=n(U,"LI",{});var R0e=s(rT);wge=n(R0e,"STRONG",{});var edt=s(wge);Der=r(edt,"mobilebert"),edt.forEach(t),Ner=r(R0e," \u2014 "),Kq=n(R0e,"A",{href:!0});var odt=s(Kq);qer=r(odt,"TFMobileBertForPreTraining"),odt.forEach(t),Oer=r(R0e," (MobileBERT model)"),R0e.forEach(t),Ger=i(U),tT=n(U,"LI",{});var S0e=s(tT);Age=n(S0e,"STRONG",{});var rdt=s(Age);Xer=r(rdt,"mpnet"),rdt.forEach(t),Ver=r(S0e," \u2014 "),Zq=n(S0e,"A",{href:!0});var tdt=s(Zq);zer=r(tdt,"TFMPNetForMaskedLM"),tdt.forEach(t),Wer=r(S0e," (MPNet model)"),S0e.forEach(t),Qer=i(U),aT=n(U,"LI",{});var P0e=s(aT);Lge=n(P0e,"STRONG",{});var adt=s(Lge);Her=r(adt,"openai-gpt"),adt.forEach(t),Uer=r(P0e," \u2014 "),eO=n(P0e,"A",{href:!0});var ndt=s(eO);Jer=r(ndt,"TFOpenAIGPTLMHeadModel"),ndt.forEach(t),Yer=r(P0e," (OpenAI GPT model)"),P0e.forEach(t),Ker=i(U),nT=n(U,"LI",{});var $0e=s(nT);Bge=n($0e,"STRONG",{});var sdt=s(Bge);Zer=r(sdt,"roberta"),sdt.forEach(t),eor=r($0e," \u2014 "),oO=n($0e,"A",{href:!0});var ldt=s(oO);oor=r(ldt,"TFRobertaForMaskedLM"),ldt.forEach(t),ror=r($0e," (RoBERTa model)"),$0e.forEach(t),tor=i(U),sT=n(U,"LI",{});var I0e=s(sT);xge=n(I0e,"STRONG",{});var idt=s(xge);aor=r(idt,"t5"),idt.forEach(t),nor=r(I0e," \u2014 "),rO=n(I0e,"A",{href:!0});var ddt=s(rO);sor=r(ddt,"TFT5ForConditionalGeneration"),ddt.forEach(t),lor=r(I0e," (T5 model)"),I0e.forEach(t),ior=i(U),lT=n(U,"LI",{});var j0e=s(lT);kge=n(j0e,"STRONG",{});var cdt=s(kge);dor=r(cdt,"tapas"),cdt.forEach(t),cor=r(j0e," \u2014 "),tO=n(j0e,"A",{href:!0});var fdt=s(tO);mor=r(fdt,"TFTapasForMaskedLM"),fdt.forEach(t),gor=r(j0e," (TAPAS model)"),j0e.forEach(t),hor=i(U),iT=n(U,"LI",{});var D0e=s(iT);Rge=n(D0e,"STRONG",{});var mdt=s(Rge);por=r(mdt,"transfo-xl"),mdt.forEach(t),_or=r(D0e," \u2014 "),aO=n(D0e,"A",{href:!0});var gdt=s(aO);uor=r(gdt,"TFTransfoXLLMHeadModel"),gdt.forEach(t),bor=r(D0e," (Transformer-XL model)"),D0e.forEach(t),vor=i(U),dT=n(U,"LI",{});var N0e=s(dT);Sge=n(N0e,"STRONG",{});var hdt=s(Sge);Tor=r(hdt,"xlm"),hdt.forEach(t),For=r(N0e," \u2014 "),nO=n(N0e,"A",{href:!0});var pdt=s(nO);Cor=r(pdt,"TFXLMWithLMHeadModel"),pdt.forEach(t),Mor=r(N0e," (XLM model)"),N0e.forEach(t),Eor=i(U),cT=n(U,"LI",{});var q0e=s(cT);Pge=n(q0e,"STRONG",{});var _dt=s(Pge);yor=r(_dt,"xlm-roberta"),_dt.forEach(t),wor=r(q0e," \u2014 "),sO=n(q0e,"A",{href:!0});var udt=s(sO);Aor=r(udt,"TFXLMRobertaForMaskedLM"),udt.forEach(t),Lor=r(q0e," (XLM-RoBERTa model)"),q0e.forEach(t),Bor=i(U),fT=n(U,"LI",{});var O0e=s(fT);$ge=n(O0e,"STRONG",{});var bdt=s($ge);xor=r(bdt,"xlnet"),bdt.forEach(t),kor=r(O0e," \u2014 "),lO=n(O0e,"A",{href:!0});var vdt=s(lO);Ror=r(vdt,"TFXLNetLMHeadModel"),vdt.forEach(t),Sor=r(O0e," (XLNet model)"),O0e.forEach(t),U.forEach(t),Por=i(pa),Ige=n(pa,"P",{});var Tdt=s(Ige);$or=r(Tdt,"Examples:"),Tdt.forEach(t),Ior=i(pa),m(N6.$$.fragment,pa),pa.forEach(t),Ol.forEach(t),lke=i(d),bc=n(d,"H2",{class:!0});var bSe=s(bc);mT=n(bSe,"A",{id:!0,class:!0,href:!0});var Fdt=s(mT);jge=n(Fdt,"SPAN",{});var Cdt=s(jge);m(q6.$$.fragment,Cdt),Cdt.forEach(t),Fdt.forEach(t),jor=i(bSe),Dge=n(bSe,"SPAN",{});var Mdt=s(Dge);Dor=r(Mdt,"TFAutoModelForCausalLM"),Mdt.forEach(t),bSe.forEach(t),ike=i(d),Fr=n(d,"DIV",{class:!0});var Xl=s(Fr);m(O6.$$.fragment,Xl),Nor=i(Xl),vc=n(Xl,"P",{});var bW=s(vc);qor=r(bW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Nge=n(bW,"CODE",{});var Edt=s(Nge);Oor=r(Edt,"from_pretrained()"),Edt.forEach(t),Gor=r(bW,"class method or the "),qge=n(bW,"CODE",{});var ydt=s(qge);Xor=r(ydt,"from_config()"),ydt.forEach(t),Vor=r(bW,`class
method.`),bW.forEach(t),zor=i(Xl),G6=n(Xl,"P",{});var vSe=s(G6);Wor=r(vSe,"This class cannot be instantiated directly using "),Oge=n(vSe,"CODE",{});var wdt=s(Oge);Qor=r(wdt,"__init__()"),wdt.forEach(t),Hor=r(vSe," (throws an error)."),vSe.forEach(t),Uor=i(Xl),pt=n(Xl,"DIV",{class:!0});var Vl=s(pt);m(X6.$$.fragment,Vl),Jor=i(Vl),Gge=n(Vl,"P",{});var Adt=s(Gge);Yor=r(Adt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Adt.forEach(t),Kor=i(Vl),Tc=n(Vl,"P",{});var vW=s(Tc);Zor=r(vW,`Note:
Loading a model from its configuration file does `),Xge=n(vW,"STRONG",{});var Ldt=s(Xge);err=r(Ldt,"not"),Ldt.forEach(t),orr=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vge=n(vW,"CODE",{});var Bdt=s(Vge);rrr=r(Bdt,"from_pretrained()"),Bdt.forEach(t),trr=r(vW,"to load the model weights."),vW.forEach(t),arr=i(Vl),zge=n(Vl,"P",{});var xdt=s(zge);nrr=r(xdt,"Examples:"),xdt.forEach(t),srr=i(Vl),m(V6.$$.fragment,Vl),Vl.forEach(t),lrr=i(Xl),_o=n(Xl,"DIV",{class:!0});var _a=s(_o);m(z6.$$.fragment,_a),irr=i(_a),Wge=n(_a,"P",{});var kdt=s(Wge);drr=r(kdt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kdt.forEach(t),crr=i(_a),un=n(_a,"P",{});var F4=s(un);frr=r(F4,"The model class to instantiate is selected based on the "),Qge=n(F4,"CODE",{});var Rdt=s(Qge);mrr=r(Rdt,"model_type"),Rdt.forEach(t),grr=r(F4,` property of the config object (either
passed as an argument or loaded from `),Hge=n(F4,"CODE",{});var Sdt=s(Hge);hrr=r(Sdt,"pretrained_model_name_or_path"),Sdt.forEach(t),prr=r(F4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=n(F4,"CODE",{});var Pdt=s(Uge);_rr=r(Pdt,"pretrained_model_name_or_path"),Pdt.forEach(t),urr=r(F4,":"),F4.forEach(t),brr=i(_a),pe=n(_a,"UL",{});var Me=s(pe);gT=n(Me,"LI",{});var G0e=s(gT);Jge=n(G0e,"STRONG",{});var $dt=s(Jge);vrr=r($dt,"bert"),$dt.forEach(t),Trr=r(G0e," \u2014 "),iO=n(G0e,"A",{href:!0});var Idt=s(iO);Frr=r(Idt,"TFBertLMHeadModel"),Idt.forEach(t),Crr=r(G0e," (BERT model)"),G0e.forEach(t),Mrr=i(Me),hT=n(Me,"LI",{});var X0e=s(hT);Yge=n(X0e,"STRONG",{});var jdt=s(Yge);Err=r(jdt,"ctrl"),jdt.forEach(t),yrr=r(X0e," \u2014 "),dO=n(X0e,"A",{href:!0});var Ddt=s(dO);wrr=r(Ddt,"TFCTRLLMHeadModel"),Ddt.forEach(t),Arr=r(X0e," (CTRL model)"),X0e.forEach(t),Lrr=i(Me),pT=n(Me,"LI",{});var V0e=s(pT);Kge=n(V0e,"STRONG",{});var Ndt=s(Kge);Brr=r(Ndt,"gpt2"),Ndt.forEach(t),xrr=r(V0e," \u2014 "),cO=n(V0e,"A",{href:!0});var qdt=s(cO);krr=r(qdt,"TFGPT2LMHeadModel"),qdt.forEach(t),Rrr=r(V0e," (OpenAI GPT-2 model)"),V0e.forEach(t),Srr=i(Me),_T=n(Me,"LI",{});var z0e=s(_T);Zge=n(z0e,"STRONG",{});var Odt=s(Zge);Prr=r(Odt,"openai-gpt"),Odt.forEach(t),$rr=r(z0e," \u2014 "),fO=n(z0e,"A",{href:!0});var Gdt=s(fO);Irr=r(Gdt,"TFOpenAIGPTLMHeadModel"),Gdt.forEach(t),jrr=r(z0e," (OpenAI GPT model)"),z0e.forEach(t),Drr=i(Me),uT=n(Me,"LI",{});var W0e=s(uT);ehe=n(W0e,"STRONG",{});var Xdt=s(ehe);Nrr=r(Xdt,"rembert"),Xdt.forEach(t),qrr=r(W0e," \u2014 "),mO=n(W0e,"A",{href:!0});var Vdt=s(mO);Orr=r(Vdt,"TFRemBertForCausalLM"),Vdt.forEach(t),Grr=r(W0e," (RemBERT model)"),W0e.forEach(t),Xrr=i(Me),bT=n(Me,"LI",{});var Q0e=s(bT);ohe=n(Q0e,"STRONG",{});var zdt=s(ohe);Vrr=r(zdt,"roberta"),zdt.forEach(t),zrr=r(Q0e," \u2014 "),gO=n(Q0e,"A",{href:!0});var Wdt=s(gO);Wrr=r(Wdt,"TFRobertaForCausalLM"),Wdt.forEach(t),Qrr=r(Q0e," (RoBERTa model)"),Q0e.forEach(t),Hrr=i(Me),vT=n(Me,"LI",{});var H0e=s(vT);rhe=n(H0e,"STRONG",{});var Qdt=s(rhe);Urr=r(Qdt,"roformer"),Qdt.forEach(t),Jrr=r(H0e," \u2014 "),hO=n(H0e,"A",{href:!0});var Hdt=s(hO);Yrr=r(Hdt,"TFRoFormerForCausalLM"),Hdt.forEach(t),Krr=r(H0e," (RoFormer model)"),H0e.forEach(t),Zrr=i(Me),TT=n(Me,"LI",{});var U0e=s(TT);the=n(U0e,"STRONG",{});var Udt=s(the);etr=r(Udt,"transfo-xl"),Udt.forEach(t),otr=r(U0e," \u2014 "),pO=n(U0e,"A",{href:!0});var Jdt=s(pO);rtr=r(Jdt,"TFTransfoXLLMHeadModel"),Jdt.forEach(t),ttr=r(U0e," (Transformer-XL model)"),U0e.forEach(t),atr=i(Me),FT=n(Me,"LI",{});var J0e=s(FT);ahe=n(J0e,"STRONG",{});var Ydt=s(ahe);ntr=r(Ydt,"xlm"),Ydt.forEach(t),str=r(J0e," \u2014 "),_O=n(J0e,"A",{href:!0});var Kdt=s(_O);ltr=r(Kdt,"TFXLMWithLMHeadModel"),Kdt.forEach(t),itr=r(J0e," (XLM model)"),J0e.forEach(t),dtr=i(Me),CT=n(Me,"LI",{});var Y0e=s(CT);nhe=n(Y0e,"STRONG",{});var Zdt=s(nhe);ctr=r(Zdt,"xlnet"),Zdt.forEach(t),ftr=r(Y0e," \u2014 "),uO=n(Y0e,"A",{href:!0});var ect=s(uO);mtr=r(ect,"TFXLNetLMHeadModel"),ect.forEach(t),gtr=r(Y0e," (XLNet model)"),Y0e.forEach(t),Me.forEach(t),htr=i(_a),she=n(_a,"P",{});var oct=s(she);ptr=r(oct,"Examples:"),oct.forEach(t),_tr=i(_a),m(W6.$$.fragment,_a),_a.forEach(t),Xl.forEach(t),dke=i(d),Fc=n(d,"H2",{class:!0});var TSe=s(Fc);MT=n(TSe,"A",{id:!0,class:!0,href:!0});var rct=s(MT);lhe=n(rct,"SPAN",{});var tct=s(lhe);m(Q6.$$.fragment,tct),tct.forEach(t),rct.forEach(t),utr=i(TSe),ihe=n(TSe,"SPAN",{});var act=s(ihe);btr=r(act,"TFAutoModelForImageClassification"),act.forEach(t),TSe.forEach(t),cke=i(d),Cr=n(d,"DIV",{class:!0});var zl=s(Cr);m(H6.$$.fragment,zl),vtr=i(zl),Cc=n(zl,"P",{});var TW=s(Cc);Ttr=r(TW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dhe=n(TW,"CODE",{});var nct=s(dhe);Ftr=r(nct,"from_pretrained()"),nct.forEach(t),Ctr=r(TW,"class method or the "),che=n(TW,"CODE",{});var sct=s(che);Mtr=r(sct,"from_config()"),sct.forEach(t),Etr=r(TW,`class
method.`),TW.forEach(t),ytr=i(zl),U6=n(zl,"P",{});var FSe=s(U6);wtr=r(FSe,"This class cannot be instantiated directly using "),fhe=n(FSe,"CODE",{});var lct=s(fhe);Atr=r(lct,"__init__()"),lct.forEach(t),Ltr=r(FSe," (throws an error)."),FSe.forEach(t),Btr=i(zl),_t=n(zl,"DIV",{class:!0});var Wl=s(_t);m(J6.$$.fragment,Wl),xtr=i(Wl),mhe=n(Wl,"P",{});var ict=s(mhe);ktr=r(ict,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ict.forEach(t),Rtr=i(Wl),Mc=n(Wl,"P",{});var FW=s(Mc);Str=r(FW,`Note:
Loading a model from its configuration file does `),ghe=n(FW,"STRONG",{});var dct=s(ghe);Ptr=r(dct,"not"),dct.forEach(t),$tr=r(FW,` load the model weights. It only affects the
model\u2019s configuration. Use `),hhe=n(FW,"CODE",{});var cct=s(hhe);Itr=r(cct,"from_pretrained()"),cct.forEach(t),jtr=r(FW,"to load the model weights."),FW.forEach(t),Dtr=i(Wl),phe=n(Wl,"P",{});var fct=s(phe);Ntr=r(fct,"Examples:"),fct.forEach(t),qtr=i(Wl),m(Y6.$$.fragment,Wl),Wl.forEach(t),Otr=i(zl),uo=n(zl,"DIV",{class:!0});var ua=s(uo);m(K6.$$.fragment,ua),Gtr=i(ua),_he=n(ua,"P",{});var mct=s(_he);Xtr=r(mct,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mct.forEach(t),Vtr=i(ua),bn=n(ua,"P",{});var C4=s(bn);ztr=r(C4,"The model class to instantiate is selected based on the "),uhe=n(C4,"CODE",{});var gct=s(uhe);Wtr=r(gct,"model_type"),gct.forEach(t),Qtr=r(C4,` property of the config object (either
passed as an argument or loaded from `),bhe=n(C4,"CODE",{});var hct=s(bhe);Htr=r(hct,"pretrained_model_name_or_path"),hct.forEach(t),Utr=r(C4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vhe=n(C4,"CODE",{});var pct=s(vhe);Jtr=r(pct,"pretrained_model_name_or_path"),pct.forEach(t),Ytr=r(C4,":"),C4.forEach(t),Ktr=i(ua),Z6=n(ua,"UL",{});var CSe=s(Z6);ET=n(CSe,"LI",{});var K0e=s(ET);The=n(K0e,"STRONG",{});var _ct=s(The);Ztr=r(_ct,"convnext"),_ct.forEach(t),ear=r(K0e," \u2014 "),bO=n(K0e,"A",{href:!0});var uct=s(bO);oar=r(uct,"TFConvNextForImageClassification"),uct.forEach(t),rar=r(K0e," (ConvNext model)"),K0e.forEach(t),tar=i(CSe),yT=n(CSe,"LI",{});var Z0e=s(yT);Fhe=n(Z0e,"STRONG",{});var bct=s(Fhe);aar=r(bct,"vit"),bct.forEach(t),nar=r(Z0e," \u2014 "),vO=n(Z0e,"A",{href:!0});var vct=s(vO);sar=r(vct,"TFViTForImageClassification"),vct.forEach(t),lar=r(Z0e," (ViT model)"),Z0e.forEach(t),CSe.forEach(t),iar=i(ua),Che=n(ua,"P",{});var Tct=s(Che);dar=r(Tct,"Examples:"),Tct.forEach(t),car=i(ua),m(eA.$$.fragment,ua),ua.forEach(t),zl.forEach(t),fke=i(d),Ec=n(d,"H2",{class:!0});var MSe=s(Ec);wT=n(MSe,"A",{id:!0,class:!0,href:!0});var Fct=s(wT);Mhe=n(Fct,"SPAN",{});var Cct=s(Mhe);m(oA.$$.fragment,Cct),Cct.forEach(t),Fct.forEach(t),far=i(MSe),Ehe=n(MSe,"SPAN",{});var Mct=s(Ehe);mar=r(Mct,"TFAutoModelForMaskedLM"),Mct.forEach(t),MSe.forEach(t),mke=i(d),Mr=n(d,"DIV",{class:!0});var Ql=s(Mr);m(rA.$$.fragment,Ql),gar=i(Ql),yc=n(Ql,"P",{});var CW=s(yc);har=r(CW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yhe=n(CW,"CODE",{});var Ect=s(yhe);par=r(Ect,"from_pretrained()"),Ect.forEach(t),_ar=r(CW,"class method or the "),whe=n(CW,"CODE",{});var yct=s(whe);uar=r(yct,"from_config()"),yct.forEach(t),bar=r(CW,`class
method.`),CW.forEach(t),Tar=i(Ql),tA=n(Ql,"P",{});var ESe=s(tA);Far=r(ESe,"This class cannot be instantiated directly using "),Ahe=n(ESe,"CODE",{});var wct=s(Ahe);Car=r(wct,"__init__()"),wct.forEach(t),Mar=r(ESe," (throws an error)."),ESe.forEach(t),Ear=i(Ql),ut=n(Ql,"DIV",{class:!0});var Hl=s(ut);m(aA.$$.fragment,Hl),yar=i(Hl),Lhe=n(Hl,"P",{});var Act=s(Lhe);war=r(Act,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Act.forEach(t),Aar=i(Hl),wc=n(Hl,"P",{});var MW=s(wc);Lar=r(MW,`Note:
Loading a model from its configuration file does `),Bhe=n(MW,"STRONG",{});var Lct=s(Bhe);Bar=r(Lct,"not"),Lct.forEach(t),xar=r(MW,` load the model weights. It only affects the
model\u2019s configuration. Use `),xhe=n(MW,"CODE",{});var Bct=s(xhe);kar=r(Bct,"from_pretrained()"),Bct.forEach(t),Rar=r(MW,"to load the model weights."),MW.forEach(t),Sar=i(Hl),khe=n(Hl,"P",{});var xct=s(khe);Par=r(xct,"Examples:"),xct.forEach(t),$ar=i(Hl),m(nA.$$.fragment,Hl),Hl.forEach(t),Iar=i(Ql),bo=n(Ql,"DIV",{class:!0});var ba=s(bo);m(sA.$$.fragment,ba),jar=i(ba),Rhe=n(ba,"P",{});var kct=s(Rhe);Dar=r(kct,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kct.forEach(t),Nar=i(ba),vn=n(ba,"P",{});var M4=s(vn);qar=r(M4,"The model class to instantiate is selected based on the "),She=n(M4,"CODE",{});var Rct=s(She);Oar=r(Rct,"model_type"),Rct.forEach(t),Gar=r(M4,` property of the config object (either
passed as an argument or loaded from `),Phe=n(M4,"CODE",{});var Sct=s(Phe);Xar=r(Sct,"pretrained_model_name_or_path"),Sct.forEach(t),Var=r(M4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=n(M4,"CODE",{});var Pct=s($he);zar=r(Pct,"pretrained_model_name_or_path"),Pct.forEach(t),War=r(M4,":"),M4.forEach(t),Qar=i(ba),Y=n(ba,"UL",{});var ee=s(Y);AT=n(ee,"LI",{});var eLe=s(AT);Ihe=n(eLe,"STRONG",{});var $ct=s(Ihe);Har=r($ct,"albert"),$ct.forEach(t),Uar=r(eLe," \u2014 "),TO=n(eLe,"A",{href:!0});var Ict=s(TO);Jar=r(Ict,"TFAlbertForMaskedLM"),Ict.forEach(t),Yar=r(eLe," (ALBERT model)"),eLe.forEach(t),Kar=i(ee),LT=n(ee,"LI",{});var oLe=s(LT);jhe=n(oLe,"STRONG",{});var jct=s(jhe);Zar=r(jct,"bert"),jct.forEach(t),enr=r(oLe," \u2014 "),FO=n(oLe,"A",{href:!0});var Dct=s(FO);onr=r(Dct,"TFBertForMaskedLM"),Dct.forEach(t),rnr=r(oLe," (BERT model)"),oLe.forEach(t),tnr=i(ee),BT=n(ee,"LI",{});var rLe=s(BT);Dhe=n(rLe,"STRONG",{});var Nct=s(Dhe);anr=r(Nct,"camembert"),Nct.forEach(t),nnr=r(rLe," \u2014 "),CO=n(rLe,"A",{href:!0});var qct=s(CO);snr=r(qct,"TFCamembertForMaskedLM"),qct.forEach(t),lnr=r(rLe," (CamemBERT model)"),rLe.forEach(t),inr=i(ee),xT=n(ee,"LI",{});var tLe=s(xT);Nhe=n(tLe,"STRONG",{});var Oct=s(Nhe);dnr=r(Oct,"convbert"),Oct.forEach(t),cnr=r(tLe," \u2014 "),MO=n(tLe,"A",{href:!0});var Gct=s(MO);fnr=r(Gct,"TFConvBertForMaskedLM"),Gct.forEach(t),mnr=r(tLe," (ConvBERT model)"),tLe.forEach(t),gnr=i(ee),kT=n(ee,"LI",{});var aLe=s(kT);qhe=n(aLe,"STRONG",{});var Xct=s(qhe);hnr=r(Xct,"deberta"),Xct.forEach(t),pnr=r(aLe," \u2014 "),EO=n(aLe,"A",{href:!0});var Vct=s(EO);_nr=r(Vct,"TFDebertaForMaskedLM"),Vct.forEach(t),unr=r(aLe," (DeBERTa model)"),aLe.forEach(t),bnr=i(ee),RT=n(ee,"LI",{});var nLe=s(RT);Ohe=n(nLe,"STRONG",{});var zct=s(Ohe);vnr=r(zct,"deberta-v2"),zct.forEach(t),Tnr=r(nLe," \u2014 "),yO=n(nLe,"A",{href:!0});var Wct=s(yO);Fnr=r(Wct,"TFDebertaV2ForMaskedLM"),Wct.forEach(t),Cnr=r(nLe," (DeBERTa-v2 model)"),nLe.forEach(t),Mnr=i(ee),ST=n(ee,"LI",{});var sLe=s(ST);Ghe=n(sLe,"STRONG",{});var Qct=s(Ghe);Enr=r(Qct,"distilbert"),Qct.forEach(t),ynr=r(sLe," \u2014 "),wO=n(sLe,"A",{href:!0});var Hct=s(wO);wnr=r(Hct,"TFDistilBertForMaskedLM"),Hct.forEach(t),Anr=r(sLe," (DistilBERT model)"),sLe.forEach(t),Lnr=i(ee),PT=n(ee,"LI",{});var lLe=s(PT);Xhe=n(lLe,"STRONG",{});var Uct=s(Xhe);Bnr=r(Uct,"electra"),Uct.forEach(t),xnr=r(lLe," \u2014 "),AO=n(lLe,"A",{href:!0});var Jct=s(AO);knr=r(Jct,"TFElectraForMaskedLM"),Jct.forEach(t),Rnr=r(lLe," (ELECTRA model)"),lLe.forEach(t),Snr=i(ee),$T=n(ee,"LI",{});var iLe=s($T);Vhe=n(iLe,"STRONG",{});var Yct=s(Vhe);Pnr=r(Yct,"flaubert"),Yct.forEach(t),$nr=r(iLe," \u2014 "),LO=n(iLe,"A",{href:!0});var Kct=s(LO);Inr=r(Kct,"TFFlaubertWithLMHeadModel"),Kct.forEach(t),jnr=r(iLe," (FlauBERT model)"),iLe.forEach(t),Dnr=i(ee),IT=n(ee,"LI",{});var dLe=s(IT);zhe=n(dLe,"STRONG",{});var Zct=s(zhe);Nnr=r(Zct,"funnel"),Zct.forEach(t),qnr=r(dLe," \u2014 "),BO=n(dLe,"A",{href:!0});var eft=s(BO);Onr=r(eft,"TFFunnelForMaskedLM"),eft.forEach(t),Gnr=r(dLe," (Funnel Transformer model)"),dLe.forEach(t),Xnr=i(ee),jT=n(ee,"LI",{});var cLe=s(jT);Whe=n(cLe,"STRONG",{});var oft=s(Whe);Vnr=r(oft,"layoutlm"),oft.forEach(t),znr=r(cLe," \u2014 "),xO=n(cLe,"A",{href:!0});var rft=s(xO);Wnr=r(rft,"TFLayoutLMForMaskedLM"),rft.forEach(t),Qnr=r(cLe," (LayoutLM model)"),cLe.forEach(t),Hnr=i(ee),DT=n(ee,"LI",{});var fLe=s(DT);Qhe=n(fLe,"STRONG",{});var tft=s(Qhe);Unr=r(tft,"longformer"),tft.forEach(t),Jnr=r(fLe," \u2014 "),kO=n(fLe,"A",{href:!0});var aft=s(kO);Ynr=r(aft,"TFLongformerForMaskedLM"),aft.forEach(t),Knr=r(fLe," (Longformer model)"),fLe.forEach(t),Znr=i(ee),NT=n(ee,"LI",{});var mLe=s(NT);Hhe=n(mLe,"STRONG",{});var nft=s(Hhe);esr=r(nft,"mobilebert"),nft.forEach(t),osr=r(mLe," \u2014 "),RO=n(mLe,"A",{href:!0});var sft=s(RO);rsr=r(sft,"TFMobileBertForMaskedLM"),sft.forEach(t),tsr=r(mLe," (MobileBERT model)"),mLe.forEach(t),asr=i(ee),qT=n(ee,"LI",{});var gLe=s(qT);Uhe=n(gLe,"STRONG",{});var lft=s(Uhe);nsr=r(lft,"mpnet"),lft.forEach(t),ssr=r(gLe," \u2014 "),SO=n(gLe,"A",{href:!0});var ift=s(SO);lsr=r(ift,"TFMPNetForMaskedLM"),ift.forEach(t),isr=r(gLe," (MPNet model)"),gLe.forEach(t),dsr=i(ee),OT=n(ee,"LI",{});var hLe=s(OT);Jhe=n(hLe,"STRONG",{});var dft=s(Jhe);csr=r(dft,"rembert"),dft.forEach(t),fsr=r(hLe," \u2014 "),PO=n(hLe,"A",{href:!0});var cft=s(PO);msr=r(cft,"TFRemBertForMaskedLM"),cft.forEach(t),gsr=r(hLe," (RemBERT model)"),hLe.forEach(t),hsr=i(ee),GT=n(ee,"LI",{});var pLe=s(GT);Yhe=n(pLe,"STRONG",{});var fft=s(Yhe);psr=r(fft,"roberta"),fft.forEach(t),_sr=r(pLe," \u2014 "),$O=n(pLe,"A",{href:!0});var mft=s($O);usr=r(mft,"TFRobertaForMaskedLM"),mft.forEach(t),bsr=r(pLe," (RoBERTa model)"),pLe.forEach(t),vsr=i(ee),XT=n(ee,"LI",{});var _Le=s(XT);Khe=n(_Le,"STRONG",{});var gft=s(Khe);Tsr=r(gft,"roformer"),gft.forEach(t),Fsr=r(_Le," \u2014 "),IO=n(_Le,"A",{href:!0});var hft=s(IO);Csr=r(hft,"TFRoFormerForMaskedLM"),hft.forEach(t),Msr=r(_Le," (RoFormer model)"),_Le.forEach(t),Esr=i(ee),VT=n(ee,"LI",{});var uLe=s(VT);Zhe=n(uLe,"STRONG",{});var pft=s(Zhe);ysr=r(pft,"tapas"),pft.forEach(t),wsr=r(uLe," \u2014 "),jO=n(uLe,"A",{href:!0});var _ft=s(jO);Asr=r(_ft,"TFTapasForMaskedLM"),_ft.forEach(t),Lsr=r(uLe," (TAPAS model)"),uLe.forEach(t),Bsr=i(ee),zT=n(ee,"LI",{});var bLe=s(zT);epe=n(bLe,"STRONG",{});var uft=s(epe);xsr=r(uft,"xlm"),uft.forEach(t),ksr=r(bLe," \u2014 "),DO=n(bLe,"A",{href:!0});var bft=s(DO);Rsr=r(bft,"TFXLMWithLMHeadModel"),bft.forEach(t),Ssr=r(bLe," (XLM model)"),bLe.forEach(t),Psr=i(ee),WT=n(ee,"LI",{});var vLe=s(WT);ope=n(vLe,"STRONG",{});var vft=s(ope);$sr=r(vft,"xlm-roberta"),vft.forEach(t),Isr=r(vLe," \u2014 "),NO=n(vLe,"A",{href:!0});var Tft=s(NO);jsr=r(Tft,"TFXLMRobertaForMaskedLM"),Tft.forEach(t),Dsr=r(vLe," (XLM-RoBERTa model)"),vLe.forEach(t),ee.forEach(t),Nsr=i(ba),rpe=n(ba,"P",{});var Fft=s(rpe);qsr=r(Fft,"Examples:"),Fft.forEach(t),Osr=i(ba),m(lA.$$.fragment,ba),ba.forEach(t),Ql.forEach(t),gke=i(d),Ac=n(d,"H2",{class:!0});var ySe=s(Ac);QT=n(ySe,"A",{id:!0,class:!0,href:!0});var Cft=s(QT);tpe=n(Cft,"SPAN",{});var Mft=s(tpe);m(iA.$$.fragment,Mft),Mft.forEach(t),Cft.forEach(t),Gsr=i(ySe),ape=n(ySe,"SPAN",{});var Eft=s(ape);Xsr=r(Eft,"TFAutoModelForSeq2SeqLM"),Eft.forEach(t),ySe.forEach(t),hke=i(d),Er=n(d,"DIV",{class:!0});var Ul=s(Er);m(dA.$$.fragment,Ul),Vsr=i(Ul),Lc=n(Ul,"P",{});var EW=s(Lc);zsr=r(EW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),npe=n(EW,"CODE",{});var yft=s(npe);Wsr=r(yft,"from_pretrained()"),yft.forEach(t),Qsr=r(EW,"class method or the "),spe=n(EW,"CODE",{});var wft=s(spe);Hsr=r(wft,"from_config()"),wft.forEach(t),Usr=r(EW,`class
method.`),EW.forEach(t),Jsr=i(Ul),cA=n(Ul,"P",{});var wSe=s(cA);Ysr=r(wSe,"This class cannot be instantiated directly using "),lpe=n(wSe,"CODE",{});var Aft=s(lpe);Ksr=r(Aft,"__init__()"),Aft.forEach(t),Zsr=r(wSe," (throws an error)."),wSe.forEach(t),elr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(fA.$$.fragment,Jl),olr=i(Jl),ipe=n(Jl,"P",{});var Lft=s(ipe);rlr=r(Lft,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Lft.forEach(t),tlr=i(Jl),Bc=n(Jl,"P",{});var yW=s(Bc);alr=r(yW,`Note:
Loading a model from its configuration file does `),dpe=n(yW,"STRONG",{});var Bft=s(dpe);nlr=r(Bft,"not"),Bft.forEach(t),slr=r(yW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cpe=n(yW,"CODE",{});var xft=s(cpe);llr=r(xft,"from_pretrained()"),xft.forEach(t),ilr=r(yW,"to load the model weights."),yW.forEach(t),dlr=i(Jl),fpe=n(Jl,"P",{});var kft=s(fpe);clr=r(kft,"Examples:"),kft.forEach(t),flr=i(Jl),m(mA.$$.fragment,Jl),Jl.forEach(t),mlr=i(Ul),vo=n(Ul,"DIV",{class:!0});var va=s(vo);m(gA.$$.fragment,va),glr=i(va),mpe=n(va,"P",{});var Rft=s(mpe);hlr=r(Rft,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rft.forEach(t),plr=i(va),Tn=n(va,"P",{});var E4=s(Tn);_lr=r(E4,"The model class to instantiate is selected based on the "),gpe=n(E4,"CODE",{});var Sft=s(gpe);ulr=r(Sft,"model_type"),Sft.forEach(t),blr=r(E4,` property of the config object (either
passed as an argument or loaded from `),hpe=n(E4,"CODE",{});var Pft=s(hpe);vlr=r(Pft,"pretrained_model_name_or_path"),Pft.forEach(t),Tlr=r(E4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ppe=n(E4,"CODE",{});var $ft=s(ppe);Flr=r($ft,"pretrained_model_name_or_path"),$ft.forEach(t),Clr=r(E4,":"),E4.forEach(t),Mlr=i(va),_e=n(va,"UL",{});var Ee=s(_e);HT=n(Ee,"LI",{});var TLe=s(HT);_pe=n(TLe,"STRONG",{});var Ift=s(_pe);Elr=r(Ift,"bart"),Ift.forEach(t),ylr=r(TLe," \u2014 "),qO=n(TLe,"A",{href:!0});var jft=s(qO);wlr=r(jft,"TFBartForConditionalGeneration"),jft.forEach(t),Alr=r(TLe," (BART model)"),TLe.forEach(t),Llr=i(Ee),UT=n(Ee,"LI",{});var FLe=s(UT);upe=n(FLe,"STRONG",{});var Dft=s(upe);Blr=r(Dft,"blenderbot"),Dft.forEach(t),xlr=r(FLe," \u2014 "),OO=n(FLe,"A",{href:!0});var Nft=s(OO);klr=r(Nft,"TFBlenderbotForConditionalGeneration"),Nft.forEach(t),Rlr=r(FLe," (Blenderbot model)"),FLe.forEach(t),Slr=i(Ee),JT=n(Ee,"LI",{});var CLe=s(JT);bpe=n(CLe,"STRONG",{});var qft=s(bpe);Plr=r(qft,"blenderbot-small"),qft.forEach(t),$lr=r(CLe," \u2014 "),GO=n(CLe,"A",{href:!0});var Oft=s(GO);Ilr=r(Oft,"TFBlenderbotSmallForConditionalGeneration"),Oft.forEach(t),jlr=r(CLe," (BlenderbotSmall model)"),CLe.forEach(t),Dlr=i(Ee),YT=n(Ee,"LI",{});var MLe=s(YT);vpe=n(MLe,"STRONG",{});var Gft=s(vpe);Nlr=r(Gft,"encoder-decoder"),Gft.forEach(t),qlr=r(MLe," \u2014 "),XO=n(MLe,"A",{href:!0});var Xft=s(XO);Olr=r(Xft,"TFEncoderDecoderModel"),Xft.forEach(t),Glr=r(MLe," (Encoder decoder model)"),MLe.forEach(t),Xlr=i(Ee),KT=n(Ee,"LI",{});var ELe=s(KT);Tpe=n(ELe,"STRONG",{});var Vft=s(Tpe);Vlr=r(Vft,"led"),Vft.forEach(t),zlr=r(ELe," \u2014 "),VO=n(ELe,"A",{href:!0});var zft=s(VO);Wlr=r(zft,"TFLEDForConditionalGeneration"),zft.forEach(t),Qlr=r(ELe," (LED model)"),ELe.forEach(t),Hlr=i(Ee),ZT=n(Ee,"LI",{});var yLe=s(ZT);Fpe=n(yLe,"STRONG",{});var Wft=s(Fpe);Ulr=r(Wft,"marian"),Wft.forEach(t),Jlr=r(yLe," \u2014 "),zO=n(yLe,"A",{href:!0});var Qft=s(zO);Ylr=r(Qft,"TFMarianMTModel"),Qft.forEach(t),Klr=r(yLe," (Marian model)"),yLe.forEach(t),Zlr=i(Ee),e8=n(Ee,"LI",{});var wLe=s(e8);Cpe=n(wLe,"STRONG",{});var Hft=s(Cpe);eir=r(Hft,"mbart"),Hft.forEach(t),oir=r(wLe," \u2014 "),WO=n(wLe,"A",{href:!0});var Uft=s(WO);rir=r(Uft,"TFMBartForConditionalGeneration"),Uft.forEach(t),tir=r(wLe," (mBART model)"),wLe.forEach(t),air=i(Ee),o8=n(Ee,"LI",{});var ALe=s(o8);Mpe=n(ALe,"STRONG",{});var Jft=s(Mpe);nir=r(Jft,"mt5"),Jft.forEach(t),sir=r(ALe," \u2014 "),QO=n(ALe,"A",{href:!0});var Yft=s(QO);lir=r(Yft,"TFMT5ForConditionalGeneration"),Yft.forEach(t),iir=r(ALe," (mT5 model)"),ALe.forEach(t),dir=i(Ee),r8=n(Ee,"LI",{});var LLe=s(r8);Epe=n(LLe,"STRONG",{});var Kft=s(Epe);cir=r(Kft,"pegasus"),Kft.forEach(t),fir=r(LLe," \u2014 "),HO=n(LLe,"A",{href:!0});var Zft=s(HO);mir=r(Zft,"TFPegasusForConditionalGeneration"),Zft.forEach(t),gir=r(LLe," (Pegasus model)"),LLe.forEach(t),hir=i(Ee),t8=n(Ee,"LI",{});var BLe=s(t8);ype=n(BLe,"STRONG",{});var emt=s(ype);pir=r(emt,"t5"),emt.forEach(t),_ir=r(BLe," \u2014 "),UO=n(BLe,"A",{href:!0});var omt=s(UO);uir=r(omt,"TFT5ForConditionalGeneration"),omt.forEach(t),bir=r(BLe," (T5 model)"),BLe.forEach(t),Ee.forEach(t),vir=i(va),wpe=n(va,"P",{});var rmt=s(wpe);Tir=r(rmt,"Examples:"),rmt.forEach(t),Fir=i(va),m(hA.$$.fragment,va),va.forEach(t),Ul.forEach(t),pke=i(d),xc=n(d,"H2",{class:!0});var ASe=s(xc);a8=n(ASe,"A",{id:!0,class:!0,href:!0});var tmt=s(a8);Ape=n(tmt,"SPAN",{});var amt=s(Ape);m(pA.$$.fragment,amt),amt.forEach(t),tmt.forEach(t),Cir=i(ASe),Lpe=n(ASe,"SPAN",{});var nmt=s(Lpe);Mir=r(nmt,"TFAutoModelForSequenceClassification"),nmt.forEach(t),ASe.forEach(t),_ke=i(d),yr=n(d,"DIV",{class:!0});var Yl=s(yr);m(_A.$$.fragment,Yl),Eir=i(Yl),kc=n(Yl,"P",{});var wW=s(kc);yir=r(wW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Bpe=n(wW,"CODE",{});var smt=s(Bpe);wir=r(smt,"from_pretrained()"),smt.forEach(t),Air=r(wW,"class method or the "),xpe=n(wW,"CODE",{});var lmt=s(xpe);Lir=r(lmt,"from_config()"),lmt.forEach(t),Bir=r(wW,`class
method.`),wW.forEach(t),xir=i(Yl),uA=n(Yl,"P",{});var LSe=s(uA);kir=r(LSe,"This class cannot be instantiated directly using "),kpe=n(LSe,"CODE",{});var imt=s(kpe);Rir=r(imt,"__init__()"),imt.forEach(t),Sir=r(LSe," (throws an error)."),LSe.forEach(t),Pir=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m(bA.$$.fragment,Kl),$ir=i(Kl),Rpe=n(Kl,"P",{});var dmt=s(Rpe);Iir=r(dmt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dmt.forEach(t),jir=i(Kl),Rc=n(Kl,"P",{});var AW=s(Rc);Dir=r(AW,`Note:
Loading a model from its configuration file does `),Spe=n(AW,"STRONG",{});var cmt=s(Spe);Nir=r(cmt,"not"),cmt.forEach(t),qir=r(AW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ppe=n(AW,"CODE",{});var fmt=s(Ppe);Oir=r(fmt,"from_pretrained()"),fmt.forEach(t),Gir=r(AW,"to load the model weights."),AW.forEach(t),Xir=i(Kl),$pe=n(Kl,"P",{});var mmt=s($pe);Vir=r(mmt,"Examples:"),mmt.forEach(t),zir=i(Kl),m(vA.$$.fragment,Kl),Kl.forEach(t),Wir=i(Yl),To=n(Yl,"DIV",{class:!0});var Ta=s(To);m(TA.$$.fragment,Ta),Qir=i(Ta),Ipe=n(Ta,"P",{});var gmt=s(Ipe);Hir=r(gmt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gmt.forEach(t),Uir=i(Ta),Fn=n(Ta,"P",{});var y4=s(Fn);Jir=r(y4,"The model class to instantiate is selected based on the "),jpe=n(y4,"CODE",{});var hmt=s(jpe);Yir=r(hmt,"model_type"),hmt.forEach(t),Kir=r(y4,` property of the config object (either
passed as an argument or loaded from `),Dpe=n(y4,"CODE",{});var pmt=s(Dpe);Zir=r(pmt,"pretrained_model_name_or_path"),pmt.forEach(t),edr=r(y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=n(y4,"CODE",{});var _mt=s(Npe);odr=r(_mt,"pretrained_model_name_or_path"),_mt.forEach(t),rdr=r(y4,":"),y4.forEach(t),tdr=i(Ta),V=n(Ta,"UL",{});var W=s(V);n8=n(W,"LI",{});var xLe=s(n8);qpe=n(xLe,"STRONG",{});var umt=s(qpe);adr=r(umt,"albert"),umt.forEach(t),ndr=r(xLe," \u2014 "),JO=n(xLe,"A",{href:!0});var bmt=s(JO);sdr=r(bmt,"TFAlbertForSequenceClassification"),bmt.forEach(t),ldr=r(xLe," (ALBERT model)"),xLe.forEach(t),idr=i(W),s8=n(W,"LI",{});var kLe=s(s8);Ope=n(kLe,"STRONG",{});var vmt=s(Ope);ddr=r(vmt,"bert"),vmt.forEach(t),cdr=r(kLe," \u2014 "),YO=n(kLe,"A",{href:!0});var Tmt=s(YO);fdr=r(Tmt,"TFBertForSequenceClassification"),Tmt.forEach(t),mdr=r(kLe," (BERT model)"),kLe.forEach(t),gdr=i(W),l8=n(W,"LI",{});var RLe=s(l8);Gpe=n(RLe,"STRONG",{});var Fmt=s(Gpe);hdr=r(Fmt,"camembert"),Fmt.forEach(t),pdr=r(RLe," \u2014 "),KO=n(RLe,"A",{href:!0});var Cmt=s(KO);_dr=r(Cmt,"TFCamembertForSequenceClassification"),Cmt.forEach(t),udr=r(RLe," (CamemBERT model)"),RLe.forEach(t),bdr=i(W),i8=n(W,"LI",{});var SLe=s(i8);Xpe=n(SLe,"STRONG",{});var Mmt=s(Xpe);vdr=r(Mmt,"convbert"),Mmt.forEach(t),Tdr=r(SLe," \u2014 "),ZO=n(SLe,"A",{href:!0});var Emt=s(ZO);Fdr=r(Emt,"TFConvBertForSequenceClassification"),Emt.forEach(t),Cdr=r(SLe," (ConvBERT model)"),SLe.forEach(t),Mdr=i(W),d8=n(W,"LI",{});var PLe=s(d8);Vpe=n(PLe,"STRONG",{});var ymt=s(Vpe);Edr=r(ymt,"ctrl"),ymt.forEach(t),ydr=r(PLe," \u2014 "),eG=n(PLe,"A",{href:!0});var wmt=s(eG);wdr=r(wmt,"TFCTRLForSequenceClassification"),wmt.forEach(t),Adr=r(PLe," (CTRL model)"),PLe.forEach(t),Ldr=i(W),c8=n(W,"LI",{});var $Le=s(c8);zpe=n($Le,"STRONG",{});var Amt=s(zpe);Bdr=r(Amt,"deberta"),Amt.forEach(t),xdr=r($Le," \u2014 "),oG=n($Le,"A",{href:!0});var Lmt=s(oG);kdr=r(Lmt,"TFDebertaForSequenceClassification"),Lmt.forEach(t),Rdr=r($Le," (DeBERTa model)"),$Le.forEach(t),Sdr=i(W),f8=n(W,"LI",{});var ILe=s(f8);Wpe=n(ILe,"STRONG",{});var Bmt=s(Wpe);Pdr=r(Bmt,"deberta-v2"),Bmt.forEach(t),$dr=r(ILe," \u2014 "),rG=n(ILe,"A",{href:!0});var xmt=s(rG);Idr=r(xmt,"TFDebertaV2ForSequenceClassification"),xmt.forEach(t),jdr=r(ILe," (DeBERTa-v2 model)"),ILe.forEach(t),Ddr=i(W),m8=n(W,"LI",{});var jLe=s(m8);Qpe=n(jLe,"STRONG",{});var kmt=s(Qpe);Ndr=r(kmt,"distilbert"),kmt.forEach(t),qdr=r(jLe," \u2014 "),tG=n(jLe,"A",{href:!0});var Rmt=s(tG);Odr=r(Rmt,"TFDistilBertForSequenceClassification"),Rmt.forEach(t),Gdr=r(jLe," (DistilBERT model)"),jLe.forEach(t),Xdr=i(W),g8=n(W,"LI",{});var DLe=s(g8);Hpe=n(DLe,"STRONG",{});var Smt=s(Hpe);Vdr=r(Smt,"electra"),Smt.forEach(t),zdr=r(DLe," \u2014 "),aG=n(DLe,"A",{href:!0});var Pmt=s(aG);Wdr=r(Pmt,"TFElectraForSequenceClassification"),Pmt.forEach(t),Qdr=r(DLe," (ELECTRA model)"),DLe.forEach(t),Hdr=i(W),h8=n(W,"LI",{});var NLe=s(h8);Upe=n(NLe,"STRONG",{});var $mt=s(Upe);Udr=r($mt,"flaubert"),$mt.forEach(t),Jdr=r(NLe," \u2014 "),nG=n(NLe,"A",{href:!0});var Imt=s(nG);Ydr=r(Imt,"TFFlaubertForSequenceClassification"),Imt.forEach(t),Kdr=r(NLe," (FlauBERT model)"),NLe.forEach(t),Zdr=i(W),p8=n(W,"LI",{});var qLe=s(p8);Jpe=n(qLe,"STRONG",{});var jmt=s(Jpe);ecr=r(jmt,"funnel"),jmt.forEach(t),ocr=r(qLe," \u2014 "),sG=n(qLe,"A",{href:!0});var Dmt=s(sG);rcr=r(Dmt,"TFFunnelForSequenceClassification"),Dmt.forEach(t),tcr=r(qLe," (Funnel Transformer model)"),qLe.forEach(t),acr=i(W),_8=n(W,"LI",{});var OLe=s(_8);Ype=n(OLe,"STRONG",{});var Nmt=s(Ype);ncr=r(Nmt,"gpt2"),Nmt.forEach(t),scr=r(OLe," \u2014 "),lG=n(OLe,"A",{href:!0});var qmt=s(lG);lcr=r(qmt,"TFGPT2ForSequenceClassification"),qmt.forEach(t),icr=r(OLe," (OpenAI GPT-2 model)"),OLe.forEach(t),dcr=i(W),u8=n(W,"LI",{});var GLe=s(u8);Kpe=n(GLe,"STRONG",{});var Omt=s(Kpe);ccr=r(Omt,"layoutlm"),Omt.forEach(t),fcr=r(GLe," \u2014 "),iG=n(GLe,"A",{href:!0});var Gmt=s(iG);mcr=r(Gmt,"TFLayoutLMForSequenceClassification"),Gmt.forEach(t),gcr=r(GLe," (LayoutLM model)"),GLe.forEach(t),hcr=i(W),b8=n(W,"LI",{});var XLe=s(b8);Zpe=n(XLe,"STRONG",{});var Xmt=s(Zpe);pcr=r(Xmt,"longformer"),Xmt.forEach(t),_cr=r(XLe," \u2014 "),dG=n(XLe,"A",{href:!0});var Vmt=s(dG);ucr=r(Vmt,"TFLongformerForSequenceClassification"),Vmt.forEach(t),bcr=r(XLe," (Longformer model)"),XLe.forEach(t),vcr=i(W),v8=n(W,"LI",{});var VLe=s(v8);e_e=n(VLe,"STRONG",{});var zmt=s(e_e);Tcr=r(zmt,"mobilebert"),zmt.forEach(t),Fcr=r(VLe," \u2014 "),cG=n(VLe,"A",{href:!0});var Wmt=s(cG);Ccr=r(Wmt,"TFMobileBertForSequenceClassification"),Wmt.forEach(t),Mcr=r(VLe," (MobileBERT model)"),VLe.forEach(t),Ecr=i(W),T8=n(W,"LI",{});var zLe=s(T8);o_e=n(zLe,"STRONG",{});var Qmt=s(o_e);ycr=r(Qmt,"mpnet"),Qmt.forEach(t),wcr=r(zLe," \u2014 "),fG=n(zLe,"A",{href:!0});var Hmt=s(fG);Acr=r(Hmt,"TFMPNetForSequenceClassification"),Hmt.forEach(t),Lcr=r(zLe," (MPNet model)"),zLe.forEach(t),Bcr=i(W),F8=n(W,"LI",{});var WLe=s(F8);r_e=n(WLe,"STRONG",{});var Umt=s(r_e);xcr=r(Umt,"openai-gpt"),Umt.forEach(t),kcr=r(WLe," \u2014 "),mG=n(WLe,"A",{href:!0});var Jmt=s(mG);Rcr=r(Jmt,"TFOpenAIGPTForSequenceClassification"),Jmt.forEach(t),Scr=r(WLe," (OpenAI GPT model)"),WLe.forEach(t),Pcr=i(W),C8=n(W,"LI",{});var QLe=s(C8);t_e=n(QLe,"STRONG",{});var Ymt=s(t_e);$cr=r(Ymt,"rembert"),Ymt.forEach(t),Icr=r(QLe," \u2014 "),gG=n(QLe,"A",{href:!0});var Kmt=s(gG);jcr=r(Kmt,"TFRemBertForSequenceClassification"),Kmt.forEach(t),Dcr=r(QLe," (RemBERT model)"),QLe.forEach(t),Ncr=i(W),M8=n(W,"LI",{});var HLe=s(M8);a_e=n(HLe,"STRONG",{});var Zmt=s(a_e);qcr=r(Zmt,"roberta"),Zmt.forEach(t),Ocr=r(HLe," \u2014 "),hG=n(HLe,"A",{href:!0});var egt=s(hG);Gcr=r(egt,"TFRobertaForSequenceClassification"),egt.forEach(t),Xcr=r(HLe," (RoBERTa model)"),HLe.forEach(t),Vcr=i(W),E8=n(W,"LI",{});var ULe=s(E8);n_e=n(ULe,"STRONG",{});var ogt=s(n_e);zcr=r(ogt,"roformer"),ogt.forEach(t),Wcr=r(ULe," \u2014 "),pG=n(ULe,"A",{href:!0});var rgt=s(pG);Qcr=r(rgt,"TFRoFormerForSequenceClassification"),rgt.forEach(t),Hcr=r(ULe," (RoFormer model)"),ULe.forEach(t),Ucr=i(W),y8=n(W,"LI",{});var JLe=s(y8);s_e=n(JLe,"STRONG",{});var tgt=s(s_e);Jcr=r(tgt,"tapas"),tgt.forEach(t),Ycr=r(JLe," \u2014 "),_G=n(JLe,"A",{href:!0});var agt=s(_G);Kcr=r(agt,"TFTapasForSequenceClassification"),agt.forEach(t),Zcr=r(JLe," (TAPAS model)"),JLe.forEach(t),efr=i(W),w8=n(W,"LI",{});var YLe=s(w8);l_e=n(YLe,"STRONG",{});var ngt=s(l_e);ofr=r(ngt,"transfo-xl"),ngt.forEach(t),rfr=r(YLe," \u2014 "),uG=n(YLe,"A",{href:!0});var sgt=s(uG);tfr=r(sgt,"TFTransfoXLForSequenceClassification"),sgt.forEach(t),afr=r(YLe," (Transformer-XL model)"),YLe.forEach(t),nfr=i(W),A8=n(W,"LI",{});var KLe=s(A8);i_e=n(KLe,"STRONG",{});var lgt=s(i_e);sfr=r(lgt,"xlm"),lgt.forEach(t),lfr=r(KLe," \u2014 "),bG=n(KLe,"A",{href:!0});var igt=s(bG);ifr=r(igt,"TFXLMForSequenceClassification"),igt.forEach(t),dfr=r(KLe," (XLM model)"),KLe.forEach(t),cfr=i(W),L8=n(W,"LI",{});var ZLe=s(L8);d_e=n(ZLe,"STRONG",{});var dgt=s(d_e);ffr=r(dgt,"xlm-roberta"),dgt.forEach(t),mfr=r(ZLe," \u2014 "),vG=n(ZLe,"A",{href:!0});var cgt=s(vG);gfr=r(cgt,"TFXLMRobertaForSequenceClassification"),cgt.forEach(t),hfr=r(ZLe," (XLM-RoBERTa model)"),ZLe.forEach(t),pfr=i(W),B8=n(W,"LI",{});var e7e=s(B8);c_e=n(e7e,"STRONG",{});var fgt=s(c_e);_fr=r(fgt,"xlnet"),fgt.forEach(t),ufr=r(e7e," \u2014 "),TG=n(e7e,"A",{href:!0});var mgt=s(TG);bfr=r(mgt,"TFXLNetForSequenceClassification"),mgt.forEach(t),vfr=r(e7e," (XLNet model)"),e7e.forEach(t),W.forEach(t),Tfr=i(Ta),f_e=n(Ta,"P",{});var ggt=s(f_e);Ffr=r(ggt,"Examples:"),ggt.forEach(t),Cfr=i(Ta),m(FA.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),uke=i(d),Sc=n(d,"H2",{class:!0});var BSe=s(Sc);x8=n(BSe,"A",{id:!0,class:!0,href:!0});var hgt=s(x8);m_e=n(hgt,"SPAN",{});var pgt=s(m_e);m(CA.$$.fragment,pgt),pgt.forEach(t),hgt.forEach(t),Mfr=i(BSe),g_e=n(BSe,"SPAN",{});var _gt=s(g_e);Efr=r(_gt,"TFAutoModelForMultipleChoice"),_gt.forEach(t),BSe.forEach(t),bke=i(d),wr=n(d,"DIV",{class:!0});var Zl=s(wr);m(MA.$$.fragment,Zl),yfr=i(Zl),Pc=n(Zl,"P",{});var LW=s(Pc);wfr=r(LW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),h_e=n(LW,"CODE",{});var ugt=s(h_e);Afr=r(ugt,"from_pretrained()"),ugt.forEach(t),Lfr=r(LW,"class method or the "),p_e=n(LW,"CODE",{});var bgt=s(p_e);Bfr=r(bgt,"from_config()"),bgt.forEach(t),xfr=r(LW,`class
method.`),LW.forEach(t),kfr=i(Zl),EA=n(Zl,"P",{});var xSe=s(EA);Rfr=r(xSe,"This class cannot be instantiated directly using "),__e=n(xSe,"CODE",{});var vgt=s(__e);Sfr=r(vgt,"__init__()"),vgt.forEach(t),Pfr=r(xSe," (throws an error)."),xSe.forEach(t),$fr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);m(yA.$$.fragment,ei),Ifr=i(ei),u_e=n(ei,"P",{});var Tgt=s(u_e);jfr=r(Tgt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Tgt.forEach(t),Dfr=i(ei),$c=n(ei,"P",{});var BW=s($c);Nfr=r(BW,`Note:
Loading a model from its configuration file does `),b_e=n(BW,"STRONG",{});var Fgt=s(b_e);qfr=r(Fgt,"not"),Fgt.forEach(t),Ofr=r(BW,` load the model weights. It only affects the
model\u2019s configuration. Use `),v_e=n(BW,"CODE",{});var Cgt=s(v_e);Gfr=r(Cgt,"from_pretrained()"),Cgt.forEach(t),Xfr=r(BW,"to load the model weights."),BW.forEach(t),Vfr=i(ei),T_e=n(ei,"P",{});var Mgt=s(T_e);zfr=r(Mgt,"Examples:"),Mgt.forEach(t),Wfr=i(ei),m(wA.$$.fragment,ei),ei.forEach(t),Qfr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Fa=s(Fo);m(AA.$$.fragment,Fa),Hfr=i(Fa),F_e=n(Fa,"P",{});var Egt=s(F_e);Ufr=r(Egt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Egt.forEach(t),Jfr=i(Fa),Cn=n(Fa,"P",{});var w4=s(Cn);Yfr=r(w4,"The model class to instantiate is selected based on the "),C_e=n(w4,"CODE",{});var ygt=s(C_e);Kfr=r(ygt,"model_type"),ygt.forEach(t),Zfr=r(w4,` property of the config object (either
passed as an argument or loaded from `),M_e=n(w4,"CODE",{});var wgt=s(M_e);emr=r(wgt,"pretrained_model_name_or_path"),wgt.forEach(t),omr=r(w4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=n(w4,"CODE",{});var Agt=s(E_e);rmr=r(Agt,"pretrained_model_name_or_path"),Agt.forEach(t),tmr=r(w4,":"),w4.forEach(t),amr=i(Fa),te=n(Fa,"UL",{});var se=s(te);k8=n(se,"LI",{});var o7e=s(k8);y_e=n(o7e,"STRONG",{});var Lgt=s(y_e);nmr=r(Lgt,"albert"),Lgt.forEach(t),smr=r(o7e," \u2014 "),FG=n(o7e,"A",{href:!0});var Bgt=s(FG);lmr=r(Bgt,"TFAlbertForMultipleChoice"),Bgt.forEach(t),imr=r(o7e," (ALBERT model)"),o7e.forEach(t),dmr=i(se),R8=n(se,"LI",{});var r7e=s(R8);w_e=n(r7e,"STRONG",{});var xgt=s(w_e);cmr=r(xgt,"bert"),xgt.forEach(t),fmr=r(r7e," \u2014 "),CG=n(r7e,"A",{href:!0});var kgt=s(CG);mmr=r(kgt,"TFBertForMultipleChoice"),kgt.forEach(t),gmr=r(r7e," (BERT model)"),r7e.forEach(t),hmr=i(se),S8=n(se,"LI",{});var t7e=s(S8);A_e=n(t7e,"STRONG",{});var Rgt=s(A_e);pmr=r(Rgt,"camembert"),Rgt.forEach(t),_mr=r(t7e," \u2014 "),MG=n(t7e,"A",{href:!0});var Sgt=s(MG);umr=r(Sgt,"TFCamembertForMultipleChoice"),Sgt.forEach(t),bmr=r(t7e," (CamemBERT model)"),t7e.forEach(t),vmr=i(se),P8=n(se,"LI",{});var a7e=s(P8);L_e=n(a7e,"STRONG",{});var Pgt=s(L_e);Tmr=r(Pgt,"convbert"),Pgt.forEach(t),Fmr=r(a7e," \u2014 "),EG=n(a7e,"A",{href:!0});var $gt=s(EG);Cmr=r($gt,"TFConvBertForMultipleChoice"),$gt.forEach(t),Mmr=r(a7e," (ConvBERT model)"),a7e.forEach(t),Emr=i(se),$8=n(se,"LI",{});var n7e=s($8);B_e=n(n7e,"STRONG",{});var Igt=s(B_e);ymr=r(Igt,"distilbert"),Igt.forEach(t),wmr=r(n7e," \u2014 "),yG=n(n7e,"A",{href:!0});var jgt=s(yG);Amr=r(jgt,"TFDistilBertForMultipleChoice"),jgt.forEach(t),Lmr=r(n7e," (DistilBERT model)"),n7e.forEach(t),Bmr=i(se),I8=n(se,"LI",{});var s7e=s(I8);x_e=n(s7e,"STRONG",{});var Dgt=s(x_e);xmr=r(Dgt,"electra"),Dgt.forEach(t),kmr=r(s7e," \u2014 "),wG=n(s7e,"A",{href:!0});var Ngt=s(wG);Rmr=r(Ngt,"TFElectraForMultipleChoice"),Ngt.forEach(t),Smr=r(s7e," (ELECTRA model)"),s7e.forEach(t),Pmr=i(se),j8=n(se,"LI",{});var l7e=s(j8);k_e=n(l7e,"STRONG",{});var qgt=s(k_e);$mr=r(qgt,"flaubert"),qgt.forEach(t),Imr=r(l7e," \u2014 "),AG=n(l7e,"A",{href:!0});var Ogt=s(AG);jmr=r(Ogt,"TFFlaubertForMultipleChoice"),Ogt.forEach(t),Dmr=r(l7e," (FlauBERT model)"),l7e.forEach(t),Nmr=i(se),D8=n(se,"LI",{});var i7e=s(D8);R_e=n(i7e,"STRONG",{});var Ggt=s(R_e);qmr=r(Ggt,"funnel"),Ggt.forEach(t),Omr=r(i7e," \u2014 "),LG=n(i7e,"A",{href:!0});var Xgt=s(LG);Gmr=r(Xgt,"TFFunnelForMultipleChoice"),Xgt.forEach(t),Xmr=r(i7e," (Funnel Transformer model)"),i7e.forEach(t),Vmr=i(se),N8=n(se,"LI",{});var d7e=s(N8);S_e=n(d7e,"STRONG",{});var Vgt=s(S_e);zmr=r(Vgt,"longformer"),Vgt.forEach(t),Wmr=r(d7e," \u2014 "),BG=n(d7e,"A",{href:!0});var zgt=s(BG);Qmr=r(zgt,"TFLongformerForMultipleChoice"),zgt.forEach(t),Hmr=r(d7e," (Longformer model)"),d7e.forEach(t),Umr=i(se),q8=n(se,"LI",{});var c7e=s(q8);P_e=n(c7e,"STRONG",{});var Wgt=s(P_e);Jmr=r(Wgt,"mobilebert"),Wgt.forEach(t),Ymr=r(c7e," \u2014 "),xG=n(c7e,"A",{href:!0});var Qgt=s(xG);Kmr=r(Qgt,"TFMobileBertForMultipleChoice"),Qgt.forEach(t),Zmr=r(c7e," (MobileBERT model)"),c7e.forEach(t),egr=i(se),O8=n(se,"LI",{});var f7e=s(O8);$_e=n(f7e,"STRONG",{});var Hgt=s($_e);ogr=r(Hgt,"mpnet"),Hgt.forEach(t),rgr=r(f7e," \u2014 "),kG=n(f7e,"A",{href:!0});var Ugt=s(kG);tgr=r(Ugt,"TFMPNetForMultipleChoice"),Ugt.forEach(t),agr=r(f7e," (MPNet model)"),f7e.forEach(t),ngr=i(se),G8=n(se,"LI",{});var m7e=s(G8);I_e=n(m7e,"STRONG",{});var Jgt=s(I_e);sgr=r(Jgt,"rembert"),Jgt.forEach(t),lgr=r(m7e," \u2014 "),RG=n(m7e,"A",{href:!0});var Ygt=s(RG);igr=r(Ygt,"TFRemBertForMultipleChoice"),Ygt.forEach(t),dgr=r(m7e," (RemBERT model)"),m7e.forEach(t),cgr=i(se),X8=n(se,"LI",{});var g7e=s(X8);j_e=n(g7e,"STRONG",{});var Kgt=s(j_e);fgr=r(Kgt,"roberta"),Kgt.forEach(t),mgr=r(g7e," \u2014 "),SG=n(g7e,"A",{href:!0});var Zgt=s(SG);ggr=r(Zgt,"TFRobertaForMultipleChoice"),Zgt.forEach(t),hgr=r(g7e," (RoBERTa model)"),g7e.forEach(t),pgr=i(se),V8=n(se,"LI",{});var h7e=s(V8);D_e=n(h7e,"STRONG",{});var eht=s(D_e);_gr=r(eht,"roformer"),eht.forEach(t),ugr=r(h7e," \u2014 "),PG=n(h7e,"A",{href:!0});var oht=s(PG);bgr=r(oht,"TFRoFormerForMultipleChoice"),oht.forEach(t),vgr=r(h7e," (RoFormer model)"),h7e.forEach(t),Tgr=i(se),z8=n(se,"LI",{});var p7e=s(z8);N_e=n(p7e,"STRONG",{});var rht=s(N_e);Fgr=r(rht,"xlm"),rht.forEach(t),Cgr=r(p7e," \u2014 "),$G=n(p7e,"A",{href:!0});var tht=s($G);Mgr=r(tht,"TFXLMForMultipleChoice"),tht.forEach(t),Egr=r(p7e," (XLM model)"),p7e.forEach(t),ygr=i(se),W8=n(se,"LI",{});var _7e=s(W8);q_e=n(_7e,"STRONG",{});var aht=s(q_e);wgr=r(aht,"xlm-roberta"),aht.forEach(t),Agr=r(_7e," \u2014 "),IG=n(_7e,"A",{href:!0});var nht=s(IG);Lgr=r(nht,"TFXLMRobertaForMultipleChoice"),nht.forEach(t),Bgr=r(_7e," (XLM-RoBERTa model)"),_7e.forEach(t),xgr=i(se),Q8=n(se,"LI",{});var u7e=s(Q8);O_e=n(u7e,"STRONG",{});var sht=s(O_e);kgr=r(sht,"xlnet"),sht.forEach(t),Rgr=r(u7e," \u2014 "),jG=n(u7e,"A",{href:!0});var lht=s(jG);Sgr=r(lht,"TFXLNetForMultipleChoice"),lht.forEach(t),Pgr=r(u7e," (XLNet model)"),u7e.forEach(t),se.forEach(t),$gr=i(Fa),G_e=n(Fa,"P",{});var iht=s(G_e);Igr=r(iht,"Examples:"),iht.forEach(t),jgr=i(Fa),m(LA.$$.fragment,Fa),Fa.forEach(t),Zl.forEach(t),vke=i(d),Ic=n(d,"H2",{class:!0});var kSe=s(Ic);H8=n(kSe,"A",{id:!0,class:!0,href:!0});var dht=s(H8);X_e=n(dht,"SPAN",{});var cht=s(X_e);m(BA.$$.fragment,cht),cht.forEach(t),dht.forEach(t),Dgr=i(kSe),V_e=n(kSe,"SPAN",{});var fht=s(V_e);Ngr=r(fht,"TFAutoModelForTableQuestionAnswering"),fht.forEach(t),kSe.forEach(t),Tke=i(d),Ar=n(d,"DIV",{class:!0});var oi=s(Ar);m(xA.$$.fragment,oi),qgr=i(oi),jc=n(oi,"P",{});var xW=s(jc);Ogr=r(xW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),z_e=n(xW,"CODE",{});var mht=s(z_e);Ggr=r(mht,"from_pretrained()"),mht.forEach(t),Xgr=r(xW,"class method or the "),W_e=n(xW,"CODE",{});var ght=s(W_e);Vgr=r(ght,"from_config()"),ght.forEach(t),zgr=r(xW,`class
method.`),xW.forEach(t),Wgr=i(oi),kA=n(oi,"P",{});var RSe=s(kA);Qgr=r(RSe,"This class cannot be instantiated directly using "),Q_e=n(RSe,"CODE",{});var hht=s(Q_e);Hgr=r(hht,"__init__()"),hht.forEach(t),Ugr=r(RSe," (throws an error)."),RSe.forEach(t),Jgr=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(RA.$$.fragment,ri),Ygr=i(ri),H_e=n(ri,"P",{});var pht=s(H_e);Kgr=r(pht,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pht.forEach(t),Zgr=i(ri),Dc=n(ri,"P",{});var kW=s(Dc);ehr=r(kW,`Note:
Loading a model from its configuration file does `),U_e=n(kW,"STRONG",{});var _ht=s(U_e);ohr=r(_ht,"not"),_ht.forEach(t),rhr=r(kW,` load the model weights. It only affects the
model\u2019s configuration. Use `),J_e=n(kW,"CODE",{});var uht=s(J_e);thr=r(uht,"from_pretrained()"),uht.forEach(t),ahr=r(kW,"to load the model weights."),kW.forEach(t),nhr=i(ri),Y_e=n(ri,"P",{});var bht=s(Y_e);shr=r(bht,"Examples:"),bht.forEach(t),lhr=i(ri),m(SA.$$.fragment,ri),ri.forEach(t),ihr=i(oi),Co=n(oi,"DIV",{class:!0});var Ca=s(Co);m(PA.$$.fragment,Ca),dhr=i(Ca),K_e=n(Ca,"P",{});var vht=s(K_e);chr=r(vht,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),vht.forEach(t),fhr=i(Ca),Mn=n(Ca,"P",{});var A4=s(Mn);mhr=r(A4,"The model class to instantiate is selected based on the "),Z_e=n(A4,"CODE",{});var Tht=s(Z_e);ghr=r(Tht,"model_type"),Tht.forEach(t),hhr=r(A4,` property of the config object (either
passed as an argument or loaded from `),eue=n(A4,"CODE",{});var Fht=s(eue);phr=r(Fht,"pretrained_model_name_or_path"),Fht.forEach(t),_hr=r(A4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=n(A4,"CODE",{});var Cht=s(oue);uhr=r(Cht,"pretrained_model_name_or_path"),Cht.forEach(t),bhr=r(A4,":"),A4.forEach(t),vhr=i(Ca),rue=n(Ca,"UL",{});var Mht=s(rue);U8=n(Mht,"LI",{});var b7e=s(U8);tue=n(b7e,"STRONG",{});var Eht=s(tue);Thr=r(Eht,"tapas"),Eht.forEach(t),Fhr=r(b7e," \u2014 "),DG=n(b7e,"A",{href:!0});var yht=s(DG);Chr=r(yht,"TFTapasForQuestionAnswering"),yht.forEach(t),Mhr=r(b7e," (TAPAS model)"),b7e.forEach(t),Mht.forEach(t),Ehr=i(Ca),aue=n(Ca,"P",{});var wht=s(aue);yhr=r(wht,"Examples:"),wht.forEach(t),whr=i(Ca),m($A.$$.fragment,Ca),Ca.forEach(t),oi.forEach(t),Fke=i(d),Nc=n(d,"H2",{class:!0});var SSe=s(Nc);J8=n(SSe,"A",{id:!0,class:!0,href:!0});var Aht=s(J8);nue=n(Aht,"SPAN",{});var Lht=s(nue);m(IA.$$.fragment,Lht),Lht.forEach(t),Aht.forEach(t),Ahr=i(SSe),sue=n(SSe,"SPAN",{});var Bht=s(sue);Lhr=r(Bht,"TFAutoModelForTokenClassification"),Bht.forEach(t),SSe.forEach(t),Cke=i(d),Lr=n(d,"DIV",{class:!0});var ti=s(Lr);m(jA.$$.fragment,ti),Bhr=i(ti),qc=n(ti,"P",{});var RW=s(qc);xhr=r(RW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lue=n(RW,"CODE",{});var xht=s(lue);khr=r(xht,"from_pretrained()"),xht.forEach(t),Rhr=r(RW,"class method or the "),iue=n(RW,"CODE",{});var kht=s(iue);Shr=r(kht,"from_config()"),kht.forEach(t),Phr=r(RW,`class
method.`),RW.forEach(t),$hr=i(ti),DA=n(ti,"P",{});var PSe=s(DA);Ihr=r(PSe,"This class cannot be instantiated directly using "),due=n(PSe,"CODE",{});var Rht=s(due);jhr=r(Rht,"__init__()"),Rht.forEach(t),Dhr=r(PSe," (throws an error)."),PSe.forEach(t),Nhr=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);m(NA.$$.fragment,ai),qhr=i(ai),cue=n(ai,"P",{});var Sht=s(cue);Ohr=r(Sht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Sht.forEach(t),Ghr=i(ai),Oc=n(ai,"P",{});var SW=s(Oc);Xhr=r(SW,`Note:
Loading a model from its configuration file does `),fue=n(SW,"STRONG",{});var Pht=s(fue);Vhr=r(Pht,"not"),Pht.forEach(t),zhr=r(SW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mue=n(SW,"CODE",{});var $ht=s(mue);Whr=r($ht,"from_pretrained()"),$ht.forEach(t),Qhr=r(SW,"to load the model weights."),SW.forEach(t),Hhr=i(ai),gue=n(ai,"P",{});var Iht=s(gue);Uhr=r(Iht,"Examples:"),Iht.forEach(t),Jhr=i(ai),m(qA.$$.fragment,ai),ai.forEach(t),Yhr=i(ti),Mo=n(ti,"DIV",{class:!0});var Ma=s(Mo);m(OA.$$.fragment,Ma),Khr=i(Ma),hue=n(Ma,"P",{});var jht=s(hue);Zhr=r(jht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jht.forEach(t),epr=i(Ma),En=n(Ma,"P",{});var L4=s(En);opr=r(L4,"The model class to instantiate is selected based on the "),pue=n(L4,"CODE",{});var Dht=s(pue);rpr=r(Dht,"model_type"),Dht.forEach(t),tpr=r(L4,` property of the config object (either
passed as an argument or loaded from `),_ue=n(L4,"CODE",{});var Nht=s(_ue);apr=r(Nht,"pretrained_model_name_or_path"),Nht.forEach(t),npr=r(L4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(L4,"CODE",{});var qht=s(uue);spr=r(qht,"pretrained_model_name_or_path"),qht.forEach(t),lpr=r(L4,":"),L4.forEach(t),ipr=i(Ma),K=n(Ma,"UL",{});var oe=s(K);Y8=n(oe,"LI",{});var v7e=s(Y8);bue=n(v7e,"STRONG",{});var Oht=s(bue);dpr=r(Oht,"albert"),Oht.forEach(t),cpr=r(v7e," \u2014 "),NG=n(v7e,"A",{href:!0});var Ght=s(NG);fpr=r(Ght,"TFAlbertForTokenClassification"),Ght.forEach(t),mpr=r(v7e," (ALBERT model)"),v7e.forEach(t),gpr=i(oe),K8=n(oe,"LI",{});var T7e=s(K8);vue=n(T7e,"STRONG",{});var Xht=s(vue);hpr=r(Xht,"bert"),Xht.forEach(t),ppr=r(T7e," \u2014 "),qG=n(T7e,"A",{href:!0});var Vht=s(qG);_pr=r(Vht,"TFBertForTokenClassification"),Vht.forEach(t),upr=r(T7e," (BERT model)"),T7e.forEach(t),bpr=i(oe),Z8=n(oe,"LI",{});var F7e=s(Z8);Tue=n(F7e,"STRONG",{});var zht=s(Tue);vpr=r(zht,"camembert"),zht.forEach(t),Tpr=r(F7e," \u2014 "),OG=n(F7e,"A",{href:!0});var Wht=s(OG);Fpr=r(Wht,"TFCamembertForTokenClassification"),Wht.forEach(t),Cpr=r(F7e," (CamemBERT model)"),F7e.forEach(t),Mpr=i(oe),eF=n(oe,"LI",{});var C7e=s(eF);Fue=n(C7e,"STRONG",{});var Qht=s(Fue);Epr=r(Qht,"convbert"),Qht.forEach(t),ypr=r(C7e," \u2014 "),GG=n(C7e,"A",{href:!0});var Hht=s(GG);wpr=r(Hht,"TFConvBertForTokenClassification"),Hht.forEach(t),Apr=r(C7e," (ConvBERT model)"),C7e.forEach(t),Lpr=i(oe),oF=n(oe,"LI",{});var M7e=s(oF);Cue=n(M7e,"STRONG",{});var Uht=s(Cue);Bpr=r(Uht,"deberta"),Uht.forEach(t),xpr=r(M7e," \u2014 "),XG=n(M7e,"A",{href:!0});var Jht=s(XG);kpr=r(Jht,"TFDebertaForTokenClassification"),Jht.forEach(t),Rpr=r(M7e," (DeBERTa model)"),M7e.forEach(t),Spr=i(oe),rF=n(oe,"LI",{});var E7e=s(rF);Mue=n(E7e,"STRONG",{});var Yht=s(Mue);Ppr=r(Yht,"deberta-v2"),Yht.forEach(t),$pr=r(E7e," \u2014 "),VG=n(E7e,"A",{href:!0});var Kht=s(VG);Ipr=r(Kht,"TFDebertaV2ForTokenClassification"),Kht.forEach(t),jpr=r(E7e," (DeBERTa-v2 model)"),E7e.forEach(t),Dpr=i(oe),tF=n(oe,"LI",{});var y7e=s(tF);Eue=n(y7e,"STRONG",{});var Zht=s(Eue);Npr=r(Zht,"distilbert"),Zht.forEach(t),qpr=r(y7e," \u2014 "),zG=n(y7e,"A",{href:!0});var ept=s(zG);Opr=r(ept,"TFDistilBertForTokenClassification"),ept.forEach(t),Gpr=r(y7e," (DistilBERT model)"),y7e.forEach(t),Xpr=i(oe),aF=n(oe,"LI",{});var w7e=s(aF);yue=n(w7e,"STRONG",{});var opt=s(yue);Vpr=r(opt,"electra"),opt.forEach(t),zpr=r(w7e," \u2014 "),WG=n(w7e,"A",{href:!0});var rpt=s(WG);Wpr=r(rpt,"TFElectraForTokenClassification"),rpt.forEach(t),Qpr=r(w7e," (ELECTRA model)"),w7e.forEach(t),Hpr=i(oe),nF=n(oe,"LI",{});var A7e=s(nF);wue=n(A7e,"STRONG",{});var tpt=s(wue);Upr=r(tpt,"flaubert"),tpt.forEach(t),Jpr=r(A7e," \u2014 "),QG=n(A7e,"A",{href:!0});var apt=s(QG);Ypr=r(apt,"TFFlaubertForTokenClassification"),apt.forEach(t),Kpr=r(A7e," (FlauBERT model)"),A7e.forEach(t),Zpr=i(oe),sF=n(oe,"LI",{});var L7e=s(sF);Aue=n(L7e,"STRONG",{});var npt=s(Aue);e_r=r(npt,"funnel"),npt.forEach(t),o_r=r(L7e," \u2014 "),HG=n(L7e,"A",{href:!0});var spt=s(HG);r_r=r(spt,"TFFunnelForTokenClassification"),spt.forEach(t),t_r=r(L7e," (Funnel Transformer model)"),L7e.forEach(t),a_r=i(oe),lF=n(oe,"LI",{});var B7e=s(lF);Lue=n(B7e,"STRONG",{});var lpt=s(Lue);n_r=r(lpt,"layoutlm"),lpt.forEach(t),s_r=r(B7e," \u2014 "),UG=n(B7e,"A",{href:!0});var ipt=s(UG);l_r=r(ipt,"TFLayoutLMForTokenClassification"),ipt.forEach(t),i_r=r(B7e," (LayoutLM model)"),B7e.forEach(t),d_r=i(oe),iF=n(oe,"LI",{});var x7e=s(iF);Bue=n(x7e,"STRONG",{});var dpt=s(Bue);c_r=r(dpt,"longformer"),dpt.forEach(t),f_r=r(x7e," \u2014 "),JG=n(x7e,"A",{href:!0});var cpt=s(JG);m_r=r(cpt,"TFLongformerForTokenClassification"),cpt.forEach(t),g_r=r(x7e," (Longformer model)"),x7e.forEach(t),h_r=i(oe),dF=n(oe,"LI",{});var k7e=s(dF);xue=n(k7e,"STRONG",{});var fpt=s(xue);p_r=r(fpt,"mobilebert"),fpt.forEach(t),__r=r(k7e," \u2014 "),YG=n(k7e,"A",{href:!0});var mpt=s(YG);u_r=r(mpt,"TFMobileBertForTokenClassification"),mpt.forEach(t),b_r=r(k7e," (MobileBERT model)"),k7e.forEach(t),v_r=i(oe),cF=n(oe,"LI",{});var R7e=s(cF);kue=n(R7e,"STRONG",{});var gpt=s(kue);T_r=r(gpt,"mpnet"),gpt.forEach(t),F_r=r(R7e," \u2014 "),KG=n(R7e,"A",{href:!0});var hpt=s(KG);C_r=r(hpt,"TFMPNetForTokenClassification"),hpt.forEach(t),M_r=r(R7e," (MPNet model)"),R7e.forEach(t),E_r=i(oe),fF=n(oe,"LI",{});var S7e=s(fF);Rue=n(S7e,"STRONG",{});var ppt=s(Rue);y_r=r(ppt,"rembert"),ppt.forEach(t),w_r=r(S7e," \u2014 "),ZG=n(S7e,"A",{href:!0});var _pt=s(ZG);A_r=r(_pt,"TFRemBertForTokenClassification"),_pt.forEach(t),L_r=r(S7e," (RemBERT model)"),S7e.forEach(t),B_r=i(oe),mF=n(oe,"LI",{});var P7e=s(mF);Sue=n(P7e,"STRONG",{});var upt=s(Sue);x_r=r(upt,"roberta"),upt.forEach(t),k_r=r(P7e," \u2014 "),eX=n(P7e,"A",{href:!0});var bpt=s(eX);R_r=r(bpt,"TFRobertaForTokenClassification"),bpt.forEach(t),S_r=r(P7e," (RoBERTa model)"),P7e.forEach(t),P_r=i(oe),gF=n(oe,"LI",{});var $7e=s(gF);Pue=n($7e,"STRONG",{});var vpt=s(Pue);$_r=r(vpt,"roformer"),vpt.forEach(t),I_r=r($7e," \u2014 "),oX=n($7e,"A",{href:!0});var Tpt=s(oX);j_r=r(Tpt,"TFRoFormerForTokenClassification"),Tpt.forEach(t),D_r=r($7e," (RoFormer model)"),$7e.forEach(t),N_r=i(oe),hF=n(oe,"LI",{});var I7e=s(hF);$ue=n(I7e,"STRONG",{});var Fpt=s($ue);q_r=r(Fpt,"xlm"),Fpt.forEach(t),O_r=r(I7e," \u2014 "),rX=n(I7e,"A",{href:!0});var Cpt=s(rX);G_r=r(Cpt,"TFXLMForTokenClassification"),Cpt.forEach(t),X_r=r(I7e," (XLM model)"),I7e.forEach(t),V_r=i(oe),pF=n(oe,"LI",{});var j7e=s(pF);Iue=n(j7e,"STRONG",{});var Mpt=s(Iue);z_r=r(Mpt,"xlm-roberta"),Mpt.forEach(t),W_r=r(j7e," \u2014 "),tX=n(j7e,"A",{href:!0});var Ept=s(tX);Q_r=r(Ept,"TFXLMRobertaForTokenClassification"),Ept.forEach(t),H_r=r(j7e," (XLM-RoBERTa model)"),j7e.forEach(t),U_r=i(oe),_F=n(oe,"LI",{});var D7e=s(_F);jue=n(D7e,"STRONG",{});var ypt=s(jue);J_r=r(ypt,"xlnet"),ypt.forEach(t),Y_r=r(D7e," \u2014 "),aX=n(D7e,"A",{href:!0});var wpt=s(aX);K_r=r(wpt,"TFXLNetForTokenClassification"),wpt.forEach(t),Z_r=r(D7e," (XLNet model)"),D7e.forEach(t),oe.forEach(t),eur=i(Ma),Due=n(Ma,"P",{});var Apt=s(Due);our=r(Apt,"Examples:"),Apt.forEach(t),rur=i(Ma),m(GA.$$.fragment,Ma),Ma.forEach(t),ti.forEach(t),Mke=i(d),Gc=n(d,"H2",{class:!0});var $Se=s(Gc);uF=n($Se,"A",{id:!0,class:!0,href:!0});var Lpt=s(uF);Nue=n(Lpt,"SPAN",{});var Bpt=s(Nue);m(XA.$$.fragment,Bpt),Bpt.forEach(t),Lpt.forEach(t),tur=i($Se),que=n($Se,"SPAN",{});var xpt=s(que);aur=r(xpt,"TFAutoModelForQuestionAnswering"),xpt.forEach(t),$Se.forEach(t),Eke=i(d),Br=n(d,"DIV",{class:!0});var ni=s(Br);m(VA.$$.fragment,ni),nur=i(ni),Xc=n(ni,"P",{});var PW=s(Xc);sur=r(PW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Oue=n(PW,"CODE",{});var kpt=s(Oue);lur=r(kpt,"from_pretrained()"),kpt.forEach(t),iur=r(PW,"class method or the "),Gue=n(PW,"CODE",{});var Rpt=s(Gue);dur=r(Rpt,"from_config()"),Rpt.forEach(t),cur=r(PW,`class
method.`),PW.forEach(t),fur=i(ni),zA=n(ni,"P",{});var ISe=s(zA);mur=r(ISe,"This class cannot be instantiated directly using "),Xue=n(ISe,"CODE",{});var Spt=s(Xue);gur=r(Spt,"__init__()"),Spt.forEach(t),hur=r(ISe," (throws an error)."),ISe.forEach(t),pur=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(WA.$$.fragment,si),_ur=i(si),Vue=n(si,"P",{});var Ppt=s(Vue);uur=r(Ppt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ppt.forEach(t),bur=i(si),Vc=n(si,"P",{});var $W=s(Vc);vur=r($W,`Note:
Loading a model from its configuration file does `),zue=n($W,"STRONG",{});var $pt=s(zue);Tur=r($pt,"not"),$pt.forEach(t),Fur=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wue=n($W,"CODE",{});var Ipt=s(Wue);Cur=r(Ipt,"from_pretrained()"),Ipt.forEach(t),Mur=r($W,"to load the model weights."),$W.forEach(t),Eur=i(si),Que=n(si,"P",{});var jpt=s(Que);yur=r(jpt,"Examples:"),jpt.forEach(t),wur=i(si),m(QA.$$.fragment,si),si.forEach(t),Aur=i(ni),Eo=n(ni,"DIV",{class:!0});var Ea=s(Eo);m(HA.$$.fragment,Ea),Lur=i(Ea),Hue=n(Ea,"P",{});var Dpt=s(Hue);Bur=r(Dpt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Dpt.forEach(t),xur=i(Ea),yn=n(Ea,"P",{});var B4=s(yn);kur=r(B4,"The model class to instantiate is selected based on the "),Uue=n(B4,"CODE",{});var Npt=s(Uue);Rur=r(Npt,"model_type"),Npt.forEach(t),Sur=r(B4,` property of the config object (either
passed as an argument or loaded from `),Jue=n(B4,"CODE",{});var qpt=s(Jue);Pur=r(qpt,"pretrained_model_name_or_path"),qpt.forEach(t),$ur=r(B4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(B4,"CODE",{});var Opt=s(Yue);Iur=r(Opt,"pretrained_model_name_or_path"),Opt.forEach(t),jur=r(B4,":"),B4.forEach(t),Dur=i(Ea),Z=n(Ea,"UL",{});var re=s(Z);bF=n(re,"LI",{});var N7e=s(bF);Kue=n(N7e,"STRONG",{});var Gpt=s(Kue);Nur=r(Gpt,"albert"),Gpt.forEach(t),qur=r(N7e," \u2014 "),nX=n(N7e,"A",{href:!0});var Xpt=s(nX);Our=r(Xpt,"TFAlbertForQuestionAnswering"),Xpt.forEach(t),Gur=r(N7e," (ALBERT model)"),N7e.forEach(t),Xur=i(re),vF=n(re,"LI",{});var q7e=s(vF);Zue=n(q7e,"STRONG",{});var Vpt=s(Zue);Vur=r(Vpt,"bert"),Vpt.forEach(t),zur=r(q7e," \u2014 "),sX=n(q7e,"A",{href:!0});var zpt=s(sX);Wur=r(zpt,"TFBertForQuestionAnswering"),zpt.forEach(t),Qur=r(q7e," (BERT model)"),q7e.forEach(t),Hur=i(re),TF=n(re,"LI",{});var O7e=s(TF);e1e=n(O7e,"STRONG",{});var Wpt=s(e1e);Uur=r(Wpt,"camembert"),Wpt.forEach(t),Jur=r(O7e," \u2014 "),lX=n(O7e,"A",{href:!0});var Qpt=s(lX);Yur=r(Qpt,"TFCamembertForQuestionAnswering"),Qpt.forEach(t),Kur=r(O7e," (CamemBERT model)"),O7e.forEach(t),Zur=i(re),FF=n(re,"LI",{});var G7e=s(FF);o1e=n(G7e,"STRONG",{});var Hpt=s(o1e);e1r=r(Hpt,"convbert"),Hpt.forEach(t),o1r=r(G7e," \u2014 "),iX=n(G7e,"A",{href:!0});var Upt=s(iX);r1r=r(Upt,"TFConvBertForQuestionAnswering"),Upt.forEach(t),t1r=r(G7e," (ConvBERT model)"),G7e.forEach(t),a1r=i(re),CF=n(re,"LI",{});var X7e=s(CF);r1e=n(X7e,"STRONG",{});var Jpt=s(r1e);n1r=r(Jpt,"deberta"),Jpt.forEach(t),s1r=r(X7e," \u2014 "),dX=n(X7e,"A",{href:!0});var Ypt=s(dX);l1r=r(Ypt,"TFDebertaForQuestionAnswering"),Ypt.forEach(t),i1r=r(X7e," (DeBERTa model)"),X7e.forEach(t),d1r=i(re),MF=n(re,"LI",{});var V7e=s(MF);t1e=n(V7e,"STRONG",{});var Kpt=s(t1e);c1r=r(Kpt,"deberta-v2"),Kpt.forEach(t),f1r=r(V7e," \u2014 "),cX=n(V7e,"A",{href:!0});var Zpt=s(cX);m1r=r(Zpt,"TFDebertaV2ForQuestionAnswering"),Zpt.forEach(t),g1r=r(V7e," (DeBERTa-v2 model)"),V7e.forEach(t),h1r=i(re),EF=n(re,"LI",{});var z7e=s(EF);a1e=n(z7e,"STRONG",{});var e_t=s(a1e);p1r=r(e_t,"distilbert"),e_t.forEach(t),_1r=r(z7e," \u2014 "),fX=n(z7e,"A",{href:!0});var o_t=s(fX);u1r=r(o_t,"TFDistilBertForQuestionAnswering"),o_t.forEach(t),b1r=r(z7e," (DistilBERT model)"),z7e.forEach(t),v1r=i(re),yF=n(re,"LI",{});var W7e=s(yF);n1e=n(W7e,"STRONG",{});var r_t=s(n1e);T1r=r(r_t,"electra"),r_t.forEach(t),F1r=r(W7e," \u2014 "),mX=n(W7e,"A",{href:!0});var t_t=s(mX);C1r=r(t_t,"TFElectraForQuestionAnswering"),t_t.forEach(t),M1r=r(W7e," (ELECTRA model)"),W7e.forEach(t),E1r=i(re),wF=n(re,"LI",{});var Q7e=s(wF);s1e=n(Q7e,"STRONG",{});var a_t=s(s1e);y1r=r(a_t,"flaubert"),a_t.forEach(t),w1r=r(Q7e," \u2014 "),gX=n(Q7e,"A",{href:!0});var n_t=s(gX);A1r=r(n_t,"TFFlaubertForQuestionAnsweringSimple"),n_t.forEach(t),L1r=r(Q7e," (FlauBERT model)"),Q7e.forEach(t),B1r=i(re),AF=n(re,"LI",{});var H7e=s(AF);l1e=n(H7e,"STRONG",{});var s_t=s(l1e);x1r=r(s_t,"funnel"),s_t.forEach(t),k1r=r(H7e," \u2014 "),hX=n(H7e,"A",{href:!0});var l_t=s(hX);R1r=r(l_t,"TFFunnelForQuestionAnswering"),l_t.forEach(t),S1r=r(H7e," (Funnel Transformer model)"),H7e.forEach(t),P1r=i(re),LF=n(re,"LI",{});var U7e=s(LF);i1e=n(U7e,"STRONG",{});var i_t=s(i1e);$1r=r(i_t,"longformer"),i_t.forEach(t),I1r=r(U7e," \u2014 "),pX=n(U7e,"A",{href:!0});var d_t=s(pX);j1r=r(d_t,"TFLongformerForQuestionAnswering"),d_t.forEach(t),D1r=r(U7e," (Longformer model)"),U7e.forEach(t),N1r=i(re),BF=n(re,"LI",{});var J7e=s(BF);d1e=n(J7e,"STRONG",{});var c_t=s(d1e);q1r=r(c_t,"mobilebert"),c_t.forEach(t),O1r=r(J7e," \u2014 "),_X=n(J7e,"A",{href:!0});var f_t=s(_X);G1r=r(f_t,"TFMobileBertForQuestionAnswering"),f_t.forEach(t),X1r=r(J7e," (MobileBERT model)"),J7e.forEach(t),V1r=i(re),xF=n(re,"LI",{});var Y7e=s(xF);c1e=n(Y7e,"STRONG",{});var m_t=s(c1e);z1r=r(m_t,"mpnet"),m_t.forEach(t),W1r=r(Y7e," \u2014 "),uX=n(Y7e,"A",{href:!0});var g_t=s(uX);Q1r=r(g_t,"TFMPNetForQuestionAnswering"),g_t.forEach(t),H1r=r(Y7e," (MPNet model)"),Y7e.forEach(t),U1r=i(re),kF=n(re,"LI",{});var K7e=s(kF);f1e=n(K7e,"STRONG",{});var h_t=s(f1e);J1r=r(h_t,"rembert"),h_t.forEach(t),Y1r=r(K7e," \u2014 "),bX=n(K7e,"A",{href:!0});var p_t=s(bX);K1r=r(p_t,"TFRemBertForQuestionAnswering"),p_t.forEach(t),Z1r=r(K7e," (RemBERT model)"),K7e.forEach(t),ebr=i(re),RF=n(re,"LI",{});var Z7e=s(RF);m1e=n(Z7e,"STRONG",{});var __t=s(m1e);obr=r(__t,"roberta"),__t.forEach(t),rbr=r(Z7e," \u2014 "),vX=n(Z7e,"A",{href:!0});var u_t=s(vX);tbr=r(u_t,"TFRobertaForQuestionAnswering"),u_t.forEach(t),abr=r(Z7e," (RoBERTa model)"),Z7e.forEach(t),nbr=i(re),SF=n(re,"LI",{});var e9e=s(SF);g1e=n(e9e,"STRONG",{});var b_t=s(g1e);sbr=r(b_t,"roformer"),b_t.forEach(t),lbr=r(e9e," \u2014 "),TX=n(e9e,"A",{href:!0});var v_t=s(TX);ibr=r(v_t,"TFRoFormerForQuestionAnswering"),v_t.forEach(t),dbr=r(e9e," (RoFormer model)"),e9e.forEach(t),cbr=i(re),PF=n(re,"LI",{});var o9e=s(PF);h1e=n(o9e,"STRONG",{});var T_t=s(h1e);fbr=r(T_t,"xlm"),T_t.forEach(t),mbr=r(o9e," \u2014 "),FX=n(o9e,"A",{href:!0});var F_t=s(FX);gbr=r(F_t,"TFXLMForQuestionAnsweringSimple"),F_t.forEach(t),hbr=r(o9e," (XLM model)"),o9e.forEach(t),pbr=i(re),$F=n(re,"LI",{});var r9e=s($F);p1e=n(r9e,"STRONG",{});var C_t=s(p1e);_br=r(C_t,"xlm-roberta"),C_t.forEach(t),ubr=r(r9e," \u2014 "),CX=n(r9e,"A",{href:!0});var M_t=s(CX);bbr=r(M_t,"TFXLMRobertaForQuestionAnswering"),M_t.forEach(t),vbr=r(r9e," (XLM-RoBERTa model)"),r9e.forEach(t),Tbr=i(re),IF=n(re,"LI",{});var t9e=s(IF);_1e=n(t9e,"STRONG",{});var E_t=s(_1e);Fbr=r(E_t,"xlnet"),E_t.forEach(t),Cbr=r(t9e," \u2014 "),MX=n(t9e,"A",{href:!0});var y_t=s(MX);Mbr=r(y_t,"TFXLNetForQuestionAnsweringSimple"),y_t.forEach(t),Ebr=r(t9e," (XLNet model)"),t9e.forEach(t),re.forEach(t),ybr=i(Ea),u1e=n(Ea,"P",{});var w_t=s(u1e);wbr=r(w_t,"Examples:"),w_t.forEach(t),Abr=i(Ea),m(UA.$$.fragment,Ea),Ea.forEach(t),ni.forEach(t),yke=i(d),zc=n(d,"H2",{class:!0});var jSe=s(zc);jF=n(jSe,"A",{id:!0,class:!0,href:!0});var A_t=s(jF);b1e=n(A_t,"SPAN",{});var L_t=s(b1e);m(JA.$$.fragment,L_t),L_t.forEach(t),A_t.forEach(t),Lbr=i(jSe),v1e=n(jSe,"SPAN",{});var B_t=s(v1e);Bbr=r(B_t,"TFAutoModelForVision2Seq"),B_t.forEach(t),jSe.forEach(t),wke=i(d),xr=n(d,"DIV",{class:!0});var li=s(xr);m(YA.$$.fragment,li),xbr=i(li),Wc=n(li,"P",{});var IW=s(Wc);kbr=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),T1e=n(IW,"CODE",{});var x_t=s(T1e);Rbr=r(x_t,"from_pretrained()"),x_t.forEach(t),Sbr=r(IW,"class method or the "),F1e=n(IW,"CODE",{});var k_t=s(F1e);Pbr=r(k_t,"from_config()"),k_t.forEach(t),$br=r(IW,`class
method.`),IW.forEach(t),Ibr=i(li),KA=n(li,"P",{});var DSe=s(KA);jbr=r(DSe,"This class cannot be instantiated directly using "),C1e=n(DSe,"CODE",{});var R_t=s(C1e);Dbr=r(R_t,"__init__()"),R_t.forEach(t),Nbr=r(DSe," (throws an error)."),DSe.forEach(t),qbr=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(ZA.$$.fragment,ii),Obr=i(ii),M1e=n(ii,"P",{});var S_t=s(M1e);Gbr=r(S_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),S_t.forEach(t),Xbr=i(ii),Qc=n(ii,"P",{});var jW=s(Qc);Vbr=r(jW,`Note:
Loading a model from its configuration file does `),E1e=n(jW,"STRONG",{});var P_t=s(E1e);zbr=r(P_t,"not"),P_t.forEach(t),Wbr=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),y1e=n(jW,"CODE",{});var $_t=s(y1e);Qbr=r($_t,"from_pretrained()"),$_t.forEach(t),Hbr=r(jW,"to load the model weights."),jW.forEach(t),Ubr=i(ii),w1e=n(ii,"P",{});var I_t=s(w1e);Jbr=r(I_t,"Examples:"),I_t.forEach(t),Ybr=i(ii),m(e0.$$.fragment,ii),ii.forEach(t),Kbr=i(li),yo=n(li,"DIV",{class:!0});var ya=s(yo);m(o0.$$.fragment,ya),Zbr=i(ya),A1e=n(ya,"P",{});var j_t=s(A1e);e3r=r(j_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),j_t.forEach(t),o3r=i(ya),wn=n(ya,"P",{});var x4=s(wn);r3r=r(x4,"The model class to instantiate is selected based on the "),L1e=n(x4,"CODE",{});var D_t=s(L1e);t3r=r(D_t,"model_type"),D_t.forEach(t),a3r=r(x4,` property of the config object (either
passed as an argument or loaded from `),B1e=n(x4,"CODE",{});var N_t=s(B1e);n3r=r(N_t,"pretrained_model_name_or_path"),N_t.forEach(t),s3r=r(x4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=n(x4,"CODE",{});var q_t=s(x1e);l3r=r(q_t,"pretrained_model_name_or_path"),q_t.forEach(t),i3r=r(x4,":"),x4.forEach(t),d3r=i(ya),k1e=n(ya,"UL",{});var O_t=s(k1e);DF=n(O_t,"LI",{});var a9e=s(DF);R1e=n(a9e,"STRONG",{});var G_t=s(R1e);c3r=r(G_t,"vision-encoder-decoder"),G_t.forEach(t),f3r=r(a9e," \u2014 "),EX=n(a9e,"A",{href:!0});var X_t=s(EX);m3r=r(X_t,"TFVisionEncoderDecoderModel"),X_t.forEach(t),g3r=r(a9e," (Vision Encoder decoder model)"),a9e.forEach(t),O_t.forEach(t),h3r=i(ya),S1e=n(ya,"P",{});var V_t=s(S1e);p3r=r(V_t,"Examples:"),V_t.forEach(t),_3r=i(ya),m(r0.$$.fragment,ya),ya.forEach(t),li.forEach(t),Ake=i(d),Hc=n(d,"H2",{class:!0});var NSe=s(Hc);NF=n(NSe,"A",{id:!0,class:!0,href:!0});var z_t=s(NF);P1e=n(z_t,"SPAN",{});var W_t=s(P1e);m(t0.$$.fragment,W_t),W_t.forEach(t),z_t.forEach(t),u3r=i(NSe),$1e=n(NSe,"SPAN",{});var Q_t=s($1e);b3r=r(Q_t,"TFAutoModelForSpeechSeq2Seq"),Q_t.forEach(t),NSe.forEach(t),Lke=i(d),kr=n(d,"DIV",{class:!0});var di=s(kr);m(a0.$$.fragment,di),v3r=i(di),Uc=n(di,"P",{});var DW=s(Uc);T3r=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),I1e=n(DW,"CODE",{});var H_t=s(I1e);F3r=r(H_t,"from_pretrained()"),H_t.forEach(t),C3r=r(DW,"class method or the "),j1e=n(DW,"CODE",{});var U_t=s(j1e);M3r=r(U_t,"from_config()"),U_t.forEach(t),E3r=r(DW,`class
method.`),DW.forEach(t),y3r=i(di),n0=n(di,"P",{});var qSe=s(n0);w3r=r(qSe,"This class cannot be instantiated directly using "),D1e=n(qSe,"CODE",{});var J_t=s(D1e);A3r=r(J_t,"__init__()"),J_t.forEach(t),L3r=r(qSe," (throws an error)."),qSe.forEach(t),B3r=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);m(s0.$$.fragment,ci),x3r=i(ci),N1e=n(ci,"P",{});var Y_t=s(N1e);k3r=r(Y_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Y_t.forEach(t),R3r=i(ci),Jc=n(ci,"P",{});var NW=s(Jc);S3r=r(NW,`Note:
Loading a model from its configuration file does `),q1e=n(NW,"STRONG",{});var K_t=s(q1e);P3r=r(K_t,"not"),K_t.forEach(t),$3r=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),O1e=n(NW,"CODE",{});var Z_t=s(O1e);I3r=r(Z_t,"from_pretrained()"),Z_t.forEach(t),j3r=r(NW,"to load the model weights."),NW.forEach(t),D3r=i(ci),G1e=n(ci,"P",{});var eut=s(G1e);N3r=r(eut,"Examples:"),eut.forEach(t),q3r=i(ci),m(l0.$$.fragment,ci),ci.forEach(t),O3r=i(di),wo=n(di,"DIV",{class:!0});var wa=s(wo);m(i0.$$.fragment,wa),G3r=i(wa),X1e=n(wa,"P",{});var out=s(X1e);X3r=r(out,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),out.forEach(t),V3r=i(wa),An=n(wa,"P",{});var k4=s(An);z3r=r(k4,"The model class to instantiate is selected based on the "),V1e=n(k4,"CODE",{});var rut=s(V1e);W3r=r(rut,"model_type"),rut.forEach(t),Q3r=r(k4,` property of the config object (either
passed as an argument or loaded from `),z1e=n(k4,"CODE",{});var tut=s(z1e);H3r=r(tut,"pretrained_model_name_or_path"),tut.forEach(t),U3r=r(k4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=n(k4,"CODE",{});var aut=s(W1e);J3r=r(aut,"pretrained_model_name_or_path"),aut.forEach(t),Y3r=r(k4,":"),k4.forEach(t),K3r=i(wa),Q1e=n(wa,"UL",{});var nut=s(Q1e);qF=n(nut,"LI",{});var n9e=s(qF);H1e=n(n9e,"STRONG",{});var sut=s(H1e);Z3r=r(sut,"speech_to_text"),sut.forEach(t),e5r=r(n9e," \u2014 "),yX=n(n9e,"A",{href:!0});var lut=s(yX);o5r=r(lut,"TFSpeech2TextForConditionalGeneration"),lut.forEach(t),r5r=r(n9e," (Speech2Text model)"),n9e.forEach(t),nut.forEach(t),t5r=i(wa),U1e=n(wa,"P",{});var iut=s(U1e);a5r=r(iut,"Examples:"),iut.forEach(t),n5r=i(wa),m(d0.$$.fragment,wa),wa.forEach(t),di.forEach(t),Bke=i(d),Yc=n(d,"H2",{class:!0});var OSe=s(Yc);OF=n(OSe,"A",{id:!0,class:!0,href:!0});var dut=s(OF);J1e=n(dut,"SPAN",{});var cut=s(J1e);m(c0.$$.fragment,cut),cut.forEach(t),dut.forEach(t),s5r=i(OSe),Y1e=n(OSe,"SPAN",{});var fut=s(Y1e);l5r=r(fut,"FlaxAutoModel"),fut.forEach(t),OSe.forEach(t),xke=i(d),Rr=n(d,"DIV",{class:!0});var fi=s(Rr);m(f0.$$.fragment,fi),i5r=i(fi),Kc=n(fi,"P",{});var qW=s(Kc);d5r=r(qW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),K1e=n(qW,"CODE",{});var mut=s(K1e);c5r=r(mut,"from_pretrained()"),mut.forEach(t),f5r=r(qW,"class method or the "),Z1e=n(qW,"CODE",{});var gut=s(Z1e);m5r=r(gut,"from_config()"),gut.forEach(t),g5r=r(qW,`class
method.`),qW.forEach(t),h5r=i(fi),m0=n(fi,"P",{});var GSe=s(m0);p5r=r(GSe,"This class cannot be instantiated directly using "),ebe=n(GSe,"CODE",{});var hut=s(ebe);_5r=r(hut,"__init__()"),hut.forEach(t),u5r=r(GSe," (throws an error)."),GSe.forEach(t),b5r=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(g0.$$.fragment,mi),v5r=i(mi),obe=n(mi,"P",{});var put=s(obe);T5r=r(put,"Instantiates one of the base model classes of the library from a configuration."),put.forEach(t),F5r=i(mi),Zc=n(mi,"P",{});var OW=s(Zc);C5r=r(OW,`Note:
Loading a model from its configuration file does `),rbe=n(OW,"STRONG",{});var _ut=s(rbe);M5r=r(_ut,"not"),_ut.forEach(t),E5r=r(OW,` load the model weights. It only affects the
model\u2019s configuration. Use `),tbe=n(OW,"CODE",{});var uut=s(tbe);y5r=r(uut,"from_pretrained()"),uut.forEach(t),w5r=r(OW,"to load the model weights."),OW.forEach(t),A5r=i(mi),abe=n(mi,"P",{});var but=s(abe);L5r=r(but,"Examples:"),but.forEach(t),B5r=i(mi),m(h0.$$.fragment,mi),mi.forEach(t),x5r=i(fi),Ao=n(fi,"DIV",{class:!0});var Aa=s(Ao);m(p0.$$.fragment,Aa),k5r=i(Aa),nbe=n(Aa,"P",{});var vut=s(nbe);R5r=r(vut,"Instantiate one of the base model classes of the library from a pretrained model."),vut.forEach(t),S5r=i(Aa),Ln=n(Aa,"P",{});var R4=s(Ln);P5r=r(R4,"The model class to instantiate is selected based on the "),sbe=n(R4,"CODE",{});var Tut=s(sbe);$5r=r(Tut,"model_type"),Tut.forEach(t),I5r=r(R4,` property of the config object (either
passed as an argument or loaded from `),lbe=n(R4,"CODE",{});var Fut=s(lbe);j5r=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),D5r=r(R4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=n(R4,"CODE",{});var Cut=s(ibe);N5r=r(Cut,"pretrained_model_name_or_path"),Cut.forEach(t),q5r=r(R4,":"),R4.forEach(t),O5r=i(Aa),z=n(Aa,"UL",{});var Q=s(z);GF=n(Q,"LI",{});var s9e=s(GF);dbe=n(s9e,"STRONG",{});var Mut=s(dbe);G5r=r(Mut,"albert"),Mut.forEach(t),X5r=r(s9e," \u2014 "),wX=n(s9e,"A",{href:!0});var Eut=s(wX);V5r=r(Eut,"FlaxAlbertModel"),Eut.forEach(t),z5r=r(s9e," (ALBERT model)"),s9e.forEach(t),W5r=i(Q),XF=n(Q,"LI",{});var l9e=s(XF);cbe=n(l9e,"STRONG",{});var yut=s(cbe);Q5r=r(yut,"bart"),yut.forEach(t),H5r=r(l9e," \u2014 "),AX=n(l9e,"A",{href:!0});var wut=s(AX);U5r=r(wut,"FlaxBartModel"),wut.forEach(t),J5r=r(l9e," (BART model)"),l9e.forEach(t),Y5r=i(Q),VF=n(Q,"LI",{});var i9e=s(VF);fbe=n(i9e,"STRONG",{});var Aut=s(fbe);K5r=r(Aut,"beit"),Aut.forEach(t),Z5r=r(i9e," \u2014 "),LX=n(i9e,"A",{href:!0});var Lut=s(LX);e2r=r(Lut,"FlaxBeitModel"),Lut.forEach(t),o2r=r(i9e," (BEiT model)"),i9e.forEach(t),r2r=i(Q),zF=n(Q,"LI",{});var d9e=s(zF);mbe=n(d9e,"STRONG",{});var But=s(mbe);t2r=r(But,"bert"),But.forEach(t),a2r=r(d9e," \u2014 "),BX=n(d9e,"A",{href:!0});var xut=s(BX);n2r=r(xut,"FlaxBertModel"),xut.forEach(t),s2r=r(d9e," (BERT model)"),d9e.forEach(t),l2r=i(Q),WF=n(Q,"LI",{});var c9e=s(WF);gbe=n(c9e,"STRONG",{});var kut=s(gbe);i2r=r(kut,"big_bird"),kut.forEach(t),d2r=r(c9e," \u2014 "),xX=n(c9e,"A",{href:!0});var Rut=s(xX);c2r=r(Rut,"FlaxBigBirdModel"),Rut.forEach(t),f2r=r(c9e," (BigBird model)"),c9e.forEach(t),m2r=i(Q),QF=n(Q,"LI",{});var f9e=s(QF);hbe=n(f9e,"STRONG",{});var Sut=s(hbe);g2r=r(Sut,"blenderbot"),Sut.forEach(t),h2r=r(f9e," \u2014 "),kX=n(f9e,"A",{href:!0});var Put=s(kX);p2r=r(Put,"FlaxBlenderbotModel"),Put.forEach(t),_2r=r(f9e," (Blenderbot model)"),f9e.forEach(t),u2r=i(Q),HF=n(Q,"LI",{});var m9e=s(HF);pbe=n(m9e,"STRONG",{});var $ut=s(pbe);b2r=r($ut,"blenderbot-small"),$ut.forEach(t),v2r=r(m9e," \u2014 "),RX=n(m9e,"A",{href:!0});var Iut=s(RX);T2r=r(Iut,"FlaxBlenderbotSmallModel"),Iut.forEach(t),F2r=r(m9e," (BlenderbotSmall model)"),m9e.forEach(t),C2r=i(Q),UF=n(Q,"LI",{});var g9e=s(UF);_be=n(g9e,"STRONG",{});var jut=s(_be);M2r=r(jut,"clip"),jut.forEach(t),E2r=r(g9e," \u2014 "),SX=n(g9e,"A",{href:!0});var Dut=s(SX);y2r=r(Dut,"FlaxCLIPModel"),Dut.forEach(t),w2r=r(g9e," (CLIP model)"),g9e.forEach(t),A2r=i(Q),JF=n(Q,"LI",{});var h9e=s(JF);ube=n(h9e,"STRONG",{});var Nut=s(ube);L2r=r(Nut,"distilbert"),Nut.forEach(t),B2r=r(h9e," \u2014 "),PX=n(h9e,"A",{href:!0});var qut=s(PX);x2r=r(qut,"FlaxDistilBertModel"),qut.forEach(t),k2r=r(h9e," (DistilBERT model)"),h9e.forEach(t),R2r=i(Q),YF=n(Q,"LI",{});var p9e=s(YF);bbe=n(p9e,"STRONG",{});var Out=s(bbe);S2r=r(Out,"electra"),Out.forEach(t),P2r=r(p9e," \u2014 "),$X=n(p9e,"A",{href:!0});var Gut=s($X);$2r=r(Gut,"FlaxElectraModel"),Gut.forEach(t),I2r=r(p9e," (ELECTRA model)"),p9e.forEach(t),j2r=i(Q),KF=n(Q,"LI",{});var _9e=s(KF);vbe=n(_9e,"STRONG",{});var Xut=s(vbe);D2r=r(Xut,"gpt2"),Xut.forEach(t),N2r=r(_9e," \u2014 "),IX=n(_9e,"A",{href:!0});var Vut=s(IX);q2r=r(Vut,"FlaxGPT2Model"),Vut.forEach(t),O2r=r(_9e," (OpenAI GPT-2 model)"),_9e.forEach(t),G2r=i(Q),ZF=n(Q,"LI",{});var u9e=s(ZF);Tbe=n(u9e,"STRONG",{});var zut=s(Tbe);X2r=r(zut,"gpt_neo"),zut.forEach(t),V2r=r(u9e," \u2014 "),jX=n(u9e,"A",{href:!0});var Wut=s(jX);z2r=r(Wut,"FlaxGPTNeoModel"),Wut.forEach(t),W2r=r(u9e," (GPT Neo model)"),u9e.forEach(t),Q2r=i(Q),eC=n(Q,"LI",{});var b9e=s(eC);Fbe=n(b9e,"STRONG",{});var Qut=s(Fbe);H2r=r(Qut,"gptj"),Qut.forEach(t),U2r=r(b9e," \u2014 "),DX=n(b9e,"A",{href:!0});var Hut=s(DX);J2r=r(Hut,"FlaxGPTJModel"),Hut.forEach(t),Y2r=r(b9e," (GPT-J model)"),b9e.forEach(t),K2r=i(Q),oC=n(Q,"LI",{});var v9e=s(oC);Cbe=n(v9e,"STRONG",{});var Uut=s(Cbe);Z2r=r(Uut,"marian"),Uut.forEach(t),evr=r(v9e," \u2014 "),NX=n(v9e,"A",{href:!0});var Jut=s(NX);ovr=r(Jut,"FlaxMarianModel"),Jut.forEach(t),rvr=r(v9e," (Marian model)"),v9e.forEach(t),tvr=i(Q),rC=n(Q,"LI",{});var T9e=s(rC);Mbe=n(T9e,"STRONG",{});var Yut=s(Mbe);avr=r(Yut,"mbart"),Yut.forEach(t),nvr=r(T9e," \u2014 "),qX=n(T9e,"A",{href:!0});var Kut=s(qX);svr=r(Kut,"FlaxMBartModel"),Kut.forEach(t),lvr=r(T9e," (mBART model)"),T9e.forEach(t),ivr=i(Q),tC=n(Q,"LI",{});var F9e=s(tC);Ebe=n(F9e,"STRONG",{});var Zut=s(Ebe);dvr=r(Zut,"mt5"),Zut.forEach(t),cvr=r(F9e," \u2014 "),OX=n(F9e,"A",{href:!0});var e1t=s(OX);fvr=r(e1t,"FlaxMT5Model"),e1t.forEach(t),mvr=r(F9e," (mT5 model)"),F9e.forEach(t),gvr=i(Q),aC=n(Q,"LI",{});var C9e=s(aC);ybe=n(C9e,"STRONG",{});var o1t=s(ybe);hvr=r(o1t,"pegasus"),o1t.forEach(t),pvr=r(C9e," \u2014 "),GX=n(C9e,"A",{href:!0});var r1t=s(GX);_vr=r(r1t,"FlaxPegasusModel"),r1t.forEach(t),uvr=r(C9e," (Pegasus model)"),C9e.forEach(t),bvr=i(Q),nC=n(Q,"LI",{});var M9e=s(nC);wbe=n(M9e,"STRONG",{});var t1t=s(wbe);vvr=r(t1t,"roberta"),t1t.forEach(t),Tvr=r(M9e," \u2014 "),XX=n(M9e,"A",{href:!0});var a1t=s(XX);Fvr=r(a1t,"FlaxRobertaModel"),a1t.forEach(t),Cvr=r(M9e," (RoBERTa model)"),M9e.forEach(t),Mvr=i(Q),sC=n(Q,"LI",{});var E9e=s(sC);Abe=n(E9e,"STRONG",{});var n1t=s(Abe);Evr=r(n1t,"roformer"),n1t.forEach(t),yvr=r(E9e," \u2014 "),VX=n(E9e,"A",{href:!0});var s1t=s(VX);wvr=r(s1t,"FlaxRoFormerModel"),s1t.forEach(t),Avr=r(E9e," (RoFormer model)"),E9e.forEach(t),Lvr=i(Q),lC=n(Q,"LI",{});var y9e=s(lC);Lbe=n(y9e,"STRONG",{});var l1t=s(Lbe);Bvr=r(l1t,"t5"),l1t.forEach(t),xvr=r(y9e," \u2014 "),zX=n(y9e,"A",{href:!0});var i1t=s(zX);kvr=r(i1t,"FlaxT5Model"),i1t.forEach(t),Rvr=r(y9e," (T5 model)"),y9e.forEach(t),Svr=i(Q),iC=n(Q,"LI",{});var w9e=s(iC);Bbe=n(w9e,"STRONG",{});var d1t=s(Bbe);Pvr=r(d1t,"vision-text-dual-encoder"),d1t.forEach(t),$vr=r(w9e," \u2014 "),WX=n(w9e,"A",{href:!0});var c1t=s(WX);Ivr=r(c1t,"FlaxVisionTextDualEncoderModel"),c1t.forEach(t),jvr=r(w9e," (VisionTextDualEncoder model)"),w9e.forEach(t),Dvr=i(Q),dC=n(Q,"LI",{});var A9e=s(dC);xbe=n(A9e,"STRONG",{});var f1t=s(xbe);Nvr=r(f1t,"vit"),f1t.forEach(t),qvr=r(A9e," \u2014 "),QX=n(A9e,"A",{href:!0});var m1t=s(QX);Ovr=r(m1t,"FlaxViTModel"),m1t.forEach(t),Gvr=r(A9e," (ViT model)"),A9e.forEach(t),Xvr=i(Q),cC=n(Q,"LI",{});var L9e=s(cC);kbe=n(L9e,"STRONG",{});var g1t=s(kbe);Vvr=r(g1t,"wav2vec2"),g1t.forEach(t),zvr=r(L9e," \u2014 "),HX=n(L9e,"A",{href:!0});var h1t=s(HX);Wvr=r(h1t,"FlaxWav2Vec2Model"),h1t.forEach(t),Qvr=r(L9e," (Wav2Vec2 model)"),L9e.forEach(t),Hvr=i(Q),fC=n(Q,"LI",{});var B9e=s(fC);Rbe=n(B9e,"STRONG",{});var p1t=s(Rbe);Uvr=r(p1t,"xglm"),p1t.forEach(t),Jvr=r(B9e," \u2014 "),UX=n(B9e,"A",{href:!0});var _1t=s(UX);Yvr=r(_1t,"FlaxXGLMModel"),_1t.forEach(t),Kvr=r(B9e," (XGLM model)"),B9e.forEach(t),Zvr=i(Q),mC=n(Q,"LI",{});var x9e=s(mC);Sbe=n(x9e,"STRONG",{});var u1t=s(Sbe);eTr=r(u1t,"xlm-roberta"),u1t.forEach(t),oTr=r(x9e," \u2014 "),JX=n(x9e,"A",{href:!0});var b1t=s(JX);rTr=r(b1t,"FlaxXLMRobertaModel"),b1t.forEach(t),tTr=r(x9e," (XLM-RoBERTa model)"),x9e.forEach(t),Q.forEach(t),aTr=i(Aa),Pbe=n(Aa,"P",{});var v1t=s(Pbe);nTr=r(v1t,"Examples:"),v1t.forEach(t),sTr=i(Aa),m(_0.$$.fragment,Aa),Aa.forEach(t),fi.forEach(t),kke=i(d),ef=n(d,"H2",{class:!0});var XSe=s(ef);gC=n(XSe,"A",{id:!0,class:!0,href:!0});var T1t=s(gC);$be=n(T1t,"SPAN",{});var F1t=s($be);m(u0.$$.fragment,F1t),F1t.forEach(t),T1t.forEach(t),lTr=i(XSe),Ibe=n(XSe,"SPAN",{});var C1t=s(Ibe);iTr=r(C1t,"FlaxAutoModelForCausalLM"),C1t.forEach(t),XSe.forEach(t),Rke=i(d),Sr=n(d,"DIV",{class:!0});var gi=s(Sr);m(b0.$$.fragment,gi),dTr=i(gi),of=n(gi,"P",{});var GW=s(of);cTr=r(GW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jbe=n(GW,"CODE",{});var M1t=s(jbe);fTr=r(M1t,"from_pretrained()"),M1t.forEach(t),mTr=r(GW,"class method or the "),Dbe=n(GW,"CODE",{});var E1t=s(Dbe);gTr=r(E1t,"from_config()"),E1t.forEach(t),hTr=r(GW,`class
method.`),GW.forEach(t),pTr=i(gi),v0=n(gi,"P",{});var VSe=s(v0);_Tr=r(VSe,"This class cannot be instantiated directly using "),Nbe=n(VSe,"CODE",{});var y1t=s(Nbe);uTr=r(y1t,"__init__()"),y1t.forEach(t),bTr=r(VSe," (throws an error)."),VSe.forEach(t),vTr=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(T0.$$.fragment,hi),TTr=i(hi),qbe=n(hi,"P",{});var w1t=s(qbe);FTr=r(w1t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),w1t.forEach(t),CTr=i(hi),rf=n(hi,"P",{});var XW=s(rf);MTr=r(XW,`Note:
Loading a model from its configuration file does `),Obe=n(XW,"STRONG",{});var A1t=s(Obe);ETr=r(A1t,"not"),A1t.forEach(t),yTr=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gbe=n(XW,"CODE",{});var L1t=s(Gbe);wTr=r(L1t,"from_pretrained()"),L1t.forEach(t),ATr=r(XW,"to load the model weights."),XW.forEach(t),LTr=i(hi),Xbe=n(hi,"P",{});var B1t=s(Xbe);BTr=r(B1t,"Examples:"),B1t.forEach(t),xTr=i(hi),m(F0.$$.fragment,hi),hi.forEach(t),kTr=i(gi),Lo=n(gi,"DIV",{class:!0});var La=s(Lo);m(C0.$$.fragment,La),RTr=i(La),Vbe=n(La,"P",{});var x1t=s(Vbe);STr=r(x1t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),x1t.forEach(t),PTr=i(La),Bn=n(La,"P",{});var S4=s(Bn);$Tr=r(S4,"The model class to instantiate is selected based on the "),zbe=n(S4,"CODE",{});var k1t=s(zbe);ITr=r(k1t,"model_type"),k1t.forEach(t),jTr=r(S4,` property of the config object (either
passed as an argument or loaded from `),Wbe=n(S4,"CODE",{});var R1t=s(Wbe);DTr=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),NTr=r(S4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=n(S4,"CODE",{});var S1t=s(Qbe);qTr=r(S1t,"pretrained_model_name_or_path"),S1t.forEach(t),OTr=r(S4,":"),S4.forEach(t),GTr=i(La),xn=n(La,"UL",{});var P4=s(xn);hC=n(P4,"LI",{});var k9e=s(hC);Hbe=n(k9e,"STRONG",{});var P1t=s(Hbe);XTr=r(P1t,"gpt2"),P1t.forEach(t),VTr=r(k9e," \u2014 "),YX=n(k9e,"A",{href:!0});var $1t=s(YX);zTr=r($1t,"FlaxGPT2LMHeadModel"),$1t.forEach(t),WTr=r(k9e," (OpenAI GPT-2 model)"),k9e.forEach(t),QTr=i(P4),pC=n(P4,"LI",{});var R9e=s(pC);Ube=n(R9e,"STRONG",{});var I1t=s(Ube);HTr=r(I1t,"gpt_neo"),I1t.forEach(t),UTr=r(R9e," \u2014 "),KX=n(R9e,"A",{href:!0});var j1t=s(KX);JTr=r(j1t,"FlaxGPTNeoForCausalLM"),j1t.forEach(t),YTr=r(R9e," (GPT Neo model)"),R9e.forEach(t),KTr=i(P4),_C=n(P4,"LI",{});var S9e=s(_C);Jbe=n(S9e,"STRONG",{});var D1t=s(Jbe);ZTr=r(D1t,"gptj"),D1t.forEach(t),e8r=r(S9e," \u2014 "),ZX=n(S9e,"A",{href:!0});var N1t=s(ZX);o8r=r(N1t,"FlaxGPTJForCausalLM"),N1t.forEach(t),r8r=r(S9e," (GPT-J model)"),S9e.forEach(t),t8r=i(P4),uC=n(P4,"LI",{});var P9e=s(uC);Ybe=n(P9e,"STRONG",{});var q1t=s(Ybe);a8r=r(q1t,"xglm"),q1t.forEach(t),n8r=r(P9e," \u2014 "),eV=n(P9e,"A",{href:!0});var O1t=s(eV);s8r=r(O1t,"FlaxXGLMForCausalLM"),O1t.forEach(t),l8r=r(P9e," (XGLM model)"),P9e.forEach(t),P4.forEach(t),i8r=i(La),Kbe=n(La,"P",{});var G1t=s(Kbe);d8r=r(G1t,"Examples:"),G1t.forEach(t),c8r=i(La),m(M0.$$.fragment,La),La.forEach(t),gi.forEach(t),Ske=i(d),tf=n(d,"H2",{class:!0});var zSe=s(tf);bC=n(zSe,"A",{id:!0,class:!0,href:!0});var X1t=s(bC);Zbe=n(X1t,"SPAN",{});var V1t=s(Zbe);m(E0.$$.fragment,V1t),V1t.forEach(t),X1t.forEach(t),f8r=i(zSe),e3e=n(zSe,"SPAN",{});var z1t=s(e3e);m8r=r(z1t,"FlaxAutoModelForPreTraining"),z1t.forEach(t),zSe.forEach(t),Pke=i(d),Pr=n(d,"DIV",{class:!0});var pi=s(Pr);m(y0.$$.fragment,pi),g8r=i(pi),af=n(pi,"P",{});var VW=s(af);h8r=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),o3e=n(VW,"CODE",{});var W1t=s(o3e);p8r=r(W1t,"from_pretrained()"),W1t.forEach(t),_8r=r(VW,"class method or the "),r3e=n(VW,"CODE",{});var Q1t=s(r3e);u8r=r(Q1t,"from_config()"),Q1t.forEach(t),b8r=r(VW,`class
method.`),VW.forEach(t),v8r=i(pi),w0=n(pi,"P",{});var WSe=s(w0);T8r=r(WSe,"This class cannot be instantiated directly using "),t3e=n(WSe,"CODE",{});var H1t=s(t3e);F8r=r(H1t,"__init__()"),H1t.forEach(t),C8r=r(WSe," (throws an error)."),WSe.forEach(t),M8r=i(pi),Lt=n(pi,"DIV",{class:!0});var _i=s(Lt);m(A0.$$.fragment,_i),E8r=i(_i),a3e=n(_i,"P",{});var U1t=s(a3e);y8r=r(U1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),U1t.forEach(t),w8r=i(_i),nf=n(_i,"P",{});var zW=s(nf);A8r=r(zW,`Note:
Loading a model from its configuration file does `),n3e=n(zW,"STRONG",{});var J1t=s(n3e);L8r=r(J1t,"not"),J1t.forEach(t),B8r=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),s3e=n(zW,"CODE",{});var Y1t=s(s3e);x8r=r(Y1t,"from_pretrained()"),Y1t.forEach(t),k8r=r(zW,"to load the model weights."),zW.forEach(t),R8r=i(_i),l3e=n(_i,"P",{});var K1t=s(l3e);S8r=r(K1t,"Examples:"),K1t.forEach(t),P8r=i(_i),m(L0.$$.fragment,_i),_i.forEach(t),$8r=i(pi),Bo=n(pi,"DIV",{class:!0});var Ba=s(Bo);m(B0.$$.fragment,Ba),I8r=i(Ba),i3e=n(Ba,"P",{});var Z1t=s(i3e);j8r=r(Z1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Z1t.forEach(t),D8r=i(Ba),kn=n(Ba,"P",{});var $4=s(kn);N8r=r($4,"The model class to instantiate is selected based on the "),d3e=n($4,"CODE",{});var ebt=s(d3e);q8r=r(ebt,"model_type"),ebt.forEach(t),O8r=r($4,` property of the config object (either
passed as an argument or loaded from `),c3e=n($4,"CODE",{});var obt=s(c3e);G8r=r(obt,"pretrained_model_name_or_path"),obt.forEach(t),X8r=r($4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=n($4,"CODE",{});var rbt=s(f3e);V8r=r(rbt,"pretrained_model_name_or_path"),rbt.forEach(t),z8r=r($4,":"),$4.forEach(t),W8r=i(Ba),ce=n(Ba,"UL",{});var me=s(ce);vC=n(me,"LI",{});var $9e=s(vC);m3e=n($9e,"STRONG",{});var tbt=s(m3e);Q8r=r(tbt,"albert"),tbt.forEach(t),H8r=r($9e," \u2014 "),oV=n($9e,"A",{href:!0});var abt=s(oV);U8r=r(abt,"FlaxAlbertForPreTraining"),abt.forEach(t),J8r=r($9e," (ALBERT model)"),$9e.forEach(t),Y8r=i(me),TC=n(me,"LI",{});var I9e=s(TC);g3e=n(I9e,"STRONG",{});var nbt=s(g3e);K8r=r(nbt,"bart"),nbt.forEach(t),Z8r=r(I9e," \u2014 "),rV=n(I9e,"A",{href:!0});var sbt=s(rV);eFr=r(sbt,"FlaxBartForConditionalGeneration"),sbt.forEach(t),oFr=r(I9e," (BART model)"),I9e.forEach(t),rFr=i(me),FC=n(me,"LI",{});var j9e=s(FC);h3e=n(j9e,"STRONG",{});var lbt=s(h3e);tFr=r(lbt,"bert"),lbt.forEach(t),aFr=r(j9e," \u2014 "),tV=n(j9e,"A",{href:!0});var ibt=s(tV);nFr=r(ibt,"FlaxBertForPreTraining"),ibt.forEach(t),sFr=r(j9e," (BERT model)"),j9e.forEach(t),lFr=i(me),CC=n(me,"LI",{});var D9e=s(CC);p3e=n(D9e,"STRONG",{});var dbt=s(p3e);iFr=r(dbt,"big_bird"),dbt.forEach(t),dFr=r(D9e," \u2014 "),aV=n(D9e,"A",{href:!0});var cbt=s(aV);cFr=r(cbt,"FlaxBigBirdForPreTraining"),cbt.forEach(t),fFr=r(D9e," (BigBird model)"),D9e.forEach(t),mFr=i(me),MC=n(me,"LI",{});var N9e=s(MC);_3e=n(N9e,"STRONG",{});var fbt=s(_3e);gFr=r(fbt,"electra"),fbt.forEach(t),hFr=r(N9e," \u2014 "),nV=n(N9e,"A",{href:!0});var mbt=s(nV);pFr=r(mbt,"FlaxElectraForPreTraining"),mbt.forEach(t),_Fr=r(N9e," (ELECTRA model)"),N9e.forEach(t),uFr=i(me),EC=n(me,"LI",{});var q9e=s(EC);u3e=n(q9e,"STRONG",{});var gbt=s(u3e);bFr=r(gbt,"mbart"),gbt.forEach(t),vFr=r(q9e," \u2014 "),sV=n(q9e,"A",{href:!0});var hbt=s(sV);TFr=r(hbt,"FlaxMBartForConditionalGeneration"),hbt.forEach(t),FFr=r(q9e," (mBART model)"),q9e.forEach(t),CFr=i(me),yC=n(me,"LI",{});var O9e=s(yC);b3e=n(O9e,"STRONG",{});var pbt=s(b3e);MFr=r(pbt,"mt5"),pbt.forEach(t),EFr=r(O9e," \u2014 "),lV=n(O9e,"A",{href:!0});var _bt=s(lV);yFr=r(_bt,"FlaxMT5ForConditionalGeneration"),_bt.forEach(t),wFr=r(O9e," (mT5 model)"),O9e.forEach(t),AFr=i(me),wC=n(me,"LI",{});var G9e=s(wC);v3e=n(G9e,"STRONG",{});var ubt=s(v3e);LFr=r(ubt,"roberta"),ubt.forEach(t),BFr=r(G9e," \u2014 "),iV=n(G9e,"A",{href:!0});var bbt=s(iV);xFr=r(bbt,"FlaxRobertaForMaskedLM"),bbt.forEach(t),kFr=r(G9e," (RoBERTa model)"),G9e.forEach(t),RFr=i(me),AC=n(me,"LI",{});var X9e=s(AC);T3e=n(X9e,"STRONG",{});var vbt=s(T3e);SFr=r(vbt,"roformer"),vbt.forEach(t),PFr=r(X9e," \u2014 "),dV=n(X9e,"A",{href:!0});var Tbt=s(dV);$Fr=r(Tbt,"FlaxRoFormerForMaskedLM"),Tbt.forEach(t),IFr=r(X9e," (RoFormer model)"),X9e.forEach(t),jFr=i(me),LC=n(me,"LI",{});var V9e=s(LC);F3e=n(V9e,"STRONG",{});var Fbt=s(F3e);DFr=r(Fbt,"t5"),Fbt.forEach(t),NFr=r(V9e," \u2014 "),cV=n(V9e,"A",{href:!0});var Cbt=s(cV);qFr=r(Cbt,"FlaxT5ForConditionalGeneration"),Cbt.forEach(t),OFr=r(V9e," (T5 model)"),V9e.forEach(t),GFr=i(me),BC=n(me,"LI",{});var z9e=s(BC);C3e=n(z9e,"STRONG",{});var Mbt=s(C3e);XFr=r(Mbt,"wav2vec2"),Mbt.forEach(t),VFr=r(z9e," \u2014 "),fV=n(z9e,"A",{href:!0});var Ebt=s(fV);zFr=r(Ebt,"FlaxWav2Vec2ForPreTraining"),Ebt.forEach(t),WFr=r(z9e," (Wav2Vec2 model)"),z9e.forEach(t),QFr=i(me),xC=n(me,"LI",{});var W9e=s(xC);M3e=n(W9e,"STRONG",{});var ybt=s(M3e);HFr=r(ybt,"xlm-roberta"),ybt.forEach(t),UFr=r(W9e," \u2014 "),mV=n(W9e,"A",{href:!0});var wbt=s(mV);JFr=r(wbt,"FlaxXLMRobertaForMaskedLM"),wbt.forEach(t),YFr=r(W9e," (XLM-RoBERTa model)"),W9e.forEach(t),me.forEach(t),KFr=i(Ba),E3e=n(Ba,"P",{});var Abt=s(E3e);ZFr=r(Abt,"Examples:"),Abt.forEach(t),eCr=i(Ba),m(x0.$$.fragment,Ba),Ba.forEach(t),pi.forEach(t),$ke=i(d),sf=n(d,"H2",{class:!0});var QSe=s(sf);kC=n(QSe,"A",{id:!0,class:!0,href:!0});var Lbt=s(kC);y3e=n(Lbt,"SPAN",{});var Bbt=s(y3e);m(k0.$$.fragment,Bbt),Bbt.forEach(t),Lbt.forEach(t),oCr=i(QSe),w3e=n(QSe,"SPAN",{});var xbt=s(w3e);rCr=r(xbt,"FlaxAutoModelForMaskedLM"),xbt.forEach(t),QSe.forEach(t),Ike=i(d),$r=n(d,"DIV",{class:!0});var ui=s($r);m(R0.$$.fragment,ui),tCr=i(ui),lf=n(ui,"P",{});var WW=s(lf);aCr=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),A3e=n(WW,"CODE",{});var kbt=s(A3e);nCr=r(kbt,"from_pretrained()"),kbt.forEach(t),sCr=r(WW,"class method or the "),L3e=n(WW,"CODE",{});var Rbt=s(L3e);lCr=r(Rbt,"from_config()"),Rbt.forEach(t),iCr=r(WW,`class
method.`),WW.forEach(t),dCr=i(ui),S0=n(ui,"P",{});var HSe=s(S0);cCr=r(HSe,"This class cannot be instantiated directly using "),B3e=n(HSe,"CODE",{});var Sbt=s(B3e);fCr=r(Sbt,"__init__()"),Sbt.forEach(t),mCr=r(HSe," (throws an error)."),HSe.forEach(t),gCr=i(ui),Bt=n(ui,"DIV",{class:!0});var bi=s(Bt);m(P0.$$.fragment,bi),hCr=i(bi),x3e=n(bi,"P",{});var Pbt=s(x3e);pCr=r(Pbt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Pbt.forEach(t),_Cr=i(bi),df=n(bi,"P",{});var QW=s(df);uCr=r(QW,`Note:
Loading a model from its configuration file does `),k3e=n(QW,"STRONG",{});var $bt=s(k3e);bCr=r($bt,"not"),$bt.forEach(t),vCr=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),R3e=n(QW,"CODE",{});var Ibt=s(R3e);TCr=r(Ibt,"from_pretrained()"),Ibt.forEach(t),FCr=r(QW,"to load the model weights."),QW.forEach(t),CCr=i(bi),S3e=n(bi,"P",{});var jbt=s(S3e);MCr=r(jbt,"Examples:"),jbt.forEach(t),ECr=i(bi),m($0.$$.fragment,bi),bi.forEach(t),yCr=i(ui),xo=n(ui,"DIV",{class:!0});var xa=s(xo);m(I0.$$.fragment,xa),wCr=i(xa),P3e=n(xa,"P",{});var Dbt=s(P3e);ACr=r(Dbt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Dbt.forEach(t),LCr=i(xa),Rn=n(xa,"P",{});var I4=s(Rn);BCr=r(I4,"The model class to instantiate is selected based on the "),$3e=n(I4,"CODE",{});var Nbt=s($3e);xCr=r(Nbt,"model_type"),Nbt.forEach(t),kCr=r(I4,` property of the config object (either
passed as an argument or loaded from `),I3e=n(I4,"CODE",{});var qbt=s(I3e);RCr=r(qbt,"pretrained_model_name_or_path"),qbt.forEach(t),SCr=r(I4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=n(I4,"CODE",{});var Obt=s(j3e);PCr=r(Obt,"pretrained_model_name_or_path"),Obt.forEach(t),$Cr=r(I4,":"),I4.forEach(t),ICr=i(xa),ue=n(xa,"UL",{});var ye=s(ue);RC=n(ye,"LI",{});var Q9e=s(RC);D3e=n(Q9e,"STRONG",{});var Gbt=s(D3e);jCr=r(Gbt,"albert"),Gbt.forEach(t),DCr=r(Q9e," \u2014 "),gV=n(Q9e,"A",{href:!0});var Xbt=s(gV);NCr=r(Xbt,"FlaxAlbertForMaskedLM"),Xbt.forEach(t),qCr=r(Q9e," (ALBERT model)"),Q9e.forEach(t),OCr=i(ye),SC=n(ye,"LI",{});var H9e=s(SC);N3e=n(H9e,"STRONG",{});var Vbt=s(N3e);GCr=r(Vbt,"bart"),Vbt.forEach(t),XCr=r(H9e," \u2014 "),hV=n(H9e,"A",{href:!0});var zbt=s(hV);VCr=r(zbt,"FlaxBartForConditionalGeneration"),zbt.forEach(t),zCr=r(H9e," (BART model)"),H9e.forEach(t),WCr=i(ye),PC=n(ye,"LI",{});var U9e=s(PC);q3e=n(U9e,"STRONG",{});var Wbt=s(q3e);QCr=r(Wbt,"bert"),Wbt.forEach(t),HCr=r(U9e," \u2014 "),pV=n(U9e,"A",{href:!0});var Qbt=s(pV);UCr=r(Qbt,"FlaxBertForMaskedLM"),Qbt.forEach(t),JCr=r(U9e," (BERT model)"),U9e.forEach(t),YCr=i(ye),$C=n(ye,"LI",{});var J9e=s($C);O3e=n(J9e,"STRONG",{});var Hbt=s(O3e);KCr=r(Hbt,"big_bird"),Hbt.forEach(t),ZCr=r(J9e," \u2014 "),_V=n(J9e,"A",{href:!0});var Ubt=s(_V);eMr=r(Ubt,"FlaxBigBirdForMaskedLM"),Ubt.forEach(t),oMr=r(J9e," (BigBird model)"),J9e.forEach(t),rMr=i(ye),IC=n(ye,"LI",{});var Y9e=s(IC);G3e=n(Y9e,"STRONG",{});var Jbt=s(G3e);tMr=r(Jbt,"distilbert"),Jbt.forEach(t),aMr=r(Y9e," \u2014 "),uV=n(Y9e,"A",{href:!0});var Ybt=s(uV);nMr=r(Ybt,"FlaxDistilBertForMaskedLM"),Ybt.forEach(t),sMr=r(Y9e," (DistilBERT model)"),Y9e.forEach(t),lMr=i(ye),jC=n(ye,"LI",{});var K9e=s(jC);X3e=n(K9e,"STRONG",{});var Kbt=s(X3e);iMr=r(Kbt,"electra"),Kbt.forEach(t),dMr=r(K9e," \u2014 "),bV=n(K9e,"A",{href:!0});var Zbt=s(bV);cMr=r(Zbt,"FlaxElectraForMaskedLM"),Zbt.forEach(t),fMr=r(K9e," (ELECTRA model)"),K9e.forEach(t),mMr=i(ye),DC=n(ye,"LI",{});var Z9e=s(DC);V3e=n(Z9e,"STRONG",{});var e3t=s(V3e);gMr=r(e3t,"mbart"),e3t.forEach(t),hMr=r(Z9e," \u2014 "),vV=n(Z9e,"A",{href:!0});var o3t=s(vV);pMr=r(o3t,"FlaxMBartForConditionalGeneration"),o3t.forEach(t),_Mr=r(Z9e," (mBART model)"),Z9e.forEach(t),uMr=i(ye),NC=n(ye,"LI",{});var eBe=s(NC);z3e=n(eBe,"STRONG",{});var r3t=s(z3e);bMr=r(r3t,"roberta"),r3t.forEach(t),vMr=r(eBe," \u2014 "),TV=n(eBe,"A",{href:!0});var t3t=s(TV);TMr=r(t3t,"FlaxRobertaForMaskedLM"),t3t.forEach(t),FMr=r(eBe," (RoBERTa model)"),eBe.forEach(t),CMr=i(ye),qC=n(ye,"LI",{});var oBe=s(qC);W3e=n(oBe,"STRONG",{});var a3t=s(W3e);MMr=r(a3t,"roformer"),a3t.forEach(t),EMr=r(oBe," \u2014 "),FV=n(oBe,"A",{href:!0});var n3t=s(FV);yMr=r(n3t,"FlaxRoFormerForMaskedLM"),n3t.forEach(t),wMr=r(oBe," (RoFormer model)"),oBe.forEach(t),AMr=i(ye),OC=n(ye,"LI",{});var rBe=s(OC);Q3e=n(rBe,"STRONG",{});var s3t=s(Q3e);LMr=r(s3t,"xlm-roberta"),s3t.forEach(t),BMr=r(rBe," \u2014 "),CV=n(rBe,"A",{href:!0});var l3t=s(CV);xMr=r(l3t,"FlaxXLMRobertaForMaskedLM"),l3t.forEach(t),kMr=r(rBe," (XLM-RoBERTa model)"),rBe.forEach(t),ye.forEach(t),RMr=i(xa),H3e=n(xa,"P",{});var i3t=s(H3e);SMr=r(i3t,"Examples:"),i3t.forEach(t),PMr=i(xa),m(j0.$$.fragment,xa),xa.forEach(t),ui.forEach(t),jke=i(d),cf=n(d,"H2",{class:!0});var USe=s(cf);GC=n(USe,"A",{id:!0,class:!0,href:!0});var d3t=s(GC);U3e=n(d3t,"SPAN",{});var c3t=s(U3e);m(D0.$$.fragment,c3t),c3t.forEach(t),d3t.forEach(t),$Mr=i(USe),J3e=n(USe,"SPAN",{});var f3t=s(J3e);IMr=r(f3t,"FlaxAutoModelForSeq2SeqLM"),f3t.forEach(t),USe.forEach(t),Dke=i(d),Ir=n(d,"DIV",{class:!0});var vi=s(Ir);m(N0.$$.fragment,vi),jMr=i(vi),ff=n(vi,"P",{});var HW=s(ff);DMr=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Y3e=n(HW,"CODE",{});var m3t=s(Y3e);NMr=r(m3t,"from_pretrained()"),m3t.forEach(t),qMr=r(HW,"class method or the "),K3e=n(HW,"CODE",{});var g3t=s(K3e);OMr=r(g3t,"from_config()"),g3t.forEach(t),GMr=r(HW,`class
method.`),HW.forEach(t),XMr=i(vi),q0=n(vi,"P",{});var JSe=s(q0);VMr=r(JSe,"This class cannot be instantiated directly using "),Z3e=n(JSe,"CODE",{});var h3t=s(Z3e);zMr=r(h3t,"__init__()"),h3t.forEach(t),WMr=r(JSe," (throws an error)."),JSe.forEach(t),QMr=i(vi),xt=n(vi,"DIV",{class:!0});var Ti=s(xt);m(O0.$$.fragment,Ti),HMr=i(Ti),e5e=n(Ti,"P",{});var p3t=s(e5e);UMr=r(p3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),p3t.forEach(t),JMr=i(Ti),mf=n(Ti,"P",{});var UW=s(mf);YMr=r(UW,`Note:
Loading a model from its configuration file does `),o5e=n(UW,"STRONG",{});var _3t=s(o5e);KMr=r(_3t,"not"),_3t.forEach(t),ZMr=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),r5e=n(UW,"CODE",{});var u3t=s(r5e);e4r=r(u3t,"from_pretrained()"),u3t.forEach(t),o4r=r(UW,"to load the model weights."),UW.forEach(t),r4r=i(Ti),t5e=n(Ti,"P",{});var b3t=s(t5e);t4r=r(b3t,"Examples:"),b3t.forEach(t),a4r=i(Ti),m(G0.$$.fragment,Ti),Ti.forEach(t),n4r=i(vi),ko=n(vi,"DIV",{class:!0});var ka=s(ko);m(X0.$$.fragment,ka),s4r=i(ka),a5e=n(ka,"P",{});var v3t=s(a5e);l4r=r(v3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),v3t.forEach(t),i4r=i(ka),Sn=n(ka,"P",{});var j4=s(Sn);d4r=r(j4,"The model class to instantiate is selected based on the "),n5e=n(j4,"CODE",{});var T3t=s(n5e);c4r=r(T3t,"model_type"),T3t.forEach(t),f4r=r(j4,` property of the config object (either
passed as an argument or loaded from `),s5e=n(j4,"CODE",{});var F3t=s(s5e);m4r=r(F3t,"pretrained_model_name_or_path"),F3t.forEach(t),g4r=r(j4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l5e=n(j4,"CODE",{});var C3t=s(l5e);h4r=r(C3t,"pretrained_model_name_or_path"),C3t.forEach(t),p4r=r(j4,":"),j4.forEach(t),_4r=i(ka),Ce=n(ka,"UL",{});var lo=s(Ce);XC=n(lo,"LI",{});var tBe=s(XC);i5e=n(tBe,"STRONG",{});var M3t=s(i5e);u4r=r(M3t,"bart"),M3t.forEach(t),b4r=r(tBe," \u2014 "),MV=n(tBe,"A",{href:!0});var E3t=s(MV);v4r=r(E3t,"FlaxBartForConditionalGeneration"),E3t.forEach(t),T4r=r(tBe," (BART model)"),tBe.forEach(t),F4r=i(lo),VC=n(lo,"LI",{});var aBe=s(VC);d5e=n(aBe,"STRONG",{});var y3t=s(d5e);C4r=r(y3t,"blenderbot"),y3t.forEach(t),M4r=r(aBe," \u2014 "),EV=n(aBe,"A",{href:!0});var w3t=s(EV);E4r=r(w3t,"FlaxBlenderbotForConditionalGeneration"),w3t.forEach(t),y4r=r(aBe," (Blenderbot model)"),aBe.forEach(t),w4r=i(lo),zC=n(lo,"LI",{});var nBe=s(zC);c5e=n(nBe,"STRONG",{});var A3t=s(c5e);A4r=r(A3t,"blenderbot-small"),A3t.forEach(t),L4r=r(nBe," \u2014 "),yV=n(nBe,"A",{href:!0});var L3t=s(yV);B4r=r(L3t,"FlaxBlenderbotSmallForConditionalGeneration"),L3t.forEach(t),x4r=r(nBe," (BlenderbotSmall model)"),nBe.forEach(t),k4r=i(lo),WC=n(lo,"LI",{});var sBe=s(WC);f5e=n(sBe,"STRONG",{});var B3t=s(f5e);R4r=r(B3t,"encoder-decoder"),B3t.forEach(t),S4r=r(sBe," \u2014 "),wV=n(sBe,"A",{href:!0});var x3t=s(wV);P4r=r(x3t,"FlaxEncoderDecoderModel"),x3t.forEach(t),$4r=r(sBe," (Encoder decoder model)"),sBe.forEach(t),I4r=i(lo),QC=n(lo,"LI",{});var lBe=s(QC);m5e=n(lBe,"STRONG",{});var k3t=s(m5e);j4r=r(k3t,"marian"),k3t.forEach(t),D4r=r(lBe," \u2014 "),AV=n(lBe,"A",{href:!0});var R3t=s(AV);N4r=r(R3t,"FlaxMarianMTModel"),R3t.forEach(t),q4r=r(lBe," (Marian model)"),lBe.forEach(t),O4r=i(lo),HC=n(lo,"LI",{});var iBe=s(HC);g5e=n(iBe,"STRONG",{});var S3t=s(g5e);G4r=r(S3t,"mbart"),S3t.forEach(t),X4r=r(iBe," \u2014 "),LV=n(iBe,"A",{href:!0});var P3t=s(LV);V4r=r(P3t,"FlaxMBartForConditionalGeneration"),P3t.forEach(t),z4r=r(iBe," (mBART model)"),iBe.forEach(t),W4r=i(lo),UC=n(lo,"LI",{});var dBe=s(UC);h5e=n(dBe,"STRONG",{});var $3t=s(h5e);Q4r=r($3t,"mt5"),$3t.forEach(t),H4r=r(dBe," \u2014 "),BV=n(dBe,"A",{href:!0});var I3t=s(BV);U4r=r(I3t,"FlaxMT5ForConditionalGeneration"),I3t.forEach(t),J4r=r(dBe," (mT5 model)"),dBe.forEach(t),Y4r=i(lo),JC=n(lo,"LI",{});var cBe=s(JC);p5e=n(cBe,"STRONG",{});var j3t=s(p5e);K4r=r(j3t,"pegasus"),j3t.forEach(t),Z4r=r(cBe," \u2014 "),xV=n(cBe,"A",{href:!0});var D3t=s(xV);eEr=r(D3t,"FlaxPegasusForConditionalGeneration"),D3t.forEach(t),oEr=r(cBe," (Pegasus model)"),cBe.forEach(t),rEr=i(lo),YC=n(lo,"LI",{});var fBe=s(YC);_5e=n(fBe,"STRONG",{});var N3t=s(_5e);tEr=r(N3t,"t5"),N3t.forEach(t),aEr=r(fBe," \u2014 "),kV=n(fBe,"A",{href:!0});var q3t=s(kV);nEr=r(q3t,"FlaxT5ForConditionalGeneration"),q3t.forEach(t),sEr=r(fBe," (T5 model)"),fBe.forEach(t),lo.forEach(t),lEr=i(ka),u5e=n(ka,"P",{});var O3t=s(u5e);iEr=r(O3t,"Examples:"),O3t.forEach(t),dEr=i(ka),m(V0.$$.fragment,ka),ka.forEach(t),vi.forEach(t),Nke=i(d),gf=n(d,"H2",{class:!0});var YSe=s(gf);KC=n(YSe,"A",{id:!0,class:!0,href:!0});var G3t=s(KC);b5e=n(G3t,"SPAN",{});var X3t=s(b5e);m(z0.$$.fragment,X3t),X3t.forEach(t),G3t.forEach(t),cEr=i(YSe),v5e=n(YSe,"SPAN",{});var V3t=s(v5e);fEr=r(V3t,"FlaxAutoModelForSequenceClassification"),V3t.forEach(t),YSe.forEach(t),qke=i(d),jr=n(d,"DIV",{class:!0});var Fi=s(jr);m(W0.$$.fragment,Fi),mEr=i(Fi),hf=n(Fi,"P",{});var JW=s(hf);gEr=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),T5e=n(JW,"CODE",{});var z3t=s(T5e);hEr=r(z3t,"from_pretrained()"),z3t.forEach(t),pEr=r(JW,"class method or the "),F5e=n(JW,"CODE",{});var W3t=s(F5e);_Er=r(W3t,"from_config()"),W3t.forEach(t),uEr=r(JW,`class
method.`),JW.forEach(t),bEr=i(Fi),Q0=n(Fi,"P",{});var KSe=s(Q0);vEr=r(KSe,"This class cannot be instantiated directly using "),C5e=n(KSe,"CODE",{});var Q3t=s(C5e);TEr=r(Q3t,"__init__()"),Q3t.forEach(t),FEr=r(KSe," (throws an error)."),KSe.forEach(t),CEr=i(Fi),kt=n(Fi,"DIV",{class:!0});var Ci=s(kt);m(H0.$$.fragment,Ci),MEr=i(Ci),M5e=n(Ci,"P",{});var H3t=s(M5e);EEr=r(H3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),H3t.forEach(t),yEr=i(Ci),pf=n(Ci,"P",{});var YW=s(pf);wEr=r(YW,`Note:
Loading a model from its configuration file does `),E5e=n(YW,"STRONG",{});var U3t=s(E5e);AEr=r(U3t,"not"),U3t.forEach(t),LEr=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),y5e=n(YW,"CODE",{});var J3t=s(y5e);BEr=r(J3t,"from_pretrained()"),J3t.forEach(t),xEr=r(YW,"to load the model weights."),YW.forEach(t),kEr=i(Ci),w5e=n(Ci,"P",{});var Y3t=s(w5e);REr=r(Y3t,"Examples:"),Y3t.forEach(t),SEr=i(Ci),m(U0.$$.fragment,Ci),Ci.forEach(t),PEr=i(Fi),Ro=n(Fi,"DIV",{class:!0});var Ra=s(Ro);m(J0.$$.fragment,Ra),$Er=i(Ra),A5e=n(Ra,"P",{});var K3t=s(A5e);IEr=r(K3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),K3t.forEach(t),jEr=i(Ra),Pn=n(Ra,"P",{});var D4=s(Pn);DEr=r(D4,"The model class to instantiate is selected based on the "),L5e=n(D4,"CODE",{});var Z3t=s(L5e);NEr=r(Z3t,"model_type"),Z3t.forEach(t),qEr=r(D4,` property of the config object (either
passed as an argument or loaded from `),B5e=n(D4,"CODE",{});var e5t=s(B5e);OEr=r(e5t,"pretrained_model_name_or_path"),e5t.forEach(t),GEr=r(D4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=n(D4,"CODE",{});var o5t=s(x5e);XEr=r(o5t,"pretrained_model_name_or_path"),o5t.forEach(t),VEr=r(D4,":"),D4.forEach(t),zEr=i(Ra),be=n(Ra,"UL",{});var we=s(be);ZC=n(we,"LI",{});var mBe=s(ZC);k5e=n(mBe,"STRONG",{});var r5t=s(k5e);WEr=r(r5t,"albert"),r5t.forEach(t),QEr=r(mBe," \u2014 "),RV=n(mBe,"A",{href:!0});var t5t=s(RV);HEr=r(t5t,"FlaxAlbertForSequenceClassification"),t5t.forEach(t),UEr=r(mBe," (ALBERT model)"),mBe.forEach(t),JEr=i(we),eM=n(we,"LI",{});var gBe=s(eM);R5e=n(gBe,"STRONG",{});var a5t=s(R5e);YEr=r(a5t,"bart"),a5t.forEach(t),KEr=r(gBe," \u2014 "),SV=n(gBe,"A",{href:!0});var n5t=s(SV);ZEr=r(n5t,"FlaxBartForSequenceClassification"),n5t.forEach(t),eyr=r(gBe," (BART model)"),gBe.forEach(t),oyr=i(we),oM=n(we,"LI",{});var hBe=s(oM);S5e=n(hBe,"STRONG",{});var s5t=s(S5e);ryr=r(s5t,"bert"),s5t.forEach(t),tyr=r(hBe," \u2014 "),PV=n(hBe,"A",{href:!0});var l5t=s(PV);ayr=r(l5t,"FlaxBertForSequenceClassification"),l5t.forEach(t),nyr=r(hBe," (BERT model)"),hBe.forEach(t),syr=i(we),rM=n(we,"LI",{});var pBe=s(rM);P5e=n(pBe,"STRONG",{});var i5t=s(P5e);lyr=r(i5t,"big_bird"),i5t.forEach(t),iyr=r(pBe," \u2014 "),$V=n(pBe,"A",{href:!0});var d5t=s($V);dyr=r(d5t,"FlaxBigBirdForSequenceClassification"),d5t.forEach(t),cyr=r(pBe," (BigBird model)"),pBe.forEach(t),fyr=i(we),tM=n(we,"LI",{});var _Be=s(tM);$5e=n(_Be,"STRONG",{});var c5t=s($5e);myr=r(c5t,"distilbert"),c5t.forEach(t),gyr=r(_Be," \u2014 "),IV=n(_Be,"A",{href:!0});var f5t=s(IV);hyr=r(f5t,"FlaxDistilBertForSequenceClassification"),f5t.forEach(t),pyr=r(_Be," (DistilBERT model)"),_Be.forEach(t),_yr=i(we),aM=n(we,"LI",{});var uBe=s(aM);I5e=n(uBe,"STRONG",{});var m5t=s(I5e);uyr=r(m5t,"electra"),m5t.forEach(t),byr=r(uBe," \u2014 "),jV=n(uBe,"A",{href:!0});var g5t=s(jV);vyr=r(g5t,"FlaxElectraForSequenceClassification"),g5t.forEach(t),Tyr=r(uBe," (ELECTRA model)"),uBe.forEach(t),Fyr=i(we),nM=n(we,"LI",{});var bBe=s(nM);j5e=n(bBe,"STRONG",{});var h5t=s(j5e);Cyr=r(h5t,"mbart"),h5t.forEach(t),Myr=r(bBe," \u2014 "),DV=n(bBe,"A",{href:!0});var p5t=s(DV);Eyr=r(p5t,"FlaxMBartForSequenceClassification"),p5t.forEach(t),yyr=r(bBe," (mBART model)"),bBe.forEach(t),wyr=i(we),sM=n(we,"LI",{});var vBe=s(sM);D5e=n(vBe,"STRONG",{});var _5t=s(D5e);Ayr=r(_5t,"roberta"),_5t.forEach(t),Lyr=r(vBe," \u2014 "),NV=n(vBe,"A",{href:!0});var u5t=s(NV);Byr=r(u5t,"FlaxRobertaForSequenceClassification"),u5t.forEach(t),xyr=r(vBe," (RoBERTa model)"),vBe.forEach(t),kyr=i(we),lM=n(we,"LI",{});var TBe=s(lM);N5e=n(TBe,"STRONG",{});var b5t=s(N5e);Ryr=r(b5t,"roformer"),b5t.forEach(t),Syr=r(TBe," \u2014 "),qV=n(TBe,"A",{href:!0});var v5t=s(qV);Pyr=r(v5t,"FlaxRoFormerForSequenceClassification"),v5t.forEach(t),$yr=r(TBe," (RoFormer model)"),TBe.forEach(t),Iyr=i(we),iM=n(we,"LI",{});var FBe=s(iM);q5e=n(FBe,"STRONG",{});var T5t=s(q5e);jyr=r(T5t,"xlm-roberta"),T5t.forEach(t),Dyr=r(FBe," \u2014 "),OV=n(FBe,"A",{href:!0});var F5t=s(OV);Nyr=r(F5t,"FlaxXLMRobertaForSequenceClassification"),F5t.forEach(t),qyr=r(FBe," (XLM-RoBERTa model)"),FBe.forEach(t),we.forEach(t),Oyr=i(Ra),O5e=n(Ra,"P",{});var C5t=s(O5e);Gyr=r(C5t,"Examples:"),C5t.forEach(t),Xyr=i(Ra),m(Y0.$$.fragment,Ra),Ra.forEach(t),Fi.forEach(t),Oke=i(d),_f=n(d,"H2",{class:!0});var ZSe=s(_f);dM=n(ZSe,"A",{id:!0,class:!0,href:!0});var M5t=s(dM);G5e=n(M5t,"SPAN",{});var E5t=s(G5e);m(K0.$$.fragment,E5t),E5t.forEach(t),M5t.forEach(t),Vyr=i(ZSe),X5e=n(ZSe,"SPAN",{});var y5t=s(X5e);zyr=r(y5t,"FlaxAutoModelForQuestionAnswering"),y5t.forEach(t),ZSe.forEach(t),Gke=i(d),Dr=n(d,"DIV",{class:!0});var Mi=s(Dr);m(Z0.$$.fragment,Mi),Wyr=i(Mi),uf=n(Mi,"P",{});var KW=s(uf);Qyr=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),V5e=n(KW,"CODE",{});var w5t=s(V5e);Hyr=r(w5t,"from_pretrained()"),w5t.forEach(t),Uyr=r(KW,"class method or the "),z5e=n(KW,"CODE",{});var A5t=s(z5e);Jyr=r(A5t,"from_config()"),A5t.forEach(t),Yyr=r(KW,`class
method.`),KW.forEach(t),Kyr=i(Mi),eL=n(Mi,"P",{});var ePe=s(eL);Zyr=r(ePe,"This class cannot be instantiated directly using "),W5e=n(ePe,"CODE",{});var L5t=s(W5e);ewr=r(L5t,"__init__()"),L5t.forEach(t),owr=r(ePe," (throws an error)."),ePe.forEach(t),rwr=i(Mi),Rt=n(Mi,"DIV",{class:!0});var Ei=s(Rt);m(oL.$$.fragment,Ei),twr=i(Ei),Q5e=n(Ei,"P",{});var B5t=s(Q5e);awr=r(B5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),B5t.forEach(t),nwr=i(Ei),bf=n(Ei,"P",{});var ZW=s(bf);swr=r(ZW,`Note:
Loading a model from its configuration file does `),H5e=n(ZW,"STRONG",{});var x5t=s(H5e);lwr=r(x5t,"not"),x5t.forEach(t),iwr=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),U5e=n(ZW,"CODE",{});var k5t=s(U5e);dwr=r(k5t,"from_pretrained()"),k5t.forEach(t),cwr=r(ZW,"to load the model weights."),ZW.forEach(t),fwr=i(Ei),J5e=n(Ei,"P",{});var R5t=s(J5e);mwr=r(R5t,"Examples:"),R5t.forEach(t),gwr=i(Ei),m(rL.$$.fragment,Ei),Ei.forEach(t),hwr=i(Mi),So=n(Mi,"DIV",{class:!0});var Sa=s(So);m(tL.$$.fragment,Sa),pwr=i(Sa),Y5e=n(Sa,"P",{});var S5t=s(Y5e);_wr=r(S5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),S5t.forEach(t),uwr=i(Sa),$n=n(Sa,"P",{});var N4=s($n);bwr=r(N4,"The model class to instantiate is selected based on the "),K5e=n(N4,"CODE",{});var P5t=s(K5e);vwr=r(P5t,"model_type"),P5t.forEach(t),Twr=r(N4,` property of the config object (either
passed as an argument or loaded from `),Z5e=n(N4,"CODE",{});var $5t=s(Z5e);Fwr=r($5t,"pretrained_model_name_or_path"),$5t.forEach(t),Cwr=r(N4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=n(N4,"CODE",{});var I5t=s(e2e);Mwr=r(I5t,"pretrained_model_name_or_path"),I5t.forEach(t),Ewr=r(N4,":"),N4.forEach(t),ywr=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);cM=n(Ae,"LI",{});var CBe=s(cM);o2e=n(CBe,"STRONG",{});var j5t=s(o2e);wwr=r(j5t,"albert"),j5t.forEach(t),Awr=r(CBe," \u2014 "),GV=n(CBe,"A",{href:!0});var D5t=s(GV);Lwr=r(D5t,"FlaxAlbertForQuestionAnswering"),D5t.forEach(t),Bwr=r(CBe," (ALBERT model)"),CBe.forEach(t),xwr=i(Ae),fM=n(Ae,"LI",{});var MBe=s(fM);r2e=n(MBe,"STRONG",{});var N5t=s(r2e);kwr=r(N5t,"bart"),N5t.forEach(t),Rwr=r(MBe," \u2014 "),XV=n(MBe,"A",{href:!0});var q5t=s(XV);Swr=r(q5t,"FlaxBartForQuestionAnswering"),q5t.forEach(t),Pwr=r(MBe," (BART model)"),MBe.forEach(t),$wr=i(Ae),mM=n(Ae,"LI",{});var EBe=s(mM);t2e=n(EBe,"STRONG",{});var O5t=s(t2e);Iwr=r(O5t,"bert"),O5t.forEach(t),jwr=r(EBe," \u2014 "),VV=n(EBe,"A",{href:!0});var G5t=s(VV);Dwr=r(G5t,"FlaxBertForQuestionAnswering"),G5t.forEach(t),Nwr=r(EBe," (BERT model)"),EBe.forEach(t),qwr=i(Ae),gM=n(Ae,"LI",{});var yBe=s(gM);a2e=n(yBe,"STRONG",{});var X5t=s(a2e);Owr=r(X5t,"big_bird"),X5t.forEach(t),Gwr=r(yBe," \u2014 "),zV=n(yBe,"A",{href:!0});var V5t=s(zV);Xwr=r(V5t,"FlaxBigBirdForQuestionAnswering"),V5t.forEach(t),Vwr=r(yBe," (BigBird model)"),yBe.forEach(t),zwr=i(Ae),hM=n(Ae,"LI",{});var wBe=s(hM);n2e=n(wBe,"STRONG",{});var z5t=s(n2e);Wwr=r(z5t,"distilbert"),z5t.forEach(t),Qwr=r(wBe," \u2014 "),WV=n(wBe,"A",{href:!0});var W5t=s(WV);Hwr=r(W5t,"FlaxDistilBertForQuestionAnswering"),W5t.forEach(t),Uwr=r(wBe," (DistilBERT model)"),wBe.forEach(t),Jwr=i(Ae),pM=n(Ae,"LI",{});var ABe=s(pM);s2e=n(ABe,"STRONG",{});var Q5t=s(s2e);Ywr=r(Q5t,"electra"),Q5t.forEach(t),Kwr=r(ABe," \u2014 "),QV=n(ABe,"A",{href:!0});var H5t=s(QV);Zwr=r(H5t,"FlaxElectraForQuestionAnswering"),H5t.forEach(t),e6r=r(ABe," (ELECTRA model)"),ABe.forEach(t),o6r=i(Ae),_M=n(Ae,"LI",{});var LBe=s(_M);l2e=n(LBe,"STRONG",{});var U5t=s(l2e);r6r=r(U5t,"mbart"),U5t.forEach(t),t6r=r(LBe," \u2014 "),HV=n(LBe,"A",{href:!0});var J5t=s(HV);a6r=r(J5t,"FlaxMBartForQuestionAnswering"),J5t.forEach(t),n6r=r(LBe," (mBART model)"),LBe.forEach(t),s6r=i(Ae),uM=n(Ae,"LI",{});var BBe=s(uM);i2e=n(BBe,"STRONG",{});var Y5t=s(i2e);l6r=r(Y5t,"roberta"),Y5t.forEach(t),i6r=r(BBe," \u2014 "),UV=n(BBe,"A",{href:!0});var K5t=s(UV);d6r=r(K5t,"FlaxRobertaForQuestionAnswering"),K5t.forEach(t),c6r=r(BBe," (RoBERTa model)"),BBe.forEach(t),f6r=i(Ae),bM=n(Ae,"LI",{});var xBe=s(bM);d2e=n(xBe,"STRONG",{});var Z5t=s(d2e);m6r=r(Z5t,"roformer"),Z5t.forEach(t),g6r=r(xBe," \u2014 "),JV=n(xBe,"A",{href:!0});var e2t=s(JV);h6r=r(e2t,"FlaxRoFormerForQuestionAnswering"),e2t.forEach(t),p6r=r(xBe," (RoFormer model)"),xBe.forEach(t),_6r=i(Ae),vM=n(Ae,"LI",{});var kBe=s(vM);c2e=n(kBe,"STRONG",{});var o2t=s(c2e);u6r=r(o2t,"xlm-roberta"),o2t.forEach(t),b6r=r(kBe," \u2014 "),YV=n(kBe,"A",{href:!0});var r2t=s(YV);v6r=r(r2t,"FlaxXLMRobertaForQuestionAnswering"),r2t.forEach(t),T6r=r(kBe," (XLM-RoBERTa model)"),kBe.forEach(t),Ae.forEach(t),F6r=i(Sa),f2e=n(Sa,"P",{});var t2t=s(f2e);C6r=r(t2t,"Examples:"),t2t.forEach(t),M6r=i(Sa),m(aL.$$.fragment,Sa),Sa.forEach(t),Mi.forEach(t),Xke=i(d),vf=n(d,"H2",{class:!0});var oPe=s(vf);TM=n(oPe,"A",{id:!0,class:!0,href:!0});var a2t=s(TM);m2e=n(a2t,"SPAN",{});var n2t=s(m2e);m(nL.$$.fragment,n2t),n2t.forEach(t),a2t.forEach(t),E6r=i(oPe),g2e=n(oPe,"SPAN",{});var s2t=s(g2e);y6r=r(s2t,"FlaxAutoModelForTokenClassification"),s2t.forEach(t),oPe.forEach(t),Vke=i(d),Nr=n(d,"DIV",{class:!0});var yi=s(Nr);m(sL.$$.fragment,yi),w6r=i(yi),Tf=n(yi,"P",{});var eQ=s(Tf);A6r=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),h2e=n(eQ,"CODE",{});var l2t=s(h2e);L6r=r(l2t,"from_pretrained()"),l2t.forEach(t),B6r=r(eQ,"class method or the "),p2e=n(eQ,"CODE",{});var i2t=s(p2e);x6r=r(i2t,"from_config()"),i2t.forEach(t),k6r=r(eQ,`class
method.`),eQ.forEach(t),R6r=i(yi),lL=n(yi,"P",{});var rPe=s(lL);S6r=r(rPe,"This class cannot be instantiated directly using "),_2e=n(rPe,"CODE",{});var d2t=s(_2e);P6r=r(d2t,"__init__()"),d2t.forEach(t),$6r=r(rPe," (throws an error)."),rPe.forEach(t),I6r=i(yi),St=n(yi,"DIV",{class:!0});var wi=s(St);m(iL.$$.fragment,wi),j6r=i(wi),u2e=n(wi,"P",{});var c2t=s(u2e);D6r=r(c2t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),c2t.forEach(t),N6r=i(wi),Ff=n(wi,"P",{});var oQ=s(Ff);q6r=r(oQ,`Note:
Loading a model from its configuration file does `),b2e=n(oQ,"STRONG",{});var f2t=s(b2e);O6r=r(f2t,"not"),f2t.forEach(t),G6r=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),v2e=n(oQ,"CODE",{});var m2t=s(v2e);X6r=r(m2t,"from_pretrained()"),m2t.forEach(t),V6r=r(oQ,"to load the model weights."),oQ.forEach(t),z6r=i(wi),T2e=n(wi,"P",{});var g2t=s(T2e);W6r=r(g2t,"Examples:"),g2t.forEach(t),Q6r=i(wi),m(dL.$$.fragment,wi),wi.forEach(t),H6r=i(yi),Po=n(yi,"DIV",{class:!0});var Pa=s(Po);m(cL.$$.fragment,Pa),U6r=i(Pa),F2e=n(Pa,"P",{});var h2t=s(F2e);J6r=r(h2t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),h2t.forEach(t),Y6r=i(Pa),In=n(Pa,"P",{});var q4=s(In);K6r=r(q4,"The model class to instantiate is selected based on the "),C2e=n(q4,"CODE",{});var p2t=s(C2e);Z6r=r(p2t,"model_type"),p2t.forEach(t),eAr=r(q4,` property of the config object (either
passed as an argument or loaded from `),M2e=n(q4,"CODE",{});var _2t=s(M2e);oAr=r(_2t,"pretrained_model_name_or_path"),_2t.forEach(t),rAr=r(q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=n(q4,"CODE",{});var u2t=s(E2e);tAr=r(u2t,"pretrained_model_name_or_path"),u2t.forEach(t),aAr=r(q4,":"),q4.forEach(t),nAr=i(Pa),Re=n(Pa,"UL",{});var Go=s(Re);FM=n(Go,"LI",{});var RBe=s(FM);y2e=n(RBe,"STRONG",{});var b2t=s(y2e);sAr=r(b2t,"albert"),b2t.forEach(t),lAr=r(RBe," \u2014 "),KV=n(RBe,"A",{href:!0});var v2t=s(KV);iAr=r(v2t,"FlaxAlbertForTokenClassification"),v2t.forEach(t),dAr=r(RBe," (ALBERT model)"),RBe.forEach(t),cAr=i(Go),CM=n(Go,"LI",{});var SBe=s(CM);w2e=n(SBe,"STRONG",{});var T2t=s(w2e);fAr=r(T2t,"bert"),T2t.forEach(t),mAr=r(SBe," \u2014 "),ZV=n(SBe,"A",{href:!0});var F2t=s(ZV);gAr=r(F2t,"FlaxBertForTokenClassification"),F2t.forEach(t),hAr=r(SBe," (BERT model)"),SBe.forEach(t),pAr=i(Go),MM=n(Go,"LI",{});var PBe=s(MM);A2e=n(PBe,"STRONG",{});var C2t=s(A2e);_Ar=r(C2t,"big_bird"),C2t.forEach(t),uAr=r(PBe," \u2014 "),ez=n(PBe,"A",{href:!0});var M2t=s(ez);bAr=r(M2t,"FlaxBigBirdForTokenClassification"),M2t.forEach(t),vAr=r(PBe," (BigBird model)"),PBe.forEach(t),TAr=i(Go),EM=n(Go,"LI",{});var $Be=s(EM);L2e=n($Be,"STRONG",{});var E2t=s(L2e);FAr=r(E2t,"distilbert"),E2t.forEach(t),CAr=r($Be," \u2014 "),oz=n($Be,"A",{href:!0});var y2t=s(oz);MAr=r(y2t,"FlaxDistilBertForTokenClassification"),y2t.forEach(t),EAr=r($Be," (DistilBERT model)"),$Be.forEach(t),yAr=i(Go),yM=n(Go,"LI",{});var IBe=s(yM);B2e=n(IBe,"STRONG",{});var w2t=s(B2e);wAr=r(w2t,"electra"),w2t.forEach(t),AAr=r(IBe," \u2014 "),rz=n(IBe,"A",{href:!0});var A2t=s(rz);LAr=r(A2t,"FlaxElectraForTokenClassification"),A2t.forEach(t),BAr=r(IBe," (ELECTRA model)"),IBe.forEach(t),xAr=i(Go),wM=n(Go,"LI",{});var jBe=s(wM);x2e=n(jBe,"STRONG",{});var L2t=s(x2e);kAr=r(L2t,"roberta"),L2t.forEach(t),RAr=r(jBe," \u2014 "),tz=n(jBe,"A",{href:!0});var B2t=s(tz);SAr=r(B2t,"FlaxRobertaForTokenClassification"),B2t.forEach(t),PAr=r(jBe," (RoBERTa model)"),jBe.forEach(t),$Ar=i(Go),AM=n(Go,"LI",{});var DBe=s(AM);k2e=n(DBe,"STRONG",{});var x2t=s(k2e);IAr=r(x2t,"roformer"),x2t.forEach(t),jAr=r(DBe," \u2014 "),az=n(DBe,"A",{href:!0});var k2t=s(az);DAr=r(k2t,"FlaxRoFormerForTokenClassification"),k2t.forEach(t),NAr=r(DBe," (RoFormer model)"),DBe.forEach(t),qAr=i(Go),LM=n(Go,"LI",{});var NBe=s(LM);R2e=n(NBe,"STRONG",{});var R2t=s(R2e);OAr=r(R2t,"xlm-roberta"),R2t.forEach(t),GAr=r(NBe," \u2014 "),nz=n(NBe,"A",{href:!0});var S2t=s(nz);XAr=r(S2t,"FlaxXLMRobertaForTokenClassification"),S2t.forEach(t),VAr=r(NBe," (XLM-RoBERTa model)"),NBe.forEach(t),Go.forEach(t),zAr=i(Pa),S2e=n(Pa,"P",{});var P2t=s(S2e);WAr=r(P2t,"Examples:"),P2t.forEach(t),QAr=i(Pa),m(fL.$$.fragment,Pa),Pa.forEach(t),yi.forEach(t),zke=i(d),Cf=n(d,"H2",{class:!0});var tPe=s(Cf);BM=n(tPe,"A",{id:!0,class:!0,href:!0});var $2t=s(BM);P2e=n($2t,"SPAN",{});var I2t=s(P2e);m(mL.$$.fragment,I2t),I2t.forEach(t),$2t.forEach(t),HAr=i(tPe),$2e=n(tPe,"SPAN",{});var j2t=s($2e);UAr=r(j2t,"FlaxAutoModelForMultipleChoice"),j2t.forEach(t),tPe.forEach(t),Wke=i(d),qr=n(d,"DIV",{class:!0});var Ai=s(qr);m(gL.$$.fragment,Ai),JAr=i(Ai),Mf=n(Ai,"P",{});var rQ=s(Mf);YAr=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),I2e=n(rQ,"CODE",{});var D2t=s(I2e);KAr=r(D2t,"from_pretrained()"),D2t.forEach(t),ZAr=r(rQ,"class method or the "),j2e=n(rQ,"CODE",{});var N2t=s(j2e);e0r=r(N2t,"from_config()"),N2t.forEach(t),o0r=r(rQ,`class
method.`),rQ.forEach(t),r0r=i(Ai),hL=n(Ai,"P",{});var aPe=s(hL);t0r=r(aPe,"This class cannot be instantiated directly using "),D2e=n(aPe,"CODE",{});var q2t=s(D2e);a0r=r(q2t,"__init__()"),q2t.forEach(t),n0r=r(aPe," (throws an error)."),aPe.forEach(t),s0r=i(Ai),Pt=n(Ai,"DIV",{class:!0});var Li=s(Pt);m(pL.$$.fragment,Li),l0r=i(Li),N2e=n(Li,"P",{});var O2t=s(N2e);i0r=r(O2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),O2t.forEach(t),d0r=i(Li),Ef=n(Li,"P",{});var tQ=s(Ef);c0r=r(tQ,`Note:
Loading a model from its configuration file does `),q2e=n(tQ,"STRONG",{});var G2t=s(q2e);f0r=r(G2t,"not"),G2t.forEach(t),m0r=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),O2e=n(tQ,"CODE",{});var X2t=s(O2e);g0r=r(X2t,"from_pretrained()"),X2t.forEach(t),h0r=r(tQ,"to load the model weights."),tQ.forEach(t),p0r=i(Li),G2e=n(Li,"P",{});var V2t=s(G2e);_0r=r(V2t,"Examples:"),V2t.forEach(t),u0r=i(Li),m(_L.$$.fragment,Li),Li.forEach(t),b0r=i(Ai),$o=n(Ai,"DIV",{class:!0});var $a=s($o);m(uL.$$.fragment,$a),v0r=i($a),X2e=n($a,"P",{});var z2t=s(X2e);T0r=r(z2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),z2t.forEach(t),F0r=i($a),jn=n($a,"P",{});var O4=s(jn);C0r=r(O4,"The model class to instantiate is selected based on the "),V2e=n(O4,"CODE",{});var W2t=s(V2e);M0r=r(W2t,"model_type"),W2t.forEach(t),E0r=r(O4,` property of the config object (either
passed as an argument or loaded from `),z2e=n(O4,"CODE",{});var Q2t=s(z2e);y0r=r(Q2t,"pretrained_model_name_or_path"),Q2t.forEach(t),w0r=r(O4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=n(O4,"CODE",{});var H2t=s(W2e);A0r=r(H2t,"pretrained_model_name_or_path"),H2t.forEach(t),L0r=r(O4,":"),O4.forEach(t),B0r=i($a),Se=n($a,"UL",{});var Xo=s(Se);xM=n(Xo,"LI",{});var qBe=s(xM);Q2e=n(qBe,"STRONG",{});var U2t=s(Q2e);x0r=r(U2t,"albert"),U2t.forEach(t),k0r=r(qBe," \u2014 "),sz=n(qBe,"A",{href:!0});var J2t=s(sz);R0r=r(J2t,"FlaxAlbertForMultipleChoice"),J2t.forEach(t),S0r=r(qBe," (ALBERT model)"),qBe.forEach(t),P0r=i(Xo),kM=n(Xo,"LI",{});var OBe=s(kM);H2e=n(OBe,"STRONG",{});var Y2t=s(H2e);$0r=r(Y2t,"bert"),Y2t.forEach(t),I0r=r(OBe," \u2014 "),lz=n(OBe,"A",{href:!0});var K2t=s(lz);j0r=r(K2t,"FlaxBertForMultipleChoice"),K2t.forEach(t),D0r=r(OBe," (BERT model)"),OBe.forEach(t),N0r=i(Xo),RM=n(Xo,"LI",{});var GBe=s(RM);U2e=n(GBe,"STRONG",{});var Z2t=s(U2e);q0r=r(Z2t,"big_bird"),Z2t.forEach(t),O0r=r(GBe," \u2014 "),iz=n(GBe,"A",{href:!0});var evt=s(iz);G0r=r(evt,"FlaxBigBirdForMultipleChoice"),evt.forEach(t),X0r=r(GBe," (BigBird model)"),GBe.forEach(t),V0r=i(Xo),SM=n(Xo,"LI",{});var XBe=s(SM);J2e=n(XBe,"STRONG",{});var ovt=s(J2e);z0r=r(ovt,"distilbert"),ovt.forEach(t),W0r=r(XBe," \u2014 "),dz=n(XBe,"A",{href:!0});var rvt=s(dz);Q0r=r(rvt,"FlaxDistilBertForMultipleChoice"),rvt.forEach(t),H0r=r(XBe," (DistilBERT model)"),XBe.forEach(t),U0r=i(Xo),PM=n(Xo,"LI",{});var VBe=s(PM);Y2e=n(VBe,"STRONG",{});var tvt=s(Y2e);J0r=r(tvt,"electra"),tvt.forEach(t),Y0r=r(VBe," \u2014 "),cz=n(VBe,"A",{href:!0});var avt=s(cz);K0r=r(avt,"FlaxElectraForMultipleChoice"),avt.forEach(t),Z0r=r(VBe," (ELECTRA model)"),VBe.forEach(t),eLr=i(Xo),$M=n(Xo,"LI",{});var zBe=s($M);K2e=n(zBe,"STRONG",{});var nvt=s(K2e);oLr=r(nvt,"roberta"),nvt.forEach(t),rLr=r(zBe," \u2014 "),fz=n(zBe,"A",{href:!0});var svt=s(fz);tLr=r(svt,"FlaxRobertaForMultipleChoice"),svt.forEach(t),aLr=r(zBe," (RoBERTa model)"),zBe.forEach(t),nLr=i(Xo),IM=n(Xo,"LI",{});var WBe=s(IM);Z2e=n(WBe,"STRONG",{});var lvt=s(Z2e);sLr=r(lvt,"roformer"),lvt.forEach(t),lLr=r(WBe," \u2014 "),mz=n(WBe,"A",{href:!0});var ivt=s(mz);iLr=r(ivt,"FlaxRoFormerForMultipleChoice"),ivt.forEach(t),dLr=r(WBe," (RoFormer model)"),WBe.forEach(t),cLr=i(Xo),jM=n(Xo,"LI",{});var QBe=s(jM);eve=n(QBe,"STRONG",{});var dvt=s(eve);fLr=r(dvt,"xlm-roberta"),dvt.forEach(t),mLr=r(QBe," \u2014 "),gz=n(QBe,"A",{href:!0});var cvt=s(gz);gLr=r(cvt,"FlaxXLMRobertaForMultipleChoice"),cvt.forEach(t),hLr=r(QBe," (XLM-RoBERTa model)"),QBe.forEach(t),Xo.forEach(t),pLr=i($a),ove=n($a,"P",{});var fvt=s(ove);_Lr=r(fvt,"Examples:"),fvt.forEach(t),uLr=i($a),m(bL.$$.fragment,$a),$a.forEach(t),Ai.forEach(t),Qke=i(d),yf=n(d,"H2",{class:!0});var nPe=s(yf);DM=n(nPe,"A",{id:!0,class:!0,href:!0});var mvt=s(DM);rve=n(mvt,"SPAN",{});var gvt=s(rve);m(vL.$$.fragment,gvt),gvt.forEach(t),mvt.forEach(t),bLr=i(nPe),tve=n(nPe,"SPAN",{});var hvt=s(tve);vLr=r(hvt,"FlaxAutoModelForNextSentencePrediction"),hvt.forEach(t),nPe.forEach(t),Hke=i(d),Or=n(d,"DIV",{class:!0});var Bi=s(Or);m(TL.$$.fragment,Bi),TLr=i(Bi),wf=n(Bi,"P",{});var aQ=s(wf);FLr=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ave=n(aQ,"CODE",{});var pvt=s(ave);CLr=r(pvt,"from_pretrained()"),pvt.forEach(t),MLr=r(aQ,"class method or the "),nve=n(aQ,"CODE",{});var _vt=s(nve);ELr=r(_vt,"from_config()"),_vt.forEach(t),yLr=r(aQ,`class
method.`),aQ.forEach(t),wLr=i(Bi),FL=n(Bi,"P",{});var sPe=s(FL);ALr=r(sPe,"This class cannot be instantiated directly using "),sve=n(sPe,"CODE",{});var uvt=s(sve);LLr=r(uvt,"__init__()"),uvt.forEach(t),BLr=r(sPe," (throws an error)."),sPe.forEach(t),xLr=i(Bi),$t=n(Bi,"DIV",{class:!0});var xi=s($t);m(CL.$$.fragment,xi),kLr=i(xi),lve=n(xi,"P",{});var bvt=s(lve);RLr=r(bvt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bvt.forEach(t),SLr=i(xi),Af=n(xi,"P",{});var nQ=s(Af);PLr=r(nQ,`Note:
Loading a model from its configuration file does `),ive=n(nQ,"STRONG",{});var vvt=s(ive);$Lr=r(vvt,"not"),vvt.forEach(t),ILr=r(nQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dve=n(nQ,"CODE",{});var Tvt=s(dve);jLr=r(Tvt,"from_pretrained()"),Tvt.forEach(t),DLr=r(nQ,"to load the model weights."),nQ.forEach(t),NLr=i(xi),cve=n(xi,"P",{});var Fvt=s(cve);qLr=r(Fvt,"Examples:"),Fvt.forEach(t),OLr=i(xi),m(ML.$$.fragment,xi),xi.forEach(t),GLr=i(Bi),Io=n(Bi,"DIV",{class:!0});var Ia=s(Io);m(EL.$$.fragment,Ia),XLr=i(Ia),fve=n(Ia,"P",{});var Cvt=s(fve);VLr=r(Cvt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Cvt.forEach(t),zLr=i(Ia),Dn=n(Ia,"P",{});var G4=s(Dn);WLr=r(G4,"The model class to instantiate is selected based on the "),mve=n(G4,"CODE",{});var Mvt=s(mve);QLr=r(Mvt,"model_type"),Mvt.forEach(t),HLr=r(G4,` property of the config object (either
passed as an argument or loaded from `),gve=n(G4,"CODE",{});var Evt=s(gve);ULr=r(Evt,"pretrained_model_name_or_path"),Evt.forEach(t),JLr=r(G4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=n(G4,"CODE",{});var yvt=s(hve);YLr=r(yvt,"pretrained_model_name_or_path"),yvt.forEach(t),KLr=r(G4,":"),G4.forEach(t),ZLr=i(Ia),pve=n(Ia,"UL",{});var wvt=s(pve);NM=n(wvt,"LI",{});var HBe=s(NM);_ve=n(HBe,"STRONG",{});var Avt=s(_ve);e7r=r(Avt,"bert"),Avt.forEach(t),o7r=r(HBe," \u2014 "),hz=n(HBe,"A",{href:!0});var Lvt=s(hz);r7r=r(Lvt,"FlaxBertForNextSentencePrediction"),Lvt.forEach(t),t7r=r(HBe," (BERT model)"),HBe.forEach(t),wvt.forEach(t),a7r=i(Ia),uve=n(Ia,"P",{});var Bvt=s(uve);n7r=r(Bvt,"Examples:"),Bvt.forEach(t),s7r=i(Ia),m(yL.$$.fragment,Ia),Ia.forEach(t),Bi.forEach(t),Uke=i(d),Lf=n(d,"H2",{class:!0});var lPe=s(Lf);qM=n(lPe,"A",{id:!0,class:!0,href:!0});var xvt=s(qM);bve=n(xvt,"SPAN",{});var kvt=s(bve);m(wL.$$.fragment,kvt),kvt.forEach(t),xvt.forEach(t),l7r=i(lPe),vve=n(lPe,"SPAN",{});var Rvt=s(vve);i7r=r(Rvt,"FlaxAutoModelForImageClassification"),Rvt.forEach(t),lPe.forEach(t),Jke=i(d),Gr=n(d,"DIV",{class:!0});var ki=s(Gr);m(AL.$$.fragment,ki),d7r=i(ki),Bf=n(ki,"P",{});var sQ=s(Bf);c7r=r(sQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Tve=n(sQ,"CODE",{});var Svt=s(Tve);f7r=r(Svt,"from_pretrained()"),Svt.forEach(t),m7r=r(sQ,"class method or the "),Fve=n(sQ,"CODE",{});var Pvt=s(Fve);g7r=r(Pvt,"from_config()"),Pvt.forEach(t),h7r=r(sQ,`class
method.`),sQ.forEach(t),p7r=i(ki),LL=n(ki,"P",{});var iPe=s(LL);_7r=r(iPe,"This class cannot be instantiated directly using "),Cve=n(iPe,"CODE",{});var $vt=s(Cve);u7r=r($vt,"__init__()"),$vt.forEach(t),b7r=r(iPe," (throws an error)."),iPe.forEach(t),v7r=i(ki),It=n(ki,"DIV",{class:!0});var Ri=s(It);m(BL.$$.fragment,Ri),T7r=i(Ri),Mve=n(Ri,"P",{});var Ivt=s(Mve);F7r=r(Ivt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ivt.forEach(t),C7r=i(Ri),xf=n(Ri,"P",{});var lQ=s(xf);M7r=r(lQ,`Note:
Loading a model from its configuration file does `),Eve=n(lQ,"STRONG",{});var jvt=s(Eve);E7r=r(jvt,"not"),jvt.forEach(t),y7r=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yve=n(lQ,"CODE",{});var Dvt=s(yve);w7r=r(Dvt,"from_pretrained()"),Dvt.forEach(t),A7r=r(lQ,"to load the model weights."),lQ.forEach(t),L7r=i(Ri),wve=n(Ri,"P",{});var Nvt=s(wve);B7r=r(Nvt,"Examples:"),Nvt.forEach(t),x7r=i(Ri),m(xL.$$.fragment,Ri),Ri.forEach(t),k7r=i(ki),jo=n(ki,"DIV",{class:!0});var ja=s(jo);m(kL.$$.fragment,ja),R7r=i(ja),Ave=n(ja,"P",{});var qvt=s(Ave);S7r=r(qvt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qvt.forEach(t),P7r=i(ja),Nn=n(ja,"P",{});var X4=s(Nn);$7r=r(X4,"The model class to instantiate is selected based on the "),Lve=n(X4,"CODE",{});var Ovt=s(Lve);I7r=r(Ovt,"model_type"),Ovt.forEach(t),j7r=r(X4,` property of the config object (either
passed as an argument or loaded from `),Bve=n(X4,"CODE",{});var Gvt=s(Bve);D7r=r(Gvt,"pretrained_model_name_or_path"),Gvt.forEach(t),N7r=r(X4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=n(X4,"CODE",{});var Xvt=s(xve);q7r=r(Xvt,"pretrained_model_name_or_path"),Xvt.forEach(t),O7r=r(X4,":"),X4.forEach(t),G7r=i(ja),RL=n(ja,"UL",{});var dPe=s(RL);OM=n(dPe,"LI",{});var UBe=s(OM);kve=n(UBe,"STRONG",{});var Vvt=s(kve);X7r=r(Vvt,"beit"),Vvt.forEach(t),V7r=r(UBe," \u2014 "),pz=n(UBe,"A",{href:!0});var zvt=s(pz);z7r=r(zvt,"FlaxBeitForImageClassification"),zvt.forEach(t),W7r=r(UBe," (BEiT model)"),UBe.forEach(t),Q7r=i(dPe),GM=n(dPe,"LI",{});var JBe=s(GM);Rve=n(JBe,"STRONG",{});var Wvt=s(Rve);H7r=r(Wvt,"vit"),Wvt.forEach(t),U7r=r(JBe," \u2014 "),_z=n(JBe,"A",{href:!0});var Qvt=s(_z);J7r=r(Qvt,"FlaxViTForImageClassification"),Qvt.forEach(t),Y7r=r(JBe," (ViT model)"),JBe.forEach(t),dPe.forEach(t),K7r=i(ja),Sve=n(ja,"P",{});var Hvt=s(Sve);Z7r=r(Hvt,"Examples:"),Hvt.forEach(t),e9r=i(ja),m(SL.$$.fragment,ja),ja.forEach(t),ki.forEach(t),Yke=i(d),kf=n(d,"H2",{class:!0});var cPe=s(kf);XM=n(cPe,"A",{id:!0,class:!0,href:!0});var Uvt=s(XM);Pve=n(Uvt,"SPAN",{});var Jvt=s(Pve);m(PL.$$.fragment,Jvt),Jvt.forEach(t),Uvt.forEach(t),o9r=i(cPe),$ve=n(cPe,"SPAN",{});var Yvt=s($ve);r9r=r(Yvt,"FlaxAutoModelForVision2Seq"),Yvt.forEach(t),cPe.forEach(t),Kke=i(d),Xr=n(d,"DIV",{class:!0});var Si=s(Xr);m($L.$$.fragment,Si),t9r=i(Si),Rf=n(Si,"P",{});var iQ=s(Rf);a9r=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Ive=n(iQ,"CODE",{});var Kvt=s(Ive);n9r=r(Kvt,"from_pretrained()"),Kvt.forEach(t),s9r=r(iQ,"class method or the "),jve=n(iQ,"CODE",{});var Zvt=s(jve);l9r=r(Zvt,"from_config()"),Zvt.forEach(t),i9r=r(iQ,`class
method.`),iQ.forEach(t),d9r=i(Si),IL=n(Si,"P",{});var fPe=s(IL);c9r=r(fPe,"This class cannot be instantiated directly using "),Dve=n(fPe,"CODE",{});var eTt=s(Dve);f9r=r(eTt,"__init__()"),eTt.forEach(t),m9r=r(fPe," (throws an error)."),fPe.forEach(t),g9r=i(Si),jt=n(Si,"DIV",{class:!0});var Pi=s(jt);m(jL.$$.fragment,Pi),h9r=i(Pi),Nve=n(Pi,"P",{});var oTt=s(Nve);p9r=r(oTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),oTt.forEach(t),_9r=i(Pi),Sf=n(Pi,"P",{});var dQ=s(Sf);u9r=r(dQ,`Note:
Loading a model from its configuration file does `),qve=n(dQ,"STRONG",{});var rTt=s(qve);b9r=r(rTt,"not"),rTt.forEach(t),v9r=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ove=n(dQ,"CODE",{});var tTt=s(Ove);T9r=r(tTt,"from_pretrained()"),tTt.forEach(t),F9r=r(dQ,"to load the model weights."),dQ.forEach(t),C9r=i(Pi),Gve=n(Pi,"P",{});var aTt=s(Gve);M9r=r(aTt,"Examples:"),aTt.forEach(t),E9r=i(Pi),m(DL.$$.fragment,Pi),Pi.forEach(t),y9r=i(Si),Do=n(Si,"DIV",{class:!0});var Da=s(Do);m(NL.$$.fragment,Da),w9r=i(Da),Xve=n(Da,"P",{});var nTt=s(Xve);A9r=r(nTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),nTt.forEach(t),L9r=i(Da),qn=n(Da,"P",{});var V4=s(qn);B9r=r(V4,"The model class to instantiate is selected based on the "),Vve=n(V4,"CODE",{});var sTt=s(Vve);x9r=r(sTt,"model_type"),sTt.forEach(t),k9r=r(V4,` property of the config object (either
passed as an argument or loaded from `),zve=n(V4,"CODE",{});var lTt=s(zve);R9r=r(lTt,"pretrained_model_name_or_path"),lTt.forEach(t),S9r=r(V4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=n(V4,"CODE",{});var iTt=s(Wve);P9r=r(iTt,"pretrained_model_name_or_path"),iTt.forEach(t),$9r=r(V4,":"),V4.forEach(t),I9r=i(Da),Qve=n(Da,"UL",{});var dTt=s(Qve);VM=n(dTt,"LI",{});var YBe=s(VM);Hve=n(YBe,"STRONG",{});var cTt=s(Hve);j9r=r(cTt,"vision-encoder-decoder"),cTt.forEach(t),D9r=r(YBe," \u2014 "),uz=n(YBe,"A",{href:!0});var fTt=s(uz);N9r=r(fTt,"FlaxVisionEncoderDecoderModel"),fTt.forEach(t),q9r=r(YBe," (Vision Encoder decoder model)"),YBe.forEach(t),dTt.forEach(t),O9r=i(Da),Uve=n(Da,"P",{});var mTt=s(Uve);G9r=r(mTt,"Examples:"),mTt.forEach(t),X9r=i(Da),m(qL.$$.fragment,Da),Da.forEach(t),Si.forEach(t),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(FTt)),c(ge,"id","auto-classes"),c(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ge,"href","#auto-classes"),c(de,"class","relative group"),c(On,"href","/docs/transformers/pr_15831/en/model_doc/auto#transformers.AutoConfig"),c(Xn,"href","/docs/transformers/pr_15831/en/model_doc/auto#transformers.AutoModel"),c(Vn,"href","/docs/transformers/pr_15831/en/model_doc/auto#transformers.AutoTokenizer"),c(Gi,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertModel"),c(Nf,"id","extending-the-auto-classes"),c(Nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nf,"href","#extending-the-auto-classes"),c(Xi,"class","relative group"),c(Of,"id","transformers.AutoConfig"),c(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Of,"href","#transformers.AutoConfig"),c(Vi,"class","relative group"),c(V7,"href","/docs/transformers/pr_15831/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(z7,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertConfig"),c(W7,"href","/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartConfig"),c(Q7,"href","/docs/transformers/pr_15831/en/model_doc/beit#transformers.BeitConfig"),c(H7,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertConfig"),c(U7,"href","/docs/transformers/pr_15831/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(J7,"href","/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Y7,"href","/docs/transformers/pr_15831/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(K7,"href","/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Z7,"href","/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(e9,"href","/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertConfig"),c(o9,"href","/docs/transformers/pr_15831/en/model_doc/canine#transformers.CanineConfig"),c(r9,"href","/docs/transformers/pr_15831/en/model_doc/clip#transformers.CLIPConfig"),c(t9,"href","/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertConfig"),c(a9,"href","/docs/transformers/pr_15831/en/model_doc/convnext#transformers.ConvNextConfig"),c(n9,"href","/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.CTRLConfig"),c(s9,"href","/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(l9,"href","/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(i9,"href","/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaConfig"),c(d9,"href","/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(c9,"href","/docs/transformers/pr_15831/en/model_doc/deit#transformers.DeiTConfig"),c(f9,"href","/docs/transformers/pr_15831/en/model_doc/detr#transformers.DetrConfig"),c(m9,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertConfig"),c(g9,"href","/docs/transformers/pr_15831/en/model_doc/dpr#transformers.DPRConfig"),c(h9,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraConfig"),c(p9,"href","/docs/transformers/pr_15831/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(_9,"href","/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertConfig"),c(u9,"href","/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetConfig"),c(b9,"href","/docs/transformers/pr_15831/en/model_doc/fsmt#transformers.FSMTConfig"),c(v9,"href","/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelConfig"),c(T9,"href","/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2Config"),c(F9,"href","/docs/transformers/pr_15831/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(C9,"href","/docs/transformers/pr_15831/en/model_doc/gptj#transformers.GPTJConfig"),c(M9,"href","/docs/transformers/pr_15831/en/model_doc/hubert#transformers.HubertConfig"),c(E9,"href","/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertConfig"),c(y9,"href","/docs/transformers/pr_15831/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(w9,"href","/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(A9,"href","/docs/transformers/pr_15831/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(L9,"href","/docs/transformers/pr_15831/en/model_doc/led#transformers.LEDConfig"),c(B9,"href","/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerConfig"),c(x9,"href","/docs/transformers/pr_15831/en/model_doc/luke#transformers.LukeConfig"),c(k9,"href","/docs/transformers/pr_15831/en/model_doc/lxmert#transformers.LxmertConfig"),c(R9,"href","/docs/transformers/pr_15831/en/model_doc/m2m_100#transformers.M2M100Config"),c(S9,"href","/docs/transformers/pr_15831/en/model_doc/marian#transformers.MarianConfig"),c(P9,"href","/docs/transformers/pr_15831/en/model_doc/maskformer#transformers.MaskFormerConfig"),c($9,"href","/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartConfig"),c(I9,"href","/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(j9,"href","/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(D9,"href","/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetConfig"),c(N9,"href","/docs/transformers/pr_15831/en/model_doc/mt5#transformers.MT5Config"),c(q9,"href","/docs/transformers/pr_15831/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(O9,"href","/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(G9,"href","/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.PegasusConfig"),c(X9,"href","/docs/transformers/pr_15831/en/model_doc/perceiver#transformers.PerceiverConfig"),c(V9,"href","/docs/transformers/pr_15831/en/model_doc/plbart#transformers.PLBartConfig"),c(z9,"href","/docs/transformers/pr_15831/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(W9,"href","/docs/transformers/pr_15831/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Q9,"href","/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(H9,"href","/docs/transformers/pr_15831/en/model_doc/rag#transformers.RagConfig"),c(U9,"href","/docs/transformers/pr_15831/en/model_doc/realm#transformers.RealmConfig"),c(J9,"href","/docs/transformers/pr_15831/en/model_doc/reformer#transformers.ReformerConfig"),c(Y9,"href","/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertConfig"),c(K9,"href","/docs/transformers/pr_15831/en/model_doc/retribert#transformers.RetriBertConfig"),c(Z9,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaConfig"),c(eB,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerConfig"),c(oB,"href","/docs/transformers/pr_15831/en/model_doc/segformer#transformers.SegformerConfig"),c(rB,"href","/docs/transformers/pr_15831/en/model_doc/sew#transformers.SEWConfig"),c(tB,"href","/docs/transformers/pr_15831/en/model_doc/sew-d#transformers.SEWDConfig"),c(aB,"href","/docs/transformers/pr_15831/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(nB,"href","/docs/transformers/pr_15831/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(sB,"href","/docs/transformers/pr_15831/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(lB,"href","/docs/transformers/pr_15831/en/model_doc/splinter#transformers.SplinterConfig"),c(iB,"href","/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(dB,"href","/docs/transformers/pr_15831/en/model_doc/swin#transformers.SwinConfig"),c(cB,"href","/docs/transformers/pr_15831/en/model_doc/t5#transformers.T5Config"),c(fB,"href","/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasConfig"),c(mB,"href","/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(gB,"href","/docs/transformers/pr_15831/en/model_doc/trocr#transformers.TrOCRConfig"),c(hB,"href","/docs/transformers/pr_15831/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(pB,"href","/docs/transformers/pr_15831/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(_B,"href","/docs/transformers/pr_15831/en/model_doc/vilt#transformers.ViltConfig"),c(uB,"href","/docs/transformers/pr_15831/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(bB,"href","/docs/transformers/pr_15831/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(vB,"href","/docs/transformers/pr_15831/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(TB,"href","/docs/transformers/pr_15831/en/model_doc/vit#transformers.ViTConfig"),c(FB,"href","/docs/transformers/pr_15831/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(CB,"href","/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(MB,"href","/docs/transformers/pr_15831/en/model_doc/wavlm#transformers.WavLMConfig"),c(EB,"href","/docs/transformers/pr_15831/en/model_doc/xglm#transformers.XGLMConfig"),c(yB,"href","/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMConfig"),c(wB,"href","/docs/transformers/pr_15831/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(AB,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(LB,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(BB,"href","/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetConfig"),c(xB,"href","/docs/transformers/pr_15831/en/model_doc/yoso#transformers.YosoConfig"),c(mo,"class","docstring"),c(Lg,"class","docstring"),c(Wo,"class","docstring"),c(Bg,"id","transformers.AutoTokenizer"),c(Bg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bg,"href","#transformers.AutoTokenizer"),c(Wi,"class","relative group"),c(kB,"href","/docs/transformers/pr_15831/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(RB,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertTokenizer"),c(SB,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(PB,"href","/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartTokenizer"),c($B,"href","/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartTokenizerFast"),c(IB,"href","/docs/transformers/pr_15831/en/model_doc/barthez#transformers.BarthezTokenizer"),c(jB,"href","/docs/transformers/pr_15831/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(DB,"href","/docs/transformers/pr_15831/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(NB,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertTokenizer"),c(qB,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertTokenizerFast"),c(OB,"href","/docs/transformers/pr_15831/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(GB,"href","/docs/transformers/pr_15831/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(XB,"href","/docs/transformers/pr_15831/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(VB,"href","/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(zB,"href","/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(WB,"href","/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(QB,"href","/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(HB,"href","/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(UB,"href","/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(JB,"href","/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(YB,"href","/docs/transformers/pr_15831/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(KB,"href","/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertTokenizer"),c(ZB,"href","/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(ex,"href","/docs/transformers/pr_15831/en/model_doc/canine#transformers.CanineTokenizer"),c(ox,"href","/docs/transformers/pr_15831/en/model_doc/clip#transformers.CLIPTokenizer"),c(rx,"href","/docs/transformers/pr_15831/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(tx,"href","/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(ax,"href","/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(nx,"href","/docs/transformers/pr_15831/en/model_doc/cpm#transformers.CpmTokenizer"),c(sx,"href","/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(lx,"href","/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaTokenizer"),c(ix,"href","/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(dx,"href","/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(cx,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(fx,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(mx,"href","/docs/transformers/pr_15831/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(gx,"href","/docs/transformers/pr_15831/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(hx,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraTokenizer"),c(px,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(_x,"href","/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(ux,"href","/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetTokenizer"),c(bx,"href","/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(vx,"href","/docs/transformers/pr_15831/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(Tx,"href","/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelTokenizer"),c(Fx,"href","/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(Cx,"href","/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Mx,"href","/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Ex,"href","/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yx,"href","/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(wx,"href","/docs/transformers/pr_15831/en/model_doc/herbert#transformers.HerbertTokenizer"),c(Ax,"href","/docs/transformers/pr_15831/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(Lx,"href","/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Bx,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaTokenizer"),c(xx,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kx,"href","/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(Rx,"href","/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(Sx,"href","/docs/transformers/pr_15831/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(Px,"href","/docs/transformers/pr_15831/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c($x,"href","/docs/transformers/pr_15831/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(Ix,"href","/docs/transformers/pr_15831/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(jx,"href","/docs/transformers/pr_15831/en/model_doc/led#transformers.LEDTokenizer"),c(Dx,"href","/docs/transformers/pr_15831/en/model_doc/led#transformers.LEDTokenizerFast"),c(Nx,"href","/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerTokenizer"),c(qx,"href","/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(Ox,"href","/docs/transformers/pr_15831/en/model_doc/luke#transformers.LukeTokenizer"),c(Gx,"href","/docs/transformers/pr_15831/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(Xx,"href","/docs/transformers/pr_15831/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(Vx,"href","/docs/transformers/pr_15831/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(zx,"href","/docs/transformers/pr_15831/en/model_doc/marian#transformers.MarianTokenizer"),c(Wx,"href","/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartTokenizer"),c(Qx,"href","/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(Hx,"href","/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(Ux,"href","/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(Jx,"href","/docs/transformers/pr_15831/en/model_doc/mluke#transformers.MLukeTokenizer"),c(Yx,"href","/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(Kx,"href","/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(Zx,"href","/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(ek,"href","/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(ok,"href","/docs/transformers/pr_15831/en/model_doc/mt5#transformers.T5Tokenizer"),c(rk,"href","/docs/transformers/pr_15831/en/model_doc/mt5#transformers.T5TokenizerFast"),c(tk,"href","/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(ak,"href","/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(nk,"href","/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(sk,"href","/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(lk,"href","/docs/transformers/pr_15831/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(ik,"href","/docs/transformers/pr_15831/en/model_doc/phobert#transformers.PhobertTokenizer"),c(dk,"href","/docs/transformers/pr_15831/en/model_doc/plbart#transformers.PLBartTokenizer"),c(ck,"href","/docs/transformers/pr_15831/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(fk,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertTokenizer"),c(mk,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertTokenizerFast"),c(gk,"href","/docs/transformers/pr_15831/en/model_doc/rag#transformers.RagTokenizer"),c(hk,"href","/docs/transformers/pr_15831/en/model_doc/realm#transformers.RealmTokenizer"),c(pk,"href","/docs/transformers/pr_15831/en/model_doc/realm#transformers.RealmTokenizerFast"),c(_k,"href","/docs/transformers/pr_15831/en/model_doc/reformer#transformers.ReformerTokenizer"),c(uk,"href","/docs/transformers/pr_15831/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(bk,"href","/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertTokenizer"),c(vk,"href","/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Tk,"href","/docs/transformers/pr_15831/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Fk,"href","/docs/transformers/pr_15831/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Ck,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Mk,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Ek,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(yk,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(wk,"href","/docs/transformers/pr_15831/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Ak,"href","/docs/transformers/pr_15831/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Lk,"href","/docs/transformers/pr_15831/en/model_doc/splinter#transformers.SplinterTokenizer"),c(Bk,"href","/docs/transformers/pr_15831/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(xk,"href","/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(kk,"href","/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(Rk,"href","/docs/transformers/pr_15831/en/model_doc/mt5#transformers.T5Tokenizer"),c(Sk,"href","/docs/transformers/pr_15831/en/model_doc/mt5#transformers.T5TokenizerFast"),c(Pk,"href","/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasTokenizer"),c($k,"href","/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(Ik,"href","/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(jk,"href","/docs/transformers/pr_15831/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(Dk,"href","/docs/transformers/pr_15831/en/model_doc/xglm#transformers.XGLMTokenizer"),c(Nk,"href","/docs/transformers/pr_15831/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(qk,"href","/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMTokenizer"),c(Ok,"href","/docs/transformers/pr_15831/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(Gk,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(Xk,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Vk,"href","/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(zk,"href","/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(go,"class","docstring"),c(nh,"class","docstring"),c(Qo,"class","docstring"),c(sh,"id","transformers.AutoFeatureExtractor"),c(sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sh,"href","#transformers.AutoFeatureExtractor"),c(Qi,"class","relative group"),c(Wk,"href","/docs/transformers/pr_15831/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Qk,"href","/docs/transformers/pr_15831/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Hk,"href","/docs/transformers/pr_15831/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Uk,"href","/docs/transformers/pr_15831/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Jk,"href","/docs/transformers/pr_15831/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Yk,"href","/docs/transformers/pr_15831/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(Kk,"href","/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Zk,"href","/docs/transformers/pr_15831/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(eR,"href","/docs/transformers/pr_15831/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(oR,"href","/docs/transformers/pr_15831/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(rR,"href","/docs/transformers/pr_15831/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(tR,"href","/docs/transformers/pr_15831/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(aR,"href","/docs/transformers/pr_15831/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(nR,"href","/docs/transformers/pr_15831/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sR,"href","/docs/transformers/pr_15831/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lR,"href","/docs/transformers/pr_15831/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iR,"href","/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($e,"class","docstring"),c(Eh,"class","docstring"),c(Ho,"class","docstring"),c(yh,"id","transformers.AutoProcessor"),c(yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yh,"href","#transformers.AutoProcessor"),c(Hi,"class","relative group"),c(dR,"href","/docs/transformers/pr_15831/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(cR,"href","/docs/transformers/pr_15831/en/model_doc/clip#transformers.CLIPProcessor"),c(fR,"href","/docs/transformers/pr_15831/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(mR,"href","/docs/transformers/pr_15831/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(gR,"href","/docs/transformers/pr_15831/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(hR,"href","/docs/transformers/pr_15831/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(pR,"href","/docs/transformers/pr_15831/en/model_doc/trocr#transformers.TrOCRProcessor"),c(_R,"href","/docs/transformers/pr_15831/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(uR,"href","/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ie,"class","docstring"),c($h,"class","docstring"),c(Uo,"class","docstring"),c(Ih,"id","transformers.AutoModel"),c(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ih,"href","#transformers.AutoModel"),c(Ji,"class","relative group"),c(Vr,"class","docstring"),c(bR,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertModel"),c(vR,"href","/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartModel"),c(TR,"href","/docs/transformers/pr_15831/en/model_doc/beit#transformers.BeitModel"),c(FR,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertModel"),c(CR,"href","/docs/transformers/pr_15831/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(MR,"href","/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdModel"),c(ER,"href","/docs/transformers/pr_15831/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(yR,"href","/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(wR,"href","/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(AR,"href","/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertModel"),c(LR,"href","/docs/transformers/pr_15831/en/model_doc/canine#transformers.CanineModel"),c(BR,"href","/docs/transformers/pr_15831/en/model_doc/clip#transformers.CLIPModel"),c(xR,"href","/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertModel"),c(kR,"href","/docs/transformers/pr_15831/en/model_doc/convnext#transformers.ConvNextModel"),c(RR,"href","/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.CTRLModel"),c(SR,"href","/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(PR,"href","/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextModel"),c($R,"href","/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaModel"),c(IR,"href","/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(jR,"href","/docs/transformers/pr_15831/en/model_doc/deit#transformers.DeiTModel"),c(DR,"href","/docs/transformers/pr_15831/en/model_doc/detr#transformers.DetrModel"),c(NR,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertModel"),c(qR,"href","/docs/transformers/pr_15831/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(OR,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraModel"),c(GR,"href","/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertModel"),c(XR,"href","/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetModel"),c(VR,"href","/docs/transformers/pr_15831/en/model_doc/fsmt#transformers.FSMTModel"),c(zR,"href","/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelModel"),c(WR,"href","/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelBaseModel"),c(QR,"href","/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2Model"),c(HR,"href","/docs/transformers/pr_15831/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(UR,"href","/docs/transformers/pr_15831/en/model_doc/gptj#transformers.GPTJModel"),c(JR,"href","/docs/transformers/pr_15831/en/model_doc/hubert#transformers.HubertModel"),c(YR,"href","/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertModel"),c(KR,"href","/docs/transformers/pr_15831/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(ZR,"href","/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(eS,"href","/docs/transformers/pr_15831/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(oS,"href","/docs/transformers/pr_15831/en/model_doc/led#transformers.LEDModel"),c(rS,"href","/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerModel"),c(tS,"href","/docs/transformers/pr_15831/en/model_doc/luke#transformers.LukeModel"),c(aS,"href","/docs/transformers/pr_15831/en/model_doc/lxmert#transformers.LxmertModel"),c(nS,"href","/docs/transformers/pr_15831/en/model_doc/m2m_100#transformers.M2M100Model"),c(sS,"href","/docs/transformers/pr_15831/en/model_doc/marian#transformers.MarianModel"),c(lS,"href","/docs/transformers/pr_15831/en/model_doc/maskformer#transformers.MaskFormerModel"),c(iS,"href","/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartModel"),c(dS,"href","/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(cS,"href","/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertModel"),c(fS,"href","/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetModel"),c(mS,"href","/docs/transformers/pr_15831/en/model_doc/mt5#transformers.MT5Model"),c(gS,"href","/docs/transformers/pr_15831/en/model_doc/nystromformer#transformers.NystromformerModel"),c(hS,"href","/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(pS,"href","/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.PegasusModel"),c(_S,"href","/docs/transformers/pr_15831/en/model_doc/perceiver#transformers.PerceiverModel"),c(uS,"href","/docs/transformers/pr_15831/en/model_doc/plbart#transformers.PLBartModel"),c(bS,"href","/docs/transformers/pr_15831/en/model_doc/poolformer#transformers.PoolFormerModel"),c(vS,"href","/docs/transformers/pr_15831/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(TS,"href","/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertModel"),c(FS,"href","/docs/transformers/pr_15831/en/model_doc/reformer#transformers.ReformerModel"),c(CS,"href","/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertModel"),c(MS,"href","/docs/transformers/pr_15831/en/model_doc/retribert#transformers.RetriBertModel"),c(ES,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaModel"),c(yS,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerModel"),c(wS,"href","/docs/transformers/pr_15831/en/model_doc/segformer#transformers.SegformerModel"),c(AS,"href","/docs/transformers/pr_15831/en/model_doc/sew#transformers.SEWModel"),c(LS,"href","/docs/transformers/pr_15831/en/model_doc/sew-d#transformers.SEWDModel"),c(BS,"href","/docs/transformers/pr_15831/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(xS,"href","/docs/transformers/pr_15831/en/model_doc/splinter#transformers.SplinterModel"),c(kS,"href","/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(RS,"href","/docs/transformers/pr_15831/en/model_doc/swin#transformers.SwinModel"),c(SS,"href","/docs/transformers/pr_15831/en/model_doc/t5#transformers.T5Model"),c(PS,"href","/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasModel"),c($S,"href","/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(IS,"href","/docs/transformers/pr_15831/en/model_doc/unispeech#transformers.UniSpeechModel"),c(jS,"href","/docs/transformers/pr_15831/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(DS,"href","/docs/transformers/pr_15831/en/model_doc/vilt#transformers.ViltModel"),c(NS,"href","/docs/transformers/pr_15831/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(qS,"href","/docs/transformers/pr_15831/en/model_doc/visual_bert#transformers.VisualBertModel"),c(OS,"href","/docs/transformers/pr_15831/en/model_doc/vit#transformers.ViTModel"),c(GS,"href","/docs/transformers/pr_15831/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(XS,"href","/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(VS,"href","/docs/transformers/pr_15831/en/model_doc/wavlm#transformers.WavLMModel"),c(zS,"href","/docs/transformers/pr_15831/en/model_doc/xglm#transformers.XGLMModel"),c(WS,"href","/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMModel"),c(QS,"href","/docs/transformers/pr_15831/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(HS,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(US,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(JS,"href","/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetModel"),c(YS,"href","/docs/transformers/pr_15831/en/model_doc/yoso#transformers.YosoModel"),c(je,"class","docstring"),c(Jo,"class","docstring"),c(__,"id","transformers.AutoModelForPreTraining"),c(__,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(__,"href","#transformers.AutoModelForPreTraining"),c(Zi,"class","relative group"),c(zr,"class","docstring"),c(KS,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertForPreTraining"),c(ZS,"href","/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(eP,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertForPreTraining"),c(oP,"href","/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(rP,"href","/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(tP,"href","/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(aP,"href","/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(nP,"href","/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(sP,"href","/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(lP,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(iP,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraForPreTraining"),c(dP,"href","/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(cP,"href","/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetForPreTraining"),c(fP,"href","/docs/transformers/pr_15831/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(mP,"href","/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(gP,"href","/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(hP,"href","/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(pP,"href","/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(_P,"href","/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(uP,"href","/docs/transformers/pr_15831/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(bP,"href","/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(vP,"href","/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(TP,"href","/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(FP,"href","/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(CP,"href","/docs/transformers/pr_15831/en/model_doc/retribert#transformers.RetriBertModel"),c(MP,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(EP,"href","/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(yP,"href","/docs/transformers/pr_15831/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(wP,"href","/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(AP,"href","/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(LP,"href","/docs/transformers/pr_15831/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(BP,"href","/docs/transformers/pr_15831/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(xP,"href","/docs/transformers/pr_15831/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(kP,"href","/docs/transformers/pr_15831/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(RP,"href","/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(SP,"href","/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(PP,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c($P,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(IP,"href","/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(De,"class","docstring"),c(Yo,"class","docstring"),c(tu,"id","transformers.AutoModelForCausalLM"),c(tu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tu,"href","#transformers.AutoModelForCausalLM"),c(rd,"class","relative group"),c(Wr,"class","docstring"),c(jP,"href","/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartForCausalLM"),c(DP,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertLMHeadModel"),c(NP,"href","/docs/transformers/pr_15831/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(qP,"href","/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(OP,"href","/docs/transformers/pr_15831/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(GP,"href","/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(XP,"href","/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(VP,"href","/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(zP,"href","/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(WP,"href","/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(QP,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraForCausalLM"),c(HP,"href","/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(UP,"href","/docs/transformers/pr_15831/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(JP,"href","/docs/transformers/pr_15831/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(YP,"href","/docs/transformers/pr_15831/en/model_doc/marian#transformers.MarianForCausalLM"),c(KP,"href","/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartForCausalLM"),c(ZP,"href","/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(e$,"href","/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(o$,"href","/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(r$,"href","/docs/transformers/pr_15831/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(t$,"href","/docs/transformers/pr_15831/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(a$,"href","/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(n$,"href","/docs/transformers/pr_15831/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(s$,"href","/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(l$,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(i$,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(d$,"href","/docs/transformers/pr_15831/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(c$,"href","/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(f$,"href","/docs/transformers/pr_15831/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(m$,"href","/docs/transformers/pr_15831/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(g$,"href","/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(h$,"href","/docs/transformers/pr_15831/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(p$,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(_$,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(u$,"href","/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ne,"class","docstring"),c(Ko,"class","docstring"),c(qu,"id","transformers.AutoModelForMaskedLM"),c(qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qu,"href","#transformers.AutoModelForMaskedLM"),c(nd,"class","relative group"),c(Qr,"class","docstring"),c(b$,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(v$,"href","/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(T$,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertForMaskedLM"),c(F$,"href","/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(C$,"href","/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(M$,"href","/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(E$,"href","/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(y$,"href","/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(w$,"href","/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(A$,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(L$,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(B$,"href","/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(x$,"href","/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(k$,"href","/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(R$,"href","/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(S$,"href","/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(P$,"href","/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c($$,"href","/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(I$,"href","/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(j$,"href","/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(D$,"href","/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(N$,"href","/docs/transformers/pr_15831/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(q$,"href","/docs/transformers/pr_15831/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(O$,"href","/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(G$,"href","/docs/transformers/pr_15831/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(X$,"href","/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(V$,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(z$,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(W$,"href","/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Q$,"href","/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(H$,"href","/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(U$,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(J$,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Y$,"href","/docs/transformers/pr_15831/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(qe,"class","docstring"),c(Zo,"class","docstring"),c(M1,"id","transformers.AutoModelForSeq2SeqLM"),c(M1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M1,"href","#transformers.AutoModelForSeq2SeqLM"),c(id,"class","relative group"),c(Hr,"class","docstring"),c(K$,"href","/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Z$,"href","/docs/transformers/pr_15831/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(eI,"href","/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(oI,"href","/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(rI,"href","/docs/transformers/pr_15831/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(tI,"href","/docs/transformers/pr_15831/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(aI,"href","/docs/transformers/pr_15831/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(nI,"href","/docs/transformers/pr_15831/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(sI,"href","/docs/transformers/pr_15831/en/model_doc/marian#transformers.MarianMTModel"),c(lI,"href","/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(iI,"href","/docs/transformers/pr_15831/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(dI,"href","/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(cI,"href","/docs/transformers/pr_15831/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(fI,"href","/docs/transformers/pr_15831/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(mI,"href","/docs/transformers/pr_15831/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(gI,"href","/docs/transformers/pr_15831/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Oe,"class","docstring"),c(er,"class","docstring"),c(O1,"id","transformers.AutoModelForSequenceClassification"),c(O1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O1,"href","#transformers.AutoModelForSequenceClassification"),c(fd,"class","relative group"),c(Ur,"class","docstring"),c(hI,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(pI,"href","/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartForSequenceClassification"),c(_I,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertForSequenceClassification"),c(uI,"href","/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(bI,"href","/docs/transformers/pr_15831/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(vI,"href","/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(TI,"href","/docs/transformers/pr_15831/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(FI,"href","/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(CI,"href","/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(MI,"href","/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(EI,"href","/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(yI,"href","/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(wI,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(AI,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(LI,"href","/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(BI,"href","/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(xI,"href","/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(kI,"href","/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(RI,"href","/docs/transformers/pr_15831/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(SI,"href","/docs/transformers/pr_15831/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(PI,"href","/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c($I,"href","/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(II,"href","/docs/transformers/pr_15831/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(jI,"href","/docs/transformers/pr_15831/en/model_doc/led#transformers.LEDForSequenceClassification"),c(DI,"href","/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(NI,"href","/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(qI,"href","/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(OI,"href","/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(GI,"href","/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(XI,"href","/docs/transformers/pr_15831/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(VI,"href","/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(zI,"href","/docs/transformers/pr_15831/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(WI,"href","/docs/transformers/pr_15831/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(QI,"href","/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(HI,"href","/docs/transformers/pr_15831/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(UI,"href","/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(JI,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(YI,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(KI,"href","/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(ZI,"href","/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(ej,"href","/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(oj,"href","/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(rj,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(tj,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(aj,"href","/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(nj,"href","/docs/transformers/pr_15831/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ge,"class","docstring"),c(or,"class","docstring"),c($b,"id","transformers.AutoModelForMultipleChoice"),c($b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($b,"href","#transformers.AutoModelForMultipleChoice"),c(hd,"class","relative group"),c(Jr,"class","docstring"),c(sj,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(lj,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertForMultipleChoice"),c(ij,"href","/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(dj,"href","/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(cj,"href","/docs/transformers/pr_15831/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(fj,"href","/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(mj,"href","/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(gj,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(hj,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(pj,"href","/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(_j,"href","/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(uj,"href","/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(bj,"href","/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(vj,"href","/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(Tj,"href","/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(Fj,"href","/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(Cj,"href","/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(Mj,"href","/docs/transformers/pr_15831/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(Ej,"href","/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(yj,"href","/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(wj,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Aj,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(Lj,"href","/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(Bj,"href","/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(xj,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(kj,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Rj,"href","/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Sj,"href","/docs/transformers/pr_15831/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Xe,"class","docstring"),c(rr,"class","docstring"),c(f3,"id","transformers.AutoModelForNextSentencePrediction"),c(f3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f3,"href","#transformers.AutoModelForNextSentencePrediction"),c(ud,"class","relative group"),c(Yr,"class","docstring"),c(Pj,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c($j,"href","/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Ij,"href","/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(jj,"href","/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Dj,"href","/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(Ve,"class","docstring"),c(tr,"class","docstring"),c(b3,"id","transformers.AutoModelForTokenClassification"),c(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b3,"href","#transformers.AutoModelForTokenClassification"),c(Td,"class","relative group"),c(Kr,"class","docstring"),c(Nj,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(qj,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertForTokenClassification"),c(Oj,"href","/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Gj,"href","/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Xj,"href","/docs/transformers/pr_15831/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Vj,"href","/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(zj,"href","/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Wj,"href","/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Qj,"href","/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Hj,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Uj,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Jj,"href","/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Yj,"href","/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Kj,"href","/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Zj,"href","/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(eD,"href","/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(oD,"href","/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(rD,"href","/docs/transformers/pr_15831/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(tD,"href","/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(aD,"href","/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(nD,"href","/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(sD,"href","/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(lD,"href","/docs/transformers/pr_15831/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(iD,"href","/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(dD,"href","/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(cD,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(fD,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(mD,"href","/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(gD,"href","/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(hD,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(pD,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(_D,"href","/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(uD,"href","/docs/transformers/pr_15831/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ze,"class","docstring"),c(ar,"class","docstring"),c(Z3,"id","transformers.AutoModelForQuestionAnswering"),c(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z3,"href","#transformers.AutoModelForQuestionAnswering"),c(Md,"class","relative group"),c(Zr,"class","docstring"),c(bD,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(vD,"href","/docs/transformers/pr_15831/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(TD,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(FD,"href","/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(CD,"href","/docs/transformers/pr_15831/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(MD,"href","/docs/transformers/pr_15831/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(ED,"href","/docs/transformers/pr_15831/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(yD,"href","/docs/transformers/pr_15831/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(wD,"href","/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(AD,"href","/docs/transformers/pr_15831/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(LD,"href","/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(BD,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(xD,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(kD,"href","/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(RD,"href","/docs/transformers/pr_15831/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(SD,"href","/docs/transformers/pr_15831/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(PD,"href","/docs/transformers/pr_15831/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c($D,"href","/docs/transformers/pr_15831/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(ID,"href","/docs/transformers/pr_15831/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(jD,"href","/docs/transformers/pr_15831/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(DD,"href","/docs/transformers/pr_15831/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(ND,"href","/docs/transformers/pr_15831/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(qD,"href","/docs/transformers/pr_15831/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(OD,"href","/docs/transformers/pr_15831/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(GD,"href","/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(XD,"href","/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(VD,"href","/docs/transformers/pr_15831/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(zD,"href","/docs/transformers/pr_15831/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(WD,"href","/docs/transformers/pr_15831/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(QD,"href","/docs/transformers/pr_15831/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(HD,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(UD,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(JD,"href","/docs/transformers/pr_15831/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(YD,"href","/docs/transformers/pr_15831/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(KD,"href","/docs/transformers/pr_15831/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(ZD,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(eN,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(oN,"href","/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(rN,"href","/docs/transformers/pr_15831/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(We,"class","docstring"),c(nr,"class","docstring"),c(q5,"id","transformers.AutoModelForTableQuestionAnswering"),c(q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(wd,"class","relative group"),c(et,"class","docstring"),c(tN,"href","/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(Qe,"class","docstring"),c(sr,"class","docstring"),c(X5,"id","transformers.AutoModelForImageClassification"),c(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X5,"href","#transformers.AutoModelForImageClassification"),c(Bd,"class","relative group"),c(ot,"class","docstring"),c(aN,"href","/docs/transformers/pr_15831/en/model_doc/beit#transformers.BeitForImageClassification"),c(nN,"href","/docs/transformers/pr_15831/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(sN,"href","/docs/transformers/pr_15831/en/model_doc/deit#transformers.DeiTForImageClassification"),c(lN,"href","/docs/transformers/pr_15831/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(iN,"href","/docs/transformers/pr_15831/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(dN,"href","/docs/transformers/pr_15831/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(cN,"href","/docs/transformers/pr_15831/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(fN,"href","/docs/transformers/pr_15831/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(mN,"href","/docs/transformers/pr_15831/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(gN,"href","/docs/transformers/pr_15831/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(hN,"href","/docs/transformers/pr_15831/en/model_doc/swin#transformers.SwinForImageClassification"),c(pN,"href","/docs/transformers/pr_15831/en/model_doc/vit#transformers.ViTForImageClassification"),c(He,"class","docstring"),c(lr,"class","docstring"),c(K5,"id","transformers.AutoModelForVision2Seq"),c(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K5,"href","#transformers.AutoModelForVision2Seq"),c(Rd,"class","relative group"),c(rt,"class","docstring"),c(_N,"href","/docs/transformers/pr_15831/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Ue,"class","docstring"),c(ir,"class","docstring"),c(o2,"id","transformers.AutoModelForAudioClassification"),c(o2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o2,"href","#transformers.AutoModelForAudioClassification"),c($d,"class","relative group"),c(tt,"class","docstring"),c(uN,"href","/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(bN,"href","/docs/transformers/pr_15831/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(vN,"href","/docs/transformers/pr_15831/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(TN,"href","/docs/transformers/pr_15831/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(FN,"href","/docs/transformers/pr_15831/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(CN,"href","/docs/transformers/pr_15831/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(MN,"href","/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(EN,"href","/docs/transformers/pr_15831/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(Je,"class","docstring"),c(dr,"class","docstring"),c(f2,"id","transformers.AutoModelForAudioFrameClassification"),c(f2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f2,"href","#transformers.AutoModelForAudioFrameClassification"),c(Dd,"class","relative group"),c(at,"class","docstring"),c(yN,"href","/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(wN,"href","/docs/transformers/pr_15831/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(AN,"href","/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(LN,"href","/docs/transformers/pr_15831/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(Ye,"class","docstring"),c(cr,"class","docstring"),c(u2,"id","transformers.AutoModelForCTC"),c(u2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u2,"href","#transformers.AutoModelForCTC"),c(Od,"class","relative group"),c(nt,"class","docstring"),c(BN,"href","/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(xN,"href","/docs/transformers/pr_15831/en/model_doc/hubert#transformers.HubertForCTC"),c(kN,"href","/docs/transformers/pr_15831/en/model_doc/sew#transformers.SEWForCTC"),c(RN,"href","/docs/transformers/pr_15831/en/model_doc/sew-d#transformers.SEWDForCTC"),c(SN,"href","/docs/transformers/pr_15831/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(PN,"href","/docs/transformers/pr_15831/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c($N,"href","/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(IN,"href","/docs/transformers/pr_15831/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Ke,"class","docstring"),c(fr,"class","docstring"),c(A2,"id","transformers.AutoModelForSpeechSeq2Seq"),c(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A2,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Vd,"class","relative group"),c(st,"class","docstring"),c(jN,"href","/docs/transformers/pr_15831/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(DN,"href","/docs/transformers/pr_15831/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(Ze,"class","docstring"),c(mr,"class","docstring"),c(k2,"id","transformers.AutoModelForAudioXVector"),c(k2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k2,"href","#transformers.AutoModelForAudioXVector"),c(Qd,"class","relative group"),c(lt,"class","docstring"),c(NN,"href","/docs/transformers/pr_15831/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(qN,"href","/docs/transformers/pr_15831/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(ON,"href","/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(GN,"href","/docs/transformers/pr_15831/en/model_doc/wavlm#transformers.WavLMForXVector"),c(eo,"class","docstring"),c(gr,"class","docstring"),c(j2,"id","transformers.AutoModelForMaskedImageModeling"),c(j2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j2,"href","#transformers.AutoModelForMaskedImageModeling"),c(Jd,"class","relative group"),c(it,"class","docstring"),c(XN,"href","/docs/transformers/pr_15831/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(VN,"href","/docs/transformers/pr_15831/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(zN,"href","/docs/transformers/pr_15831/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(oo,"class","docstring"),c(hr,"class","docstring"),c(G2,"id","transformers.AutoModelForObjectDetection"),c(G2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G2,"href","#transformers.AutoModelForObjectDetection"),c(ec,"class","relative group"),c(dt,"class","docstring"),c(WN,"href","/docs/transformers/pr_15831/en/model_doc/detr#transformers.DetrForObjectDetection"),c(ro,"class","docstring"),c(pr,"class","docstring"),c(z2,"id","transformers.AutoModelForImageSegmentation"),c(z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z2,"href","#transformers.AutoModelForImageSegmentation"),c(tc,"class","relative group"),c(ct,"class","docstring"),c(QN,"href","/docs/transformers/pr_15831/en/model_doc/detr#transformers.DetrForSegmentation"),c(to,"class","docstring"),c(_r,"class","docstring"),c(H2,"id","transformers.AutoModelForSemanticSegmentation"),c(H2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H2,"href","#transformers.AutoModelForSemanticSegmentation"),c(sc,"class","relative group"),c(ft,"class","docstring"),c(HN,"href","/docs/transformers/pr_15831/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(UN,"href","/docs/transformers/pr_15831/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(ao,"class","docstring"),c(ur,"class","docstring"),c(K2,"id","transformers.AutoModelForInstanceSegmentation"),c(K2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K2,"href","#transformers.AutoModelForInstanceSegmentation"),c(dc,"class","relative group"),c(mt,"class","docstring"),c(JN,"href","/docs/transformers/pr_15831/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(no,"class","docstring"),c(br,"class","docstring"),c(ov,"id","transformers.TFAutoModel"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.TFAutoModel"),c(mc,"class","relative group"),c(gt,"class","docstring"),c(YN,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.TFAlbertModel"),c(KN,"href","/docs/transformers/pr_15831/en/model_doc/bart#transformers.TFBartModel"),c(ZN,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.TFBertModel"),c(eq,"href","/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(oq,"href","/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(rq,"href","/docs/transformers/pr_15831/en/model_doc/camembert#transformers.TFCamembertModel"),c(tq,"href","/docs/transformers/pr_15831/en/model_doc/clip#transformers.TFCLIPModel"),c(aq,"href","/docs/transformers/pr_15831/en/model_doc/convbert#transformers.TFConvBertModel"),c(nq,"href","/docs/transformers/pr_15831/en/model_doc/convnext#transformers.TFConvNextModel"),c(sq,"href","/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.TFCTRLModel"),c(lq,"href","/docs/transformers/pr_15831/en/model_doc/deberta#transformers.TFDebertaModel"),c(iq,"href","/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(dq,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(cq,"href","/docs/transformers/pr_15831/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(fq,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.TFElectraModel"),c(mq,"href","/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(gq,"href","/docs/transformers/pr_15831/en/model_doc/funnel#transformers.TFFunnelModel"),c(hq,"href","/docs/transformers/pr_15831/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(pq,"href","/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.TFGPT2Model"),c(_q,"href","/docs/transformers/pr_15831/en/model_doc/hubert#transformers.TFHubertModel"),c(uq,"href","/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(bq,"href","/docs/transformers/pr_15831/en/model_doc/led#transformers.TFLEDModel"),c(vq,"href","/docs/transformers/pr_15831/en/model_doc/longformer#transformers.TFLongformerModel"),c(Tq,"href","/docs/transformers/pr_15831/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Fq,"href","/docs/transformers/pr_15831/en/model_doc/marian#transformers.TFMarianModel"),c(Cq,"href","/docs/transformers/pr_15831/en/model_doc/mbart#transformers.TFMBartModel"),c(Mq,"href","/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Eq,"href","/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.TFMPNetModel"),c(yq,"href","/docs/transformers/pr_15831/en/model_doc/mt5#transformers.TFMT5Model"),c(wq,"href","/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Aq,"href","/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Lq,"href","/docs/transformers/pr_15831/en/model_doc/rembert#transformers.TFRemBertModel"),c(Bq,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.TFRobertaModel"),c(xq,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.TFRoFormerModel"),c(kq,"href","/docs/transformers/pr_15831/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Rq,"href","/docs/transformers/pr_15831/en/model_doc/t5#transformers.TFT5Model"),c(Sq,"href","/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TFTapasModel"),c(Pq,"href","/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c($q,"href","/docs/transformers/pr_15831/en/model_doc/vit#transformers.TFViTModel"),c(Iq,"href","/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(jq,"href","/docs/transformers/pr_15831/en/model_doc/xlm#transformers.TFXLMModel"),c(Dq,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Nq,"href","/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.TFXLNetModel"),c(ho,"class","docstring"),c(vr,"class","docstring"),c(Xv,"id","transformers.TFAutoModelForPreTraining"),c(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xv,"href","#transformers.TFAutoModelForPreTraining"),c(pc,"class","relative group"),c(ht,"class","docstring"),c(qq,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Oq,"href","/docs/transformers/pr_15831/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Gq,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Xq,"href","/docs/transformers/pr_15831/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Vq,"href","/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(zq,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Wq,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Qq,"href","/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Hq,"href","/docs/transformers/pr_15831/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Uq,"href","/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Jq,"href","/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Yq,"href","/docs/transformers/pr_15831/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(Kq,"href","/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Zq,"href","/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(eO,"href","/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(oO,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(rO,"href","/docs/transformers/pr_15831/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(tO,"href","/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(aO,"href","/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(nO,"href","/docs/transformers/pr_15831/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(sO,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(lO,"href","/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(po,"class","docstring"),c(Tr,"class","docstring"),c(mT,"id","transformers.TFAutoModelForCausalLM"),c(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mT,"href","#transformers.TFAutoModelForCausalLM"),c(bc,"class","relative group"),c(pt,"class","docstring"),c(iO,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(dO,"href","/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(cO,"href","/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(fO,"href","/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(mO,"href","/docs/transformers/pr_15831/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(gO,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(hO,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(pO,"href","/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(_O,"href","/docs/transformers/pr_15831/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(uO,"href","/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(_o,"class","docstring"),c(Fr,"class","docstring"),c(MT,"id","transformers.TFAutoModelForImageClassification"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.TFAutoModelForImageClassification"),c(Fc,"class","relative group"),c(_t,"class","docstring"),c(bO,"href","/docs/transformers/pr_15831/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(vO,"href","/docs/transformers/pr_15831/en/model_doc/vit#transformers.TFViTForImageClassification"),c(uo,"class","docstring"),c(Cr,"class","docstring"),c(wT,"id","transformers.TFAutoModelForMaskedLM"),c(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wT,"href","#transformers.TFAutoModelForMaskedLM"),c(Ec,"class","relative group"),c(ut,"class","docstring"),c(TO,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(FO,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(CO,"href","/docs/transformers/pr_15831/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(MO,"href","/docs/transformers/pr_15831/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(EO,"href","/docs/transformers/pr_15831/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(yO,"href","/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(wO,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(AO,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(LO,"href","/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(BO,"href","/docs/transformers/pr_15831/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(xO,"href","/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(kO,"href","/docs/transformers/pr_15831/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(RO,"href","/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(SO,"href","/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(PO,"href","/docs/transformers/pr_15831/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c($O,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(IO,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(jO,"href","/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(DO,"href","/docs/transformers/pr_15831/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(NO,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bo,"class","docstring"),c(Mr,"class","docstring"),c(QT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Ac,"class","relative group"),c(bt,"class","docstring"),c(qO,"href","/docs/transformers/pr_15831/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(OO,"href","/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(GO,"href","/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(XO,"href","/docs/transformers/pr_15831/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(VO,"href","/docs/transformers/pr_15831/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(zO,"href","/docs/transformers/pr_15831/en/model_doc/marian#transformers.TFMarianMTModel"),c(WO,"href","/docs/transformers/pr_15831/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(QO,"href","/docs/transformers/pr_15831/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(HO,"href","/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(UO,"href","/docs/transformers/pr_15831/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(vo,"class","docstring"),c(Er,"class","docstring"),c(a8,"id","transformers.TFAutoModelForSequenceClassification"),c(a8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a8,"href","#transformers.TFAutoModelForSequenceClassification"),c(xc,"class","relative group"),c(vt,"class","docstring"),c(JO,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(YO,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(KO,"href","/docs/transformers/pr_15831/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_15831/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(eG,"href","/docs/transformers/pr_15831/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(oG,"href","/docs/transformers/pr_15831/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(rG,"href","/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(tG,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(aG,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(nG,"href","/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(sG,"href","/docs/transformers/pr_15831/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(lG,"href","/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(iG,"href","/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(dG,"href","/docs/transformers/pr_15831/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(cG,"href","/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(fG,"href","/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(mG,"href","/docs/transformers/pr_15831/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(gG,"href","/docs/transformers/pr_15831/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(hG,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(pG,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(_G,"href","/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(uG,"href","/docs/transformers/pr_15831/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(bG,"href","/docs/transformers/pr_15831/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(vG,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(TG,"href","/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(To,"class","docstring"),c(yr,"class","docstring"),c(x8,"id","transformers.TFAutoModelForMultipleChoice"),c(x8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x8,"href","#transformers.TFAutoModelForMultipleChoice"),c(Sc,"class","relative group"),c(Tt,"class","docstring"),c(FG,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(CG,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(MG,"href","/docs/transformers/pr_15831/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(EG,"href","/docs/transformers/pr_15831/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(yG,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(wG,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(AG,"href","/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(LG,"href","/docs/transformers/pr_15831/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(BG,"href","/docs/transformers/pr_15831/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(xG,"href","/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(kG,"href","/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(RG,"href","/docs/transformers/pr_15831/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(SG,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(PG,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c($G,"href","/docs/transformers/pr_15831/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(IG,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(jG,"href","/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Fo,"class","docstring"),c(wr,"class","docstring"),c(H8,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(H8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H8,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Ic,"class","relative group"),c(Ft,"class","docstring"),c(DG,"href","/docs/transformers/pr_15831/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Co,"class","docstring"),c(Ar,"class","docstring"),c(J8,"id","transformers.TFAutoModelForTokenClassification"),c(J8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J8,"href","#transformers.TFAutoModelForTokenClassification"),c(Nc,"class","relative group"),c(Ct,"class","docstring"),c(NG,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(qG,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(OG,"href","/docs/transformers/pr_15831/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(GG,"href","/docs/transformers/pr_15831/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(XG,"href","/docs/transformers/pr_15831/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(VG,"href","/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(zG,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(WG,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(QG,"href","/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(HG,"href","/docs/transformers/pr_15831/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(UG,"href","/docs/transformers/pr_15831/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(JG,"href","/docs/transformers/pr_15831/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(YG,"href","/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(KG,"href","/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(ZG,"href","/docs/transformers/pr_15831/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(eX,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(oX,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(rX,"href","/docs/transformers/pr_15831/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(tX,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(aX,"href","/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Mo,"class","docstring"),c(Lr,"class","docstring"),c(uF,"id","transformers.TFAutoModelForQuestionAnswering"),c(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uF,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Gc,"class","relative group"),c(Mt,"class","docstring"),c(nX,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_15831/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_15831/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_15831/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_15831/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_15831/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(hX,"href","/docs/transformers/pr_15831/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_15831/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_15831/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_15831/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_15831/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_15831/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(CX,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_15831/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Eo,"class","docstring"),c(Br,"class","docstring"),c(jF,"id","transformers.TFAutoModelForVision2Seq"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.TFAutoModelForVision2Seq"),c(zc,"class","relative group"),c(Et,"class","docstring"),c(EX,"href","/docs/transformers/pr_15831/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(yo,"class","docstring"),c(xr,"class","docstring"),c(NF,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(NF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NF,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Hc,"class","relative group"),c(yt,"class","docstring"),c(yX,"href","/docs/transformers/pr_15831/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(wo,"class","docstring"),c(kr,"class","docstring"),c(OF,"id","transformers.FlaxAutoModel"),c(OF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OF,"href","#transformers.FlaxAutoModel"),c(Yc,"class","relative group"),c(wt,"class","docstring"),c(wX,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.FlaxAlbertModel"),c(AX,"href","/docs/transformers/pr_15831/en/model_doc/bart#transformers.FlaxBartModel"),c(LX,"href","/docs/transformers/pr_15831/en/model_doc/beit#transformers.FlaxBeitModel"),c(BX,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.FlaxBertModel"),c(xX,"href","/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(kX,"href","/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(RX,"href","/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(SX,"href","/docs/transformers/pr_15831/en/model_doc/clip#transformers.FlaxCLIPModel"),c(PX,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c($X,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.FlaxElectraModel"),c(IX,"href","/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(jX,"href","/docs/transformers/pr_15831/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(DX,"href","/docs/transformers/pr_15831/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(NX,"href","/docs/transformers/pr_15831/en/model_doc/marian#transformers.FlaxMarianModel"),c(qX,"href","/docs/transformers/pr_15831/en/model_doc/mbart#transformers.FlaxMBartModel"),c(OX,"href","/docs/transformers/pr_15831/en/model_doc/mt5#transformers.FlaxMT5Model"),c(GX,"href","/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(XX,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(VX,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(zX,"href","/docs/transformers/pr_15831/en/model_doc/t5#transformers.FlaxT5Model"),c(WX,"href","/docs/transformers/pr_15831/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(QX,"href","/docs/transformers/pr_15831/en/model_doc/vit#transformers.FlaxViTModel"),c(HX,"href","/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(UX,"href","/docs/transformers/pr_15831/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(JX,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ao,"class","docstring"),c(Rr,"class","docstring"),c(gC,"id","transformers.FlaxAutoModelForCausalLM"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.FlaxAutoModelForCausalLM"),c(ef,"class","relative group"),c(At,"class","docstring"),c(YX,"href","/docs/transformers/pr_15831/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(KX,"href","/docs/transformers/pr_15831/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(ZX,"href","/docs/transformers/pr_15831/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(eV,"href","/docs/transformers/pr_15831/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Lo,"class","docstring"),c(Sr,"class","docstring"),c(bC,"id","transformers.FlaxAutoModelForPreTraining"),c(bC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bC,"href","#transformers.FlaxAutoModelForPreTraining"),c(tf,"class","relative group"),c(Lt,"class","docstring"),c(oV,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(rV,"href","/docs/transformers/pr_15831/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(tV,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(aV,"href","/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(nV,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(sV,"href","/docs/transformers/pr_15831/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(lV,"href","/docs/transformers/pr_15831/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(iV,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(dV,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(cV,"href","/docs/transformers/pr_15831/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(fV,"href","/docs/transformers/pr_15831/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(mV,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Bo,"class","docstring"),c(Pr,"class","docstring"),c(kC,"id","transformers.FlaxAutoModelForMaskedLM"),c(kC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(sf,"class","relative group"),c(Bt,"class","docstring"),c(gV,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(hV,"href","/docs/transformers/pr_15831/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(pV,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(_V,"href","/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(uV,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(bV,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(vV,"href","/docs/transformers/pr_15831/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(TV,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(FV,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(CV,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(xo,"class","docstring"),c($r,"class","docstring"),c(GC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(GC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(cf,"class","relative group"),c(xt,"class","docstring"),c(MV,"href","/docs/transformers/pr_15831/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(EV,"href","/docs/transformers/pr_15831/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(yV,"href","/docs/transformers/pr_15831/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(wV,"href","/docs/transformers/pr_15831/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(AV,"href","/docs/transformers/pr_15831/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(LV,"href","/docs/transformers/pr_15831/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(BV,"href","/docs/transformers/pr_15831/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(xV,"href","/docs/transformers/pr_15831/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(kV,"href","/docs/transformers/pr_15831/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ko,"class","docstring"),c(Ir,"class","docstring"),c(KC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(gf,"class","relative group"),c(kt,"class","docstring"),c(RV,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(SV,"href","/docs/transformers/pr_15831/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(PV,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c($V,"href","/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(IV,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(jV,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(DV,"href","/docs/transformers/pr_15831/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(NV,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(qV,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(OV,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Ro,"class","docstring"),c(jr,"class","docstring"),c(dM,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dM,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(_f,"class","relative group"),c(Rt,"class","docstring"),c(GV,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_15831/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_15831/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(So,"class","docstring"),c(Dr,"class","docstring"),c(TM,"id","transformers.FlaxAutoModelForTokenClassification"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.FlaxAutoModelForTokenClassification"),c(vf,"class","relative group"),c(St,"class","docstring"),c(KV,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(ZV,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(ez,"href","/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(oz,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(rz,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(tz,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(az,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(nz,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Po,"class","docstring"),c(Nr,"class","docstring"),c(BM,"id","transformers.FlaxAutoModelForMultipleChoice"),c(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BM,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Cf,"class","relative group"),c(Pt,"class","docstring"),c(sz,"href","/docs/transformers/pr_15831/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(lz,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(iz,"href","/docs/transformers/pr_15831/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(dz,"href","/docs/transformers/pr_15831/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(cz,"href","/docs/transformers/pr_15831/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(fz,"href","/docs/transformers/pr_15831/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(mz,"href","/docs/transformers/pr_15831/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(gz,"href","/docs/transformers/pr_15831/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c($o,"class","docstring"),c(qr,"class","docstring"),c(DM,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(yf,"class","relative group"),c($t,"class","docstring"),c(hz,"href","/docs/transformers/pr_15831/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Io,"class","docstring"),c(Or,"class","docstring"),c(qM,"id","transformers.FlaxAutoModelForImageClassification"),c(qM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qM,"href","#transformers.FlaxAutoModelForImageClassification"),c(Lf,"class","relative group"),c(It,"class","docstring"),c(pz,"href","/docs/transformers/pr_15831/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(_z,"href","/docs/transformers/pr_15831/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(jo,"class","docstring"),c(Gr,"class","docstring"),c(XM,"id","transformers.FlaxAutoModelForVision2Seq"),c(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XM,"href","#transformers.FlaxAutoModelForVision2Seq"),c(kf,"class","relative group"),c(jt,"class","docstring"),c(uz,"href","/docs/transformers/pr_15831/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Do,"class","docstring"),c(Xr,"class","docstring")},m(d,u){e(document.head,J),b(d,Pe,u),b(d,de,u),e(de,ge),e(ge,io),g(fe,io,null),e(de,Te),e(de,Vo),e(Vo,Ii),b(d,$f,u),b(d,ca,u),e(ca,ji),e(ca,Di),e(Di,z4),e(ca,If),b(d,Le,u),b(d,co,u),e(co,Ni),e(co,On),e(On,W4),e(co,Gn),e(co,Xn),e(Xn,Q4),e(co,qi),e(co,Vn),e(Vn,H4),e(co,Oi),b(d,jf,u),g(Na,d,u),b(d,fo,u),b(d,he,u),e(he,D7),e(he,Gi),e(Gi,N7),e(he,q7),b(d,zo,u),b(d,qa,u),e(qa,O7),e(qa,Df),e(Df,G7),e(qa,mPe),b(d,KBe,u),b(d,Xi,u),e(Xi,Nf),e(Nf,cQ),g(U4,cQ,null),e(Xi,gPe),e(Xi,fQ),e(fQ,hPe),b(d,ZBe,u),b(d,zn,u),e(zn,pPe),e(zn,mQ),e(mQ,_Pe),e(zn,uPe),e(zn,gQ),e(gQ,bPe),e(zn,vPe),b(d,exe,u),g(J4,d,u),b(d,oxe,u),b(d,X7,u),e(X7,TPe),b(d,rxe,u),g(qf,d,u),b(d,txe,u),b(d,Vi,u),e(Vi,Of),e(Of,hQ),g(Y4,hQ,null),e(Vi,FPe),e(Vi,pQ),e(pQ,CPe),b(d,axe,u),b(d,Wo,u),g(K4,Wo,null),e(Wo,MPe),e(Wo,Z4),e(Z4,EPe),e(Z4,V7),e(V7,yPe),e(Z4,wPe),e(Wo,APe),e(Wo,eE),e(eE,LPe),e(eE,_Q),e(_Q,BPe),e(eE,xPe),e(Wo,kPe),e(Wo,mo),g(oE,mo,null),e(mo,RPe),e(mo,uQ),e(uQ,SPe),e(mo,PPe),e(mo,zi),e(zi,$Pe),e(zi,bQ),e(bQ,IPe),e(zi,jPe),e(zi,vQ),e(vQ,DPe),e(zi,NPe),e(mo,qPe),e(mo,v),e(v,Gf),e(Gf,TQ),e(TQ,OPe),e(Gf,GPe),e(Gf,z7),e(z7,XPe),e(Gf,VPe),e(v,zPe),e(v,Xf),e(Xf,FQ),e(FQ,WPe),e(Xf,QPe),e(Xf,W7),e(W7,HPe),e(Xf,UPe),e(v,JPe),e(v,Vf),e(Vf,CQ),e(CQ,YPe),e(Vf,KPe),e(Vf,Q7),e(Q7,ZPe),e(Vf,e$e),e(v,o$e),e(v,zf),e(zf,MQ),e(MQ,r$e),e(zf,t$e),e(zf,H7),e(H7,a$e),e(zf,n$e),e(v,s$e),e(v,Wf),e(Wf,EQ),e(EQ,l$e),e(Wf,i$e),e(Wf,U7),e(U7,d$e),e(Wf,c$e),e(v,f$e),e(v,Qf),e(Qf,yQ),e(yQ,m$e),e(Qf,g$e),e(Qf,J7),e(J7,h$e),e(Qf,p$e),e(v,_$e),e(v,Hf),e(Hf,wQ),e(wQ,u$e),e(Hf,b$e),e(Hf,Y7),e(Y7,v$e),e(Hf,T$e),e(v,F$e),e(v,Uf),e(Uf,AQ),e(AQ,C$e),e(Uf,M$e),e(Uf,K7),e(K7,E$e),e(Uf,y$e),e(v,w$e),e(v,Jf),e(Jf,LQ),e(LQ,A$e),e(Jf,L$e),e(Jf,Z7),e(Z7,B$e),e(Jf,x$e),e(v,k$e),e(v,Yf),e(Yf,BQ),e(BQ,R$e),e(Yf,S$e),e(Yf,e9),e(e9,P$e),e(Yf,$$e),e(v,I$e),e(v,Kf),e(Kf,xQ),e(xQ,j$e),e(Kf,D$e),e(Kf,o9),e(o9,N$e),e(Kf,q$e),e(v,O$e),e(v,Zf),e(Zf,kQ),e(kQ,G$e),e(Zf,X$e),e(Zf,r9),e(r9,V$e),e(Zf,z$e),e(v,W$e),e(v,em),e(em,RQ),e(RQ,Q$e),e(em,H$e),e(em,t9),e(t9,U$e),e(em,J$e),e(v,Y$e),e(v,om),e(om,SQ),e(SQ,K$e),e(om,Z$e),e(om,a9),e(a9,eIe),e(om,oIe),e(v,rIe),e(v,rm),e(rm,PQ),e(PQ,tIe),e(rm,aIe),e(rm,n9),e(n9,nIe),e(rm,sIe),e(v,lIe),e(v,tm),e(tm,$Q),e($Q,iIe),e(tm,dIe),e(tm,s9),e(s9,cIe),e(tm,fIe),e(v,mIe),e(v,am),e(am,IQ),e(IQ,gIe),e(am,hIe),e(am,l9),e(l9,pIe),e(am,_Ie),e(v,uIe),e(v,nm),e(nm,jQ),e(jQ,bIe),e(nm,vIe),e(nm,i9),e(i9,TIe),e(nm,FIe),e(v,CIe),e(v,sm),e(sm,DQ),e(DQ,MIe),e(sm,EIe),e(sm,d9),e(d9,yIe),e(sm,wIe),e(v,AIe),e(v,lm),e(lm,NQ),e(NQ,LIe),e(lm,BIe),e(lm,c9),e(c9,xIe),e(lm,kIe),e(v,RIe),e(v,im),e(im,qQ),e(qQ,SIe),e(im,PIe),e(im,f9),e(f9,$Ie),e(im,IIe),e(v,jIe),e(v,dm),e(dm,OQ),e(OQ,DIe),e(dm,NIe),e(dm,m9),e(m9,qIe),e(dm,OIe),e(v,GIe),e(v,cm),e(cm,GQ),e(GQ,XIe),e(cm,VIe),e(cm,g9),e(g9,zIe),e(cm,WIe),e(v,QIe),e(v,fm),e(fm,XQ),e(XQ,HIe),e(fm,UIe),e(fm,h9),e(h9,JIe),e(fm,YIe),e(v,KIe),e(v,mm),e(mm,VQ),e(VQ,ZIe),e(mm,eje),e(mm,p9),e(p9,oje),e(mm,rje),e(v,tje),e(v,gm),e(gm,zQ),e(zQ,aje),e(gm,nje),e(gm,_9),e(_9,sje),e(gm,lje),e(v,ije),e(v,hm),e(hm,WQ),e(WQ,dje),e(hm,cje),e(hm,u9),e(u9,fje),e(hm,mje),e(v,gje),e(v,pm),e(pm,QQ),e(QQ,hje),e(pm,pje),e(pm,b9),e(b9,_je),e(pm,uje),e(v,bje),e(v,_m),e(_m,HQ),e(HQ,vje),e(_m,Tje),e(_m,v9),e(v9,Fje),e(_m,Cje),e(v,Mje),e(v,um),e(um,UQ),e(UQ,Eje),e(um,yje),e(um,T9),e(T9,wje),e(um,Aje),e(v,Lje),e(v,bm),e(bm,JQ),e(JQ,Bje),e(bm,xje),e(bm,F9),e(F9,kje),e(bm,Rje),e(v,Sje),e(v,vm),e(vm,YQ),e(YQ,Pje),e(vm,$je),e(vm,C9),e(C9,Ije),e(vm,jje),e(v,Dje),e(v,Tm),e(Tm,KQ),e(KQ,Nje),e(Tm,qje),e(Tm,M9),e(M9,Oje),e(Tm,Gje),e(v,Xje),e(v,Fm),e(Fm,ZQ),e(ZQ,Vje),e(Fm,zje),e(Fm,E9),e(E9,Wje),e(Fm,Qje),e(v,Hje),e(v,Cm),e(Cm,eH),e(eH,Uje),e(Cm,Jje),e(Cm,y9),e(y9,Yje),e(Cm,Kje),e(v,Zje),e(v,Mm),e(Mm,oH),e(oH,eDe),e(Mm,oDe),e(Mm,w9),e(w9,rDe),e(Mm,tDe),e(v,aDe),e(v,Em),e(Em,rH),e(rH,nDe),e(Em,sDe),e(Em,A9),e(A9,lDe),e(Em,iDe),e(v,dDe),e(v,ym),e(ym,tH),e(tH,cDe),e(ym,fDe),e(ym,L9),e(L9,mDe),e(ym,gDe),e(v,hDe),e(v,wm),e(wm,aH),e(aH,pDe),e(wm,_De),e(wm,B9),e(B9,uDe),e(wm,bDe),e(v,vDe),e(v,Am),e(Am,nH),e(nH,TDe),e(Am,FDe),e(Am,x9),e(x9,CDe),e(Am,MDe),e(v,EDe),e(v,Lm),e(Lm,sH),e(sH,yDe),e(Lm,wDe),e(Lm,k9),e(k9,ADe),e(Lm,LDe),e(v,BDe),e(v,Bm),e(Bm,lH),e(lH,xDe),e(Bm,kDe),e(Bm,R9),e(R9,RDe),e(Bm,SDe),e(v,PDe),e(v,xm),e(xm,iH),e(iH,$De),e(xm,IDe),e(xm,S9),e(S9,jDe),e(xm,DDe),e(v,NDe),e(v,km),e(km,dH),e(dH,qDe),e(km,ODe),e(km,P9),e(P9,GDe),e(km,XDe),e(v,VDe),e(v,Rm),e(Rm,cH),e(cH,zDe),e(Rm,WDe),e(Rm,$9),e($9,QDe),e(Rm,HDe),e(v,UDe),e(v,Sm),e(Sm,fH),e(fH,JDe),e(Sm,YDe),e(Sm,I9),e(I9,KDe),e(Sm,ZDe),e(v,eNe),e(v,Pm),e(Pm,mH),e(mH,oNe),e(Pm,rNe),e(Pm,j9),e(j9,tNe),e(Pm,aNe),e(v,nNe),e(v,$m),e($m,gH),e(gH,sNe),e($m,lNe),e($m,D9),e(D9,iNe),e($m,dNe),e(v,cNe),e(v,Im),e(Im,hH),e(hH,fNe),e(Im,mNe),e(Im,N9),e(N9,gNe),e(Im,hNe),e(v,pNe),e(v,jm),e(jm,pH),e(pH,_Ne),e(jm,uNe),e(jm,q9),e(q9,bNe),e(jm,vNe),e(v,TNe),e(v,Dm),e(Dm,_H),e(_H,FNe),e(Dm,CNe),e(Dm,O9),e(O9,MNe),e(Dm,ENe),e(v,yNe),e(v,Nm),e(Nm,uH),e(uH,wNe),e(Nm,ANe),e(Nm,G9),e(G9,LNe),e(Nm,BNe),e(v,xNe),e(v,qm),e(qm,bH),e(bH,kNe),e(qm,RNe),e(qm,X9),e(X9,SNe),e(qm,PNe),e(v,$Ne),e(v,Om),e(Om,vH),e(vH,INe),e(Om,jNe),e(Om,V9),e(V9,DNe),e(Om,NNe),e(v,qNe),e(v,Gm),e(Gm,TH),e(TH,ONe),e(Gm,GNe),e(Gm,z9),e(z9,XNe),e(Gm,VNe),e(v,zNe),e(v,Xm),e(Xm,FH),e(FH,WNe),e(Xm,QNe),e(Xm,W9),e(W9,HNe),e(Xm,UNe),e(v,JNe),e(v,Vm),e(Vm,CH),e(CH,YNe),e(Vm,KNe),e(Vm,Q9),e(Q9,ZNe),e(Vm,eqe),e(v,oqe),e(v,zm),e(zm,MH),e(MH,rqe),e(zm,tqe),e(zm,H9),e(H9,aqe),e(zm,nqe),e(v,sqe),e(v,Wm),e(Wm,EH),e(EH,lqe),e(Wm,iqe),e(Wm,U9),e(U9,dqe),e(Wm,cqe),e(v,fqe),e(v,Qm),e(Qm,yH),e(yH,mqe),e(Qm,gqe),e(Qm,J9),e(J9,hqe),e(Qm,pqe),e(v,_qe),e(v,Hm),e(Hm,wH),e(wH,uqe),e(Hm,bqe),e(Hm,Y9),e(Y9,vqe),e(Hm,Tqe),e(v,Fqe),e(v,Um),e(Um,AH),e(AH,Cqe),e(Um,Mqe),e(Um,K9),e(K9,Eqe),e(Um,yqe),e(v,wqe),e(v,Jm),e(Jm,LH),e(LH,Aqe),e(Jm,Lqe),e(Jm,Z9),e(Z9,Bqe),e(Jm,xqe),e(v,kqe),e(v,Ym),e(Ym,BH),e(BH,Rqe),e(Ym,Sqe),e(Ym,eB),e(eB,Pqe),e(Ym,$qe),e(v,Iqe),e(v,Km),e(Km,xH),e(xH,jqe),e(Km,Dqe),e(Km,oB),e(oB,Nqe),e(Km,qqe),e(v,Oqe),e(v,Zm),e(Zm,kH),e(kH,Gqe),e(Zm,Xqe),e(Zm,rB),e(rB,Vqe),e(Zm,zqe),e(v,Wqe),e(v,eg),e(eg,RH),e(RH,Qqe),e(eg,Hqe),e(eg,tB),e(tB,Uqe),e(eg,Jqe),e(v,Yqe),e(v,og),e(og,SH),e(SH,Kqe),e(og,Zqe),e(og,aB),e(aB,eOe),e(og,oOe),e(v,rOe),e(v,rg),e(rg,PH),e(PH,tOe),e(rg,aOe),e(rg,nB),e(nB,nOe),e(rg,sOe),e(v,lOe),e(v,tg),e(tg,$H),e($H,iOe),e(tg,dOe),e(tg,sB),e(sB,cOe),e(tg,fOe),e(v,mOe),e(v,ag),e(ag,IH),e(IH,gOe),e(ag,hOe),e(ag,lB),e(lB,pOe),e(ag,_Oe),e(v,uOe),e(v,ng),e(ng,jH),e(jH,bOe),e(ng,vOe),e(ng,iB),e(iB,TOe),e(ng,FOe),e(v,COe),e(v,sg),e(sg,DH),e(DH,MOe),e(sg,EOe),e(sg,dB),e(dB,yOe),e(sg,wOe),e(v,AOe),e(v,lg),e(lg,NH),e(NH,LOe),e(lg,BOe),e(lg,cB),e(cB,xOe),e(lg,kOe),e(v,ROe),e(v,ig),e(ig,qH),e(qH,SOe),e(ig,POe),e(ig,fB),e(fB,$Oe),e(ig,IOe),e(v,jOe),e(v,dg),e(dg,OH),e(OH,DOe),e(dg,NOe),e(dg,mB),e(mB,qOe),e(dg,OOe),e(v,GOe),e(v,cg),e(cg,GH),e(GH,XOe),e(cg,VOe),e(cg,gB),e(gB,zOe),e(cg,WOe),e(v,QOe),e(v,fg),e(fg,XH),e(XH,HOe),e(fg,UOe),e(fg,hB),e(hB,JOe),e(fg,YOe),e(v,KOe),e(v,mg),e(mg,VH),e(VH,ZOe),e(mg,eGe),e(mg,pB),e(pB,oGe),e(mg,rGe),e(v,tGe),e(v,gg),e(gg,zH),e(zH,aGe),e(gg,nGe),e(gg,_B),e(_B,sGe),e(gg,lGe),e(v,iGe),e(v,hg),e(hg,WH),e(WH,dGe),e(hg,cGe),e(hg,uB),e(uB,fGe),e(hg,mGe),e(v,gGe),e(v,pg),e(pg,QH),e(QH,hGe),e(pg,pGe),e(pg,bB),e(bB,_Ge),e(pg,uGe),e(v,bGe),e(v,_g),e(_g,HH),e(HH,vGe),e(_g,TGe),e(_g,vB),e(vB,FGe),e(_g,CGe),e(v,MGe),e(v,ug),e(ug,UH),e(UH,EGe),e(ug,yGe),e(ug,TB),e(TB,wGe),e(ug,AGe),e(v,LGe),e(v,bg),e(bg,JH),e(JH,BGe),e(bg,xGe),e(bg,FB),e(FB,kGe),e(bg,RGe),e(v,SGe),e(v,vg),e(vg,YH),e(YH,PGe),e(vg,$Ge),e(vg,CB),e(CB,IGe),e(vg,jGe),e(v,DGe),e(v,Tg),e(Tg,KH),e(KH,NGe),e(Tg,qGe),e(Tg,MB),e(MB,OGe),e(Tg,GGe),e(v,XGe),e(v,Fg),e(Fg,ZH),e(ZH,VGe),e(Fg,zGe),e(Fg,EB),e(EB,WGe),e(Fg,QGe),e(v,HGe),e(v,Cg),e(Cg,eU),e(eU,UGe),e(Cg,JGe),e(Cg,yB),e(yB,YGe),e(Cg,KGe),e(v,ZGe),e(v,Mg),e(Mg,oU),e(oU,eXe),e(Mg,oXe),e(Mg,wB),e(wB,rXe),e(Mg,tXe),e(v,aXe),e(v,Eg),e(Eg,rU),e(rU,nXe),e(Eg,sXe),e(Eg,AB),e(AB,lXe),e(Eg,iXe),e(v,dXe),e(v,yg),e(yg,tU),e(tU,cXe),e(yg,fXe),e(yg,LB),e(LB,mXe),e(yg,gXe),e(v,hXe),e(v,wg),e(wg,aU),e(aU,pXe),e(wg,_Xe),e(wg,BB),e(BB,uXe),e(wg,bXe),e(v,vXe),e(v,Ag),e(Ag,nU),e(nU,TXe),e(Ag,FXe),e(Ag,xB),e(xB,CXe),e(Ag,MXe),e(mo,EXe),e(mo,sU),e(sU,yXe),e(mo,wXe),g(rE,mo,null),e(Wo,AXe),e(Wo,Lg),g(tE,Lg,null),e(Lg,LXe),e(Lg,lU),e(lU,BXe),b(d,nxe,u),b(d,Wi,u),e(Wi,Bg),e(Bg,iU),g(aE,iU,null),e(Wi,xXe),e(Wi,dU),e(dU,kXe),b(d,sxe,u),b(d,Qo,u),g(nE,Qo,null),e(Qo,RXe),e(Qo,sE),e(sE,SXe),e(sE,kB),e(kB,PXe),e(sE,$Xe),e(Qo,IXe),e(Qo,lE),e(lE,jXe),e(lE,cU),e(cU,DXe),e(lE,NXe),e(Qo,qXe),e(Qo,go),g(iE,go,null),e(go,OXe),e(go,fU),e(fU,GXe),e(go,XXe),e(go,Oa),e(Oa,VXe),e(Oa,mU),e(mU,zXe),e(Oa,WXe),e(Oa,gU),e(gU,QXe),e(Oa,HXe),e(Oa,hU),e(hU,UXe),e(Oa,JXe),e(go,YXe),e(go,E),e(E,Wn),e(Wn,pU),e(pU,KXe),e(Wn,ZXe),e(Wn,RB),e(RB,eVe),e(Wn,oVe),e(Wn,SB),e(SB,rVe),e(Wn,tVe),e(E,aVe),e(E,Qn),e(Qn,_U),e(_U,nVe),e(Qn,sVe),e(Qn,PB),e(PB,lVe),e(Qn,iVe),e(Qn,$B),e($B,dVe),e(Qn,cVe),e(E,fVe),e(E,Hn),e(Hn,uU),e(uU,mVe),e(Hn,gVe),e(Hn,IB),e(IB,hVe),e(Hn,pVe),e(Hn,jB),e(jB,_Ve),e(Hn,uVe),e(E,bVe),e(E,xg),e(xg,bU),e(bU,vVe),e(xg,TVe),e(xg,DB),e(DB,FVe),e(xg,CVe),e(E,MVe),e(E,Un),e(Un,vU),e(vU,EVe),e(Un,yVe),e(Un,NB),e(NB,wVe),e(Un,AVe),e(Un,qB),e(qB,LVe),e(Un,BVe),e(E,xVe),e(E,kg),e(kg,TU),e(TU,kVe),e(kg,RVe),e(kg,OB),e(OB,SVe),e(kg,PVe),e(E,$Ve),e(E,Rg),e(Rg,FU),e(FU,IVe),e(Rg,jVe),e(Rg,GB),e(GB,DVe),e(Rg,NVe),e(E,qVe),e(E,Sg),e(Sg,CU),e(CU,OVe),e(Sg,GVe),e(Sg,XB),e(XB,XVe),e(Sg,VVe),e(E,zVe),e(E,Jn),e(Jn,MU),e(MU,WVe),e(Jn,QVe),e(Jn,VB),e(VB,HVe),e(Jn,UVe),e(Jn,zB),e(zB,JVe),e(Jn,YVe),e(E,KVe),e(E,Yn),e(Yn,EU),e(EU,ZVe),e(Yn,eze),e(Yn,WB),e(WB,oze),e(Yn,rze),e(Yn,QB),e(QB,tze),e(Yn,aze),e(E,nze),e(E,Kn),e(Kn,yU),e(yU,sze),e(Kn,lze),e(Kn,HB),e(HB,ize),e(Kn,dze),e(Kn,UB),e(UB,cze),e(Kn,fze),e(E,mze),e(E,Pg),e(Pg,wU),e(wU,gze),e(Pg,hze),e(Pg,JB),e(JB,pze),e(Pg,_ze),e(E,uze),e(E,$g),e($g,AU),e(AU,bze),e($g,vze),e($g,YB),e(YB,Tze),e($g,Fze),e(E,Cze),e(E,Zn),e(Zn,LU),e(LU,Mze),e(Zn,Eze),e(Zn,KB),e(KB,yze),e(Zn,wze),e(Zn,ZB),e(ZB,Aze),e(Zn,Lze),e(E,Bze),e(E,Ig),e(Ig,BU),e(BU,xze),e(Ig,kze),e(Ig,ex),e(ex,Rze),e(Ig,Sze),e(E,Pze),e(E,es),e(es,xU),e(xU,$ze),e(es,Ize),e(es,ox),e(ox,jze),e(es,Dze),e(es,rx),e(rx,Nze),e(es,qze),e(E,Oze),e(E,os),e(os,kU),e(kU,Gze),e(os,Xze),e(os,tx),e(tx,Vze),e(os,zze),e(os,ax),e(ax,Wze),e(os,Qze),e(E,Hze),e(E,rs),e(rs,RU),e(RU,Uze),e(rs,Jze),e(rs,nx),e(nx,Yze),e(rs,Kze),e(rs,SU),e(SU,Zze),e(rs,eWe),e(E,oWe),e(E,jg),e(jg,PU),e(PU,rWe),e(jg,tWe),e(jg,sx),e(sx,aWe),e(jg,nWe),e(E,sWe),e(E,ts),e(ts,$U),e($U,lWe),e(ts,iWe),e(ts,lx),e(lx,dWe),e(ts,cWe),e(ts,ix),e(ix,fWe),e(ts,mWe),e(E,gWe),e(E,Dg),e(Dg,IU),e(IU,hWe),e(Dg,pWe),e(Dg,dx),e(dx,_We),e(Dg,uWe),e(E,bWe),e(E,as),e(as,jU),e(jU,vWe),e(as,TWe),e(as,cx),e(cx,FWe),e(as,CWe),e(as,fx),e(fx,MWe),e(as,EWe),e(E,yWe),e(E,ns),e(ns,DU),e(DU,wWe),e(ns,AWe),e(ns,mx),e(mx,LWe),e(ns,BWe),e(ns,gx),e(gx,xWe),e(ns,kWe),e(E,RWe),e(E,ss),e(ss,NU),e(NU,SWe),e(ss,PWe),e(ss,hx),e(hx,$We),e(ss,IWe),e(ss,px),e(px,jWe),e(ss,DWe),e(E,NWe),e(E,Ng),e(Ng,qU),e(qU,qWe),e(Ng,OWe),e(Ng,_x),e(_x,GWe),e(Ng,XWe),e(E,VWe),e(E,ls),e(ls,OU),e(OU,zWe),e(ls,WWe),e(ls,ux),e(ux,QWe),e(ls,HWe),e(ls,bx),e(bx,UWe),e(ls,JWe),e(E,YWe),e(E,qg),e(qg,GU),e(GU,KWe),e(qg,ZWe),e(qg,vx),e(vx,eQe),e(qg,oQe),e(E,rQe),e(E,is),e(is,XU),e(XU,tQe),e(is,aQe),e(is,Tx),e(Tx,nQe),e(is,sQe),e(is,Fx),e(Fx,lQe),e(is,iQe),e(E,dQe),e(E,ds),e(ds,VU),e(VU,cQe),e(ds,fQe),e(ds,Cx),e(Cx,mQe),e(ds,gQe),e(ds,Mx),e(Mx,hQe),e(ds,pQe),e(E,_Qe),e(E,cs),e(cs,zU),e(zU,uQe),e(cs,bQe),e(cs,Ex),e(Ex,vQe),e(cs,TQe),e(cs,yx),e(yx,FQe),e(cs,CQe),e(E,MQe),e(E,fs),e(fs,WU),e(WU,EQe),e(fs,yQe),e(fs,wx),e(wx,wQe),e(fs,AQe),e(fs,Ax),e(Ax,LQe),e(fs,BQe),e(E,xQe),e(E,Og),e(Og,QU),e(QU,kQe),e(Og,RQe),e(Og,Lx),e(Lx,SQe),e(Og,PQe),e(E,$Qe),e(E,ms),e(ms,HU),e(HU,IQe),e(ms,jQe),e(ms,Bx),e(Bx,DQe),e(ms,NQe),e(ms,xx),e(xx,qQe),e(ms,OQe),e(E,GQe),e(E,gs),e(gs,UU),e(UU,XQe),e(gs,VQe),e(gs,kx),e(kx,zQe),e(gs,WQe),e(gs,Rx),e(Rx,QQe),e(gs,HQe),e(E,UQe),e(E,hs),e(hs,JU),e(JU,JQe),e(hs,YQe),e(hs,Sx),e(Sx,KQe),e(hs,ZQe),e(hs,Px),e(Px,eHe),e(hs,oHe),e(E,rHe),e(E,ps),e(ps,YU),e(YU,tHe),e(ps,aHe),e(ps,$x),e($x,nHe),e(ps,sHe),e(ps,Ix),e(Ix,lHe),e(ps,iHe),e(E,dHe),e(E,_s),e(_s,KU),e(KU,cHe),e(_s,fHe),e(_s,jx),e(jx,mHe),e(_s,gHe),e(_s,Dx),e(Dx,hHe),e(_s,pHe),e(E,_He),e(E,us),e(us,ZU),e(ZU,uHe),e(us,bHe),e(us,Nx),e(Nx,vHe),e(us,THe),e(us,qx),e(qx,FHe),e(us,CHe),e(E,MHe),e(E,Gg),e(Gg,eJ),e(eJ,EHe),e(Gg,yHe),e(Gg,Ox),e(Ox,wHe),e(Gg,AHe),e(E,LHe),e(E,bs),e(bs,oJ),e(oJ,BHe),e(bs,xHe),e(bs,Gx),e(Gx,kHe),e(bs,RHe),e(bs,Xx),e(Xx,SHe),e(bs,PHe),e(E,$He),e(E,Xg),e(Xg,rJ),e(rJ,IHe),e(Xg,jHe),e(Xg,Vx),e(Vx,DHe),e(Xg,NHe),e(E,qHe),e(E,Vg),e(Vg,tJ),e(tJ,OHe),e(Vg,GHe),e(Vg,zx),e(zx,XHe),e(Vg,VHe),e(E,zHe),e(E,vs),e(vs,aJ),e(aJ,WHe),e(vs,QHe),e(vs,Wx),e(Wx,HHe),e(vs,UHe),e(vs,Qx),e(Qx,JHe),e(vs,YHe),e(E,KHe),e(E,Ts),e(Ts,nJ),e(nJ,ZHe),e(Ts,eUe),e(Ts,Hx),e(Hx,oUe),e(Ts,rUe),e(Ts,Ux),e(Ux,tUe),e(Ts,aUe),e(E,nUe),e(E,zg),e(zg,sJ),e(sJ,sUe),e(zg,lUe),e(zg,Jx),e(Jx,iUe),e(zg,dUe),e(E,cUe),e(E,Fs),e(Fs,lJ),e(lJ,fUe),e(Fs,mUe),e(Fs,Yx),e(Yx,gUe),e(Fs,hUe),e(Fs,Kx),e(Kx,pUe),e(Fs,_Ue),e(E,uUe),e(E,Cs),e(Cs,iJ),e(iJ,bUe),e(Cs,vUe),e(Cs,Zx),e(Zx,TUe),e(Cs,FUe),e(Cs,ek),e(ek,CUe),e(Cs,MUe),e(E,EUe),e(E,Ms),e(Ms,dJ),e(dJ,yUe),e(Ms,wUe),e(Ms,ok),e(ok,AUe),e(Ms,LUe),e(Ms,rk),e(rk,BUe),e(Ms,xUe),e(E,kUe),e(E,Es),e(Es,cJ),e(cJ,RUe),e(Es,SUe),e(Es,tk),e(tk,PUe),e(Es,$Ue),e(Es,ak),e(ak,IUe),e(Es,jUe),e(E,DUe),e(E,ys),e(ys,fJ),e(fJ,NUe),e(ys,qUe),e(ys,nk),e(nk,OUe),e(ys,GUe),e(ys,sk),e(sk,XUe),e(ys,VUe),e(E,zUe),e(E,Wg),e(Wg,mJ),e(mJ,WUe),e(Wg,QUe),e(Wg,lk),e(lk,HUe),e(Wg,UUe),e(E,JUe),e(E,Qg),e(Qg,gJ),e(gJ,YUe),e(Qg,KUe),e(Qg,ik),e(ik,ZUe),e(Qg,eJe),e(E,oJe),e(E,Hg),e(Hg,hJ),e(hJ,rJe),e(Hg,tJe),e(Hg,dk),e(dk,aJe),e(Hg,nJe),e(E,sJe),e(E,Ug),e(Ug,pJ),e(pJ,lJe),e(Ug,iJe),e(Ug,ck),e(ck,dJe),e(Ug,cJe),e(E,fJe),e(E,ws),e(ws,_J),e(_J,mJe),e(ws,gJe),e(ws,fk),e(fk,hJe),e(ws,pJe),e(ws,mk),e(mk,_Je),e(ws,uJe),e(E,bJe),e(E,Jg),e(Jg,uJ),e(uJ,vJe),e(Jg,TJe),e(Jg,gk),e(gk,FJe),e(Jg,CJe),e(E,MJe),e(E,As),e(As,bJ),e(bJ,EJe),e(As,yJe),e(As,hk),e(hk,wJe),e(As,AJe),e(As,pk),e(pk,LJe),e(As,BJe),e(E,xJe),e(E,Ls),e(Ls,vJ),e(vJ,kJe),e(Ls,RJe),e(Ls,_k),e(_k,SJe),e(Ls,PJe),e(Ls,uk),e(uk,$Je),e(Ls,IJe),e(E,jJe),e(E,Bs),e(Bs,TJ),e(TJ,DJe),e(Bs,NJe),e(Bs,bk),e(bk,qJe),e(Bs,OJe),e(Bs,vk),e(vk,GJe),e(Bs,XJe),e(E,VJe),e(E,xs),e(xs,FJ),e(FJ,zJe),e(xs,WJe),e(xs,Tk),e(Tk,QJe),e(xs,HJe),e(xs,Fk),e(Fk,UJe),e(xs,JJe),e(E,YJe),e(E,ks),e(ks,CJ),e(CJ,KJe),e(ks,ZJe),e(ks,Ck),e(Ck,eYe),e(ks,oYe),e(ks,Mk),e(Mk,rYe),e(ks,tYe),e(E,aYe),e(E,Rs),e(Rs,MJ),e(MJ,nYe),e(Rs,sYe),e(Rs,Ek),e(Ek,lYe),e(Rs,iYe),e(Rs,yk),e(yk,dYe),e(Rs,cYe),e(E,fYe),e(E,Yg),e(Yg,EJ),e(EJ,mYe),e(Yg,gYe),e(Yg,wk),e(wk,hYe),e(Yg,pYe),e(E,_Ye),e(E,Kg),e(Kg,yJ),e(yJ,uYe),e(Kg,bYe),e(Kg,Ak),e(Ak,vYe),e(Kg,TYe),e(E,FYe),e(E,Ss),e(Ss,wJ),e(wJ,CYe),e(Ss,MYe),e(Ss,Lk),e(Lk,EYe),e(Ss,yYe),e(Ss,Bk),e(Bk,wYe),e(Ss,AYe),e(E,LYe),e(E,Ps),e(Ps,AJ),e(AJ,BYe),e(Ps,xYe),e(Ps,xk),e(xk,kYe),e(Ps,RYe),e(Ps,kk),e(kk,SYe),e(Ps,PYe),e(E,$Ye),e(E,$s),e($s,LJ),e(LJ,IYe),e($s,jYe),e($s,Rk),e(Rk,DYe),e($s,NYe),e($s,Sk),e(Sk,qYe),e($s,OYe),e(E,GYe),e(E,Zg),e(Zg,BJ),e(BJ,XYe),e(Zg,VYe),e(Zg,Pk),e(Pk,zYe),e(Zg,WYe),e(E,QYe),e(E,eh),e(eh,xJ),e(xJ,HYe),e(eh,UYe),e(eh,$k),e($k,JYe),e(eh,YYe),e(E,KYe),e(E,oh),e(oh,kJ),e(kJ,ZYe),e(oh,eKe),e(oh,Ik),e(Ik,oKe),e(oh,rKe),e(E,tKe),e(E,rh),e(rh,RJ),e(RJ,aKe),e(rh,nKe),e(rh,jk),e(jk,sKe),e(rh,lKe),e(E,iKe),e(E,Is),e(Is,SJ),e(SJ,dKe),e(Is,cKe),e(Is,Dk),e(Dk,fKe),e(Is,mKe),e(Is,Nk),e(Nk,gKe),e(Is,hKe),e(E,pKe),e(E,th),e(th,PJ),e(PJ,_Ke),e(th,uKe),e(th,qk),e(qk,bKe),e(th,vKe),e(E,TKe),e(E,ah),e(ah,$J),e($J,FKe),e(ah,CKe),e(ah,Ok),e(Ok,MKe),e(ah,EKe),e(E,yKe),e(E,js),e(js,IJ),e(IJ,wKe),e(js,AKe),e(js,Gk),e(Gk,LKe),e(js,BKe),e(js,Xk),e(Xk,xKe),e(js,kKe),e(E,RKe),e(E,Ds),e(Ds,jJ),e(jJ,SKe),e(Ds,PKe),e(Ds,Vk),e(Vk,$Ke),e(Ds,IKe),e(Ds,zk),e(zk,jKe),e(Ds,DKe),e(go,NKe),e(go,DJ),e(DJ,qKe),e(go,OKe),g(dE,go,null),e(Qo,GKe),e(Qo,nh),g(cE,nh,null),e(nh,XKe),e(nh,NJ),e(NJ,VKe),b(d,lxe,u),b(d,Qi,u),e(Qi,sh),e(sh,qJ),g(fE,qJ,null),e(Qi,zKe),e(Qi,OJ),e(OJ,WKe),b(d,ixe,u),b(d,Ho,u),g(mE,Ho,null),e(Ho,QKe),e(Ho,gE),e(gE,HKe),e(gE,Wk),e(Wk,UKe),e(gE,JKe),e(Ho,YKe),e(Ho,hE),e(hE,KKe),e(hE,GJ),e(GJ,ZKe),e(hE,eZe),e(Ho,oZe),e(Ho,$e),g(pE,$e,null),e($e,rZe),e($e,XJ),e(XJ,tZe),e($e,aZe),e($e,Ga),e(Ga,nZe),e(Ga,VJ),e(VJ,sZe),e(Ga,lZe),e(Ga,zJ),e(zJ,iZe),e(Ga,dZe),e(Ga,WJ),e(WJ,cZe),e(Ga,fZe),e($e,mZe),e($e,ae),e(ae,lh),e(lh,QJ),e(QJ,gZe),e(lh,hZe),e(lh,Qk),e(Qk,pZe),e(lh,_Ze),e(ae,uZe),e(ae,ih),e(ih,HJ),e(HJ,bZe),e(ih,vZe),e(ih,Hk),e(Hk,TZe),e(ih,FZe),e(ae,CZe),e(ae,dh),e(dh,UJ),e(UJ,MZe),e(dh,EZe),e(dh,Uk),e(Uk,yZe),e(dh,wZe),e(ae,AZe),e(ae,ch),e(ch,JJ),e(JJ,LZe),e(ch,BZe),e(ch,Jk),e(Jk,xZe),e(ch,kZe),e(ae,RZe),e(ae,fh),e(fh,YJ),e(YJ,SZe),e(fh,PZe),e(fh,Yk),e(Yk,$Ze),e(fh,IZe),e(ae,jZe),e(ae,mh),e(mh,KJ),e(KJ,DZe),e(mh,NZe),e(mh,Kk),e(Kk,qZe),e(mh,OZe),e(ae,GZe),e(ae,gh),e(gh,ZJ),e(ZJ,XZe),e(gh,VZe),e(gh,Zk),e(Zk,zZe),e(gh,WZe),e(ae,QZe),e(ae,hh),e(hh,eY),e(eY,HZe),e(hh,UZe),e(hh,eR),e(eR,JZe),e(hh,YZe),e(ae,KZe),e(ae,ph),e(ph,oY),e(oY,ZZe),e(ph,eeo),e(ph,oR),e(oR,oeo),e(ph,reo),e(ae,teo),e(ae,_h),e(_h,rY),e(rY,aeo),e(_h,neo),e(_h,rR),e(rR,seo),e(_h,leo),e(ae,ieo),e(ae,uh),e(uh,tY),e(tY,deo),e(uh,ceo),e(uh,tR),e(tR,feo),e(uh,meo),e(ae,geo),e(ae,bh),e(bh,aY),e(aY,heo),e(bh,peo),e(bh,aR),e(aR,_eo),e(bh,ueo),e(ae,beo),e(ae,vh),e(vh,nY),e(nY,veo),e(vh,Teo),e(vh,nR),e(nR,Feo),e(vh,Ceo),e(ae,Meo),e(ae,Th),e(Th,sY),e(sY,Eeo),e(Th,yeo),e(Th,sR),e(sR,weo),e(Th,Aeo),e(ae,Leo),e(ae,Fh),e(Fh,lY),e(lY,Beo),e(Fh,xeo),e(Fh,lR),e(lR,keo),e(Fh,Reo),e(ae,Seo),e(ae,Ch),e(Ch,iY),e(iY,Peo),e(Ch,$eo),e(Ch,iR),e(iR,Ieo),e(Ch,jeo),e($e,Deo),g(Mh,$e,null),e($e,Neo),e($e,dY),e(dY,qeo),e($e,Oeo),g(_E,$e,null),e(Ho,Geo),e(Ho,Eh),g(uE,Eh,null),e(Eh,Xeo),e(Eh,cY),e(cY,Veo),b(d,dxe,u),b(d,Hi,u),e(Hi,yh),e(yh,fY),g(bE,fY,null),e(Hi,zeo),e(Hi,mY),e(mY,Weo),b(d,cxe,u),b(d,Uo,u),g(vE,Uo,null),e(Uo,Qeo),e(Uo,TE),e(TE,Heo),e(TE,dR),e(dR,Ueo),e(TE,Jeo),e(Uo,Yeo),e(Uo,FE),e(FE,Keo),e(FE,gY),e(gY,Zeo),e(FE,eoo),e(Uo,ooo),e(Uo,Ie),g(CE,Ie,null),e(Ie,roo),e(Ie,hY),e(hY,too),e(Ie,aoo),e(Ie,Ui),e(Ui,noo),e(Ui,pY),e(pY,soo),e(Ui,loo),e(Ui,_Y),e(_Y,ioo),e(Ui,doo),e(Ie,coo),e(Ie,Be),e(Be,wh),e(wh,uY),e(uY,foo),e(wh,moo),e(wh,cR),e(cR,goo),e(wh,hoo),e(Be,poo),e(Be,Ah),e(Ah,bY),e(bY,_oo),e(Ah,uoo),e(Ah,fR),e(fR,boo),e(Ah,voo),e(Be,Too),e(Be,Lh),e(Lh,vY),e(vY,Foo),e(Lh,Coo),e(Lh,mR),e(mR,Moo),e(Lh,Eoo),e(Be,yoo),e(Be,Bh),e(Bh,TY),e(TY,woo),e(Bh,Aoo),e(Bh,gR),e(gR,Loo),e(Bh,Boo),e(Be,xoo),e(Be,xh),e(xh,FY),e(FY,koo),e(xh,Roo),e(xh,hR),e(hR,Soo),e(xh,Poo),e(Be,$oo),e(Be,kh),e(kh,CY),e(CY,Ioo),e(kh,joo),e(kh,pR),e(pR,Doo),e(kh,Noo),e(Be,qoo),e(Be,Rh),e(Rh,MY),e(MY,Ooo),e(Rh,Goo),e(Rh,_R),e(_R,Xoo),e(Rh,Voo),e(Be,zoo),e(Be,Sh),e(Sh,EY),e(EY,Woo),e(Sh,Qoo),e(Sh,uR),e(uR,Hoo),e(Sh,Uoo),e(Ie,Joo),g(Ph,Ie,null),e(Ie,Yoo),e(Ie,yY),e(yY,Koo),e(Ie,Zoo),g(ME,Ie,null),e(Uo,ero),e(Uo,$h),g(EE,$h,null),e($h,oro),e($h,wY),e(wY,rro),b(d,fxe,u),b(d,Ji,u),e(Ji,Ih),e(Ih,AY),g(yE,AY,null),e(Ji,tro),e(Ji,LY),e(LY,aro),b(d,mxe,u),b(d,Jo,u),g(wE,Jo,null),e(Jo,nro),e(Jo,Yi),e(Yi,sro),e(Yi,BY),e(BY,lro),e(Yi,iro),e(Yi,xY),e(xY,dro),e(Yi,cro),e(Jo,fro),e(Jo,AE),e(AE,mro),e(AE,kY),e(kY,gro),e(AE,hro),e(Jo,pro),e(Jo,Vr),g(LE,Vr,null),e(Vr,_ro),e(Vr,RY),e(RY,uro),e(Vr,bro),e(Vr,Ki),e(Ki,vro),e(Ki,SY),e(SY,Tro),e(Ki,Fro),e(Ki,PY),e(PY,Cro),e(Ki,Mro),e(Vr,Ero),e(Vr,$Y),e($Y,yro),e(Vr,wro),g(BE,Vr,null),e(Jo,Aro),e(Jo,je),g(xE,je,null),e(je,Lro),e(je,IY),e(IY,Bro),e(je,xro),e(je,Xa),e(Xa,kro),e(Xa,jY),e(jY,Rro),e(Xa,Sro),e(Xa,DY),e(DY,Pro),e(Xa,$ro),e(Xa,NY),e(NY,Iro),e(Xa,jro),e(je,Dro),e(je,F),e(F,jh),e(jh,qY),e(qY,Nro),e(jh,qro),e(jh,bR),e(bR,Oro),e(jh,Gro),e(F,Xro),e(F,Dh),e(Dh,OY),e(OY,Vro),e(Dh,zro),e(Dh,vR),e(vR,Wro),e(Dh,Qro),e(F,Hro),e(F,Nh),e(Nh,GY),e(GY,Uro),e(Nh,Jro),e(Nh,TR),e(TR,Yro),e(Nh,Kro),e(F,Zro),e(F,qh),e(qh,XY),e(XY,eto),e(qh,oto),e(qh,FR),e(FR,rto),e(qh,tto),e(F,ato),e(F,Oh),e(Oh,VY),e(VY,nto),e(Oh,sto),e(Oh,CR),e(CR,lto),e(Oh,ito),e(F,dto),e(F,Gh),e(Gh,zY),e(zY,cto),e(Gh,fto),e(Gh,MR),e(MR,mto),e(Gh,gto),e(F,hto),e(F,Xh),e(Xh,WY),e(WY,pto),e(Xh,_to),e(Xh,ER),e(ER,uto),e(Xh,bto),e(F,vto),e(F,Vh),e(Vh,QY),e(QY,Tto),e(Vh,Fto),e(Vh,yR),e(yR,Cto),e(Vh,Mto),e(F,Eto),e(F,zh),e(zh,HY),e(HY,yto),e(zh,wto),e(zh,wR),e(wR,Ato),e(zh,Lto),e(F,Bto),e(F,Wh),e(Wh,UY),e(UY,xto),e(Wh,kto),e(Wh,AR),e(AR,Rto),e(Wh,Sto),e(F,Pto),e(F,Qh),e(Qh,JY),e(JY,$to),e(Qh,Ito),e(Qh,LR),e(LR,jto),e(Qh,Dto),e(F,Nto),e(F,Hh),e(Hh,YY),e(YY,qto),e(Hh,Oto),e(Hh,BR),e(BR,Gto),e(Hh,Xto),e(F,Vto),e(F,Uh),e(Uh,KY),e(KY,zto),e(Uh,Wto),e(Uh,xR),e(xR,Qto),e(Uh,Hto),e(F,Uto),e(F,Jh),e(Jh,ZY),e(ZY,Jto),e(Jh,Yto),e(Jh,kR),e(kR,Kto),e(Jh,Zto),e(F,eao),e(F,Yh),e(Yh,eK),e(eK,oao),e(Yh,rao),e(Yh,RR),e(RR,tao),e(Yh,aao),e(F,nao),e(F,Kh),e(Kh,oK),e(oK,sao),e(Kh,lao),e(Kh,SR),e(SR,iao),e(Kh,dao),e(F,cao),e(F,Zh),e(Zh,rK),e(rK,fao),e(Zh,mao),e(Zh,PR),e(PR,gao),e(Zh,hao),e(F,pao),e(F,ep),e(ep,tK),e(tK,_ao),e(ep,uao),e(ep,$R),e($R,bao),e(ep,vao),e(F,Tao),e(F,op),e(op,aK),e(aK,Fao),e(op,Cao),e(op,IR),e(IR,Mao),e(op,Eao),e(F,yao),e(F,rp),e(rp,nK),e(nK,wao),e(rp,Aao),e(rp,jR),e(jR,Lao),e(rp,Bao),e(F,xao),e(F,tp),e(tp,sK),e(sK,kao),e(tp,Rao),e(tp,DR),e(DR,Sao),e(tp,Pao),e(F,$ao),e(F,ap),e(ap,lK),e(lK,Iao),e(ap,jao),e(ap,NR),e(NR,Dao),e(ap,Nao),e(F,qao),e(F,np),e(np,iK),e(iK,Oao),e(np,Gao),e(np,qR),e(qR,Xao),e(np,Vao),e(F,zao),e(F,sp),e(sp,dK),e(dK,Wao),e(sp,Qao),e(sp,OR),e(OR,Hao),e(sp,Uao),e(F,Jao),e(F,lp),e(lp,cK),e(cK,Yao),e(lp,Kao),e(lp,GR),e(GR,Zao),e(lp,eno),e(F,ono),e(F,ip),e(ip,fK),e(fK,rno),e(ip,tno),e(ip,XR),e(XR,ano),e(ip,nno),e(F,sno),e(F,dp),e(dp,mK),e(mK,lno),e(dp,ino),e(dp,VR),e(VR,dno),e(dp,cno),e(F,fno),e(F,Ns),e(Ns,gK),e(gK,mno),e(Ns,gno),e(Ns,zR),e(zR,hno),e(Ns,pno),e(Ns,WR),e(WR,_no),e(Ns,uno),e(F,bno),e(F,cp),e(cp,hK),e(hK,vno),e(cp,Tno),e(cp,QR),e(QR,Fno),e(cp,Cno),e(F,Mno),e(F,fp),e(fp,pK),e(pK,Eno),e(fp,yno),e(fp,HR),e(HR,wno),e(fp,Ano),e(F,Lno),e(F,mp),e(mp,_K),e(_K,Bno),e(mp,xno),e(mp,UR),e(UR,kno),e(mp,Rno),e(F,Sno),e(F,gp),e(gp,uK),e(uK,Pno),e(gp,$no),e(gp,JR),e(JR,Ino),e(gp,jno),e(F,Dno),e(F,hp),e(hp,bK),e(bK,Nno),e(hp,qno),e(hp,YR),e(YR,Ono),e(hp,Gno),e(F,Xno),e(F,pp),e(pp,vK),e(vK,Vno),e(pp,zno),e(pp,KR),e(KR,Wno),e(pp,Qno),e(F,Hno),e(F,_p),e(_p,TK),e(TK,Uno),e(_p,Jno),e(_p,ZR),e(ZR,Yno),e(_p,Kno),e(F,Zno),e(F,up),e(up,FK),e(FK,eso),e(up,oso),e(up,eS),e(eS,rso),e(up,tso),e(F,aso),e(F,bp),e(bp,CK),e(CK,nso),e(bp,sso),e(bp,oS),e(oS,lso),e(bp,iso),e(F,dso),e(F,vp),e(vp,MK),e(MK,cso),e(vp,fso),e(vp,rS),e(rS,mso),e(vp,gso),e(F,hso),e(F,Tp),e(Tp,EK),e(EK,pso),e(Tp,_so),e(Tp,tS),e(tS,uso),e(Tp,bso),e(F,vso),e(F,Fp),e(Fp,yK),e(yK,Tso),e(Fp,Fso),e(Fp,aS),e(aS,Cso),e(Fp,Mso),e(F,Eso),e(F,Cp),e(Cp,wK),e(wK,yso),e(Cp,wso),e(Cp,nS),e(nS,Aso),e(Cp,Lso),e(F,Bso),e(F,Mp),e(Mp,AK),e(AK,xso),e(Mp,kso),e(Mp,sS),e(sS,Rso),e(Mp,Sso),e(F,Pso),e(F,Ep),e(Ep,LK),e(LK,$so),e(Ep,Iso),e(Ep,lS),e(lS,jso),e(Ep,Dso),e(F,Nso),e(F,yp),e(yp,BK),e(BK,qso),e(yp,Oso),e(yp,iS),e(iS,Gso),e(yp,Xso),e(F,Vso),e(F,wp),e(wp,xK),e(xK,zso),e(wp,Wso),e(wp,dS),e(dS,Qso),e(wp,Hso),e(F,Uso),e(F,Ap),e(Ap,kK),e(kK,Jso),e(Ap,Yso),e(Ap,cS),e(cS,Kso),e(Ap,Zso),e(F,elo),e(F,Lp),e(Lp,RK),e(RK,olo),e(Lp,rlo),e(Lp,fS),e(fS,tlo),e(Lp,alo),e(F,nlo),e(F,Bp),e(Bp,SK),e(SK,slo),e(Bp,llo),e(Bp,mS),e(mS,ilo),e(Bp,dlo),e(F,clo),e(F,xp),e(xp,PK),e(PK,flo),e(xp,mlo),e(xp,gS),e(gS,glo),e(xp,hlo),e(F,plo),e(F,kp),e(kp,$K),e($K,_lo),e(kp,ulo),e(kp,hS),e(hS,blo),e(kp,vlo),e(F,Tlo),e(F,Rp),e(Rp,IK),e(IK,Flo),e(Rp,Clo),e(Rp,pS),e(pS,Mlo),e(Rp,Elo),e(F,ylo),e(F,Sp),e(Sp,jK),e(jK,wlo),e(Sp,Alo),e(Sp,_S),e(_S,Llo),e(Sp,Blo),e(F,xlo),e(F,Pp),e(Pp,DK),e(DK,klo),e(Pp,Rlo),e(Pp,uS),e(uS,Slo),e(Pp,Plo),e(F,$lo),e(F,$p),e($p,NK),e(NK,Ilo),e($p,jlo),e($p,bS),e(bS,Dlo),e($p,Nlo),e(F,qlo),e(F,Ip),e(Ip,qK),e(qK,Olo),e(Ip,Glo),e(Ip,vS),e(vS,Xlo),e(Ip,Vlo),e(F,zlo),e(F,jp),e(jp,OK),e(OK,Wlo),e(jp,Qlo),e(jp,TS),e(TS,Hlo),e(jp,Ulo),e(F,Jlo),e(F,Dp),e(Dp,GK),e(GK,Ylo),e(Dp,Klo),e(Dp,FS),e(FS,Zlo),e(Dp,eio),e(F,oio),e(F,Np),e(Np,XK),e(XK,rio),e(Np,tio),e(Np,CS),e(CS,aio),e(Np,nio),e(F,sio),e(F,qp),e(qp,VK),e(VK,lio),e(qp,iio),e(qp,MS),e(MS,dio),e(qp,cio),e(F,fio),e(F,Op),e(Op,zK),e(zK,mio),e(Op,gio),e(Op,ES),e(ES,hio),e(Op,pio),e(F,_io),e(F,Gp),e(Gp,WK),e(WK,uio),e(Gp,bio),e(Gp,yS),e(yS,vio),e(Gp,Tio),e(F,Fio),e(F,Xp),e(Xp,QK),e(QK,Cio),e(Xp,Mio),e(Xp,wS),e(wS,Eio),e(Xp,yio),e(F,wio),e(F,Vp),e(Vp,HK),e(HK,Aio),e(Vp,Lio),e(Vp,AS),e(AS,Bio),e(Vp,xio),e(F,kio),e(F,zp),e(zp,UK),e(UK,Rio),e(zp,Sio),e(zp,LS),e(LS,Pio),e(zp,$io),e(F,Iio),e(F,Wp),e(Wp,JK),e(JK,jio),e(Wp,Dio),e(Wp,BS),e(BS,Nio),e(Wp,qio),e(F,Oio),e(F,Qp),e(Qp,YK),e(YK,Gio),e(Qp,Xio),e(Qp,xS),e(xS,Vio),e(Qp,zio),e(F,Wio),e(F,Hp),e(Hp,KK),e(KK,Qio),e(Hp,Hio),e(Hp,kS),e(kS,Uio),e(Hp,Jio),e(F,Yio),e(F,Up),e(Up,ZK),e(ZK,Kio),e(Up,Zio),e(Up,RS),e(RS,edo),e(Up,odo),e(F,rdo),e(F,Jp),e(Jp,eZ),e(eZ,tdo),e(Jp,ado),e(Jp,SS),e(SS,ndo),e(Jp,sdo),e(F,ldo),e(F,Yp),e(Yp,oZ),e(oZ,ido),e(Yp,ddo),e(Yp,PS),e(PS,cdo),e(Yp,fdo),e(F,mdo),e(F,Kp),e(Kp,rZ),e(rZ,gdo),e(Kp,hdo),e(Kp,$S),e($S,pdo),e(Kp,_do),e(F,udo),e(F,Zp),e(Zp,tZ),e(tZ,bdo),e(Zp,vdo),e(Zp,IS),e(IS,Tdo),e(Zp,Fdo),e(F,Cdo),e(F,e_),e(e_,aZ),e(aZ,Mdo),e(e_,Edo),e(e_,jS),e(jS,ydo),e(e_,wdo),e(F,Ado),e(F,o_),e(o_,nZ),e(nZ,Ldo),e(o_,Bdo),e(o_,DS),e(DS,xdo),e(o_,kdo),e(F,Rdo),e(F,r_),e(r_,sZ),e(sZ,Sdo),e(r_,Pdo),e(r_,NS),e(NS,$do),e(r_,Ido),e(F,jdo),e(F,t_),e(t_,lZ),e(lZ,Ddo),e(t_,Ndo),e(t_,qS),e(qS,qdo),e(t_,Odo),e(F,Gdo),e(F,a_),e(a_,iZ),e(iZ,Xdo),e(a_,Vdo),e(a_,OS),e(OS,zdo),e(a_,Wdo),e(F,Qdo),e(F,n_),e(n_,dZ),e(dZ,Hdo),e(n_,Udo),e(n_,GS),e(GS,Jdo),e(n_,Ydo),e(F,Kdo),e(F,s_),e(s_,cZ),e(cZ,Zdo),e(s_,eco),e(s_,XS),e(XS,oco),e(s_,rco),e(F,tco),e(F,l_),e(l_,fZ),e(fZ,aco),e(l_,nco),e(l_,VS),e(VS,sco),e(l_,lco),e(F,ico),e(F,i_),e(i_,mZ),e(mZ,dco),e(i_,cco),e(i_,zS),e(zS,fco),e(i_,mco),e(F,gco),e(F,d_),e(d_,gZ),e(gZ,hco),e(d_,pco),e(d_,WS),e(WS,_co),e(d_,uco),e(F,bco),e(F,c_),e(c_,hZ),e(hZ,vco),e(c_,Tco),e(c_,QS),e(QS,Fco),e(c_,Cco),e(F,Mco),e(F,f_),e(f_,pZ),e(pZ,Eco),e(f_,yco),e(f_,HS),e(HS,wco),e(f_,Aco),e(F,Lco),e(F,m_),e(m_,_Z),e(_Z,Bco),e(m_,xco),e(m_,US),e(US,kco),e(m_,Rco),e(F,Sco),e(F,g_),e(g_,uZ),e(uZ,Pco),e(g_,$co),e(g_,JS),e(JS,Ico),e(g_,jco),e(F,Dco),e(F,h_),e(h_,bZ),e(bZ,Nco),e(h_,qco),e(h_,YS),e(YS,Oco),e(h_,Gco),e(je,Xco),e(je,p_),e(p_,Vco),e(p_,vZ),e(vZ,zco),e(p_,Wco),e(p_,TZ),e(TZ,Qco),e(je,Hco),e(je,FZ),e(FZ,Uco),e(je,Jco),g(kE,je,null),b(d,gxe,u),b(d,Zi,u),e(Zi,__),e(__,CZ),g(RE,CZ,null),e(Zi,Yco),e(Zi,MZ),e(MZ,Kco),b(d,hxe,u),b(d,Yo,u),g(SE,Yo,null),e(Yo,Zco),e(Yo,ed),e(ed,efo),e(ed,EZ),e(EZ,ofo),e(ed,rfo),e(ed,yZ),e(yZ,tfo),e(ed,afo),e(Yo,nfo),e(Yo,PE),e(PE,sfo),e(PE,wZ),e(wZ,lfo),e(PE,ifo),e(Yo,dfo),e(Yo,zr),g($E,zr,null),e(zr,cfo),e(zr,AZ),e(AZ,ffo),e(zr,mfo),e(zr,od),e(od,gfo),e(od,LZ),e(LZ,hfo),e(od,pfo),e(od,BZ),e(BZ,_fo),e(od,ufo),e(zr,bfo),e(zr,xZ),e(xZ,vfo),e(zr,Tfo),g(IE,zr,null),e(Yo,Ffo),e(Yo,De),g(jE,De,null),e(De,Cfo),e(De,kZ),e(kZ,Mfo),e(De,Efo),e(De,Va),e(Va,yfo),e(Va,RZ),e(RZ,wfo),e(Va,Afo),e(Va,SZ),e(SZ,Lfo),e(Va,Bfo),e(Va,PZ),e(PZ,xfo),e(Va,kfo),e(De,Rfo),e(De,k),e(k,u_),e(u_,$Z),e($Z,Sfo),e(u_,Pfo),e(u_,KS),e(KS,$fo),e(u_,Ifo),e(k,jfo),e(k,b_),e(b_,IZ),e(IZ,Dfo),e(b_,Nfo),e(b_,ZS),e(ZS,qfo),e(b_,Ofo),e(k,Gfo),e(k,v_),e(v_,jZ),e(jZ,Xfo),e(v_,Vfo),e(v_,eP),e(eP,zfo),e(v_,Wfo),e(k,Qfo),e(k,T_),e(T_,DZ),e(DZ,Hfo),e(T_,Ufo),e(T_,oP),e(oP,Jfo),e(T_,Yfo),e(k,Kfo),e(k,F_),e(F_,NZ),e(NZ,Zfo),e(F_,emo),e(F_,rP),e(rP,omo),e(F_,rmo),e(k,tmo),e(k,C_),e(C_,qZ),e(qZ,amo),e(C_,nmo),e(C_,tP),e(tP,smo),e(C_,lmo),e(k,imo),e(k,M_),e(M_,OZ),e(OZ,dmo),e(M_,cmo),e(M_,aP),e(aP,fmo),e(M_,mmo),e(k,gmo),e(k,E_),e(E_,GZ),e(GZ,hmo),e(E_,pmo),e(E_,nP),e(nP,_mo),e(E_,umo),e(k,bmo),e(k,y_),e(y_,XZ),e(XZ,vmo),e(y_,Tmo),e(y_,sP),e(sP,Fmo),e(y_,Cmo),e(k,Mmo),e(k,w_),e(w_,VZ),e(VZ,Emo),e(w_,ymo),e(w_,lP),e(lP,wmo),e(w_,Amo),e(k,Lmo),e(k,A_),e(A_,zZ),e(zZ,Bmo),e(A_,xmo),e(A_,iP),e(iP,kmo),e(A_,Rmo),e(k,Smo),e(k,L_),e(L_,WZ),e(WZ,Pmo),e(L_,$mo),e(L_,dP),e(dP,Imo),e(L_,jmo),e(k,Dmo),e(k,B_),e(B_,QZ),e(QZ,Nmo),e(B_,qmo),e(B_,cP),e(cP,Omo),e(B_,Gmo),e(k,Xmo),e(k,x_),e(x_,HZ),e(HZ,Vmo),e(x_,zmo),e(x_,fP),e(fP,Wmo),e(x_,Qmo),e(k,Hmo),e(k,k_),e(k_,UZ),e(UZ,Umo),e(k_,Jmo),e(k_,mP),e(mP,Ymo),e(k_,Kmo),e(k,Zmo),e(k,R_),e(R_,JZ),e(JZ,ego),e(R_,ogo),e(R_,gP),e(gP,rgo),e(R_,tgo),e(k,ago),e(k,S_),e(S_,YZ),e(YZ,ngo),e(S_,sgo),e(S_,hP),e(hP,lgo),e(S_,igo),e(k,dgo),e(k,P_),e(P_,KZ),e(KZ,cgo),e(P_,fgo),e(P_,pP),e(pP,mgo),e(P_,ggo),e(k,hgo),e(k,$_),e($_,ZZ),e(ZZ,pgo),e($_,_go),e($_,_P),e(_P,ugo),e($_,bgo),e(k,vgo),e(k,I_),e(I_,eee),e(eee,Tgo),e(I_,Fgo),e(I_,uP),e(uP,Cgo),e(I_,Mgo),e(k,Ego),e(k,j_),e(j_,oee),e(oee,ygo),e(j_,wgo),e(j_,bP),e(bP,Ago),e(j_,Lgo),e(k,Bgo),e(k,D_),e(D_,ree),e(ree,xgo),e(D_,kgo),e(D_,vP),e(vP,Rgo),e(D_,Sgo),e(k,Pgo),e(k,N_),e(N_,tee),e(tee,$go),e(N_,Igo),e(N_,TP),e(TP,jgo),e(N_,Dgo),e(k,Ngo),e(k,q_),e(q_,aee),e(aee,qgo),e(q_,Ogo),e(q_,FP),e(FP,Ggo),e(q_,Xgo),e(k,Vgo),e(k,O_),e(O_,nee),e(nee,zgo),e(O_,Wgo),e(O_,CP),e(CP,Qgo),e(O_,Hgo),e(k,Ugo),e(k,G_),e(G_,see),e(see,Jgo),e(G_,Ygo),e(G_,MP),e(MP,Kgo),e(G_,Zgo),e(k,eho),e(k,X_),e(X_,lee),e(lee,oho),e(X_,rho),e(X_,EP),e(EP,tho),e(X_,aho),e(k,nho),e(k,V_),e(V_,iee),e(iee,sho),e(V_,lho),e(V_,yP),e(yP,iho),e(V_,dho),e(k,cho),e(k,z_),e(z_,dee),e(dee,fho),e(z_,mho),e(z_,wP),e(wP,gho),e(z_,hho),e(k,pho),e(k,W_),e(W_,cee),e(cee,_ho),e(W_,uho),e(W_,AP),e(AP,bho),e(W_,vho),e(k,Tho),e(k,Q_),e(Q_,fee),e(fee,Fho),e(Q_,Cho),e(Q_,LP),e(LP,Mho),e(Q_,Eho),e(k,yho),e(k,H_),e(H_,mee),e(mee,who),e(H_,Aho),e(H_,BP),e(BP,Lho),e(H_,Bho),e(k,xho),e(k,U_),e(U_,gee),e(gee,kho),e(U_,Rho),e(U_,xP),e(xP,Sho),e(U_,Pho),e(k,$ho),e(k,J_),e(J_,hee),e(hee,Iho),e(J_,jho),e(J_,kP),e(kP,Dho),e(J_,Nho),e(k,qho),e(k,Y_),e(Y_,pee),e(pee,Oho),e(Y_,Gho),e(Y_,RP),e(RP,Xho),e(Y_,Vho),e(k,zho),e(k,K_),e(K_,_ee),e(_ee,Who),e(K_,Qho),e(K_,SP),e(SP,Hho),e(K_,Uho),e(k,Jho),e(k,Z_),e(Z_,uee),e(uee,Yho),e(Z_,Kho),e(Z_,PP),e(PP,Zho),e(Z_,epo),e(k,opo),e(k,eu),e(eu,bee),e(bee,rpo),e(eu,tpo),e(eu,$P),e($P,apo),e(eu,npo),e(k,spo),e(k,ou),e(ou,vee),e(vee,lpo),e(ou,ipo),e(ou,IP),e(IP,dpo),e(ou,cpo),e(De,fpo),e(De,ru),e(ru,mpo),e(ru,Tee),e(Tee,gpo),e(ru,hpo),e(ru,Fee),e(Fee,ppo),e(De,_po),e(De,Cee),e(Cee,upo),e(De,bpo),g(DE,De,null),b(d,pxe,u),b(d,rd,u),e(rd,tu),e(tu,Mee),g(NE,Mee,null),e(rd,vpo),e(rd,Eee),e(Eee,Tpo),b(d,_xe,u),b(d,Ko,u),g(qE,Ko,null),e(Ko,Fpo),e(Ko,td),e(td,Cpo),e(td,yee),e(yee,Mpo),e(td,Epo),e(td,wee),e(wee,ypo),e(td,wpo),e(Ko,Apo),e(Ko,OE),e(OE,Lpo),e(OE,Aee),e(Aee,Bpo),e(OE,xpo),e(Ko,kpo),e(Ko,Wr),g(GE,Wr,null),e(Wr,Rpo),e(Wr,Lee),e(Lee,Spo),e(Wr,Ppo),e(Wr,ad),e(ad,$po),e(ad,Bee),e(Bee,Ipo),e(ad,jpo),e(ad,xee),e(xee,Dpo),e(ad,Npo),e(Wr,qpo),e(Wr,kee),e(kee,Opo),e(Wr,Gpo),g(XE,Wr,null),e(Ko,Xpo),e(Ko,Ne),g(VE,Ne,null),e(Ne,Vpo),e(Ne,Ree),e(Ree,zpo),e(Ne,Wpo),e(Ne,za),e(za,Qpo),e(za,See),e(See,Hpo),e(za,Upo),e(za,Pee),e(Pee,Jpo),e(za,Ypo),e(za,$ee),e($ee,Kpo),e(za,Zpo),e(Ne,e_o),e(Ne,$),e($,au),e(au,Iee),e(Iee,o_o),e(au,r_o),e(au,jP),e(jP,t_o),e(au,a_o),e($,n_o),e($,nu),e(nu,jee),e(jee,s_o),e(nu,l_o),e(nu,DP),e(DP,i_o),e(nu,d_o),e($,c_o),e($,su),e(su,Dee),e(Dee,f_o),e(su,m_o),e(su,NP),e(NP,g_o),e(su,h_o),e($,p_o),e($,lu),e(lu,Nee),e(Nee,__o),e(lu,u_o),e(lu,qP),e(qP,b_o),e(lu,v_o),e($,T_o),e($,iu),e(iu,qee),e(qee,F_o),e(iu,C_o),e(iu,OP),e(OP,M_o),e(iu,E_o),e($,y_o),e($,du),e(du,Oee),e(Oee,w_o),e(du,A_o),e(du,GP),e(GP,L_o),e(du,B_o),e($,x_o),e($,cu),e(cu,Gee),e(Gee,k_o),e(cu,R_o),e(cu,XP),e(XP,S_o),e(cu,P_o),e($,$_o),e($,fu),e(fu,Xee),e(Xee,I_o),e(fu,j_o),e(fu,VP),e(VP,D_o),e(fu,N_o),e($,q_o),e($,mu),e(mu,Vee),e(Vee,O_o),e(mu,G_o),e(mu,zP),e(zP,X_o),e(mu,V_o),e($,z_o),e($,gu),e(gu,zee),e(zee,W_o),e(gu,Q_o),e(gu,WP),e(WP,H_o),e(gu,U_o),e($,J_o),e($,hu),e(hu,Wee),e(Wee,Y_o),e(hu,K_o),e(hu,QP),e(QP,Z_o),e(hu,euo),e($,ouo),e($,pu),e(pu,Qee),e(Qee,ruo),e(pu,tuo),e(pu,HP),e(HP,auo),e(pu,nuo),e($,suo),e($,_u),e(_u,Hee),e(Hee,luo),e(_u,iuo),e(_u,UP),e(UP,duo),e(_u,cuo),e($,fuo),e($,uu),e(uu,Uee),e(Uee,muo),e(uu,guo),e(uu,JP),e(JP,huo),e(uu,puo),e($,_uo),e($,bu),e(bu,Jee),e(Jee,uuo),e(bu,buo),e(bu,YP),e(YP,vuo),e(bu,Tuo),e($,Fuo),e($,vu),e(vu,Yee),e(Yee,Cuo),e(vu,Muo),e(vu,KP),e(KP,Euo),e(vu,yuo),e($,wuo),e($,Tu),e(Tu,Kee),e(Kee,Auo),e(Tu,Luo),e(Tu,ZP),e(ZP,Buo),e(Tu,xuo),e($,kuo),e($,Fu),e(Fu,Zee),e(Zee,Ruo),e(Fu,Suo),e(Fu,e$),e(e$,Puo),e(Fu,$uo),e($,Iuo),e($,Cu),e(Cu,eoe),e(eoe,juo),e(Cu,Duo),e(Cu,o$),e(o$,Nuo),e(Cu,quo),e($,Ouo),e($,Mu),e(Mu,ooe),e(ooe,Guo),e(Mu,Xuo),e(Mu,r$),e(r$,Vuo),e(Mu,zuo),e($,Wuo),e($,Eu),e(Eu,roe),e(roe,Quo),e(Eu,Huo),e(Eu,t$),e(t$,Uuo),e(Eu,Juo),e($,Yuo),e($,yu),e(yu,toe),e(toe,Kuo),e(yu,Zuo),e(yu,a$),e(a$,e1o),e(yu,o1o),e($,r1o),e($,wu),e(wu,aoe),e(aoe,t1o),e(wu,a1o),e(wu,n$),e(n$,n1o),e(wu,s1o),e($,l1o),e($,Au),e(Au,noe),e(noe,i1o),e(Au,d1o),e(Au,s$),e(s$,c1o),e(Au,f1o),e($,m1o),e($,Lu),e(Lu,soe),e(soe,g1o),e(Lu,h1o),e(Lu,l$),e(l$,p1o),e(Lu,_1o),e($,u1o),e($,Bu),e(Bu,loe),e(loe,b1o),e(Bu,v1o),e(Bu,i$),e(i$,T1o),e(Bu,F1o),e($,C1o),e($,xu),e(xu,ioe),e(ioe,M1o),e(xu,E1o),e(xu,d$),e(d$,y1o),e(xu,w1o),e($,A1o),e($,ku),e(ku,doe),e(doe,L1o),e(ku,B1o),e(ku,c$),e(c$,x1o),e(ku,k1o),e($,R1o),e($,Ru),e(Ru,coe),e(coe,S1o),e(Ru,P1o),e(Ru,f$),e(f$,$1o),e(Ru,I1o),e($,j1o),e($,Su),e(Su,foe),e(foe,D1o),e(Su,N1o),e(Su,m$),e(m$,q1o),e(Su,O1o),e($,G1o),e($,Pu),e(Pu,moe),e(moe,X1o),e(Pu,V1o),e(Pu,g$),e(g$,z1o),e(Pu,W1o),e($,Q1o),e($,$u),e($u,goe),e(goe,H1o),e($u,U1o),e($u,h$),e(h$,J1o),e($u,Y1o),e($,K1o),e($,Iu),e(Iu,hoe),e(hoe,Z1o),e(Iu,ebo),e(Iu,p$),e(p$,obo),e(Iu,rbo),e($,tbo),e($,ju),e(ju,poe),e(poe,abo),e(ju,nbo),e(ju,_$),e(_$,sbo),e(ju,lbo),e($,ibo),e($,Du),e(Du,_oe),e(_oe,dbo),e(Du,cbo),e(Du,u$),e(u$,fbo),e(Du,mbo),e(Ne,gbo),e(Ne,Nu),e(Nu,hbo),e(Nu,uoe),e(uoe,pbo),e(Nu,_bo),e(Nu,boe),e(boe,ubo),e(Ne,bbo),e(Ne,voe),e(voe,vbo),e(Ne,Tbo),g(zE,Ne,null),b(d,uxe,u),b(d,nd,u),e(nd,qu),e(qu,Toe),g(WE,Toe,null),e(nd,Fbo),e(nd,Foe),e(Foe,Cbo),b(d,bxe,u),b(d,Zo,u),g(QE,Zo,null),e(Zo,Mbo),e(Zo,sd),e(sd,Ebo),e(sd,Coe),e(Coe,ybo),e(sd,wbo),e(sd,Moe),e(Moe,Abo),e(sd,Lbo),e(Zo,Bbo),e(Zo,HE),e(HE,xbo),e(HE,Eoe),e(Eoe,kbo),e(HE,Rbo),e(Zo,Sbo),e(Zo,Qr),g(UE,Qr,null),e(Qr,Pbo),e(Qr,yoe),e(yoe,$bo),e(Qr,Ibo),e(Qr,ld),e(ld,jbo),e(ld,woe),e(woe,Dbo),e(ld,Nbo),e(ld,Aoe),e(Aoe,qbo),e(ld,Obo),e(Qr,Gbo),e(Qr,Loe),e(Loe,Xbo),e(Qr,Vbo),g(JE,Qr,null),e(Zo,zbo),e(Zo,qe),g(YE,qe,null),e(qe,Wbo),e(qe,Boe),e(Boe,Qbo),e(qe,Hbo),e(qe,Wa),e(Wa,Ubo),e(Wa,xoe),e(xoe,Jbo),e(Wa,Ybo),e(Wa,koe),e(koe,Kbo),e(Wa,Zbo),e(Wa,Roe),e(Roe,e3o),e(Wa,o3o),e(qe,r3o),e(qe,I),e(I,Ou),e(Ou,Soe),e(Soe,t3o),e(Ou,a3o),e(Ou,b$),e(b$,n3o),e(Ou,s3o),e(I,l3o),e(I,Gu),e(Gu,Poe),e(Poe,i3o),e(Gu,d3o),e(Gu,v$),e(v$,c3o),e(Gu,f3o),e(I,m3o),e(I,Xu),e(Xu,$oe),e($oe,g3o),e(Xu,h3o),e(Xu,T$),e(T$,p3o),e(Xu,_3o),e(I,u3o),e(I,Vu),e(Vu,Ioe),e(Ioe,b3o),e(Vu,v3o),e(Vu,F$),e(F$,T3o),e(Vu,F3o),e(I,C3o),e(I,zu),e(zu,joe),e(joe,M3o),e(zu,E3o),e(zu,C$),e(C$,y3o),e(zu,w3o),e(I,A3o),e(I,Wu),e(Wu,Doe),e(Doe,L3o),e(Wu,B3o),e(Wu,M$),e(M$,x3o),e(Wu,k3o),e(I,R3o),e(I,Qu),e(Qu,Noe),e(Noe,S3o),e(Qu,P3o),e(Qu,E$),e(E$,$3o),e(Qu,I3o),e(I,j3o),e(I,Hu),e(Hu,qoe),e(qoe,D3o),e(Hu,N3o),e(Hu,y$),e(y$,q3o),e(Hu,O3o),e(I,G3o),e(I,Uu),e(Uu,Ooe),e(Ooe,X3o),e(Uu,V3o),e(Uu,w$),e(w$,z3o),e(Uu,W3o),e(I,Q3o),e(I,Ju),e(Ju,Goe),e(Goe,H3o),e(Ju,U3o),e(Ju,A$),e(A$,J3o),e(Ju,Y3o),e(I,K3o),e(I,Yu),e(Yu,Xoe),e(Xoe,Z3o),e(Yu,e5o),e(Yu,L$),e(L$,o5o),e(Yu,r5o),e(I,t5o),e(I,Ku),e(Ku,Voe),e(Voe,a5o),e(Ku,n5o),e(Ku,B$),e(B$,s5o),e(Ku,l5o),e(I,i5o),e(I,Zu),e(Zu,zoe),e(zoe,d5o),e(Zu,c5o),e(Zu,x$),e(x$,f5o),e(Zu,m5o),e(I,g5o),e(I,e1),e(e1,Woe),e(Woe,h5o),e(e1,p5o),e(e1,k$),e(k$,_5o),e(e1,u5o),e(I,b5o),e(I,o1),e(o1,Qoe),e(Qoe,v5o),e(o1,T5o),e(o1,R$),e(R$,F5o),e(o1,C5o),e(I,M5o),e(I,r1),e(r1,Hoe),e(Hoe,E5o),e(r1,y5o),e(r1,S$),e(S$,w5o),e(r1,A5o),e(I,L5o),e(I,t1),e(t1,Uoe),e(Uoe,B5o),e(t1,x5o),e(t1,P$),e(P$,k5o),e(t1,R5o),e(I,S5o),e(I,a1),e(a1,Joe),e(Joe,P5o),e(a1,$5o),e(a1,$$),e($$,I5o),e(a1,j5o),e(I,D5o),e(I,n1),e(n1,Yoe),e(Yoe,N5o),e(n1,q5o),e(n1,I$),e(I$,O5o),e(n1,G5o),e(I,X5o),e(I,s1),e(s1,Koe),e(Koe,V5o),e(s1,z5o),e(s1,j$),e(j$,W5o),e(s1,Q5o),e(I,H5o),e(I,l1),e(l1,Zoe),e(Zoe,U5o),e(l1,J5o),e(l1,D$),e(D$,Y5o),e(l1,K5o),e(I,Z5o),e(I,i1),e(i1,ere),e(ere,e2o),e(i1,o2o),e(i1,N$),e(N$,r2o),e(i1,t2o),e(I,a2o),e(I,d1),e(d1,ore),e(ore,n2o),e(d1,s2o),e(d1,q$),e(q$,l2o),e(d1,i2o),e(I,d2o),e(I,c1),e(c1,rre),e(rre,c2o),e(c1,f2o),e(c1,O$),e(O$,m2o),e(c1,g2o),e(I,h2o),e(I,f1),e(f1,tre),e(tre,p2o),e(f1,_2o),e(f1,G$),e(G$,u2o),e(f1,b2o),e(I,v2o),e(I,m1),e(m1,are),e(are,T2o),e(m1,F2o),e(m1,X$),e(X$,C2o),e(m1,M2o),e(I,E2o),e(I,g1),e(g1,nre),e(nre,y2o),e(g1,w2o),e(g1,V$),e(V$,A2o),e(g1,L2o),e(I,B2o),e(I,h1),e(h1,sre),e(sre,x2o),e(h1,k2o),e(h1,z$),e(z$,R2o),e(h1,S2o),e(I,P2o),e(I,p1),e(p1,lre),e(lre,$2o),e(p1,I2o),e(p1,W$),e(W$,j2o),e(p1,D2o),e(I,N2o),e(I,_1),e(_1,ire),e(ire,q2o),e(_1,O2o),e(_1,Q$),e(Q$,G2o),e(_1,X2o),e(I,V2o),e(I,u1),e(u1,dre),e(dre,z2o),e(u1,W2o),e(u1,cre),e(cre,Q2o),e(u1,H2o),e(I,U2o),e(I,b1),e(b1,fre),e(fre,J2o),e(b1,Y2o),e(b1,H$),e(H$,K2o),e(b1,Z2o),e(I,evo),e(I,v1),e(v1,mre),e(mre,ovo),e(v1,rvo),e(v1,U$),e(U$,tvo),e(v1,avo),e(I,nvo),e(I,T1),e(T1,gre),e(gre,svo),e(T1,lvo),e(T1,J$),e(J$,ivo),e(T1,dvo),e(I,cvo),e(I,F1),e(F1,hre),e(hre,fvo),e(F1,mvo),e(F1,Y$),e(Y$,gvo),e(F1,hvo),e(qe,pvo),e(qe,C1),e(C1,_vo),e(C1,pre),e(pre,uvo),e(C1,bvo),e(C1,_re),e(_re,vvo),e(qe,Tvo),e(qe,ure),e(ure,Fvo),e(qe,Cvo),g(KE,qe,null),b(d,vxe,u),b(d,id,u),e(id,M1),e(M1,bre),g(ZE,bre,null),e(id,Mvo),e(id,vre),e(vre,Evo),b(d,Txe,u),b(d,er,u),g(ey,er,null),e(er,yvo),e(er,dd),e(dd,wvo),e(dd,Tre),e(Tre,Avo),e(dd,Lvo),e(dd,Fre),e(Fre,Bvo),e(dd,xvo),e(er,kvo),e(er,oy),e(oy,Rvo),e(oy,Cre),e(Cre,Svo),e(oy,Pvo),e(er,$vo),e(er,Hr),g(ry,Hr,null),e(Hr,Ivo),e(Hr,Mre),e(Mre,jvo),e(Hr,Dvo),e(Hr,cd),e(cd,Nvo),e(cd,Ere),e(Ere,qvo),e(cd,Ovo),e(cd,yre),e(yre,Gvo),e(cd,Xvo),e(Hr,Vvo),e(Hr,wre),e(wre,zvo),e(Hr,Wvo),g(ty,Hr,null),e(er,Qvo),e(er,Oe),g(ay,Oe,null),e(Oe,Hvo),e(Oe,Are),e(Are,Uvo),e(Oe,Jvo),e(Oe,Qa),e(Qa,Yvo),e(Qa,Lre),e(Lre,Kvo),e(Qa,Zvo),e(Qa,Bre),e(Bre,eTo),e(Qa,oTo),e(Qa,xre),e(xre,rTo),e(Qa,tTo),e(Oe,aTo),e(Oe,ne),e(ne,E1),e(E1,kre),e(kre,nTo),e(E1,sTo),e(E1,K$),e(K$,lTo),e(E1,iTo),e(ne,dTo),e(ne,y1),e(y1,Rre),e(Rre,cTo),e(y1,fTo),e(y1,Z$),e(Z$,mTo),e(y1,gTo),e(ne,hTo),e(ne,w1),e(w1,Sre),e(Sre,pTo),e(w1,_To),e(w1,eI),e(eI,uTo),e(w1,bTo),e(ne,vTo),e(ne,A1),e(A1,Pre),e(Pre,TTo),e(A1,FTo),e(A1,oI),e(oI,CTo),e(A1,MTo),e(ne,ETo),e(ne,L1),e(L1,$re),e($re,yTo),e(L1,wTo),e(L1,rI),e(rI,ATo),e(L1,LTo),e(ne,BTo),e(ne,B1),e(B1,Ire),e(Ire,xTo),e(B1,kTo),e(B1,tI),e(tI,RTo),e(B1,STo),e(ne,PTo),e(ne,x1),e(x1,jre),e(jre,$To),e(x1,ITo),e(x1,aI),e(aI,jTo),e(x1,DTo),e(ne,NTo),e(ne,k1),e(k1,Dre),e(Dre,qTo),e(k1,OTo),e(k1,nI),e(nI,GTo),e(k1,XTo),e(ne,VTo),e(ne,R1),e(R1,Nre),e(Nre,zTo),e(R1,WTo),e(R1,sI),e(sI,QTo),e(R1,HTo),e(ne,UTo),e(ne,S1),e(S1,qre),e(qre,JTo),e(S1,YTo),e(S1,lI),e(lI,KTo),e(S1,ZTo),e(ne,e8o),e(ne,P1),e(P1,Ore),e(Ore,o8o),e(P1,r8o),e(P1,iI),e(iI,t8o),e(P1,a8o),e(ne,n8o),e(ne,$1),e($1,Gre),e(Gre,s8o),e($1,l8o),e($1,dI),e(dI,i8o),e($1,d8o),e(ne,c8o),e(ne,I1),e(I1,Xre),e(Xre,f8o),e(I1,m8o),e(I1,cI),e(cI,g8o),e(I1,h8o),e(ne,p8o),e(ne,j1),e(j1,Vre),e(Vre,_8o),e(j1,u8o),e(j1,fI),e(fI,b8o),e(j1,v8o),e(ne,T8o),e(ne,D1),e(D1,zre),e(zre,F8o),e(D1,C8o),e(D1,mI),e(mI,M8o),e(D1,E8o),e(ne,y8o),e(ne,N1),e(N1,Wre),e(Wre,w8o),e(N1,A8o),e(N1,gI),e(gI,L8o),e(N1,B8o),e(Oe,x8o),e(Oe,q1),e(q1,k8o),e(q1,Qre),e(Qre,R8o),e(q1,S8o),e(q1,Hre),e(Hre,P8o),e(Oe,$8o),e(Oe,Ure),e(Ure,I8o),e(Oe,j8o),g(ny,Oe,null),b(d,Fxe,u),b(d,fd,u),e(fd,O1),e(O1,Jre),g(sy,Jre,null),e(fd,D8o),e(fd,Yre),e(Yre,N8o),b(d,Cxe,u),b(d,or,u),g(ly,or,null),e(or,q8o),e(or,md),e(md,O8o),e(md,Kre),e(Kre,G8o),e(md,X8o),e(md,Zre),e(Zre,V8o),e(md,z8o),e(or,W8o),e(or,iy),e(iy,Q8o),e(iy,ete),e(ete,H8o),e(iy,U8o),e(or,J8o),e(or,Ur),g(dy,Ur,null),e(Ur,Y8o),e(Ur,ote),e(ote,K8o),e(Ur,Z8o),e(Ur,gd),e(gd,eFo),e(gd,rte),e(rte,oFo),e(gd,rFo),e(gd,tte),e(tte,tFo),e(gd,aFo),e(Ur,nFo),e(Ur,ate),e(ate,sFo),e(Ur,lFo),g(cy,Ur,null),e(or,iFo),e(or,Ge),g(fy,Ge,null),e(Ge,dFo),e(Ge,nte),e(nte,cFo),e(Ge,fFo),e(Ge,Ha),e(Ha,mFo),e(Ha,ste),e(ste,gFo),e(Ha,hFo),e(Ha,lte),e(lte,pFo),e(Ha,_Fo),e(Ha,ite),e(ite,uFo),e(Ha,bFo),e(Ge,vFo),e(Ge,A),e(A,G1),e(G1,dte),e(dte,TFo),e(G1,FFo),e(G1,hI),e(hI,CFo),e(G1,MFo),e(A,EFo),e(A,X1),e(X1,cte),e(cte,yFo),e(X1,wFo),e(X1,pI),e(pI,AFo),e(X1,LFo),e(A,BFo),e(A,V1),e(V1,fte),e(fte,xFo),e(V1,kFo),e(V1,_I),e(_I,RFo),e(V1,SFo),e(A,PFo),e(A,z1),e(z1,mte),e(mte,$Fo),e(z1,IFo),e(z1,uI),e(uI,jFo),e(z1,DFo),e(A,NFo),e(A,W1),e(W1,gte),e(gte,qFo),e(W1,OFo),e(W1,bI),e(bI,GFo),e(W1,XFo),e(A,VFo),e(A,Q1),e(Q1,hte),e(hte,zFo),e(Q1,WFo),e(Q1,vI),e(vI,QFo),e(Q1,HFo),e(A,UFo),e(A,H1),e(H1,pte),e(pte,JFo),e(H1,YFo),e(H1,TI),e(TI,KFo),e(H1,ZFo),e(A,eCo),e(A,U1),e(U1,_te),e(_te,oCo),e(U1,rCo),e(U1,FI),e(FI,tCo),e(U1,aCo),e(A,nCo),e(A,J1),e(J1,ute),e(ute,sCo),e(J1,lCo),e(J1,CI),e(CI,iCo),e(J1,dCo),e(A,cCo),e(A,Y1),e(Y1,bte),e(bte,fCo),e(Y1,mCo),e(Y1,MI),e(MI,gCo),e(Y1,hCo),e(A,pCo),e(A,K1),e(K1,vte),e(vte,_Co),e(K1,uCo),e(K1,EI),e(EI,bCo),e(K1,vCo),e(A,TCo),e(A,Z1),e(Z1,Tte),e(Tte,FCo),e(Z1,CCo),e(Z1,yI),e(yI,MCo),e(Z1,ECo),e(A,yCo),e(A,eb),e(eb,Fte),e(Fte,wCo),e(eb,ACo),e(eb,wI),e(wI,LCo),e(eb,BCo),e(A,xCo),e(A,ob),e(ob,Cte),e(Cte,kCo),e(ob,RCo),e(ob,AI),e(AI,SCo),e(ob,PCo),e(A,$Co),e(A,rb),e(rb,Mte),e(Mte,ICo),e(rb,jCo),e(rb,LI),e(LI,DCo),e(rb,NCo),e(A,qCo),e(A,tb),e(tb,Ete),e(Ete,OCo),e(tb,GCo),e(tb,BI),e(BI,XCo),e(tb,VCo),e(A,zCo),e(A,ab),e(ab,yte),e(yte,WCo),e(ab,QCo),e(ab,xI),e(xI,HCo),e(ab,UCo),e(A,JCo),e(A,nb),e(nb,wte),e(wte,YCo),e(nb,KCo),e(nb,kI),e(kI,ZCo),e(nb,eMo),e(A,oMo),e(A,sb),e(sb,Ate),e(Ate,rMo),e(sb,tMo),e(sb,RI),e(RI,aMo),e(sb,nMo),e(A,sMo),e(A,lb),e(lb,Lte),e(Lte,lMo),e(lb,iMo),e(lb,SI),e(SI,dMo),e(lb,cMo),e(A,fMo),e(A,ib),e(ib,Bte),e(Bte,mMo),e(ib,gMo),e(ib,PI),e(PI,hMo),e(ib,pMo),e(A,_Mo),e(A,db),e(db,xte),e(xte,uMo),e(db,bMo),e(db,$I),e($I,vMo),e(db,TMo),e(A,FMo),e(A,cb),e(cb,kte),e(kte,CMo),e(cb,MMo),e(cb,II),e(II,EMo),e(cb,yMo),e(A,wMo),e(A,fb),e(fb,Rte),e(Rte,AMo),e(fb,LMo),e(fb,jI),e(jI,BMo),e(fb,xMo),e(A,kMo),e(A,mb),e(mb,Ste),e(Ste,RMo),e(mb,SMo),e(mb,DI),e(DI,PMo),e(mb,$Mo),e(A,IMo),e(A,gb),e(gb,Pte),e(Pte,jMo),e(gb,DMo),e(gb,NI),e(NI,NMo),e(gb,qMo),e(A,OMo),e(A,hb),e(hb,$te),e($te,GMo),e(hb,XMo),e(hb,qI),e(qI,VMo),e(hb,zMo),e(A,WMo),e(A,pb),e(pb,Ite),e(Ite,QMo),e(pb,HMo),e(pb,OI),e(OI,UMo),e(pb,JMo),e(A,YMo),e(A,_b),e(_b,jte),e(jte,KMo),e(_b,ZMo),e(_b,GI),e(GI,e4o),e(_b,o4o),e(A,r4o),e(A,ub),e(ub,Dte),e(Dte,t4o),e(ub,a4o),e(ub,XI),e(XI,n4o),e(ub,s4o),e(A,l4o),e(A,bb),e(bb,Nte),e(Nte,i4o),e(bb,d4o),e(bb,VI),e(VI,c4o),e(bb,f4o),e(A,m4o),e(A,vb),e(vb,qte),e(qte,g4o),e(vb,h4o),e(vb,zI),e(zI,p4o),e(vb,_4o),e(A,u4o),e(A,Tb),e(Tb,Ote),e(Ote,b4o),e(Tb,v4o),e(Tb,WI),e(WI,T4o),e(Tb,F4o),e(A,C4o),e(A,Fb),e(Fb,Gte),e(Gte,M4o),e(Fb,E4o),e(Fb,QI),e(QI,y4o),e(Fb,w4o),e(A,A4o),e(A,Cb),e(Cb,Xte),e(Xte,L4o),e(Cb,B4o),e(Cb,HI),e(HI,x4o),e(Cb,k4o),e(A,R4o),e(A,Mb),e(Mb,Vte),e(Vte,S4o),e(Mb,P4o),e(Mb,UI),e(UI,$4o),e(Mb,I4o),e(A,j4o),e(A,Eb),e(Eb,zte),e(zte,D4o),e(Eb,N4o),e(Eb,JI),e(JI,q4o),e(Eb,O4o),e(A,G4o),e(A,yb),e(yb,Wte),e(Wte,X4o),e(yb,V4o),e(yb,YI),e(YI,z4o),e(yb,W4o),e(A,Q4o),e(A,wb),e(wb,Qte),e(Qte,H4o),e(wb,U4o),e(wb,KI),e(KI,J4o),e(wb,Y4o),e(A,K4o),e(A,Ab),e(Ab,Hte),e(Hte,Z4o),e(Ab,eEo),e(Ab,ZI),e(ZI,oEo),e(Ab,rEo),e(A,tEo),e(A,Lb),e(Lb,Ute),e(Ute,aEo),e(Lb,nEo),e(Lb,ej),e(ej,sEo),e(Lb,lEo),e(A,iEo),e(A,Bb),e(Bb,Jte),e(Jte,dEo),e(Bb,cEo),e(Bb,oj),e(oj,fEo),e(Bb,mEo),e(A,gEo),e(A,xb),e(xb,Yte),e(Yte,hEo),e(xb,pEo),e(xb,rj),e(rj,_Eo),e(xb,uEo),e(A,bEo),e(A,kb),e(kb,Kte),e(Kte,vEo),e(kb,TEo),e(kb,tj),e(tj,FEo),e(kb,CEo),e(A,MEo),e(A,Rb),e(Rb,Zte),e(Zte,EEo),e(Rb,yEo),e(Rb,aj),e(aj,wEo),e(Rb,AEo),e(A,LEo),e(A,Sb),e(Sb,eae),e(eae,BEo),e(Sb,xEo),e(Sb,nj),e(nj,kEo),e(Sb,REo),e(Ge,SEo),e(Ge,Pb),e(Pb,PEo),e(Pb,oae),e(oae,$Eo),e(Pb,IEo),e(Pb,rae),e(rae,jEo),e(Ge,DEo),e(Ge,tae),e(tae,NEo),e(Ge,qEo),g(my,Ge,null),b(d,Mxe,u),b(d,hd,u),e(hd,$b),e($b,aae),g(gy,aae,null),e(hd,OEo),e(hd,nae),e(nae,GEo),b(d,Exe,u),b(d,rr,u),g(hy,rr,null),e(rr,XEo),e(rr,pd),e(pd,VEo),e(pd,sae),e(sae,zEo),e(pd,WEo),e(pd,lae),e(lae,QEo),e(pd,HEo),e(rr,UEo),e(rr,py),e(py,JEo),e(py,iae),e(iae,YEo),e(py,KEo),e(rr,ZEo),e(rr,Jr),g(_y,Jr,null),e(Jr,eyo),e(Jr,dae),e(dae,oyo),e(Jr,ryo),e(Jr,_d),e(_d,tyo),e(_d,cae),e(cae,ayo),e(_d,nyo),e(_d,fae),e(fae,syo),e(_d,lyo),e(Jr,iyo),e(Jr,mae),e(mae,dyo),e(Jr,cyo),g(uy,Jr,null),e(rr,fyo),e(rr,Xe),g(by,Xe,null),e(Xe,myo),e(Xe,gae),e(gae,gyo),e(Xe,hyo),e(Xe,Ua),e(Ua,pyo),e(Ua,hae),e(hae,_yo),e(Ua,uyo),e(Ua,pae),e(pae,byo),e(Ua,vyo),e(Ua,_ae),e(_ae,Tyo),e(Ua,Fyo),e(Xe,Cyo),e(Xe,O),e(O,Ib),e(Ib,uae),e(uae,Myo),e(Ib,Eyo),e(Ib,sj),e(sj,yyo),e(Ib,wyo),e(O,Ayo),e(O,jb),e(jb,bae),e(bae,Lyo),e(jb,Byo),e(jb,lj),e(lj,xyo),e(jb,kyo),e(O,Ryo),e(O,Db),e(Db,vae),e(vae,Syo),e(Db,Pyo),e(Db,ij),e(ij,$yo),e(Db,Iyo),e(O,jyo),e(O,Nb),e(Nb,Tae),e(Tae,Dyo),e(Nb,Nyo),e(Nb,dj),e(dj,qyo),e(Nb,Oyo),e(O,Gyo),e(O,qb),e(qb,Fae),e(Fae,Xyo),e(qb,Vyo),e(qb,cj),e(cj,zyo),e(qb,Wyo),e(O,Qyo),e(O,Ob),e(Ob,Cae),e(Cae,Hyo),e(Ob,Uyo),e(Ob,fj),e(fj,Jyo),e(Ob,Yyo),e(O,Kyo),e(O,Gb),e(Gb,Mae),e(Mae,Zyo),e(Gb,ewo),e(Gb,mj),e(mj,owo),e(Gb,rwo),e(O,two),e(O,Xb),e(Xb,Eae),e(Eae,awo),e(Xb,nwo),e(Xb,gj),e(gj,swo),e(Xb,lwo),e(O,iwo),e(O,Vb),e(Vb,yae),e(yae,dwo),e(Vb,cwo),e(Vb,hj),e(hj,fwo),e(Vb,mwo),e(O,gwo),e(O,zb),e(zb,wae),e(wae,hwo),e(zb,pwo),e(zb,pj),e(pj,_wo),e(zb,uwo),e(O,bwo),e(O,Wb),e(Wb,Aae),e(Aae,vwo),e(Wb,Two),e(Wb,_j),e(_j,Fwo),e(Wb,Cwo),e(O,Mwo),e(O,Qb),e(Qb,Lae),e(Lae,Ewo),e(Qb,ywo),e(Qb,uj),e(uj,wwo),e(Qb,Awo),e(O,Lwo),e(O,Hb),e(Hb,Bae),e(Bae,Bwo),e(Hb,xwo),e(Hb,bj),e(bj,kwo),e(Hb,Rwo),e(O,Swo),e(O,Ub),e(Ub,xae),e(xae,Pwo),e(Ub,$wo),e(Ub,vj),e(vj,Iwo),e(Ub,jwo),e(O,Dwo),e(O,Jb),e(Jb,kae),e(kae,Nwo),e(Jb,qwo),e(Jb,Tj),e(Tj,Owo),e(Jb,Gwo),e(O,Xwo),e(O,Yb),e(Yb,Rae),e(Rae,Vwo),e(Yb,zwo),e(Yb,Fj),e(Fj,Wwo),e(Yb,Qwo),e(O,Hwo),e(O,Kb),e(Kb,Sae),e(Sae,Uwo),e(Kb,Jwo),e(Kb,Cj),e(Cj,Ywo),e(Kb,Kwo),e(O,Zwo),e(O,Zb),e(Zb,Pae),e(Pae,e6o),e(Zb,o6o),e(Zb,Mj),e(Mj,r6o),e(Zb,t6o),e(O,a6o),e(O,e3),e(e3,$ae),e($ae,n6o),e(e3,s6o),e(e3,Ej),e(Ej,l6o),e(e3,i6o),e(O,d6o),e(O,o3),e(o3,Iae),e(Iae,c6o),e(o3,f6o),e(o3,yj),e(yj,m6o),e(o3,g6o),e(O,h6o),e(O,r3),e(r3,jae),e(jae,p6o),e(r3,_6o),e(r3,wj),e(wj,u6o),e(r3,b6o),e(O,v6o),e(O,t3),e(t3,Dae),e(Dae,T6o),e(t3,F6o),e(t3,Aj),e(Aj,C6o),e(t3,M6o),e(O,E6o),e(O,a3),e(a3,Nae),e(Nae,y6o),e(a3,w6o),e(a3,Lj),e(Lj,A6o),e(a3,L6o),e(O,B6o),e(O,n3),e(n3,qae),e(qae,x6o),e(n3,k6o),e(n3,Bj),e(Bj,R6o),e(n3,S6o),e(O,P6o),e(O,s3),e(s3,Oae),e(Oae,$6o),e(s3,I6o),e(s3,xj),e(xj,j6o),e(s3,D6o),e(O,N6o),e(O,l3),e(l3,Gae),e(Gae,q6o),e(l3,O6o),e(l3,kj),e(kj,G6o),e(l3,X6o),e(O,V6o),e(O,i3),e(i3,Xae),e(Xae,z6o),e(i3,W6o),e(i3,Rj),e(Rj,Q6o),e(i3,H6o),e(O,U6o),e(O,d3),e(d3,Vae),e(Vae,J6o),e(d3,Y6o),e(d3,Sj),e(Sj,K6o),e(d3,Z6o),e(Xe,eAo),e(Xe,c3),e(c3,oAo),e(c3,zae),e(zae,rAo),e(c3,tAo),e(c3,Wae),e(Wae,aAo),e(Xe,nAo),e(Xe,Qae),e(Qae,sAo),e(Xe,lAo),g(vy,Xe,null),b(d,yxe,u),b(d,ud,u),e(ud,f3),e(f3,Hae),g(Ty,Hae,null),e(ud,iAo),e(ud,Uae),e(Uae,dAo),b(d,wxe,u),b(d,tr,u),g(Fy,tr,null),e(tr,cAo),e(tr,bd),e(bd,fAo),e(bd,Jae),e(Jae,mAo),e(bd,gAo),e(bd,Yae),e(Yae,hAo),e(bd,pAo),e(tr,_Ao),e(tr,Cy),e(Cy,uAo),e(Cy,Kae),e(Kae,bAo),e(Cy,vAo),e(tr,TAo),e(tr,Yr),g(My,Yr,null),e(Yr,FAo),e(Yr,Zae),e(Zae,CAo),e(Yr,MAo),e(Yr,vd),e(vd,EAo),e(vd,ene),e(ene,yAo),e(vd,wAo),e(vd,one),e(one,AAo),e(vd,LAo),e(Yr,BAo),e(Yr,rne),e(rne,xAo),e(Yr,kAo),g(Ey,Yr,null),e(tr,RAo),e(tr,Ve),g(yy,Ve,null),e(Ve,SAo),e(Ve,tne),e(tne,PAo),e(Ve,$Ao),e(Ve,Ja),e(Ja,IAo),e(Ja,ane),e(ane,jAo),e(Ja,DAo),e(Ja,nne),e(nne,NAo),e(Ja,qAo),e(Ja,sne),e(sne,OAo),e(Ja,GAo),e(Ve,XAo),e(Ve,da),e(da,m3),e(m3,lne),e(lne,VAo),e(m3,zAo),e(m3,Pj),e(Pj,WAo),e(m3,QAo),e(da,HAo),e(da,g3),e(g3,ine),e(ine,UAo),e(g3,JAo),e(g3,$j),e($j,YAo),e(g3,KAo),e(da,ZAo),e(da,h3),e(h3,dne),e(dne,e0o),e(h3,o0o),e(h3,Ij),e(Ij,r0o),e(h3,t0o),e(da,a0o),e(da,p3),e(p3,cne),e(cne,n0o),e(p3,s0o),e(p3,jj),e(jj,l0o),e(p3,i0o),e(da,d0o),e(da,_3),e(_3,fne),e(fne,c0o),e(_3,f0o),e(_3,Dj),e(Dj,m0o),e(_3,g0o),e(Ve,h0o),e(Ve,u3),e(u3,p0o),e(u3,mne),e(mne,_0o),e(u3,u0o),e(u3,gne),e(gne,b0o),e(Ve,v0o),e(Ve,hne),e(hne,T0o),e(Ve,F0o),g(wy,Ve,null),b(d,Axe,u),b(d,Td,u),e(Td,b3),e(b3,pne),g(Ay,pne,null),e(Td,C0o),e(Td,_ne),e(_ne,M0o),b(d,Lxe,u),b(d,ar,u),g(Ly,ar,null),e(ar,E0o),e(ar,Fd),e(Fd,y0o),e(Fd,une),e(une,w0o),e(Fd,A0o),e(Fd,bne),e(bne,L0o),e(Fd,B0o),e(ar,x0o),e(ar,By),e(By,k0o),e(By,vne),e(vne,R0o),e(By,S0o),e(ar,P0o),e(ar,Kr),g(xy,Kr,null),e(Kr,$0o),e(Kr,Tne),e(Tne,I0o),e(Kr,j0o),e(Kr,Cd),e(Cd,D0o),e(Cd,Fne),e(Fne,N0o),e(Cd,q0o),e(Cd,Cne),e(Cne,O0o),e(Cd,G0o),e(Kr,X0o),e(Kr,Mne),e(Mne,V0o),e(Kr,z0o),g(ky,Kr,null),e(ar,W0o),e(ar,ze),g(Ry,ze,null),e(ze,Q0o),e(ze,Ene),e(Ene,H0o),e(ze,U0o),e(ze,Ya),e(Ya,J0o),e(Ya,yne),e(yne,Y0o),e(Ya,K0o),e(Ya,wne),e(wne,Z0o),e(Ya,eLo),e(Ya,Ane),e(Ane,oLo),e(Ya,rLo),e(ze,tLo),e(ze,N),e(N,v3),e(v3,Lne),e(Lne,aLo),e(v3,nLo),e(v3,Nj),e(Nj,sLo),e(v3,lLo),e(N,iLo),e(N,T3),e(T3,Bne),e(Bne,dLo),e(T3,cLo),e(T3,qj),e(qj,fLo),e(T3,mLo),e(N,gLo),e(N,F3),e(F3,xne),e(xne,hLo),e(F3,pLo),e(F3,Oj),e(Oj,_Lo),e(F3,uLo),e(N,bLo),e(N,C3),e(C3,kne),e(kne,vLo),e(C3,TLo),e(C3,Gj),e(Gj,FLo),e(C3,CLo),e(N,MLo),e(N,M3),e(M3,Rne),e(Rne,ELo),e(M3,yLo),e(M3,Xj),e(Xj,wLo),e(M3,ALo),e(N,LLo),e(N,E3),e(E3,Sne),e(Sne,BLo),e(E3,xLo),e(E3,Vj),e(Vj,kLo),e(E3,RLo),e(N,SLo),e(N,y3),e(y3,Pne),e(Pne,PLo),e(y3,$Lo),e(y3,zj),e(zj,ILo),e(y3,jLo),e(N,DLo),e(N,w3),e(w3,$ne),e($ne,NLo),e(w3,qLo),e(w3,Wj),e(Wj,OLo),e(w3,GLo),e(N,XLo),e(N,A3),e(A3,Ine),e(Ine,VLo),e(A3,zLo),e(A3,Qj),e(Qj,WLo),e(A3,QLo),e(N,HLo),e(N,L3),e(L3,jne),e(jne,ULo),e(L3,JLo),e(L3,Hj),e(Hj,YLo),e(L3,KLo),e(N,ZLo),e(N,B3),e(B3,Dne),e(Dne,e7o),e(B3,o7o),e(B3,Uj),e(Uj,r7o),e(B3,t7o),e(N,a7o),e(N,x3),e(x3,Nne),e(Nne,n7o),e(x3,s7o),e(x3,Jj),e(Jj,l7o),e(x3,i7o),e(N,d7o),e(N,k3),e(k3,qne),e(qne,c7o),e(k3,f7o),e(k3,Yj),e(Yj,m7o),e(k3,g7o),e(N,h7o),e(N,R3),e(R3,One),e(One,p7o),e(R3,_7o),e(R3,Kj),e(Kj,u7o),e(R3,b7o),e(N,v7o),e(N,S3),e(S3,Gne),e(Gne,T7o),e(S3,F7o),e(S3,Zj),e(Zj,C7o),e(S3,M7o),e(N,E7o),e(N,P3),e(P3,Xne),e(Xne,y7o),e(P3,w7o),e(P3,eD),e(eD,A7o),e(P3,L7o),e(N,B7o),e(N,$3),e($3,Vne),e(Vne,x7o),e($3,k7o),e($3,oD),e(oD,R7o),e($3,S7o),e(N,P7o),e(N,I3),e(I3,zne),e(zne,$7o),e(I3,I7o),e(I3,rD),e(rD,j7o),e(I3,D7o),e(N,N7o),e(N,j3),e(j3,Wne),e(Wne,q7o),e(j3,O7o),e(j3,tD),e(tD,G7o),e(j3,X7o),e(N,V7o),e(N,D3),e(D3,Qne),e(Qne,z7o),e(D3,W7o),e(D3,aD),e(aD,Q7o),e(D3,H7o),e(N,U7o),e(N,N3),e(N3,Hne),e(Hne,J7o),e(N3,Y7o),e(N3,nD),e(nD,K7o),e(N3,Z7o),e(N,e9o),e(N,q3),e(q3,Une),e(Une,o9o),e(q3,r9o),e(q3,sD),e(sD,t9o),e(q3,a9o),e(N,n9o),e(N,O3),e(O3,Jne),e(Jne,s9o),e(O3,l9o),e(O3,lD),e(lD,i9o),e(O3,d9o),e(N,c9o),e(N,G3),e(G3,Yne),e(Yne,f9o),e(G3,m9o),e(G3,iD),e(iD,g9o),e(G3,h9o),e(N,p9o),e(N,X3),e(X3,Kne),e(Kne,_9o),e(X3,u9o),e(X3,dD),e(dD,b9o),e(X3,v9o),e(N,T9o),e(N,V3),e(V3,Zne),e(Zne,F9o),e(V3,C9o),e(V3,cD),e(cD,M9o),e(V3,E9o),e(N,y9o),e(N,z3),e(z3,ese),e(ese,w9o),e(z3,A9o),e(z3,fD),e(fD,L9o),e(z3,B9o),e(N,x9o),e(N,W3),e(W3,ose),e(ose,k9o),e(W3,R9o),e(W3,mD),e(mD,S9o),e(W3,P9o),e(N,$9o),e(N,Q3),e(Q3,rse),e(rse,I9o),e(Q3,j9o),e(Q3,gD),e(gD,D9o),e(Q3,N9o),e(N,q9o),e(N,H3),e(H3,tse),e(tse,O9o),e(H3,G9o),e(H3,hD),e(hD,X9o),e(H3,V9o),e(N,z9o),e(N,U3),e(U3,ase),e(ase,W9o),e(U3,Q9o),e(U3,pD),e(pD,H9o),e(U3,U9o),e(N,J9o),e(N,J3),e(J3,nse),e(nse,Y9o),e(J3,K9o),e(J3,_D),e(_D,Z9o),e(J3,eBo),e(N,oBo),e(N,Y3),e(Y3,sse),e(sse,rBo),e(Y3,tBo),e(Y3,uD),e(uD,aBo),e(Y3,nBo),e(ze,sBo),e(ze,K3),e(K3,lBo),e(K3,lse),e(lse,iBo),e(K3,dBo),e(K3,ise),e(ise,cBo),e(ze,fBo),e(ze,dse),e(dse,mBo),e(ze,gBo),g(Sy,ze,null),b(d,Bxe,u),b(d,Md,u),e(Md,Z3),e(Z3,cse),g(Py,cse,null),e(Md,hBo),e(Md,fse),e(fse,pBo),b(d,xxe,u),b(d,nr,u),g($y,nr,null),e(nr,_Bo),e(nr,Ed),e(Ed,uBo),e(Ed,mse),e(mse,bBo),e(Ed,vBo),e(Ed,gse),e(gse,TBo),e(Ed,FBo),e(nr,CBo),e(nr,Iy),e(Iy,MBo),e(Iy,hse),e(hse,EBo),e(Iy,yBo),e(nr,wBo),e(nr,Zr),g(jy,Zr,null),e(Zr,ABo),e(Zr,pse),e(pse,LBo),e(Zr,BBo),e(Zr,yd),e(yd,xBo),e(yd,_se),e(_se,kBo),e(yd,RBo),e(yd,use),e(use,SBo),e(yd,PBo),e(Zr,$Bo),e(Zr,bse),e(bse,IBo),e(Zr,jBo),g(Dy,Zr,null),e(nr,DBo),e(nr,We),g(Ny,We,null),e(We,NBo),e(We,vse),e(vse,qBo),e(We,OBo),e(We,Ka),e(Ka,GBo),e(Ka,Tse),e(Tse,XBo),e(Ka,VBo),e(Ka,Fse),e(Fse,zBo),e(Ka,WBo),e(Ka,Cse),e(Cse,QBo),e(Ka,HBo),e(We,UBo),e(We,R),e(R,e5),e(e5,Mse),e(Mse,JBo),e(e5,YBo),e(e5,bD),e(bD,KBo),e(e5,ZBo),e(R,exo),e(R,o5),e(o5,Ese),e(Ese,oxo),e(o5,rxo),e(o5,vD),e(vD,txo),e(o5,axo),e(R,nxo),e(R,r5),e(r5,yse),e(yse,sxo),e(r5,lxo),e(r5,TD),e(TD,ixo),e(r5,dxo),e(R,cxo),e(R,t5),e(t5,wse),e(wse,fxo),e(t5,mxo),e(t5,FD),e(FD,gxo),e(t5,hxo),e(R,pxo),e(R,a5),e(a5,Ase),e(Ase,_xo),e(a5,uxo),e(a5,CD),e(CD,bxo),e(a5,vxo),e(R,Txo),e(R,n5),e(n5,Lse),e(Lse,Fxo),e(n5,Cxo),e(n5,MD),e(MD,Mxo),e(n5,Exo),e(R,yxo),e(R,s5),e(s5,Bse),e(Bse,wxo),e(s5,Axo),e(s5,ED),e(ED,Lxo),e(s5,Bxo),e(R,xxo),e(R,l5),e(l5,xse),e(xse,kxo),e(l5,Rxo),e(l5,yD),e(yD,Sxo),e(l5,Pxo),e(R,$xo),e(R,i5),e(i5,kse),e(kse,Ixo),e(i5,jxo),e(i5,wD),e(wD,Dxo),e(i5,Nxo),e(R,qxo),e(R,d5),e(d5,Rse),e(Rse,Oxo),e(d5,Gxo),e(d5,AD),e(AD,Xxo),e(d5,Vxo),e(R,zxo),e(R,c5),e(c5,Sse),e(Sse,Wxo),e(c5,Qxo),e(c5,LD),e(LD,Hxo),e(c5,Uxo),e(R,Jxo),e(R,f5),e(f5,Pse),e(Pse,Yxo),e(f5,Kxo),e(f5,BD),e(BD,Zxo),e(f5,eko),e(R,oko),e(R,m5),e(m5,$se),e($se,rko),e(m5,tko),e(m5,xD),e(xD,ako),e(m5,nko),e(R,sko),e(R,g5),e(g5,Ise),e(Ise,lko),e(g5,iko),e(g5,kD),e(kD,dko),e(g5,cko),e(R,fko),e(R,h5),e(h5,jse),e(jse,mko),e(h5,gko),e(h5,RD),e(RD,hko),e(h5,pko),e(R,_ko),e(R,p5),e(p5,Dse),e(Dse,uko),e(p5,bko),e(p5,SD),e(SD,vko),e(p5,Tko),e(R,Fko),e(R,_5),e(_5,Nse),e(Nse,Cko),e(_5,Mko),e(_5,PD),e(PD,Eko),e(_5,yko),e(R,wko),e(R,u5),e(u5,qse),e(qse,Ako),e(u5,Lko),e(u5,$D),e($D,Bko),e(u5,xko),e(R,kko),e(R,b5),e(b5,Ose),e(Ose,Rko),e(b5,Sko),e(b5,ID),e(ID,Pko),e(b5,$ko),e(R,Iko),e(R,v5),e(v5,Gse),e(Gse,jko),e(v5,Dko),e(v5,jD),e(jD,Nko),e(v5,qko),e(R,Oko),e(R,T5),e(T5,Xse),e(Xse,Gko),e(T5,Xko),e(T5,DD),e(DD,Vko),e(T5,zko),e(R,Wko),e(R,F5),e(F5,Vse),e(Vse,Qko),e(F5,Hko),e(F5,ND),e(ND,Uko),e(F5,Jko),e(R,Yko),e(R,C5),e(C5,zse),e(zse,Kko),e(C5,Zko),e(C5,qD),e(qD,eRo),e(C5,oRo),e(R,rRo),e(R,M5),e(M5,Wse),e(Wse,tRo),e(M5,aRo),e(M5,OD),e(OD,nRo),e(M5,sRo),e(R,lRo),e(R,E5),e(E5,Qse),e(Qse,iRo),e(E5,dRo),e(E5,GD),e(GD,cRo),e(E5,fRo),e(R,mRo),e(R,y5),e(y5,Hse),e(Hse,gRo),e(y5,hRo),e(y5,XD),e(XD,pRo),e(y5,_Ro),e(R,uRo),e(R,w5),e(w5,Use),e(Use,bRo),e(w5,vRo),e(w5,VD),e(VD,TRo),e(w5,FRo),e(R,CRo),e(R,A5),e(A5,Jse),e(Jse,MRo),e(A5,ERo),e(A5,zD),e(zD,yRo),e(A5,wRo),e(R,ARo),e(R,L5),e(L5,Yse),e(Yse,LRo),e(L5,BRo),e(L5,WD),e(WD,xRo),e(L5,kRo),e(R,RRo),e(R,B5),e(B5,Kse),e(Kse,SRo),e(B5,PRo),e(B5,QD),e(QD,$Ro),e(B5,IRo),e(R,jRo),e(R,x5),e(x5,Zse),e(Zse,DRo),e(x5,NRo),e(x5,HD),e(HD,qRo),e(x5,ORo),e(R,GRo),e(R,k5),e(k5,ele),e(ele,XRo),e(k5,VRo),e(k5,UD),e(UD,zRo),e(k5,WRo),e(R,QRo),e(R,R5),e(R5,ole),e(ole,HRo),e(R5,URo),e(R5,JD),e(JD,JRo),e(R5,YRo),e(R,KRo),e(R,S5),e(S5,rle),e(rle,ZRo),e(S5,eSo),e(S5,YD),e(YD,oSo),e(S5,rSo),e(R,tSo),e(R,P5),e(P5,tle),e(tle,aSo),e(P5,nSo),e(P5,KD),e(KD,sSo),e(P5,lSo),e(R,iSo),e(R,$5),e($5,ale),e(ale,dSo),e($5,cSo),e($5,ZD),e(ZD,fSo),e($5,mSo),e(R,gSo),e(R,I5),e(I5,nle),e(nle,hSo),e(I5,pSo),e(I5,eN),e(eN,_So),e(I5,uSo),e(R,bSo),e(R,j5),e(j5,sle),e(sle,vSo),e(j5,TSo),e(j5,oN),e(oN,FSo),e(j5,CSo),e(R,MSo),e(R,D5),e(D5,lle),e(lle,ESo),e(D5,ySo),e(D5,rN),e(rN,wSo),e(D5,ASo),e(We,LSo),e(We,N5),e(N5,BSo),e(N5,ile),e(ile,xSo),e(N5,kSo),e(N5,dle),e(dle,RSo),e(We,SSo),e(We,cle),e(cle,PSo),e(We,$So),g(qy,We,null),b(d,kxe,u),b(d,wd,u),e(wd,q5),e(q5,fle),g(Oy,fle,null),e(wd,ISo),e(wd,mle),e(mle,jSo),b(d,Rxe,u),b(d,sr,u),g(Gy,sr,null),e(sr,DSo),e(sr,Ad),e(Ad,NSo),e(Ad,gle),e(gle,qSo),e(Ad,OSo),e(Ad,hle),e(hle,GSo),e(Ad,XSo),e(sr,VSo),e(sr,Xy),e(Xy,zSo),e(Xy,ple),e(ple,WSo),e(Xy,QSo),e(sr,HSo),e(sr,et),g(Vy,et,null),e(et,USo),e(et,_le),e(_le,JSo),e(et,YSo),e(et,Ld),e(Ld,KSo),e(Ld,ule),e(ule,ZSo),e(Ld,ePo),e(Ld,ble),e(ble,oPo),e(Ld,rPo),e(et,tPo),e(et,vle),e(vle,aPo),e(et,nPo),g(zy,et,null),e(sr,sPo),e(sr,Qe),g(Wy,Qe,null),e(Qe,lPo),e(Qe,Tle),e(Tle,iPo),e(Qe,dPo),e(Qe,Za),e(Za,cPo),e(Za,Fle),e(Fle,fPo),e(Za,mPo),e(Za,Cle),e(Cle,gPo),e(Za,hPo),e(Za,Mle),e(Mle,pPo),e(Za,_Po),e(Qe,uPo),e(Qe,Ele),e(Ele,O5),e(O5,yle),e(yle,bPo),e(O5,vPo),e(O5,tN),e(tN,TPo),e(O5,FPo),e(Qe,CPo),e(Qe,G5),e(G5,MPo),e(G5,wle),e(wle,EPo),e(G5,yPo),e(G5,Ale),e(Ale,wPo),e(Qe,APo),e(Qe,Lle),e(Lle,LPo),e(Qe,BPo),g(Qy,Qe,null),b(d,Sxe,u),b(d,Bd,u),e(Bd,X5),e(X5,Ble),g(Hy,Ble,null),e(Bd,xPo),e(Bd,xle),e(xle,kPo),b(d,Pxe,u),b(d,lr,u),g(Uy,lr,null),e(lr,RPo),e(lr,xd),e(xd,SPo),e(xd,kle),e(kle,PPo),e(xd,$Po),e(xd,Rle),e(Rle,IPo),e(xd,jPo),e(lr,DPo),e(lr,Jy),e(Jy,NPo),e(Jy,Sle),e(Sle,qPo),e(Jy,OPo),e(lr,GPo),e(lr,ot),g(Yy,ot,null),e(ot,XPo),e(ot,Ple),e(Ple,VPo),e(ot,zPo),e(ot,kd),e(kd,WPo),e(kd,$le),e($le,QPo),e(kd,HPo),e(kd,Ile),e(Ile,UPo),e(kd,JPo),e(ot,YPo),e(ot,jle),e(jle,KPo),e(ot,ZPo),g(Ky,ot,null),e(lr,e$o),e(lr,He),g(Zy,He,null),e(He,o$o),e(He,Dle),e(Dle,r$o),e(He,t$o),e(He,en),e(en,a$o),e(en,Nle),e(Nle,n$o),e(en,s$o),e(en,qle),e(qle,l$o),e(en,i$o),e(en,Ole),e(Ole,d$o),e(en,c$o),e(He,f$o),e(He,Fe),e(Fe,V5),e(V5,Gle),e(Gle,m$o),e(V5,g$o),e(V5,aN),e(aN,h$o),e(V5,p$o),e(Fe,_$o),e(Fe,z5),e(z5,Xle),e(Xle,u$o),e(z5,b$o),e(z5,nN),e(nN,v$o),e(z5,T$o),e(Fe,F$o),e(Fe,qs),e(qs,Vle),e(Vle,C$o),e(qs,M$o),e(qs,sN),e(sN,E$o),e(qs,y$o),e(qs,lN),e(lN,w$o),e(qs,A$o),e(Fe,L$o),e(Fe,W5),e(W5,zle),e(zle,B$o),e(W5,x$o),e(W5,iN),e(iN,k$o),e(W5,R$o),e(Fe,S$o),e(Fe,fa),e(fa,Wle),e(Wle,P$o),e(fa,$$o),e(fa,dN),e(dN,I$o),e(fa,j$o),e(fa,cN),e(cN,D$o),e(fa,N$o),e(fa,fN),e(fN,q$o),e(fa,O$o),e(Fe,G$o),e(Fe,Q5),e(Q5,Qle),e(Qle,X$o),e(Q5,V$o),e(Q5,mN),e(mN,z$o),e(Q5,W$o),e(Fe,Q$o),e(Fe,H5),e(H5,Hle),e(Hle,H$o),e(H5,U$o),e(H5,gN),e(gN,J$o),e(H5,Y$o),e(Fe,K$o),e(Fe,U5),e(U5,Ule),e(Ule,Z$o),e(U5,eIo),e(U5,hN),e(hN,oIo),e(U5,rIo),e(Fe,tIo),e(Fe,J5),e(J5,Jle),e(Jle,aIo),e(J5,nIo),e(J5,pN),e(pN,sIo),e(J5,lIo),e(He,iIo),e(He,Y5),e(Y5,dIo),e(Y5,Yle),e(Yle,cIo),e(Y5,fIo),e(Y5,Kle),e(Kle,mIo),e(He,gIo),e(He,Zle),e(Zle,hIo),e(He,pIo),g(ew,He,null),b(d,$xe,u),b(d,Rd,u),e(Rd,K5),e(K5,eie),g(ow,eie,null),e(Rd,_Io),e(Rd,oie),e(oie,uIo),b(d,Ixe,u),b(d,ir,u),g(rw,ir,null),e(ir,bIo),e(ir,Sd),e(Sd,vIo),e(Sd,rie),e(rie,TIo),e(Sd,FIo),e(Sd,tie),e(tie,CIo),e(Sd,MIo),e(ir,EIo),e(ir,tw),e(tw,yIo),e(tw,aie),e(aie,wIo),e(tw,AIo),e(ir,LIo),e(ir,rt),g(aw,rt,null),e(rt,BIo),e(rt,nie),e(nie,xIo),e(rt,kIo),e(rt,Pd),e(Pd,RIo),e(Pd,sie),e(sie,SIo),e(Pd,PIo),e(Pd,lie),e(lie,$Io),e(Pd,IIo),e(rt,jIo),e(rt,iie),e(iie,DIo),e(rt,NIo),g(nw,rt,null),e(ir,qIo),e(ir,Ue),g(sw,Ue,null),e(Ue,OIo),e(Ue,die),e(die,GIo),e(Ue,XIo),e(Ue,on),e(on,VIo),e(on,cie),e(cie,zIo),e(on,WIo),e(on,fie),e(fie,QIo),e(on,HIo),e(on,mie),e(mie,UIo),e(on,JIo),e(Ue,YIo),e(Ue,gie),e(gie,Z5),e(Z5,hie),e(hie,KIo),e(Z5,ZIo),e(Z5,_N),e(_N,ejo),e(Z5,ojo),e(Ue,rjo),e(Ue,e2),e(e2,tjo),e(e2,pie),e(pie,ajo),e(e2,njo),e(e2,_ie),e(_ie,sjo),e(Ue,ljo),e(Ue,uie),e(uie,ijo),e(Ue,djo),g(lw,Ue,null),b(d,jxe,u),b(d,$d,u),e($d,o2),e(o2,bie),g(iw,bie,null),e($d,cjo),e($d,vie),e(vie,fjo),b(d,Dxe,u),b(d,dr,u),g(dw,dr,null),e(dr,mjo),e(dr,Id),e(Id,gjo),e(Id,Tie),e(Tie,hjo),e(Id,pjo),e(Id,Fie),e(Fie,_jo),e(Id,ujo),e(dr,bjo),e(dr,cw),e(cw,vjo),e(cw,Cie),e(Cie,Tjo),e(cw,Fjo),e(dr,Cjo),e(dr,tt),g(fw,tt,null),e(tt,Mjo),e(tt,Mie),e(Mie,Ejo),e(tt,yjo),e(tt,jd),e(jd,wjo),e(jd,Eie),e(Eie,Ajo),e(jd,Ljo),e(jd,yie),e(yie,Bjo),e(jd,xjo),e(tt,kjo),e(tt,wie),e(wie,Rjo),e(tt,Sjo),g(mw,tt,null),e(dr,Pjo),e(dr,Je),g(gw,Je,null),e(Je,$jo),e(Je,Aie),e(Aie,Ijo),e(Je,jjo),e(Je,rn),e(rn,Djo),e(rn,Lie),e(Lie,Njo),e(rn,qjo),e(rn,Bie),e(Bie,Ojo),e(rn,Gjo),e(rn,xie),e(xie,Xjo),e(rn,Vjo),e(Je,zjo),e(Je,xe),e(xe,r2),e(r2,kie),e(kie,Wjo),e(r2,Qjo),e(r2,uN),e(uN,Hjo),e(r2,Ujo),e(xe,Jjo),e(xe,t2),e(t2,Rie),e(Rie,Yjo),e(t2,Kjo),e(t2,bN),e(bN,Zjo),e(t2,eDo),e(xe,oDo),e(xe,a2),e(a2,Sie),e(Sie,rDo),e(a2,tDo),e(a2,vN),e(vN,aDo),e(a2,nDo),e(xe,sDo),e(xe,n2),e(n2,Pie),e(Pie,lDo),e(n2,iDo),e(n2,TN),e(TN,dDo),e(n2,cDo),e(xe,fDo),e(xe,s2),e(s2,$ie),e($ie,mDo),e(s2,gDo),e(s2,FN),e(FN,hDo),e(s2,pDo),e(xe,_Do),e(xe,l2),e(l2,Iie),e(Iie,uDo),e(l2,bDo),e(l2,CN),e(CN,vDo),e(l2,TDo),e(xe,FDo),e(xe,i2),e(i2,jie),e(jie,CDo),e(i2,MDo),e(i2,MN),e(MN,EDo),e(i2,yDo),e(xe,wDo),e(xe,d2),e(d2,Die),e(Die,ADo),e(d2,LDo),e(d2,EN),e(EN,BDo),e(d2,xDo),e(Je,kDo),e(Je,c2),e(c2,RDo),e(c2,Nie),e(Nie,SDo),e(c2,PDo),e(c2,qie),e(qie,$Do),e(Je,IDo),e(Je,Oie),e(Oie,jDo),e(Je,DDo),g(hw,Je,null),b(d,Nxe,u),b(d,Dd,u),e(Dd,f2),e(f2,Gie),g(pw,Gie,null),e(Dd,NDo),e(Dd,Xie),e(Xie,qDo),b(d,qxe,u),b(d,cr,u),g(_w,cr,null),e(cr,ODo),e(cr,Nd),e(Nd,GDo),e(Nd,Vie),e(Vie,XDo),e(Nd,VDo),e(Nd,zie),e(zie,zDo),e(Nd,WDo),e(cr,QDo),e(cr,uw),e(uw,HDo),e(uw,Wie),e(Wie,UDo),e(uw,JDo),e(cr,YDo),e(cr,at),g(bw,at,null),e(at,KDo),e(at,Qie),e(Qie,ZDo),e(at,eNo),e(at,qd),e(qd,oNo),e(qd,Hie),e(Hie,rNo),e(qd,tNo),e(qd,Uie),e(Uie,aNo),e(qd,nNo),e(at,sNo),e(at,Jie),e(Jie,lNo),e(at,iNo),g(vw,at,null),e(cr,dNo),e(cr,Ye),g(Tw,Ye,null),e(Ye,cNo),e(Ye,Yie),e(Yie,fNo),e(Ye,mNo),e(Ye,tn),e(tn,gNo),e(tn,Kie),e(Kie,hNo),e(tn,pNo),e(tn,Zie),e(Zie,_No),e(tn,uNo),e(tn,ede),e(ede,bNo),e(tn,vNo),e(Ye,TNo),e(Ye,an),e(an,m2),e(m2,ode),e(ode,FNo),e(m2,CNo),e(m2,yN),e(yN,MNo),e(m2,ENo),e(an,yNo),e(an,g2),e(g2,rde),e(rde,wNo),e(g2,ANo),e(g2,wN),e(wN,LNo),e(g2,BNo),e(an,xNo),e(an,h2),e(h2,tde),e(tde,kNo),e(h2,RNo),e(h2,AN),e(AN,SNo),e(h2,PNo),e(an,$No),e(an,p2),e(p2,ade),e(ade,INo),e(p2,jNo),e(p2,LN),e(LN,DNo),e(p2,NNo),e(Ye,qNo),e(Ye,_2),e(_2,ONo),e(_2,nde),e(nde,GNo),e(_2,XNo),e(_2,sde),e(sde,VNo),e(Ye,zNo),e(Ye,lde),e(lde,WNo),e(Ye,QNo),g(Fw,Ye,null),b(d,Oxe,u),b(d,Od,u),e(Od,u2),e(u2,ide),g(Cw,ide,null),e(Od,HNo),e(Od,dde),e(dde,UNo),b(d,Gxe,u),b(d,fr,u),g(Mw,fr,null),e(fr,JNo),e(fr,Gd),e(Gd,YNo),e(Gd,cde),e(cde,KNo),e(Gd,ZNo),e(Gd,fde),e(fde,eqo),e(Gd,oqo),e(fr,rqo),e(fr,Ew),e(Ew,tqo),e(Ew,mde),e(mde,aqo),e(Ew,nqo),e(fr,sqo),e(fr,nt),g(yw,nt,null),e(nt,lqo),e(nt,gde),e(gde,iqo),e(nt,dqo),e(nt,Xd),e(Xd,cqo),e(Xd,hde),e(hde,fqo),e(Xd,mqo),e(Xd,pde),e(pde,gqo),e(Xd,hqo),e(nt,pqo),e(nt,_de),e(_de,_qo),e(nt,uqo),g(ww,nt,null),e(fr,bqo),e(fr,Ke),g(Aw,Ke,null),e(Ke,vqo),e(Ke,ude),e(ude,Tqo),e(Ke,Fqo),e(Ke,nn),e(nn,Cqo),e(nn,bde),e(bde,Mqo),e(nn,Eqo),e(nn,vde),e(vde,yqo),e(nn,wqo),e(nn,Tde),e(Tde,Aqo),e(nn,Lqo),e(Ke,Bqo),e(Ke,ke),e(ke,b2),e(b2,Fde),e(Fde,xqo),e(b2,kqo),e(b2,BN),e(BN,Rqo),e(b2,Sqo),e(ke,Pqo),e(ke,v2),e(v2,Cde),e(Cde,$qo),e(v2,Iqo),e(v2,xN),e(xN,jqo),e(v2,Dqo),e(ke,Nqo),e(ke,T2),e(T2,Mde),e(Mde,qqo),e(T2,Oqo),e(T2,kN),e(kN,Gqo),e(T2,Xqo),e(ke,Vqo),e(ke,F2),e(F2,Ede),e(Ede,zqo),e(F2,Wqo),e(F2,RN),e(RN,Qqo),e(F2,Hqo),e(ke,Uqo),e(ke,C2),e(C2,yde),e(yde,Jqo),e(C2,Yqo),e(C2,SN),e(SN,Kqo),e(C2,Zqo),e(ke,eOo),e(ke,M2),e(M2,wde),e(wde,oOo),e(M2,rOo),e(M2,PN),e(PN,tOo),e(M2,aOo),e(ke,nOo),e(ke,E2),e(E2,Ade),e(Ade,sOo),e(E2,lOo),e(E2,$N),e($N,iOo),e(E2,dOo),e(ke,cOo),e(ke,y2),e(y2,Lde),e(Lde,fOo),e(y2,mOo),e(y2,IN),e(IN,gOo),e(y2,hOo),e(Ke,pOo),e(Ke,w2),e(w2,_Oo),e(w2,Bde),e(Bde,uOo),e(w2,bOo),e(w2,xde),e(xde,vOo),e(Ke,TOo),e(Ke,kde),e(kde,FOo),e(Ke,COo),g(Lw,Ke,null),b(d,Xxe,u),b(d,Vd,u),e(Vd,A2),e(A2,Rde),g(Bw,Rde,null),e(Vd,MOo),e(Vd,Sde),e(Sde,EOo),b(d,Vxe,u),b(d,mr,u),g(xw,mr,null),e(mr,yOo),e(mr,zd),e(zd,wOo),e(zd,Pde),e(Pde,AOo),e(zd,LOo),e(zd,$de),e($de,BOo),e(zd,xOo),e(mr,kOo),e(mr,kw),e(kw,ROo),e(kw,Ide),e(Ide,SOo),e(kw,POo),e(mr,$Oo),e(mr,st),g(Rw,st,null),e(st,IOo),e(st,jde),e(jde,jOo),e(st,DOo),e(st,Wd),e(Wd,NOo),e(Wd,Dde),e(Dde,qOo),e(Wd,OOo),e(Wd,Nde),e(Nde,GOo),e(Wd,XOo),e(st,VOo),e(st,qde),e(qde,zOo),e(st,WOo),g(Sw,st,null),e(mr,QOo),e(mr,Ze),g(Pw,Ze,null),e(Ze,HOo),e(Ze,Ode),e(Ode,UOo),e(Ze,JOo),e(Ze,sn),e(sn,YOo),e(sn,Gde),e(Gde,KOo),e(sn,ZOo),e(sn,Xde),e(Xde,eGo),e(sn,oGo),e(sn,Vde),e(Vde,rGo),e(sn,tGo),e(Ze,aGo),e(Ze,$w),e($w,L2),e(L2,zde),e(zde,nGo),e(L2,sGo),e(L2,jN),e(jN,lGo),e(L2,iGo),e($w,dGo),e($w,B2),e(B2,Wde),e(Wde,cGo),e(B2,fGo),e(B2,DN),e(DN,mGo),e(B2,gGo),e(Ze,hGo),e(Ze,x2),e(x2,pGo),e(x2,Qde),e(Qde,_Go),e(x2,uGo),e(x2,Hde),e(Hde,bGo),e(Ze,vGo),e(Ze,Ude),e(Ude,TGo),e(Ze,FGo),g(Iw,Ze,null),b(d,zxe,u),b(d,Qd,u),e(Qd,k2),e(k2,Jde),g(jw,Jde,null),e(Qd,CGo),e(Qd,Yde),e(Yde,MGo),b(d,Wxe,u),b(d,gr,u),g(Dw,gr,null),e(gr,EGo),e(gr,Hd),e(Hd,yGo),e(Hd,Kde),e(Kde,wGo),e(Hd,AGo),e(Hd,Zde),e(Zde,LGo),e(Hd,BGo),e(gr,xGo),e(gr,Nw),e(Nw,kGo),e(Nw,ece),e(ece,RGo),e(Nw,SGo),e(gr,PGo),e(gr,lt),g(qw,lt,null),e(lt,$Go),e(lt,oce),e(oce,IGo),e(lt,jGo),e(lt,Ud),e(Ud,DGo),e(Ud,rce),e(rce,NGo),e(Ud,qGo),e(Ud,tce),e(tce,OGo),e(Ud,GGo),e(lt,XGo),e(lt,ace),e(ace,VGo),e(lt,zGo),g(Ow,lt,null),e(gr,WGo),e(gr,eo),g(Gw,eo,null),e(eo,QGo),e(eo,nce),e(nce,HGo),e(eo,UGo),e(eo,ln),e(ln,JGo),e(ln,sce),e(sce,YGo),e(ln,KGo),e(ln,lce),e(lce,ZGo),e(ln,eXo),e(ln,ice),e(ice,oXo),e(ln,rXo),e(eo,tXo),e(eo,dn),e(dn,R2),e(R2,dce),e(dce,aXo),e(R2,nXo),e(R2,NN),e(NN,sXo),e(R2,lXo),e(dn,iXo),e(dn,S2),e(S2,cce),e(cce,dXo),e(S2,cXo),e(S2,qN),e(qN,fXo),e(S2,mXo),e(dn,gXo),e(dn,P2),e(P2,fce),e(fce,hXo),e(P2,pXo),e(P2,ON),e(ON,_Xo),e(P2,uXo),e(dn,bXo),e(dn,$2),e($2,mce),e(mce,vXo),e($2,TXo),e($2,GN),e(GN,FXo),e($2,CXo),e(eo,MXo),e(eo,I2),e(I2,EXo),e(I2,gce),e(gce,yXo),e(I2,wXo),e(I2,hce),e(hce,AXo),e(eo,LXo),e(eo,pce),e(pce,BXo),e(eo,xXo),g(Xw,eo,null),b(d,Qxe,u),b(d,Jd,u),e(Jd,j2),e(j2,_ce),g(Vw,_ce,null),e(Jd,kXo),e(Jd,uce),e(uce,RXo),b(d,Hxe,u),b(d,hr,u),g(zw,hr,null),e(hr,SXo),e(hr,Yd),e(Yd,PXo),e(Yd,bce),e(bce,$Xo),e(Yd,IXo),e(Yd,vce),e(vce,jXo),e(Yd,DXo),e(hr,NXo),e(hr,Ww),e(Ww,qXo),e(Ww,Tce),e(Tce,OXo),e(Ww,GXo),e(hr,XXo),e(hr,it),g(Qw,it,null),e(it,VXo),e(it,Fce),e(Fce,zXo),e(it,WXo),e(it,Kd),e(Kd,QXo),e(Kd,Cce),e(Cce,HXo),e(Kd,UXo),e(Kd,Mce),e(Mce,JXo),e(Kd,YXo),e(it,KXo),e(it,Ece),e(Ece,ZXo),e(it,eVo),g(Hw,it,null),e(hr,oVo),e(hr,oo),g(Uw,oo,null),e(oo,rVo),e(oo,yce),e(yce,tVo),e(oo,aVo),e(oo,cn),e(cn,nVo),e(cn,wce),e(wce,sVo),e(cn,lVo),e(cn,Ace),e(Ace,iVo),e(cn,dVo),e(cn,Lce),e(Lce,cVo),e(cn,fVo),e(oo,mVo),e(oo,Zd),e(Zd,D2),e(D2,Bce),e(Bce,gVo),e(D2,hVo),e(D2,XN),e(XN,pVo),e(D2,_Vo),e(Zd,uVo),e(Zd,N2),e(N2,xce),e(xce,bVo),e(N2,vVo),e(N2,VN),e(VN,TVo),e(N2,FVo),e(Zd,CVo),e(Zd,q2),e(q2,kce),e(kce,MVo),e(q2,EVo),e(q2,zN),e(zN,yVo),e(q2,wVo),e(oo,AVo),e(oo,O2),e(O2,LVo),e(O2,Rce),e(Rce,BVo),e(O2,xVo),e(O2,Sce),e(Sce,kVo),e(oo,RVo),e(oo,Pce),e(Pce,SVo),e(oo,PVo),g(Jw,oo,null),b(d,Uxe,u),b(d,ec,u),e(ec,G2),e(G2,$ce),g(Yw,$ce,null),e(ec,$Vo),e(ec,Ice),e(Ice,IVo),b(d,Jxe,u),b(d,pr,u),g(Kw,pr,null),e(pr,jVo),e(pr,oc),e(oc,DVo),e(oc,jce),e(jce,NVo),e(oc,qVo),e(oc,Dce),e(Dce,OVo),e(oc,GVo),e(pr,XVo),e(pr,Zw),e(Zw,VVo),e(Zw,Nce),e(Nce,zVo),e(Zw,WVo),e(pr,QVo),e(pr,dt),g(e6,dt,null),e(dt,HVo),e(dt,qce),e(qce,UVo),e(dt,JVo),e(dt,rc),e(rc,YVo),e(rc,Oce),e(Oce,KVo),e(rc,ZVo),e(rc,Gce),e(Gce,ezo),e(rc,ozo),e(dt,rzo),e(dt,Xce),e(Xce,tzo),e(dt,azo),g(o6,dt,null),e(pr,nzo),e(pr,ro),g(r6,ro,null),e(ro,szo),e(ro,Vce),e(Vce,lzo),e(ro,izo),e(ro,fn),e(fn,dzo),e(fn,zce),e(zce,czo),e(fn,fzo),e(fn,Wce),e(Wce,mzo),e(fn,gzo),e(fn,Qce),e(Qce,hzo),e(fn,pzo),e(ro,_zo),e(ro,Hce),e(Hce,X2),e(X2,Uce),e(Uce,uzo),e(X2,bzo),e(X2,WN),e(WN,vzo),e(X2,Tzo),e(ro,Fzo),e(ro,V2),e(V2,Czo),e(V2,Jce),e(Jce,Mzo),e(V2,Ezo),e(V2,Yce),e(Yce,yzo),e(ro,wzo),e(ro,Kce),e(Kce,Azo),e(ro,Lzo),g(t6,ro,null),b(d,Yxe,u),b(d,tc,u),e(tc,z2),e(z2,Zce),g(a6,Zce,null),e(tc,Bzo),e(tc,efe),e(efe,xzo),b(d,Kxe,u),b(d,_r,u),g(n6,_r,null),e(_r,kzo),e(_r,ac),e(ac,Rzo),e(ac,ofe),e(ofe,Szo),e(ac,Pzo),e(ac,rfe),e(rfe,$zo),e(ac,Izo),e(_r,jzo),e(_r,s6),e(s6,Dzo),e(s6,tfe),e(tfe,Nzo),e(s6,qzo),e(_r,Ozo),e(_r,ct),g(l6,ct,null),e(ct,Gzo),e(ct,afe),e(afe,Xzo),e(ct,Vzo),e(ct,nc),e(nc,zzo),e(nc,nfe),e(nfe,Wzo),e(nc,Qzo),e(nc,sfe),e(sfe,Hzo),e(nc,Uzo),e(ct,Jzo),e(ct,lfe),e(lfe,Yzo),e(ct,Kzo),g(i6,ct,null),e(_r,Zzo),e(_r,to),g(d6,to,null),e(to,eWo),e(to,ife),e(ife,oWo),e(to,rWo),e(to,mn),e(mn,tWo),e(mn,dfe),e(dfe,aWo),e(mn,nWo),e(mn,cfe),e(cfe,sWo),e(mn,lWo),e(mn,ffe),e(ffe,iWo),e(mn,dWo),e(to,cWo),e(to,mfe),e(mfe,W2),e(W2,gfe),e(gfe,fWo),e(W2,mWo),e(W2,QN),e(QN,gWo),e(W2,hWo),e(to,pWo),e(to,Q2),e(Q2,_Wo),e(Q2,hfe),e(hfe,uWo),e(Q2,bWo),e(Q2,pfe),e(pfe,vWo),e(to,TWo),e(to,_fe),e(_fe,FWo),e(to,CWo),g(c6,to,null),b(d,Zxe,u),b(d,sc,u),e(sc,H2),e(H2,ufe),g(f6,ufe,null),e(sc,MWo),e(sc,bfe),e(bfe,EWo),b(d,eke,u),b(d,ur,u),g(m6,ur,null),e(ur,yWo),e(ur,lc),e(lc,wWo),e(lc,vfe),e(vfe,AWo),e(lc,LWo),e(lc,Tfe),e(Tfe,BWo),e(lc,xWo),e(ur,kWo),e(ur,g6),e(g6,RWo),e(g6,Ffe),e(Ffe,SWo),e(g6,PWo),e(ur,$Wo),e(ur,ft),g(h6,ft,null),e(ft,IWo),e(ft,Cfe),e(Cfe,jWo),e(ft,DWo),e(ft,ic),e(ic,NWo),e(ic,Mfe),e(Mfe,qWo),e(ic,OWo),e(ic,Efe),e(Efe,GWo),e(ic,XWo),e(ft,VWo),e(ft,yfe),e(yfe,zWo),e(ft,WWo),g(p6,ft,null),e(ur,QWo),e(ur,ao),g(_6,ao,null),e(ao,HWo),e(ao,wfe),e(wfe,UWo),e(ao,JWo),e(ao,gn),e(gn,YWo),e(gn,Afe),e(Afe,KWo),e(gn,ZWo),e(gn,Lfe),e(Lfe,eQo),e(gn,oQo),e(gn,Bfe),e(Bfe,rQo),e(gn,tQo),e(ao,aQo),e(ao,u6),e(u6,U2),e(U2,xfe),e(xfe,nQo),e(U2,sQo),e(U2,HN),e(HN,lQo),e(U2,iQo),e(u6,dQo),e(u6,J2),e(J2,kfe),e(kfe,cQo),e(J2,fQo),e(J2,UN),e(UN,mQo),e(J2,gQo),e(ao,hQo),e(ao,Y2),e(Y2,pQo),e(Y2,Rfe),e(Rfe,_Qo),e(Y2,uQo),e(Y2,Sfe),e(Sfe,bQo),e(ao,vQo),e(ao,Pfe),e(Pfe,TQo),e(ao,FQo),g(b6,ao,null),b(d,oke,u),b(d,dc,u),e(dc,K2),e(K2,$fe),g(v6,$fe,null),e(dc,CQo),e(dc,Ife),e(Ife,MQo),b(d,rke,u),b(d,br,u),g(T6,br,null),e(br,EQo),e(br,cc),e(cc,yQo),e(cc,jfe),e(jfe,wQo),e(cc,AQo),e(cc,Dfe),e(Dfe,LQo),e(cc,BQo),e(br,xQo),e(br,F6),e(F6,kQo),e(F6,Nfe),e(Nfe,RQo),e(F6,SQo),e(br,PQo),e(br,mt),g(C6,mt,null),e(mt,$Qo),e(mt,qfe),e(qfe,IQo),e(mt,jQo),e(mt,fc),e(fc,DQo),e(fc,Ofe),e(Ofe,NQo),e(fc,qQo),e(fc,Gfe),e(Gfe,OQo),e(fc,GQo),e(mt,XQo),e(mt,Xfe),e(Xfe,VQo),e(mt,zQo),g(M6,mt,null),e(br,WQo),e(br,no),g(E6,no,null),e(no,QQo),e(no,Vfe),e(Vfe,HQo),e(no,UQo),e(no,hn),e(hn,JQo),e(hn,zfe),e(zfe,YQo),e(hn,KQo),e(hn,Wfe),e(Wfe,ZQo),e(hn,eHo),e(hn,Qfe),e(Qfe,oHo),e(hn,rHo),e(no,tHo),e(no,Hfe),e(Hfe,Z2),e(Z2,Ufe),e(Ufe,aHo),e(Z2,nHo),e(Z2,JN),e(JN,sHo),e(Z2,lHo),e(no,iHo),e(no,ev),e(ev,dHo),e(ev,Jfe),e(Jfe,cHo),e(ev,fHo),e(ev,Yfe),e(Yfe,mHo),e(no,gHo),e(no,Kfe),e(Kfe,hHo),e(no,pHo),g(y6,no,null),b(d,tke,u),b(d,mc,u),e(mc,ov),e(ov,Zfe),g(w6,Zfe,null),e(mc,_Ho),e(mc,eme),e(eme,uHo),b(d,ake,u),b(d,vr,u),g(A6,vr,null),e(vr,bHo),e(vr,gc),e(gc,vHo),e(gc,ome),e(ome,THo),e(gc,FHo),e(gc,rme),e(rme,CHo),e(gc,MHo),e(vr,EHo),e(vr,L6),e(L6,yHo),e(L6,tme),e(tme,wHo),e(L6,AHo),e(vr,LHo),e(vr,gt),g(B6,gt,null),e(gt,BHo),e(gt,ame),e(ame,xHo),e(gt,kHo),e(gt,hc),e(hc,RHo),e(hc,nme),e(nme,SHo),e(hc,PHo),e(hc,sme),e(sme,$Ho),e(hc,IHo),e(gt,jHo),e(gt,lme),e(lme,DHo),e(gt,NHo),g(x6,gt,null),e(vr,qHo),e(vr,ho),g(k6,ho,null),e(ho,OHo),e(ho,ime),e(ime,GHo),e(ho,XHo),e(ho,pn),e(pn,VHo),e(pn,dme),e(dme,zHo),e(pn,WHo),e(pn,cme),e(cme,QHo),e(pn,HHo),e(pn,fme),e(fme,UHo),e(pn,JHo),e(ho,YHo),e(ho,B),e(B,rv),e(rv,mme),e(mme,KHo),e(rv,ZHo),e(rv,YN),e(YN,eUo),e(rv,oUo),e(B,rUo),e(B,tv),e(tv,gme),e(gme,tUo),e(tv,aUo),e(tv,KN),e(KN,nUo),e(tv,sUo),e(B,lUo),e(B,av),e(av,hme),e(hme,iUo),e(av,dUo),e(av,ZN),e(ZN,cUo),e(av,fUo),e(B,mUo),e(B,nv),e(nv,pme),e(pme,gUo),e(nv,hUo),e(nv,eq),e(eq,pUo),e(nv,_Uo),e(B,uUo),e(B,sv),e(sv,_me),e(_me,bUo),e(sv,vUo),e(sv,oq),e(oq,TUo),e(sv,FUo),e(B,CUo),e(B,lv),e(lv,ume),e(ume,MUo),e(lv,EUo),e(lv,rq),e(rq,yUo),e(lv,wUo),e(B,AUo),e(B,iv),e(iv,bme),e(bme,LUo),e(iv,BUo),e(iv,tq),e(tq,xUo),e(iv,kUo),e(B,RUo),e(B,dv),e(dv,vme),e(vme,SUo),e(dv,PUo),e(dv,aq),e(aq,$Uo),e(dv,IUo),e(B,jUo),e(B,cv),e(cv,Tme),e(Tme,DUo),e(cv,NUo),e(cv,nq),e(nq,qUo),e(cv,OUo),e(B,GUo),e(B,fv),e(fv,Fme),e(Fme,XUo),e(fv,VUo),e(fv,sq),e(sq,zUo),e(fv,WUo),e(B,QUo),e(B,mv),e(mv,Cme),e(Cme,HUo),e(mv,UUo),e(mv,lq),e(lq,JUo),e(mv,YUo),e(B,KUo),e(B,gv),e(gv,Mme),e(Mme,ZUo),e(gv,eJo),e(gv,iq),e(iq,oJo),e(gv,rJo),e(B,tJo),e(B,hv),e(hv,Eme),e(Eme,aJo),e(hv,nJo),e(hv,dq),e(dq,sJo),e(hv,lJo),e(B,iJo),e(B,pv),e(pv,yme),e(yme,dJo),e(pv,cJo),e(pv,cq),e(cq,fJo),e(pv,mJo),e(B,gJo),e(B,_v),e(_v,wme),e(wme,hJo),e(_v,pJo),e(_v,fq),e(fq,_Jo),e(_v,uJo),e(B,bJo),e(B,uv),e(uv,Ame),e(Ame,vJo),e(uv,TJo),e(uv,mq),e(mq,FJo),e(uv,CJo),e(B,MJo),e(B,Os),e(Os,Lme),e(Lme,EJo),e(Os,yJo),e(Os,gq),e(gq,wJo),e(Os,AJo),e(Os,hq),e(hq,LJo),e(Os,BJo),e(B,xJo),e(B,bv),e(bv,Bme),e(Bme,kJo),e(bv,RJo),e(bv,pq),e(pq,SJo),e(bv,PJo),e(B,$Jo),e(B,vv),e(vv,xme),e(xme,IJo),e(vv,jJo),e(vv,_q),e(_q,DJo),e(vv,NJo),e(B,qJo),e(B,Tv),e(Tv,kme),e(kme,OJo),e(Tv,GJo),e(Tv,uq),e(uq,XJo),e(Tv,VJo),e(B,zJo),e(B,Fv),e(Fv,Rme),e(Rme,WJo),e(Fv,QJo),e(Fv,bq),e(bq,HJo),e(Fv,UJo),e(B,JJo),e(B,Cv),e(Cv,Sme),e(Sme,YJo),e(Cv,KJo),e(Cv,vq),e(vq,ZJo),e(Cv,eYo),e(B,oYo),e(B,Mv),e(Mv,Pme),e(Pme,rYo),e(Mv,tYo),e(Mv,Tq),e(Tq,aYo),e(Mv,nYo),e(B,sYo),e(B,Ev),e(Ev,$me),e($me,lYo),e(Ev,iYo),e(Ev,Fq),e(Fq,dYo),e(Ev,cYo),e(B,fYo),e(B,yv),e(yv,Ime),e(Ime,mYo),e(yv,gYo),e(yv,Cq),e(Cq,hYo),e(yv,pYo),e(B,_Yo),e(B,wv),e(wv,jme),e(jme,uYo),e(wv,bYo),e(wv,Mq),e(Mq,vYo),e(wv,TYo),e(B,FYo),e(B,Av),e(Av,Dme),e(Dme,CYo),e(Av,MYo),e(Av,Eq),e(Eq,EYo),e(Av,yYo),e(B,wYo),e(B,Lv),e(Lv,Nme),e(Nme,AYo),e(Lv,LYo),e(Lv,yq),e(yq,BYo),e(Lv,xYo),e(B,kYo),e(B,Bv),e(Bv,qme),e(qme,RYo),e(Bv,SYo),e(Bv,wq),e(wq,PYo),e(Bv,$Yo),e(B,IYo),e(B,xv),e(xv,Ome),e(Ome,jYo),e(xv,DYo),e(xv,Aq),e(Aq,NYo),e(xv,qYo),e(B,OYo),e(B,kv),e(kv,Gme),e(Gme,GYo),e(kv,XYo),e(kv,Lq),e(Lq,VYo),e(kv,zYo),e(B,WYo),e(B,Rv),e(Rv,Xme),e(Xme,QYo),e(Rv,HYo),e(Rv,Bq),e(Bq,UYo),e(Rv,JYo),e(B,YYo),e(B,Sv),e(Sv,Vme),e(Vme,KYo),e(Sv,ZYo),e(Sv,xq),e(xq,eKo),e(Sv,oKo),e(B,rKo),e(B,Pv),e(Pv,zme),e(zme,tKo),e(Pv,aKo),e(Pv,kq),e(kq,nKo),e(Pv,sKo),e(B,lKo),e(B,$v),e($v,Wme),e(Wme,iKo),e($v,dKo),e($v,Rq),e(Rq,cKo),e($v,fKo),e(B,mKo),e(B,Iv),e(Iv,Qme),e(Qme,gKo),e(Iv,hKo),e(Iv,Sq),e(Sq,pKo),e(Iv,_Ko),e(B,uKo),e(B,jv),e(jv,Hme),e(Hme,bKo),e(jv,vKo),e(jv,Pq),e(Pq,TKo),e(jv,FKo),e(B,CKo),e(B,Dv),e(Dv,Ume),e(Ume,MKo),e(Dv,EKo),e(Dv,$q),e($q,yKo),e(Dv,wKo),e(B,AKo),e(B,Nv),e(Nv,Jme),e(Jme,LKo),e(Nv,BKo),e(Nv,Iq),e(Iq,xKo),e(Nv,kKo),e(B,RKo),e(B,qv),e(qv,Yme),e(Yme,SKo),e(qv,PKo),e(qv,jq),e(jq,$Ko),e(qv,IKo),e(B,jKo),e(B,Ov),e(Ov,Kme),e(Kme,DKo),e(Ov,NKo),e(Ov,Dq),e(Dq,qKo),e(Ov,OKo),e(B,GKo),e(B,Gv),e(Gv,Zme),e(Zme,XKo),e(Gv,VKo),e(Gv,Nq),e(Nq,zKo),e(Gv,WKo),e(ho,QKo),e(ho,ege),e(ege,HKo),e(ho,UKo),g(R6,ho,null),b(d,nke,u),b(d,pc,u),e(pc,Xv),e(Xv,oge),g(S6,oge,null),e(pc,JKo),e(pc,rge),e(rge,YKo),b(d,ske,u),b(d,Tr,u),g(P6,Tr,null),e(Tr,KKo),e(Tr,_c),e(_c,ZKo),e(_c,tge),e(tge,eZo),e(_c,oZo),e(_c,age),e(age,rZo),e(_c,tZo),e(Tr,aZo),e(Tr,$6),e($6,nZo),e($6,nge),e(nge,sZo),e($6,lZo),e(Tr,iZo),e(Tr,ht),g(I6,ht,null),e(ht,dZo),e(ht,sge),e(sge,cZo),e(ht,fZo),e(ht,uc),e(uc,mZo),e(uc,lge),e(lge,gZo),e(uc,hZo),e(uc,ige),e(ige,pZo),e(uc,_Zo),e(ht,uZo),e(ht,dge),e(dge,bZo),e(ht,vZo),g(j6,ht,null),e(Tr,TZo),e(Tr,po),g(D6,po,null),e(po,FZo),e(po,cge),e(cge,CZo),e(po,MZo),e(po,_n),e(_n,EZo),e(_n,fge),e(fge,yZo),e(_n,wZo),e(_n,mge),e(mge,AZo),e(_n,LZo),e(_n,gge),e(gge,BZo),e(_n,xZo),e(po,kZo),e(po,H),e(H,Vv),e(Vv,hge),e(hge,RZo),e(Vv,SZo),e(Vv,qq),e(qq,PZo),e(Vv,$Zo),e(H,IZo),e(H,zv),e(zv,pge),e(pge,jZo),e(zv,DZo),e(zv,Oq),e(Oq,NZo),e(zv,qZo),e(H,OZo),e(H,Wv),e(Wv,_ge),e(_ge,GZo),e(Wv,XZo),e(Wv,Gq),e(Gq,VZo),e(Wv,zZo),e(H,WZo),e(H,Qv),e(Qv,uge),e(uge,QZo),e(Qv,HZo),e(Qv,Xq),e(Xq,UZo),e(Qv,JZo),e(H,YZo),e(H,Hv),e(Hv,bge),e(bge,KZo),e(Hv,ZZo),e(Hv,Vq),e(Vq,eer),e(Hv,oer),e(H,rer),e(H,Uv),e(Uv,vge),e(vge,ter),e(Uv,aer),e(Uv,zq),e(zq,ner),e(Uv,ser),e(H,ler),e(H,Jv),e(Jv,Tge),e(Tge,ier),e(Jv,der),e(Jv,Wq),e(Wq,cer),e(Jv,fer),e(H,mer),e(H,Yv),e(Yv,Fge),e(Fge,ger),e(Yv,her),e(Yv,Qq),e(Qq,per),e(Yv,_er),e(H,uer),e(H,Kv),e(Kv,Cge),e(Cge,ber),e(Kv,ver),e(Kv,Hq),e(Hq,Ter),e(Kv,Fer),e(H,Cer),e(H,Zv),e(Zv,Mge),e(Mge,Mer),e(Zv,Eer),e(Zv,Uq),e(Uq,yer),e(Zv,wer),e(H,Aer),e(H,eT),e(eT,Ege),e(Ege,Ler),e(eT,Ber),e(eT,Jq),e(Jq,xer),e(eT,ker),e(H,Rer),e(H,oT),e(oT,yge),e(yge,Ser),e(oT,Per),e(oT,Yq),e(Yq,$er),e(oT,Ier),e(H,jer),e(H,rT),e(rT,wge),e(wge,Der),e(rT,Ner),e(rT,Kq),e(Kq,qer),e(rT,Oer),e(H,Ger),e(H,tT),e(tT,Age),e(Age,Xer),e(tT,Ver),e(tT,Zq),e(Zq,zer),e(tT,Wer),e(H,Qer),e(H,aT),e(aT,Lge),e(Lge,Her),e(aT,Uer),e(aT,eO),e(eO,Jer),e(aT,Yer),e(H,Ker),e(H,nT),e(nT,Bge),e(Bge,Zer),e(nT,eor),e(nT,oO),e(oO,oor),e(nT,ror),e(H,tor),e(H,sT),e(sT,xge),e(xge,aor),e(sT,nor),e(sT,rO),e(rO,sor),e(sT,lor),e(H,ior),e(H,lT),e(lT,kge),e(kge,dor),e(lT,cor),e(lT,tO),e(tO,mor),e(lT,gor),e(H,hor),e(H,iT),e(iT,Rge),e(Rge,por),e(iT,_or),e(iT,aO),e(aO,uor),e(iT,bor),e(H,vor),e(H,dT),e(dT,Sge),e(Sge,Tor),e(dT,For),e(dT,nO),e(nO,Cor),e(dT,Mor),e(H,Eor),e(H,cT),e(cT,Pge),e(Pge,yor),e(cT,wor),e(cT,sO),e(sO,Aor),e(cT,Lor),e(H,Bor),e(H,fT),e(fT,$ge),e($ge,xor),e(fT,kor),e(fT,lO),e(lO,Ror),e(fT,Sor),e(po,Por),e(po,Ige),e(Ige,$or),e(po,Ior),g(N6,po,null),b(d,lke,u),b(d,bc,u),e(bc,mT),e(mT,jge),g(q6,jge,null),e(bc,jor),e(bc,Dge),e(Dge,Dor),b(d,ike,u),b(d,Fr,u),g(O6,Fr,null),e(Fr,Nor),e(Fr,vc),e(vc,qor),e(vc,Nge),e(Nge,Oor),e(vc,Gor),e(vc,qge),e(qge,Xor),e(vc,Vor),e(Fr,zor),e(Fr,G6),e(G6,Wor),e(G6,Oge),e(Oge,Qor),e(G6,Hor),e(Fr,Uor),e(Fr,pt),g(X6,pt,null),e(pt,Jor),e(pt,Gge),e(Gge,Yor),e(pt,Kor),e(pt,Tc),e(Tc,Zor),e(Tc,Xge),e(Xge,err),e(Tc,orr),e(Tc,Vge),e(Vge,rrr),e(Tc,trr),e(pt,arr),e(pt,zge),e(zge,nrr),e(pt,srr),g(V6,pt,null),e(Fr,lrr),e(Fr,_o),g(z6,_o,null),e(_o,irr),e(_o,Wge),e(Wge,drr),e(_o,crr),e(_o,un),e(un,frr),e(un,Qge),e(Qge,mrr),e(un,grr),e(un,Hge),e(Hge,hrr),e(un,prr),e(un,Uge),e(Uge,_rr),e(un,urr),e(_o,brr),e(_o,pe),e(pe,gT),e(gT,Jge),e(Jge,vrr),e(gT,Trr),e(gT,iO),e(iO,Frr),e(gT,Crr),e(pe,Mrr),e(pe,hT),e(hT,Yge),e(Yge,Err),e(hT,yrr),e(hT,dO),e(dO,wrr),e(hT,Arr),e(pe,Lrr),e(pe,pT),e(pT,Kge),e(Kge,Brr),e(pT,xrr),e(pT,cO),e(cO,krr),e(pT,Rrr),e(pe,Srr),e(pe,_T),e(_T,Zge),e(Zge,Prr),e(_T,$rr),e(_T,fO),e(fO,Irr),e(_T,jrr),e(pe,Drr),e(pe,uT),e(uT,ehe),e(ehe,Nrr),e(uT,qrr),e(uT,mO),e(mO,Orr),e(uT,Grr),e(pe,Xrr),e(pe,bT),e(bT,ohe),e(ohe,Vrr),e(bT,zrr),e(bT,gO),e(gO,Wrr),e(bT,Qrr),e(pe,Hrr),e(pe,vT),e(vT,rhe),e(rhe,Urr),e(vT,Jrr),e(vT,hO),e(hO,Yrr),e(vT,Krr),e(pe,Zrr),e(pe,TT),e(TT,the),e(the,etr),e(TT,otr),e(TT,pO),e(pO,rtr),e(TT,ttr),e(pe,atr),e(pe,FT),e(FT,ahe),e(ahe,ntr),e(FT,str),e(FT,_O),e(_O,ltr),e(FT,itr),e(pe,dtr),e(pe,CT),e(CT,nhe),e(nhe,ctr),e(CT,ftr),e(CT,uO),e(uO,mtr),e(CT,gtr),e(_o,htr),e(_o,she),e(she,ptr),e(_o,_tr),g(W6,_o,null),b(d,dke,u),b(d,Fc,u),e(Fc,MT),e(MT,lhe),g(Q6,lhe,null),e(Fc,utr),e(Fc,ihe),e(ihe,btr),b(d,cke,u),b(d,Cr,u),g(H6,Cr,null),e(Cr,vtr),e(Cr,Cc),e(Cc,Ttr),e(Cc,dhe),e(dhe,Ftr),e(Cc,Ctr),e(Cc,che),e(che,Mtr),e(Cc,Etr),e(Cr,ytr),e(Cr,U6),e(U6,wtr),e(U6,fhe),e(fhe,Atr),e(U6,Ltr),e(Cr,Btr),e(Cr,_t),g(J6,_t,null),e(_t,xtr),e(_t,mhe),e(mhe,ktr),e(_t,Rtr),e(_t,Mc),e(Mc,Str),e(Mc,ghe),e(ghe,Ptr),e(Mc,$tr),e(Mc,hhe),e(hhe,Itr),e(Mc,jtr),e(_t,Dtr),e(_t,phe),e(phe,Ntr),e(_t,qtr),g(Y6,_t,null),e(Cr,Otr),e(Cr,uo),g(K6,uo,null),e(uo,Gtr),e(uo,_he),e(_he,Xtr),e(uo,Vtr),e(uo,bn),e(bn,ztr),e(bn,uhe),e(uhe,Wtr),e(bn,Qtr),e(bn,bhe),e(bhe,Htr),e(bn,Utr),e(bn,vhe),e(vhe,Jtr),e(bn,Ytr),e(uo,Ktr),e(uo,Z6),e(Z6,ET),e(ET,The),e(The,Ztr),e(ET,ear),e(ET,bO),e(bO,oar),e(ET,rar),e(Z6,tar),e(Z6,yT),e(yT,Fhe),e(Fhe,aar),e(yT,nar),e(yT,vO),e(vO,sar),e(yT,lar),e(uo,iar),e(uo,Che),e(Che,dar),e(uo,car),g(eA,uo,null),b(d,fke,u),b(d,Ec,u),e(Ec,wT),e(wT,Mhe),g(oA,Mhe,null),e(Ec,far),e(Ec,Ehe),e(Ehe,mar),b(d,mke,u),b(d,Mr,u),g(rA,Mr,null),e(Mr,gar),e(Mr,yc),e(yc,har),e(yc,yhe),e(yhe,par),e(yc,_ar),e(yc,whe),e(whe,uar),e(yc,bar),e(Mr,Tar),e(Mr,tA),e(tA,Far),e(tA,Ahe),e(Ahe,Car),e(tA,Mar),e(Mr,Ear),e(Mr,ut),g(aA,ut,null),e(ut,yar),e(ut,Lhe),e(Lhe,war),e(ut,Aar),e(ut,wc),e(wc,Lar),e(wc,Bhe),e(Bhe,Bar),e(wc,xar),e(wc,xhe),e(xhe,kar),e(wc,Rar),e(ut,Sar),e(ut,khe),e(khe,Par),e(ut,$ar),g(nA,ut,null),e(Mr,Iar),e(Mr,bo),g(sA,bo,null),e(bo,jar),e(bo,Rhe),e(Rhe,Dar),e(bo,Nar),e(bo,vn),e(vn,qar),e(vn,She),e(She,Oar),e(vn,Gar),e(vn,Phe),e(Phe,Xar),e(vn,Var),e(vn,$he),e($he,zar),e(vn,War),e(bo,Qar),e(bo,Y),e(Y,AT),e(AT,Ihe),e(Ihe,Har),e(AT,Uar),e(AT,TO),e(TO,Jar),e(AT,Yar),e(Y,Kar),e(Y,LT),e(LT,jhe),e(jhe,Zar),e(LT,enr),e(LT,FO),e(FO,onr),e(LT,rnr),e(Y,tnr),e(Y,BT),e(BT,Dhe),e(Dhe,anr),e(BT,nnr),e(BT,CO),e(CO,snr),e(BT,lnr),e(Y,inr),e(Y,xT),e(xT,Nhe),e(Nhe,dnr),e(xT,cnr),e(xT,MO),e(MO,fnr),e(xT,mnr),e(Y,gnr),e(Y,kT),e(kT,qhe),e(qhe,hnr),e(kT,pnr),e(kT,EO),e(EO,_nr),e(kT,unr),e(Y,bnr),e(Y,RT),e(RT,Ohe),e(Ohe,vnr),e(RT,Tnr),e(RT,yO),e(yO,Fnr),e(RT,Cnr),e(Y,Mnr),e(Y,ST),e(ST,Ghe),e(Ghe,Enr),e(ST,ynr),e(ST,wO),e(wO,wnr),e(ST,Anr),e(Y,Lnr),e(Y,PT),e(PT,Xhe),e(Xhe,Bnr),e(PT,xnr),e(PT,AO),e(AO,knr),e(PT,Rnr),e(Y,Snr),e(Y,$T),e($T,Vhe),e(Vhe,Pnr),e($T,$nr),e($T,LO),e(LO,Inr),e($T,jnr),e(Y,Dnr),e(Y,IT),e(IT,zhe),e(zhe,Nnr),e(IT,qnr),e(IT,BO),e(BO,Onr),e(IT,Gnr),e(Y,Xnr),e(Y,jT),e(jT,Whe),e(Whe,Vnr),e(jT,znr),e(jT,xO),e(xO,Wnr),e(jT,Qnr),e(Y,Hnr),e(Y,DT),e(DT,Qhe),e(Qhe,Unr),e(DT,Jnr),e(DT,kO),e(kO,Ynr),e(DT,Knr),e(Y,Znr),e(Y,NT),e(NT,Hhe),e(Hhe,esr),e(NT,osr),e(NT,RO),e(RO,rsr),e(NT,tsr),e(Y,asr),e(Y,qT),e(qT,Uhe),e(Uhe,nsr),e(qT,ssr),e(qT,SO),e(SO,lsr),e(qT,isr),e(Y,dsr),e(Y,OT),e(OT,Jhe),e(Jhe,csr),e(OT,fsr),e(OT,PO),e(PO,msr),e(OT,gsr),e(Y,hsr),e(Y,GT),e(GT,Yhe),e(Yhe,psr),e(GT,_sr),e(GT,$O),e($O,usr),e(GT,bsr),e(Y,vsr),e(Y,XT),e(XT,Khe),e(Khe,Tsr),e(XT,Fsr),e(XT,IO),e(IO,Csr),e(XT,Msr),e(Y,Esr),e(Y,VT),e(VT,Zhe),e(Zhe,ysr),e(VT,wsr),e(VT,jO),e(jO,Asr),e(VT,Lsr),e(Y,Bsr),e(Y,zT),e(zT,epe),e(epe,xsr),e(zT,ksr),e(zT,DO),e(DO,Rsr),e(zT,Ssr),e(Y,Psr),e(Y,WT),e(WT,ope),e(ope,$sr),e(WT,Isr),e(WT,NO),e(NO,jsr),e(WT,Dsr),e(bo,Nsr),e(bo,rpe),e(rpe,qsr),e(bo,Osr),g(lA,bo,null),b(d,gke,u),b(d,Ac,u),e(Ac,QT),e(QT,tpe),g(iA,tpe,null),e(Ac,Gsr),e(Ac,ape),e(ape,Xsr),b(d,hke,u),b(d,Er,u),g(dA,Er,null),e(Er,Vsr),e(Er,Lc),e(Lc,zsr),e(Lc,npe),e(npe,Wsr),e(Lc,Qsr),e(Lc,spe),e(spe,Hsr),e(Lc,Usr),e(Er,Jsr),e(Er,cA),e(cA,Ysr),e(cA,lpe),e(lpe,Ksr),e(cA,Zsr),e(Er,elr),e(Er,bt),g(fA,bt,null),e(bt,olr),e(bt,ipe),e(ipe,rlr),e(bt,tlr),e(bt,Bc),e(Bc,alr),e(Bc,dpe),e(dpe,nlr),e(Bc,slr),e(Bc,cpe),e(cpe,llr),e(Bc,ilr),e(bt,dlr),e(bt,fpe),e(fpe,clr),e(bt,flr),g(mA,bt,null),e(Er,mlr),e(Er,vo),g(gA,vo,null),e(vo,glr),e(vo,mpe),e(mpe,hlr),e(vo,plr),e(vo,Tn),e(Tn,_lr),e(Tn,gpe),e(gpe,ulr),e(Tn,blr),e(Tn,hpe),e(hpe,vlr),e(Tn,Tlr),e(Tn,ppe),e(ppe,Flr),e(Tn,Clr),e(vo,Mlr),e(vo,_e),e(_e,HT),e(HT,_pe),e(_pe,Elr),e(HT,ylr),e(HT,qO),e(qO,wlr),e(HT,Alr),e(_e,Llr),e(_e,UT),e(UT,upe),e(upe,Blr),e(UT,xlr),e(UT,OO),e(OO,klr),e(UT,Rlr),e(_e,Slr),e(_e,JT),e(JT,bpe),e(bpe,Plr),e(JT,$lr),e(JT,GO),e(GO,Ilr),e(JT,jlr),e(_e,Dlr),e(_e,YT),e(YT,vpe),e(vpe,Nlr),e(YT,qlr),e(YT,XO),e(XO,Olr),e(YT,Glr),e(_e,Xlr),e(_e,KT),e(KT,Tpe),e(Tpe,Vlr),e(KT,zlr),e(KT,VO),e(VO,Wlr),e(KT,Qlr),e(_e,Hlr),e(_e,ZT),e(ZT,Fpe),e(Fpe,Ulr),e(ZT,Jlr),e(ZT,zO),e(zO,Ylr),e(ZT,Klr),e(_e,Zlr),e(_e,e8),e(e8,Cpe),e(Cpe,eir),e(e8,oir),e(e8,WO),e(WO,rir),e(e8,tir),e(_e,air),e(_e,o8),e(o8,Mpe),e(Mpe,nir),e(o8,sir),e(o8,QO),e(QO,lir),e(o8,iir),e(_e,dir),e(_e,r8),e(r8,Epe),e(Epe,cir),e(r8,fir),e(r8,HO),e(HO,mir),e(r8,gir),e(_e,hir),e(_e,t8),e(t8,ype),e(ype,pir),e(t8,_ir),e(t8,UO),e(UO,uir),e(t8,bir),e(vo,vir),e(vo,wpe),e(wpe,Tir),e(vo,Fir),g(hA,vo,null),b(d,pke,u),b(d,xc,u),e(xc,a8),e(a8,Ape),g(pA,Ape,null),e(xc,Cir),e(xc,Lpe),e(Lpe,Mir),b(d,_ke,u),b(d,yr,u),g(_A,yr,null),e(yr,Eir),e(yr,kc),e(kc,yir),e(kc,Bpe),e(Bpe,wir),e(kc,Air),e(kc,xpe),e(xpe,Lir),e(kc,Bir),e(yr,xir),e(yr,uA),e(uA,kir),e(uA,kpe),e(kpe,Rir),e(uA,Sir),e(yr,Pir),e(yr,vt),g(bA,vt,null),e(vt,$ir),e(vt,Rpe),e(Rpe,Iir),e(vt,jir),e(vt,Rc),e(Rc,Dir),e(Rc,Spe),e(Spe,Nir),e(Rc,qir),e(Rc,Ppe),e(Ppe,Oir),e(Rc,Gir),e(vt,Xir),e(vt,$pe),e($pe,Vir),e(vt,zir),g(vA,vt,null),e(yr,Wir),e(yr,To),g(TA,To,null),e(To,Qir),e(To,Ipe),e(Ipe,Hir),e(To,Uir),e(To,Fn),e(Fn,Jir),e(Fn,jpe),e(jpe,Yir),e(Fn,Kir),e(Fn,Dpe),e(Dpe,Zir),e(Fn,edr),e(Fn,Npe),e(Npe,odr),e(Fn,rdr),e(To,tdr),e(To,V),e(V,n8),e(n8,qpe),e(qpe,adr),e(n8,ndr),e(n8,JO),e(JO,sdr),e(n8,ldr),e(V,idr),e(V,s8),e(s8,Ope),e(Ope,ddr),e(s8,cdr),e(s8,YO),e(YO,fdr),e(s8,mdr),e(V,gdr),e(V,l8),e(l8,Gpe),e(Gpe,hdr),e(l8,pdr),e(l8,KO),e(KO,_dr),e(l8,udr),e(V,bdr),e(V,i8),e(i8,Xpe),e(Xpe,vdr),e(i8,Tdr),e(i8,ZO),e(ZO,Fdr),e(i8,Cdr),e(V,Mdr),e(V,d8),e(d8,Vpe),e(Vpe,Edr),e(d8,ydr),e(d8,eG),e(eG,wdr),e(d8,Adr),e(V,Ldr),e(V,c8),e(c8,zpe),e(zpe,Bdr),e(c8,xdr),e(c8,oG),e(oG,kdr),e(c8,Rdr),e(V,Sdr),e(V,f8),e(f8,Wpe),e(Wpe,Pdr),e(f8,$dr),e(f8,rG),e(rG,Idr),e(f8,jdr),e(V,Ddr),e(V,m8),e(m8,Qpe),e(Qpe,Ndr),e(m8,qdr),e(m8,tG),e(tG,Odr),e(m8,Gdr),e(V,Xdr),e(V,g8),e(g8,Hpe),e(Hpe,Vdr),e(g8,zdr),e(g8,aG),e(aG,Wdr),e(g8,Qdr),e(V,Hdr),e(V,h8),e(h8,Upe),e(Upe,Udr),e(h8,Jdr),e(h8,nG),e(nG,Ydr),e(h8,Kdr),e(V,Zdr),e(V,p8),e(p8,Jpe),e(Jpe,ecr),e(p8,ocr),e(p8,sG),e(sG,rcr),e(p8,tcr),e(V,acr),e(V,_8),e(_8,Ype),e(Ype,ncr),e(_8,scr),e(_8,lG),e(lG,lcr),e(_8,icr),e(V,dcr),e(V,u8),e(u8,Kpe),e(Kpe,ccr),e(u8,fcr),e(u8,iG),e(iG,mcr),e(u8,gcr),e(V,hcr),e(V,b8),e(b8,Zpe),e(Zpe,pcr),e(b8,_cr),e(b8,dG),e(dG,ucr),e(b8,bcr),e(V,vcr),e(V,v8),e(v8,e_e),e(e_e,Tcr),e(v8,Fcr),e(v8,cG),e(cG,Ccr),e(v8,Mcr),e(V,Ecr),e(V,T8),e(T8,o_e),e(o_e,ycr),e(T8,wcr),e(T8,fG),e(fG,Acr),e(T8,Lcr),e(V,Bcr),e(V,F8),e(F8,r_e),e(r_e,xcr),e(F8,kcr),e(F8,mG),e(mG,Rcr),e(F8,Scr),e(V,Pcr),e(V,C8),e(C8,t_e),e(t_e,$cr),e(C8,Icr),e(C8,gG),e(gG,jcr),e(C8,Dcr),e(V,Ncr),e(V,M8),e(M8,a_e),e(a_e,qcr),e(M8,Ocr),e(M8,hG),e(hG,Gcr),e(M8,Xcr),e(V,Vcr),e(V,E8),e(E8,n_e),e(n_e,zcr),e(E8,Wcr),e(E8,pG),e(pG,Qcr),e(E8,Hcr),e(V,Ucr),e(V,y8),e(y8,s_e),e(s_e,Jcr),e(y8,Ycr),e(y8,_G),e(_G,Kcr),e(y8,Zcr),e(V,efr),e(V,w8),e(w8,l_e),e(l_e,ofr),e(w8,rfr),e(w8,uG),e(uG,tfr),e(w8,afr),e(V,nfr),e(V,A8),e(A8,i_e),e(i_e,sfr),e(A8,lfr),e(A8,bG),e(bG,ifr),e(A8,dfr),e(V,cfr),e(V,L8),e(L8,d_e),e(d_e,ffr),e(L8,mfr),e(L8,vG),e(vG,gfr),e(L8,hfr),e(V,pfr),e(V,B8),e(B8,c_e),e(c_e,_fr),e(B8,ufr),e(B8,TG),e(TG,bfr),e(B8,vfr),e(To,Tfr),e(To,f_e),e(f_e,Ffr),e(To,Cfr),g(FA,To,null),b(d,uke,u),b(d,Sc,u),e(Sc,x8),e(x8,m_e),g(CA,m_e,null),e(Sc,Mfr),e(Sc,g_e),e(g_e,Efr),b(d,bke,u),b(d,wr,u),g(MA,wr,null),e(wr,yfr),e(wr,Pc),e(Pc,wfr),e(Pc,h_e),e(h_e,Afr),e(Pc,Lfr),e(Pc,p_e),e(p_e,Bfr),e(Pc,xfr),e(wr,kfr),e(wr,EA),e(EA,Rfr),e(EA,__e),e(__e,Sfr),e(EA,Pfr),e(wr,$fr),e(wr,Tt),g(yA,Tt,null),e(Tt,Ifr),e(Tt,u_e),e(u_e,jfr),e(Tt,Dfr),e(Tt,$c),e($c,Nfr),e($c,b_e),e(b_e,qfr),e($c,Ofr),e($c,v_e),e(v_e,Gfr),e($c,Xfr),e(Tt,Vfr),e(Tt,T_e),e(T_e,zfr),e(Tt,Wfr),g(wA,Tt,null),e(wr,Qfr),e(wr,Fo),g(AA,Fo,null),e(Fo,Hfr),e(Fo,F_e),e(F_e,Ufr),e(Fo,Jfr),e(Fo,Cn),e(Cn,Yfr),e(Cn,C_e),e(C_e,Kfr),e(Cn,Zfr),e(Cn,M_e),e(M_e,emr),e(Cn,omr),e(Cn,E_e),e(E_e,rmr),e(Cn,tmr),e(Fo,amr),e(Fo,te),e(te,k8),e(k8,y_e),e(y_e,nmr),e(k8,smr),e(k8,FG),e(FG,lmr),e(k8,imr),e(te,dmr),e(te,R8),e(R8,w_e),e(w_e,cmr),e(R8,fmr),e(R8,CG),e(CG,mmr),e(R8,gmr),e(te,hmr),e(te,S8),e(S8,A_e),e(A_e,pmr),e(S8,_mr),e(S8,MG),e(MG,umr),e(S8,bmr),e(te,vmr),e(te,P8),e(P8,L_e),e(L_e,Tmr),e(P8,Fmr),e(P8,EG),e(EG,Cmr),e(P8,Mmr),e(te,Emr),e(te,$8),e($8,B_e),e(B_e,ymr),e($8,wmr),e($8,yG),e(yG,Amr),e($8,Lmr),e(te,Bmr),e(te,I8),e(I8,x_e),e(x_e,xmr),e(I8,kmr),e(I8,wG),e(wG,Rmr),e(I8,Smr),e(te,Pmr),e(te,j8),e(j8,k_e),e(k_e,$mr),e(j8,Imr),e(j8,AG),e(AG,jmr),e(j8,Dmr),e(te,Nmr),e(te,D8),e(D8,R_e),e(R_e,qmr),e(D8,Omr),e(D8,LG),e(LG,Gmr),e(D8,Xmr),e(te,Vmr),e(te,N8),e(N8,S_e),e(S_e,zmr),e(N8,Wmr),e(N8,BG),e(BG,Qmr),e(N8,Hmr),e(te,Umr),e(te,q8),e(q8,P_e),e(P_e,Jmr),e(q8,Ymr),e(q8,xG),e(xG,Kmr),e(q8,Zmr),e(te,egr),e(te,O8),e(O8,$_e),e($_e,ogr),e(O8,rgr),e(O8,kG),e(kG,tgr),e(O8,agr),e(te,ngr),e(te,G8),e(G8,I_e),e(I_e,sgr),e(G8,lgr),e(G8,RG),e(RG,igr),e(G8,dgr),e(te,cgr),e(te,X8),e(X8,j_e),e(j_e,fgr),e(X8,mgr),e(X8,SG),e(SG,ggr),e(X8,hgr),e(te,pgr),e(te,V8),e(V8,D_e),e(D_e,_gr),e(V8,ugr),e(V8,PG),e(PG,bgr),e(V8,vgr),e(te,Tgr),e(te,z8),e(z8,N_e),e(N_e,Fgr),e(z8,Cgr),e(z8,$G),e($G,Mgr),e(z8,Egr),e(te,ygr),e(te,W8),e(W8,q_e),e(q_e,wgr),e(W8,Agr),e(W8,IG),e(IG,Lgr),e(W8,Bgr),e(te,xgr),e(te,Q8),e(Q8,O_e),e(O_e,kgr),e(Q8,Rgr),e(Q8,jG),e(jG,Sgr),e(Q8,Pgr),e(Fo,$gr),e(Fo,G_e),e(G_e,Igr),e(Fo,jgr),g(LA,Fo,null),b(d,vke,u),b(d,Ic,u),e(Ic,H8),e(H8,X_e),g(BA,X_e,null),e(Ic,Dgr),e(Ic,V_e),e(V_e,Ngr),b(d,Tke,u),b(d,Ar,u),g(xA,Ar,null),e(Ar,qgr),e(Ar,jc),e(jc,Ogr),e(jc,z_e),e(z_e,Ggr),e(jc,Xgr),e(jc,W_e),e(W_e,Vgr),e(jc,zgr),e(Ar,Wgr),e(Ar,kA),e(kA,Qgr),e(kA,Q_e),e(Q_e,Hgr),e(kA,Ugr),e(Ar,Jgr),e(Ar,Ft),g(RA,Ft,null),e(Ft,Ygr),e(Ft,H_e),e(H_e,Kgr),e(Ft,Zgr),e(Ft,Dc),e(Dc,ehr),e(Dc,U_e),e(U_e,ohr),e(Dc,rhr),e(Dc,J_e),e(J_e,thr),e(Dc,ahr),e(Ft,nhr),e(Ft,Y_e),e(Y_e,shr),e(Ft,lhr),g(SA,Ft,null),e(Ar,ihr),e(Ar,Co),g(PA,Co,null),e(Co,dhr),e(Co,K_e),e(K_e,chr),e(Co,fhr),e(Co,Mn),e(Mn,mhr),e(Mn,Z_e),e(Z_e,ghr),e(Mn,hhr),e(Mn,eue),e(eue,phr),e(Mn,_hr),e(Mn,oue),e(oue,uhr),e(Mn,bhr),e(Co,vhr),e(Co,rue),e(rue,U8),e(U8,tue),e(tue,Thr),e(U8,Fhr),e(U8,DG),e(DG,Chr),e(U8,Mhr),e(Co,Ehr),e(Co,aue),e(aue,yhr),e(Co,whr),g($A,Co,null),b(d,Fke,u),b(d,Nc,u),e(Nc,J8),e(J8,nue),g(IA,nue,null),e(Nc,Ahr),e(Nc,sue),e(sue,Lhr),b(d,Cke,u),b(d,Lr,u),g(jA,Lr,null),e(Lr,Bhr),e(Lr,qc),e(qc,xhr),e(qc,lue),e(lue,khr),e(qc,Rhr),e(qc,iue),e(iue,Shr),e(qc,Phr),e(Lr,$hr),e(Lr,DA),e(DA,Ihr),e(DA,due),e(due,jhr),e(DA,Dhr),e(Lr,Nhr),e(Lr,Ct),g(NA,Ct,null),e(Ct,qhr),e(Ct,cue),e(cue,Ohr),e(Ct,Ghr),e(Ct,Oc),e(Oc,Xhr),e(Oc,fue),e(fue,Vhr),e(Oc,zhr),e(Oc,mue),e(mue,Whr),e(Oc,Qhr),e(Ct,Hhr),e(Ct,gue),e(gue,Uhr),e(Ct,Jhr),g(qA,Ct,null),e(Lr,Yhr),e(Lr,Mo),g(OA,Mo,null),e(Mo,Khr),e(Mo,hue),e(hue,Zhr),e(Mo,epr),e(Mo,En),e(En,opr),e(En,pue),e(pue,rpr),e(En,tpr),e(En,_ue),e(_ue,apr),e(En,npr),e(En,uue),e(uue,spr),e(En,lpr),e(Mo,ipr),e(Mo,K),e(K,Y8),e(Y8,bue),e(bue,dpr),e(Y8,cpr),e(Y8,NG),e(NG,fpr),e(Y8,mpr),e(K,gpr),e(K,K8),e(K8,vue),e(vue,hpr),e(K8,ppr),e(K8,qG),e(qG,_pr),e(K8,upr),e(K,bpr),e(K,Z8),e(Z8,Tue),e(Tue,vpr),e(Z8,Tpr),e(Z8,OG),e(OG,Fpr),e(Z8,Cpr),e(K,Mpr),e(K,eF),e(eF,Fue),e(Fue,Epr),e(eF,ypr),e(eF,GG),e(GG,wpr),e(eF,Apr),e(K,Lpr),e(K,oF),e(oF,Cue),e(Cue,Bpr),e(oF,xpr),e(oF,XG),e(XG,kpr),e(oF,Rpr),e(K,Spr),e(K,rF),e(rF,Mue),e(Mue,Ppr),e(rF,$pr),e(rF,VG),e(VG,Ipr),e(rF,jpr),e(K,Dpr),e(K,tF),e(tF,Eue),e(Eue,Npr),e(tF,qpr),e(tF,zG),e(zG,Opr),e(tF,Gpr),e(K,Xpr),e(K,aF),e(aF,yue),e(yue,Vpr),e(aF,zpr),e(aF,WG),e(WG,Wpr),e(aF,Qpr),e(K,Hpr),e(K,nF),e(nF,wue),e(wue,Upr),e(nF,Jpr),e(nF,QG),e(QG,Ypr),e(nF,Kpr),e(K,Zpr),e(K,sF),e(sF,Aue),e(Aue,e_r),e(sF,o_r),e(sF,HG),e(HG,r_r),e(sF,t_r),e(K,a_r),e(K,lF),e(lF,Lue),e(Lue,n_r),e(lF,s_r),e(lF,UG),e(UG,l_r),e(lF,i_r),e(K,d_r),e(K,iF),e(iF,Bue),e(Bue,c_r),e(iF,f_r),e(iF,JG),e(JG,m_r),e(iF,g_r),e(K,h_r),e(K,dF),e(dF,xue),e(xue,p_r),e(dF,__r),e(dF,YG),e(YG,u_r),e(dF,b_r),e(K,v_r),e(K,cF),e(cF,kue),e(kue,T_r),e(cF,F_r),e(cF,KG),e(KG,C_r),e(cF,M_r),e(K,E_r),e(K,fF),e(fF,Rue),e(Rue,y_r),e(fF,w_r),e(fF,ZG),e(ZG,A_r),e(fF,L_r),e(K,B_r),e(K,mF),e(mF,Sue),e(Sue,x_r),e(mF,k_r),e(mF,eX),e(eX,R_r),e(mF,S_r),e(K,P_r),e(K,gF),e(gF,Pue),e(Pue,$_r),e(gF,I_r),e(gF,oX),e(oX,j_r),e(gF,D_r),e(K,N_r),e(K,hF),e(hF,$ue),e($ue,q_r),e(hF,O_r),e(hF,rX),e(rX,G_r),e(hF,X_r),e(K,V_r),e(K,pF),e(pF,Iue),e(Iue,z_r),e(pF,W_r),e(pF,tX),e(tX,Q_r),e(pF,H_r),e(K,U_r),e(K,_F),e(_F,jue),e(jue,J_r),e(_F,Y_r),e(_F,aX),e(aX,K_r),e(_F,Z_r),e(Mo,eur),e(Mo,Due),e(Due,our),e(Mo,rur),g(GA,Mo,null),b(d,Mke,u),b(d,Gc,u),e(Gc,uF),e(uF,Nue),g(XA,Nue,null),e(Gc,tur),e(Gc,que),e(que,aur),b(d,Eke,u),b(d,Br,u),g(VA,Br,null),e(Br,nur),e(Br,Xc),e(Xc,sur),e(Xc,Oue),e(Oue,lur),e(Xc,iur),e(Xc,Gue),e(Gue,dur),e(Xc,cur),e(Br,fur),e(Br,zA),e(zA,mur),e(zA,Xue),e(Xue,gur),e(zA,hur),e(Br,pur),e(Br,Mt),g(WA,Mt,null),e(Mt,_ur),e(Mt,Vue),e(Vue,uur),e(Mt,bur),e(Mt,Vc),e(Vc,vur),e(Vc,zue),e(zue,Tur),e(Vc,Fur),e(Vc,Wue),e(Wue,Cur),e(Vc,Mur),e(Mt,Eur),e(Mt,Que),e(Que,yur),e(Mt,wur),g(QA,Mt,null),e(Br,Aur),e(Br,Eo),g(HA,Eo,null),e(Eo,Lur),e(Eo,Hue),e(Hue,Bur),e(Eo,xur),e(Eo,yn),e(yn,kur),e(yn,Uue),e(Uue,Rur),e(yn,Sur),e(yn,Jue),e(Jue,Pur),e(yn,$ur),e(yn,Yue),e(Yue,Iur),e(yn,jur),e(Eo,Dur),e(Eo,Z),e(Z,bF),e(bF,Kue),e(Kue,Nur),e(bF,qur),e(bF,nX),e(nX,Our),e(bF,Gur),e(Z,Xur),e(Z,vF),e(vF,Zue),e(Zue,Vur),e(vF,zur),e(vF,sX),e(sX,Wur),e(vF,Qur),e(Z,Hur),e(Z,TF),e(TF,e1e),e(e1e,Uur),e(TF,Jur),e(TF,lX),e(lX,Yur),e(TF,Kur),e(Z,Zur),e(Z,FF),e(FF,o1e),e(o1e,e1r),e(FF,o1r),e(FF,iX),e(iX,r1r),e(FF,t1r),e(Z,a1r),e(Z,CF),e(CF,r1e),e(r1e,n1r),e(CF,s1r),e(CF,dX),e(dX,l1r),e(CF,i1r),e(Z,d1r),e(Z,MF),e(MF,t1e),e(t1e,c1r),e(MF,f1r),e(MF,cX),e(cX,m1r),e(MF,g1r),e(Z,h1r),e(Z,EF),e(EF,a1e),e(a1e,p1r),e(EF,_1r),e(EF,fX),e(fX,u1r),e(EF,b1r),e(Z,v1r),e(Z,yF),e(yF,n1e),e(n1e,T1r),e(yF,F1r),e(yF,mX),e(mX,C1r),e(yF,M1r),e(Z,E1r),e(Z,wF),e(wF,s1e),e(s1e,y1r),e(wF,w1r),e(wF,gX),e(gX,A1r),e(wF,L1r),e(Z,B1r),e(Z,AF),e(AF,l1e),e(l1e,x1r),e(AF,k1r),e(AF,hX),e(hX,R1r),e(AF,S1r),e(Z,P1r),e(Z,LF),e(LF,i1e),e(i1e,$1r),e(LF,I1r),e(LF,pX),e(pX,j1r),e(LF,D1r),e(Z,N1r),e(Z,BF),e(BF,d1e),e(d1e,q1r),e(BF,O1r),e(BF,_X),e(_X,G1r),e(BF,X1r),e(Z,V1r),e(Z,xF),e(xF,c1e),e(c1e,z1r),e(xF,W1r),e(xF,uX),e(uX,Q1r),e(xF,H1r),e(Z,U1r),e(Z,kF),e(kF,f1e),e(f1e,J1r),e(kF,Y1r),e(kF,bX),e(bX,K1r),e(kF,Z1r),e(Z,ebr),e(Z,RF),e(RF,m1e),e(m1e,obr),e(RF,rbr),e(RF,vX),e(vX,tbr),e(RF,abr),e(Z,nbr),e(Z,SF),e(SF,g1e),e(g1e,sbr),e(SF,lbr),e(SF,TX),e(TX,ibr),e(SF,dbr),e(Z,cbr),e(Z,PF),e(PF,h1e),e(h1e,fbr),e(PF,mbr),e(PF,FX),e(FX,gbr),e(PF,hbr),e(Z,pbr),e(Z,$F),e($F,p1e),e(p1e,_br),e($F,ubr),e($F,CX),e(CX,bbr),e($F,vbr),e(Z,Tbr),e(Z,IF),e(IF,_1e),e(_1e,Fbr),e(IF,Cbr),e(IF,MX),e(MX,Mbr),e(IF,Ebr),e(Eo,ybr),e(Eo,u1e),e(u1e,wbr),e(Eo,Abr),g(UA,Eo,null),b(d,yke,u),b(d,zc,u),e(zc,jF),e(jF,b1e),g(JA,b1e,null),e(zc,Lbr),e(zc,v1e),e(v1e,Bbr),b(d,wke,u),b(d,xr,u),g(YA,xr,null),e(xr,xbr),e(xr,Wc),e(Wc,kbr),e(Wc,T1e),e(T1e,Rbr),e(Wc,Sbr),e(Wc,F1e),e(F1e,Pbr),e(Wc,$br),e(xr,Ibr),e(xr,KA),e(KA,jbr),e(KA,C1e),e(C1e,Dbr),e(KA,Nbr),e(xr,qbr),e(xr,Et),g(ZA,Et,null),e(Et,Obr),e(Et,M1e),e(M1e,Gbr),e(Et,Xbr),e(Et,Qc),e(Qc,Vbr),e(Qc,E1e),e(E1e,zbr),e(Qc,Wbr),e(Qc,y1e),e(y1e,Qbr),e(Qc,Hbr),e(Et,Ubr),e(Et,w1e),e(w1e,Jbr),e(Et,Ybr),g(e0,Et,null),e(xr,Kbr),e(xr,yo),g(o0,yo,null),e(yo,Zbr),e(yo,A1e),e(A1e,e3r),e(yo,o3r),e(yo,wn),e(wn,r3r),e(wn,L1e),e(L1e,t3r),e(wn,a3r),e(wn,B1e),e(B1e,n3r),e(wn,s3r),e(wn,x1e),e(x1e,l3r),e(wn,i3r),e(yo,d3r),e(yo,k1e),e(k1e,DF),e(DF,R1e),e(R1e,c3r),e(DF,f3r),e(DF,EX),e(EX,m3r),e(DF,g3r),e(yo,h3r),e(yo,S1e),e(S1e,p3r),e(yo,_3r),g(r0,yo,null),b(d,Ake,u),b(d,Hc,u),e(Hc,NF),e(NF,P1e),g(t0,P1e,null),e(Hc,u3r),e(Hc,$1e),e($1e,b3r),b(d,Lke,u),b(d,kr,u),g(a0,kr,null),e(kr,v3r),e(kr,Uc),e(Uc,T3r),e(Uc,I1e),e(I1e,F3r),e(Uc,C3r),e(Uc,j1e),e(j1e,M3r),e(Uc,E3r),e(kr,y3r),e(kr,n0),e(n0,w3r),e(n0,D1e),e(D1e,A3r),e(n0,L3r),e(kr,B3r),e(kr,yt),g(s0,yt,null),e(yt,x3r),e(yt,N1e),e(N1e,k3r),e(yt,R3r),e(yt,Jc),e(Jc,S3r),e(Jc,q1e),e(q1e,P3r),e(Jc,$3r),e(Jc,O1e),e(O1e,I3r),e(Jc,j3r),e(yt,D3r),e(yt,G1e),e(G1e,N3r),e(yt,q3r),g(l0,yt,null),e(kr,O3r),e(kr,wo),g(i0,wo,null),e(wo,G3r),e(wo,X1e),e(X1e,X3r),e(wo,V3r),e(wo,An),e(An,z3r),e(An,V1e),e(V1e,W3r),e(An,Q3r),e(An,z1e),e(z1e,H3r),e(An,U3r),e(An,W1e),e(W1e,J3r),e(An,Y3r),e(wo,K3r),e(wo,Q1e),e(Q1e,qF),e(qF,H1e),e(H1e,Z3r),e(qF,e5r),e(qF,yX),e(yX,o5r),e(qF,r5r),e(wo,t5r),e(wo,U1e),e(U1e,a5r),e(wo,n5r),g(d0,wo,null),b(d,Bke,u),b(d,Yc,u),e(Yc,OF),e(OF,J1e),g(c0,J1e,null),e(Yc,s5r),e(Yc,Y1e),e(Y1e,l5r),b(d,xke,u),b(d,Rr,u),g(f0,Rr,null),e(Rr,i5r),e(Rr,Kc),e(Kc,d5r),e(Kc,K1e),e(K1e,c5r),e(Kc,f5r),e(Kc,Z1e),e(Z1e,m5r),e(Kc,g5r),e(Rr,h5r),e(Rr,m0),e(m0,p5r),e(m0,ebe),e(ebe,_5r),e(m0,u5r),e(Rr,b5r),e(Rr,wt),g(g0,wt,null),e(wt,v5r),e(wt,obe),e(obe,T5r),e(wt,F5r),e(wt,Zc),e(Zc,C5r),e(Zc,rbe),e(rbe,M5r),e(Zc,E5r),e(Zc,tbe),e(tbe,y5r),e(Zc,w5r),e(wt,A5r),e(wt,abe),e(abe,L5r),e(wt,B5r),g(h0,wt,null),e(Rr,x5r),e(Rr,Ao),g(p0,Ao,null),e(Ao,k5r),e(Ao,nbe),e(nbe,R5r),e(Ao,S5r),e(Ao,Ln),e(Ln,P5r),e(Ln,sbe),e(sbe,$5r),e(Ln,I5r),e(Ln,lbe),e(lbe,j5r),e(Ln,D5r),e(Ln,ibe),e(ibe,N5r),e(Ln,q5r),e(Ao,O5r),e(Ao,z),e(z,GF),e(GF,dbe),e(dbe,G5r),e(GF,X5r),e(GF,wX),e(wX,V5r),e(GF,z5r),e(z,W5r),e(z,XF),e(XF,cbe),e(cbe,Q5r),e(XF,H5r),e(XF,AX),e(AX,U5r),e(XF,J5r),e(z,Y5r),e(z,VF),e(VF,fbe),e(fbe,K5r),e(VF,Z5r),e(VF,LX),e(LX,e2r),e(VF,o2r),e(z,r2r),e(z,zF),e(zF,mbe),e(mbe,t2r),e(zF,a2r),e(zF,BX),e(BX,n2r),e(zF,s2r),e(z,l2r),e(z,WF),e(WF,gbe),e(gbe,i2r),e(WF,d2r),e(WF,xX),e(xX,c2r),e(WF,f2r),e(z,m2r),e(z,QF),e(QF,hbe),e(hbe,g2r),e(QF,h2r),e(QF,kX),e(kX,p2r),e(QF,_2r),e(z,u2r),e(z,HF),e(HF,pbe),e(pbe,b2r),e(HF,v2r),e(HF,RX),e(RX,T2r),e(HF,F2r),e(z,C2r),e(z,UF),e(UF,_be),e(_be,M2r),e(UF,E2r),e(UF,SX),e(SX,y2r),e(UF,w2r),e(z,A2r),e(z,JF),e(JF,ube),e(ube,L2r),e(JF,B2r),e(JF,PX),e(PX,x2r),e(JF,k2r),e(z,R2r),e(z,YF),e(YF,bbe),e(bbe,S2r),e(YF,P2r),e(YF,$X),e($X,$2r),e(YF,I2r),e(z,j2r),e(z,KF),e(KF,vbe),e(vbe,D2r),e(KF,N2r),e(KF,IX),e(IX,q2r),e(KF,O2r),e(z,G2r),e(z,ZF),e(ZF,Tbe),e(Tbe,X2r),e(ZF,V2r),e(ZF,jX),e(jX,z2r),e(ZF,W2r),e(z,Q2r),e(z,eC),e(eC,Fbe),e(Fbe,H2r),e(eC,U2r),e(eC,DX),e(DX,J2r),e(eC,Y2r),e(z,K2r),e(z,oC),e(oC,Cbe),e(Cbe,Z2r),e(oC,evr),e(oC,NX),e(NX,ovr),e(oC,rvr),e(z,tvr),e(z,rC),e(rC,Mbe),e(Mbe,avr),e(rC,nvr),e(rC,qX),e(qX,svr),e(rC,lvr),e(z,ivr),e(z,tC),e(tC,Ebe),e(Ebe,dvr),e(tC,cvr),e(tC,OX),e(OX,fvr),e(tC,mvr),e(z,gvr),e(z,aC),e(aC,ybe),e(ybe,hvr),e(aC,pvr),e(aC,GX),e(GX,_vr),e(aC,uvr),e(z,bvr),e(z,nC),e(nC,wbe),e(wbe,vvr),e(nC,Tvr),e(nC,XX),e(XX,Fvr),e(nC,Cvr),e(z,Mvr),e(z,sC),e(sC,Abe),e(Abe,Evr),e(sC,yvr),e(sC,VX),e(VX,wvr),e(sC,Avr),e(z,Lvr),e(z,lC),e(lC,Lbe),e(Lbe,Bvr),e(lC,xvr),e(lC,zX),e(zX,kvr),e(lC,Rvr),e(z,Svr),e(z,iC),e(iC,Bbe),e(Bbe,Pvr),e(iC,$vr),e(iC,WX),e(WX,Ivr),e(iC,jvr),e(z,Dvr),e(z,dC),e(dC,xbe),e(xbe,Nvr),e(dC,qvr),e(dC,QX),e(QX,Ovr),e(dC,Gvr),e(z,Xvr),e(z,cC),e(cC,kbe),e(kbe,Vvr),e(cC,zvr),e(cC,HX),e(HX,Wvr),e(cC,Qvr),e(z,Hvr),e(z,fC),e(fC,Rbe),e(Rbe,Uvr),e(fC,Jvr),e(fC,UX),e(UX,Yvr),e(fC,Kvr),e(z,Zvr),e(z,mC),e(mC,Sbe),e(Sbe,eTr),e(mC,oTr),e(mC,JX),e(JX,rTr),e(mC,tTr),e(Ao,aTr),e(Ao,Pbe),e(Pbe,nTr),e(Ao,sTr),g(_0,Ao,null),b(d,kke,u),b(d,ef,u),e(ef,gC),e(gC,$be),g(u0,$be,null),e(ef,lTr),e(ef,Ibe),e(Ibe,iTr),b(d,Rke,u),b(d,Sr,u),g(b0,Sr,null),e(Sr,dTr),e(Sr,of),e(of,cTr),e(of,jbe),e(jbe,fTr),e(of,mTr),e(of,Dbe),e(Dbe,gTr),e(of,hTr),e(Sr,pTr),e(Sr,v0),e(v0,_Tr),e(v0,Nbe),e(Nbe,uTr),e(v0,bTr),e(Sr,vTr),e(Sr,At),g(T0,At,null),e(At,TTr),e(At,qbe),e(qbe,FTr),e(At,CTr),e(At,rf),e(rf,MTr),e(rf,Obe),e(Obe,ETr),e(rf,yTr),e(rf,Gbe),e(Gbe,wTr),e(rf,ATr),e(At,LTr),e(At,Xbe),e(Xbe,BTr),e(At,xTr),g(F0,At,null),e(Sr,kTr),e(Sr,Lo),g(C0,Lo,null),e(Lo,RTr),e(Lo,Vbe),e(Vbe,STr),e(Lo,PTr),e(Lo,Bn),e(Bn,$Tr),e(Bn,zbe),e(zbe,ITr),e(Bn,jTr),e(Bn,Wbe),e(Wbe,DTr),e(Bn,NTr),e(Bn,Qbe),e(Qbe,qTr),e(Bn,OTr),e(Lo,GTr),e(Lo,xn),e(xn,hC),e(hC,Hbe),e(Hbe,XTr),e(hC,VTr),e(hC,YX),e(YX,zTr),e(hC,WTr),e(xn,QTr),e(xn,pC),e(pC,Ube),e(Ube,HTr),e(pC,UTr),e(pC,KX),e(KX,JTr),e(pC,YTr),e(xn,KTr),e(xn,_C),e(_C,Jbe),e(Jbe,ZTr),e(_C,e8r),e(_C,ZX),e(ZX,o8r),e(_C,r8r),e(xn,t8r),e(xn,uC),e(uC,Ybe),e(Ybe,a8r),e(uC,n8r),e(uC,eV),e(eV,s8r),e(uC,l8r),e(Lo,i8r),e(Lo,Kbe),e(Kbe,d8r),e(Lo,c8r),g(M0,Lo,null),b(d,Ske,u),b(d,tf,u),e(tf,bC),e(bC,Zbe),g(E0,Zbe,null),e(tf,f8r),e(tf,e3e),e(e3e,m8r),b(d,Pke,u),b(d,Pr,u),g(y0,Pr,null),e(Pr,g8r),e(Pr,af),e(af,h8r),e(af,o3e),e(o3e,p8r),e(af,_8r),e(af,r3e),e(r3e,u8r),e(af,b8r),e(Pr,v8r),e(Pr,w0),e(w0,T8r),e(w0,t3e),e(t3e,F8r),e(w0,C8r),e(Pr,M8r),e(Pr,Lt),g(A0,Lt,null),e(Lt,E8r),e(Lt,a3e),e(a3e,y8r),e(Lt,w8r),e(Lt,nf),e(nf,A8r),e(nf,n3e),e(n3e,L8r),e(nf,B8r),e(nf,s3e),e(s3e,x8r),e(nf,k8r),e(Lt,R8r),e(Lt,l3e),e(l3e,S8r),e(Lt,P8r),g(L0,Lt,null),e(Pr,$8r),e(Pr,Bo),g(B0,Bo,null),e(Bo,I8r),e(Bo,i3e),e(i3e,j8r),e(Bo,D8r),e(Bo,kn),e(kn,N8r),e(kn,d3e),e(d3e,q8r),e(kn,O8r),e(kn,c3e),e(c3e,G8r),e(kn,X8r),e(kn,f3e),e(f3e,V8r),e(kn,z8r),e(Bo,W8r),e(Bo,ce),e(ce,vC),e(vC,m3e),e(m3e,Q8r),e(vC,H8r),e(vC,oV),e(oV,U8r),e(vC,J8r),e(ce,Y8r),e(ce,TC),e(TC,g3e),e(g3e,K8r),e(TC,Z8r),e(TC,rV),e(rV,eFr),e(TC,oFr),e(ce,rFr),e(ce,FC),e(FC,h3e),e(h3e,tFr),e(FC,aFr),e(FC,tV),e(tV,nFr),e(FC,sFr),e(ce,lFr),e(ce,CC),e(CC,p3e),e(p3e,iFr),e(CC,dFr),e(CC,aV),e(aV,cFr),e(CC,fFr),e(ce,mFr),e(ce,MC),e(MC,_3e),e(_3e,gFr),e(MC,hFr),e(MC,nV),e(nV,pFr),e(MC,_Fr),e(ce,uFr),e(ce,EC),e(EC,u3e),e(u3e,bFr),e(EC,vFr),e(EC,sV),e(sV,TFr),e(EC,FFr),e(ce,CFr),e(ce,yC),e(yC,b3e),e(b3e,MFr),e(yC,EFr),e(yC,lV),e(lV,yFr),e(yC,wFr),e(ce,AFr),e(ce,wC),e(wC,v3e),e(v3e,LFr),e(wC,BFr),e(wC,iV),e(iV,xFr),e(wC,kFr),e(ce,RFr),e(ce,AC),e(AC,T3e),e(T3e,SFr),e(AC,PFr),e(AC,dV),e(dV,$Fr),e(AC,IFr),e(ce,jFr),e(ce,LC),e(LC,F3e),e(F3e,DFr),e(LC,NFr),e(LC,cV),e(cV,qFr),e(LC,OFr),e(ce,GFr),e(ce,BC),e(BC,C3e),e(C3e,XFr),e(BC,VFr),e(BC,fV),e(fV,zFr),e(BC,WFr),e(ce,QFr),e(ce,xC),e(xC,M3e),e(M3e,HFr),e(xC,UFr),e(xC,mV),e(mV,JFr),e(xC,YFr),e(Bo,KFr),e(Bo,E3e),e(E3e,ZFr),e(Bo,eCr),g(x0,Bo,null),b(d,$ke,u),b(d,sf,u),e(sf,kC),e(kC,y3e),g(k0,y3e,null),e(sf,oCr),e(sf,w3e),e(w3e,rCr),b(d,Ike,u),b(d,$r,u),g(R0,$r,null),e($r,tCr),e($r,lf),e(lf,aCr),e(lf,A3e),e(A3e,nCr),e(lf,sCr),e(lf,L3e),e(L3e,lCr),e(lf,iCr),e($r,dCr),e($r,S0),e(S0,cCr),e(S0,B3e),e(B3e,fCr),e(S0,mCr),e($r,gCr),e($r,Bt),g(P0,Bt,null),e(Bt,hCr),e(Bt,x3e),e(x3e,pCr),e(Bt,_Cr),e(Bt,df),e(df,uCr),e(df,k3e),e(k3e,bCr),e(df,vCr),e(df,R3e),e(R3e,TCr),e(df,FCr),e(Bt,CCr),e(Bt,S3e),e(S3e,MCr),e(Bt,ECr),g($0,Bt,null),e($r,yCr),e($r,xo),g(I0,xo,null),e(xo,wCr),e(xo,P3e),e(P3e,ACr),e(xo,LCr),e(xo,Rn),e(Rn,BCr),e(Rn,$3e),e($3e,xCr),e(Rn,kCr),e(Rn,I3e),e(I3e,RCr),e(Rn,SCr),e(Rn,j3e),e(j3e,PCr),e(Rn,$Cr),e(xo,ICr),e(xo,ue),e(ue,RC),e(RC,D3e),e(D3e,jCr),e(RC,DCr),e(RC,gV),e(gV,NCr),e(RC,qCr),e(ue,OCr),e(ue,SC),e(SC,N3e),e(N3e,GCr),e(SC,XCr),e(SC,hV),e(hV,VCr),e(SC,zCr),e(ue,WCr),e(ue,PC),e(PC,q3e),e(q3e,QCr),e(PC,HCr),e(PC,pV),e(pV,UCr),e(PC,JCr),e(ue,YCr),e(ue,$C),e($C,O3e),e(O3e,KCr),e($C,ZCr),e($C,_V),e(_V,eMr),e($C,oMr),e(ue,rMr),e(ue,IC),e(IC,G3e),e(G3e,tMr),e(IC,aMr),e(IC,uV),e(uV,nMr),e(IC,sMr),e(ue,lMr),e(ue,jC),e(jC,X3e),e(X3e,iMr),e(jC,dMr),e(jC,bV),e(bV,cMr),e(jC,fMr),e(ue,mMr),e(ue,DC),e(DC,V3e),e(V3e,gMr),e(DC,hMr),e(DC,vV),e(vV,pMr),e(DC,_Mr),e(ue,uMr),e(ue,NC),e(NC,z3e),e(z3e,bMr),e(NC,vMr),e(NC,TV),e(TV,TMr),e(NC,FMr),e(ue,CMr),e(ue,qC),e(qC,W3e),e(W3e,MMr),e(qC,EMr),e(qC,FV),e(FV,yMr),e(qC,wMr),e(ue,AMr),e(ue,OC),e(OC,Q3e),e(Q3e,LMr),e(OC,BMr),e(OC,CV),e(CV,xMr),e(OC,kMr),e(xo,RMr),e(xo,H3e),e(H3e,SMr),e(xo,PMr),g(j0,xo,null),b(d,jke,u),b(d,cf,u),e(cf,GC),e(GC,U3e),g(D0,U3e,null),e(cf,$Mr),e(cf,J3e),e(J3e,IMr),b(d,Dke,u),b(d,Ir,u),g(N0,Ir,null),e(Ir,jMr),e(Ir,ff),e(ff,DMr),e(ff,Y3e),e(Y3e,NMr),e(ff,qMr),e(ff,K3e),e(K3e,OMr),e(ff,GMr),e(Ir,XMr),e(Ir,q0),e(q0,VMr),e(q0,Z3e),e(Z3e,zMr),e(q0,WMr),e(Ir,QMr),e(Ir,xt),g(O0,xt,null),e(xt,HMr),e(xt,e5e),e(e5e,UMr),e(xt,JMr),e(xt,mf),e(mf,YMr),e(mf,o5e),e(o5e,KMr),e(mf,ZMr),e(mf,r5e),e(r5e,e4r),e(mf,o4r),e(xt,r4r),e(xt,t5e),e(t5e,t4r),e(xt,a4r),g(G0,xt,null),e(Ir,n4r),e(Ir,ko),g(X0,ko,null),e(ko,s4r),e(ko,a5e),e(a5e,l4r),e(ko,i4r),e(ko,Sn),e(Sn,d4r),e(Sn,n5e),e(n5e,c4r),e(Sn,f4r),e(Sn,s5e),e(s5e,m4r),e(Sn,g4r),e(Sn,l5e),e(l5e,h4r),e(Sn,p4r),e(ko,_4r),e(ko,Ce),e(Ce,XC),e(XC,i5e),e(i5e,u4r),e(XC,b4r),e(XC,MV),e(MV,v4r),e(XC,T4r),e(Ce,F4r),e(Ce,VC),e(VC,d5e),e(d5e,C4r),e(VC,M4r),e(VC,EV),e(EV,E4r),e(VC,y4r),e(Ce,w4r),e(Ce,zC),e(zC,c5e),e(c5e,A4r),e(zC,L4r),e(zC,yV),e(yV,B4r),e(zC,x4r),e(Ce,k4r),e(Ce,WC),e(WC,f5e),e(f5e,R4r),e(WC,S4r),e(WC,wV),e(wV,P4r),e(WC,$4r),e(Ce,I4r),e(Ce,QC),e(QC,m5e),e(m5e,j4r),e(QC,D4r),e(QC,AV),e(AV,N4r),e(QC,q4r),e(Ce,O4r),e(Ce,HC),e(HC,g5e),e(g5e,G4r),e(HC,X4r),e(HC,LV),e(LV,V4r),e(HC,z4r),e(Ce,W4r),e(Ce,UC),e(UC,h5e),e(h5e,Q4r),e(UC,H4r),e(UC,BV),e(BV,U4r),e(UC,J4r),e(Ce,Y4r),e(Ce,JC),e(JC,p5e),e(p5e,K4r),e(JC,Z4r),e(JC,xV),e(xV,eEr),e(JC,oEr),e(Ce,rEr),e(Ce,YC),e(YC,_5e),e(_5e,tEr),e(YC,aEr),e(YC,kV),e(kV,nEr),e(YC,sEr),e(ko,lEr),e(ko,u5e),e(u5e,iEr),e(ko,dEr),g(V0,ko,null),b(d,Nke,u),b(d,gf,u),e(gf,KC),e(KC,b5e),g(z0,b5e,null),e(gf,cEr),e(gf,v5e),e(v5e,fEr),b(d,qke,u),b(d,jr,u),g(W0,jr,null),e(jr,mEr),e(jr,hf),e(hf,gEr),e(hf,T5e),e(T5e,hEr),e(hf,pEr),e(hf,F5e),e(F5e,_Er),e(hf,uEr),e(jr,bEr),e(jr,Q0),e(Q0,vEr),e(Q0,C5e),e(C5e,TEr),e(Q0,FEr),e(jr,CEr),e(jr,kt),g(H0,kt,null),e(kt,MEr),e(kt,M5e),e(M5e,EEr),e(kt,yEr),e(kt,pf),e(pf,wEr),e(pf,E5e),e(E5e,AEr),e(pf,LEr),e(pf,y5e),e(y5e,BEr),e(pf,xEr),e(kt,kEr),e(kt,w5e),e(w5e,REr),e(kt,SEr),g(U0,kt,null),e(jr,PEr),e(jr,Ro),g(J0,Ro,null),e(Ro,$Er),e(Ro,A5e),e(A5e,IEr),e(Ro,jEr),e(Ro,Pn),e(Pn,DEr),e(Pn,L5e),e(L5e,NEr),e(Pn,qEr),e(Pn,B5e),e(B5e,OEr),e(Pn,GEr),e(Pn,x5e),e(x5e,XEr),e(Pn,VEr),e(Ro,zEr),e(Ro,be),e(be,ZC),e(ZC,k5e),e(k5e,WEr),e(ZC,QEr),e(ZC,RV),e(RV,HEr),e(ZC,UEr),e(be,JEr),e(be,eM),e(eM,R5e),e(R5e,YEr),e(eM,KEr),e(eM,SV),e(SV,ZEr),e(eM,eyr),e(be,oyr),e(be,oM),e(oM,S5e),e(S5e,ryr),e(oM,tyr),e(oM,PV),e(PV,ayr),e(oM,nyr),e(be,syr),e(be,rM),e(rM,P5e),e(P5e,lyr),e(rM,iyr),e(rM,$V),e($V,dyr),e(rM,cyr),e(be,fyr),e(be,tM),e(tM,$5e),e($5e,myr),e(tM,gyr),e(tM,IV),e(IV,hyr),e(tM,pyr),e(be,_yr),e(be,aM),e(aM,I5e),e(I5e,uyr),e(aM,byr),e(aM,jV),e(jV,vyr),e(aM,Tyr),e(be,Fyr),e(be,nM),e(nM,j5e),e(j5e,Cyr),e(nM,Myr),e(nM,DV),e(DV,Eyr),e(nM,yyr),e(be,wyr),e(be,sM),e(sM,D5e),e(D5e,Ayr),e(sM,Lyr),e(sM,NV),e(NV,Byr),e(sM,xyr),e(be,kyr),e(be,lM),e(lM,N5e),e(N5e,Ryr),e(lM,Syr),e(lM,qV),e(qV,Pyr),e(lM,$yr),e(be,Iyr),e(be,iM),e(iM,q5e),e(q5e,jyr),e(iM,Dyr),e(iM,OV),e(OV,Nyr),e(iM,qyr),e(Ro,Oyr),e(Ro,O5e),e(O5e,Gyr),e(Ro,Xyr),g(Y0,Ro,null),b(d,Oke,u),b(d,_f,u),e(_f,dM),e(dM,G5e),g(K0,G5e,null),e(_f,Vyr),e(_f,X5e),e(X5e,zyr),b(d,Gke,u),b(d,Dr,u),g(Z0,Dr,null),e(Dr,Wyr),e(Dr,uf),e(uf,Qyr),e(uf,V5e),e(V5e,Hyr),e(uf,Uyr),e(uf,z5e),e(z5e,Jyr),e(uf,Yyr),e(Dr,Kyr),e(Dr,eL),e(eL,Zyr),e(eL,W5e),e(W5e,ewr),e(eL,owr),e(Dr,rwr),e(Dr,Rt),g(oL,Rt,null),e(Rt,twr),e(Rt,Q5e),e(Q5e,awr),e(Rt,nwr),e(Rt,bf),e(bf,swr),e(bf,H5e),e(H5e,lwr),e(bf,iwr),e(bf,U5e),e(U5e,dwr),e(bf,cwr),e(Rt,fwr),e(Rt,J5e),e(J5e,mwr),e(Rt,gwr),g(rL,Rt,null),e(Dr,hwr),e(Dr,So),g(tL,So,null),e(So,pwr),e(So,Y5e),e(Y5e,_wr),e(So,uwr),e(So,$n),e($n,bwr),e($n,K5e),e(K5e,vwr),e($n,Twr),e($n,Z5e),e(Z5e,Fwr),e($n,Cwr),e($n,e2e),e(e2e,Mwr),e($n,Ewr),e(So,ywr),e(So,ve),e(ve,cM),e(cM,o2e),e(o2e,wwr),e(cM,Awr),e(cM,GV),e(GV,Lwr),e(cM,Bwr),e(ve,xwr),e(ve,fM),e(fM,r2e),e(r2e,kwr),e(fM,Rwr),e(fM,XV),e(XV,Swr),e(fM,Pwr),e(ve,$wr),e(ve,mM),e(mM,t2e),e(t2e,Iwr),e(mM,jwr),e(mM,VV),e(VV,Dwr),e(mM,Nwr),e(ve,qwr),e(ve,gM),e(gM,a2e),e(a2e,Owr),e(gM,Gwr),e(gM,zV),e(zV,Xwr),e(gM,Vwr),e(ve,zwr),e(ve,hM),e(hM,n2e),e(n2e,Wwr),e(hM,Qwr),e(hM,WV),e(WV,Hwr),e(hM,Uwr),e(ve,Jwr),e(ve,pM),e(pM,s2e),e(s2e,Ywr),e(pM,Kwr),e(pM,QV),e(QV,Zwr),e(pM,e6r),e(ve,o6r),e(ve,_M),e(_M,l2e),e(l2e,r6r),e(_M,t6r),e(_M,HV),e(HV,a6r),e(_M,n6r),e(ve,s6r),e(ve,uM),e(uM,i2e),e(i2e,l6r),e(uM,i6r),e(uM,UV),e(UV,d6r),e(uM,c6r),e(ve,f6r),e(ve,bM),e(bM,d2e),e(d2e,m6r),e(bM,g6r),e(bM,JV),e(JV,h6r),e(bM,p6r),e(ve,_6r),e(ve,vM),e(vM,c2e),e(c2e,u6r),e(vM,b6r),e(vM,YV),e(YV,v6r),e(vM,T6r),e(So,F6r),e(So,f2e),e(f2e,C6r),e(So,M6r),g(aL,So,null),b(d,Xke,u),b(d,vf,u),e(vf,TM),e(TM,m2e),g(nL,m2e,null),e(vf,E6r),e(vf,g2e),e(g2e,y6r),b(d,Vke,u),b(d,Nr,u),g(sL,Nr,null),e(Nr,w6r),e(Nr,Tf),e(Tf,A6r),e(Tf,h2e),e(h2e,L6r),e(Tf,B6r),e(Tf,p2e),e(p2e,x6r),e(Tf,k6r),e(Nr,R6r),e(Nr,lL),e(lL,S6r),e(lL,_2e),e(_2e,P6r),e(lL,$6r),e(Nr,I6r),e(Nr,St),g(iL,St,null),e(St,j6r),e(St,u2e),e(u2e,D6r),e(St,N6r),e(St,Ff),e(Ff,q6r),e(Ff,b2e),e(b2e,O6r),e(Ff,G6r),e(Ff,v2e),e(v2e,X6r),e(Ff,V6r),e(St,z6r),e(St,T2e),e(T2e,W6r),e(St,Q6r),g(dL,St,null),e(Nr,H6r),e(Nr,Po),g(cL,Po,null),e(Po,U6r),e(Po,F2e),e(F2e,J6r),e(Po,Y6r),e(Po,In),e(In,K6r),e(In,C2e),e(C2e,Z6r),e(In,eAr),e(In,M2e),e(M2e,oAr),e(In,rAr),e(In,E2e),e(E2e,tAr),e(In,aAr),e(Po,nAr),e(Po,Re),e(Re,FM),e(FM,y2e),e(y2e,sAr),e(FM,lAr),e(FM,KV),e(KV,iAr),e(FM,dAr),e(Re,cAr),e(Re,CM),e(CM,w2e),e(w2e,fAr),e(CM,mAr),e(CM,ZV),e(ZV,gAr),e(CM,hAr),e(Re,pAr),e(Re,MM),e(MM,A2e),e(A2e,_Ar),e(MM,uAr),e(MM,ez),e(ez,bAr),e(MM,vAr),e(Re,TAr),e(Re,EM),e(EM,L2e),e(L2e,FAr),e(EM,CAr),e(EM,oz),e(oz,MAr),e(EM,EAr),e(Re,yAr),e(Re,yM),e(yM,B2e),e(B2e,wAr),e(yM,AAr),e(yM,rz),e(rz,LAr),e(yM,BAr),e(Re,xAr),e(Re,wM),e(wM,x2e),e(x2e,kAr),e(wM,RAr),e(wM,tz),e(tz,SAr),e(wM,PAr),e(Re,$Ar),e(Re,AM),e(AM,k2e),e(k2e,IAr),e(AM,jAr),e(AM,az),e(az,DAr),e(AM,NAr),e(Re,qAr),e(Re,LM),e(LM,R2e),e(R2e,OAr),e(LM,GAr),e(LM,nz),e(nz,XAr),e(LM,VAr),e(Po,zAr),e(Po,S2e),e(S2e,WAr),e(Po,QAr),g(fL,Po,null),b(d,zke,u),b(d,Cf,u),e(Cf,BM),e(BM,P2e),g(mL,P2e,null),e(Cf,HAr),e(Cf,$2e),e($2e,UAr),b(d,Wke,u),b(d,qr,u),g(gL,qr,null),e(qr,JAr),e(qr,Mf),e(Mf,YAr),e(Mf,I2e),e(I2e,KAr),e(Mf,ZAr),e(Mf,j2e),e(j2e,e0r),e(Mf,o0r),e(qr,r0r),e(qr,hL),e(hL,t0r),e(hL,D2e),e(D2e,a0r),e(hL,n0r),e(qr,s0r),e(qr,Pt),g(pL,Pt,null),e(Pt,l0r),e(Pt,N2e),e(N2e,i0r),e(Pt,d0r),e(Pt,Ef),e(Ef,c0r),e(Ef,q2e),e(q2e,f0r),e(Ef,m0r),e(Ef,O2e),e(O2e,g0r),e(Ef,h0r),e(Pt,p0r),e(Pt,G2e),e(G2e,_0r),e(Pt,u0r),g(_L,Pt,null),e(qr,b0r),e(qr,$o),g(uL,$o,null),e($o,v0r),e($o,X2e),e(X2e,T0r),e($o,F0r),e($o,jn),e(jn,C0r),e(jn,V2e),e(V2e,M0r),e(jn,E0r),e(jn,z2e),e(z2e,y0r),e(jn,w0r),e(jn,W2e),e(W2e,A0r),e(jn,L0r),e($o,B0r),e($o,Se),e(Se,xM),e(xM,Q2e),e(Q2e,x0r),e(xM,k0r),e(xM,sz),e(sz,R0r),e(xM,S0r),e(Se,P0r),e(Se,kM),e(kM,H2e),e(H2e,$0r),e(kM,I0r),e(kM,lz),e(lz,j0r),e(kM,D0r),e(Se,N0r),e(Se,RM),e(RM,U2e),e(U2e,q0r),e(RM,O0r),e(RM,iz),e(iz,G0r),e(RM,X0r),e(Se,V0r),e(Se,SM),e(SM,J2e),e(J2e,z0r),e(SM,W0r),e(SM,dz),e(dz,Q0r),e(SM,H0r),e(Se,U0r),e(Se,PM),e(PM,Y2e),e(Y2e,J0r),e(PM,Y0r),e(PM,cz),e(cz,K0r),e(PM,Z0r),e(Se,eLr),e(Se,$M),e($M,K2e),e(K2e,oLr),e($M,rLr),e($M,fz),e(fz,tLr),e($M,aLr),e(Se,nLr),e(Se,IM),e(IM,Z2e),e(Z2e,sLr),e(IM,lLr),e(IM,mz),e(mz,iLr),e(IM,dLr),e(Se,cLr),e(Se,jM),e(jM,eve),e(eve,fLr),e(jM,mLr),e(jM,gz),e(gz,gLr),e(jM,hLr),e($o,pLr),e($o,ove),e(ove,_Lr),e($o,uLr),g(bL,$o,null),b(d,Qke,u),b(d,yf,u),e(yf,DM),e(DM,rve),g(vL,rve,null),e(yf,bLr),e(yf,tve),e(tve,vLr),b(d,Hke,u),b(d,Or,u),g(TL,Or,null),e(Or,TLr),e(Or,wf),e(wf,FLr),e(wf,ave),e(ave,CLr),e(wf,MLr),e(wf,nve),e(nve,ELr),e(wf,yLr),e(Or,wLr),e(Or,FL),e(FL,ALr),e(FL,sve),e(sve,LLr),e(FL,BLr),e(Or,xLr),e(Or,$t),g(CL,$t,null),e($t,kLr),e($t,lve),e(lve,RLr),e($t,SLr),e($t,Af),e(Af,PLr),e(Af,ive),e(ive,$Lr),e(Af,ILr),e(Af,dve),e(dve,jLr),e(Af,DLr),e($t,NLr),e($t,cve),e(cve,qLr),e($t,OLr),g(ML,$t,null),e(Or,GLr),e(Or,Io),g(EL,Io,null),e(Io,XLr),e(Io,fve),e(fve,VLr),e(Io,zLr),e(Io,Dn),e(Dn,WLr),e(Dn,mve),e(mve,QLr),e(Dn,HLr),e(Dn,gve),e(gve,ULr),e(Dn,JLr),e(Dn,hve),e(hve,YLr),e(Dn,KLr),e(Io,ZLr),e(Io,pve),e(pve,NM),e(NM,_ve),e(_ve,e7r),e(NM,o7r),e(NM,hz),e(hz,r7r),e(NM,t7r),e(Io,a7r),e(Io,uve),e(uve,n7r),e(Io,s7r),g(yL,Io,null),b(d,Uke,u),b(d,Lf,u),e(Lf,qM),e(qM,bve),g(wL,bve,null),e(Lf,l7r),e(Lf,vve),e(vve,i7r),b(d,Jke,u),b(d,Gr,u),g(AL,Gr,null),e(Gr,d7r),e(Gr,Bf),e(Bf,c7r),e(Bf,Tve),e(Tve,f7r),e(Bf,m7r),e(Bf,Fve),e(Fve,g7r),e(Bf,h7r),e(Gr,p7r),e(Gr,LL),e(LL,_7r),e(LL,Cve),e(Cve,u7r),e(LL,b7r),e(Gr,v7r),e(Gr,It),g(BL,It,null),e(It,T7r),e(It,Mve),e(Mve,F7r),e(It,C7r),e(It,xf),e(xf,M7r),e(xf,Eve),e(Eve,E7r),e(xf,y7r),e(xf,yve),e(yve,w7r),e(xf,A7r),e(It,L7r),e(It,wve),e(wve,B7r),e(It,x7r),g(xL,It,null),e(Gr,k7r),e(Gr,jo),g(kL,jo,null),e(jo,R7r),e(jo,Ave),e(Ave,S7r),e(jo,P7r),e(jo,Nn),e(Nn,$7r),e(Nn,Lve),e(Lve,I7r),e(Nn,j7r),e(Nn,Bve),e(Bve,D7r),e(Nn,N7r),e(Nn,xve),e(xve,q7r),e(Nn,O7r),e(jo,G7r),e(jo,RL),e(RL,OM),e(OM,kve),e(kve,X7r),e(OM,V7r),e(OM,pz),e(pz,z7r),e(OM,W7r),e(RL,Q7r),e(RL,GM),e(GM,Rve),e(Rve,H7r),e(GM,U7r),e(GM,_z),e(_z,J7r),e(GM,Y7r),e(jo,K7r),e(jo,Sve),e(Sve,Z7r),e(jo,e9r),g(SL,jo,null),b(d,Yke,u),b(d,kf,u),e(kf,XM),e(XM,Pve),g(PL,Pve,null),e(kf,o9r),e(kf,$ve),e($ve,r9r),b(d,Kke,u),b(d,Xr,u),g($L,Xr,null),e(Xr,t9r),e(Xr,Rf),e(Rf,a9r),e(Rf,Ive),e(Ive,n9r),e(Rf,s9r),e(Rf,jve),e(jve,l9r),e(Rf,i9r),e(Xr,d9r),e(Xr,IL),e(IL,c9r),e(IL,Dve),e(Dve,f9r),e(IL,m9r),e(Xr,g9r),e(Xr,jt),g(jL,jt,null),e(jt,h9r),e(jt,Nve),e(Nve,p9r),e(jt,_9r),e(jt,Sf),e(Sf,u9r),e(Sf,qve),e(qve,b9r),e(Sf,v9r),e(Sf,Ove),e(Ove,T9r),e(Sf,F9r),e(jt,C9r),e(jt,Gve),e(Gve,M9r),e(jt,E9r),g(DL,jt,null),e(Xr,y9r),e(Xr,Do),g(NL,Do,null),e(Do,w9r),e(Do,Xve),e(Xve,A9r),e(Do,L9r),e(Do,qn),e(qn,B9r),e(qn,Vve),e(Vve,x9r),e(qn,k9r),e(qn,zve),e(zve,R9r),e(qn,S9r),e(qn,Wve),e(Wve,P9r),e(qn,$9r),e(Do,I9r),e(Do,Qve),e(Qve,VM),e(VM,Hve),e(Hve,j9r),e(VM,D9r),e(VM,uz),e(uz,N9r),e(VM,q9r),e(Do,O9r),e(Do,Uve),e(Uve,G9r),e(Do,X9r),g(qL,Do,null),Zke=!0},p(d,[u]){const OL={};u&2&&(OL.$$scope={dirty:u,ctx:d}),qf.$set(OL);const Jve={};u&2&&(Jve.$$scope={dirty:u,ctx:d}),Mh.$set(Jve);const Yve={};u&2&&(Yve.$$scope={dirty:u,ctx:d}),Ph.$set(Yve)},i(d){Zke||(h(fe.$$.fragment,d),h(Na.$$.fragment,d),h(U4.$$.fragment,d),h(J4.$$.fragment,d),h(qf.$$.fragment,d),h(Y4.$$.fragment,d),h(K4.$$.fragment,d),h(oE.$$.fragment,d),h(rE.$$.fragment,d),h(tE.$$.fragment,d),h(aE.$$.fragment,d),h(nE.$$.fragment,d),h(iE.$$.fragment,d),h(dE.$$.fragment,d),h(cE.$$.fragment,d),h(fE.$$.fragment,d),h(mE.$$.fragment,d),h(pE.$$.fragment,d),h(Mh.$$.fragment,d),h(_E.$$.fragment,d),h(uE.$$.fragment,d),h(bE.$$.fragment,d),h(vE.$$.fragment,d),h(CE.$$.fragment,d),h(Ph.$$.fragment,d),h(ME.$$.fragment,d),h(EE.$$.fragment,d),h(yE.$$.fragment,d),h(wE.$$.fragment,d),h(LE.$$.fragment,d),h(BE.$$.fragment,d),h(xE.$$.fragment,d),h(kE.$$.fragment,d),h(RE.$$.fragment,d),h(SE.$$.fragment,d),h($E.$$.fragment,d),h(IE.$$.fragment,d),h(jE.$$.fragment,d),h(DE.$$.fragment,d),h(NE.$$.fragment,d),h(qE.$$.fragment,d),h(GE.$$.fragment,d),h(XE.$$.fragment,d),h(VE.$$.fragment,d),h(zE.$$.fragment,d),h(WE.$$.fragment,d),h(QE.$$.fragment,d),h(UE.$$.fragment,d),h(JE.$$.fragment,d),h(YE.$$.fragment,d),h(KE.$$.fragment,d),h(ZE.$$.fragment,d),h(ey.$$.fragment,d),h(ry.$$.fragment,d),h(ty.$$.fragment,d),h(ay.$$.fragment,d),h(ny.$$.fragment,d),h(sy.$$.fragment,d),h(ly.$$.fragment,d),h(dy.$$.fragment,d),h(cy.$$.fragment,d),h(fy.$$.fragment,d),h(my.$$.fragment,d),h(gy.$$.fragment,d),h(hy.$$.fragment,d),h(_y.$$.fragment,d),h(uy.$$.fragment,d),h(by.$$.fragment,d),h(vy.$$.fragment,d),h(Ty.$$.fragment,d),h(Fy.$$.fragment,d),h(My.$$.fragment,d),h(Ey.$$.fragment,d),h(yy.$$.fragment,d),h(wy.$$.fragment,d),h(Ay.$$.fragment,d),h(Ly.$$.fragment,d),h(xy.$$.fragment,d),h(ky.$$.fragment,d),h(Ry.$$.fragment,d),h(Sy.$$.fragment,d),h(Py.$$.fragment,d),h($y.$$.fragment,d),h(jy.$$.fragment,d),h(Dy.$$.fragment,d),h(Ny.$$.fragment,d),h(qy.$$.fragment,d),h(Oy.$$.fragment,d),h(Gy.$$.fragment,d),h(Vy.$$.fragment,d),h(zy.$$.fragment,d),h(Wy.$$.fragment,d),h(Qy.$$.fragment,d),h(Hy.$$.fragment,d),h(Uy.$$.fragment,d),h(Yy.$$.fragment,d),h(Ky.$$.fragment,d),h(Zy.$$.fragment,d),h(ew.$$.fragment,d),h(ow.$$.fragment,d),h(rw.$$.fragment,d),h(aw.$$.fragment,d),h(nw.$$.fragment,d),h(sw.$$.fragment,d),h(lw.$$.fragment,d),h(iw.$$.fragment,d),h(dw.$$.fragment,d),h(fw.$$.fragment,d),h(mw.$$.fragment,d),h(gw.$$.fragment,d),h(hw.$$.fragment,d),h(pw.$$.fragment,d),h(_w.$$.fragment,d),h(bw.$$.fragment,d),h(vw.$$.fragment,d),h(Tw.$$.fragment,d),h(Fw.$$.fragment,d),h(Cw.$$.fragment,d),h(Mw.$$.fragment,d),h(yw.$$.fragment,d),h(ww.$$.fragment,d),h(Aw.$$.fragment,d),h(Lw.$$.fragment,d),h(Bw.$$.fragment,d),h(xw.$$.fragment,d),h(Rw.$$.fragment,d),h(Sw.$$.fragment,d),h(Pw.$$.fragment,d),h(Iw.$$.fragment,d),h(jw.$$.fragment,d),h(Dw.$$.fragment,d),h(qw.$$.fragment,d),h(Ow.$$.fragment,d),h(Gw.$$.fragment,d),h(Xw.$$.fragment,d),h(Vw.$$.fragment,d),h(zw.$$.fragment,d),h(Qw.$$.fragment,d),h(Hw.$$.fragment,d),h(Uw.$$.fragment,d),h(Jw.$$.fragment,d),h(Yw.$$.fragment,d),h(Kw.$$.fragment,d),h(e6.$$.fragment,d),h(o6.$$.fragment,d),h(r6.$$.fragment,d),h(t6.$$.fragment,d),h(a6.$$.fragment,d),h(n6.$$.fragment,d),h(l6.$$.fragment,d),h(i6.$$.fragment,d),h(d6.$$.fragment,d),h(c6.$$.fragment,d),h(f6.$$.fragment,d),h(m6.$$.fragment,d),h(h6.$$.fragment,d),h(p6.$$.fragment,d),h(_6.$$.fragment,d),h(b6.$$.fragment,d),h(v6.$$.fragment,d),h(T6.$$.fragment,d),h(C6.$$.fragment,d),h(M6.$$.fragment,d),h(E6.$$.fragment,d),h(y6.$$.fragment,d),h(w6.$$.fragment,d),h(A6.$$.fragment,d),h(B6.$$.fragment,d),h(x6.$$.fragment,d),h(k6.$$.fragment,d),h(R6.$$.fragment,d),h(S6.$$.fragment,d),h(P6.$$.fragment,d),h(I6.$$.fragment,d),h(j6.$$.fragment,d),h(D6.$$.fragment,d),h(N6.$$.fragment,d),h(q6.$$.fragment,d),h(O6.$$.fragment,d),h(X6.$$.fragment,d),h(V6.$$.fragment,d),h(z6.$$.fragment,d),h(W6.$$.fragment,d),h(Q6.$$.fragment,d),h(H6.$$.fragment,d),h(J6.$$.fragment,d),h(Y6.$$.fragment,d),h(K6.$$.fragment,d),h(eA.$$.fragment,d),h(oA.$$.fragment,d),h(rA.$$.fragment,d),h(aA.$$.fragment,d),h(nA.$$.fragment,d),h(sA.$$.fragment,d),h(lA.$$.fragment,d),h(iA.$$.fragment,d),h(dA.$$.fragment,d),h(fA.$$.fragment,d),h(mA.$$.fragment,d),h(gA.$$.fragment,d),h(hA.$$.fragment,d),h(pA.$$.fragment,d),h(_A.$$.fragment,d),h(bA.$$.fragment,d),h(vA.$$.fragment,d),h(TA.$$.fragment,d),h(FA.$$.fragment,d),h(CA.$$.fragment,d),h(MA.$$.fragment,d),h(yA.$$.fragment,d),h(wA.$$.fragment,d),h(AA.$$.fragment,d),h(LA.$$.fragment,d),h(BA.$$.fragment,d),h(xA.$$.fragment,d),h(RA.$$.fragment,d),h(SA.$$.fragment,d),h(PA.$$.fragment,d),h($A.$$.fragment,d),h(IA.$$.fragment,d),h(jA.$$.fragment,d),h(NA.$$.fragment,d),h(qA.$$.fragment,d),h(OA.$$.fragment,d),h(GA.$$.fragment,d),h(XA.$$.fragment,d),h(VA.$$.fragment,d),h(WA.$$.fragment,d),h(QA.$$.fragment,d),h(HA.$$.fragment,d),h(UA.$$.fragment,d),h(JA.$$.fragment,d),h(YA.$$.fragment,d),h(ZA.$$.fragment,d),h(e0.$$.fragment,d),h(o0.$$.fragment,d),h(r0.$$.fragment,d),h(t0.$$.fragment,d),h(a0.$$.fragment,d),h(s0.$$.fragment,d),h(l0.$$.fragment,d),h(i0.$$.fragment,d),h(d0.$$.fragment,d),h(c0.$$.fragment,d),h(f0.$$.fragment,d),h(g0.$$.fragment,d),h(h0.$$.fragment,d),h(p0.$$.fragment,d),h(_0.$$.fragment,d),h(u0.$$.fragment,d),h(b0.$$.fragment,d),h(T0.$$.fragment,d),h(F0.$$.fragment,d),h(C0.$$.fragment,d),h(M0.$$.fragment,d),h(E0.$$.fragment,d),h(y0.$$.fragment,d),h(A0.$$.fragment,d),h(L0.$$.fragment,d),h(B0.$$.fragment,d),h(x0.$$.fragment,d),h(k0.$$.fragment,d),h(R0.$$.fragment,d),h(P0.$$.fragment,d),h($0.$$.fragment,d),h(I0.$$.fragment,d),h(j0.$$.fragment,d),h(D0.$$.fragment,d),h(N0.$$.fragment,d),h(O0.$$.fragment,d),h(G0.$$.fragment,d),h(X0.$$.fragment,d),h(V0.$$.fragment,d),h(z0.$$.fragment,d),h(W0.$$.fragment,d),h(H0.$$.fragment,d),h(U0.$$.fragment,d),h(J0.$$.fragment,d),h(Y0.$$.fragment,d),h(K0.$$.fragment,d),h(Z0.$$.fragment,d),h(oL.$$.fragment,d),h(rL.$$.fragment,d),h(tL.$$.fragment,d),h(aL.$$.fragment,d),h(nL.$$.fragment,d),h(sL.$$.fragment,d),h(iL.$$.fragment,d),h(dL.$$.fragment,d),h(cL.$$.fragment,d),h(fL.$$.fragment,d),h(mL.$$.fragment,d),h(gL.$$.fragment,d),h(pL.$$.fragment,d),h(_L.$$.fragment,d),h(uL.$$.fragment,d),h(bL.$$.fragment,d),h(vL.$$.fragment,d),h(TL.$$.fragment,d),h(CL.$$.fragment,d),h(ML.$$.fragment,d),h(EL.$$.fragment,d),h(yL.$$.fragment,d),h(wL.$$.fragment,d),h(AL.$$.fragment,d),h(BL.$$.fragment,d),h(xL.$$.fragment,d),h(kL.$$.fragment,d),h(SL.$$.fragment,d),h(PL.$$.fragment,d),h($L.$$.fragment,d),h(jL.$$.fragment,d),h(DL.$$.fragment,d),h(NL.$$.fragment,d),h(qL.$$.fragment,d),Zke=!0)},o(d){p(fe.$$.fragment,d),p(Na.$$.fragment,d),p(U4.$$.fragment,d),p(J4.$$.fragment,d),p(qf.$$.fragment,d),p(Y4.$$.fragment,d),p(K4.$$.fragment,d),p(oE.$$.fragment,d),p(rE.$$.fragment,d),p(tE.$$.fragment,d),p(aE.$$.fragment,d),p(nE.$$.fragment,d),p(iE.$$.fragment,d),p(dE.$$.fragment,d),p(cE.$$.fragment,d),p(fE.$$.fragment,d),p(mE.$$.fragment,d),p(pE.$$.fragment,d),p(Mh.$$.fragment,d),p(_E.$$.fragment,d),p(uE.$$.fragment,d),p(bE.$$.fragment,d),p(vE.$$.fragment,d),p(CE.$$.fragment,d),p(Ph.$$.fragment,d),p(ME.$$.fragment,d),p(EE.$$.fragment,d),p(yE.$$.fragment,d),p(wE.$$.fragment,d),p(LE.$$.fragment,d),p(BE.$$.fragment,d),p(xE.$$.fragment,d),p(kE.$$.fragment,d),p(RE.$$.fragment,d),p(SE.$$.fragment,d),p($E.$$.fragment,d),p(IE.$$.fragment,d),p(jE.$$.fragment,d),p(DE.$$.fragment,d),p(NE.$$.fragment,d),p(qE.$$.fragment,d),p(GE.$$.fragment,d),p(XE.$$.fragment,d),p(VE.$$.fragment,d),p(zE.$$.fragment,d),p(WE.$$.fragment,d),p(QE.$$.fragment,d),p(UE.$$.fragment,d),p(JE.$$.fragment,d),p(YE.$$.fragment,d),p(KE.$$.fragment,d),p(ZE.$$.fragment,d),p(ey.$$.fragment,d),p(ry.$$.fragment,d),p(ty.$$.fragment,d),p(ay.$$.fragment,d),p(ny.$$.fragment,d),p(sy.$$.fragment,d),p(ly.$$.fragment,d),p(dy.$$.fragment,d),p(cy.$$.fragment,d),p(fy.$$.fragment,d),p(my.$$.fragment,d),p(gy.$$.fragment,d),p(hy.$$.fragment,d),p(_y.$$.fragment,d),p(uy.$$.fragment,d),p(by.$$.fragment,d),p(vy.$$.fragment,d),p(Ty.$$.fragment,d),p(Fy.$$.fragment,d),p(My.$$.fragment,d),p(Ey.$$.fragment,d),p(yy.$$.fragment,d),p(wy.$$.fragment,d),p(Ay.$$.fragment,d),p(Ly.$$.fragment,d),p(xy.$$.fragment,d),p(ky.$$.fragment,d),p(Ry.$$.fragment,d),p(Sy.$$.fragment,d),p(Py.$$.fragment,d),p($y.$$.fragment,d),p(jy.$$.fragment,d),p(Dy.$$.fragment,d),p(Ny.$$.fragment,d),p(qy.$$.fragment,d),p(Oy.$$.fragment,d),p(Gy.$$.fragment,d),p(Vy.$$.fragment,d),p(zy.$$.fragment,d),p(Wy.$$.fragment,d),p(Qy.$$.fragment,d),p(Hy.$$.fragment,d),p(Uy.$$.fragment,d),p(Yy.$$.fragment,d),p(Ky.$$.fragment,d),p(Zy.$$.fragment,d),p(ew.$$.fragment,d),p(ow.$$.fragment,d),p(rw.$$.fragment,d),p(aw.$$.fragment,d),p(nw.$$.fragment,d),p(sw.$$.fragment,d),p(lw.$$.fragment,d),p(iw.$$.fragment,d),p(dw.$$.fragment,d),p(fw.$$.fragment,d),p(mw.$$.fragment,d),p(gw.$$.fragment,d),p(hw.$$.fragment,d),p(pw.$$.fragment,d),p(_w.$$.fragment,d),p(bw.$$.fragment,d),p(vw.$$.fragment,d),p(Tw.$$.fragment,d),p(Fw.$$.fragment,d),p(Cw.$$.fragment,d),p(Mw.$$.fragment,d),p(yw.$$.fragment,d),p(ww.$$.fragment,d),p(Aw.$$.fragment,d),p(Lw.$$.fragment,d),p(Bw.$$.fragment,d),p(xw.$$.fragment,d),p(Rw.$$.fragment,d),p(Sw.$$.fragment,d),p(Pw.$$.fragment,d),p(Iw.$$.fragment,d),p(jw.$$.fragment,d),p(Dw.$$.fragment,d),p(qw.$$.fragment,d),p(Ow.$$.fragment,d),p(Gw.$$.fragment,d),p(Xw.$$.fragment,d),p(Vw.$$.fragment,d),p(zw.$$.fragment,d),p(Qw.$$.fragment,d),p(Hw.$$.fragment,d),p(Uw.$$.fragment,d),p(Jw.$$.fragment,d),p(Yw.$$.fragment,d),p(Kw.$$.fragment,d),p(e6.$$.fragment,d),p(o6.$$.fragment,d),p(r6.$$.fragment,d),p(t6.$$.fragment,d),p(a6.$$.fragment,d),p(n6.$$.fragment,d),p(l6.$$.fragment,d),p(i6.$$.fragment,d),p(d6.$$.fragment,d),p(c6.$$.fragment,d),p(f6.$$.fragment,d),p(m6.$$.fragment,d),p(h6.$$.fragment,d),p(p6.$$.fragment,d),p(_6.$$.fragment,d),p(b6.$$.fragment,d),p(v6.$$.fragment,d),p(T6.$$.fragment,d),p(C6.$$.fragment,d),p(M6.$$.fragment,d),p(E6.$$.fragment,d),p(y6.$$.fragment,d),p(w6.$$.fragment,d),p(A6.$$.fragment,d),p(B6.$$.fragment,d),p(x6.$$.fragment,d),p(k6.$$.fragment,d),p(R6.$$.fragment,d),p(S6.$$.fragment,d),p(P6.$$.fragment,d),p(I6.$$.fragment,d),p(j6.$$.fragment,d),p(D6.$$.fragment,d),p(N6.$$.fragment,d),p(q6.$$.fragment,d),p(O6.$$.fragment,d),p(X6.$$.fragment,d),p(V6.$$.fragment,d),p(z6.$$.fragment,d),p(W6.$$.fragment,d),p(Q6.$$.fragment,d),p(H6.$$.fragment,d),p(J6.$$.fragment,d),p(Y6.$$.fragment,d),p(K6.$$.fragment,d),p(eA.$$.fragment,d),p(oA.$$.fragment,d),p(rA.$$.fragment,d),p(aA.$$.fragment,d),p(nA.$$.fragment,d),p(sA.$$.fragment,d),p(lA.$$.fragment,d),p(iA.$$.fragment,d),p(dA.$$.fragment,d),p(fA.$$.fragment,d),p(mA.$$.fragment,d),p(gA.$$.fragment,d),p(hA.$$.fragment,d),p(pA.$$.fragment,d),p(_A.$$.fragment,d),p(bA.$$.fragment,d),p(vA.$$.fragment,d),p(TA.$$.fragment,d),p(FA.$$.fragment,d),p(CA.$$.fragment,d),p(MA.$$.fragment,d),p(yA.$$.fragment,d),p(wA.$$.fragment,d),p(AA.$$.fragment,d),p(LA.$$.fragment,d),p(BA.$$.fragment,d),p(xA.$$.fragment,d),p(RA.$$.fragment,d),p(SA.$$.fragment,d),p(PA.$$.fragment,d),p($A.$$.fragment,d),p(IA.$$.fragment,d),p(jA.$$.fragment,d),p(NA.$$.fragment,d),p(qA.$$.fragment,d),p(OA.$$.fragment,d),p(GA.$$.fragment,d),p(XA.$$.fragment,d),p(VA.$$.fragment,d),p(WA.$$.fragment,d),p(QA.$$.fragment,d),p(HA.$$.fragment,d),p(UA.$$.fragment,d),p(JA.$$.fragment,d),p(YA.$$.fragment,d),p(ZA.$$.fragment,d),p(e0.$$.fragment,d),p(o0.$$.fragment,d),p(r0.$$.fragment,d),p(t0.$$.fragment,d),p(a0.$$.fragment,d),p(s0.$$.fragment,d),p(l0.$$.fragment,d),p(i0.$$.fragment,d),p(d0.$$.fragment,d),p(c0.$$.fragment,d),p(f0.$$.fragment,d),p(g0.$$.fragment,d),p(h0.$$.fragment,d),p(p0.$$.fragment,d),p(_0.$$.fragment,d),p(u0.$$.fragment,d),p(b0.$$.fragment,d),p(T0.$$.fragment,d),p(F0.$$.fragment,d),p(C0.$$.fragment,d),p(M0.$$.fragment,d),p(E0.$$.fragment,d),p(y0.$$.fragment,d),p(A0.$$.fragment,d),p(L0.$$.fragment,d),p(B0.$$.fragment,d),p(x0.$$.fragment,d),p(k0.$$.fragment,d),p(R0.$$.fragment,d),p(P0.$$.fragment,d),p($0.$$.fragment,d),p(I0.$$.fragment,d),p(j0.$$.fragment,d),p(D0.$$.fragment,d),p(N0.$$.fragment,d),p(O0.$$.fragment,d),p(G0.$$.fragment,d),p(X0.$$.fragment,d),p(V0.$$.fragment,d),p(z0.$$.fragment,d),p(W0.$$.fragment,d),p(H0.$$.fragment,d),p(U0.$$.fragment,d),p(J0.$$.fragment,d),p(Y0.$$.fragment,d),p(K0.$$.fragment,d),p(Z0.$$.fragment,d),p(oL.$$.fragment,d),p(rL.$$.fragment,d),p(tL.$$.fragment,d),p(aL.$$.fragment,d),p(nL.$$.fragment,d),p(sL.$$.fragment,d),p(iL.$$.fragment,d),p(dL.$$.fragment,d),p(cL.$$.fragment,d),p(fL.$$.fragment,d),p(mL.$$.fragment,d),p(gL.$$.fragment,d),p(pL.$$.fragment,d),p(_L.$$.fragment,d),p(uL.$$.fragment,d),p(bL.$$.fragment,d),p(vL.$$.fragment,d),p(TL.$$.fragment,d),p(CL.$$.fragment,d),p(ML.$$.fragment,d),p(EL.$$.fragment,d),p(yL.$$.fragment,d),p(wL.$$.fragment,d),p(AL.$$.fragment,d),p(BL.$$.fragment,d),p(xL.$$.fragment,d),p(kL.$$.fragment,d),p(SL.$$.fragment,d),p(PL.$$.fragment,d),p($L.$$.fragment,d),p(jL.$$.fragment,d),p(DL.$$.fragment,d),p(NL.$$.fragment,d),p(qL.$$.fragment,d),Zke=!1},d(d){t(J),d&&t(Pe),d&&t(de),_(fe),d&&t($f),d&&t(ca),d&&t(Le),d&&t(co),d&&t(jf),_(Na,d),d&&t(fo),d&&t(he),d&&t(zo),d&&t(qa),d&&t(KBe),d&&t(Xi),_(U4),d&&t(ZBe),d&&t(zn),d&&t(exe),_(J4,d),d&&t(oxe),d&&t(X7),d&&t(rxe),_(qf,d),d&&t(txe),d&&t(Vi),_(Y4),d&&t(axe),d&&t(Wo),_(K4),_(oE),_(rE),_(tE),d&&t(nxe),d&&t(Wi),_(aE),d&&t(sxe),d&&t(Qo),_(nE),_(iE),_(dE),_(cE),d&&t(lxe),d&&t(Qi),_(fE),d&&t(ixe),d&&t(Ho),_(mE),_(pE),_(Mh),_(_E),_(uE),d&&t(dxe),d&&t(Hi),_(bE),d&&t(cxe),d&&t(Uo),_(vE),_(CE),_(Ph),_(ME),_(EE),d&&t(fxe),d&&t(Ji),_(yE),d&&t(mxe),d&&t(Jo),_(wE),_(LE),_(BE),_(xE),_(kE),d&&t(gxe),d&&t(Zi),_(RE),d&&t(hxe),d&&t(Yo),_(SE),_($E),_(IE),_(jE),_(DE),d&&t(pxe),d&&t(rd),_(NE),d&&t(_xe),d&&t(Ko),_(qE),_(GE),_(XE),_(VE),_(zE),d&&t(uxe),d&&t(nd),_(WE),d&&t(bxe),d&&t(Zo),_(QE),_(UE),_(JE),_(YE),_(KE),d&&t(vxe),d&&t(id),_(ZE),d&&t(Txe),d&&t(er),_(ey),_(ry),_(ty),_(ay),_(ny),d&&t(Fxe),d&&t(fd),_(sy),d&&t(Cxe),d&&t(or),_(ly),_(dy),_(cy),_(fy),_(my),d&&t(Mxe),d&&t(hd),_(gy),d&&t(Exe),d&&t(rr),_(hy),_(_y),_(uy),_(by),_(vy),d&&t(yxe),d&&t(ud),_(Ty),d&&t(wxe),d&&t(tr),_(Fy),_(My),_(Ey),_(yy),_(wy),d&&t(Axe),d&&t(Td),_(Ay),d&&t(Lxe),d&&t(ar),_(Ly),_(xy),_(ky),_(Ry),_(Sy),d&&t(Bxe),d&&t(Md),_(Py),d&&t(xxe),d&&t(nr),_($y),_(jy),_(Dy),_(Ny),_(qy),d&&t(kxe),d&&t(wd),_(Oy),d&&t(Rxe),d&&t(sr),_(Gy),_(Vy),_(zy),_(Wy),_(Qy),d&&t(Sxe),d&&t(Bd),_(Hy),d&&t(Pxe),d&&t(lr),_(Uy),_(Yy),_(Ky),_(Zy),_(ew),d&&t($xe),d&&t(Rd),_(ow),d&&t(Ixe),d&&t(ir),_(rw),_(aw),_(nw),_(sw),_(lw),d&&t(jxe),d&&t($d),_(iw),d&&t(Dxe),d&&t(dr),_(dw),_(fw),_(mw),_(gw),_(hw),d&&t(Nxe),d&&t(Dd),_(pw),d&&t(qxe),d&&t(cr),_(_w),_(bw),_(vw),_(Tw),_(Fw),d&&t(Oxe),d&&t(Od),_(Cw),d&&t(Gxe),d&&t(fr),_(Mw),_(yw),_(ww),_(Aw),_(Lw),d&&t(Xxe),d&&t(Vd),_(Bw),d&&t(Vxe),d&&t(mr),_(xw),_(Rw),_(Sw),_(Pw),_(Iw),d&&t(zxe),d&&t(Qd),_(jw),d&&t(Wxe),d&&t(gr),_(Dw),_(qw),_(Ow),_(Gw),_(Xw),d&&t(Qxe),d&&t(Jd),_(Vw),d&&t(Hxe),d&&t(hr),_(zw),_(Qw),_(Hw),_(Uw),_(Jw),d&&t(Uxe),d&&t(ec),_(Yw),d&&t(Jxe),d&&t(pr),_(Kw),_(e6),_(o6),_(r6),_(t6),d&&t(Yxe),d&&t(tc),_(a6),d&&t(Kxe),d&&t(_r),_(n6),_(l6),_(i6),_(d6),_(c6),d&&t(Zxe),d&&t(sc),_(f6),d&&t(eke),d&&t(ur),_(m6),_(h6),_(p6),_(_6),_(b6),d&&t(oke),d&&t(dc),_(v6),d&&t(rke),d&&t(br),_(T6),_(C6),_(M6),_(E6),_(y6),d&&t(tke),d&&t(mc),_(w6),d&&t(ake),d&&t(vr),_(A6),_(B6),_(x6),_(k6),_(R6),d&&t(nke),d&&t(pc),_(S6),d&&t(ske),d&&t(Tr),_(P6),_(I6),_(j6),_(D6),_(N6),d&&t(lke),d&&t(bc),_(q6),d&&t(ike),d&&t(Fr),_(O6),_(X6),_(V6),_(z6),_(W6),d&&t(dke),d&&t(Fc),_(Q6),d&&t(cke),d&&t(Cr),_(H6),_(J6),_(Y6),_(K6),_(eA),d&&t(fke),d&&t(Ec),_(oA),d&&t(mke),d&&t(Mr),_(rA),_(aA),_(nA),_(sA),_(lA),d&&t(gke),d&&t(Ac),_(iA),d&&t(hke),d&&t(Er),_(dA),_(fA),_(mA),_(gA),_(hA),d&&t(pke),d&&t(xc),_(pA),d&&t(_ke),d&&t(yr),_(_A),_(bA),_(vA),_(TA),_(FA),d&&t(uke),d&&t(Sc),_(CA),d&&t(bke),d&&t(wr),_(MA),_(yA),_(wA),_(AA),_(LA),d&&t(vke),d&&t(Ic),_(BA),d&&t(Tke),d&&t(Ar),_(xA),_(RA),_(SA),_(PA),_($A),d&&t(Fke),d&&t(Nc),_(IA),d&&t(Cke),d&&t(Lr),_(jA),_(NA),_(qA),_(OA),_(GA),d&&t(Mke),d&&t(Gc),_(XA),d&&t(Eke),d&&t(Br),_(VA),_(WA),_(QA),_(HA),_(UA),d&&t(yke),d&&t(zc),_(JA),d&&t(wke),d&&t(xr),_(YA),_(ZA),_(e0),_(o0),_(r0),d&&t(Ake),d&&t(Hc),_(t0),d&&t(Lke),d&&t(kr),_(a0),_(s0),_(l0),_(i0),_(d0),d&&t(Bke),d&&t(Yc),_(c0),d&&t(xke),d&&t(Rr),_(f0),_(g0),_(h0),_(p0),_(_0),d&&t(kke),d&&t(ef),_(u0),d&&t(Rke),d&&t(Sr),_(b0),_(T0),_(F0),_(C0),_(M0),d&&t(Ske),d&&t(tf),_(E0),d&&t(Pke),d&&t(Pr),_(y0),_(A0),_(L0),_(B0),_(x0),d&&t($ke),d&&t(sf),_(k0),d&&t(Ike),d&&t($r),_(R0),_(P0),_($0),_(I0),_(j0),d&&t(jke),d&&t(cf),_(D0),d&&t(Dke),d&&t(Ir),_(N0),_(O0),_(G0),_(X0),_(V0),d&&t(Nke),d&&t(gf),_(z0),d&&t(qke),d&&t(jr),_(W0),_(H0),_(U0),_(J0),_(Y0),d&&t(Oke),d&&t(_f),_(K0),d&&t(Gke),d&&t(Dr),_(Z0),_(oL),_(rL),_(tL),_(aL),d&&t(Xke),d&&t(vf),_(nL),d&&t(Vke),d&&t(Nr),_(sL),_(iL),_(dL),_(cL),_(fL),d&&t(zke),d&&t(Cf),_(mL),d&&t(Wke),d&&t(qr),_(gL),_(pL),_(_L),_(uL),_(bL),d&&t(Qke),d&&t(yf),_(vL),d&&t(Hke),d&&t(Or),_(TL),_(CL),_(ML),_(EL),_(yL),d&&t(Uke),d&&t(Lf),_(wL),d&&t(Jke),d&&t(Gr),_(AL),_(BL),_(xL),_(kL),_(SL),d&&t(Yke),d&&t(kf),_(PL),d&&t(Kke),d&&t(Xr),_($L),_(jL),_(DL),_(NL),_(qL)}}}const FTt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function CTt($i,J,Pe){let{fw:de}=J;return $i.$$set=ge=>{"fw"in ge&&Pe(0,de=ge.fw)},[de]}class BTt extends gTt{constructor(J){super();hTt(this,J,CTt,TTt,pTt,{fw:0})}}export{BTt as default,FTt as metadata};
